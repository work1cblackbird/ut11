#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ Локализация

// Возвращает КБК с учетом вида налогового обязательства
//
// Параметры:
//   ТипНалога                  - СправочникСсылка.ВидыНалоговВзносов
//   ВидНалоговогоОбязательства - ПеречислениеСсылка.ВидыПлатежейВГосБюджет
//   Период                     - Дата
//
// Возвращаемое значение:
//   Строка
//
Функция КБКПоВидуНалоговогоОбязательства(ТипНалога, Знач ВидНалоговогоОбязательства = Неопределено, Знач Период = Неопределено) Экспорт
	
	КБК = КБКПоТипуНалога(ТипНалога);
	Если ПустаяСтрока(КБК) Тогда
		Возврат "";
	КонецЕсли;
	
	
	Возврат КБК;
	
КонецФункции

// Возвращает вид налога по КБК, если определить не удалось возвращает ПрочиеНалогиИСборы
//
// Параметры:
//   КодБК - Строка
// 
// Возвращаемое значение:
//   СправочникСсылка.ВидыНалоговВзносов
//
Функция ТипНалогаПоКБК(Знач КодБК) Экспорт
	
	ВидНалога = ПрочиеНалогиИСборы;
	Если НЕ ПлатежиВБюджетКлиентСервер.КБКЗадан(КодБК) Тогда
		Возврат ВидНалога;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНалоговВзносов.Ссылка
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК ВидыНалоговВзносов
	|ГДЕ
	|	ВидыНалоговВзносов.Предопределенный";
	Выборка = Запрос.Выполнить().Выбрать();
	ШаблонСравнения = ШаблонСравненияКБК(КодБК);
	Пока Выборка.Следующий() Цикл
		Если ШаблонСравнения = ШаблонСравненияКБК(КБКПоТипуНалога(Выборка.Ссылка)) Тогда
			ВидНалога = Выборка.Ссылка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидНалога;
	
КонецФункции

//-- Локализация

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов справочника.
//  ТабличныеЧасти - Структура - Ключ - Имя табличной части объекта.
//                               Значение - Выгрузка в таблицу значений пустой табличной части.
//
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт
	
	Элемент = Элементы.Добавить();
	Элемент.ИмяПредопределенныхДанных = "НДС";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", НаименованиеПредопределенногоЭлемента(Элемент.ИмяПредопределенныхДанных), КодыЯзыков);

	ВидыНалоговВзносовЛокализация.ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти);
	
КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.НаборыУпаковок - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	Возврат;
КонецПроцедуры

// Наименование предопределенного элемента.
// 
// Параметры:
//  ИмяПредопределенного - Строка - Имя предопределенного элемента
// 
// Возвращаемое значение:
//  Строка - Наименование предопределенного элемента
Функция НаименованиеПредопределенногоЭлемента(ИмяПредопределенного) Экспорт
	Если ИмяПредопределенного = "ЕдиныйНалоговыйПлатеж" Тогда
		Возврат "ru = 'Единый налоговый платеж'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ЕНВД" Тогда
		Возврат "ru = 'ЕНВД'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ЕСХН" Тогда
		Возврат "ru = 'ЕСХН'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ЗемельныйНалог" Тогда
		Возврат "ru = 'Земельный налог'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаИмущество" Тогда
		Возврат "ru = 'Налог на имущество организаций'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаПрибыль_РегиональныйБюджет" Тогда
		Возврат "ru = 'Налог на прибыль, региональный бюджет'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаПрибыль_ФедеральныйБюджет" Тогда
		Возврат "ru = 'Налог на прибыль, федеральный бюджет'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НалогНаПрибыль_НалоговыйАгент" Тогда
		Возврат "ru = 'Налог на прибыль при исполнении обязанностей налогового агента'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС" Тогда
		Возврат "ru = 'НДС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_ВвозимыеТовары" Тогда
		Возврат "ru = 'НДС при импорте товаров из ЕАЭС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_НалоговыйАгент" Тогда
		Возврат "ru = 'НДС при исполнении обязанностей налогового агента'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛ" Тогда
		Возврат "ru = 'НДФЛ при исполнении обязанностей налогового агента'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛ_ИП" Тогда
		Возврат "ru = 'НДФЛ индивидуального предпринимателя '"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПрочиеНалогиИСборы" Тогда
		Возврат "ru = 'Прочие налоги и сборы'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ТорговыйСбор" Тогда
		Возврат "ru = 'Торговый сбор'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ТранспортныйНалог" Тогда
		Возврат "ru = 'Транспортный налог организаций'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "УСН_Доходы" Тогда
		Возврат "ru = 'Налог при УСН (доходы)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "УСН_ДоходыМинусРасходы" Тогда
		Возврат "ru = 'Налог при УСН (доходы минус расходы)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "УСН_МинимальныйНалог" Тогда
		Возврат "ru = 'Минимальный налог УСН'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРПоСуммарномуТарифу" Тогда
		Возврат "ru = 'ПФР - по суммарному тарифу с 1 января 2014 года'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРСтраховаяЧасть" Тогда
		Возврат "ru = 'Страховые взносы в ПФР'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРНакопительнаяЧасть" Тогда
		Возврат "ru = 'Страховые взносы в ПФР, накопительная часть (до 2014 г.)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРДополнительныйТарифЛЭ" Тогда
		Возврат "ru = 'Взносы на выплату доплат к пенсии членам летных экипажей'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРДополнительныйТарифШахтеры" Тогда
		Возврат "ru = 'Взносы в ПФР (дополнительный тариф шахтеров)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРЗаЗанятыхНаПодземныхИВредныхРаботах" Тогда
		Возврат "ru = 'Взносы в ПФР (дополнительный тариф за занятых на работах с вредными условиями труда)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРЗаЗанятыхНаТяжелыхИПрочихРаботах" Тогда
		Возврат "ru = 'Взносы в ПФР (дополнительный тариф за занятых на работах с тяжелыми условиями труда)'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРСПревышения" Тогда
		Возврат "ru = 'ПФР - с базы сверх предельной величины, с 1 января 2016 года'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ФФОМС" Тогда
		Возврат "ru = 'Страховые взносы в ФФОМС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ТФОМС" Тогда
		Возврат "ru = 'ТФОМС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ФСС" Тогда
		Возврат "ru = 'Страховые взносы в ФСС'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ФССНС" Тогда
		Возврат "ru = 'Страховые взносы от несчастных случаев'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДоходыКонтрагентов" Тогда
		Возврат "ru = 'НДФЛ с доходов контрагентов'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДивиденды" Тогда
		Возврат "ru = 'НДФЛ с дивидендов'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДивидендыСотрудникам" Тогда
		Возврат "ru = 'НДФЛ с дивидендов работникам'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДоначисленныйПоРезультатамПроверки" Тогда
		Возврат "ru = 'НДФЛ, доначисленный по результатам проверки'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛПередачаЗадолженностиВНалоговыйОрган" Тогда
		Возврат "ru = 'НДФЛ передача задолженности в налоговый орган'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛПрочиеРасчетыСПерсоналом" Тогда
		Возврат "ru = 'НДФЛ с доходов по прочим операциям с персоналом'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛСПревышения" Тогда
		Возврат "ru = 'НДФЛ с доходов свыше предельной величины, исчисленный налоговым агентом'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДФЛДивидендыСПревышения" Тогда
		Возврат "ru = 'НДФЛ с дивидендов свыше предельной величины'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ПФРДоПредельнойВеличины" Тогда
		Возврат "ru = 'ПФР - с базы до предельной величины'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "НДС_ОбратноеОбложение" Тогда
		Возврат "ru = 'НДС налогового агента по отдельным видам товаров'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "АУСН" Тогда
		Возврат "ru = 'Налог при АУСН'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "СтраховыеВзносыЕдиныйТариф" Тогда
		Возврат "ru = 'Страховые взносы по единому тарифу'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ОПСИностранныхРаботников" Тогда
		Возврат "ru = 'Взносы на пенсионное страхование иностранных работников'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ОМСИностранныхРаботников" Тогда
		Возврат "ru = 'Взносы на медицинское страхование иностранных работников'"; // @НСтр-1
	ИначеЕсли ИмяПредопределенного = "ОССИностранныхРаботников" Тогда
		Возврат "ru = 'Взносы на социальное страхование иностранных работников'"; // @НСтр-1
	КонецЕсли;
КонецФункции

// Получить ссылку предопределенного элемента.
// 
// Параметры:
//  ИмяПредопределенного - Строка - Имя предопределенного элемента
// 
// Возвращаемое значение:
//  СправочникСсылка.ВидыНалоговВзносов - Получить ссылку предопределенного элемента
Функция ПолучитьСсылкуПредопределенногоЭлемента(ИмяПредопределенного) Экспорт

	СправочникОбъект = Справочники.ВидыНалоговВзносов.СоздатьЭлемент();
	ИменаПредопределенных = СправочникОбъект.Метаданные().ПолучитьИменаПредопределенных();
	ЕстьПредопределенный = Ложь;
	Для Каждого Элемент Из ИменаПредопределенных Цикл
		Если НРег(Элемент) = НРег(ИмяПредопределенного) Тогда 
			ЕстьПредопределенный = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьПредопределенный Тогда
		Возврат Справочники.ВидыНалоговВзносов[ИмяПредопределенного];
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыНалоговВзносов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК ВидыНалоговВзносов
	|ГДЕ
	|	НРЕГ(ВидыНалоговВзносов.ИдентификаторЭлемента) = &Идентификатор";
	Запрос.УстановитьПараметр("Идентификатор", НРег(ИмяПредопределенного));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Ссылка = Выборка.Ссылка;
	Иначе
		НачатьТранзакцию();
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.ВидыНалоговВзносов");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Наименование = НаименованиеПредопределенногоЭлемента(ИмяПредопределенного); // Строка
			//@skip-check bsl-nstr-string-literal-format
			СправочникОбъект.Наименование = НСтр(Наименование, ОбщегоНазначения.КодОсновногоЯзыка());
			СправочникОбъект.ИдентификаторЭлемента = ИмяПредопределенного;
			СправочникОбъект.Записать();
			Ссылка = СправочникОбъект.Ссылка;
			ЗафиксироватьТранзакцию();
		Исключение

			ОтменитьТранзакцию();

			ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось записать предопределенный элемент справочника ""Виды налогов и взносов"" %1:
					|%2';"),
				ИмяПредопределенного,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстИсключения;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Ссылка;
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.ВидыНалоговВзносов);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецЕсли

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Возвращаемое значение:
// 	Массив - имена блокируемых реквизитов:
//		* БлокируемыйРеквизит - Строка - Имя блокируемого реквизита.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ПлательщикНалога");
	
	Возврат Результат;
	
КонецФункции

//++ Локализация

Функция КБКПоТипуНалога(ТипНалога)
	
	КодБК = "";
	Если ТипНалога = Справочники.ВидыНалоговВзносов.ЕдиныйНалоговыйПлатеж Тогда
		КодБК = "18201061201010000510";	// ЕдиныйНалоговыйПлатеж
	
	
	КонецЕсли;
	
	Возврат КодБК;
	
КонецФункции


Функция ШаблонСравненияКБК(КБК)
	
	ГраницыАдминистратораКБК  = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодГлавногоАдминистратора");
	ГраницыПеременнойЧастиКБК = ПлатежиВБюджетКлиентСервер.РасположениеЭлементаКБК("КодПодвидаДоходов");
	ШаблонКБК = СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", ГраницыАдминистратораКБК.Длина)
		+ Сред(КБК, ГраницыАдминистратораКБК.Начало + ГраницыАдминистратораКБК.Длина);
	ШаблонКБК = Лев(ШаблонКБК, ГраницыПеременнойЧастиКБК.Начало - 1)
		+ СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов("_", ГраницыПеременнойЧастиКБК.Длина)
		+ Сред(ШаблонКБК, ГраницыПеременнойЧастиКБК.Начало + ГраницыПеременнойЧастиКБК.Длина);
	
	Возврат ШаблонКБК;
	
КонецФункции

//-- Локализация

#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыНалоговВзносов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.33";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0b42d254-ccd3-453d-91c0-a524c04084ac");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыНалоговВзносов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	МассивКомментариев = Новый Массив(); // Массив из Строка
	МассивКомментариев.Добавить(НСтр("ru = 'Очищает предопределенные элементы справочника ""Виды налогов и взносов для WE""'"));
	Обработчик.Комментарий = СтрСоединить(МассивКомментариев, " ");
	
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив; // Массив из Строка
	Читаемые.Добавить(Метаданные.Справочники.ВидыНалоговВзносов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив из Строка
	Изменяемые.Добавить(Метаданные.Справочники.ВидыНалоговВзносов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив; // Массив из Строка
	Блокируемые.Добавить(Метаданные.Справочники.ВидыНалоговВзносов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьЭлемент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Ссылка
	|ИЗ
	|	Справочник.ВидыНалоговВзносов КАК Данные
	|ГДЕ
	|	Данные.ИдентификаторЭлемента = """"";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		ОписаниеИзменений = Новый Массив; // Массив из Строка
		ОписаниеИзменений.Добавить(НСтр("ru = 'При обновлении системы выполнены следующие операции:'"));
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыНалоговВзносов
			
			Если СправочникОбъект <> Неопределено Тогда
				СправочникОбъект.ИдентификаторЭлемента = СправочникОбъект.ИмяПредопределенныхДанных;
			КонецЕсли;
			ПредставлениеСсылки = Строка(СправочникОбъект);
			
			Если СправочникОбъект.Модифицированность() Тогда
				
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка);
				
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(),
				СтрокаТаблицы.Ссылка,
				ПредставлениеСсылки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
