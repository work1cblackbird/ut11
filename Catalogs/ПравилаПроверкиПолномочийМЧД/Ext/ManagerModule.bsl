// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолныеИменаОбъектов = Новый Массив;
	
	МетаданныеОбъекта = Метаданные.Справочники.ПравилаПроверкиПолномочийМЧД;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ПолныеИменаОбъектов, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПроверкиПолномочийМЧД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаПроверкиПолномочийПоМЧД
	|ИЗ
	|	РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПравилаПроверкиПолномочийМЧД КАК ПравилаПроверкиПолномочийМЧД
	|		ПО ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки = ПравилаПроверкиПолномочийМЧД.Ссылка
	|ГДЕ
	|	ПравилаПроверкиПолномочийМЧД.Ссылка > &ПравилоПроверки
	|	И НЕ ПравилаПроверкиПолномочийПоМЧД.Используется
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПроверкиПолномочийМЧД.Ссылка
	|ИЗ
	|	Справочник.ПравилаПроверкиПолномочийМЧД КАК ПравилаПроверкиПолномочийМЧД
	|ГДЕ
	|	ПравилаПроверкиПолномочийМЧД.Код = """"
	|	И ПравилаПроверкиПолномочийМЧД.Ссылка > &ПравилоПроверки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ПравилаПроверкиПолномочийПоМЧД.Ссылка
	|ИЗ
	|	ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД";
	
	ОтработаныВсеПравила = Ложь;
	ПравилоПроверки = ПустаяСсылка();
	
	Пока НЕ ОтработаныВсеПравила Цикл
		
		Запрос.УстановитьПараметр("ПравилоПроверки", ПравилоПроверки);
		МассивПравилПроверки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"); // Массив из СправочникСсылка.ПравилаПроверкиПолномочийМЧД
		КоличествоПравилПроверки = МассивПравилПроверки.Количество();
		ОтработаныВсеПравила = КоличествоПравилПроверки < 1000;
		
		Если МассивПравилПроверки.Количество() > 0 Тогда
			ПравилоПроверки = МассивПравилПроверки[КоличествоПравилПроверки - 1];
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивПравилПроверки);
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ИменаМетаданных = Новый Массив;
	ИменаМетаданных.Добавить("Справочник.ПравилаПроверкиПолномочийМЧД");
	
	ИменаБлокированныхМетаданных = Новый Массив();
	ИменаБлокированныхМетаданных.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
	ИменаБлокированныхМетаданных.Добавить("Справочник.МашиночитаемыеДоверенностиКонтрагентов");
	ИменаБлокированныхМетаданных.Добавить("Справочник.МЧД003");
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(
		Параметры.Очередь, ИменаБлокированныхМетаданных) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	СоздатьОтсутствующиеПравилаПоМЧДИДополнитьИмиВыбранныеДанные(ВыбранныеДанные);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоТиповымПолномочиямМЧД();
	Запрос.УстановитьПараметр("МассивСсылок", НаборСсылок);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПравил = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаОбъект);
			ПравилоОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			Записать = Ложь;
			
			ОбработатьДанные_УстановкаКода(ПравилоОбъект, Записать);

			Пока ВыборкаПравил.НайтиСледующий(СсылкаНаОбъект, "ПравилоПроверки") Цикл
				Если ВыборкаПравил.Используется Тогда
					Продолжить;
				КонецЕсли;
				ВключитьИспользованиеПравил(ВыборкаПравил.Доверенность, СсылкаНаОбъект, Истина);
				Если ТипЗнч(ВыборкаПравил.Доверенность) = Тип("СправочникСсылка.МЧД003") Тогда
					ОбработатьДанные_УстановитьТиповыеПравила(ПравилоОбъект, ВыборкаПравил, Записать);
				Иначе
					
					Запрос = Новый Запрос;
					Запрос.Текст = ТекстЗапросаПоТиповымПолномочиямМЧД002();
					МассивПолномочий = ПолномочияМашиночитаемойДоверенности002(ВыборкаПравил.Доверенность);
					Запрос.УстановитьПараметр("МассивПолномочий", МассивПолномочий);
					Запрос.УстановитьПараметр("ПравилоПроверки", СсылкаНаОбъект);
					Запрос.УстановитьПараметр("Доверенность", ВыборкаПравил.Доверенность);
					РезультатЗапроса = Запрос.Выполнить();

					Выборка002 = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Выборка002.Следующий();

					ОбработатьДанные_УстановитьТиповыеПравила(ПравилоОбъект, Выборка002, Записать);

				КонецЕсли;
			КонецЦикла;
			ВыборкаПравил.Сбросить();

			Если Записать Тогда
				ПравилоОбъект.Записать();
			КонецЕсли;

			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать правило проверки полномочий МЧД: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые правила проверки полномочий МЧД (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция правил проверки полномочий МЧД: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
		
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ИменаМетаданных);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Дополняет правилами которые отсутствовали на момент регистрации
//
// Параметры:
//  ВыбранныеДанные - см. ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике
Процедура СоздатьОтсутствующиеПравилаПоМЧДИДополнитьИмиВыбранныеДанные(ВыбранныеДанные) Экспорт
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		ВыбранныеДанные.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МЧД003.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МЧД003 КАК МЧД003
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО МЧД003.Ссылка = ПравилаПроверкиПолномочийПоМЧД.Доверенность
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО МашиночитаемыеДоверенностиОрганизаций.Ссылка = ПравилаПроверкиПолномочийПоМЧД.Доверенность
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиКонтрагентов.Ссылка
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиКонтрагентов КАК МашиночитаемыеДоверенностиКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО МашиночитаемыеДоверенностиКонтрагентов.Ссылка = ПравилаПроверкиПолномочийПоМЧД.Доверенность
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПравилоОбъект = СоздатьЭлемент();
		ПравилоОбъект.Записать();
		
		ВключитьИспользованиеПравил(Выборка.Ссылка, ПравилоОбъект.Ссылка);
		
		НовыеДанные = ВыбранныеДанные.Добавить();
		НовыеДанные.Ссылка = ПравилоОбъект.Ссылка;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает текст запроса для определения связей полномочий МЧД с типовыми полномочиями
//
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаПоТиповымПолномочиямМЧД()
	
	Текст = 
	"ВЫБРАТЬ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Ссылка КАК ПравилоПроверки,
	|	КлассификаторПолномочийМЧД003.ДополнительныйСкрипт КАК ТиповойДополнительныйСкрипт,
	|	КлассификаторПолномочийМЧД003.Скрипт КАК ТиповойСкрипт,
	|	КлассификаторПолномочийМЧД003.Наименование КАК ИмяПолномочия,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Скрипт КАК СкриптВПравилах,
	|	КлассификаторПолномочийМЧД003.НастройкиПроверки.(
	|		ИмяПоляДанных КАК ИмяПоляДанных,
	|		НачальноеЗначение КАК НачальноеЗначение,
	|		КонечноеЗначение КАК КонечноеЗначение,
	|		Список КАК Список) КАК ТиповаяНастройкаПоКонструктору,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.НастройкиПроверки.(
	|		ИмяПоляДанных КАК ИмяПоляДанных,
	|		НачальноеЗначение КАК НачальноеЗначение,
	|		КонечноеЗначение КАК КонечноеЗначение,
	|		Список КАК Список) КАК НастройкаПоКонструкторуВПравилах,
	|	ПравилаПроверкиПолномочийПоМЧД.Используется КАК Используется,
	|	ПравилаПроверкиПолномочийПоМЧД.Доверенность КАК Доверенность
	|ИЗ
	|	РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МЧД003.Полномочия КАК МЧД003Полномочия
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторПолномочийМЧД003 КАК КлассификаторПолномочийМЧД003
	|			ПО МЧД003Полномочия.Код = КлассификаторПолномочийМЧД003.Наименование
	|		ПО ПравилаПроверкиПолномочийПоМЧД.Доверенность = МЧД003Полномочия.Ссылка
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки В (&МассивСсылок)
	|	И ПравилаПроверкиПолномочийПоМЧД.Доверенность ССЫЛКА Справочник.МЧД003
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Ссылка КАК ПравилоПроверки,
	|	КлассификаторПолномочийФНСМЧД002.ДополнительныйСкрипт КАК ТиповойДополнительныйСкрипт,
	|	КлассификаторПолномочийФНСМЧД002.Скрипт КАК ТиповойСкрипт,
	|	КлассификаторПолномочийФНСМЧД002.Наименование КАК ИмяПолномочия,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Скрипт КАК СкриптВПравилах,
	|	КлассификаторПолномочийФНСМЧД002.НастройкиПроверки.(
	|		ИмяПоляДанных КАК ИмяПоляДанных,
	|		НачальноеЗначение КАК НачальноеЗначение,
	|		КонечноеЗначение КАК КонечноеЗначение,
	|		Список КАК Список) КАК ТиповаяНастройкаПоКонструктору,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.НастройкиПроверки.(
	|		ИмяПоляДанных КАК ИмяПоляДанных,
	|		НачальноеЗначение КАК НачальноеЗначение,
	|		КонечноеЗначение КАК КонечноеЗначение,
	|		Список КАК Список) КАК НастройкаПоКонструкторуВПравилах,
	|	ПравилаПроверкиПолномочийПоМЧД.Используется КАК Используется,
	|	ПравилаПроверкиПолномочийПоМЧД.Доверенность КАК Доверенность
	|ИЗ
	|	РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций.Полномочия КАК МЧД002Полномочия
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторПолномочийФНСМЧД002 КАК КлассификаторПолномочийФНСМЧД002
	|			ПО МЧД002Полномочия.Код = КлассификаторПолномочийФНСМЧД002.Наименование
	|		ПО ПравилаПроверкиПолномочийПоМЧД.Доверенность = МЧД002Полномочия.Ссылка
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки В (&МассивСсылок)
	|	И ПравилаПроверкиПолномочийПоМЧД.Доверенность ССЫЛКА Справочник.МашиночитаемыеДоверенностиОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Ссылка КАК ПравилоПроверки,
	|	NULL КАК ТиповойДополнительныйСкрипт,
	|	NULL КАК ТиповойСкрипт,
	|	NULL КАК ИмяПолномочия,
	|	NULL КАК СкриптВПравилах,
	|	ПУСТАЯТАБЛИЦА.(, , , ) КАК ТиповаяНастройкаПоКонструктору,
	|	ПУСТАЯТАБЛИЦА.(, , , ) КАК НастройкаПоКонструкторуВПравилах,
	|	ПравилаПроверкиПолномочийПоМЧД.Используется КАК Используется,
	|	ПравилаПроверкиПолномочийПоМЧД.Доверенность КАК Доверенность
	|ИЗ
	|	РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки В (&МассивСсылок)
	|	И ПравилаПроверкиПолномочийПоМЧД.Доверенность ССЫЛКА Справочник.МашиночитаемыеДоверенностиКонтрагентов
	|ИТОГИ
	|	МАКСИМУМ(Используется),
	|	МАКСИМУМ(Доверенность)
	|ПО
	|	ПравилоПроверки";
	
	Возврат Текст;
	
КонецФункции

// Возвращает текст запроса для определения связей полномочий МЧД с типовыми полномочиями
//
// Возвращаемое значение:
//  Строка
Функция ТекстЗапросаПоТиповымПолномочиямМЧД002()
	
	Текст =
	"ВЫБРАТЬ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Ссылка КАК ПравилоПроверки,
	|	КлассификаторПолномочийФНСМЧД002.Ссылка.ДополнительныйСкрипт КАК ТиповойДополнительныйСкрипт,
	|	КлассификаторПолномочийФНСМЧД002.Ссылка.Скрипт КАК ТиповойСкрипт,
	|	КлассификаторПолномочийФНСМЧД002.Ссылка.Наименование КАК ИмяПолномочия,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.Скрипт КАК СкриптВПравилах,
	|	КлассификаторПолномочийФНСМЧД002.Ссылка.НастройкиПроверки.(
	|		ИмяПоляДанных КАК ИмяПоляДанных,
	|		НачальноеЗначение КАК НачальноеЗначение,
	|		КонечноеЗначение КАК КонечноеЗначение,
	|		Список КАК Список) КАК ТиповаяНастройкаПоКонструктору,
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки.НастройкиПроверки.(
	|		ИмяПоляДанных КАК ИмяПоляДанных,
	|		НачальноеЗначение КАК НачальноеЗначение,
	|		КонечноеЗначение КАК КонечноеЗначение,
	|		Список КАК Список) КАК НастройкаПоКонструкторуВПравилах,
	|	ПравилаПроверкиПолномочийПоМЧД.Используется КАК Используется,
	|	ПравилаПроверкиПолномочийПоМЧД.Доверенность КАК Доверенность
	|ИЗ
	|	РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД,
	|	Справочник.КлассификаторПолномочийФНСМЧД002 КАК КлассификаторПолномочийФНСМЧД002
	|ГДЕ
	|	ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки = &ПравилоПроверки
	|	И ПравилаПроверкиПолномочийПоМЧД.Доверенность = &Доверенность
	|	И КлассификаторПолномочийФНСМЧД002.Наименование В(&МассивПолномочий)
	|ИТОГИ ПО
	|	ПравилоПроверки";
	
	Возврат Текст;

КонецФункции

// Включает правила для использования
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//  Используется - Булево
Процедура ВключитьИспользованиеПравил(Доверенность, ПравилоПроверки, Используется = Ложь)
	
	МенеджерЗаписи = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Доверенность = Доверенность;
	МенеджерЗаписи.ПравилоПроверки = ПравилоПроверки;
	МенеджерЗаписи.Используется = Используется;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

// Устанавливает типовые правила
// 
// Параметры:
//  ПравилоОбъект - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  ВыборкаПравила - ВыборкаИзРезультатаЗапроса:
//   * ПравилоПроверки - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
//   * ТиповойДополнительныйСкрипт - Строка
//   * ТиповойСкрипт - Строка
//   * ИмяПолномочия - Строка
//   * СкриптВПравилах - Строка
//   * ТиповаяНастройкаПоКонструктору - РезультатЗапроса:
//      ** ИмяПоляДанных - Строка
//      ** НачальноеЗначение - Число
//      ** КонечноеЗначение - Число
//      ** Список - ХранилищеЗначения
//   * НастройкаПоКонструкторуВПравилах - РезультатЗапроса:
//      ** ИмяПоляДанных - Строка
//      ** НачальноеЗначение - Число
//      ** КонечноеЗначение - Число
//      ** Список - ХранилищеЗначения
//  Записать - Булево
Процедура ОбработатьДанные_УстановитьТиповыеПравила(ПравилоОбъект, ВыборкаПравила, Записать)
	
	СкриптПоКонструкторуСуммойДокумента = "";
	СкриптПоКонструкторуСКонтрагентами = "";
	СкриптПоКонструктору = "";
	ТиповойСкрипт = "";
	ТиповойДополнительныйСкрипт = "";
	
	ШаблонТиповогоСкрипта =
		НСтр("ru = '// Типовое правило %1
		|%2'");
	
	СтрокаПравилПоСуммеДокументов = ПравилоОбъект.НастройкиПроверки.Найти("СуммаДокумента", "ИмяПоляДанных");
	Если Не СтрокаПравилПоСуммеДокументов = Неопределено Тогда
		СкриптПоКонструкторуСуммойДокумента = 
		"Если Не (%1 %2 %3) Тогда
		|	Возврат;
		|КонецЕсли;";
		Параметр1 = "";
		Параметр2 = "";
		Параметр3 = "";
		Если СтрокаПравилПоСуммеДокументов.НачальноеЗначение > 0
			И СтрокаПравилПоСуммеДокументов.КонечноеЗначение > 0 Тогда
			Параметр1 = СтрШаблон("Параметры.ЭлектронныйДокумент.СуммаДокумента >= %1",
				Формат(СтрокаПравилПоСуммеДокументов.НачальноеЗначение, "ЧГ=0"));
			Параметр2 = "И";
			Параметр3 = СтрШаблон("Параметры.ЭлектронныйДокумент.СуммаДокумента <= %1",
				Формат(СтрокаПравилПоСуммеДокументов.КонечноеЗначение, "ЧГ=0"));
		ИначеЕсли СтрокаПравилПоСуммеДокументов.НачальноеЗначение = 0
			И СтрокаПравилПоСуммеДокументов.КонечноеЗначение > 0 Тогда
			Параметр1 = СтрШаблон("Параметры.ЭлектронныйДокумент.СуммаДокумента <= %1",
				Формат(СтрокаПравилПоСуммеДокументов.КонечноеЗначение, "ЧГ=0"));
		ИначеЕсли СтрокаПравилПоСуммеДокументов.НачальноеЗначение > 0
			И СтрокаПравилПоСуммеДокументов.КонечноеЗначение = 0 Тогда
			Параметр1 = СтрШаблон("Параметры.ЭлектронныйДокумент.СуммаДокумента >= %1",
				Формат(СтрокаПравилПоСуммеДокументов.НачальноеЗначение, "ЧГ=0"));
		КонецЕсли;
		СкриптПоКонструкторуСуммойДокумента =
			СтрШаблон(СкриптПоКонструкторуСуммойДокумента, Параметр1, Параметр2, Параметр3);
	КонецЕсли;
	
	СтрокаПравилПоКонтрагентам = ПравилоОбъект.НастройкиПроверки.Найти("Контрагент", "ИмяПоляДанных");
	Если Не СтрокаПравилПоКонтрагентам = Неопределено Тогда
		СкриптПоКонструкторуСКонтрагентами =
		"Если Не (%1
		|	) Тогда
		|	Возврат;
		|КонецЕсли;";
		РазделительИли = "
		|		Или ";
		ПеречислениеПоКонтрагентам = Новый Массив;
		СписокКонтрагентов = СтрокаПравилПоКонтрагентам.Список.Получить();
		Для Счетчик = 0 По СписокКонтрагентов.Количество() - 1 Цикл
			ШаблонУсловия = "Параметры.ЭлектронныйДокумент.Контрагент.ИНН = ""%1"" // %2";
			ПеречислениеПоКонтрагентам.Добавить(
				СтрШаблон(
					ШаблонУсловия,
					СписокКонтрагентов[Счетчик].Значение.ИНН,
					СписокКонтрагентов[Счетчик].Значение.Наименование));
		КонецЦикла;
		СкриптПоКонструкторуСКонтрагентами =
			СтрШаблон(СкриптПоКонструкторуСКонтрагентами, СтрСоединить(ПеречислениеПоКонтрагентам, РазделительИли));
	КонецЕсли;
	
	СтрокаПравилПоДокументам = ПравилоОбъект.НастройкиПроверки.Найти("ВидДокумента", "ИмяПоляДанных");
	Если СтрокаПравилПоДокументам <> Неопределено Тогда
		СписокПравил = СтрокаПравилПоДокументам.Список.Получить();
	Иначе
		СтрокаПравилПоДокументам = ПравилоОбъект.НастройкиПроверки.Добавить();
		СтрокаПравилПоДокументам.ИмяПоляДанных = "ВидДокумента";
		СписокПравил = Новый СписокЗначений;
	КонецЕсли;
	
	МассивТиповыхСкриптов = Новый Массив();
	МассивДополнительныхСкриптов = Новый Массив();
	
	ТиповыеПолномочия = Новый ТаблицаЗначений();
	ТиповыеПолномочия.Колонки.Добавить("Полномочие");
	ТиповыеПолномочия.Колонки.Добавить("ИмяТиповогоПолномочия");
	ДетальнаяВыборкаПравила = ВыборкаПравила.Выбрать();
	Пока ДетальнаяВыборкаПравила.Следующий() Цикл
		Если Не ЗначениеЗаполнено(ДетальнаяВыборкаПравила.ИмяПолномочия) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ДетальнаяВыборкаПравила.ТиповойСкрипт) Тогда
			МассивТиповыхСкриптов.Добавить(
				СтрШаблон(ШаблонТиповогоСкрипта, ДетальнаяВыборкаПравила.ИмяПолномочия, ДетальнаяВыборкаПравила.ТиповойСкрипт));
		КонецЕсли;
		Если ЗначениеЗаполнено(ДетальнаяВыборкаПравила.ТиповойДополнительныйСкрипт) Тогда
			МассивДополнительныхСкриптов.Добавить(
				СтрШаблон(ШаблонТиповогоСкрипта, ДетальнаяВыборкаПравила.ИмяПолномочия, ДетальнаяВыборкаПравила.ТиповойДополнительныйСкрипт));
		КонецЕсли;
		Если Не ДетальнаяВыборкаПравила.ТиповаяНастройкаПоКонструктору.Пустой() Тогда
			ВыборкаТиповыхПравилПоКонструктору = ДетальнаяВыборкаПравила.ТиповаяНастройкаПоКонструктору.Выбрать();
			Пока ВыборкаТиповыхПравилПоКонструктору.Следующий() Цикл
				ТиповойСписокПоКонструктору = ВыборкаТиповыхПравилПоКонструктору.Список.Получить();
				Для Каждого ЭлементСписка Из ТиповойСписокПоКонструктору Цикл
					Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
						НоваяСтрока = ТиповыеПолномочия.Добавить();
						НоваяСтрока.Полномочие = ЭлементСписка.Значение;
						НоваяСтрока.ИмяТиповогоПолномочия = ДетальнаяВыборкаПравила.ИмяПолномочия;
						Если СписокПравил.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено
							Или Не ЗначениеЗаполнено(СписокПравил.НайтиПоЗначению(ЭлементСписка.Значение).Значение) Тогда
							СписокПравил.Добавить(ЭлементСписка.Значение);
							Записать = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Правило Из СписокПравил Цикл
		Условие =
		"Если Не Параметры.Результат.Успех Тогда
		|	Параметры.Результат.Успех = 
		|		Параметры.ЭлектронныйДокумент.ВидДокумента.ТипДокумента = Перечисления.ТипыДокументовЭДО.%1;
		|КонецЕсли;";
		ТипДокументаЭДО = "ПустаяСсыла()";
		Для Каждого ЗначениеПеречисления Из Метаданные.Перечисления.ТипыДокументовЭДО.ЗначенияПеречисления Цикл
			Если Перечисления.ТипыДокументовЭДО[ЗначениеПеречисления.Имя] = Правило.Значение.ТипДокумента Тогда
				ТипДокументаЭДО = ЗначениеПеречисления.Имя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Условие = СтрШаблон(Условие, ТипДокументаЭДО);
		ТиповоеПолномочие = ТиповыеПолномочия.Найти(Правило.Значение, "Полномочие");
		Если Не ТиповоеПолномочие = Неопределено Тогда
			ВставляемыйСкриптПоКонструктору =
				СтрШаблон(ШаблонТиповогоСкрипта, ТиповоеПолномочие.ИмяТиповогоПолномочия, Условие);
			Если СтрНайти(ПравилоОбъект.Скрипт, ВставляемыйСкриптПоКонструктору) Тогда
				Продолжить;
			КонецЕсли;
			СкриптПоКонструктору = СкриптПоКонструктору + Символы.ПС + ВставляемыйСкриптПоКонструктору;
		Иначе
			Если СтрНайти(ПравилоОбъект.Скрипт, Условие) Тогда
				Продолжить;
			КонецЕсли;
			СкриптПоКонструктору = СкриптПоКонструктору + Символы.ПС + Условие;
		КонецЕсли;
	КонецЦикла;
	
	Если Записать Тогда
		СтрокаПравилПоДокументам.Список = Новый ХранилищеЗначения(СписокПравил, Новый СжатиеДанных(9));
	КонецЕсли;
	
	ТиповойСкрипт = СтрСоединить(МассивТиповыхСкриптов, Символы.ПС);
	ТиповойДополнительныйСкрипт = СтрСоединить(МассивДополнительныхСкриптов, Символы.ПС);
	
	Если ЗначениеЗаполнено(ТиповойДополнительныйСкрипт) Или ЗначениеЗаполнено(ТиповойСкрипт) Тогда
		
		Если (СкриптПоКонструкторуСуммойДокумента <> ""
			Или СкриптПоКонструкторуСКонтрагентами <> "")
			И СкриптПоКонструктору = "" Тогда
				
			СкриптПоУсловиюБезДокументов = 
			"Если Не Параметры.Результат.Успех Тогда
			|	Параметры.Результат.Успех = Истина;
			|КонецЕсли;";
			Скрипт = СкриптПоКонструкторуСуммойДокумента
				+ ?(СкриптПоКонструкторуСКонтрагентами <> "", Символы.ПС + СокрЛП(СкриптПоКонструкторуСКонтрагентами), "")
				+ Символы.ПС + СкриптПоУсловиюБезДокументов;
			Скрипт = СокрЛП(Скрипт);
		Иначе
			Скрипт = СкриптПоКонструкторуСуммойДокумента
				+ ?(СкриптПоКонструкторуСКонтрагентами <> "", Символы.ПС + СокрЛП(СкриптПоКонструкторуСКонтрагентами), "")
				+ ?(СкриптПоКонструктору <> "", Символы.ПС + СокрЛП(СкриптПоКонструктору), "");
			Скрипт = СокрЛП(Скрипт);
		КонецЕсли;
		
		Если ТиповойСкрипт <> "" И СтрНайти(ПравилоОбъект.Скрипт, ТиповойСкрипт) Тогда
			ТиповойСкрипт = "";
		КонецЕсли;
		Если ТиповойДополнительныйСкрипт <> "" И СтрНайти(ПравилоОбъект.Скрипт, ТиповойДополнительныйСкрипт) Тогда
			ТиповойДополнительныйСкрипт = "";
		КонецЕсли;

		ПравилоОбъект.Скрипт = ПравилоОбъект.Скрипт
			+ ?(ТиповойСкрипт <> "", Символы.ПС + ТиповойСкрипт, "")
			+ ?(ТиповойДополнительныйСкрипт <> "", Символы.ПС + ТиповойДополнительныйСкрипт, "")
			+ ?(Скрипт <> "", Символы.ПС + Скрипт, "");
		
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает коды элементов
// 
// Параметры:
//  ПравилоОбъект - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  Записать - Булево
Процедура ОбработатьДанные_УстановкаКода(ПравилоОбъект, Записать)
	
	Если НЕ ЗначениеЗаполнено(ПравилоОбъект.Код) Тогда
		
		ПравилоОбъект.УстановитьНовыйКод();
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты правила проверки по данным формы.
// 
// Параметры:
//  ПравилоОбъект - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  Форма - ФормаКлиентскогоПриложения
//  ПравилоНастроено - Булево
//  
Процедура ЗаполнитьПравило(ПравилоОбъект, Форма, ПравилоНастроено) Экспорт
	
	ПравилоОбъект.Скрипт = "";
	ПравилоОбъект.НастройкиПроверки.Очистить();
	
	Если ПравилоНастроено Тогда
		
		Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
		
		Если Форма.ВариантПроверки = Варианты.Скрипт Тогда
			
			ПравилоОбъект.Скрипт = Форма.Скрипт;
			Возврат;
			
		ИначеЕсли Форма.ВариантПроверки = Варианты.Настройка Тогда
			
			СтрокиДерева = Форма.ДеревоОтбора.ПолучитьЭлементы();
			
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				
				Если СтрокаДерева.ДоступенСписок Тогда
					
					ЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
					
					Если ЭлементыДерева.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Список = Новый СписокЗначений();
					
					Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
						Если ЗначениеЗаполнено(ЭлементДерева.Данные)
							И Список.НайтиПоЗначению(ЭлементДерева.Данные) = Неопределено Тогда
							Список.Добавить(ЭлементДерева.Данные);
						КонецЕсли;
					КонецЦикла;
					
					Если Список.Количество() > 0 Тогда
						СтрокаТЧ = ПравилоОбъект.НастройкиПроверки.Добавить();
						СтрокаТЧ.ИмяПоляДанных = СтрокаДерева.ИмяПоляДанных;
						СтрокаТЧ.Список = Новый ХранилищеЗначения(Список, Новый СжатиеДанных(9));
					КонецЕсли;
					
				Иначе
					
					Если (СтрокаДерева.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево()
						И СтрокаДерева.НачальноеЗначение = СтрокаДерева.КонечноеЗначение)
						ИЛИ (СтрокаДерева.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15()
						И СтрокаДерева.НачальноеЗначение + СтрокаДерева.КонечноеЗначение > 0) Тогда
						
						СтрокаТЧ = ПравилоОбъект.НастройкиПроверки.Добавить();
						СтрокаТЧ.ИмяПоляДанных = СтрокаДерева.ИмяПоляДанных;
						СтрокаТЧ.НачальноеЗначение = СтрокаДерева.НачальноеЗначение;
						СтрокаТЧ.КонечноеЗначение = СтрокаДерева.КонечноеЗначение;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает правило для конкретной МЧД
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  			 - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  			 - СправочникСсылка.МЧД003
//  Форма - ФормаКлиентскогоПриложения
// 
Процедура ЗаписатьПравило(Доверенность, Форма) Экспорт
	
	ЕстьПравоНастройкиПравил = 
		МашиночитаемыеДоверенности.ЕстьПравоНастройкиПравилПроверкиПолномочий(Доверенность.Метаданные());
	
	Если Не ЕстьПравоНастройкиПравил Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	
	Попытка

		ПравилоНастроено = МашиночитаемыеДоверенностиКлиентСервер.ПравилоНастроено(Форма);

		Если ЗначениеЗаполнено(Форма.Правило) Тогда
			ПравилоОбъект = ОбщегоНазначенияБЭД.ОбъектПоСсылкеДляИзменения(Форма.Правило);
		Иначе
			ПравилоОбъект = СоздатьЭлемент();
		КонецЕсли;

		ЗаполнитьПравило(ПравилоОбъект, Форма, ПравилоНастроено);
		ПравилоОбъект.Записать();

		МенеджерЗаписи = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Доверенность = Доверенность;
		МенеджерЗаписи.ПравилоПроверки = ПравилоОбъект.Ссылка;
		МенеджерЗаписи.Используется = Форма.ПравилаВключены;
		МенеджерЗаписи.Записать();

		Форма.Правило = ПравилоОбъект.Ссылка;

		ЗафиксироватьТранзакцию();

	Исключение
		
		Операция = НСтр("ru = 'Запись правила проверки полномочий МЧД'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстСообщения = НСтр("ru = 'Не удалось записать правило проверки полномочий. Подробности в журнале регистрации'");
		ОбработкаНеисправностейБЭД.ОбработатьОшибку(Операция,
			ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами,
			ПодробныйТекстОшибки, ТекстСообщения, Доверенность);
		ОтменитьТранзакцию();
		
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// При создании на сервере вкладки настроек правил проверки.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
Процедура ПриСозданииНаСервереФормыНастроек(Форма) Экспорт
	
	МетаданныеМЧД = Форма.РеквизитФормыВЗначение("Объект").Метаданные();
	Форма.Элементы.ГруппаПроверкаПолномочий.ТолькоПросмотр =
		НЕ МашиночитаемыеДоверенности.ЕстьПравоНастройкиПравилПроверкиПолномочий(МетаданныеМЧД);
	Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
	
	Для Каждого КлючИЗначение Из Варианты Цикл
		Форма.Элементы.ВариантПроверки.СписокВыбора.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	Форма.Элементы.ДекорацияОписаниеСкрипта.Заголовок =
		МашиночитаемыеДоверенности.ТекстПодсказкиСкриптаПроверкиПолномочий();
	
КонецПроцедуры

// Возвращает список полномочий
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//
// Возвращаемое значение:
//  Массив из Строка
Функция ПолномочияМашиночитаемойДоверенности002(МЧД)
	
	СписокПолномочий = Новый Массив();
	Полномочия = МашиночитаемыеДоверенности.ПолномочияДоверенностиБезОбработки(МЧД);
	
	Для Каждого Полномочие Из Полномочия Цикл
		ВложенныеПономочия = СтрРазделить(Полномочие.Код, ";");
		Для Каждого ВложенноеПолномочие Из ВложенныеПономочия Цикл
			Если СтрДлина(ВложенноеПолномочие) = 1 И СтрНайти("123456789", ВложенноеПолномочие) Тогда
				СписокПолномочий.Добавить(СтрШаблон("0%1",ВложенноеПолномочие));
			Иначе
				СписокПолномочий.Добавить(ВложенноеПолномочие);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат СписокПолномочий;
	
КонецФункции

// Составляет таблицу используемых типовых правил по МЧД
//
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МЧД003.
//
// Возвращаемое значение:
//  Массив Из Структура:
//   * КодПолномочия - Строка
//   * Значение - ЛюбаяСсылка
Функция ОпределитьТиповыеПравила(МЧД)
	
	ТиповыеПравила = Новый Массив();
	
	Запрос = Новый Запрос;
	Если ТипЗнч(МЧД) = Тип("СправочникСсылка.МЧД003") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторПолномочийНастройкиПроверки.Список,
		|	КлассификаторПолномочий.Наименование
		|ИЗ
		|	Справочник.МЧД003.Полномочия КАК МЧДПолномочия
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторПолномочийМЧД003.НастройкиПроверки КАК
		|			КлассификаторПолномочийНастройкиПроверки
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторПолномочийМЧД003 КАК КлассификаторПолномочий
		|			ПО КлассификаторПолномочийНастройкиПроверки.Ссылка = КлассификаторПолномочий.Ссылка
		|		ПО МЧДПолномочия.Код = КлассификаторПолномочий.Наименование
		|ГДЕ
		|	МЧДПолномочия.Ссылка = &Ссылка
		|	И НЕ КлассификаторПолномочийНастройкиПроверки.Список ЕСТЬ NULL";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторПолномочийНастройкиПроверки.Список,
		|	КлассификаторПолномочий.Наименование
		|ИЗ
		|	Справочник.КлассификаторПолномочийФНСМЧД002.НастройкиПроверки КАК КлассификаторПолномочийНастройкиПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторПолномочийФНСМЧД002 КАК КлассификаторПолномочий
		|		ПО КлассификаторПолномочийНастройкиПроверки.Ссылка = КлассификаторПолномочий.Ссылка
		|ГДЕ
		|	КлассификаторПолномочий.Наименование В (&МассивПолномочий)
		|	И НЕ КлассификаторПолномочийНастройкиПроверки.Список ЕСТЬ NULL";
		МассивПолномочий = ПолномочияМашиночитаемойДоверенности002(МЧД);
		Запрос.УстановитьПараметр("МассивПолномочий", МассивПолномочий);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", МЧД);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Список = Выборка.Список.Получить();
		Для Каждого ЭлементСписка Из Список Цикл
			Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
				ИндексДобавленногоПолномочия = Неопределено;
				Для Счетчик = 0 По ТиповыеПравила.ВГраница() Цикл
					Если ТиповыеПравила[Счетчик].Значение = ЭлементСписка.Значение Тогда
						ИндексДобавленногоПолномочия = Счетчик;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ИндексДобавленногоПолномочия <> Неопределено Тогда
					ТиповыеПравила[ИндексДобавленногоПолномочия].КодПолномочия = 
						СтрШаблон("%1, %2", ТиповыеПравила[ИндексДобавленногоПолномочия].КодПолномочия, Выборка.Наименование);
				Иначе
					ТиповыеПравила.Добавить(Новый Структура("КодПолномочия, Значение", Выборка.Наименование, ЭлементСписка.Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТиповыеПравила;
	
КонецФункции

// Создаёт типовые правила у данной МЧД при загрузке МЧД
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МЧД003
Процедура СоздатьТиповыеПравилаПриЗагрузкеМЧД(МЧД) Экспорт
	
	ТиповыеПравила = ОпределитьТиповыеПравила(МЧД);
	
	Список = Новый СписокЗначений();
	Для Каждого Строка Из ТиповыеПравила Цикл
		Список.Добавить(Строка.Значение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	ПравилоОбъект = СоздатьЭлемент();
	НовоеПравило = ПравилоОбъект.НастройкиПроверки.Добавить();
	НовоеПравило.ИмяПоляДанных = "ВидДокумента";
	НовоеПравило.Список = Новый ХранилищеЗначения(Список, Новый СжатиеДанных(9));
	
	ПравилоОбъект.Записать();
	ВключитьИспользованиеПравил(МЧД, ПравилоОбъект.Ссылка);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Определяет есть ли типовые правила у данной МЧД
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МашиночитаемыеДоверенностиКонтрагентов
//  	- СправочникСсылка.МЧД003
//  Форма - ФормаКлиентскогоПриложения:
//   * ДеревоОтбора - ДанныеФормыДерево:
//	 	** Данные - Строка
//				  - ЛюбаяСсылка.
//		** КомментарийКТиповомуПравилу - Строка
//	 * Элементы - ВсеЭлементыФормы:
//	 	** ДеревоОтбораДополнитьТиповымиПравилами - ПолеФормы
//	 	** ДекорацияВариацииНастроекПравил - ДекорацияФормы
Процедура ОпределитьНаличиеТиповыхПравил(МЧД, Форма) Экспорт
	
	ЕстьТиповыеПравилаУМЧД = Ложь;
	ЕстьНеТиповыеПравилаУМЧД = Ложь;
	КоличествоСтрокПравил = 0;
	
	УжеДобавленныеТиповыеПравила = Новый ТаблицаЗначений();
	УжеДобавленныеТиповыеПравила.Колонки.Добавить("Данные");
	УжеДобавленныеТиповыеПравила.Колонки.Добавить("КодПолномочия");
	
	ТиповыеПравила = ОпределитьТиповыеПравила(МЧД);
	Если ЗначениеЗаполнено(ТиповыеПравила) Тогда
		
		ДеревоОтбора = Форма.ДеревоОтбора.ПолучитьЭлементы();
		Для Каждого ТипОтбора Из ДеревоОтбора Цикл
			
			СтрокиТипаОтбора = ТипОтбора.ПолучитьЭлементы();
			Для Каждого ЗначениеОтбора Из СтрокиТипаОтбора Цикл
				
				Для Каждого Строка Из ТиповыеПравила Цикл
					Если Строка.Значение = ЗначениеОтбора.Данные Тогда
						КоличествоСтрокПравил = СтрокиТипаОтбора.Количество();
						ЕстьТиповыеПравилаУМЧД = Истина;
						ЗначениеОтбора.КомментарийКТиповомуПравилу = КомментарийКТиповомуПравилу(Строка.КодПолномочия);
						
						НоваяСтрока = УжеДобавленныеТиповыеПравила.Добавить();
						НоваяСтрока.Данные = Строка.Значение;
						НоваяСтрока.КодПолномочия = Строка.КодПолномочия;
						
						Прервать;
					Иначе 
						ЗначениеОтбора.КомментарийКТиповомуПравилу = "";
					КонецЕсли;
				КонецЦикла;
				
				Если Не ЗначениеЗаполнено(ЗначениеОтбора.КомментарийКТиповомуПравилу) Тогда
					ЕстьНеТиповыеПравилаУМЧД = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИспользуютсяТиповыеПравила =
		ЕстьТиповыеПравилаУМЧД
		И Не ЕстьНеТиповыеПравилаУМЧД
		И ТиповыеПравила.Количество() = КоличествоСтрокПравил;
	
	ИспользуютсяТиповыеИРучныеПравила =
		ЕстьТиповыеПравилаУМЧД
		И (ЕстьНеТиповыеПравилаУМЧД
			Или ТиповыеПравила.Количество() <> КоличествоСтрокПравил);
	
	ИспользуютсяРучныеПравилаНоЕстьТиповые =
		ЗначениеЗаполнено(ТиповыеПравила)
		И Не ЕстьТиповыеПравилаУМЧД;
	
	Заголовок = "";
	Если ИспользуютсяТиповыеПравила Тогда
		Заголовок = НСтр("ru = 'Используются типовые правила'")
	КонецЕсли;
	Если ИспользуютсяТиповыеИРучныеПравила Тогда
		Заголовок = НСтр("ru = 'Используются типовые и ручные правила'")
	КонецЕсли;
	Если ИспользуютсяРучныеПравилаНоЕстьТиповые Тогда
		Заголовок = НСтр("ru = 'Используются ручные правила, но есть типовые'")
	КонецЕсли;
	
	Форма.Элементы.ДекорацияВариацииНастроекПравил.Заголовок = Заголовок;
	Форма.Элементы.ДекорацияВариацииНастроекПравил.Видимость = ЗначениеЗаполнено(ТиповыеПравила);
	Форма.Элементы.ДеревоОтбораДополнитьТиповымиПравилами.Видимость = ЗначениеЗаполнено(ТиповыеПравила);
	
КонецПроцедуры

// Возвращает текст комментария к типовому правилу
//
// Параметры:
//  КодПолномочия - Строка
//
// Возвращаемое значение:
//  Строка
Функция КомментарийКТиповомуПравилу(КодПолномочия)
	
	Возврат СтрШаблон(НСтр("ru = '(Типовое правило %1)'"), КодПолномочия);
	
КонецФункции

// Добавляет типовые правила к МЧД
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  	- СправочникСсылка.МЧД003
//  Форма - ФормаКлиентскогоПриложения:
//   * ДеревоОтбора - ДанныеФормыДерево:
//   	** ИмяПоляДанных - Строка
//   	** Тип - ОписаниеТипов
//	 	** Данные - Строка
//				  - ЛюбаяСсылка.
//		** Картинка - Картинка
//		** КомментарийКТиповомуПравилу - Строка
Процедура ДополнитьТиповымиПравилами(МЧД, Форма) Экспорт
	
	КартинкаСтрок = МашиночитаемыеДоверенностиКлиентСервер.НаборКартинок().Реквизит;
	
	ТиповыеПравила = ОпределитьТиповыеПравила(МЧД);
	ДеревоОтбора = Форма.ДеревоОтбора.ПолучитьЭлементы();
	Для Каждого ТипОтбора Из ДеревоОтбора Цикл
		
		Если Не ТипОтбора.ИмяПоляДанных = "ВидДокумента" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиТипаОтбора = ТипОтбора.ПолучитьЭлементы();
		
		Для Каждого Строка Из ТиповыеПравила Цикл
			
			ЕстьПравилоВСписке = Ложь;
			Для Каждого ЗначениеОтбора Из СтрокиТипаОтбора Цикл
				Если Строка.Значение = ЗначениеОтбора.Данные Тогда
					ЕстьПравилоВСписке = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ЕстьПравилоВСписке Тогда
				НоваяСтрока = СтрокиТипаОтбора.Добавить();
				НоваяСтрока.Тип = ТипОтбора.Тип;
				НоваяСтрока.Данные = Строка.Значение;
				НоваяСтрока.Картинка = КартинкаСтрок;
				НоваяСтрока.КомментарийКТиповомуПравилу = КомментарийКТиповомуПравилу(Строка.КодПолномочия);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// При чтении настроек формы конструктора
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.МашиночитаемыеДоверенностиКонтрагентов
//  			  - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
//  			  - СправочникОбъект.ПравилаПроверкиПолномочийМЧД
//  			  - СправочникОбъект.МЧД003
//  Форма - ФормаКлиентскогоПриложения
Процедура ПриЧтенииНастроек(ТекущийОбъект, Форма) Экспорт
	
	Варианты = МашиночитаемыеДоверенностиКлиентСервер.ВариантыПроверки();
	Форма.ВариантПроверки = Варианты.Настройка;
	
	СсылкаНаПравило = ПустаяСсылка();
	
	Если ТипЗнч(ТекущийОбъект) = Тип("СправочникОбъект.ПравилаПроверкиПолномочийМЧД") Тогда
		
		СсылкаНаПравило = ТекущийОбъект.Ссылка;
		
	Иначе
		
		СсылкаНаПравило = Форма.Правило;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаПравило) Тогда
			
			МЧД = ТекущийОбъект.Ссылка;
			
			Если ЗначениеЗаполнено(МЧД) Тогда
				ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(ТекущийОбъект.Ссылка);
				Форма.Правило = ПравилоПроверки.Правило;
				Форма.ПравилаВключены = ПравилоПроверки.Используется;
				СсылкаНаПравило = Форма.Правило;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьДеревоНастроек(Форма);
	
	Если ЗначениеЗаполнено(СсылкаНаПравило) Тогда
		Форма.Скрипт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаПравило, "Скрипт");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаНаПравило) Тогда
		
		Если ЗначениеЗаполнено(Форма.Скрипт) Тогда
			Форма.ВариантПроверки = Варианты.Скрипт;
		ИначеЕсли МашиночитаемыеДоверенностиКлиентСервер.ДеревоСодержитНастройки(Форма.ДеревоОтбора) Тогда
			Форма.ВариантПроверки = Варианты.Настройка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует данные отбора поля для упрощенной настройки.
// 
// Возвращаемое значение:
//  Структура - Новые данные отбора:
// * ИмяПоляДанных - Строка
// * ЗаголовокПоля - Строка
// * Тип - ОписаниеТипов
// * ДоступенСписок - Булево
// * НачальноеЗначение - Булево, Число -
// * КонечноеЗначение - Булево, Число -
// * Картинка - Число
// * Список - Массив из СправочникСсылка.ВидыДокументовЭДО, ОпределяемыйТип.КонтрагентБЭД
// 
Функция НовыеДанныеОтбора()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяПоляДанных", "");
	Результат.Вставить("ЗаголовокПоля", "");
	Результат.Вставить("Тип", Новый ОписаниеТипов());
	Результат.Вставить("ДоступенСписок", Ложь);
	Результат.Вставить("НачальноеЗначение", 0);
	Результат.Вставить("КонечноеЗначение", 0);
	Результат.Вставить("Картинка", 0);
	Результат.Вставить("Список", Новый Массив());
	Возврат Результат;
	
КонецФункции

// Инициализирует поля настроек для дерева правил проверки.
// 
// Возвращаемое значение:
//  Массив из см. НовыеДанныеОтбора
Функция ПоляНастроек()
	
	Картинки = МашиночитаемыеДоверенностиКлиентСервер.НаборКартинок();
	Результат = Новый Массив();
	
	ДанныеОтбора = НовыеДанныеОтбора();
	ДанныеОтбора.ИмяПоляДанных = "СуммаДокумента";
	ДанныеОтбора.ЗаголовокПоля = НСтр("ru = 'Сумма документа'");
	ДанныеОтбора.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15();
	ДанныеОтбора.Картинка = Картинки.Ресурс;
	ДанныеОтбора.НачальноеЗначение = 0;
	ДанныеОтбора.КонечноеЗначение = 0;
	Результат.Добавить(ДанныеОтбора);
	
	ДанныеОтбора = НовыеДанныеОтбора();
	ДанныеОтбора.ИмяПоляДанных = "ВидДокумента";
	ДанныеОтбора.ЗаголовокПоля = НСтр("ru = 'Виды документов'");
	ДанныеОтбора.Тип = Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовЭДО");
	ДанныеОтбора.ДоступенСписок = Истина;
	ДанныеОтбора.Картинка = Картинки.Документ;
	Результат.Добавить(ДанныеОтбора);
	
	ДанныеОтбора = НовыеДанныеОтбора();
	ДанныеОтбора.ИмяПоляДанных = "Контрагент";
	ДанныеОтбора.ЗаголовокПоля = НСтр("ru = 'Контрагенты'");
	ДанныеОтбора.Тип = Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип;
	ДанныеОтбора.ДоступенСписок = Истина;
	ДанныеОтбора.Картинка = Картинки.Справочник;
	Результат.Добавить(ДанныеОтбора);
	
	Возврат Результат;
	
КонецФункции

// Читает таблицу упрощенных настроек правила проверки полномочий.
// 
// Параметры:
//  Правило - СправочникСсылка.ПравилаПроверкиПолномочийМЧД
// 
// Возвращаемое значение:
//  ТаблицаЗначений
Функция ТаблицаНастроекОтбора(Правило) Экспорт
	
	Результат = Новый ТаблицаЗначений();
	
	Если ЗначениеЗаполнено(Правило) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.ИмяПоляДанных,
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.НачальноеЗначение,
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.КонечноеЗначение,
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.Список
			|ИЗ
			|	Справочник.ПравилаПроверкиПолномочийМЧД.НастройкиПроверки КАК ПравилаПроверкиПолномочийМЧДНастройкиПроверки
			|ГДЕ
			|	ПравилаПроверкиПолномочийМЧДНастройкиПроверки.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", Правило);
		Результат = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет дерево упрощенных настроек.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
//  ТаблицаНастроек - ТаблицаЗначений - Передается в случае построения дерева настроек в форме элемента справочника
//										КлассификатореПолномочийФНС:
// 	 * ИмяПоляДанных     - Строка
// 	 * НачальноеЗначение - Число
// 	                     - Булево
// 	 * КонечноеЗначение  - Число
// 	                       Булево
// 	 * Список            - ХранилищеЗначения
Процедура ЗаполнитьДеревоНастроек(Форма, ТаблицаНастроек = Неопределено) Экспорт
	
	КореньДерева = Форма.ДеревоОтбора.ПолучитьЭлементы();
	КореньДерева.Очистить();
	
	ПоляНастроек = ПоляНастроек();
	
	Если ТаблицаНастроек = Неопределено Тогда
		
		ТаблицаНастроек = ТаблицаНастроекОтбора(Форма.Правило);
		
	КонецЕсли;
	
	ЕстьНастройки = ТаблицаНастроек.Количество() > 0;
	
	Для Каждого Поле Из ПоляНастроек Цикл
		
		Элемент = КореньДерева.Добавить();
		ЗаполнитьЗначенияСвойств(Элемент, Поле,
			"Картинка, Тип, ЗаголовокПоля, НачальноеЗначение, КонечноеЗначение, ДоступенСписок, ИмяПоляДанных");
		
		Если ЕстьНастройки Тогда
			
			СтрокаТЗ = ТаблицаНастроек.Найти(Элемент.ИмяПоляДанных, "ИмяПоляДанных");
			Если СтрокаТЗ <> Неопределено Тогда
				
				Если Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево()
					ИЛИ Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15() Тогда
					ЗаполнитьЗначенияСвойств(Элемент, СтрокаТЗ, "НачальноеЗначение, КонечноеЗначение");
				Иначе
					
					Список = СтрокаТЗ.Список.Получить();
					КартинкаСтрок = МашиночитаемыеДоверенностиКлиентСервер.НаборКартинок().Реквизит;
					
					Если ЗначениеЗаполнено(Список) Тогда
						
						СтрокиДерева = Элемент.ПолучитьЭлементы();
						
						Для Каждого ЭлементСписка Из Список Цикл
							
							Если ЗначениеЗаполнено(ЭлементСписка.Значение) Тогда
								
								СсылкаНаЭлемент =
									ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСписка.Значение, "Ссылка");
								
								Если ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
									
									НоваяСтрока = СтрокиДерева.Добавить();
									НоваяСтрока.Тип = Элемент.Тип;
									НоваяСтрока.Данные = СсылкаНаЭлемент;
									НоваяСтрока.Картинка = КартинкаСтрок;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элемент.Данные = ПредставлениеДанных(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует текст представления пустого значения в дереве настроек
// 
// Возвращаемое значение:
//  Строка - Значение не указано
Функция ЗначениеНеУказано()
	Возврат НСтр("ru = 'Нет ограничений'");
КонецФункции

// Формирует представление данных строки дерева
// 
// Параметры:
//  Элемент - ДанныеФормыЭлементДерева
// 
// Возвращаемое значение:
//  Строка
Функция ПредставлениеДанных(Элемент) Экспорт
	
	ТекстЗначениеНеУказано = ": " + ЗначениеНеУказано();
	
	Если Элемент.ДоступенСписок Тогда
		
		КоличествоЭлементов = Элемент.ПолучитьЭлементы().Количество();
		Возврат Элемент.ЗаголовокПоля
			+ ?(КоличествоЭлементов = 0, ТекстЗначениеНеУказано, СтрШаблон(" (%1)", КоличествоЭлементов));
		
	КонецЕсли;
	
	Если Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Число_15() Тогда
	
		ТекстСуммы = "";
		
		Если ЗначениеЗаполнено(Элемент.НачальноеЗначение) Тогда
			ТекстСуммы = "от " + Формат(Элемент.НачальноеЗначение, "ЧРГ=' '");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Элемент.КонечноеЗначение) Тогда
			ТекстСуммы = ТекстСуммы + ?(ЗначениеЗаполнено(ТекстСуммы), " ", "") +
				"до " + Формат(Элемент.КонечноеЗначение, "ЧРГ=' '");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекстСуммы) Тогда
			ТекстСуммы = ЗначениеНеУказано();
		КонецЕсли;
		
		Возврат Элемент.ЗаголовокПоля + ": " + ТекстСуммы;
	
	ИначеЕсли Элемент.Тип = МашиночитаемыеДоверенностиКлиентСервер.Тип_Булево() Тогда
	
		Если Элемент.НачальноеЗначение = Элемент.КонечноеЗначение Тогда
			Возврат Элемент.ЗаголовокПоля + ": " + Элемент.НачальноеЗначение;
		КонецЕсли;
		
		Возврат Элемент.ЗаголовокПоля + ТекстЗначениеНеУказано;
	
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецЕсли