#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает ссылку на значение справочника с видом классификатора ОКДП2
//
// Параметры:
//  ОКДП2 - Строка - код ОКДП2
//
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторНСИЗЕРНО
Функция ЗначениеКлассификатораОКДП2ЗЕРНО(ОКДП2) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторНСИЗЕРНО.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|ГДЕ
	|	КлассификаторНСИЗЕРНО.Идентификатор = &Идентификатор
	|	И КлассификаторНСИЗЕРНО.ВидКлассификатора = &ВидКлассификатора";
	
	Запрос.УстановитьПараметр("Идентификатор", ОКДП2);
	Запрос.УстановитьПараметр("ВидКлассификатора", Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор переданной ссылки
//
// Параметры:
//  СправочникСсылка - СправочникСсылка.КлассификаторНСИЗЕРНО
//  ВидКлассификатора - ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО.
//
// Возвращаемое значение:
//  Строка
Функция ИдентификаторПоСсылкеКлассификатораНСИЗЕРНО(СправочникСсылка, ВидКлассификатора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторНСИЗЕРНО.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|ГДЕ
	|	КлассификаторНСИЗЕРНО.Ссылка = &Ссылка
	|	И КлассификаторНСИЗЕРНО.ВидКлассификатора = &ВидКлассификатора";
	
	Запрос.УстановитьПараметр("Ссылка", СправочникСсылка);
	Запрос.УстановитьПараметр("ВидКлассификатора", ВидКлассификатора);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Пустой() Тогда
		Возврат "";
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Идентификатор;
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на справочник по переданному идентификатору
//
// Параметры:
//  Идентификатор     - Строка - Идентификатор
//  ВидКлассификатора - ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО - Вид классификатора
// Возвращаемое значение:
//  СправочникСсылка.КлассификаторНСИЗЕРНО - Ссылка на справочник
Функция СсылкаПоИдентификаторуКлассификатораНСИ(Идентификатор, ВидКлассификатора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторНСИЗЕРНО.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|ГДЕ
	|	КлассификаторНСИЗЕРНО.Идентификатор = &Идентификатор
	|	И КлассификаторНСИЗЕРНО.ВидКлассификатора = &ВидКлассификатора";
	
	Запрос.УстановитьПараметр("Идентификатор",    Идентификатор);
	Запрос.УстановитьПараметр("ВидКлассификатора", ВидКлассификатора);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// Возвращает реквизиты объекта, которые не рекомендуется редактировать
// с помощью обработки группового изменения реквизитов.
//
// Возвращаемое значение:
//  Массив из Строка
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("ВидКлассификатора");
	Результат.Добавить("Идентификатор");
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.ГрупповоеИзменениеОбъектов

// ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

// Возвращает реквизиты справочника, которые образуют естественный ключ
// для элементов справочника.
//
// Возвращаемое значение:
//  Массив из Строка - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт
	
	Результат = Новый Массив();
	Результат.Добавить("ИмяПредопределенныхДанных");
	Результат.Добавить("ВидКлассификатора");
	Результат.Добавить("Идентификатор");
	Возврат Результат;
	
КонецФункции

// Конец ТехнологияСервиса.ВыгрузкаЗагрузкаДанных

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСообщений

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	Операция                     = ЭлементОчереди.Операция;
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыФормирования        = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросКлассификатораАбстрактнаяОперация Тогда
		
		ТекущаяДатаПоЧасовомуПоясуГИС = НачалоДня(МестноеВремя(ТекущаяУниверсальнаяДата(), "Europe/Moscow"));
		
		Для Каждого КлючИЗначение Из ПараметрыФормирования.ПараметрыЗапроса.ДанныеКлассификаторов Цикл
			
			ВидКлассификатора    = КлючИЗначение.Ключ;
			ДанныеКлассификатора = КлючИЗначение.Значение;
			
			Если Не ДанныеКлассификатора.ДостигнутКонецВыборки Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(
					СтрШаблон(
						НСтр("ru = 'При загрузке классификатора %1 получены не все данные. Классификатор обновлен не будет'"),
						ВидКлассификатора));
				Продолжить;
			КонецЕсли;
			
			Блокировка = Новый БлокировкаДанных();
			
			Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
				ИмяТаблицыБлокировки = Метаданные.РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО.ПолноеИмя();
				ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыБлокировки);
				НаборДанных = РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО.СоздатьНаборЗаписей();
			ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
				ИмяТаблицыБлокировки = Метаданные.РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ПолноеИмя();
				ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицыБлокировки);
				НаборДанных = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.СоздатьНаборЗаписей();
			Иначе
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка. Не определен алгоритм загрузки классификатора %1'"),
					ВидКлассификатора);
			КонецЕсли;
			
			Попытка
				
				Блокировка.Заблокировать();
				УстановитьПривилегированныйРежим(Истина);
				
				Для Каждого СтрокаДанных Из ДанныеКлассификатора.Записи Цикл
					
					ЗаписьРегистра = ЗагрузитьКлассификаторНСИ(
						СтрокаДанных,
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ПараметрыОбмена,
						ВидКлассификатора);
					
					Если ЗначениеЗаполнено(ЗаписьРегистра.ДействуетПо)
						И НачалоДня(ЗаписьРегистра.ДействуетПо) <= ТекущаяДатаПоЧасовомуПоясуГИС Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = НаборДанных.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗаписьРегистра);
					
				КонецЦикла;
				
				НаборДанных.Записать();
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
		
		КонецЦикла;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросКлассификатора Тогда
		
		ВидКлассификатора = ЭлементОчереди.СсылкаНаОбъект;
		
		Если ПолученныеДанные.Items.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Отсутствуют данные при загрузке классификатора %1'"),
					ВидКлассификатора));
			Возврат;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ПолученныеДанные.Items Цикл
			ИмяСвойстваЭлементаДанных = КлючИЗначение.Ключ;
		КонецЦикла;
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные.Items[ИмяСвойстваЭлементаДанных]);
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
	
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ЭлементОчередиОснование               = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
			РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
			ПараметрыФормированияОснования        = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
			
			Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств
				Или ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
				
				ДанныеКлассификаторов = ПараметрыФормированияОснования.ПараметрыЗапроса.ДанныеКлассификаторов;
				ДанныеКлассификатора  = ДанныеКлассификаторов[ВидКлассификатора];
				
				Если ДанныеКлассификатора = Неопределено Тогда
					ДанныеКлассификатора = Новый Структура;
					ДанныеКлассификатора.Вставить("ДостигнутКонецВыборки", Ложь);
					ДанныеКлассификатора.Вставить("Записи",                Новый Массив);
					ДанныеКлассификаторов[ВидКлассификатора] = ДанныеКлассификатора;
				КонецЕсли;
				
				Если Не ПолученныеДанные.hasMore Тогда
					ДанныеКлассификатора.ДостигнутКонецВыборки = Истина;
				КонецЕсли;
				
				Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
					ДанныеКлассификатора.Записи.Добавить(СтрокаДанных);
				КонецЦикла;
				
			Иначе
			
				ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
				
				Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
					
					СсылкаНаОбъект = ЗагрузитьКлассификаторНСИ(
						СтрокаДанных,
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ПараметрыОбмена,
						ВидКлассификатора);
						
					Если ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств
						И ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры
						И СсылкаНаОбъект <> Неопределено Тогда
						ИзмененныеОбъекты.Добавить(СсылкаНаОбъект);
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
			
			Если ПолученныеДанные.hasMore Тогда
			
				СообщенияXML = Новый Массив;
				
				НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормирования);
				НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
				
				СообщениеXML = СообщениеЗагрузкиКлассификатора(НовыеПараметрыФормирования, ПараметрыОбмена);
				
				СообщениеXML.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, РеквизитыИсходящегоСообщения);
				
				СообщенияXML.Добавить(СообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена);
			
			КонецЕсли;
		
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаПредопределенныеЗначения(ТаблицаДанных) Экспорт
	
	СтрокиТаблицы = ТаблицаДанных.НайтиСтроки(
		Новый Структура("ИмяТаблицы", Метаданные.Справочники.КлассификаторНСИЗЕРНО.ПолноеИмя()));
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		
		Ссылка = ПредопределенныйЭлементКлассификатора(СтрокаТаблицы.ВидКлассификатора, СтрокаТаблицы.Идентификатор);
		Если ЗначениеЗаполнено(Ссылка) Тогда
			СтрокаТаблицы.Ссылка = Ссылка;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО - Вид классификатора.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		Возврат СообщенияЗагрузкиКлассификаторов(СсылкаНаОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Сообщение загрузки классификаторов
//
// Параметры:
//  СсылкаНаОбъект          - СправочникСсылка, Массив из СправочникСсылка - Ссылка на справочник.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщенияЗагрузкиКлассификаторов(СсылкаНаОбъект, ДополнительныеПараметры)
	
	СообщенияXML  = Новый Массив();
	Организация   = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
	Подразделение = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Подразделение;
	
	ЗагружаемыеКлассификаторы = Новый Массив();
	
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Если ТипЗнч(СсылкаНаОбъект) = Тип("Массив") Тогда
			ЗагружаемыеКлассификаторы = СсылкаНаОбъект;
		Иначе
			ЗагружаемыеКлассификаторы.Добавить(СсылкаНаОбъект);
		КонецЕсли;
	Иначе
		Для Каждого ВидКлассификатора Из Перечисления.ВидыКлассификаторовЗЕРНО Цикл
			ЗагружаемыеКлассификаторы.Добавить(ВидКлассификатора);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПриоритетов = Новый ТаблицаЗначений();
	ТаблицаПриоритетов.Колонки.Добавить("ВидКлассификатора", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКлассификаторовЗЕРНО"));
	ТаблицаПриоритетов.Колонки.Добавить("Приоритет",         ОбщегоНазначения.ОписаниеТипаЧисло(2));
	
	Для Каждого ВидКлассификатора Из ЗагружаемыеКлассификаторы Цикл
		НоваяСтрока = ТаблицаПриоритетов.Добавить();
		НоваяСтрока.ВидКлассификатора = ВидКлассификатора;
		Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
			НоваяСтрока.Приоритет = 10;
		ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство Тогда
			НоваяСтрока.Приоритет = 9;
		ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
			НоваяСтрока.Приоритет = 8;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПриоритетов.Сортировать("Приоритет Убыв");
	
	ПараметрыФормирования = ПараметрыФормированияСообщенияXML();
	ПараметрыФормирования.Организация = Организация;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	АбстрактноеСообщениеXML.Операция            = Перечисления.ВидыОперацийЗЕРНО.ЗапросКлассификатораАбстрактнаяОперация;
	АбстрактноеСообщениеXML.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	АбстрактноеСообщениеXML.Версия              = 1;
	АбстрактноеСообщениеXML.ПараметрыЗапроса    = ПараметрыФормирования;
	АбстрактноеСообщениеXML.Организация         = Организация;
	АбстрактноеСообщениеXML.Подразделение       = Подразделение;
	АбстрактноеСообщениеXML.СсылкаНаОбъект      = ПустаяСсылка();
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	ДанныеОписания = Новый Массив();
	
	ЗагружатьДо = Неопределено;
	Для Каждого СтркоаТаблицы Из ТаблицаПриоритетов Цикл
		
		ВидКлассификатора = СтркоаТаблицы.ВидКлассификатора;
		ДанныеОписания.Добавить(ВидКлассификатора);
		
		НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормирования);
		НовыеПараметрыФормирования.ПараметрыЗапроса.ВидКлассификатора = ВидКлассификатора;
		
		СообщениеXML = СообщениеЗагрузкиКлассификатора(
			НовыеПараметрыФормирования, ДополнительныеПараметры.ПараметрыОбмена);
		
		Если ЗначениеЗаполнено(ЗагружатьДо) Тогда
			СообщениеXML.ЗагружатьДо = ЗагружатьДо;
			Если ЗначениеЗаполнено(СтркоаТаблицы.Приоритет) Тогда
				ЗагружатьДо = СообщениеXML.Идентификатор;
			КонецЕсли;
		Иначе
			СообщениеXML.ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
			Если ЗначениеЗаполнено(СтркоаТаблицы.Приоритет) Тогда
				ЗагружатьДо = СообщениеXML.Идентификатор;
			Иначе
				ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	АбстрактноеСообщениеXML.ДополнительноеОписание = СтрСоединить(ДанныеОписания, ", ");
	
	Возврат СообщенияXML;
	
КонецФункции

Функция СообщениеЗагрузкиКлассификатора(ПараметрыФормирования, ПараметрыОбмена)
	
	ИмяСвойстваЗапроса = "Request";
	ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_dictionaries", ПараметрыОбмена.ПараметрыОптимизации);
	ПараметрыЗапроса   = ПараметрыФормирования.ПараметрыЗапроса;
	
	ТелоXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Перечисления.ВидыОперацийЗЕРНО.ЗапросКлассификатора;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = 1;
	СообщениеXML.Организация      = ПараметрыФормирования.Организация;
	СообщениеXML.Подразделение     = ПараметрыФормирования.Подразделение;
	СообщениеXML.СсылкаНаОбъект   = ПараметрыЗапроса.ВидКлассификатора;
	СообщениеXML.ПараметрыЗапроса = ПараметрыФормирования;
	СообщениеXML.ДополнительноеОписание = СтрШаблон("""%1""", ПараметрыЗапроса.ВидКлассификатора);
	ТипКлассификатораXDTO = ИнтеграцияЗЕРНОСлужебный.ТипКлассификатораXDTO(ПараметрыЗапроса.ВидКлассификатора);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "IsActual",   Ложь,                  СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "Dictionary", ТипКлассификатораXDTO, СообщениеXML);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьДанныеПостраничногоПросмотра(
		ТелоXDTO,
		СообщениеXML,
		ПараметрыФормирования.НомерСтраницы,
		ПараметрыФормирования.КоличествоНаСтранице);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ТелоXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

Функция ПараметрыФормированияСообщенияXML()
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ПараметрыФормированияСообщенияXML();
	
	ВозвращаемоеЗначение.ПараметрыЗапроса = Новый Структура();
	ВозвращаемоеЗначение.ПараметрыЗапроса.Вставить("ДанныеКлассификаторов", Новый Соответствие());
	ВозвращаемоеЗначение.ПараметрыЗапроса.Вставить("ВидКлассификатора");
		
	ВозвращаемоеЗначение.КоличествоНаСтранице = ИнтеграцияЗЕРНО.ПараметрыОптимизации().КоличествоЭлементовСтраницыОтветаСправочника;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискСсылок

Функция КлассификаторНСИ(ВидКлассификатора, ЗначениеИдентификатора, Организация, Подразделение, ПараметрыОбмена, Наименование = Неопределено) Экспорт
	
	Идентификатор = Лев(ЗначениеИдентификатора, 100);
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
		ИмяТаблицы = Метаданные.РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО.ПолноеИмя();
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		ИмяТаблицы = Метаданные.РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ПолноеИмя();
	Иначе
		ИмяТаблицы = Метаданные.Справочники.КлассификаторНСИЗЕРНО.ПолноеИмя();
	КонецЕсли;
	
	СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
		ПараметрыОбмена, ИмяТаблицы, Идентификатор, ВидКлассификатора);
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, ВидКлассификатора);
	ИначеЕсли ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств
		И ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		
		ИнтеграцияЗЕРНОСлужебный.ПроверитьВозможностьСозданияНеразделенныхДанных(Идентификатор, ВидКлассификатора, ПараметрыОбмена);
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("ВидКлассификатора", ВидКлассификатора);
		ЭлементБлокировки.УстановитьЗначение("Идентификатор",     Идентификатор);
		
		ТранзакцияЗафиксирована = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена,ИмяТаблицы, Идентификатор, ВидКлассификатора);
			
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				СправочникСсылка = СоздатьКлассификаторНСИ(ВидКлассификатора, Идентификатор, Наименование);
				ИнтеграцияЗЕРНОСлужебный.ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, Организация, Подразделение,, ВидКлассификатора);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТранзакцияЗафиксирована = Ложь;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при создании классификатора %1 с идентификатором %2:
				           |%3'"),
				ВидКлассификатора,
				Идентификатор,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'Ошибка при создании классификатора %1 с идентификатором %2:
				           |%3'"),
				ВидКлассификатора,
				Идентификатор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ТекстОшибкиПодробно,
				НСтр("ru = 'Работа с классификаторами'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована Тогда
			ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, ВидКлассификатора);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ЗагрузитьКлассификаторНСИ(ЭлементДанных, Организация, Подразделение, ПараметрыОбмена, ВидКлассификатора, СуществующийОбъект = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	ЗаписьНового      = Ложь;
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10, 3);
	ЭтоРегистр        = Ложь;
	
	Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		МетаданныеЭлемента = Метаданные.РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО;
		ЭтоРегистр         = Истина;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
		МетаданныеЭлемента = Метаданные.РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО;
		ЭтоРегистр         = Истина;
	Иначе
		МетаданныеЭлемента = Метаданные.Справочники.КлассификаторНСИЗЕРНО;
	КонецЕсли;
	
	Если Не ЭтоРегистр Тогда
		Идентификатор = Лев(ЭлементДанных.code, 100);
	КонецЕсли;
	
	Если СуществующийОбъект = Неопределено Тогда
		
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлемента) Тогда
			
			СуществующийЭлемент = Неопределено;
			
			Если ТребуетсяПоиск Тогда
				СуществующийЭлемент = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
					ПараметрыОбмена,
					МетаданныеЭлемента.ПолноеИмя(),
					Идентификатор,
					ВидКлассификатора);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
				ИнтеграцияЗЕРНОСлужебный.ПроверитьВозможностьСозданияНеразделенныхДанных(Идентификатор, ВидКлассификатора, ПараметрыОбмена);
				СуществующийОбъект = СоздатьЭлемент();
				ЗаписьНового = Истина;
			Иначе
				СуществующийОбъект = СуществующийЭлемент.ПолучитьОбъект();
			КонецЕсли;
		
		Иначе
			
			СуществующийОбъект = РегистрыСведений[МетаданныеЭлемента.Имя].СоздатьМенеджерЗаписи();
			ЗаписьНового = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоРегистр Тогда
		Если Не ЗаписьНового Тогда
			СуществующийОбъект.Заблокировать();
		КонецЕсли;
		СуществующийОбъект.ВидКлассификатора = ВидКлассификатора;
		СуществующийОбъект.Идентификатор     = Идентификатор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементДанных.startDate) Тогда
		СуществующийОбъект.ДействуетС = ЭлементДанных.startDate;
	Иначе
		СуществующийОбъект.ДействуетС = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭлементДанных.endDate) Тогда
		СуществующийОбъект.ДействуетПо = ЭлементДанных.endDate;
	Иначе
		СуществующийОбъект.ДействуетПо = Неопределено;
	КонецЕсли;
	
	Если ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств
		И ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		СуществующийОбъект.Наименование = ЭлементДанных.name;
	КонецЕсли;
	
	Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ЕдиницаИзмерения Тогда
		
		СуществующийОбъект.УсловноеОбозначение = ЭлементДанных.symbol;
		
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство Тогда
		
		СтрокаЕдиницыИзмерения = ЭлементДанных.unitOfMeasure;
		Если СтрокаЕдиницыИзмерения = Неопределено Тогда
			СуществующийОбъект.ЕдиницаИзмерения = Неопределено;
		Иначе
			СуществующийОбъект.ЕдиницаИзмерения = КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ЕдиницаИзмерения,
				СтрокаЕдиницыИзмерения,
				Организация,
				Подразделение,
				ПараметрыОбмена);
		КонецЕсли;
		
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		
		СтрокаОКПД2 = ЭлементДанных.OKPD2Code;
		КодТНВЭД    = ЭлементДанных.TNVEDCode;
		КодТНВЭД    = СтрЗаменить(КодТНВЭД, " ", "");
		КодТНВЭД    = СтрЗаменить(КодТНВЭД, " ", "");
		
		СуществующийОбъект.КодТНВЭД = КодТНВЭД;
		СуществующийОбъект.ОКПД2    = СтрокаОКПД2;
		
		СуществующийОбъект.ОКПД2Наименование       = ЭлементДанных.OKPD2Name;
		СуществующийОбъект.ТНВЭДНаименование       = ЭлементДанных.TNVEDName;
		СуществующийОбъект.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		
		Если ЗначениеЗаполнено(СтрокаОКПД2) Тогда
			КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2,
				СтрокаОКПД2,
				Организация,
				Подразделение,
				ПараметрыОбмена,
				СуществующийОбъект.ОКПД2Наименование);
		КонецЕсли;
		Если ЗначениеЗаполнено(КодТНВЭД) Тогда
			КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ТНВЭД,
				КодТНВЭД,
				Организация,
				Подразделение,
				ПараметрыОбмена,
				СуществующийОбъект.ТНВЭДНаименование);
		КонецЕсли;
		
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
		
		СтрокаОКПД2 = ЭлементДанных.OKPD2;
		Если СтрокаОКПД2 = Неопределено Тогда
			СуществующийОбъект.ОКПД2 = Неопределено;
		Иначе
			КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2,
				СтрокаОКПД2,
				Организация,
				Подразделение,
				ПараметрыОбмена);
			СуществующийОбъект.ОКПД2 = СтрокаОКПД2;
		КонецЕсли;
		КодНазначения = ЭлементДанных.IndicatorPurpose;
		Если КодНазначения = Неопределено Тогда
			СуществующийОбъект.Назначение = Неопределено
		Иначе
			СуществующийОбъект.Назначение = КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПотребительскогоСвойства,
				КодНазначения,
				Организация,
				Подразделение,
				ПараметрыОбмена);
		КонецЕсли;
		КодПотребительскогоСвойства = ЭлементДанных.Code;
		Если КодПотребительскогоСвойства = Неопределено Тогда
			СуществующийОбъект.ПотребительскоеСвойство = Неопределено;
		Иначе
			СуществующийОбъект.ПотребительскоеСвойство = КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ПотребительскоеСвойство,
				КодПотребительскогоСвойства,
				Организация,
				Подразделение,
				ПараметрыОбмена);
		КонецЕсли;
		СуществующийОбъект.ДиапазонС   = ОписаниеТипаЧисло.ПривестиЗначение(ЭлементДанных.MinValue);
		СуществующийОбъект.ДиапазонПо  = ОписаниеТипаЧисло.ПривестиЗначение(ЭлементДанных.MaxValue);
		СуществующийОбъект.КодСтраны   = ЭлементДанных.Country;
		СуществующийОбъект.ТипЗначения = ИнтеграцияЗЕРНОСлужебный.ТипЗначенияПотребительскогоСвойства(ЭлементДанных.ValueType);
		Если ЭлементДанных.Values <> Неопределено Тогда
			ДопустимыеЗначения = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ЭлементДанных.Values.Item);
			СуществующийОбъект.ДопустимыеЗначения = СтрСоединить(ДопустимыеЗначения, "|");
		КонецЕсли;
		СуществующийОбъект.УникальныйИдентификатор = Строка(Новый УникальныйИдентификатор());
		
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2 Тогда
		
		Если ЭлементДанных.isGrain <> Неопределено
			И ЭлементДанных.isGrain Тогда
			СуществующийОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
		ИначеЕсли ЭлементДанных.isProduct <> Неопределено
			И ЭлементДанных.isProduct Тогда
			СуществующийОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
		Иначе
			СуществующийОбъект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоРегистр Тогда
		СуществующийОбъект.ТребуетсяЗагрузка = Ложь;
		СуществующийОбъект.Записать();
	КонецЕсли;
	
	Если ЭтоРегистр Тогда
		Возврат СуществующийОбъект;
	Иначе
		ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(
			ПараметрыОбмена,
			МетаданныеЭлемента.ПолноеИмя(),
			Идентификатор,
			СуществующийОбъект.Ссылка,
			ВидКлассификатора,
			Истина);
		Возврат СуществующийОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция СоздатьКлассификаторНСИ(ВидКлассификатора, Идентификатор, Наименование = Неопределено)
	
	СправочникОбъект = СоздатьЭлемент();
	СправочникОбъект.ВидКлассификатора     = ВидКлассификатора;
	СправочникОбъект.Идентификатор         = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка     = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	
	Если ЗначениеЗаполнено(Наименование) Тогда
		СправочникОбъект.Наименование = Наименование;
	Иначе
		СправочникОбъект.Наименование = НСтр("ru = '<Требуется загрузка>'");
	КонецЕсли;
	
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

Функция ПредопределенныйЭлементКлассификатора(ВидКлассификатора, Идентификатор) Экспорт
	
	ВозвращаемоеЗначение = Неопределено;
	
	Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПартии Тогда
		Если Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = НазначениеПартииХранениеОбработка;
		ИначеЕсли Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = НазначениеПартииПереработка;
		ИначеЕсли Идентификатор = "3" Тогда
			ВозвращаемоеЗначение = НазначениеПартииВвозНаТерриториюРФ;
		ИначеЕсли Идентификатор = "4" Тогда
			ВозвращаемоеЗначение = НазначениеПартииВывозСТерриторииРФ;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ЦельИспользованияПартии Тогда
		Если Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = ЦельИспользованияПартииПищевые;
		ИначеЕсли Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = ЦельИспользованияПартииКормовые;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПотребительскогоСвойства Тогда
		Если Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = НазначениеПотребительскогоСвойстваГосмониторинг;
		ИначеЕсли Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = НазначениеПотребительскогоСвойстваФормированиеПартии;
		ИначеЕсли Идентификатор = "3" Тогда
			ВозвращаемоеЗначение = НазначениеПотребительскогоСвойстваГосмониторингФормированиеПартии;
		ИначеЕсли Идентификатор = "4" Тогда
			ВозвращаемоеЗначение = НазначениеПотребительскогоСвойстваВвозВывоз;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДокументНаПартию Тогда
		Если Идентификатор = "3" Тогда
			ВозвращаемоеЗначение = ДокументНаПартиюВетеринарныйСертификат;
		ИначеЕсли Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = ДокументНаПартиюДекларацияСоответствия;
		ИначеЕсли Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = ДокументНаПартиюФитосанитарныйСертификат;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДокументПраваСобственности Тогда
		Если Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = ДокументПраваСобственностиАктПриемаПередачи;
		ИначеЕсли Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = ДокументПраваСобственностиСчетФактура;
		ИначеЕсли Идентификатор = "4" Тогда
			ВозвращаемоеЗначение = ДокументПраваСобственностиУПД;
		ИначеЕсли Идентификатор = "10" Тогда
			ВозвращаемоеЗначение = ДокументПраваСобственностиТОРГ12;
		ИначеЕсли Идентификатор = "8" Тогда
			ВозвращаемоеЗначение = ДокументПраваСобственностиТН;
		ИначеЕсли Идентификатор = "6" Тогда
			ВозвращаемоеЗначение = ДокументПраваСобственностиТТН;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения Тогда
		Если Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = ТипХраненияОбособленное;
		ИначеЕсли Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = ТипХраненияОбезличенное;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидТранспортногоСредства Тогда
		Если Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = ВидТранспортногоСредстваАвтомобиль;
		КонецЕсли;
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ПричинаСписания Тогда
		Если Идентификатор = "2" Тогда
			ВозвращаемоеЗначение = ПричинаСписанияУтилизация;
		ИначеЕсли Идентификатор = "16" Тогда
			ВозвращаемоеЗначение = ПричинаСписанияРеализацияФизЛицам;
		ИначеЕсли Идентификатор = "1" Тогда
			ВозвращаемоеЗначение = ПричинаСписанияИспорчено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЭлементКлассификатораПоТипуПервичногоДокумента(ТипПервичногоДокумента) Экспорт
	
	Если ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументовЗЕРНО.ВетеринарныйСертификат Тогда
		Возврат ДокументНаПартиюВетеринарныйСертификат;
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументовЗЕРНО.ДекларацияСоответствия Тогда
		Возврат ДокументНаПартиюДекларацияСоответствия;
	ИначеЕсли ТипПервичногоДокумента = Перечисления.ТипыПервичныхДокументовЗЕРНО.ФитосанитарныйСертификат Тогда
		Возврат ДокументНаПартиюФитосанитарныйСертификат;
	Иначе
		Возврат ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// см. РаботаСКлассификаторамиПереопределяемый.ПриЗагрузкеКлассификатора
Процедура ПриЗагрузкеКлассификатора(Идентификатор, Версия, Адрес, Обработан, ДополнительныеПараметры, ФайлыКлассификатора) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыКлассификаторов = ИнтеграцияЗЕРНО.ИдентификаторыКлассификаторов();
	ДанныеКлассификатра           = ИдентификаторыКлассификаторов[Идентификатор];
	ПараметрыОбмена               = ИнтеграцияЗЕРНО.ПараметрыОбмена();
	ПараметрыОбмена.ПараметрыПреобразования = ИнтеграцияЗЕРНОСлужебный.ПараметрыПреобразования(ПараметрыОбмена.ПараметрыОптимизации);
	
	ВидКлассификатора = ДанныеКлассификатра.ВидКлассификатора;
	Блокировка        = Новый БлокировкаДанных();

	Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств Тогда
		Блокировка.Добавить(Метаданные.РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО.ПолноеИмя());
		НаборДанных = РегистрыСведений.ДопустимыеЗначенияПотребительскихСвойствЗЕРНО.СоздатьНаборЗаписей();
	ИначеЕсли ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
		Блокировка.Добавить(Метаданные.РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ПолноеИмя());
		НаборДанных = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.СоздатьНаборЗаписей();
	Иначе
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.КлассификаторНСИЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("ВидКлассификатора", ВидКлассификатора);
	КонецЕсли;

	ИмяСвойстваЭлементаДанных     = Неопределено;
	ТекущаяДатаПоЧасовомуПоясуГИС = НачалоДня(МестноеВремя(ТекущаяУниверсальнаяДата(), "Europe/Moscow"));
	
	НачатьТранзакцию();

	Попытка

		Блокировка.Заблокировать();

		Обработан = Истина;

		Для Каждого ИмяФайла Из ФайлыКлассификатора Цикл

			ДанныеОбработки = Новый Структура("Объект, ТекстОшибки, СтатусОбработки");

			ЧтениеТекста = Новый ЧтениеТекста(ИмяФайла);

			ИнтеграцияЗЕРНОСлужебный.ОбработатьДанныеРезультатаОтвета(
				ЧтениеТекста.Прочитать(),
				ПараметрыОбмена,
				ДанныеОбработки);

			ЧтениеТекста.Закрыть();
			ЧтениеТекста = Неопределено;

			Если ЗначениеЗаполнено(ДанныеОбработки.ТекстОшибки) Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка. Ошибка при загрузке классификатора %1:
					           |%2'"),
					ВидКлассификатора,
					ДанныеОбработки.ТекстОшибки);
				ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ТекстОшибки,
					НСтр("ru = 'Работа с классификаторами'", ОбщегоНазначения.КодОсновногоЯзыка()));
				ВызватьИсключение ТекстОшибки;
			ИначеЕсли ДанныеОбработки.Объект = Неопределено Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Внутренняя ошибка. Корневой узел загрузки классификатора %1 не определен'"),
					ВидКлассификатора);
				ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ТекстОшибки,
					НСтр("ru = 'Работа с классификаторами'", ОбщегоНазначения.КодОсновногоЯзыка()));
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
			
			Если ИмяСвойстваЭлементаДанных = Неопределено Тогда
				Если ДанныеОбработки.Объект.Items.Количество() = 0 Тогда
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Отсутствуют данные при загрузке классификатора %1'"),
						ВидКлассификатора);
				КонецЕсли;
				Для Каждого КлючИЗначение Из ДанныеОбработки.Объект.Items Цикл
					ИмяСвойстваЭлементаДанных = КлючИЗначение.Ключ;
				КонецЦикла;
			КонецЕсли;

			ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(
				ДанныеОбработки.Объект.Items[ИмяСвойстваЭлементаДанных]);

			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);

			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл

				ЭлементКлассификатора = ЗагрузитьКлассификаторНСИ(
					СтрокаДанных,
					Неопределено,
					Неопределено,
					ПараметрыОбмена,
					ВидКлассификатора);

				Если ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств
					И ВидКлассификатора <> Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(ЭлементКлассификатора.ДействуетПо)
						И НачалоДня(ЭлементКлассификатора.ДействуетПо) <= ТекущаяДатаПоЧасовомуПоясуГИС Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = НаборДанных.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементКлассификатора);

			КонецЦикла;

		КонецЦикла;

		Если ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ДопустимыеЗначенияПотребительскихСвойств
			Или ВидКлассификатора = Перечисления.ВидыКлассификаторовЗЕРНО.ВидСельскохозяйственнойКультуры Тогда
			НаборДанных.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение

		ОтменитьТранзакцию();
		
		Обработан = Ложь;

		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при обновлении классификатора %1:
			           |%2'"),
			ВидКлассификатора,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОписанияОшибки = СтрШаблон(
			НСтр("ru = 'Ошибка при обновлении классификатора %1:
			           |%2'"),
			ВидКлассификатора,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
			ТекстОшибки,
			НСтр("ru = 'Работа с классификаторами'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ВызватьИсключение ТекстОписанияОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
