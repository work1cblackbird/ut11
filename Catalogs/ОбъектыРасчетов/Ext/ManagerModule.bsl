#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтение
	|ГДЕ
	|	(Объект <> Неопределено
	|		И ЗначениеРазрешено(Объект)
	|	ИЛИ Объект = Неопределено
	|		И ЗначениеРазрешено(Организация)
	|		И ЗначениеРазрешено(Партнер)
	|	)
	|;
	|РазрешитьИзменениеЕслиРазрешеноЧтение
	|ГДЕ
	|	(Объект <> Неопределено
	|		И ЗначениеРазрешено(Объект)
	|	ИЛИ Объект = Неопределено
	|		И ЗначениеРазрешено(Организация)
	|		И ЗначениеРазрешено(Партнер)
	|	)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ОбъектыРасчетов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.17.34";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("24f1f106-d51c-4649-a1b5-7f4f362ca951");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ОбъектыРасчетов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	МассивКомментариев = Новый Массив();
	//++ Локализация
	МассивКомментариев.Добавить(НСтр("ru = 'Заполнение реквизита ""Операция с самозанятым"" в справочнике ""Объекты расчетов""'"));
	//-- Локализация
	МассивКомментариев.Добавить(НСтр("ru = 'Заполнение реквизита ""Контролировать остатки авансов клиентов""'"));
	Обработчик.Комментарий = СтрСоединить(МассивКомментариев, " ");
	
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьЭлемент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Справочник.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК Справочник
		|ГДЕ
		|	НЕ Справочник.КонтролироватьОстаткиАвансов 
		|	И (Справочник.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
		|			И ВЫРАЗИТЬ(Справочник.Объект КАК Справочник.ДоговорыКонтрагентов).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
		|		ИЛИ Справочник.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Заказ)
		|			И ВЫБОР КОГДА Справочник.Объект Ссылка Документ.ЗаказКлиента
		|						ТОГДА ВЫРАЗИТЬ(Справочник.Объект КАК Документ.ЗаказКлиента).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		
		|					КОГДА Справочник.Объект Ссылка Документ.ЗаказПоставщику
		|						ТОГДА ВЫРАЗИТЬ(Справочник.Объект КАК Документ.ЗаказПоставщику).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|					КОГДА Справочник.Объект Ссылка Документ.ЗаявкаНаВозвратТоваровОтКлиента
		|						ТОГДА ВЫРАЗИТЬ(Справочник.Объект КАК Документ.ЗаявкаНаВозвратТоваровОтКлиента).ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|	  )
		|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	//++ Локализация
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|		ПО ОбъектыРасчетов.Объект = ДанныеДокумента.Ссылка
		|ГДЕ
		|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектыРасчетов.Дата УБЫВ";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	//-- Локализация
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось заполнить значение реквизита ""Операция с самозанятым"" справочнике ""Объекты расчетов""'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДанныеДляОбновления
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка,
		|	ДанныеСправочника.ВерсияДанных КАК ВерсияДанных,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	ДанныеДляОбновления КАК ДанныеДляОбновления
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ДанныеСправочника
		|			ПО ДанныеДляОбновления.Ссылка = ДанныеСправочника.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК ДанныеДокумента
		|			ПО ДанныеДляОбновления.Ссылка.Объект = ДанныеДокумента.Ссылка";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Выборка.Ссылка, Выборка.ВерсияДанных, Параметры.Очередь); // СправочникОбъект
			
			Если СправочникОбъект = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПредставлениеСсылки = Строка(СправочникОбъект);
			
			Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому Тогда
				СправочникОбъект.ОперацияССамозанятым = Истина;
			КонецЕсли;
			
			Если НЕ СправочникОбъект.КонтролироватьОстаткиАвансов
				И СправочникОбъект.ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Заказ
					ИЛИ СправочникОбъект.ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Договор Тогда
				ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.Объект, "ПорядокРасчетов");
				Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамНакладным
						И СправочникОбъект.ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Договор
					ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным
						И СправочникОбъект.ТипОбъектаРасчетов = Перечисления.ТипыОбъектовРасчетов.Заказ Тогда
					СправочникОбъект.КонтролироватьОстаткиАвансов= Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если СправочникОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка, ПредставлениеСсылки);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		
	ШаблонСообщения = НСтр("ru = 'Обработана порция объектов расчетов: %1'");
	ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
	ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Информация, , ,
		ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Объект");
	Поля.Добавить("Наименование");
	Поля.Добавить("ТипСсылки");
	Поля.Добавить("ТипРасчетов");
	Поля.Добавить("ТипОбъектаРасчетов");
	Поля.Добавить("НаименованиеПервичногоДокумента");
	Поля.Добавить("НомерВходящегоДокумента");
	Поля.Добавить("ДатаВходящегоДокумента");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Данные.Объект) И ЗначениеЗаполнено(Данные.Ссылка) Тогда
		Представление = НСтр("ru = '<Пустой>'");
		СтандартнаяОбработка = Ложь;
	ИначеЕсли Данные.ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком")
		И Данные.ТипОбъектаРасчетов = ПредопределенноеЗначение("Перечисление.ТипыОбъектовРасчетов.Накладная") Тогда
		
		Данные.Вставить("НаименованиеВходящегоДокумента", Данные.НаименованиеПервичногоДокумента);
		ОбщегоНазначенияУТКлиентСервер.ОбработкаПолученияПредставленияВходящегоДокумента(
		Данные, Представление, СтандартнаяОбработка, Данные.ТипСсылки);
		
	Иначе
		Представление = Данные.Наименование;   
		СтандартнаяОбработка = Ложь;
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Если НЕ МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь) Тогда
			
			Если ЗначениеЗаполнено(Данные.Объект) И Данные.ТипОбъектаРасчетов <> ПредопределенноеЗначение("Перечисление.ТипыОбъектовРасчетов.Договор") Тогда
				Представление = ОбщегоНазначенияУТКлиентСервер.СтандартноеПредставлениеДокумента(Данные.ТипСсылки, Данные.Номер, Данные.Дата);
			КонецЕсли;
			
		КонецЕсли;
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
			РежимОтлажки = ОбщегоНазначения.РежимОтладки();
		#Иначе
			РежимОтлажки = ОбщегоНазначенияКлиент.РежимОтладки();
		#КонецЕсли
		
		Если НЕ РежимОтлажки Тогда
			Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
				Результат= ВзаиморасчетыВызовСервера.ФормаОбъектаРасчетов(Параметры.Ключ);
				Если Результат.Форма <> "" Тогда
					СтандартнаяОбработка = Ложь;
					ВыбраннаяФорма = Результат.Форма;
					Параметры.Ключ = Результат.Ключ;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
