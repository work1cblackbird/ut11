
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыМеждуОрганизациями)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Партнеры)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.НаправленияДеятельности) Тогда
		Текст = НСтр("ru = 'Недостаточно прав для открытия формы выбора объекта расчетов.'");
		ОбщегоНазначения.СообщитьПользователю(Текст,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ТолькоОстатки",
				Ложь,
				ВидСравненияКомпоновкиДанных.Равно,
				НСтр("ru = 'Скрывать служебные'"),
				Истина,
				РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	
	СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыборОснованияПлатежа", Параметры.ВыборОснованияПлатежа);
	СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыборАванса", Параметры.ВыборАванса);
	ВводОстатков = Параметры.ВводОстатков;
	ХозяйственнаяОперацияВводаОстатков = Параметры.ХозяйственнаяОперация;
	Если Параметры.ВводОстатков Тогда
		ЗначенияОтбора = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.Отбор);
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ТипРасчетов") Тогда
		ЭтоРасчетыСКлиентами = Параметры.Отбор.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
		СтруктураОтбора = ВзаиморасчетыКлиентСервер.СтруктураОтбораДанныхВыбора();
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Параметры.Отбор);
		СтруктураОтбора.УчитыватьФилиалы = Параметры.УчитыватьФилиалы;
		СписокОснованийПлатежа.ТекстЗапроса = ТекстЗапросаОснованийПлатежа(ЭтоРасчетыСКлиентами, СтруктураОтбора, 0);
		СписокДоговоровКонтрагентов.ТекстЗапроса = ТекстЗапросаОснованийПлатежа(ЭтоРасчетыСКлиентами, СтруктураОтбора, 1);
		СписокДоговоровМеждуОрганизациями.ТекстЗапроса = ТекстЗапросаОснованийПлатежа(ЭтоРасчетыСКлиентами, СтруктураОтбора, 2);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ТипРасчетов",
				Параметры.Отбор.ТипРасчетов,
				ВидСравненияКомпоновкиДанных.ВСписке,
				,
				Истина);
		МассивТиповРасчетов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Параметры.Отбор.ТипРасчетов);
		МассивТиповРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.ПустаяСсылка());
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ТипыРасчетовДоговоров", МассивТиповРасчетов);
		СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("ТипыРасчетовДоговоров", МассивТиповРасчетов);
		СписокТиповДоговоров = ?(ЭтоРасчетыСКлиентами, 
		                         ВзаиморасчетыКлиентСервер.ТипыДоговоровСКлиентом(),
		                         ВзаиморасчетыКлиентСервер.ТипыДоговоровСПоставщиком());
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ТипыДоговоров", СписокТиповДоговоров.ВыгрузитьЗначения());
	Иначе
		БезОтбораПоТипуРасчетов = Истина;
	КонецЕсли;
	
	СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("БезОтбораПоТипуРасчетов", БезОтбораПоТипуРасчетов);
	
	Если Параметры.ВыборОснованияПлатежа Тогда
		Заголовок = ?(ЭтоРасчетыСКлиентами,
			НСтр("ru = 'Выбор основания платежа клиента'"),
			НСтр("ru = 'Выбор основания платежа поставщика'"));
	ИначеЕсли БезОтбораПоТипуРасчетов Тогда
		Заголовок = НСтр("ru = 'Выбор объекта расчетов'");
	Иначе
		Заголовок = ?(ЭтоРасчетыСКлиентами,
			НСтр("ru = 'Выбор объекта расчетов с клиентом'"),
			НСтр("ru = 'Выбор объекта расчетов с поставщиком'"));
	КонецЕсли;
	
	УстановленоОтборов = 0;
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Партнер") И ЗначениеЗаполнено(Параметры.Отбор.Партнер) Тогда
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Параметры.Отбор.Партнер, СписокПартнеров);
		
		Если Параметры.Отбор.Партнер = Справочники.Партнеры.НашеПредприятие Тогда
			ЭтоРасчетыМеждуОрганизациями = Истина;
		КонецЕсли;
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Партнер", СписокПартнеров);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемПартнерам", Ложь);
		Если Параметры.ВыборОснованияПлатежа Тогда
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Партнер", СписокПартнеров);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПоВсемПартнерам", Ложь);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("Партнер", СписокПартнеров);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ПоВсемПартнерам", Ложь);
		КонецЕсли;
			
		Элементы.ОтборПартнер.Заголовок = Параметры.Отбор.Партнер;
		УстановленоОтборов = УстановленоОтборов + 1;
	Иначе
		Элементы.ОтборПартнер.Видимость = Ложь;
		Элементы.ЗаголовокПартнер.Видимость = Ложь;
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Партнер", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемПартнерам", Истина);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Партнер", Неопределено);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПоВсемПартнерам", Истина);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("Партнер", Неопределено);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ПоВсемПартнерам", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Контрагент") Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Если ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ЗначениеЗаполнено(Параметры.Отбор.Контрагент) Тогда
					ПартнерКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Контрагент, "Партнер");
				Иначе
					ПартнерКонтрагента = Неопределено;
				КонецЕсли;
				СписокПартнеров = Новый СписокЗначений;
				ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(ПартнерКонтрагента, СписокПартнеров);
				Элементы.ОтборПартнер.Заголовок = ПартнерКонтрагента;
				Элементы.ОтборПартнер.Видимость = Истина;
				Элементы.ЗаголовокПартнер.Видимость = Истина;
				Параметры.Отбор.Вставить("Партнер", СписокПартнеров);
				УстановленоОтборов = УстановленоОтборов + 1;
			ИначеЕсли ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
				Параметры.Отбор.Вставить("Партнер", Справочники.Партнеры.НашеПредприятие);
				Элементы.ОтборПартнер.Заголовок = Справочники.Партнеры.НашеПредприятие;
				Элементы.ОтборПартнер.Видимость = Истина;
				Элементы.ЗаголовокПартнер.Видимость = Истина;
				УстановленоОтборов = УстановленоОтборов + 1;
			КонецЕсли;
			Элементы.ОтборКонтрагент.Видимость = Ложь;
			Элементы.ЗаголовокКонтрагент.Видимость = Ложь;
		Иначе
			Элементы.ОтборКонтрагент.Заголовок = ТекстЗаголовка(Параметры.Отбор.Контрагент);
			УстановленоОтборов = УстановленоОтборов + 1;
		КонецЕсли;
		
		ОтборКонтрагента = Параметры.Отбор.Контрагент;
		Если ТипЗнч(Параметры.Отбор.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			Запрос = Новый Запрос(
			"
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.Ссылка В (&Организация)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|ГДЕ
			|	Организации.ГоловнаяОрганизация В (&Организация)
			|	И Организации.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
			|АВТОУПОРЯДОЧИВАНИЕ");
			
			Запрос.УстановитьПараметр("Организация", Параметры.Отбор.Контрагент);
			ОтборКонтрагента = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Элементы.ОтборКонтрагент.Заголовок = ТекстЗаголовка(ОтборКонтрагента);
			
		КонецЕсли;
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Контрагент", ОтборКонтрагента);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Ложь);
		
		Если Параметры.ВыборОснованияПлатежа Тогда
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Контрагент", ОтборКонтрагента);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Ложь);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("Контрагент", ОтборКонтрагента);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Ложь);
			СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("Контрагент", ОтборКонтрагента);
			СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Ложь);
		КонецЕсли;
		
	Иначе
		Элементы.ОтборКонтрагент.Видимость = Ложь;
		Элементы.ЗаголовокКонтрагент.Видимость = Ложь;
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Контрагент", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Истина);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Контрагент", Неопределено);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Истина);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("Контрагент", Неопределено);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Истина);
		СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("Контрагент", Неопределено);
		СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("ПоВсемКонтрагентам", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Организация") Тогда
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", Ложь);
		ОтборОрганизация = Параметры.Отбор.Организация;
		
		ЦентрализованныеДоговоры = Новый Массив;
		ГоловнаяОрганизация      = Неопределено;
		ЭтоГоловнаяОрганизация   = Ложь;
		
		Если ТипЗнч(Параметры.Отбор.Организация) <> Тип("Массив") И Параметры.УчитыватьФилиалы Тогда
			
			ГоловнаяОрганизация      = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Отбор.Организация, "ГоловнаяОрганизация");
			ЭтоГоловнаяОрганизация   = Параметры.Отбор.Организация = ГоловнаяОрганизация;
			
			Если НЕ ЭтоГоловнаяОрганизация Тогда
				
				Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	Филиалы.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов.Филиалы КАК Филиалы
					|ГДЕ
					|	Филиалы.Организация = &Организация
					|");
				
				Запрос.УстановитьПараметр("Организация",Параметры.Отбор.Организация);
				ЦентрализованныеДоговоры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
			Иначе
				
				ГоловнаяОрганизация = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация",   ЭтоГоловнаяОрганизация);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация",      ГоловнаяОрганизация);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", ЦентрализованныеДоговоры);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Организация",              Параметры.Отбор.Организация);
		
		УстановленоОтборов = УстановленоОтборов + 1;
		
		Элементы.ОтборОрганизация.Заголовок = ТекстЗаголовка(Параметры.Отбор.Организация);
		
		Если Параметры.ВыборОснованияПлатежа Тогда
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация",   ЭтоГоловнаяОрганизация);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация",      ГоловнаяОрганизация);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", ЦентрализованныеДоговоры);
			СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Организация",              Параметры.Отбор.Организация);
			
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация",   ЭтоГоловнаяОрганизация);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация",      ГоловнаяОрганизация);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", ЦентрализованныеДоговоры);
			СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("Организация",              Параметры.Отбор.Организация);
			
			СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("Организация",              Параметры.Отбор.Организация);
		КонецЕсли;
		
	Иначе
		Элементы.ОтборОрганизация.Видимость = Ложь;
		Элементы.ЗаголовокОрганизация.Видимость = Ложь;
		
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", Истина);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("Организация", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация", Ложь);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", Новый Массив);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация", Неопределено);
		
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("Организация", Неопределено);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация", Ложь);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", Новый Массив);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация", Неопределено);
		
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("Организация", Неопределено);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ЭтоГоловнаяОрганизация", Ложь);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ЦентрализованныеДоговоры", Новый Массив);
		СписокДоговоровКонтрагентов.Параметры.УстановитьЗначениеПараметра("ГоловнаяОрганизация", Неопределено);
		
		СписокДоговоровМеждуОрганизациями.Параметры.УстановитьЗначениеПараметра("Организация", Неопределено);
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ВалютаВзаиморасчетов") И ЗначениеЗаполнено(Параметры.Отбор.ВалютаВзаиморасчетов) Тогда
		Элементы.ОтборВалютаВзаиморасчетов.Заголовок = Параметры.Отбор.ВалютаВзаиморасчетов;
		УстановленоОтборов = УстановленоОтборов + 1;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"ВалютаВзаиморасчетов",
			Параметры.Отбор.ВалютаВзаиморасчетов,
			ВидСравненияКомпоновкиДанных.Равно,
			,
			ЗначениеЗаполнено(Параметры.Отбор.ВалютаВзаиморасчетов));
	Иначе
		Элементы.ОтборВалютаВзаиморасчетов.Видимость = Ложь;
		Элементы.ЗаголовокВалютаВзаиморасчетов.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("ДополнительныеОтборы") Тогда
		
		Для Каждого КлючИЗначение Из Параметры.Отбор.ДополнительныеОтборы Цикл
			
			Если ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
			Иначе
				ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				КлючИЗначение.Ключ,
				КлючИЗначение.Значение,
				ВидСравненияОтбора,
				,
				ЗначениеЗаполнено(КлючИЗначение.Значение));
				
			ОтборПоказан = ПоказатьДополнительныйОтборОбъектовРасчетов(СписокОбъектовРасчетов, КлючИЗначение);
			
			Если ОтборПоказан Тогда
				УстановленоОтборов = УстановленоОтборов + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.РедактируемыйДокумент) Тогда
		ИсключаемыйОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Параметры.РедактируемыйДокумент,,
			?(Параметры.Отбор.Свойство("ТипРасчетов"),Параметры.Отбор.ТипРасчетов,Неопределено));
		Если ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокОбъектовРасчетов,
				"ОбъектРасчетов",
				ИсключаемыйОбъектРасчетов,
				ВидСравненияКомпоновкиДанных.НеРавно,
				,
				ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов));
				
			Если Параметры.ВыборОснованияПлатежа Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					СписокОснованийПлатежа,
					"ОбъектРасчетов",
					ИсключаемыйОбъектРасчетов,
					ВидСравненияКомпоновкиДанных.НеРавно,
					,
					ЗначениеЗаполнено(ИсключаемыйОбъектРасчетов));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТипыОснований = Новый Массив;
	Если Параметры.ВыборОснованияПлатежа И Параметры.РедактируемыйДокумент <> Неопределено Тогда
		МетаданныеДокумента = Параметры.РедактируемыйДокумент.Метаданные();
		Если МетаданныеДокумента <> Неопределено Тогда
			ОписаниеТипов = Новый ОписаниеТипов;
			Если ОбщегоНазначенияУТ.ЕстьРеквизитТабЧастиОбъекта("ОснованиеПлатежа", МетаданныеДокумента, "РасшифровкаПлатежа") Тогда 
				ОписаниеТипов = МетаданныеДокумента.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.ОснованиеПлатежа.Тип;
			ИначеЕсли МетаданныеДокумента.Реквизиты.Найти("ОснованиеПлатежа") <> Неопределено Тогда
				ОписаниеТипов = МетаданныеДокумента.Реквизиты.ОснованиеПлатежа.Тип;
			КонецЕсли;
			ТипыОснований = ОписаниеТипов.Типы();
		КонецЕсли;
	КонецЕсли;
	СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ТипыОснований", ТипыОснований);
	
	ИспользоватьДоговорыМеждуОрганизациями = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями");
	Если Параметры.ВыборОснованияПлатежа Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОснованиеПлатежа;
		Если Параметры.Свойство("ТекущееЗначение") Тогда
			НачальноеОснованиеПлатежа = Параметры.ТекущееЗначение;
		КонецЕсли;
		Элементы.ГруппаОбъектРасчетов.Видимость = Ложь;
		Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДокументы;
		ПереключательВыбораОснования = 0;
		Если ЗначениеЗаполнено(НачальноеОснованиеПлатежа) Тогда
			Если ТипЗнч(НачальноеОснованиеПлатежа) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыКонтрагентов;
				ПереключательВыбораОснования = 1;
			ИначеЕсли ТипЗнч(НачальноеОснованиеПлатежа) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
				Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыМеждуОрганизациями;
				ПереключательВыбораОснования = 1;
			КонецЕсли;
		КонецЕсли;
		Если ЭтоРасчетыМеждуОрганизациями И Не ИспользоватьДоговорыМеждуОрганизациями Тогда
			Элементы.ПереключательВыбораОснования.Видимость = Ложь;
			Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДокументы;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов;
		Если Параметры.Свойство("ТекущееЗначение") Тогда
			НачальныйОбъектРасчетов = Параметры.ТекущееЗначение;
		КонецЕсли;
		Элементы.ГруппаОснованиеПлатежа.Видимость = Ложь;
	КонецЕсли;
	
	ВыбратьОбъектыРасчетовПоКомиссии = Неопределено;
	Параметры.Свойство("ВыбратьОбъектыРасчетовПоКомиссии", ВыбратьОбъектыРасчетовПоКомиссии);
	
	Если Не ВыбратьОбъектыРасчетовПоКомиссии = Неопределено Тогда
		
		ОплатаЧерезКомиссионера = Истина;
		
		Если ВыбратьОбъектыРасчетовПоКомиссии.ВыбратьОбъектыРасчетовСКонечнымКлиентом Тогда
			
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Истина);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКомиссионером", Ложь);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ДоговорСКомиссионером",
				ВыбратьОбъектыРасчетовПоКомиссии.ДоговорСКомиссионером);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентКонтрагент",
				ВыбратьОбъектыРасчетовПоКомиссии.Контрагент);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентПартнер",
				ВыбратьОбъектыРасчетовПоКомиссии.Партнер);
				
			Элементы.ЗаголовокКомиссионныеПродажи.Заголовок = НСтр("ru = 'C конечным клиентом'");
			Элементы.ОтборКомиссионныхДоговоров.Заголовок = СтрШаблон(
					НСтр("ru='""%1"" по договору с комиссионером ""%2""'"), 
						ВыбратьОбъектыРасчетовПоКомиссии.Контрагент,
						ВыбратьОбъектыРасчетовПоКомиссии.ДоговорСКомиссионером);
			
			Элементы.ЗаголовокКомиссионныеПродажи.Видимость = Истина;
			Элементы.ОтборКомиссионныхДоговоров.Видимость = Истина;
			УстановленоОтборов = УстановленоОтборов + 1;
			
		Иначе
			
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Ложь);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКомиссионером", Истина);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ДоговорСКомиссионером", Неопределено);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентКонтрагент", Неопределено);
			СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентПартнер", Неопределено);
			
			Элементы.ОтборКомиссионныхДоговоров.Заголовок = НСтр("ru='С комиссионером'");
			
			Элементы.ЗаголовокКомиссионныеПродажи.Видимость = Истина;
			Элементы.ОтборКомиссионныхДоговоров.Видимость = Истина;
			УстановленоОтборов = УстановленоОтборов + 1;
			
		КонецЕсли;
		
	Иначе
			
		Элементы.ЗаголовокКомиссионныеПродажи.Видимость = Ложь;
		Элементы.ОтборКомиссионныхДоговоров.Видимость = Ложь;
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКонечнымКлиентом", Ложь);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ВыбратьОбъектыРасчетовСКомиссионером", Ложь);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ДоговорСКомиссионером", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентКонтрагент", Неопределено);
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("КлиентПартнер", Неопределено);
		
	КонецЕсли;
	
	Если УстановленоОтборов > 0 Тогда
		Элементы.ГруппаПредустановленныеОтборы.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Установлено отборов: %1'"), УстановленоОтборов);
	Иначе
		Элементы.ГруппаПредустановленныеОтборы.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ПодборДебиторскойЗадолженности") Тогда
		Элементы.ОбъектыРасчетовСуммаОстаток.Заголовок = ?(Параметры.ПодборДебиторскойЗадолженности, НСтр("ru = 'Дебиторская задолженность'"), НСтр("ru = 'Кредиторская задолженность'"));
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Параметры.ПодборДебиторскойЗадолженности);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Параметры.ПодборДебиторскойЗадолженности);
	Иначе
		Элементы.ОбъектыРасчетовСуммаОстаток.Заголовок = НСтр("ru = 'Дебиторская задолженность'");
		СписокОбъектовРасчетов.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Истина);
		СписокОснованийПлатежа.Параметры.УстановитьЗначениеПараметра("ПодборДебиторскойЗадолженности", Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ВернутьСтруктуру") Тогда
		ВернутьСтруктуру = Параметры.ВернутьСтруктуру;
	КонецЕсли;
	Если Параметры.ВводОстатков Тогда
		СписокДоступныхТипов = Документы.ВводОстатковВзаиморасчетов.СписокДоступныхТиповОбъектовРасчетов(
			Параметры.ХозяйственнаяОперация,
			ЭтоРасчетыМеждуОрганизациями,
			ЗначенияОтбора.Свойство("Партнер") И ЗначенияОтбора.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель"));
		Элементы.ФормаСоздатьОбъект.Видимость = СписокДоступныхТипов.Количество() > 0;
	Иначе
		Элементы.ФормаСоздатьОбъект.Видимость = Ложь;
	КонецЕсли;

	ИспользоватьНесколькоВалют             = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбъектыРасчетовВалюта", "Видимость", ИспользоватьНесколькоВалют);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОснованияПлатежаВалюта", "Видимость", ИспользоватьНесколькоВалют);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	Если ЗначениеЗаполнено(НачальноеОснованиеПлатежа) Тогда
		Если ТипЗнч(НачальноеОснованиеПлатежа) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Элементы.СписокДоговоровКонтрагентов.ТекущаяСтрока = НачальноеОснованиеПлатежа;
		ИначеЕсли ТипЗнч(НачальноеОснованиеПлатежа) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			Элементы.СписокДоговоровМеждуОрганизациями.ТекущаяСтрока = НачальноеОснованиеПлатежа;
		Иначе
			Элементы.ОснованияПлатежа.ТекущаяСтрока = РегистрыСведений.РеестрДокументов.КлючЗаписиДокумента(НачальноеОснованиеПлатежа);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(НачальныйОбъектРасчетов) Тогда
		Элементы.ОбъектыРасчетов.ТекущаяСтрока = НачальныйОбъектРасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();
	Если Элементы.ОбъектыРасчетов.ТекущаяСтрока <> Неопределено 
		И Элементы.ОбъектыРасчетов.ТекущиеДанные.Свойство("ТипОбъектаРасчетов")
		И Элементы.ОбъектыРасчетов.ТекущиеДанные.ТипОбъектаРасчетов <> ОтборПоТипу Тогда
		ОтборПоТипу = ПредопределенноеЗначение("Перечисление.ТипыОбъектовРасчетов.ПустаяСсылка");
	КонецЕсли;
	
	Если ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам") Тогда
		
		ОтборПоТипу = ПредопределенноеЗначение("Перечисление.ТипыОбъектовРасчетов.Накладная");
		Элементы.ОтборПоТипу.Видимость = Ложь;
		
	КонецЕсли;
	
	УстановитьОтборПоТипу();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбъектыРасчетовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗначенийКлиент = Новый ТаблицаЗначений;
	ТаблицаЗначенийКлиент.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	
	ТаблицаЗначенийПоставщик = Новый ТаблицаЗначений;
	ТаблицаЗначенийПоставщик.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	
	Для Каждого Строка Из Строки Цикл
		
		Если Строка.Значение.Данные.СуммаОстаток <> 0 ИЛИ Строка.Значение.Данные.КОплате <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.Значение.Данные.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗначенийКлиент.Добавить(),Строка.Значение.Данные,"Ссылка");
		ИначеЕсли Строка.Значение.Данные.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗначенийПоставщик.Добавить(),Строка.Значение.Данные,"Ссылка");
		КонецЕсли;
	КонецЦикла;
	
	МассивТекстов = Новый Массив;
	
	Если ТаблицаЗначенийКлиент.Количество() > 0 Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.ОбъектРасчетов КАК Ссылка,
		|	ВЫБОР 
		|		КОГДА &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток < 0
		|			ИЛИ НЕ &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток > 0
		|				ТОГДА 0
		|		КОГДА Расчеты.СуммаОстаток < 0 
		|				ТОГДА - Расчеты.СуммаОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ КАК СуммаОстаток,
		|	ВЫБОР 
		|		КОГДА Расчеты.КОплатеОстаток> 0
		|			ТОГДА Расчеты.КОплатеОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КОплате,
		|	Расчеты.ОплачиваетсяОстаток КАК Оплачивается
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(,ОбъектРасчетов В (ВЫБРАТЬ Ссылка ИЗ ВтТаблицаЗначенийКлиент)) КАК Расчеты";
		МассивТекстов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если ТаблицаЗначенийПоставщик.Количество() > 0 Тогда
		ТекстЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Расчеты.ОбъектРасчетов КАК Ссылка,
		|	ВЫБОР 
		|		КОГДА &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток < 0
		|			ИЛИ НЕ &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток > 0
		|				ТОГДА 0
		|		КОГДА Расчеты.СуммаОстаток < 0 
		|				ТОГДА - Расчеты.СуммаОстаток
		|		ИНАЧЕ Расчеты.СуммаОстаток
		|	КОНЕЦ КАК СуммаОстаток,
		|	ВЫБОР 
		|		КОГДА - Расчеты.КОплатеОстаток > 0
		|			ТОГДА - Расчеты.КОплатеОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КОплате,
		|	- Расчеты.ОплачиваетсяОстаток КАК Оплачивается
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,ОбъектРасчетов В (ВЫБРАТЬ Ссылка ИЗ ВтТаблицаЗначенийПоставщик)) КАК Расчеты";
		Если МассивТекстов.Количество() > 0 Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ"); //@Query-part-1 @Query-part-2
		КонецЕсли;
		МассивТекстов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Если МассивТекстов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ТаблицаЗначений.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтТаблицаЗначенийКлиент
		|ИЗ 
		|	&ТаблицаЗначенийКлиент КАК ТаблицаЗначений
		|;
		|ВЫБРАТЬ
		|	ТаблицаЗначений.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВтТаблицаЗначенийПоставщик
		|ИЗ 
		|	&ТаблицаЗначенийПоставщик КАК ТаблицаЗначений
		|;"
		+ СтрСоединить(МассивТекстов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос.УстановитьПараметр("ПодборДебиторскойЗадолженности", 
		Настройки.ПараметрыДанных.Элементы.Найти("ПодборДебиторскойЗадолженности").Значение);
	Запрос.УстановитьПараметр("ТаблицаЗначенийКлиент", ТаблицаЗначенийКлиент);
	Запрос.УстановитьПараметр("ТаблицаЗначенийПоставщик", ТаблицаЗначенийПоставщик);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтрокаСписка = Строки[Выборка.Ссылка];
		ЗаполнитьЗначенияСвойств(СтрокаСписка.Данные,Выборка,"КОплате, СуммаОстаток, Оплачивается");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПлатежаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьОбъект(0);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТолькоСОстаткомПриИзменении(Элемент)
	ОбновитьТекстЗапросаОбъектовРасчетов();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуПриИзменении(Элемент)
	УстановитьОтборПоТипу();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВыбораОснованияПриИзменении(Элемент)
	Если ПереключательВыбораОснования = 1 Тогда
		Если ЭтоРасчетыМеждуОрганизациями Тогда
			Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыМеждуОрганизациями;
		Иначе
			Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыКонтрагентов;
		КонецЕсли;
	Иначе
		Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДокументы;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено 
			И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки")
			И ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОснованиеПлатежа Тогда 
		Если Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДокументы Тогда
			СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
		ИначеЕсли Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыКонтрагентов Тогда 
			СтрокаТаблицы = Элементы.СписокДоговоровКонтрагентов.ТекущиеДанные;
		Иначе
			СтрокаТаблицы = Элементы.СписокДоговоровМеждуОрганизациями.ТекущиеДанные;
		КонецЕсли;
		Если СтрокаТаблицы <> Неопределено 
			И Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки")
			И ЗначениеЗаполнено(СтрокаТаблицы.ОснованиеПлатежа) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОснованиеПлатежа);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьДокумент(Команда)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДокументы Тогда
		СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыКонтрагентов Тогда
		СтрокаТаблицы = Элементы.СписокДоговоровКонтрагентов.ТекущиеДанные;
	Иначе
		СтрокаТаблицы = Элементы.СписокДоговоровМеждуОрганизациями.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТаблицы <> Неопределено Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки") Тогда
			ПоказатьПредупреждение(,
							НСтр("ru = 'Выберите элемент, а не группу.
							|Для раскрытия групп используйте ""Ctrl"" и стрелки вниз/вверх
							|или клавиши ""+"" и ""-"" на дополнительной клавиатуре.'"));
		Иначе
			Если ВернутьСтруктуру Тогда
				РезультатВыбора = РезультатВыбора(СтрокаТаблицы, Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов);
			Иначе
				РезультатВыбора = СтрокаТаблицы.ОбъектРасчетов;
			КонецЕсли;
			ОповеститьОВыборе(РезультатВыбора);
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъект(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперацияВводаОстатков);
	ПараметрыОткрытия.Вставить(
		"ЭтоРасчетыМеждуОрганизациями", 
		ЗначенияОтбора.Свойство("Партнер") 
			И ЗначенияОтбора.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	ПараметрыОткрытия.Вставить(
		"ЭтоРозничныйПокупатель", 
		ЗначенияОтбора.Свойство("Партнер") 
			И ЗначенияОтбора.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.РозничныйПокупатель"));
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбъектРасчетовСозданиеОбработкаВыбораТипа", ЭтотОбъект);
	ОткрытьФорму("Документ.ВводОстатковВзаиморасчетов.Форма.ФормаВыбораТипа", ПараметрыОткрытия, ЭтотОбъект,,,, ОписаниеОповещения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовНомер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовТипСсылки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовСумма.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовВалюта.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовСуммаОстаток.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовВалютаВзаиморасчетов.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовОрганизация.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовПартнер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДоговор.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовКонтрагент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовНомерВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовДатаВходящегоДокумента.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СсылкаНаОбъектРасчетов.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.Состояние");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.ТипОбъектаРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОбъектовРасчетов.Договор;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОбъектыРасчетовТипСсылки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СписокОбъектовРасчетов.ТипСсылки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Объект не указан>'"));
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "СписокОснованийПлатежа.Дата", "ОснованияПлатежаДата");
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтаФорма, "СписокОснованийПлатежа.ДатаВходящегоДокумента", "ОснованияПлатежаДатаВходящегоДокумента");

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ОбъектыРасчетов.ТекущиеДанные;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки") Тогда
		Если ВернутьСтруктуру Тогда
			РезультатВыбора = РезультатВыбора(СтрокаТаблицы);
		Иначе
			РезультатВыбора = СтрокаТаблицы.ОбъектРасчетов;
		КонецЕсли;
		ОповеститьОВыборе(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОснованияПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.ОснованияПлатежа.ТекущиеДанные;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки") Тогда
		РезультатВыбора = РезультатВыбора(СтрокаТаблицы, Ложь);
		ОповеститьОВыборе(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровКонтрагентовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.СписокДоговоровКонтрагентов.ТекущиеДанные;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки") Тогда
		РезультатВыбора = РезультатВыбора(СтрокаТаблицы, Ложь);
		ОповеститьОВыборе(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДоговоровМеждуОрганизациямиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтрокаТаблицы = Элементы.СписокДоговоровМеждуОрганизациями.ТекущиеДанные;
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаТаблицы, "ГруппировкаСтроки") Тогда
		РезультатВыбора = РезультатВыбора(СтрокаТаблицы, Ложь);
		ОповеститьОВыборе(РезультатВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция РезультатВыбора(СтрокаТаблицы, ВыборОбъектаРасчетов = Истина)
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ОснованиеПлатежа", ?(СтрокаТаблицы.Свойство("ОснованиеПлатежа"), СтрокаТаблицы.ОснованиеПлатежа, Неопределено));
	РезультатВыбора.Вставить("Организация", СтрокаТаблицы.Организация);
	РезультатВыбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	РезультатВыбора.Вставить("Контрагент", СтрокаТаблицы.Контрагент);
	РезультатВыбора.Вставить("Договор", СтрокаТаблицы.Договор);
	РезультатВыбора.Вставить("НаправлениеДеятельности", СтрокаТаблицы.НаправлениеДеятельности);
	РезультатВыбора.Вставить("РазрешенаРаботаСДочернимиПартнерами", СтрокаТаблицы.РазрешенаРаботаСДочернимиПартнерами);
	РезультатВыбора.Вставить("СуммаВзаиморасчетов", 0);
	РезультатВыбора.Вставить("Дата", СтрокаТаблицы.Дата);
	РезультатВыбора.Вставить("Номер", СтрокаТаблицы.Номер);
	РезультатВыбора.Вставить("СтавкаНДС", ПредопределенноеЗначение("Справочник.СтавкиНДС.ПустаяСсылка"));
	РезультатВыбора.Вставить("СуммаНДС", 0);
	РезультатВыбора.Вставить("СуммаЗаказа", СтрокаТаблицы.Сумма);
	РезультатВыбора.Вставить("СуммаПлатежа", СуммаПлатежа);
	РезультатВыбора.Вставить("ЭтоРасчетыСКлиентами", ЭтоРасчетыСКлиентами);
	РезультатВыбора.Вставить("ОбъектРасчетов", СтрокаТаблицы.ОбъектРасчетов);
	РезультатВыбора.Вставить("ВалютаВзаиморасчетов", СтрокаТаблицы.ВалютаВзаиморасчетов);
	РезультатВыбора.Вставить("ДатаПогашения", Дата(1, 1, 1));
	РезультатВыбора.Вставить("ДатаПлатежа", Дата(1, 1, 1));
	РезультатВыбора.Вставить("ЦентрализованныйДоговор", ?(СтрокаТаблицы.Свойство("ЦентрализованныйДоговор"), СтрокаТаблицы.ЦентрализованныйДоговор, Ложь));
	РезультатВыбора.Вставить("КомиссияЧерезКонечныхПокупателей", ?(СтрокаТаблицы.Свойство("КомиссияЧерезКонечныхПокупателей"), СтрокаТаблицы.КомиссияЧерезКонечныхПокупателей, Ложь));
	РезультатВыбора.Вставить("Объект", ?(СтрокаТаблицы.Свойство("Объект"), СтрокаТаблицы.Объект, Неопределено));

	Если Не (ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Или ВыборОбъектаРасчетов) Тогда
		РезультатВыбора.Вставить("ДокументОснование", СтрокаТаблицы.ДокументОснование);
		ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора);
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции

&НаСервере
Функция ТекстЗаголовка(Элементы, ИмяРеквизита = "Наименование")
	
	Если ТипЗнч(Элементы) = Тип("Массив") Тогда
		Реквизиты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Элементы, ИмяРеквизита);
		Имена = Новый Массив;
		Для Каждого Элемент Из Элементы Цикл
			Имена.Добавить(Реквизиты[Элемент]);
		КонецЦикла;
		ТекстЗаголовка = СтрСоединить(Имена, Символы.ПС);
	Иначе
		ТекстЗаголовка = Элементы;
	КонецЕсли;
	
	Возврат ТекстЗаголовка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаОснованийПлатежа(ЭтоРасчетыСКлиентом, СтруктураОтбора, ТипОснования)
	
	Возврат 
		ВзаиморасчетыСервер.ТекстЗапросаВыбораОснованияПлатежа(
			Ложь, 
			СтруктураОтбора, 
			Истина,
			ЭтоРасчетыСКлиентом, 
			Ложь, 
			ТипОснования);
	
КонецФункции

&НаСервере
Процедура ПриОткрытииНаСервере()
	ОбновитьТекстЗапросаОбъектовРасчетов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстЗапросаОбъектовРасчетов()
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить("НЕ &ВыборОснованияПлатежа");
	
	Если НЕ ТолькоСОстатком Или БезОтбораПоТипуРасчетов Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ 
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов, 
		|	ОбъектыРасчетов.Ссылка КАК Ссылка,
		|	ОбъектыРасчетов.ПометкаУдаления, 
		|	ОбъектыРасчетов.Наименование, 
		|	ОбъектыРасчетов.Объект, 
		|	ОбъектыРасчетов.Объект КАК ОснованиеПлатежа,
		|	ОбъектыРасчетов.ТипРасчетов,
		|	ОбъектыРасчетов.ТипОбъектаРасчетов,
		|	ОбъектыРасчетов.ТипСсылки, 
		|	ОбъектыРасчетов.ГруппаФинансовогоУчета, 
		|	ОбъектыРасчетов.Менеджер, 
		|	ОбъектыРасчетов.Подразделение, 
		|	ОбъектыРасчетов.ИдентификаторПлатежа, 
		|	ОбъектыРасчетов.Номер, 
		|	ОбъектыРасчетов.Дата, 
		|	ОбъектыРасчетов.НомерВходящегоДокумента, 
		|	ОбъектыРасчетов.ДатаВходящегоДокумента, 
		|	ОбъектыРасчетов.НаименованиеПервичногоДокумента, 
		|	ОбъектыРасчетов.Сумма, 
		|	ОбъектыРасчетов.Валюта, 
		|	ОбъектыРасчетов.Состояние,
		|	ОбъектыРасчетов.Партнер,
		|	ОбъектыРасчетов.Организация, 
		|	ОбъектыРасчетов.Контрагент, 
		|	ОбъектыРасчетов.Договор, 
		|	ОбъектыРасчетов.НаправлениеДеятельности, 
		|	ЕСТЬNULL(Договоры.РазрешенаРаботаСДочернимиПартнерами, ЛОЖЬ) КАК РазрешенаРаботаСДочернимиПартнерами,
		|	ЕСТЬNULL(Договоры.ЦентрализованныйДоговор, ЛОЖЬ) КАК ЦентрализованныйДоговор, 
		|	ЕСТЬNULL(Договоры.ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей, ЛОЖЬ) КАК КомиссияЧерезКонечныхПокупателей,
		|	ОбъектыРасчетов.ОплатаВВалюте, 
		|	ОбъектыРасчетов.ВалютаВзаиморасчетов,
		|	&ПодборДебиторскойЗадолженности КАК ПодборДебиторскойЗадолженности,
		|	ОбъектыРасчетов.ТолькоОстатки   КАК ТолькоОстатки,
		|	ОбъектыРасчетов.ОперацияССамозанятым КАК ОперацияССамозанятым,
		|	0 КАК СуммаОстаток,
		|	0 КАК КОплате,
		|	0 КАК Оплачивается
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|			ПО ОбъектыРасчетов.Договор = Договоры.Ссылка
		|ГДЕ
		|	&УсловияЗапроса
		|";
		
	Иначе
		
		МассивУсловий.Добавить("(Остатки.СуммаОстаток > 0 ИЛИ Остатки.Коплате > 0)");
		
		Если ЭтоРасчетыСКлиентами Тогда
			ТекстОстатки = "
				|ВЫБРАТЬ
				|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
				|	ВЫБОР 
				|		КОГДА &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток < 0
				|			ИЛИ НЕ &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток > 0
				|				ТОГДА 0
				|		КОГДА Расчеты.СуммаОстаток < 0 
				|				ТОГДА - Расчеты.СуммаОстаток
				|		ИНАЧЕ Расчеты.СуммаОстаток
				|	КОНЕЦ КАК СуммаОстаток,
				|	ВЫБОР 
				|		КОГДА Расчеты.КОплатеОстаток> 0
				|			ТОГДА Расчеты.КОплатеОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК КОплате,
				|	Расчеты.ОплачиваетсяОстаток КАК Оплачивается
				|ПОМЕСТИТЬ ВтОстатки
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки() КАК Расчеты
				|ИНДЕКСИРОВАТЬ ПО
				|	ОбъектРасчетов
				|;";
		Иначе
			ТекстОстатки = "
				|ВЫБРАТЬ
				|	Расчеты.ОбъектРасчетов КАК ОбъектРасчетов,
				|	ВЫБОР 
				|		КОГДА &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток < 0
				|			ИЛИ НЕ &ПодборДебиторскойЗадолженности И Расчеты.СуммаОстаток > 0
				|				ТОГДА 0
				|		КОГДА Расчеты.СуммаОстаток < 0 
				|				ТОГДА - Расчеты.СуммаОстаток
				|		ИНАЧЕ Расчеты.СуммаОстаток
				|	КОНЕЦ КАК СуммаОстаток,
				|	ВЫБОР 
				|		КОГДА -Расчеты.КОплатеОстаток > 0
				|			ТОГДА -Расчеты.КОплатеОстаток
				|		ИНАЧЕ 0
				|	КОНЕЦ КАК КОплате,
				|	-Расчеты.ОплачиваетсяОстаток КАК Оплачивается
				|ПОМЕСТИТЬ ВтОстатки
				|ИЗ
				|	РегистрНакопления.РасчетыСПоставщиками.Остатки() КАК Расчеты
				|ИНДЕКСИРОВАТЬ ПО
				|	ОбъектРасчетов
				|;";
		КонецЕсли;
		
		ТекстЗапроса = ТекстОстатки+ "
		|ВЫБРАТЬ 
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов, 
		|	ОбъектыРасчетов.Ссылка КАК Ссылка,
		|	ОбъектыРасчетов.ПометкаУдаления, 
		|	ОбъектыРасчетов.Наименование, 
		|	ОбъектыРасчетов.Объект, 
		|	ОбъектыРасчетов.Объект КАК ОснованиеПлатежа,
		|	ОбъектыРасчетов.ТипРасчетов,
		|	ОбъектыРасчетов.ТипОбъектаРасчетов,
		|	ОбъектыРасчетов.ТипСсылки, 
		|	ОбъектыРасчетов.ГруппаФинансовогоУчета, 
		|	ОбъектыРасчетов.Менеджер, 
		|	ОбъектыРасчетов.Подразделение, 
		|	ОбъектыРасчетов.ИдентификаторПлатежа, 
		|	ОбъектыРасчетов.Номер, 
		|	ОбъектыРасчетов.Дата, 
		|	ОбъектыРасчетов.НомерВходящегоДокумента, 
		|	ОбъектыРасчетов.ДатаВходящегоДокумента, 
		|	ОбъектыРасчетов.НаименованиеПервичногоДокумента, 
		|	ОбъектыРасчетов.Сумма, 
		|	ОбъектыРасчетов.Валюта, 
		|	ОбъектыРасчетов.Состояние,
		|	ОбъектыРасчетов.Партнер,
		|	ОбъектыРасчетов.Организация, 
		|	ОбъектыРасчетов.Контрагент, 
		|	ОбъектыРасчетов.Договор, 
		|	ОбъектыРасчетов.НаправлениеДеятельности, 
		|	ЕСТЬNULL(Договоры.РазрешенаРаботаСДочернимиПартнерами, ЛОЖЬ) КАК РазрешенаРаботаСДочернимиПартнерами,
		|	ЕСТЬNULL(Договоры.ЦентрализованныйДоговор, ЛОЖЬ) КАК ЦентрализованныйДоговор,
		|	ЕСТЬNULL(Договоры.ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей, ЛОЖЬ) КАК КомиссияЧерезКонечныхПокупателей,
		|	ОбъектыРасчетов.ОплатаВВалюте, 
		|	ОбъектыРасчетов.ВалютаВзаиморасчетов,
		|	&ПодборДебиторскойЗадолженности КАК ПодборДебиторскойЗадолженности,
		|	ОбъектыРасчетов.ТолькоОстатки   КАК ТолькоОстатки,
		|	ОбъектыРасчетов.ОперацияССамозанятым КАК ОперацияССамозанятым,
		|	Остатки.СуммаОстаток КАК СуммаОстаток,
		|	Остатки.КОплате КАК КОплате,
		|	Остатки.Оплачивается КАК Оплачивается
		|ИЗ
		|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтОстатки КАК Остатки 
		|			ПО Остатки.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
		|			ПО ОбъектыРасчетов.Договор = Договоры.Ссылка
		|ГДЕ
		|	&УсловияЗапроса
		|";
		
	КонецЕсли;
	
	МассивУсловий.Добавить("(ОбъектыРасчетов.Организация В (&Организация) 
		|	ИЛИ НЕ &ЭтоГоловнаяОрганизация 
		|		И ОбъектыРасчетов.Договор В (&ЦентрализованныеДоговоры)
		|		И (ОбъектыРасчетов.Организация = &ГоловнаяОрганизация
		|			ИЛИ Договоры.РазрешаетсяПередачаОплатМеждуФилиалами)
		|	ИЛИ &ЭтоГоловнаяОрганизация
		|		И ОбъектыРасчетов.Организация.ГоловнаяОрганизация В (&Организация)
		|		И ОбъектыРасчетов.Организация.ДопускаютсяВзаиморасчетыЧерезГоловнуюОрганизацию
		|	ИЛИ &ПоВсемОрганизациям)");
	
	Если ОплатаЧерезКомиссионера Тогда
		МассивУсловий.Добавить("(Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером) 
			|	И Договоры.КомиссионныеПродажи25
			|	ИЛИ НЕ &ВыбратьОбъектыРасчетовСКомиссионером)");
		МассивУсловий.Добавить("(Договоры.ДоговорСКомиссионером = &ДоговорСКомиссионером 
			|	И Договоры.Контрагент = &КлиентКонтрагент 
			|	И Договоры.Партнер = &КлиентПартнер 
			|	ИЛИ НЕ &ВыбратьОбъектыРасчетовСКонечнымКлиентом)");
	КонецЕсли;
	
	Если ВводОстатков Тогда
		
		Если ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам") Тогда
			
			МассивУсловий.Добавить("(ВЫРАЗИТЬ(ОбъектыРасчетов.Объект КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.АктПремииКлиенту))");
			
		Иначе
			
			МассивУсловий.Добавить("((ОбъектыРасчетов.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Накладная)
				|		ИЛИ ОбъектыРасчетов.Объект ССЫЛКА Документ.ПервичныйДокумент
				|			И ВЫРАЗИТЬ(ОбъектыРасчетов.Объект КАК Документ.ПервичныйДокумент).ТипПервичногоДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументов.АктПремииКлиенту)
				|			И НЕ &ВыборАванса)
				|	И (ОбъектыРасчетов.ТипОбъектаРасчетов <> ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.ПлатежВозврат)
				|		ИЛИ (ОбъектыРасчетов.Объект ССЫЛКА Документ.ПервичныйДокумент
				|			ИЛИ ОбъектыРасчетов.Объект ССЫЛКА Справочник.ПодарочныеСертификаты)
				|			И &ВыборАванса))");
			
		КонецЕсли;
		
		МассивУсловий.Добавить("(ОбъектыРасчетов.Партнер В (&Партнер)
			|	ИЛИ &ПоВсемПартнерам
			|	ИЛИ ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
			|	И ЕСТЬNULL(Договоры.ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей, ЛОЖЬ)
			|	И Договоры.Партнер В(&Партнер))");
		МассивУсловий.Добавить("(ОбъектыРасчетов.Контрагент В (&Контрагент)
			|	ИЛИ &ПоВсемКонтрагентам
			|	ИЛИ ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
			|	И ЕСТЬNULL(Договоры.ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей, ЛОЖЬ)
			|	И Договоры.Контрагент В(&Контрагент))");
		МассивУсловий.Добавить("НЕ (ОбъектыРасчетов.ТипОбъектаРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектовРасчетов.Договор)
			|	И ЕСТЬNULL(Договоры.ДоговорСКомиссионером.ВестиРасчетыЧерезКонечныхПокупателей, ЛОЖЬ)
			|	И Договоры.КомиссионерПартнер В (&Партнер)
			|	И Договоры.КомиссионерКонтрагент В(&Контрагент))");
	Иначе
		МассивУсловий.Добавить("(ОбъектыРасчетов.Партнер В (&Партнер) ИЛИ &ПоВсемПартнерам)");
		МассивУсловий.Добавить("(ОбъектыРасчетов.Контрагент В (&Контрагент) ИЛИ &ПоВсемКонтрагентам)");
		МассивУсловий.Добавить("(НЕ (ОбъектыРасчетов.Объект ССЫЛКА Справочник.ПодарочныеСертификаты) 
		                       |	ИЛИ &БезОтбораПоТипуРасчетов)");
	КонецЕсли;
	
	УсловиеЗапроса = СтрСоединить(
		МассивУсловий,
		"
		|И ");
	
	СписокОбъектовРасчетов.ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияЗапроса", УсловиеЗапроса);
	Элементы.ОбъектыРасчетов.Обновить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора)
	
	ВзаиморасчетыСервер.ДополнитьСтруктуруОбъектомРасчетовИВалютойВзаиморасчетов(РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТипу()
	
	Если ЗначениеЗаполнено(ОтборПоТипу) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"ТипОбъектаРасчетов",
			ОтборПоТипу,
			ВидСравненияКомпоновкиДанных.Равно,,
			Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			СписокОбъектовРасчетов,
			"ТипОбъектаРасчетов");
	КонецЕсли;
	Элементы.ОбъектыРасчетов.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРасчетовСозданиеОбработкаВыбораТипа(Результат, ДополнительныеПараметры)Экспорт 
	Если Результат <> Неопределено Тогда
		ЗначенияЗаполнения = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ЗначенияОтбора);
		ЗначенияЗаполнения.Вставить("ВестиРасчетыПоПретензии", Истина);
		Если ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовКлиентов") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Ложь);
		ИначеЕсли ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПремийКлиентам") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОтражениеПремииКлиентаРетроБонус"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Ложь);
		ИначеЕсли ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Истина);
		ИначеЕсли ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов") Тогда
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Ложь);
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
		ИначеЕсли ХозяйственнаяОперацияВводаОстатков = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам") Тогда
			ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика"));
			ЗначенияЗаполнения.Вставить("ЭтоПретензияПоставщику", Истина);
		КонецЕсли;
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ИмяОбъектаМетаданных = Результат.ИмяОбъектаМетаданных;
			ЗначенияЗаполнения.Вставить("ТипПервичногоДокумента", Результат.ТипПервичногоДокумента);
		Иначе
			ИмяОбъектаМетаданных = Результат;
		КонецЕсли;
		СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму(ИмяОбъектаМетаданных + ".ФормаОбъекта", СтруктураПараметров, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбъектРасчетов Тогда
		Элементы.ОбъектыРасчетов.Обновить();
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОснованиеПлатежа Тогда 
		Если Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДокументы Тогда
			Элементы.ОснованияПлатежа.Обновить();
		ИначеЕсли Элементы.ГруппаОснованиеПлатежаПоТипам.ТекущаяСтраница = Элементы.ГруппаДоговорыКонтрагентов Тогда 
			Элементы.СписокДоговоровКонтрагентов.Обновить();
		Иначе
			Элементы.СписокДоговоровМеждуОрганизациями.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоказатьДополнительныйОтборОбъектовРасчетов(Список, Отбор)

	ДоступныеПоляОтбора = Список.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы;
	ОписаниеПоляОтбора = Неопределено; // Неопределено, ДоступноеПолеКомпоновкиДанных
	
	ЭлементыПоля = СтрРазделить(Отбор.Ключ, ".");
	Индекс = 0;
	ЧастиПоляОтбора = Новый Массив;
	
	ПолучитьОписаниеПоляОтбора(ОписаниеПоляОтбора, ДоступныеПоляОтбора, ЭлементыПоля, ЧастиПоляОтбора, Индекс);
	
	Если ОписаниеПоляОтбора <> Неопределено Тогда
		
		ИмяБезТочки = СтрЗаменить(Отбор.Ключ, ".", "_");
		ИмяЗаголовка = СтрШаблон("Заголовок_%1", ИмяБезТочки);
		ИмяОтбора = СтрШаблон("Отбор_%1", ИмяБезТочки);
		
		НовыйЭлемент = Элементы.Добавить(
			ИмяЗаголовка,
			Тип("ДекорацияФормы"),
			Элементы.ГруппаДополнительныеЗаголовки);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		
		НовыйЭлемент = Элементы.Добавить(
			ИмяОтбора,
			Тип("ДекорацияФормы"),
			Элементы.ГруппаДополнительныеЗначения);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		
		Элементы[ИмяЗаголовка].Заголовок = СтрШаблон("%1:", ОписаниеПоляОтбора.Заголовок);
		
		Если ТипЗнч(Отбор.Значение) = Тип("Массив") Тогда
			
			СписокЗначений = Новый Массив;
			
			Для Каждого СтрокаЗначения Из Отбор.Значение Цикл
				
				Если ЗначениеЗаполнено(СтрокаЗначения) Тогда
					СписокЗначений.Добавить(СтрокаЗначения);
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЦикла;
			
			Элементы[ИмяОтбора].Заголовок = СтрСоединить(СписокЗначений, ";");
			
		Иначе
			Элементы[ИмяОтбора].Заголовок = Отбор.Значение;
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

// Получает описание поля из доступных полей отбора.
// 
// Параметры:
//  ОписаниеПоляОтбора - Неопределено, ДоступноеПолеКомпоновкиДанных - Описание поля, доступного для использования.
//  ДоступныеПоляОтбора - КоллекцияДоступныхПолейКомпоновкиДанных - Коллекция доступных полей для отбора.
//  ЭлементыПоля - Массив из Строка - Составные части ключа отбора.
//  ЧастиПоляОтбора - Массив из Строка - Часть из составных частей ключа отбора.
//  Индекс - Число - Индекс элемента из элементов поля.
&НаСервере
Процедура ПолучитьОписаниеПоляОтбора(ОписаниеПоляОтбора, ДоступныеПоляОтбора, ЭлементыПоля, ЧастиПоляОтбора, Индекс)

	Если Индекс < ЭлементыПоля.Количество() Тогда
		
		ЧастиПоляОтбора.Добавить(ЭлементыПоля[Индекс]);
		Идентификатор = СтрСоединить(ЧастиПоляОтбора, ".");
		ОписаниеПоляОтбора = ДоступныеПоляОтбора.Найти(Идентификатор);
		
		Если ОписаниеПоляОтбора <> Неопределено Тогда
			ПолучитьОписаниеПоляОтбора(ОписаниеПоляОтбора, ОписаниеПоляОтбора.Элементы, ЭлементыПоля, ЧастиПоляОтбора, Индекс + 1);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
