
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыМеждуОрганизациями)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Партнеры)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Контрагенты)
		ИЛИ НЕ ПравоДоступа("Чтение", Метаданные.Справочники.НаправленияДеятельности) Тогда
		Текст = НСтр("ru = 'Недостаточно прав для открытия формы подбора объекта расчетов.'");
		ОбщегоНазначения.СообщитьПользователю(Текст,,,,Отказ);
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ОбъектСсылка         = Параметры.ОбъектСсылка;
	ТипРасчетов          = Параметры.ТипРасчетов;
	ВалютаВзаиморасчетов = Параметры.ВалютаВзаиморасчетов;
	Организация          = Параметры.Организация;
	Партнер              = Параметры.Партнер;
	Если ЗначениеЗаполнено(Партнер) Тогда
		Элементы.Партнер.Доступность = Ложь;
	КонецЕсли;
	Контрагент           = Параметры.Контрагент;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Элементы.Контрагент.Доступность = Ложь;
	КонецЕсли;
	ИдентификаторПлатежа = Параметры.ИдентификаторПлатежа;
	
	СуммаДокумента = Параметры.СуммаДокумента;
	ВалютаДокумента = Параметры.ВалютаДокумента;
	
	ДатаДокумента  = Параметры.ДатаДокумента;
	ОднаВалютаВзаиморасчетов = ?(Параметры.Свойство("ОднаВалютаВзаиморасчетов"),Параметры.ОднаВалютаВзаиморасчетов,Ложь);
	
	АдресПлатежейВХранилище = Параметры.АдресПлатежейВХранилище;
	ПартнерПрочиеОтношения = Параметры.ПартнерПрочиеОтношения;
	ПодборДебиторскойЗадолженности = Параметры.ПодборДебиторскойЗадолженности;
	ПодборТолькоБезусловнойЗадолженности = Параметры.ПодборТолькоБезусловнойЗадолженности;
	УчитыватьФилиалы = Параметры.УчитыватьФилиалы;
	ЗаполнятьНДСВРасшифровке = Параметры.ЗаполнятьНДСВРасшифровке;
	
	Если Контрагент = Неопределено Тогда
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	// ДополнительныеОтборы - это соответствие, поэтому для кэширования отборов в реквизите формы используется список значений
	Если Параметры.ДополнительныеОтборы <> Неопределено Тогда
		Для Каждого КлючИЗначение Из Параметры.ДополнительныеОтборы Цикл
			ПараметрДополнительныеОтборы.Добавить(КлючИЗначение.Значение, КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
	ПараметрДополнительныеОтборы.Добавить(Ложь, "ПометкаУдаления");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СуммаДокумента = 0 Тогда 
		ПодбиратьНаСумму = Ложь;
	КонецЕсли;
	
	УстановитьОтборСтрок();
	ПриОткрытииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковРасчетовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущийЭлемент = Неопределено 
		Или Элемент.ТекущийЭлемент.Имя <> Элементы.ТаблицаОстатковРасчетовВыбран.Имя Тогда
		ИзмененныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент.ТекущиеДанные.ПолучитьИдентификатор());
		УстановитьСнятьВыборСтрок(ИзмененныеСтроки, Элемент.ТекущиеДанные.Выбран, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковРасчетовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаОстатковРасчетовОбъектРасчетов" Тогда
		СтрокаТаблицы = Элементы.ТаблицаОстатковРасчетов.ТекущиеДанные;
		Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.ОбъектРасчетов) Тогда
			ПоказатьЗначение(Неопределено, СтрокаТаблицы.ОбъектРасчетов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОстатковРасчетовВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаОстатковРасчетов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзмененныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные.ПолучитьИдентификатор());
	УстановитьСнятьВыборСтрок(ИзмененныеСтроки, ТекущиеДанные.Выбран);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодбиратьНаСуммуПриИзменении(Элемент)
	Если Не ПодбиратьНаСумму Тогда
		Для Каждого СтрокаОстатка Из ТаблицаОстатковРасчетов Цикл
			Если СтрокаОстатка.Выбран Тогда
				СтрокаОстатка.Сумма = ПолучитьПолнуюСуммуСтроки(СтрокаОстатка);
			КонецЕсли;
		КонецЦикла;
		РассчитатьСуммуПлатежей();
		УстановитьОтборСтрок();
	ИначеЕсли СуммаДокумента < СуммаПлатежей Тогда
		РассчитатьСуммуПлатежей();
		УстановитьОтборСтрок();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоДатамПлатежейПриИзменении(Элемент)
	Элементы.ТаблицаОстатковРасчетовДатаПлатежа.Видимость = ПоДатамПлатежей;
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()

	Если ОднаВалютаВзаиморасчетов Тогда
		ОчиститьСообщения();
		ВыбранныеСтроки = ТаблицаОстатковРасчетов.НайтиСтроки(Новый Структура("Выбран", Истина));
		Валюта = Неопределено;
		Для Каждого Строка Из ВыбранныеСтроки Цикл
			Если Валюта = Неопределено Тогда
				Валюта = Строка.ВалютаВзаиморасчетов;
			КонецЕсли;
			Если Валюта <> Строка.ВалютаВзаиморасчетов Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'В текущем документе разрешен подбор только в одной валюте взаиморасчетов.'"));
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПоместитьПлатежиВХранилище();
	Структура = Новый Структура("АдресПлатежейВХранилище", АдресПлатежейВХранилище);
	Структура.Вставить("ХозяйственнаяОперация", ?(ПодборДебиторскойЗадолженности, 
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности"),
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности")));
	Закрыть(Структура);
	
	ОповеститьОВыборе(Структура);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПлатежиВыполнить()
	
	СуммаПодбора = СуммаДокумента;
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		Если Элементы.ТаблицаОстатковРасчетов.ПроверитьСтроку(СтрокаТаблицы.ПолучитьИдентификатор()) 
			И ПолучитьПолнуюСуммуСтроки(СтрокаТаблицы) > 0 Тогда
			СтрокаТаблицы.Выбран = Истина;
			СтрокаТаблицы.Сумма = ПолучитьПолнуюСуммуСтроки(СтрокаТаблицы);
			СуммаПодбора = СуммаПодбора - СтрокаТаблицы.Сумма;
		КонецЕсли;
		Если ПодбиратьНаСумму
			И СуммаПодбора <= 0 Тогда
			СтрокаТаблицы.Выбран = Ложь;
		КонецЕсли;
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьПлатежиВыполнить()

	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		СтрокаТаблицы.Выбран = Ложь
	КонецЦикла;
	РассчитатьСуммуПлатежей();
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеПлатежи(Команда)
	
	МассивСтрок = Элементы.ТаблицаОстатковРасчетов.ВыделенныеСтроки;
	УстановитьСнятьВыборСтрок(МассивСтрок, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеПлатежи(Команда)
	
	МассивСтрок = Элементы.ТаблицаОстатковРасчетов.ВыделенныеСтроки;
	УстановитьСнятьВыборСтрок(МассивСтрок, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетов.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.ОплачиваетсяВсяСумма");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.RosyBrown);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетовИдентификаторПлатежа.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.ИдентификаторПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СокрЛП(ИдентификаторПлатежа);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.ИдентификаторПлатежа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦветМорскойВолны);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Оплачивается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.КОплате");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетов.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Оплачивается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.КОплате");
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаОстатковРасчетовСумма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаОстатковРасчетов.Выбран");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УстановитьВидимость()
	
	МассивЭлементов = Новый Массив;
	
	Если ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
		Если ПодборДебиторскойЗадолженности Тогда
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовНашДолг");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовВалютаВзаиморасчетовНашДолг");
		Иначе
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовДолгПартнера");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовКОплате");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовВалютаВзаиморасчетовДолгПартнера");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовВалютаВзаиморасчетов");
		КонецЕсли;
	ИначеЕсли ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
		Если НЕ ПодборДебиторскойЗадолженности Тогда
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовДолгПартнера");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовВалютаВзаиморасчетовДолгПартнера");
		Иначе
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовНашДолг");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовКОплате");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовВалютаВзаиморасчетовНашДолг");
			МассивЭлементов.Добавить("ТаблицаОстатковРасчетовВалютаВзаиморасчетов");
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", Ложь);

	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Заголовок = НСтр("ru = 'Подбор по расчетам между организациями'");
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
		ЭтотОбъект, "ТаблицаОстатковРасчетовДолгПартнера", НСтр("ru = 'Долг контрагента'"));
	
	ЕстьФилиалы = Справочники.Организации.ФилиалыСРасчетамиЧерезГоловнуюОрганизацию(Организация).Количество() > 0;
	Элементы.ТаблицаОстатковРасчетовОрганизация.Видимость = ЕстьФилиалы;
	
	Если СуммаДокумента = 0 Тогда
		Элементы.СуммаДокумента.Видимость = Ложь;
	КонецЕсли; 
	
	Элементы.ТаблицаОстатковРасчетовДатаПлатежа.Видимость = ПоДатамПлатежей;
	
	Если СуммаДокумента = 0 Тогда 
		Элементы.ПодбиратьНаСумму.Видимость = Ложь;
	Иначе
		ПредставлениеЛожь = НСтр("ru = 'без ограничения'");
		ПредставлениеИстина = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'на сумму %1 %2'"), СуммаДокумента, ВалютаДокумента);
		
		Элементы.ПодбиратьНаСумму.ФорматРедактирования = "БЛ='"+ПредставлениеЛожь+"'; БИ='"+ПредставлениеИстина+"'";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ПоместитьПлатежиВХранилище()
	
	Платежи = ТаблицаОстатковРасчетов.Выгрузить(, "Выбран, Сумма, ОбъектРасчетов, ВалютаВзаиморасчетов, Партнер, Контрагент, Договор, Организация, ДолгПартнера, НашДолг, ТипРасчетов, СтатьяДвиженияДенежныхСредств, ДатаПогашения");
	
	сч = 0;
	Пока сч < Платежи.Количество() Цикл
		Если Не Платежи[сч].Выбран Тогда
			Платежи.Удалить(сч);
		Иначе 
			сч = сч + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Платежи.Итог("Сумма") < СуммаДокумента И СуммаДокумента > 0 Тогда
		СтрокаТаблицы = Платежи.Добавить();
		СтрокаТаблицы.Сумма = СуммаДокумента - Платежи.Итог("Сумма");
		Если ЗначениеЗаполнено(Партнер) Тогда
			СтрокаТаблицы.Партнер = Партнер;
		Иначе
			СтрокаТаблицы.Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Контрагент);
		КонецЕсли;
		СтрокаТаблицы.ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(ОбъектСсылка);
		СтрокаТаблицы.ВалютаВзаиморасчетов = ВалютаДокумента;
	КонецЕсли;
	
	ОплатаОтКлиента = (ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	
	Если ЗаполнятьНДСВРасшифровке Тогда
		ТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, ДатаДокумента, ВалютаДокумента, Платежи.ВыгрузитьКолонку("ОбъектРасчетов"), ОплатаОтКлиента);
		ДенежныеСредстваСервер.ЗаполнитьНДСВРасшифровке(Платежи, ТаблицаНДС);
	КонецЕсли;
	
	Платежи.Колонки.Добавить("ОснованиеПлатежа");
	ОбъектыРасчетов = Платежи.ВыгрузитьКолонку("ОбъектРасчетов");
	Объекты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбъектыРасчетов, "Объект");
	Для Каждого Стр Из Платежи Цикл
		Стр.ОснованиеПлатежа = Объекты[Стр.ОбъектРасчетов] 
	КонецЦикла;
	
	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(Платежи, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	ЗаполнитьТаблицуПоРасчетамСПартнерами();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПоРасчетамСПартнерами()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Дата", ДатаДокумента);
	Реквизиты.Вставить("Организация", Организация);
	Реквизиты.Вставить("СуммаДокумента", СуммаДокумента);
	Реквизиты.Вставить("Валюта", ВалютаДокумента);
	Реквизиты.Вставить("Контрагент", Контрагент);
	Реквизиты.Вставить("Партнер", Партнер);
	
	Если ЗначениеЗаполнено(ТипРасчетов) Тогда
		Реквизиты.Вставить("ТипРасчетов", ТипРасчетов);
	КонецЕсли;
	
	Реквизиты.Вставить("ПартнерПрочиеОтношения", ПартнерПрочиеОтношения);
	Реквизиты.Вставить("ПодборДебиторскойЗадолженности", ПодборДебиторскойЗадолженности);
	Реквизиты.Вставить("ПодборТолькоБезусловнойЗадолженности", ПодборТолькоБезусловнойЗадолженности);
	
	Реквизиты.Вставить("УчитыватьФилиалы", УчитыватьФилиалы);
	Реквизиты.Вставить("ПоДатамПлатежей", ПоДатамПлатежей);
	
	ДополнительныеОтборы = Новый Соответствие();
	Для Каждого ЭлементСписка Из ПараметрДополнительныеОтборы Цикл
		ДополнительныеОтборы.Вставить(ЭлементСписка.Представление, ЭлементСписка.Значение);
	КонецЦикла;
	
	ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов, ДополнительныеОтборы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КурсыВалютыРасчетов.Валюта КАК Валюта,
	|	КурсыВалют.КурсЧислитель * ЕСТЬNULL(КурсыВалютыРасчетов.КурсЗнаменатель,1) 
	|		/ (КурсыВалют.КурсЗнаменатель * ЕСТЬNULL(КурсыВалютыРасчетов.КурсЧислитель,1)) КАК Коэффициент
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалют
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Дата, БазоваяВалюта = &БазоваяВалюта) КАК КурсыВалютыРасчетов
	|			ПО КурсыВалютыРасчетов.Валюта В (&ВалютыРасчетов)
	|ГДЕ КурсыВалют.Валюта = &ВалютаДокумента";
	Запрос.УстановитьПараметр("Дата",ДатаДокумента);
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ВалютыРасчетов",ТаблицаОстатковРасчетов.Выгрузить(,"ВалютаВзаиморасчетов").ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
	Запрос.УстановитьПараметр("БазоваяВалюта", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	КоэффициентыПересчета.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СуммаПлатежей = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если СтрокаТаблицы.Выбран Тогда
			СуммаПлатежей = СуммаПлатежей + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПлатежей(ИдентификаторИзмененнойСтроки = Неопределено, РедактированиеСуммы = Ложь)
	
	РассчитатьПодборНаСумму(ИдентификаторИзмененнойСтроки, РедактированиеСуммы);
	
	СуммаПлатежей = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
		
		Если СтрокаТаблицы.Выбран Тогда
			СуммаПлатежей = СуммаПлатежей + СтрокаТаблицы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрок()
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПодборНаСумму(ИдентификаторИзмененнойСтроки, РедактированиеСуммы)
	
	Если Не ПодбиратьНаСумму Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСуммаПлатежей = 0;
	ВыбранныеСтроки = ТаблицаОстатковРасчетов.НайтиСтроки(Новый Структура("Выбран", Истина));
	Для Каждого СтрокаТаблицы Из ВыбранныеСтроки Цикл
		НоваяСуммаПлатежей = НоваяСуммаПлатежей + СтрокаТаблицы.Сумма;
	КонецЦикла;
	
	Если ИдентификаторИзмененнойСтроки = Неопределено Тогда
		Если ВыбранныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТекущаяСтрока = ВыбранныеСтроки[0];
	Иначе
		ТекущаяСтрока = ТаблицаОстатковРасчетов.НайтиПоИдентификатору(ИдентификаторИзмененнойСтроки);
	КонецЕсли;
	
	Если НоваяСуммаПлатежей > СуммаДокумента Тогда
		// Необходимо уменьшить сумму выбираемых строк до суммы документа, начиная с конца
		Уменьшить = НоваяСуммаПлатежей - СуммаДокумента;
		КлючевыеРеквизитыТекущейСтроки = КлючевыеРеквизиты();
		ЗаполнитьЗначенияСвойств(КлючевыеРеквизитыТекущейСтроки, ТекущаяСтрока);
		Счетчик = ВыбранныеСтроки.ВГраница();
		Пока Счетчик >= 0 Цикл
			КлючевыеРеквизиты = КлючевыеРеквизиты();
			ЗаполнитьЗначенияСвойств(КлючевыеРеквизиты, ВыбранныеСтроки[Счетчик]);
			Если ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(КлючевыеРеквизиты, КлючевыеРеквизитыТекущейСтроки) 
				И ТаблицаОстатковРасчетов.Индекс(ТекущаяСтрока) >= ТаблицаОстатковРасчетов.Индекс(ВыбранныеСтроки[Счетчик]) Тогда
				Счетчик = Счетчик - 1;
				Продолжить;
			КонецЕсли;
			Если ВыбранныеСтроки[Счетчик].Сумма <= Уменьшить Тогда
				ВыбранныеСтроки[Счетчик].Выбран = Ложь;
				Уменьшить = Уменьшить - ВыбранныеСтроки[Счетчик].Сумма;
				ВыбранныеСтроки[Счетчик].Сумма = ПолучитьПолнуюСуммуСтроки(ВыбранныеСтроки[Счетчик]);
			Иначе
				ВыбранныеСтроки[Счетчик].Сумма = ВыбранныеСтроки[Счетчик].Сумма - Уменьшить;
				Уменьшить = 0;
			КонецЕсли;
			Счетчик = Счетчик - 1;
		КонецЦикла;
		// Теперь уменьшаем строки по выбранному объекту расчетов, если остальных не хватило
		Если Уменьшить > 0 Тогда
			КлючевыеРеквизитыТекущейСтроки.Вставить("Выбран", Истина);
			СтрокиДатПлатежа = ТаблицаОстатковРасчетов.НайтиСтроки(КлючевыеРеквизитыТекущейСтроки);
			Счетчик = СтрокиДатПлатежа.ВГраница();
			Пока Счетчик >= 0 Цикл
				ПоказатьСообщение = Ложь;
				Если СтрокиДатПлатежа[Счетчик].Сумма <= Уменьшить Тогда
					СтрокиДатПлатежа[Счетчик].Выбран = Ложь;
					Уменьшить = Уменьшить - СтрокиДатПлатежа[Счетчик].Сумма;
					СтрокиДатПлатежа[Счетчик].Сумма = ПолучитьПолнуюСуммуСтроки(СтрокиДатПлатежа[Счетчик]);
					Если СтрокиДатПлатежа[Счетчик] = ТекущаяСтрока Тогда
						ПоказатьСообщение = Истина;
					КонецЕсли;
				Иначе
					СтрокиДатПлатежа[Счетчик].Сумма = СтрокиДатПлатежа[Счетчик].Сумма - Уменьшить;
					Уменьшить = 0;
					Если СтрокиДатПлатежа[Счетчик] = ТекущаяСтрока И РедактированиеСуммы Тогда
						ПоказатьСообщение = Истина;
					КонецЕсли;
				КонецЕсли;
				// Если более ранние этапы оплаты уже выбраны, то невозможно выбрать строку или установить введенную сумму
				Если ПоказатьСообщение Тогда
					ТекстСообщения = НСтр("ru='Для выбора строк на большую сумму установите переключатель в режим ""без ограничения""'");
					ОчиститьСообщения();
					ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				КонецЕсли;
				Счетчик = Счетчик - 1;
			КонецЦикла;
		КонецЕсли;
	Иначе
		
		// Если сумма выбранных платежей уменьшилась, попытаемся сначала поместить разницу в уже выбранные строки с неполной суммой 
		УвеличитьВыбранные = 0;
		Если НоваяСуммаПлатежей < СуммаДокумента Тогда
			УвеличитьВыбранные = СуммаДокумента - НоваяСуммаПлатежей;
		КонецЕсли;
		
		Выбрать = СуммаДокумента;
		Найдена = Ложь;
		НевыбранныеЭтапы = Новый Соответствие;
		
		Для Каждого Стр Из ТаблицаОстатковРасчетов Цикл
			
			КлючевыеРеквизиты = КлючевыеРеквизиты();
			ЗаполнитьЗначенияСвойств(КлючевыеРеквизиты, Стр);
			
			Если (НЕ Стр.Выбран 
				Или Стр.Сумма < ПолучитьПолнуюСуммуСтроки(Стр))
					И ПолучитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы) = Неопределено Тогда
				УстановитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы, Стр.ПолучитьИдентификатор());
			КонецЕсли;
			
			Если Стр = ТекущаяСтрока Тогда
				Найдена = Истина;
				Если НЕ Стр.Выбран Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ Найдена Тогда
				Если Стр.Выбран Тогда 
					ПолнаяСумма = ПолучитьПолнуюСуммуСтроки(Стр);
					Если УвеличитьВыбранные > 0 И Стр.Сумма < ПолнаяСумма Тогда
						Если УвеличитьВыбранные > ПолнаяСумма - Стр.Сумма Тогда
							УвеличитьВыбранные = УвеличитьВыбранные + Стр.Сумма - ПолнаяСумма;
							Стр.Сумма = ПолнаяСумма;
						Иначе
							Стр.Сумма = Стр.Сумма + УвеличитьВыбранные;
							УвеличитьВыбранные = 0;
						КонецЕсли;
					КонецЕсли;
					Выбрать = Выбрать - Стр.Сумма;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если Стр.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
				КОплате = Стр.КОплате - Стр.Оплачивается;
			Иначе
				Для Каждого Строка Из КоэффициентыПересчета Цикл
					Если Строка.Валюта = Стр.ВалютаВзаиморасчетов Тогда
						КОплате = (Стр.КОплате - Стр.Оплачивается) / Строка.Коэффициент;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ИдентификаторНевыбранногоЭтапа = ПолучитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы);
			БолееРаннийЭтапВыбран = ИдентификаторНевыбранногоЭтапа = Неопределено
									Или ИдентификаторНевыбранногоЭтапа = Стр.ПолучитьИдентификатор();
			
			Если Выбрать <= 0 Или Не БолееРаннийЭтапВыбран Тогда
				Стр.Выбран = Ложь;
				Стр.Сумма = ПолучитьПолнуюСуммуСтроки(Стр);
				УстановитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы, Стр.ПолучитьИдентификатор());
			ИначеЕсли РедактированиеСуммы И Стр = ТекущаяСтрока Тогда
				Если Стр.Сумма = 0 Тогда
					Стр.Выбран = Ложь;
					УстановитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы, Стр.ПолучитьИдентификатор());
				КонецЕсли;
				Выбрать = Выбрать - Стр.Сумма;
			ИначеЕсли Выбрать < КОплате Тогда
				Стр.Сумма = Выбрать;
				Стр.Выбран = Истина;
				Выбрать = 0;
				УстановитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы, Неопределено)
			ИначеЕсли КОплате > 0 Тогда
				// Если пользователь ввел сумму меньше полной, то ее нужно оставить
				Стр.Сумма = КОплате;
				Стр.Выбран = Истина;
				Выбрать = Выбрать - Стр.Сумма;
				УстановитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, НевыбранныеЭтапы, Неопределено)
			ИначеЕсли Стр.Выбран Тогда
				Выбрать = Выбрать - Стр.Сумма;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьВыборСтрок(ИзмененныеСтроки, УстановитьВыбор, РедактированиеСуммы = Ложь)
	
	МассивДатПлатежаПоРеквизитам = ПолучитьДатыПлатежаПоКлючевымРеквизитам(ИзмененныеСтроки, Не УстановитьВыбор);
	
	Для Каждого СтруктураСДатой Из МассивДатПлатежаПоРеквизитам Цикл
		КлючевыеРеквизиты = КлючевыеРеквизиты();
		ЗаполнитьЗначенияСвойств(КлючевыеРеквизиты, СтруктураСДатой);
		СтрокиТаблицыПоРеквизитам = ТаблицаОстатковРасчетов.НайтиСтроки(КлючевыеРеквизиты);
		Счетчик = СтрокиТаблицыПоРеквизитам.Количество();
		Пока Счетчик > 0 Цикл
			Счетчик = Счетчик - 1;
			Если УстановитьВыбор И СтрокиТаблицыПоРеквизитам[Счетчик].ДатаПлатежа <= СтруктураСДатой.ДатаПлатежа
				Или Не УстановитьВыбор И СтрокиТаблицыПоРеквизитам[Счетчик].ДатаПлатежа >= СтруктураСДатой.ДатаПлатежа Тогда
				// При установке выбора предыдущих строк подбор на сумму надо запускать с самой первой выбранной строки
				Если УстановитьВыбор
					И (Не СтрокиТаблицыПоРеквизитам[Счетчик].Выбран 
						Или СтрокиТаблицыПоРеквизитам[Счетчик].Сумма < ПолучитьПолнуюСуммуСтроки(СтрокиТаблицыПоРеквизитам[Счетчик])) Тогда
					Элементы.ТаблицаОстатковРасчетов.ТекущаяСтрока = СтрокиТаблицыПоРеквизитам[Счетчик].ПолучитьИдентификатор();
				КонецЕсли;
				СтрокиТаблицыПоРеквизитам[Счетчик].Выбран = УстановитьВыбор;
				Если Не УстановитьВыбор Тогда
					СтрокиТаблицыПоРеквизитам[Счетчик].Сумма = ПолучитьПолнуюСуммуСтроки(СтрокиТаблицыПоРеквизитам[Счетчик]);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если РедактированиеСуммы Тогда
		Для Каждого ИдентификаторСтроки Из ИзмененныеСтроки Цикл
			СтрокаТаблицы = ТаблицаОстатковРасчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если СтрокаТаблицы.Сумма = 0 Тогда
				СтрокаТаблицы.Выбран = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьСуммуПлатежей(Элементы.ТаблицаОстатковРасчетов.ТекущаяСтрока, РедактированиеСуммы);
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Функция КлючевыеРеквизиты()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ОбъектРасчетов", ПредопределенноеЗначение("Справочник.ОбъектыРасчетов.ПустаяСсылка"));
	Результат.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"));
	Результат.Вставить("ВалютаВзаиморасчетов", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьДатыПлатежаПоКлючевымРеквизитам(ВыбранныеСтроки, ВыбиратьМинимум = Ложь)
	
	Результат = Новый Массив;
	
	// Найдем минимальные или максимальные даты платежа в разрезе ключевых реквизитов, простым перебором, так как выбранных строк не бывает много
	Для Каждого ИдентификаторСтроки Из ВыбранныеСтроки Цикл
		СтрокаТаблицы = ТаблицаОстатковРасчетов.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаТаблицы <> Неопределено Тогда
			СтруктураСДатой = КлючевыеРеквизиты();
			ЗаполнитьЗначенияСвойств(СтруктураСДатой, СтрокаТаблицы);
			СтруктураСДатой.Вставить("ДатаПлатежа", СтрокаТаблицы.ДатаПлатежа);
			НайденнаяСтруктура = Неопределено;
			Для Каждого СтруктураРезультата Из Результат Цикл
				Если ОбщегоНазначенияУТКлиентСервер.СтруктурыРавны(СтруктураРезультата, СтруктураСДатой, "ОбъектРасчетов,Партнер,ВалютаВзаиморасчетов") Тогда
					НайденнаяСтруктура = СтруктураРезультата;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НайденнаяСтруктура = Неопределено Тогда
				Результат.Добавить(СтруктураСДатой);
			ИначеЕсли ВыбиратьМинимум И СтрокаТаблицы.ДатаПлатежа < НайденнаяСтруктура.ДатаПлатежа
				Или Не ВыбиратьМинимум И СтрокаТаблицы.ДатаПлатежа > НайденнаяСтруктура.ДатаПлатежа Тогда
				НайденнаяСтруктура.ДатаПлатежа = СтрокаТаблицы.ДатаПлатежа;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, Соответствие)
	
	Результат = Соответствие;
	Для Каждого КлючИЗначение Из КлючевыеРеквизиты Цикл
		Результат = Результат[КлючИЗначение.Значение];
		Если Результат = Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьЗначениеПоКлючевымРеквизитам(КлючевыеРеквизиты, Соответствие, Значение)
	
	ТекущееСоответствие = Соответствие;
	Счетчик = 1;
	Для Каждого КлючИЗначение Из КлючевыеРеквизиты Цикл
		Если Счетчик < КлючевыеРеквизиты.Количество() Тогда
			Если ТекущееСоответствие[КлючИЗначение.Значение] = Неопределено Тогда
				ТекущееСоответствие[КлючИЗначение.Значение] = Новый Соответствие;
			КонецЕсли;
			ТекущееСоответствие = ТекущееСоответствие[КлючИЗначение.Значение];
		Иначе
			ТекущееСоответствие[КлючИЗначение.Значение] = Значение;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПолнуюСуммуСтроки(ДанныеСтроки)
	
	Коэффициент = 1;
	Если ДанныеСтроки.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
		Для Каждого Строка Из КоэффициентыПересчета Цикл
			Если Строка.Валюта = ДанныеСтроки.ВалютаВзаиморасчетов Тогда
				Коэффициент = Строка.Коэффициент;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ДанныеСтроки.ДолгПартнера <> 0 И ПодборДебиторскойЗадолженности Тогда
		Возврат Мин(ДанныеСтроки.ДолгПартнера, ДанныеСтроки.КОплате - ДанныеСтроки.Оплачивается) / Коэффициент;
	ИначеЕсли ДанныеСтроки.НашДолг <> 0  И НЕ ПодборДебиторскойЗадолженности Тогда
		Возврат Мин(ДанныеСтроки.НашДолг, ДанныеСтроки.КОплате - ДанныеСтроки.Оплачивается) / Коэффициент;
	ИначеЕсли ДанныеСтроки.КОплате <> 0 Тогда
		Возврат (ДанныеСтроки.КОплате - ДанныеСтроки.Оплачивается) / Коэффициент;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти
