#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПротоколОбменаИС.ОтработатьВходящийДокументПротоколаОбмена(ЭтотОбъект);
	
	РеквизитыДокументаОснования = Новый ФиксированнаяСтруктура(
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Ссылка, Проведен"));
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.НакладнаяСАТУРН") Тогда
		Организация = ОрганизацияКПередачеСообщенияПоДокументу(Документ);
	ИначеЕсли Метаданные.ОпределяемыеТипы.ДокументыСАТУРН.Тип.СодержитТип(ТипЗнч(Документ)) Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ОрганизацияСАТУРН");
	Иначе
		Организация = ИнтеграцияИС.ОрганизацияИзПрикладногоОбъекта(Документ);
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ЗаполнитьДеревоФайлов();
	
	ИнтеграцияИС.ПриСозданииНаСервереВФормеДокументаОснования(
		ЭтотОбъект,
		РеквизитыДокументаОснования,
		ИнтеграцияИС.ПараметрыИнтеграцииВФорме("САТУРН", ИнтеграцияИС.ИмяЭлементаДляРазмещения()));
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбщегоНазначенияИСКлиент.РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ПерезаполнитьДерево = Ложь;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы())
	 И (Параметр.Ссылка = Документ Или (Параметр.Свойство("Основание") И Параметр.Основание = Документ)) Тогда
		
		ПерезаполнитьДерево = Истина;
		
	ИначеЕсли ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ПерезаполнитьДерево = Истина;
		
	ИначеЕсли СтрНачинаетсяС(ИмяСобытия, ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененОбъект(ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы())) Тогда
		
		ПерезаполнитьДерево = Истина;
		
	КонецЕсли;
	
	Если ПерезаполнитьДерево Тогда
		ОбновитьДерево();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекстДокументаСАТУРНОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОбработкаНавигационнойСсылкиВФормеДокументаОснования(
		ЭтотОбъект,
		РеквизитыДокументаОснования,
		Элемент,
		НавигационнаяСсылкаФорматированнойСтроки,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоФайлов

&НаКлиенте
Процедура ДеревоФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьСообщенияОперации(ВыбраннаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ОчиститьСообщения();
	
	РезультатОбмена = ИнтеграцияСАТУРНВызовСервера.ВыполнитьОбмен(
		Организация, УникальныйИдентификатор, Документ);
	
	ИнтеграцияСАТУРНСлужебныйКлиент.ОбработатьРезультатОбмена(
		РезультатОбмена, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщенияJSON(Команда)
	
	ПоказатьСообщенияОперации(Элементы.ДеревоФайлов.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатус(Команда)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСтатусНаСервере(ТекущиеДанные.Документ);
	
	Оповестить(ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы()));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьДерево()
	
	ЗаполнитьДеревоФайлов();
	ОбщегоНазначенияИСКлиент.РазвернутьДеревоРекурсивно(ДеревоФайлов, Элементы.ДеревоФайлов);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ПротоколОбменаИС.УстановитьУсловноеОформлениеПротоколаОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтатусНаСервере(ДокументСсылка)
	
	ИнтеграцияСАТУРН.РассчитатьСтатусДокументаПоДаннымПротоколаОбмена(ДокументСсылка);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеОперации(СтрокаПоследовательности, ДокументСсылка, ВыборкаПоФайлам = Неопределено, ТаблицаРасчетаКоличества = Неопределено)
	
	Если СтрокаПоследовательности = Неопределено Тогда
		
		Возврат "";
		
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Исходящий Тогда
		
		Если ВыборкаПоФайлам = Неопределено Тогда
			Возврат ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СтрокаПоследовательности.Операция, Неопределено, Неопределено);
		Иначе
			
			ТекстПоКоличествуСообщений = Неопределено;
			
			Если ТаблицаРасчетаКоличества <> Неопределено Тогда
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Ссылка",   ВыборкаПоФайлам.Ссылка);
				СтруктураПоиска.Вставить("Версия",   ВыборкаПоФайлам.Версия);
				СтруктураПоиска.Вставить("Операция", ВыборкаПоФайлам.Операция);
				
				ПоискСтрок = ТаблицаРасчетаКоличества.НайтиСтроки(СтруктураПоиска);
				
				Если ПоискСтрок.Количество() > 0 И ПоискСтрок[0].СоставнаяОперация Тогда
					ТекстПоКоличествуСообщений = СтрШаблон(
						НСтр("ru = '%1 из %2'"), ПоискСтрок[0].ТекущийНомер , ПоискСтрок[0].Количество);
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(
				СтрокаПоследовательности.Операция, Неопределено, ВыборкаПоФайлам.Версия, ТекстПоКоличествуСообщений);
			
		КонецЕсли;
		
	ИначеЕсли СтрокаПоследовательности.ТипСообщения = Перечисления.ТипыЗапросовИС.Входящий Тогда
		
		Возврат ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПолученияДанных(СтрокаПоследовательности.Операция);
		
	Иначе
		
		Возврат Строка(СтрокаПоследовательности.Операция);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТаблицаДокументы(Документ = Неопределено)
	
	ТаблицаДокументы = Новый ТаблицаЗначений;
	ТаблицаДокументы.Колонки.Добавить("Ссылка",              Метаданные.Справочники.САТУРНПрисоединенныеФайлы.Реквизиты.Документ.Тип);
	ТаблицаДокументы.Колонки.Добавить("Статус",              Метаданные.РегистрыСведений.СтатусыДокументовСАТУРН.Ресурсы.Статус.Тип);
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие1", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие2", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН"));
	ТаблицаДокументы.Колонки.Добавить("ДальнейшееДействие3", Новый ОписаниеТипов("ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН"));
	
	Если Документ <> Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Таблица.Документ            КАК Ссылка,
		|	Таблица.Статус              КАК Статус,
		|	Таблица.ДальнейшееДействие1 КАК ДальнейшееДействие1,
		|	Таблица.ДальнейшееДействие2 КАК ДальнейшееДействие2,
		|	Таблица.ДальнейшееДействие3 КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовСАТУРН КАК Таблица
		|ГДЕ
		|	Таблица.Документ = &ДокументСсылка
		|");
		
		Запрос.УстановитьПараметр("ДокументСсылка", Документ);
		
		УстановитьПривилегированныйРежим(Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаДокументы;
	
КонецФункции

&НаСервере
Процедура РассчитатьКоличествоДляПредставления(ТаблицаРасчетаКоличества)

	ВременнаяТаблицаРасчета = ТаблицаРасчетаКоличества.Скопировать();
	ВременнаяТаблицаРасчета.Свернуть("Версия, Операция", "Количество");
	
	Для Каждого СтрокаГруппы Из ВременнаяТаблицаРасчета Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Версия",   СтрокаГруппы.Версия);
		СтруктураПоиска.Вставить("Операция", СтрокаГруппы.Операция);
		
		ПоискСтрок = ТаблицаРасчетаКоличества.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из ПоискСтрок Цикл
			НайденнаяСтрока.Количество        = СтрокаГруппы.Количество;
			НайденнаяСтрока.ТекущийНомер      = ПоискСтрок.Найти(НайденнаяСтрока) + 1;
			НайденнаяСтрока.СоставнаяОперация = ПоискСтрок.Количество() > 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция НоваяТаблицаРасчетаКоличестваОпераций()
	
	ТаблицаРасчетаКоличества = Новый ТаблицаЗначений();
	ТаблицаРасчетаКоличества.Колонки.Добавить("Версия");
	ТаблицаРасчетаКоличества.Колонки.Добавить("Операция");
	ТаблицаРасчетаКоличества.Колонки.Добавить("Ссылка");
	ТаблицаРасчетаКоличества.Колонки.Добавить("ТекущийНомер");
	ТаблицаРасчетаКоличества.Колонки.Добавить("Количество");
	ТаблицаРасчетаКоличества.Колонки.Добавить("СоставнаяОперация");
	
	ТаблицаРасчетаКоличества.Индексы.Добавить("Версия, Операция");
	ТаблицаРасчетаКоличества.Индексы.Добавить("Ссылка, Версия, Операция");
	
	Возврат ТаблицаРасчетаКоличества;
	
КонецФункции

#Область ЗаполнениеДереваФайлов

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаНакладнаяСАТУРН(ДокументОснование)
	
	МетаданныеДокумента = Метаданные.Документы.НакладнаяСАТУРН;
	
	ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокумента, ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаАктИнвентаризацииСАТУРН(ДокументОснование)
	
	МетаданныеДокумента = Метаданные.Документы.АктИнвентаризацииСАТУРН;
	
	ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокумента, ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаАктПримененияСАТУРН(ДокументОснование)
	
	МетаданныеДокумента = Метаданные.Документы.АктПримененияСАТУРН;
	
	ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокумента, ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаИмпортПродукцииСАТУРН(ДокументОснование)
	
	МетаданныеДокумента = Метаданные.Документы.ИмпортПродукцииСАТУРН;
	
	ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокумента, ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаПроизводственнаяОперацияСАТУРН(ДокументОснование)
	
	МетаданныеДокумента = Метаданные.Документы.ПроизводственнаяОперацияСАТУРН;
	
	ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокумента, ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаПланПримененияСАТУРН(ДокументОснование)
	
	МетаданныеДокумента = Метаданные.Документы.ПланПримененияСАТУРН;
	
	ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокумента, ДокументОснование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОснованиюДокументаСАТУРН(МетаданныеДокументаСАТУРН, ДокументОснование, ДобавитьГиперссылку = Истина)
	
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                     КАК Ссылка,
	|	СтатусыДокументовСАТУРН.Статус              КАК Статус,
	|	СтатусыДокументовСАТУРН.ДальнейшееДействие1 КАК ДальнейшееДействие1,
	|	СтатусыДокументовСАТУРН.ДальнейшееДействие2 КАК ДальнейшееДействие2,
	|	СтатусыДокументовСАТУРН.ДальнейшееДействие3 КАК ДальнейшееДействие3
	|ИЗ
	|	Документ.%1 КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
	|		ПО СтатусыДокументовСАТУРН.Документ = ТаблицаДокумента.Ссылка
	|		И СтатусыДокументовСАТУРН.ИдентификаторСтроки = """"
	|ГДЕ
	|	ТаблицаДокумента.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.Дата";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонТекстаЗапроса,
		МетаданныеДокументаСАТУРН.Имя);
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	ТаблицаДокументы = ТаблицаДокументы();
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДокументы.Добавить(), Выборка);
	КонецЦикла;
	
	ЗаполнитьПоДокументу(ТаблицаДокументы, Истина);
	
	Если НЕ ДобавитьГиперссылку Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовСАТУРН.Документ,
	|	СтатусыОформленияДокументовСАТУРН.СтатусОформления КАК Статус,
	|	СтатусыОформленияДокументовСАТУРН.Архивный КАК Архивный
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовСАТУРН КАК СтатусыОформленияДокументовСАТУРН
	|ГДЕ
	|	СтатусыОформленияДокументовСАТУРН.Основание = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтатусыОформления = Новый Структура;
	Пока Выборка.Следующий() Цикл
		СтатусыОформления.Вставить(Выборка.Документ.Метаданные().Имя, 
			Новый Структура("Статус, Архивный", Выборка.Статус, Выборка.Архивный));
	КонецЦикла;
	
	Если СтатусыОформления.Свойство(МетаданныеДокументаСАТУРН.Имя)
		И СтатусыОформления[МетаданныеДокументаСАТУРН.Имя].Статус <> Перечисления.СтатусыОформленияДокументовГосИС.Оформлено
		И Не СтатусыОформления[МетаданныеДокументаСАТУРН.Имя].Архивный Тогда
		
		ПравоДобавления = ПравоДоступа("Добавление", МетаданныеДокументаСАТУРН);
		
		Шаблон = ИнтеграцияСАТУРН.ШаблонПредставленияДокументаДляПоляИнтеграции(
			МетаданныеДокументаСАТУРН,
			ДокументОснование);
		
		Если Не ПравоДобавления Тогда
			ТекстНадписи = Шаблон.ДокументНеСоздан;
			ИмяКоманды   = Неопределено;
		Иначе
			ТекстНадписи = Шаблон.ПредставлениеКомандыСоздать;
			ИмяКоманды   = Шаблон.ИмяКомандыСоздать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстНадписи) Тогда
			
			ФорматированнаяСтрока = Новый ФорматированнаяСтрока(
				ТекстНадписи,
				,
				?(ЗначениеЗаполнено(ИмяКоманды), ЦветаСтиля.ГиперссылкаЦвет, Неопределено),
				,
				ИмяКоманды);
			
			Строки = Новый Массив;
			
			Если ЗначениеЗаполнено(ТекстДокументаСАТУРН) Тогда
				Строки.Добавить(ТекстДокументаСАТУРН);
				Строки.Добавить(", ");
			КонецЕсли;
			Строки.Добавить(ФорматированнаяСтрока);
			
			ТекстДокументаСАТУРН = Новый ФорматированнаяСтрока(Строки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДокументу(ТаблицаДокументы, ОтображатьСИерархией = Ложь)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВременнаяТаблицаДокументы
	|ИЗ
	|	&ТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	САТУРНПрисоединенныеФайлы.ДатаМодификацииУниверсальная       КАК ДатаМодификацииУниверсальная,
	|	САТУРНПрисоединенныеФайлы.Документ                           КАК Документ,
	|	САТУРНПрисоединенныеФайлы.Ссылка                             КАК Ссылка,
	|	САТУРНПрисоединенныеФайлы.ТипСообщения                       КАК ТипСообщения,
	|	САТУРНПрисоединенныеФайлы.Операция                           КАК Операция,
	|	САТУРНПрисоединенныеФайлы.СтатусОбработки                    КАК СтатусОбработки,
	|	
	|	// Версия и Описание - из присоединенных файлов
	|	ВЫРАЗИТЬ(САТУРНПрисоединенныеФайлы.Описание КАК Строка(255)) КАК Описание,
	|	САТУРНПрисоединенныеФайлы.Версия                             КАК Версия,
	|	НЕОПРЕДЕЛЕНО                                                 КАК РеквизитыИсходящегоСообщения,
	|	НЕОПРЕДЕЛЕНО                                                 КАК ПротоколОбмена
	|ПОМЕСТИТЬ Сообщения
	|ИЗ
	|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.САТУРНПрисоединенныеФайлы КАК САТУРНПрисоединенныеФайлы
	|		ПО САТУРНПрисоединенныеФайлы.Документ = ВременнаяТаблицаДокументы.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОчередьСообщенийСАТУРН.ДатаСоздания             КАК ДатаМодификацииУниверсальная,
	|	ОчередьСообщенийСАТУРН.Документ                 КАК Документ,
	|	ОчередьСообщенийСАТУРН.Сообщение                КАК Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий) КАК ТипСообщения,
	|	ОчередьСообщенийСАТУРН.Операция                 КАК Операция,
	|	
	|	ВЫБОР КОГДА ОчередьСообщенийСАТУРН.ИдентификаторЗаявки = """" ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийСАТУРН.КПередаче)
	|	ИНАЧЕ
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОбрабатывается)
	|	КОНЕЦ КАК СтатусОбработки,
	|	
	|	// Версия и Описание - из реквизитов исходящего сообщения
	|	""""                                                КАК Описание,
	|	НЕОПРЕДЕЛЕНО                                        КАК Версия,
	|	ОчередьСообщенийСАТУРН.РеквизитыИсходящегоСообщения КАК РеквизитыИсходящегоСообщения,
	|	ОчередьСообщенийСАТУРН.ПротоколОбмена               КАК ПротоколОбмена
	|ИЗ
	|	РегистрСведений.ОчередьСообщенийСАТУРН КАК ОчередьСообщенийСАТУРН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ПО ОчередьСообщенийСАТУРН.Документ = ВременнаяТаблицаДокументы.Ссылка
	|ГДЕ
	|	(ОчередьСообщенийСАТУРН.СообщениеОснование В (&ПустоеОснование)
	|		ИЛИ ОчередьСообщенийСАТУРН.Операция В (&БазовыеОперации))
	|	И (НЕ ОчередьСообщенийСАТУРН.Операция В (&АбстрактныеОперации)
	|		ИЛИ ОчередьСообщенийСАТУРН.Операция В (&ОперацииОснования))
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаДокументы.Ссылка                                     КАК Документ,
	|	ЕСТЬNULL(Сообщения.Ссылка, &ПустаяСсылка)                            КАК Ссылка,
	|	ЕСТЬNULL(Сообщения.Операция, НЕОПРЕДЕЛЕНО)                           КАК Операция,
	|	ЕСТЬNULL(Сообщения.ДатаМодификацииУниверсальная, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаМодификацииУниверсальная,
	|	ЕСТЬNULL(Сообщения.Описание, """")                                   КАК Описание,
	|	ЕСТЬNULL(Сообщения.Версия, 1)                                        КАК Версия,
	|	ЕСТЬNULL(Сообщения.РеквизитыИсходящегоСообщения, НЕОПРЕДЕЛЕНО)       КАК РеквизитыИсходящегоСообщения,
	|	ЕСТЬNULL(Сообщения.ПротоколОбмена, НЕОПРЕДЕЛЕНО)                     КАК ПротоколОбмена
	|ИЗ
	|	ВременнаяТаблицаДокументы КАК ВременнаяТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Сообщения КАК Сообщения
	|		ПО Сообщения.Документ = ВременнаяТаблицаДокументы.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	Сообщения.ДатаМодификацииУниверсальная
	|ИТОГИ
	|	МАКСИМУМ(ДатаМодификацииУниверсальная)
	|ПО
	|	Документ
	|");
	
	ПустыеОснования = Новый Массив;
	ПустыеОснования.Добавить(Неопределено);
	ПустыеОснования.Добавить("");
	ПустыеОснования.Добавить(Справочники.САТУРНПрисоединенныеФайлы.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ТаблицаДокументы",    ТаблицаДокументы);
	Запрос.УстановитьПараметр("ПустоеОснование",     ПустыеОснования);
	Запрос.УстановитьПараметр("ПустаяСсылка",        Справочники.САТУРНПрисоединенныеФайлы.ПустаяСсылка());
	Запрос.УстановитьПараметр("АбстрактныеОперации", Перечисления.ВидыОперацийСАТУРН.АбстрактныеОперации());
	Запрос.УстановитьПараметр("ОперацииОснования",   Перечисления.ВидыОперацийСАТУРН.ОперацииОснования());
	Запрос.УстановитьПараметр("БазовыеОперации",     Перечисления.ВидыОперацийСАТУРН.БазовыеОперации());
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		ПолноеИмя = ВыборкаПоДокументам.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		ПоследовательностьОпераций = МенеджерОбъекта.ПоследовательностьОпераций(ВыборкаПоДокументам.Документ, Истина);
		
		Если ОтображатьСИерархией Тогда
			СтрокаПервогоУровня = ДеревоФайлов.ПолучитьЭлементы().Добавить();
			СтрокаПервогоУровня.Документ       = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.Представление  = ВыборкаПоДокументам.Документ;
			СтрокаПервогоУровня.ИндексКартинки = 5;
		Иначе
			СтрокаПервогоУровня = ДеревоФайлов;
		КонецЕсли;
		
		Операция          = Неопределено;
		ЕстьОшибка        = Ложь;
		ТребуетсяОжидание = Ложь;
		
		ВыборкаПоФайлам = ВыборкаПоДокументам.Выбрать();
		
		ТаблицаРасчетаКоличества = НоваяТаблицаРасчетаКоличестваОпераций();
		
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Версия = Неопределено;
			Если ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка") Тогда
				Реквизиты = ВыборкаПоФайлам.РеквизитыИсходящегоСообщения.Получить();
				Если Реквизиты <> Неопределено Тогда
					Версия = Реквизиты.Версия;
				КонецЕсли;
			Иначе
				Версия = ВыборкаПоФайлам.Версия;
			КонецЕсли;
			
			НоваяСтрока            = ТаблицаРасчетаКоличества.Добавить();
			НоваяСтрока.Версия     = Версия;
			НоваяСтрока.Операция   = ВыборкаПоФайлам.Операция;
			НоваяСтрока.Ссылка     = ВыборкаПоФайлам.Ссылка;
			НоваяСтрока.Количество = 1;
			
		КонецЦикла;
		
		РассчитатьКоличествоДляПредставления(ТаблицаРасчетаКоличества);
		
		ВыборкаПоФайлам.Сбросить();
		
		Пока ВыборкаПоФайлам.Следующий() Цикл
			
			Операция = ВыборкаПоФайлам.Операция;
			
			Если Не ЗначениеЗаполнено(ВыборкаПоФайлам.Ссылка) Тогда
				// Если по документу еще не создано файлов
				Если ЗначениеЗаполнено(ПоследовательностьОпераций) Тогда
					Операция = ПоследовательностьОпераций[0].Операция;
				Иначе
					Операция = Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Операция", Операция);
			НайденныеСтроки = ПоследовательностьОпераций.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаПоследовательности = Неопределено;
			Иначе
				СтрокаПоследовательности = НайденныеСтроки[НайденныеСтроки.Количество() - 1];
			КонецЕсли;
			
			СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
			СтрокаВторогоУровня.Документ       = ВыборкаПоФайлам.Документ;
			СтрокаВторогоУровня.Файл           = ВыборкаПоФайлам.Ссылка;
			СтрокаВторогоУровня.Операция       = Операция;
			Если ЗначениеЗаполнено(ВыборкаПоФайлам.ДатаМодификацииУниверсальная) Тогда
				СтрокаВторогоУровня.Дата = МестноеВремя(ВыборкаПоФайлам.ДатаМодификацииУниверсальная);
			КонецЕсли;

			Если ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка") Тогда
				РеквизитыИсходящегоСообщения = ВыборкаПоФайлам.РеквизитыИсходящегоСообщения.Получить();
				РеквизитыИсходящегоСообщения.Вставить("Ссылка",         ВыборкаПоФайлам.Ссылка);
				РеквизитыИсходящегоСообщения.Вставить("Операция",       ВыборкаПоФайлам.Операция);
				РеквизитыИсходящегоСообщения.Вставить("ПротоколОбмена", ВыборкаПоФайлам.ПротоколОбмена);
				
				СтрокаВторогоУровня.Представление = ПредставлениеОперации(
					СтрокаПоследовательности,
					ВыборкаПоФайлам.Документ,
					РеквизитыИсходящегоСообщения,
					ТаблицаРасчетаКоличества);
				ДополнитьПредставлениеОперации(СтрокаВторогоУровня, РеквизитыИсходящегоСообщения);
			Иначе
				СтрокаВторогоУровня.Представление = ПредставлениеОперации(
					СтрокаПоследовательности,
					ВыборкаПоФайлам.Документ,
					ВыборкаПоФайлам,
					ТаблицаРасчетаКоличества);
				ДополнитьПредставлениеОперации(СтрокаВторогоУровня, ВыборкаПоФайлам);
			КонецЕсли;
			
			ЕстьОшибкаСтроки  = ЗначениеЗаполнено(ВыборкаПоФайлам.Описание);
			ТребуетсяОжидание = ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка");
			
			Если Не ТребуетсяОжидание И СтрокаПоследовательности <> Неопределено Тогда
				Для Каждого ДальнейшееДействие Из СтрокаПоследовательности.ДальнейшиеДействия Цикл
					СтрокаВторогоУровня.ДальнейшиеДействия.Добавить(ДальнейшееДействие);
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьОшибкаСтроки Тогда
				СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеОшибка";
				СтрокаВторогоУровня.ИндексКартинки     = 4;
				ЕстьОшибка = Истина;
			ИначеЕсли ТипЗнч(ВыборкаПоФайлам.Ссылка) = Тип("Строка") Тогда
				СтрокаВторогоУровня.ИндексКартинки = 3;
			ИначеЕсли Не ЗначениеЗаполнено(ВыборкаПоФайлам.Ссылка) Тогда
				СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
				СтрокаВторогоУровня.ИндексКартинки     = ПротоколОбменаИС.ИндексКартинкиЗапроса(СтрокаПоследовательности, Истина);
			Иначе
				СтрокаВторогоУровня.ИндексКартинки = ПротоколОбменаИС.ИндексКартинкиЗапроса(СтрокаПоследовательности);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьОшибка Тогда
			СтрокаПоследовательности = ПротоколОбменаИС.ПредыдущаяОперация(ПоследовательностьОпераций, СтрокаПоследовательности);
		КонецЕсли;
		
		Если СтрокаПоследовательности <> Неопределено Тогда
			
			Индекс = ПоследовательностьОпераций.Индекс(СтрокаПоследовательности);
			
			Для Итератор = Индекс + 1 По ПоследовательностьОпераций.Количество() - 1 Цикл
				
				СтрокаСледующаяОперация = ПоследовательностьОпераций.Получить(Итератор);
				Если СтрокаСледующаяОперация.Индекс = 0
					Или СтрокаПоследовательности.Индекс = СтрокаСледующаяОперация.Индекс Тогда
					
					СтрокаВторогоУровня = СтрокаПервогоУровня.ПолучитьЭлементы().Добавить();
					СтрокаВторогоУровня.Документ           = ВыборкаПоДокументам.Документ;
					СтрокаВторогоУровня.Операция           = СтрокаСледующаяОперация.Операция;
					СтрокаВторогоУровня.УсловноеОформление = "УсловноеОформлениеСерый";
					СтрокаВторогоУровня.Представление      = ПредставлениеОперации(СтрокаСледующаяОперация, СтрокаВторогоУровня.Документ, Неопределено);
					СтрокаВторогоУровня.ИндексКартинки     = ПротоколОбменаИС.ИндексКартинкиЗапроса(СтрокаСледующаяОперация, Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоФайлов()
	
	ТекстДокументаСАТУРН = "";
	ДеревоФайлов.ПолучитьЭлементы().Очистить();
	
	Строки = Новый Массив;
	Строки.Добавить(НСтр("ru = 'Основание:'"));
	Строки.Добавить(" ");
	Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Документ),,,,ПолучитьНавигационнуюСсылку(Документ)));
	ТекстДокумент = Новый ФорматированнаяСтрока(Строки);
	
	ТипДокумента = ТипЗнч(Документ);
	
	Если Не ДляДокументаОснования Тогда
		
		Строки = Новый Массив;
		Строки.Добавить(НСтр("ru = 'Документ:'"));
		Строки.Добавить(" ");
		Строки.Добавить(Новый ФорматированнаяСтрока(Строка(Документ),,,,ПолучитьНавигационнуюСсылку(Документ)));
		ТекстДокумент = Новый ФорматированнаяСтрока(Строки);
		
		ЗаполнитьПоДокументу(ТаблицаДокументы(Документ));
		Возврат;
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ОснованиеНакладнаяСАТУРН.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		ЗаполнитьПоОснованиюДокументаНакладнаяСАТУРН(Документ);
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ОснованиеАктИнвентаризацииСАТУРН.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		ЗаполнитьПоОснованиюДокументаАктИнвентаризацииСАТУРН(Документ);
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ОснованиеАктПримененияСАТУРН.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		ЗаполнитьПоОснованиюДокументаАктПримененияСАТУРН(Документ);
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ОснованиеИмпортПродукцииСАТУРН.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		ЗаполнитьПоОснованиюДокументаИмпортПродукцииСАТУРН(Документ);
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ОснованиеПроизводственнаяОперацияСАТУРН.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		ЗаполнитьПоОснованиюДокументаПроизводственнаяОперацияСАТУРН(Документ);
		
	КонецЕсли;
	
	Если Метаданные.ОпределяемыеТипы.ОснованиеПланПримененияСАТУРН.Тип.Типы().Найти(ТипДокумента) <> Неопределено Тогда
		
		ЗаполнитьПоОснованиюДокументаПланПримененияСАТУРН(Документ);
		
	КонецЕсли;
	
	Элементы.ИнтеграцияСАТУРН_ИнформацияОДокументах.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьПредставлениеОперации(СтрокаВторогоУровня, ПараметрыОбновления)
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСообщенияОперации(ВыбраннаяСтрока)
	
	ДанныеСтроки = Элементы.ДеревоФайлов.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки <> Неопределено И ДанныеСтроки.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Источник", ДанныеСтроки.Файл);
		ПараметрыФормы.Вставить("Заголовок", СтрШаблон(НСтр("ru = 'Сообщения операции: %1'"), ДанныеСтроки.Операция));
		
		ОткрытьФорму(
			"ОбщаяФорма.ЛогОбменаСАТУРН",
			ПараметрыФормы,
			ЭтотОбъект,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ОбщегоНазначенияИСКлиент.ПоказатьСообщенияОперации(ЭтотОбъект, "САТУРН", ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОрганизацияКПередачеСообщенияПоДокументу(Документ)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОчередьСообщенийСАТУРН.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН
		|ИЗ
		|	РегистрСведений.ОчередьСообщенийСАТУРН КАК ОчередьСообщенийСАТУРН
		|ГДЕ
		|	ОчередьСообщенийСАТУРН.Документ = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Документ.ГрузоотправительОрганизацияСАТУРН
		|ИЗ
		|	Документ.НакладнаяСАТУРН КАК Документ
		|ГДЕ
		|	Документ.Ссылка = &ДокументСсылка");
		
	Запрос.УстановитьПараметр("ДокументСсылка", Документ);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ОрганизацияСАТУРН;
	
КонецФункции

#КонецОбласти