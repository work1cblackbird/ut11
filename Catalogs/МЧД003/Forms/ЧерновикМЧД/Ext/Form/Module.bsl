// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияБЭД.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	ЦветРамкиПоУмолчанию = Новый Цвет;
	
	Если Доверенность.Количество() = 0 Тогда
		НачальноеЗаполнениеРеквизитов();
	КонецЕсли;
	
	НазначитьСобытиеПриИзмененииДляПолейФормы();
	ЗаполнитьСписокРегионов();
	ЗаполнитьСпискиВыбораТипов();
	ЗаполнитьСписокВидовДокументовФизическогоЛица();
	
	УстановитьДоступностьЭлементов();
	НастроитьЭлементыСФиксированнымиСпискамиЗначений();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		Псевдонимы = Псевдонимы(ЭтотОбъект);
		КлючУникальности = Псевдонимы.ОбщиеСведения.НомДовер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Доверенность не была сохранена. Выйти без сохранения?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СпроситьОЗакрытииЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаблокироватьФорму();
	
	Если НеобходимоЗаполнитьКонтекстЗаписи(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗаданВопросОбОшибкахПриРегистрацииМЧД(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьЧерновикДоверенности(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьОбъектМЧД(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РазблокироватьФорму();
	
	ИзмененныеМЧД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	МашиночитаемыеДоверенностиКлиент.ОповеститьОИзмененииМЧД(ИзмененныеМЧД);
	
	ЗарегистрироватьМЧДПриНеобходимости(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЗаполнениеСубъектовДоверенностиПоОбъектамПрикладнойКонфигурации

#Область Доверитель

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверит_ДоверительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("ВыбратьДоверителяЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповДоверителя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверит_ДоверительАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = МашиночитаемыеДоверенностиВызовСервера.ДанныеВыбораСубъекта(Текст, СписокВыбораТиповДоверителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверит_ДоверительПриИзменении(Элемент)
	Псевдонимы = Псевдонимы(ЭтотОбъект);
	ПерезаполнитьСведенияОДоверителе(Псевдонимы.Доверитель._Доверитель);
КонецПроцедуры

#КонецОбласти

#Область ЛицоБезДоверенности

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенностиНачалоВыбора(Элемент,
	ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("ВыбратьЛицоБезДоверенностиЗавершение",
		ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповЛицаБезДоверенности, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенностиАвтоПодбор(Элемент, Текст,
	ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = МашиночитаемыеДоверенностиВызовСервера.ДанныеВыбораСубъекта(Текст,
			СписокВыбораТиповЛицаБезДоверенности);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенностиПриИзменении(Элемент)
	ПерезаполнитьСведенияОЛицеБезДоверенности(
		Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]._ЛицоБезДоверенности);
КонецПроцедуры

#КонецОбласти

#Область Представитель

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПред_ПредставительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("ВыбратьПредставителяЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповПредставителя, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПред_ПредставительАвтоПодбор(Элемент, Текст, ДанныеВыбора,
	ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = МашиночитаемыеДоверенностиВызовСервера.ДанныеВыбораСубъекта(Текст,
			СписокВыбораТиповПредставителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПред_ПредставительПриИзменении(Элемент)
	ПерезаполнитьСведенияОПредставителе(Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._Представитель);
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ФизическоеЛицо

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоНачалоВыбора(Элемент,
	ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("ВыбратьФизическоеЛицоЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоПриИзменении(Элемент)
	ПерезаполнитьСведенияОФизическомЛице(
		Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоАвтоПодбор(Элемент,
	Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = МашиночитаемыеДоверенностиВызовСервера.ДанныеВыбораСубъекта(Текст,
			СписокВыбораТиповФизическогоЛица);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнТипПолнПриИзменении(Элемент)
	
	ТипПолномочий = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн");
	
	Если ТипПолномочий = ТипыПолномочий().Текстовые Тогда
		ОтображаемаяГруппа = Элементы.ГруппаТекстовыеПолномочия;
	Иначе
		ОтображаемаяГруппа = Элементы.ГруппаМашиночитаемыеПолномочия;
	КонецЕсли;
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, ОтображаемаяГруппа);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	
	ОчиститьЗначенияНеиспользуемыхТиповПолномочий();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДовДатаВыдДоверПриИзменении(Элемент)
	ПриИзмененииДаты(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДовСрокДейстПриИзменении(Элемент)
	ПриИзмененииДаты(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвДовПрПередовПриИзменении(Элемент)
	
	УстановкаПризнакаУтратыПолномочийПриПередоверии();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоверенностьДокументДоверСвПолнМашПолн

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ДобавитьНовоеМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьТекущееМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьТекущееМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвПолнМашПолнПриИзменении(Элемент)
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоверенностьДокументДоверСвУпПред

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	Отказ = Истина;
	ДобавитьНовогоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ИзменитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументДоверСвУпПредПриИзменении(Элемент)
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвУпПред);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодписатьИЗарегистрировать(Команда)
	
	СвДов = Доверенность[0].Документ[0].Довер[0].СвДов[0];
	ПоляПериода = МашиночитаемыеДоверенностиКлиент.ПроверитьПоляПериодаДействия(СвДов);
		
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	НачалоДиапазона = НачалоДня(ДатаСеанса - 86400);
	КонецДиапазона = НачалоДня(ДатаСеанса + 86400);
	
	ДатаВыдачиОтличаетсяБолееЧемНаДень = Не (СвДов.ДатаВыдДовер >= НачалоДиапазона И СвДов.ДатаВыдДовер <= КонецДиапазона);

	Если ДатаВыдачиОтличаетсяБолееЧемНаДень Тогда
		ТекстОшибки = НСтр("ru='Штамп времени в электронной подписи должен совпадать с моментом подписания МЧД и не отличаться от даты совершения доверенности более или менее, чем на день';");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		ПоляПериода.Добавить("ДатаВыдДовер");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоляПериода) Тогда
		МашиночитаемыеДоверенностиКлиент.ОчиститьПоляПериодаДействия(СвДов, ПоляПериода);
		ЭлементыКОформлению = МашиночитаемыеДоверенностиКлиент.ЭлементыПериодаПоСпискуПолей(
			ОписаниеЭлементовПолейПериодаДоверенности(),
			ПоляПериода);
			
		МашиночитаемыеДоверенностиКлиент.УстановитьОформлениеПолей(ЭлементыКОформлению);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Ложь;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Истина;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры
#Область МашинныеПолномочия

&НаКлиенте
Процедура ДобавитьМашинноеПолномочие(Команда)
	ДобавитьНовоеМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьМашинноеПолномочие(Команда)
	ИзменитьТекущееМашинноеПолномочие();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьМашинноеПолномочие(Команда)
	УдалитьТекущееМашинноеПолномочие();
КонецПроцедуры

#КонецОбласти

#Область Представители

&НаКлиенте
Процедура ДобавитьПредставителя(Команда)
	ДобавитьНовогоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредставителя(Команда)
	ИзменитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредставителя(Команда)
	УдалитьТекущегоПредставителя();
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Перечисления

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоверенностей()
	Возврат Новый ФиксированнаяСтруктура("Обычная, Безотзывная", "1", "2");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПризнакВозможностиПередоверия()
	Возврат Новый ФиксированнаяСтруктура("БезПередоверия, Однократное, ПоследующееПередоверие", "1", "2", "3");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПризнакСовместныхПолномочий()
	Возврат Новый ФиксированнаяСтруктура("Индивидуальные, Совместные", "1", "2");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПолномочий()
	Возврат Новый ФиксированнаяСтруктура("Текстовые, Машиночитаемые", "0", "1");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыДоверителей()
	ТипыДоверителей = Новый Структура;
	ТипыДоверителей.Вставить("ЮридическоеЛицо", "1");
	ТипыДоверителей.Вставить("ИностраннаяОрганизация", "2");
	ТипыДоверителей.Вставить("ИндивидуальныйПредприниматель", "3");
	ТипыДоверителей.Вставить("ФизическоеЛицо", "4");
	Возврат Новый ФиксированнаяСтруктура(ТипыДоверителей);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПредставителей()
	ТипыПредставителей = Новый Структура;
	ТипыПредставителей.Вставить("ЮридическоеЛицо", "1");
	ТипыПредставителей.Вставить("ИндивидуальныйПредприниматель", "2");
	ТипыПредставителей.Вставить("ФизическоеЛицо", "3");
	ТипыПредставителей.Вставить("ФилиалЮридическогоЛица", "4");
	ТипыПредставителей.Вставить("ФилиалИностраннойОрганизации", "5");
	Возврат Новый ФиксированнаяСтруктура(ТипыПредставителей);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлассификаторДаНет()
	Возврат Новый ФиксированнаяСтруктура("Нет, Да", "0", "1");
КонецФункции

#КонецОбласти

#Область ЗаполнениеРеквизитов

#Область СпискиТипов

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипов()
	ТипыСубъектов = Новый Структура("ФизическоеЛицо, Организация, Контрагент",
		Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.Типы(), Метаданные.ОпределяемыеТипы.Организация.Тип.Типы(),
		Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.Типы());
	ПравилаЗаполнения = Новый Соответствие;
	ПравилаЗаполнения.Вставить(ТипыСубъектов.Организация, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповДоверителя);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения.Вставить(ТипыСубъектов.Контрагент, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.Контрагент].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.Контрагент].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения.Вставить(ТипыСубъектов.ФизическоеЛицо, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповФизическогоЛица);

	ШаблонПредставления = НСтр("ru='Выбрать %1';");
	Для Каждого КлючИЗначение Из ТипыСубъектов Цикл
		Для Каждого ТипСубъекта Из КлючИЗначение.Значение Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипСубъекта);
			Если МетаданныеТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВыбранноеИмя = ОбщегоНазначения.ПредставлениеОбъекта(МетаданныеТипа);
			Представление = СтрШаблон(ШаблонПредставления, ПолучитьСклоненияСтроки(НРег(ВыбранноеИмя), ,
				"ПД=Винительный;")[0]);
			СпискиНазначения = ПравилаЗаполнения[КлючИЗначение.Значение];
			Если ТипЗнч(СпискиНазначения) = Тип("Массив") Тогда
				Для Каждого СписокТипов Из СпискиНазначения Цикл
					СписокТипов.Добавить(ТипСубъекта, Представление);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Автозаполнение

&НаСервере
Процедура ПерезаполнитьСведенияОДоверителе(Доверитель)
	Модифицированность = Истина;
	СведенияОДоверителе = Доверенность[0].Документ[0].Довер[0].СвДоверит;
	СведенияОДоверителе.Очистить();
	ИнициализироватьРеквизитыФормата(СведенияОДоверителе, "Доверенность.Документ.Довер.СвДоверит");
	ДоверительПоУмолчанию(ЭтотОбъект);
	Если ЗначениеЗаполнено(Доверитель) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Доверитель)) Тогда
		СведенияОДоверителе[0]._Доверитель = Доверитель;
		СтруктураСведений = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Доверитель);
		ДополнительныеСведения = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Доверитель);
		ТипыДоверителей = ТипыДоверителей();
		Если ИнтеграцияЭДО.ЭтоФизЛицо(Доверитель) Тогда
			СведенияОДоверителе[0].ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель;
			СведенияОбИП = СведенияОДоверителе[0].Доверит[0].ИПДовер[0];
			СведенияОбИП.НаимИП = СтруктураСведений.Наименование;
			СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
			СведенияОбИП.СНИЛС = СтруктураСведений.СНИЛС;
			СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
			СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
			СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
			СведенияОбИП.СведФЛ[0].ДатаРожд = СтруктураСведений.ДатаРождения;
			ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ИндивидуальныйПредприниматель);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверитель_ИндивидуальныйПредприниматель,
				Истина);
		Иначе
			СведенияОДоверителе[0].ТипДоверит = ТипыДоверителей.ЮридическоеЛицо;
			СведенияОЮрЛице = СведенияОДоверителе[0].Доверит[0].РосОргДовер[0].СвРосОрг[0];
			СведенияОЮрЛице.НаимОрг = СтруктураСведений.Наименование;
			СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
			СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
			СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
			СведенияОЮрЛице.АдрРег[0].Регион = СтруктураСведений.КодРегиона;
			СведенияОЮрЛице.АдрРег[0].АдрРФ = ДополнительныеСведения.ЮридическийАдрес;
			ПерезаполнитьСведенияОЛицеБезДоверенности(СтруктураСведений.РуководительФизЛицо);
			ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ЮридическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверитель_ЮридическоеЛицо, Истина);
		КонецЕсли;
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ДоверенностьДокументДоверСвДоверит_Доверитель);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОЛицеБезДоверенности(ЛицоБезДоверенности)
	Модифицированность = Истина;
	СведенияОЛицеБезДоверенности = Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов;
	СведенияОЛицеБезДоверенности.Очистить();
	ИнициализироватьРеквизитыФормата(СведенияОЛицеБезДоверенности,
		"Доверенность.Документ.Довер.СвДоверит.Доверит.РосОргДовер.ЛицоБезДов");
	ЛицоБезДоверенностиПоУмолчанию(ЭтотОбъект);
	ТипЗначения = ТипЗнч(ЛицоБезДоверенности);
	ДаНет = КлассификаторДаНет();
	Если ЗначениеЗаполнено(ЛицоБезДоверенности) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		СведенияОЛицеБезДоверенности[0]._ЛицоБезДоверенности = ЛицоБезДоверенности;
		Если Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.СодержитТип(ТипЗначения) Тогда
			Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = ДаНет.Да;
			Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = ДаНет.Нет;
			Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = ДаНет.Нет;
			СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ЛицоБезДоверенности);
			СведенияОФизЛице = СведенияОЛицеБезДоверенности[0].СвФЛ[0];
			СведенияОФизЛице.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОФизЛице.СНИЛС = СтруктураСведений.СтраховойНомерПФР;
			ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизЛице.СведФЛ[0], СтруктураСведений);
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо, Истина);
		Иначе
			СтруктураСведений = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ЛицоБезДоверенности);
			Если ИнтеграцияЭДО.ЭтоФизЛицо(ЛицоБезДоверенности) Тогда
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = ДаНет.Нет;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = ДаНет.Нет;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = ДаНет.Да;
				СведенияОбИП = СведенияОЛицеБезДоверенности[0].СвИП[0];
				СведенияОбИП.НаимИП = СтруктураСведений.ПолноеНаименование;
				СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
				СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
				СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
				СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
				СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
				ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности,
					Элементы.ГруппаЛицоБезДоверенности_ИндивидуальныйПредприниматель);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаЛицоБезДоверенности_ИндивидуальныйПредприниматель, Истина);
			Иначе
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = ДаНет.Нет;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = ДаНет.Да;
				Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = ДаНет.Нет;
				СведенияОЮрЛице = СведенияОЛицеБезДоверенности[0].СВЮЛ[0].СвЮЛЕИО[0];
				СведенияОЮрЛице.НаимОрг = СтруктураСведений.ПолноеНаименование;
				СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
				СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
				СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
				СведенияОЮрЛице.АдрРег[0].АдрРФ = СтруктураСведений.ЮридическийАдрес;
				СведенияОЮрЛице.АдрРег[0].Регион = РаботаСАдресами.СведенияОбАдресе(
					СтруктураСведений.ЮридическийАдресXML).КодРегиона;
				ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ЮридическоеЛицо);
				Если Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипЗначения) Тогда
					РегистрационныеДанные = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(ЛицоБезДоверенности);
					Если ЗначениеЗаполнено(РегистрационныеДанные.РуководительФизЛицо) Тогда
						ПерезаполнитьСведенияОФизическомЛице(РегистрационныеДанные.РуководительФизЛицо);
					КонецЕсли;
				КонецЕсли;
				СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаЛицоБезДоверенности_ЮридическоеЛицо, Истина);
			КонецЕсли;
		КонецЕсли;
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект,
			Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДов_ЛицоБезДоверенности);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОПредставителе(Представитель)
	Модифицированность = Истина;
	СведенияОПредставителе = Доверенность[0].Документ[0].Довер[0].СвУпПред;
	СведенияОПредставителе.Очистить();
	ИнициализироватьРеквизитыФормата(СведенияОПредставителе, "Доверенность.Документ.Довер.СвУпПред");
	ПредставительПоУмолчанию(ЭтотОбъект);
	ТипЗначения = ТипЗнч(Представитель);
	ТипыПредставителей = ТипыПредставителей();
	Если ЗначениеЗаполнено(Представитель) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		СведенияОПредставителе[0]._Представитель = Представитель;
		Если Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.СодержитТип(ТипЗначения) Тогда
			СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(Представитель);
			СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ФизическоеЛицо;
			СведенияОФизЛице = СведенияОПредставителе[0].Пред[0].СведФизЛ[0];
			СведенияОФизЛице.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОФизЛице.СНИЛС = СтруктураСведений.СтраховойНомерПФР;
			ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизЛице.СведФЛ[0], СтруктураСведений);
			ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ФизическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставитель_ФизическоеЛицо, Истина);
		Иначе
			СтруктураСведений = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Представитель);
			Если ИнтеграцияЭДО.ЭтоФизЛицо(Представитель) Тогда
				СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель;
				СведенияОбИП = СведенияОПредставителе[0].Пред[0].СведИП[0];
				СведенияОбИП.НаимИП = СтруктураСведений.ПолноеНаименование;
				СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
				СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
				СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
				СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
				СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
				ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель, Истина);
			Иначе
				СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ЮридическоеЛицо;
				СведенияОЮрЛице = СведенияОПредставителе[0].Пред[0].СведОрг[0];
				СведенияОЮрЛице.НаимОрг = СтруктураСведений.ПолноеНаименование;
				СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
				СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
				СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
				СведенияОЮрЛице.АдрРег[0].АдрРФ = СтруктураСведений.ЮридическийАдрес;
				ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_Организация);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставитель_Организация, Истина);
			КонецЕсли;
		КонецЕсли;
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ДоверенностьДокументДоверСвУпПред_Представитель);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОФизическомЛице(ФизическоеЛицо)
	Модифицированность = Истина;
	СведенияОФизическомЛице = Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ;
	СведенияОФизическомЛице.Очистить();
	ИнициализироватьРеквизитыФормата(СведенияОФизическомЛице,
		"Доверенность.Документ.Довер.СвДоверит.Доверит.РосОргДовер.ЛицоБезДов.СВЮЛ.СвФЛ");
	Если ЗначениеЗаполнено(ФизическоеЛицо) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ФизическоеЛицо)) Тогда
		СведенияОФизическомЛице[0]._ФизическоеЛицо = ФизическоеЛицо;
		СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ФизическоеЛицо);
		СведенияОФизическомЛице[0].ИННФЛ = СтруктураСведений.ИНН;
		СведенияОФизическомЛице[0].СНИЛС = СтруктураСведений.СтраховойНомерПФР;
		ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизическомЛице[0].СведФЛ[0], СтруктураСведений);
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаОдноВложенноеЛицоДействующееБезДоверенности, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуТипаСведФЛ(СведФЛ, СтруктураСведений)
	СведФЛ.ФИО[0].Фамилия = СтруктураСведений.Фамилия;
	СведФЛ.ФИО[0].Имя = СтруктураСведений.Имя;
	СведФЛ.ФИО[0].Отчество = СтруктураСведений.Отчество;
	СведФЛ.ДатаРожд = СтруктураСведений.ДатаРождения;
	Ключи = "КемВыдан, ДатаВыдачи, КодФНС, КодПодразделения, Серия, Номер";
	СведенияУдостоверения = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(СведенияУдостоверения, СтруктураСведений);
	СведФЛ.УдЛичнФЛ[0].ВыдДок = СведенияУдостоверения.КемВыдан;
	СведФЛ.УдЛичнФЛ[0].ДатаДок = СведенияУдостоверения.ДатаВыдачи;
	СведФЛ.УдЛичнФЛ[0].КодВидДок = СведенияУдостоверения.КодФНС;
	СведФЛ.УдЛичнФЛ[0].КодВыдДок = СведенияУдостоверения.КодПодразделения;
	СведФЛ.УдЛичнФЛ[0].СерНомДок = СтрШаблон("%1 %2", СведенияУдостоверения.Серия, СведенияУдостоверения.Номер);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьсписокРегионов()
	
	СписокРегионов = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		СписокРегионов = МодульАдресныйКлассификатор.СубъектыРФ();
	КонецЕсли;
	
	Если СписокРегионов = Неопределено Тогда
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион.РежимВыбораИзСписка = Ложь;
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.РежимВыбораИзСписка
			= Ложь;
	Иначе
		
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион.РежимВыбораИзСписка = Истина;
		Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.РежимВыбораИзСписка
			= Истина;
		
		Для Каждого Регион Из СписокРегионов Цикл
			Код = ?(Регион.КодСубъектаРФ < 10, "0"+ Строка(Регион.КодСубъектаРФ), Строка(Регион.КодСубъектаРФ));
			Наименование = Код + " " + Регион.Наименование;
			
			Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
				
			Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИнициализироватьРеквизитыФормата(НовыйОбъект, Путь)
	Запись = НовыйОбъект.Добавить();
	Для Каждого Реквизит Из ПолучитьРеквизиты(Путь) Цикл
		Если Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			ИнициализироватьРеквизитыФормата(Запись[Реквизит.Имя], СтрШаблон("%1.%2", Путь, Реквизит.Имя));
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ДоверительПоУмолчанию(Форма)
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0]._Доверитель = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].ТипДоверит = ТипыДоверителей().ЮридическоеЛицо;
	ПоказатьГруппу(Форма.Элементы.ГруппаДоверитель, Форма.Элементы.ГруппаДоверитель_ЮридическоеЛицо);
	СброситьОформлениеЭлементовФормы(Форма, Форма.Элементы.ГруппаДоверитель_ЮридическоеЛицо, Истина);
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК = КлассификаторДаНет().Нет;
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП = КлассификаторДаНет().Нет;
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОФЛ = КлассификаторДаНет().Да;
	ЛицоБезДоверенностиПоУмолчанию(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЛицоБезДоверенностиПоУмолчанию(Форма)
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].ПолнЮЛ = ПризнакСовместныхПолномочий().Индивидуальные;
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]._ЛицоБезДоверенности = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]._ЛицоБезДоверенности = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо = "";
	ПоказатьГруппу(Форма.Элементы.ГруппаЛицоБезДоверенности, Форма.Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо);
	СброситьОформлениеЭлементовФормы(Форма, Форма.Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо, Истина);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПредставительПоУмолчанию(Форма)
	Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._Представитель = "";
	Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._НомерСтроки = "1";
	Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред = ТипыПредставителей().ФизическоеЛицо;
	ПоказатьГруппу(Форма.Элементы.ГруппаПредставитель, Форма.Элементы.ГруппаПредставитель_ФизическоеЛицо);
	СброситьОформлениеЭлементовФормы(Форма, Форма.Элементы.ГруппаПредставитель_ФизическоеЛицо, Истина);
	ПоказатьГруппу(Форма.Элементы.ГруппаПредставленияПредставителей, Форма.Элементы.ГруппаОдинПредставитель);
	ОбновитьВидимостьКомандТаблицыПредставителей(Форма);
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеРеквизитов()
	
	ИнициализироватьРеквизитыФормата(Доверенность, "Доверенность");
	
	ПоказыватьСлужебныеСообщения = Ложь;
	ТокенДоступа = "";
	НомерДоверенности = 
		МашиночитаемыеДоверенности.ПолучитьНомерМЧД(ТокенДоступа, ПоказыватьСлужебныеСообщения).НомерДоверенности;
	Если НомерДоверенности = "" Тогда
		НомерДоверенности = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	Доверенность[0].ВерсФорм = "EMCHD_1";
	Доверенность[0].ПрЭлФорм = "00000000";	
	Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер = НомерДоверенности;
	Доверенность[0].ИдФайл = "ON_EMCHD_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд;") + "_"
		+ Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер;
	Доверенность[0].Документ[0].Передов.Очистить();
	Доверенность[0].Документ[0].Довер[0].СвДов[0].ВнНомДовер = Доверенность[0].Документ[0].Довер[0].СвДов[0].НомДовер;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].СведСист = 
		"https://m4d.nalog.gov.ru/EMCHD/check-status?guid=" + НомерДоверенности;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].ВидДовер = ВидыДоверенностей().Обычная;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].ПрПередов = ПризнакВозможностиПередоверия().БезПередоверия;
	Доверенность[0].Документ[0].Довер[0].СвДов[0].КодНОДейст.Очистить();
	ДоверительПоУмолчанию(ЭтотОбъект);
	ПредставительПоУмолчанию(ЭтотОбъект);
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн = ТипыПолномочий().Текстовые;
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].ПрСовмПолн = ПризнакСовместныхПолномочий().Индивидуальные;
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТекстПолн = 
		МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий();
		
	ЗаполнениеТекстовыхПолномочийПоУмолчаниюОтключено = 
		МашиночитаемыеДоверенности.ЗаполнениеТекстовыхПолномочийПоУмолчаниюОтключено();
	Если ЗаполнениеТекстовыхПолномочийПоУмолчаниюОтключено Тогда
		Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТекстПолн = "";
	КонецЕсли;
	
	Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.Очистить();
	
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, Элементы.ГруппаТекстовыеПолномочия);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru = 'Создание доверенности'");
		
	Иначе
		
		Заголовок = СтрШаблон(НСтр("ru = 'Черновик МЧД (%1)'"), Объект.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьСобытиеПриИзмененииДляПолейФормы()
	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Обработчик = Элемент.ПолучитьДействие("ПриИзменении");
			Если Не ЗначениеЗаполнено(Обработчик) Тогда
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_СброситьОформлениеЭлемента");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьГруппу(Родитель, Потомок)
	Для Каждого ВложеннаяГруппа Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ВложеннаяГруппа) = Тип("ГруппаФормы") Тогда
			ВложеннаяГруппа.Видимость = ВложеннаяГруппа = Потомок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьОформлениеЭлементовФормы(Форма, Элемент, Рекурсивно = Ложь)
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ЦветРамки") Тогда
		Элемент.ЦветРамки = Форма.ЦветРамкиПоУмолчанию;
	КонецЕсли;
	Если Рекурсивно И ТипЗнч(Элемент) = Тип("ГруппаФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			СброситьОформлениеЭлементовФормы(Форма, ПодчиненныйЭлемент, Рекурсивно);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКомандТаблицыПредставителей(Форма)
	
	Форма.Элементы.ДобавитьПредставителя.Доступность = ЗначениеЗаполнено(
		Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред[0]._Представитель);
		
	КоличествоПредставителейБольшеОдного = Форма.Доверенность[0].Документ[0].Довер[0].СвУпПред.Количество() > 1;
		
	Форма.Элементы.ИзменитьПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.УдалитьПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.ПереместитьВверхПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.ПереместитьВнизПредставителя.Видимость = КоличествоПредставителейБольшеОдного;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКомандТаблицыПолномочий(Форма)
	ЭтоМашинныеПолномочия = Форма.Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн
		= ТипыПолномочий().Машиночитаемые;
	ЕстьПолномочия = ЗначениеЗаполнено(Форма.Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
	Форма.Элементы.ГруппаКомандыМашиночитаемыхПолномочий.Видимость = ЭтоМашинныеПолномочия;
	Если ЭтоМашинныеПолномочия Тогда
		Форма.Элементы.ИзменитьМашинноеПолномочие.Доступность = ЕстьПолномочия;
		Форма.Элементы.УдалитьМашинноеПолномочие.Доступность = ЕстьПолномочия;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СброситьОформлениеЭлемента(Элемент)
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовДокументовФизическогоЛица()
	ЭлементыВыбораВидаДокумента = Новый Массив; // Массив Из ПолеФормы
	ЭлементыВыбораВидаДокумента.Добавить(Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛКодВидДок);
	ЭлементыВыбораВидаДокумента.Добавить(Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛКодВидДок);
	МашиночитаемыеДоверенности.УстановитьСписокВыбораДокументовФизическихЛиц(ЭлементыВыбораВидаДокумента);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНумерациюТаблицы(Таблица)
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы._НомерСтроки <> Индекс Тогда
			СтрокаТаблицы._НомерСтроки = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ДобавлениеИзменениеМЧДОрганизацийЭДО = Справочники.МашиночитаемыеДоверенностиОрганизаций.ЕстьПравоИзменения();
	ЕстьПравоИзменения = МашиночитаемыеДоверенности.ИмеетсяПравоИзмененияМЧД();

	Если Не ДобавлениеИзменениеМЧДОрганизацийЭДО
		Или Не ЕстьПравоИзменения Тогда

		Элементы.ФормаСохранитьКакЧерновик.Доступность = Ложь;
		Элементы.ФормаПодписатьИЗарегистрировать.Доступность = Ложь;

		Элементы.ГруппаСозданиеДоверенности.Доступность = Ложь;

	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыСФиксированнымиСпискамиЗначений()
	// В редакторе формы, для элементов также снимается автозаполение контекстного меню
	НастраиваемыеЭлементы = Новый Массив; // Массив Из ПолеФормы
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверСвРосОргАдрРегРегион);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументДоверСвДоверитДоверитРосОргДоверЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументДоверСвУпПредПредСведФизЛСведФЛУдЛичнФЛКодВидДок);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументДоверСвУпПредПредСведИПСведФЛУдЛичнФЛКодВидДок);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументДоверСвПолнТипПолн);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументДоверСвДовПрПередов);
	
	Для Каждого ПолеСФиксированнымСписком Из НастраиваемыеЭлементы Цикл
		ПолеСФиксированнымСписком.УстановитьДействие("Открытие", "Подключаемый_ПодавитьСобытиеОткрытие");
		ПолеСФиксированнымСписком.УстановитьДействие("Очистка", "Подключаемый_ПодавитьСобытиеОчистка");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодавитьСобытиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодавитьСобытиеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектамиПрикладнойКонфигурации

&НаКлиенте
Процедура НачатьВыборЗначенияСубъекта(ОбработчикВыбораЗначения, СписокТипов, Элемент)
	КоличествоТипов = СписокТипов.Количество();
	ОбработчикВыбораТипа = Новый ОписаниеОповещения("ВыбратьТипСубъектаЗавершение", ЭтотОбъект,
		Новый Структура("ОбработчикВыбораЗначения", ОбработчикВыбораЗначения));
	Если КоличествоТипов = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоТипов = 1 Тогда
		ВыполнитьОбработкуОповещения(ОбработчикВыбораТипа, СписокТипов[0]);
	Иначе
		ПоказатьВыборИзМеню(ОбработчикВыбораТипа, СписокТипов, Элемент);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ВыбранныйТип - ЭлементСпискаЗначений:
//  * Значение - Тип - тип субъекта, для которого нужно открыть форму выбора
//  ДополнительныеПараметры - Структура:
//  * ОбработчикВыбораЗначения - ОписаниеОповещения
&НаКлиенте
Процедура ВыбратьТипСубъектаЗавершение(ВыбранныйТип, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ВыбранныйТип) = Тип("ЭлементСпискаЗначений") Тогда
		ПоказатьВводЗначения(ДополнительныеПараметры.ОбработчикВыбораЗначения, Неопределено,
			ВыбранныйТип.Представление, ВыбранныйТип.Значение);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - ОпределяемыйТип.Организация
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ВыбратьДоверителяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповДоверителя Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОДоверителе(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - ОпределяемыйТип.Организация
//                    - ОпределяемыйТип.КонтрагентБЭД
//                    - ОпределяемыйТип.ФизическоеЛицо
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ВыбратьЛицоБезДоверенностиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповЛицаБезДоверенности Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОЛицеБезДоверенности(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - ОпределяемыйТип.Организация
//                    - ОпределяемыйТип.КонтрагентБЭД
//                    - ОпределяемыйТип.ФизическоеЛицо
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ВыбратьПредставителяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповПредставителя Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОПредставителе(ВыбранноеЗначение);
	КонецЕсли;
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
КонецПроцедуры

// Параметры:
//  ВыбранноеЗначение - ОпределяемыйТип.ФизическоеЛицо
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура ВыбратьФизическоеЛицоЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОФизическомЛице(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

// Параметры:
//  Результат - Массив Из Структура:
//  * КодКлассификатора - Строка
//  * Полномочие - Строка
//  ИдентификаторСтроки - Число
&НаКлиенте
Процедура ВыбратьМашинноеПолномочиеЗавершение(Результат, ИдентификаторСтроки = Неопределено) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		Если ИдентификаторСтроки = Неопределено Тогда
			Для Каждого ДанныеПолномочия Из Результат Цикл
				ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.Добавить();
				ТекущиеДанные.КодПолн = ДанныеПолномочия.КодКлассификатора;
				ТекущиеДанные.НаимПолн = ДанныеПолномочия.Полномочие;
				ТекущиеДанные._Полномочие = МашиночитаемыеДоверенностиКлиентСервер.СформироватьПредставлениеПолномочия(
					ДанныеПолномочия.КодКлассификатора, ДанныеПолномочия.Полномочие);
			КонецЦикла;
		Иначе
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.НайтиПоИдентификатору(
				ИдентификаторСтроки);
			ТекущиеДанные.КодПолн = Результат[0].КодКлассификатора;
			ТекущиеДанные.НаимПолн =  Результат[0].Полномочие;
			ТекущиеДанные._Полномочие = МашиночитаемыеДоверенностиКлиентСервер.СформироватьПредставлениеПолномочия(
				Результат[0].КодКлассификатора, Результат[0].Полномочие);
		КонецЕсли;
		Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	КонецЕсли;
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаМашиночитаемыеПолномочия, Истина);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
КонецПроцедуры

// Параметры:
//  Результат - Строка, КодВозвратаДиалога -
//  ИдентификаторСтроки - Число
&НаКлиенте
Процедура ВвестиПредставителяЗавершение(Результат, ИдентификаторСтроки = Неопределено) Экспорт
	Если ТипЗнч(Результат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат) Тогда
		ЗаполнитьПредставителя(Результат, ИдентификаторСтроки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставителя(АдресХранилища, ИдентификаторСтроки)
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения[0]._Представитель) Тогда
		ТекстОшибки = НСтр("ru='Представитель не выбран';");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПредставительУжеУказан(ДанныеЗаполнения[0], ИдентификаторСтроки) Тогда
		ТекстОшибки = НСтр("ru='Представитель уже указан в списке';");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если ИдентификаторСтроки = Неопределено Тогда
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвУпПред.Добавить();
		Иначе
			ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвУпПред.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные._Представитель = ДанныеЗаполнения[0]._Представитель;
			ТекущиеДанные.ТипПред = ДанныеЗаполнения[0].ТипПред;
			ЗначениеВДанныеФормы(ДанныеЗаполнения[0].Пред, ТекущиеДанные.Пред);
			Элементы.ДоверенностьДокументДоверСвУпПред.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
			ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаНесколькоПредставителей);
			Элементы.ДекорацияЗаголовокГруппыПредставителей.Заголовок = НСтр("ru='Сведения о представителях'");
			ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвУпПред);
КонецПроцедуры

&НаСервере
Функция ПредставительУжеУказан(Представитель, ТекущийИдентификатор)
	
	КлючНовогоПредставителя = ПолучитьКлючПредставителя(Представитель);
	
	ТаблицаПредставителей = Доверенность[0].Документ[0].Довер[0].СвУпПред; // ДанныеФормыКоллекция
	
	Для Каждого Пред Из ТаблицаПредставителей Цикл
		
		Если Пред.ПолучитьИдентификатор() = ТекущийИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Представитель.ТипПред <> Пред.ТипПред Тогда
			Продолжить;
		КонецЕсли;
		
		КлючПредставителя = ПолучитьКлючПредставителя(Пред);
		
		Если КлючНовогоПредставителя = КлючПредставителя Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючПредставителя(Представитель)
	
	Разделитель = "/";
	ТипыПредставителей = ТипыПредставителей();
	Ключ = "";
	
	ТипПредставителя = Представитель.ТипПред;
	ДанныеПредставителя = Представитель.Пред[0];
	
	Если ТипПредставителя = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
		Ключ = ДанныеПредставителя.СведИО[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведИО[0].КПП;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
		Ключ = ДанныеПредставителя.СведИП[0].ОГРНИП + Разделитель + ДанныеПредставителя.СведИП[0].СНИЛС;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
		Ключ = ДанныеПредставителя.СведОрг[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведОрг[0].КПП;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ФизическоеЛицо Тогда
		Ключ = ДанныеПредставителя.СведФизЛ[0].СНИЛС;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
		Ключ = ДанныеПредставителя.СведФилиал[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведФилиал[0].КПП;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

#КонецОбласти

#Область МашинныеПолномочия

&НаКлиенте
Процедура ДобавитьНовоеМашинноеПолномочие()
	ПараметрыФормы = Новый Структура("МножественныйВыбор", Истина);
	ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМашинноеПолномочиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.КлассификаторПолномочийМЧД003.Форма.ФормаВыбора", ПараметрыФормы,
		Элементы.ДоверенностьДокументДоверСвПолнМашПолн_Полномочие, УникальныйИдентификатор, , , ОбработкаВыбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущееМашинноеПолномочие()
	ТекущиеДанные = Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура("КодКлассификатора", ТекущиеДанные.КодПолн);
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыбратьМашинноеПолномочиеЗавершение", ЭтотОбъект,
			Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные.ПолучитьИдентификатор());
		ОткрытьФорму("Справочник.КлассификаторПолномочийМЧД003.Форма.ФормаВыбора", ПараметрыФормы,
			Элементы.ДоверенностьДокументДоверСвПолнМашПолн_Полномочие, УникальныйИдентификатор, , , ОбработкаВыбора,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущееМашинноеПолномочие()
	ТекущиеДанные = Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн.Удалить(
			Элементы.ДоверенностьДокументДоверСвПолнМашПолн.ТекущиеДанные);
	КонецЕсли;
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаМашиночитаемыеПолномочия, Истина);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн);
КонецПроцедуры

#КонецОбласти

#Область Представители

&НаКлиенте
Процедура ДобавитьНовогоПредставителя()
	ОбработчикВводаДоверителя = Новый ОписаниеОповещения("ВвестиПредставителяЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.МЧД003.Форма.ДобавлениеПредставителя", , ЭтотОбъект, , , , ОбработчикВводаДоверителя);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущегоПредставителя()
	ТекущиеДанные = Элементы.ДоверенностьДокументДоверСвУпПред.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		ОбработчикВводаДоверителя = Новый ОписаниеОповещения("ВвестиПредставителяЗавершение", ЭтотОбъект,
			ИдентификаторСтроки);
		ПараметрыФормы = Новый Структура("ХранилищеДанных", ПоместитьДанныеПредставителяВХранилище(ИдентификаторСтроки));
		ОткрытьФорму("Справочник.МЧД003.Форма.ДобавлениеПредставителя", ПараметрыФормы, ЭтотОбъект, , , ,
			ОбработчикВводаДоверителя);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущегоПредставителя()
	СведенияОПредставителях = Доверенность[0].Документ[0].Довер[0].СвУпПред;
	СведенияОПредставителях.Удалить(Элементы.ДоверенностьДокументДоверСвУпПред.ТекущиеДанные);
	КоличествоЗаписей = СведенияОПредставителях.Количество();
	Если КоличествоЗаписей = 0 Тогда
		ИнициализироватьРеквизитыФормата(СведенияОПредставителях.Добавить(), Доверенность.Документ.Довер.СвУпПред);
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаОдинПредставитель);
		ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ФизическоеЛицо);
		Элементы.ДекорацияЗаголовокГруппыПредставителей.Заголовок = НСтр("ru='Сведения о представителе';");
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ТипыПредставителей = ТипыПредставителей();
		Если Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред
			= ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			ОтображаемаяГруппа = Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель;
		ИначеЕсли Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			ОтображаемаяГруппа = Элементы.ГруппаПредставитель_Организация;
		Иначе
			ОтображаемаяГруппа = Элементы.ГруппаПредставитель_ФизическоеЛицо;
		КонецЕсли;
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаОдинПредставитель);
		ПоказатьГруппу(Элементы.ГруппаПредставитель, ОтображаемаяГруппа);
		Элементы.ДекорацияЗаголовокГруппыПредставителей.Заголовок = НСтр("ru='Сведения о представителях';");
	КонецЕсли;
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Довер[0].СвУпПред);
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановкаПризнакаУтратыПолномочийПриПередоверии()
	
	СведенияДоверенности = Доверенность[0].Документ[0].Довер[0].СвДов[0];
	СведенияПолномочий = Доверенность[0].Документ[0].Довер[0].СвПолн[0];
		
	ПризнакПередоверия = Справочники.МЧД003.ПризнакВозможностиПередоверия();
	ПризнакУтратыПолномочий = Справочники.МЧД003.ПризнакУтратыПолномочий();
	
	Если СведенияДоверенности.ПрПередов = ПризнакПередоверия.Однократное
		Или СведенияДоверенности.ПрПередов = ПризнакПередоверия.ПоследующееПередоверие Тогда
		СведенияПолномочий.ПрУтрПолн = ПризнакУтратыПолномочий.НеУтрачиваются;
	Иначе
		СведенияПолномочий.ПрУтрПолн = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция Псевдонимы(Форма)
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("ОбщиеСведения", Форма.Доверенность[0].Документ[0].Довер[0].СвДов[0]);
	Псевдонимы.Вставить("Доверитель", Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0]);
	Псевдонимы.Вставить("ЛицоБезДоверенностиОрганизации", Форма.Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]);
	Возврат Псевдонимы;
КонецФункции

&НаСервере
Функция ПоместитьДанныеПредставителяВХранилище(Знач ИдентификаторСтроки)
	ТекущиеДанные = Доверенность[0].Документ[0].Довер[0].СвУпПред.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущиеДанные <> Неопределено Тогда
		РеквизитыТаблицы = ПолучитьРеквизиты("Доверенность.Документ.Довер.СвУпПред");
		ДанныеЗаполнения = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			ДанныеЗаполнения.Колонки.Добавить(Реквизит.Имя, Реквизит.ТипЗначения, Реквизит.Заголовок);
		КонецЦикла;
		ТекущаяЗапись = ДанныеЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяЗапись, ТекущиеДанные);
		ТекущаяЗапись.Пред = ДанныеФормыВЗначение(ТекущиеДанные.Пред, Тип("ТаблицаЗначений"));
		Возврат ПоместитьВоВременноеХранилище(ДанныеЗаполнения, УникальныйИдентификатор);
	КонецЕсли;
	Возврат "";
КонецФункции

// Параметры:
//  Ответ - КодВозвратаДиалога
//  ДополнительныеПараметры - Неопределено
&НаКлиенте
Процедура СпроситьОЗакрытииЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты(ИмяЭлемента)
	
	СвДов = Доверенность[0].Документ[0].Довер[0].СвДов[0];
	ПоляПериода = МашиночитаемыеДоверенностиКлиент.ПроверитьПоляПериодаДействия(СвДов);
	Если ЗначениеЗаполнено(ПоляПериода) Тогда
		МашиночитаемыеДоверенностиКлиент.ОчиститьПоляПериодаДействия(СвДов, ПоляПериода);
		ЭлементыКОформлению = МашиночитаемыеДоверенностиКлиент.ЭлементыПериодаПоСпискуПолей(
			ОписаниеЭлементовПолейПериодаДоверенности(),
			ПоляПериода);
			
		МашиночитаемыеДоверенностиКлиент.УстановитьОформлениеПолей(ЭлементыКОформлению);
	КонецЕсли;
	
	Если ИмяЭлемента = Элементы.ДоверенностьДокументДоверСвДовДатаВыдДовер.Имя И ЗначениеЗаполнено(СвДов.ДатаВыдДовер) 
		Или ИмяЭлемента = Элементы.ДоверенностьДокументДоверСвДовСрокДейст.Имя И ЗначениеЗаполнено(СвДов.СрокДейст) Тогда
			
		МашиночитаемыеДоверенностиКлиент.СброситьОформлениеПолей(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы[ИмяЭлемента]));
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы[ИмяЭлемента]);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОписаниеЭлементовПолейПериодаДоверенности()
	Результат = МашиночитаемыеДоверенностиКлиент.НовоеОписаниеЭлементовПолейПериодаДоверенности();
	Результат.СрокДейст = Элементы.ДоверенностьДокументДоверСвДовСрокДейст;
	Результат.ДатаВыдДовер = Элементы.ДоверенностьДокументДоверСвДовДатаВыдДовер;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПолучитьСтатусВРеестреФНС()
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСтатусВРеестреФНСЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.МЧД003.Форма.РегистрацияВРеестреФНС", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусВРеестреФНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Ложь;
	ЗакрытьСОповещениемОИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьСОповещениемОИзменении()
	
	СсылкаНаДоверенность = Объект.Ссылка;
	МашиночитаемыеДоверенностиКлиент.ОповеститьОИзмененииМЧД(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СсылкаНаДоверенность));
	Если Открыта() Тогда
		Закрыть(СсылкаНаДоверенность);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДоверенности

// Возвращает незаполненный контекст записи.
// 
// Возвращаемое значение:
//  Структура:
//    * АдресДанныхФайлаМЧД - Строка - Адрес данных файла МЧД
//    * ДанныеДляЗаполненияМЧД - см. Справочники.МЧД003.НовыеДанныеМЧД
//    * ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
//
&НаСервереБезКонтекста
Функция НовыйКонтекстЗаписи()
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресДанныхФайлаМЧД", "");
	Контекст.Вставить("ДанныеДляЗаполненияМЧД", Справочники.МЧД003.НовыеДанныеМЧД());
	Контекст.Вставить("ОшибкиФормирования", Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД());
	
	Возврат Контекст;
	
КонецФункции

// Конструктор параметров записи для передачи в Записать(ПараметрыЗаписи)
// 
// Возвращаемое значение:
//  Структура - Новые параметры записи:
//    * ЭтоЧерновик - Булево
//    * КонтекстЗаписи - см. НовыйКонтекстЗаписи - Контекст, если он создан
//                     - Неопределено - Контекст записи еще не создан
//    * РегистрироватьВРР - Булево
//
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыЗаписи()
	
	ПараметрыЗаписиФормы = Новый Структура;
	ПараметрыЗаписиФормы.Вставить("ЭтоЧерновик", Истина);
	ПараметрыЗаписиФормы.Вставить("КонтекстЗаписи", Неопределено);
	ПараметрыЗаписиФормы.Вставить("РегистрироватьВРР", Истина);
	
	Возврат ПараметрыЗаписиФормы;
	
КонецФункции

// Заполняет контекст записи на сервере и вызывает запись объекта из формы.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаКлиенте
Процедура ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи)
	
	ПараметрыЗаписиФормы = НовыеПараметрыЗаписи();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗаписиФормы, ПараметрыЗаписи);
	
	ПодготовитьФормуПередЗаписью(ПараметрыЗаписиФормы);
	
	Записать(ПараметрыЗаписиФормы);
	
КонецПроцедуры

// Получает свойство параметров записи.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - Параметры записи формы
//  Свойство - Строка - Имя свойства, которое необходимо получить
//  ЗначениеПоУмолчанию - Произвольный - Значение, возвращаемое, если свойство в параметрах записи не найдено
//                                       Если не передано, то вернет значение в см. НовыеПараметрыЗаписи
// 
// Возвращаемое значение:
//  Произвольный - Полученное свойство параметров записи
&НаКлиентеНаСервереБезКонтекста
Функция СвойствоПараметровЗаписи(ПараметрыЗаписи, Свойство, ЗначениеПоУмолчанию = Неопределено)
	
	ЗначениеСвойства = Неопределено;
	Если ПараметрыЗаписи.Свойство(Свойство, ЗначениеСвойства) Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
	Если ЗначениеПоУмолчанию <> Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ПараметрыЗаписиПоУмолчанию = НовыеПараметрыЗаписи();
	
	ЗначениеПоУмолчанию = Неопределено;
	Если ПараметрыЗаписиПоУмолчанию.Свойство(Свойство, ЗначениеПоУмолчанию) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Выполняет подготовительные действия перед записью:
//    - Заполнение контекста записи
//    - Сообщение пользователю об ошибках, если это необходимо
//    - Выделение элементов с ошибками заполнения
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ПодготовитьФормуПередЗаписью(ПараметрыЗаписи)
	
	ЗаполнитьКонтекстЗаписи(ПараметрыЗаписи);
	
	Если Не СвойствоПараметровЗаписи(ПараметрыЗаписи, "ЭтоЧерновик") Тогда
		ОбработатьОшибкиФормирования(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект справочника перед записью.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.МЧД003
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ЗаполнитьОбъектМЧД(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("КонтекстЗаписи") Тогда
		ПодготовитьФормуПередЗаписью(ПараметрыЗаписи);
	КонецЕсли;
	
	Контекст = ПараметрыЗаписи.КонтекстЗаписи; // см. НовыйКонтекстЗаписи
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Контекст.АдресДанныхФайлаМЧД); // ДвоичныеДанные
	
	ДанныеДляЗаполнения = Контекст.ДанныеДляЗаполненияМЧД;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ДвоичныеДанныеФайла;
	
	Справочники.МЧД003.ПерезаполнитьОбъектМЧД(ТекущийОбъект, ДанныеДляЗаполнения, ДанныеДляЗагрузки);
	
КонецПроцедуры

#Область ЗаполнениеКонтекстаЗаписи

// Заполняет контекст записи данными, необходимыми для заполнения элемента справочника МЧД003.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ЗаполнитьКонтекстЗаписи(ПараметрыЗаписи)
	
	КонтекстЗаписи = НовыйКонтекстЗаписи();
	
	ДанныеМЧД = ДанныеМЧДРекурсивно(Доверенность[0], "Доверенность");
	Результат = Справочники.МЧД003.СформироватьОбъектXDTOДоверенности(ДанныеМЧД);
	//@skip-check invocation-parameter-type-intersect
	ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Результат.Объект, Ложь, КодировкаТекста.UTF8);
	
	КонтекстЗаписи.АдресДанныхФайлаМЧД = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонтекстЗаписи.ОшибкиФормирования = Результат.ОшибкиФормирования;
	
	ДанныеДляЗаполненияМЧД = Справочники.МЧД003.ДанныеДляЗаполненияМЧД(Результат.Объект);
	
	КонтекстЗаписи.ДанныеДляЗаполненияМЧД = ДанныеДляЗаполненияМЧД;
	
	ПараметрыЗаписи.Вставить("КонтекстЗаписи", КонтекстЗаписи);
	
КонецПроцедуры

// Получает рекурсивно данные для заполнения МЧД
// 
// Параметры:
//  СтрокаДанных - ДанныеФормыЭлементКоллекции - Текущая строка данных
//  Путь - Строка - Путь до текущей строки данных
// 
// Возвращаемое значение:
//  Структура
&НаСервере
Функция ДанныеМЧДРекурсивно(СтрокаДанных, Путь)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	ДанныеМЧД = Новый Структура;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяТекущегоРеквизита = Реквизит.Имя; // Строка
		
		Если ЭтоСлужебнаяКолонка(ИмяТекущегоРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТаблица = Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"));
		НовыйПуть = СтрШаблон("%1.%2", Путь, ИмяТекущегоРеквизита);
		
		Если ЭтоНезаполняемыйПутьВДанныхМЧД(НовыйПуть) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоТаблица Тогда
			
			ПростыеЗначения = ЭтоТаблицаПростыхЗначенийМЧД(НовыйПуть);
			
			НаборЗначений = Новый Массив(); // Массив Из Структура, Строка, Дата
			
			СтрокиЗначений = СтрокаДанных[ИмяТекущегоРеквизита]; // ДанныеФормыКоллекция
			Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
				
				Если ПростыеЗначения Тогда
					Значение = СтрокаЗначения[ИмяКолонкиПростогоЗначения()]; // Строка, Дата
					Если ЗначениеЗаполнено(Значение) Тогда
						НаборЗначений.Добавить(Значение);
					КонецЕсли;
				Иначе
					ДанныеСтроки = ДанныеМЧДРекурсивно(СтрокаЗначения, НовыйПуть);
					НаборЗначений.Добавить(ДанныеСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеМЧД.Вставить(ИмяТекущегоРеквизита, НаборЗначений);
			
		Иначе
			
			Значение = СтрокаДанных[ИмяТекущегоРеквизита]; // Строка, Дата, Число
			Если ЗначениеЗаполнено(Значение) Тогда
				ДанныеМЧД.Вставить(ИмяТекущегоРеквизита, Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеМЧД;
	
КонецФункции

// Возвращает, является ли таблица - списком простых значений в данных МЧД.
// 
// Параметры:
//  Путь - Строка
// 
// Возвращаемое значение:
//  Булево
&НаСервере
Функция ЭтоТаблицаПростыхЗначенийМЧД(Путь)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	Если Реквизиты.Количество() = 1 
		И Реквизиты[0].Имя = ИмяКолонкиПростогоЗначения() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Говорит, что путь не нужно заполнять в данных МЧД.
// 
// Параметры:
//  Путь - Строка - Путь
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ЭтоНезаполняемыйПутьВДанныхМЧД(Путь)
	
	НеподдерживаемыеРеквизиты = Справочники.МЧД003.НеподдерживаемыеСвойстваМЧД003();
	
	Если НеподдерживаемыеРеквизиты.Найти(Путь) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имя колонки для списка простых значений.
// 
// Возвращаемое значение:
//  Строка
&НаСервереБезКонтекста
Функция ИмяКолонкиПростогоЗначения()
	
	Возврат "_Значение";
	
КонецФункции

// Говорит, является ли колонка служебной.
// 
// Параметры:
//  ИмяКолонки - Строка
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ЭтоСлужебнаяКолонка(ИмяКолонки)
	
	ИменаСлужебныхКолонок = Новый Соответствие();
	ИменаСлужебныхКолонок["_Представитель"] = Истина;
	ИменаСлужебныхКолонок["_НомерСтроки"] = Истина;
	ИменаСлужебныхКолонок["_Доверитель"] = Истина;
	ИменаСлужебныхКолонок["_ЛицоБезДоверенности"] = Истина;
	ИменаСлужебныхКолонок["_ТипЛица"] = Истина;
	ИменаСлужебныхКолонок["_ФизическоеЛицо"] = Истина;
	ИменаСлужебныхКолонок["_Полномочие"] = Истина;
	
	Возврат ИменаСлужебныхКолонок[ИмяКолонки] = Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибокЗаписи

// Обработать ошибки записи.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ОбработатьОшибкиФормирования(ПараметрыЗаписи)
	
	КонтекстЗаписи = ПараметрыЗаписи.КонтекстЗаписи; // см. НовыйКонтекстЗаписи
	
	Если КонтекстЗаписи.ОшибкиФормирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодсветитьЭлементыСОшибками(КонтекстЗаписи.ОшибкиФормирования);
	СообщитьОбОшибках(КонтекстЗаписи.ОшибкиФормирования);
	
КонецПроцедуры

// Выделяет красной рамкой элементы с ошибками заполнения реквизитов.
// 
// Параметры:
//  ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
&НаСервере
Процедура ПодсветитьЭлементыСОшибками(ОшибкиФормирования)
	
	Для Каждого Элемент Из ОшибкиФормирования Цикл
		
		ПутьРеквизита = Элемент.Ключ;
		
		ЭлементыФормы = ЭлементыПоПутиРеквизита(ПутьРеквизита);
		Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ЦветРамки") Тогда
				ЭлементФормы.ЦветРамки = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает элемент формы по пути реквизита.
// 
// Параметры:
//  Путь - Строка
// 
// Возвращаемое значение:
//  Массив Из ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - 
&НаСервере
Функция ЭлементыПоПутиРеквизита(Путь)
	
	ЧастиПутиБезУказанияИндекса = Новый Массив(); // Массив Из Строка
	
	ЧастиПути = СтрРазделить(Путь, ".");
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		ДанныеЧастиПути = ДанныеЧастиПути(ЧастьПути);
		ЧастиПутиБезУказанияИндекса.Добавить(ДанныеЧастиПути.Имя);
	КонецЦикла;
	
	ЭлементыПоПути = Новый Массив(); // Массив Из ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы
	ПредполагаемоеИмяЭлемента = СтрСоединить(ЧастиПутиБезУказанияИндекса, "");
	НайденныйЭлемент = Элементы.Найти(ПредполагаемоеИмяЭлемента);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		ЭлементыПоПути.Добавить(НайденныйЭлемент);
	КонецЕсли;
	
	Возврат ЭлементыПоПути;
	
КонецФункции

// Сообщает пользователю ошибки формирования МЧД группируя их по разделам МЧД.
// 
// Параметры:
//  ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
//
&НаСервере
Процедура СообщитьОбОшибках(ОшибкиФормирования)
	
	ГруппыОшибок = ОшибкиПоГруппам(ОшибкиФормирования);
	
	Если ЗначениеЗаполнено(ГруппыОшибок.Общее) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить общие сведения доверенности:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(ГруппыОшибок.Общее,
			Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппыОшибок.Доверители) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить сведения о доверителе:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(
			ГруппыОшибок.Доверители, Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппыОшибок.Представители) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить сведения о представителе(ях):
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(
			ГруппыОшибок.Представители, Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппыОшибок.Полномочия) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить полномочия:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(ГруппыОшибок.Полномочия,
			Символы.ПС)));
	КонецЕсли;

	Для Каждого Ошибка Из ГруппыОшибок.Прочие Цикл
		ОбщегоНазначения.СообщитьПользователю(Ошибка);
	КонецЦикла;

КонецПроцедуры

// Ошибки по группам.
// 
// Параметры:
//  ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
// Возвращаемое значение:
//  Структура - Ошибки по группам:
// * Общее - Массив Из Строка -
// * Доверители - Массив Из Строка -
// * Представители - Массив Из Строка -
// * Полномочия - Массив Из Строка -
// * Прочие - Массив Из Строка -
&НаСервере
Функция ОшибкиПоГруппам(ОшибкиФормирования)
	
	ОшибкиШапки = Новый Массив(); // Массив Из Строка
	ОшибкиДоверителей = Новый Массив(); // Массив Из Строка
	ОшибкиПредставителей = Новый Массив(); // Массив Из Строка
	ОшибкиПолномочий = Новый Массив(); // Массив Из Строка
	ОшибкиПрочие = Новый Массив(); // Массив Из Строка
	
	ЗаголовкиРеквизитов = Новый Соответствие();
	ЗаполнитьЗаголовкиРеквизитовТаблицыФормыРекурсивно("Доверенность", ЗаголовкиРеквизитов);
	
	Для Каждого Элемент Из ОшибкиФормирования Цикл
		
		ПутьРеквизита = Элемент.Ключ;
		СписокОшибок = Элемент.Значение;
		
		ПутьБезИндексов = ПутьБезИндексов(ПутьРеквизита);
		
		ЗаголовокРеквизита = ЗаголовкиРеквизитов[ПутьБезИндексов];
		
		Если ЗаголовокРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПрочие, СписокОшибок);
			Продолжить;
		КонецЕсли;
		
		ПредставленияОшибокСЗаголовками = Новый Массив(); // Массив Из Строка
		Для Каждого ТекстОшибки Из СписокОшибок Цикл
			ТекстСообщения = СтрШаблон("	%1 - %2", ЗаголовокРеквизита, ТекстОшибки);
			ПредставленияОшибокСЗаголовками.Добавить(ТекстСообщения);
		КонецЦикла;
		
		Если СтрНачинаетсяС(ПутьБезИндексов, "Доверенность.Документ.Довер.СвДоверит") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиДоверителей, ПредставленияОшибокСЗаголовками);
		ИначеЕсли СтрНачинаетсяС(ПутьБезИндексов, "Доверенность.Документ.Довер.СвУпПред") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПредставителей, ПредставленияОшибокСЗаголовками);
		ИначеЕсли СтрНачинаетсяС(ПутьБезИндексов, "Доверенность.Документ.Довер.СвПолн") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПолномочий, ПредставленияОшибокСЗаголовками);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиШапки, ПредставленияОшибокСЗаголовками);
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппыОшибок = Новый Структура;
	ГруппыОшибок.Вставить("Общее", ОшибкиШапки);
	ГруппыОшибок.Вставить("Доверители", ОшибкиДоверителей);
	ГруппыОшибок.Вставить("Представители", ОшибкиПредставителей);
	ГруппыОшибок.Вставить("Полномочия", ОшибкиПолномочий);
	ГруппыОшибок.Вставить("Прочие", ОшибкиПрочие);
	
	Возврат ГруппыОшибок;
	
КонецФункции

// Заголовки реквизитов таблицы формы рекурсивно.
// 
// Параметры:
//  Путь - Строка
//  ЗаголовкиРеквизитов - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Путь до реквизита
//    * Значение - Строка - Заголовок реквизита
// 
&НаСервере
Процедура ЗаполнитьЗаголовкиРеквизитовТаблицыФормыРекурсивно(Путь, ЗаголовкиРеквизитов)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяТекущегоРеквизита = Реквизит.Имя; // Строка
		
		ЭтоТаблица = Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"));
		НовыйПуть = СтрШаблон("%1.%2", Путь, ИмяТекущегоРеквизита);
		
		Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
			ЗаголовкиРеквизитов[НовыйПуть] = Реквизит.Заголовок;
		КонецЕсли;
		
		Если ЭтоТаблица Тогда
			
			ЗаполнитьЗаголовкиРеквизитовТаблицыФормыРекурсивно(НовыйПуть, ЗаголовкиРеквизитов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДоверенности

// Заблокировать форму.
&НаКлиенте
Процедура ЗаблокироватьФорму()
	
	Элементы.ГруппаСозданиеДоверенности.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьФорму()
	
	Элементы.ГруппаСозданиеДоверенности.Доступность = Истина;
	
КонецПроцедуры

// Необходимо заполнить контекст записи.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Функция НеобходимоЗаполнитьКонтекстЗаписи(ПараметрыЗаписи)
	
	КонтекстЗаписи = СвойствоПараметровЗаписи(ПараметрыЗаписи, "КонтекстЗаписи", Неопределено); // см. НовыйКонтекстЗаписи
	Если КонтекстЗаписи = Неопределено Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьПараметрыЗаписиПриЗаписи", 0.2, Истина);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыЗаписиПриЗаписи()
	
	РазблокироватьФорму();
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

// Задан вопрос о ошибках при регистрации МЧД.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Функция ЗаданВопросОбОшибкахПриРегистрацииМЧД(ПараметрыЗаписи)
	
	ЭтоЧерновик = СвойствоПараметровЗаписи(ПараметрыЗаписи, "ЭтоЧерновик"); // Булево
	Если ЭтоЧерновик Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЗаписи = ПараметрыЗаписи.КонтекстЗаписи; // см. НовыйКонтекстЗаписи
	
	Если КонтекстЗаписи.ОшибкиФормирования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Имеются ошибки при заполнении МЧД. Сохранить доверенность как черновик?'");
	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветООшибкахПриРегистрации", ЭтотОбъект);
	
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
		НСтр("ru = 'Ошибки формирования МЧД'"));
	
	Возврат Истина;
	
КонецФункции

// Обработать ответ о ошибках при регистрации.
// 
// Параметры:
//  Ответ - КодВозвратаДиалога
//  Контекст - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьОтветООшибкахПриРегистрации(Ответ, Контекст) Экспорт
	
	РазблокироватьФорму();
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Истина;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

// Зарегистрировать МЧД при необходимости.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаКлиенте
Процедура ЗарегистрироватьМЧДПриНеобходимости(ПараметрыЗаписи)
	
	ЭтоЧерновик = СвойствоПараметровЗаписи(ПараметрыЗаписи, "ЭтоЧерновик"); // Булево
	Если ЭтоЧерновик Тогда
		Возврат;
	КонецЕсли;
	
	РегистрироватьВРР = СвойствоПараметровЗаписи(ПараметрыЗаписи, "РегистрироватьВРР"); // Булево;
	ОбработчикПослеПодписания = Новый ОписаниеОповещения("ОбработатьРегистрациюМЧД", ЭтотОбъект);
	Если Не РегистрироватьВРР Тогда
		ОбработчикПослеПодписания =  Новый ОписаниеОповещения("ОбработатьПодписаниеМЧД", ЭтотОбъект);
	КонецЕсли;
	
	МашиночитаемыеДоверенностиКлиент.ПодписатьЗарегистрироватьМЧД(
		РегистрироватьВРР, 
		МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003(), 
		ОбработчикПослеПодписания, 
		Объект.Ссылка);
	
КонецПроцедуры

// Обработать регистрацию МЧД.
// 
// Параметры:
//  Результат - Структура:
//    * ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                        и возвращается пустая строка, при успехе идентификатор запоминается
//                                        в записи справочника
//    * СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                        "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                        статуса возвращается пустая строка и выводится сообщение об ошибке,
//                                        статус обновляется в записи справочника и на форме, если передана
//    * ДатаВремяТранзакции     - Дата
//    * ХешДоверенности         - Строка - хеш доверенности
//    * НомерДоверенности       - Строка - номер, извлеченный из доверенности
//    * ИННДоверителя           - Строка - ИНН доверителя, извлеченный из доверенности
//    * ОписаниеОшибкиРегистрации - Строка
//  Контекст - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьРегистрациюМЧД(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не ЗначениеЗаполнено(Результат.ИдентификаторТранзакции) Тогда
		
		Если ЗначениеЗаполнено(Результат.ОписаниеОшибкиРегистрации) Тогда
			Прочитать();
			ОткатитьПодписаниеДоверенности();
			Возврат;
		КонецЕсли;
		
		ЗакрытьСОповещениемОИзменении();
		Возврат;
		
	КонецЕсли;
	
	ПолучитьСтатусВРеестреФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткатитьПодписаниеДоверенности()
	
	Объект.Подписана = Ложь;
	Объект.ДатаПодписания = Дата(1, 1, 1);
	Объект.Верна = Ложь;
	Объект.Подписи.Очистить();
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Истина;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

// Обработать подписание МЧД.
// 
// Параметры:
//  Результат - Структура:
//    * ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                        и возвращается пустая строка, при успехе идентификатор запоминается
//                                        в записи справочника
//    * СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                        "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                        статуса возвращается пустая строка и выводится сообщение об ошибке,
//                                        статус обновляется в записи справочника и на форме, если передана
//    * ДатаВремяТранзакции     - Дата
//    * ХешДоверенности         - Строка - хеш доверенности
//    * НомерДоверенности       - Строка - номер, извлеченный из доверенности
//    * ИННДоверителя           - Строка - ИНН доверителя, извлеченный из доверенности
//  Контекст - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьПодписаниеМЧД(Результат, Контекст) Экспорт
	
	Прочитать();
	Модифицированность = Ложь;
	Закрыть(Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЧтениеДанныхДоверенности

// Прочитать черновик доверенности.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.МЧД003
&НаСервере
Процедура ПрочитатьЧерновикДоверенности(ТекущийОбъект)
	
	ДвоичныеДанные = ТекущийОбъект.ФайлМЧД.Получить(); // ДвоичныеДанные
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолученияОбъектаМЧД = Справочники.МЧД003.ОбъектXDTOМЧДИзДвоичныхДанных(ДвоичныеДанные);
	СообщитьОшибкиЧтенияДанныхМЧД(РезультатПолученияОбъектаМЧД.ОшибкиЧтения);
	ДанныеМЧД = Справочники.МЧД003.ДанныеМЧДИзОбъектаXDTO(РезультатПолученияОбъектаМЧД.Доверенность);
	
	ЗаполнитьДанныеФормыПоДаннымМЧД(ДанныеМЧД);
	
	ЗаполнитьСлужебныеРеквизитыПриЗагрузкеЧерновика();
	ПоказатьГруппыПоДанным();
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьГруппыПоУмолчанию()
	
	ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ЮридическоеЛицо);
	ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо);
	ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаОдинПредставитель);
	ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ФизическоеЛицо);
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, Элементы.ГруппаТекстовыеПолномочия);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьГруппыПоДанным()
	
	ПоказатьГруппыПоУмолчанию();
	
	ТипыДоверителей = Справочники.МЧД003.ТипыДоверителей();
	БулевыйКлассификатор = Справочники.МЧД003.КлассификаторДаНет();
	ТипыПредставителей = Справочники.МЧД003.ТипыПредставителей();
	ТипыПолномочий = Справочники.МЧД003.ТипыПолномочий();
	
	ТипДоверителя = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвДоверит[0].ТипДоверит");
	Если ТипДоверителя = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
		ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ИндивидуальныйПредприниматель);
	Иначе
		
		ПоказатьГруппу(Элементы.ГруппаДоверитель, Элементы.ГруппаДоверитель_ЮридическоеЛицо);
		
		ЕИОУК = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК");
		ЕИОИП = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП");
		
		Если ЕИОУК = БулевыйКлассификатор.Да Тогда
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ЮридическоеЛицо);
		ИначеЕсли ЕИОИП = БулевыйКлассификатор.Да Тогда
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности,
				Элементы.ГруппаЛицоБезДоверенности_ИндивидуальныйПредприниматель);
		Иначе
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенности, Элементы.ГруппаЛицоБезДоверенности_ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПредставителей = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвУпПред"); // ДанныеФормыКоллекция
	Если ТаблицаПредставителей.Количество() > 1 Тогда
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаНесколькоПредставителей);
	Иначе
		
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителей, Элементы.ГруппаОдинПредставитель);
		
		ТипПредставителя = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвУпПред[0].ТипПред");
		
		Если ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
			ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_Организация);
		ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ИндивидуальныйПредприниматель);
		Иначе
			ПоказатьГруппу(Элементы.ГруппаПредставитель, Элементы.ГруппаПредставитель_ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
	ТипПолномочий = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн");
	Если ТипПолномочий = ТипыПолномочий.Текстовые Тогда
		ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, Элементы.ГруппаТекстовыеПолномочия);
	Иначе
		ПоказатьГруппу(Элементы.ГруппаТипыПолномочий, Элементы.ГруппаМашиночитаемыеПолномочия);
	КонецЕсли;
	
КонецПроцедуры

// Сообщить ошибки чтения данных МЧД.
// 
// Параметры:
//  ОшибкиЧтения - см. Справочники.МЧД003.НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
&НаСервере
Процедура СообщитьОшибкиЧтенияДанныхМЧД(ОшибкиЧтения)
	
	Если ОшибкиЧтения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиСообщения = Новый Массив(); // Массив Из Строка
	ЧастиСообщения.Добавить(НСтр("ru = 'При чтении данных черновика МЧД возникли ошибки:'"));
	Для Каждого Элемент Из ОшибкиЧтения Цикл
		
		Путь = Элемент.Ключ;
		ТекстОшибки = Элемент.Значение;
		
		ЧастьСообщения = СтрШаблон("%1: %2", Путь, ТекстОшибки);
		ЧастиСообщения.Добавить(ЧастьСообщения);
		
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(СтрСоединить(ЧастиСообщения, Символы.ПС));
	
КонецПроцедуры

// Заполнить данные формы по данным доверенности.
// 
// Параметры:
//  ДанныеМЧД - Структура
// 
&НаСервере
Процедура ЗаполнитьДанныеФормыПоДаннымМЧД(ДанныеМЧД)
	
	Доверенность.Очистить();
	ИнициализироватьРеквизитыФормата(Доверенность, "Доверенность");
	ЗаполнитьСтрокуФормыПоДаннымРекурсивно(Доверенность[0], ДанныеМЧД, "Доверенность");
	ОчиститьЗначенияНеиспользуемыхТиповПолномочий();
	
КонецПроцедуры

// Заполнить строку формы по данным рекурсивно.
// 
// Параметры:
//  СтрокаФормы - ДанныеФормыЭлементКоллекции
//  ЭлементДанных - Структура
//  Путь - Строка
//
&НаСервере
Процедура ЗаполнитьСтрокуФормыПоДаннымРекурсивно(СтрокаФормы, ЭлементДанных, Путь)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяТекущегоРеквизита = Реквизит.Имя; // Строка
		Если Не ЭлементДанных.Свойство(ИмяТекущегоРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТаблица = Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"));
		НовыйПуть = СтрШаблон("%1.%2", Путь, ИмяТекущегоРеквизита);
		
		Если ЭтоТаблица Тогда
			
			ПростыеЗначения = ЭтоТаблицаПростыхЗначенийМЧД(НовыйПуть);
			
			ЗначениеЭлементаДанных = ЭлементДанных[ИмяТекущегоРеквизита]; // Массив Из Структура, Строка, Дата
			Если ТипЗнч(ЗначениеЭлементаДанных) <> Тип("Массив") Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаЗначенийФормы = СтрокаФормы[ИмяТекущегоРеквизита]; // ДанныеФормыКоллекция
			
			Индекс = 0;
			Для Каждого ЭлементЗначения Из ЗначениеЭлементаДанных Цикл
				
				Пока Индекс >= ТаблицаЗначенийФормы.Количество() Цикл
					ИнициализироватьРеквизитыФормата(ТаблицаЗначенийФормы, НовыйПуть);
				КонецЦикла;
				СтрокаЗначения = ТаблицаЗначенийФормы[Индекс]; // ДанныеФормыЭлементКоллекции
				
				Если ПростыеЗначения Тогда
					СтрокаЗначения[ИмяКолонкиПростогоЗначения()] = ЭлементЗначения;
				Иначе
					ЗаполнитьСтрокуФормыПоДаннымРекурсивно(СтрокаЗначения, ЭлементЗначения, НовыйПуть);
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаФормы[ИмяТекущегоРеквизита] = ЭлементДанных[ИмяТекущегоРеквизита];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить служебные реквизиты формы по данным МЧД.
&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПриЗагрузкеЧерновика()
	
	ЗаполнитьСлужебныеРеквизитыДоверителей();
	ЗаполнитьСлужебныеРеквизитыПредставителей();
	ЗаполнитьСлужебныеРеквизитыПолномочий();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыДоверителей()
	
	ТипыДоверителей = Справочники.МЧД003.ТипыДоверителей();
	БулевыйКлассификатор = Справочники.МЧД003.КлассификаторДаНет();
	
	ТипДоверителя = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвДоверит[0].ТипДоверит");
	Если ТипДоверителя = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
		
		ПредставлениеДоверителя = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].ИПДовер[0].НаимИП");
		
		Если Не ЗначениеЗаполнено(ПредставлениеДоверителя) Тогда
			
			Фамилия = ЗначениеВДеревеДоверенности(
				"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].ИПДовер[0].СведФЛ[0].ФИО[0].Фамилия");
			Имя = ЗначениеВДеревеДоверенности(
				"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].ИПДовер[0].СведФЛ[0].ФИО[0].Имя");
			Отчество = ЗначениеВДеревеДоверенности(
				"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].ИПДовер[0].СведФЛ[0].ФИО[0].Отчество");
			
			ПредставлениеДоверителя = СтрШаблон(НСтр("ru = 'ИП ""%1 %2 %3""'"), Фамилия, Имя, Отчество);
			
		КонецЕсли;
		
		УстановитьЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвДоверит[0]._Доверитель",
			ПредставлениеДоверителя);
		
	Иначе
		
		ПредставлениеДоверителя = Строка(ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].СвРосОрг[0].НаимОрг"));
		УстановитьЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвДоверит[0]._Доверитель",
			ПредставлениеДоверителя);
		
		ЕИОУК = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОУК");
		ЕИОИП = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЕИОИП");
		
		ПутьЛица = "Доверенность[0].Документ[0].Довер[0].СвДоверит[0].Доверит[0].РосОргДовер[0].ЛицоБезДов[0]";
		
		Если ЕИОУК = БулевыйКлассификатор.Да Тогда
			
			ПредставлениеЕИО = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СВЮЛЕИО[0].НаимОрг", ПутьЛица));
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._ЛицоБезДоверенности", ПутьЛица),
				ПредставлениеЕИО);
			
			Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0].СведФЛ[0].ФИО[0].Фамилия", ПутьЛица));
			Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0].СведФЛ[0].ФИО[0].Имя", ПутьЛица));
			Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0].СведФЛ[0].ФИО[0].Отчество", ПутьЛица));
			
			ПредставлениеФЛУК = СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество);
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо", ПутьЛица),
				ПредставлениеФЛУК);
			
		ИначеЕсли ЕИОИП = БулевыйКлассификатор.Да Тогда
			
			ПредставлениеЕИО = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].НаимИП", ПутьЛица));
			
			Если Не ЗначениеЗаполнено(ПредставлениеЕИО) Тогда
				
				Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].СведФЛ[0].ФИО[0].Фамилия", ПутьЛица));
				Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].СведФЛ[0].ФИО[0].Имя", ПутьЛица));
				Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].СведФЛ[0].ФИО[0].Отчество", ПутьЛица));
				
				ПредставлениеЕИО = СтрШаблон(НСтр("ru = 'ИП ""%1 %2 %3""'"), Фамилия, Имя, Отчество);
				
			КонецЕсли;
			
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._ЛицоБезДоверенности", ПутьЛица),
				ПредставлениеЕИО);
			
		Иначе
			
			Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвФЛ[0].СведФЛ[0].ФИО[0].Фамилия", ПутьЛица));
			Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвФЛ[0].СведФЛ[0].ФИО[0].Имя", ПутьЛица));
			Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвФЛ[0].СведФЛ[0].ФИО[0].Отчество", ПутьЛица));
			
			ПредставлениеЕИО = СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество);
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._ЛицоБезДоверенности", ПутьЛица),
				ПредставлениеЕИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПредставителей()
	
	ТипыПредставителей = Справочники.МЧД003.ТипыПредставителей();
	
	Представители = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвУпПред"); // ДанныеФормыКоллекция
	КоличествоПредставителей = Представители.Количество();
	
	Для ИндексПредставителя = 0 По КоличествоПредставителей - 1 Цикл
		
		ПутьПредставителя = СтрШаблон("Доверенность[0].Документ[0].Довер[0].СвУпПред[%1]", ИндексПредставителя);
		
		УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._НомерСтроки", ПутьПредставителя),
			ИндексПредставителя + 1);
		
		ТипПредставителя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.ТипПред", ПутьПредставителя));
		
		Если ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
			
			ПредставлениеПредставителя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведОрг[0].НаимОрг", ПутьПредставителя));
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Представитель", ПутьПредставителя),
				ПредставлениеПредставителя);
			
		ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			
			ПредставлениеПредставителя = ЗначениеВДеревеДоверенности(
				СтрШаблон("%1.Пред[0].СведИП[0].НаимИП", ПутьПредставителя));
			
			Если Не ЗначениеЗаполнено(ПредставлениеПредставителя) Тогда
				
				Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ФИО[0].Фамилия", ПутьПредставителя));
				Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ФИО[0].Имя", ПутьПредставителя));
				Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ФИО[0].Отчество", ПутьПредставителя));
				
				ПредставлениеПредставителя = СтрШаблон(НСтр("ru = 'ИП ""%1 %2 %3""'"), Фамилия, Имя, Отчество);
				
			КонецЕсли;
			
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Представитель", ПутьПредставителя),
				ПредставлениеПредставителя);
			
		ИначеЕсли ТипПредставителя = ТипыПредставителей.ФизическоеЛицо Тогда
			
			Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ФИО[0].Фамилия", ПутьПредставителя));
			Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ФИО[0].Имя", ПутьПредставителя));
			Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ФИО[0].Отчество", ПутьПредставителя));
			
			ПредставлениеПредставителя = СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество);
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Представитель", ПутьПредставителя),
				ПредставлениеПредставителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПолномочий()
	
	Полномочия = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн"); // ДанныеФормыКоллекция
	КоличествоПолномочий = Полномочия.Количество();
	
	Для ИндексПолномочия = 0 По КоличествоПолномочий - 1 Цикл
		
		ПутьПолномочия = СтрШаблон("Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн[%1]", ИндексПолномочия);
		
		УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._НомерСтроки", ПутьПолномочия),
			ИндексПолномочия + 1);
		
		НаименованиеПолномочия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.НаимПолн", ПутьПолномочия)); // Строка
		КодКлассификатора = ЗначениеВДеревеДоверенности(СтрШаблон("%1.КодПолн", ПутьПолномочия)); // Строка
		Представление = МашиночитаемыеДоверенностиКлиентСервер.СформироватьПредставлениеПолномочия(
				КодКлассификатора, НаименованиеПолномочия);
		
		УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Полномочие", ПутьПолномочия),
			Представление);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СбросАльтернативныхСвойств

&НаСервере
Процедура ОчиститьЗначенияНеиспользуемыхТиповПолномочий()
	
	ТипПолномочий = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТипПолн");
	
	Если ТипПолномочий = ТипыПолномочий().Текстовые Тогда
		
		ТаблицаМашиночитаемыхПолномочий =
			ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн"); // ДанныеФормыКоллекция
		
		Если ТаблицаМашиночитаемыхПолномочий <> Неопределено Тогда
			ТаблицаМашиночитаемыхПолномочий.Очистить();
		КонецЕсли;
		
	Иначе
		
		УстановитьЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТекстПолн", "");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПутями

// Возвращает значение в дереве доверенности на форме.
// 
// Параметры:
//  Путь - Строка - путь в формате Доверенность[0].<Свойство>[N]...
// 
// Возвращаемое значение:
//  Произвольный
&НаСервере
Функция ЗначениеВДеревеДоверенности(Путь)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	Если ЧастиПути.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ПерваяЧасть = ЧастиПути[0];
	ДанныеЧасти = ДанныеЧастиПути(ПерваяЧасть);
	Если ДанныеЧасти.Имя <> "Доверенность" Или ДанныеЧасти.Индекс <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ТекущаяСтрока = Доверенность[0];
	Для Индекс = 1 По ЧастиПути.ВГраница() - 1 Цикл
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЧастьПути = ЧастиПути[Индекс];
		ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоПромежуточнойСтроки = ТекущаяСтрока[ДанныеЧасти.Имя]; // ДанныеФормыКоллекция
		Если ТипЗнч(СвойствоПромежуточнойСтроки) <> Тип("ДанныеФормыКоллекция") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если СвойствоПромежуточнойСтроки.Количество() < ДанныеЧасти.Индекс + 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущаяСтрока = СвойствоПромежуточнойСтроки[ДанныеЧасти.Индекс];
		
	КонецЦикла;
	
	Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастьПути = ЧастиПути[ЧастиПути.ВГраница()];
	ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекущаяСтрока[ДанныеЧасти.Имя];
	
КонецФункции

// Устанавливает значение в дереве доверенности в форме по указанному пути.
// 
// Параметры:
//  Путь - Строка - путь в формате Доверенность[0].<Свойство>[N]...
//  Значение - Произвольный
&НаСервере
Процедура УстановитьЗначениеВДеревеДоверенности(Путь, Значение)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	Если ЧастиПути.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ПерваяЧасть = ЧастиПути[0];
	ДанныеЧасти = ДанныеЧастиПути(ПерваяЧасть);
	Если ДанныеЧасти.Имя <> "Доверенность" Или ДанныеЧасти.Индекс <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ТекущаяСтрока = Доверенность[0];
	Для Индекс = 1 По ЧастиПути.ВГраница() - 1 Цикл
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			Возврат;
		КонецЕсли;
		
		ЧастьПути = ЧастиПути[Индекс];
		ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
			Возврат;
		КонецЕсли;
		
		СвойствоПромежуточнойСтроки = ТекущаяСтрока[ДанныеЧасти.Имя]; // ДанныеФормыКоллекция
		Если ТипЗнч(СвойствоПромежуточнойСтроки) <> Тип("ДанныеФормыКоллекция") Тогда
			Возврат;
		КонецЕсли;
		
		Если СвойствоПромежуточнойСтроки.Количество() < ДанныеЧасти.Индекс + 1 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = СвойствоПромежуточнойСтроки[ДанныеЧасти.Индекс];
		
	КонецЦикла;
	
	Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	ЧастьПути = ЧастиПути[ЧастиПути.ВГраница()];
	ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока[ДанныеЧасти.Имя] = Значение;
	
КонецПроцедуры

// Конструктор данных части пути дерева МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * Имя - Строка
// * Индекс - Число
&НаКлиентеНаСервереБезКонтекста
Функция НовыеДанныеЧастиПути()
	
	ДанныеПути = Новый Структура;
	ДанныеПути.Вставить("Имя", "");
	ДанныеПути.Вставить("Индекс", 0);
	
	Возврат ДанныеПути;
	
КонецФункции

// Возвращает данные части пути по строковому представлению.
// 
// Параметры:
//  ЧастьПути - Строка
// 
// Возвращаемое значение:
//  см. НовыеДанныеЧастиПути
&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЧастиПути(ЧастьПути)
	
	Данные = НовыеДанныеЧастиПути();
	Данные.Имя = ЧастьПути;
	
	Если Не СтрЗаканчиваетсяНа(ЧастьПути, "]") Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДлинаЧастиПути = СтрДлина(ЧастьПути);
	
	КоличествоЦифрИндекса = 0;
	
	ЭтоЧастьПутиБезИндекса = Истина;
	
	ПозицияВСтроке = ДлинаЧастиПути - 1;
	Пока ПозицияВСтроке > 1 Цикл
		
		Символ = Сред(ЧастьПути, ПозицияВСтроке, 1);
		ЭтоЦифра = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ);
		
		Если ЭтоЦифра Тогда
			
			КоличествоЦифрИндекса = КоличествоЦифрИндекса + 1;
			ПозицияВСтроке = ПозицияВСтроке - 1;
			
		Иначе
			
			Если Сред(ЧастьПути, ПозицияВСтроке, 1) <> "[" Тогда
				ЭтоЧастьПутиБезИндекса = Ложь;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЭтоЧастьПутиБезИндекса Тогда
		Возврат Данные;
	КонецЕсли;
	
	СтрокаБезИндекса = Лев(ЧастьПути, ДлинаЧастиПути - КоличествоЦифрИндекса - 2);
	Индекс = Число(Сред(ЧастьПути, ДлинаЧастиПути - КоличествоЦифрИндекса, КоличествоЦифрИндекса));
	
	Если СтрДлина(СтрокаБезИндекса) > 0 Тогда
		Данные.Имя = СтрокаБезИндекса;
		Данные.Индекс = Индекс;
		Возврат Данные;
	Иначе
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

// Возвращает путь, очищенный от интексов.
// 
// Параметры:
//  Путь - Строка - Путь в формате Доверенность[0].Документ[0].Довер[0]...
// 
// Возвращаемое значение:
//  Строка - Путь в формате Доверенность.Документ.Довер...
&НаСервереБезКонтекста
Функция ПутьБезИндексов(Путь)
	
	ЧастиПутиБезУказанияИндекса = Новый Массив(); // Массив Из Строка
	
	ЧастиПути = СтрРазделить(Путь, ".");
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		ДанныеЧастиПути = ДанныеЧастиПути(ЧастьПути);
		ЧастиПутиБезУказанияИндекса.Добавить(ДанныеЧастиПути.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПутиБезУказанияИндекса, ".");
	
КонецФункции

#КонецОбласти

#КонецОбласти