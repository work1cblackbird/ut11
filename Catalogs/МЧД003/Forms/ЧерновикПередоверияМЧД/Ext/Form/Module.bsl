// @strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Параметры.ИсходнаяМЧД) И Не Параметры.ПередовериеРазрешено Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияДляВыбораДругойДоверенности());
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияБЭД.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	ЦветРамкиПоУмолчанию = Новый Цвет;
	
	Если Не ЗначениеЗаполнено(ИсходнаяМЧД) Тогда
		ИсходнаяМЧД = Параметры.ИсходнаяМЧД;
		ТекущаяИсходнаяМЧД = ИсходнаяМЧД;
	КонецЕсли;
	
	Если Доверенность.Количество() = 0 Тогда
		
		ЗаполнитьСпискиВыбораТипов();
		ЗаполнитьСписокВидовДокументовФизическогоЛица();
		НачальноеЗаполнениеРеквизитов();
		
		Если ЗначениеЗаполнено(ИсходнаяМЧД) Тогда
			ЗаполнитьПередовериеПоИсходнойМЧД();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсходнаяМЧД)
		И Справочники.МЧД003.ПередовериеТребуетНотариат(ИсходнаяМЧД) Тогда 
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияТребуетсяНотариат());
		Возврат;
	КонецЕсли;
	
	НазначитьСобытиеПриИзмененииДляПолейФормы();
	ЗаполнитьСписокРегионов();
	УстановитьДоступностьЭлементов();
	УстановитьРежимВыбораИзСпискаДоверителя();
	НастроитьЭлементыСФиксированнымиСпискамиЗначений();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Ключ.Пустая() Тогда
		КлючУникальности = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0].НомДовер;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Не ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Доверенность не была сохранена. Выйти без сохранения?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("Подключаемый_ВопросОЗакрытииЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаблокироватьФорму();
	
	Если НеобходимоЗаполнитьКонтекстЗаписи(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗаданВопросОбОшибкахПриРегистрацииМЧД(ПараметрыЗаписи) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПрочитатьЧерновикДоверенности(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьОбъектМЧД(ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РазблокироватьФорму();
	
	ИзмененныеМЧД = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	МашиночитаемыеДоверенностиКлиент.ОповеститьОИзмененииМЧД(ИзмененныеМЧД);
	
	ЗарегистрироватьМЧДПриНеобходимости(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЗаполнениеСубъектовДоверенностиПоОбъектамПрикладнойКонфигурации

#Область ЛицоБезДоверенности

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДов_ЛицоБезДоверенностиНачалоВыбора(
	Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборЛицаБезДоверенностиЗавершение",
		ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповЛицаБезДоверенности, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДов_ЛицоБезДоверенностиАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповЛицаБезДоверенности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДов_ЛицоБезДоверенностиПриИзменении(Элемент)
	
	ПерезаполнитьСведенияОЛицеБезДоверенностиПередоверия(
		Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЛицоБезДов[0]._ЛицоБезДоверенности);
		
КонецПроцедуры

#КонецОбласти

#Область РуководительИО

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвРукОП_РуководительИОПриИзменении(Элемент)
		
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборРуководителяИностраннойОрганизации", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвРукОП_РуководительИОНачалоВыбора(
	Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборРуководителяИностранногоФилиалаЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвРукОП_РуководительИОАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповФизическогоЛица);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РуководительФилиала

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвРукФил_РуководительПриИзменении(Элемент)
		
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборРуководителяФилиала", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвРукФил_РуководительАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповФизическогоЛица);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвРукФил_РуководительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборРуководителяФилиалаЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область Представитель

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолн_ПредставительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборПредставителяЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповПредставителя, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолн_ПредставительАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповПредставителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолн_ПредставительПриИзменении(Элемент)
	
	ПерезаполнитьСведенияОПредставителе(Доверенность[0].Документ[0].Передов[0].СвПолучПолн[0]._Представитель);
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти

#Область ФизическоеЛицо

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоНачалоВыбора(
	Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработчикВыбранногоЗначения = Новый ОписаниеОповещения("Подключаемый_ВыборФизическогоЛицаЗавершение", ЭтотОбъект);
	НачатьВыборЗначенияСубъекта(ОбработчикВыбранногоЗначения, СписокВыбораТиповФизическогоЛица, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоПриИзменении(Элемент)
	
	ПерезаполнитьСведенияОФизическомЛицеПередоверия(
		Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвФЛ_ФизическоеЛицоАвтоПодбор(
	Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 И ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Подбор(Текст, СписокВыбораТиповФизическогоЛица);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргНаимОргНачалоВыбора(Элемент,
	ДанныеВыбора, СтандартнаяОбработка)
	ДоверительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилНаимОргНачалоВыбора(Элемент, ДанныеВыбора,
	СтандартнаяОбработка)
	ДоверительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргНаимИОНачалоВыбора(Элемент, ДанныеВыбора,
	СтандартнаяОбработка)
	ДоверительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяМЧДПриИзменении(Элемент)
	
	ИсходнаяМЧДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсходнаяМЧДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ДоверенностьДоступнаДляПередоверия(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолнТипПредПриИзменении(Элемент)
	
	ТипПолномочий = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПолн[0].ТипПолн");
	
	Если ТипПолномочий = ТипыПолномочий().Текстовые Тогда
		ОтображаемаяГруппа = Элементы.ГруппаТекстовыеПолномочияПередоверия;
	Иначе
		ОтображаемаяГруппа = Элементы.ГруппаМашиночитаемыеПолномочияПередоверия;
	КонецЕсли;
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочийПередоверия, ОтображаемаяГруппа);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПереДоверДатаВыдДоверПриИзменении(Элемент)
	
	ПриИзмененииДаты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПереДоверСрокДейстПриИзменении(Элемент)
	
	ПриИзмененииДаты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПереДоверПрПередовПриИзменении(Элемент)
	
	УстановкаПризнакаУтратыПолномочийПриПередоверии();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоверенностьДокументПередовСвПолнМашПолн

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолнМашПолнПриИзменении(Элемент)
	
	Если УРодителяТекстовыеПолномочия Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоверенностьДокументПередовСвПолучПолн

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолнПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	ДобавитьНовогоПредставителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолнПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ИзменитьТекущегоПредставителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолнПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	УдалитьТекущегоПредставителя();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверенностьДокументПередовСвПолучПолнПриИзменении(Элемент)
	
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Передов[0].СвПолучПолн);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодписатьИЗарегистрировать(Команда)
	СвПереДовер = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0];
	
	ПоляПериода = МашиночитаемыеДоверенностиКлиент.ПроверитьПоляПериодаДействия(СвПереДовер);
	Если ЗначениеЗаполнено(ПоляПериода) Тогда
		МашиночитаемыеДоверенностиКлиент.ОчиститьПоляПериодаДействия(СвПереДовер, ПоляПериода);
		ЭлементыКОформлению = МашиночитаемыеДоверенностиКлиент.ЭлементыПериодаПоСпискуПолей(
			ОписаниеЭлементовПолейПериодаДоверенности(),
			ПоляПериода);
			
		МашиночитаемыеДоверенностиКлиент.УстановитьОформлениеПолей(ЭлементыКОформлению);
		
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Ложь;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновик(Команда)
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Истина;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

#Область Представители

&НаКлиенте
Процедура ДобавитьПредставителя(Команда)
	ДобавитьНовогоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредставителя(Команда)
	ИзменитьТекущегоПредставителя();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПредставителя(Команда)
	УдалитьТекущегоПредставителя();
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Перечисления

&НаКлиентеНаСервереБезКонтекста
Функция ВидыДоверенностей()
	Возврат Новый ФиксированнаяСтруктура("Обычная, Безотзывная", "1", "2");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПризнакСовместныхПолномочий()
	Возврат Новый ФиксированнаяСтруктура("Индивидуальные, Совместные", "1", "2");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипыПолномочий()
	Возврат Новый ФиксированнаяСтруктура("Текстовые, Машиночитаемые", "0", "1");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПризнакНаличияДоверенности()
	Возврат Новый ФиксированнаяСтруктура("Нет, Да", "0", "1");
КонецФункции

&НаСервере
Функция ТипыПредставителей()
	
	Возврат Справочники.МЧД003.ТипыПредставителей();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлассификаторДаНет()
	Возврат Новый ФиксированнаяСтруктура("Нет, Да", "0", "1");
КонецФункции

#КонецОбласти

#Область ЗаполнениеРеквизитов

#Область СпискиТипов

&НаСервере
Процедура ЗаполнитьСпискиВыбораТипов()
	
	ТипыСубъектов = Новый Структура("ФизическоеЛицо, Организация, Контрагент",
		Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.Типы(),
		Метаданные.ОпределяемыеТипы.Организация.Тип.Типы(),
		Метаданные.ОпределяемыеТипы.КонтрагентБЭД.Тип.Типы());
		
	ПравилаЗаполнения = Новый Соответствие;
	
	ПравилаЗаполнения.Вставить(ТипыСубъектов.Организация, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповДоверителя);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.Организация].Добавить(СписокВыбораТиповПредставителя);
	
	ПравилаЗаполнения.Вставить(ТипыСубъектов.Контрагент, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.Контрагент].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.Контрагент].Добавить(СписокВыбораТиповПредставителя);
	
	ПравилаЗаполнения.Вставить(ТипыСубъектов.ФизическоеЛицо, Новый Массив);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповЛицаБезДоверенности);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповПредставителя);
	ПравилаЗаполнения[ТипыСубъектов.ФизическоеЛицо].Добавить(СписокВыбораТиповФизическогоЛица);

	ШаблонПредставления = НСтр("ru='Выбрать %1';");
	Для Каждого КлючИЗначение Из ТипыСубъектов Цикл
		Для Каждого ТипСубъекта Из КлючИЗначение.Значение Цикл
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипСубъекта);
			
			Если МетаданныеТипа = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВариантыИмени = Новый Структура("Синоним, ПредставлениеОбъекта", "", "");
			ЗаполнитьЗначенияСвойств(ВариантыИмени, МетаданныеТипа);
			ВыбранноеИмя = ?(ЗначениеЗаполнено(ВариантыИмени.ПредставлениеОбъекта),
				ВариантыИмени.ПредставлениеОбъекта,
				ВариантыИмени.Синоним);
			Представление = СтрШаблон(ШаблонПредставления, ПолучитьСклоненияСтроки(НРег(ВыбранноеИмя), , 
				"ПД=Винительный;")[0]);
			СпискиНазначения = ПравилаЗаполнения[КлючИЗначение.Значение];
			
			Если ТипЗнч(СпискиНазначения) = Тип("Массив") Тогда
				Для Каждого СписокТипов Из СпискиНазначения Цикл
					Если СписокТипов.НайтиПоЗначению(ТипСубъекта) = Неопределено Тогда
						СписокТипов.Добавить(ТипСубъекта, Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция Подбор(Знач СтрокаПоиска, Знач СписокТипов)
	
	Лимит = 10;
	ПараметрыПодбора = Новый Структура("СтрокаПоиска, СпособПоискаСтроки", СтрокаПоиска,
		СпособПоискаСтрокиПриВводеПоСтроке.ЛюбаяЧасть);
	ИтоговыйСписок = Новый СписокЗначений;
	Индекс = 1;
	
	Для Каждого ЭлементСписка Из СписокТипов Цикл
		ТекущийТип = ЭлементСписка.Значение;
		МетаданныеИсточника = Метаданные.НайтиПоТипу(ТекущийТип);
		Если ТипЗнч(МетаданныеИсточника) <> Тип("Неопределено") И Метаданные.Справочники.Содержит(МетаданныеИсточника) Тогда
			ИмяСправочника = МетаданныеИсточника.Синоним;
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеИсточника.ПолноеИмя());
			ДанныеВыбора = Менеджер.ПолучитьДанныеВыбора(ПараметрыПодбора);
			Для Каждого ЭлементВыбора Из ДанныеВыбора Цикл
				ЧастиПредставления = Новый Массив(2);
				ЧастиПредставления[0] = ЭлементВыбора.Представление;
				ЧастиПредставления[1] = Новый ФорматированнаяСтрока(СтрШаблон(" [%1]", ИмяСправочника), ,
					ЦветаСтиля.НедоступныйДляВыбораЭлементБЭД);
				ИтоговыйСписок.Добавить(ЭлементВыбора.Значение, Новый ФорматированнаяСтрока(ЧастиПредставления));
				Если Индекс >= Лимит Тогда
					Возврат ИтоговыйСписок;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИтоговыйСписок;
	
КонецФункции

#КонецОбласти

#Область Автозаполнение

&НаСервере
Процедура ЗаполнитьСведенияПоПервоначальнойДоверенности(ОбъектXDTOМЧД)
	
	ДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOМЧД.Документ, "Довер", Неопределено);
	Если ДоверXDTO <> Неопределено Тогда
		
		СвДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвДов", , , Истина)[0];
		Объект.НомерРодительскойДоверенности = СвДовXDTO.НомДовер;
		Объект.ПередовериеРазрешено = Ложь;
		
		Доверенность[0].Документ[0].Передов[0].ПрНалПередов = ПризнакНаличияДоверенности().Нет;
		
		СвПереДовер = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0];
		СвПереДовер.ДатаВыдДовер = СвДовXDTO.ДатаВыдДовер;
		СвПереДовер.СрокДейст = СвДовXDTO.СрокДейст;
		СвПереДовер.ПрПередов = Справочники.МЧД003.ПризнакВозможностиПередоверия().БезПередоверия;
		
		СведенияОДоверенности = Доверенность[0].Документ[0].Передов[0].СвПервДовер[0];
		СведенияОДоверенности.ПрДовер = "1"; // Первоначальная доверенность
		СведенияОДоверенности.ФормДовер = "1"; // В электронном формате
		СведенияОДоверенности.ДатаВыдДовер = СвДовXDTO.ДатаВыдДовер;
		СведенияОДоверенности.СрокДейст = СвДовXDTO.СрокДейст;
		СведенияОДоверенности.ВнНомДоверПерв = СвДовXDTO.ВнНомДовер;
		СведенияОДоверенности.НомДоверПерв = СвДовXDTO.НомДовер;
		СведенияОДоверенности.НомРНДПерв = СвДовXDTO.НомРНДДовер;
				
		СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвДоверит", , , Истина)[0];
		СведенияОДоверенности.СвДоверПерв[0].ТипДоверит = СвДоверитXDTO.ТипДоверит;
		
		ДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвДоверит.Доверит", , , Истина)[0];
		Если ДоверитXDTO.РосОргДовер <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].РосОргДовер[0],
				ДоверитXDTO.РосОргДовер.СвРосОрг);
		КонецЕсли;
		Если ДоверитXDTO.ИнОргДовер <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].ИнОргДовер[0],
				ДоверитXDTO.ИнОргДовер.СвИнОрг);
		КонецЕсли;
		Если ДоверитXDTO.ИПДовер <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].ИПДовер[0],
				ДоверитXDTO.ИПДовер);
		КонецЕсли;
		Если ДоверитXDTO.ФЛДовер <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].ФЛДовер[0],
				ДоверитXDTO.ФЛДовер);
		КонецЕсли;
		
		СвНотУдXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвНотУд", , , Истина);
		Если СвНотУдXDTO <> Неопределено И СвНотУдXDTO[0].СвНотДейств <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвНотДейств[0], СвНотУдXDTO[0].СвНотДейств);
 		КонецЕсли;
 		Если СвНотУдXDTO <> Неопределено И СвНотУдXDTO[0].ВриоНот <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.ВриоНот[0], СвНотУдXDTO[0].ВриоНот);
 		КонецЕсли;

	КонецЕсли;
	
	ПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOМЧД.Документ, "Передов", Неопределено);
	Если ПередовXDTO <> Неопределено Тогда
		
		Доверенность[0].Документ[0].Передов[0].ПрНалПередов = ПризнакНаличияДоверенности().Да;
		
		СведенияОДоверенности = Доверенность[0].Документ[0].Передов[0].СвПервДовер[0];
		СведенияОДоверенности.СвДоверПерв.Очистить();
		СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПервДовер", , , Истина)[0];
		ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности, СвПереДоверXDTO);
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПереДовер", , , Истина)[0];
		Объект.НомерРодительскойДоверенности = СвПереДоверXDTO.НомДовер;
		Объект.ПередовериеРазрешено =
			СвПереДоверXDTO.ПрПередов = Справочники.МЧД003.ПризнакВозможностиПередоверия().ПоследующееПередоверие;
		
		СвПереДовер = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0];
	    СвПереДовер.ДатаВыдДовер = СвПереДоверXDTO.ДатаВыдДовер;
		СвПереДовер.СрокДейст = СвПереДоверXDTO.СрокДейст;

		СведенияОДоверенности = Доверенность[0].Документ[0].Передов[0].СвПередов[0];
		СведенияОДоверенности.ПрДовер = "2"; // Доверенность на основании передоверия
		СведенияОДоверенности.ФормДовер = "1"; // В электронном формате
		СведенияОДоверенности.ДатаВыдДовер = СвПереДоверXDTO.ДатаВыдДовер;
		СведенияОДоверенности.СрокДейст = СвПереДоверXDTO.СрокДейст;
		СведенияОДоверенности.ВнНомДоверПерв = СвПереДоверXDTO.ВнНомДовер;
		СведенияОДоверенности.НомДоверПерв = СвПереДоверXDTO.НомДовер;
		СведенияОДоверенности.НомРНДПерв = СвПереДоверXDTO.НомРНДДовер;
		
		СвПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПередПолн", , , Истина)[0];
		СведенияОДоверенности.СвДоверПерв[0].ТипДоверит = СвПередПолнXDTO.ТипПерПолн;
		
		ПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПередПолн.ПередПолн", , , Истина)[0];
		Если ПередПолнXDTO.РосОргПерПолн <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].РосОргДовер[0],
				ПередПолнXDTO.РосОргПерПолн.СвРосОрг);
		КонецЕсли;
		Если ПередПолнXDTO.ИнПерПолн <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].ИнОргДовер[0],
				ПередПолнXDTO.ИнПерПолн.СвИнОрг);
		КонецЕсли;
		Если ПередПолнXDTO.ИППерПолн <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].ИПДовер[0],
				ПередПолнXDTO.ИППерПолн);
		КонецЕсли;
		Если ПередПолнXDTO.ФЛПерПолн <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвДоверПерв[0].ДоверитПерв[0].ФЛДовер[0],
				ПередПолнXDTO.ФЛПерПолн);
		КонецЕсли;
		
		СвНотУдXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвНотУд", , , Истина);
		Если СвНотУдXDTO <> Неопределено И СвНотУдXDTO.СвНотДейств <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.СвНотДейств[0], СвНотУдXDTO.СвНотДейств);
 		КонецЕсли;
 		Если СвНотУдXDTO <> Неопределено И СвНотУдXDTO.СвНотДейств <> Неопределено Тогда
			ЗаполнитьАтрибутыРекурсивно(СведенияОДоверенности.ВриоНот[0], СвНотУдXDTO.ВриоНот);
 		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставлениеПоИсходнойМЧД(ОбъектXDTOМЧД)
	
	ШаблонСрокаДействия = НСтр("ru = 'Действует с %1г. по %2.г.'");
	ШаблонДоверителя = НСтр("ru = 'Доверитель: %1'");
	ШаблонПредставителя = НСтр("ru = 'Подписант: %1'");
	
	ФИО = Неопределено;
	МассивСтрок = Новый Массив;
	ЭтоИПФЛ = Ложь;
	
	ДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOМЧД.Документ, "Довер", Неопределено);
	Если ДоверXDTO <> Неопределено Тогда
		
		СвДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвДов", , , Истина)[0];
		
		ДатаВыдачиБезВремени = Лев(СвДовXDTO.ДатаВыдДовер, СтрНайти(СвДовXDTO.СрокДейст, " ") - 1);
		ДатаОкончанияБезВремени = Лев(СвДовXDTO.СрокДейст, СтрНайти(СвДовXDTO.СрокДейст, " ") - 1);
		ШаблонСрокаДействия = СтрШаблон(ШаблонСрокаДействия, ДатаВыдачиБезВремени, ДатаОкончанияБезВремени);
		
		ДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвДоверит.Доверит", , , Истина)[0];
		Если ФорматыЭДО.ЕстьСвойствоXDTO(ДоверитXDTO, "РосОргДовер") Тогда
			ШаблонДоверителя = СтрШаблон(ШаблонДоверителя, ДоверитXDTO.РосОргДовер.СвРосОрг.НаимОрг);
			ЛицоБезДоверXDTO = ДоверитXDTO.РосОргДовер.ЛицоБезДов[0];
			Если ФорматыЭДО.ЕстьСвойствоXDTO(ЛицоБезДоверXDTO, "СВЮЛ") Тогда
				ФИО = ЛицоБезДоверXDTO.СВЮЛ.СвФЛ[0].СведФЛ.ФИО;
			ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ЛицоБезДоверXDTO, "СвФЛ") Тогда
				ФИО = ЛицоБезДоверXDTO.СвФЛ.СведФЛ.ФИО;
			ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ЛицоБезДоверXDTO, "СвИП") Тогда
				ФИО = ЛицоБезДоверXDTO.СвИП.СведФЛ.ФИО;
			КонецЕсли;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ДоверитXDTO, "ИнОргДовер") Тогда
			ШаблонДоверителя = СтрШаблон(ШаблонДоверителя, ДоверитXDTO.ИнОргДовер.СвИнОрг.НаимИО);
			ФИО = ДоверитXDTO.ИнОргДовер.СвРукОП.СведФЛ.ФИО;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ДоверитXDTO, "ИПДовер") Тогда
			ЭтоИПФЛ = Истина;
			ФИО = ДоверитXDTO.ИПДовер.СведФЛ.ФИО;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ДоверитXDTO, "ФЛДовер") Тогда
			ЭтоИПФЛ = Истина;
			ФИО = ДоверитXDTO.ФЛДовер.СведФЛ.ФИО;
		КонецЕсли;
		
	КонецЕсли;

	ПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOМЧД.Документ, "Передов", Неопределено);
	Если ПередовXDTO <> Неопределено Тогда
		
		СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПереДовер", , , Истина)[0];
		
		ДатаВыдачиБезВремени = Лев(СвПереДоверXDTO.ДатаВыдДовер, СтрНайти(СвПереДоверXDTO.СрокДейст, " ") - 1);
		ДатаОкончанияБезВремени = Лев(СвПереДоверXDTO.СрокДейст, СтрНайти(СвПереДоверXDTO.СрокДейст, " ") - 1);
		ШаблонСрокаДействия = СтрШаблон(ШаблонСрокаДействия, ДатаВыдачиБезВремени, ДатаОкончанияБезВремени);
		
		ПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПередПолн.ПередПолн", , , Истина)[0];
		Если ФорматыЭДО.ЕстьСвойствоXDTO(ПередПолнXDTO, "РосОргПерПолн") Тогда
			ШаблонДоверителя = СтрШаблон(ШаблонДоверителя, ПередПолнXDTO.РосОргПерПолн.СвРосОрг.НаимОрг);
			ЛицоБезДоверXDTO = ПередПолнXDTO.РосОргПерПолн.ЛицоБезДов[0];
			Если ФорматыЭДО.ЕстьСвойствоXDTO(ЛицоБезДоверXDTO, "СВЮЛ") Тогда
				ФИО = ЛицоБезДоверXDTO.СВЮЛ.СвФЛ[0].СведФЛ.ФИО;
			ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ЛицоБезДоверXDTO, "СвФЛ") Тогда
				ФИО = ЛицоБезДоверXDTO.СвФЛ.СведФЛ.ФИО;
			ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ЛицоБезДоверXDTO, "СвИП") Тогда
				ФИО = ЛицоБезДоверXDTO.СвИП.СведФЛ.ФИО;
			КонецЕсли;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ПередПолнXDTO, "ИнПерПолн") Тогда
			ШаблонДоверителя = СтрШаблон(ШаблонДоверителя, ПередПолнXDTO.ИнПерПолн.СвФил.НаимИО);
			ФИО = ПередПолнXDTO.ИнПерПолн.СвРукОП.СведФЛ.ФИО;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ПередПолнXDTO, "ФилПерПолн") Тогда
			ШаблонДоверителя = СтрШаблон(ШаблонДоверителя, ПередПолнXDTO.ФилПерПолн.СвИнОрг.НаимОрг);
			ФИО = ПередПолнXDTO.ФилПерПолн.СвРукФил.СведФЛ.ФИО;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ПередПолнXDTO, "ИППерПолн") Тогда
			ЭтоИПФЛ = Истина;
			ФИО = ПередПолнXDTO.ИППерПолн.СведФЛ.ФИО;
		ИначеЕсли ФорматыЭДО.ЕстьСвойствоXDTO(ПередПолнXDTO, "ФЛПерПолн") Тогда
			ЭтоИПФЛ = Истина;
			ФИО = ПередПолнXDTO.ФЛПерПолн.СведФЛ.ФИО;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ФИО <> Неопределено Тогда
		Если ЭтоИПФЛ Тогда
			ШаблонДоверителя = СтрШаблон(ШаблонДоверителя, МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(ФИО));
		Иначе
			ШаблонПредставителя = СтрШаблон(ШаблонПредставителя, МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(ФИО));
		КонецЕсли;
	КонецЕсли;
	
	МассивСтрок.Добавить(ШаблонСрокаДействия);
	МассивСтрок.Добавить(ШаблонДоверителя);
	Если ФИО <> Неопределено И Не ЭтоИПФЛ Тогда
		МассивСтрок.Добавить(ШаблонПредставителя);
	КонецЕсли;
	
	Элементы.ДекорацияИнформацияПоИсходнойМЧД.Заголовок = СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОДоверителе(ОписаниеДоверителя)
	Модифицированность = Истина;
	ДоверительПоУмолчанию();
	
	Если Не ЗначениеЗаполнено(ОписаниеДоверителя) Тогда
		Возврат;
	КонецЕсли;
	
	СвПередПолн = Доверенность[0].Документ[0].Передов[0].СвПередПолн; // ТаблицаЗначений
	СвПередПолн.Очистить();
	СоздатьРекурсивно(СвПередПолн, "Доверенность.Документ.Передов.СвПередПолн");

	СвПередПолн[0].ТипПерПолн = ОписаниеДоверителя.ТипПредставителя;
	СведенияОрганизации = ОбщегоНазначения.ОбъектXDTOИзСтрокиXML(ОписаниеДоверителя.СведенияОрганизации);
	
	ТипыПередоверителей = Справочники.МЧД003.ТипыПредставителей();
	Если СвПередПолн[0].ТипПерПолн = ТипыПередоверителей.ЮридическоеЛицо Тогда

		СведенияОПредставителе = СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].СвРосОрг[0];
		ЗаполнитьАтрибутыРекурсивно(СведенияОПредставителе, СведенияОрганизации);

		ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ЮридическоеЛицо);
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверительПередоверия_ЮридическоеЛицо, Истина);
	ИначеЕсли СвПередПолн[0].ТипПерПолн = ТипыПередоверителей.ФилиалИностраннойОрганизации Тогда

		СведенияОПредставителе = СвПередПолн[0].ПередПолн[0].ИнПерПолн[0];
		ЗаполнитьАтрибутыРекурсивно(СведенияОПредставителе, СведенияОрганизации);

		ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия,
			Элементы.ГруппаДоверительПередоверия_ФилиалИностраннойОрганизации);
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверительПередоверия_ФилиалИностраннойОрганизации,
			Истина);

	ИначеЕсли СвПередПолн[0].ТипПерПолн = ТипыПередоверителей.ФилиалЮридическогоЛица Тогда

		СведенияОПредставителе = СвПередПолн[0].ПередПолн[0].ФилПерПолн[0];

		ЗаполнитьАтрибутыРекурсивно(СведенияОПредставителе, СведенияОрганизации);

		ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ФилиалОрганизации);
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверительПередоверия_ФилиалОрганизации, Истина);

	КонецЕсли;
	
	Доверитель = ОбщегоНазначенияБЭД.НайтиСсылку("Организации",,
		Новый Структура("ИНН, КПП", СведенияОрганизации.ИННЮЛ, СведенияОрганизации.КПП));
			
	Если ЗначениеЗаполнено(Доверитель) Тогда
		РегистрационныеДанныеОрганизации = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(Доверитель);
		ПерезаполнитьСведенияОЛицеБезДоверенностиПередоверия(РегистрационныеДанныеОрганизации.РуководительФизЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СведенияДоверителей(ДокументXDTO)
	СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументXDTO, "Передов.СвПолучПолн", Неопределено, , Истина);
	Если СвДоверитXDTO = Неопределено Тогда
		СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументXDTO, "Довер.СвУпПред", Неопределено, , Истина);
	КонецЕсли;
	
	Возврат СвДоверитXDTO;
КонецФункции
	
&НаСервере
Процедура ЗаполнитьСписокВыбораДоверителей(ОбъектXDTOМЧД)
	
	СвДоверитXDTO = СведенияДоверителей(ОбъектXDTOМЧД.Документ);
	
	Если СвДоверитXDTO = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СписокВыбораДоверителей.Очистить();
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргНаимОрг.СписокВыбора.Очистить();
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилНаимОрг.СписокВыбора.Очистить();
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргНаимИО.СписокВыбора.Очистить();

	ТипыПередоверителей = Справочники.МЧД003.ТипыПредставителей();
	
	Для Каждого ДоверительXDTO Из СвДоверитXDTO Цикл
				
		Если ДоверительXDTO.ТипПред = ТипыПередоверителей.ЮридическоеЛицо Тогда
			
			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Пред.СведОрг");
			ДобавитьЗначениеВСписокВыбораДоверителей(СведОргXDTO, ДоверительXDTO.ТипПред);
			
		ИначеЕсли ДоверительXDTO.ТипПред = ТипыПередоверителей.ФилиалИностраннойОрганизации Тогда
			
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Пред.СведИО");
			ДобавитьЗначениеВСписокВыбораДоверителей(СведИОXDTO, ДоверительXDTO.ТипПред);
			
		ИначеЕсли ДоверительXDTO.ТипПред = ТипыПередоверителей.ФилиалЮридическогоЛица Тогда
			
			СведФилиалЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Пред.СведФилиал");
			ДобавитьЗначениеВСписокВыбораДоверителей(СведФилиалЛXDTO, ДоверительXDTO.ТипПред);
			
		КонецЕсли;
		
	КонецЦикла;
	
	МножественныйВыборДоверителя = СписокВыбораДоверителей.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗначениеВСписокВыбораДоверителей(СведенияОрганизации, ТипПредставителя)
		
	НаименованиеОрганизации = СведенияОрганизации.НаимОрг; // Строка
	Если ЗначениеЗаполнено(СведенияОрганизации.КПП) Тогда
		ПредставлениеДоверителя = СтрШаблон(НСтр("ru = '%1 ИНН:%2 КПП:%3'"),
			НаименованиеОрганизации,
			СведенияОрганизации.ИННЮЛ,
			СведенияОрганизации.КПП);
	Иначе
		ПредставлениеДоверителя = СтрШаблон(НСтр("ru = '%1 ИНН:%2'"),
			НаименованиеОрганизации,
			СведенияОрганизации.ИННЮЛ);
	КонецЕсли;
	
	СведенияСтрокой = ОбщегоНазначения.ОбъектXDTOВСтрокуXML(СведенияОрганизации);
	ОписаниеДоверителя = ОписаниеДоверителя(СведенияСтрокой, ТипПредставителя);
	
	СписокВыбораДоверителей.Добавить(ОписаниеДоверителя, ПредставлениеДоверителя);
	
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргНаимОрг.СписокВыбора.Добавить(
		НаименованиеОрганизации);
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилНаимОрг.СписокВыбора.Добавить(
		НаименованиеОрганизации);
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргНаимИО.СписокВыбора.Добавить(
		НаименованиеОрганизации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеДоверителя(СведенияСтрокой, ТипПредставителя)
	ОписаниеДоверителя = Новый Структура();
	ОписаниеДоверителя.Вставить("СведенияОрганизации", СведенияСтрокой);
	ОписаниеДоверителя.Вставить("ТипПредставителя", ТипПредставителя);
	
	Возврат ОписаниеДоверителя;
КонецФункции

&НаСервереБезКонтекста
Процедура ПроставитьРежимВыбораИзСписка(Элемент, Значение)
	
	Элемент.РежимВыбораИзСписка = Значение;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАтрибутыРекурсивно(Приемник, ОбъектXDTO)

	КоллекцияСвойствXDTO = ОбъектXDTO.Свойства();
	Для Каждого Свойство Из КоллекцияСвойствXDTO Цикл
		Если ОбъектXDTO[Свойство.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ОбъектXDTO[Свойство.Имя]) = Тип("ОбъектXDTO") И Приемник.Свойство(Свойство.Имя) Тогда
			Если Приемник[Свойство.Имя].Количество() = 0 Тогда
				ЗаполнитьАтрибутыРекурсивно(Приемник[Свойство.Имя].Добавить(), ОбъектXDTO[Свойство.Имя]);
			Иначе
				ЗаполнитьАтрибутыРекурсивно(Приемник[Свойство.Имя][0], ОбъектXDTO[Свойство.Имя]);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ОбъектXDTO[Свойство.Имя]) = Тип("СписокXDTO") И Приемник.Свойство(Свойство.Имя) Тогда
			Для Каждого СтрокаСписка Из ОбъектXDTO[Свойство.Имя] Цикл
				ЗаполнитьАтрибутыРекурсивно(Приемник[Свойство.Имя].Добавить(), СтрокаСписка);
			КонецЦикла;
		ИначеЕсли Приемник.Свойство(Свойство.Имя) Тогда
			Приемник[Свойство.Имя] = ОбъектXDTO[Свойство.Имя];	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМашиночитаемыеПолномочияОтРодителя(ОбъектXDTOМЧД)
	
	ДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOМЧД.Документ, "Довер", Неопределено);
	Если ДоверXDTO <> Неопределено Тогда
		СвПолн = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвПолн", Неопределено);
	КонецЕсли;
	
	ПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTOМЧД.Документ, "Передов", Неопределено);
	Если ПередовXDTO <> Неопределено Тогда
		СвПолн = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПолн", Неопределено);
	КонецЕсли;	

	Если СвПолн <> Неопределено Тогда
		
		УРодителяТекстовыеПолномочия = СвПолн.ТипПолн = ТипыПолномочий().Текстовые;
		
		СохраненныеПолномочия = Неопределено;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СохраненныеПолномочия = Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн.Выгрузить();	
		КонецЕсли;	
		
		Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн.Очистить();
		ЗаполнитьАтрибутыРекурсивно(Доверенность[0].Документ[0].Передов[0].СвПолн[0], СвПолн);
		
		Если СохраненныеПолномочия <> Неопределено Тогда
			Полномочия = Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн;
			Если Полномочия.Количество() = 0 Тогда
				Полномочия.Загрузить(СохраненныеПолномочия);	
			Иначе
				Для Каждого Полномочие Из Полномочия Цикл
					Полномочие._Использовать = 
						СохраненныеПолномочия.НайтиСтроки(Новый Структура("КодПолн", Полномочие.КодПолн)).Количество() > 0;	
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн.Количество() >= 10 Тогда
			Элементы.ДоверенностьДокументПередовСвПолнМашПолн.ВысотаВСтрокахТаблицы = 10;	
		ИначеЕсли Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн.Количество() >= 6 Тогда
			Элементы.ДоверенностьДокументПередовСвПолнМашПолн.ВысотаВСтрокахТаблицы = 7;	
		Иначе
			Элементы.ДоверенностьДокументПередовСвПолнМашПолн.ВысотаВСтрокахТаблицы = 5;	
		КонецЕсли;
	КонецЕсли;
	
	Если Доверенность[0].Документ[0].Передов[0].СвПолн[0].ТипПолн = ТипыПолномочий().Текстовые Тогда
		ПоказатьГруппу(Элементы.ГруппаТипыПолномочийПередоверия, Элементы.ГруппаТекстовыеПолномочияПередоверия);
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаТекстовыеПолномочияПередоверия, Истина);
	Иначе
		МашинныеПолномочия = Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн;
		Для Каждого СтрокаПолномочий Из МашинныеПолномочия Цикл
			СтрокаПолномочий._Полномочие = МашиночитаемыеДоверенностиКлиентСервер.СформироватьПредставлениеПолномочия(
			СтрокаПолномочий.КодПолн, СтрокаПолномочий.НаимПолн);	
		КонецЦикла;
		ОбновитьНумерациюТаблицы(МашинныеПолномочия);
		ПоказатьГруппу(Элементы.ГруппаТипыПолномочийПередоверия, Элементы.ГруппаМашиночитаемыеПолномочияПередоверия);
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаМашиночитаемыеПолномочияПередоверия, Истина);
	КонецЕсли;
	
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	
	Элементы.ДоверенностьДокументПередовСвПолнТипПолн.ТолькоПросмотр = Истина;
	Если УРодителяТекстовыеПолномочия Тогда
		Элементы.ДоверенностьДокументПередовСвПолнТекстПолн.ТолькоПросмотр = Истина;
		Элементы.ДоверенностьДокументПередовСвПолнТипПолн.СписокВыбора[0].Представление = НСтр("ru = 'Текст из исходной МЧД'");
	Иначе
		Элементы.ДоверенностьДокументПередовСвПолнТипПолн.СписокВыбора[1].Представление = НСтр("ru = 'Из исходной МЧД'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОЛицеБезДоверенностиПередоверия(ЛицоБезДоверенности)
	
	Модифицированность = Истина;
	СведенияОДоверителеПередоверия = Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0]; 
	СведенияОЛицеБезДоверенности = СведенияОДоверителеПередоверия.ЛицоБезДов;
	
	СведенияОЛицеБезДоверенности.Очистить();
	СоздатьРекурсивно(СведенияОЛицеБезДоверенности,
		"Доверенность.Документ.Передов.СвПередПолн.ПередПолн.РосОргПерПолн.ЛицоБезДов");
	ЛицоБезДоверенностиПоУмолчанию();
	ТипЗначения = ТипЗнч(ЛицоБезДоверенности);
	ДаНет = КлассификаторДаНет();
	
	Если ЗначениеЗаполнено(ЛицоБезДоверенности) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		
		СведенияОЛицеБезДоверенности[0]._ЛицоБезДоверенности = ЛицоБезДоверенности;
		
		Если Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.СодержитТип(ТипЗначения) Тогда
			
			СведенияОДоверителеПередоверия.ЕИОФЛ = ДаНет.Да;
			СведенияОДоверителеПередоверия.ЕИОУК = ДаНет.Нет;
			СведенияОДоверителеПередоверия.ЕИОИП = ДаНет.Нет;
			СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ЛицоБезДоверенности);
			СведенияОФизЛице = СведенияОЛицеБезДоверенности[0].СвФЛ[0];
			СведенияОФизЛице.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОФизЛице.СНИЛС = СтруктураСведений.СтраховойНомерПФР;
			ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизЛице.СведФЛ[0], СтруктураСведений);
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия,
				Элементы.ГруппаЛицоБезДоверенностиПередоверия_ФизическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект,
				Элементы.ГруппаЛицоБезДоверенностиПередоверия_ФизическоеЛицо, Истина);
			
		Иначе
			
			СтруктураСведений = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(ЛицоБезДоверенности);
			
			Если ИнтеграцияЭДО.ЭтоФизЛицо(ЛицоБезДоверенности) Тогда
				
				СведенияОДоверителеПередоверия.ЕИОФЛ = ДаНет.Нет;
				СведенияОДоверителеПередоверия.ЕИОУК = ДаНет.Нет;
				СведенияОДоверителеПередоверия.ЕИОИП = ДаНет.Да;
				СведенияОбИП = СведенияОЛицеБезДоверенности[0].СвИП[0];
				СведенияОбИП.НаимИП = СтруктураСведений.ПолноеНаименование;
				СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
				СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
				СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
				СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
				СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
				ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия,
					Элементы.ГруппаЛицоБезДоверенностиПередоверия_ИндивидуальныйПредприниматель);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаЛицоБезДоверенностиПередоверия_ИндивидуальныйПредприниматель, Истина);
			Иначе
				
				СведенияОДоверителеПередоверия.ЕИОФЛ = ДаНет.Нет;
				СведенияОДоверителеПередоверия.ЕИОУК = ДаНет.Да;
				СведенияОДоверителеПередоверия.ЕИОИП = ДаНет.Нет;
				СведенияОЮрЛице = СведенияОЛицеБезДоверенности[0].СВЮЛ[0].СвЮЛЕИО[0];
				СведенияОЮрЛице.НаимОрг = СтруктураСведений.ПолноеНаименование;
				СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
				СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
				СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
				СведенияОЮрЛице.АдрРег[0].АдрРФ = СтруктураСведений.ЮридическийАдрес;
				СведенияОЮрЛице.АдрРег[0].Регион = РаботаСАдресами.СведенияОбАдресе(
					СтруктураСведений.ЮридическийАдресXML).КодРегиона;
				ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия,
					Элементы.ГруппаЛицоБезДоверенностиПередоверия_ЮридическоеЛицо);
				
				Если Метаданные.ОпределяемыеТипы.Организация.Тип.СодержитТип(ТипЗначения) Тогда
					РегистрационныеДанные = ИнтеграцияЭДО.РегистрационныеДанныеОрганизации(ЛицоБезДоверенности);
					Если ЗначениеЗаполнено(РегистрационныеДанные.РуководительФизЛицо) Тогда
						ПерезаполнитьСведенияОФизическомЛицеПередоверия(РегистрационныеДанные.РуководительФизЛицо);
					КонецЕсли;
				КонецЕсли;
				
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаЛицоБезДоверенностиПередоверия_ЮридическоеЛицо, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект,
			Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДов_ЛицоБезДоверенности);
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОПредставителе(Представитель)
	
	Модифицированность = Истина;
	СведенияОПредставителе = Доверенность[0].Документ[0].Передов[0].СвПолучПолн;
	СведенияОПредставителе.Очистить();
	СоздатьРекурсивно(СведенияОПредставителе, "Доверенность.Документ.Передов.СвПолучПолн");
	ПредставительПоУмолчанию();
	ТипЗначения = ТипЗнч(Представитель);
	ТипыПредставителей = Справочники.МЧД003.ТипыПредставителей();
	
	Если ЗначениеЗаполнено(Представитель) И ОбщегоНазначения.ЭтоСсылка(ТипЗначения) Тогда
		СведенияОПредставителе[0]._Представитель = Представитель;
		Если Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип.СодержитТип(ТипЗначения) Тогда
			СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(Представитель);
			СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ФизическоеЛицо;
			СведенияОФизЛице = СведенияОПредставителе[0].Пред[0].СведФизЛ[0];
			СведенияОФизЛице.ИННФЛ = СтруктураСведений.ИНН;
			СведенияОФизЛице.СНИЛС = СтруктураСведений.СтраховойНомерПФР;
			ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизЛице.СведФЛ[0], СтруктураСведений);
			ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо);
			СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо, Истина);
		Иначе
			СтруктураСведений = ОбщегоНазначенияБЭД.ДанныеЮрФизЛица(Представитель);
			Если ИнтеграцияЭДО.ЭтоФизЛицо(Представитель) Тогда
				СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель;
				СведенияОбИП = СведенияОПредставителе[0].Пред[0].СведИП[0];
				СведенияОбИП.НаимИП = СтруктураСведений.ПолноеНаименование;
				СведенияОбИП.ИННФЛ = СтруктураСведений.ИНН;
				СведенияОбИП.ОГРНИП = СтруктураСведений.ОГРН;
				СведенияОбИП.СведФЛ[0].ФИО[0].Фамилия = СтруктураСведений.Фамилия;
				СведенияОбИП.СведФЛ[0].ФИО[0].Имя = СтруктураСведений.Имя;
				СведенияОбИП.СведФЛ[0].ФИО[0].Отчество = СтруктураСведений.Отчество;
				ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия,
					Элементы.ГруппаПредставительПередоверия_ИндивидуальныйПредприниматель);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект,
					Элементы.ГруппаПредставительПередоверия_ИндивидуальныйПредприниматель, Истина);
			Иначе
				СведенияОПредставителе[0].ТипПред = ТипыПредставителей.ЮридическоеЛицо;
				СведенияОЮрЛице = СведенияОПредставителе[0].Пред[0].СведОрг[0];
				СведенияОЮрЛице.НаимОрг = СтруктураСведений.ПолноеНаименование;
				СведенияОЮрЛице.ИННЮЛ = СтруктураСведений.ИНН;
				СведенияОЮрЛице.КПП = СтруктураСведений.КПП;
				СведенияОЮрЛице.ОГРН = СтруктураСведений.ОГРН;
				СведенияОЮрЛице.АдрРег[0].АдрРФ = СтруктураСведений.ЮридическийАдрес;
				ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_Организация);
				СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставительПередоверия_Организация, Истина);
			КонецЕсли;
		КонецЕсли;
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ДоверенностьДокументПередовСвПолучПолн_Представитель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОФизическомЛицеПередоверия(ФизическоеЛицо)
	
	Модифицированность = Истина;
	СведенияОФизическомЛице =
		Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЛицоБезДов[0].СВЮЛ[0].СвФЛ;
	СведенияОФизическомЛице.Очистить();
	СоздатьРекурсивно(СведенияОФизическомЛице,
		"Доверенность.Документ.Передов.СвПередПолн.ПередПолн.РосОргПерПолн.ЛицоБезДов.СВЮЛ.СвФЛ");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ФизическоеЛицо)) Тогда
		СведенияОФизическомЛице[0]._ФизическоеЛицо = ФизическоеЛицо;
		СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ФизическоеЛицо);
		СведенияОФизическомЛице[0].ИННФЛ = СтруктураСведений.ИНН;
		СведенияОФизическомЛице[0].СНИЛС = СтруктураСведений.СтраховойНомерПФР;
		ЗаполнитьТаблицуТипаСведФЛ(СведенияОФизическомЛице[0].СведФЛ[0], СтруктураСведений);
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект,
			Элементы.ГруппаОдноВложенноеЛицоДействующееБезДоверенностиПередоверия, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТаблицуТипаСведФЛ(СведФЛ, СтруктураСведений)
	
	СведФЛ.ФИО[0].Фамилия = СтруктураСведений.Фамилия;
	СведФЛ.ФИО[0].Имя = СтруктураСведений.Имя;
	СведФЛ.ФИО[0].Отчество = СтруктураСведений.Отчество;
	СведФЛ.ДатаРожд = СтруктураСведений.ДатаРождения;
	
	Ключи = "КемВыдан, ДатаВыдачи, КодФНС, КодПодразделения, Серия, Номер";
	СведенияУдостоверения = Новый Структура(Ключи);
	ЗаполнитьЗначенияСвойств(СведенияУдостоверения, СтруктураСведений);
	СведФЛ.УдЛичнФЛ[0].ВыдДок = СведенияУдостоверения.КемВыдан;
	СведФЛ.УдЛичнФЛ[0].ДатаДок = СведенияУдостоверения.ДатаВыдачи;
	СведФЛ.УдЛичнФЛ[0].КодВидДок = СведенияУдостоверения.КодФНС;
	СведФЛ.УдЛичнФЛ[0].КодВыдДок = СведенияУдостоверения.КодПодразделения;
	СведФЛ.УдЛичнФЛ[0].СерНомДок = СтрШаблон("%1 %2", СведенияУдостоверения.Серия, СведенияУдостоверения.Номер);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьсписокРегионов()
	
	СписокРегионов = Неопределено;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначения.ОбщийМодуль("АдресныйКлассификатор");
		СписокРегионов = МодульАдресныйКлассификатор.СубъектыРФ();
	КонецЕсли;
	
	Если СписокРегионов = Неопределено Тогда
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргАдрРегРегион.РежимВыбораИзСписка = Ложь;
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.РежимВыбораИзСписка
			= Ложь;
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилАдрРегРегион.РежимВыбораИзСписка = Ложь;
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргАдрМНФактРегион.РежимВыбораИзСписка = Ложь;
	Иначе
		
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргАдрРегРегион.РежимВыбораИзСписка = Истина;
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.РежимВыбораИзСписка
			= Истина;
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилАдрРегРегион.РежимВыбораИзСписка = Истина;
		Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргАдрМНФактРегион.РежимВыбораИзСписка = Истина;
		
		Для Каждого Регион Из СписокРегионов Цикл
			Код = ?(Регион.КодСубъектаРФ < 10, "0"+ Строка(Регион.КодСубъектаРФ), Строка(Регион.КодСубъектаРФ));
			Наименование = Код + " " + Регион.Наименование;
			
			Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
				
			Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
				
			Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилАдрРегРегион.СписокВыбора
				.Добавить(Код, Наименование);
				
			Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргАдрМНФактРегион.СписокВыбора
				.Добавить(Код, Наименование);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура СоздатьРекурсивно(НовыйОбъект, Путь)
	
	Запись = НовыйОбъект.Добавить();
	Для Каждого Реквизит Из ПолучитьРеквизиты(Путь) Цикл
		Если Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда
			СоздатьРекурсивно(Запись[Реквизит.Имя], СтрШаблон("%1.%2", Путь, Реквизит.Имя));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ДоверительПоУмолчанию()
	
	Доверенность[0].Документ[0].Передов[0].СвПередПолн[0]._ПереДоверитель = "";
	Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ТипПерПолн = Справочники.МЧД003.ТипыПредставителей().ЮридическоеЛицо;
	
	ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ЮридическоеЛицо);
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаДоверительПередоверия_ЮридическоеЛицо, Истина);
	
	СведенияДоверителя = Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0];
			
	СведенияДоверителя.ЕИОУК = КлассификаторДаНет().Нет;
	СведенияДоверителя.ЕИОИП = КлассификаторДаНет().Нет;
	СведенияДоверителя.ЕИОФЛ = КлассификаторДаНет().Да;
	
	ЛицоБезДоверенностиПоУмолчанию();
	
КонецПроцедуры

&НаСервере
Процедура ЛицоБезДоверенностиПоУмолчанию()
	
	СведенияДоверителя =
		Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЛицоБезДов[0];
	
	СведенияДоверителя.ПолнЮЛ = ПризнакСовместныхПолномочий().Индивидуальные;
	СведенияДоверителя._ЛицоБезДоверенности = "";
	СведенияДоверителя.СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо = "";
	
	ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия,
		Элементы.ГруппаЛицоБезДоверенностиПередоверия_ФизическоеЛицо);
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаЛицоБезДоверенностиПередоверия_ФизическоеЛицо, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПредставительПоУмолчанию()
	
	СведенияПредставителя = Доверенность[0].Документ[0].Передов[0].СвПолучПолн[0];
	СведенияПредставителя.ТипПред = Справочники.МЧД003.ТипыПредставителей().ФизическоеЛицо;
	
	СведенияПредставителя._Представитель = "";
	СведенияПредставителя._НомерСтроки = "1";

	ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо);
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо, Истина);
	
	ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаОдинПредставительПередоверия);
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НачальноеЗаполнениеРеквизитов()
	
	СоздатьРекурсивно(Доверенность, "Доверенность");
	
	Если Не ЗначениеЗаполнено(ТекущийНомерДоверенности) Тогда
		НомерДоверенности = МашиночитаемыеДоверенности.ПолучитьНомерМЧД().НомерДоверенности;
		ТекущийНомерДоверенности = НомерДоверенности;
	Иначе
		НомерДоверенности = ТекущийНомерДоверенности;
	КонецЕсли;
	
	Если ТекущаяИсходнаяМЧД <> ИсходнаяМЧД Тогда
		ТекущаяИсходнаяМЧД = ИсходнаяМЧД;
	КонецЕсли;
	
	Доверенность[0].ВерсФорм = "EMCHD_1";
	Доверенность[0].ПрЭлФорм = "00000000";
	
	Доверенность[0].ИдФайл = "ON_EMCHD_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд;") + "_" + НомерДоверенности;
		
	СведенияДоверенности = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0];
	СведенияДоверенности.НомДовер = НомерДоверенности;
	СведенияДоверенности.ВнНомДовер = НомерДоверенности;
	СведенияДоверенности.СведСист = "https://m4d.nalog.gov.ru/EMCHD/check-status?guid=" + НомерДоверенности;
	СведенияДоверенности.ВидДовер = ВидыДоверенностей().Обычная;
	СведенияДоверенности.ПрПередов = Справочники.МЧД003.ПризнакВозможностиПередоверия().БезПередоверия;
	СведенияДоверенности.КодНОДейст.Очистить();
	
	ДоверительПоУмолчанию();
	ПредставительПоУмолчанию();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = НСтр("ru = 'Создание доверенности'");
		
	Иначе
		
		Заголовок = СтрШаблон(НСтр("ru = 'Черновик МЧД (%1)'"), Объект.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НазначитьСобытиеПриИзмененииДляПолейФормы()
	
	Для Каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			Обработчик = Элемент.ПолучитьДействие("ПриИзменении");
			Если Не ЗначениеЗаполнено(Обработчик) Тогда
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_СброситьОформлениеЭлемента");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьГруппу(Родитель, Потомок)
	
	Для Каждого ВложеннаяГруппа Из Родитель.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ВложеннаяГруппа) = Тип("ГруппаФормы") Тогда
			ВложеннаяГруппа.Видимость = ВложеннаяГруппа = Потомок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьОформлениеЭлементовФормы(Форма, Элемент, Рекурсивно = Ложь)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ЦветРамки") Тогда
		Элемент.ЦветРамки = Форма.ЦветРамкиПоУмолчанию;
	КонецЕсли;
	
	Если Рекурсивно И ТипЗнч(Элемент) = Тип("ГруппаФормы") Или ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			СброситьОформлениеЭлементовФормы(Форма, ПодчиненныйЭлемент, Рекурсивно);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКомандТаблицыПредставителей(Форма)
	
	СведенияПредставителя = Форма.Доверенность[0].Документ[0].Передов[0].СвПолучПолн;
	
	Представитель = СведенияПредставителя[0]._Представитель;
	КоличествоПредставителейБольшеОдного = СведенияПредставителя.Количество() > 1;
	
	Форма.Элементы.ДобавитьПредставителяПередоверия.Доступность = ЗначениеЗаполнено(Представитель);
	
	Форма.Элементы.ИзменитьПредставителяПередоверия.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.УдалитьПредставителяПередоверия.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.ПереместитьВверхПредставителяПередоверия.Видимость = КоличествоПредставителейБольшеОдного;
	Форма.Элементы.ПереместитьВнизПредставителяПередоверия.Видимость = КоличествоПредставителейБольшеОдного;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьКомандТаблицыПолномочий(Форма)
	
	СведенияПолномочий = Форма.Доверенность[0].Документ[0].Передов[0].СвПолн[0];
	ЭтоМашинныеПолномочия = СведенияПолномочий.ТипПолн = ТипыПолномочий().Машиночитаемые;
	
	Форма.Элементы.ПереместитьВверхПередоверия.Видимость = ЭтоМашинныеПолномочия;
	Форма.Элементы.ПереместитьВнизПередоверия.Видимость = ЭтоМашинныеПолномочия;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СброситьОформлениеЭлемента(Элемент)
	СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовДокументовФизическогоЛица()
	
	Элементы.ДоверенностьДокументПередовСвПолучПолнПредСведФизЛСведФЛУдЛичнФЛКодВидДок.СписокВыбора.Очистить();
	Элементы.ДоверенностьДокументПередовСвПолучПолнПредСведИПСведФЛУдЛичнФЛКодВидДок.СписокВыбора.Очистить();
	
	ВидыДокументов = МашиночитаемыеДоверенностиКлиентСервер.ВидыДокументовФизическихЛиц();
	
	Для Каждого ВидДокумента Из ВидыДокументов Цикл
		Элементы.ДоверенностьДокументПередовСвПолучПолнПредСведФизЛСведФЛУдЛичнФЛКодВидДок.СписокВыбора
			.Добавить(ВидДокумента.Ключ, ВидДокумента.Значение);
		Элементы.ДоверенностьДокументПередовСвПолучПолнПредСведИПСведФЛУдЛичнФЛКодВидДок.СписокВыбора
			.Добавить(ВидДокумента.Ключ, ВидДокумента.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНумерациюТаблицы(Таблица)
	
	Индекс = 1;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы._НомерСтроки <> Индекс Тогда
			СтрокаТаблицы._НомерСтроки = Индекс;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	ЕстьПравоИзменения = МашиночитаемыеДоверенности.ИмеетсяПравоИзмененияМЧД();
	
	Элементы.ФормаСохранитьКакЧерновик.Доступность = ЕстьПравоИзменения;
	Элементы.ГруппаСозданиеПередоверия.Доступность = ЕстьПравоИзменения;
	Элементы.ФормаПодписатьИЗарегистрировать.Доступность = ЕстьПравоИзменения;
	
	Элементы.ГруппаСубъектыПередоверия.Доступность = ЗначениеЗаполнено(ИсходнаяМЧД);
	Элементы.ГруппаПодвалПередоверия.Доступность = ЗначениеЗаполнено(ИсходнаяМЧД);
	
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргНаимОрг.ТолькоПросмотр = Не МножественныйВыборДоверителя;
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилНаимОрг.ТолькоПросмотр = Не МножественныйВыборДоверителя;
	Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргНаимИО.ТолькоПросмотр = Не МножественныйВыборДоверителя;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимВыбораИзСпискаДоверителя()
	ПроставитьРежимВыбораИзСписка(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргНаимОрг,
		МножественныйВыборДоверителя);
	ПроставитьРежимВыбораИзСписка(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилНаимОрг,
		МножественныйВыборДоверителя);
	ПроставитьРежимВыбораИзСписка(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргНаимИО,
		МножественныйВыборДоверителя);
КонецПроцедуры

#КонецОбласти

#Область РаботаСОбъектамиПрикладнойКонфигурации

&НаКлиенте
Процедура Подключаемый_ВыборРуководителяФилиала(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОРуководителеФилиалаПередоверия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРуководителяИностраннойОрганизации(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОРуководителеИностраннойОрганизацииПередоверия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ПерезаполнитьСведенияОРуководителеФилиалаПередоверия(ФизическоеЛицо)
	
	Модифицированность = Истина;
	СведенияОРуководителеФилиала =
		Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].ФилПерПолн[0].СвРукФил;
	СведенияОРуководителеФилиала.Очистить();
	СоздатьРекурсивно(СведенияОРуководителеФилиала,
		"Доверенность.Документ.Передов.СвПередПолн.ПередПолн.ФилПерПолн.СвРукФил");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ФизическоеЛицо)) Тогда
		СведенияОРуководителеФилиала[0]._Руководитель = ФизическоеЛицо;
		СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ФизическоеЛицо);
		СведенияОРуководителеФилиала[0].ИННФЛ = СтруктураСведений.ИНН;
		СведенияОРуководителеФилиала[0].СНИЛС = СтруктураСведений.СтраховойНомерПФР;
		ЗаполнитьТаблицуТипаСведФЛ(СведенияОРуководителеФилиала[0].СведФЛ[0], СтруктураСведений);
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект,
			Элементы.ГруппаОдноЛицо_ФилиалОрганизации_Руководитель, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСведенияОРуководителеИностраннойОрганизацииПередоверия(ФизическоеЛицо)
	
	Модифицированность = Истина;
	СведенияОРуководителеИностраннойОрганизации =
		Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].ИнПерПолн[0].СвРукОП;
	СведенияОРуководителеИностраннойОрганизации.Очистить();
	СоздатьРекурсивно(СведенияОРуководителеИностраннойОрганизации,
		"Доверенность.Документ.Передов.СвПередПолн.ПередПолн.ИнПерПолн.СвРукОП");
	
	Если ЗначениеЗаполнено(ФизическоеЛицо) И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ФизическоеЛицо)) Тогда
		СведенияОРуководителеИностраннойОрганизации[0]._РуководительИО = ФизическоеЛицо;
		СтруктураСведений = МашиночитаемыеДоверенности.ДанныеФизЛица(ФизическоеЛицо);
		СведенияОРуководителеИностраннойОрганизации[0].ИННФЛ = СтруктураСведений.ИНН;
		СведенияОРуководителеИностраннойОрганизации[0].СНИЛС = СтруктураСведений.СтраховойНомерПФР;
		ЗаполнитьТаблицуТипаСведФЛ(СведенияОРуководителеИностраннойОрганизации[0].СведФЛ[0], СтруктураСведений);
		
		СброситьОформлениеЭлементовФормы(ЭтотОбъект,
			Элементы.ГруппаОдноЛицо_ФилиалИностраннойОрганизации_Руководитель, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРуководителяФилиалаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОРуководителеФилиалаПередоверия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборРуководителяИностранногоФилиалаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОРуководителеФилиалаПередоверия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьВыборЗначенияСубъекта(ОбработчикВыбораЗначения, СписокТипов, Элемент)
	
	КоличествоТипов = СписокТипов.Количество();
	ОбработчикВыбораТипа = Новый ОписаниеОповещения("Подключаемый_ВыборТипаСубъектаЗавершение", ЭтотОбъект,
		Новый Структура("ОбработчикВыбораЗначения", ОбработчикВыбораЗначения));
	
	Если КоличествоТипов = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоТипов = 1 Тогда
		ВыполнитьОбработкуОповещения(ОбработчикВыбораТипа, СписокТипов[0]);
	Иначе
		ПоказатьВыборИзМеню(ОбработчикВыбораТипа, СписокТипов, Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ВыбранныйТип - ЭлементСпискаЗначений:
//  * Значение - Тип - тип субъекта, для которого нужно открыть форму выбора
//  ДополнительныеПараметры - Структура:
//  * ОбработчикВыбораЗначения - ОписаниеОповещения
&НаКлиенте
Процедура Подключаемый_ВыборТипаСубъектаЗавершение(ВыбранныйТип, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыбранныйТип) = Тип("ЭлементСпискаЗначений") Тогда
		ПоказатьВводЗначения(ДополнительныеПараметры.ОбработчикВыбораЗначения, Неопределено,
			ВыбранныйТип.Представление, ВыбранныйТип.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборЛицаБезДоверенностиЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповЛицаБезДоверенности Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОЛицеБезДоверенностиПередоверия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборПредставителяЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповПредставителя Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОПредставителе(ВыбранноеЗначение);
	КонецЕсли;
	
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыборФизическогоЛицаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры = Неопределено) Экспорт
	
	ТипЗначения = ТипЗнч(ВыбранноеЗначение);
	ЗначениеДопустимогоТипа = Ложь;
	
	Для Каждого ЭлементСписка Из СписокВыбораТиповФизическогоЛица Цикл
		Если ЭлементСписка.Значение = ТипЗначения Тогда
			ЗначениеДопустимогоТипа = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеДопустимогоТипа И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерезаполнитьСведенияОФизическомЛицеПередоверия(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВводПредставителяЗавершение(Результат, ИдентификаторСтроки = Неопределено) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") И ЭтоАдресВременногоХранилища(Результат) Тогда
		ЗаполнитьПредставителя(Результат, ИдентификаторСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставителя(АдресХранилища, ИдентификаторСтроки)
	
	ДанныеЗаполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения[0]._Представитель) Тогда
		ТекстОшибки = НСтр("ru='Представитель не выбран';");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ПредставительУжеУказан(ДанныеЗаполнения[0], ИдентификаторСтроки) Тогда
		ТекстОшибки = НСтр("ru='Представитель уже указан в списке';");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
	Иначе
		Если ИдентификаторСтроки = Неопределено Тогда
			ТекущиеДанные = Доверенность[0].Документ[0].Передов[0].СвПолучПолн.Добавить();
		Иначе
			ТекущиеДанные = Доверенность[0].Документ[0].Передов[0].СвПолучПолн.НайтиПоИдентификатору(ИдентификаторСтроки);
		КонецЕсли;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные._Представитель = ДанныеЗаполнения[0]._Представитель;
			ТекущиеДанные.ТипПред = ДанныеЗаполнения[0].ТипПред;
			ЗначениеВДанныеФормы(ДанныеЗаполнения[0].Пред, ТекущиеДанные.Пред);
			Элементы.ДоверенностьДокументПередовСвПолучПолн.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
			ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаНесколькоПредставителейПередоверия);
			Элементы.ДекорацияЗаголовокГруппыПредставителейПередоверия.Заголовок = НСтр("ru='Представители'");
			ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Передов[0].СвПолучПолн);
	
КонецПроцедуры

&НаСервере
Функция ПредставительУжеУказан(Представитель, ТекущийИдентификатор)
	
	КлючНовогоПредставителя = ПолучитьКлючПредставителя(Представитель);
	
	ТаблицаПредставителей = Доверенность[0].Документ[0].Передов[0].СвПолучПолн; // ДанныеФормыКоллекция
	
	Для Каждого Пред Из ТаблицаПредставителей Цикл
		
		Если Пред.ПолучитьИдентификатор() = ТекущийИдентификатор Тогда
			Продолжить;
		КонецЕсли;
		
		Если Представитель.ТипПред <> Пред.ТипПред Тогда
			Продолжить;
		КонецЕсли;
		
		КлючПредставителя = ПолучитьКлючПредставителя(Пред);
		
		Если КлючНовогоПредставителя = КлючПредставителя Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьКлючПредставителя(Представитель)
	
	Разделитель = "/";
	ТипыПредставителей = ТипыПредставителей();
	Ключ = "";
	
	ТипПредставителя = Представитель.ТипПред;
	ДанныеПредставителя = Представитель.Пред[0];
	
	Если ТипПредставителя = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
		Ключ = ДанныеПредставителя.СведИО[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведИО[0].КПП;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
		Ключ = ДанныеПредставителя.СведИП[0].ОГРНИП + Разделитель + ДанныеПредставителя.СведИП[0].СНИЛС;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
		Ключ = ДанныеПредставителя.СведОрг[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведОрг[0].КПП;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ФизическоеЛицо Тогда
		Ключ = ДанныеПредставителя.СведФизЛ[0].СНИЛС;
	ИначеЕсли ТипПредставителя = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
		Ключ = ДанныеПредставителя.СведФилиал[0].ИННЮЛ + Разделитель + ДанныеПредставителя.СведФилиал[0].КПП;
	КонецЕсли;
	
	Возврат Ключ;
	
КонецФункции

#КонецОбласти

#Область Представители

&НаКлиенте
Процедура ДобавитьНовогоПредставителя()
	
	ОбработчикВводаДоверителя = Новый ОписаниеОповещения("Подключаемый_ВводПредставителяЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.МЧД003.Форма.ДобавлениеПредставителя", , ЭтотОбъект, , , , ОбработчикВводаДоверителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТекущегоПредставителя()
	
	ТекущиеДанные = Элементы.ДоверенностьДокументПередовСвПолучПолн.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
		ОбработчикВводаДоверителя = Новый ОписаниеОповещения("Подключаемый_ВводПредставителяЗавершение", ЭтотОбъект,
			ИдентификаторСтроки);
		ПараметрыФормы = Новый Структура("ХранилищеДанных", ПоместитьДанныеПредставителяВХранилище(ИдентификаторСтроки));
		ОткрытьФорму("Справочник.МЧД003.Форма.ДобавлениеПредставителя", ПараметрыФормы, ЭтотОбъект, , , ,
			ОбработчикВводаДоверителя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТекущегоПредставителя()
	
	СведенияОПредставителях = Доверенность[0].Документ[0].Передов[0].СвПолучПолн;
	СведенияОПредставителях.Удалить(Элементы.ДоверенностьДокументПередовСвПолучПолн.ТекущиеДанные);
	КоличествоЗаписей = СведенияОПредставителях.Количество();
	
	Если КоличествоЗаписей = 0 Тогда
		СоздатьРекурсивно(СведенияОПредставителях.Добавить(), Доверенность.Документ.Передов.СвПолучПолн);
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаОдинПредставительПередоверия);
		ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо);
		Элементы.ДекорацияЗаголовокГруппыПредставителейПередоверия.Заголовок = НСтр("ru='Сведения о представителе';");
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ТипыПредставителей = ТипыПредставителей();
		Если Доверенность[0].Документ[0].Передов[0].СвПолучПолн[0].ТипПред
			= ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			ОтображаемаяГруппа = Элементы.ГруппаПредставительПередоверия_ИндивидуальныйПредприниматель;
		ИначеЕсли Доверенность[0].Документ[0].Передов[0].СвПолучПолн[0].ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			ОтображаемаяГруппа = Элементы.ГруппаПредставительПередоверия_Организация;
		Иначе
			ОтображаемаяГруппа = Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо;
		КонецЕсли;
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаОдинПредставительПередоверия);
		ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, ОтображаемаяГруппа);
		Элементы.ДекорацияЗаголовокГруппыПредставителейПередоверия.Заголовок = НСтр("ru='Сведения о представителях';");
	КонецЕсли;
	
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	ОбновитьНумерациюТаблицы(Доверенность[0].Документ[0].Передов[0].СвПолучПолн);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ИсходнаяМЧДПриИзмененииНаСервере()
	
	Доверенность.Очистить();
	
	Элементы.ДекорацияИнформацияПоИсходнойМЧД.Заголовок = "";
		
	НачальноеЗаполнениеРеквизитов();
	ЗаполнитьПередовериеПоИсходнойМЧД();
	УстановитьДоступностьЭлементов();
	УстановитьРежимВыбораИзСпискаДоверителя();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстСообщенияДляВыбораДругойДоверенности()

	Возврат НСтр("ru = 'Выбранная доверенность не разрешает передоверие. Выберите другую доверенность или создайте новую'");
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстСообщенияТребуетсяНотариат()

	Возврат НСтр("ru = 'Данная доверенность доступна к оформлению только через нотариат.'");
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПередовериеПоИсходнойМЧД()
	
	Если Не ЗначениеЗаполнено(ИсходнаяМЧД) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЧтения = РезультатЧтенияИсходнойМЧД();
	Если РезультатЧтения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПредставлениеПоИсходнойМЧД(РезультатЧтения.ОбъектМЧД);
	
	ЗаполнитьСведенияПоПервоначальнойДоверенности(РезультатЧтения.ОбъектМЧД);
	
	ЗаполнитьСписокВыбораДоверителей(РезультатЧтения.ОбъектМЧД);
	Если СписокВыбораДоверителей.Количество() > 0 Тогда
		ПерезаполнитьСведенияОДоверителе(СписокВыбораДоверителей[0].Значение);
	КонецЕсли;
	ЗаполнитьМашиночитаемыеПолномочияОтРодителя(РезультатЧтения.ОбъектМЧД);
	
КонецПроцедуры

&НаСервере
Функция РезультатЧтенияИсходнойМЧД()
	Результат = Неопределено;
	Если Не ЗначениеЗаполнено(ИсходнаяМЧД) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходнаяМЧД, "ФайлМЧД").Получить();
	РезультатЧтения = МашиночитаемыеДоверенности.ОбъектXDTOМЧД(ДанныеМЧД);
	Если ЗначениеЗаполнено(РезультатЧтения.ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияДляВыбораДругойДоверенности());
	Иначе
		Результат = РезультатЧтения;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ДоверенностьДоступнаДляПередоверия(ВыбраннаяДоверенность)
	
	ЗначенияРеквитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВыбраннаяДоверенность, "ПередовериеРазрешено, СрокДействия, ДатаПрекращения, СтатусВРеестреФНС, Верна, Подписана");
	ПередовериеРазрешено = МашиночитаемыеДоверенности.ПередовериеРазрешено(ЗначенияРеквитов);
		
	Если Не ПередовериеРазрешено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияДляВыбораДругойДоверенности());
	КонецЕсли;
	
	Если Справочники.МЧД003.ПередовериеТребуетНотариат(ВыбраннаяДоверенность) Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщенияТребуетсяНотариат());
		ПередовериеРазрешено = Ложь;
	КонецЕсли;
		
	Возврат ПередовериеРазрешено;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыСФиксированнымиСпискамиЗначений()
	// В редакторе формы, для элементов также снимается автозаполение контекстного меню
	НастраиваемыеЭлементы = Новый Массив; // Массив Из ПолеФормы
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнСвРосОргАдрРегРегион);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнРосОргПерПолнЛицоБезДовСВЮЛСвЮЛЕИОАдрРегРегион);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвФилАдрРегРегион);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнФилПерПолнСвРукФилСведФЛУдЛичнФЛКодВидДок);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвИнОргАдрМНФактРегион);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПередПолнПередПолнИнПерПолнСвРукОПСведФЛУдЛичнФЛКодВидДок);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПолучПолнПредСведФизЛСведФЛУдЛичнФЛКодВидДок);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПолучПолнПредСведИПСведФЛУдЛичнФЛКодВидДок);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПолнТипПолн);
	НастраиваемыеЭлементы.Добавить(Элементы.ДоверенностьДокументПередовСвПереДоверПрПередов);
	
	Для Каждого ПолеСФиксированнымСписком Из НастраиваемыеЭлементы Цикл
		ПолеСФиксированнымСписком.УстановитьДействие("Открытие", "Подключаемый_ПодавитьСобытиеОткрытие");
		ПолеСФиксированнымСписком.УстановитьДействие("Очистка", "Подключаемый_ПодавитьСобытиеОчистка");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодавитьСобытиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПодавитьСобытиеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура УстановкаПризнакаУтратыПолномочийПриПередоверии()
	
	СведенияДоверенности = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0];
	СведенияПолномочий = Доверенность[0].Документ[0].Передов[0].СвПолн[0];
	
	ПризнакПередоверия = Справочники.МЧД003.ПризнакВозможностиПередоверия();
	ПризнакУтратыПолномочий = Справочники.МЧД003.ПризнакУтратыПолномочий();
	
	Если СведенияДоверенности.ПрПередов = ПризнакПередоверия.Однократное
		Или СведенияДоверенности.ПрПередов = ПризнакПередоверия.ПоследующееПередоверие Тогда
		СведенияПолномочий.ПрУтрПолн = ПризнакУтратыПолномочий.НеУтрачиваются;
	Иначе
		СведенияПолномочий.ПрУтрПолн = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДанныеПредставителяВХранилище(Знач ИдентификаторСтроки)
	
	ТекущиеДанные = Доверенность[0].Документ[0].Передов[0].СвПолучПолн.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекущиеДанные <> Неопределено Тогда
		РеквизитыТаблицы = ПолучитьРеквизиты("Доверенность.Документ.Передов.СвПолучПолн");
		ДанныеЗаполнения = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из РеквизитыТаблицы Цикл
			ДанныеЗаполнения.Колонки.Добавить(Реквизит.Имя, Реквизит.ТипЗначения, Реквизит.Заголовок);
		КонецЦикла;
		ТекущаяЗапись = ДанныеЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяЗапись, ТекущиеДанные);
		ТекущаяЗапись.Пред = ДанныеФормыВЗначение(ТекущиеДанные.Пред, Тип("ТаблицаЗначений"));
		Возврат ПоместитьВоВременноеХранилище(ДанныеЗаполнения, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВопросОЗакрытииЗавершение(Ответ, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДаты(ИмяЭлемента)
	
	СвПереДовер = Доверенность[0].Документ[0].Передов[0].СвПереДовер[0];
	ПоляПериода = МашиночитаемыеДоверенностиКлиент.ПроверитьПоляПериодаДействия(СвПереДовер);
	Если ЗначениеЗаполнено(ПоляПериода) Тогда
		МашиночитаемыеДоверенностиКлиент.ОчиститьПоляПериодаДействия(СвПереДовер, ПоляПериода);
		ЭлементыКОформлению = МашиночитаемыеДоверенностиКлиент.ЭлементыПериодаПоСпискуПолей(
			ОписаниеЭлементовПолейПериодаДоверенности(),
			ПоляПериода);
			
		МашиночитаемыеДоверенностиКлиент.УстановитьОформлениеПолей(ЭлементыКОформлению);
	КонецЕсли;
	
	Если ИмяЭлемента = Элементы.ДоверенностьДокументПередовСвПереДоверДатаВыдДовер.Имя
			И ЗначениеЗаполнено(СвПереДовер.ДатаВыдДовер) 
		Или ИмяЭлемента = Элементы.ДоверенностьДокументПередовСвПереДоверСрокДейст.Имя
			И ЗначениеЗаполнено(СвПереДовер.СрокДейст) Тогда
				
		МашиночитаемыеДоверенностиКлиент.СброситьОформлениеПолей(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы[ИмяЭлемента]));
		СброситьОформлениеЭлементовФормы(ЭтотОбъект, Элементы[ИмяЭлемента]);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ОписаниеЭлементовПолейПериодаДоверенности()
	Результат = МашиночитаемыеДоверенностиКлиент.НовоеОписаниеЭлементовПолейПериодаДоверенности();
	Результат.СрокДейст = Элементы.ДоверенностьДокументПередовСвПереДоверСрокДейст;
	Результат.ДатаВыдДовер = Элементы.ДоверенностьДокументПередовСвПереДоверДатаВыдДовер;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПолучитьСтатусВРеестреФНС()
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Ссылка);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьСтатусВРеестреФНСЗавершение", ЭтотОбъект);

	ОткрытьФорму("Справочник.МЧД003.Форма.РегистрацияВРеестреФНС", ПараметрыФормы, , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтатусВРеестреФНСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Модифицированность = Ложь;
	
	РегистрацияПередоверия = МашиночитаемыеДоверенностиКлиент.ИмяСобытияРегистрацииПередоверия();
	Оповестить(РегистрацияПередоверия,, ВладелецФормы);
	Если Открыта() Тогда
		Закрыть(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОЗавершении = Новый ОписаниеОповещения("ДоверительНачалоВыбораЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОписаниеОЗавершении, СписокВыбораДоверителей, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоверительНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьСведенияОДоверителе(Результат.Значение);
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДоверенности

// Возвращает незаполненный контекст записи.
// 
// Возвращаемое значение:
//  Структура:
//    * АдресДанныхФайлаМЧД - Строка - Адрес данных файла МЧД
//    * ДанныеДляЗаполненияМЧД - см. Справочники.МЧД003.НовыеДанныеМЧД
//    * ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
//
&НаСервереБезКонтекста
Функция НовыйКонтекстЗаписи()
	
	Контекст = Новый Структура;
	Контекст.Вставить("АдресДанныхФайлаМЧД", "");
	Контекст.Вставить("ДанныеДляЗаполненияМЧД", Справочники.МЧД003.НовыеДанныеМЧД());
	Контекст.Вставить("ОшибкиФормирования", Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД());
	
	Возврат Контекст;
	
КонецФункции

// Конструктор параметров записи для передачи в Записать(ПараметрыЗаписи)
// 
// Возвращаемое значение:
//  Структура - Новые параметры записи:
//    * ЭтоЧерновик - Булево
//    * КонтекстЗаписи - см. НовыйКонтекстЗаписи - Контекст, если он создан
//                     - Неопределено - Контекст записи еще не создан
&НаКлиентеНаСервереБезКонтекста
Функция НовыеПараметрыЗаписи()
	
	ПараметрыЗаписиФормы = Новый Структура;
	ПараметрыЗаписиФормы.Вставить("ЭтоЧерновик", Истина);
	ПараметрыЗаписиФормы.Вставить("КонтекстЗаписи", Неопределено);
	
	Возврат ПараметрыЗаписиФормы;
	
КонецФункции

// Заполняет контекст записи на сервере и вызывает запись объекта из формы.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаКлиенте
Процедура ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи)
	
	ПараметрыЗаписиФормы = НовыеПараметрыЗаписи();
	
	ЗаполнитьЗначенияСвойств(ПараметрыЗаписиФормы, ПараметрыЗаписи);
	
	ПодготовитьФормуПередЗаписью(ПараметрыЗаписиФормы);
	
	Записан = Записать(ПараметрыЗаписиФормы);
	
	Если Не Записан Тогда
		РазблокироватьФорму();
	КонецЕсли;
	
КонецПроцедуры

// Получает свойство параметров записи.
// 
// Параметры:
//  ПараметрыЗаписи - Структура - Параметры записи формы
//  Свойство - Строка - Имя свойства, которое необходимо получить
//  ЗначениеПоУмолчанию - Произвольный - Значение, возвращаемое, если свойство в параметрах записи не найдено
//                                       Если не передано, то вернет значение в см. НовыеПараметрыЗаписи
// 
// Возвращаемое значение:
//  Произвольный - Полученное свойство параметров записи
&НаКлиентеНаСервереБезКонтекста
Функция СвойствоПараметровЗаписи(ПараметрыЗаписи, Свойство, ЗначениеПоУмолчанию = Неопределено)
	
	ЗначениеСвойства = Неопределено;
	Если ПараметрыЗаписи.Свойство(Свойство, ЗначениеСвойства) Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
	Если ЗначениеПоУмолчанию <> Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	ПараметрыЗаписиПоУмолчанию = НовыеПараметрыЗаписи();
	
	ЗначениеПоУмолчанию = Неопределено;
	Если ПараметрыЗаписиПоУмолчанию.Свойство(Свойство, ЗначениеПоУмолчанию) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Возврат ЗначениеПоУмолчанию;
	
КонецФункции

// Выполняет подготовительные действия перед записью:
//    - Заполнение контекста записи
//    - Сообщение пользователю об ошибках, если это необходимо
//    - Выделение элементов с ошибками заполнения
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ПодготовитьФормуПередЗаписью(ПараметрыЗаписи)
	
	ЗаполнитьКонтекстЗаписи(ПараметрыЗаписи);
	
	Если Не СвойствоПараметровЗаписи(ПараметрыЗаписи, "ЭтоЧерновик") Тогда
		ОбработатьОшибкиФормирования(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет объект справочника перед записью.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.МЧД003
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ЗаполнитьОбъектМЧД(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ПараметрыЗаписи.Свойство("КонтекстЗаписи") Тогда
		ПодготовитьФормуПередЗаписью(ПараметрыЗаписи);
	КонецЕсли;
	
	Контекст = ПараметрыЗаписи.КонтекстЗаписи; // см. НовыйКонтекстЗаписи
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(Контекст.АдресДанныхФайлаМЧД); // ДвоичныеДанные
	
	ДанныеДляЗаполнения = Контекст.ДанныеДляЗаполненияМЧД;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ДвоичныеДанныеФайла;
	
	Справочники.МЧД003.ПерезаполнитьОбъектМЧД(ТекущийОбъект, ДанныеДляЗаполнения, ДанныеДляЗагрузки);
	
КонецПроцедуры

#Область ЗаполнениеКонтекстаЗаписи

// Заполняет контекст записи данными, необходимыми для заполнения элемента справочника МЧД003.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ЗаполнитьКонтекстЗаписи(ПараметрыЗаписи)
	
	КонтекстЗаписи = НовыйКонтекстЗаписи();
	
	ДанныеМЧД = ДанныеМЧДРекурсивно(Доверенность[0], "Доверенность");
	Результат = Справочники.МЧД003.СформироватьОбъектXDTOПередоверия(ДанныеМЧД);
	//@skip-check invocation-parameter-type-intersect
	ДвоичныеДанные = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Результат.Объект, Ложь, КодировкаТекста.UTF8);
	
	КонтекстЗаписи.АдресДанныхФайлаМЧД = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	КонтекстЗаписи.ОшибкиФормирования = Результат.ОшибкиФормирования;
	
	ДанныеДляЗаполненияМЧД = Справочники.МЧД003.ДанныеДляЗаполненияМЧД(Результат.Объект);
	
	КонтекстЗаписи.ДанныеДляЗаполненияМЧД = ДанныеДляЗаполненияМЧД;
	
	ПараметрыЗаписи.Вставить("КонтекстЗаписи", КонтекстЗаписи);
	
КонецПроцедуры

// Получает рекурсивно данные для заполнения МЧД
// 
// Параметры:
//  СтрокаДанных - ДанныеФормыЭлементКоллекции - Текущая строка данных
//  Путь - Строка - Путь до текущей строки данных
// 
// Возвращаемое значение:
//  Структура
&НаСервере
Функция ДанныеМЧДРекурсивно(СтрокаДанных, Путь)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	ДанныеМЧД = Новый Структура;
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяТекущегоРеквизита = Реквизит.Имя; // Строка
		
		Если ЭтоСлужебнаяКолонка(ИмяТекущегоРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТаблица = Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"));
		НовыйПуть = СтрШаблон("%1.%2", Путь, ИмяТекущегоРеквизита);
		
		Если ЭтоНезаполняемыйПутьВДанныхМЧД(НовыйПуть) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоТаблица Тогда
			
			ПростыеЗначения = ЭтоТаблицаПростыхЗначенийМЧД(НовыйПуть);
			
			НаборЗначений = Новый Массив(); // Массив Из Структура, Строка, Дата
			
			СтрокиЗначений = СтрокаДанных[ИмяТекущегоРеквизита]; // ДанныеФормыКоллекция
			Для Каждого СтрокаЗначения Из СтрокиЗначений Цикл
				
				Если ПростыеЗначения Тогда
					Значение = СтрокаЗначения[ИмяКолонкиПростогоЗначения()]; // Строка, Дата
					Если ЗначениеЗаполнено(Значение) Тогда
						НаборЗначений.Добавить(Значение);
					КонецЕсли;
				Иначе
					ДанныеСтроки = ДанныеМЧДРекурсивно(СтрокаЗначения, НовыйПуть);
					НаборЗначений.Добавить(ДанныеСтроки);
				КонецЕсли;
				
			КонецЦикла;
			
			ДанныеМЧД.Вставить(ИмяТекущегоРеквизита, НаборЗначений);
			
		Иначе
			
			Значение = СтрокаДанных[ИмяТекущегоРеквизита]; // Строка, Дата, Число
			Если ЗначениеЗаполнено(Значение) Тогда
				ДанныеМЧД.Вставить(ИмяТекущегоРеквизита, Значение);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеМЧД;
	
КонецФункции

// Возвращает, является ли таблица - списком простых значений в данных МЧД.
// 
// Параметры:
//  Путь - Строка
// 
// Возвращаемое значение:
//  Булево
&НаСервере
Функция ЭтоТаблицаПростыхЗначенийМЧД(Путь)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	Если Реквизиты.Количество() = 1 
		И Реквизиты[0].Имя = ИмяКолонкиПростогоЗначения() Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Говорит, что путь не нужно заполнять в данных МЧД.
// 
// Параметры:
//  Путь - Строка - Путь
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ЭтоНезаполняемыйПутьВДанныхМЧД(Путь)
	
	НеподдерживаемыеРеквизиты = Справочники.МЧД003.НеподдерживаемыеСвойстваМЧД003Передоверия();
	
	Если НеподдерживаемыеРеквизиты.Найти(Путь) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имя колонки для списка простых значений.
// 
// Возвращаемое значение:
//  Строка
&НаСервереБезКонтекста
Функция ИмяКолонкиПростогоЗначения()
	
	Возврат "_Значение";
	
КонецФункции

// Говорит, является ли колонка служебной.
// 
// Параметры:
//  ИмяКолонки - Строка
// 
// Возвращаемое значение:
//  Булево
&НаСервереБезКонтекста
Функция ЭтоСлужебнаяКолонка(ИмяКолонки)
	
	ИменаСлужебныхКолонок = Новый Соответствие();
	ИменаСлужебныхКолонок["_Представитель"] = Истина;
	ИменаСлужебныхКолонок["_НомерСтроки"] = Истина;
	ИменаСлужебныхКолонок["_Доверитель"] = Истина;
	ИменаСлужебныхКолонок["_ЛицоБезДоверенности"] = Истина;
	ИменаСлужебныхКолонок["_ТипЛица"] = Истина;
	ИменаСлужебныхКолонок["_ФизическоеЛицо"] = Истина;
	ИменаСлужебныхКолонок["_Полномочие"] = Истина;
	
	Возврат ИменаСлужебныхКолонок[ИмяКолонки] = Истина;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОшибокЗаписи

// Обработать ошибки записи.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаСервере
Процедура ОбработатьОшибкиФормирования(ПараметрыЗаписи)
	
	КонтекстЗаписи = ПараметрыЗаписи.КонтекстЗаписи; // см. НовыйКонтекстЗаписи
	
	Если КонтекстЗаписи.ОшибкиФормирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодсветитьЭлементыСОшибками(КонтекстЗаписи.ОшибкиФормирования);
	СообщитьОбОшибках(КонтекстЗаписи.ОшибкиФормирования);
	
КонецПроцедуры

// Выделяет красной рамкой элементы с ошибками заполнения реквизитов.
// 
// Параметры:
//  ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
&НаСервере
Процедура ПодсветитьЭлементыСОшибками(ОшибкиФормирования)
	
	Для Каждого Элемент Из ОшибкиФормирования Цикл
		
		ПутьРеквизита = Элемент.Ключ;
		
		ЭлементыФормы = ЭлементыПоПутиРеквизита(ПутьРеквизита);
		Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементФормы, "ЦветРамки") Тогда
				ЭлементФормы.ЦветРамки = ЦветаСтиля.ЦветОтрицательногоЧисла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает элемент формы по пути реквизита.
// 
// Параметры:
//  Путь - Строка
// 
// Возвращаемое значение:
//  Массив Из ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы, Неопределено - 
&НаСервере
Функция ЭлементыПоПутиРеквизита(Путь)
	
	ЧастиПутиБезУказанияИндекса = Новый Массив(); // Массив Из Строка
	
	ЧастиПути = СтрРазделить(Путь, ".");
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		ДанныеЧастиПути = ДанныеЧастиПути(ЧастьПути);
		ЧастиПутиБезУказанияИндекса.Добавить(ДанныеЧастиПути.Имя);
	КонецЦикла;
	
	ЭлементыПоПути = Новый Массив(); // Массив Из ДекорацияФормы, ГруппаФормы, КнопкаФормы, ТаблицаФормы, ПолеФормы
	ПредполагаемоеИмяЭлемента = СтрСоединить(ЧастиПутиБезУказанияИндекса, "");
	НайденныйЭлемент = Элементы.Найти(ПредполагаемоеИмяЭлемента);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		ЭлементыПоПути.Добавить(НайденныйЭлемент);
	КонецЕсли;
	
	Возврат ЭлементыПоПути;
	
КонецФункции

// Сообщает пользователю ошибки формирования МЧД группируя их по разделам МЧД.
// 
// Параметры:
//  ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
//
&НаСервере
Процедура СообщитьОбОшибках(ОшибкиФормирования)
	
	Если Не ЗначениеЗаполнено(ИсходнаяМЧД) Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указана исходная МЧД.'"));
	КонецЕсли;
	
	ГруппыОшибок = ОшибкиПоГруппам(ОшибкиФормирования);
	
	Если ЗначениеЗаполнено(ГруппыОшибок.Общее) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить общие сведения доверенности:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(ГруппыОшибок.Общее,
			Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппыОшибок.Доверители) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить сведения о доверителе:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(
			ГруппыОшибок.Доверители, Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппыОшибок.Представители) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить сведения о представителе(ях):
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(
			ГруппыОшибок.Представители, Символы.ПС)));
	КонецЕсли;

	Если ЗначениеЗаполнено(ГруппыОшибок.Полномочия) Тогда
		ШаблонСообщения = НСтр("ru='Не удалось заполнить полномочия:
							   |%1';");
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СтрСоединить(ГруппыОшибок.Полномочия,
			Символы.ПС)));
	КонецЕсли;

	Для Каждого Ошибка Из ГруппыОшибок.Прочие Цикл
		ОбщегоНазначения.СообщитьПользователю(Ошибка);
	КонецЦикла;

КонецПроцедуры

// Ошибки по группам.
// 
// Параметры:
//  ОшибкиФормирования - см. Справочники.МЧД003.НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
// Возвращаемое значение:
//  Структура - Ошибки по группам:
// * Общее - Массив Из Строка -
// * Доверители - Массив Из Строка -
// * Представители - Массив Из Строка -
// * Полномочия - Массив Из Строка -
// * Прочие - Массив Из Строка -
&НаСервере
Функция ОшибкиПоГруппам(ОшибкиФормирования)
	
	ОшибкиШапки = Новый Массив(); // Массив Из Строка
	ОшибкиДоверителей = Новый Массив(); // Массив Из Строка
	ОшибкиПредставителей = Новый Массив(); // Массив Из Строка
	ОшибкиПолномочий = Новый Массив(); // Массив Из Строка
	ОшибкиПрочие = Новый Массив(); // Массив Из Строка
	
	ЗаголовкиРеквизитов = Новый Соответствие();
	ЗаполнитьЗаголовкиРеквизитовТаблицыФормыРекурсивно("Доверенность", ЗаголовкиРеквизитов);
	
	Для Каждого Элемент Из ОшибкиФормирования Цикл
		
		ПутьРеквизита = Элемент.Ключ;
		СписокОшибок = Элемент.Значение;
		
		ПутьБезИндексов = ПутьБезИндексов(ПутьРеквизита);
		
		ЗаголовокРеквизита = ЗаголовкиРеквизитов[ПутьБезИндексов];
		
		Если ЗаголовокРеквизита = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПрочие, СписокОшибок);
			Продолжить;
		КонецЕсли;
		
		ПредставленияОшибокСЗаголовками = Новый Массив(); // Массив Из Строка
		Для Каждого ТекстОшибки Из СписокОшибок Цикл
			ТекстСообщения = СтрШаблон("	%1 - %2", ЗаголовокРеквизита, ТекстОшибки);
			ПредставленияОшибокСЗаголовками.Добавить(ТекстСообщения);
		КонецЦикла;
		
		Если СтрНачинаетсяС(ПутьБезИндексов, "Доверенность.Документ.Передов.СвПередПОлн") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиДоверителей, ПредставленияОшибокСЗаголовками);
		ИначеЕсли СтрНачинаетсяС(ПутьБезИндексов, "Доверенность.Документ.Передов.СвПолучПолн") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПредставителей, ПредставленияОшибокСЗаголовками);
		ИначеЕсли СтрНачинаетсяС(ПутьБезИндексов, "Доверенность.Документ.Передов.СвПолн") Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПолномочий, ПредставленияОшибокСЗаголовками);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиШапки, ПредставленияОшибокСЗаголовками);
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппыОшибок = Новый Структура;
	ГруппыОшибок.Вставить("Общее", ОшибкиШапки);
	ГруппыОшибок.Вставить("Доверители", ОшибкиДоверителей);
	ГруппыОшибок.Вставить("Представители", ОшибкиПредставителей);
	ГруппыОшибок.Вставить("Полномочия", ОшибкиПолномочий);
	ГруппыОшибок.Вставить("Прочие", ОшибкиПрочие);
	
	Возврат ГруппыОшибок;
	
КонецФункции

// Заголовки реквизитов таблицы формы рекурсивно.
// 
// Параметры:
//  Путь - Строка
//  ЗаголовкиРеквизитов - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Путь до реквизита
//    * Значение - Строка - Заголовок реквизита
// 
&НаСервере
Процедура ЗаполнитьЗаголовкиРеквизитовТаблицыФормыРекурсивно(Путь, ЗаголовкиРеквизитов)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяТекущегоРеквизита = Реквизит.Имя; // Строка
		
		ЭтоТаблица = Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"));
		НовыйПуть = СтрШаблон("%1.%2", Путь, ИмяТекущегоРеквизита);
		
		Если ЗначениеЗаполнено(Реквизит.Заголовок) Тогда
			ЗаголовкиРеквизитов[НовыйПуть] = Реквизит.Заголовок;
		КонецЕсли;
		
		Если ЭтоТаблица Тогда
			
			ЗаполнитьЗаголовкиРеквизитовТаблицыФормыРекурсивно(НовыйПуть, ЗаголовкиРеквизитов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДоверенности

// Заблокировать форму.
&НаКлиенте
Процедура ЗаблокироватьФорму()
	
	Элементы.ГруппаСозданиеПередоверия.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РазблокироватьФорму()
	
	Элементы.ГруппаСозданиеПередоверия.Доступность = Истина;
	
КонецПроцедуры

// Необходимо заполнить контекст записи.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Функция НеобходимоЗаполнитьКонтекстЗаписи(ПараметрыЗаписи)
	
	КонтекстЗаписи = СвойствоПараметровЗаписи(ПараметрыЗаписи, "КонтекстЗаписи", Неопределено); // см. НовыйКонтекстЗаписи
	Если КонтекстЗаписи = Неопределено Тогда
		ПодключитьОбработчикОжидания("ЗаполнитьПараметрыЗаписиПриЗаписи", 0.2, Истина);
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПараметрыЗаписиПриЗаписи()
	
	РазблокироватьФорму();
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

// Задан вопрос о ошибках при регистрации МЧД.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
// 
// Возвращаемое значение:
//  Булево
&НаКлиенте
Функция ЗаданВопросОбОшибкахПриРегистрацииМЧД(ПараметрыЗаписи)
	
	ЭтоЧерновик = СвойствоПараметровЗаписи(ПараметрыЗаписи, "ЭтоЧерновик"); // Булево
	Если ЭтоЧерновик Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонтекстЗаписи = ПараметрыЗаписи.КонтекстЗаписи; // см. НовыйКонтекстЗаписи
	
	Если КонтекстЗаписи.ОшибкиФормирования.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Имеются ошибки при заполнении МЧД. Сохранить доверенность как черновик?'");
	ОбработчикОтвета = Новый ОписаниеОповещения("ОбработатьОтветООшибкахПриРегистрации", ЭтотОбъект);
	
	ПоказатьВопрос(ОбработчикОтвета, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , ,
		НСтр("ru = 'Ошибки формирования МЧД'"));
	
	Возврат Истина;
	
КонецФункции

// Обработать ответ о ошибках при регистрации.
// 
// Параметры:
//  Ответ - КодВозвратаДиалога
//  Контекст - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьОтветООшибкахПриРегистрации(Ответ, Контекст) Экспорт
	
	РазблокироватьФорму();
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Истина;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

// Зарегистрировать МЧД при необходимости.
// 
// Параметры:
//  ПараметрыЗаписи - см. НовыеПараметрыЗаписи
&НаКлиенте
Процедура ЗарегистрироватьМЧДПриНеобходимости(ПараметрыЗаписи)
	
	ЭтоЧерновик = СвойствоПараметровЗаписи(ПараметрыЗаписи, "ЭтоЧерновик"); // Булево
	Если ЭтоЧерновик Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикПослеПодписания = Новый ОписаниеОповещения("ОбработатьРегистрациюМЧД", ЭтотОбъект);
	МашиночитаемыеДоверенностиКлиент.ПодписатьЗарегистрироватьМЧД(Истина, МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003(),
		ОбработчикПослеПодписания, Объект.Ссылка);
	
КонецПроцедуры

// Обработать регистрацию МЧД.
// 
// Параметры:
//  Результат - Структура:
//    * ИдентификаторТранзакции - Строка - при ошибке отправки на регистрацию выводится сообщение об ошибке
//                                        и возвращается пустая строка, при успехе идентификатор запоминается
//                                        в записи справочника
//    * СтатусТранзакции        - Строка - "PENDING" - транзакция майнится, "SUCCESS" - транзакция смайнилась,
//                                        "FAILURE" - ошибка при майнинге транзакции, при ошибке получения
//                                        статуса возвращается пустая строка и выводится сообщение об ошибке,
//                                        статус обновляется в записи справочника и на форме, если передана
//    * ДатаВремяТранзакции     - Дата
//    * ХешДоверенности         - Строка - хеш доверенности
//    * НомерДоверенности       - Строка - номер, извлеченный из доверенности
//    * ИННДоверителя           - Строка - ИНН доверителя, извлеченный из доверенности
//  Контекст - Структура, Неопределено -
&НаКлиенте
Процедура ОбработатьРегистрациюМЧД(Результат, Контекст) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не ЗначениеЗаполнено(Результат.НомерДоверенности) Тогда
		
		Прочитать();
		ОткатитьПодписаниеДоверенности();
		Возврат;
	КонецЕсли;
	
	ПолучитьСтатусВРеестреФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткатитьПодписаниеДоверенности()
	
	Объект.Подписана = Ложь;
	Объект.ДатаПодписания = Дата(1, 1, 1);
	Объект.Верна = Ложь;
	Объект.Подписи.Очистить();
	
	ПараметрыЗаписи = НовыеПараметрыЗаписи();
	ПараметрыЗаписи.ЭтоЧерновик = Истина;
	ЗаполнитьКонтекстИЗаписать(ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЧтениеДанныхДоверенности

// Прочитать черновик доверенности.
// 
// Параметры:
//  ТекущийОбъект - СправочникОбъект.МЧД003
&НаСервере
Процедура ПрочитатьЧерновикДоверенности(ТекущийОбъект)
	
	ДвоичныеДанные = ТекущийОбъект.ФайлМЧД.Получить(); // ДвоичныеДанные
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПолученияОбъектаМЧД = Справочники.МЧД003.ОбъектXDTOМЧДИзДвоичныхДанных(ДвоичныеДанные);
	СообщитьОшибкиЧтенияДанныхМЧД(РезультатПолученияОбъектаМЧД.ОшибкиЧтения);
	ДанныеМЧД = Справочники.МЧД003.ДанныеМЧДИзОбъектаXDTO(РезультатПолученияОбъектаМЧД.Доверенность);
	
	ЗаполнитьСпискиВыбораТипов();
	ЗаполнитьСписокВидовДокументовФизическогоЛица();
	
	ЗаполнитьДанныеФормыПоДаннымМЧД(ДанныеМЧД);
	
	НайденнаяДоверенность = Справочники.МЧД003.НайтиДоверенности(Объект.НомерРодительскойДоверенности);
	Если ЗначениеЗаполнено(НайденнаяДоверенность) Тогда
		ИсходнаяМЧД = НайденнаяДоверенность[0];
		ТекущаяИсходнаяМЧД = ИсходнаяМЧД;
		ТекущийНомерДоверенности = ТекущийОбъект.НомерДоверенности;
		ДвоичныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходнаяМЧД, "ФайлМЧД").Получить();
		ИсходныеДанныеМЧД = Справочники.МЧД003.ОбъектXDTOМЧДИзДвоичныхДанных(ДвоичныеДанные);
		ЗаполнитьМашиночитаемыеПолномочияОтРодителя(ИсходныеДанныеМЧД.Доверенность);
		СформироватьПредставлениеПоИсходнойМЧД(ИсходныеДанныеМЧД.Доверенность);
		ЗаполнитьСведенияПоПервоначальнойДоверенности(ИсходныеДанныеМЧД.Доверенность);
		ЗаполнитьСписокВыбораДоверителей(ИсходныеДанныеМЧД.Доверенность);
	КонецЕсли;
		
	ЗаполнитьСлужебныеРеквизитыПриЗагрузкеЧерновика();
	ПоказатьГруппыПоДанным();
	ОбновитьВидимостьКомандТаблицыПредставителей(ЭтотОбъект);
	ОбновитьВидимостьКомандТаблицыПолномочий(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьГруппыПоУмолчанию()
	
	ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ЮридическоеЛицо);
	ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия, Элементы.ГруппаЛицоБезДоверенностиПередоверия_ФизическоеЛицо);
	ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаОдинПредставительПередоверия);
	ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо);
	ПоказатьГруппу(Элементы.ГруппаТипыПолномочийПередоверия, Элементы.ГруппаТекстовыеПолномочияПередоверия);
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьГруппыПоДанным()
	
	ПоказатьГруппыПоУмолчанию();
	
	БулевыйКлассификатор = Справочники.МЧД003.КлассификаторДаНет();
	ТипыПредставителей = Справочники.МЧД003.ТипыПредставителей();
	ТипыПолномочий = Справочники.МЧД003.ТипыПолномочий();
	
	ТипДоверителя = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ТипПерПолн");
	Если ТипДоверителя = ТипыПредставителей.ЮридическоеЛицо Тогда
		
		ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ЮридическоеЛицо);
		
		ЕИОУК = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЕИОУК");
		ЕИОИП = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЕИОИП");
		
		Если ЕИОУК = БулевыйКлассификатор.Да Тогда
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия, Элементы.ГруппаЛицоБезДоверенностиПередоверия_ЮридическоеЛицо);
		ИначеЕсли ЕИОИП = БулевыйКлассификатор.Да Тогда
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия,
				Элементы.ГруппаЛицоБезДоверенностиПередоверия_ИндивидуальныйПредприниматель);
		Иначе
			ПоказатьГруппу(Элементы.ГруппаЛицоБезДоверенностиПередоверия, Элементы.ГруппаЛицоБезДоверенностиПередоверия_ФизическоеЛицо);
		КонецЕсли;
	ИначеЕсли ТипДоверителя = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
		ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ФилиалОрганизации);
	ИначеЕсли ТипДоверителя = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
		ПоказатьГруппу(Элементы.ГруппаДоверительПередоверия, Элементы.ГруппаДоверительПередоверия_ФилиалИностраннойОрганизации);
	КонецЕсли;
	
	ТаблицаПредставителей = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПолучПолн"); // ДанныеФормыКоллекция
	Если ТаблицаПредставителей.Количество() > 1 Тогда
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаНесколькоПредставителейПередоверия);
	Иначе
		
		ПоказатьГруппу(Элементы.ГруппаПредставленияПредставителейПередоверия, Элементы.ГруппаОдинПредставительПередоверия);
		
		ТипПредставителя = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПолучПолн[0].ТипПред");
		
		Если ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
			ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_Организация);
		ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_ИндивидуальныйПредприниматель);
		Иначе
			ПоказатьГруппу(Элементы.ГруппаПредставительПередоверия, Элементы.ГруппаПредставительПередоверия_ФизическоеЛицо);
		КонецЕсли;
		
	КонецЕсли;
	
	ТипПолномочий = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПолн[0].ТипПолн");
	Если ТипПолномочий = ТипыПолномочий.Текстовые Тогда
		ПоказатьГруппу(Элементы.ГруппаТипыПолномочийПередоверия, Элементы.ГруппаТекстовыеПолномочияПередоверия);
	Иначе
		ПоказатьГруппу(Элементы.ГруппаТипыПолномочийПередоверия, Элементы.ГруппаМашиночитаемыеПолномочияПередоверия);
	КонецЕсли;
	
КонецПроцедуры

// Сообщить ошибки чтения данных МЧД.
// 
// Параметры:
//  ОшибкиЧтения - см. Справочники.МЧД003.НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
&НаСервере
Процедура СообщитьОшибкиЧтенияДанныхМЧД(ОшибкиЧтения)
	
	Если ОшибкиЧтения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиСообщения = Новый Массив(); // Массив Из Строка
	ЧастиСообщения.Добавить(НСтр("ru = 'При чтении данных черновика МЧД возникли ошибки:'"));
	Для Каждого Элемент Из ОшибкиЧтения Цикл
		
		Путь = Элемент.Ключ;
		ТекстОшибки = Элемент.Значение;
		
		ЧастьСообщения = СтрШаблон("%1: %2", Путь, ТекстОшибки);
		ЧастиСообщения.Добавить(ЧастьСообщения);
		
	КонецЦикла;
	
	ОбщегоНазначения.СообщитьПользователю(СтрСоединить(ЧастиСообщения, Символы.ПС));
	
КонецПроцедуры

// Заполнить данные формы по данным доверенности.
// 
// Параметры:
//  ДанныеМЧД - Структура
// 
&НаСервере
Процедура ЗаполнитьДанныеФормыПоДаннымМЧД(ДанныеМЧД)
	
	Доверенность.Очистить();
	СоздатьРекурсивно(Доверенность, "Доверенность");
	ЗаполнитьСтрокуФормыПоДаннымРекурсивно(Доверенность[0], ДанныеМЧД, "Доверенность");
	
КонецПроцедуры

// Заполнить строку формы по данным рекурсивно.
// 
// Параметры:
//  СтрокаФормы - ДанныеФормыЭлементКоллекции
//  ЭлементДанных - Структура
//  Путь - Строка
//
&НаСервере
Процедура ЗаполнитьСтрокуФормыПоДаннымРекурсивно(СтрокаФормы, ЭлементДанных, Путь)
	
	Реквизиты = ПолучитьРеквизиты(Путь);
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		ИмяТекущегоРеквизита = Реквизит.Имя; // Строка
		Если Не ЭлементДанных.Свойство(ИмяТекущегоРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоТаблица = Реквизит.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"));
		НовыйПуть = СтрШаблон("%1.%2", Путь, ИмяТекущегоРеквизита);
		
		Если ЭтоТаблица Тогда
			
			ПростыеЗначения = ЭтоТаблицаПростыхЗначенийМЧД(НовыйПуть);
			
			ЗначениеЭлементаДанных = ЭлементДанных[ИмяТекущегоРеквизита]; // Массив Из Структура, Строка, Дата
			Если ТипЗнч(ЗначениеЭлементаДанных) <> Тип("Массив") Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаЗначенийФормы = СтрокаФормы[ИмяТекущегоРеквизита]; // ДанныеФормыКоллекция
			
			Индекс = 0;
			Для Каждого ЭлементЗначения Из ЗначениеЭлементаДанных Цикл
				
				Пока Индекс >= ТаблицаЗначенийФормы.Количество() Цикл
					СоздатьРекурсивно(ТаблицаЗначенийФормы, НовыйПуть);
				КонецЦикла;
				СтрокаЗначения = ТаблицаЗначенийФормы[Индекс]; // ДанныеФормыЭлементКоллекции
				
				Если ПростыеЗначения Тогда
					СтрокаЗначения[ИмяКолонкиПростогоЗначения()] = ЭлементЗначения;
				Иначе
					ЗаполнитьСтрокуФормыПоДаннымРекурсивно(СтрокаЗначения, ЭлементЗначения, НовыйПуть);
				КонецЕсли;
				
				Индекс = Индекс + 1;
				
			КонецЦикла;
			
		Иначе
			
			СтрокаФормы[ИмяТекущегоРеквизита] = ЭлементДанных[ИмяТекущегоРеквизита];
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить служебные реквизиты формы по данным МЧД.
&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПриЗагрузкеЧерновика()
	
	ЗаполнитьСлужебныеРеквизитыДоверителей();
	ЗаполнитьСлужебныеРеквизитыПредставителей();
	ЗаполнитьСлужебныеРеквизитыПолномочий();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыДоверителей()
	
	ТипыПередоверителей = Справочники.МЧД003.ТипыПредставителей();
	БулевыйКлассификатор = Справочники.МЧД003.КлассификаторДаНет();
	
	ТипДоверителя = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ТипПерПолн");
	Если ТипДоверителя = ТипыПередоверителей.ИндивидуальныйПредприниматель Тогда
		
		ПредставлениеДоверителя = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].ИППерПолн[0].НаимИП");
		
		Если Не ЗначениеЗаполнено(ПредставлениеДоверителя) Тогда
			
			Фамилия = ЗначениеВДеревеДоверенности(
				"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].ИППерПолн[0].СведФЛ[0].ФИО[0].Фамилия");
			Имя = ЗначениеВДеревеДоверенности(
				"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].ИППерПолн[0].СведФЛ[0].ФИО[0].Имя");
			Отчество = ЗначениеВДеревеДоверенности(
				"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].ИППерПолн[0].СведФЛ[0].ФИО[0].Отчество");
			
			ПредставлениеДоверителя = СтрШаблон(НСтр("ru = 'ИП ""%1 %2 %3""'"), Фамилия, Имя, Отчество);
			
		КонецЕсли;
		
		УстановитьЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПередПолн[0]._Доверитель",
			ПредставлениеДоверителя);
		
	Иначе
		
		ПредставлениеДоверителя = Строка(ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].СвРосОрг[0].НаимОрг"));
		УстановитьЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПередПолн[0]._Доверитель",
			ПредставлениеДоверителя);
		
		ЕИОУК = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЕИОУК");
		ЕИОИП = ЗначениеВДеревеДоверенности(
			"Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЕИОИП");
		
		ПутьЛица = "Доверенность[0].Документ[0].Передов[0].СвПередПолн[0].ПередПолн[0].РосОргПерПолн[0].ЛицоБезДов[0]";
		
		Если ЕИОУК = БулевыйКлассификатор.Да Тогда
			
			ПредставлениеЕИО = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СВЮЛЕИО[0].НаимОрг", ПутьЛица));
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._ЛицоБезДоверенности", ПутьЛица),
				ПредставлениеЕИО);
			
			Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0].СведФЛ[0].ФИО[0].Фамилия", ПутьЛица));
			Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0].СведФЛ[0].ФИО[0].Имя", ПутьЛица));
			Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0].СведФЛ[0].ФИО[0].Отчество", ПутьЛица));
			
			ПредставлениеФЛУК = СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество);
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1.СВЮЛ[0].СвФЛ[0]._ФизическоеЛицо", ПутьЛица),
				ПредставлениеФЛУК);
			
		ИначеЕсли ЕИОИП = БулевыйКлассификатор.Да Тогда
			
			ПредставлениеЕИО = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].НаимИП", ПутьЛица));
			
			Если Не ЗначениеЗаполнено(ПредставлениеЕИО) Тогда
				
				Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].СведФЛ[0].ФИО[0].Фамилия", ПутьЛица));
				Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].СведФЛ[0].ФИО[0].Имя", ПутьЛица));
				Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвИП[0].СведФЛ[0].ФИО[0].Отчество", ПутьЛица));
				
				ПредставлениеЕИО = СтрШаблон(НСтр("ru = 'ИП ""%1 %2 %3""'"), Фамилия, Имя, Отчество);
				
			КонецЕсли;
			
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._ЛицоБезДоверенности", ПутьЛица),
				ПредставлениеЕИО);
			
		Иначе
			
			Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвФЛ[0].СведФЛ[0].ФИО[0].Фамилия", ПутьЛица));
			Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвФЛ[0].СведФЛ[0].ФИО[0].Имя", ПутьЛица));
			Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.СвФЛ[0].СведФЛ[0].ФИО[0].Отчество", ПутьЛица));
			
			ПредставлениеЕИО = СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество);
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._ЛицоБезДоверенности", ПутьЛица),
				ПредставлениеЕИО);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПредставителей()
	
	ТипыПредставителей = Справочники.МЧД003.ТипыПредставителей();
	
	Представители = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПолучПолн"); // ДанныеФормыКоллекция
	КоличествоПредставителей = Представители.Количество();
	
	Для ИндексПредставителя = 0 По КоличествоПредставителей - 1 Цикл
		
		ПутьПредставителя = СтрШаблон("Доверенность[0].Документ[0].Передов[0].СвПолучПолн[%1]", ИндексПредставителя);
		
		УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._НомерСтроки", ПутьПредставителя),
			ИндексПредставителя + 1);
		
		ТипПредставителя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.ТипПред", ПутьПредставителя));
		
		Если ТипПредставителя = ТипыПредставителей.ЮридическоеЛицо Тогда
			
			ПредставлениеПредставителя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведОрг[0].НаимОрг", ПутьПредставителя));
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Представитель", ПутьПредставителя),
				ПредставлениеПредставителя);
			
		ИначеЕсли ТипПредставителя = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			
			ПредставлениеПредставителя = ЗначениеВДеревеДоверенности(
				СтрШаблон("%1.Пред[0].СведИП[0].НаимИП", ПутьПредставителя));
			
			Если Не ЗначениеЗаполнено(ПредставлениеПредставителя) Тогда
				
				Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ФИО[0].Фамилия", ПутьПредставителя));
				Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ФИО[0].Имя", ПутьПредставителя));
				Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ФИО[0].Отчество", ПутьПредставителя));
				
				ПредставлениеПредставителя = СтрШаблон(НСтр("ru = 'ИП ""%1 %2 %3""'"), Фамилия, Имя, Отчество);
				
			КонецЕсли;
			
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Представитель", ПутьПредставителя),
				ПредставлениеПредставителя);
			
		ИначеЕсли ТипПредставителя = ТипыПредставителей.ФизическоеЛицо Тогда
			
			Фамилия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ФИО[0].Фамилия", ПутьПредставителя));
			Имя = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ФИО[0].Имя", ПутьПредставителя));
			Отчество = ЗначениеВДеревеДоверенности(СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ФИО[0].Отчество", ПутьПредставителя));
			
			ПредставлениеПредставителя = СтрШаблон("%1 %2 %3", Фамилия, Имя, Отчество);
			УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Представитель", ПутьПредставителя),
				ПредставлениеПредставителя);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПолномочий()
	
	Полномочия = ЗначениеВДеревеДоверенности("Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн"); // ДанныеФормыКоллекция
	КоличествоПолномочий = Полномочия.Количество();
	
	Для ИндексПолномочия = 0 По КоличествоПолномочий - 1 Цикл
		
		ПутьПолномочия = СтрШаблон("Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн[%1]", ИндексПолномочия);
		
		УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._НомерСтроки", ПутьПолномочия),
			ИндексПолномочия + 1);
		
		НаименованиеПолномочия = ЗначениеВДеревеДоверенности(СтрШаблон("%1.НаимПолн", ПутьПолномочия)); // Строка
		КодКлассификатора = ЗначениеВДеревеДоверенности(СтрШаблон("%1.КодПолн", ПутьПолномочия)); // Строка
		Представление = МашиночитаемыеДоверенностиКлиентСервер.СформироватьПредставлениеПолномочия(
				КодКлассификатора, НаименованиеПолномочия);
		
		УстановитьЗначениеВДеревеДоверенности(СтрШаблон("%1._Полномочие", ПутьПолномочия),
			Представление);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПутями

// Возвращает значение в дереве доверенности на форме.
// 
// Параметры:
//  Путь - Строка - путь в формате Доверенность[0].<Свойство>[N]...
// 
// Возвращаемое значение:
//  Произвольный
&НаСервере
Функция ЗначениеВДеревеДоверенности(Путь)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	Если ЧастиПути.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ПерваяЧасть = ЧастиПути[0];
	ДанныеЧасти = ДанныеЧастиПути(ПерваяЧасть);
	Если ДанныеЧасти.Имя <> "Доверенность" Или ДанныеЧасти.Индекс <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ТекущаяСтрока = Доверенность[0];
	Для Индекс = 1 По ЧастиПути.ВГраница() - 1 Цикл
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ЧастьПути = ЧастиПути[Индекс];
		ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СвойствоПромежуточнойСтроки = ТекущаяСтрока[ДанныеЧасти.Имя]; // ДанныеФормыКоллекция
		Если ТипЗнч(СвойствоПромежуточнойСтроки) <> Тип("ДанныеФормыКоллекция") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если СвойствоПромежуточнойСтроки.Количество() < ДанныеЧасти.Индекс + 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущаяСтрока = СвойствоПромежуточнойСтроки[ДанныеЧасти.Индекс];
		
	КонецЦикла;
	
	Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастьПути = ЧастиПути[ЧастиПути.ВГраница()];
	ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТекущаяСтрока[ДанныеЧасти.Имя];
	
КонецФункции

// Устанавливает значение в дереве доверенности в форме по указанному пути.
// 
// Параметры:
//  Путь - Строка - путь в формате Доверенность[0].<Свойство>[N]...
//  Значение - Произвольный
&НаСервере
Процедура УстановитьЗначениеВДеревеДоверенности(Путь, Значение)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	Если ЧастиПути.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ПерваяЧасть = ЧастиПути[0];
	ДанныеЧасти = ДанныеЧастиПути(ПерваяЧасть);
	Если ДанныеЧасти.Имя <> "Доверенность" Или ДанныеЧасти.Индекс <> 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода, в качестве пути должен быть передан путь в формате Доверенность[0].<Свойство>[N]...'");
	КонецЕсли;
	
	ТекущаяСтрока = Доверенность[0];
	Для Индекс = 1 По ЧастиПути.ВГраница() - 1 Цикл
		
		Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
			Возврат;
		КонецЕсли;
		
		ЧастьПути = ЧастиПути[Индекс];
		ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
			Возврат;
		КонецЕсли;
		
		СвойствоПромежуточнойСтроки = ТекущаяСтрока[ДанныеЧасти.Имя]; // ДанныеФормыКоллекция
		Если ТипЗнч(СвойствоПромежуточнойСтроки) <> Тип("ДанныеФормыКоллекция") Тогда
			Возврат;
		КонецЕсли;
		
		Если СвойствоПромежуточнойСтроки.Количество() < ДанныеЧасти.Индекс + 1 Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока = СвойствоПромежуточнойСтроки[ДанныеЧасти.Индекс];
		
	КонецЦикла;
	
	Если ТипЗнч(ТекущаяСтрока) <> Тип("ДанныеФормыЭлементКоллекции") Тогда
		Возврат;
	КонецЕсли;
	
	ЧастьПути = ЧастиПути[ЧастиПути.ВГраница()];
	ДанныеЧасти = ДанныеЧастиПути(ЧастьПути);
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущаяСтрока, ДанныеЧасти.Имя) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока[ДанныеЧасти.Имя] = Значение;
	
КонецПроцедуры

// Конструктор данных части пути дерева МЧД.
// 
// Возвращаемое значение:
//  Структура:
// * Имя - Строка
// * Индекс - Число
&НаКлиентеНаСервереБезКонтекста
Функция НовыеДанныеЧастиПути()
	
	ДанныеПути = Новый Структура;
	ДанныеПути.Вставить("Имя", "");
	ДанныеПути.Вставить("Индекс", 0);
	
	Возврат ДанныеПути;
	
КонецФункции

// Возвращает данные части пути по строковому представлению.
// 
// Параметры:
//  ЧастьПути - Строка
// 
// Возвращаемое значение:
//  см. НовыеДанныеЧастиПути
&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЧастиПути(ЧастьПути)
	
	Данные = НовыеДанныеЧастиПути();
	Данные.Имя = ЧастьПути;
	
	Если Не СтрЗаканчиваетсяНа(ЧастьПути, "]") Тогда
		Возврат Данные;
	КонецЕсли;
	
	ДлинаЧастиПути = СтрДлина(ЧастьПути);
	
	КоличествоЦифрИндекса = 0;
	
	ЭтоЧастьПутиБезИндекса = Истина;
	
	ПозицияВСтроке = ДлинаЧастиПути - 1;
	Пока ПозицияВСтроке > 1 Цикл
		
		Символ = Сред(ЧастьПути, ПозицияВСтроке, 1);
		ЭтоЦифра = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Символ);
		
		Если ЭтоЦифра Тогда
			
			КоличествоЦифрИндекса = КоличествоЦифрИндекса + 1;
			ПозицияВСтроке = ПозицияВСтроке - 1;
			
		Иначе
			
			Если Сред(ЧастьПути, ПозицияВСтроке, 1) <> "[" Тогда
				ЭтоЧастьПутиБезИндекса = Ложь;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЭтоЧастьПутиБезИндекса Тогда
		Возврат Данные;
	КонецЕсли;
	
	СтрокаБезИндекса = Лев(ЧастьПути, ДлинаЧастиПути - КоличествоЦифрИндекса - 2);
	Индекс = Число(Сред(ЧастьПути, ДлинаЧастиПути - КоличествоЦифрИндекса, КоличествоЦифрИндекса));
	
	Если СтрДлина(СтрокаБезИндекса) > 0 Тогда
		Данные.Имя = СтрокаБезИндекса;
		Данные.Индекс = Индекс;
		Возврат Данные;
	Иначе
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

// Возвращает путь, очищенный от интексов.
// 
// Параметры:
//  Путь - Строка - Путь в формате Доверенность[0].Документ[0].Довер[0]...
// 
// Возвращаемое значение:
//  Строка - Путь в формате Доверенность.Документ.Довер...
&НаСервереБезКонтекста
Функция ПутьБезИндексов(Путь)
	
	ЧастиПутиБезУказанияИндекса = Новый Массив(); // Массив Из Строка
	
	ЧастиПути = СтрРазделить(Путь, ".");
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		ДанныеЧастиПути = ДанныеЧастиПути(ЧастьПути);
		ЧастиПутиБезУказанияИндекса.Добавить(ДанныеЧастиПути.Имя);
	КонецЦикла;
	
	Возврат СтрСоединить(ЧастиПутиБезУказанияИндекса, ".");
	
КонецФункции

#КонецОбласти

#КонецОбласти