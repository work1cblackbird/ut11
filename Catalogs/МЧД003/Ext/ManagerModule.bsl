// @strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

// Регистрирует данные к обновлению в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолныеИменаОбъектов = Новый Массив;

	МетаданныеОбъекта = Метаданные.Справочники.МЧД003;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	ПолныеИменаОбъектов.Добавить(ПолноеИмяОбъекта);
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ПолныеИменаОбъектов, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	МЧД003.Ссылка
	|ИЗ
	|	Справочник.МЧД003 КАК МЧД003
	|ГДЕ
	|	(МЧД003.НомерРодительскойДоверенности = """"
	|	ИЛИ МЧД003.ИННДоверителяРодительскойДоверенности = """")
	|	И МЧД003.Подписана
	|	И МЧД003.Ссылка > &МЧД003
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	МЧД003 = ПустаяСсылка();
	ОтработаныВсеДанныеМЧД003 = Ложь;
	Пока Не ОтработаныВсеДанныеМЧД003 Цикл
		
		Запрос.УстановитьПараметр("МЧД003", МЧД003);
		ДанныеМЧД003 = Запрос.Выполнить().Выгрузить();
		
		КоличествоСтрокМЧД003 = ДанныеМЧД003.Количество();
		
		Если КоличествоСтрокМЧД003 < 1000 Тогда
			ОтработаныВсеДанныеМЧД003 = Истина;
		КонецЕсли;
		
		Если КоличествоСтрокМЧД003 > 0 Тогда
			МЧД003 = ДанныеМЧД003[КоличествоСтрокМЧД003 - 1].Ссылка;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, ДанныеМЧД003.ВыгрузитьКолонку("Ссылка"));
		
	КонецЦикла;
	
КонецПроцедуры

// Обрабатывает данные, зарегистрированные в плане обмена ОбновлениеИнформационнойБазы
//  см. Стандарты и методики разработки прикладных решений: Параллельный режим отложенного обновления.
//
// Параметры:
//  Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъектаМЧД003 = Метаданные.Справочники.МЧД003;
	ПолноеИмяОбъектаМЧД003 = МетаданныеОбъектаМЧД003.ПолноеИмя();
	
	ИменаМетаданных = Новый Массив;
	ИменаМетаданных.Добавить(ПолноеИмяОбъектаМЧД003);
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, 
		"РегистрСведений.СертификатыУчетныхЗаписейЭДО") Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтметкиВыполнения = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	
	ВыбранныеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ВыбранныеДанные) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ИменаМетаданных);
		Возврат;
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	
	НаборСсылок = ВыбранныеДанные.ВыгрузитьКолонку("Ссылка");
	
	Для каждого СсылкаНаОбъект Из НаборСсылок Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ОбщегоНазначенияБЭД.УстановитьУправляемуюБлокировкуПоСсылке(СсылкаНаОбъект);
			Записать = Ложь;
			
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				ОбработатьДанные_ЗаполнитьСведенияПоПередоверию(Объект, Записать);
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СсылкаНаОбъект, ПараметрыОтметкиВыполнения);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ШаблонСообщения = НСтр("ru = 'Не удалось обработать машиночитаемую доверенность ЭДО: %1 по причине:'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект) + Символы.ПС
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,, СсылкаНаОбъект, ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые машиночитаемые доверенности ЭДО (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция машиночитаемых доверенностей ЭДО: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбъектовОбработано;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ИменаМетаданных);
	
КонецПроцедуры
	
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	МашиночитаемыеДоверенности.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
		СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	МашиночитаемыеДоверенности.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ДанныеXDTO - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
// 
// Возвращаемое значение:
//  Строка
Функция СНИЛСЛицДействующихБезДоверенности(ДанныеXDTO) Экспорт
	
	Если ДанныеXDTO.Документ.Довер <> Неопределено Тогда
		
		СведенияОДоверителях = ДанныеXDTO.Документ.Довер.СвДоверит; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
		ТипыДоверителей = ТипыДоверителей();
		
		Для Каждого СведенияОДоверителе Из СведенияОДоверителях Цикл
			Если СведенияОДоверителе.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
				ЛицаБезДоверенности = СведенияОДоверителе.Доверит.РосОргДовер.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
				Для Каждого ЛицоБезДоверенности Из ЛицаБезДоверенности Цикл
					Если ЛицоБезДоверенности.СвФЛ <> Неопределено Тогда
						Возврат ЛицоБезДоверенности.СвФЛ.СНИЛС;
					КонецЕсли;
					Если ЛицоБезДоверенности.СВЮЛ <> Неопределено Тогда
						СписокФизЛиц = ЛицоБезДоверенности.СВЮЛ.СвФЛ; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвФЛТип
						Для Каждого ФизЛицо Из СписокФизЛиц Цикл
							Возврат ФизЛицо.СНИЛС;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СведенияОДоверителе.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				Возврат СведенияОДоверителе.Доверит.ИПДовер.СНИЛС;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		СведенияОДоверителях = ДанныеXDTO.Документ.Передов.СвПередПолн; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
		ТипыДоверителей = ТипыПредставителей();
		
		Для Каждого СведенияОДоверителе Из СведенияОДоверителях Цикл
			Если СведенияОДоверителе.ТипПерПолн = ТипыДоверителей.ЮридическоеЛицо Тогда
				ЛицаБезДоверенности = СведенияОДоверителе.ПередПолн.РосОргПерПолн.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
				Для Каждого ЛицоБезДоверенности Из ЛицаБезДоверенности Цикл
					Если ЛицоБезДоверенности.СвФЛ <> Неопределено Тогда
						Возврат ЛицоБезДоверенности.СвФЛ.СНИЛС;
					КонецЕсли;
					Если ЛицоБезДоверенности.СВЮЛ <> Неопределено Тогда
						СписокФизЛиц = ЛицоБезДоверенности.СВЮЛ.СвФЛ; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвФЛТип
						Для Каждого ФизЛицо Из СписокФизЛиц Цикл
							Возврат ФизЛицо.СНИЛС;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СведенияОДоверителе.ТипПерПолн = ТипыДоверителей.ФилиалЮридическогоЛица Тогда
				Возврат СведенияОДоверителе.ПередПолн.ФилПерПолн.СвРукФил.СНИЛС;
			ИначеЕсли СведенияОДоверителе.ТипПерПолн = ТипыДоверителей.ФилиалИностраннойОрганизации Тогда
				Возврат СведенияОДоверителе.ПередПолн.ИнПерПолн.СвРукОП.СНИЛС;
			ИначеЕсли СведенияОДоверителе.ТипПерПолн = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				Возврат СведенияОДоверителе.ПередПолн.ИППерПолн.СНИЛС;
			ИначеЕсли СведенияОДоверителе.ТипПерПолн = ТипыДоверителей.ФизическоеЛицо Тогда
				Возврат СведенияОДоверителе.ПередПолн.ФЛПерПолн.СНИЛС;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Получает ИНН и КПП доверителей
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
//  
// Возвращаемое значение:
//  Массив Из Структура:
//   * ИНН - Строка
//   * КПП - Строка
//
Функция ПолучитьИННКППДоверителей(Доверенность) Экспорт
	
	ДанныеДоверителей = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МЧД003Доверители.ИНН,
		|	МЧД003Доверители.КПП
		|ИЗ
		|	Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|ГДЕ
		|	МЧД003Доверители.Ссылка = &Доверенность
		|	И МЧД003Доверители.ТипДоверителя <> """"
		|	И МЧД003Доверители.ИНН <> """"
		|СГРУППИРОВАТЬ ПО
		|	МЧД003Доверители.ИНН,
		|	МЧД003Доверители.КПП";
	Запрос.УстановитьПараметр("Доверенность", Доверенность);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеИННКПП = Новый Структура("ИНН, КПП");
		ЗаполнитьЗначенияСвойств(ДанныеИННКПП, Выборка);
		ДанныеДоверителей.Добавить(ДанныеИННКПП);
	КонецЦикла;
	
	Возврат ДанныеДоверителей;
	
КонецФункции

// Возвращает имя файла машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка - Имя файла машиночитаемой доверенности.
Функция ПолучитьИмяФайлаМЧД(Ссылка) Экспорт
		
	Реквизиты = "ДатаОтправки, НомерДоверенности";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФорматыЭДО_ФНС.ПространствоИмен_МЧД_003());
	ДатаФайла = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОтправки), ЗначенияРеквизитов.ДатаОтправки,
		ТекущаяДатаСеанса());
	ЭлементыИмениФайла.Добавить(Формат(ДатаФайла, "ДФ=ггггММдд;"));
	ЭлементыИмениФайла.Добавить(ЗначенияРеквизитов.НомерДоверенности);

	Возврат СтрСоединить(ЭлементыИмениФайла, "_");
	
КонецФункции

// Возвращает описание запроса для подписания.
// 
// Параметры:
//  ИмяВременнойТаблицы - Строка
//  Доверенности - Массив из СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  см. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросДляПодписания(ИмяВременнойТаблицы, Доверенности) Экспорт

	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();

	МеткаВременнойТаблицы = "ПОМЕСТИТЬ #ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "#ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;

	ТаблицаДанныхМЧД = ТаблицаДанныхМЧДДляПодписания(Доверенности);
	Если ТаблицаДанныхМЧД.Количество() = 0 Или Не ЗначениеЗаполнено(ТаблицаДанныхМЧД[0].Организация) Тогда
		ТаблицаДанныхМЧД.Очистить();
		ВыбранныеМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Доверенности, "Доверители, СтатусВРеестреФНС");
		Для Каждого ТекущаяМЧД Из ВыбранныеМЧД Цикл

			НоваяСтрока = ТаблицаДанныхМЧД.Добавить();
			НоваяСтрока.Ссылка = ТекущаяМЧД.Ключ;
			НоваяСтрока.СтатусВРеестреФНС = ТекущаяМЧД.Значение.СтатусВРеестреФНС;
			ТекущийДоверитель = ТекущаяМЧД.Значение.Доверители.Выбрать();

			Пока ТекущийДоверитель.Следующий() Цикл
				ДанныеДоверителя = Новый Структура;
				ДанныеДоверителя.Вставить("ИНН", ТекущийДоверитель.ИНН);
				ДанныеДоверителя.Вставить("КПП", ТекущийДоверитель.КПП);
				ДанныеДоверителя.Вставить("ОГРН", ТекущийДоверитель.ОГРН);
				ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Организации", НоваяСтрока.Организация, ,
					ДанныеДоверителя);
				НоваяСтрока.СНИЛСДоверителя = ТекущийДоверитель.СНИЛС;
				
				НоваяСтрока.ОрганизацияИНН = ТекущийДоверитель.ИНН;
				НоваяСтрока.ОрганизацияКПП = ТекущийДоверитель.КПП;
				НоваяСтрока.ОрганизацияОГРН = ТекущийДоверитель.ОГРН;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ТаблицаДанныхМЧД", ТаблицаДанныхМЧД);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанныхМЧД.Ссылка КАК Ссылка,
	|	ТаблицаДанныхМЧД.Организация КАК Организация,
	|	ТаблицаДанныхМЧД.СНИЛСДоверителя КАК СНИЛСДоверителя,
	|	ТаблицаДанныхМЧД.ОрганизацияИНН КАК ОрганизацияИНН,
	|	ТаблицаДанныхМЧД.ОрганизацияКПП КАК ОрганизацияКПП,
	|	ТаблицаДанныхМЧД.ОрганизацияОГРН КАК ОрганизацияОГРН,
	|	ТаблицаДанныхМЧД.СтатусВРеестреФНС КАК СтатусВРеестреФНС
	|ПОМЕСТИТЬ #ИмяВременнойТаблицы
	|ИЗ
	|	&ТаблицаДанныхМЧД КАК ТаблицаДанныхМЧД";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы, ЗначениеВременнойТаблицы);

	ОписаниеЗапроса.Текст = ТекстЗапроса;

	Возврат ОписаниеЗапроса;

КонецФункции

#Область СохранениеДоверенности

// Новые данные для загрузки МЧД.
// 
// Возвращаемое значение:
//  Структура - Новые данные для загрузки МЧД:
//  * НомерДоверенности - Строка
//  * НомерРодительскойДоверенности - Строка
//  * ИННДоверителяРодительскойДоверенности - Строка
//  * ДатаВыдачи - Дата
//  * ДатаОтзыва - Дата
//  * СрокДействия - Дата
//  * ПолномочияОграничены - Булево
//  * СовместныеПолномочия - Булево
//  * Доверители - Массив из см. НовыеДанныеУчастника
//  * Представители - Массив из см. НовыеДанныеУчастника
//  * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
//  * Полномочия - Массив из см. НовыеДанныеМашиночитаемогоПолномочия
//  * ТекстовоеПолномочие - Строка
//  * ВариантЗаполненияПолномочий - ПеречислениеСсылка.ВариантыЗаполненияПолномочийМЧД
//  * ПередовериеРазрешено - Булево
Функция НовыеДанныеМЧД() Экспорт
	
	ДанныеДляЗагрузки = Новый Структура();
	ДанныеДляЗагрузки.Вставить("НомерДоверенности", "");
	ДанныеДляЗагрузки.Вставить("НомерРодительскойДоверенности", "");
	ДанныеДляЗагрузки.Вставить("ИННДоверителяРодительскойДоверенности", "");
	ДанныеДляЗагрузки.Вставить("ДатаВыдачи", '00010101');
	ДанныеДляЗагрузки.Вставить("ДатаОтзыва", '00010101');
	ДанныеДляЗагрузки.Вставить("СрокДействия", '00010101');
	ДанныеДляЗагрузки.Вставить("ПолномочияОграничены", Истина);
	ДанныеДляЗагрузки.Вставить("СовместныеПолномочия", Ложь);
	ДанныеДляЗагрузки.Вставить("Доверители", Новый Массив());
	ДанныеДляЗагрузки.Вставить("Представители", Новый Массив());
	ДанныеДляЗагрузки.Вставить("СтатусВРеестреФНС", Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка());
	ДанныеДляЗагрузки.Вставить("Полномочия", Новый Массив());
	ДанныеДляЗагрузки.Вставить("ТекстовоеПолномочие", "");
	ДанныеДляЗагрузки.Вставить("ВариантЗаполненияПолномочий", Перечисления.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка());
	ДанныеДляЗагрузки.Вставить("ПередовериеРазрешено", Ложь);
	
	Возврат ДанныеДляЗагрузки;
	
КонецФункции

// Получить данные для заполнения МЧД.
// 
// Параметры:
//  ОбъектМЧД - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
// 
// Возвращаемое значение:
//  см. НовыеДанныеМЧД
Функция ДанныеДляЗаполненияМЧД(ОбъектМЧД) Экспорт

	ДанныеДляЗаполнения = НовыеДанныеМЧД();
	
	СвДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвДов", Неопределено);
	Если СвДовXDTO <> Неопределено Тогда
		Сведения = СвДовXDTO;
	КонецЕсли;
	
	СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПереДовер", Неопределено);
	Если СвПереДоверXDTO <> Неопределено Тогда
		Сведения = СвПереДоверXDTO;
	КонецЕсли;
	
	СвПервДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПервДовер", Неопределено);
	Если СвПервДоверXDTO <> Неопределено Тогда

		ДанныеДляЗаполнения.НомерРодительскойДоверенности = СвПервДоверXDTO.НомДоверПерв;
		
		СвДоверПервXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПервДовер.СвДоверПерв", , , Истина); 
		ДоверительXDTO = СвДоверПервXDTO[0];
		Участник = Неопределено;
		ТипУчастника = ДоверительXDTO.ТипДоверит;
		ТипыДоверителей = ТипыДоверителей();
		
		Если ТипУчастника = ТипыДоверителей.ЮридическоеЛицо Тогда
			СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.РосОргДовер");
			Участник = ПолучитьУчастника_ЮридическоеЛицо(СвРосОргXDTO);
		ИначеЕсли ТипУчастника = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда	
			ИППерПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИПДовер");
			Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(ИППерПолнXDTO);
		ИначеЕсли ТипУчастника = ТипыДоверителей.ФизическоеЛицо Тогда	
			ФЛПерПолнЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ФЛДовер");
			Участник = ПолучитьУчастника_ФизическоеЛицо(ФЛПерПолнЛXDTO);
		ИначеЕсли ТипУчастника = ТипыДоверителей.ИностраннаяОрганизация Тогда	
			СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИнОргДовер");
			Участник = ПолучитьУчастника_ИностраннаяОрганизация(СвИнОргXDTO);
		КонецЕсли;	
		
		Если Участник <> Неопределено Тогда
			ДанныеДляЗаполнения.ИННДоверителяРодительскойДоверенности = Участник.ИНН;
		КонецЕсли;

	КонецЕсли;
	
	ДанныеДляЗаполнения.НомерДоверенности = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "НомДовер", "");
	ДанныеДляЗаполнения.ДатаВыдачи = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "ДатаВыдДовер", '00010101', "Дата");
	ДанныеДляЗаполнения.СрокДействия = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "СрокДейст", '00010101', "Дата");
	
	ПрПередов = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Сведения, "ПрПередов", Ложь);
	ДанныеДляЗаполнения.ПередовериеРазрешено = ПередовериеРазрешено(ПрПередов);
	
	ЗаполнитьДоверителей(ДанныеДляЗаполнения.Доверители, ОбъектМЧД);
	ЗаполнитьПредставителей(ДанныеДляЗаполнения.Представители, ОбъектМЧД);
	ЗаполнитьДанныеПолномочий(ДанныеДляЗаполнения, ОбъектМЧД);
	
	Возврат ДанныеДляЗаполнения;
	
КонецФункции

// Заполняет объект МЧД.
// 
// Параметры:
//  МЧД - СправочникОбъект.МЧД003
//  ДанныеДляЗаполнения - см. НовыеДанныеМЧД
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
Процедура ПерезаполнитьОбъектМЧД(МЧД, ДанныеДляЗаполнения, ДанныеДляЗагрузки) Экспорт
	
	МЧД.Подписи.Очистить();
	МЧД.Доверители.Очистить();
	МЧД.Представители.Очистить();
	МЧД.Полномочия.Очистить();
	МЧД.ДатаПрекращения = '00010101';
	МЧД.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ПустаяСсылка();
	МЧД.ПроверкаВыполнена = Ложь;
	МЧД.ПротоколПроверки = Неопределено;
	МЧД.Верна = Ложь;
	МЧД.ТекстовоеПолномочие = "";
	МЧД.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.ПустаяСсылка();
	
	Если ДанныеДляЗагрузки.Свойство("ДанныеМЧД") Тогда
		МЧД.ФайлМЧД = Новый ХранилищеЗначения(ДанныеДляЗагрузки.ДанныеМЧД, Новый СжатиеДанных(9));
	Иначе
		МЧД.ФайлМЧД = Новый ХранилищеЗначения(ДанныеДляЗагрузки.ДанныеДоверенности, Новый СжатиеДанных(9));
	КонецЕсли;
	ПереченьСвойств = "НомерДоверенности, ДатаВыдачи, СрокДействия, ПолномочияОграничены, ТекстовоеПолномочие,
		|ВариантЗаполненияПолномочий, СовместныеПолномочия, СтатусВРеестреФНС, ПередовериеРазрешено,
		|НомерРодительскойДоверенности, ИННДоверителяРодительскойДоверенности";
	ЗаполнитьЗначенияСвойств(МЧД, ДанныеДляЗаполнения, ПереченьСвойств);
	
	Если МЧД.Подписана Тогда
		МашиночитаемыеДоверенности.ЗаполнитьРеквизитыОтзыва(МЧД, ДанныеДляЗагрузки);
	КонецЕсли;
	
	Для Каждого ДанныеУчастника Из ДанныеДляЗаполнения.Доверители Цикл
		
		Доверитель = МЧД.Доверители.Добавить();
		ЗаполнитьЗначенияСвойств(Доверитель, ДанныеУчастника, "ИНН, КПП, ОГРН, СНИЛС");
		Доверитель.ТипДоверителя = ДанныеУчастника.ТипУчастника;
		
	КонецЦикла;
	
	Для Каждого ДанныеУчастника Из ДанныеДляЗаполнения.Представители Цикл
		
		Представитель = МЧД.Представители.Добавить();
		ЗаполнитьЗначенияСвойств(Представитель, ДанныеУчастника, "ИНН, КПП, ОГРН, СНИЛС");
		Представитель.ТипПредставителя = ДанныеУчастника.ТипУчастника;
		
	КонецЦикла;
	
	Для Каждого Подпись Из ДанныеДляЗагрузки.ДанныеПодписей Цикл
		СтрокаТЧ = МЧД.Подписи.Добавить();
		СтрокаТЧ.Подпись = Новый ХранилищеЗначения(Подпись, Новый СжатиеДанных(9));
	КонецЦикла;
	
	Для Каждого ДанныеПолномочия Из ДанныеДляЗаполнения.Полномочия Цикл
		
		Полномочие = МЧД.Полномочия.Добавить();
		ЗаполнитьЗначенияСвойств(Полномочие, ДанныеПолномочия, "Мнемоника, Код, Наименование");
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ЭлементСправочника - СправочникСсылка.МЧД003
//  ДанныеСтатуса - См. МашиночитаемыеДоверенности.НовыйСтатусВРеестреФНС
// 
// Возвращаемое значение:
//  Булево - Истина в случае успешной записи.
Функция УстановитьСтатус(ЭлементСправочника, ДанныеСтатуса) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеСтатуса.СтатусВРеестреФНС) 
		И Не ЗначениеЗаполнено(ДанныеСтатуса.ДатаПолученияСтатуса) Тогда
			
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектСправочника = ЭлементСправочника.ПолучитьОбъект();
	Если ЗначениеЗаполнено(ДанныеСтатуса.ДатаПолученияСтатуса) Тогда
		ОбъектСправочника.ДатаОбновленияСтатуса = ДанныеСтатуса.ДатаПолученияСтатуса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтатуса.СтатусВРеестреФНС) Тогда
		
		Если Не ЗначениеЗаполнено(ОбъектСправочника.СтатусВРеестреФНС)
			И ЗначениеЗаполнено(ОбъектСправочника.ДатаПрекращения) Тогда
			ОбъектСправочника.ДатаПрекращения = Дата(1, 1, 1);
		КонецЕсли;
		
		ОбъектСправочника.СтатусВРеестреФНС = ДанныеСтатуса.СтатусВРеестреФНС;
		
		Если ЗначениеЗаполнено(ДанныеСтатуса.ДатаОтзыва) Тогда
			ОбъектСправочника.ДатаПрекращения = ДанныеСтатуса.ДатаОтзыва;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаписатьОбъектВБазу(ОбъектСправочника, ОбъектСправочника.НомерДоверенности);
	
КонецФункции

#КонецОбласти

#Область РаботаСФорматомМЧД003

#Область ЗначенияПеречислений

// Типы полномочий.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//    * Текстовые - Строка
//    * Машиночитаемые - Строка
Функция ТипыПолномочий() Экспорт
	
	Возврат Новый ФиксированнаяСтруктура("Текстовые, Машиночитаемые", "0", "1");
	
КонецФункции

// Типы представителей.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//    * ЮридическоеЛицо - Строка
//    * ИндивидуальныйПредприниматель - Строка
//    * ФизическоеЛицо - Строка
//    * ФилиалЮридическогоЛица - Строка
//    * ФилиалИностраннойОрганизации - Строка
Функция ТипыПредставителей() Экспорт
	
	ТипыПредставителей = Новый Структура;
	ТипыПредставителей.Вставить("ЮридическоеЛицо", "1");
	ТипыПредставителей.Вставить("ИндивидуальныйПредприниматель", "2");
	ТипыПредставителей.Вставить("ФизическоеЛицо", "3");
	ТипыПредставителей.Вставить("ФилиалЮридическогоЛица", "4");
	ТипыПредставителей.Вставить("ФилиалИностраннойОрганизации", "5");
	
	Возврат Новый ФиксированнаяСтруктура(ТипыПредставителей);
	
КонецФункции

// Классификатор Да/Нет.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//    * Нет - Строка
//    * Да - Строка
Функция КлассификаторДаНет() Экспорт
	
	Возврат Новый ФиксированнаяСтруктура("Нет, Да", "0", "1");
	
КонецФункции

// Типы доверителей.
// 
// Возвращаемое значение:
//  ФиксированнаяСтруктура:
//    * ЮридическоеЛицо - Строка
//    * ИностраннаяОрганизация - Строка
//    * ИндивидуальныйПредприниматель - Строка
//    * ФизическоеЛицо - Строка
Функция ТипыДоверителей() Экспорт
	
	ТипыДоверителей = Новый Структура;
	ТипыДоверителей.Вставить("ЮридическоеЛицо", "1");
	ТипыДоверителей.Вставить("ИностраннаяОрганизация", "2");
	ТипыДоверителей.Вставить("ИндивидуальныйПредприниматель", "3");
	ТипыДоверителей.Вставить("ФизическоеЛицо", "4");
	
	Возврат Новый ФиксированнаяСтруктура(ТипыДоверителей);
	
КонецФункции

#КонецОбласти

#Область ФормированиеОбъектаXDTO

// Новый набор ошибок заполнения объекта МЧД.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Адрес поля ошибки
//    * Значение - Массив Из Строка - Текст ошибки
//
Функция НовыйНаборОшибокЗаполненияОбъектаМЧД() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает XDTO-объект МЧД
// 
// Параметры:
//  ДанныеМЧД - Структура -
// 
// Возвращаемое значение:
//  Структура:
//    * Объект - ОбъектXDTO, ЗначениеXDTO -
//    * ОшибкиФормирования - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
Функция СформироватьОбъектXDTOДоверенности(ДанныеМЧД) Экспорт
	
	ПространствоИмен = ПространствоИменEMCHD();
	Тип = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(0).Тип;
	Объект = ФабрикаXDTO.Создать(Тип); // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
	
	ОшибкиЗаполнения = НовыйНаборОшибокЗаполненияОбъектаМЧД();
	
	ЗаполнитьОбъектМЧДРекурсивно(Объект, ДанныеМЧД, "Доверенность", ОшибкиЗаполнения);
	СброситьВзаимосисключающиеИНеподдерживаемыеСвойстваXDTOМЧД(Объект);
	
	ПроверитьОбъектМЧДРекурсивно(Объект, "Доверенность", ОшибкиЗаполнения);
	ПроверитьУсловныеПоляОбъектаМЧД(Объект, ОшибкиЗаполнения);
	
	Результат = Новый Структура;
	Результат.Вставить("Объект", Объект);
	Результат.Вставить("ОшибкиФормирования", ОшибкиЗаполнения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает XDTO-объект МЧД
// 
// Параметры:
//  ДанныеМЧД - Структура -
// 
// Возвращаемое значение:
//  Структура:
//    * Объект - ОбъектXDTO, ЗначениеXDTO -
//    * ОшибкиФормирования - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
Функция СформироватьОбъектXDTOПередоверия(ДанныеМЧД) Экспорт
	
	ПространствоИмен = ПространствоИменEMCHD();
	Тип = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(0).Тип;
	Объект = ФабрикаXDTO.Создать(Тип); // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
	
	ОшибкиЗаполнения = НовыйНаборОшибокЗаполненияОбъектаМЧД();
	
	ЗаполнитьОбъектМЧДРекурсивно(Объект, ДанныеМЧД, "Доверенность", ОшибкиЗаполнения);
	СброситьВзаимосисключающиеИНеподдерживаемыеСвойстваXDTOМЧДПередоверия(Объект);
	
	ПроверитьОбъектМЧДРекурсивно(Объект, "Доверенность", ОшибкиЗаполнения);
	ПроверитьУсловныеПоляОбъектаМЧДПередоверия(Объект, ОшибкиЗаполнения);
	ПроверитьДатыДоверенностей(Объект, ОшибкиЗаполнения);
	
	Результат = Новый Структура;
	Результат.Вставить("Объект", Объект);
	Результат.Вставить("ОшибкиФормирования", ОшибкиЗаполнения);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЧтениеОбъектаXDTO

// Новый набор ошибок чтения.
// 
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Путь до ошибочного свойства
//    * Значение - Массив Из Строка - Описание ошибки
//
Функция НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных() Экспорт
	
	Возврат Новый Соответствие();
	
КонецФункции

// Возвращает объект XDTO МЧД 003 (не обязательно валидный) из двоичных данных
// 
// Параметры:
//  ДвоичныеДанные - ДвоичныеДанные -
// 
// Возвращаемое значение:
//  Структура:
//    * ОшибкиЧтения - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//    * Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Функция ОбъектXDTOМЧДИзДвоичныхДанных(ДвоичныеДанные) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОшибкиЧтения", НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных());
	
	ПространствоИмен = "urn://x-artefacts/EMCHD_1";
	Тип = ФабрикаXDTO.Пакеты.Получить(ПространствоИмен).КорневыеСвойства.Получить(0).Тип;
	
	Поток = ДвоичныеДанные.ОткрытьПотокДляЧтения();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьПоток(Поток);
	
	ДанныеВалидныПоСхеме = Ложь;
	Попытка
		Доверенность = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, Тип); // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
		ДанныеВалидныПоСхеме = Истина;
	Исключение
		ЧтениеXML.Закрыть();
		Поток.Перейти(0, ПозицияВПотоке.Начало);
		ЧтениеXML.ОткрытьПоток(Поток);
	КонецПопытки;
	
	Если ДанныеВалидныПоСхеме Тогда
		Результат.Вставить("Доверенность", Доверенность);
		Возврат Результат;
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЭлементыDOM = ДокументDOM.ПолучитьЭлементыПоИмени("Доверенность");
	ПервыйЭлемент = ЭлементыDOM[0];
	
	Доверенность = ФабрикаXDTO.Создать(Тип); // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
	РекурсивноЗаполнитьОбъектМЧДПоДокументуDOM(Доверенность, ПервыйЭлемент, "Доверенность", Результат.ОшибкиЧтения);
	
	Результат.Вставить("Доверенность", Доверенность);
	
	Возврат Результат;
	
КонецФункции

// Данные МЧД из объекта XDTO.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
// 
// Возвращаемое значение:
//  Структура
Функция ДанныеМЧДИзОбъектаXDTO(Доверенность) Экспорт
	
	ДанныеМЧД = Новый Структура;
	
	РекурсивноПрочитатьСвойстваОбъектаМЧД(ДанныеМЧД, Доверенность);
	
	Возврат ДанныеМЧД;
	
КонецФункции

#КонецОбласти

// Данные для подачи заявления на отмену.
// 
// Параметры:
//  ДанныеДоверенности - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
// 
// Возвращаемое значение:
//  Структура -  Данные для подачи заявления на отмену:
// * ТипОрганизации - Строка - 
// * ДоверительЮЛ_НаимОрг - Строка - 
// * ДоверительЮЛ_ИНН - Строка
// * ДоверительЮЛ_КПП - Строка - 
// * ДоверительЮЛ_ОГРН - Строка
Функция ДанныеДляПодачиЗаявленияНаОтмену(ДанныеДоверенности) Экспорт
	ТипыДоверителей = ТипыДоверителей();

	ВозвращаемыеДанные = Новый Структура();

	Если ДанныеДоверенности.Документ.Довер <> Неопределено И ДанныеДоверенности.Документ.Довер.СвДоверит[0].ТипДоверит
		= ТипыДоверителей.ЮридическоеЛицо Или ДанныеДоверенности.Документ.Передов <> Неопределено
		И ДанныеДоверенности.Документ.Передов.СвПередПолн[0].ТипПерПолн = ТипыДоверителей.ЮридическоеЛицо Тогда

		ВозвращаемыеДанные.Вставить("ТипОрганизации", "ЮЛ");
		Если ДанныеДоверенности.Документ.Передов <> Неопределено Тогда
			СведенияОДоверителе = ДанныеДоверенности.Документ.Передов.СвПередПолн[0].ПередПолн.РосОргПерПолн.СвРосОрг;
		Иначе
			СведенияОДоверителе = ДанныеДоверенности.Документ.Довер.СвДоверит[0].Доверит.РосОргДовер.СвРосОрг;
		КонецЕсли;

		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_НаимОрг", СведенияОДоверителе.НаимОрг);
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_ИНН", СведенияОДоверителе.ИННЮЛ);
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_КПП", СведенияОДоверителе.КПП);
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_ОГРН", СведенияОДоверителе.ОГРН);

	ИначеЕсли ДанныеДоверенности.Документ.Довер <> Неопределено
		И (ДанныеДоверенности.Документ.Довер.СвДоверит[0].ТипДоверит = ТипыДоверителей.ФизическоеЛицо
			Или ДанныеДоверенности.Документ.Довер.СвДоверит[0].ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель)
		Или ДанныеДоверенности.Документ.Передов <> Неопределено
		И (ДанныеДоверенности.Документ.Передов.СвПередПолн[0].ТипПерПолн = ТипыДоверителей.ФизическоеЛицо
			Или ДанныеДоверенности.Документ.Передов.СвПередПолн[0].ТипПерПолн = ТипыДоверителей.ИндивидуальныйПредприниматель) Тогда

		ВозвращаемыеДанные.Вставить("ТипОрганизации", "ИП");
		Если ДанныеДоверенности.Документ.Передов <> Неопределено Тогда
			СведенияОДоверителе = ДанныеДоверенности.Документ.Передов.СвПередПолн[0].ПередПолн.ИППерПолн;
		Иначе
			СведенияОДоверителе = ДанныеДоверенности.Документ.Довер.СвДоверит[0].Доверит.ИПДовер;
		КонецЕсли;

		НаименованиеИП = Строка(СведенияОДоверителе.НаимИП);
		Если НаименованиеИП = "" И СведенияОДоверителе.СведФЛ <> Неопределено Тогда
			НаименованиеИП = ОбщегоНазначенияБЭДКлиентСервер.ФИОСтрокой(СведенияОДоверителе.СведФЛ.ФИО);
		КонецЕсли;

		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_НаимОрг", НаименованиеИП);
		ВозвращаемыеДанные.Вставить("ДоверительФЛ_ИНН", СведенияОДоверителе.ИННФЛ);
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_КПП", "");
		ВозвращаемыеДанные.Вставить("ДоверительФЛ_ОГРН", СведенияОДоверителе.ОГРНИП);
	Иначе
		ВозвращаемыеДанные.Вставить("ТипОрганизации", "Иностранная организация"); // АПК:1297 не выводится пользователю
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_НаимОрг", "");
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_ИНН", "");
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_КПП", "");
		ВозвращаемыеДанные.Вставить("ДоверительЮЛ_ОГРН", "");
	КонецЕсли;
	Возврат ВозвращаемыеДанные;
КонецФункции

// Неподдерживаемые свойства МЧД003.
// 
// Возвращаемое значение:
//  ФиксированныйМассив Из Строка
Функция НеподдерживаемыеСвойстваМЧД003() Экспорт
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеподдерживаемыеРеквизиты,
		НеподдерживаемыеСвойстваШапкиДоверенности());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеподдерживаемыеРеквизиты,
		НеподдерживаемыеСвойстваДоверителей());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеподдерживаемыеРеквизиты,
		НеподдерживаемыеСвойстваПредставителей());
	
	Возврат Новый ФиксированныйМассив(НеподдерживаемыеРеквизиты);
	
КонецФункции

// Неподдерживаемые свойства МЧД003.
// 
// Возвращаемое значение:
//  ФиксированныйМассив Из Строка
Функция НеподдерживаемыеСвойстваМЧД003Передоверия() Экспорт
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеподдерживаемыеРеквизиты,
		НеподдерживаемыеСвойстваДоверителейПередоверия());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеподдерживаемыеРеквизиты,
		НеподдерживаемыеСвойстваШапкиДоверенностиПередоверия());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НеподдерживаемыеРеквизиты,
		НеподдерживаемыеСвойстваПредставителейПередоверия());
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаПодписи

// Возвращает сведения МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//  
Функция СведенияМЧД(МЧД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МЧД003.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
		|	МЧД003.ИННДоверителяРодительскойДоверенности КАК ИННДоверителяРодительскойДоверенности,
		|	МЧД003.ДатаВыдачи КАК ДатаВыдачи,
		|	МЧД003.СрокДействия КАК ДатаОкончания,
		|	МЧД003.НомерДоверенности КАК НомерДоверенности,
		|	МЧД003.ДатаПрекращения КАК ДатаОтзыва,
		|	МЧД003.Верна КАК Верна,
		|	МЧД003.ПередовериеРазрешено КАК ПередовериеРазрешено,
		|	МЧД003.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МЧД003.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1) КАК Отозвана,
		|	МЧД003.ВариантЗаполненияПолномочий КАК ВариантЗаполненияПолномочий,
		|	МЧД003.ДатаОбновленияСтатуса Как ДатаПолученияСведений,
		|	МЧД003.ДатаОтправкиЗаявленияНаОтзыв Как ДатаОтправкиЗаявленияНаОтзыв
		|ПОМЕСТИТЬ Доверенность
		|ИЗ
		|	Справочник.МЧД003 КАК МЧД003
		|ГДЕ
		|	МЧД003.Ссылка = &МЧД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	МЧД003Доверители.ИНН КАК ИННДоверителя,
		|	МЧД003Доверители.КПП КАК КППДоверителя
		|ПОМЕСТИТЬ Доверители
		|ИЗ
		|	Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|ГДЕ
		|	МЧД003Доверители.Ссылка = &МЧД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МЧД003Представители.ИНН КАК ИННПредставителя
		|ИЗ
		|	Справочник.МЧД003.Представители КАК МЧД003Представители
		|ГДЕ
		|	МЧД003Представители.Ссылка = &МЧД
		|
		|УПОРЯДОЧИТЬ ПО
		|	МЧД003Представители.НомерСтроки";
	
	Запрос.УстановитьПараметр("МЧД", МЧД);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();;
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	Результат.Ссылка = МЧД;
	Результат.СовместныеПолномочия = Ложь;
	Результат.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(МЧД).Правило;
	
	Выборка = Запрос.МенеджерВременныхТаблиц.Таблицы.Получить("Доверенность").ПолучитьДанные().Выбрать();
	Выборка.Следующий();
	Реквизиты = "НомерДоверенности, ДатаПолученияСведений, ДатаВыдачи, ДатаОкончания, 
				|ДатаОтзыва, Верна, ДатаОтправкиЗаявленияНаОтзыв, СтатусВРеестреФНС, 
				|Отозвана, НомерРодительскойДоверенности, ИННДоверителяРодительскойДоверенности";
				
	ЗаполнитьЗначенияСвойств(Результат, Выборка, Реквизиты);
	
	Результат.ПолномочияОграничены = Не МашиночитаемыеДоверенности.ЭтоМЧДСПолнымиПолномочиями(МЧД);
	Результат.Подписана = Результат.Верна;
	
	Результат.ПолномочияУказаныИзКлассификатора = 
		МашиночитаемыеДоверенности.ПолномочияМЧДУказаныИзКлассификатора( , Выборка.ВариантЗаполненияПолномочий);

	Результат.ТипПередоверия = 
		?(Выборка.ПередовериеРазрешено, ПризнакВозможностиПередоверия().ПоследующееПередоверие, "");
	
	Выборка = Запрос.МенеджерВременныхТаблиц.Таблицы.Получить("Доверители").ПолучитьДанные().Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Результат, Выборка, "ИННДоверителя, КППДоверителя");
	
	Выборка = РезультатЗапроса.Выбрать();
	Результат.НесколькоПредставителей = Выборка.Количество() > 1;
	Пока Выборка.Следующий() Цикл
		Результат.ИННПредставителей.Добавить(Выборка.ИННПредставителя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДоверенности

// Загружает МЧД по сведениям из реестра ФНС
// 
// Параметры:
//  СведенияРеестраФНС - см. МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД
// 
// Возвращаемое значение:
//  см. МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД
Функция ЗагрузитьМЧД(СведенияРеестраФНС) Экспорт
	
	Результат = МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД();
	
	ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	ДополнительныеСведения.ДатаЗагрузки = СведенияРеестраФНС.ДатаЗагрузкиИзРеестра;
	ДополнительныеСведения.СтатусВРеестреФНС = МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(
		СведенияРеестраФНС.ЧастичныеДанные.СтатусДоверенности);
		
	РезультатЗагрузки = ЗагрузитьМЧДИзФайла(СведенияРеестраФНС.ПолныеДанные.ДанныеАрхива,, ДополнительныеСведения);
	
	Если ЗначениеЗаполнено(РезультатЗагрузки.МЧД) Тогда
		Результат.Сведения = СведенияМЧД(РезультатЗагрузки.МЧД);
	Иначе
		Результат.ОписаниеОшибки = РезультатЗагрузки.ТекстОшибки;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Загружает в элемент справочника данные из архива с файлом МЧД и подписями.
// Перезаполняет если доверенность с таким номером и двоичными существует, иначе создает новый элемент справочника.
//
// Параметры:
//  ДанныеФайла - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище,
//  			- см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД.
//  МЧД			- СправочникСсылка.МЧД003
//  ДополнительныеСведения - См. МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД
//  						- Неопределено
//
// Возвращаемое значение:
//  Структура:
//  * МЧД - СправочникСсылка.МЧД003
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ДанныеДляПроверки - Неопределено
//  * ТекстОшибки - Строка -
Функция ЗагрузитьМЧДИзФайла(ДанныеФайла, МЧД = Неопределено, ДополнительныеСведения = Неопределено) Экспорт

	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;

	Результат = Новый Структура;
	Результат.Вставить("МЧД", ПустаяСсылка());
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);
	Результат.Вставить("ДанныеДляПроверки", Неопределено);
	Результат.Вставить("ТекстОшибки", "");
	
	Если ТипЗнч(ДанныеФайла) = Тип("Структура") Тогда
		ДанныеАрхива = ДанныеФайла;
	Иначе
		ДанныеАрхива = МашиночитаемыеДоверенности.ПрочитатьАрхив(ДанныеФайла);
	КонецЕсли;
	
	Если ДанныеАрхива = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеАрхива.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;
	Результат.ДанныеДляПроверки = ДанныеДляПроверки;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ДанныеАрхива.ДанныеДоверенности;
	ДанныеДляЗагрузки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;
	ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = ДанныеАрхива.ДанныеПодписиЗаявленияНаОтмену;
	Если ДанныеАрхива.Свойство("ДанныеПодписей") Тогда
		ДанныеДляЗагрузки.ДанныеПодписей = ДанныеАрхива.ДанныеПодписей;
	Иначе
		ДанныеДляЗагрузки.ДанныеПодписей.Добавить(ДанныеАрхива.ДанныеПодписи);
	КонецЕсли;

	Если ДополнительныеСведения = Неопределено Тогда
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	КонецЕсли;

	РезультатПроверкиНаСервере = Новый Структура("Результат, ТекстОшибки", Истина, "");
	РезультатЗагрузки = ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, Ложь, Истина,
		ДополнительныеСведения, МЧД, РезультатПроверкиНаСервере);
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	Результат.Вставить("РезультатПроверкиНаСервере", РезультатПроверкиНаСервере);

	Если Не РезультатЗагрузки.Выполнено Тогда
		ВидОперации = НСтр("ru = 'Загрузка машиночитаемой доверенности из файла.'");
		ТекстОшибки = НСтр("ru = 'Ошибка при заполнении доверенности из файла:'") + Символы.ПС
			+ РезультатЗагрузки.Ошибка;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Результат.МЧД = РезультатЗагрузки.Ссылка;

	Возврат Результат;

КонецФункции

// Загружает элемент справочника из файла обмена.
// 
// Параметры:
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ЭтоРучноеСоздание - Булево - Признак создания МЧД вручную через форму
//  ОбновлятьСуществующий - Булево - Если Истина, то будет обновлен существующий элемент, если он найден.
//  ДополнительныеСведения - Структура - Если переданы, то будут заполнены в элементе справочника.
//  МЧД	- СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Структура - Результат загрузки:
//   * Выполнено - Булево - Признак успешности выполнения загрузки.
//   * Ссылка - Неопределено, СправочникСсылка.МЧД003 - Ссылка на элемент справочника.
//   * Ошибка - Строка - Текст ошибки, если не удалось загрузить элемент.
//   * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, ЭтоРучноеСоздание, ОбновлятьСуществующий = Ложь,
	ДополнительныеСведения = Неопределено, МЧД = Неопределено, РезультатПроверкиНаСервере = Неопределено)

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);
		
	РезультатЧтения = ДанныеДляЗагрузкиМЧД(ДанныеДляЗагрузки.ДанныеДоверенности);
	ДанныеДоверенности = РезультатЧтения.ДанныеДляЗаполнения;
	Если ДанныеДоверенности = Неопределено Тогда
		Результат.Ошибка = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ДополнительныеСведения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеДоверенности, ДополнительныеСведения, Истина);
	КонецЕсли;
		
	ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
		ТребуетсяПроверкаМЧДНаКлиенте, ЭтоРучноеСоздание, МЧД, РезультатПроверкиНаСервере);
	Результат.Ссылка = ТекущийЭлемент;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
		Результат.Выполнено = Истина;
	Иначе
		Результат.Ошибка = НСтр("ru = 'Не удалось записать элемент справочника. Подробности в журнале регистрации.'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Заполняет и записывает элемент справочника.
//
// Параметры:
//  ДанныеДоверенности - См. НовыеДанныеМЧД
//  ОбновлятьСуществующий - Булево - Обновлять существующий
//  ДанныеДляЗагрузки - См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ЭтоРучноеСоздание - Булево - Признак создания МЧД вручную через форму
//  МЧД	- СправочникСсылка.МЧД003
//  РезультатПроверкиНаСервере - Структура:
//  * Результат - Булево
//  * ТекстОшибки - Строка
// 
//  Возвращаемое значение:
//   СправочникСсылка.МЧД003 - Ссылка на элемент справочника.
//
Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
	ТребуетсяПроверкаМЧДНаКлиенте, ЭтоРучноеСоздание, МЧД = Неопределено, РезультатПроверкиНаСервере = Неопределено)
	
	Результат = ПустаяСсылка();
	НашлиЭлемент = Неопределено;
	
	Если ЗначениеЗаполнено(МЧД) Тогда
		НашлиЭлемент = МЧД;
	КонецЕсли;
	
	Если ОбновлятьСуществующий И Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		НашлиЭлемент = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
	КонецЕсли;

	ЭтоНайденнаяНеРеестроваяМЧД = ЗначениеЗаполнено(НашлиЭлемент) 
		И МашиночитаемыеДоверенности.ЭтоНереестроваяМЧД(НашлиЭлемент);
		
	ЗагружаемРеестровуюМЧД = ДанныеДоверенности.Свойство("СтатусВРеестреФНС")
		И ЗначениеЗаполнено(ДанныеДоверенности.СтатусВРеестреФНС);
		
	Если ЭтоНайденнаяНеРеестроваяМЧД И Не ЗагружаемРеестровуюМЧД Тогда
		Возврат НашлиЭлемент;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеДляЗагрузки.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеДляЗагрузки.ДанныеПодписи;
	
	Если МашиночитаемыеДоверенности.ТребуетсяПерезаполнениеМЧД(
		ОбъектСправочника, ДанныеДляЗагрузки, МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003()) Тогда
		ПерезаполнитьОбъектМЧД(ОбъектСправочника, ДанныеДоверенности, ДанныеДляЗагрузки);
	КонецЕсли;
	
	ИзменилсяСтатусВРеестре = ЗагружаемРеестровуюМЧД
		И ДанныеДоверенности.СтатусВРеестреФНС <> ОбъектСправочника.СтатусВРеестреФНС;
	
	Если ИзменилсяСтатусВРеестре Тогда
		ОбъектСправочника.СтатусВРеестреФНС = ДанныеДоверенности.СтатусВРеестреФНС;
	КонецЕсли;
	
	ИзмениласьДатаОтзыва = ЗагружаемРеестровуюМЧД
		И ЗначениеЗаполнено(ДанныеДоверенности.ДатаОтзыва)
		И ДанныеДоверенности.ДатаОтзыва <> ОбъектСправочника.ДатаПрекращения;
		
	Если ИзмениласьДатаОтзыва Тогда
		ОбъектСправочника.ДатаПрекращения = ДанныеДоверенности.ДатаОтзыва;
	КонецЕсли;
	
	Если ЗагружаемРеестровуюМЧД Тогда
		ОбъектСправочника.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ДанныеДоверенности.Свойство("Комментарий") Тогда
		ОбъектСправочника.Комментарий = ДанныеДоверенности.Комментарий;
	КонецЕсли;
	
	МашиночитаемыеДоверенности.ЗаполнитьПодписанаВерна(
		ОбъектСправочника, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте,
		МашиночитаемыеДоверенностиКлиентСервер.ФорматМЧД_003(), РезультатПроверкиНаСервере);
	
	ОтсутствуетВозможностьПроверитьНаСервере = Не ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере();
	ЭтоПровереннаяРеестроваяМЧД =
		МашиночитаемыеДоверенности.ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности);
	
	Если ЭтоПровереннаяРеестроваяМЧД И ОтсутствуетВозможностьПроверитьНаСервере Тогда
		ОбъектСправочника.Верна = Истина;
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСправочника.СтатусВРеестреФНС) 
		И Не ЗначениеЗаполнено(ДанныеДоверенности.СтатусВРеестреФНС) Тогда
		ОбъектСправочника.Верна = Истина;
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
	КонецЕсли;
	
	Если ЭтоРучноеСоздание И Не ЗначениеЗаполнено(ОбъектСправочника.СтатусВРеестреФНС) Тогда
		ОбъектСправочника.ДополнительныеСвойства.Вставить("НеЗаписыватьВЖурнал");
	КонецЕсли;
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
		
		Удачно = ЗаписатьОбъектВБазу(ОбъектСправочника, ДанныеДоверенности.НомерДоверенности);
	
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОбъектСправочника - СправочникОбъект.МЧД003
//  НомерДоверенности - ОпределяемыйТип.ЕдиныйРегистрационныйНомерДоверенности
// 
// Возвращаемое значение:
//  Булево - Истина в случае успешной записи.
Функция ЗаписатьОбъектВБазу(ОбъектСправочника, НомерДоверенности)
	
	Блокировка = Новый БлокировкаДанных();
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МЧД003");
	ЭлементБлокировки.УстановитьЗначение("НомерДоверенности", НомерДоверенности);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Если Не ОбъектСправочника.ЭтоНовый() Тогда
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
	КонецЕсли;

	Удачно = Истина;

	НачатьТранзакцию();

	Попытка
		Блокировка.Заблокировать();
		ОбъектСправочника.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ДанныеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ДанныеОшибки);
		Удачно = Ложь;
	КонецПопытки;
	
	Возврат Удачно;
	
КонецФункции

// Возвращает признак того что МЧД нуждается в перезаполнении и перепроверке на сервере.
//
//	Параметры:
//	 Доверенность - СправочникОбъект.МЧД003
//	 НовыеДанные - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//
//	Возвращаемое значение:
//	 Булево
Функция ТребуетсяПерезаполнениеМЧД(Доверенность, НовыеДанные) Экспорт
	
	ИзменилсяФайлМЧД = (Доверенность.ФайлМЧД.Получить() <> НовыеДанные.ДанныеДоверенности);
	Если ИзменилсяФайлМЧД Тогда 
		Возврат Истина;
	КонецЕсли;
	
	ИзменилисьДанныеОтзыва = ЗначениеЗаполнено(НовыеДанные.ДанныеПодписиЗаявленияНаОтмену)
		И Не ЗначениеЗаполнено(Доверенность.ДатаПрекращения);
	Если ИзменилисьДанныеОтзыва Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Доверенность.Подписи.Количество() > 0 Тогда
		
		Если Доверенность.Подписи.Количество() <> НовыеДанные.ДанныеПодписей.Количество() Тогда
			Возврат Истина;
		КонецЕсли;
		
		Для Каждого Строка Из Доверенность.Подписи Цикл
			ПодписьНайдена = Ложь;
			ТекущаяПодпись = Строка.Подпись.Получить();
			Для Каждого НоваяПодпись Из НовыеДанные.ДанныеПодписей Цикл
				Если ТекущаяПодпись = НоваяПодпись Тогда
					ПодписьНайдена = Истина;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ПодписьНайдена Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает двоичные данные машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеМЧД(Ссылка) Экспорт
		
	ФайлМЧД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ФайлМЧД");
	Возврат ФайлМЧД.Получить();
	
КонецФункции

// Возвращает двоичные данные заявления на отзыв машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные заявления на отзыв машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Ссылка) Экспорт
		
	НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
	РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, "Отзыв");
	СтрокаXML = РезультатВыгрузки.Содержимое;
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(СтрокаXML, "windows-1251");
	
КонецФункции

// Формирует новые данные участника (доверителя или представителя).
// 
// Возвращаемое значение:
//  Структура - Новые данные участника: 
// * ТипУчастника - Строка
// * ИНН - Строка
// * КПП - Строка
// * ОГРН - Строка
// * СНИЛС - Строка - в формате 999-999-999 99
Функция НовыеДанныеУчастника()
	
	Результат = Новый Структура();
	Результат.Вставить("ТипУчастника", "");
	Результат.Вставить("ИНН", "");
	Результат.Вставить("КПП", "");
	Результат.Вставить("ОГРН", "");
	Результат.Вставить("СНИЛС", "");
	Возврат Результат;
	
КонецФункции

// Формирует новые данные машиночитаемого полномочия.
// 
// Возвращаемое значение:
//  Структура - Новые данные участника:
// * Мнемоника    - Строка
// * Код          - Строка
// * Наименование - Строка
Функция НовыеДанныеМашиночитаемогоПолномочия()
	
	Результат = Новый Структура();
	
	Результат.Вставить("Мнемоника",    "");
	Результат.Вставить("Код",          "");
	Результат.Вставить("Наименование", "");

	Возврат Результат;
	
КонецФункции

Функция ПолучитьУчастника_ЮридическоеЛицо(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННЮЛ", "");
	Участник.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "КПП", "");
	Участник.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ОГРН", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ИндивидуальныйПредприниматель(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННФЛ", "");
	Участник.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ОГРНИП", "");
	Участник.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "СНИЛС", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ФизическоеЛицо(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННФЛ", "");
	Участник.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "СНИЛС", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ФилиалЮридическогоЛица(ДанныеXDTO)
	
	Возврат ПолучитьУчастника_ЮридическоеЛицо(ДанныеXDTO);
	
КонецФункции

Функция ПолучитьУчастника_ИностраннаяОрганизация(ДанныеXDTO)
	
	Участник = НовыеДанныеУчастника();
	Участник.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "ИННЮЛ", "");
	Участник.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, "КПП", "");
	Возврат Участник;
	
КонецФункции

Функция ПолучитьУчастника_ФилиалИностраннойОрганизации(ДанныеXDTO)
	
	Возврат ПолучитьУчастника_ИностраннаяОрганизация(ДанныеXDTO);
	
КонецФункции

// Возвращает данные, полученные из файла обмена.
// 
// Параметры:
//  ДанныеМЧД - ДвоичныеДанные
// 
// Возвращаемое значение:
//  Структура:
//  * ТекстОшибки - Строка
//  * ДанныеДляЗаполнения - См. НовыеДанныеМЧД
//  * ДанныеДляЗаполнения - Неопределено
Функция ДанныеДляЗагрузкиМЧД(ДанныеМЧД)
	
	Результат = Новый Структура("ТекстОшибки, ДанныеДляЗаполнения", "", Неопределено);
	РезультатЧтения = МашиночитаемыеДоверенности.ОбъектXDTOМЧД(ДанныеМЧД);
	ОбъектМЧД = РезультатЧтения.ОбъектМЧД;
	
	Если ОбъектМЧД = Неопределено Тогда
		Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Результат.ДанныеДляЗаполнения = ДанныеДляЗаполненияМЧД(ОбъектМЧД);
	Возврат Результат;
	
КонецФункции

// Заполняет представителей.
// 
// Параметры:
//  МассивУчастников - Массив из см. НовыеДанныеУчастника
//  ОбъектМЧД - ОбъектXDTO
Процедура ЗаполнитьПредставителей(МассивУчастников, ОбъектМЧД)
	
	ТипыПредставителей = ТипыПредставителей();
	
	ПредставителиXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвУпПред", , , Истина, Неопределено);
	Если ПредставителиXDTO = Неопределено Тогда
	    ПредставителиXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПолучПолн", , , Истина, Неопределено);
	КонецЕсли;
	
	Для Каждого ПредставительXDTO Из ПредставителиXDTO Цикл
		
		Участник = Неопределено;
		ТипУчастника = ПредставительXDTO.ТипПред;
		
		Если ТипУчастника = ТипыПредставителей.ЮридическоеЛицо Тогда
			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведОрг");
			Участник = ПолучитьУчастника_ЮридическоеЛицо(СведОргXDTO);
		ИначеЕсли ТипУчастника = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
			СведИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИП");
			Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(СведИПXDTO);			
		ИначеЕсли ТипУчастника = ТипыПредставителей.ФизическоеЛицо Тогда	
			СведФизЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФизЛ");
			Участник = ПолучитьУчастника_ФизическоеЛицо(СведФизЛXDTO);
		ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалЮридическогоЛица Тогда
			СведФилиалXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФилиал");
			Участник = ПолучитьУчастника_ФилиалЮридическогоЛица(СведФилиалXDTO);
		ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда	
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИО");
			Участник = ПолучитьУчастника_ФилиалИностраннойОрганизации(СведИОXDTO);
		КонецЕсли;	
		
		Если Участник <> Неопределено Тогда
			Участник.ТипУчастника = ТипУчастника;
			МассивУчастников.Добавить(Участник);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет доверителей.
// 
// Параметры:
//  МассивУчастников - Массив из см. НовыеДанныеУчастника
//  ОбъектМЧД - ОбъектXDTO
Процедура ЗаполнитьДоверителей(МассивУчастников, ОбъектМЧД)
	
	ТипыДоверителей = ТипыДоверителей();
	ТипыПредставителей = ТипыПредставителей();
	ДаНет = Новый Структура("Да, Нет", "1", "0"); // Классификатор из формата
	
	СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвДоверит", , , Истина, Неопределено); // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	Если СвДоверитXDTO <> Неопределено Тогда
		Для Каждого ДоверительXDTO Из СвДоверитXDTO Цикл	
			
			Участник = Неопределено;
			ТипУчастника = ДоверительXDTO.ТипДоверит;
			
			Если ТипУчастника = ТипыДоверителей.ЮридическоеЛицо Тогда
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.РосОргДовер.СвРосОрг");
				Участник = ПолучитьУчастника_ЮридическоеЛицо(СвРосОргXDTO);
				Если ДоверительXDTO.Доверит.РосОргДовер.ЕИОФЛ = ДаНет.Да Тогда
					ЛицоБезДоверенности = ДоверительXDTO.Доверит.РосОргДовер.ЛицоБезДов.Получить(0); // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
					Участник.СНИЛС = Строка(ЛицоБезДоверенности.СвФЛ.СНИЛС);
				КонецЕсли;
			ИначеЕсли ТипУчастника = ТипыДоверителей.ИностраннаяОрганизация Тогда
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИнОргДовер.СвИнОрг");
				Участник = ПолучитьУчастника_ИностраннаяОрганизация(СвИнОргXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				ИПДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИПДовер");
				Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(ИПДоверXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ФизическоеЛицо Тогда
				ФЛДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ФЛДовер");
				Участник = ПолучитьУчастника_ФизическоеЛицо(ФЛДоверXDTO);
			КонецЕсли;
			
			Если Участник <> Неопределено Тогда
				Участник.ТипУчастника = ТипУчастника;
				МассивУчастников.Добавить(Участник);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;	
	
	СвПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПередПолн", , , Истина, Неопределено);
	Если СвПередПолнXDTO <> Неопределено Тогда
		Для Каждого ДоверительXDTO Из СвПередПолнXDTO Цикл
			
			Участник = Неопределено;
			ТипУчастника = ДоверительXDTO.ТипПерПолн;
			
			Если ТипУчастника = ТипыПредставителей.ЮридическоеЛицо Тогда
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.РосОргПерПолн.СвРосОрг");
				Участник = ПолучитьУчастника_ЮридическоеЛицо(СвРосОргXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	
				ИППерПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ИППерПолн");
				Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(ИППерПолнXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ФизическоеЛицо Тогда	
				ФЛПерПолнЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ФЛПерПолн");
				Участник = ПолучитьУчастника_ФизическоеЛицо(ФЛПерПолнЛXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
				СвФилXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ФилПерПолн.СвФил");
				Участник = ПолучитьУчастника_ФилиалЮридическогоЛица(СвФилXDTO);
			ИначеЕсли ТипУчастника = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда	
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ПередПолн.ИнПерПолн.СвИнОрг");
				Участник = ПолучитьУчастника_ФилиалИностраннойОрганизации(СвИнОргXDTO);
			КонецЕсли;	
			
			Если Участник <> Неопределено Тогда
				Участник.ТипУчастника = ТипУчастника;
				МассивУчастников.Добавить(Участник);
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет полномочия и связанные реквизиты.
// 
// Параметры:
//  ДанныеДляЗаполнения - см. НовыеДанныеМЧД
//  ОбъектМЧД           - ОбъектXDTO
Процедура ЗаполнитьДанныеПолномочий(ДанныеДляЗаполнения, ОбъектМЧД)
	
	СведенияОПолномочиях = Неопределено;
	
	СвПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Передов.СвПолн", , , Истина, Неопределено);
	Если СвПолнXDTO <> Неопределено Тогда
		СведенияОПолномочиях = ОбъектМЧД.Документ.Передов.СвПолн; // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	КонецЕсли;
	
	СвПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектМЧД, "Документ.Довер.СвПолн", , , Истина, Неопределено);
	Если СвПолнXDTO <> Неопределено Тогда
		СведенияОПолномочиях = ОбъектМЧД.Документ.Довер.СвПолн; // см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	КонецЕсли;
	
	Если СведенияОПолномочиях = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось сформировать сведения по полномочиям'");
	КонецЕсли;
	
	ДанныеДляЗаполнения.ПолномочияОграничены = Истина;
	ДанныеДляЗаполнения.СовместныеПолномочия = СведенияОПолномочиях.ПрСовмПолн = "2"; 
	
	Если СведенияОПолномочиях.ТипПолн = ТипыПолномочий().Текстовые Тогда
		
		ДанныеДляЗаполнения.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Текст;
		ДанныеДляЗаполнения.ТекстовоеПолномочие = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияОПолномочиях,
			"ТекстПолн", "");
		
		ДанныеДляЗаполнения.ПолномочияОграничены =
			НЕ МашиночитаемыеДоверенности.ЭтоТекстПолныхПолномочий(ДанныеДляЗаполнения.ТекстовоеПолномочие);
			
	Иначе
		
		ДанныеДляЗаполнения.ВариантЗаполненияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Классификатор;
		
		МашиночитаемыеПолномочия = СведенияОПолномочиях.МашПолн;
		Если ТипЗнч(МашиночитаемыеПолномочия) <> Тип("СписокXDTO") Тогда
			МашиночитаемыеПолномочия = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МашиночитаемыеПолномочия);
		КонецЕсли;
		
		Для Каждого Полномочие Из МашиночитаемыеПолномочия Цикл
		
			ДанныеПолномочия = НовыеДанныеМашиночитаемогоПолномочия();
			ДанныеПолномочия.Мнемоника    = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "МнПолн", "");
			ДанныеПолномочия.Код          = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "КодПолн", "");
			ДанныеПолномочия.Наименование = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочие, "НаимПолн", "");
			
			ДанныеДляЗаполнения.Полномочия.Добавить(ДанныеПолномочия);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаДоверенности

// Выгружает данные доверенности в zip архив, в составе которого содержатся xml файл доверенности, подпись
// и файл визуализации.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Структура - Выгрузить данные доверенности:
// * ОписаниеФайла - см. РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла
// * Ошибка - Булево - Истина, если выгрузить данные не удалось.
// * ТекстОшибки - Строка - заполнено, если свойство Ошибка = Истина.
Функция ВыгрузитьДанныеДоверенности(Ссылка) Экспорт
	
	РезультатВыгрузки = Новый Структура;
	РезультатВыгрузки.Вставить("ОписаниеФайла", РаботаСФайламиБЭДКлиентСервер.НовоеОписаниеФайла());
	РезультатВыгрузки.Вставить("Ошибка", Ложь);
	РезультатВыгрузки.Вставить("ТекстОшибки", "");
	
	Если Ссылка.Пустая() Тогда
		
		РезультатВыгрузки.Ошибка = Истина;
		РезультатВыгрузки.ТекстОшибки = НСтр("ru = 'Не указана выгружаемая доверенность'");
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ДанныеФайлаДоверенностиИПодписи = МашиночитаемыеДоверенности.ДанныеФайлаДоверенностиИПодписи(Ссылка);
	
	Подпись = ДанныеФайлаДоверенностиИПодписи.ДанныеПодписи;
	ДвоичныеДанныеДоверенности = ДанныеФайлаДоверенностиИПодписи.ДанныеФайла;
	
	Файлы = Новый Массив(); // Массив из Строка
	
	ИмяВременногоКаталога = РаботаСФайламиБЭД.ВременныйКаталог();
	ИмяФайлаДоверенностьБезРасширения = ПолучитьИмяФайлаМЧД(Ссылка);
	ИмяФайлаДоверенность = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".xml";
	ИмяФайлаПодпись = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".p7s";
	
	ДвоичныеДанныеДоверенности.Записать(ИмяФайлаДоверенность);
	Файлы.Добавить(ИмяФайлаДоверенность);
	
	Подпись.Записать(ИмяФайлаПодпись);
	Файлы.Добавить(ИмяФайлаПодпись);
	
	ИмяФайлаВизуализация = ИмяВременногоКаталога + ИмяФайлаДоверенностьБезРасширения + ".pdf";
	РезультатЧтенияМЧД = МашиночитаемыеДоверенности.ОбъектXDTOМЧД(ДвоичныеДанныеДоверенности);
	Если РезультатЧтенияМЧД.ОбъектМЧД <> Неопределено Тогда
		ТабличныйДокумент = ТабличныйДокументМЧД(РезультатЧтенияМЧД.ОбъектМЧД);
		ТабличныйДокумент.Записать(ИмяФайлаВизуализация, ТипФайлаТабличногоДокумента.PDF);
		Файлы.Добавить(ИмяФайлаВизуализация);
	КонецЕсли;
		
	Архив = РаботаСФайламиБЭД.СформироватьАрхивФайлов(Файлы);
	УдалитьФайлы(ИмяВременногоКаталога);
	
	РезультатВыгрузки.ОписаниеФайла.ИмяФайла = ИмяФайлаДоверенностьБезРасширения + ".zip";
	РезультатВыгрузки.ОписаниеФайла.ДвоичныеДанные = Архив;
	
	Возврат РезультатВыгрузки;
	
КонецФункции

#КонецОбласти

// Определяет есть ли в доверенности представители юр лица
//
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Булево
//  
Функция ПередовериеТребуетНотариат(МЧД) Экспорт
	
	ТипыПередоверителей = Справочники.МЧД003.ТипыПредставителей();
	
	ДоступныеПредставители = Новый Массив();
	ДоступныеПредставители.Добавить(ТипыПередоверителей.ЮридическоеЛицо);
	ДоступныеПредставители.Добавить(ТипыПередоверителей.ФилиалЮридическогоЛица);
	ДоступныеПредставители.Добавить(ТипыПередоверителей.ФилиалИностраннойОрганизации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДоступныеПредставители", ДоступныеПредставители);
	Запрос.УстановитьПараметр("МЧД", МЧД);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МЧД003Представители.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.МЧД003.Представители КАК МЧД003Представители
	|ГДЕ
	|	МЧД003Представители.ТипПредставителя В(&ДоступныеПредставители)
	|	И МЧД003Представители.Ссылка = &МЧД";
	РезультатЗапроса = Запрос.Выполнить();
	
	ПередовериеТребуетНотариат = РезультатЗапроса.Пустой();
	
	Возврат ПередовериеТребуетНотариат;
	
КонецФункции

// Заполнить сведения передоверия по обработчику обновления.
//
// Параметры:
//  ОбъектМЧД003 - СправочникОбъект.МЧД003
//  Записать - Булево
Процедура ОбработатьДанные_ЗаполнитьСведенияПоПередоверию(ОбъектМЧД003, Записать)
	
	ДвоичныеДанные = ОбъектМЧД003.ФайлМЧД.Получить(); // ДвоичныеДанные
	РезультатЧтения = МашиночитаемыеДоверенности.ОбъектXDTOМЧД(ДвоичныеДанные);
	
	Если ЗначениеЗаполнено(РезультатЧтения.ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;
	
	ПередовериеРазрешено = Ложь;
	НомерРодительскойДоверенности = "";
	ИННДоверителяРодительскойДоверенности = "";
	
	ОбъектXDTO = РезультатЧтения.ОбъектМЧД;
	
	ДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTO.Документ, "Довер", Неопределено);
	Если ДоверXDTO <> Неопределено Тогда
		СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверXDTO, "СвДов", , , Истина)[0];
		ПередовериеРазрешено = СвПереДоверXDTO.ПрПередов = ПризнакВозможностиПередоверия().ПоследующееПередоверие;
	КонецЕсли;
	
	ПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектXDTO.Документ, "Передов", Неопределено);
	Если ПередовXDTO <> Неопределено Тогда
		
		СвПереДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПереДовер", , , Истина)[0];
		ПередовериеРазрешено = СвПереДоверXDTO.ПрПередов = ПризнакВозможностиПередоверия().ПоследующееПередоверие;
		
		Если ПередовXDTO.СвПервДовер <> Неопределено Тогда
			НомерРодительскойДоверенности = ПередовXDTO.СвПервДовер.НомДоверПерв;
			
			СвДоверПервXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПередовXDTO, "СвПервДовер.СвДоверПерв", , , Истина, Неопределено); 
			ДоверительXDTO = СвДоверПервXDTO[0];
					
			Участник = Неопределено;
			ТипУчастника = ДоверительXDTO.ТипДоверит;
			ТипыДоверителей = ТипыДоверителей();
			
			Если ТипУчастника = ТипыДоверителей.ЮридическоеЛицо Тогда
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.РосОргДовер");
				Участник = ПолучитьУчастника_ЮридическоеЛицо(СвРосОргXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда	
				ИППерПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИПДовер");
				Участник = ПолучитьУчастника_ИндивидуальныйПредприниматель(ИППерПолнXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ФизическоеЛицо Тогда
				ФЛПерПолнЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ФЛДовер");
				Участник = ПолучитьУчастника_ФизическоеЛицо(ФЛПерПолнЛXDTO);
			ИначеЕсли ТипУчастника = ТипыДоверителей.ИностраннаяОрганизация Тогда
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИнОргДовер");
				Участник = ПолучитьУчастника_ИностраннаяОрганизация(СвИнОргXDTO);
			КонецЕсли;
			
			Если Участник <> Неопределено Тогда
				ИННДоверителяРодительскойДоверенности = Участник.ИНН;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	Если ПередовериеРазрешено <> ОбъектМЧД003.ПередовериеРазрешено
		Или НомерРодительскойДоверенности <> ОбъектМЧД003.НомерРодительскойДоверенности 
		Или ИННДоверителяРодительскойДоверенности <> ОбъектМЧД003.ИННДоверителяРодительскойДоверенности Тогда
		
		ОбъектМЧД003.ПередовериеРазрешено = ПередовериеРазрешено;
		ОбъектМЧД003.НомерРодительскойДоверенности = НомерРодительскойДоверенности;
		ОбъектМЧД003.ИННДоверителяРодительскойДоверенности = ИННДоверителяРодительскойДоверенности;
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет по признаку что передоверие разрешено
//
// Параметры:
//  ПризнакПередоверия - Строка
//
// Возвращаемое значение:
//  Булево
Функция ПередовериеРазрешено(ПризнакПередоверия)
	
	Признаки = ПризнакВозможностиПередоверия();
	Если ПризнакПередоверия = Признаки.ПоследующееПередоверие Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Признак возможности передоверия.
// 
// Возвращаемое значение:
//  Структура:
//    * БезПередоверия - Строка
//    * Однократное - Строка
//    * ПоследующееПередоверие - Строка
Функция ПризнакВозможностиПередоверия() Экспорт
	
	Структура = Новый Структура("БезПередоверия, Однократное, ПоследующееПередоверие", "1", "2", "3");
	Возврат Структура;
	
КонецФункции

// Признак возможности передоверия.
// 
// Возвращаемое значение:
//  Структура:
//    * НеУтрачиваются - Строка
//    * Утрачиваются - Строка
Функция ПризнакУтратыПолномочий() Экспорт
	
	Структура = Новый Структура("НеУтрачиваются, Утрачиваются", "1", "2");
	Возврат Структура;
	
КонецФункции

// Возвращает результат запроса по цепочке передоверия
//
// Параметры:
//  НомерДоверенности - Строка
//  ПоискПоРодителю - Булево
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//   * НомерДоверенности - Строка
//   * НомерРодительскойДоверенности - Строка
//   * ФайлМЧД - ХранилищеЗначения
//   * Активна - Булево
//   * Доверенность - СправочникСсылка.МЧД003
//   * РодительскаяДоверенность - СправочникСсылка.МЧД003
Функция ВыборкаПоЦепочкеПередоверия(НомерДоверенности, ПоискПоРодителю = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МЧД003.НомерДоверенности КАК НомерДоверенности,
	|	МЧД003.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
	|	МЧД003.ФайлМЧД КАК ФайлМЧД,
	|	&ТекущаяДата МЕЖДУ МЧД003.ДатаВыдачи И МЧД003.СрокДействия
	|	И МЧД003.Подписана
	|	И МЧД003.Верна КАК Активна,
	|	МЧД003.Ссылка КАК Доверенность,
	|	ЕСТЬNULL(МЧД003Родительские.Ссылка, ЗНАЧЕНИЕ(Справочник.МЧД003.ПустаяСсылка)) КАК РодительскаяДоверенность
	|ИЗ
	|	Справочник.МЧД003 КАК МЧД003
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МЧД003 КАК МЧД003Родительские
	|		ПО МЧД003.НомерРодительскойДоверенности = МЧД003Родительские.НомерДоверенности
	|			И НЕ МЧД003Родительские.НомерДоверенности = """"
	|ГДЕ
	|	&УсловиеПоиска = &НомерДоверенности";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&УсловиеПоиска",
		?(ПоискПоРодителю, "МЧД003.НомерРодительскойДоверенности", "МЧД003.НомерДоверенности"));
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Формирует цепочку передоверия по родителю
//
// Параметры:
//  СведенияМЧД - См. НовыеСведенияПоЦепочкеМЧД
//  НомерДоверенности - Строка
//  УровеньИерархии - Число
Процедура СобратьЦепочкуТекущейМЧД(СведенияМЧД, НомерДоверенности, УровеньИерархии)
	
	Выборка = ВыборкаПоЦепочкеПередоверия(НомерДоверенности);
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СведенияМЧД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.УровеньИерархии = УровеньИерархии;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует цепочку передоверия по родителю
//
// Параметры:
//  СведенияМЧД - См. НовыеСведенияПоЦепочкеМЧД
//  НомерДоверенности - Строка
//  УровеньИерархии - Число
Процедура СобратьЦепочкуПередоверияПоРодителю(СведенияМЧД, НомерДоверенности, УровеньИерархии)

	Если ПустаяСтрока(НомерДоверенности) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаПоЦепочкеПередоверия(НомерДоверенности);
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = СведенияМЧД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.УровеньИерархии = УровеньИерархии;
		
		СобратьЦепочкуПередоверияПоРодителю(СведенияМЧД, Выборка.НомерРодительскойДоверенности, УровеньИерархии - 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует цепочку передоверия по потомку
//
// Параметры:
//  СведенияМЧД - См. НовыеСведенияПоЦепочкеМЧД
//  НомерДоверенности - Строка
//  УровеньИерархии - Число
Процедура СобратьЦепочкуПередоверияПоПотомкам(СведенияМЧД, НомерДоверенности, УровеньИерархии)
	
	Если ПустаяСтрока(НомерДоверенности) Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = ВыборкаПоЦепочкеПередоверия(НомерДоверенности, Истина);
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Активна Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СведенияМЧД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.УровеньИерархии = УровеньИерархии;
		
		СобратьЦепочкуПередоверияПоПотомкам(СведенияМЧД, Выборка.НомерДоверенности, УровеньИерархии + 1);
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует цепочку передоверия по имеющися доверенностям в базе
//
// Параметры:
//  НомерРодительскойДоверенности - Строка
//  НомерДоверенности - Строка
//  ФайлМЧД - ХранилищеЗначения
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. НовыеСведенияПоЦепочкеМЧД
Функция ЦепочкаПередоверия(НомерРодительскойДоверенности, НомерДоверенности) Экспорт
	
	СведенияМЧД = НовыеСведенияПоЦепочкеМЧД();
	СобратьЦепочкуТекущейМЧД(СведенияМЧД, НомерДоверенности, 1);
	СобратьЦепочкуПередоверияПоРодителю(СведенияМЧД, НомерРодительскойДоверенности, -1);
	СобратьЦепочкуПередоверияПоПотомкам(СведенияМЧД, НомерДоверенности, 2);
	
	СведенияМЧД.Сортировать("УровеньИерархии Возр");
	
	Возврат СведенияМЧД;
	
КонецФункции

// Формирует сведения по цепочке передоверия
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * УровеньИерархии - Число
//   * НомерДоверенности - Строка
//   * НомерРодительскойДоверенности - Строка
//   * ФайлМЧД - ХранилищеЗначения
Функция НовыеСведенияПоЦепочкеМЧД()

	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("УровеньИерархии", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("НомерДоверенности", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Доверенность", Новый ОписаниеТипов("СправочникСсылка.МЧД003"));
	Таблица.Колонки.Добавить("НомерРодительскойДоверенности", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("РодительскаяДоверенность", Новый ОписаниеТипов("СправочникСсылка.МЧД003"));
	Таблица.Колонки.Добавить("ФайлМЧД", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Возврат Таблица;
	
КонецФункции

// Возвращает строку пространства имен
//
// Возвращаемое значение:
//  Строка
Функция ПространствоИменEMCHD()
	
	Возврат "urn://x-artefacts/EMCHD_1";
	
КонецФункции

// Определяет наличие у пользователя прав на изменение МЧД003.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МЧД003);

КонецФункции

// Получает организацию доверителя с приоритетом по учетной записи ЭДО
//
// Параметры:
//  ДанныеДоверителей - Массив Из Структура:
//   * ИНН - Строка
//   * КПП - Строка
// 
// Возвращаемое значение:
//  - Неопределено
//  - См. ОпределяемыйТип.Организация
Функция ПолучитьОрганизациюДоверителяПоИННКПП(ДанныеДоверителей) Экспорт
	
	Результат = Неопределено;
	ОрганизацииДоверителей = Новый Массив();
	
	Для Каждого ДанныеДоверителя Из ДанныеДоверителей Цикл
		Организация = ОбщегоНазначенияБЭД.НайтиСсылку("Организации", , ДанныеДоверителя);
		ОрганизацииДоверителей.Добавить(Организация);
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ОрганизацииДоверителей) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОрганизацииСУчетнойЗаписью = СинхронизацияЭДО.ОрганизацииСУчетнойЗаписью(ОрганизацииДоверителей);
	
	Если ЗначениеЗаполнено(ОрганизацииСУчетнойЗаписью) Тогда
		Результат = ОрганизацииСУчетнойЗаписью[0];
	Иначе
		Результат = ОрганизацииДоверителей[0];
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Доверитель - см. МашиночитаемыеДоверенности.НовыеРеквизитыОтбора
//  Представитель - см. МашиночитаемыеДоверенности.НовыеРеквизитыОтбора
//  ДействительныеНаДату - Дата
// 
// Возвращаемое значение:
// ТаблицаЗначений - см. МашиночитаемыеДоверенности.НоваяТаблицаДоверенностей
Функция ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ДействительныеНаДату) Экспорт
	   
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МЧД003.Ссылка КАК МЧД
		|ПОМЕСТИТЬ ВыбранныеМЧД
		|ИЗ
		|	Справочник.МЧД003 КАК МЧД003
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Доверители КАК ТаблицаДоверители
		|		ПО МЧД003.Ссылка = ТаблицаДоверители.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Представители КАК ТаблицаПредставители
		|		ПО МЧД003.Ссылка = ТаблицаПредставители.Ссылка
		|ГДЕ
		|	НЕ МЧД003.ПометкаУдаления
		|	И НЕ МЧД003.СовместныеПолномочия
		|	И МЧД003.НомерРодительскойДоверенности = """"
		|	И ТаблицаДоверители.ТипДоверителя В (&ТипыДоверителей)
		|	И ТаблицаПредставители.ТипПредставителя В (&ТипыПредставителей)
		|	И &ДополнительныйОтбор
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МЧД003Передоверие.Ссылка КАК МЧД
		|ИЗ
		|	Справочник.МЧД003 КАК МЧД003Передоверие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Представители КАК ТаблицаПредставители
		|		ПО МЧД003Передоверие.Ссылка = ТаблицаПредставители.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Доверители КАК ТаблицаДоверители
		|		ПО МЧД003Передоверие.НомерРодительскойДоверенности = ТаблицаДоверители.Ссылка.НомерДоверенности
		|ГДЕ
		|	НЕ МЧД003Передоверие.ПометкаУдаления
		|	И НЕ МЧД003Передоверие.СовместныеПолномочия
		|	И НЕ МЧД003Передоверие.НомерРодительскойДоверенности = """"
		|	И ТаблицаДоверители.ТипДоверителя В (&ТипыДоверителей)
		|	И ТаблицаПредставители.ТипПредставителя В (&ТипыПредставителей)
		|	И &ДополнительныйОтбор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МЧД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВыбранныеМЧД.МЧД КАК Ссылка,
		|	МЧД003.НомерДоверенности КАК НомерДоверенности,
		|	МЧД003.ДатаВыдачи КАК ДатаВыдачи,
		|	МЧД003.СрокДействия КАК ДатаОкончания,
		|	МЧД003.ДатаПрекращения > ДАТАВРЕМЯ(1, 1, 1) КАК Отозвана,
		|	МЧД003.ДатаПрекращения КАК ДатаОтзыва,
		|	МЧД003.ПолномочияОграничены КАК ПолномочияОграничены,
		|	МЧД003.ТекстовоеПолномочие КАК ТекстовоеПолномочие,
		|	МЧД003.ФайлМЧД КАК ФайлМЧД,
		|	МЧД003.Верна КАК Верна,
		|	МЧД003.Представление КАК Представление,
		|	МЧД003.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
		|	МЧД003.ВариантЗаполненияПолномочий = ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор) КАК
		|		ПолномочияУказаныИзКлассификатора,
		|	ЕСТЬNULL(ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки,
		|		ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка)) КАК ПравилоПроверки,
		|	МЧД003Доверители.ИНН КАК ИННДоверителя,
		|	МЧД003.ИННДоверителяРодительскойДоверенности КАК ИННДоверителяРодительскойДоверенности,
		|	МЧД003Доверители.КПП КАК КППДоверителя
		|ИЗ
		|	ВыбранныеМЧД КАК ВыбранныеМЧД
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003 КАК МЧД003
		|		ПО ВыбранныеМЧД.МЧД = МЧД003.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|		ПО ВыбранныеМЧД.МЧД = МЧД003Доверители.Ссылка
		|		И МЧД003Доверители.НомерСтроки = 1
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
		|		ПО ВыбранныеМЧД.МЧД = ПравилаПроверкиПолномочийПоМЧД.Доверенность";
	
	// Подготовка входных параметров
	ДоверительИНН    = СокрЛП(Доверитель.ИНН);
	ДоверительКПП    = СокрЛП(Доверитель.КПП);
	ПредставительИНН = СокрЛП(Представитель.ИНН);
	ПредставительКПП = СокрЛП(Представитель.КПП);
	
	ТипыДоверителейДляОтбора = Новый Массив(); // Массив Из Строка
	ТипыПредставителейДляОтбора = Новый Массив(); // Массив Из Строка
	
	ТипыДоверителей = ТипыДоверителей();
	ТипыПредставителей = ТипыПредставителей();
	
	Если СтрДлина(ДоверительИНН) = 12 Тогда
		ТипыДоверителейДляОтбора.Добавить(ТипыДоверителей.ИндивидуальныйПредприниматель);
		ТипыДоверителейДляОтбора.Добавить(ТипыДоверителей.ФизическоеЛицо);
	ИначеЕсли СтрДлина(ДоверительИНН) = 10 Тогда
		ТипыДоверителейДляОтбора.Добавить(ТипыДоверителей.ЮридическоеЛицо);
	КонецЕсли;
	
	Если СтрДлина(ПредставительИНН) = 12 Тогда
		ТипыПредставителейДляОтбора.Добавить(ТипыПредставителей.ИндивидуальныйПредприниматель);
		ТипыПредставителейДляОтбора.Добавить(ТипыПредставителей.ФизическоеЛицо);
	ИначеЕсли СтрДлина(ПредставительИНН) = 10 Тогда
		ТипыПредставителейДляОтбора.Добавить(ТипыПредставителей.ЮридическоеЛицо);
		Если ЗначениеЗаполнено(ПредставительКПП) Тогда
			ТипыПредставителейДляОтбора.Добавить(ТипыПредставителей.ФилиалЮридическогоЛица);
		КонецЕсли;
	КонецЕсли;
	
	// Фиксированные параметры запроса
	Запрос.УстановитьПараметр("ТипыДоверителей", ТипыДоверителейДляОтбора);
	Запрос.УстановитьПараметр("ТипыПредставителей", ТипыПредставителейДляОтбора);
	
	// Динамические условия запроса
	ТекстыУсловий = Новый Массив;
	Если Не ПустаяСтрока(ДоверительИНН) Тогда
		Запрос.УстановитьПараметр("ДоверительИНН", ДоверительИНН);
		ТекстыУсловий.Добавить("ТаблицаДоверители.ИНН = &ДоверительИНН");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДоверительКПП) Тогда
		Запрос.УстановитьПараметр("ДоверительКПП", ДоверительКПП);
		
		ТекстыУсловияКПП = Новый Массив;
		ТекстыУсловияКПП.Добавить("ТаблицаДоверители.КПП = &ДоверительКПП");
		
		МаскиКППГоловнойОрганизации = МашиночитаемыеДоверенности.МаскиКППГоловнойОрганизации();
		Для Каждого Маска Из МаскиКППГоловнойОрганизации Цикл
			ТекстыУсловияКПП.Добавить(СтрШаблон("ТаблицаДоверители.КПП ПОДОБНО ""%1""",
				Маска));
		КонецЦикла;
		ТекстыУсловий.Добавить("(" + МашиночитаемыеДоверенности.ТекстОтбора(ТекстыУсловияКПП, " ИЛИ ") + ")");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставительИНН) Тогда
		Запрос.УстановитьПараметр("ПредставительИНН", ПредставительИНН);
		ТекстыУсловий.Добавить("ТаблицаПредставители.ИНН = &ПредставительИНН");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставительКПП) Тогда
		Запрос.УстановитьПараметр("ПредставительКПП", ПредставительКПП);
		ТекстыУсловий.Добавить("ТаблицаПредставители.КПП = &ПредставительКПП");
	КонецЕсли;
	
	// Формируем тексты отбора
	ТекстУсловий = МашиночитаемыеДоверенности.ТекстОтбора(ТекстыУсловий);
	
	// Подставляем условия в запрос
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтбор", ТекстУсловий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаМЧД = МашиночитаемыеДоверенности.НоваяТаблицаДоверенностей();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МодульМашиночитаемыеДоверенности = ОбщегоНазначения.ОбщийМодуль("МашиночитаемыеДоверенности");
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваДоверенности = МодульМашиночитаемыеДоверенности.НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);

		ДоверенностьДействует = МодульМашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности,
			ДействительныеНаДату);
		
		Если Не ДоверенностьДействует Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыМЧД = ТаблицаМЧД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыМЧД, Выборка);
		
	КонецЦикла;
	
	ТаблицаМЧД.Сортировать("ДатаВыдачи УБЫВ");
	
	Возврат ТаблицаМЧД;
	
КонецФункции

// Возвращает подписи доверенности
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Массив из ДвоичныеДанные
//  
Функция ПодписиДоверенности(МЧД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МЧД003Подписи.Подпись
		|ИЗ
		|	Справочник.МЧД003.Подписи КАК МЧД003Подписи
		|ГДЕ
		|	МЧД003Подписи.Ссылка = &МЧД
		|
		|УПОРЯДОЧИТЬ ПО
		|	МЧД003Подписи.НомерСтроки";
	
	Запрос.УстановитьПараметр("МЧД", МЧД);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Подпись.Получить());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Формирует данные доверенности для транспортного контейнера.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности
Функция ДанныеДоверенностиДляКонтейнера(Доверенность) Экспорт
	
	ИмяФайлаБезРасширения = ПолучитьИмяФайлаМЧД(Доверенность);
	Реквизиты = "ФайлМЧД, ДатаВыдачи, СрокДействия, НомерДоверенности, Доверители, СтатусВРеестреФНС";
	СвойстваДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, Реквизиты);
	
	ДанныеДоверенности = ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности();
	ДанныеДоверенности.ЭтоФайловаяДоверенность = Не ЗначениеЗаполнено(СвойстваДоверенности.СтатусВРеестреФНС)
		Или СвойстваДоверенности.СтатусВРеестреФНС = Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации;
		
	Если ДанныеДоверенности.ЭтоФайловаяДоверенность Тогда
		ДанныеДоверенности.Доверенность.ДвоичныеДанные = СвойстваДоверенности.ФайлМЧД.Получить();
		ДанныеДоверенности.Доверенность.ИмяФайла = ИмяФайлаБезРасширения + ".xml";
		ДанныеДоверенности.Подпись.ДвоичныеДанные = ПодписиДоверенности(Доверенность)[0];
		ДанныеДоверенности.Подпись.ИмяФайла = ИмяФайлаБезРасширения + ".p7s";
	КонецЕсли;
	ДанныеДоверенности.ДатаВыдачи = СвойстваДоверенности.ДатаВыдачи;
	ДанныеДоверенности.ДатаОкончания = СвойстваДоверенности.СрокДействия;
	
	ДанныеДоверенности.НомерДоверенности = СвойстваДоверенности.НомерДоверенности;
	
	ВыборкаДоверители = СвойстваДоверенности.Доверители.Выбрать();
	Пока ВыборкаДоверители.Следующий() Цикл
		ДанныеДоверенности.ДоверительИНН = ВыборкаДоверители.ИНН;
		Прервать;
	КонецЦикла;
	
	ДанныеДоверенности.СсылкаНаРеестр = МашиночитаемыеДоверенности.СведенияОбИнформационнойСистеме();
	ДанныеДоверенности.СсылкаНаДоверенностьВРеестре = 
		МашиночитаемыеДоверенности.СсылкаНаДоверенностьВРаспределенномРеестреФНС(СвойстваДоверенности.НомерДоверенности);
	
	Возврат ДанныеДоверенности;
	
КонецФункции

// Ищет доверенности
// 
// Параметры:
//  НомерДоверенности - Строка
//  ИННДоверителя - Строка
//  ВключаяПомеченныеНаУдаление - Булево
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.МЧД003
Функция НайтиДоверенности(НомерДоверенности, ИННДоверителя = "", ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МЧД003Доверители.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МЧД003.Доверители КАК МЧД003Доверители
		|ГДЕ
		|	МЧД003Доверители.Ссылка.НомерДоверенности = &НомерДоверенности
		|	И МЧД003Доверители.Ссылка.Подписана
		|	И НЕ (&ИНН > """"
		|	И МЧД003Доверители.ИНН <> &ИНН)
		|	И (&ВключаяПомеченныеНаУдаление ИЛИ НЕ МЧД003Доверители.Ссылка.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВключаяПомеченныеНаУдаление", ВключаяПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("ИНН", ИННДоверителя);
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Формирует представление полномочия
// 
// Параметры:
//  Код          - Строка
//  Наименование - Строка
// 
// Возвращаемое значение:
//  Строка - сформированное по шаблону представление
//
Функция СформироватьПредставлениеПолномочия(Код, Наименование) Экспорт
	
	Возврат СтрШаблон("%1; %2", Код, Наименование);
	
КонецФункции

// Получает данные МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//
Функция ПолучитьДанныеМЧД(МЧД) Экспорт

	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД,
		"НомерДоверенности, Доверители");
	ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = РеквизитыМЧД.НомерДоверенности;
	
	ВыборкаДоверители = РеквизитыМЧД.Доверители.Выбрать();
	Пока ВыборкаДоверители.Следующий() Цикл
		ДанныеМЧД.ИННДоверителя = ВыборкаДоверители.ИНН;
		Прервать;
	КонецЦикла;

	Возврат ДанныеМЧД;
	
КонецФункции

// Возвращает идентификатор машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка - Идентификатор машиночитаемой доверенности.
//
Функция ПолучитьИдентификаторМЧД(Ссылка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
КонецФункции

#Область ПредставлениеДоверенности

// Возвращает табличный документ МЧД.
// 
// Параметры:
//  ДоверенностьXDTO - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
// 
// Возвращаемое значение:
//   ТабличныйДокумент - ТабличныйДокумент -  табличный документ МЧД
//
Функция ТабличныйДокументМЧД(ДоверенностьXDTO) Экспорт

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ИмяМакета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("КарточкаМЧД_%1", 
		ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = ПолучитьМакет(ИмяМакета);
	
	ДокументXDTO = ДоверенностьXDTO.Документ;
	
	ДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументXDTO, "Довер", Неопределено);
	Если ДоверXDTO <> Неопределено Тогда
		ВывестиДоверенность(ТабличныйДокумент, Макет, ДоверXDTO);
	КонецЕсли; 
	
	ПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументXDTO, "Передов", Неопределено);
	Если ПередовXDTO <> Неопределено Тогда
		ВывестиПередоверие(ТабличныйДокумент, Макет, ПередовXDTO);
	КонецЕсли;	
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ВывестиДоверенность(ТабличныйДокумент, Макет, Доверенность)
	
	ТипыДоверителей = ТипыДоверителей();
	ТипыПредставителей = ТипыПредставителей();
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	
	ВывестиШапку(ТабличныйДокумент, Макет, Доверенность.СвДов);
	
	СвДоверитXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "СвДоверит", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвДоверитXDTO.Количество() > 1, НСтр("ru='Сведения о доверителях'"), НСтр("ru='Сведения о доверителе'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);	
	
	Для Каждого ДоверительXDTO Из СвДоверитXDTO Цикл	
		
		Если ДоверительXDTO.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
						
			СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.РосОргДовер.СвРосОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвРосОргXDTO);
			
			ЛицоБезДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.РосОргДовер.ЛицоБезДов", , , Истина);
			
			Для Каждого ЛицоБезДоверенностиXDTO Из ЛицоБезДовXDTO Цикл
				ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенностиXDTO);
			КонецЦикла;
			
		ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИностраннаяОрганизация Тогда	
			
			СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИнОргДовер.СвИнОрг");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СвИнОргXDTO);
			
			СвРукОПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИнОргДовер.СвРукОП", , , Истина);
			
			Для Каждого РуководительXDTO Из СвРукОПXDTO Цикл
				
				Заголовок = НСтр("ru='Сведения о подписанте'");
				ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
				ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
				
				ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, РуководительXDTO);
				
			КонецЦикла;	
			
		ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
			
			ИПДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ИПДовер");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИПДоверXDTO);
			
		ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ФизическоеЛицо Тогда	
			
			Заголовок = НСтр("ru='Сведения о подписанте'");
			ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);

			ФЛДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "Доверит.ФЛДовер");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФЛДоверXDTO);
						
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;	
	
	СвУпПредXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "СвУпПред", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвУпПредXDTO.Количество() > 1, НСтр("ru='Сведения о представителях'"), НСтр("ru='Сведения о представителе'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);	
		
	Для Каждого ПредставительXDTO Из СвУпПредXDTO Цикл

		Если ПредставительXDTO.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда

			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведОргXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	

			СведИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИП");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, СведИПXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда	
			
			Заголовок = НСтр("ru='Сведения о доверенном лице'");
			ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			СведФизЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФизЛ");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СведФизЛXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
			
			СведФилиалXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФилиал");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведФилиалXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
			
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИО");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СведИОXDTO);
			
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о полномочиях'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	
	ВывестиПолномочия(ТабличныйДокумент, Макет, Доверенность.СвПолн);
	ТабличныйДокумент.Вывести(ОбластьРазделитель);
	
	СвНотУдXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "СвНотУд", Неопределено); 
	Если СвНотУдXDTO <> Неопределено Тогда
		
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариальном удостоверении'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		
		ВывестиНотариальноеУдостоверение(ТабличныйДокумент, Макет, СвНотУдXDTO);
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВывестиПередоверие(ТабличныйДокумент, Макет, Передоверие)
	
	ТипыПредставителей = ТипыПредставителей();
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	ВывестиШапку(ТабличныйДокумент, Макет, Передоверие.СвПереДовер);
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о первоначальной доверенности'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	ВывестиСведенияПервоначальнойДоверенности(ТабличныйДокумент, Макет, Передоверие.СвПервДовер);
	
    СвПередовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвПередов", Неопределено);
	Если СвПередовXDTO <> Неопределено Тогда
		
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о доверенности, на основании которой осуществляется передоверие'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиСведенияПервоначальнойДоверенности(ТабличныйДокумент, Макет, СвПередовXDTO);
		
	КонецЕсли;	
	
	СвПередПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвПередПолн", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвПередПолнXDTO.Количество() > 1, НСтр("ru='Лица, передавшие полномочия'"), НСтр("ru='Лицо, передавшее полномочия'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);
	
	Для Каждого ПредставительXDTO Из СвПередПолнXDTO Цикл
		
		Если ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ЮридическоеЛицо Тогда
			
			СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.РосОргПерПолн.СвРосОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвРосОргXDTO);
			
			ЛицоБезДовXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.РосОргПерПолн.ЛицоБезДов", , , Истина);
			
			ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
			ПроизвольныйЗаголовок.Параметры.Заголовок = 
				?(ЛицоБезДовXDTO.Количество() > 1, НСтр("ru='Представители'"), НСтр("ru='Представитель'"));
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			Для Каждого ЛицоБезДоверенностиXDTO Из ЛицоБезДовXDTO Цикл
				ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенностиXDTO);
			КонецЦикла;
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	
			
			ИППерПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ИППерПолн");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИППерПолнXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ФизическоеЛицо Тогда	
			
			ФЛПерПолнЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ФЛПерПолн");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФЛПерПолнЛXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
			
			СвФилXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ФилПерПолн.СвФил");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвФилXDTO);
			
			ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
			ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Руководитель филиала (обособленного подразделения) юридического лица'");
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			СвРукФилXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ФилПерПолн.СвРукФил");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СвРукФилXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПерПолн = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
			
			СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ИнПерПолн.СвИнОрг");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СвИнОргXDTO);
			
			СвРукОПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "ПередПолн.ИнПерПолн.СвРукОП", , , Истина);
			
			ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
			ПроизвольныйЗаголовок.Параметры.Заголовок = 
				?(СвРукОПXDTO.Количество() > 1, НСтр("ru='Сведения о руководителях'"), НСтр("ru='Сведения о руководителе'"));
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			Для Каждого РуководительXDTO Из СвРукОПXDTO Цикл
				ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, РуководительXDTO);
			КонецЦикла;
			
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;
	
	СвПолучПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвПолучПолн", , , Истина);
	
	ЗаголовокОбласти = Макет.ПолучитьОбласть("ЗаголовокОбласти");
	ЗаголовокОбласти.Параметры.ТекстЗаголовка = 
		?(СвПолучПолнXDTO.Количество() > 1, НСтр("ru='Лица, получившие полномочия'"), НСтр("ru='Лицо, получившее полномочия'"));
	ТабличныйДокумент.Вывести(ЗаголовокОбласти);
	
	Для Каждого ПредставительXDTO Из СвПолучПолнXDTO Цикл
		
		Если ПредставительXDTO.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
			
			СведОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведОрг");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведОргXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда	
			
			СведИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИП");
			ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, СведИПXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда	
			
			СведФизЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФизЛ");
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СведФизЛXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалЮридическогоЛица Тогда	
			
			СведФилиалXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведФилиал");
			ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СведФилиалXDTO);
			
		ИначеЕсли ПредставительXDTO.ТипПред = ТипыПредставителей.ФилиалИностраннойОрганизации Тогда
			
			СведИОXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПредставительXDTO, "Пред.СведИО");
			ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СведИОXDTO);
			
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьРазделитель);
		
	КонецЦикла;	
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о полномочиях'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	
	ВывестиПолномочия(ТабличныйДокумент, Макет, Передоверие.СвПолн);
	ТабличныйДокумент.Вывести(ОбластьРазделитель);
	
	СвНотУдXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Передоверие, "СвНотУд", Неопределено); 
	Если СвНотУдXDTO <> Неопределено Тогда
		
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариальном удостоверении'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		
		ВывестиНотариальноеУдостоверение(ТабличныйДокумент, Макет, СвНотУдXDTO);
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВывестиШапку(ТабличныйДокумент, Макет, Доверенность)
	
	ВидДоверенностиXDTO = Новый Соответствие();
	ВидДоверенностиXDTO.Вставить("1", НСтр("ru='С возможностью отзыва'"));
	ВидДоверенностиXDTO.Вставить("2", НСтр("ru='Без возможности отзыва'"));
	
	ПередовериеДоверенностиXDTO = Новый Соответствие();
	ПередовериеДоверенностиXDTO.Вставить("1", НСтр("ru='Без права передоверия'"));
	ПередовериеДоверенностиXDTO.Вставить("2", НСтр("ru='Однократное передоверие'"));
	ПередовериеДоверенностиXDTO.Вставить("3", НСтр("ru='С правом передоверия'"));
	
	ПередовериеБезотзывнойДоверенностиXDTO = Новый Соответствие();
	ПередовериеБезотзывнойДоверенностиXDTO.Вставить("1", НСтр("ru='С возможностью передоверия'"));
	ПередовериеБезотзывнойДоверенностиXDTO.Вставить("2", НСтр("ru='Невозможно'"));
	
	УсловиеОтзываБезотзывнойДоверенностиXDTO = Новый Соответствие();
	УсловиеОтзываБезотзывнойДоверенностиXDTO.Вставить("1", НСтр("ru='По истечению срока действия'"));
	УсловиеОтзываБезотзывнойДоверенностиXDTO.Вставить("2", НСтр("ru='По условию'"));
	
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.НомерДоверенности = Доверенность.НомДовер;
	Шапка.Параметры.ДатаВыдачи = Доверенность.ДатаВыдДовер;
	Шапка.Параметры.СрокДействия = Доверенность.СрокДейст;
	Шапка.Параметры.ВидДоверенности = ВидДоверенностиXDTO[Доверенность.ВидДовер];
	Шапка.Параметры.ПравоПередоверия = ПередовериеДоверенностиXDTO[Доверенность.ПрПередов];
	ТабличныйДокумент.Вывести(Шапка);
	
	БезотзывXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "Безотзыв", Неопределено);
	Если БезотзывXDTO <> Неопределено Тогда
		
		БезотзывнаяДоверенность = Макет.ПолучитьОбласть("БезотзывнаяДоверенность");
		БезотзывнаяДоверенность.Параметры.ПравоПередоверия = ПередовериеБезотзывнойДоверенностиXDTO[БезотзывXDTO.ПрПерБезДов];
		БезотзывнаяДоверенность.Параметры.УсловиеОтзыва = УсловиеОтзываБезотзывнойДоверенностиXDTO[БезотзывXDTO.УслОтзыва];
		ТабличныйДокумент.Вывести(БезотзывнаяДоверенность);
		
		Если БезотзывXDTO.УслОтзыва = "2" Тогда
			УсловиеОтзываБезотзывнойДоверенности = Макет.ПолучитьОбласть("УсловиеОтзываБезотзывнойДоверенности");
			УсловиеОтзываБезотзывнойДоверенности.Параметры.УсловиеОтзыва =
				РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(БезотзывXDTO, "ОписУслОт", "");
			ТабличныйДокумент.Вывести(УсловиеОтзываБезотзывнойДоверенности);
		КонецЕсли;	
		
	КонецЕсли
	
КонецПроцедуры	

Процедура ВывестиСведенияПервоначальнойДоверенности(ТабличныйДокумент, Макет, ПервоначальнаяДоверенность)
	
	ТипыДоверителей = ТипыДоверителей();
	
	ТипДоверенностиXDTO = Новый Соответствие();
	ТипДоверенностиXDTO.Вставить("1", НСтр("ru='Первоначальная доверенность'"));
	ТипДоверенностиXDTO.Вставить("2", НСтр("ru='Доверенность, выданная в порядке передоверия'"));
	
	ФормаДоверенностиXDTO = Новый Соответствие();
	ФормаДоверенностиXDTO.Вставить("1", НСтр("ru='В электронной форме в машиночитаемом виде'"));
	ФормаДоверенностиXDTO.Вставить("2", НСтр("ru='На бумажном носителе'"));
	
	НомДоверПерв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "НомДоверПерв", "");
	Если Не ПустаяСтрока(НомДоверПерв) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Номер первоначальной доверенности'"); 
		ПроизвольныеСведения.Параметры.Текст = НомДоверПерв;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	// АПК:216-выкл не проверяем смесь латиницы и кириллицы для НомДоверN.
	
	НомДоверN = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "НомДоверN", "");
	Если Не ПустаяСтрока(НомДоверN) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Номер доверенности, на основании которой осуществляется передоверие'"); 
		ПроизвольныеСведения.Параметры.Текст = НомДоверN;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
		
	// АПК:216-вкл включаем проверку обратно.
	
	СведенияПервоначальнойДоверенности = Макет.ПолучитьОбласть("СведенияПервоначальнойДоверенности");
	СведенияПервоначальнойДоверенности.Параметры.ДатаВыдачи = ПервоначальнаяДоверенность.ДатаВыдДовер;
	СведенияПервоначальнойДоверенности.Параметры.СрокДействия = ПервоначальнаяДоверенность.СрокДейст;
	СведенияПервоначальнойДоверенности.Параметры.ТипДоверенности = ТипДоверенностиXDTO[ПервоначальнаяДоверенность.ПрДовер];	
	СведенияПервоначальнойДоверенности.Параметры.ФормаДоверенности = ФормаДоверенностиXDTO[ПервоначальнаяДоверенность.ФормДовер];
	ТабличныйДокумент.Вывести(СведенияПервоначальнойДоверенности);	
	
	ОбластьРазделитель = Макет.ПолучитьОбласть("Разделитель");
	
	СвДоверПервXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "СвДоверПерв", Неопределено, , Истина);
	Если СвДоверПервXDTO <> Неопределено Тогда
		Для Каждого ДоверительXDTO Из СвДоверПервXDTO Цикл	
		
			Если ДоверительXDTO.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
				
				СвРосОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.РосОргДовер");
				
				ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СвРосОргXDTO);
				
			ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИностраннаяОрганизация Тогда	
				
				СвИнОргXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИнОргДовер.СвИнОрг");
				ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, СвИнОргXDTO);
				
				СвРукОПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИнОргДовер.СвРукОП", , , Истина);
				
				ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
				ПроизвольныйЗаголовок.Параметры.Заголовок = 
					?(СвРукОПXDTO.Количество() > 1, НСтр("ru='Сведения о руководителях'"), НСтр("ru='Сведения о руководителе'"));
				ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
				
				Для Каждого РуководительXDTO Из СвРукОПXDTO Цикл
					ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, РуководительXDTO);
				КонецЦикла;	
				
			ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
				
				ИПДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ИПДовер");
				ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИПДоверXDTO);
				
			ИначеЕсли ДоверительXDTO.ТипДоверит = ТипыДоверителей.ФизическоеЛицо Тогда	
				
				ФЛДоверXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДоверительXDTO, "ДоверитПерв.ФЛДовер");
				ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ФЛДоверXDTO);
							
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьРазделитель);
			
		КонецЦикла;
	КонецЕсли;	
	
	СвНотДействXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "СвНотДейств", Неопределено);
	Если СвНотДействXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариусе'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиНотариуса(ТабличныйДокумент, Макет, СвНотДействXDTO);
	КонецЕсли;
	
	ВриоНотXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПервоначальнаяДоверенность, "ВриоНот", Неопределено);
	Если ВриоНотXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о ВРИО нотариуса'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиНотариуса(ТабличныйДокумент, Макет, ВриоНотXDTO, Истина);
	КонецЕсли;

КонецПроцедуры	
	
Процедура ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, ЮридическоеЛицо)

	СведенияЮридическогоЛица = Макет.ПолучитьОбласть("СведенияЮридическогоЛица");
	СведенияЮридическогоЛица.Параметры.Наименование = ЮридическоеЛицо.НаимОрг;
	СведенияЮридическогоЛица.Параметры.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "ИННЮЛ", "");
	СведенияЮридическогоЛица.Параметры.КПП = ЮридическоеЛицо.КПП;
	СведенияЮридическогоЛица.Параметры.ОГРН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "ОГРН", "");
	ТабличныйДокумент.Вывести(СведенияЮридическогоЛица);
	
	АдрРегXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "АдрРег", Неопределено);
	Если АдрРегXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрРегXDTO);
	КонецЕсли;
	
	ДокПдтвXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЮридическоеЛицо, "ДокПдтв", Неопределено);
	Если ДокПдтвXDTO <> Неопределено Тогда
		ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокПдтвXDTO);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВывестиСведенияИностранногоЮридическогоЛица(ТабличныйДокумент, Макет, ИностранноеЮридическоеЛицо)

	СведенияИностранногоЮридическогоЛица = Макет.ПолучитьОбласть("СведенияИностранногоЮридическогоЛица");
	СведенияИностранногоЮридическогоЛица.Параметры.Наименование = ИностранноеЮридическоеЛицо.НаимИО;
	СведенияИностранногоЮридическогоЛица.Параметры.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИностранноеЮридическоеЛицо, "ИННЮЛ", "");
	СведенияИностранногоЮридическогоЛица.Параметры.КПП = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИностранноеЮридическоеЛицо, "КПП", "");
	ТабличныйДокумент.Вывести(СведенияИностранногоЮридическогоЛица);
	
	АдрМНФактXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностранногоЮридическогоЛица, "АдрМНФакт", Неопределено);
	Если АдрМНФактXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрМНФактXDTO);
	КонецЕсли;
	
	АдрСтрРег = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведенияИностранногоЮридическогоЛица, "АдрСтрРег", "");
	Если Не ПустаяСтрока(АдрСтрРег) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Адрес юр. лица на территории государства, в котором оно зарегистрировано'"); 
		ПроизвольныеСведения.Параметры.Текст = АдрСтрРег;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;	
		
КонецПроцедуры

Процедура ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, ИндивидуальныйПредприниматель)

	СведенияИндивидуальногоПредпринимателя = Макет.ПолучитьОбласть("СведенияИндивидуальногоПредпринимателя");
	СведенияИндивидуальногоПредпринимателя.Параметры.Наименование =
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИндивидуальныйПредприниматель, "НаимИП", "");
	СведенияИндивидуальногоПредпринимателя.Параметры.ИНН = ИндивидуальныйПредприниматель.ИННФЛ;	
	СведенияИндивидуальногоПредпринимателя.Параметры.ОГРН = ИндивидуальныйПредприниматель.ОГРНИП;
	СведенияИндивидуальногоПредпринимателя.Параметры.СНИЛС = ИндивидуальныйПредприниматель.СНИЛС;
	
	СведФЛXDTO = ИндивидуальныйПредприниматель.СведФЛ;
	СведенияИндивидуальногоПредпринимателя.Параметры.ФИО = 
		МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(СведФЛXDTO.ФИО);
	
	Если СведенияИндивидуальногоПредпринимателя.Параметры.Наименование = ""
		И СведенияИндивидуальногоПредпринимателя.Параметры.ФИО <> "" Тогда
			СведенияИндивидуальногоПредпринимателя.Параметры.Наименование = 
				СведенияИндивидуальногоПредпринимателя.Параметры.ФИО;
	КонецЕсли;
	
	СведенияИндивидуальногоПредпринимателя.Параметры.ДатаРождения = 
		РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "ДатаРожд", '00010101');
	ТабличныйДокумент.Вывести(СведенияИндивидуальногоПредпринимателя);
	
	АдрМЖXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "АдрМЖ", Неопределено);
	Если АдрМЖXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрМЖXDTO);
	КонецЕсли;
	
	УдЛичнФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "УдЛичнФЛ", Неопределено);
	Если УдЛичнФЛXDTO <> Неопределено Тогда
		ВывестиУдостоверениеЛичности(ТабличныйДокумент, Макет, УдЛичнФЛXDTO);
	КонецЕсли;
	
	ДокПдтвXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ИндивидуальныйПредприниматель, "ДокПдтв", Неопределено);
	Если ДокПдтвXDTO <> Неопределено Тогда
		ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокПдтвXDTO);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФизическоеЛицо)
	
	СведФЛXDTO = ФизическоеЛицо.СведФЛ;
	СведенияФизическогоЛица = Макет.ПолучитьОбласть("СведенияФизическогоЛица");
	СведенияФизическогоЛица.Параметры.ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(СведФЛXDTO.ФИО);
	СведенияФизическогоЛица.Параметры.ДатаРождения = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "ДатаРожд", '00010101');
	СведенияФизическогоЛица.Параметры.ИНН = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "ИННФЛ", "");
	СведенияФизическогоЛица.Параметры.СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "СНИЛС", "");
	СведенияФизическогоЛица.Параметры.Должность = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "Должность", "");
	ТабличныйДокумент.Вывести(СведенияФизическогоЛица);
	
	АдрМЖXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "АдрМЖ", Неопределено);
	Если АдрМЖXDTO <> Неопределено Тогда
		ВывестиАдрес(ТабличныйДокумент, Макет, АдрМЖXDTO);
	КонецЕсли;
	
	УдЛичнФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СведФЛXDTO, "УдЛичнФЛ", Неопределено);
	Если УдЛичнФЛXDTO <> Неопределено Тогда
		ВывестиУдостоверениеЛичности(ТабличныйДокумент, Макет, УдЛичнФЛXDTO);
	КонецЕсли;
	
	ДокПдтвXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "ДокПдтв", Неопределено);
	Если ДокПдтвXDTO <> Неопределено Тогда
		ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокПдтвXDTO);
	КонецЕсли;
	
	СведРукопXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ФизическоеЛицо, "СведРукоп", Неопределено);
	Если СведРукопXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Рукоприкладчик'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СведРукопXDTO);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЛицоБезДоверенности(ТабличныйДокумент, Макет, ЛицоБезДоверенности)
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	
	СВЮЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СВЮЛ", Неопределено);
	Если СВЮЛXDTO <> Неопределено Тогда
		
		Заголовок = НСтр("ru='Сведения о лице, действующем без доверенности'");
		ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		
		ВывестиСведенияЮридическогоЛица(ТабличныйДокумент, Макет, СВЮЛXDTO.СвЮЛЕИО);
		СвФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СВЮЛXDTO, "СвФЛ", , , Истина);
		Для Каждого ФизическоеЛицоXDTO Из СвФЛXDTO Цикл
			
			Заголовок = НСтр("ru='Сведения о подписанте'");
			ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
			ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
			
			ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, ФизическоеЛицоXDTO);							
		КонецЦикла;
	КонецЕсли;
	
	СвФЛXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвФЛ", Неопределено);
	Если СвФЛXDTO <> Неопределено Тогда
		
		Заголовок = НСтр("ru='Сведения о подписанте'");
		ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);

		ВывестиСведенияФизическогоЛица(ТабличныйДокумент, Макет, СвФЛXDTO);
	КонецЕсли;
	
	СвИПXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЛицоБезДоверенности, "СвИП", Неопределено);
	Если СвИПXDTO <> Неопределено Тогда
		
		Заголовок = НСтр("ru='Сведения о лице, действующем без доверенности'");
		ПроизвольныйЗаголовок.Параметры.Заголовок = Заголовок;
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);

		ВывестиСведенияИндивидуальногоПредпринимателя(ТабличныйДокумент, Макет, СвИПXDTO);
	КонецЕсли;
	
	ПолномочияXDTO = Новый Соответствие();
	ПолномочияXDTO.Вставить("1", НСтр("ru='Индивидуальные полномочия'"));
	ПолномочияXDTO.Вставить("2", НСтр("ru='Совместные полномочия'"));
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Вид полномочий единоличного исполнительного органа'"); 
	ПроизвольныеСведения.Параметры.Текст = ПолномочияXDTO[ЛицоБезДоверенности.ПолнЮЛ];
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиАдрес(ТабличныйДокумент, Макет, Адрес)
	
	АдрРФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Адрес, "АдрРФ", "");
	Если Не ПустаяСтрока(АдрРФ) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Адрес в Российской Федерации'"); 
		ПроизвольныеСведения.Параметры.Текст = АдрРФ;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	ФИАСАдрРФ = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Адрес, "ФИАСАдрРФ", "");
	Если Не ПустаяСтрока(ФИАСАдрРФ) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='ФИАС адрес в Российской Федерации'"); 
		ПроизвольныеСведения.Параметры.Текст = ФИАСАдрРФ;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	ИдФИАС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Адрес, "ИдФИАС", "");
	Если Не ПустаяСтрока(ИдФИАС) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Идентификатор адреса по ФИАС'"); 
		ПроизвольныеСведения.Параметры.Текст = ИдФИАС;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиУдостоверениеЛичности(ТабличныйДокумент, Макет, УдостоверениеЛичности)
	
	СерияНомер = СтрРазделить(УдостоверениеЛичности.СерНомДок, " ");
	СерияДокумента = ?(СерияНомер.Количество() > 0, СерияНомер[0], "");
	НомерДокумента = ?(СерияНомер.Количество() > 1, СерияНомер[1], "");
	Если СерияНомер.Количество() > 2 Тогда
		СерияДокумента = УдостоверениеЛичности.СерНомДок;
		НомерДокумента = "";
	КонецЕсли;
	
	ДанныеУдостоверенияЛичности = МашиночитаемыеДоверенности.НовыеДанныеУдостоверенияЛичности();
	ДанныеУдостоверенияЛичности.СерДок = СерияДокумента;
	ДанныеУдостоверенияЛичности.НомДок = НомерДокумента;
	ДанныеУдостоверенияЛичности.ДатаДок = УдостоверениеЛичности.ДатаДок;
	ДанныеУдостоверенияЛичности.ВыдДок = УдостоверениеЛичности.ВыдДок;
	ДанныеУдостоверенияЛичности.ВидДок = УдостоверениеЛичности.КодВидДок;
	ДанныеУдостоверенияЛичности.КодВыдДок = УдостоверениеЛичности.КодВыдДок;
	
	ПредставлениеУдостоверения = МашиночитаемыеДоверенности.ПолучитьПредставлениеУдостоверение(ДанныеУдостоверенияЛичности);
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Документ удостоверяющий личность'"); 
	ПроизвольныеСведения.Параметры.Текст = ПредставлениеУдостоверения;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиДокументПодтверждающийПолномочия(ТабличныйДокумент, Макет, ДокументПодтверждающийПолномочия)
	
	МассивСтрок = Новый Массив;
	
	НаимДокПдтв = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "НаимДокПдтв", "");
	Если Не ПустаяСтрока(НаимДокПдтв) Тогда
		Текст = НСтр("ru = 'Наименование документа'") + ": " + НаимДокПдтв;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;	
	
	ДатаВыд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "ДатаВыд", Неопределено);
	Если ДатаВыд <> Неопределено Тогда
		Текст = НСтр("ru = 'Дата выдачи документа'") + ": " + Формат(ДатаВыд, "ДЛФ=ДД");
		МассивСтрок.Добавить(Текст);
	КонецЕсли;
	
	КемВыд = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "КемВыд", "");
	Если Не ПустаяСтрока(КемВыд) Тогда
		Текст = НСтр("ru = 'Наименование органа, выдавшего документ'") + ": " + КемВыд;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;
	
	СвУдДок = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДокументПодтверждающийПолномочия, "СвУдДок", "");
	Если Не ПустаяСтрока(СвУдДок) Тогда
		Текст = НСтр("ru = 'Сведения об удостоверении документа'") + ": " + СвУдДок;
		МассивСтрок.Добавить(Текст);
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
	    ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Документ, подтверждающий полномочия лица'"); 
		ПроизвольныеСведения.Параметры.Текст = СтрСоединить(МассивСтрок, ". ");
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;	
	
КонецПроцедуры	

// Выводит полномочия в печатную форму МЧД
// 
// Параметры:
//  ТабличныйДокумент - ТабличныйДокумент
//  Макет - см. Справочник.МЧД003.Макет.КарточкаМЧД_ru
//  Полномочия - СписокXDTO Из см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
Процедура ВывестиПолномочия(ТабличныйДокумент, Макет, Полномочия)
	
	ТипыПолномочийXDTO = Новый Структура();
	ТипыПолномочийXDTO.Вставить("Текстовые", "0");
	ТипыПолномочийXDTO.Вставить("Машиночитаемые", "1");
	
	Если Полномочия.ТипПолн = ТипыПолномочийXDTO.Текстовые Тогда
		
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Текстовое содержание полномочия'"); 
		ПроизвольныеСведения.Параметры.Текст =
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочия, "ТекстПолн", "");
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
		
	ИначеЕсли Полномочия.ТипПолн = ТипыПолномочийXDTO.Машиночитаемые Тогда	
		
		МашПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Полномочия, "МашПолн", Неопределено, , Истина);
		Если МашПолнXDTO <> Неопределено Тогда
			
			ПрефиксСтроки = "";
			ПорядковыйНомер = 1;
			МножественныеПолномочия = (МашПолнXDTO.Количество() > 1);
			
			Для Каждого ПолномочиеXDTO Из МашПолнXDTO Цикл
				
				Если Не ЗначениеЗаполнено(ПолномочиеXDTO.КодПолн)
					Или Не ЗначениеЗаполнено(ПолномочиеXDTO.НаимПолн) Тогда
						Продолжить;
				КонецЕсли;
				
				Если МножественныеПолномочия Тогда
					ПрефиксСтроки = СтрШаблон("%1. ", ПорядковыйНомер);
					ПорядковыйНомер = ПорядковыйНомер + 1;
				КонецЕсли;
				
				ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныйТекст");
				ПроизвольныеСведения.Параметры.Текст =
					СтрШаблон("%1%2 %3", ПрефиксСтроки, ПолномочиеXDTO.КодПолн, ПолномочиеXDTO.НаимПолн);
				ТабличныйДокумент.Вывести(ПроизвольныеСведения);
				
				ОгрСвПолнXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ПолномочиеXDTO, "ОгрСвПолн", Неопределено, , Истина);
				Если ОгрСвПолнXDTO <> Неопределено Тогда
					
					МассивОграничений = Новый Массив;
					
					Для Каждого ОграничениеXDTO Из ОгрСвПолнXDTO Цикл	
						
						Текст = Строка(ОграничениеXDTO.ИдОгр) + ". "
							+ НСтр("ru='Код ограничения'") + ": " + ОграничениеXDTO.КодОгр + ", "
							+ НСтр("ru='наименование ограничения'") + ": " + ОграничениеXDTO.НаимОгр;
							
						КодЗначОгр = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОграничениеXDTO, "КодЗначОгр", "");
						Если Не ПустаяСтрока(КодЗначОгр) Тогда
							Текст = Текст + ", " + НСтр("ru='код значения для ограничения'") + ": " + КодЗначОгр;
						КонецЕсли;	
						
						ТексЗначОгр = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОграничениеXDTO, "ТексЗначОгр", "");
						Если Не ПустаяСтрока(ТексЗначОгр) Тогда
							Текст = Текст + ", " + НСтр("ru='текст значение для ограничения'") + ": " + ТексЗначОгр;
						КонецЕсли;
						
						МассивОграничений.Добавить(Текст);
						
					КонецЦикла;
					
					Если МассивОграничений.Количество() > 0 Тогда
						ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
						ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Ограничения к полномочию'"); 
						ПроизвольныеСведения.Параметры.Текст = СтрСоединить(МассивОграничений, Символы.ПС);
						ТабличныйДокумент.Вывести(ПроизвольныеСведения);
					КонецЕсли;
					
				КонецЕсли;	
					
			КонецЦикла;
			
			Разделитель = Макет.ПолучитьОбласть("ПроизвольныйТекст");
			ТабличныйДокумент.Вывести(Разделитель);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Тип полномочий'"); 
	ПроизвольныеСведения.Параметры.Текст = ?(Полномочия.ПрСовмПолн = "2", 
		НСтр("ru='Полномочия осуществляются совместно'"),
		НСтр("ru='Полномочия индивидуальны'"));
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиНотариальноеУдостоверение(ТабличныйДокумент, Макет, НотариальноеУдостоверение)

	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Место совершения доверенности'"); 
	ПроизвольныеСведения.Параметры.Текст = НотариальноеУдостоверение.МестоДовер;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
	ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
	ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о нотариусе'");
	ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
	ВывестиНотариуса(ТабличныйДокумент, Макет, НотариальноеУдостоверение.СвНотДейств);
		
	ВриоНотXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ВриоНот", Неопределено);
	Если ВриоНотXDTO <> Неопределено Тогда
		ПроизвольныйЗаголовок = Макет.ПолучитьОбласть("ПроизвольныйЗаголовок");
		ПроизвольныйЗаголовок.Параметры.Заголовок = НСтр("ru='Сведения о ВРИО нотариуса'");
		ТабличныйДокумент.Вывести(ПроизвольныйЗаголовок);
		ВывестиНотариуса(ТабличныйДокумент, Макет, ВриоНотXDTO, Истина);
	КонецЕсли;	
	
	ДопСвНотДовер = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ДопСвНотДовер", "");
	Если Не ПустаяСтрока(ДопСвНотДовер) Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Дополнительные сведения'"); 
		ПроизвольныеСведения.Параметры.Текст = ДопСвНотДовер;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	ИнСвУдНадпис = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ИнСвУдНадпис", "");
	Если Не ПустаяСтрока(ИнСвУдНадпис) <> Неопределено Тогда
		ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
		ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Иные сведения удостоверительной надписи'"); 
		ПроизвольныеСведения.Параметры.Текст = ИнСвУдНадпис;
		ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	КонецЕсли;
	
	МассивПодписей = Новый Массив;
	ПодпРукописXDTO = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(НотариальноеУдостоверение, "ПодпРукопис", , , Истина);
	Для Каждого ПодписьXDTO Из ПодпРукописXDTO Цикл
		Подпись = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(ПодписьXDTO.ФИООтв);
		МассивПодписей.Добавить(Подпись);
	КонецЦикла;
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = 
		?(ПодпРукописXDTO.Количество() > 1, НСтр("ru='Рукописные подписи'"), НСтр("ru='Рукописная подпись'"));
	ПроизвольныеСведения.Параметры.Текст = СтрСоединить(МассивПодписей, Символы.ПС);
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

Процедура ВывестиНотариуса(ТабличныйДокумент, Макет, Нотариус, ЭтоВРИО = Ложь)
	
	Если ЭтоВРИО Тогда
		ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(Нотариус.ФИОВриоНот);
	Иначе
		ФИО = МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(Нотариус.ФИОНотДейств);
	КонецЕсли;	
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='ФИО'"); 
	ПроизвольныеСведения.Параметры.Текст = ФИО;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Должность'"); 
	ПроизвольныеСведения.Параметры.Текст = Нотариус.Должность;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
	ПроизвольныеСведения = Макет.ПолучитьОбласть("ПроизвольныеСведения");
	ПроизвольныеСведения.Параметры.Заголовок = НСтр("ru='Регистрационный номер в Минюсте'"); 
	ПроизвольныеСведения.Параметры.Текст = Нотариус.РегНомНот;
	ТабличныйДокумент.Вывести(ПроизвольныеСведения);
	
КонецПроцедуры	

// Возвращает текстовое представление полномочий доверенности
// 
// Параметры:
//  Доверенность - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  Строка
//  
Функция ТекстПолномочий(Доверенность) Экспорт
	
	ВариантУказанияПолномочий = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "ВариантЗаполненияПолномочий");
	
	КодыПолномочий = Новый Массив;
	ТекстыПолномочий = Новый Массив;
	
	Если ВариантУказанияПолномочий = Перечисления.ВариантыЗаполненияПолномочийМЧД.Текст Тогда
		ТекстовоеПолномочие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Доверенность, "ТекстовоеПолномочие");
		ТекстыПолномочий.Добавить(ТекстовоеПолномочие);
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МЧД003Полномочия.Код,
			|	МЧД003Полномочия.Наименование
			|ИЗ
			|	Справочник.МЧД003.Полномочия КАК МЧД003Полномочия
			|ГДЕ
			|	МЧД003Полномочия.Ссылка = &Доверенность";
		
		Запрос.УстановитьПараметр("Доверенность", Доверенность);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КодыПолномочий.Добавить(Выборка.Код);
			ПредставлениеПолномочия = СформироватьПредставлениеПолномочия(Выборка.Код, Выборка.Наименование);
			ТекстыПолномочий.Добавить(ПредставлениеПолномочия);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокиПолномочий = Новый Массив();
	
	Если КодыПолномочий.Количество() > 0 Тогда
		СтрокиПолномочий.Добавить(НСтр("ru = 'Коды полномочий:'") + " " + СтрСоединить(КодыПолномочий, ", "));
	КонецЕсли;
	
	Если ТекстыПолномочий.Количество() > 0 Тогда
		
		Если ТекстыПолномочий.Количество() = 1 Тогда
			СтрокиПолномочий.Добавить(ТекстыПолномочий[0]);
		Иначе
			Для Счетчик = 1 По ТекстыПолномочий.Количество() Цикл
				Индекс = Счетчик-1;
				СтрокаПолномочий = СтрШаблон("%1. %2", Счетчик, ТекстыПолномочий[Индекс]);
				СтрокиПолномочий.Добавить(СтрокаПолномочий);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрСоединить(СтрокиПолномочий, Символы.ПС);
	
КонецФункции

#КонецОбласти

#Область РаботаСФорматомМЧД003

#Область ОбщиеМетодыРаботыСXDTOМЧД

// Это значение простого типа.
// 
// Параметры:
//  Значение - Произвольный
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоЗначениеПростогоТипа(Значение)
	
	ТипЗначения = ТипЗнч(Значение);
	
	НаборПростыхТипов = Новый Соответствие();
	НаборПростыхТипов.Вставить(Тип("Строка"), Истина);
	НаборПростыхТипов.Вставить(Тип("Число"), Истина);
	НаборПростыхТипов.Вставить(Тип("Дата"), Истина);
	НаборПростыхТипов.Вставить(Тип("Булево"), Истина);
	
	Возврат (НаборПростыхТипов[ТипЗначения] = Истина);
	
КонецФункции

// Это список XDTO.
// 
// Параметры:
//  Свойство - СвойствоXDTO
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСписокXDTO(Свойство)
	
	Возврат Свойство.ВерхняяГраница <> 1;
	
КонецФункции

// Это объект XDTO.
// 
// Параметры:
//  Свойство - СвойствоXDTO
// 
// Возвращаемое значение:
//  Булево
Функция ЭтоОбъектXDTO(Свойство)
	
	Возврат ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO");
	
КонецФункции

// Это значение XDTOОбязательное для заполнения.
// 
// Параметры:
//  Свойство - СвойствоXDTO
// 
// Возвращаемое значение:
//  Булево
//
Функция ЭтоСвойствоXDTOОбязательноеДляЗаполнения(Свойство)
	
	Возврат Не (Свойство.ВозможноПустое Или Свойство.НижняяГраница < 1);
	
КонецФункции

// Имя базового типа 1C по типу значения XDTO.
// 
// Параметры:
//  ТипXDTO - ТипЗначенияXDTO
// 
// Возвращаемое значение:
//  Строка - Имя базового типа 1С ("Строка", "Число", "Дата")
Функция ИмяПростогоТипаПоТипуXDTO(ТипXDTO)
	
	ИзвестныеТипыXDTO = Новый Соответствие();
	ИзвестныеТипыXDTO["xs:string"] = "Строка";
	ИзвестныеТипыXDTO["xs:date"] = "Дата";
	ИзвестныеТипыXDTO["xs:integer"] = "Число";
	ИзвестныеТипыXDTO["xs:decimal"] = "Число";
	
	ИзвестноеИмя = ИзвестныеТипыXDTO[ТипXDTO.Имя];
	Если ИзвестноеИмя <> Неопределено Тогда
		Возврат ИзвестноеИмя;
	КонецЕсли;
	
	Возврат Строка(ТипXDTO);
	
КонецФункции

// Данные объекта XDTO по пути.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Путь - Строка - Путь в формате <Свойство>.<Субсвойство>.<Субсубсвойство>...
// 
// Возвращаемое значение:
//  Произвольный
Функция ДанныеОбъектаXDTOПоПути(Объект, Путь)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	Если ЧастиПути.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода: путь должен быть в формате <Свойство>.<Субсвойство>.<...>'");
	КонецЕсли;
	
	ТекущийОбъект = Объект;
	Для Каждого ЧастьПути Из ЧастиПути Цикл
		
		Если ТипЗнч(ТекущийОбъект) <> Тип("ОбъектXDTO") Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекущийОбъект, ЧастьПути) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекущийОбъект = ТекущийОбъект[ЧастьПути]; // ОбъектXDTO
		
	КонецЦикла;
	
	Возврат ТекущийОбъект;
	
КонецФункции

#КонецОбласти

#Область ФормированиеОбъектаXDTO

#Область РаботаСОшибкамиФормированияМЧД

// Добавляет ошибку заполнения объекта МЧД.
// 
// Параметры:
//  НаборОшибок - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//  Путь - Строка
//  ТекстОшибки - Строка
//
Процедура ДобавитьОшибкуЗаполненияОбъектаМЧД(НаборОшибок, Путь, ТекстОшибки)
	
	ОшибкиДляПути = НаборОшибок[Путь];
	Если ОшибкиДляПути = Неопределено Тогда
		ОшибкиДляПути = Новый Массив();
		НаборОшибок[Путь] = ОшибкиДляПути;
	КонецЕсли;
	
	ОшибкиДляПути.Добавить(ТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область РекурсивноеЗаполнениеОбъектаXDTOМЧД

// Рекурсивно заполняет XDTO-объект МЧД по данным
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ДанныеОбъекта - Структура
//  ПутьДанныхОбъекта - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
Процедура ЗаполнитьОбъектМЧДРекурсивно(Объект, ДанныеОбъекта, ПутьДанныхОбъекта, ОшибкиЗаполнения)
	
	Для Каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ИмяСвойства = СвойствоОбъекта.Имя;
		Если Не ДанныеОбъекта.Свойство(ИмяСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеСвойства = ДанныеОбъекта[ИмяСвойства]; // Дата, Строка, Массив Из Структура, Дата, Строка
		
		Если Не ЗначениеЗаполнено(ЗначениеСвойства) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоОбъект = ЭтоОбъектXDTO(СвойствоОбъекта);
		ЭтоСписок = ЭтоСписокXDTO(СвойствоОбъекта);
		
		Если Не ЭтоОбъект И Не ЭтоСписок Тогда
			ЗаполнитьСвойствоОбъектаМЧДПростогоТипа(
				Объект, СвойствоОбъекта, ЗначениеСвойства, ПутьДанныхОбъекта, ОшибкиЗаполнения);
		ИначеЕсли Не ЭтоСписок Тогда
			ЗаполнитьСвойствоОбъектаМЧДОбъектногоТипа(
				Объект, СвойствоОбъекта, ЗначениеСвойства, ПутьДанныхОбъекта, ОшибкиЗаполнения);
		ИначеЕсли ЭтоОбъект Тогда 
			ЗаполнитьСписокОбъектаМЧДОбъектногоТипа(
				Объект, СвойствоОбъекта, ЗначениеСвойства, ПутьДанныхОбъекта, ОшибкиЗаполнения);
		Иначе
			ЗаполнитьСписокОбъектаМЧДПростогоТипа(
				Объект, СвойствоОбъекта, ЗначениеСвойства, ПутьДанныхОбъекта, ОшибкиЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет свойство объекта XDTO МЧД простого типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Значение - Строка, Дата -
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
Процедура ЗаполнитьСвойствоОбъектаМЧДПростогоТипа(Объект, СвойствоОбъекта, Значение, Путь, ОшибкиЗаполнения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
	
	Если Не ЭтоЗначениеПростогоТипа(Значение) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Значение свойства МЧД ""%1"" ожидает простой тип (Булево, Дата, Число, Строка), однако передано значение типа %2'"),
			СвойствоОбъекта.Имя, ТипЗнч(Значение));
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Попытка
		Объект.Установить(СвойствоОбъекта, Значение);
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при установке значения свойства ""%1"": %2'"),
			СвойствоОбъекта.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

// Заполнить свойство объекта МЧД объектного типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Значение - Массив Из Структура -
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
Процедура ЗаполнитьСвойствоОбъектаМЧДОбъектногоТипа(Объект, СвойствоОбъекта, Значение, Путь, ОшибкиЗаполнения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
	
	Если ЭтоЗначениеПростогоТипа(Значение) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Значение свойства МЧД ""%1"" ожидает объект типа ""%2"", однако передано значение %3'"),
			СвойствоОбъекта.Имя, СвойствоОбъекта.Тип, Значение);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ДанныеСвойства = Значение[0]; // Структура
	
	Если ЭтоЗначениеПростогоТипа(ДанныеСвойства) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Свойство МЧД ""%1"" ожидает объект типа ""%2"", однако передано значение %3'"),
			СвойствоОбъекта.Имя, СвойствоОбъекта.Тип, ДанныеСвойства);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбъектСвойства = ФабрикаXDTO.Создать(СвойствоОбъекта.Тип);
	ЗаполнитьОбъектМЧДРекурсивно(ОбъектСвойства, ДанныеСвойства, ПутьДанныхСвойства, ОшибкиЗаполнения);
	Объект.Установить(СвойствоОбъекта, ОбъектСвойства);
	
КонецПроцедуры

// Заполнить список объекта МЧД, содержащий объекты.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Значение - Массив Из Структура -
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
Процедура ЗаполнитьСписокОбъектаМЧДОбъектногоТипа(Объект, СвойствоОбъекта, Значение, Путь, ОшибкиЗаполнения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
	
	Если ЭтоЗначениеПростогоТипа(Значение) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Свойство МЧД ""%1"" ожидает список объектов, однако передано значение %2'"),
			СвойствоОбъекта.Имя, Значение);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбъектСписка = Объект.ПолучитьСписок(СвойствоОбъекта.Имя);
	
	ИндексЗначения = 0;
	Для Каждого ДанныеСвойства Из Значение Цикл
		
		Если ДанныеСвойства.Свойство("_Использовать")
			И Не ДанныеСвойства._Использовать = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьДанныхСвойства = СтрШаблон("%1[%2].%3", Путь, ИндексЗначения, СвойствоОбъекта.Имя);
		
		ЭлементСписка = ФабрикаXDTO.Создать(СвойствоОбъекта.Тип);
		ЗаполнитьОбъектМЧДРекурсивно(ЭлементСписка, ДанныеСвойства, ПутьДанныхСвойства, ОшибкиЗаполнения);
		
		Попытка
			ОбъектСписка.Добавить(ЭлементСписка);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при добавление объекта в список ""%1"": %2'"),
				СвойствоОбъекта.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		КонецПопытки;
		
		ИндексЗначения = ИндексЗначения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить список объекта МЧДПростого типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Значение - Массив Из Строка, Дата -
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
// 
Процедура ЗаполнитьСписокОбъектаМЧДПростогоТипа(Объект, СвойствоОбъекта, Значение, Путь, ОшибкиЗаполнения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
	
	Если ЭтоЗначениеПростогоТипа(Значение) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Свойство МЧД ""%1"" ожидает список значений, однако передано значение %2'"),
			СвойствоОбъекта.Имя, Значение);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОбъектСписка = Объект.ПолучитьСписок(СвойствоОбъекта.Имя);
	
	ИндексЗначения = 0;
	Для Каждого ЭлементСписка Из Значение Цикл
		
		ПутьДанныхСвойства = СтрШаблон("%1[%2].%3", Путь, ИндексЗначения, СвойствоОбъекта.Имя);
		
		Попытка
			ОбъектСписка.Добавить(ЭлементСписка);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при добавление значения в список ""%1"": %2'"),
				СвойствоОбъекта.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
		КонецПопытки;
		
		ИндексЗначения = ИндексЗначения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СбросВзаимоисключающихИНеподдериваемыхСвойств

// Сбросить взаимосисключающие и неподдерживаемые свойства XDTOМЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Процедура СброситьВзаимосисключающиеИНеподдерживаемыеСвойстваXDTOМЧДПередоверия(Доверенность)
	
	СброситьНеподдерживаемыеСвойстваПередоверия(Доверенность);
	
	СброситьВзаимоисключающиеСвойстваПередоверияПоПервоночальнойДоверенности(Доверенность);
	Доверенность.Документ.Передов.Сбросить("СвПередов");
	
	Если Доверенность.Документ.Передов.СвПереДовер.ПрПередов <> ПризнакВозможностиПередоверия().ПоследующееПередоверие Тогда
		Доверенность.Документ.Передов.СвПолн.Сбросить("ПрУтрПолн");
	КонецЕсли;
	
	Доверители = Доверенность.Документ.Передов.СвПередПолн; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	Для Каждого Доверитель Из Доверители Цикл
		СброситьВзаимоисключающиеСвойстваДоверителяРоссийскойОрганизацииПередоверия(Доверитель);
		СброситьВзаимоисключающиеСвойстваДоверителяИППередоверия(Доверитель);
		СброситьВзаимоисключающиеСвойстваДоверителяФизЛицаПередоверия(Доверитель);
		СброситьВзаимоисключающиеСвойстваДоверителяИнОргПередоверия(Доверитель);
		СброситьВзаимоисключающиеСвойстваДоверителяФилиалаПередоверия(Доверитель);
	КонецЦикла;
	
	Представители = Доверенность.Документ.Передов.СвПолучПолн; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
	Для Каждого Представитель Из Представители Цикл
		СброситьВзаимоисключающиеСвойстваПредставителяПередоверия(Представитель);
	КонецЦикла;
	
	СброситьВзаимоисключающиеСвойстваПолномочийПередоверия(Доверенность);
	
КонецПроцедуры

// Сбросить неподдерживаемые свойства.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Процедура СброситьНеподдерживаемыеСвойстваПередоверия(Доверенность)
	
	НеподдерживаемыеРеквизиты = НеподдерживаемыеСвойстваМЧД003Передоверия();
	
	Для Каждого ПолныйПуть Из НеподдерживаемыеРеквизиты Цикл
		
		// Удаляем начало "Доверенность."
		ЛокальныйПуть = Прав(ПолныйПуть, СтрДлина(ПолныйПуть) - 13);
		
		СброситьСвойствоОбъектаXDTOРекурсивно(Доверенность, ЛокальныйПуть);
		
	КонецЦикла;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя российского юл.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяРоссийскойОрганизацииПередоверия(Доверитель)
	
	Если Доверитель.ТипПерПолн <> ТипыПредставителей().ЮридическоеЛицо Тогда
		Доверитель.ПередПолн.Сбросить("РосОргПерПолн");
		Возврат;
	КонецЕсли;
	
	БулевыйКлассификатор = КлассификаторДаНет();
	
	РосОргДовер = Доверитель.ПередПолн.РосОргПерПолн;
	ЕстьУК = (РосОргДовер.ЕИОУК = БулевыйКлассификатор.Да);
	ЕстьИП = (РосОргДовер.ЕИОИП = БулевыйКлассификатор.Да);
	ЕстьФЛ = (РосОргДовер.ЕИОФЛ = БулевыйКлассификатор.Да);
	
	Лица = Доверитель.ПередПолн.РосОргПерПолн.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
	
	Для Каждого Лицо Из Лица Цикл
		
		Если Не ЕстьУК Или Лицо.СВЮЛ = Неопределено Тогда
			Лицо.Сбросить("СВЮЛ");
		КонецЕсли;
		
		Если Не ЕстьИП Или Лицо.СвИП = Неопределено Тогда
			Лицо.Сбросить("СвИП");
		КонецЕсли;
		
		Если Не ЕстьФЛ Или Лицо.СвФЛ = Неопределено Тогда
			Лицо.Сбросить("СвФЛ");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя ИП.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяИППередоверия(Доверитель)
	
	Если Доверитель.ТипПерПолн <> ТипыПредставителей().ИндивидуальныйПредприниматель Тогда
		Доверитель.ПередПолн.Сбросить("ИППерПолн");
	КонецЕсли;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя ИП.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяФизЛицаПередоверия(Доверитель)
	
	Если Доверитель.ТипПерПолн <> ТипыПредставителей().ФизическоеЛицо Тогда
		Доверитель.ПередПолн.Сбросить("ФЛПерПолн");
	ИначеЕсли Доверитель.ПередПолн.ФЛПерПолн.ПрНалРук = Неопределено 
		Или Доверитель.ПередПолн.ФЛПерПолн.ПрНалРук = "0" Тогда
		Доверитель.ПередПолн.ФЛПерПолн.Сбросить("СведРукоп");	
	КонецЕсли;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя ИП.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяИнОргПередоверия(Доверитель)
	
	Если Доверитель.ТипПерПолн <> ТипыПредставителей().ФилиалИностраннойОрганизации Тогда
		Доверитель.ПередПолн.Сбросить("ИнПерПолн");
	КонецЕсли;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя ИП.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяФилиалаПередоверия(Доверитель)
	
	Если Доверитель.ТипПерПолн <> ТипыПредставителей().ФилиалЮридическогоЛица Тогда
		Доверитель.ПередПолн.Сбросить("ФилПерПолн");
	КонецЕсли;

КонецПроцедуры

// Сбросить взаимоисключающие свойства.
// 
// Параметры:
//  Представитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
//
Процедура СброситьВзаимоисключающиеСвойстваПредставителяПередоверия(Представитель)
	
	Если Представитель.ТипПред <> ТипыПредставителей().ЮридическоеЛицо Тогда
		Представитель.Пред.Сбросить("СведОрг");
	КонецЕсли;
	
	Если Представитель.ТипПред <> ТипыПредставителей().ИндивидуальныйПредприниматель Тогда
		Представитель.Пред.Сбросить("СведИП");
	КонецЕсли;
	
	Если Представитель.ТипПред <> ТипыПредставителей().ФизическоеЛицо Тогда
		Представитель.Пред.Сбросить("СведФизЛ");
	КонецЕсли;
	
	Если Представитель.ТипПред <> ТипыПредставителей().ФилиалЮридическогоЛица Тогда
		Представитель.Пред.Сбросить("СведФилиал");
	КонецЕсли;
	
	Если Представитель.ТипПред <> ТипыПредставителей().ФилиалИностраннойОрганизации Тогда
		Представитель.Пред.Сбросить("СведИО");
	КонецЕсли;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства полномочий.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Процедура СброситьВзаимоисключающиеСвойстваПолномочийПередоверия(Доверенность)
	
	СвПолн = Доверенность.Документ.Передов.СвПолн; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	Если СвПолн.ТипПолн = ТипыПолномочий().Текстовые Тогда
		СвПолн.Сбросить("МашПолн");
	Иначе
		СвПолн.Сбросить("ТекстПолн");
	КонецЕсли;
	
КонецПроцедуры

Процедура СброситьВзаимоисключающиеСвойстваПередоверияПоПервоночальнойДоверенности(Доверенность)

	Доверители = Доверенность.Документ.Передов.СвПервДовер.СвДоверПерв;
	Для Каждого Доверитель Из Доверители Цикл
		
		Если Доверитель.ТипДоверит <> ТипыДоверителей().ЮридическоеЛицо Тогда
			Доверитель.ДоверитПерв.Сбросить("РосОргДовер");
		ИначеЕсли Доверитель.ТипДоверит = ТипыДоверителей().ЮридическоеЛицо Тогда
			Доверитель.ДоверитПерв.РосОргДовер.Сбросить("ДокПдтв");
		КонецЕсли;
		
		Если Доверитель.ТипДоверит <> ТипыДоверителей().ИндивидуальныйПредприниматель Тогда
			Доверитель.ДоверитПерв.Сбросить("ИПДовер");
		КонецЕсли;
		
		Если Доверитель.ТипДоверит <> ТипыДоверителей().ФизическоеЛицо Тогда
			Доверитель.ДоверитПерв.Сбросить("ФЛДовер");
		КонецЕсли;
		
		Если Доверитель.ТипДоверит <> ТипыДоверителей().ИностраннаяОрганизация Тогда
			Доверитель.ДоверитПерв.Сбросить("ИнОргДовер");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбросить взаимосисключающие и неподдерживаемые свойства XDTOМЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Процедура СброситьВзаимосисключающиеИНеподдерживаемыеСвойстваXDTOМЧД(Доверенность)
	
	СброситьНеподдерживаемыеСвойства(Доверенность);
	
	Если Доверенность.Документ.Довер.СвДов.ПрПередов <> ПризнакВозможностиПередоверия().ПоследующееПередоверие Тогда
		Доверенность.Документ.Довер.СвПолн.Сбросить("ПрУтрПолн");
	КонецЕсли;
	
	Доверители = Доверенность.Документ.Довер.СвДоверит; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
	Для Каждого Доверитель Из Доверители Цикл
		
		СброситьВзаимоисключающиеСвойстваДоверителяРоссийскойОрганизации(Доверитель);
		СброситьВзаимоисключающиеСвойстваДоверителяИП(Доверитель);
		
	КонецЦикла;
	
	Представители = Доверенность.Документ.Довер.СвУпПред; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
	Для Каждого Представитель Из Представители Цикл
		
		СброситьВзаимоисключающиеСвойстваПредставителя(Представитель);
		
	КонецЦикла;
	
	СброситьВзаимоисключающиеСвойстваПолномочий(Доверенность);
	
КонецПроцедуры

// Сбросить неподдерживаемые свойства.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Процедура СброситьНеподдерживаемыеСвойства(Доверенность)
	
	НеподдерживаемыеРеквизиты = НеподдерживаемыеСвойстваМЧД003();
	
	Для Каждого ПолныйПуть Из НеподдерживаемыеРеквизиты Цикл
		
		// Удаляем начало "Доверенность."
		ЛокальныйПуть = Прав(ПолныйПуть, СтрДлина(ПолныйПуть) - 13);
		
		СброситьСвойствоОбъектаXDTOРекурсивно(Доверенность, ЛокальныйПуть);
		
	КонецЦикла;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя российского юл.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяРоссийскойОрганизации(Доверитель)
	
	Если Доверитель.ТипДоверит <> ТипыДоверителей().ЮридическоеЛицо Тогда
		Доверитель.Доверит.Сбросить("РосОргДовер");
		Возврат;
	КонецЕсли;
	
	БулевыйКлассификатор = КлассификаторДаНет();
	
	РосОргДовер = Доверитель.Доверит.РосОргДовер;
	ЕстьУК = (РосОргДовер.ЕИОУК = БулевыйКлассификатор.Да);
	ЕстьИП = (РосОргДовер.ЕИОИП = БулевыйКлассификатор.Да);
	ЕстьФЛ = (РосОргДовер.ЕИОФЛ = БулевыйКлассификатор.Да);
	
	Лица = Доверитель.Доверит.РосОргДовер.ЛицоБезДов; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
	
	Для Каждого Лицо Из Лица Цикл
		
		Если Не ЕстьУК Или Лицо.СВЮЛ = Неопределено Тогда
			Лицо.Сбросить("СВЮЛ");
		КонецЕсли;
		
		Если Не ЕстьИП Или Лицо.СвИП = Неопределено Тогда
			Лицо.Сбросить("СвИП");
		КонецЕсли;
		
		Если Не ЕстьФЛ Или Лицо.СвФЛ = Неопределено Тогда
			Лицо.Сбросить("СвФЛ");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства доверителя ИП.
// 
// Параметры:
//  Доверитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//
Процедура СброситьВзаимоисключающиеСвойстваДоверителяИП(Доверитель)
	
	Если Доверитель.ТипДоверит <> ТипыДоверителей().ИндивидуальныйПредприниматель Тогда
		Доверитель.Доверит.Сбросить("ИПДовер");
	КонецЕсли;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства.
// 
// Параметры:
//  Представитель - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
//
Процедура СброситьВзаимоисключающиеСвойстваПредставителя(Представитель)
	
	Если Представитель.ТипПред <> ТипыПредставителей().ЮридическоеЛицо Тогда
		Представитель.Пред.Сбросить("СведОрг");
	КонецЕсли;
	
	Если Представитель.ТипПред <> ТипыПредставителей().ИндивидуальныйПредприниматель Тогда
		Представитель.Пред.Сбросить("СведИП");
	КонецЕсли;
	
	Если Представитель.ТипПред <> ТипыПредставителей().ФизическоеЛицо Тогда
		Представитель.Пред.Сбросить("СведФизЛ");
	КонецЕсли;
	
КонецПроцедуры

// Сбросить взаимоисключающие свойства полномочий.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//
Процедура СброситьВзаимоисключающиеСвойстваПолномочий(Доверенность)
	
	СвПолн = Доверенность.Документ.Довер.СвПолн; // См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвПолнТип
	Если СвПолн.ТипПолн = ТипыПолномочий().Текстовые Тогда
		СвПолн.Сбросить("МашПолн");
	Иначе
		СвПолн.Сбросить("ТекстПолн");
		Для Каждого Полномочие Из СвПолн.МашПолн Цикл
			Полномочие.Сбросить("ОгрСвПолн");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Сбросить свойство объекта XDTOРекурсивно.
// 
// Параметры:
//  ОбъектXDTO - ОбъектXDTO
//  Путь - Строка - Путь в формате <Свойство>.<Субсвойство>.<Субсубсвойство>...
Процедура СброситьСвойствоОбъектаXDTOРекурсивно(ОбъектXDTO, Путь)
	
	ЧастиПути = СтрРазделить(Путь, ".");
	
	Если ЧастиПути.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Некорректный вызов метода: путь должен быть в формате <Свойство>.<Субсвойство>.<...>'");
	ИначеЕсли ЧастиПути.Количество() = 1 Тогда
		СбрасываемоеСвойство = ЧастиПути[0];
		ОбъектXDTO.Сбросить(СбрасываемоеСвойство);
	КонецЕсли;
	
	ИмяСвойства = ЧастиПути[0];
	
	ЧастиПути.Удалить(0);
	ЛокальныйПуть = СтрСоединить(ЧастиПути, ".");
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектXDTO, ИмяСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСвойства = ОбъектXDTO[ИмяСвойства]; // ОбъектXDTO, СписокXDTO
	Если ТипЗнч(ОбъектСвойства) = Тип("ОбъектXDTO") Тогда
		
		СброситьСвойствоОбъектаXDTOРекурсивно(ОбъектСвойства, ЛокальныйПуть);
		
	ИначеЕсли ТипЗнч(ОбъектСвойства) = Тип("СписокXDTO") Тогда
		
		Для Каждого ЭлементСписка Из ОбъектСвойства Цикл
			СброситьСвойствоОбъектаXDTOРекурсивно(ЭлементСписка, ЛокальныйПуть);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСформированногоXDTOМЧД

// Проверить объект МЧД рекурсивно.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
Процедура ПроверитьОбъектМЧДРекурсивно(Объект, Путь, ОшибкиЗаполнения)
	
	Для Каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЭтоОбъект = ЭтоОбъектXDTO(СвойствоОбъекта);
		ЭтоСписок = ЭтоСписокXDTO(СвойствоОбъекта);
		
		Если Не ЭтоОбъект И Не ЭтоСписок Тогда
			ПроверитьСвойствоОбъектаМЧДПростогоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения);
		ИначеЕсли Не ЭтоСписок Тогда
			ПроверитьСвойствоОбъектаМЧДОбъектногоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения);
		ИначеЕсли ЭтоОбъект Тогда 
			ПроверитьСписокОбъектаМЧДОбъектногоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения);
		Иначе
			ПроверитьСписокОбъектаМЧДПростогоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить свойство объекта МЧДПростого типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьСвойствоОбъектаМЧДПростогоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
	
	ИмяТипа = ИмяПростогоТипаПоТипуXDTO(СвойствоОбъекта.Тип);
	Значение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, СвойствоОбъекта.Имя, , ИмяТипа);
	
	Если ЭтоСвойствоXDTOОбязательноеДляЗаполнения(СвойствоОбъекта)
		И Не ЗначениеЗаполнено(Значение) Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Значение свойства МЧД ""%1"" обязательно для заполнения.'"),
			СвойствоОбъекта.Имя);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Проверить свойство объекта МЧД объектного типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьСвойствоОбъектаМЧДОбъектногоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
	
	ОбъектСвойства = Объект.Получить(СвойствоОбъекта);
	Если ЭтоСвойствоXDTOОбязательноеДляЗаполнения(СвойствоОбъекта)
		И ОбъектСвойства = Неопределено Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Значение свойства МЧД ""%1"" обязательно для заполнения.'"),
			СвойствоОбъекта.Имя);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
	КонецЕсли;
	
	Если ОбъектСвойства <> Неопределено Тогда
		ПроверитьОбъектМЧДРекурсивно(ОбъектСвойства, ПутьДанныхСвойства, ОшибкиЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

// Проверить список объекта МЧД объектного типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьСписокОбъектаМЧДОбъектногоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения)
	
	СписокСвойства = Объект.ПолучитьСписок(СвойствоОбъекта);
	
	Если ЭтоСвойствоXDTOОбязательноеДляЗаполнения(СвойствоОбъекта)
		И СписокСвойства.Количество() = 0 Тогда
		
		ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Список МЧД ""%1"" обязателен для заполнения.'"),
			СвойствоОбъекта.Имя);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
	КонецЕсли;
	
	ИндексЗначения = 0;
	Для Каждого ЭлементСписка Из СписокСвойства Цикл
		
		ПутьДанныхСвойства = СтрШаблон("%1[%2].%3", Путь, ИндексЗначения, СвойствоОбъекта.Имя);
		
		ПроверитьОбъектМЧДРекурсивно(ЭлементСписка, ПутьДанныхСвойства, ОшибкиЗаполнения);
		
		ИндексЗначения = ИндексЗначения + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить список объекта МЧД простого типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  СвойствоОбъекта - СвойствоXDTO
//  Путь - Строка
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьСписокОбъектаМЧДПростогоТипа(Объект, СвойствоОбъекта, Путь, ОшибкиЗаполнения)
	
	СписокСвойства = Объект.ПолучитьСписок(СвойствоОбъекта);
	
	Если ЭтоСвойствоXDTOОбязательноеДляЗаполнения(СвойствоОбъекта)
		И Не СписокСвойства.Количество() = 0 Тогда
		
		ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, СвойствоОбъекта.Имя);
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Список МЧД ""%1"" обязателен для заполнения.'"),
			СвойствоОбъекта.Имя);
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, ПутьДанныхСвойства, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловныеПроверкиОбъектаМЧД

// Проверить условные поля объекта МЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьУсловныеПоляОбъектаМЧД(Доверенность, ОшибкиЗаполнения)
	
	Доверители = Доверенность.Документ.Довер.СвДоверит;
	
	ИндексДоверителя = 0;
	Для Каждого Доверитель Из Доверители Цикл
		ПутьДоверителя = СтрШаблон("Доверенность[0].Документ[0].Довер[0].СвДоверит[%1]", ИндексДоверителя);
		ПроверитьУсловныеПоляДоверителяМЧД(Доверитель, ОшибкиЗаполнения, ПутьДоверителя);
		ИндексДоверителя = ИндексДоверителя + 1;
	КонецЦикла;
	
	Представители = Доверенность.Документ.Довер.СвУпПред;
	
	ИндексПредставителя = 0;
	Для Каждого Представитель Из Представители Цикл
		ПутьПредставителя = СтрШаблон("Доверенность[0].Документ[0].Довер[0].СвУпПред[%1]", ИндексПредставителя);
		ПроверитьУсловныеПоляПредставителяМЧД(Представитель, ОшибкиЗаполнения, ПутьПредставителя);
		ИндексПредставителя = ИндексПредставителя + 1;
	КонецЦикла;
	
	ПроверитьУсловныеПоляПолномочийМЧД(Доверенность, ОшибкиЗаполнения);
	
КонецПроцедуры

// Проверить условные поля объекта МЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьУсловныеПоляОбъектаМЧДПередоверия(Доверенность, ОшибкиЗаполнения)
	
	Доверители = Доверенность.Документ.Передов.СвПередПолн;
	
	ИндексДоверителя = 0;
	Для Каждого Доверитель Из Доверители Цикл
		ПутьДоверителя = СтрШаблон("Доверенность[0].Документ[0].Передов[0].СвПередПолн[%1]", ИндексДоверителя);
		ПроверитьУсловныеПоляДоверителяМЧДПередоверия(Доверитель, ОшибкиЗаполнения, ПутьДоверителя);
		ИндексДоверителя = ИндексДоверителя + 1;
	КонецЦикла;
	
	Представители = Доверенность.Документ.Передов.СвПолучПолн;
	
	ИндексПредставителя = 0;
	Для Каждого Представитель Из Представители Цикл
		ПутьПредставителя = СтрШаблон("Доверенность[0].Документ[0].Передов[0].СвПолучПолн[%1]", ИндексПредставителя);
		ПроверитьУсловныеПоляПредставителяМЧД(Представитель, ОшибкиЗаполнения, ПутьПредставителя);
		ИндексПредставителя = ИндексПредставителя + 1;
	КонецЦикла;
	
	ПроверитьУсловныеПоляПолномочийМЧДПередоверия(Доверенность, ОшибкиЗаполнения);
	
КонецПроцедуры

// Проверить соответствие дат доверенности и родительской доверенности МЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьДатыДоверенностей(Доверенность, ОшибкиЗаполнения)
	
	ДатаНачалаРодительскойДоверенности = Доверенность.Документ.Передов.СвПервДовер.ДатаВыдДовер;
	ДатаОкончанияРодительскойДоверенности = Доверенность.Документ.Передов.СвПервДовер.СрокДейст;
	ДатаНачалаДоверенности = Доверенность.Документ.Передов.СвПереДовер.ДатаВыдДовер;
	ДатаОкончанияДоверенности = Доверенность.Документ.Передов.СвПереДовер.СрокДейст;
	Если ЗначениеЗаполнено(ДатаНачалаДоверенности) 
		И (ДатаНачалаДоверенности < ДатаНачалаРодительскойДоверенности ИЛИ ДатаНачалаДоверенности > ДатаОкончанияРодительскойДоверенности) Тогда
		ТекстОшибки = НСтр("ru = 'Дата начала действия доверенности вне срока действия родительской доверенности.'");
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, "Доверенность[0].Документ[0].Передов[0].СвПереДовер[0].ДатаВыдДовер", ТекстОшибки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДатаОкончанияДоверенности)
		И (ДатаОкончанияДоверенности < ДатаНачалаРодительскойДоверенности ИЛИ ДатаОкончанияДоверенности > ДатаОкончанияРодительскойДоверенности) Тогда
		ТекстОшибки = НСтр("ru = 'Дата окончания действия доверенности вне срока действия родительской доверенности.'");
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, "Доверенность[0].Документ[0].Передов[0].СвПереДовер[0].СрокДейст", ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Проверить условные поля доверителя МЧД.
// 
// Параметры:
//  Доверитель - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ПередПолнТип
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//  ПутьДоверителя - Строка
//
Процедура ПроверитьУсловныеПоляДоверителяМЧДПередоверия(Доверитель, ОшибкиЗаполнения, ПутьДоверителя)
	
	БулевыйКлассификатор = КлассификаторДаНет();
	ТипыДоверителей = ТипыПредставителей();
	
	НаборОбязательныхПолей = Новый Массив(); // Массив Из см. НовыеДанныеУсловногоПоля
	
	Если Доверитель.ТипПерПолн = ТипыДоверителей.ЮридическоеЛицо Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "ПередПолн.РосОргПерПолн";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.ПередПолн[0].РосОргПерПолн", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о доверителе юридическом лице.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "ПередПолн.РосОргПерПолн.СвРосОрг.ИННЮЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.ПередПолн[0].РосОргПерПолн[0].СвРосОрг[0].ИННЮЛ", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан ИНН юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "ПередПолн.РосОргПерПолн.СвРосОрг.ОГРН";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.ПередПолн[0].РосОргПерПолн[0].СвРосОрг[0].ОГРН", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан ОГРН юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "ПередПолн.РосОргПерПолн.СвРосОрг.АдрРег.АдрРФ";
		ДанныеПоля.ПолныйПутьПоля =
			СтрШаблон("%1.ПередПолн[0].РосОргПерПолн[0].СвРосОрг[0].АдрРег[0].АдрРФ", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан адрес регистрации юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		Если Доверитель.ПередПолн.РосОргПерПолн <> Неопределено Тогда
			
			СведенияЕИО = НовыеСведенияОЕдиноличномИсполнительномОргане();
			СведенияЕИО.ЕИОУК = Доверитель.ПередПолн.РосОргПерПолн.ЕИОУК = БулевыйКлассификатор.Да;
			СведенияЕИО.ЕИОИП = Доверитель.ПередПолн.РосОргПерПолн.ЕИОИП = БулевыйКлассификатор.Да;
			СведенияЕИО.ЕИОФЛ = Доверитель.ПередПолн.РосОргПерПолн.ЕИОФЛ = БулевыйКлассификатор.Да;
			
			ИндексЛица = 0;
			
			ЛицаБезДоверенности = Доверитель.ПередПолн.РосОргПерПолн.ЛицоБезДов;
			Для Каждого Лицо Из ЛицаБезДоверенности Цикл
				ПутьЛица = СтрШаблон("%1.ПередПолн[0].РосОргПерПолн[0].ЛицоБезДов[%2]", ПутьДоверителя, ИндексЛица);
				ПроверитьУсловныеПоляЛицаБезДоверенности(Лицо, ОшибкиЗаполнения, ПутьЛица, СведенияЕИО);
				ИндексЛица = ИндексЛица + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Поле Из НаборОбязательныхПолей Цикл
		ПроверитьЗаполнениеУсловногоПоля(Поле, ОшибкиЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Проверить условные поля доверителя МЧД.
// 
// Параметры:
//  Доверитель - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвДоверитТип
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//  ПутьДоверителя - Строка
//
Процедура ПроверитьУсловныеПоляДоверителяМЧД(Доверитель, ОшибкиЗаполнения, ПутьДоверителя)
	
	БулевыйКлассификатор = КлассификаторДаНет();
	ТипыДоверителей = ТипыДоверителей();
	
	НаборОбязательныхПолей = Новый Массив(); // Массив Из см. НовыеДанныеУсловногоПоля
	
	Если Доверитель.ТипДоверит = ТипыДоверителей.ИндивидуальныйПредприниматель Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "Доверит.ИПДовер";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Доверит[0].ИПДовер", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о доверителе индивидуальном предпринимателе.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
	ИначеЕсли Доверитель.ТипДоверит = ТипыДоверителей.ЮридическоеЛицо Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "Доверит.РосОргДовер";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Доверит[0].РосОргДовер", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о доверителе юридическом лице.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "Доверит.РосОргДовер.СвРосОрг.ИННЮЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Доверит[0].РосОргДовер[0].СвРосОрг[0].ИННЮЛ", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан ИНН юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "Доверит.РосОргДовер.СвРосОрг.ОГРН";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Доверит[0].РосОргДовер[0].СвРосОрг[0].ОГРН", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан ОГРН юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверитель;
		ДанныеПоля.ЛокальныйПуть = "Доверит.РосОргДовер.СвРосОрг.АдрРег.АдрРФ";
		ДанныеПоля.ПолныйПутьПоля =
			СтрШаблон("%1.Доверит[0].РосОргДовер[0].СвРосОрг[0].АдрРег[0].АдрРФ", ПутьДоверителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан адрес регистрации юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		Если Доверитель.Доверит.РосОргДовер <> Неопределено Тогда
			
			СведенияЕИО = НовыеСведенияОЕдиноличномИсполнительномОргане();
			СведенияЕИО.ЕИОУК = Доверитель.Доверит.РосОргДовер.ЕИОУК = БулевыйКлассификатор.Да;
			СведенияЕИО.ЕИОИП = Доверитель.Доверит.РосОргДовер.ЕИОИП = БулевыйКлассификатор.Да;
			СведенияЕИО.ЕИОФЛ = Доверитель.Доверит.РосОргДовер.ЕИОФЛ = БулевыйКлассификатор.Да;
			
			ИндексЛица = 0;
			
			ЛицаБезДоверенности = Доверитель.Доверит.РосОргДовер.ЛицоБезДов;
			Для Каждого Лицо Из ЛицаБезДоверенности Цикл
				ПутьЛица = СтрШаблон("%1.Доверит[0].РосОргДовер[0].ЛицоБезДов[%2]", ПутьДоверителя, ИндексЛица);
				ПроверитьУсловныеПоляЛицаБезДоверенности(Лицо, ОшибкиЗаполнения, ПутьЛица, СведенияЕИО);
				ИндексЛица = ИндексЛица + 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Поле Из НаборОбязательныхПолей Цикл
		ПроверитьЗаполнениеУсловногоПоля(Поле, ОшибкиЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Новые сведения о единоличном исполнительном органе.
// 
// Возвращаемое значение:
//  Структура - Новые сведения о единоличном исполнительном органе:
// * ЕИОУК - Булево - Единоличным исполнительным органом выступает управляющая компания
// * ЕИОИП - Булево - Единоличным исполнительным органом выступает индивидуальный предприниматель
// * ЕИОФЛ - Булево - Единоличным исполнительным органом выступает физическое лицо
Функция НовыеСведенияОЕдиноличномИсполнительномОргане()
	
	СведенияЕИО = Новый Структура;
	СведенияЕИО.Вставить("ЕИОУК", Ложь);
	СведенияЕИО.Вставить("ЕИОИП", Ложь);
	СведенияЕИО.Вставить("ЕИОФЛ", Ложь);
	
	Возврат СведенияЕИО;
	
КонецФункции

// Проверить условные поля лица без доверенности.
// 
// Параметры:
//  ЛицоБезДоверенности - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.ЛицоБезДовТип
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//  ПутьЛицаБезДоверенности - Строка
//  СведенияЕИО - см. НовыеСведенияОЕдиноличномИсполнительномОргане
Процедура ПроверитьУсловныеПоляЛицаБезДоверенности(ЛицоБезДоверенности, ОшибкиЗаполнения,
		ПутьЛицаБезДоверенности, СведенияЕИО)
	
	НаборОбязательныхПолей = Новый Массив(); // Массив Из см. НовыеДанныеУсловногоПоля
	
	Если СведенияЕИО.ЕИОИП Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СвИП";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СвИП", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о единоличном исполнительном органе - индивидуальном предпринимателе.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
	КонецЕсли;
	
	Если СведенияЕИО.ЕИОУК Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СВЮЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СВЮЛ", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о единоличном исполнительном органе - управляющей компании.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СВЮЛ.СвЮЛЕИО.ИННЮЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СВЮЛ[0].СвЮЛЕИО[0].ИННЮЛ", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан ИНН управляющей компании.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СВЮЛ.СвЮЛЕИО.ОГРН";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СВЮЛ[0].СвЮЛЕИО[0].ОГРН", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан ОГРН управляющей компании.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СВЮЛ.СвЮЛЕИО.АдрРег.АдрРФ";
		ДанныеПоля.ПолныйПутьПоля =
			СтрШаблон("%1.СВЮЛ[0].СвЮЛЕИО[0].АдрРег[0].АдрРФ", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан адрес регистрации юридического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		СписокФЛ = ЛицоБезДоверенности.СВЮЛ.СвФЛ; // СписокXDTO Из См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвФЛТип
		ИндексФЛ = 0;
		Для Каждого ФизЛицо Из СписокФЛ Цикл
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = ФизЛицо;
			ДанныеПоля.ЛокальныйПуть = "СНИЛС";
			ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СВЮЛ[0].СвФЛ[%2].СНИЛС", ПутьЛицаБезДоверенности, ИндексФЛ);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указан СНИЛС физического лица.'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			ИндексФЛ = ИндексФЛ + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СведенияЕИО.ЕИОФЛ Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СвФЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СвФЛ", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не заполнены сведения о единоличном исполнительном органе - физическом лице.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СвФЛ.СНИЛС";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СвФЛ[0].СНИЛС", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не заполнен СНИЛС физического лица'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = ЛицоБезДоверенности;
		ДанныеПоля.ЛокальныйПуть = "СвФЛ.ИННФЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.СвФЛ[0].ИННФЛ", ПутьЛицаБезДоверенности);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не заполнен ИНН физического лица'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
	КонецЕсли;
	
	Для Каждого Поле Из НаборОбязательныхПолей Цикл
		ПроверитьЗаполнениеУсловногоПоля(Поле, ОшибкиЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Проверить условные поля представителя МЧД.
// 
// Параметры:
//  Представитель - См. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.СвУпПредТип
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//  ПутьПредставителя - Строка
//
Процедура ПроверитьУсловныеПоляПредставителяМЧД(Представитель, ОшибкиЗаполнения, ПутьПредставителя)
	
	НаборОбязательныхПолей = Новый Массив(); // Массив Из см. НовыеДанныеУсловногоПоля
	
	ТипыПредставителей = ТипыПредставителей();
	
	Если Представитель.ТипПред = ТипыПредставителей.ЮридическоеЛицо Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведОрг";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведОрг", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о представителе юридическом лице.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведОрг.ИННЮЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведОрг[0].ИННЮЛ", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о ИНН представителя.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведОрг.ОГРН";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведОрг[0].ОГРН", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о ОГРН представителя.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
	ИначеЕсли Представитель.ТипПред = ТипыПредставителей.ФизическоеЛицо Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведФизЛ", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о представителе физическом лице.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.ИННФЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведФизЛ[0].ИННФЛ", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения ИНН физического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.СНИЛС";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведФизЛ[0].СНИЛС", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения СНИЛС физического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.СведФЛ.ДатаРожд";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].ДатаРожд", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения дате рождения физического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.СведФЛ.УдЛичнФЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].УдЛичнФЛ", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о удостоверении личности физического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		Если ДанныеОбъектаXDTOПоПути(Представитель, "Пред.СведФизЛ.СведФЛ.УдЛичнФЛ.КодВидДок") <> "10" Тогда
			
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = Представитель;
			ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.СведФЛ.УдЛичнФЛ.ВыдДок";
			ДанныеПоля.ПолныйПутьПоля =
				СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].УдЛичнФЛ[0].ВыдДок", ПутьПредставителя);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о наименовании органа, выдавшего документ удостоверения личности физического лица.'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = Представитель;
			ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.СведФЛ.УдЛичнФЛ.КодВыдДок";
			ДанныеПоля.ПолныйПутьПоля =
				СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].УдЛичнФЛ[0].КодВыдДок", ПутьПредставителя);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о коде подразделения органа, выдавшего документ удостоверения личности физического лица.'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			
		КонецЕсли;
		
		Если ДанныеОбъектаXDTOПоПути(Представитель, "Пред.СведФизЛ.СведФЛ.УдЛичнФЛ.КодВидДок") = "22" Тогда
			
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = Представитель;
			ДанныеПоля.ЛокальныйПуть = "Пред.СведФизЛ.СведФЛ.УдЛичнФЛ.expDate";
			ДанныеПоля.ПолныйПутьПоля =
				СтрШаблон("%1.Пред[0].СведФизЛ[0].СведФЛ[0].УдЛичнФЛ[0].expDate", ПутьПредставителя);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указана дата истечения срока действия документа, удостоверяющего личность'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			
		КонецЕсли;
		
	ИначеЕсли Представитель.ТипПред = ТипыПредставителей.ИндивидуальныйПредприниматель Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведИП";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведИП", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о представителе индивидуальном предпринимателе.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведИП.СведФЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о физическом лице представителя - индивидуального предпринимателя.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведИП.СведФЛ.ДатаРожд";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].ДатаРожд", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о дате рождения физического лица представителя - индивидуального предпринимателя.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Представитель;
		ДанныеПоля.ЛокальныйПуть = "Пред.СведИП.СведФЛ.УдЛичнФЛ";
		ДанныеПоля.ПолныйПутьПоля = СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].УдЛичнФЛ", ПутьПредставителя);
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о документе удостоверения личности физического лица.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
		Если ДанныеОбъектаXDTOПоПути(Представитель, "Пред.СведИП.СведФЛ.УдЛичнФЛ.КодВидДок") <> "10" Тогда
			
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = Представитель;
			ДанныеПоля.ЛокальныйПуть = "Пред.СведИП.СведФЛ.УдЛичнФЛ.ВыдДок";
			ДанныеПоля.ПолныйПутьПоля =
				СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].УдЛичнФЛ[0].ВыдДок", ПутьПредставителя);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о наименовании органа, выдавшего документ удостоверения личности физического лица.'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = Представитель;
			ДанныеПоля.ЛокальныйПуть = "Пред.СведИП.СведФЛ.УдЛичнФЛ.КодВыдДок";
			ДанныеПоля.ПолныйПутьПоля =
				СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].УдЛичнФЛ[0].КодВыдДок", ПутьПредставителя);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указаны сведения о коде подразделения органа, выдавшего документ удостоверения личности физического лица.'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			
		КонецЕсли;
		
		Если ДанныеОбъектаXDTOПоПути(Представитель, "Пред.СведИП.СведФЛ.УдЛичнФЛ.КодВидДок") = "22" Тогда
			
			ДанныеПоля = НовыеДанныеУсловногоПоля();
			ДанныеПоля.ОбъектXDTO = Представитель;
			ДанныеПоля.ЛокальныйПуть = "Пред.СведИП.СведФЛ.УдЛичнФЛ.expDate";
			ДанныеПоля.ПолныйПутьПоля =
				СтрШаблон("%1.Пред[0].СведИП[0].СведФЛ[0].УдЛичнФЛ[0].expDate", ПутьПредставителя);
			ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не указана дата истечения срока действия документа, удостоверяющего личность'");
			НаборОбязательныхПолей.Добавить(ДанныеПоля);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Поле Из НаборОбязательныхПолей Цикл
		ПроверитьЗаполнениеУсловногоПоля(Поле, ОшибкиЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Проверить условные поля полномочий МЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьУсловныеПоляПолномочийМЧД(Доверенность, ОшибкиЗаполнения)
	
	НаборОбязательныхПолей = Новый Массив(); // Массив Из см. НовыеДанныеУсловногоПоля
	
	Если ДанныеОбъектаXDTOПоПути(Доверенность, "Документ.Довер.СвПолн.ТипПолн") = ТипыПолномочий().Текстовые Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверенность;
		ДанныеПоля.ЛокальныйПуть = "Документ.Довер.СвПолн.ТекстПолн";
		ДанныеПоля.ПолныйПутьПоля = "Доверенность[0].Документ[0].Довер[0].СвПолн[0].ТекстПолн";
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не заполнены сведения о тексте полномочий.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
	Иначе
		
		СписокМашиночитаемыхПолномочий = ДанныеОбъектаXDTOПоПути(Доверенность, "Документ.Довер.СвПолн.МашПолн"); // СписокXDTO
		
		Если СписокМашиночитаемыхПолномочий.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не указаны машиночитаемые полномочия МЧД.'");
			Путь = "Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн";
			ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, Путь, ТекстОшибки);
		КонецЕсли;
		
		ДатаОкончания = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Доверенность, "Документ.Довер.СвДов.СрокДейст",
			'00010101', "Дата");
		
		ПроверитьДействительностьМашиночитаемыхПолномочий(СписокМашиночитаемыхПолномочий, ДатаОкончания,
			ОшибкиЗаполнения);
		
	КонецЕсли;
	
	Для Каждого Поле Из НаборОбязательныхПолей Цикл
		ПроверитьЗаполнениеУсловногоПоля(Поле, ОшибкиЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Проверить действительность машиночитаемых полномочий МЧД.
// 
// Параметры:
//  СписокМашиночитаемыхПолномочий - см. ДанныеОбъектаXDTOПоПути.
//  ДатаОкончания                  - Дата - дата окончания действия доверенности.
//  ОшибкиЗаполнения               - см. НовыйНаборОшибокЗаполненияОбъектаМЧД.
Процедура ПроверитьДействительностьМашиночитаемыхПолномочий(СписокМашиночитаемыхПолномочий, ДатаОкончания, ОшибкиЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КодыПолномочий.КодКлассификатора КАК КодКлассификатора
		|ПОМЕСТИТЬ ПолномочияДоверенности
		|ИЗ
		|	&КодыПолномочий КАК КодыПолномочий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлассификаторПолномочийМЧД003.КодКлассификатора КАК КодКлассификатора,
		|	КлассификаторПолномочийМЧД003.ДатаОтзываПолномочия КАК ДатаОтзываПолномочия
		|ПОМЕСТИТЬ ПолномочияКлассификатора
		|ИЗ
		|	Справочник.КлассификаторПолномочийМЧД003 КАК КлассификаторПолномочийМЧД003
		|ГДЕ
		|	КлассификаторПолномочийМЧД003.КодКлассификатора В
		|		(ВЫБРАТЬ
		|			ПолномочияДоверенности.КодКлассификатора
		|		ИЗ
		|			ПолномочияДоверенности)
		|	И КлассификаторПолномочийМЧД003.ДатаОтзываПолномочия <> ДАТАВРЕМЯ(1, 1, 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПолномочияДоверенности.КодКлассификатора КАК КодКлассификатора
		|ИЗ
		|	ПолномочияДоверенности КАК ПолномочияДоверенности
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПолномочияКлассификатора КАК ПолномочияКлассификатора
		|		ПО ПолномочияДоверенности.КодКлассификатора = ПолномочияКлассификатора.КодКлассификатора
		|ГДЕ
		|	ВЫБОР
		|		КОГДА НЕ ПолномочияКлассификатора.ДатаОтзываПолномочия ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|				КОГДА ПолномочияКлассификатора.ДатаОтзываПолномочия < &ДатаОкончанияДоверенности
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ";
	
	КодыПолномочий = Новый ТаблицаЗначений();
	КодыПолномочий.Колонки.Добавить("КодКлассификатора", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255)));
	
	ИндексСтроки = 0;
	
	Для Каждого СтрокаПолномочия Из СписокМашиночитаемыхПолномочий Цикл
		
		НоваяСтрока = КодыПолномочий.Добавить();
		НоваяСтрока.КодКлассификатора = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(СтрокаПолномочия, "КодПолн", "");
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КодыПолномочий", КодыПолномочий);
	Запрос.УстановитьПараметр("ДатаОкончанияДоверенности", ДатаОкончания);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Период действия полномочия ""%1"" меньше периода действия доверенности.'"),
			Выборка.КодКлассификатора);
		Путь = "Доверенность[0].Документ[0].Довер[0].СвПолн[0].МашПолн";
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, Путь, ТекстОшибки);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить условные поля полномочий МЧД.
// 
// Параметры:
//  Доверенность - см. XDTOПакет.ON_EMCHD_1_928_00_01_01_01.Доверенность
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьУсловныеПоляПолномочийМЧДПередоверия(Доверенность, ОшибкиЗаполнения)
	
	НаборОбязательныхПолей = Новый Массив(); // Массив Из см. НовыеДанныеУсловногоПоля
	
	Если ДанныеОбъектаXDTOПоПути(Доверенность, "Документ.Передов.СвПолн.ТипПолн") = ТипыПолномочий().Текстовые Тогда
		
		ДанныеПоля = НовыеДанныеУсловногоПоля();
		ДанныеПоля.ОбъектXDTO = Доверенность;
		ДанныеПоля.ЛокальныйПуть = "Документ.Передов.СвПолн.ТекстПолн";
		ДанныеПоля.ПолныйПутьПоля = "Доверенность[0].Документ[0].Передов[0].СвПолн[0].ТекстПолн";
		ДанныеПоля.ТекстОшибки = НСтр("ru = 'Не заполнены сведения о тексте полномочий.'");
		НаборОбязательныхПолей.Добавить(ДанныеПоля);
		
	Иначе
		
		СписокМашиночитаемыхПолномочий = ДанныеОбъектаXDTOПоПути(Доверенность, "Документ.Передов.СвПолн.МашПолн"); // СписокXDTO
		
		Если СписокМашиночитаемыхПолномочий.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не указаны машиночитаемые полномочия МЧД.'");
			Путь = "Доверенность[0].Документ[0].Передов[0].СвПолн[0].МашПолн";
			ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения, Путь, ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Поле Из НаборОбязательныхПолей Цикл
		ПроверитьЗаполнениеУсловногоПоля(Поле, ОшибкиЗаполнения);
	КонецЦикла;
	
КонецПроцедуры

// Новое данные условного поля.
// 
// Возвращаемое значение:
//  Структура:
// * ОбъектXDTO - Неопределено, ОбъектXDTO - Объект-владелец поля
// * ЛокальныйПуть - Строка - Путь до поля в формате <Свойство>.<Субсвойство>.<Субсубсвойство>...
//                            Не должен содержать списков XDTO
// * ПолныйПутьПоля - Строка - Полный путь до поля с индексами в формате:
//                             Доветенность[0].<Свойство>[0].<Субсвойство>[Индекс].<Субсубсвойство>...
// * ТекстОшибки - Строка - Текст ошибки в случае незаполнения поля
Функция НовыеДанныеУсловногоПоля()
	
	ДанныеПоля = Новый Структура;
	ДанныеПоля.Вставить("ОбъектXDTO", Неопределено);
	ДанныеПоля.Вставить("ЛокальныйПуть", "");
	ДанныеПоля.Вставить("ПолныйПутьПоля", "");
	ДанныеПоля.Вставить("ТекстОшибки", "");
	
	Возврат ДанныеПоля;
	
КонецФункции

// Проверить заполнение условного поля.
// 
// Параметры:
//  ДанныеУсловногоПоля - см. НовыеДанныеУсловногоПоля
//  ОшибкиЗаполнения - см. НовыйНаборОшибокЗаполненияОбъектаМЧД
//
Процедура ПроверитьЗаполнениеУсловногоПоля(ДанныеУсловногоПоля, ОшибкиЗаполнения)
	
	Объект = ДанныеУсловногоПоля.ОбъектXDTO;
	ЛокальныйПуть = ДанныеУсловногоПоля.ЛокальныйПуть;
	
	Если ДанныеОбъектаXDTOПоПути(Объект, ЛокальныйПуть) = Неопределено Тогда
		ДобавитьОшибкуЗаполненияОбъектаМЧД(ОшибкиЗаполнения,
			ДанныеУсловногоПоля.ПолныйПутьПоля, ДанныеУсловногоПоля.ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЧтениеДанныхМЧДИзXDTO

// Рекурсивно читает данные объекта МЧД из объекта XDTO
// 
// Параметры:
//  ДанныеОбъектаМЧД - Структура
//  Объект - ОбъектXDTO
// 
Процедура РекурсивноПрочитатьСвойстваОбъектаМЧД(ДанныеОбъектаМЧД, Объект)
	
	Для Каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЭтоОбъект = ЭтоОбъектXDTO(СвойствоОбъекта);
		ЭтоСписок = ЭтоСписокXDTO(СвойствоОбъекта);
		
		Если Не ЭтоОбъект И Не ЭтоСписок Тогда
			ПрочитатьСвойствоОбъектаМЧДПростогоТипа(ДанныеОбъектаМЧД, Объект, СвойствоОбъекта);
		ИначеЕсли Не ЭтоСписок Тогда
			ПрочитатьСвойствоОбъектаМЧДОбъектногоТипа(ДанныеОбъектаМЧД, Объект, СвойствоОбъекта);
		ИначеЕсли ЭтоОбъект Тогда
			ПрочитатьСписокОбъектаМЧДОбъектногоТипа(ДанныеОбъектаМЧД, Объект, СвойствоОбъекта);
		Иначе
			ПрочитатьСписокОбъектаМЧДПростогоТипа(ДанныеОбъектаМЧД, Объект, СвойствоОбъекта);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Прочитать свойство объекта МЧД простого типа.
// 
// Параметры:
//  ДанныеОбъектаМЧД - Структура
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//
Процедура ПрочитатьСвойствоОбъектаМЧДПростогоТипа(ДанныеОбъектаМЧД, Объект, Свойство)
	
	ИмяТипа = ИмяПростогоТипаПоТипуXDTO(Свойство.Тип);
	Значение = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(Объект, Свойство.Имя, , ИмяТипа);
	Если Значение <> Неопределено Тогда
		ДанныеОбъектаМЧД.Вставить(Свойство.Имя, Значение);
	КонецЕсли;
	
КонецПроцедуры

// Прочитать свойство объекта МЧДОбъектного типа.
// 
// Параметры:
//  ДанныеОбъектаМЧД - Структура
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//
Процедура ПрочитатьСвойствоОбъектаМЧДОбъектногоТипа(ДанныеОбъектаМЧД, Объект, Свойство)
	
	ДанныеСвойства = Новый Массив(); // Массив Из Структура
	ОбъектСвойства = Объект.Получить(Свойство);
	Если ОбъектСвойства <> Неопределено Тогда
		ЭлементСвойства = Новый Структура();
		РекурсивноПрочитатьСвойстваОбъектаМЧД(ЭлементСвойства, ОбъектСвойства);
		ДанныеСвойства.Добавить(ЭлементСвойства);
	КонецЕсли;
	
	ДанныеОбъектаМЧД.Вставить(Свойство.Имя, ДанныеСвойства);
	
КонецПроцедуры

// Прочитать список объекта МЧДОбъектного типа.
// 
// Параметры:
//  ДанныеОбъектаМЧД - Структура
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//
Процедура ПрочитатьСписокОбъектаМЧДОбъектногоТипа(ДанныеОбъектаМЧД, Объект, Свойство)
	
	ДанныеСвойства = Новый Массив(); // Массив Из Структура
	СписокСвойства = Объект.ПолучитьСписок(Свойство);
	
	Для Каждого ЭлементСписка Из СписокСвойства Цикл
		
		ДанныеЭлементаСписка = Новый Структура();
		РекурсивноПрочитатьСвойстваОбъектаМЧД(ДанныеЭлементаСписка, ЭлементСписка);
		ДанныеСвойства.Добавить(ДанныеЭлементаСписка);
		
	КонецЦикла;
	
	ДанныеОбъектаМЧД.Вставить(Свойство.Имя, ДанныеСвойства);
	
КонецПроцедуры

// Прочитать список объекта МЧДПростого типа.
// 
// Параметры:
//  ДанныеОбъектаМЧД - Структура
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//
Процедура ПрочитатьСписокОбъектаМЧДПростогоТипа(ДанныеОбъектаМЧД, Объект, Свойство)
	
	ДанныеСвойства = Новый Массив(); // Массив Из Строка
	СписокСвойства = Объект.ПолучитьСписок(Свойство); // СписокXDTO Из Строка
	
	Для Каждого ЭлементСписка Из СписокСвойства Цикл
		
		ДанныеСвойства.Добавить(ЭлементСписка);
		
	КонецЦикла;
	
	ДанныеОбъектаМЧД.Вставить(Свойство.Имя, ДанныеСвойства);
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеXDTOИзDOM

// Добавляет ошибку заполнения объекта МЧД.
// 
// Параметры:
//  НаборОшибок - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//  Путь - Строка
//  ТекстОшибки - Строка
//
Процедура ДобавитьОшибкуЧтенияXDTOИзДвоичныхДанных(НаборОшибок, Путь, ТекстОшибки)
	
	ОшибкиДляПути = НаборОшибок[Путь]; // Массив Из Строка
	Если ОшибкиДляПути = Неопределено Тогда
		ОшибкиДляПути = Новый Массив(); // Массив Из Строка
		НаборОшибок[Путь] = ОшибкиДляПути;
	КонецЕсли;
	
	ОшибкиДляПути.Добавить(ТекстОшибки);
	
КонецПроцедуры

// Заполняет рекурсивно все возможные поля объекта XDTO МЧД по документу DOM
// 
// Параметры:
//  Объект - ОбъектXDTO
//  ЭлементDOM - ЭлементDOM, ДокументDOM -
//  Путь - Строка
//  ОшибкиЧтения - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//
Процедура РекурсивноЗаполнитьОбъектМЧДПоДокументуDOM(Объект, ЭлементDOM, Путь, ОшибкиЧтения)
	
	Для Каждого СвойствоОбъекта Из Объект.Свойства() Цикл
		
		ЭтоОбъект = ЭтоОбъектXDTO(СвойствоОбъекта);
		ЭтоСписок = ЭтоСписокXDTO(СвойствоОбъекта);
		
		Если Не ЭтоОбъект И Не ЭтоСписок Тогда
			ЗаполнитьСвойствоОбъектаМЧДПоДокументуDOMПростогоТипа(Объект, СвойствоОбъекта,
				ЭлементDOM, Путь, ОшибкиЧтения);
		ИначеЕсли Не ЭтоСписок Тогда
			ЗаполнитьСвойствоОбъектаМЧДПоДокументуDOMОбъектногоТипа(Объект, СвойствоОбъекта,
				ЭлементDOM, Путь, ОшибкиЧтения);
		ИначеЕсли ЭтоОбъект Тогда
			ЗаполнитьСписокОбъектаМЧДПоДокументуDOMОбъектногоТипа(Объект, СвойствоОбъекта,
				ЭлементDOM, Путь, ОшибкиЧтения);
		Иначе
			ЗаполнитьСписокОбъектаМЧДПоДокументуDOMПростогоТипа(Объект, СвойствоОбъекта,
				ЭлементDOM, Путь, ОшибкиЧтения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить свойство объекта МЧД по документу DOM простого типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//  ЭлементDOM - ЭлементDOM, ДокументDOM -
//  Путь - Строка
//  ОшибкиЧтения - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//
Процедура ЗаполнитьСвойствоОбъектаМЧДПоДокументуDOMПростогоТипа(Объект, Свойство, ЭлементDOM, Путь, ОшибкиЧтения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, Свойство.Имя);
	
	ЕстьАтрибут = ЭлементDOM.ЕстьАтрибут(Свойство.Имя);
	Если ЕстьАтрибут Тогда
		
		Атрибут = ЭлементDOM.ПолучитьАтрибут(Свойство.Имя);
		
		Попытка
			Объект.Установить(Свойство, Атрибут);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при установке значения свойства ""%1"": %2'"),
				Свойство.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДобавитьОшибкуЧтенияXDTOИзДвоичныхДанных(ОшибкиЧтения, ПутьДанныхСвойства, ТекстОшибки);
		КонецПопытки;
		
		Возврат;
	КонецЕсли;
	
	ЭлементыDOM = ЭлементDOM.ПолучитьЭлементыПоИмени(Свойство.Имя);
	
	ЭлементСвойства = Неопределено;
	Для каждого ДочернийЭлемент Из ЭлементыDOM Цикл
		
		Если ДочернийЭлемент.РодительскийУзел <> ЭлементDOM Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСвойства = ДочернийЭлемент;
		Прервать;
		
	КонецЦикла;
	
	Если ЭлементСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Объект.Установить(Свойство, ЭлементСвойства.ТекстовоеСодержимое);
	Исключение
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Заполнить свойство объекта МЧД по документу DOM объектного типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//  ЭлементDOM - ЭлементDOM, ДокументDOM -
//  Путь - Строка
//  ОшибкиЧтения - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//
Процедура ЗаполнитьСвойствоОбъектаМЧДПоДокументуDOMОбъектногоТипа(Объект, Свойство, ЭлементDOM, Путь, ОшибкиЧтения)
	
	ПутьДанныхСвойства = СтрШаблон("%1[0].%2", Путь, Свойство.Имя);
	
	ЭлементыDOM = ЭлементDOM.ПолучитьЭлементыПоИмени(Свойство.Имя);
	Если ЭлементыDOM.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСвойства = Неопределено;
	Для каждого ДочернийЭлемент Из ЭлементыDOM Цикл
		
		Если ДочернийЭлемент.РодительскийУзел <> ЭлементDOM Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементСвойства = ДочернийЭлемент;
		Прервать;
		
	КонецЦикла;
	
	Если ЭлементСвойства = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСвойства = ФабрикаXDTO.Создать(Свойство.Тип);
	РекурсивноЗаполнитьОбъектМЧДПоДокументуDOM(ОбъектСвойства, ЭлементСвойства, ПутьДанныхСвойства, ОшибкиЧтения);
	Объект.Установить(Свойство, ОбъектСвойства);
	
КонецПроцедуры

// Заполнить свойство объекта МЧД по документу DOM объектного типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//  ЭлементDOM - ЭлементDOM, ДокументDOM -
//  Путь - Строка
//  ОшибкиЧтения - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//
Процедура ЗаполнитьСписокОбъектаМЧДПоДокументуDOMОбъектногоТипа(Объект, Свойство, ЭлементDOM, Путь, ОшибкиЧтения)
	
	ЭлементыDOM = ЭлементDOM.ПолучитьЭлементыПоИмени(Свойство.Имя);
	Если ЭлементыDOM.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСписка = Объект.ПолучитьСписок(Свойство.Имя);
	
	Индекс = 0;
	
	Для Каждого ДочернийЭлемент Из ЭлементыDOM Цикл
		
		Если ДочернийЭлемент.РодительскийУзел <> ЭлементDOM Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьДанныхСвойства = СтрШаблон("%1[%2].%3", Путь, Индекс, Свойство.Имя);
		
		ЭлементСписка = ФабрикаXDTO.Создать(Свойство.Тип);
		РекурсивноЗаполнитьОбъектМЧДПоДокументуDOM(ЭлементСписка, ДочернийЭлемент, ПутьДанныхСвойства, ОшибкиЧтения);
		
		Попытка
			ОбъектСписка.Добавить(ЭлементСписка);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при установке значения свойства ""%1"": %2'"),
				Свойство.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДобавитьОшибкуЧтенияXDTOИзДвоичныхДанных(ОшибкиЧтения, ПутьДанныхСвойства, ТекстОшибки);
		КонецПопытки;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить свойство объекта МЧД по документу DOM объектного типа.
// 
// Параметры:
//  Объект - ОбъектXDTO
//  Свойство - СвойствоXDTO
//  ЭлементDOM - ЭлементDOM, ДокументDOM -
//  Путь - Строка
//  ОшибкиЧтения - см. НовыйНаборОшибокЧтенияXDTOИзДвоичныхДанных
//
Процедура ЗаполнитьСписокОбъектаМЧДПоДокументуDOMПростогоТипа(Объект, Свойство, ЭлементDOM, Путь, ОшибкиЧтения)
	
	ЭлементыDOM = ЭлементDOM.ПолучитьЭлементыПоИмени(Свойство.Имя);
	Если ЭлементыDOM.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСписка = Объект.ПолучитьСписок(Свойство.Имя);
	
	Индекс = 0;
	
	Для Каждого ДочернийЭлемент Из ЭлементыDOM Цикл
		
		Если ДочернийЭлемент.РодительскийУзел <> ЭлементDOM Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьДанныхСвойства = СтрШаблон("%1[%2].%3", Путь, Индекс,Свойство.Имя);
		
		Попытка
			ОбъектСписка.Добавить(ДочернийЭлемент.ТекстовоеСодержимое);
		Исключение
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при установке значения свойства ""%1"": %2'"),
				Свойство.Имя, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДобавитьОшибкуЧтенияXDTOИзДвоичныхДанных(ОшибкиЧтения, ПутьДанныхСвойства, ТекстОшибки);
		КонецПопытки;
		
		Индекс = Индекс + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтличияВДанныхМЧД

// Заполнить данные по путям по данным МЧДРекурсивно.
// 
// Параметры:
//  Данные - Структура
//  ДанныеПоПутям - Соответствие Из КлючИЗначение:
//    * Ключ - Строка - Путь к данным
//    * Значение - Дата, Число, Строка - 
//  Путь - Строка
//
Процедура ЗаполнитьДанныеПоПутямПоДаннымМЧДРекурсивно(Данные, ДанныеПоПутям, Путь)
	
	Для Каждого Элемент Из Данные Цикл
		
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Индекс = 0;
			Для Каждого ЭлементМассива Из Значение Цикл
				ПутьСвойства = СтрШаблон("%1[%2].%3", Путь, Индекс, Ключ);
				
				Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
					ЗаполнитьДанныеПоПутямПоДаннымМЧДРекурсивно(ЭлементМассива, ДанныеПоПутям, ПутьСвойства);
				Иначе
					ДанныеПоПутям.Вставить(ПутьСвойства, ЭлементМассива);
				КонецЕсли;
				
				Индекс = Индекс + 1;
			КонецЦикла;
			
		Иначе
			
			ПутьСвойства = СтрШаблон("%1[0].%2", Путь, Ключ);
			ДанныеПоПутям.Вставить(ПутьСвойства, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НеподдерживаемыеСвойстваМЧД

// Неподдерживаемые свойства шапки доверенности.
// 
// Возвращаемое значение:
//  Массив Из Строка
//
Функция НеподдерживаемыеСвойстваШапкиДоверенностиПередоверия()
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Довер");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПереДовер.Безотзыв");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвНотУд");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПервДовер.СвНотДейств");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПервДовер.ВриоНот");
	
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПервДовер.СвДоверПерв.ДоверитПерв.ИПДовер.ДокПдтв");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПервДовер.СвДоверПерв.ДоверитПерв.ИПДовер.СведФЛ.АдрМЖ");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПервДовер.СвДоверПерв.ДоверитПерв.ИПДовер.СведФЛ.УдЛичнФЛ");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов.СвПервДовер.СвДоверПерв.ДоверитПерв.ИПДовер.НаимИП");
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

// Неподдерживаемые свойства шапки доверенности.
// 
// Возвращаемое значение:
//  Массив Из Строка
//
Функция НеподдерживаемыеСвойстваШапкиДоверенности()
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Передов");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Довер.СвДов.Безотзыв");
	НеподдерживаемыеРеквизиты.Добавить("Доверенность.Документ.Довер.СвНотУд");
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

// Неподдерживаемые свойства доверителей.
// 
// Возвращаемое значение:
//  Массив Из Строка
//
Функция НеподдерживаемыеСвойстваДоверителейПередоверия()
	
	ЛокальныеПути = Новый Массив; // Массив Из Строка
	ЛокальныеПути.Добавить("РосОргПерПолн.СвРосОрг.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СВЮЛ.СвЮЛЕИО.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СВЮЛ.СвФЛ.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СВЮЛ.СвФЛ.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СВЮЛ.СвФЛ.СведФЛ.УдЛичнФЛ");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СвИП.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СвИП.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СвФЛ.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СвФЛ.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("РосОргПерПолн.ЛицоБезДов.СвФЛ.СведФЛ.УдЛичнФЛ");
	ЛокальныеПути.Добавить("ИППерПолн.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("ФЛПерПолн.СведФЛ.АдрМЖ");
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	
	ПутьДоверителя = "Доверенность.Документ.Передов.СвПередПолн.ПередПолн";
	Для Каждого ЛокальныйПуть Из ЛокальныеПути Цикл
		НеподдерживаемыеРеквизиты.Добавить(СтрШаблон("%1.%2", ПутьДоверителя, ЛокальныйПуть));
	КонецЦикла;
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

// Неподдерживаемые свойства доверителей.
// 
// Возвращаемое значение:
//  Массив Из Строка
//
Функция НеподдерживаемыеСвойстваДоверителей()
	
	ЛокальныеПути = Новый Массив; // Массив Из Строка
	ЛокальныеПути.Добавить("ИнОргДовер");
	ЛокальныеПути.Добавить("ФЛДовер");
	ЛокальныеПути.Добавить("РосОргДовер.СвРосОрг.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СВЮЛ.СвЮЛЕИО.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СВЮЛ.СвФЛ.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СВЮЛ.СвФЛ.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СВЮЛ.СвФЛ.СведФЛ.УдЛичнФЛ");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СвИП.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СвИП.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СвИП.СведФЛ.УдЛичнФЛ");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СвФЛ.ДокПдтв");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СвФЛ.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("РосОргДовер.ЛицоБезДов.СвФЛ.СведФЛ.УдЛичнФЛ");
	ЛокальныеПути.Добавить("ИПДовер.ДокПдтв");
	ЛокальныеПути.Добавить("ИПДовер.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("ИПДовер.СведФЛ.УдЛичнФЛ");
	ЛокальныеПути.Добавить("ИПДовер.НаимИП");
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	
	ПутьДоверителя = "Доверенность.Документ.Довер.СвДоверит.Доверит";
	Для Каждого ЛокальныйПуть Из ЛокальныеПути Цикл
		НеподдерживаемыеРеквизиты.Добавить(СтрШаблон("%1.%2", ПутьДоверителя, ЛокальныйПуть));
	КонецЦикла;
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

// Неподдерживаемые свойства представителей.
// 
// Возвращаемое значение:
//  Массив Из Строка
//
Функция НеподдерживаемыеСвойстваПредставителей()
	
	ЛокальныеПути = Новый Массив; // Массив Из Строка
	ЛокальныеПути.Добавить("СведИО");
	ЛокальныеПути.Добавить("СведФилиал");
	ЛокальныеПути.Добавить("СведОрг.ДокПдтв");
	ЛокальныеПути.Добавить("СведОрг.АдрРег");
	ЛокальныеПути.Добавить("СведИП.ДокПдтв");
	ЛокальныеПути.Добавить("СведИП.НаимИП");
	ЛокальныеПути.Добавить("СведИП.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("СведФизЛ.ДокПдтв");
	ЛокальныеПути.Добавить("СведФизЛ.СведФЛ.АдрМЖ");
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	
	ПутьПредставителя = "Доверенность.Документ.Довер.СвУпПред.Пред";
	Для Каждого ЛокальныйПуть Из ЛокальныеПути Цикл
		НеподдерживаемыеРеквизиты.Добавить(СтрШаблон("%1.%2", ПутьПредставителя, ЛокальныйПуть));
	КонецЦикла;
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

// Неподдерживаемые свойства представителей.
// 
// Возвращаемое значение:
//  Массив Из Строка
//
Функция НеподдерживаемыеСвойстваПредставителейПередоверия()
	
	ЛокальныеПути = Новый Массив; // Массив Из Строка
	ЛокальныеПути.Добавить("СведИО");
	ЛокальныеПути.Добавить("СведФилиал");
	ЛокальныеПути.Добавить("СведОрг.ДокПдтв");
	ЛокальныеПути.Добавить("СведОрг.АдрРег");
	ЛокальныеПути.Добавить("СведИП.ДокПдтв");
	ЛокальныеПути.Добавить("СведИП.НаимИП");
	ЛокальныеПути.Добавить("СведИП.СведФЛ.АдрМЖ");
	ЛокальныеПути.Добавить("СведФизЛ.ДокПдтв");
	ЛокальныеПути.Добавить("СведФизЛ.СведФЛ.АдрМЖ");
	
	НеподдерживаемыеРеквизиты = Новый Массив; // Массив Из Строка
	
	ПутьПредставителя = "Доверенность.Документ.Передов.СвПолучПолн.Пред";
	Для Каждого ЛокальныйПуть Из ЛокальныеПути Цикл
		НеподдерживаемыеРеквизиты.Добавить(СтрШаблон("%1.%2", ПутьПредставителя, ЛокальныйПуть));
	КонецЦикла;
	
	Возврат НеподдерживаемыеРеквизиты;
	
КонецФункции

#КонецОбласти

// Таблица данных МЧДДля подписания.
// 
// Параметры:
//  Доверенности -Массив из СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  ТаблицаЗначений -  Таблица данных МЧДДля подписания:
// * Ссылка - СправочникСсылка.МЧД003 - 
// * Организация -ОпределяемыйТип.Организация
// * СНИЛСДоверителя - Строка - 
// * СтатусВРеестреФНС - ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС
// * ОрганизацияИНН - Строка
// * ОрганизацияКПП - Строка
// * ОрганизацияОГРН - Строка
Функция ТаблицаДанныхМЧДДляПодписания(Доверенности)
	ТаблицаДанныхМЧД = Новый ТаблицаЗначений;
	ТаблицаДанныхМЧД.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.МЧД003"));
	ТаблицаДанныхМЧД.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаДанныхМЧД.Колонки.Добавить("ОрганизацияИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	ТаблицаДанныхМЧД.Колонки.Добавить("ОрганизацияКПП", ОбщегоНазначения.ОписаниеТипаСтрока(9));
	ТаблицаДанныхМЧД.Колонки.Добавить("ОрганизацияОГРН", ОбщегоНазначения.ОписаниеТипаСтрока(15));
	ТаблицаДанныхМЧД.Колонки.Добавить("СНИЛСДоверителя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(14)));
	ТаблицаДанныхМЧД.Колонки.Добавить("СтатусВРеестреФНС", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыМашиночитаемойДоверенностиВРеестреФНС"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
           |	МЧД003.Ссылка КАК Ссылка,
           |	МЧД003.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
           |	ЖурналМашиночитаемыхДоверенностей.ВсеДоверители КАК ВсеДоверители
           |ИЗ
           |	Справочник.МЧД003 КАК МЧД003
           |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналМашиночитаемыхДоверенностей КАК ЖурналМашиночитаемыхДоверенностей
           |		ПО (МЧД003.ХешФайла = ЖурналМашиночитаемыхДоверенностей.Хеш
           |				И МЧД003.Ссылка В (&Доверенности))";
	Запрос.УстановитьПараметр("Доверенности", Доверенности);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ЗначениеЗаполнено(Выборка.ВсеДоверители) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаМЧД = ТаблицаДанныхМЧД.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМЧД, Выборка);
		ВсеДоверители = ОбщегоНазначенияБЭД.JSONЗначение(Выборка.ВсеДоверители);
		Для Каждого ДанныеДоверителя Из ВсеДоверители Цикл
			ОтборОрганизации = Новый Структура("ИНН, КПП, ОГРН");
			Если ДанныеДоверителя.ДанныеЮридическогоЛица = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМЧД.ОрганизацияИНН = ДанныеДоверителя.ДанныеЮридическогоЛица.ИНН;
			СтрокаМЧД.ОрганизацияКПП = ДанныеДоверителя.ДанныеЮридическогоЛица.КПП;
			СтрокаМЧД.ОрганизацияОГРН = ДанныеДоверителя.ДанныеЮридическогоЛица.ОГРН;
			
			ЛицаБезДоверенности = ДанныеДоверителя.ДанныеЮридическогоЛица.ЛицаБезДоверенности[0];
			ЗаполнитьЗначенияСвойств(ОтборОрганизации, ДанныеДоверителя.ДанныеЮридическогоЛица);
			Если ЛицаБезДоверенности.Свойство("ЛицаБезДоверенности") Тогда
				ЗаполнитьЗначенияСвойств(ОтборОрганизации, ЛицаБезДоверенности);
				ЛицаБезДоверенности = ЛицаБезДоверенности.ЛицаБезДоверенности[0];
			КонецЕсли;
			ЭлектронноеВзаимодействиеПереопределяемый.НайтиСсылкуНаОбъект("Организации",
				СтрокаМЧД.Организация,, ОтборОрганизации);
			СтрокаМЧД.СНИЛСДоверителя = ЛицаБезДоверенности.СНИЛС;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблицаДанныхМЧД;
КонецФункции


#КонецОбласти

#КонецОбласти

#КонецЕсли
