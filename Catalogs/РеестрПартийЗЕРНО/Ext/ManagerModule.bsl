#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление =  СтрШаблон("%1, %2, %3, %4", 
		Данные.Идентификатор,
		Данные.ОКПД2,
		Данные.НазначениеПартии,
		Данные.ЦельИспользования);
	Если Данные.ТребуетсяЗагрузка Тогда
		Представление = СтрШаблон(НСтр("ru = '(не загружено) %1'"), Представление);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Идентификатор");
	Поля.Добавить("ОКПД2");
	
	Поля.Добавить("НазначениеПартии");
	Поля.Добавить("ЦельИспользования");
	Поля.Добавить("ТребуетсяЗагрузка");
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Справочники.РеестрПартийЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

Функция ПотребительскиеСвойстваПартии(СправочникСсылка) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПотребительскиеСвойства.ПотребительскоеСвойство КАК ПотребительскоеСвойство,
	|	ПотребительскиеСвойства.Значение                КАК Значение
	|ИЗ
	|	Справочник.РеестрПартийЗЕРНО.ПотребительскиеСвойства КАК ПотребительскиеСвойства
	|ГДЕ
	|	ПотребительскиеСвойства.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", СправочникСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СтруктураРеквизитовПартии() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	
	КоллекцияРеквизитов = Метаданные.Справочники.РеестрПартийЗЕРНО.Реквизиты;

	ВозвращаемоеЗначение.Вставить("ПартияСсылка");
	Для Каждого Реквизит Из КоллекцияРеквизитов Цикл
		ВозвращаемоеЗначение.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаСообщений

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		ПараметрыЗапросаОснования             = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные.Record);
		Блокировка         = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
	
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			ПараметрыЗагрузкиПартии = ПараметрыЗагрузкиПартии();
			ПараметрыЗагрузкиПартии.Организация     = ЭлементОчереди.Организация;
			ПараметрыЗагрузкиПартии.Подразделение   = ЭлементОчереди.Подразделение;
			ПараметрыЗагрузкиПартии.ВидПродукции    = ЭлементОчереди.ВидПродукции;
			ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				ПартияЗерна = ЗагрузитьПартиюЗерна(
					СтрокаДанных,
					ПараметрыЗагрузкиПартии);
				Если ЗначениеЗаполнено(ПартияЗерна) Тогда
					ИзмененныеОбъекты.Добавить(ПартияЗерна);
					ПараметрыЗапросаОснования.ЗагруженныеПартии.Добавить(ПартияЗерна);
				КонецЕсли;
			КонецЦикла;
			
			Если ПолученныеДанные.hasMore Тогда
			
				СообщенияXML = Новый Массив;
				
				НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
				НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
				
				СообщениеXML = СообщенияЗагрузкиПартий(НовыеПараметрыФормирования, ПараметрыОбмена);
				СообщениеXML.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, РеквизитыИсходящегоСообщения);
				СообщенияXML.Добавить(СообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена);
			
			КонецЕсли;
			
			ИнтеграцияЗЕРНОСлужебный.УстановитьДатуВыполненияСинхронизации(ПараметрыОбмена, ПолученныеДанные, ЭлементОчереди);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса Тогда
		
		ЗаписатьСоответствиеПартийНоменклатуреПоРодительскимПартиям(
			ПараметрыЗапроса.ЗагруженныеПартии);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - СправочникСсылка.РеестрПартийЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		Возврат СообщенияЗагрузкиСпискаПартий(ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Сообщение загрузки списка партий
//
// Параметры:
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
Функция СообщенияЗагрузкиСпискаПартий(ДополнительныеПараметры) Экспорт
	
	СообщенияXML     = Новый Массив();
	Операция         = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Операция;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ВидПродукции     = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ВидПродукции;
	Организация      = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
	Подразделение    = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Подразделение;
	НомерВерсии      = 1;
	
	АбстрактноеСообщениеXML   = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	АбстрактноеСообщениеXML.Операция            = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса;
	АбстрактноеСообщениеXML.ВидПродукции        = ВидПродукции;
	АбстрактноеСообщениеXML.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	АбстрактноеСообщениеXML.Версия              = НомерВерсии;
	АбстрактноеСообщениеXML.СсылкаНаОбъект      = ПустаяСсылка();
	АбстрактноеСообщениеXML.Организация         = Организация;
	АбстрактноеСообщениеXML.Подразделение       = Подразделение;
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ПараметрыФормирования = ПараметрыФормированияСообщенияXML();
	ПараметрыФормирования.ВидПродукции  = ВидПродукции;
	ПараметрыФормирования.НомерВерсии   = НомерВерсии;
	ПараметрыФормирования.Операция      = Операция;
	ПараметрыФормирования.Организация   = АбстрактноеСообщениеXML.Организация;
	ПараметрыФормирования.Подразделение = АбстрактноеСообщениеXML.Подразделение;
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	
	СтрокаИсточникаРеквизитов = ТаблицаИсточникиРеквизитов.Добавить();
	СтрокаИсточникаРеквизитов.ОрганизацияКонтрагент = Организация;
	СтрокаИсточникаРеквизитов.Подразделение         = Подразделение;
	
	Если ПараметрыЗапроса <> Неопределено Тогда
	
		Если ПараметрыЗапроса.Свойство("Элеватор")
			И ЗначениеЗаполнено(ПараметрыЗапроса.Элеватор) Тогда
			Элеватор               = ПараметрыЗапроса.Элеватор;
			ПодразделениеЭлеватора = ПараметрыЗапроса.ПодразделениеЭлеватора;
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Элеватор, ПодразделениеЭлеватора);
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ВладелецПартии")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ВладелецПартии) Тогда
			ВладелецПартии               = ПараметрыЗапроса.ВладелецПартии;
			ПодразделениеВладельцаПартии = ПараметрыЗапроса.ПодразделениеВладельцаПартии;
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, ВладелецПартии, ПодразделениеВладельцаПартии);
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("Статус")
			И ЗначениеЗаполнено(ПараметрыЗапроса.Статус) Тогда
			ПараметрыФормирования.СтатусПартииЗерна = ПараметрыЗапроса.Статус;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("Интервал")
			И ПараметрыЗапроса.Интервал <> Неопределено Тогда
			ПараметрыФормирования.Интервал = ПараметрыЗапроса.Интервал;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("НачалоПериодаИзменений")
			И ПараметрыЗапроса.НачалоПериодаИзменений <> Неопределено Тогда
			ПараметрыФормирования.НачалоПериодаИзменений = ПараметрыЗапроса.НачалоПериодаИзменений;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("НомерПартии")
			И ЗначениеЗаполнено(ПараметрыЗапроса.НомерПартии) Тогда
			ПараметрыФормирования.НомерПартии = ПараметрыЗапроса.НомерПартии;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ИдентификаторПартии")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторПартии) Тогда
			ПараметрыФормирования.ИдентификаторПартии = ПараметрыЗапроса.ИдентификаторПартии;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормирования.НомерПартии) Тогда
		
		ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
		
		Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий Тогда
			
			РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Организация, Подразделение);
			
			ПараметрыФормирования.ВладелецПартии           = Организация;
			ПараметрыФормирования.РеквизитыВладельцаПартии = РеквизитыОрганизацииКонтрагента;
			
			Если ЗначениеЗаполнено(Элеватор) Тогда
				
				РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Элеватор, ПодразделениеЭлеватора);
				
				ПараметрыФормирования.Элеватор           = Элеватор;
				ПараметрыФормирования.РеквизитыЭлеватора = РеквизитыОрганизацииКонтрагента;
				
			КонецЕсли;
			
		ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении Тогда
			
			РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Организация, Подразделение);
			
			ПараметрыФормирования.Элеватор           = Организация;
			ПараметрыФормирования.РеквизитыЭлеватора = РеквизитыОрганизацииКонтрагента;
			
			Если ЗначениеЗаполнено(ВладелецПартии) Тогда
				
				РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, ВладелецПартии, ПодразделениеВладельцаПартии);
				
				ПараметрыФормирования.ВладелецПартии           = ВладелецПартии;
				ПараметрыФормирования.РеквизитыВладельцаПартии = РеквизитыОрганизацииКонтрагента;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	АбстрактноеСообщениеXML.ПараметрыЗапроса = ПараметрыФормирования;
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	ПараметрыСообщений = Новый ТаблицаЗначений();
	ПараметрыСообщений.Колонки.Добавить("НомерПартии", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Если ТипЗнч(ПараметрыФормирования.НомерПартии) = Тип("Массив") Тогда
		Для Каждого НомерПартии Из ПараметрыФормирования.НомерПартии Цикл
			НоваяСтрока = ПараметрыСообщений.Добавить();
			НоваяСтрока.НомерПартии = НомерПартии;
		КонецЦикла;
	Иначе
		НоваяСтрока = ПараметрыСообщений.Добавить();
		НоваяСтрока.НомерПартии = ПараметрыФормирования.НомерПартии;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПараметрыСообщений Цикл
		
		НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормирования);
		НовыеПараметрыФормирования.НомерПартии = СтрокаТаблицы.НомерПартии;
		
		СообщениеXML = СообщенияЗагрузкиПартий(
			НовыеПараметрыФормирования,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщениеXML.ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		СообщенияXML.Добавить(СообщениеXML);
		
		АбстрактноеСообщениеXML.ДополнительноеОписание = СообщениеXML.ДополнительноеОписание;
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

Функция СообщениеЗагрузкиПартииПоНомеру(НомерПартии, ДополнительныеПараметры, ПараметрыОбмена) Экспорт
	
	Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий;
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция                  = Операция;
	СообщениеXML.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия                    = 1;
	СообщениеXML.Организация               = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация;
	СообщениеXML.Подразделение             = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Подразделение;
	СообщениеXML.ПараметрыЗапроса          = Новый Структура();
	СообщениеXML.ВидПродукции              = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ВидПродукции;
	СообщениеXML.ДополнительноеОписание    = СтрШаблон(НСтр("ru = '№ партии: %1'"), НомерПартии);
	
	Если ДополнительныеПараметры.ПараметрыОбработкиДокумента.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListGpb";
	ИначеЕсли ДополнительныеПараметры.ПараметрыОбработкиДокумента.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListLot";
	Иначе
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Внутренняя ошибка. Не определен вид продукции при загрузке партии %1'"),
			НомерПартии);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	ЗапросПартийXDTO    = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ДополнительныеПараметры.ПараметрыОбработкиДокумента.ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, ИмяПоляНомерПартии, НомерПартии, СообщениеXML);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ЗапросПартийXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ДополнительныеПараметры.ПараметрыОбмена);
		
	Возврат СообщениеXML;
	
КонецФункции

Функция СообщенияЗагрузкиПартий(ПараметрыФормирования, ПараметрыОбмена = Неопределено)
	
	Если ПараметрыФормирования.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListGpb";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListLot";
	КонецЕсли;
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ЗапросПартийXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = ПараметрыФормирования.Операция;
	СообщениеXML.ВидПродукции     = ПараметрыФормирования.ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = ПараметрыФормирования.НомерВерсии;
	СообщениеXML.ПараметрыЗапроса = ПараметрыФормирования;
	СообщениеXML.Организация      = ПараметрыФормирования.Организация;
	СообщениеXML.Подразделение    = ПараметрыФормирования.Подразделение;
	СообщениеXML.СсылкаНаОбъект   = ПустаяСсылка();
	
	Если ПараметрыФормирования.РеквизитыВладельцаПартии <> Неопределено Тогда
		ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ПараметрыФормирования.РеквизитыВладельцаПартии,
			СообщениеXML,
			ПараметрыОбмена,
			СтрШаблон(НСтр("ru = 'Владелец партии %1'"), Строка(ПараметрыФормирования.ВладелецПартии)));
	КонецЕсли;
	
	Если ПараметрыФормирования.РеквизитыЭлеватора <> Неопределено Тогда
		ЭлеваторXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ПараметрыФормирования.РеквизитыЭлеватора,
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Элеватор %1'"), Строка(ПараметрыФормирования.Элеватор)));
	КонецЕсли;
	
	ДанныеОписания = Новый Массив();
	Если ВладелецПартииXDTO <> Неопределено Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "Owner", ВладелецПартииXDTO, СообщениеXML);
	КонецЕсли;
	
	Если ЭлеваторXDTO <> Неопределено Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "Repository", ЭлеваторXDTO, СообщениеXML);
	КонецЕсли;
	
	Если ПараметрыФормирования.Свойство("Интервал")
		И ПараметрыФормирования.Интервал <> Неопределено Тогда
		Интервал = ПараметрыФормирования.Интервал;
		Если ЗначениеЗаполнено(Интервал.НачалоПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "dateFrom", Интервал.НачалоПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'с %1'"),
					Формат(Интервал.НачалоПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
		Если ЗначениеЗаполнено(Интервал.КонецПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "dateTo", Интервал.КонецПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'по %1'"),
					Формат(Интервал.КонецПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыФормирования.Свойство("НачалоПериодаИзменений")
		И ПараметрыФормирования.НачалоПериодаИзменений <> Неопределено Тогда
		ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
			ЗапросПартийXDTO, "recordsModifiedFrom",
			ПараметрыФормирования.НачалоПериодаИзменений, ХранилищеВременныхДат);
		ДанныеОписания.Добавить(
			СтрШаблон(
				НСтр("ru = 'измененные с %1'"),
				Формат(ПараметрыФормирования.НачалоПериодаИзменений, "ДФ=dd.MM.yyyy;")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.НомерПартии) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЗапросПартийXDTO,
			ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ПараметрыФормирования.ВидПродукции),
			СокрЛП(ПараметрыФормирования.НомерПартии),
			СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), ПараметрыФормирования.НомерПартии));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.ИдентификаторПартии) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЗапросПартийXDTO,
			ИмяПоляИдентификаторПартииПоВидуПродукции(ПараметрыФормирования.ВидПродукции),
			ПараметрыФормирования.ИдентификаторПартии,
			СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'id: %1'"), ПараметрыФормирования.ИдентификаторПартии));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.СтатусПартииЗерна) Тогда
		СтатусПартииЗерна = ИнтеграцияЗЕРНОСлужебный.СтатусПартииЗерна(ПараметрыФормирования.СтатусПартииЗерна);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "status", СтатусПартииЗерна, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '(статус: %1)'"), ПараметрыФормирования.СтатусПартииЗерна));
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьДанныеПостраничногоПросмотра(
		ЗапросПартийXDTO,
		СообщениеXML,
		ПараметрыФормирования.НомерСтраницы,
		ПараметрыФормирования.КоличествоНаСтранице);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ЗапросПартийXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, СообщениеXML.ТекстСообщенияЗапросXML);
	
	СообщениеXML.ДополнительноеОписание = СтрСоединить(ДанныеОписания, " ");
	
	Возврат СообщениеXML;
	
КонецФункции

Функция ПараметрыФормированияСообщенияXML()
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ПараметрыФормированияСообщенияXML();
	ВозвращаемоеЗначение.Вставить("СтатусПартииЗерна",        Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторПартии",      Неопределено);
	ВозвращаемоеЗначение.Вставить("НомерПартии",              Неопределено);
	ВозвращаемоеЗначение.Вставить("Интервал",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("НачалоПериодаИзменений",   Неопределено);
	ВозвращаемоеЗначение.Вставить("РеквизитыОрганизаций",     Неопределено);
	ВозвращаемоеЗначение.Вставить("РеквизитыЭлеватора",       Неопределено);
	ВозвращаемоеЗначение.Вставить("РеквизитыВладельцаПартии", Неопределено);
	ВозвращаемоеЗначение.Вставить("Элеватор",                 Неопределено);
	ВозвращаемоеЗначение.Вставить("ВладелецПартии",           Неопределено);
	ВозвращаемоеЗначение.Вставить("ЗагруженныеПартии",        Новый Массив());
	
	ВозвращаемоеЗначение.КоличествоНаСтранице = ИнтеграцияЗЕРНО.ПараметрыОптимизации().КоличествоЭлементовСтраницыОтвета;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область ПоискСсылок

Функция ПараметрыПолученияПартии() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ДобавлятьКЗагрузке", Истина);
	ВозвращаемоеЗначение.Вставить("ДанныеПартии",       Неопределено);
	ВозвращаемоеЗначение.Вставить("НовыеОбъекты",       Новый Соответствие());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПартияЗерна(Идентификатор, Организация, Подразделение, ВидПродукции, ПараметрыОбмена, ПараметрыПолучения = Неопределено, ДатаКонтроля = Неопределено) Экспорт
	
	ИмяТаблицы = Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя();
	
	СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
	Иначе
		
		Если ПараметрыПолучения = Неопределено Тогда
			ПараметрыПолучения = ПараметрыПолученияПартии();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
			ВыполнятьЗагрузку = Истина;
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
			
			ТранзакцияЗафиксирована = Истина;
			
			НачатьТранзакцию();
			
			Попытка
				
				Блокировка.Заблокировать();
				
				СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
				
				Если ЗначениеЗаполнено(СправочникСсылка) Тогда
					ВыполнятьЗагрузку = Ложь;
				Иначе
					СправочникСсылка = СоздатьПартиюЗерна(Идентификатор, ПараметрыПолучения);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				
				ОтменитьТранзакцию();
				
				ТранзакцияЗафиксирована = Ложь;
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				               |%3'"),
					Метаданные.Справочники.РеестрПартийЗЕРНО.Синоним,
					Идентификатор,
					ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ТекстОшибкиПодробно = СтрШаблон(
					НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				               |%3'"),
					Метаданные.Справочники.РеестрПартийЗЕРНО.Синоним,
					Идентификатор,
					ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
					ТекстОшибкиПодробно,
					НСтр("ru = 'Работа с реестром партий'", ОбщегоНазначения.КодОсновногоЯзыка()));
				
				ВызватьИсключение ТекстОшибки;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаКонтроля)
			И ЗначениеЗаполнено(ПараметрыОбмена.ПараметрыОптимизации.ДатаОграниченияГлубиныДереваПартий)
			И ДатаКонтроля < ПараметрыОбмена.ПараметрыОптимизации.ДатаОграниченияГлубиныДереваПартий Тогда
			ВыполнятьЗагрузку = Ложь;
		КонецЕсли;
		
		Если ВыполнятьЗагрузку
			И ПараметрыПолучения.ДобавлятьКЗагрузке Тогда
			ИнтеграцияЗЕРНОСлужебный.ДобавитьКЗагрузке(
				ПараметрыОбмена,
				ИмяТаблицы,
				Идентификатор,
				СправочникСсылка,
				Организация,
				Подразделение,
				ВидПродукции);
		КонецЕсли;
		
		ПараметрыПолучения.НовыеОбъекты.Вставить(СправочникСсылка, ВыполнятьЗагрузку);
		
		Если ТранзакцияЗафиксирована Тогда
			ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ПараметрыЗагрузкиПартии() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Организация",        Неопределено);
	ВозвращаемоеЗначение.Вставить("Подразделение",      Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидПродукции",       Неопределено);
	ВозвращаемоеЗначение.Вставить("ПараметрыОбмена",    Неопределено);
	ВозвращаемоеЗначение.Вставить("ТребуетсяПоиск",     Истина);
	ВозвращаемоеЗначение.Вставить("ПараметрыПолучения", ПараметрыПолученияПартии());
	ВозвращаемоеЗначение.Вставить("ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций", Новый Соответствие());
	ВозвращаемоеЗначение.Вставить("ПроверитьЗаполнениеРеквизитовКлючейАдресов",               Новый Соответствие());
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ЗагрузитьПартиюЗерна(ЭлементДанных, ПараметрыЗагрузкиПартии, СуществующийОбъект = Неопределено, ДанныеСопоставления = Неопределено) Экспорт
	
	Организация     = ПараметрыЗагрузкиПартии.Организация;
	Подразделение   = ПараметрыЗагрузкиПартии.Подразделение;
	ВидПродукции    = ПараметрыЗагрузкиПартии.ВидПродукции;
	ПараметрыОбмена = ПараметрыЗагрузкиПартии.ПараметрыОбмена;
	ТребуетсяПоиск  = ПараметрыЗагрузкиПартии.ТребуетсяПоиск;
	
	ЗаписьНового       = Ложь;
	МетаданныеЭлемента = Метаданные.Справочники.РеестрПартийЗЕРНО;
	
	Идентификатор = ЭлементДанных.number;
	
	Если Не ЗначениеЗаполнено(Идентификатор) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если СуществующийОбъект = Неопределено Тогда
		
		СуществующийЭлемент = Неопределено;
		Если ТребуетсяПоиск Тогда
			СуществующийЭлемент = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена,
				МетаданныеЭлемента.ПолноеИмя(),
				Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			СуществующийОбъект = СоздатьЭлемент();
			СуществующийОбъект.Идентификатор = Идентификатор;
			ЗаписьНового = Истина;
		Иначе
			СуществующийОбъект = СуществующийЭлемент.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаписьНового Тогда
		СуществующийОбъект.Заблокировать();
	КонецЕсли;
	СуществующийОбъект.ИдентификаторФГИС   = Формат(ЭлементДанных.id, "ЧГ=0;");
	СуществующийОбъект.Статус              = ИнтеграцияЗЕРНОСлужебный.СтатусПартииЗерна(ЭлементДанных.status);
	СуществующийОбъект.КоличествоНачальное = ЭлементДанных.amountOriginal;
	СуществующийОбъект.УдалитьКоличество   = ЭлементДанных.amountAvailable;
	СуществующийОбъект.Дата                = ЭлементДанных.dateRegistration;
	
	СуществующийОбъект.ПредшествующиеПартии.Очистить();
	
	СуществующийОбъект.ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		ЭлементДанных.Owner,
		ПараметрыОбмена);
	
	Если ЗначениеЗаполнено(СуществующийОбъект.ВладелецПартии) Тогда
		ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций.Вставить(
			СуществующийОбъект.ВладелецПартии, ЭлементДанных.Owner);
	КонецЕсли;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		
		СуществующийОбъект.Элеватор = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
			ЭлементДанных.Repository,
			ПараметрыОбмена);
		
		Если ЗначениеЗаполнено(СуществующийОбъект.Элеватор) Тогда
			ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций.Вставить(
				СуществующийОбъект.Элеватор, ЭлементДанных.Repository);
		КонецЕсли;
		
		Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
			Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2,
				ЭлементДанных.Crop.OKPD2,
				Организация,
				Подразделение,
				ПараметрыОбмена);
		СуществующийОбъект.ГодУрожая = ЭлементДанных.HarvestYear;
		СуществующийОбъект.ОКПД2     = ЭлементДанных.Crop.OKPD2;
		СуществующийОбъект.КодТНВЭД  = ЭлементДанных.Crop.TNVED;
		
		Если ЭлементДанных.LotFromField <> Неопределено
			И ЗначениеЗаполнено(ЭлементДанных.LotFromField.reserchNumber) Тогда
			СуществующийОбъект.РезультатИсследования = Справочники.РезультатыИсследованийЗЕРНО.РезультатИсследований(
				ЭлементДанных.LotFromField.reserchNumber,
				Организация,
				ПараметрыОбмена);
		КонецЕсли;
		
		Если ЭлементДанных.LotFromAnother <> Неопределено Тогда
			ДобавитьПредшествующиеПартии(
				СуществующийОбъект.ПредшествующиеПартии,
				ЭлементДанных.LotFromAnother.ParentLot,
				Организация,
				Подразделение,
				ВидПродукции,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии,
				СуществующийОбъект.Дата);
		КонецЕсли;
		
		Если ЭлементДанных.LotFromPaperSDIZ <> Неопределено Тогда
			ДобавитьПредшествующиеПартии(
				СуществующийОбъект.ПредшествующиеПартии,
				ЭлементДанных.LotFromPaperSDIZ.ParentLot,
				Организация,
				Подразделение,
				ВидПродукции,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии,
				СуществующийОбъект.Дата);
		КонецЕсли;
		
	ИначеЕсли ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		
		СуществующийОбъект.Производитель = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
			ЭлементДанных.Manufacturer,
			ПараметрыОбмена);
		Если ЗначениеЗаполнено(СуществующийОбъект.Производитель) Тогда
			ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций.Вставить(
				СуществующийОбъект.Производитель, ЭлементДанных.Manufacturer);
		КонецЕсли;
		Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
			Перечисления.ВидыКлассификаторовЗЕРНО.ОКПД2,
			ЭлементДанных.Product.OKPD2,
			Организация,
			Подразделение,
			ПараметрыОбмена);
		СуществующийОбъект.ОКПД2    = ЭлементДанных.Product.OKPD2;
		СуществующийОбъект.КодТНВЭД = ЭлементДанных.Product.TNVED;
		СуществующийОбъект.ДатаИзготовления = ЭлементДанных.createDate;
		
		Если ЭлементДанных.GpbFromAnother <> Неопределено Тогда
			ДобавитьПредшествующиеПартии(
				СуществующийОбъект.ПредшествующиеПартии,
				ЭлементДанных.GpbFromAnother.ParentGpb,
				Организация,
				Подразделение,
				ВидПродукции,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии,
				СуществующийОбъект.Дата);
		КонецЕсли;
		
		Если ЭлементДанных.GpbFromPaperSDIZ <> Неопределено Тогда
			ДобавитьПредшествующиеПартии(
				СуществующийОбъект.ПредшествующиеПартии,
				ЭлементДанных.GpbFromPaperSDIZ.ParentGpb,
				Организация,
				Подразделение,
				ВидПродукции,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии,
				СуществующийОбъект.Дата);
		КонецЕсли;
		
		Если ЭлементДанных.GpbFromInProduct <> Неопределено Тогда
			ДобавитьПредшествующиеПартии(
				СуществующийОбъект.ПредшествующиеПартии,
				ЭлементДанных.GpbFromInProduct.ParentGpb,
				Организация,
				Подразделение,
				Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии,
				СуществующийОбъект.Дата);
			ДобавитьПредшествующиеПартии(
				СуществующийОбъект.ПредшествующиеПартии,
				ЭлементДанных.GpbFromInProduct.ParentLot,
				Организация,
				Подразделение,
				Перечисления.ВидыПродукцииИС.Зерно,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии,
				СуществующийОбъект.Дата);
		КонецЕсли;
	
	Иначе
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Внутренняя ошибка. Не определен вид продукции при загрузке партии %1'"),
			Идентификатор);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	СуществующийОбъект.ЦельИспользования = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
		Перечисления.ВидыКлассификаторовЗЕРНО.ЦельИспользованияПартии,
		ЭлементДанных.Target,
		Организация,
		Подразделение,
		ПараметрыОбмена);
	СуществующийОбъект.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
		Перечисления.ВидыКлассификаторовЗЕРНО.НазначениеПартии,
		ЭлементДанных.Purpose,
		Организация,
		Подразделение,
		ПараметрыОбмена);
	
	СуществующийОбъект.Местоположение = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
		ЭлементДанных.StoragePlace,
		ПараметрыОбмена);
	
	Если ЗначениеЗаполнено(СуществующийОбъект.Местоположение) Тогда
		ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейАдресов.Вставить(
			СуществующийОбъект.Местоположение, ЭлементДанных.StoragePlace);
	КонецЕсли;
	
	Если ЭлементДанных.CountryDestination <> Неопределено Тогда
		
		СуществующийОбъект.КодСтраныНазначения = ЭлементДанных.CountryDestination.alpha_3;
		СуществующийОбъект.СтранаНазначения = УправлениеКонтактнойИнформацией.СтранаМираПоКодуИлиНаименованию(ЭлементДанных.CountryDestination.alpha_3);
		
	КонецЕсли;
	
	Если ДанныеСопоставления <> Неопределено
		И ДанныеСопоставления["ДанныеРодительскойПартии"] <> Неопределено Тогда
		ДанныеРодительскойПартии = ДанныеСопоставления["ДанныеРодительскойПартии"];
		Если Не ЗначениеЗаполнено(СуществующийОбъект.ВладелецПартии) И ЗначениеЗаполнено(ДанныеРодительскойПартии.ВладелецПартии) Тогда
			СуществующийОбъект.ВладелецПартии = ДанныеРодительскойПартии.ВладелецПартии;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СуществующийОбъект.Элеватор) И ЗначениеЗаполнено(ДанныеРодительскойПартии.Элеватор) Тогда
			СуществующийОбъект.Элеватор = ДанныеРодительскойПартии.Элеватор;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СуществующийОбъект.Производитель) И ЗначениеЗаполнено(ДанныеРодительскойПартии.Производитель) Тогда
			СуществующийОбъект.Производитель = ДанныеРодительскойПартии.Производитель;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СуществующийОбъект.Местоположение) И ЗначениеЗаполнено(ДанныеРодительскойПартии.Местоположение) Тогда
			СуществующийОбъект.Местоположение = ДанныеРодительскойПартии.Местоположение;
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваСправочникаПриЗагрузке(
		СуществующийОбъект,
		ЭлементДанных.ListValueQualityIndicator,
		Организация,
		Подразделение,
		ПараметрыОбмена,
		СуществующийОбъект.НазначениеПартии);
	
	СуществующийОбъект.ТребуетсяЗагрузка = Ложь;
	СуществующийОбъект.Записать();
	
	ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(
		ПараметрыОбмена,
		МетаданныеЭлемента.ПолноеИмя(),
		Идентификатор,
		СуществующийОбъект.Ссылка,,
		Истина);
	
	Возврат СуществующийОбъект.Ссылка;
	
КонецФункции

Функция СоздатьПартиюЗерна(Идентификатор, ПараметрыПолучения)
	
	СправочникОбъект = СоздатьЭлемент();
	СправочникОбъект.Идентификатор         = Идентификатор;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.ТребуетсяЗагрузка     = ПараметрыПолучения.ДобавлятьКЗагрузке;
	
	Если ПараметрыПолучения.ДанныеПартии <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ПараметрыПолучения.ДанныеПартии Цикл
			ИмяПоля  = КлючИЗначение.Ключ;
			Значение = КлючИЗначение.Значение;
			Если ИмяПоля = "ПотребительскиеСвойства"
				Или ИмяПоля = "ПредшествующиеПартии" Тогда
				Для Каждого СтрокаДанных Из Значение Цикл
					НоваяСтрока = СправочникОбъект[ИмяПоля].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
				КонецЦикла;
			Иначе
				СправочникОбъект[ИмяПоля] = Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура ДобавитьПредшествующиеПартии(ПредшествующиеПартии, Источник, Организация, Подразделение, ВидПродукции, ПараметрыОбмена, ПараметрыЗагрузкиПартии, ДатаРодительскойПартии)
	
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	
	Если ТипЗнч(Источник) = Тип("Массив") Тогда
		Для Каждого ПредшествующаяПартия Из Источник Цикл
			НоваяСтрока = ПредшествующиеПартии.Добавить();
			НоваяСтрока.Количество = ПредшествующаяПартия.amount;
			НоваяСтрока.Партия     = ПартияЗерна(
				ПредшествующаяПартия[ИмяПоляНомерПартии],
				Организация,
				Подразделение,
				ВидПродукции,
				ПараметрыОбмена,
				ПараметрыЗагрузкиПартии.ПараметрыПолучения,
				ДатаРодительскойПартии);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Источник) = Тип("Структура") Тогда
		НоваяСтрока = ПредшествующиеПартии.Добавить();
		НоваяСтрока.Количество = Источник.amount;
		НоваяСтрока.Партия     = ПартияЗерна(
			Источник[ИмяПоляНомерПартии],
			Организация,
			ВидПродукции,
			ПараметрыОбмена,
			ПараметрыЗагрузкиПартии.ПараметрыПолучения,
			ДатаРодительскойПартии);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяПоляИдентификаторПартииПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "lotID";
	Иначе
		Возврат "gpbID";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляПартияПоВидуПродукции(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "Lot";
	Иначе
		Возврат "Gpb";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СоответствиеПартий

Функция ТекстЗапросаИерархииПартий(ПараметрыПостроения)
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ИсходныеДанные.Партия              КАК Партия,
		|	ИсходныеДанные.ИдентификаторСтроки КАК ИдентификаторСтроки
		|ПОМЕСТИТЬ ВТИсходныеДанные
		|ИЗ
		|	&ИсходныеДанные КАК ИсходныеДанные
		|;
		|
		|ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки        КАК ИдентификаторСтроки,
		|	ИсходныеДанные.Партия                     КАК ПартияУровень0,
		|	ИсходныеДанные.Партия.КоличествоНачальное КАК КоличествоУровень0,
		|	ПредшествующиеПартии.Партия               КАК ПартияУровень1,
		|	ПредшествующиеПартии.Количество           КАК КоличествоУровень1
		|ПОМЕСТИТЬ ТаблицаПартийУровень1
		|ИЗ
		|	ВТИсходныеДанные КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО.ПредшествующиеПартии КАК ПредшествующиеПартии
		|		ПО ИсходныеДанные.Партия = ПредшествующиеПартии.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПартияУровень1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПартийУровень1.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаПартийУровень1.ПартияУровень0      КАК ПартияУровень0,
		|	ТаблицаПартийУровень1.КоличествоУровень0  КАК КоличествоУровень0,
		|	ТаблицаПартийУровень1.ПартияУровень1      КАК ПартияУровень1,
		|	ТаблицаПартийУровень1.КоличествоУровень1  КАК КоличествоУровень1,
		|	ПредшествующиеПартии.Партия               КАК ПартияУровень2,
		|	ПредшествующиеПартии.Количество           КАК КоличествоУровень2
		|ПОМЕСТИТЬ ТаблицаПартийУровень2
		|ИЗ
		|	ТаблицаПартийУровень1 КАК ТаблицаПартийУровень1
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО.ПредшествующиеПартии КАК ПредшествующиеПартии
		|		ПО ТаблицаПартийУровень1.ПартияУровень1 = ПредшествующиеПартии.Ссылка
		|		
		|ИНДЕКСИРОВАТЬ ПО
		|	ПартияУровень2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПартийУровень2.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаПартийУровень2.ПартияУровень0      КАК ПартияУровень0,
		|	ТаблицаПартийУровень2.КоличествоУровень0  КАК КоличествоУровень0,
		|	ТаблицаПартийУровень2.ПартияУровень1      КАК ПартияУровень1,
		|	ТаблицаПартийУровень2.КоличествоУровень1  КАК КоличествоУровень1,
		|	ТаблицаПартийУровень2.ПартияУровень2      КАК ПартияУровень2,
		|	ТаблицаПартийУровень2.КоличествоУровень2  КАК КоличествоУровень2,
		|	ПредшествующиеПартии.Партия               КАК ПартияУровень3,
		|	ПредшествующиеПартии.Количество           КАК КоличествоУровень3
		|ПОМЕСТИТЬ ТаблицаПартийУровень3
		|ИЗ
		|	ТаблицаПартийУровень2 КАК ТаблицаПартийУровень2
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО.ПредшествующиеПартии КАК ПредшествующиеПартии
		|		ПО ТаблицаПартийУровень2.ПартияУровень2 = ПредшествующиеПартии.Ссылка
		|		
		|ИНДЕКСИРОВАТЬ ПО
		|	ПартияУровень3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИсходныеДанные.ИдентификаторСтроки         КАК ИдентификаторСтроки,
		|	ИсходныеДанные.ПартияУровень0              КАК ПартияУровень0,
		|	ИсходныеДанные.КоличествоУровень0          КАК КоличествоУровень0,
		|	ИсходныеДанные.ПартияУровень1              КАК ПартияУровень1,
		|	ИсходныеДанные.КоличествоУровень1          КАК КоличествоУровень1,
		|	ИсходныеДанные.ПартияУровень2              КАК ПартияУровень2,
		|	ИсходныеДанные.КоличествоУровень2          КАК КоличествоУровень2,
		|	ИсходныеДанные.ПартияУровень3              КАК ПартияУровень3,
		|	ИсходныеДанные.КоличествоУровень3          КАК КоличествоУровень3
		|ПОМЕСТИТЬ ПолнаяТаблицаУровней
		|ИЗ
		|	ТаблицаПартийУровень3 КАК ИсходныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПартийУровень3 КАК ТаблицаПартийУровень1
		|		ПО ИсходныеДанные.ПартияУровень0 = ТаблицаПартийУровень1.ПартияУровень1
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПартийУровень3 КАК ТаблицаПартийУровень2
		|		ПО ИсходныеДанные.ПартияУровень0 = ТаблицаПартийУровень2.ПартияУровень2
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПартийУровень3 КАК ТаблицаПартийУровень3
		|		ПО ИсходныеДанные.ПартияУровень0 = ТаблицаПартийУровень3.ПартияУровень3
		|ГДЕ
		|	ТаблицаПартийУровень1.ПартияУровень0 ЕСТЬ NULL
		|	И ТаблицаПартийУровень2.ПартияУровень0 ЕСТЬ NULL
		|	И ТаблицаПартийУровень3.ПартияУровень0 ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПолнаяТаблицаУровней.ПартияУровень0 КАК Партия
		|ПОМЕСТИТЬ ВсеПартии
		|ИЗ
		|	ПолнаяТаблицаУровней КАК ПолнаяТаблицаУровней
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПолнаяТаблицаУровней.ПартияУровень1
		|ИЗ
		|	ПолнаяТаблицаУровней КАК ПолнаяТаблицаУровней
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПолнаяТаблицаУровней.ПартияУровень2
		|ИЗ
		|	ПолнаяТаблицаУровней КАК ПолнаяТаблицаУровней
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПолнаяТаблицаУровней.ПартияУровень3
		|ИЗ
		|	ПолнаяТаблицаУровней КАК ПолнаяТаблицаУровней
		|");
	
	СписокЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПолнаяТаблицаУровней.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ПолнаяТаблицаУровней.ПартияУровень0      КАК ПартияУровень0,
		|	ПолнаяТаблицаУровней.КоличествоУровень0  КАК КоличествоУровень0,
		|	ПолнаяТаблицаУровней.ПартияУровень0.Дата КАК ПартияУровень0Дата,
		|	ПолнаяТаблицаУровней.ПартияУровень1      КАК ПартияУровень1,
		|	ПолнаяТаблицаУровней.КоличествоУровень1  КАК КоличествоУровень1,
		|	ПолнаяТаблицаУровней.ПартияУровень1.Дата КАК ПартияУровень1Дата,
		|	ПолнаяТаблицаУровней.ПартияУровень2      КАК ПартияУровень2,
		|	ПолнаяТаблицаУровней.КоличествоУровень2  КАК КоличествоУровень2,
		|	ПолнаяТаблицаУровней.ПартияУровень2.Дата КАК ПартияУровень2Дата,
		|	ПолнаяТаблицаУровней.ПартияУровень3      КАК ПартияУровень3,
		|	ПолнаяТаблицаУровней.КоличествоУровень3  КАК КоличествоУровень3,
		|	ПолнаяТаблицаУровней.ПартияУровень3.Дата КАК ПартияУровень3Дата
		|ИЗ
		|	ПолнаяТаблицаУровней КАК ПолнаяТаблицаУровней
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПартияУровень0,
		|	ПартияУровень1,
		|	ПартияУровень2,
		|	ПартияУровень3
		|",
		"ТаблицаУровней");
	
	СписокЗапросов.Добавить("
		|ВЫБРАТЬ
		|	СоответствиеПартийУровень.Партия,
		|	СоответствиеПартийУровень.Номенклатура,
		|	СоответствиеПартийУровень.Характеристика,
		|	СоответствиеПартийУровень.Серия,
		|	СоответствиеПартийУровень.СтатусУказанияСерий,
		|	СоответствиеПартийУровень.Порядок
		|ИЗ
		|	ВсеПартии КАК ВсеПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийУровень
		|		ПО СоответствиеПартийУровень.Партия = ВсеПартии.Партия
		|ГДЕ
		|	НЕ СоответствиеПартийУровень.Партия В (&ДобавленныеПартии)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СоответствиеПартийУровень.Порядок Убыв
		|",
		"СоответствиеПартий");
	
	Если ПараметрыПостроения.ТребуютсяСвязанныеДокументы Тогда
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	СДИЗЗЕРНО.Ссылка                                    КАК СДИЗ,
		|	СДИЗЗЕРНО.Партия                                    КАК Партия,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.ТипДокумента       КАК ТипДокумента,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.Дата               КАК Дата,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.Номер              КАК Номер,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.ДатаОкончания      КАК СрокДействия,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.ИдентификаторВЕТИС КАК ИдентификаторВЕТИС,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.Серия              КАК Серия,
		|	СДИЗЗЕРНО.ДекларацияСоответствия.ВидДокумента       КАК ВидДокумента
		|ИЗ
		|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеПартии КАК ВсеПартии
		|	ПО СДИЗЗЕРНО.Ссылка.Партия = ВсеПартии.Партия
		|ГДЕ
		|	СДИЗЗЕРНО.ДекларацияСоответствия <> ЗНАЧЕНИЕ(Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО.ПустаяСсылка)
		|	И ВсеПартии.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|	И СДИЗЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Проект)
		|	И СДИЗЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Аннулирован)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СДИЗЗЕРНО.Ссылка                                    КАК СДИЗ,
		|	СДИЗЗЕРНО.Партия                                    КАК Партия,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.ТипДокумента       КАК ТипДокумента,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.Дата               КАК Дата,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.Номер              КАК Номер,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.ДатаОкончания      КАК СрокДействия,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.ИдентификаторВЕТИС КАК ИдентификаторВЕТИС,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.Серия              КАК Серия,
		|	СДИЗЗЕРНО.ВетеринарныйСертификат.ВидДокумента       КАК ВидДокумента
		|ИЗ
		|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеПартии КАК ВсеПартии
		|	ПО СДИЗЗЕРНО.Ссылка.Партия = ВсеПартии.Партия
		|ГДЕ
		|	СДИЗЗЕРНО.ВетеринарныйСертификат <> ЗНАЧЕНИЕ(Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО.ПустаяСсылка)
		|	И ВсеПартии.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|	И СДИЗЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Проект)
		|	И СДИЗЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Аннулирован)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СДИЗЗЕРНО.Ссылка                                      КАК СДИЗ,
		|	СДИЗЗЕРНО.Партия                                      КАК Партия,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ТипДокумента       КАК ТипДокумента,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Дата               КАК Дата,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Номер              КАК Номер,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ДатаОкончания      КАК СрокДействия,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ИдентификаторВЕТИС КАК ИдентификаторВЕТИС,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.Серия              КАК Серия,
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат.ВидДокумента       КАК ВидДокумента
		|ИЗ
		|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеПартии КАК ВсеПартии
		|	ПО СДИЗЗЕРНО.Ссылка.Партия = ВсеПартии.Партия
		|ГДЕ
		|	СДИЗЗЕРНО.ФитосанитарныйСертификат <> ЗНАЧЕНИЕ(Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО.ПустаяСсылка)
		|	И ВсеПартии.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
		|	И СДИЗЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Проект)
		|	И СДИЗЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыСДИЗЗЕРНО.Аннулирован)",
		"ДокументыСертификации");
		
	КонецЕсли;
	
	СписокЗапросов.Добавить("
		|УНИЧТОЖИТЬ ВТИсходныеДанные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПартийУровень1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПартийУровень2
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТаблицаПартийУровень3
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПолнаяТаблицаУровней
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВсеПартии
		|");
	
	Возврат СписокЗапросов;
	
КонецФункции

Функция ПараметрыПостроенияДереваПартий() Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ИсходныеПартии",              Новый Массив());
	ВозвращаемоеЗначение.Вставить("ТаблицаСопоставлений",        РегистрыСведений.СоответствиеПартийЗЕРНО.СоздатьНаборЗаписей().Выгрузить());
	ВозвращаемоеЗначение.Вставить("ДоПервогоСопоставления",      Ложь);
	ВозвращаемоеЗначение.Вставить("ДатаОграниченияГлубины",      Дата(1, 1, 1));
	ВозвращаемоеЗначение.Вставить("ТребуютсяСвязанныеДокументы", Ложь);
	
	ВозвращаемоеЗначение.ТаблицаСопоставлений.Индексы.Добавить("Партия");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ДеревоПартий(ПараметрыПостроения) Экспорт
	
	СтруктураПоискаСопоставления = Новый Структура("Партия");
	
	ДеревоПартий = Новый ДеревоЗначений();
	ДеревоПартий.Колонки.Добавить("Партия",                  Новый ОписаниеТипов("СправочникСсылка.РеестрПартийЗЕРНО"));
	ДеревоПартий.Колонки.Добавить("Количество",              ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	ДеревоПартий.Колонки.Добавить("Номенклатура",            Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоПартий.Колонки.Добавить("Характеристика",          Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ДеревоПартий.Колонки.Добавить("Серия",                   Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ДеревоПартий.Колонки.Добавить("СтатусУказанияСерий",     ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ДеревоПартий.Колонки.Добавить("КоличествоСопоставлений", ОбщегоНазначения.ОписаниеТипаЧисло(15));
	ДеревоПартий.Колонки.Добавить("Сопоставления",           Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоПартий.Колонки.Добавить("ДокументыСертификации",   Новый ОписаниеТипов("ТаблицаЗначений"));
	
	ДобавленныеПартии = Новый Массив();
	ИсходныеДанные = Новый ТаблицаЗначений();
	ИсходныеДанные.Колонки.Добавить("Партия",              ДеревоПартий.Колонки.Партия.ТипЗначения);
	ИсходныеДанные.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(1024));
	
	Для Каждого Партия Из ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПараметрыПостроения.ИсходныеПартии) Цикл
		НоваяСтрока = ИсходныеДанные.Добавить();
		НоваяСтрока.Партия = Партия;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	СписокЗапросов = ТекстЗапросаИерархииПартий(ПараметрыПостроения);
	
	СтрокиДереваПоХэшам = Новый Соответствие;
	КэшИдентификаторов  = Новый Соответствие();
	ПродолжатьПоиск     = Истина;
	УровнейВложенности  = 3;
	Пока ПродолжатьПоиск Цикл
		
		Запрос.УстановитьПараметр("ИсходныеДанные",    ИсходныеДанные);
		Запрос.УстановитьПараметр("ДобавленныеПартии", ДобавленныеПартии);
		РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
		//@skip-warning
		ВыборкаТаблицаУровней = РезультатЗапроса["ТаблицаУровней"].Выбрать();
		
		//@skip-warning
		ВыборкаСоответствиеПартий = РезультатЗапроса["СоответствиеПартий"].Выбрать();
		
		Пока ВыборкаСоответствиеПартий.Следующий() Цикл
			ДобавленныеПартии.Добавить(ВыборкаСоответствиеПартий.Партия);
			НоваяСтрока = ПараметрыПостроения.ТаблицаСопоставлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСоответствиеПартий);
		КонецЦикла;
		
		ИсходныеДанные.Очистить();
		
		Если ПараметрыПостроения.ТребуютсяСвязанныеДокументы Тогда
			//@skip-warning
			ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
			ДокументыСертификации.Индексы.Добавить("Партия");
		КонецЕсли;
		
		Пока ВыборкаТаблицаУровней.Следующий() Цикл
			
			Для ТекущийУровень = 0 По УровнейВложенности Цикл
				
				ТекущаяПартия     = ВыборкаТаблицаУровней["ПартияУровень"     + ТекущийУровень];
				ТекущаяДатаПартии = ВыборкаТаблицаУровней["ПартияУровень"     + ТекущийУровень + "Дата"];
				ТекущееКоличество = ВыборкаТаблицаУровней["КоличествоУровень" + ТекущийУровень];
				
				Если Не ЗначениеЗаполнено(ТекущаяПартия)
					Или (ЗначениеЗаполнено(ТекущаяДатаПартии)
						И ТекущаяДатаПартии < ПараметрыПостроения.ДатаОграниченияГлубины) Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = 0
					И ЗначениеЗаполнено(ВыборкаТаблицаУровней.ИдентификаторСтроки) Тогда // Это продолжение поиска
					ХэшСуммаРодителя = ХэшСуммаИерархии(ВыборкаТаблицаУровней, ТекущийУровень, КэшИдентификаторов);
					СтрокиДереваПоХэшам[ХэшСуммаРодителя] = СтрокиДереваПоХэшам[ВыборкаТаблицаУровней.ИдентификаторСтроки];
					Продолжить;
				КонецЕсли;
				
				ХэшСуммаУровня = ХэшСуммаИерархии(ВыборкаТаблицаУровней, ТекущийУровень, КэшИдентификаторов);
				УзелУровня     = СтрокиДереваПоХэшам[ХэшСуммаУровня];
				Если УзелУровня <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ХэшСуммаРодителя = ХэшСуммаИерархии(ВыборкаТаблицаУровней, ТекущийУровень - 1, КэшИдентификаторов);
				РодительскийУзел = СтрокиДереваПоХэшам[ХэшСуммаРодителя];
				Если РодительскийУзел = Неопределено Тогда
					РодительскийУзел = ДеревоПартий;
					СтрокиДереваПоХэшам[ХэшСуммаРодителя] = РодительскийУзел;
				КонецЕсли;
				
				СтруктураПоискаСопоставления.Партия = ТекущаяПартия;
				СтрокиСопоставления                 = ПараметрыПостроения.ТаблицаСопоставлений.Скопировать(СтруктураПоискаСопоставления);
				
				НоваяСтрока = РодительскийУзел.Строки.Добавить();
				НоваяСтрока.Партия                  = ТекущаяПартия;
				НоваяСтрока.Количество              = ТекущееКоличество;
				НоваяСтрока.Сопоставления           = СтрокиСопоставления;
				НоваяСтрока.КоличествоСопоставлений = СтрокиСопоставления.Количество();
				
				Если ПараметрыПостроения.ТребуютсяСвязанныеДокументы Тогда
					СтруктураПоиска                   = Новый Структура("Партия", НоваяСтрока.Партия);
					НоваяСтрока.ДокументыСертификации = ДокументыСертификации.Скопировать(СтруктураПоиска);
				КонецЕсли;
				
				СтрокиДереваПоХэшам[ХэшСуммаУровня] = НоваяСтрока;
				
				Если ПараметрыПостроения.ДоПервогоСопоставления
					И НоваяСтрока.КоличествоСопоставлений > 0 Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекущийУровень = УровнейВложенности
					И (Не ПараметрыПостроения.ДоПервогоСопоставления
						Или ПараметрыПостроения.ДоПервогоСопоставления И НоваяСтрока.КоличествоСопоставлений = 0) Тогда
					НоваяСтрокаИсходныеДанные = ИсходныеДанные.Добавить();
					НоваяСтрокаИсходныеДанные.Партия              = ТекущаяПартия;
					НоваяСтрокаИсходныеДанные.ИдентификаторСтроки = ХэшСуммаУровня;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ПродолжатьПоиск = ИсходныеДанные.Количество() > 0;
		
	КонецЦикла;
	
	Возврат ДеревоПартий;
	
КонецФункции

Функция ХэшСуммаИерархии(СтрокаДанных, УровеньРасчета, КэшИдентификаторов)
	
	ДанныеХэшСуммы = Новый Массив();
	ДанныеХэшСуммы.Добавить(СтрокаДанных.ИдентификаторСтроки);
	
	Для ТекущийУровень = 0 По УровеньРасчета Цикл
		
		ТекущаяПартия = СтрокаДанных["ПартияУровень" + ТекущийУровень];
		
		УникальныйИдентификатор = КэшИдентификаторов[ТекущаяПартия];
		Если УникальныйИдентификатор = Неопределено Тогда
			УникальныйИдентификатор = Строка(ТекущаяПартия.УникальныйИдентификатор());
			КэшИдентификаторов[ТекущаяПартия] = УникальныйИдентификатор;
		КонецЕсли;
		
		ДанныеХэшСуммы.Добавить(УникальныйИдентификатор);
		
	КонецЦикла;
	
	ХэшСуммаРодительскойСтроки = ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрСоединить(ДанныеХэшСуммы, "|"));
	
	Возврат ХэшСуммаРодительскойСтроки;
	
КонецФункции

Функция ЗаписатьСоответствиеПартийНоменклатуреПоРодительскимПартиям(Партии) Экспорт
	
	ЗаписатьСоответствие = Новый Массив();
	
	Если Партии.Количество() = 0 Тогда
		Возврат ЗаписатьСоответствие;
	КонецЕсли;
	
	ПараметрыПостроения = ПараметрыПостроенияДереваПартий();
	ПараметрыПостроения.ИсходныеПартии         = Партии;
	ПараметрыПостроения.ДоПервогоСопоставления = Истина;
	ПараметрыПостроения.ДатаОграниченияГлубины = ИнтеграцияЗЕРНО.ПараметрыОптимизации().ДатаОграниченияГлубиныДереваПартий;
	
	ДеревоПартий = ДеревоПартий(ПараметрыПостроения);
	
	Для Каждого СтрокаДерева Из ДеревоПартий.Строки Цикл
		РассчитатьСоответствеПоДеревуПартийРекурсивно(СтрокаДерева, ЗаписатьСоответствие);
	КонецЦикла;
	
	Если ЗаписатьСоответствие.Количество() Тогда
		
		ТаблицаБлокировки = Новый ТаблицаЗначений();
		ТаблицаБлокировки.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.РеестрПартийЗЕРНО"));
		Для Каждого СтрокаДерева Из ЗаписатьСоответствие Цикл
			НоваяСтрока = ТаблицаБлокировки.Добавить();
			НоваяСтрока.Партия = СтрокаДерева.Партия;
		КонецЦикла;
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.СоответствиеПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
		
		Попытка
			
			Блокировка.Заблокировать();
			
			Для Каждого СтрокаДерева Из ЗаписатьСоответствие Цикл
				
				НаборЗаписей = РегистрыСведений.СоответствиеПартийЗЕРНО.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Партия.Установить(СтрокаДерева.Партия);
				
				Для Каждого СтрокаСопоставления Из СтрокаДерева.Сопоставления Цикл
					НоваяСтрока = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСопоставления);
					НоваяСтрока.Партия = СтрокаДерева.Партия;
				КонецЦикла;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
		Исключение
			
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка записи соответствия партий:
					       |%1'"),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
			ТекстОшибкиПодбробно = СтрШаблон(
				НСтр("ru = 'Ошибка записи соответствия партий:
					       |%1'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ИнтеграцияЗЕРНОСлужебный.ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибкиПодбробно);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат ЗаписатьСоответствие;
	
КонецФункции

Процедура РассчитатьСоответствеПоДеревуПартийРекурсивно(УзелДерева, ЗаписатьСоответствие)
	
	ИменаКлючейПоиска = "Номенклатура,Характеристика,Серия";
	УзелДерева.Сопоставления.Индексы.Добавить(ИменаКлючейПоиска);
	
	ЭтоКонечныйУзел = (УзелДерева.Сопоставления.Количество() > 0);
	Для Каждого СтрокаДерева Из УзелДерева.Строки Цикл
		
		РассчитатьСоответствеПоДеревуПартийРекурсивно(СтрокаДерева, ЗаписатьСоответствие);
		
		Для Каждого СтрокаСопоставления Из СтрокаДерева.Сопоставления Цикл
			СтруктураПоиска = Новый Структура(ИменаКлючейПоиска);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСопоставления);
			ПоискСтрок = УзелДерева.Сопоставления.НайтиСтроки(СтруктураПоиска);
			Если ПоискСтрок.Количество() = 0 Тогда
				НоваяСтрока = УзелДерева.Сопоставления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСопоставления);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	УзелДерева.КоличествоСопоставлений = УзелДерева.Сопоставления.Количество();
	
	Если ЭтоКонечныйУзел Тогда
		Возврат;
	ИначеЕсли УзелДерева.КоличествоСопоставлений > 1 Тогда
		
		ИменаКлючейПоиска = "Номенклатура,Характеристика";
		УзелДерева.Сопоставления.Индексы.Добавить(ИменаКлючейПоиска);
		
		СтруктураПоиска = Новый Структура(ИменаКлючейПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, УзелДерева.Сопоставления[0]);
		ПоискСтрок = УзелДерева.Сопоставления.НайтиСтроки(СтруктураПоиска);
		
		Если ПоискСтрок.Количество() = УзелДерева.Сопоставления.Количество() Тогда
			УзелДерева.Сопоставления.Очистить();
			НоваяСтрока = УзелДерева.Сопоставления.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
			УзелДерева.КоличествоСопоставлений = УзелДерева.Сопоставления.Количество();
		КонецЕсли;
		
	КонецЕсли;
	
	Если УзелДерева.КоличествоСопоставлений = 1 Тогда
		ЗаписатьСоответствие.Добавить(УзелДерева);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
