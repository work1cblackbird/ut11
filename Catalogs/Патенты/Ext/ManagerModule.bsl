#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает признак наличия действующего патента по организации и подразделению на заданную или текущую дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация;
//	Подразделение - СправочникСсылка.СтруктураПредприятия, Неопределено - подразделение организации;
//	ДатаПроверки - Дата, Неопределено - дата, на которую осуществляется поиск патента.
//
// Возвращаемое значение:
//	Булево - Истина - признак, что есть действующий патент.
//
Функция ЕстьДействующийПатент(Организация, Подразделение = Неопределено, Знач ДатаПроверки = Неопределено) Экспорт
	
	ДатаПроверки = ?(НЕ ЗначениеЗаполнено(ДатаПроверки), ТекущаяДатаСеанса(), ДатаПроверки);
	Возврат НЕ ПолучитьПатентыПоОрганизации(Организация, Подразделение, ДатаПроверки).Количество() = 0;
	
КонецФункции

// Возвращает действующие патенты по организации и подразделению на заданную или текущую дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация;
//	Подразделение - СправочникСсылка.СтруктураПредприятия, Неопределено - подразделение организации;
//	ДатаПроверки - Дата, Неопределено - дата, на которую осуществляется поиск патента.
//
// Возвращаемое значение:
//	Массив - СправочникСсылка.Патенты - список действующих патентов.
//
Функция ПолучитьДействующиеПатентыНаДату(Организация, Подразделение = Неопределено, Знач ДатаПроверки = Неопределено) Экспорт
	
	ДатаПроверки = ?(НЕ ЗначениеЗаполнено(ДатаПроверки), ТекущаяДатаСеанса(), ДатаПроверки);
	
	Возврат ПолучитьПатентыПоОрганизации(Организация, Подразделение, ДатаПроверки);
	
КонецФункции

// Возвращает все действующие патенты по организации и подразделению или действующие на определенную дату.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация;
//	Подразделение - СправочникСсылка.СтруктураПредприятия, Неопределено - подразделение организации;
//	ДатаПроверки - Дата, Неопределено - дата, на которую осуществляется поиск патента.
//
// Возвращаемое значение:
//	Массив - СправочникСсылка.Патенты - список действующих патентов.
//
Функция ПолучитьПатентыПоОрганизации(Организация, Подразделение = Неопределено, Знач ДатаПроверки = Неопределено) Экспорт
	
	МассивПатентов = Новый Массив();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НастройкиНалоговУчетныхПолитикЛокализация.ОрганизацияПрименяетПатенты(Организация) Тогда
		
		ОбиратьВсеПатенты = ?(ЗначениеЗаполнено(ДатаПроверки), Ложь, Истина);
		ДатаПроверки = ?(НЕ ЗначениеЗаполнено(ДатаПроверки), ТекущаяДатаСеанса(), ДатаПроверки);
		НеПроверятьПодразделение = Ложь;
		
		СписокПодразделений = Новый Массив();
			
		Если ЗначениеЗаполнено(Подразделение) Тогда
			
			СписокПодразделений = ПолучитьМассивВышестоящихПодразделений(Подразделение);
			
		Иначе
			
			НеПроверятьПодразделение = Истина;
			
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	Патенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Патенты.ПрименениеПатента КАК ПатентыПрименениеПатента
		|		ПО (ПатентыПрименениеПатента.Ссылка = Патенты.Ссылка)
		|ГДЕ
		|	Патенты.Владелец = &Организация
		|	И НЕ Патенты.ПометкаУдаления
		|	И ((Патенты.ДатаНачала <= &КонецДняДокумента
		|		И Патенты.ДатаОкончания >= &НачалоДняДокумента)
		|			ИЛИ &ОбиратьВсеПатенты)
		|	И (ПатентыПрименениеПатента.Подразделение В (&СписокПодразделений)
		|			ИЛИ ПатентыПрименениеПатента.Ссылка ЕСТЬ NULL ИЛИ &НеПроверятьПодразделение)";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
		Запрос.УстановитьПараметр("НачалоДняДокумента", НачалоДня(ДатаПроверки));
		Запрос.УстановитьПараметр("КонецДняДокумента", КонецДня(ДатаПроверки));
		Запрос.УстановитьПараметр("ОбиратьВсеПатенты", ОбиратьВсеПатенты);
		Запрос.УстановитьПараметр("НеПроверятьПодразделение", НеПроверятьПодразделение);
		МассивПатентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	КонецЕсли;
	
	Возврат МассивПатентов;
	
КонецФункции

// Формирует массив из вышестоящих структурных подразделений.
//
// Параметры:
//  СтруктурноеПодразделение - СправочникСсылка.СтруктураПредприятия
//
// Возвращаемое значение:
//  Массив Из СправочникСсылка.СтруктураПредприятия
//
Функция ПолучитьМассивВышестоящихПодразделений(СтруктурноеПодразделение) Экспорт
	СписокПодразделений = Новый Массив;
	
	ВышестоящееПодразделение = СтруктурноеПодразделение;
	Пока ЗначениеЗаполнено(ВышестоящееПодразделение) Цикл
		СписокПодразделений.Добавить(ВышестоящееПодразделение);
		ВышестоящееПодразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВышестоящееПодразделение, "Родитель");
	КонецЦикла;
	
	Возврат СписокПодразделений;
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Владелец)";
КонецПроцедуры

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Включает/отключает использование подсистемы "Свойства" для справочника.
//
Процедура НастроитьИспользованиеСвойств() Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА
		|ИЗ
		|	Справочник.Патенты КАК Патенты
		|ГДЕ
		|	НЕ Патенты.ПометкаУдаления");
		
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = НЕ Запрос.Выполнить().Пустой();
	
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_Патенты", ПараметрыНабора);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли