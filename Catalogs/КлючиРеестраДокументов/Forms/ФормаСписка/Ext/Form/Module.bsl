
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТипыКлюча = Метаданные.Справочники.КлючиРеестраДокументов.Реквизиты.Ключ.Тип.Типы();
	
	Элементы.ТипЗначения.СписокВыбора.Добавить("", НСтр("ru = '<Все типы>'"));
	
	Для каждого ТипКлюча Из ТипыКлюча Цикл
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТипКлюча);
		
		Если МетаданныеТипа <> Неопределено Тогда
			ПолноеИмя = МетаданныеТипа.ПолноеИмя();
			Элементы.ТипЗначения.СписокВыбора.Добавить(ПолноеИмя, МетаданныеТипа.Представление());
			ПустоеЗначение = ПредопределенноеЗначение(ПолноеИмя + ".ПустаяСсылка");
			ПустыеЗначенияКлюча.Добавить(ПустоеЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьУсловноеОформление();
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипЗначенияКлюча", ТипЗнч(Неопределено));
	
	ЕстьДубли = Справочники.КлючиРеестраДокументов.ЕстьДубли();
	ЕстьЭлементыСправочниковБезКлючей = Справочники.КлючиРеестраДокументов.ЕстьКлючиДляГенерации();
	
	Элементы.Список.ИзменятьСоставСтрок = ОбщегоНазначенияКлиентСервер.РежимОтладки();
	
	НастроитьФорму();
	
	ДанныеРегламентногоЗадания = ПолучитьДанныеРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	УстановитьПредставлениеРасписания(ДанныеРегламентногоЗадания);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияЗапуститьПроцедуруСозданияКлючейРеестраДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СоздатьКлючи();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаУдаленияДублейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаИсправления);
	ПараметрыОтбора.Вставить("СобытиеЖурналаРегистрации", ИмяСобытияЖурналаУдаленияДублей());
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕстьДублиВГлавномУзелРИБОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	УдалитьДубли();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверитьНеобходимостьПереотраженияДокументовВРеестреОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПроверитьНеобходимостьПереотраженияДокументовВРеестре();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаОтраженияДокументовВРеестреОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаИсправления);
	ПараметрыОтбора.Вставить("Уровень", "Ошибка");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОшибкаСозданияКлючейРеестраДокументовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаИсправления);
	ПараметрыОтбора.Вставить("Уровень", "Ошибка");
	ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЕстьДокументыКПереотражениюВРеестреОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИсправитьОшибкиОтраженияДокументовВРеестре();
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПриИзменении(Элемент)
	ТипЗначенияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияРасписаниеПредставлениеНажатие(Элемент)
	
	ПараметрыОткрытия = Новый Структура("ИдентификаторРегламентногоЗадания", ИдентификаторРегламентногоЗадания);
	
	ОбработчикОповещения = Новый ОписаниеОповещения("ПослеРедактированияРегламентногоЗадания", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.КлючиРеестраДокументов.Форма.ФормаРегламентногоЗаданияУдаленияДублей",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОбработчикОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПослеРедактированияРегламентногоЗадания(Значение, ДополнительныеПараметры) Экспорт
	
	ДанныеРегламентногоЗадания = ПолучитьДанныеРегламентногоЗадания(Значение);
	УстановитьПредставлениеРасписания(ДанныеРегламентногоЗадания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеРегламентногоЗадания(ИдентификаторРегламентногоЗадания)
	
	Результат = Новый Структура("Использование, Расписание", Ложь, Неопределено);
	
	ПараметрыПоиска = Новый Структура;
	
	Если ЗначениеЗаполнено(ИдентификаторРегламентногоЗадания) Тогда
		
		ПараметрыПоиска.Вставить("УникальныйИдентификатор",
			Новый УникальныйИдентификатор(ИдентификаторРегламентногоЗадания));
		
	Иначе
		
		ПараметрыПоиска.Вставить("Метаданные",
			Метаданные.РегламентныеЗадания.УдалениеДублейКлючейРеестраДокументов);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ПоискЗаданий = РегламентныеЗаданияСервер.НайтиЗадания(ПараметрыПоиска);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПоискЗаданий.Количество() > 0 Тогда
		
		ИдентификаторРегламентногоЗадания = Строка(РегламентныеЗаданияСервер.УникальныйИдентификатор(ПоискЗаданий.Получить(0)));
		
		УстановитьПривилегированныйРежим(Истина);
		Задание = РегламентныеЗаданияСервер.Задание(ИдентификаторРегламентногоЗадания);
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗаполнитьЗначенияСвойств(Результат, Задание);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПредставлениеРасписания(ДанныеРегламентногоЗадания)
	
	Если ДанныеРегламентногоЗадания.Использование Тогда
		ПредставлениеРасписания = Новый ФорматированнаяСтрока(
			Строка(ДанныеРегламентногоЗадания.Расписание),,
			WebЦвета.Зеленый
		);
	Иначе
		ПредставлениеРасписания = НСтр("ru = 'Не используется'");
	КонецЕсли;
	
	Элементы.ДекорацияРасписаниеПредставление.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФорму()
	
	Элементы.ДекорацияОшибкаУдаленияДублей.Видимость         = (ЕстьДубли = "Ошибка");
	Элементы.ДекорацияЕстьДублиВПодчиненномУзлеРИБ.Видимость = (ЕстьДубли = "ЕстьДублиВПодчиненномУзлеРИБ");
	Элементы.ДекорацияЕстьДублиВГлавномУзелРИБ.Видимость     = (ЕстьДубли = "ЕстьДублиВГлавномУзлеРИБ");
	Элементы.ДекорацияНетДублей.Видимость                    = (ЕстьДубли = "Нет");
	
	Элементы.ДекорацияОшибкаСозданияКлючейРеестраДокументов.Видимость             = (ЕстьЭлементыСправочниковБезКлючей = "Ошибка");
	Элементы.ДекорацияНеХватаетКлючейВПодчиненномУзлеРИБ.Видимость                = (ЕстьЭлементыСправочниковБезКлючей = "ЕстьЭлементыБезКлючейВПодчиненномУзлеРИБ");
	Элементы.ДекорацияЗапуститьПроцедуруСозданияКлючейРеестраДокументов.Видимость = (ЕстьЭлементыСправочниковБезКлючей = "ЕстьЭлементыБезКлючейВГлавномУзлеРИБ");
	Элементы.ДекорацияДляВсехЭлементовСправочниковКлючиСозданы.Видимость          = (ЕстьЭлементыСправочниковБезКлючей = "Нет");
	
	Элементы.ДекорацияОшибкаОтраженияДокументовВРеестре.Видимость                      = (ЕстьДубли = "Нет")
																						И (ЕстьЭлементыСправочниковБезКлючей = "Нет") 
																						И (ЕстьДокументыКПереотражениюВРеестре = "Ошибка"); 
																						
	Элементы.ДекорацияЕстьДокументыКПереотражениюВРеестре.Видимость                    = (ЕстьДубли = "Нет")
																						И (ЕстьЭлементыСправочниковБезКлючей = "Нет") 
																						И (ЕстьДокументыКПереотражениюВРеестре = "Есть");
																						
	Элементы.ДекорацияВсеДокументыВРеестреОтраженыКорректно.Видимость                  =  (ЕстьДубли = "Нет")
																						И (ЕстьЭлементыСправочниковБезКлючей = "Нет") 
																						И (ЕстьДокументыКПереотражениюВРеестре = "Нет");
																						
	Элементы.ДекорацияПроверитьНеобходимостьПереотраженияДокументовВРеестре.Видимость  =  (ЕстьДубли = "Нет")
																						И (ЕстьЭлементыСправочниковБезКлючей = "Нет") 
																						И (ЕстьДокументыКПереотражениюВРеестре <> "Ошибка")
																						И (ЕстьДокументыКПереотражениюВРеестре <> "Есть")
																						И (ЕстьДокументыКПереотражениюВРеестре <> "Нет");
	
КонецПроцедуры

&НаСервере
Процедура ТипЗначенияПриИзмененииНаСервере()
	
	Если ПустаяСтрока(ТипЗначения) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТипЗначенияКлюча", ТипЗнч(Неопределено));
	Иначе	
		
		МетаданныеКлюча = Метаданные.НайтиПоПолномуИмени(ТипЗначения);
		
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,
			"ТипЗначенияКлюча",
			ТипЗнч(МетаданныеКлюча.СтандартныеРеквизиты.Ссылка.Тип.ПривестиЗначение()));
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Наименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Ключ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ПустыеЗначенияКлюча;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<пустое значение>'"));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяСобытияЖурналаУдаленияДублей()
	Возврат Справочники.КлючиРеестраДокументов.ИмяСобытияЖурналаУдаленияДублей();
КонецФункции

&НаКлиенте
Процедура УдалитьДубли()
	
	ФоновоеЗадание = УдалитьДублиСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеУдаленияДублей", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция УдалитьДублиСервер()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Удаление дублей ключей реестра документов'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Справочники.КлючиРеестраДокументов.НайтиИУдалитьДублиВФормеСписка",
		Новый Структура, ПараметрыВыполненияВФоне);
		
	ВремяНачалаИсправления = ТекущаяДатаСеанса();
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеУдаленияДублей(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
	
		Если ЭтоАдресВременногоХранилища(ФоновоеЗадание.АдресРезультата) Тогда
			ПослеУдаленияДублейСервер(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить выполнения задания по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияДублейСервер(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЕстьДубли = Результат.ЕстьДубли;
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКлючи()
	
	ФоновоеЗадание = СоздатьКлючиСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеСозданияКлючей", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция СоздатьКлючиСервер()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание ключей рееста документов'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Справочники.КлючиРеестраДокументов.СоздатьКлючиВФормеСписка",
		Новый Структура, ПараметрыВыполненияВФоне);
		
	ВремяНачалаИсправления = ТекущаяДатаСеанса();
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияКлючей(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
	
		Если ЭтоАдресВременногоХранилища(ФоновоеЗадание.АдресРезультата) Тогда
			ПослеПослеСозданияКлючейСервер(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить выполнения задания по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПослеСозданияКлючейСервер(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЕстьЭлементыСправочниковБезКлючей = Результат.ЕстьЭлементыСправочниковБезКлючей;
	НастроитьФорму();
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьНеобходимостьПереотраженияДокументовВРеестре()
	
	ФоновоеЗадание = ПроверитьНеобходимостьПереотраженияДокументовВРеестреСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеПроверкиНеобходимостиПереотраженияДокументовВРеестре", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНеобходимостьПереотраженияДокументовВРеестреСервер()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Проверка корректности отражения документов в реестре'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Справочники.КлючиРеестраДокументов.ПроверитьНеобходимостьПереотраженияДокументовВРеестре",
		Новый Структура, ПараметрыВыполненияВФоне);
		
	ВремяНачалаИсправления = ТекущаяДатаСеанса();
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеПроверкиНеобходимостиПереотраженияДокументовВРеестре(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
	
		Если ЭтоАдресВременногоХранилища(ФоновоеЗадание.АдресРезультата) Тогда
			ПослеПроверкиНеобходимостиПереотраженияДокументовВРеестреСервер(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить выполнения задания по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПроверкиНеобходимостиПереотраженияДокументовВРеестреСервер(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЕстьДокументыКПереотражениюВРеестре = Результат.ЕстьДокументыКПереотражениюВРеестре;
	НастроитьФорму();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОшибкиОтраженияДокументовВРеестре()
	
	ФоновоеЗадание = ИсправитьОшибкиОтраженияДокументовВРеестреСервер();
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеИсправленияОшибкокОтраженияДокументовВРеестре", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ИсправитьОшибкиОтраженияДокументовВРеестреСервер()
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = НСтр("ru = 'Исправление отражения документов в реестре документов'");
	ПараметрыВыполненияВФоне.ЗапуститьВФоне = Истина;
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьВФоне("Справочники.КлючиРеестраДокументов.ИсправитьОшибкиОтраженияДокументовВРеестре",
		Новый Структура, ПараметрыВыполненияВФоне);
		
	ВремяНачалаИсправления = ТекущаяДатаСеанса();
		
	Возврат ФоновоеЗадание;
	
КонецФункции

&НаКлиенте
Процедура ПослеИсправленияОшибкокОтраженияДокументовВРеестре(ФоновоеЗадание, ДополнительныеПараметры) Экспорт
	
	Если ФоновоеЗадание <> Неопределено 
		И ФоновоеЗадание.Статус = "Выполнено" Тогда
	
		Если ЭтоАдресВременногоХранилища(ФоновоеЗадание.АдресРезультата) Тогда
			ПослеИсправленияОшибкокОтраженияДокументовВРеестреСервер(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
		
	Иначе
		Если ФоновоеЗадание <> Неопределено Тогда
			ОписаниеОшибки = НСтр("ru = 'Не удалось закончить выполнения задания по причине: %Причина%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Причина%",  ФоновоеЗадание.ПодробноеПредставлениеОшибки);
			ПоказатьПредупреждение(, ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеИсправленияОшибкокОтраженияДокументовВРеестреСервер(АдресРезультата)
	
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	ЕстьДокументыКПереотражениюВРеестре = Результат.ЕстьДокументыКПереотражениюВРеестре;
	НастроитьФорму();
	
КонецПроцедуры

#КонецОбласти
