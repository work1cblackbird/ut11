///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура загружает стандартные значения из макета с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры, логины и пароли для доступа к веб-сервисам обновлений.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьСтандартныеЗначения(КонтекстВыполнения = Неопределено) Экспорт

#Область ИнициализацияМетода

	ОбъектМетаданных     = Справочники.ЛентыНовостей; // Переопределение
	ИмяОбъектаМетаданных = "Справочники.ЛентыНовостей"; // Переопределение
	ИмяСвойства          = "CatalogObject_ЛентыНовостей"; // Переопределение

	НаименованиеМетода = ИмяОбъектаМетаданных + ".ЗагрузитьСтандартныеЗначения"; // Идентификатор.
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = НовыйКонтекстВыполнения(НаименованиеМетода, Истина); // Этот контекст.
	КонецЕсли;

	НачатьШагВыполнения(КонтекстВыполнения, "Запуск:" + НаименованиеМетода); // Идентификатор.

	ТипСоответствие = Тип("Соответствие");
	ТипСтрока       = Тип("Строка");

#КонецОбласти

#Область Проверки

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные(КонтекстВыполнения) Тогда
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Шаг = НаименованиеМетода + "/ЗагрузкаДанныхИзМакета";
	НачатьШагВыполнения(КонтекстВыполнения, Шаг);
	ЛогШаговВыполнения = Новый Массив;

	СодержимоеМакета = ОбъектМетаданных.ПолучитьМакет("СтандартныеЗначения").ПолучитьТекст();
	ПоставляемыеДанныеОбъекта = Новый Соответствие;
	ПоставляемыеДанныеОбъекта.Вставить(
		"" + ИмяОбъектаМетаданных + ":СтандартныеЗначения", // Идентификатор.
		СодержимоеМакета);
	ОбработкаНовостейСлужебный.ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(
		ИмяОбъектаМетаданных,
		ПоставляемыеДанныеОбъекта);
	Если ТипЗнч(ПоставляемыеДанныеОбъекта) = ТипСоответствие Тогда
		Для Каждого СтрокаСтандартныхЗначений Из ПоставляемыеДанныеОбъекта Цикл
			Если (ТипЗнч(СтрокаСтандартныхЗначений.Значение) = ТипСтрока)
					И (НЕ ПустаяСтрока(СтрокаСтандартныхЗначений.Значение)) Тогда
				ЕстьОшибки = Ложь;
				Попытка
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Попытка загрузки стандартных значений из строки (первые 2000 символов):
								|%1'"),
							Лев(СтрокаСтандартныхЗначений.Значение, 2000)));
					ЧтениеХМЛ = Новый ЧтениеXML;
					ЧтениеХМЛ.УстановитьСтроку(СтрокаСтандартныхЗначений.Значение);
					ЧтениеХМЛ.Прочитать();
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка загрузки стандартных значений из строки по причине:
								|%1'"),
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
					ЕстьОшибки = Истина;
				КонецПопытки;
				Если ЕстьОшибки <> Истина Тогда
					ХМЛТип = ПолучитьXMLТип(ЧтениеХМЛ);
					Если (НРег(ХМЛТип.ИмяТипа) = НРег("DefaultData")) Тогда
						// ... И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://v8.1c.ru/8.1/data/enterprise/current-config"))
						ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
						СвойствоОбъект = ОбъектХДТО.Свойства().Получить(ИмяСвойства);
						Если ТипЗнч(СвойствоОбъект) = Тип("СвойствоXDTO") Тогда
							Если (СвойствоОбъект.ВерхняяГраница = -1) ИЛИ (СвойствоОбъект.ВерхняяГраница > 1) Тогда
								СписокХДТО = ОбъектХДТО.ПолучитьСписок(СвойствоОбъект);
								Для каждого ЛокальныйТекущийОбъект Из СписокХДТО Цикл
									ЗагрузитьСтандартноеЗначение(
										ЛокальныйТекущийОбъект,
										ОбъектМетаданных,
										ИмяСвойства,
										ЛогШаговВыполнения);
								КонецЦикла;
							ИначеЕсли (СвойствоОбъект.НижняяГраница = 1) И (СвойствоОбъект.ВерхняяГраница = 1) Тогда
								ЗагрузитьСтандартноеЗначение(
									ОбъектХДТО.Получить(СвойствоОбъект),
									ОбъектМетаданных,
									ИмяСвойства,
									ЛогШаговВыполнения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", СтрСоединить(ЛогШаговВыполнения, Символы.ПС));

#КонецОбласти

#Область Завершение

	ОбработкаНовостейСлужебный.ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);

#КонецОбласти

КонецПроцедуры

// Процедура загружает стандартное значение из макета с именем "СтандартныеЗначения".
//
// Параметры:
//  ОбъектХДТО         - Объект ХДТО - загружаемый объект;
//  ОбъектМетаданных   - Объект метаданных;
//  ИмяСвойства        - Строка - имя свойства;
//  ЛогШаговВыполнения - Массив из Строка - пошаговое состояние загрузки данных.
//
Процедура ЗагрузитьСтандартноеЗначение(ОбъектХДТО, ОбъектМетаданных, ИмяСвойства, ЛогШаговВыполнения)

	Попытка
		// Если объект был загружен ранее (есть другой объект с таким же кодом), то подставить
		//  в создаваемый объект ссылку на созданный ранее элемент.
		НайденныйЭлемент = ОбъектМетаданных.НайтиПоКоду(ОбъектХДТО.Code);
		Если НайденныйЭлемент.Пустая() Тогда
			// Нет ранее созданных элементов с таким же кодом - оставить как есть.
			ЛогШаговВыполнения.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Создание: %1'"),
					СокрЛП(ОбъектХДТО.Code)));
		Иначе
			// Подменить на ранее созданный элемент с таким же кодом.
			ОбъектХДТО.Ref = НайденныйЭлемент.Ссылка;
			ЛогШаговВыполнения.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Изменение: %1, %2'"),
					СокрЛП(НайденныйЭлемент.Код),
					СокрЛП(НайденныйЭлемент.Наименование)));
		КонецЕсли;
		ТекущийОбъект = СериализаторXDTO.ПрочитатьXDTO(ОбъектХДТО);
		// Дополнение для Лент новостей, в которых могут храниться пользовательские настройки.
		// После загрузки объекта его надо сравнить с сохраненным в базе данных (если он там был)
		//  и восстановить значения следующих полей:
		//   Логин, Пароль, ВидимостьПоУмолчанию, ЧастотаОбновления, Комментарий, ПропускатьЗагрузкуБинарныхДанных,
		//     Табличная часть ИсключенияВидимости.
		Если НЕ ТекущийОбъект.Ссылка.Пустая() Тогда
			ЭталонныйОбъект = ТекущийОбъект.Ссылка.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(
				ТекущийОбъект,
				ЭталонныйОбъект,
				"Логин, Пароль, ВидимостьПоУмолчанию, ЧастотаОбновления, Комментарий, ПропускатьЗагрузкуБинарныхДанных");
			ТекущийОбъект.ИсключенияВидимости.Загрузить(ЭталонныйОбъект.ИсключенияВидимости.Выгрузить());
			ЭталонныйОбъект = Неопределено;
		КонецЕсли;
		ТекущийОбъект.ОбменДанными.Загрузка = Истина;
		ТекущийОбъект.Записать();
		// После записи классификатора можно провести дополнительные обработки.
		ОбработкаНовостейСлужебный.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(ТекущийОбъект.Ссылка);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИдентификаторШага = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. %1. Ошибка'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяСвойства);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось записать объект метаданных по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработкаНовостейСлужебный.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			ИдентификаторШага, // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			ОбъектМетаданных, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЛогШаговВыполнения.Добавить(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Процедура формирует текст условия для генерации url, для получения новостей из новостного центра.
//
// Параметры:
//  ЛентаНовостей - СправочникСсылка.ЛентыНовостей - лента новостей, для которой необходимо сформировать фильтр.
//
// Возвращаемое значение:
//   Строка - представление условий отбора для генерации url. Может быть пустой строкой.
//
Функция СформироватьТекстУсловияДляСервераНовостей(ЛентаНовостей) Экспорт

	Результат = "";

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Спр.КатегорияНовостей           КАК КатегорияНовостей,
		|	Спр.КатегорияНовостей.Код       КАК КатегорияНовостей_Код,
		|	Спр.ОтборНастраиваетсяНаСервере КАК ОтборБудетНастраиватьНаСервере,
		|	ПВХ.ОтборНастраиваетсяНаСервере КАК ОтборМожноНастраиватьНаСервере,
		|	ПВХ.ТипЗначенияВспомогательный  КАК ТипЗначенияВспомогательный,
		|	Рег.ЗначениеКатегорииНовостей   КАК ЗначениеКатегорииНовостей,
		|	ВЫБОР
		|		КОГДА ПВХ.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.Булево) ТОГДА
		|			Рег.ЗначениеКатегорииНовостей
		|		КОГДА ПВХ.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.Дата) ТОГДА
		|			Рег.ЗначениеКатегорииНовостей
		|		КОГДА ПВХ.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.Строка) ТОГДА
		|			Рег.ЗначениеКатегорииНовостей
		|		КОГДА ПВХ.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.Число) ТОГДА
		|			Рег.ЗначениеКатегорииНовостей
		|		КОГДА ПВХ.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ЗначенияКатегорийНовостей) ТОГДА
		|			Рег.ЗначениеКатегорииНовостей.Код // АПК:1377 Тип значения составного типа точно известен
		|		КОГДА ПВХ.ТипЗначенияВспомогательный = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта) ТОГДА
		|			Рег.ЗначениеКатегорииНовостей // Для интервала версий нет возможности задавать пользовательские отборы
		|	КОНЕЦ                           КАК ЗначениеКатегорииНовостей_Код
		|ИЗ
		|	Справочник.ЛентыНовостей.ДоступныеКатегорииНовостей КАК Спр
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
		|	ПО
		|		Спр.КатегорияНовостей = ПВХ.Ссылка
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ОтборыПоЛентамНовостейОбщие КАК Рег // Только Общие отборы, без отборов по области данных.
		|	ПО
		|		Рег.ЛентаНовостей = Спр.Ссылка
		|		И Рег.КатегорияНовостей = Спр.КатегорияНовостей
		|ГДЕ
		|	Спр.Ссылка = &ЛентаНовостей
		|	И ПВХ.ОтборНастраиваетсяНаСервере = ИСТИНА // ОтборМожноНастраиватьНаСервере
		|	И Спр.ОтборНастраиваетсяНаСервере = ИСТИНА // ОтборБудетНастраиватьНаСервере
		|УПОРЯДОЧИТЬ ПО
		|	Спр.КатегорияНовостей.Код
		|";
	Запрос.УстановитьПараметр("ЛентаНовостей", ЛентаНовостей);

	РезультатЗапроса = Запрос.Выполнить(); // СформироватьТекстУсловияДляСервераНовостей()
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		// Внутри одной категории условия объединяются по ИЛИ.
		// Между категориями условия объединяются по И.
		Пока Выборка.СледующийПоЗначениюПоля("КатегорияНовостей") Цикл
			Если СтрДлина(Выборка.КатегорияНовостей_Код) > 0 Тогда
				КоличествоУсловийПоКатегории = 0;
				УсловияПоКатегории = "";
				Пока Выборка.Следующий() Цикл
					Если (СтрДлина(Выборка.ЗначениеКатегорииНовостей_Код) > 0)
							ИЛИ (Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка) Тогда // Строка может быть нулевой длины, остальные значения должны быть явно введены
						Если Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Булево Тогда
							УсловияПоКатегории = УсловияПоКатегории + "#(" + Выборка.КатегорияНовостей_Код + "=" + ?(Выборка.ЗначениеКатегорииНовостей_Код, "TRUE", "FALSE") + ")#";
							КоличествоУсловийПоКатегории = КоличествоУсловийПоКатегории + 1;
						ИначеЕсли Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Дата Тогда
							УсловияПоКатегории = УсловияПоКатегории + "#(" + Выборка.КатегорияНовостей_Код + "=" + XMLСтрока(Выборка.ЗначениеКатегорииНовостей_Код) + "Z" + ")#"; // Дата - в нулевом меридиане
							КоличествоУсловийПоКатегории = КоличествоУсловийПоКатегории + 1;
						ИначеЕсли Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка Тогда
							УсловияПоКатегории = УсловияПоКатегории + "#(" + Выборка.КатегорияНовостей_Код + "=" + Выборка.ЗначениеКатегорииНовостей_Код + ")#";
							КоличествоУсловийПоКатегории = КоличествоУсловийПоКатегории + 1;
						ИначеЕсли Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Число Тогда
							УсловияПоКатегории = УсловияПоКатегории + "#(" + Выборка.КатегорияНовостей_Код + "=" + Формат(Выборка.ЗначениеКатегорииНовостей_Код, "ЧЦ=15; ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0; ЧО=1") + ")#";
							КоличествоУсловийПоКатегории = КоличествоУсловийПоКатегории + 1;
						ИначеЕсли Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ЗначенияКатегорийНовостей Тогда
							УсловияПоКатегории = УсловияПоКатегории + "#(" + Выборка.КатегорияНовостей_Код + "=" + Выборка.ЗначениеКатегорииНовостей_Код + ")#";
							КоличествоУсловийПоКатегории = КоличествоУсловийПоКатегории + 1;
						ИначеЕсли Выборка.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта Тогда
							// Для интервала версий нет возможности задавать пользовательские отборы.
							// Пропустить это условие.
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоУсловийПоКатегории > 1 Тогда
					Результат = Результат + "$(" + УсловияПоКатегории + ")$";
				ИначеЕсли КоличествоУсловийПоКатегории = 1 Тогда
					Результат = Результат + "$" + УсловияПоКатегории + "$";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если СтрДлина(Результат) > 0 Тогда
		Результат = "filter=(" + Результат + ")";
	КонецЕсли;

	Результат = СтрЗаменить(Результат, "$$", " and ");
	Результат = СтрЗаменить(Результат, "$", "");
	Результат = СтрЗаменить(Результат, "##", " or ");
	Результат = СтрЗаменить(Результат, "#", "");

	Возврат Результат;

КонецФункции

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
// Используется для сопоставления элементов механизмом "Выгрузка/загрузка областей данных".
//
// Возвращаемое значение: Массив(Строка) - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("Код");

	Возврат Результат;

КонецФункции

#Область ЛогИОтладкаЛокальный

// Возвращает структуру контекста выполнения.
//
// Параметры:
//  НаименованиеМетода           - Строка - имя метода;
//  ЗаписыватьВЖурналРегистрации - Булево - если Истина, то в конце метода будет запись в журнал регистрации.
//
// Возвращаемое значение:
//   Структура - см. в коде.
//
Функция НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации = Ложь)

	Результат = ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации);

	// При создании нового контекста выполнения первый же шаг - показать основное состояние системы.
	ОбработкаНовостейКлиентСервер.ДобавитьШагВыполнения(Результат, "СостояниеСистемы", 0, ОбработкаНовостейПовтИсп.ОписаниеСостоянияСистемы());

	Возврат Результат;

КонецФункции

// Регистрирует начало шага выполнения в контексте выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//
Процедура НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага)

	ОбработкаНовостейКлиентСервер.НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага);

КонецПроцедуры

// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  КодРезультата               - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата          - Строка, Массив - произвольное описание результата шага.
//                                  Массив будет преобразован в строку с разделителями;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено)

	Возврат ОбработкаНовостейКлиентСервер.ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения);

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли