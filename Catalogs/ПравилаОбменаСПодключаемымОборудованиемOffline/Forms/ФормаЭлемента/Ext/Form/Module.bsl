
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Объект.ТипПодключаемогоОборудования) Тогда
		Объект.ТипПодключаемогоОборудования = ТипПодключаемогоОборудованияПоУмолчанию();
	КонецЕсли;

	Настроить();
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	
	МаксимальныйКод = Объект.МаксимальныйКод + 99999;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	МассивТиповОборудования = Новый Массив;
	МассивТиповОборудования.Добавить(Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток);
	//++ Локализация
	МассивТиповОборудования.Добавить(Перечисления.ТипыОфлайнОборудования.ККМ);
	//-- Локализация
	
	Элементы.ТипПодключаемогоОборудования.СписокВыбора.ЗагрузитьЗначения(МассивТиповОборудования);
	
	ОбновитьОтборыКомпоновщикаНастроек();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	КоличествоТоваров = Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		Если Товары[КоличествоТоваров-1].Код - 99999 > ТекущийОбъект.МаксимальныйКод И ТекущийОбъект.МаксимальныйКод <> 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'В табличной части ""Товары"" слишком много товаров. Измените максимальное количество товаров или уменьшите количество товаров к выгрузке при помощи отбора.'"),,"Товары",,Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеОТоварахПрочитаны Тогда
		ОбновитьСписокТоваровНаСервере();
	КонецЕсли;
	
	ТекущийОбъект.НастройкиКомпоновкиДанных = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// Обработчик подсистемы запрета редактирования реквизитов объектов
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДанныеОТоварахПрочитаны Тогда
		
		Если Товары.Количество() > 0 Тогда
			ПрименитьИзмененияНаСервере(ТекущийОбъект);
		Иначе
			ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПравилаОбменаСПодключаемымОборудованиемOffline", ПараметрыЗаписи, Объект.Ссылка);

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// подсистема запрета редактирования ключевых реквизитов объектов	
	ЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(ЭтаФорма);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	ОтборИзменен = Истина;
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Если Элемент.ТекущиеДанные.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад") Тогда
			ОбновитьОтборыКомпоновщикаНастроек();
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияПриИзменении(Элемент)
	
	Настроить();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОтборИзменен;
	
КонецПроцедуры

&НаКлиенте
Процедура МаксимальныйКодПриИзменении(Элемент)
	
	МаксимальныйКод = Объект.МаксимальныйКод + 99999;
	
	// Изменен максимальный код - необходим контроль.
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	ОбновитьСписокТоваровНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодключаемогоОборудованияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтарыйКод = Элементы.Товары.ТекущиеДанные.Код;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.Код = СтарыйКод Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		НайденнаяСтрока = НайтиСтрокуТовараСКодом(ТекущиеДанные.Код, ТекущиеДанные.ПолучитьИдентификатор());
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НайденнаяСтрока = Товары.НайтиПоИдентификатору(НайденнаяСтрока);
			
			ОписаниеОшибки = НСтр("ru = 'Такой код уже назначен для номенклатуры %Номенклатура%'");
			ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Номенклатура%", """" + НайденнаяСтрока.Номенклатура + """"
			+ ?(ЗначениеЗаполнено(НайденнаяСтрока.Характеристика), " " + НСтр("ru = 'с характеристикой'") + " """ + НайденнаяСтрока.Характеристика + """", "")
			+ ?(ЗначениеЗаполнено(НайденнаяСтрока.Упаковка), " " + НСтр("ru = 'в упаковке'") + " """ + НайденнаяСтрока.Упаковка + """", ""))+НСтр("ru = '. Обменять их местами?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ТоварыПередОкончаниемРедактированияЗавершение", ЭтотОбъект, Новый Структура("НайденнаяСтрока, Отказ, ТекущиеДанные", НайденнаяСтрока, Отказ, ТекущиеДанные)), ОписаниеОшибки, РежимДиалогаВопрос.ДаНет);
			Отказ = Истина;
			Возврат;
			
		Иначе
			
			ТекущиеДанные.Новый = Истина;
			ТекущиеДанные.ИзмененаПользователем = Истина;
			ОбработатьИзменениеКодаТовараНаСервере(ТекущиеДанные.Код);
			
		КонецЕсли;
		
	Иначе
		ТекущиеДанные.Код = СтарыйКод;
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактированияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	НайденнаяСтрока = ДополнительныеПараметры.НайденнаяСтрока;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(НайденнаяСтрока.Номенклатура) ИЛИ РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные.ИзмененаПользователем = Истина;
		НайденнаяСтрока.ИзмененаПользователем = Истина;
		
		ВременнаяСтруктура = СтруктураСтроки(НайденнаяСтрока);
		ЗаполнитьЗначенияСвойств(НайденнаяСтрока, ТекущиеДанные,,"Код, ИзмененаПользователем");
		ТекущиеДанные.Код = СтарыйКод;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВременнаяСтруктура);
		
		Элементы.Товары.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ДоступноРедактированиеКодовТоваров Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ТекущиеДанные = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И ТекущиеДанные.Используется Тогда
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ТоварыПередУдалениемЗавершение", ЭтотОбъект),
				НСтр("ru = 'Удаляемой номенклатуре, соответствующей заданному отбору после удаления будет заново назначены коды товаров. Продолжить?'"), 
				РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
	КонецЦикла;
	
	ТоварыПередУдалениемЗавершение(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение данных пользователем
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
			// Данные в строке уже очищены
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные.Номенклатура   = Неопределено;
		ТекущиеДанные.Характеристика = Неопределено;
		ТекущиеДанные.Упаковка       = Неопределено;
		ТекущиеДанные.Используется   = Неопределено;
		ТекущиеДанные.Наименование   = Неопределено;
		ТекущиеДанные.Весовой        = Неопределено;
		ТекущиеДанные.Штрихкод       = Неопределено;
		ТекущиеДанные.Цена           = Неопределено;
		
		ТекущиеДанные.ИзмененаПользователем = Истина;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не (Поле = Элементы.ТоварыКод
		Или Поле = Элементы.ТоварыКодИнтерактивно) Тогда
	
		ВыбраннаяСтрока = Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если ВыбраннаяСтрока <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, ВыбраннаяСтрока.Номенклатура);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьСписокТоваров(Команда)
	
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	ОбновитьСписокТоваровНаСервереПовторноеОткрытие();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСписокТоваров(Команда)
	
	Состояние(НСтр("ru = 'Выполняется обновление списка товаров...'"));
	ОбновитьСписокТоваровНаСервере();
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСписокТоваров;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	// Изменение данных
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		ТекущиеДанные = Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ИндексТекущейСтроки = Товары.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки > 0 Тогда
			
			СтрокаНазначение = Товары[ИндексТекущейСтроки-1];
			
			СтрокаНазначение.ИзмененаПользователем = Истина;
			ТекущиеДанные.ИзмененаПользователем = Истина;
			
			Код = СтрокаНазначение.Код;
			СтрокаНазначение.Код = ТекущиеДанные.Код;
			ТекущиеДанные.Код = Код;
			
			Товары.Сдвинуть(ИндексТекущейСтроки,-1);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	// Изменение данных пользователем
	Кол = Элементы.Товары.ВыделенныеСтроки.Количество()-1;
	Для НомерСтроки = 0 По Кол Цикл
		
		ТекущиеДанные = Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[Кол-НомерСтроки]);
		
		ИндексТекущейСтроки = Товары.Индекс(ТекущиеДанные);
		Если ИндексТекущейСтроки < Товары.Количество()-1 Тогда
			
			СтрокаНазначение = Товары[ИндексТекущейСтроки+1];
			
			СтрокаНазначение.ИзмененаПользователем = Истина;
			ТекущиеДанные.ИзмененаПользователем = Истина;
			
			Код = СтрокаНазначение.Код;
			СтрокаНазначение.Код = ТекущиеДанные.Код;
			ТекущиеДанные.Код = Код;
			
			Товары.Сдвинуть(ИндексТекущейСтроки,1);
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОтбораПоУмолчанию(Команда)
	ЗагрузитьНастройкиОтбораПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РазрешитьРедактированиеРеквизитовОбъекта(Команда)
	
	ОбщегоНазначенияУТКлиент.РазрешитьРедактированиеРеквизитовОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвободныеКодыТоваровВКонцеСписка(Команда)
	
	Если Товары.Количество() > 0 Тогда
		СтрокаТЧ = Товары[Товары.Количество() - 1];
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			УдалитьСвободныеКодыТоваровНаСервере();
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нет данных для удаления'"));
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нет данных для удаления'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

//++ Локализация
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШтрихкод.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Штрихкод");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Используется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПодключаемогоОборудования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыОфлайнОборудования.ККМ;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не задан штрихкод>'"));

	//

//-- Локализация
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШтрихкод.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Штрихкод");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Используется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТипПодключаемогоОборудования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<штрихкод будет сгенерирован при выгрузке>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦена.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Цена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Используется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не задана цена>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Наименование");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Используется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не задано наименование>'"));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКод.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодИнтерактивно.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Код");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("МаксимальныйКод");

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МаксимальныйКод");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПоясняющийОшибкуТекст);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Товары.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Товары.Используется");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

#Область Прочее

&НаСервере
Функция СвободныеКоды()
	
	СвободныеКоды = Новый Массив;
	КоличествоТоваров = Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		
		Для Каждого СтрокаТЧ Из Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())) Цикл
			СвободныеКоды.Добавить(СтрокаТЧ.Код);
		КонецЦикла;
		Если ЗначениеЗаполнено(Товары[КоличествоТоваров-1].Номенклатура) Тогда
			СвободныеКоды.Добавить(Товары[КоличествоТоваров-1].Код + 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвободныеКоды;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	Если ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЭтоТипОфлайнОборудованияККМ(Объект.ТипПодключаемогоОборудования) Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	ЦенообразованиеВызовСервера.ПолучитьСхемуПоВерсииЦенообразования(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Процедура Настроить()
	
	Если ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЭтоТипОфлайнОборудованияККМ(Объект.ТипПодключаемогоОборудования) Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	ЦенообразованиеВызовСервера.ПолучитьСхемуПоВерсииЦенообразования(СхемаКомпоновкиДанных);
	
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	
	СсылкаДляСчитыванияНастроек = Объект.Ссылка;
	Если Не ЗначениеЗаполнено(СсылкаДляСчитыванияНастроек) И Параметры <> Неопределено И Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		СсылкаДляСчитыванияНастроек = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СсылкаДляСчитыванияНастроек) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.НастройкиКомпоновкиДанных КАК НастройкиКомпоновкиДанных
		|ИЗ
		|	Справочник.ПравилаОбменаСПодключаемымОборудованиемOffline КАК ПравилаОбменаСПодключаемымОборудованиемOffline
		|ГДЕ
		|	ПравилаОбменаСПодключаемымОборудованиемOffline.Ссылка = &ПравилоОбмена");
		
		Запрос.УстановитьПараметр("ПравилоОбмена", СсылкаДляСчитыванияНастроек);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ВыборкаНастройкиКомпоновкиДанных = Выборка.НастройкиКомпоновкиДанных; // ХранилищеЗначения
			НастройкиКомпоновкиДанных = ВыборкаНастройкиКомпоновкиДанных.Получить();
			Если ЗначениеЗаполнено(НастройкиКомпоновкиДанных) Тогда
				КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
			Иначе
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Элементы.ЕдиницаИзмеренияВеса.Видимость = Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	
	ДоступноРедактированиеКодовТоваров = Пользователи.ЭтоПолноправныйПользователь(,, Ложь)
	 ИЛИ Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	
	Элементы.ТоварыУдалить.Доступность                         = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыПереместитьВниз.Доступность                 = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыПереместитьВверх.Доступность                = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКонтекстноеМенюУдалить.Доступность          = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКонтекстноеМенюПереместитьВверх.Доступность = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКонтекстноеМенюПереместитьВниз.Доступность  = ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКод.ТолькоПросмотр                          = Не ДоступноРедактированиеКодовТоваров;
	Элементы.ТоварыКодИнтерактивно.ТолькоПросмотр              = Не ДоступноРедактированиеКодовТоваров;
	
	Элементы.ТоварыУдалитьСвободныеКодыТоваровВКонцеСписка.Видимость = Пользователи.ЭтоПолноправныйПользователь(,, Ложь);
	
КонецПроцедуры

&НаСервере
Функция АдресКомпоновщикаНастроекВоВременномХранилище()
	
	АдресКомпоновщикаНастроекВоВременномХранилище = ПоместитьВоВременноеХранилище(КомпоновщикНастроек.ПолучитьНастройки());
	
	Возврат АдресКомпоновщикаНастроекВоВременномХранилище;
	
КонецФункции

&НаСервере
Процедура ЗаписатьКодВТаблице(Таблица, Данные, Код, Используется)
	
	СтрокаТЗ = Таблица.Найти(Код, "Код");
	Если СтрокаТЗ = Неопределено Тогда
		СтрокаТЗ = Таблица.Добавить();
		СтрокаТЗ.Новый = Истина;
	КонецЕсли;
	
	СтрокаТЗ.ИзмененаАвтоматически = Истина;
	
	ЗаполнитьЗначенияСвойств(СтрокаТЗ, Данные);
	
	СтрокаТЗ.Код             = Код;
	СтрокаТЗ.Используется    = Используется;
	
КонецПроцедуры

&НаСервере
Функция ТаблицаТоваров(Товары, ВидЦены)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Новый КАК Новый,
	|	КодыТоваров.ИзмененаПользователем КАК ИзмененаПользователем,
	|	КодыТоваров.ИзмененаАвтоматически КАК ИзмененаАвтоматически,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	КодыТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ КодыТоваровИсходнаяТаблица
	|ИЗ
	|	&ТаблицаЗначений КАК КодыТоваров
	|;
	|
	|ВЫБРАТЬ
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Новый КАК Новый,
	|	КодыТоваров.ИзмененаПользователем КАК ИзмененаПользователем,
	|	КодыТоваров.ИзмененаАвтоматически КАК ИзмененаАвтоматически,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	КодыТоваров.Упаковка КАК Упаковка,
	|	(ВЫБОР
	|		КОГДА КодыТоваров.Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоУпаковке = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|		ИНАЧЕ КодыТоваров.Упаковка
	|	КОНЕЦ)КАК УпаковкаЦО,
	|	(ВЫБОР
	|		КОГДА КодыТоваров.Номенклатура.ВидНоменклатуры.НастройкиКлючаЦенПоХарактеристике = ЗНАЧЕНИЕ(Перечисление.ВариантОтбораДляКлючаЦен.НеИспользовать)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатурыДляЦенообразования.ПустаяСсылка)
	|		ИНАЧЕ КодыТоваров.Характеристика.ХарактеристикаНоменклатурыДляЦенообразования
	|	КОНЕЦ) КАК ХарактеристикаЦО,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатурыДляЦенообразования.ПустаяСсылка) КАК СерияЦО	
	|ПОМЕСТИТЬ КодыТоваров
	|ИЗ
	|	КодыТоваровИсходнаяТаблица КАК КодыТоваров
	|ИНДЕКСИРОВАТЬ ПО КодыТоваров.Номенклатура, КодыТоваров.Характеристика, КодыТоваров.Упаковка
    |;
	|
	|ВЫБРАТЬ
	|	КодыТоваров.Новый КАК Новый,
	|	КодыТоваров.ИзмененаПользователем КАК ИзмененаПользователем,
	|	КодыТоваров.ИзмененаАвтоматически КАК ИзмененаАвтоматически,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(КодыТоваров.Номенклатура.Наименование,"""") КАК НоменклатураНаименование,
	|	ЕСТЬNULL(КодыТоваров.Номенклатура.НаименованиеПолное,"""") КАК НоменклатураНаименованиеПолное,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(КодыТоваров.Характеристика.Наименование,"""") КАК ХарактеристикаНаименование,
	|	ЕСТЬNULL(КодыТоваров.Характеристика.НаименованиеПолное,"""") КАК ХарактеристикаНаименованиеПолное,
	|	КодыТоваров.Упаковка КАК Упаковка,
	|	ЕСТЬNULL(КодыТоваров.Упаковка.Наименование, """") КАК УпаковкаНаименование,
	|	ЕСТЬNULL(ШтрихкодыНоменклатуры.Штрихкод, """") КАК Штрихкод,
	|	(ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 1)
	|		/ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1)) *
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена,
	|	ВЫБОР
	|		КОГДА &ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения = ЗНАЧЕНИЕ(Перечисление.ТипыИзмеряемыхВеличин.Вес)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Весовой
	|ИЗ
	|	КодыТоваров КАК КодыТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО КодыТоваров.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И КодыТоваров.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И КодыТоваров.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|			И &ВесыСПечатьюЭтикеток
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			&ЦеныНоменклатуры КАК ЦеныНоменклатурыСрезПоследних
	|		ПО 
	|			&УсловиеСоединенияЦеныНоменклатуры	
	|ИТОГИ
	|	МАКСИМУМ(Штрихкод)
	|ПО
	|	Код");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"КодыТоваров.Упаковка",
			"КодыТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыСрезПоследних.Упаковка",
			"ЦеныНоменклатурыСрезПоследних.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаТипИзмеряемойВеличиныЕдиницыИзмерения",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаЗначениеРеквизитаЕдиницыИзмерения(
			"ТипИзмеряемойВеличины",
			"КодыТоваров.Упаковка",
			"КодыТоваров.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ЦеныНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатуры("КодыТоваров",
			"&ТекущаяДата",
			Новый Структура("Параметр", "&ВидЦены"),
			Неопределено));
			
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&УсловиеСоединенияЦеныНоменклатуры",
		ЦенообразованиеКлиентСервер.ТекстЗапросаРегистрСведенийЦеныНоменклатурыУсловиеСоединения(
		"КодыТоваров",
		"ЦеныНоменклатурыСрезПоследних",
		Неопределено,
		Неопределено));
		
	Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВесыСПечатьюЭтикеток", "ШтрихкодыНоменклатуры.Штрихкод ПОДОБНО &ФорматШтрихкода СПЕЦСИМВОЛ ""\""");
		Запрос.УстановитьПараметр("ФорматШтрихкода", РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода()));
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВесыСПечатьюЭтикеток", "ИСТИНА");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидЦены",         ВидЦены);
	Запрос.УстановитьПараметр("ТекущаяДата",     КонецДня(ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("ТаблицаЗначений", Товары);
	
	ТаблицаТоваров = Новый ТаблицаЗначений;
	ТаблицаТоваров.Колонки.Добавить("Используется",          Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Код",                   Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("КодИнтерактивно",       Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТоваров.Колонки.Добавить("Характеристика",        Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТоваров.Колонки.Добавить("Упаковка",              Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения"));
	ТаблицаТоваров.Колонки.Добавить("Наименование",          Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("НаименованиеПолное",    Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Штрихкод",              Новый ОписаниеТипов("Строка"));
	ТаблицаТоваров.Колонки.Добавить("Цена",                  Новый ОписаниеТипов("Число"));
	ТаблицаТоваров.Колонки.Добавить("Весовой",               Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("Новый",                 Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИзмененаПользователем", Новый ОписаниеТипов("Булево"));
	ТаблицаТоваров.Колонки.Добавить("ИзмененаАвтоматически", Новый ОписаниеТипов("Булево"));
	
	МаксимальныйКодВесовогоТовара = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара();
	
	ВыборкаПоКодам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоКодам.Следующий() Цикл
		
		НоваяСтрока = ТаблицаТоваров.Добавить();
		
		Выборка = ВыборкаПоКодам.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если Не ЗначениеЗаполнено(НоваяСтрока.Код) Тогда
				НоваяСтрока.Используется          = Выборка.Используется;
				НоваяСтрока.Код                   = Выборка.Код;
				Если Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
					НоваяСтрока.КодИнтерактивно   = Выборка.Код - МаксимальныйКодВесовогоТовара;
				Иначе
					НоваяСтрока.КодИнтерактивно   = Выборка.Код;
				КонецЕсли;
				НоваяСтрока.Номенклатура          = Выборка.Номенклатура;
				НоваяСтрока.Характеристика        = Выборка.Характеристика;
				НоваяСтрока.Упаковка              = Выборка.Упаковка;
				НоваяСтрока.Наименование = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименование,
					Выборка.ХарактеристикаНаименование,
					Выборка.УпаковкаНаименование,
					Выборка.УпаковкаНаименование);
				НоваяСтрока.НаименованиеПолное = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					Выборка.НоменклатураНаименованиеПолное,
					Выборка.ХарактеристикаНаименованиеПолное,
					Выборка.УпаковкаНаименование);
				НоваяСтрока.Цена                  = Выборка.Цена;
				НоваяСтрока.Штрихкод              = РегистрыСведений.ШтрихкодыНоменклатуры.ПодготовитьШтрихкод(СокрЛП(Выборка.Штрихкод));
				НоваяСтрока.Весовой               = Выборка.Весовой;
				НоваяСтрока.Новый                 = Выборка.Новый;
				НоваяСтрока.ИзмененаПользователем = Выборка.ИзмененаПользователем;
				НоваяСтрока.ИзмененаАвтоматически = Выборка.ИзмененаАвтоматически;
			Иначе
				НоваяСтрока.Штрихкод = НоваяСтрока.Штрихкод + ", " + СокрЛП(Выборка.Штрихкод);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаТоваров.Сортировать("Код");
	Возврат ТаблицаТоваров;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКодыИзРегистра(ТекущийОбъект)
	
	ВидыЦен = Новый Структура("РозничныйВидЦены, ИндивидуальныйВидЦены", Справочники.ВидыЦен.ПустаяСсылка(), Справочники.ВидыЦен.ПустаяСсылка());
	ТекущийОбъектРеквизитыПеречень = Новый Структура(
		"Склад, СкладРозничныйВидЦены, СкладИндивидуальныйВидЦены",
		"Склад",
		"Склад.РозничныйВидЦены",
		"Склад.ИндивидуальныйВидЦены");
	ТекущийОбъектРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект, ТекущийОбъектРеквизитыПеречень);
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		НастройкиАссортимента = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийНастройкиАссортимента(ТекущийОбъектРеквизиты.Склад);
		Если НастройкиАссортимента.РозничныеЦеныИзФорматаМагазина Тогда
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкиАссортимента.ФорматМагазина, "РозничныйВидЦены, ИндивидуальныйВидЦены");
			ВидыЦен.РозничныйВидЦены = РеквизитыОбъекта.РозничныйВидЦены;
			ВидыЦен.ИндивидуальныйВидЦены = РеквизитыОбъекта.ИндивидуальныйВидЦены;
		Иначе
			ВидыЦен.РозничныйВидЦены = ТекущийОбъектРеквизиты.СкладРозничныйВидЦены;
			ВидыЦен.ИндивидуальныйВидЦены = ТекущийОбъектРеквизиты.СкладИндивидуальныйВидЦены;
		КонецЕсли;
	Иначе
		ВидыЦен.РозничныйВидЦены = ТекущийОбъектРеквизиты.СкладРозничныйВидЦены;
	КонецЕсли;
	
	Таблица = ПодключаемоеОборудованиеOfflineВызовСервера.ДанныеТоваровПоПравилуОбмена(ТекущийОбъект, ВидыЦен.РозничныйВидЦены, ВидыЦен.ИндивидуальныйВидЦены);
	
	Если Таблица <> Неопределено Тогда
		Товары.Загрузить(Таблица);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуТоваров(КодыТоваров, ПравилоОбмена, ВидЦены, ИндивидуальныйВидЦены, АдресНаНастройки)
	
	Если ПодключаемоеОборудованиеOfflineВызовСервераЛокализация.ЭтоТипОфлайнОборудованияККМ(Объект.ТипПодключаемогоОборудования) Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеКодовТоваровККМ");
	ИначеЕсли Объект.ТипПодключаемогоОборудования = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток Тогда
		СхемаКомпоновкиДанных = Справочники.ПравилаОбменаСПодключаемымОборудованиемOffline.ПолучитьМакет("ОбновлениеPLUКодовТоваров");
	Иначе
		ВызватьИсключение НСтр("ru = 'Некорректный тип подключаемого оборудования'");
	КонецЕсли;
	
	ЦенообразованиеВызовСервера.ПолучитьСхемуПоВерсииЦенообразования(СхемаКомпоновкиДанных);
	
	// Подготовка компоновщика макета компоновки данных, загрузка настроек
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	Компоновщик.ЗагрузитьНастройки(ПолучитьИзВременногоХранилища(АдресНаНастройки));
	Компоновщик.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Заполнение структуры отчета и выбранных полей.
	Компоновщик.Настройки.Структура.Очистить();
	
	ГруппировкаДетальныеЗаписи = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	
	Компоновщик.Настройки.Выбор.Элементы.Очистить();
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Номенклатура");
	ВыбранноеПоле.Использование = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Характеристика");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Упаковка");
		ВыбранноеПоле.Использование = Истина;
	КонецЕсли;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("СоответствуетОтбору");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Код");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Используется");
	ВыбранноеПоле.Использование = Истина;
	
	ВыбранноеПоле               = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле          = Новый ПолеКомпоновкиДанных("Весовой");
	ВыбранноеПоле.Использование = Истина;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(Компоновщик);
	
	// Компоновка макета и исполнение запроса.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.ПолучитьНастройки(), , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("Дата");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ТекущаяДатаСеанса();
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ВидЦены;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИндивидуальныйВидЦены");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ИндивидуальныйВидЦены;
	КонецЕсли;	
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ПравилоОбмена");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПравилоОбмена;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ЕдиницаИзмеренияВеса");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = Объект.ЕдиницаИзмеренияВеса;
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ФорматШтрихкода");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = РегистрыСведений.ШтрихкодыНоменклатуры.ФорматВесовогоШтрихкода(РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксУзлаШтрихкода());
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИспользоватьУпаковкиНоменклатуры");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	КонецЕсли;
	Параметр = МакетКомпоновки.ЗначенияПараметров.Найти("ИспользоватьХарактеристикиНоменклатуры");
	Если Параметр <> Неопределено Тогда
		Параметр.Значение = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ПравилоОбмена КАК ПравилоОбмена,
	|	КодыТоваров.Код КАК Код,
	|	КодыТоваров.Используется КАК Используется,
	|	КодыТоваров.Номенклатура КАК Номенклатура,
	|	КодыТоваров.Характеристика КАК Характеристика,
	|	КодыТоваров.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ КодыТоваров
	|ИЗ
	|	&ТаблицаЗначений КАК КодыТоваров
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка");
	Запрос.Текст = Запрос.Текст + ";" + СтрЗаменить(МакетКомпоновки.НаборыДанных[0].Запрос, "РегистрСведений.КодыТоваровПодключаемогоОборудованияOffline", "КодыТоваров");
	
	// Заполнение параметров с полей отбора компоновщика настроек формы обработки.
	Для каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		Запрос.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	ТаблицаКодыТоваров = КодыТоваров.Выгрузить();
	ТаблицаКодыТоваров.Индексы.Добавить("Код");
	
	Запрос.УстановитьПараметр("ТаблицаЗначений", ТаблицаКодыТоваров);
	
	Если ТаблицаКодыТоваров.Количество() > 0 Тогда
		Код = ТаблицаКодыТоваров[ТаблицаКодыТоваров.Количество() - 1].Код + 1;
	Иначе
		Код = ПодключаемоеОборудованиеOfflineВызовСервера.МаксимальныйКодВесовогоТовара() + 1;
	КонецЕсли;
	
	СвободныеКоды = Новый ТаблицаЗначений;
	СвободныеКоды.Колонки.Добавить("Код", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаТЧ Из Товары.НайтиСтроки(Новый Структура("Номенклатура", Справочники.Номенклатура.ПустаяСсылка())) Цикл
		НоваяСтрока = СвободныеКоды.Добавить();
		НоваяСтрока.Код = СтрокаТЧ.Код;
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СоответствуетОтбору Тогда
			Если Не ЗначениеЗаполнено(Выборка.Код) Тогда
				
				Если СвободныеКоды.Количество() = 0 Тогда
					ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, Код, Истина);
					Код = Код + 1;
				Иначе
					ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, СвободныеКоды[0].Код, Истина);
					СвободныеКоды.Удалить(0);
				КонецЕсли;
				
			Иначе
				ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, Выборка.Код, Истина);
			КонецЕсли;
		Иначе
			ЗаписатьКодВТаблице(ТаблицаКодыТоваров, Выборка, Выборка.Код, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	КодыТоваров.Загрузить(ТаблицаТоваров(ТаблицаКодыТоваров, ВидЦены));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервереПервоеОткрытие()
	
	ПодключаемоеОборудованиеOfflineВызовСервера.ОбновитьКодыТоваров(Объект.Ссылка);
	ЗагрузитьКодыИзРегистра(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервереПовторноеОткрытие()
	
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Новый, ИзмененаПользователем", Истина, Ложь));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			// Данные в строке уже очищены
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура   = Неопределено;
		СтрокаТЧ.Характеристика = Неопределено;
		СтрокаТЧ.Упаковка       = Неопределено;
		СтрокаТЧ.Используется   = Неопределено;
		СтрокаТЧ.Наименование   = Неопределено;
		СтрокаТЧ.Весовой        = Неопределено;
		СтрокаТЧ.Штрихкод       = Неопределено;
		СтрокаТЧ.Цена           = Неопределено;
		
	КонецЦикла;
	
	// Удаление не записанных свободных кодов с конца таблицы.
	ИндексПоследнейСтроки = Товары.Количество() - 1;
	Для НомерСтроки = -ИндексПоследнейСтроки По 0 Цикл
		СтрокаТЧ = Товары[-НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) И СтрокаТЧ.Новый Тогда
			Товары.Удалить(-НомерСтроки);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ВидыЦен = Новый Структура("РозничныйВидЦены, ИндивидуальныйВидЦены", Справочники.ВидыЦен.ПустаяСсылка(), Справочники.ВидыЦен.ПустаяСсылка());
	СкладРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Склад, "РозничныйВидЦены, ИндивидуальныйВидЦены");
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		НастройкиАссортимента = РегистрыСведений.ИсторияИзмененияФорматовМагазинов.ТекущийНастройкиАссортимента(Объект.Склад);
		Если НастройкиАссортимента.РозничныеЦеныИзФорматаМагазина Тогда
			РеквизитыОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкиАссортимента.ФорматМагазина, "РозничныйВидЦены, ИндивидуальныйВидЦены");
			ВидыЦен.РозничныйВидЦены = РеквизитыОбъекта.РозничныйВидЦены;
			ВидыЦен.ИндивидуальныйВидЦены = РеквизитыОбъекта.ИндивидуальныйВидЦены;
		Иначе
			ВидыЦен.РозничныйВидЦены = СкладРеквизиты.РозничныйВидЦены;
			ВидыЦен.ИндивидуальныйВидЦены = СкладРеквизиты.ИндивидуальныйВидЦены;
		КонецЕсли;
	Иначе
		ВидыЦен.РозничныйВидЦены = СкладРеквизиты.РозничныйВидЦены;
	КонецЕсли;
	
	ОбновитьТаблицуТоваров(Товары, Объект.Ссылка, ВидыЦен.РозничныйВидЦены, ВидыЦен.ИндивидуальныйВидЦены, АдресКомпоновщикаНастроекВоВременномХранилище());
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТоваровНаСервере()
	
	ОбновитьОтборыКомпоновщикаНастроек();
	Если Не ДанныеОТоварахПрочитаны Тогда
		// Первое открытие списка товаров
		ОбновитьСписокТоваровНаСервереПервоеОткрытие();
		ОбновитьСписокТоваровНаСервереПовторноеОткрытие();
		
		ДанныеОТоварахПрочитаны = Истина;
	Иначе
		ОбновитьСписокТоваровНаСервереПовторноеОткрытие();
	КонецЕсли;
	
	ОтборИзменен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСтроки(Строка)
	
	СтрокаТЧ = Новый Структура;
	СтрокаТЧ.Вставить("Используется");
	СтрокаТЧ.Вставить("Номенклатура");
	СтрокаТЧ.Вставить("Характеристика");
	СтрокаТЧ.Вставить("Упаковка");
	СтрокаТЧ.Вставить("Наименование");
	СтрокаТЧ.Вставить("Цена");
	СтрокаТЧ.Вставить("Штрихкод");
	СтрокаТЧ.Вставить("Весовой");
	
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
	
	Возврат СтрокаТЧ;
	
КонецФункции

&НаСервере
Процедура ПрименитьИзмененияНаСервере(ТекущийОбъект)
	
	НачатьТранзакцию();
	Попытка
		
		// Запись измененных пользователем кодов товаров
		НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("ИзмененаПользователем, Новый", Истина, Ложь));
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
			МенеджерЗаписи.ПравилоОбмена = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		// Запись автоматически добавленных строк
		НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("ИзмененаАвтоматически, ИзмененаПользователем, Новый", Истина, Ложь, Ложь));
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
			МенеджерЗаписи.ПравилоОбмена = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		// Запись новых кодов товаров
		НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Новый", Истина));
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
			МенеджерЗаписи.ПравилоОбмена = ТекущийОбъект.Ссылка;
			МенеджерЗаписи.Записать();
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			СтрокаТЧ.ИзмененаПользователем = Ложь;
			СтрокаТЧ.ИзмененаАвтоматически = Ложь;
			СтрокаТЧ.Новый                 = Ложь;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Редактирование правила обмена с ККМ Offline'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(НСтр("ru = 'Во время применения изменений произошла ошибка:
			                     |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуТовараСКодом(Код, Идентификатор)
	
	ВозвращаемоеЗначение = Неопределено;
	
	НайденныеСтроки = Товары.НайтиСтроки(Новый Структура("Код", Код));
	Если НайденныеСтроки.Количество() > 1 Тогда
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если НайденнаяСтрока.ПолучитьИдентификатор() <> Идентификатор Тогда
				ВозвращаемоеЗначение = НайденнаяСтрока.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ОбработатьИзменениеКодаТовараНаСервере(ТекущийКод)
	
	КоличествоТоваров = Товары.Количество();
	Если КоличествоТоваров > 0 Тогда
		
		МаксимальныйКодВТаблице = Товары[КоличествоТоваров-1].Код;
		Если МаксимальныйКодВТаблице = ТекущийКод Тогда
			Если КоличествоТоваров > 1 Тогда
				МаксимальныйКодВТаблице = Товары[КоличествоТоваров-2].Код;
			КонецЕсли;
		КонецЕсли;
		
		Если МаксимальныйКодВТаблице > СтарыйКод Тогда
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Код = СтарыйКод;
			НоваяСтрока.ИзмененаПользователем = Истина;
			
		КонецЕсли;
		
		Разница = ТекущийКод - МаксимальныйКодВТаблице;
		Пока Разница > 1 Цикл
			
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Новый = Истина;
			НоваяСтрока.ИзмененаПользователем = Истина;
			
			МаксимальныйКодВТаблице = МаксимальныйКодВТаблице + 1;
			НоваяСтрока.Код = МаксимальныйКодВТаблице;
			Разница = Разница - 1;
			
		КонецЦикла;
	КонецЕсли;
	
	Товары.Сортировать("Код");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвободныеКодыТоваровНаСервере()
	
	НачатьТранзакцию();
	Попытка
		
		МассивСтрокДляУдаления = Новый Массив;
		
		// Удаление свободных кодов товаров из конца списка.
		ИндексПоследнейСтроки = Товары.Количество() - 1;
		Для НомерСтроки = -ИндексПоследнейСтроки По 0 Цикл
			СтрокаТЧ = Товары[-НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
				
				МенеджерЗаписи = РегистрыСведений.КодыТоваровПодключаемогоОборудованияOffline.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтрокаТЧ);
				МенеджерЗаписи.ПравилоОбмена = Объект.Ссылка;
				МенеджерЗаписи.Удалить();
				
				МассивСтрокДляУдаления.Добавить(СтрокаТЧ);
				
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление свободных кодов ККМ Offline'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(НСтр("ru = 'Во время удаления свободных кодов ККМ Offline произошла ошибка:
			                     |%1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Возврат;
		
	КонецПопытки;
	
	Для Каждого СтрокаТЧ Из МассивСтрокДляУдаления Цикл
		Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыКомпоновщикаНастроек()
	
	Для Каждого СтрокаОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если СтрокаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад") Тогда
			КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ИсключитьНулевыеОстаткиПоСкладу", СтрокаОтбора.Использование);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущийЭлемент = Элементы.ТоварыКод Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДоступноРедактированиеКодовТоваров Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйКод = Элементы.Товары.ТекущиеДанные.Код;
	
	СвободныеКоды = СвободныеКоды();
	Элементы.ТоварыКод.СписокВыбора.Очистить();
	Для Каждого СвободныйКод Из СвободныеКоды Цикл
		Элементы.ТоварыКод.СписокВыбора.Добавить(СвободныйКод );
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипПодключаемогоОборудованияПоУмолчанию()

	Результат = Перечисления.ТипыПодключаемогоОборудования.ВесыСПечатьюЭтикеток;
	ТипПодключаемогоОборудованияПоУмолчаниюЛокализация(Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ТипПодключаемогоОборудованияПоУмолчаниюЛокализация(ТипПодключаемогоОборудования)
	
	//++ Локализация
	ТипПодключаемогоОборудования = Перечисления.ТипыОфлайнОборудования.ККМ;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
