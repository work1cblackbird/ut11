#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Выполняет установку параметров сеанса. Вызывается из модуля сеанса.
//
// Параметры:
//  ИмяПараметра			 - Строка - имя параметра сеанса.
//  УстановленныеПараметры	 - Массив - все установленные параметры сеанса.
//
Процедура УстановитьПараметрыСеанса(ИмяПараметра, УстановленныеПараметры) Экспорт
	
	ПараметрыСеанса.ХозяйственныеОперацииСНастройкамиОграниченийДоступа = Новый ФиксированныйМассив(Новый Массив);
	
	Если ИмяПараметра = "ХозяйственныеОперацииСНастройкамиОграниченийДоступа" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозяйственныеОперацииДоступныеДляОграниченийДоступа.ХозяйственнаяОперация КАК Ссылка
		|ИЗ
		|	Справочник.НастройкиХозяйственныхОпераций КАК ХозяйственныеОперацииДоступныеДляОграниченийДоступа
		|ГДЕ
		|	ХозяйственныеОперацииДоступныеДляОграниченийДоступа.ПометкаУдаления = ЛОЖЬ
		|	И ХозяйственныеОперацииДоступныеДляОграниченийДоступа.ИспользоватьДляОграниченийДоступа = ИСТИНА";
		
		ОперацииДляПроверкиОграниченийДоступа = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		ПараметрыСеанса.ХозяйственныеОперацииСНастройкамиОграниченийДоступа = Новый ФиксированныйМассив(ОперацииДляПроверкиОграниченийДоступа);
		УстановленныеПараметры.Добавить(ИмяПараметра);
	КонецЕсли;
	
КонецПроцедуры

// Определяет настройки начального заполнения элементов
//
// Параметры:
//  Настройки - Структура - настройки заполнения:
//   * ПриНачальномЗаполненииЭлемента - Булево - Если Истина, то для каждого элемента будет
//      вызвана процедура индивидуального заполнения ПриНачальномЗаполненииЭлемента.
Процедура ПриНастройкеНачальногоЗаполненияЭлементов(Настройки) Экспорт
	
	Настройки.ПриНачальномЗаполненииЭлемента = Истина;
	
КонецПроцедуры

// Вызывается при начальном заполнении справочника.
//
// Параметры:
//  КодыЯзыков - Массив - список языков конфигурации. Актуально для мультиязычных конфигураций.
//  Элементы   - ТаблицаЗначений - данные заполнения. Состав колонок соответствует набору реквизитов справочника.
//  ТабличныеЧасти - Структура из КлючИЗначение - данные заполнения табличных частей.
//                                                Состав колонок соответствует набору реквизитов табличных частей.
Процедура ПриНачальномЗаполненииЭлементов(КодыЯзыков, Элементы, ТабличныеЧасти) Экспорт

	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

	#Область ВнеоборотныеАктивы
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "ВнеоборотныеАктивы";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внеоборотные активы'", КодыЯзыков); // @НСтр-2

		#Область АмортизацияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АмортизацияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "АмортизацияНМА";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Амортизация НМА'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АмортизацияНМАМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АмортизацияНМА

		#Область АмортизацияНМАвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АмортизацияНМАвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация НМА в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "АмортизацияНМА";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Амортизация НМА'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияНМАвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АмортизацияНМАвДругуюОрганизацию

		#Область АмортизацияНМАизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АмортизацияНМАизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация НМА из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ПрочиеРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Прочие расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияНМАизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АмортизацияНМАизДругойОрганизации

		#Область АмортизацияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АмортизацияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "АмортизацияОС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Амортизация ОС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АмортизацияОСМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АмортизацияОС

		#Область АмортизацияОСвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АмортизацияОСвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация ОС в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "АмортизацияОС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Амортизация ОС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияОСвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АмортизацияОСвДругуюОрганизацию

		#Область АмортизацияОСизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АмортизацияОСизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация ОС из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ПрочиеРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Прочие расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияОСизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АмортизацияОСизДругойОрганизации

		#Область ВводОстатковАмортизацииНМАиРасходовНаНИОКР
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковАмортизацииНМАиРасходовНаНИОКР";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков амортизации НМА и расходов на НИОКР'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "АмортизацияНМА";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Амортизация НМА'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАмортизацииНМАиРасходовНаНИОКР;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВводОстатковАмортизацииНМАиРасходовНаНИОКР

		#Область ВводОстатковАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "АмортизацияОС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Амортизация ОС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВводОстатковАмортизацииОС

		#Область ВводОстатковАрендованныхОСЗаБалансом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковАрендованныхОСЗаБалансом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков арендованных ОС (за балансом)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСЗаБалансом;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковАрендованныхОСЗаБалансом

		#Область ВводОстатковАрендованныхОСНаБалансе
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковАрендованныхОСНаБалансе";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков арендованных ОС (на балансе)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковАрендованныхОСНаБалансе

		#Область ВводОстатковВзаиморасчетовПоДоговорамАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковВзаиморасчетовПоДоговорамАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков взаиморасчетов по договорам лизинга'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВзаиморасчетовПоАренде");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковВзаиморасчетовПоДоговорамАренды

		#Область ВводОстатковИнвестицииВАренду
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковИнвестицииВАренду";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков инвестиции в аренду'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковИнвестицииВАренду;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковИнвестицииВАренду");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25";
		#КонецОбласти //ВводОстатковИнвестицииВАренду

		#Область ВводОстатковВложенийВоВнеоборотныеАктивы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковВложенийВоВнеоборотныеАктивы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков вложений во внеоборотные активы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ПрочиеРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Прочие расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВложенийВоВнеоборотныеАктивы;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковВложенийВоВнеоборотныеАктивы

		#Область ВводОстатковНМАиРасходовНаНИОКР
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковНМАиРасходовНаНИОКР";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков НМА и расходов на НИОКР'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковНМАиРасходовНаНИОКР

		#Область ВводОстатковОбесцененияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения нематериальных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //ВводОстатковОбесцененияНМА

		#Область ВводОстатковОбесцененияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //ВводОстатковОбесцененияОС

		#Область ВводОстатковОсновныхСредств
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОсновныхСредств";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОсновныхСредств;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковОсновныхСредств

		#Область ВводОстатковУзловКомпонентовАмортизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковУзловКомпонентовАмортизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков узлов и компонентов амортизации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковУзловКомпонентовАмортизации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковУзловКомпонентовАмортизации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковУзловКомпонентовАмортизации

		#Область ВводОстатковПереданныхВАрендуОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПереданныхВАрендуОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков переданных в аренду ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковПереданныхВАрендуОС

		#Область ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков переданных в аренду предметов лизинга на балансе'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе

		#Область ВводОстатковПредметовЛизингаЗаБалансом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПредметовЛизингаЗаБалансом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков предметов лизинга за балансом'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковПредметовЛизингаЗаБалансом

		#Область ВводОстатковСтоимостиНМАиРасходовНаНИОКР
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковСтоимостиНМАиРасходовНаНИОКР";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков стоимости НМА и расходов на НИОКР'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "СтоимостьНМА";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Стоимость НМА'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСтоимостиНМАиРасходовНаНИОКР;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВводОстатковСтоимостиНМАиРасходовНаНИОКР

		#Область ВводОстатковСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "СтоимостьОС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Стоимость ОС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковВнеоборотныхАктивов2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВводОстатковСтоимостиОС

		#Область ВводОстатковТМЦВЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковТМЦВЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков ТМЦ в эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТМЦВЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковТМЦВЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВводОстатковТМЦВЭксплуатации

		#Область ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод первоначальных сведений для расчета земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводПервоначальныхСведенийДляРасчетаЗемельногоНалога");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти

		#Область ВводПервоначальныхСведенийДляРасчетаНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводПервоначальныхСведенийДляРасчетаНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод первоначальных сведений для расчета налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводПервоначальныхСведенийДляРасчетаНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводПервоначальныхСведенийДляРасчетаНалогаНаИмущество");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти

		#Область ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод первоначальных сведений для расчета налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводПервоначальныхСведенийДляРасчетаТранспортногоНалога");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти

		#Область ВключениеАмортизационнойПремииВРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВключениеАмортизационнойПремииВРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Включение амортизационной премии в расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВключениеАмортизационнойПремииВРасходы;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("МодернизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВключениеАмортизационнойПремииВРасходы

		#Область УменьшениеАмортизационнойПремии
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеАмортизационнойПремии";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение амортизационной премии'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеАмортизационнойПремии;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеАмортизационнойПремии

		#Область ВозвратВыкупнойСтоимостиПредметовАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратВыкупнойСтоимостиПредметовАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат выкупной стоимости предметов аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратВыкупнойСтоимостиПредметовАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВозвратВыкупнойСтоимостиПредметовАренды

		#Область ВозвратВыкупнойСтоимостиПредметовАрендыАванс
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратВыкупнойСтоимостиПредметовАрендыАванс";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат выкупной стоимости предметов аренды (аванс)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратВыкупнойСтоимостиПредметовАрендыАванс;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВозвратВыкупнойСтоимостиПредметовАрендыАванс

		#Область ВозвратОбеспечительногоПлатежа
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОбеспечительногоПлатежа";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат обеспечительного платежа'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОбеспечительногоПлатежа;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВозвратОбеспечительногоПлатежа

		#Область ВозвратОСИзАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОСИзАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат ОС из аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОСИзАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратОСИзАренды");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратОСИзАренды2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратОСИзАренды

		#Область ВосстановлениеАмортизационнойПремии
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеАмортизационнойПремии";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление амортизационной премии'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеАмортизационнойПремии;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВосстановлениеАмортизационнойПремии

		#Область ВосстановлениеОбесцененияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеОбесцененияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление обесценения нематериальных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеОбесцененияНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОбесценениеВНА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //ВосстановлениеОбесцененияНМА

		#Область ВосстановлениеОбесцененияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеОбесцененияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление обесценения основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеОбесцененияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОбъединениеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОбесценениеВНА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //ВосстановлениеОбесцененияОС

		#Область ВыбытиеАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыбытиеАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выбытие арендованных ОС (забалансовый учет)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыбытиеАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыбытиеАрендованныхОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыбытиеАрендованныхОС

		#Область ВыделениеАмортизацииОСПриРазукомплектации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыделениеАмортизацииОСПриРазукомплектации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выделение амортизации ОС при разукомплектации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеАмортизацииОСПриРазукомплектации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РазукомплектацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыделениеАмортизацииОСПриРазукомплектации

		#Область ВыделениеСтоимостиОСПриРазукомплектации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыделениеСтоимостиОСПриРазукомплектации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выделение стоимости ОС при разукомплектации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеСтоимостиОСПриРазукомплектации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РазукомплектацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыделениеСтоимостиОСПриРазукомплектации

		#Область ВыделениеУзловКомпонентовАмортизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыделениеУзловКомпонентовАмортизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выделение узлов и компонентов амортизации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РазукомплектацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ВыделениеУзловКомпонентовАмортизации

		#Область ВыкупАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупАрендованныхОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыкупАрендованныхОС

		#Область ВыработкаНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыработкаНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выработка НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыработкаНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыработкаНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыработкаНМА

		#Область ДосрочноеПрекращениеДоговораАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДосрочноеПрекращениеДоговораАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Досрочное прекращение договора аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДосрочноеПрекращениеДоговораАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрекращениеДоговораАренды");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ДосрочноеПрекращениеДоговораАренды

		#Область ДосрочныйВыкупАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДосрочныйВыкупАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Досрочный выкуп арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДосрочныйВыкупАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупАрендованныхОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ДосрочныйВыкупАрендованныхОС

		#Область ЗавершениеЭтаповИсследованийИРазработок
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗавершениеЭтаповИсследованийИРазработок";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Завершение этапов, исследований и разработок'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗавершениеЭтаповИсследованийИРазработок;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПризнаниеРасходовПоИсследованиямИРазработкам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗавершениеЭтаповИсследованийИРазработок

		#Область ЗакрытиеРасходовОтСписанияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакрытиеРасходовОтСписанияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие расходов от списания ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтСписанияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗакрытиеРасходовОтСписанияОС

		#Область ЗакрытиеРасходовОтРеализацииОССОтложеннымПереходомПрав
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакрытиеРасходовОтРеализацииОССОтложеннымПереходомПрав";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие расходов от реализации ОС (до перехода прав)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтРеализацииОССОтложеннымПереходомПрав;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗакрытиеРасходовОтРеализацииОССОтложеннымПереходомПрав

		#Область ЗакрытиеРасходовОтРеализацииОСПослеПереходаПрав
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакрытиеРасходовОтРеализацииОСПослеПереходаПрав";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие расходов от реализации ОС (после перехода прав)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтРеализацииОСПослеПереходаПрав;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗакрытиеРасходовОтРеализацииОССОтложеннымПереходомПрав

		#Область ЗакрытиеРасходовОтРеализацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакрытиеРасходовОтРеализацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие расходов от реализации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтРеализацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗакрытиеРасходовОтРеализацииОС

		#Область ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет аванса выкупной стоимости в счет выкупной стоимости'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости

		#Область ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет обеспечительного платежа в счет выкупной стоимости'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости

		#Область ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет оплаты услуги по аренде в счет выкупной стоимости'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости

		#Область ИзлишнеНачисленныеПроцентыПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзлишнеНачисленныеПроцентыПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Излишне начисленные проценты по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзлишнеНачисленныеПроцентыПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ИзлишнеНачисленныеПроцентыПоАренде

		#Область ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение доходов будущих периодов от целевого финансирования НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияНМА

		#Область ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение доходов будущих периодов от целевого финансирования ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ИзменениеДоходовБудущихПериодовОтЦелевогоФинансированияОС

		#Область ИзменениеПараметровАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеПараметровАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение параметров амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеПараметровАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеПараметровАмортизацииНМА

		#Область ИзменениеПараметровАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеПараметровАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение параметров амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеПараметровАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратОСИзАренды2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПередачаОСВАренду2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеПараметровАмортизацииОС

		#Область ИзменениеПараметровНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеПараметровНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение параметров НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеПараметровНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровНМАМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеПараметровНМА

		#Область ИзменениеПараметровОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеПараметровОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение параметров ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеПараметровОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОСМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеПараметровОС

		#Область ИзменениеПараметровСтоимостиНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеПараметровСтоимостиНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение параметров стоимости НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеПараметровСтоимостиНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеПараметровСтоимостиНМА

		#Область ИзменениеПараметровСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеПараметровСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение параметров стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеПараметровСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратОСИзАренды2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПередачаОСВАренду2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеПараметровСтоимостиОС

		#Область ИзменениеРезерваПереоценкиСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеРезерваПереоценкиСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение резерва переоценки стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеРезерваПереоценкиСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеРезерваПереоценкиСтоимостиОС

		#Область ИзменениеСостоянияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеСостоянияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение состояния ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеСостоянияОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеСостоянияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеСостоянияОС

		#Область ИзменениеСпособаОтраженияИмущественныхНалогов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеСпособаОтраженияИмущественныхНалогов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение способа отражения имущественных налогов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеСпособаОтраженияИмущественныхНалогов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеСпособаОтраженияИмущественныхНалогов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИзменениеСпособаОтраженияИмущественныхНалогов

		#Область ИзменениеУсловийДоговораАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеУсловийДоговораАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение условий договора аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеУсловийДоговораАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеУсловийДоговораАренды");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ИзменениеУсловийДоговораАренды

		#Область ИнвентаризацияВложенийВОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризацияВложенийВОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризация вложений в ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризацияВложенийВОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнвентаризацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "РегламентированныйУчетВНА";
		#КонецОбласти //ИнвентаризацияВложенийВОС

		#Область ИнвентаризацияНезавершенногоСтроительства
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризацияНезавершенногоСтроительства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризация незавершенного строительства'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризацияНезавершенногоСтроительства;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнвентаризацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "РегламентированныйУчетВНА";
		#КонецОбласти //ИнвентаризацияНезавершенногоСтроительства

		#Область ИнвентаризацияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризацияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризация НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризацияНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнвентаризацияНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "РегламентированныйУчетВНА";
		#КонецОбласти //ИнвентаризацияНМА

		#Область ИнвентаризацияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризацияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризация ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризацияОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнвентаризацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИнвентаризацияОС

		#Область ИнвентаризацияТМЦВЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризацияТМЦВЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризация ТМЦ в эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризацияТМЦВЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнвентаризацияТМЦВЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИнвентаризацияТМЦВЭксплуатации

		#Область КорректировкаАрендныхОбязательств
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаАрендныхОбязательств";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка арендных обязательств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаАрендныхОбязательств;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //КорректировкаАрендныхОбязательств

		#Область КорректировкаОбесцененияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаОбесцененияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка обесценения нематериальных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбесцененияНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //КорректировкаОбесцененияНМА

		#Область КорректировкаОбесцененияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаОбесцененияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка обесценения основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбесцененияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //КорректировкаОбесцененияОС

		#Область КорректировкаРасходовОтВыбытияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаРасходовОтВыбытияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка расходов от выбытия ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаРасходовОтВыбытияОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //КорректировкаРасходовОтВыбытияОС

		#Область КорректировкаСтоимостиИАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаСтоимостиИАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка стоимости и амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиИАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //КорректировкаСтоимостиИАмортизацииНМА

		#Область КорректировкаСтоимостиИАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаСтоимостиИАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка стоимости и амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиИАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //КорректировкаСтоимостиИАмортизацииОС

		#Область КорректировкаСтоимостиТМЦОприходованныхПриВыбытииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаСтоимостиТМЦОприходованныхПриВыбытииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка стоимости ТМЦ оприходованных при выбытии ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаСтоимостиТМЦОприходованныхПриВыбытииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //КорректировкаСтоимостиТМЦОприходованныхПриВыбытииОС

		#Область МодернизацияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "МодернизацияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Модернизация ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.МодернизацияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("МодернизацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("МодернизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //МодернизацияОС

		#Область НачислениеНДСВЧастиВыкупнойСтоимости
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНДСВЧастиВыкупнойСтоимости";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление НДС в части выкупной стоимости'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиВыкупнойСтоимости;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НачислениеНДСВЧастиВыкупнойСтоимости

		#Область НачислениеНДСВЧастиОбеспечительногоПлатежа
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНДСВЧастиОбеспечительногоПлатежа";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление НДС в части обеспечительного платежа'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиОбеспечительногоПлатежа;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НачислениеНДСВЧастиОбеспечительногоПлатежа

		#Область НачислениеНДСВЧастиУслугиПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНДСВЧастиУслугиПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление НДС в части услуги по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиУслугиПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НачислениеНДСВЧастиУслугиПоАренде

		#Область НачислениеПроцентовПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеПроцентовПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление процентов по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеПроцентовПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеПроцентовПоАренде");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //НачислениеПроцентовПоАренде

		#Область НачислениеПроцентовПоДоходнойАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеПроцентовПоДоходнойАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление процентов по доходной аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеПроцентовПоДоходнойАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеПроцентовПоАренде");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //НачислениеПроцентовПоДоходнойАренде
		
		#Область НачислениеРеверсивногоНДС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеРеверсивногоНДС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление реверсивного НДС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеРеверсивногоНДС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеРеверсивногоНДС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеверсивноеОбложениеНДС";
		#КонецОбласти //НачислениеРеверсивногоНДС
		
		#Область НедоначисленныеПроцентыПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НедоначисленныеПроцентыПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Недоначисленные проценты по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НедоначисленныеПроцентыПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НедоначисленныеПроцентыПоАренде

		#Область ОбеспечительныйПлатеж
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОбеспечительныйПлатеж";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обеспечительный платеж'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОбеспечительныйПлатеж;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОбеспечительныйПлатеж

		#Область ОбеспечительныйПлатежПриУчетеЗаБалансом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОбеспечительныйПлатежПриУчетеЗаБалансом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обеспечительный платеж при учете за балансом'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОбеспечительныйПлатежПриУчетеЗаБалансом;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОбеспечительныйПлатежПриУчетеЗаБалансом

		#Область ОбесценениеНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОбесценениеНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обесценение нематериальных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОбесценениеНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОбесценениеВНА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //ОбесценениеНМА

		#Область ОбесценениеОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОбесценениеОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Обесценение основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОбесценениеОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОбесценениеВНА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //ОбесценениеОС

		#Область ОбъединениеОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОбъединениеОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Объединение в новое ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОбъединениеОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОбъединениеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ОбъединениеОС

		#Область ОплатаВыкупнойСтоимостиПредметовАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОплатаВыкупнойСтоимостиПредметовАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата выкупной стоимости предметов аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаВыкупнойСтоимостиПредметовАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОплатаВыкупнойСтоимостиПредметовАренды

		#Область ОплатаВыкупнойСтоимостиПредметовАрендыАванс
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОплатаВыкупнойСтоимостиПредметовАрендыАванс";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата выкупной стоимости предметов аренды (аванс)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаВыкупнойСтоимостиПредметовАрендыАванс;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОплатаВыкупнойСтоимостиПредметовАрендыАванс

		#Область ОплатаОбеспечительногоПлатежа
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОплатаОбеспечительногоПлатежа";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата обеспечительного платежа'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаОбеспечительногоПлатежа;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОплатаОбеспечительногоПлатежа

		#Область ОплатаУслугПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОплатаУслугПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата услуг по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаУслугПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОплатаУслугПоАренде

		#Область ОприходованиеТМЦВЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеТМЦВЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование ТМЦ в эксплуатацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТМЦВЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОприходованиеТМЦВЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОприходованиеТМЦВЭксплуатации

		#Область ОтражениеАрендныхОбязательствВДоходах
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеАрендныхОбязательствВДоходах";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение арендных обязательств в доходах'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеАрендныхОбязательствВДоходах;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОтражениеАрендныхОбязательствВДоходах

		#Область ОтражениеАрендныхОбязательствВРасходах
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеАрендныхОбязательствВРасходах";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение арендных обязательств в расходах'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеАрендныхОбязательствВРасходах;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОтражениеАрендныхОбязательствВРасходах

		#Область ОтражениеУслугПоАрендеВРасходах
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеУслугПоАрендеВРасходах";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение услуг по аренде в расходах'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеУслугПоАрендеВРасходах;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОтражениеУслугПоАрендеВРасходах

		#Область ПараметрыНачисленияЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПараметрыНачисленияЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Параметры начисления земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПараметрыНачисленияЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПараметрыНачисленияЗемельногоНалога");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПараметрыНачисленияЗемельногоНалога

		#Область ПараметрыНачисленияНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПараметрыНачисленияНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Параметры начисления налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПараметрыНачисленияНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПараметрыНачисленияНалогаНаИмущество");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПараметрыНачисленияНалогаНаИмущество

		#Область ПараметрыНачисленияТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПараметрыНачисленияТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Параметры начисления транспортного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПараметрыНачисленияТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПараметрыНачисленияТранспортногоНалога");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_2";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ПараметрыНачисленияТранспортногоНалога

		#Область ПереводОсновныхСредствИнвестиционногоИмущества
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПереводОсновныхСредствИнвестиционногоИмущества";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перевод основных средств и инвестиционного имущества'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереводОсновныхСредствИнвестиционногоИмущества;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереводОсновныхСредствИнвестиционногоИмуществаМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПереводОсновныхСредствИнвестиционногоИмущества

		#Область ПередачаОСВАренду
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаОСВАренду";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача ОС в аренду'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаОСВАренду;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаОСВАренду");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПередачаОСВАренду2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПередачаОСВАренду

		#Область ВыделениеНГЛС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыделениеНГЛС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выделение НГЛС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеНГЛС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаОСВАренду2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ИзменениеУсловийПередачиВАренду");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыделениеНГЛС

		#Область ВключениеНГЛСВСтоимостьЧИА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВключениеНГЛСВСтоимостьЧИА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Включение НГЛС в стоимость ЧИА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВключениеНГЛСВСтоимостьЧИА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратОСИзАренды2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВключениеНГЛСВСтоимостьЧИА
		
		#Область ИзменениеУсловийПередачиВАренду
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИзменениеУсловийПередачиВАренду";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Изменение условий передачи в аренду'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИзменениеУсловийПередачиВАренду;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
	
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеУсловийПередачиВАренду");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользуетсяПередачаВАрендуСубарендуПоФСБУ25";
		#КонецОбласти //ИзменениеУсловийПередачиВАренду

		#Область ПеремещениеАмортизацииНМАвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеАмортизацииНМАвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение амортизации НМА в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеАмортизацииНМАвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеАмортизацииНМАвДругуюОрганизацию

		#Область ПеремещениеАмортизацииНМАизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеАмортизацииНМАизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение амортизации НМА из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеАмортизацииНМАизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеАмортизацииНМАизДругойОрганизации

		#Область ПеремещениеАмортизацииОСвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеАмортизацииОСвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение амортизации ОС в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеАмортизацииОСвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеАмортизацииОСвДругуюОрганизацию

		#Область ПеремещениеАмортизацииОСизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеАмортизацииОСизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение амортизации ОС из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеАмортизацииОСизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеАмортизацииОСизДругойОрганизации

		#Область ПеремещениеНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМАМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеНМА

		#Область ПеремещениеНМАвПодразделениеВыделенноеНаБаланс
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеНМАвПодразделениеВыделенноеНаБаланс";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение НМА в подразделение, выделенное на баланс'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеНМАвПодразделениеВыделенноеНаБаланс

		#Область ПеремещениеОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОСМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеОС

		#Область ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеОСвПодразделениеВыделенноеНаБаланс";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение ОС в подразделение выделенное на баланс'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеОСвПодразделениеВыделенноеНаБаланс

		#Область ПеремещениеОСпоИнвентаризации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеОСпоИнвентаризации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение ОС по инвентаризации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСпоИнвентаризации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ПеремещениеОСпоИнвентаризации

		#Область ПеремещениеУзлов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеУзлов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение ОС-узлов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеУзлов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеУзлов

		#Область ПеремещениеСтоимостиНМАвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеСтоимостиНМАвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение стоимости НМА в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеСтоимостиНМАвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеСтоимостиНМАвДругуюОрганизацию

		#Область ПеремещениеСтоимостиНМАизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеСтоимостиНМАизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение стоимости НМА из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеСтоимостиНМАизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеСтоимостиНМАизДругойОрганизации

		#Область ПеремещениеСтоимостиОСвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеСтоимостиОСвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение стоимости ОС в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеСтоимостиОСвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеСтоимостиОСвДругуюОрганизацию

		#Область ПеремещениеСтоимостиОСизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеСтоимостиОСизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение стоимости ОС из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеСтоимостиОСизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеСтоимостиОСизДругойОрганизации

		#Область ПеремещениеРезерваПереоценкиОСвДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеРезерваПереоценкиОСвДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение резерва переоценки ОС в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеРезерваПереоценкиОСвДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеРезерваПереоценкиОСвДругуюОрганизацию

		#Область ПеремещениеРезерваПереоценкиОСизДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеРезерваПереоценкиОСизДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение резерва переоценки ОС из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеРезерваПереоценкиОСизДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеРезерваПереоценкиОСизДругойОрганизации

		#Область ПереоценкаНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПереоценкаНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПереоценкаНМА

		#Область ПереоценкаОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПереоценкаОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПереоценкаОС

		#Область ПерерасчетЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПерерасчетЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перерасчет земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПерерасчетЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПерерасчетИмущественныхНалогов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПерерасчетЗемельногоНалога

		#Область ПерерасчетИмущественныхНалогов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПерерасчетИмущественныхНалогов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перерасчет имущественных налогов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПерерасчетИмущественныхНалогов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПерерасчетИмущественныхНалогов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
		#КонецОбласти //ПерерасчетИмущественныхНалогов

		#Область ПерерасчетНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПерерасчетНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перерасчет налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПерерасчетНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПерерасчетИмущественныхНалогов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПерерасчетНалогаНаИмущество

		#Область ПерерасчетТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПерерасчетТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перерасчет транспортного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПерерасчетТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПерерасчетИмущественныхНалогов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПерерасчетТранспортногоНалога

		#Область ПодготовкаКПередачеНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПодготовкаКПередачеНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Подготовка к передаче НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПодготовкаКПередачеНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПодготовкаКПередачеНМА

		#Область ПодготовкаКПередачеОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПодготовкаКПередачеОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Подготовка к передаче ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПодготовкаКПередачеОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПодготовкаКПередачеОС

		#Область ПоступлениеАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление арендованных ОС (забалансовый учет)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеАрендованныхОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПоступлениеАрендованныхОС

		#Область ПоступлениеНДСВЧастиВыкупнойСтоимости
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеНДСВЧастиВыкупнойСтоимости";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление НДС в части выкупной стоимости'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиВыкупнойСтоимости;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПоступлениеНДСВЧастиВыкупнойСтоимости

		#Область ПоступлениеНДСВЧастиОбеспечительногоПлатежа
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеНДСВЧастиОбеспечительногоПлатежа";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление НДС в части обеспечительного платежа'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиОбеспечительногоПлатежа;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПоступлениеНДСВЧастиОбеспечительногоПлатежа

		#Область ПоступлениеНДСВЧастиУслугиПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеНДСВЧастиУслугиПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление НДС в части услуги по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиУслугиПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПоступлениеНДСВЧастиУслугиПоАренде

		#Область ЗаключениеДоговораАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗаключениеДоговораАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление предметов лизинга'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗаключениеДоговораАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаключениеДоговораАренды");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗаключениеДоговораАренды

		#Область ПрекращениеДоговораАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПрекращениеДоговораАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прекращение договора аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрекращениеДоговораАренды;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрекращениеДоговораАренды");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ПрекращениеДоговораАренды

		#Область ПризнаниеРасходовПоИсследованиям
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПризнаниеРасходовПоИсследованиям";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Признание расходов по исследованиям'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПризнаниеРасходовПоИсследованиям;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПризнаниеРасходовПоИсследованиямИРазработкам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПризнаниеРасходовПоИсследованиям

		#Область ПринятиеКУчетуНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеКУчетуНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие к учету НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуНМАМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПринятиеКУчетуНМА

		#Область ПринятиеКУчетуНМАпоИнвентаризации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеКУчетуНМАпоИнвентаризации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие к учету НМА по инвентаризации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМАпоИнвентаризации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "РегламентированныйУчетВНА";
		#КонецОбласти //ПринятиеКУчетуНМАпоИнвентаризации

		#Область ПринятиеКУчетуОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеКУчетуОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие к учету ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуОСМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПринятиеКУчетуОС

		#Область ПринятиеКУчетуОСпоИнвентаризации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеКУчетуОСпоИнвентаризации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие к учету ОС по инвентаризации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ПринятиеКУчетуОСпоИнвентаризации

		#Область ПринятиеКУчетуПредметовАренды
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеКУчетуПредметовАренды";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие к учету предметов аренды'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ПринятиеКУчетуПредметовАренды

		#Область ПринятиеКУчетуУзловКомпонентовАмортизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеКУчетуУзловКомпонентовАмортизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие к учету узлов и компонентов амортизации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуУзловКомпонентовАмортизации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПринятиеКУчетуУзловКомпонентовАмортизации

		#Область ПоступлениеУслугПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеУслугПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Приобретение услуг по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеУслугПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеУслугПоАренде");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПоступлениеУслугПоАренде

		#Область ПрисоединениеОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПрисоединениеОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Присоединение к существующему ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОбъединениеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //ПрисоединениеОС

		#Область РазукомплектацияОСПолная
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РазукомплектацияОСПолная";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Разукомплектация ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСПолная;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РазукомплектацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //РазукомплектацияОСПолная

		#Область РасходыОтСписанияАктиваСОтложеннымПереходомПрав
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РасходыОтСписанияАктиваСОтложеннымПереходомПрав";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расходы от списания актива с отложенным переходом прав'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РасходыОтСписанияАктиваСОтложеннымПереходомПрав;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //РасходыОтСписанияАктиваСОтложеннымПереходомПрав

		#Область РеализацияВнеоборотныхАктивов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияВнеоборотныхАктивов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация внеоборотных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //РеализацияВнеоборотныхАктивов

		#Область РеализацияОСсОтложеннымПереходомПрав
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияОСсОтложеннымПереходомПрав";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация ОС с отложенным переходом прав'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОСсОтложеннымПереходомПрав;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //РеализацияОСсОтложеннымПереходомПрав

		#Область РеклассификацияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеклассификацияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реклассификация обесцененных нематериальных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //РеклассификацияНМА

		#Область РеклассификацияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеклассификацияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реклассификация обесцененных основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИзменениеПараметровОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //РеклассификацияОС

		#Область СебестоимостьРеализацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СебестоимостьРеализацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Себестоимость реализации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СебестоимостьРеализацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СебестоимостьРеализацииНМА

		#Область СебестоимостьРеализацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СебестоимостьРеализацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Себестоимость реализации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СебестоимостьРеализацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СебестоимостьРеализацииОС

		#Область СнятиеСРегистрацииЗемельныхУчастков
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СнятиеСРегистрацииЗемельныхУчастков";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Снятие с регистрации земельных участков'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеСРегистрацииЗемельныхУчастков;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СнятиеСРегистрацииЗемельныхУчастков");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СнятиеСРегистрацииЗемельныхУчастков

		#Область СнятиеСРегистрацииТранспортныхСредств
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СнятиеСРегистрацииТранспортныхСредств";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Снятие с регистрации транспортных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеСРегистрацииТранспортныхСредств;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СнятиеСРегистрацииТранспортныхСредств");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СнятиеСРегистрацииТранспортныхСредств

		#Область СписаниеАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеАмортизацииНМА

		#Область СписаниеАмортизацииЦФНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеАмортизацииЦФНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание амортизации ЦФ НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеАмортизацииЦФНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеАмортизацииЦФНМА

		#Область СписаниеАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеАмортизацииОС

		#Область СписаниеЗалоговойСтоимостиАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеЗалоговойСтоимостиАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание залоговой стоимости арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеЗалоговойСтоимостиАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеЗалоговойСтоимостиАрендованныхОС

		#Область СписаниеНаРасходыНИОКР
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНаРасходыНИОКР";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы НИОКР'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "СтоимостьНМА";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Стоимость НМА'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыНИОКР;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //СписаниеНаРасходыНИОКР

		#Область СписаниеНаРасходыНИОКРВДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНаРасходыНИОКРВДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы НИОКР в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "СтоимостьНМА";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Стоимость НМА'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыНИОКРВДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //СписаниеНаРасходыНИОКРВДругуюОрганизацию

		#Область СписаниеНаРасходыНИОКРИзДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНаРасходыНИОКРИзДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы НИОКР из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ПрочиеРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Прочие расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыНИОКРИзДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //СписаниеНаРасходыНИОКРИзДругойОрганизации

		#Область СписаниеНаРасходыСтоимостиНМАНеПринимаяКУчету
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНаРасходыСтоимостиНМАНеПринимаяКУчету";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы стоимости НМА (не принимая к учету)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ПрочиеРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Прочие расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыСтоимостиНМАНеПринимаяКУчету;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеНаРасходыСтоимостиНМАНеПринимаяКУчету
		
		#Область СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы стоимости ОС (не принимая к учету)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ПрочиеРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Прочие расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПринятиеКУчетуОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеНаРасходыСтоимостиОСНеПринимаяКУчету

		#Область СписаниеНДСПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНДСПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание НДС по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНДСПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеНДСПоАренде

		#Область СписаниеНеУчитываемойСтоимостиНУ
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНеУчитываемойСтоимостиНУ";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание не учитываемой стоимости НУ'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНеУчитываемойСтоимостиНУ;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеНеУчитываемойСтоимостиНУ

		#Область СписаниеНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНМА;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеНМАМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеНМА

		#Область СписаниеОбесцененияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеОбесцененияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание обесценения нематериальных активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОбесцененияНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //СписаниеОбесцененияНМА

		#Область СписаниеОбесцененияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеОбесцененияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание обесценения основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОбесцененияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбесценениеВНА";
		#КонецОбласти //СписаниеОбесцененияОС

		#Область СписаниеОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеОСМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеОС

		#Область СписаниеОСпоИнвентаризации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеОСпоИнвентаризации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание ОС по инвентаризации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОСпоИнвентаризации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //СписаниеОСпоИнвентаризации

		#Область СписаниеПроцентовПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеПроцентовПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание процентов по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПроцентовПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеПроцентовПоАренде

		#Область СписаниеРезерваПереоценкиАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезерваПереоценкиАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резерва переоценки амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеРезерваПереоценкиАмортизацииНМА

		#Область СписаниеРезерваПереоценкиАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезерваПереоценкиАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резерва переоценки амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеРезерваПереоценкиАмортизацииОС

		#Область СписаниеРезерваПереоценкиСтоимостиНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезерваПереоценкиСтоимостиНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резерва переоценки стоимости НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиСтоимостиНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПодготовкаКПередачеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеРезерваПереоценкиСтоимостиНМА

		#Область СписаниеРезерваПереоценкиСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезерваПереоценкиСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резерва переоценки стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеРезерваПереоценкиСтоимостиОС

		#Область СписаниеСтоимостиАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеСтоимостиАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание стоимости арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеСтоимостиАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеСтоимостиАрендованныхОС

		#Область СписаниеСтоимостиНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеСтоимостиНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание стоимости НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеСтоимостиНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеСтоимостиНМА

		#Область СписаниеСтоимостиЦФНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеСтоимостиЦФНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание стоимости ЦФ НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеСтоимостиЦФНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеСтоимостиЦФНМА

		#Область СписаниеСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеСтоимостиОС

		#Область СписаниеРасхожденийПоступлениеПриобретение
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРасхожденийПоступлениеПриобретение";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание расхождений между поступлением и приобретением'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасхожденийПоступлениеПриобретение;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеРасхожденийПоступлениеПриобретение");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьНеотфактурованныеПоставки";
		#КонецОбласти //СписаниеРасхожденийПоступлениеПриобретение

		#Область СписаниеУзловКомпонентовАмортизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеУзловКомпонентовАмортизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание узлов и компонентов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеУзловКомпонентовАмортизации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеУзловКомпонентовАмортизации

		#Область СторноОбесцененияНИОКР
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияНИОКР";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения НИОКР'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияНИОКР;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияНИОКР

		#Область СторноОбесцененияНИОКРВДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияНИОКРВДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения НИОКР в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияНИОКРВДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияНИОКРВДругуюОрганизацию

		#Область СторноОбесцененияНИОКРИзДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияНИОКРИзДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения НИОКР из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияНИОКРИзДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияНИОКРИзДругойОрганизации

		#Область СторноОбесцененияНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияНМА

		#Область СторноОбесцененияНМАВДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияНМАВДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения НМА в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияНМАВДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияНМАВДругуюОрганизацию

		#Область СторноОбесцененияНМАИзДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияНМАИзДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения НМА из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияНМАИзДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияНМАИзДругойОрганизации

		#Область СторноОбесцененияОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияОС

		#Область СторноОбесцененияОСВДругуюОрганизацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияОСВДругуюОрганизацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения ОС в другую организацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияОСВДругуюОрганизацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияОСВДругуюОрганизацию

		#Область СторноОбесцененияОСИзДругойОрганизации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноОбесцененияОСИзДругойОрганизации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно обесценения ОС из другой организации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноОбесцененияОСИзДругойОрганизации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АмортизацияОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноОбесцененияОСИзДругойОрганизации

		#Область УвеличениеНакопленнойАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеНакопленнойАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение накопленной амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеНакопленнойАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеНакопленнойАмортизацииНМА

		#Область УвеличениеНакопленнойАмортизацииЦФНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеНакопленнойАмортизацииЦФНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение накопленной амортизации ЦФ НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеНакопленнойАмортизацииЦФНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеНакопленнойАмортизацииЦФНМА

		#Область УвеличениеАмортизацииНМАНаНачалоГода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеАмортизацииНМАНаНачалоГода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение амортизации НМА (на начало года)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеАмортизацииНМАНаНачалоГода;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеАмортизацииНМАНаНачалоГода

		#Область УвеличениеАмортизацииЦФНМАНаНачалоГода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеАмортизацииЦФНМАНаНачалоГода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение амортизации ЦФ НМА (на начало года)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеАмортизацииЦФНМАНаНачалоГода;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеАмортизацииЦФНМАНаНачалоГода

		#Область УвеличениеНакопленнойАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеНакопленнойАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение накопленной амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеНакопленнойАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеНакопленнойАмортизацииОС

		#Область УвеличениеАмортизацииОСНаНачалоГода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеАмортизацииОСНаНачалоГода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение амортизации ОС (на начало года)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеАмортизацииОСНаНачалоГода;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеАмортизацииОСНаНачалоГода

		#Область УвеличениеНакопленнойАмортизацииЦФОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеНакопленнойАмортизацииЦФОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение накопленной амортизации ЦФ ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеНакопленнойАмортизацииЦФОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеНакопленнойАмортизацииЦФОС

		#Область УвеличениеАмортизацииЦФОСНаНачалоГода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеАмортизацииЦФОСНаНачалоГода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение амортизации ЦФ ОС (на начало года)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеАмортизацииЦФОСНаНачалоГода;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеАмортизацииЦФОСНаНачалоГода

		#Область УвеличениеНДСПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеНДСПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение НДС по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеНДСПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //УвеличениеНДСПоАренде

		#Область УвеличениеПроцентовПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеПроцентовПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение процентов по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеПроцентовПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //УвеличениеПроцентовПоАренде

		#Область УвеличениеСтоимостиАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеСтоимостиАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение стоимости арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеСтоимостиАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //УвеличениеСтоимостиАрендованныхОС

		#Область УвеличениеСтоимостиНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеСтоимостиНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение стоимости НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеСтоимостиНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеСтоимостиНМА

		#Область УвеличениеСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УвеличениеСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УвеличениеСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УвеличениеСтоимостиОС

		#Область УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение величины дооценки накопленной амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА

		#Область УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение величины дооценки накопленной амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС

		#Область УменьшениеВеличиныДооценкиСтоимостиНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеВеличиныДооценкиСтоимостиНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение величины дооценки стоимости НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеВеличиныДооценкиСтоимостиНМА

		#Область УменьшениеВеличиныДооценкиСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеВеличиныДооценкиСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение величины дооценки стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеВеличиныДооценкиСтоимостиОС

		#Область УменьшениеНакопленнойАмортизацииНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеНакопленнойАмортизацииНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение накопленной амортизации НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеНакопленнойАмортизацииНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеНакопленнойАмортизацииНМА

		#Область УменьшениеАмортизацииНМАНаНачалоГода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеАмортизацииНМАНаНачалоГода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение амортизации НМА (на начало года)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеАмортизацииНМАНаНачалоГода;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеАмортизацииНМАНаНачалоГода

		#Область УменьшениеНакопленнойАмортизацииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеНакопленнойАмортизацииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение накопленной амортизации ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеНакопленнойАмортизацииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеНакопленнойАмортизацииОС

		#Область УменьшениеАмортизацииОСНаНачалоГода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеАмортизацииОСНаНачалоГода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение амортизации ОС (на начало года)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеАмортизацииОСНаНачалоГода;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаСтоимостиИАмортизацииОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеАмортизацииОСНаНачалоГода

		#Область УменьшениеНДСПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеНДСПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение НДС по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеНДСПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //УменьшениеНДСПоАренде

		#Область УменьшениеПроцентовПоАренде
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеПроцентовПоАренде";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение процентов по аренде'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеПроцентовПоАренде;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //УменьшениеПроцентовПоАренде

		#Область УменьшениеСтоимостиАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеСтоимостиАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение стоимости арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //УменьшениеСтоимостиАрендованныхОС

		#Область УменьшениеСтоимостиНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеСтоимостиНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение стоимости НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеСтоимостиНМА

		#Область УменьшениеСтоимостиЦФНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеСтоимостиЦФНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение стоимости ЦФ НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиЦФНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеСтоимостиЦФНМА

		#Область УменьшениеСтоимостиОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеСтоимостиОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеСтоимостиОС

		#Область УменьшениеСтоимостиЦФОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УменьшениеСтоимостиЦФОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение стоимости ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиЦФОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПереоценкаОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УменьшениеСтоимостиЦФОС

		#Область ФормированиеСтоимостиАрендованныхОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ФормированиеСтоимостиАрендованныхОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Формирование стоимости арендованных ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ФормированиеСтоимостиАрендованныхОС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ФормированиеСтоимостиАрендованныхОС

		#Область РазукомплектацияОСЧастичная
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РазукомплектацияОСЧастичная";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Частичная разукомплектация ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСЧастичная;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РазукомплектацияОС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
		#КонецОбласти //РазукомплектацияОСЧастичная

		#Область СписаниеНМАЧастичное
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНМАЧастичное";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Частичное списание НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНМАЧастичное;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНМА2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеНМАЧастичное

		#Область СписаниеОСЧастичное
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеОСЧастичное";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Частичное списание ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОСЧастичное;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеОС2_4");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеОСЧастичное

		#Область УлучшениеНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УлучшениеНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнеоборотныеАктивы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Улучшение НМА'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УлучшениеНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("УлучшениеНМА");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УлучшениеНМА

	#КонецОбласти //ВнеоборотныеАктивы

	#Область Закупки
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Закупки";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупки'", КодыЯзыков); // @НСтр-2

		#Область ВводОстатковАвансовПоставщикам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковАвансовПоставщикам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков авансов поставщикам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовПоставщикам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковАвансовПоставщикам

		#Область ВводОстатковЗадолженностиПоставщикам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковЗадолженностиПоставщикам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков задолженности поставщикам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПоставщикам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковЗадолженностиПоставщикам

		#Область ЗакупкаВСтранахЕАЭС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаВСтранахЕАЭС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввоз из ЕАЭС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаявлениеОВвозеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВвозТоваровИзТаможенногоСоюза";
		#КонецОбласти //ЗакупкаВСтранахЕАЭС

		#Область ВозвратТоваровКомитенту
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровКомитенту";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров комитенту'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриЗакупках";
		#КонецОбласти //ВозвратТоваровКомитенту

		#Область ВозвратТоваровПоставщику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровПоставщику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров поставщику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратТоваровПоставщику

		#Область ВосстановлениеАвансаПоставщику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеАвансаПоставщику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление аванса поставщику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеАвансаПоставщику;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВосстановлениеАвансаПоставщику

		#Область ВыкупПринятыхНаХранениеТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупПринятыхНаХранениеТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп товаров с хранения'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупПринятыхНаХранениеТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыкупПринятыхНаХранениеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтветственноеХранениеВПроцессеЗакупки";
		#КонецОбласти //ВыкупПринятыхНаХранениеТоваров

		#Область ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка в странах ЕАЭС (неотфактурованная поставка)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровНаСклад");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВвозТоваровИзТаможенногоСоюзаНеотфактурованныеПоставки";
		#КонецОбласти //ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка

		#Область ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка в странах ЕАЭС (поступление из товаров в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровНаСклад");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВвозТоваровИзТаможенногоСоюзаТоварыВПути";
		#КонецОбласти //ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути

		#Область ЗакупкаВСтранахЕАЭСТоварыВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаВСтранахЕАЭСТоварыВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка в странах ЕАЭС (товары в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаявлениеОВвозеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВвозТоваровИзТаможенногоСоюзаТоварыВПути";
		#КонецОбласти //ЗакупкаВСтранахЕАЭСТоварыВПути

		#Область ЗакупкаВСтранахЕАЭСФактуровкаПоставки
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаВСтранахЕАЭСФактуровкаПоставки";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка в странах ЕАЭС (фактуровка поставки)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаявлениеОВвозеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВвозТоваровИзТаможенногоСоюзаНеотфактурованныеПоставки";
		#КонецОбласти //ЗакупкаВСтранахЕАЭСФактуровкаПоставки

		#Область ЗакупкаПоИмпорту
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаПоИмпорту";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка по импорту'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияИмпорт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьИмпортныеЗакупки";
		#КонецОбласти //ЗакупкаПоИмпорту

		#Область ЗакупкаПоИмпортуПоступлениеИзТоваровВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаПоИмпортуПоступлениеИзТоваровВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка по импорту (поступление из товаров в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровНаСклад");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьИмпортныеЗакупкиТоваровВПути";
		#КонецОбласти //ЗакупкаПоИмпортуПоступлениеИзТоваровВПути

		#Область ЗакупкаПоИмпортуТоварыВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаПоИмпортуТоварыВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка по импорту (товары в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияИмпорт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьИмпортныеЗакупкиТоваровВПути";
		#КонецОбласти //ЗакупкаПоИмпортуТоварыВПути

		#Область ЗакупкаУПоставщикаРеглУчет
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаУПоставщикаРеглУчет";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка по регл. учету'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправленческуюОрганизацию";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриЗакупках";
		#КонецОбласти //ЗакупкаУПоставщикаРеглУчет

		#Область ЗакупкаУПоставщика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаУПоставщика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка у поставщика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОператораСистемыПлатон");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗакупкаУПоставщика

		#Область ЗакупкаУПоставщикаНеотфактурованнаяПоставка
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаУПоставщикаНеотфактурованнаяПоставка";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка у поставщика (неотфактурованная поставка)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровНаСклад");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПоступлениеУслугВПодразделение");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьНеотфактурованныеПоставки";
		#КонецОбласти //ЗакупкаУПоставщикаНеотфактурованнаяПоставка

		#Область ЗакупкаУПоставщикаПоступлениеИзТоваровВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаУПоставщикаПоступлениеИзТоваровВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка у поставщика (поступление из товаров в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровНаСклад");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьТоварыВПутиОтПоставщиков";
		#КонецОбласти //ЗакупкаУПоставщикаПоступлениеИзТоваровВПути

		#Область ЗакупкаУПоставщикаТоварыВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаУПоставщикаТоварыВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка у поставщика (товары в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьТоварыВПутиОтПоставщиков";
		#КонецОбласти //ЗакупкаУПоставщикаТоварыВПути

		#Область ЗакупкаУПоставщикаФактуровкаПоставки
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаУПоставщикаФактуровкаПоставки";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка у поставщика (фактуровка поставки)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьНеотфактурованныеПоставки";
		#КонецОбласти //ЗакупкаУПоставщикаФактуровкаПоставки

		#Область ЗакупкаЧерезПодотчетноеЛицо
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗакупкаЧерезПодотчетноеЛицо";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка через подотчетное лицо'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнойДокументПодтвержденияНДС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗакупкаЧерезПодотчетноеЛицо

		#Область ЗаписьКнигиПокупок
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗаписьКнигиПокупок";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Запись книги покупок'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗаписьКнигиПокупок;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаписьКнигиПокупок");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьОтчетностьПоНДС";
		#КонецОбласти //ЗаписьКнигиПокупок

		#Область ЗачетАвансаПоставщику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетАвансаПоставщику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет аванса поставщику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСПоставщикамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с поставщиками по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетАвансаПоставщику;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //ЗачетАвансаПоставщику

		#Область ЗачетВознагражденияАвансомКомитенту
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетВознагражденияАвансомКомитенту";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет вознаграждения в счет аванса комитенту'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСПоставщикамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с поставщиками по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияАвансомКомитенту;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомитенту");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗачетВознагражденияАвансомКомитенту

		#Область ЗачетВознагражденияОплатойКомитенту
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетВознагражденияОплатойКомитенту";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет вознаграждения оплатой комитенту'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСПоставщикамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с поставщиками по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомитенту;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомитенту");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗачетВознагражденияОплатойКомитенту

		#Область КорректировкаПриобретенияПрошлогоПериода
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаПриобретенияПрошлогоПериода";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка приобретения прошлого периода'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПриобретенияПрошлогоПериода;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКорректировкиПриобретений";
		#КонецОбласти //КорректировкаПриобретенияПрошлогоПериода

		#Область КорректировкаПриобретенияСОтражениемНаПрочихДоходах
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаПриобретенияСОтражениемНаПрочихДоходах";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка приобретения с отражением на прочих доходах'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПриобретенияСОтражениемНаПрочихДоходах;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКорректировкиПриобретений";
		#КонецОбласти //КорректировкаПриобретенияСОтражениемНаПрочихДоходах

		#Область КорректировкаПриобретенияСоСписаниемНаРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаПриобретенияСоСписаниемНаРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка приобретения со списанием на расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПриобретенияСоСписаниемНаРасходы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКорректировкиПриобретений";
		#КонецОбласти //КорректировкаПриобретенияСоСписаниемНаРасходы

		#Область ОтгрузкаПринятыхСПравомПродажиТоваровСХранения
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтгрузкаПринятыхСПравомПродажиТоваровСХранения";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отгрузка принятых с правом продажи товаров с хранения'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтгрузкаПринятыхСПравомПродажиТоваровСХранения;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтгрузкаТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтветственноеХранениеВПроцессеЗакупки";
		#КонецОбласти //ОтгрузкаПринятыхСПравомПродажиТоваровСХранения

		#Область ОтражениеЗадолженностиПередКомитентом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеЗадолженностиПередКомитентом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение задолженности перед комитентом'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеЗадолженностиПередКомитентом;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомитенту");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетКомитентуОСписании");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеЗадолженностиПередКомитентом

		#Область ОтражениеИзлишковНаДоходыПриПоступленииТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеИзлишковНаДоходыПриПоступленииТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение излишков на доходы при поступлении товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеИзлишковНаДоходыПриПоступленииТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеИзлишковНаДоходыПриПоступленииТоваров

		#Область ОтражениеНедостачЗаСчетПоставщикаПриПоступленииТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеНедостачЗаСчетПоставщикаПриПоступленииТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение недостач за счет поставщика при поступлении товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачЗаСчетПоставщикаПриПоступленииТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеНедостачЗаСчетПоставщикаПриПоступленииТоваров

		#Область ОтражениеНедостачЗаСчетСтороннейКомпанииПриПоступленииТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеНедостачЗаСчетСтороннейКомпанииПриПоступленииТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение недостач за счет сторонней компании при поступлении товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачЗаСчетСтороннейКомпанииПриПоступленииТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеНедостачЗаСчетСтороннейКомпанииПриПоступленииТоваров

		#Область ОтражениеНедостачНаРасходыПриПоступленииТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеНедостачНаРасходыПриПоступленииТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение недостач на расходы при поступлении товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачНаРасходыПриПоступленииТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеНедостачНаРасходыПриПоступленииТоваров

		#Область ОтчетКомиссионераОСписании
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетКомиссионераОСписании";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет комиссионера о списании'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомиссионераОСписании");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтчетКомиссионераОСписании

		#Область ОтчетКомитенту
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетКомитенту";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет комитенту'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитенту;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураКомитента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетКомитенту");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриЗакупках";
		#КонецОбласти //ОтчетКомитенту

		#Область ОтчетКомитентуКомиссия
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетКомитентуКомиссия";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет комитенту (комиссионное вознаграждение)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуКомиссия;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //ОтчетКомитентуКомиссия

		#Область ОтчетКомитентуОСписании
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетКомитентуОСписании";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет комитенту о списании'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОтчетКомитентуОСписании

		#Область ОформлениеГТДБрокером
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОформлениеГТДБрокером";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оформление ГТД через брокера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДБрокером;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияИмпорт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОформлениеГТДБрокером

		#Область ПереносПретензииНаАвансы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПереносПретензииНаАвансы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перенос претензии на авансы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСПоставщикамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с поставщиками по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПретензииНаАвансы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //ПереносПретензииНаАвансы

		#Область ПереносПретензииНаРасчеты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПереносПретензииНаРасчеты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перенос претензии на расчеты'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСПоставщикамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с поставщиками по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПретензииНаРасчеты;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПереносПретензииНаРасчеты

		#Область ПланированиеПоЗаказуПоставщику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПланированиеПоЗаказуПоставщику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Планирование по заказу поставщику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуПоставщику;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПланированиеПоЗаказуПоставщику

		#Область ПогашениеЗадолженностиПоставщику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПогашениеЗадолженностиПоставщику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Погашение задолженности поставщику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиПоставщику;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПогашениеЗадолженностиПоставщику

		#Область ПоступлениеУслуг
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеУслуг";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление услуг'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеУслуг;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаТоваровМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПоступлениеУслуг

		#Область ПоступлениеУслугРеглУчет
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеУслугРеглУчет";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление услуг (закупка по регл.)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеУслугРеглУчет;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправленческуюОрганизацию";
		#КонецОбласти //ПоступлениеУслугРеглУчет

		#Область ПриемНаКомиссию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПриемНаКомиссию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прием на комиссию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПередачаТоваровМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриЗакупках";
		#КонецОбласти //ПриемНаКомиссию

		#Область ПриемНаХранениеСПравомПродажи
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПриемНаХранениеСПравомПродажи";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прием на хранение с правом продажи'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриемкаТоваровНаХранение");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтветственноеХранениеВПроцессеЗакупки";
		#КонецОбласти //ПриемНаХранениеСПравомПродажи

		#Область РасходыНаТаможенныеСборыШтрафы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РасходыНаТаможенныеСборыШтрафы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расходы на таможенные сборы (штрафы)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РасходыНаТаможенныеСборыШтрафы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияИмпорт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РасходыНаТаможенныеСборыШтрафы

		#Область ОформлениеГТДСамостоятельно
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОформлениеГТДСамостоятельно";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Самостоятельное оформление ГТД'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеГТДСамостоятельно;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияИмпорт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОформлениеГТДСамостоятельно

		#Область СписаниеПринятыхТоваровЗаСчетПоклажедателя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеПринятыхТоваровЗаСчетПоклажедателя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание принятых товаров за счет поклажедателя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровЗаСчетПоклажедателя;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтветственноеХранениеВПроцессеЗакупки";
		#КонецОбласти //СписаниеПринятыхТоваровЗаСчетПоклажедателя

		#Область СписаниеПринятыхТоваровНаРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеПринятыхТоваровНаРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание принятых товаров на расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтветственноеХранениеВПроцессеЗакупки";
		#КонецОбласти //СписаниеПринятыхТоваровНаРасходы

		#Область СторноПоступления
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноПоступления";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно поступления'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПоступления;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //СторноПоступления

		#Область КорректировкаПриобретенияУвеличениеЗадолженностиСводно
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаПриобретенияУвеличениеЗадолженностиСводно";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение задолженности (сводно)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПриобретенияУвеличениеЗадолженностиСводно;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению";
		#КонецОбласти //КорректировкаПриобретенияУвеличениеЗадолженностиСводно

		#Область УдержаниеВознагражденияКомитентом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УдержаниеВознагражденияКомитентом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удержание вознаграждения комитентом'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомитентом;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //УдержаниеВознагражденияКомитентом

		#Область КорректировкаПриобретенияУменьшениеЗадолженностиСводно
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаПриобретенияУменьшениеЗадолженностиСводно";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Закупки;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение задолженности (сводно)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПриобретенияУменьшениеЗадолженностиСводно;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоПриобретению";
		#КонецОбласти //КорректировкаПриобретенияУменьшениеЗадолженностиСводно

	#КонецОбласти //Закупки

	#Область Зарплата
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Зарплата";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зарплата'", КодыЯзыков); // @НСтр-2

		#Область ВыдачаЗаймаСотруднику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыдачаЗаймаСотруднику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача займа сотруднику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыдачаЗаймаСотруднику

		#Область НачислениеВознагражденияЗаСчетРезервов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеВознагражденияЗаСчетРезервов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление вознаграждения за счет резервов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеВознагражденияЗаСчетРезервов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеВознагражденияЗаСчетРезервов

		#Область НачислениеЗаработнойПлаты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеЗаработнойПлаты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление зарплаты'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеЗаработнойПлаты;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НачислениеЗаработнойПлаты

		#Область НачислениеОценочныхОбязательствПоОтпускам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеОценочныхОбязательствПоОтпускам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление оценочных обязательств по отпускам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеОценочныхОбязательствПоОтпускам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеОценочныхОбязательствПоОтпускам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРасчетРезервовОтпусков";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "НеИспользоватьНачислениеЗарплатыУП";
		#КонецОбласти //НачислениеОценочныхОбязательствПоОтпускам

		#Область НачислениеРезервовПоВознаграждениям
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеРезервовПоВознаграждениям";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление резервов по вознаграждениям'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = НСтр("ru = 'Начисление резервов по вознаграждениям'", КодОсновногоЯзыка);
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеРезервовПоВознаграждениям;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеОценочныхОбязательствПоОтпускам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеРезервовПоВознаграждениям

		#Область НачислениеРезервовПоСтраховымВзносам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеРезервовПоСтраховымВзносам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление резервов по страховым взносам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = НСтр("ru = 'Начисление резервов по вознаграждениям'", КодОсновногоЯзыка);
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеРезервовПоСтраховымВзносам;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеОценочныхОбязательствПоОтпускам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеРезервовПоСтраховымВзносам

		#Область ОтражениеЗаработнойПлаты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеЗаработнойПлаты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение заработной платы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеЗаработнойПлаты;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеЗаработнойПлаты

		#Область ОтражениеНалоговВзносовСЗаработнойПлаты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеНалоговВзносовСЗаработнойПлаты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение налогов взносов с заработной платы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНалоговВзносовСЗаработнойПлаты;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеНалоговВзносовСЗаработнойПлаты

		#Область ОтражениеНалоговВзносовСоСдельнойЗаработнойПлаты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеНалоговВзносовСоСдельнойЗаработнойПлаты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение налогов взносов со сдельной заработной платы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНалоговВзносовСоСдельнойЗаработнойПлаты;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеНалоговВзносовСоСдельнойЗаработнойПлаты

		#Область ОтражениеНДФЛ
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеНДФЛ";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение НДФЛ'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНДФЛ;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеНДФЛ

		#Область ОтражениеСдельнойЗаработнойПлаты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеСдельнойЗаработнойПлаты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение сдельной заработной платы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеСдельнойЗаработнойПлаты;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтражениеСдельнойЗаработнойПлаты

		#Область ПогашениеЗаймаСотрудником
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПогашениеЗаймаСотрудником";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Погашение займа сотрудником'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗаймаСотрудником;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПогашениеЗаймаСотрудником

		#Область СписаниеРезервовПоВознаграждениям
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезервовПоВознаграждениям";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резервов по вознаграждениям'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = НСтр("ru = 'Списание резервов по вознаграждениям'", КодОсновногоЯзыка);
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезервовПоВознаграждениям;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеОценочныхОбязательствПоОтпускам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеРезервовПоВознаграждениям

		#Область СписаниеРезервовПоСтраховымВзносам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезервовПоСтраховымВзносам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резервов по страховым взносам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = НСтр("ru = 'Списание резервов по вознаграждениям'", КодОсновногоЯзыка);
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезервовПоСтраховымВзносам;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеОценочныхОбязательствПоОтпускам");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеРезервовПоСтраховымВзносам

		#Область УдержаниеНеизрасходованныхПодотчетныхСумм
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УдержаниеНеизрасходованныхПодотчетныхСумм";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Зарплата;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удержание неизрасходованных подотчетных сумм'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеНеизрасходованныхПодотчетныхСумм;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УдержаниеНеизрасходованныхПодотчетныхСумм

	#КонецОбласти //Зарплата

	#Область ПередачаВПереработку
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "ПередачаВПереработку";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача в переработку'", КодыЯзыков); // @НСтр-2
		
		#Область ВводОстатковМатериаловПереданныхПереработчикам2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковМатериаловПереданныхПереработчикам2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков материалов, переданных переработчикам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхПереработчикам2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ВводОстатковМатериаловПереданныхПереработчикам2_5

		//++ Устарело_Переработка24
		#Область ВводОстатковМатериаловПереданныхПереработчикам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковМатериаловПереданныхПереработчикам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков материалов, переданных переработчикам (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхПереработчикам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровПоставщику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВводОстатковМатериаловПереданныхПереработчикам
		//-- Устарело_Переработка24
		
		#Область ВводОстатковОбесцененияМатериаловПереданныхПереработчикам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияМатериаловПереданныхПереработчикам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения материалов переданных переработчикам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияМатериаловПереданныхПереработчикам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковОбесцененияМатериаловПереданныхПереработчикам

		#Область ВозвратОтПереработчика2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОтПереработчика2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат от переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика2_5;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровОтХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ВозвратОтПереработчика2_5

		//++ Устарело_Переработка24
		#Область ВозвратОтПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОтПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат от переработчика (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратСырьяОтПереработчика");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне";
		#КонецОбласти //ВозвратОтПереработчика
		//-- Устарело_Переработка24

		#Область ВыкупТоваровПереработчиком
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупТоваровПереработчиком";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп товаров переработчиком'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровПереработчиком;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупТоваровХранителем");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ВыкупТоваровПереработчиком

		#Область КорректировкаОтчетаПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаОтчетаПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка отчета переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОтчетаПереработчика;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКорректировкиПриобретений";
		#КонецОбласти //КорректировкаОтчетаПереработчика

		#Область ПередачаПереработчику2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаПереработчику2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача переработчику'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику2_5;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаТоваровХранителю");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ПередачаПереработчику2_5

		//++ Устарело_Переработка24
		#Область ПередачаПереработчику
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаПереработчику";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача переработчику (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаСырьяПереработчику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне";
		#КонецОбласти //ПередачаПереработчику
		//-- Устарело_Переработка24

		#Область ПересортицаТоваровУПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПересортицаТоваровУПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Пересортица товаров у переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровУПереработчика;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПересортицаТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ПересортицаТоваровУПереработчика

		#Область ПорчаТоваровУПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПорчаТоваровУПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Порча товаров у переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровУПереработчика;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПорчаТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПорчуТоваровУХранителей";
		#КонецОбласти //ПорчаТоваровУПереработчика

		#Область ПоступлениеОтПереработчика2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеОтПереработчика2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление от переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика2_5;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровОтХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ПоступлениеОтПереработчика2_5

		//++ Устарело_Переработка24
		#Область ПоступлениеОтПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеОтПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление от переработчика (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеОтПереработчика");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне";
		#КонецОбласти //ПоступлениеОтПереработчика
		//-- Устарело_Переработка24

		#Область ПоступлениеОтПереработчикаФиксированнаяСтоимость
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеОтПереработчикаФиксированнаяСтоимость";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление от переработчика фиксированная стоимость'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчикаФиксированнаяСтоимость;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПоступлениеОтПереработчикаФиксированнаяСтоимость

		#Область ПроизводствоУПереработчика2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПроизводствоУПереработчика2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Производство у переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика2_5;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказПереработчику2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПереработчика2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //ПроизводствоУПереработчика2_5
		
		#Область ПроизводствоУПереработчикаВСтранахЕАЭС2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПроизводствоУПереработчикаВСтранахЕАЭС2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Производство у переработчика (в странах ЕАЭС)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчикаВСтранахЕАЭС2_5;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетПереработчика2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		
		Документ = Метаданные.Документы.Найти("ЗаказПереработчику2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВвозТоваровИзТаможенногоСоюза";
		#КонецОбласти //ПроизводствоУПереработчикаВСтранахЕАЭС2_5

		//++ Устарело_Переработка24
		#Область ПроизводствоУПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПроизводствоУПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Производство у переработчика (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоУПереработчика;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказПереработчику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПереработчика");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне";
		#КонецОбласти //ПроизводствоУПереработчика
		//-- Устарело_Переработка24

		#Область СписаниеТоваровУПереработчика
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеТоваровУПереработчика";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПередачаВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров у переработчика'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровУПереработчика;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		#КонецОбласти //СписаниеТоваровУПереработчика

	#КонецОбласти //ПередачаВПереработку
	
	#Область Продажи
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Продажи";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Продажи'", КодыЯзыков); // @НСтр-2

		#Область АннулированиеПодарочныхСертификатов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АннулированиеПодарочныхСертификатов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Аннулирование подарочных сертификатов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АннулированиеПодарочныхСертификатов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АннулированиеПодарочныхСертификатов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АннулированиеПодарочныхСертификатов

		#Область ВводОстатковАвансовКлиентов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковАвансовКлиентов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков авансов клиентов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАвансовКлиентов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковАвансовКлиентов

		#Область ВводОстатковВозвратнойТарыПереданнойКлиентам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковВозвратнойТарыПереданнойКлиентам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков возвратной тары переданной клиентам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПереданнойКлиентам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковВозвратнойТарыПереданнойКлиентам

		#Область ВводОстатковЗадолженностиКлиентов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковЗадолженностиКлиентов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков задолженности клиентов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиКлиентов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковЗадолженностиКлиентов

		#Область ВводОстатковПремийКлиентам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПремийКлиентам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков премий клиентам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПремийКлиентам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРетроБонусыКлиентов";
		#КонецОбласти //ВводОстатковПремийКлиентам
		
		#Область ВводОстатковОбесцененияТоваровПереданныхНаКомиссию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияТоваровПереданныхНаКомиссию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения товаров, переданных на комиссию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияТоваровПереданныхНаКомиссию;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковОбесцененияТоваровПереданныхНаКомиссию

		#Область ВводОстатковОбесцененияТоваровПереданныхНаОтветственноеХранение
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияТоваровПереданныхНаОтветственноеХранение";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения товаров, переданных на ответственное хранение'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияТоваровПереданныхНаОтветственноеХранение;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковОбесцененияТоваровПереданныхНаОтветственноеХранение

		#Область ВводОстатковТоваровПереданныхНаКомиссию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковТоваровПереданныхНаКомиссию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		Постфикс = КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии20();
		ПредставлениеОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = 'Ввод остатков товаров, переданных на комиссию (%1)'", Постфикс); // @НСтр-1
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", ПредставлениеОперации, КодыЯзыков);
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковТоваровПереданныхНаКомиссию

		#Область ВводОстатковТоваровПолученныхНаКомиссию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковТоваровПолученныхНаКомиссию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков товаров, полученных на комиссию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПолученныхНаКомиссию;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковТоваровПолученныхНаКомиссию

		#Область ВводОстатковТоваровПереданныхНаКомиссию2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковТоваровПереданныхНаКомиссию2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		Постфикс = КомиссионнаяТорговляСервер.ПостфиксСхемыКомиссии25();
		ПредставлениеОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = 'Ввод остатков товаров, переданных на комиссию (%1)'", Постфикс); // @НСтр-1
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", ПредставлениеОперации, КодыЯзыков);
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаКомиссию2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковТоваровПереданныхНаКомиссию2_5

		#Область ВводОстатковТоваровПереданныхНаОтветственноеХранение
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковТоваровПереданныхНаОтветственноеХранение";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков товаров, переданных ответственное на хранение'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПереданныхНаОтветственноеХранение;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковТоваровПереданныхНаОтветственноеХранение

		#Область ВводОстатковТоваровПринятыхНаОтветственноеХранение
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковТоваровПринятыхНаОтветственноеХранение";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков товаров, принятых на ответственное хранение'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковТоваровПринятыхНаОтветственноеХранение;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковТоваровПринятыхНаОтветственноеХранение

		#Область ВозвратДеньВДень
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратДеньВДень";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат день в день'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДеньВДень;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВозвратДеньВДень

		#Область ВозвратНедопоставленногоТовара
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратНедопоставленногоТовара";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат недопоставленного товара'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНедопоставленногоТовара;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратНедопоставленногоТовара

		#Область ВозвратОтКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОтКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат от комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаявкаНаВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровОтХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //ВозвратОтКомиссионера

		#Область ВозвратОтРозничногоПокупателя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОтРозничногоПокупателя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат от розничного покупателя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОРозничныхВозвратах");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаявкаНаВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРозничныеПродажи";
		#КонецОбласти //ВозвратОтРозничногоПокупателя

		#Область ВозвратОтХранителя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратОтХранителя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат от хранителя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеТоваровОтХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаявкаНаВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //ВозвратОтХранителя

		#Область ВозвратПодарочныхСертификатов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратПодарочныхСертификатов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат подарочных сертификатов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПодарочныхСертификатов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратПодарочныхСертификатов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратПодарочныхСертификатов

		#Область ВозвратТарыОтКлиентаПрошлыхПериодов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТарыОтКлиентаПрошлыхПериодов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат тары от клиента прошлых периодов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТарыОтКлиентаПрошлыхПериодов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВозвратТарыОтКлиентаПрошлыхПериодов

		#Область ВозвратТоваровОтКлиента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровОтКлиента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров от клиента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаявкаНаВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратТоваровОтКлиента

		#Область ВозвратТоваровОтКлиентаПрошлыхПериодов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровОтКлиентаПрошлыхПериодов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров от клиента прошлых периодов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратТоваровОтКлиентаПрошлыхПериодов

		#Область ВозвратТоваровЧерезКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровЧерезКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров через комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //ВозвратТоваровЧерезКомиссионера

		#Область ВозвратТоваровЧерезКомиссионераПрошлыхПериодов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровЧерезКомиссионераПрошлыхПериодов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров через комиссионера прошлых периодов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровЧерезКомиссионераПрошлыхПериодов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //ВозвратТоваровЧерезКомиссионераПрошлыхПериодов

		#Область ВосстановлениеАвансаКлиента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеАвансаКлиента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление аванса клиента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСКлиентамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с клиентами по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеАвансаКлиента;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВосстановлениеАвансаКлиента

		#Область ВыкупВозвратнойТарыКлиентом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупВозвратнойТарыКлиентом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп возвратной тары клиентом'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупВозвратнойТарыКлиентом;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупВозвратнойТарыКлиентом");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВыкупВозвратнойТарыКлиентом

		#Область ВыкупТоваровХранителем
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупТоваровХранителем";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп товаров хранителем'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровХранителем;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупТоваровХранителем");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //ВыкупТоваровХранителем

		#Область ВыкупТоваровПереданныхНаХранение
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупТоваровПереданныхНаХранение";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп товаров, переданных на хранение'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровПереданныхНаХранение;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупТоваровХранителем");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоНаСтороне2_5";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //ВыкупТоваровПереданныхНаХранение

		#Область ДоходыПоОтчетуКомиссионераОСписании
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДоходыПоОтчетуКомиссионераОСписании";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доходы по отчету комиссионера о списании'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДоходыПоОтчетуКомиссионераОСписании;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомиссионераОСписании");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ДоходыПоОтчетуКомиссионераОСписании

		#Область ЗачетАвансаКлиента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетАвансаКлиента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет аванса клиента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСКлиентамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с клиентами по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетАвансаКлиента;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //ЗачетАвансаКлиента

		#Область ЗачетВознагражденияАвансомКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетВознагражденияАвансомКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет вознаграждения в счет аванса комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСКлиентамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с клиентами по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияАвансомКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомиссионера");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗачетВознагражденияАвансомКомиссионера

		#Область ЗачетВознагражденияОплатойКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетВознагражденияОплатойКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет вознаграждения оплатой комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "РасчетыСКлиентамиПоСрокам";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Расчеты с клиентами по срокам'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетВознагражденияОплатойКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ЗачетВознагражденияОплатойКомиссионера

		#Область ИсправлениеОшибок
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИсправлениеОшибок";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Исправление ошибок'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеОшибок;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИсправлениеОшибок

		#Область КорректировкаЗадолженности
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаЗадолженности";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка задолженности'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаЗадолженности;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //КорректировкаЗадолженности

		#Область КорректировкаОбособленногоУчета
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаОбособленногоУчета";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка обособленного учета'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаНазначенияТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //КорректировкаОбособленногоУчета

		#Область КорректировкаПоСогласованиюСторон
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаПоСогласованиюСторон";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка по согласованию сторон'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //КорректировкаПоСогласованиюСторон

		#Область КорректировкаРеализацииСОтражениемНаПрочихДоходах
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаРеализацииСОтражениемНаПрочихДоходах";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка реализации с отражением на прочих доходах'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаРеализацииСОтражениемНаПрочихДоходах;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКорректировкиРеализаций";
		#КонецОбласти //КорректировкаРеализацииСОтражениемНаПрочихДоходах

		#Область КорректировкаРеализацииСоСписаниемНаРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаРеализацииСоСписаниемНаРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка реализации со списанием на расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаРеализацииСоСписаниемНаРасходы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКорректировкиРеализаций";
		#КонецОбласти //КорректировкаРеализацииСоСписаниемНаРасходы

		#Область ОказаниеАгентскихУслуг
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОказаниеАгентскихУслуг";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оказание агентских услуг'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОказаниеАгентскихУслуг;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОказаниеАгентскихУслуг

		#Область ОприходованиеИзлишковТоваровВПользуКомитента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеИзлишковТоваровВПользуКомитента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование излишков в пользу комитента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеИзлишковТоваровВПользуКомитента;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОприходованиеИзлишковТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //ОприходованиеИзлишковТоваровВПользуКомитента

		#Область ОприходованиеИзлишковТоваровВПользуПоклажедателя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеИзлишковТоваровВПользуПоклажедателя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование излишков в пользу поклажедателя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеИзлишковТоваровВПользуПоклажедателя;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОприходованиеИзлишковТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //ОприходованиеИзлишковТоваровВПользуПоклажедателя

		#Область ОприходованиеПоВозврату
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеПоВозврату";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование по возврату'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОприходованиеПоВозврату

		#Область ОтгрузкаБезПереходаПраваСобственности
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтгрузкаБезПереходаПраваСобственности";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отгрузка (товары в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтгрузкаБезПереходаПраваСобственности;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтгрузкаБезПереходаПраваСобственности
		
		#Область ОтражениеПремииКлиентаРетроБонус
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеПремииКлиентаРетроБонус";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение премии клиента (ретро-бонус)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеПремииКлиентаРетроБонус;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктПремииКлиенту");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		
		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРетроБонусыКлиентов";
		#КонецОбласти //ОтражениеПремииКлиентаРетроБонус
		
		#Область ОтчетКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураКомиссионеру");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетКомиссионера");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //ОтчетКомиссионера

		#Область ОтчетКомиссионераКомиссия
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетКомиссионераКомиссия";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет комиссионера (комиссионное вознаграждение)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераКомиссия;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомиссионера");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОтчетКомиссионераКомиссия

		#Область ОтчетПринципалуОЗакупках
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетПринципалуОЗакупках";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет о закупке товаров и услуг под принципалов / комитентов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПринципалуОЗакупках;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомитентуОЗакупках");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОказаниеАгентскихУслугПриЗакупке";
		#КонецОбласти //ОтчетПринципалуОЗакупках

		#Область ОтчетПринципалуОЗакупкахКомиссия
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетПринципалуОЗакупкахКомиссия";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет принципалу о закупках (комиссионное вознаграждение)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПринципалуОЗакупкахКомиссия;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОтчетПринципалуОЗакупкахКомиссия

		#Область ОформлениеТаможеннойДекларацииЭкспорт
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОформлениеТаможеннойДекларацииЭкспорт";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оформление таможенной декларации на экспорт'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОформлениеТаможеннойДекларацииЭкспорт;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияЭкспорт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ВестиУчетТаможенныхДекларацийНаЭкспорт";
		#КонецОбласти //ОформлениеТаможеннойДекларацииЭкспорт

		#Область ПередачаНаКомиссию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаНаКомиссию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача на комиссию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПередачаТоваровХранителю");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //ПередачаНаКомиссию

		#Область ПередачаНаХранениеСПравомПродажи
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаНаХранениеСПравомПродажи";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача на хранение с правом продажи'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаТоваровХранителю");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //ПередачаНаХранениеСПравомПродажи

		#Область ПересортицаТоваровУХранителя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПересортицаТоваровУХранителя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Пересортица товаров у хранителя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровУХранителя;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПересортицаТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //ПересортицаТоваровУХранителя

		#Область ПланированиеПоЗаказуКлиента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПланированиеПоЗаказуКлиента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Планирование по заказу клиента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПланированиеПоЗаказуКлиента;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПланированиеПоЗаказуКлиента

		#Область ПогашениеЗадолженностиКлиента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПогашениеЗадолженностиКлиента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Погашение задолженности клиента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеЗадолженностиКлиента;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПогашениеЗадолженностиКлиента

		#Область ПорчаТоваровУХранителя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПорчаТоваровУХранителя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Порча товаров у хранителя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровУХранителя;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПорчаТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПорчуТоваровУХранителей";
		#КонецОбласти //ПорчаТоваровУХранителя

		#Область ПоставкаПодПринципала
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоставкаПодПринципала";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поставка товаров и услуг под принципалов / комитентов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетКомитентуОЗакупках");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтгрузкаТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОказаниеАгентскихУслугПриЗакупке";
		#КонецОбласти //ПоставкаПодПринципала

	#Область ПриемВПереработку
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "ПриемВПереработку";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прием в переработку'", КодыЯзыков); // @НСтр-2

		//++ Устарело_Переработка24
		#Область ВозвратДавальцу
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратДавальцу";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат давальцу (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДавальцу;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратСырьяДавальцу");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		#КонецОбласти //ВозвратДавальцу

		#Область ОтчетДавальцу
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетДавальцу";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет давальцу (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцу;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетДавальцу");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		#КонецОбласти //ОтчетДавальцу

		#Область ПроизводствоИзДавальческогоСырья
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПроизводствоИзДавальческогоСырья";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Производство из давальческого сырья (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказДавальца");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		#КонецОбласти //ПроизводствоИзДавальческогоСырья

		#Область ПередачаДавальцу
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаДавальцу";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача давальцу (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаДавальцу;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПередачаДавальцу");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		#КонецОбласти //ПередачаДавальцу

		#Область ПоступлениеОтДавальца
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеОтДавальца";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление от давальца (2.4)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПоступлениеСырьяОтДавальца");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья";
		#КонецОбласти //ПоступлениеОтДавальца
		//-- Устарело_Переработка24
		
		#Область ВводОстатковМатериаловПринятыхВПереработку2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковМатериаловПринятыхВПереработку2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков материалов, принятых в переработку'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПринятыхВПереработку2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ВводОстатковМатериаловПринятыхВПереработку2_5

		#Область ВводОстатковПолуфабрикатовДавальца2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПолуфабрикатовДавальца2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков полуфабрикатов давальца'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПолуфабрикатовДавальца2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ВводОстатковПолуфабрикатовДавальца2_5

		#Область ВводОстатковПродукцииДавальца2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПродукцииДавальца2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков продукции давальца'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПродукцииДавальца2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводОстатковТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ВводОстатковПродукцииДавальца2_5

		#Область ПоступлениеОтДавальца2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеОтДавальца2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление от давальца'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПриемкаТоваровНаХранение");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПриемки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ПоступлениеОтДавальца2_5

		#Область ПередачаДавальцу2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаДавальцу2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача давальцу'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаДавальцу2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтгрузкаТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ПередачаДавальцу2_5

		#Область ВозвратДавальцу2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратДавальцу2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат давальцу'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДавальцу2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтгрузкаТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ВозвратДавальцу2_5

		#Область ОтчетДавальцу2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетДавальцу2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет давальцу'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцу2_5;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетДавальцу2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ОтчетДавальцу2_5

		#Область ОтчетДавальцуСписаниеНаРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтчетДавальцуСписаниеНаРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет давальцу (списание на расходы)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцуСписаниеНаРасходы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетДавальцу2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ОтчетДавальцуСписаниеНаРасходы

		#Область ПроизводствоИзДавальческогоСырья2_5
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПроизводствоИзДавальческогоСырья2_5";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Производство из давальческого сырья'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья2_5;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказДавальца2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ПроизводствоИзДавальческогоСырья2_5

		#Область ВыкупТоваровДавальца
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыкупТоваровДавальца";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выкуп товаров давальца'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровДавальца;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупПринятыхНаХранениеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //ВыкупТоваровДавальца

		#Область СписаниеТоваровДавальцаЗаСчетДавальца
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеТоваровДавальцаЗаСчетДавальца";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров давальца за счет давальца'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровДавальцаЗаСчетДавальца;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //СписаниеТоваровДавальцаЗаСчетДавальца

		#Область СписаниеТоваровДавальцаНаРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеТоваровДавальцаНаРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПриемВПереработку;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров давальца на расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровДавальцаНаРасходы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровСХранения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводствоИзДавальческогоСырья2_5";
		#КонецОбласти //СписаниеТоваровДавальцаНаРасходы

	#КонецОбласти //ПриемВПереработку

	#Область ПриемкаПодПринципала
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПриемкаПодПринципала";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Приемка товаров и услуг под принципалов / комитентов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "Закупки";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемкаПодПринципала;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОказаниеАгентскихУслугПриЗакупке";
		#КонецОбласти //ПриемкаПодПринципала

		#Область РеализацияБезПереходаПраваСобственности
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияБезПереходаПраваСобственности";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация (товары в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("УведомлениеОКонтролируемыхСделках");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктВыполненныхРабот");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтгрузкуБезПереходаПраваСобственности";
		#КонецОбласти //РеализацияБезПереходаПраваСобственности

		#Область РеализацияВРозницу
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияВРозницу";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация в розницу'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВРозницу;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СводнаяСправкаНДС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетОРозничныхПродажах");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РеализацияВРозницу

		#Область РеализацияКлиенту
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияКлиенту";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация клиенту'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктВыполненныхРабот");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетДавальцу");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураНаНеподтвержденнуюРеализацию0");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РеализацияКлиенту

		#Область РеализацияКомиссионногоТовара
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияКомиссионногоТовара";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация комиссионного товара'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКомиссионногоТовара;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РеализацияКомиссионногоТовара

		#Область РеализацияПереданнойВозвратнойТары
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияПереданнойВозвратнойТары";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация переданной возвратной тары'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //РеализацияПереданнойВозвратнойТары

		#Область РеализацияПерепоставленногоТовара
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияПерепоставленногоТовара";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация перепоставленного товара'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПерепоставленногоТовара;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РеализацияПерепоставленногоТовара

		#Область РеализацияКлиентуРеглУчет
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияКлиентуРеглУчет";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация по регл. учету'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеОтгрузки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправленческуюОрганизацию";
		#КонецОбласти //РеализацияКлиентуРеглУчет

		#Область РеализацияПодарочныхСертификатов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияПодарочныхСертификатов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация подарочных сертификатов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПодарочныхСертификатов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияПодарочныхСертификатов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РеализацияПодарочныхСертификатов

		#Область РеализацияЧерезКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияЧерезКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация через комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетКомиссионера");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //РеализацияЧерезКомиссионера

		#Область РеализацияЧерезКомиссионераБезПереходаПраваСобственности
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияЧерезКомиссионераБезПереходаПраваСобственности";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация через комиссионера (товары в пути)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияЧерезКомиссионераБезПереходаПраваСобственности;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОтгрузкуБезПереходаПраваСобственности";
		#КонецОбласти //РеализацияЧерезКомиссионераБезПереходаПраваСобственности

		#Область СписаниеКомиссионныхТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеКомиссионныхТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание комиссионных товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКомиссионныхТоваров;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		//++ Устарело_Переработка24
		Документ = Метаданные.Документы.Найти("ПередачаСырьяПереработчику");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		//-- Устарело_Переработка24
		Документ = Метаданные.Документы.Найти("СборкаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СписаниеНедостачТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //СписаниеКомиссионныхТоваров

		#Область СписаниеТоваровСХранения
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеТоваровСХранения";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров с хранения'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровСХранения;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыкупПринятыхНаХранениеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //СписаниеТоваровСХранения

		#Область СписаниеНедостачЗаСчетКомитента
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНедостачЗаСчетКомитента";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров у комиссионера за счет комитента'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНедостачЗаСчетКомитента;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьКомиссиюПриПродажах";
		#КонецОбласти //СписаниеНедостачЗаСчетКомитента

		#Область СписаниеНедостачЗаСчетПоклажедателя
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНедостачЗаСчетПоклажедателя";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров у хранителя за счет поклажедателя'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНедостачЗаСчетПоклажедателя;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОтчетОСписанииТоваровУХранителя");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи";
		#КонецОбласти //СписаниеНедостачЗаСчетПоклажедателя

		#Область СторноПереданнойТары
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноПереданнойТары";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно переданной тары'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТары;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СторноПереданнойТары

		#Область СторноПереданнойТарыВозвратНаДругойСклад
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноПереданнойТарыВозвратНаДругойСклад";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно переданной тары (возврат на другой склад)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТарыВозвратНаДругойСклад;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СторноПереданнойТарыВозвратНаДругойСклад

		#Область СторноРеализации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноРеализации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно реализации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноРеализации

		#Область СторноРеализацииВозвратНаДругойСклад
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноРеализацииВозвратНаДругойСклад";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно реализации (возврат на другой склад)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализацииВозвратНаДругойСклад;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВозвратТоваровМеждуОрганизациями");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратТоваровОтКлиента");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноРеализацииВозвратНаДругойСклад

		#Область КорректировкаРеализацииУвеличениеЗадолженностиСводно
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаРеализацииУвеличениеЗадолженностиСводно";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Увеличение задолженности (сводно)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаРеализацииУвеличениеЗадолженностиСводно;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации";
		#КонецОбласти //КорректировкаРеализацииУвеличениеЗадолженностиСводно

		#Область УдержаниеВознагражденияКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УдержаниеВознагражденияКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удержание вознаграждения комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеВознагражденияКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //УдержаниеВознагражденияКомиссионера

		#Область КорректировкаРеализацииУменьшениеЗадолженностиСводно
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаРеализацииУменьшениеЗадолженностиСводно";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Уменьшение задолженности (сводно)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаРеализацииУменьшениеЗадолженностиСводно;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОперацииСводнойКорректировкиЗадолженностиПоРеализации";
		#КонецОбласти //КорректировкаРеализацииУменьшениеЗадолженностиСводно

	#КонецОбласти //Продажи

	#Область Производство
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Производство";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Производство'", КодыЯзыков); // @НСтр-2

		#Область ВводОстатковМатериаловПереданныхВПроизводство
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковМатериаловПереданныхВПроизводство";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков материалов, переданных в производство'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковМатериаловПереданныхВПроизводство;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковМатериаловПереданныхВПроизводство

		#Область ВводОстатковОбесцененияМатериаловПереданныхВПроизводство
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияМатериаловПереданныхВПроизводство";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения материалов переданных в производство'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияМатериаловПереданныхВПроизводство;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковОбесцененияМатериаловПереданныхВПроизводство

		#Область ВнутреннееПоступлениеРабот
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВнутреннееПоступлениеРабот";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутреннее поступление работ'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеРабот;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктВыполненныхВнутреннихРабот");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьНесколькоОрганизаций";
		#КонецОбласти //ВнутреннееПоступлениеРабот

		#Область ВозвратМатериаловИзКладовой
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратМатериаловИзКладовой";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат материалов из кладовой'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВозвратМатериаловИзКладовой

		#Область ВозвратМатериаловИзПроизводства
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратМатериаловИзПроизводства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат материалов из производства'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "УправлениеПредприятием";
		#КонецОбласти //ВозвратМатериаловИзПроизводства

		#Область ВыпускПродукции
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукции";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РаспределениеВозвратныхОтходов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("АктВыполненныхВнутреннихРабот");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукции

		#Область ВыпускПродукцииПостатейные
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукцииПостатейные";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции (постатейные)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииПостатейные;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ОтчетПереработчика2_5");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		//++ Устарело_Переработка24
		Документ = Метаданные.Документы.Найти("ОтчетПереработчика");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		//-- Устарело_Переработка24
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукцииПостатейные

		#Область ВыпускПродукцииТрудозатраты
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукцииТрудозатраты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции (трудозатраты)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииТрудозатраты;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукцииТрудозатраты

		#Область ВыпускПродукцииМатериальные
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукцииМатериальные";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции (материальные)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииМатериальные;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукцииМатериальные

		#Область ВыпускПродукцииФиксированнаяСтоимость
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукцииФиксированнаяСтоимость";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции (фикс. стоимость)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РаспределениеВозвратныхОтходов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукцииФиксированнаяСтоимость

		#Область ВыпускПродукцииВПодразделение
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукцииВПодразделение";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции в подразделение'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РаспределениеВозвратныхОтходов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукцииВПодразделение

		#Область ВыпускПродукцииНаСклад
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВыпускПродукцииНаСклад";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выпуск продукции на склад'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РаспределениеВозвратныхОтходов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВыпускПродукции");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВыпускПродукцииНаСклад

		#Область Модернизация
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "Модернизация";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Модернизация'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.Модернизация;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказНаРемонт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправлениеРемонтами";
		#КонецОбласти //Модернизация

		#Область НаработкаОбъектовЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НаработкаОбъектовЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Наработка объектов эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НаработкаОбъектовЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НаработкаОбъектовЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НаработкаОбъектовЭксплуатации

		#Область ОтражениеПлановойСтоимостиВыпуска
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОтражениеПлановойСтоимостиВыпуска";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение плановой стоимости выпуска'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеПлановойСтоимостиВыпуска;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ОтражениеПлановойСтоимостиВыпуска

		#Область ПередачаВПроизводство
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаВПроизводство";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача в производство'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказМатериаловВПроизводство");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПередачаМатериаловВПроизводство");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаЗаказаМатериаловВПроизводство");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПередачаВПроизводство

		#Область ПередачаМатериаловВКладовую
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаМатериаловВКладовую";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача материалов в кладовую'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПередачаМатериаловВКладовую

		#Область ПередачаМатериаловВПроизводство
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаМатериаловВПроизводство";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача материалов в производство'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "УправлениеПредприятием";
		#КонецОбласти //ПередачаМатериаловВПроизводство

		#Область ПередачаПродукцииИзКладовой
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаПродукцииИзКладовой";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача продукции из кладовой'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПередачаПродукцииИзКладовой

		#Область ПередачаПродукцииИзПроизводства
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаПродукцииИзПроизводства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача продукции из производства'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("РаспределениеВозвратныхОтходов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "УправлениеПредприятием";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПередачаПродукцииИзПроизводства

		#Область ПеремещениеМатериаловВПроизводстве
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеМатериаловВПроизводстве";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение материалов в производстве'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеМатериаловВПроизводстве;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеМатериаловВПроизводстве");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправлениеПроизводством";
		#КонецОбласти //ПеремещениеМатериаловВПроизводстве

		#Область ПеремещениеПолуфабрикатов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеПолуфабрикатов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение полуфабрикатов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПеремещениеПолуфабрикатов

		#Область ПеремещениеПолуфабрикатовМеждуФилиалами
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеПолуфабрикатовМеждуФилиалами";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение полуфабрикатов между филиалами'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Истина;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПеремещениеПолуфабрикатовМеждуФилиалами

		#Область ПоступлениеИзПроизводства
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеИзПроизводства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление из производства'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеИзПроизводства;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "УправлениеТорговлей";
		#КонецОбласти //ПоступлениеИзПроизводства

		#Область ПриемПередачаРаботМеждуПодразделениями
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПриемПередачаРаботМеждуПодразделениями";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прием-передача работ между подразделениями'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуПодразделениями;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктВыполненныхВнутреннихРабот");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПриемПередачаРаботМеждуПодразделениями

		#Область ПриемПередачаРаботМеждуФилиалами
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПриемПередачаРаботМеждуФилиалами";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прием-передача работ между филиалами'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуФилиалами;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктВыполненныхВнутреннихРабот");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПриемПередачаРаботМеждуФилиалами

		#Область РегистрацияСдельныхРабот
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РегистрацияСдельныхРабот";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Регистрация сдельных работ'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РегистрацияСдельныхРабот;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВыработкаСотрудников");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //РегистрацияСдельныхРабот

		#Область Ремонт
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "Ремонт";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ремонт'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.Ремонт;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказНаРемонт");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправлениеРемонтами";
		#КонецОбласти //Ремонт

		#Область СобственноеПроизводство
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СобственноеПроизводство";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Собственное производство'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СобственноеПроизводство;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказНаПроизводство2_2");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //СобственноеПроизводство
		
		#Область ВнутренняяПереработка
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВнутренняяПереработка";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Производство;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутренняя переработка'", КодыЯзыков); // @НСтр-2
		
			#Область ОтчетДавальцуМеждуОрганизациями
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтчетДавальцуМеждуОрганизациями";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ВнутренняяПереработка;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет давальцу между организациями'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетДавальцуМеждуОрганизациями;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;
			
			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтчетДавальцуМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			
			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнутреннююПереработку";
			#КонецОбласти //ОтчетДавальцуМеждуОрганизациями
			
		#КонецОбласти //ВнутренняяПереработка
	
	#КонецОбласти //Производство

	#Область Прочее
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Прочее";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочее'", КодыЯзыков); // @НСтр-2

		#Область АвансовыйОтчет
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "АвансовыйОтчет";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Авансовый отчет'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АвансовыйОтчет;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //АвансовыйОтчет

		#Область ВводИнформацииОПрошлыхРемонтах
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводИнформацииОПрошлыхРемонтах";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод информации о прошлых ремонтах'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводИнформацииОПрошлыхРемонтах;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВводИнформацииОПрошлыхРемонтах");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВводИнформацииОПрошлыхРемонтах

		#Область ВводОстатковВозвратнойТарыПринятойОтПоставщиков
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковВозвратнойТарыПринятойОтПоставщиков";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков возвратной тары принятой от поставщиков'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВозвратнойТарыПринятойОтПоставщиков;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковВозвратнойТарыПринятойОтПоставщиков

		#Область ВводОстатковПриПереходеНаНДД
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПриПереходеНаНДД";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков при переходе на НДД'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаНДД;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковПриПереходеНаНДД

		#Область ВнутреннееПотребление
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВнутреннееПотребление";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутреннее потребление'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПотребление;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВнутреннееПотребление

		#Область ДополнительныеРасходыБезПартии
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДополнительныеРасходыБезПартии";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Дополнительные расходы без указания документа партии'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДополнительныеРасходыБезПартии;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ДополнительныеРасходыБезПартии

		#Область ДополнительныеРасходыСПартией
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДополнительныеРасходыСПартией";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Дополнительные расходы с указанием документа партии'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДополнительныеРасходыСПартией;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ДополнительныеРасходыСПартией

		#Область ИнвентаризацияКомиссионера
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризацияКомиссионера";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризация комиссионера'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризацияКомиссионера;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ИнвентаризацияКомиссионера

		#Область ПеремещениеВЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеВЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение в эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеВЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеВЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПеремещениеВЭксплуатации

		#Область ПланированиеПоЗаявке
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПланированиеПоЗаявке";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Планирование по заявке'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПланированиеПоЗаявке;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПланированиеПоЗаявке

		#Область ПланированиеПоСчету
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПланированиеПоСчету";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Планирование по счету'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПланированиеПоСчету;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПланированиеПоСчету

		#Область ПокупкаПолученнойВозвратнойТары
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПокупкаПолученнойВозвратнойТары";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Покупка полученной возвратной тары'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПокупкаПолученнойВозвратнойТары;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПокупкаПолученнойВозвратнойТары

		#Область ПоступлениеЗатрат
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеЗатрат";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление затрат'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеЗатрат;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ПоступлениеЗатрат

		#Область ПоступлениеУслугДляПроизводства
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПоступлениеУслугДляПроизводства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление услуг для производства'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеУслугДляПроизводства;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ПоступлениеУслугДляПроизводства

		#Область РаспределениеПоВыбывшимТоварам
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РаспределениеПоВыбывшимТоварам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение по выбывшим товарам'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеПоВыбывшимТоварам;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //РаспределениеПоВыбывшимТоварам

		#Область РеализацияПрочихАктивов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РеализацияПрочихАктивов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация прочих активов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПрочихАктивов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //РеализацияПрочихАктивов

		#Область РегистрацияДефекта
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РегистрацияДефекта";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Регистрация дефекта'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РегистрацияДефекта;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РегистрацияДефекта");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РегистрацияДефекта

		#Область СписаниеСуммНДД
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеСуммНДД";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание сумм НДД'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеСуммНДД;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеСуммНДД

		#Область УстановкаЗначенийНаработки
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "УстановкаЗначенийНаработки";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Прочее;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Установка значений наработки'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УстановкаЗначенийНаработки;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("УстановкаЗначенийНаработки");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //УстановкаЗначенийНаработки

	#КонецОбласти //Прочее

	#Область РегламентированныйУчет
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "РегламентированныйУчет";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Регламентированный учет'", КодыЯзыков); // @НСтр-2

		#Область ВводОстатковНДСПоПриобретеннымЦенностям
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковНДСПоПриобретеннымЦенностям";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков НДС по приобретенным ценностям'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНДСПоПриобретеннымЦенностям;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковНДСПоПриобретеннымЦенностям

		#Область ВводДанныхПоНалогуНаПрибыль
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводДанныхПоНалогуНаПрибыль";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод данных по налогу на прибыль'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводДанныхПоНалогуНаПрибыль;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводДанныхПоНалогуНаПрибыль

		#Область ВосстановлениеНДС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеНДС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление НДС (запись книги продаж)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеНДС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаписьКнигиПродаж");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВосстановлениеНДС
		
		#Область ВключениеНДСВСтоимость
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВключениеНДСВСтоимость";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Включение НДС в стоимость'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВключениеНДСВСтоимость;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВключениеНДСВСтоимость

		#Область ВосстановлениеНДССВыданногоАванса
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВосстановлениеНДССВыданногоАванса";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление НДС с выданного аванса'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "НДСАвансыВыданные";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'НДС с выданного аванса'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеНДССВыданногоАванса;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВосстановлениеНДССВыданногоАванса

		#Область ВходящийНДСПоПриобретению
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВходящийНДСПоПриобретению";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Входящий НДС по приобретению'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВходящийНДСПоПриобретению;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВходящийНДСПоПриобретению

		#Область ВычетНДССВыданногоАванса
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВычетНДССВыданногоАванса";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Вычет НДС с выданного аванса'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "НДСАвансыВыданные";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'НДС с выданного аванса'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВычетНДССВыданногоАванса;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВычетНДССВыданногоАванса

		#Область ВычетНДССПолученногоАванса
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВычетНДССПолученногоАванса";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Вычет НДС с полученного аванса'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "НДСАвансыПолученные";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'НДС с полученного аванса'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВычетНДССПолученногоАванса;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВычетНДССПолученногоАванса

		#Область ДоначислениеЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДоначислениеЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доначисление земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДоначислениеЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ДоначислениеЗемельногоНалога

		#Область ДоначислениеНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДоначислениеНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доначисление налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДоначислениеНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ДоначислениеНалогаНаИмущество

		#Область ДоначислениеТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДоначислениеТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доначисление транспортного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДоначислениеТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ДоначислениеТранспортногоНалога

		#Область ЗачетЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетЗемельногоНалога

		#Область ЗачетЗемельногоНалогаВСчетНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетЗемельногоНалогаВСчетНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет земельного налога в счет налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетЗемельногоНалогаВСчетНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетЗемельногоНалогаВСчетНалогаНаИмущество

		#Область ЗачетЗемельногоНалогаВСчетТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетЗемельногоНалогаВСчетТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет земельного налога в счет транспортного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетЗемельногоНалогаВСчетТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетЗемельногоНалогаВСчетТранспортногоНалога

		#Область ЗачетНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетНалогаНаИмущество

		#Область ЗачетНалогаНаИмуществоВСчетЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетНалогаНаИмуществоВСчетЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет налога на имущество в счет земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетНалогаНаИмуществоВСчетЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетНалогаНаИмуществоВСчетЗемельногоНалога

		#Область ЗачетНалогаНаИмуществоВСчетТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетНалогаНаИмуществоВСчетТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет налога на имущество в счет транспортного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетНалогаНаИмуществоВСчетТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетНалогаНаИмуществоВСчетТранспортногоНалога

		#Область ЗачетТранспортногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетТранспортногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет транспортного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетТранспортногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетТранспортногоНалога

		#Область ЗачетТранспортногоНалогаВСчетЗемельногоНалога
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетТранспортногоНалогаВСчетЗемельногоНалога";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет транспортного налога в счет земельного налога'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетТранспортногоНалогаВСчетЗемельногоНалога;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетТранспортногоНалогаВСчетЗемельногоНалога

		#Область ЗачетТранспортногоНалогаВСчетНалогаНаИмущество
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ЗачетТранспортногоНалогаВСчетНалогаНаИмущество";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Зачет транспортного налога в счет налога на имущество'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗачетТранспортногоНалогаВСчетНалогаНаИмущество;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ЗачетТранспортногоНалогаВСчетНалогаНаИмущество

		#Область ИсправлениеПрочегоНачисленияНДС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИсправлениеПрочегоНачисленияНДС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Исправление прочего начисления НДС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИсправлениеПрочегоНачисленияНДС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаписьКнигиПродаж");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИсправлениеПрочегоНачисленияНДС

		#Область КорректировкаВидаДеятельностиНДС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаВидаДеятельностиНДС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка вида деятельности НДС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаВидаДеятельностиНДС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаВидаДеятельностиНДС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРаздельныйУчетПоНалогообложению";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУчетНДС";
		#КонецОбласти //КорректировкаВидаДеятельностиНДС

		#Область КорректировкаДоВводаОстатков
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаДоВводаОстатков";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Продажи;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка до ввода остатков'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаДоВводаОстатков;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		
		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("КорректировкаПриобретения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "НоваяАрхитектураВзаиморасчетов";
		#КонецОбласти //КорректировкаДоВводаОстатков

		#Область КорректировкаНалогообложенияНДСПартийТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КорректировкаНалогообложенияНДСПартийТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Корректировка налогообложения НДС партий товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаНалогообложенияНДСПартийТоваров;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("КорректировкаНалогообложенияНДСПартийТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПартионныйУчет";
		#КонецОбласти //КорректировкаНалогообложенияНДСПартийТоваров

		#Область НачислениеИмущественныхНалогов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеИмущественныхНалогов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление имущественных налогов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеИмущественныхНалогов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НачислениеИмущественныхНалогов

		#Область НачислениеНалогаНаПрибыль
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНалогаНаПрибыль";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление налога на прибыль'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНалогаНаПрибыль;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РегламентнаяОперация");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеНалогаНаПрибыль

		#Область НачислениеНДСНалоговымАгентом
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНДСНалоговымАгентом";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление НДС налоговым агентом'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияПоНДС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения по НДС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНДСНалоговымАгентом;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученныйНалоговыйАгент");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СчетФактураНалоговыйАгент");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеНДСНалоговымАгентом

		#Область НачислениеНДСпоОтгрузкеТоваровВПути
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНДСпоОтгрузкеТоваровВПути";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление НДС по отгрузке без перехода права собственности'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияПоНДС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения по НДС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНДСпоОтгрузкеТоваровВПути;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеНДСпоОтгрузкеТоваровВПути

		#Область НачислениеНДССПолученногоАванса
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеНДССПолученногоАванса";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление НДС с полученного аванса'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "НДСАвансыПолученные";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'НДС с полученного аванса'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеНДССПолученногоАванса;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НачислениеНДССПолученногоАванса

		#Область НачислениеРезервовПредстоящихРасходов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеРезервовПредстоящихРасходов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление резервов предстоящих расходов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеРезервовПредстоящихРасходов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //НачислениеРезервовПредстоящихРасходов

		#Область НачислениеСписаниеРезервовПредстоящихРасходов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеСписаниеРезервовПредстоящихРасходов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление списание резервов предстоящих расходов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеСписаниеРезервовПредстоящихРасходов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НачислениеСписаниеРезервовПредстоящихРасходов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьРезервыПредстоящихРасходов";
		#КонецОбласти //НачислениеСписаниеРезервовПредстоящихРасходов

		#Область НачислениеТорговогоСбора
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НачислениеТорговогоСбора";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление торгового сбора'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = НСтр("ru = 'Начисление торгового сбора'", КодОсновногоЯзыка);
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеТорговогоСбора;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //НачислениеТорговогоСбора

		#Область ПогашениеСтоимостиТМЦВЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПогашениеСтоимостиТМЦВЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Погашение стоимости ТМЦ в эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПогашениеСтоимостиТМЦВЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПогашениеСтоимостиТМЦВЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
		#КонецОбласти //ПогашениеСтоимостиТМЦВЭксплуатации

		#Область ПринятиеНДСкВычету
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПринятиеНДСкВычету";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Принятие НДС к вычету'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияПоНДС";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения по НДС'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПринятиеНДСкВычету;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПринятиеНДСкВычету

		#Область ПрочееНачислениеНДС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПрочееНачислениеНДС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочее начисление НДС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееНачислениеНДС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаписьКнигиПродаж");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		
		Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПрочееНачислениеНДС

		#Область РаспределениеНДС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РаспределениеНДС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение НДС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеНДС;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РаспределениеНДС");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РаспределениеНДС

		#Область РасчетРезервовПодОбесценениеЗапасов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РасчетРезервовПодОбесценениеЗапасов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчет резервов под обесценение запасов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РасчетРезервовПодОбесценениеЗапасов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РасчетРезервовПодОбесценениеЗапасов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьРезервыПодОбесценениеЗапасов";
		#КонецОбласти //РасчетРезервовПодОбесценениеЗапасов

		#Область РасчетСебестоимостиТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РасчетСебестоимостиТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчет себестоимости товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РасчетСебестоимостиТоваров;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РасчетСебестоимостиТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //РасчетСебестоимостиТоваров

		#Область РегламентнаяОперация
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РегламентнаяОперация";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Регламентная операция'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РегламентнаяОперация;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РегламентнаяОперация");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
		#КонецОбласти //РегламентнаяОперация

		#Область РегламентнаяОперацияМеждународныйУчет
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РегламентнаяОперацияМеждународныйУчет";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Регламентная операция международный учет'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РегламентнаяОперацияМеждународныйУчет;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РегламентнаяОперацияМеждународныйУчет");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьМеждународныйФинансовыйУчет";
		#КонецОбласти //РегламентнаяОперацияМеждународныйУчет

		#Область СписаниеКосвенныхРасходов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеКосвенныхРасходов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание косвенных расходов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКосвенныхРасходов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("РегламентнаяОперация");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеКосвенныхРасходов

		#Область СписаниеНаРасходыМалоценныхТМЦВМесяцеПриобретения
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНаРасходыМалоценныхТМЦВМесяцеПриобретения";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы малоценных ТМЦ в месяце приобретения'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыМалоценныхТМЦВМесяцеПриобретения;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		#КонецОбласти //СписаниеНаРасходыМалоценныхТМЦВМесяцеПриобретения

		#Область СписаниеНДСПоПриобретеннымЦенностям
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНДСПоПриобретеннымЦенностям";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание НДС по приобретенным ценностям'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНДСПоПриобретеннымЦенностям;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеНДСПоПриобретеннымЦенностям

		#Область СписаниеНДССПолученногоАванса
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеНДССПолученногоАванса";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание НДС с полученного аванса'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНДССПолученногоАванса;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеНДССПолученногоАванса

		#Область СписаниеРасходовЗаСчетРезервов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРасходовЗаСчетРезервов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание расходов за счет резервов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовЗаСчетРезервов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеРасходовЗаСчетРезервов

		#Область СписаниеРезервовПредстоящихРасходов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеРезервовПредстоящихРасходов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резервов предстоящих расходов'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезервовПредстоящихРасходов;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //СписаниеРезервовПредстоящихРасходов

		#Область ФормированиеРасходовНДДПоАмортизируемомуИмуществу
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ФормированиеРасходовНДДПоАмортизируемомуИмуществу";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РегламентированныйУчет;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация ОС'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ФормированиеРасходовНДДПоАмортизируемомуИмуществу";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Формирование расходов НДД (амортизируемое имущество)'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ФормированиеРасходовНДДПоАмортизируемомуИмуществу;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ФормированиеРасходовНДДПоАмортизируемомуИмуществу");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ФормированиеРасходовНДДПоАмортизируемомуИмуществу

	#КонецОбласти //РегламентированныйУчет

	#Область Склад
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Склад";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Склад'", КодыЯзыков); // @НСтр-2

		#Область ВводОстатковОбесцененияСобственныхТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковОбесцененияСобственныхТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков обесценения собственных товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковОбесцененияСобственныхТоваров;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковОбесцененияСобственныхТоваров

		#Область ВводОстатковПриПереходеНаИспользованиеАдресногоХраненияОстатков
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПриПереходеНаИспользованиеАдресногоХраненияОстатков";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков при переходе на использование адресного хранения остатков'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаИспользованиеАдресногоХраненияОстатков;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковПриПереходеНаИспользованиеАдресногоХраненияОстатков

		#Область ВводОстатковПриПереходеНаИспользованиеСкладскихПомещений
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковПриПереходеНаИспользованиеСкладскихПомещений";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков при переходе на использование складских помещений'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПриПереходеНаИспользованиеСкладскихПомещений;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковПриПереходеНаИспользованиеСкладскихПомещений

		#Область ВводОстатковСобственныхТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВводОстатковСобственныхТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков собственных товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
		#КонецОбласти //ВводОстатковСобственныхТоваров

		#Область ВнутреннееПоступлениеТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВнутреннееПоступлениеТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутреннее поступление товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремещениеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВнутреннееПоступлениеТоваров

		#Область ВозвратИзПроизводства
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратИзПроизводства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат из производства'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ДвижениеПродукцииИМатериалов");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ВозвратМатериаловИзПроизводства");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПроизводство";
		#КонецОбласти //ВозвратИзПроизводства

		#Область ВозвратИзЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ВозвратИзЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат из эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ВозвратИзЭксплуатации

		#Область ИнвентаризационнаяОпись
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ИнвентаризационнаяОпись";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инвентаризационная опись'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнвентаризационнаяОпись;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ИнвентаризационнаяОпись");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ИнвентаризационнаяОпись

		#Область МаркировкаТоваровГИСМ
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "МаркировкаТоваровГИСМ";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Маркировка товаров ГИСМ'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.МаркировкаТоваровГИСМ;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("МаркировкаТоваровГИСМ");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ВестиУчетМаркировкиПродукцииВГИСМ";
		#КонецОбласти //МаркировкаТоваровГИСМ

		#Область НаработкаТМЦВЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "НаработкаТМЦВЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Наработка ТМЦ в эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НаработкаТМЦВЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("НаработкаТМЦВЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //НаработкаТМЦВЭксплуатации

		#Область ОприходованиеЗаСчетДоходов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеЗаСчетДоходов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование (за счет доходов)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетДоходов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУчетПрочихДоходовРасходов";
		#КонецОбласти //ОприходованиеЗаСчетДоходов

		#Область ОприходованиеЗаСчетРасходов
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеЗаСчетРасходов";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование (за счет расходов)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеЗаСчетРасходов;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУчетПрочихДоходовРасходов";
		#КонецОбласти //ОприходованиеЗаСчетРасходов

		#Область ОприходованиеПриВыбытииОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеПриВыбытииОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование (при выбытии ОС)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеПриВыбытииОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "КомплекснаяАвтоматизация";
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "УправлениеПредприятием";
		#КонецОбласти //ОприходованиеПриВыбытииОС

		#Область ОприходованиеТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ОприходованиеТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оприходование товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ОприходованиеИзлишковТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ОприходованиеТоваров

		#Область ПередачаВСоставНМА
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаВСоставНМА";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача в состав НМА и НИОКР'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПередачаВСоставНМА

		#Область ПередачаВСоставОС
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаВСоставОС";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача в состав основных средств'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПередачаВСоставОС

		#Область ПередачаВЭксплуатацию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаВЭксплуатацию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача в эксплуатацию'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказНаВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнутреннееПотребление";
		#КонецОбласти //ПередачаВЭксплуатацию

		#Область ПередачаВЭксплуатациюБУНУ
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаВЭксплуатациюБУНУ";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача в эксплуатацию (БУ и НУ)'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатациюБУНУ;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказНаВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнутреннееПотребление";
		#КонецОбласти //ПередачаВЭксплуатациюБУНУ

		#Область ПередачаНаПрочиеЦели
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПередачаНаПрочиеЦели";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача на прочие цели'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПередачаНаПрочиеЦели

		#Область ПеремаркировкаТоваровГИСМ
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремаркировкаТоваровГИСМ";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемаркировка товаров ГИСМ'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремаркировкаТоваровГИСМ;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПеремаркировкаТоваровГИСМ");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ВестиУчетМаркировкиПродукцииВГИСМ";
		#КонецОбласти //ПеремаркировкаТоваровГИСМ

		#Область ПеремещениеТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПеремещения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказНаПеремещение");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПеремещениеТоваров";
		#КонецОбласти //ПеремещениеТоваров

		#Область ПеремещениеТоваровМеждуФилиалами
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПеремещениеТоваровМеждуФилиалами";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение товаров между филиалами'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("АктОРасхожденияхПослеПеремещения");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказНаПеремещение");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ПеремещениеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс";
		#КонецОбласти //ПеремещениеТоваровМеждуФилиалами

		#Область ПересортицаТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПересортицаТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Пересортица товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПересортицаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПересортицаТоваров

		#Область ПересортицаТоваровСПереоценкой
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПересортицаТоваровСПереоценкой";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Пересортица товаров с переоценкой'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Ложь;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПересортицаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПересортицаТоваровСПереоценкой

		#Область ПорчаТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПорчаТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Порча товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПорчаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПорчаТоваров

		#Область ПорчаТоваровСПереоценкой
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПорчаТоваровСПереоценкой";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Порча товаров с переоценкой'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПорчаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //ПорчаТоваровСПереоценкой

		#Область РазборкаТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РазборкаТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Разборка на комплектующие'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказНаСборку");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СборкаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьСборкуРазборку";
		#КонецОбласти //РазборкаТоваров

		#Область СборкаТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СборкаТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сборка товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ЗаказНаСборку");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("СборкаТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьСборкуРазборку";
		#КонецОбласти //СборкаТоваров

		#Область СписаниеИзЭксплуатации
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеИзЭксплуатации";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание из эксплуатации'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "";
		Элемент.ПредставлениеИсточникаДанных = "";
		Элемент.Описание = "";
		Элемент.Приход = Неопределено;
		Элемент.Расход = Неопределено;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеИзЭксплуатации;
		Элемент.ИспользоватьВБюджетировании = Ложь;
		Элемент.ИспользоватьВМеждународномУчете = Ложь;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеИзЭксплуатации");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеИзЭксплуатации

		#Область СписаниеТоваровПоТребованию
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеТоваровПоТребованию";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание на расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		Документ = Метаданные.Документы.Найти("ЗаказНаВнутреннееПотребление");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;

		Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
		ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
		ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнутреннееПотребление";
		#КонецОбласти //СписаниеТоваровПоТребованию

		#Область СписаниеТоваров
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СписаниеТоваров";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание товаров'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Ложь;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("СписаниеНедостачТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СписаниеТоваров

		#Область СторноСписанияНаРасходы
		Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "СторноСписанияНаРасходы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Склад;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно списания на расходы'", КодыЯзыков); // @НСтр-2
		Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
		Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
		Элемент.Описание = "";
		Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
		Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
		Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы;
		Элемент.ИспользоватьВБюджетировании = Истина;
		Элемент.ИспользоватьВМеждународномУчете = Истина;
		Элемент.ИспользоватьДляВыбора = Истина;
		Элемент.ИспользоватьВРеестреДокументов = Истина;
		Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

		Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
		Документ = Метаданные.Документы.Найти("ПрочееОприходованиеТоваров");
		Если Документ <> Неопределено Тогда
			ЭлементТЧ = Элемент.Документы.Добавить();
			ЭлементТЧ.ИмяДокумента = Документ.Имя;
			НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
			ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
		КонецЕсли;
		#КонецОбласти //СторноСписанияНаРасходы

	#КонецОбласти //Склад

	#Область Финансы
	Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
	Элемент.ИмяПредопределенныхДанных = "Финансы";
	МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Финансы'", КодыЯзыков); // @НСтр-2

		#Область ДенежныеДокументы
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДенежныеДокументы";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные документы'", КодыЯзыков); // @НСтр-2

			#Область БронированиеУПоставщика
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "БронированиеУПоставщика";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Бронирование у поставщика'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеУПоставщика;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //БронированиеУПоставщика

			#Область БронированиеЧерезАгента
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "БронированиеЧерезАгента";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Бронирование через агента'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеЧерезАгента;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //БронированиеЧерезАгента

			#Область БронированиеЧерезПодотчетноеЛицо
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "БронированиеЧерезПодотчетноеЛицо";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Бронирование через подотчетное лицо'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.БронированиеЧерезПодотчетноеЛицо;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //БронированиеЧерезПодотчетноеЛицо

			#Область ВозвратБронирования
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратБронирования";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат бронирования'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратБронирования;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратБронирования

			#Область ВозвратБронированияПодотчетногоЛица
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратБронированияПодотчетногоЛица";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат бронирования подотчетного лица'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратБронированияПодотчетногоЛица;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратБронированияПодотчетногоЛица

			#Область ВозвратДенежныхДокументовПоставщику
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхДокументовПоставщику";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат денежных документов поставщику'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхДокументовПоставщику;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыбытиеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратДенежныхДокументовПоставщику

			#Область ВыдачаДенежныхДокументовПодотчетнику
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхДокументовПодотчетнику";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача денежных документов подотчетнику'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхДокументовПодотчетнику;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыбытиеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыдачаДенежныхДокументовПодотчетнику

			#Область ИспользованиеБронированияПодотчетнымЛицом
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ИспользованиеБронированияПодотчетнымЛицом";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Использование бронирования подотчетным лицом'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИспользованиеБронированияПодотчетнымЛицом;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ИспользованиеБронированияПодотчетнымЛицом

			#Область ОтклоненияВСтоимостиДенежныхДокументовДоходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтклоненияВСтоимостиДенежныхДокументовДоходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отклонения в стоимости денежных документов (доходы)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтклоненияВСтоимостиДенежныхДокументовДоходы;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыбытиеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтклоненияВСтоимостиДенежныхДокументовДоходы

			#Область ОтклоненияВСтоимостиДенежныхДокументовРасходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтклоненияВСтоимостиДенежныхДокументовРасходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отклонения в стоимости денежных документов (расходы)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтклоненияВСтоимостиДенежныхДокументовРасходы;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыбытиеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтклоненияВСтоимостиДенежныхДокументовРасходы

			#Область ПеремещениеДенежныхДокументов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПеремещениеДенежныхДокументов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перемещение денежных документов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеДенежныхДокументов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			
			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыбытиеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПеремещениеДенежныхДокументов

			#Область ПоступлениеДенежныхДокументовОтПодотчетника
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхДокументовОтПодотчетника";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление денежных документов от подотчетника'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПодотчетника;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхДокументовОтПодотчетника

			#Область ПоступлениеДенежныхДокументовОтПоставщика
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхДокументовОтПоставщика";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление денежных документов от поставщика'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхДокументовОтПоставщика;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхДокументовОтПоставщика

			#Область СписаниеДенежныхДокументов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеДенежныхДокументов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание денежных документов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДенежныхДокументов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыбытиеДенежныхДокументов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеДенежныхДокументов

			#Область СторноИспользованияБронированияПодотчетнымЛицом
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СторноИспользованияБронированияПодотчетнымЛицом";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно использования бронирования подотчетным лицом'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноИспользованияБронированияПодотчетнымЛицом;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //СторноИспользованияБронированияПодотчетнымЛицом

			#Область ШтрафыПриВозвратеБронирования
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ШтрафыПриВозвратеБронирования";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Штрафы при возврате бронирования'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ШтрафыПриВозвратеБронирования;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ШтрафыПриВозвратеБронирования

			#Область ШтрафыПриВозвратеБронированияПодотчетногоЛица
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ШтрафыПриВозвратеБронированияПодотчетногоЛица";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеДокументы;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Штрафы при возврате бронирования подотчетного лица'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ШтрафыПриВозвратеБронированияПодотчетногоЛица;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("Бронирование");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ШтрафыПриВозвратеБронированияПодотчетногоЛица

		#КонецОбласти //ДенежныеДокументы

		#Область ДенежныеСредства
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ДенежныеСредства";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Денежные средства'", КодыЯзыков); // @НСтр-2

			#Область ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков в автономных кассах ККМ к оформлению отчетов о розничных продажах'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах

			#Область ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков в автономных кассах ККМ по розничной выручке'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке

			#Область ВводОстатковВКассах
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковВКассах";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков в кассах'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковВКассах

			#Область ВводОстатковДенежныхСредствКПоступлениюОтЭквайера
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковДенежныхСредствКПоступлениюОтЭквайера";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков денежных средств к поступлению от эквайера'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковДенежныхСредствКПоступлениюОтЭквайера;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковДенежныхСредствКПоступлениюОтЭквайера

			#Область ВводОстатковЗадолженностиПодотчетников
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковЗадолженностиПодотчетников";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков задолженности подотчетников'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗадолженностиПодотчетников;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковЗадолженностиПодотчетников

			#Область ВводОстатковНаБанковскихСчетах
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковНаБанковскихСчетах";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков на банковских счетах'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковНаБанковскихСчетах

			#Область ВводОстатковПерерасходовПодотчетныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковПерерасходовПодотчетныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков перерасходов подотчетных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПерерасходовПодотчетныхСредств;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковПерерасходовПодотчетныхСредств

			#Область ВнесениеДенежныхСредствВКассуККМ
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВнесениеДенежныхСредствВКассуККМ";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внесение ДС в кассу ККМ'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнесениеДенежныхСредствВКассуККМ;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВнесениеДенежныхСредствВКассуККМ");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВнесениеДенежныхСредствВКассуККМ

			#Область ВнутреннееПоступлениеДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВнутреннееПоступлениеДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутреннее поступление ДС'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Поступление денежных средств из обособленного подразделения'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВнутреннееПоступлениеДенежныхСредств

			#Область ВнутренняяПередачаДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВнутренняяПередачаДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутренняя передача ДС между организацией и филиалами'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Передача денежных средств в обособленное подразделение'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВнутренняяПередачаДенежныхСредств

			#Область ВозвратДенежныхСредствВДругуюОрганизацию
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствВДругуюОрганизацию";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат ДС в другую организацию'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат денежных средств в собственную организацию (Интеркампани)'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратДенежныхСредствВДругуюОрганизацию

			#Область ВозвратДенежныхСредствОтАрендодателя
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтАрендодателя";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат ДС от арендодателя'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтАрендодателя;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратДенежныхСредствОтАрендодателя

			#Область ВозвратДенежныхСредствОтДругойОрганизации
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтДругойОрганизации";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат ДС от другой организации'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат денежных средств от собственной организации (Интеркампани)'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтДругойОрганизации;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйОрдерНаТовары");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратДенежныхСредствОтДругойОрганизации

			#Область ВозвратДенежныхСредствОтПодотчетника
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтПодотчетника";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат ДС от подотчетника'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПодотчетника;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратДенежныхСредствОтПодотчетника

			#Область ВозвратДенежныхСредствОтПоставщика
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратДенежныхСредствОтПоставщика";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат ДС от поставщика'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратДенежныхСредствОтПоставщика

			#Область ВозвратНеперечисленныхДС
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратНеперечисленныхДС";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат неперечисленной зарплаты'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат неперечисленной зарплаты'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленныхДС;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратНеперечисленныхДС
			
			#Область ВозвратНалогов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратНалогов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат налогов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНалогов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратНалогов

			#Область ВозвратОплатыКлиенту
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратОплатыКлиенту";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат оплаты клиенту'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОперацияПоПлатежнойКарте");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратОплатыКлиенту

			#Область ВозвратОплатыКлиентуНаПлатежнуюКарту
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратОплатыКлиентуНаПлатежнуюКарту";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат оплаты клиенту на платежную карту'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиентуНаПлатежнуюКарту;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОперацияПоПлатежнойКарте");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратОплатыКлиентуНаПлатежнуюКарту

			#Область ВозвратОплатыНаПлатежнуюКарту
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратОплатыНаПлатежнуюКарту";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат оплаты по эквайрингу'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат денежных средств эквайеру'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОперацияПоПлатежнойКарте");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратОплатыНаПлатежнуюКарту

			#Область ВыдачаДенежныхСредствВДругуюКассу
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствВДругуюКассу";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача ДС в другую кассу'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыдачаДенежныхСредствВДругуюКассу

			#Область ВыдачаДенежныхСредствВКассуККМ
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствВКассуККМ";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача ДС в кассу ККМ'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВКассуККМ;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыдачаДенежныхСредствВКассуККМ

			#Область ВыдачаДенежныхСредствПодотчетнику
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыдачаДенежныхСредствПодотчетнику";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача ДС подотчетнику'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыдачаДенежныхСредствПодотчетнику

			#Область ВыемкаДенежныхСредствИзКассыККМ
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыемкаДенежныхСредствИзКассыККМ";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выемка ДС из кассы ККМ'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыемкаДенежныхСредствИзКассыККМ;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВыемкаДенежныхСредствИзКассыККМ");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыемкаДенежныхСредствИзКассыККМ

			#Область ИнкассацияДенежныхСредствВБанк
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ИнкассацияДенежныхСредствВБанк";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инкассация ДС в банк'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ИнкассацияДенежныхСредствВБанк

			#Область ИнкассацияДенежныхСредствИзБанка
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ИнкассацияДенежныхСредствИзБанка";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Инкассация ДС из банка'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствИзБанка;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ИнкассацияДенежныхСредствИзБанка

			#Область КомиссияПоЭквайрингу
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КомиссияПоЭквайрингу";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Комиссия по эквайрингу'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КомиссияПоЭквайрингу;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОперацияПоПлатежнойКарте");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОтчетБанкаПоОперациямЭквайринга");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КомиссияПоЭквайрингу

			#Область КонвертацияВалюты
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КонвертацияВалюты";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Конвертация валюты'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Списание денежных средств при конвертации валюты'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КонвертацияВалюты

			#Область КонвертацияВалютыПодотчетнымЛицом
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КонвертацияВалютыПодотчетнымЛицом";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Конвертация валюты подотчетным лицом'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Конвертация валюты подотчетным лицом'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалютыПодотчетнымЛицом;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("АвансовыйОтчет");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КонвертацияВалютыПодотчетнымЛицом

			#Область ОплатаАрендодателю
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаАрендодателю";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата арендодателю'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаАрендодателю;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаАрендодателю

			#Область ОплатаДенежныхСредствВДругуюОрганизацию
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаДенежныхСредствВДругуюОрганизацию";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата ДС в другую организацию'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Оплата денежных средств в собственную организацию (Интеркампани)'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаДенежныхСредствВДругуюОрганизацию

			#Область ОплатаПодарочнымСертификатом
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаПодарочнымСертификатом";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата подарочным сертификатом'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПодарочнымСертификатом;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтчетОРозничныхПродажах");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаПодарочнымСертификатом

			#Область ОплатаПоставщику
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаПоставщику";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата поставщику'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаПоставщику

			#Область ОплатаПоставщикуПодотчетнымЛицом
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаПоставщикуПодотчетнымЛицом";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата поставщику подотчетным лицом'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщикуПодотчетнымЛицом;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("АвансовыйОтчет");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаПоставщикуПодотчетнымЛицом

			#Область ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение излишка при инвентаризации денежных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ИнвентаризацияНаличныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтражениеИзлишкаПриИнвентаризацииДенежныхСредств

			#Область ОтражениеИзлишкаПриИнкассацииДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтражениеИзлишкаПриИнкассацииДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение излишка при инкассации денежных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеИзлишкаПриИнкассацииДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтражениеРасхожденийПриИнкассацииДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтражениеИзлишкаПриИнкассацииДенежныхСредств

			#Область ОтражениеНедостачиПриИнвентаризацииДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтражениеНедостачиПриИнвентаризацииДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение недостачи при инвентаризации денежных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнвентаризацииДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ИнвентаризацияНаличныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтражениеНедостачиПриИнвентаризацииДенежныхСредств

			#Область ОтражениеНедостачиПриИнкассацииДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтражениеНедостачиПриИнкассацииДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение недостачи при инкассации денежных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеНедостачиПриИнкассацииДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтражениеРасхожденийПриИнкассацииДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтражениеНедостачиПриИнкассацииДенежныхСредств

			#Область ОтчетБанкаПоОперациямЭквайринга
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтчетБанкаПоОперациямЭквайринга";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет банка по операциям эквайринга'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетБанкаПоОперациямЭквайринга;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			
			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтчетБанкаПоОперациямЭквайринга");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтчетБанкаПоОперациямЭквайринга

			#Область ПеречислениеДенежныхСредствНаДругойСчет
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПеречислениеДенежныхСредствНаДругойСчет";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перечисление ДС на другой счет'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПеречислениеДенежныхСредствНаДругойСчет

			#Область ПеречислениеВБюджет
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПеречислениеВБюджет";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перечисление налога'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПеречислениеВБюджет

			#Область ПоступлениеДенежныхСредствИзБанка
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзБанка";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС из банка'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствИзБанка

			#Область ПоступлениеДенежныхСредствИзДругойКассы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзДругойКассы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС из другой кассы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствИзДругойКассы

			#Область ПоступлениеДенежныхСредствИзДругойОрганизации
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзДругойОрганизации";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС из другой организации'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Поступление денежных средств из собственной организации (Интеркампани)'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойОрганизации;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйОрдерНаТовары");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствИзДругойОрганизации

			#Область ПоступлениеДенежныхСредствИзКассыККМ
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзКассыККМ";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС из кассы ККМ'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствИзКассыККМ

			#Область ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС из кассы на расчетный счет'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет

			#Область ПоступлениеДенежныхСредствОтКонвертацииВалюты
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствОтКонвертацииВалюты";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС от конвертации валюты'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствОтКонвертацииВалюты;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствОтКонвертацииВалюты

			#Область ПоступлениеОплатыОтКлиентаПоПлатежнойКарте
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеОплатыОтКлиентаПоПлатежнойКарте";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС по эквайринговым операциям'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиентаПоПлатежнойКарте;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОперацияПоПлатежнойКарте");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОтчетОРозничныхПродажах");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеОплатыОтКлиентаПоПлатежнойКарте

			#Область ПоступлениеДенежныхСредствСДругогоСчета
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствСДругогоСчета";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС с другого счета'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствСДругогоСчета;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствСДругогоСчета

			#Область ПоступлениеОплатыОтКлиента
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеОплатыОтКлиента";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление оплаты от клиента'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтчетОРозничныхПродажах");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОперацияПоПлатежнойКарте");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеОплатыОтКлиента

			#Область ПоступлениеОплатыПоПлатежнойКарте
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеОплатыПоПлатежнойКарте";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление оплаты по эквайрингу'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Поступление денежных средств от эквайера'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеОплатыПоПлатежнойКарте

			#Область ПрочееПоступлениеДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочееПоступлениеДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочее поступление ДС'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочееПоступлениеДенежныхСредств

			#Область ПрочиеРасходыПодотчетногоЛица
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочиеРасходыПодотчетногоЛица";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие расходы подотчетного лица'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходыПодотчетногоЛица;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("АвансовыйОтчет");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочиеРасходыПодотчетногоЛица

			#Область ПрочаяВыдачаДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочаяВыдачаДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочий расход ДС'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочаяВыдачаДенежныхСредств

			#Область СдачаДенежныхСредствВБанк
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СдачаДенежныхСредствВБанк";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сдача ДС в банк'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СдачаДенежныхСредствВБанк

			#Область СнятиеНаличныхДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СнятиеНаличныхДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Снятие наличных ДС'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СнятиеНаличныхДенежныхСредств

			#Область ПеречислениеТаможне
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПеречислениеТаможне";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ДенежныеСредства;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Таможенный платеж'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Оплата таможенных пошлин и сборов'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПеречислениеТаможне

		#КонецОбласти //ДенежныеСредства

		#Область Дисконтирование
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "Дисконтирование";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Дисконтирование'", КодыЯзыков); // @НСтр-2

			#Область НачислениеПроцентовПоДисконтированию
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеПроцентовПоДисконтированию";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Дисконтирование;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление процентов по дисконтированию'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеПроцентовПоДисконтированию;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //НачислениеПроцентовПоДисконтированию

			#Область СписаниеПроцентовПоДисконтированию
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеПроцентовПоДисконтированию";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Дисконтирование;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание процентов по дисконтированию'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПроцентовПоДисконтированию;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //СписаниеПроцентовПоДисконтированию

		#КонецОбласти //Дисконтирование

		#Область КредитыИДепозиты
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "КредитыИДепозиты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Кредиты и депозиты'", КодыЯзыков); // @НСтр-2

			#Область ВводОстатковПоДоговорамКредитовИДепозитов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковПоДоговорамКредитовИДепозитов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков по договорам кредитов и депозитов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПоДоговорамКредитовИДепозитов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковПоДоговорамКредитовИДепозитов

			#Область ВыдачаЗаймов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыдачаЗаймов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выдача займа контрагенту'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Размещение денежных средств в форме выданных займов'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыдачаЗаймов

			#Область НачисленияПоДепозитам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачисленияПоДепозитам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисления по депозитам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Начисление процентов по депозитам'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоДепозитам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачисленияКредитовИДепозитов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //НачисленияПоДепозитам

			#Область НачисленияПоЗаймамВыданным
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачисленияПоЗаймамВыданным";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисления по займам выданным'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоЗаймамВыданным;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачисленияКредитовИДепозитов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //НачисленияПоЗаймамВыданным

			#Область НачисленияПоКредитам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачисленияПоКредитам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисления по кредитам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачисленияПоКредитам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачисленияКредитовИДепозитов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //НачисленияПоКредитам

			#Область ОплатаПроцентовПоКредитам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаПроцентовПоКредитам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплата процентов по кредитам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Оплата процентов по кредитам и займам полученным'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПроцентовПоКредитам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаПроцентовПоКредитам

			#Область ОплатаПоКредитам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОплатаПоКредитам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Оплаты по кредитам и займам полученным'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат основной суммы кредитов и займов полученных'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОплатаПоКредитам

			#Область ПеречислениеНаДепозиты
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПеречислениеНаДепозиты";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перечисление на депозиты'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Размещение денежных средств на депозитных счетах'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПеречислениеНаДепозиты

			#Область ПоступлениеДенежныхСредствПоЗаймамВыданным
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствПоЗаймамВыданным";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Погашение займа контрагентом'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат основной суммы займов выданных'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствПоЗаймамВыданным

			#Область ПоступлениеДенежныхСредствПоДепозитам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствПоДепозитам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление ДС по депозитам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныхСредств";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Денежные средства'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат основной суммы размещенных депозитов'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствПоДепозитам

			#Область ПоступлениеДенежныхСредствПоКредитам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеДенежныхСредствПоКредитам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление по кредитам и займам полученным'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Поступление основной суммы кредитов и займов полученных'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеДенежныхСредствПоКредитам

			#Область ПоступлениеПроцентовПоЗаймамВыданным
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеПроцентовПоЗаймамВыданным";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.КредитыИДепозиты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление процентов по займам выданным'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеПроцентовПоЗаймамВыданным;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеПроцентовПоЗаймамВыданным

		#КонецОбласти //КредитыИДепозиты

		#Область ПродажиМеждуОрганизациями
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПродажиМеждуОрганизациями";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Продажи между организациями'", КодыЯзыков); // @НСтр-2

			#Область ВозвратПоКомиссииМеждуОрганизациями
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратПоКомиссииМеждуОрганизациями";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат по комиссии между организациями'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВозвратТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачиТоваровМеждуОрганизациями";
			#КонецОбласти //ВозвратПоКомиссииМеждуОрганизациями

			#Область ВозвратТоваровМеждуОрганизациями
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратТоваровМеждуОрганизациями";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат товаров между организациями'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "Закупки";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВозвратТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачиТоваровМеждуОрганизациями";
			#КонецОбласти //ВозвратТоваровМеждуОрганизациями

			#Область ЗакупкаУДругойОрганизации
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ЗакупкаУДругойОрганизации";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закупка у другой организации'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "Закупки";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Закупки'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУДругойОрганизации;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПередачаТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ЗакупкаУДругойОрганизации

			#Область ОтчетПоКомиссииМеждуОрганизациями
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтчетПоКомиссииМеждуОрганизациями";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет по комиссии между организациями'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациями;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачиТоваровМеждуОрганизациями";
			#КонецОбласти //ОтчетПоКомиссииМеждуОрганизациями

			#Область ОтчетПоКомиссииМеждуОрганизациямиКомиссия
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтчетПоКомиссииМеждуОрганизациямиКомиссия";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет по комиссии между организациями (комиссионное вознаграждение)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациямиКомиссия;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ОтчетПоКомиссииМеждуОрганизациямиКомиссия

			#Область ОтчетПоКомиссииМеждуОрганизациямиОСписании
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтчетПоКомиссииМеждуОрганизациямиОСписании";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отчет по комиссии между организациями о списании'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетПоКомиссииМеждуОрганизациямиОСписании;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтчетПоКомиссииМеждуОрганизациямиОСписании");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачиТоваровМеждуОрганизациями";
			#КонецОбласти //ОтчетПоКомиссииМеждуОрганизациямиОСписании

			#Область ПередачаНаКомиссиюВДругуюОрганизацию
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПередачаНаКомиссиюВДругуюОрганизацию";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача на комиссию в другую организацию'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПередачаТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачиТоваровМеждуОрганизациями";
			#КонецОбласти //ПередачаНаКомиссиюВДругуюОрганизацию

			#Область РеализацияТоваровВДругуюОрганизацию
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеализацияТоваровВДругуюОрганизацию";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПродажиМеждуОрганизациями;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация товаров в другую организацию'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПередачаТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураВыданный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьПередачиТоваровМеждуОрганизациями";
			#КонецОбласти //РеализацияТоваровВДругуюОрганизацию

		#КонецОбласти //ПродажиМеждуОрганизациями

		#Область ПрочиеРасчеты
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ПрочиеРасчеты";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие расчеты'", КодыЯзыков); // @НСтр-2

			#Область ВзаимозачетДебиторскойЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВзаимозачетДебиторскойЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Взаимозачет дебиторской задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетДебиторскойЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВзаимозачетЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВзаимозачетДебиторскойЗадолженности

			#Область ВзаимозачетЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВзаимозачетЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Взаимозачет задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СчетФактураПолученныйАванс");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВзаимозачетЗадолженности

			#Область ВзаимозачетКредиторскойЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВзаимозачетКредиторскойЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Взаимозачет кредиторской задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВзаимозачетКредиторскойЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВзаимозачетЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВзаимозачетКредиторскойЗадолженности

			#Область НачислениеДебиторскойЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеДебиторскойЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление дебиторской задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеДебиторскойЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //НачислениеДебиторскойЗадолженности

			#Область НачислениеКредиторскойЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеКредиторскойЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление кредиторской задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеКредиторскойЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //НачислениеКредиторскойЗадолженности

			#Область НачислениеПоДоговоруАренды
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеПоДоговоруАренды";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление по договору аренды'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеПоДоговоруАренды;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ЗаключениеДоговораАренды");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураПолученный");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_2";
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
			#КонецОбласти //НачислениеПоДоговоруАренды

			#Область ПередачаПлатежаИзФилиала
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПередачаПлатежаИзФилиала";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача платежа из организации'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПлатежаИзФилиала;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПередачаПлатежаИзФилиала

			#Область ПереносАванса
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереносАванса";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перенос аванса'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносАванса;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВзаимозачетЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "НоваяАрхитектураВзаиморасчетов";
			#КонецОбласти //ПереносАванса

			#Область ПереносДолга
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереносДолга";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перенос долга'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносДолга;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВзаимозачетЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "НоваяАрхитектураВзаиморасчетов";
			#КонецОбласти //ПереносДолга

			#Область ПереносЗадолженностиМеждуФилиалами
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереносЗадолженностиМеждуФилиалами";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перенос задолженности между филиалами'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносЗадолженностиМеждуФилиалами;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //ПереносЗадолженностиМеждуФилиалами

			#Область ПереносПлатежаМеждуФилиалами
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереносПлатежаМеждуФилиалами";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Перенос платежа между филиалами'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереносПлатежаМеждуФилиалами;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //ПереносПлатежаМеждуФилиалами

			#Область ПоступлениеНМА
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеНМА";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление НМА и НИОКР'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеНМА;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеНМА

			#Область ПоступлениеОбъектовСтроительства
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеОбъектовСтроительства";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление объектов строительства'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОбъектовСтроительства;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеОбъектовСтроительства

			#Область ПоступлениеОС
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеОС";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление основных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОС;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеОС

			#Область ПоступлениеПрочихАктивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеПрочихАктивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление прочих активов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеПрочихАктивов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеПрочихАктивов

			#Область ПоступлениеПрочихУслуг
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПоступлениеПрочихУслуг";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Поступление прочих услуг'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеПрочихУслуг;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПоступлениеПрочихУслуг

			#Область ПриемПлатежаВФилиале
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПриемПлатежаВФилиале";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прием платежа в организации'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемПлатежаВФилиале;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПриемПлатежаВФилиале

			#Область РеализацияНМА
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеализацияНМА";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация НМА и НИОКР'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияНМА;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РеализацияНМА

			#Область РеализацияОС
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеализацияОС";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация основных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияОС;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РеализацияОС

			#Область РеализацияПрочихУслуг
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеализацияПрочихУслуг";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация прочих услуг'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПрочихУслуг;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РеализацияПрочихУслуг

			#Область РеализацияУслугПоАренде
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеализацияУслугПоАренде";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реализация услуг по аренде'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияУслугПоАренде;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РеализацияУслугПоАренде

			#Область СписаниеДебиторскойЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеДебиторскойЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание дебиторской задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженностиПоФинансовымИнструментам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеДебиторскойЗадолженности

			#Область СписаниеДебиторскойЗадолженностиНаАктивыПассивы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеДебиторскойЗадолженностиНаАктивыПассивы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание дебиторской задолженности на активы \ пассивы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженностиНаАктивыПассивы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеДебиторскойЗадолженностиНаАктивыПассивы

			#Область СписаниеДебиторскойЗадолженностиНаРасходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеДебиторскойЗадолженностиНаРасходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание дебиторской задолженности на расходы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженностиНаРасходы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеДебиторскойЗадолженностиНаРасходы

			#Область СписаниеКредиторскойЗадолженности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеКредиторскойЗадолженности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание кредиторской задолженности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженностиПоФинансовымИнструментам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеКредиторскойЗадолженности

			#Область СписаниеКредиторскойЗадолженностиВДоходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеКредиторскойЗадолженностиВДоходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ПрочиеРасчеты;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание кредиторской задолженности в доходы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженностиВДоходы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеКредиторскойЗадолженностиВДоходы

		#КонецОбласти //ПрочиеРасчеты

		#Область РасчетыПоЗарплате
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РасчетыПоЗарплате";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расчеты по зарплате'", КодыЯзыков); // @НСтр-2

			#Область ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Возврат по зарплатному проекту'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = НСтр("ru = 'Возврат по зарплатному проекту'", КодОсновногоЯзыка);
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту

			#Область ВыплатаЗарплаты
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыплатаЗарплаты";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата зарплаты'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;
			#КонецОбласти //ВыплатаЗарплаты

			#Область ВыплатаЗарплатыНаЛицевыеСчета
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыплатаЗарплатыНаЛицевыеСчета";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата зарплаты на лицевые счета'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыплатаЗарплатыНаЛицевыеСчета

			#Область ВыплатаЗарплатыПоЗарплатномуПроекту
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыплатаЗарплатыПоЗарплатномуПроекту";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата зарплаты по зарплатному проекту'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыплатаЗарплатыПоЗарплатномуПроекту

			#Область ВыплатаЗарплатыРаботнику
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыплатаЗарплатыРаботнику";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата зарплаты работнику'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаботнику;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыплатаЗарплатыРаботнику

			#Область ВыплатаЗарплатыРаздатчиком
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыплатаЗарплатыРаздатчиком";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата зарплаты раздатчиком'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыплатаЗарплатыРаздатчиком

			#Область ВыплатаЗарплатыЧерезКассу
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВыплатаЗарплатыЧерезКассу";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Выплата зарплаты через кассу'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВыплатаЗарплатыЧерезКассу

			#Область ДепонированиеЗарплаты
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ДепонированиеЗарплаты";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Депонирование зарплаты'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДепонированиеЗарплаты;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ДепонированиеЗарплаты");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ДепонированиеЗарплаты

			#Область УдержаниеИзЗарплатыВСчетРеализацииСотруднику
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "УдержаниеИзЗарплатыВСчетРеализацииСотруднику";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удержание из зарплаты в счет реализации сотруднику'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеИзЗарплатыВСчетРеализацииСотруднику;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //УдержаниеИзЗарплатыВСчетРеализацииСотруднику

			#Область УдержаниеИзЗарплатыСотрудника
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "УдержаниеИзЗарплатыСотрудника";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РасчетыПоЗарплате;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Удержание из зарплаты сотрудника'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдержаниеИзЗарплатыСотрудника;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //УдержаниеИзЗарплатыСотрудника

		#КонецОбласти //РасчетыПоЗарплате

		#Область РезервыПоСомнительнымДолгам
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "РезервыПоСомнительнымДолгам";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Резервы по сомнительным долгам'", КодыЯзыков); // @НСтр-2

			#Область ВосстановлениеРезервовПоСомнительнымДолгам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВосстановлениеРезервовПоСомнительнымДолгам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РезервыПоСомнительнымДолгам;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление резервов по сомнительным долгам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеРезервовПоСомнительнымДолгам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачислениеСписаниеРезервовПоСомнительнымДолгам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //ВосстановлениеРезервовПоСомнительнымДолгам

			#Область НачислениеРезервовПоСомнительнымДолгам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеРезервовПоСомнительнымДолгам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РезервыПоСомнительнымДолгам;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление резервов по сомнительным долгам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеРезервовПоСомнительнымДолгам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачислениеСписаниеРезервовПоСомнительнымДолгам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //НачислениеРезервовПоСомнительнымДолгам

			#Область НачислениеСписаниеРезервовПоСомнительнымДолгам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеСписаниеРезервовПоСомнительнымДолгам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РезервыПоСомнительнымДолгам;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление списание резервов по сомнительным долгам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеСписаниеРезервовПоСомнительнымДолгам;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачислениеСписаниеРезервовПоСомнительнымДолгам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //НачислениеСписаниеРезервовПоСомнительнымДолгам

			#Область ПрисоединениеРезервовПоСомнительнымДолгамКДоходам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрисоединениеРезервовПоСомнительнымДолгамКДоходам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РезервыПоСомнительнымДолгам;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Присоединение резервов по сомнительным долгам к доходам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеРезервовПоСомнительнымДолгамКДоходам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачислениеСписаниеРезервовПоСомнительнымДолгам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //ПрисоединениеРезервовПоСомнительнымДолгамКДоходам

			#Область ПрисоединениеРезервовПоСомнительнымДолгамКРасходам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрисоединениеРезервовПоСомнительнымДолгамКРасходам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РезервыПоСомнительнымДолгам;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Присоединение резервов по сомнительным долгам к расходам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеРезервовПоСомнительнымДолгамКРасходам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачислениеСписаниеРезервовПоСомнительнымДолгам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //ПрисоединениеРезервовПоСомнительнымДолгамКРасходам

			#Область СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.РезервыПоСомнительнымДолгам;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание безнадежной задолженности за счет резервов по сомнительным долгам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентКонтрагент";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Контрагент'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженностиПоФинансовымИнструментам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("КорректировкаЗадолженности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьРезервыПоСомнительнымДолгам";
			#КонецОбласти //СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам

		#КонецОбласти //РезервыПоСомнительнымДолгам

		#Область ФинансовыйРезультат
		Элемент = Элементы.Добавить();  // см. СтрокаТЧПредопреденногоЭлемента
		Элемент.ИмяПредопределенныхДанных = "ФинансовыйРезультат";
		Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.Финансы;
		МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Финансовый результат'", КодыЯзыков); // @НСтр-2

			#Область АмортизацияВнеоборотныхАктивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "АмортизацияВнеоборотныхАктивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Амортизация внеоборотных активов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.АмортизацияВнеоборотныхАктивов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("АмортизацияНМАМеждународныйУчет");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("АмортизацияОСМеждународныйУчет");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //АмортизацияВнеоборотныхАктивов

			#Область ВводОстатковПрочихРасходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВводОстатковПрочихРасходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Ввод остатков прочих расходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПрочихРасходов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВводОстатковПрочихРасходов

			#Область ВключениеИсключениеНДСВСтоимости
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВключениеИсключениеНДСВСтоимости";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Включение исключение НДС в стоимости'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВключениеИсключениеНДСВСтоимости;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ВключениеИсключениеНДСВСтоимости

			#Область ВнутреннееПоступлениеРасходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВнутреннееПоступлениеРасходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Внутреннее поступление расходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеРасходов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ВнутреннееПоступлениеРасходов
			
			#Область ВосстановлениеРезервовПодОбесценениеЗапасов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ВосстановлениеРезервовПодОбесценениеЗапасов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Восстановление резервов под обесценение запасов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВосстановлениеРезервовПодОбесценениеЗапасов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьРезервыПодОбесценениеЗапасов";
			#КонецОбласти //ВосстановлениеРезервовПодОбесценениеЗапасов

			#Область ДвижениеАктивовПассивовЗаСчетАктивовПассивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ДвижениеАктивовПассивовЗаСчетАктивовПассивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Движение активов/пассивов за счет активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДвижениеАктивовПассивовЗаСчетАктивовПассивов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ДвижениеПрочихАктивовПассивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ДвижениеАктивовПассивовЗаСчетАктивовПассивов

			#Область ДвижениеДоходовЗаСчетАктивовПассивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ДвижениеДоходовЗаСчетАктивовПассивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Движение доходов за счет активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДвижениеДоходовЗаСчетАктивовПассивов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ДвижениеПрочихАктивовПассивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ДвижениеДоходовЗаСчетАктивовПассивов

			#Область ДвижениеРасходовЗаСчетАктивовПассивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ДвижениеРасходовЗаСчетАктивовПассивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Движение расходов за счет активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДвижениеРасходовЗаСчетАктивовПассивов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ДвижениеПрочихАктивовПассивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ДвижениеРасходовЗаСчетАктивовПассивов

			#Область ДоходыОтПереоценкиТоваров
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ДоходыОтПереоценкиТоваров";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Доходы от переоценки товаров'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДоходыОтПереоценкиТоваров;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетСебестоимостиТоваров");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ДоходыОтПереоценкиТоваров

			#Область ЗакрытиеМесяца
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ЗакрытиеМесяца";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Закрытие месяца'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакрытиеМесяца;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ЗакрытиеМесяца

			#Область КурсовыеРазницыИнвестицииВАрендуПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыИнвестицииВАрендуПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы инвестиции в аренду (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыИнвестицииВАрендуПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //КурсовыеРазницыИнвестицииВАрендуПрибыль

			#Область КурсовыеРазницыИнвестицииВАрендуУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыИнвестицииВАрендуУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы инвестиции в аренду (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыИнвестицииВАрендуУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //КурсовыеРазницыИнвестицииВАрендуУбыток

			#Область КурсовыеРазницыДСПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыДСПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по денежным средствам (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыДСПрибыль

			#Область КурсовыеРазницыДСУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыДСУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по денежным средствам (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыДСУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыДСУбыток

			#Область КурсовыеРазницыДепозитыПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыДепозитыПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по депозитам (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыДепозитыПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыДепозитыПрибыль

			#Область КурсовыеРазницыДепозитыУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыДепозитыУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по депозитам (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыДепозитыУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыДепозитыУбыток

			#Область КурсовыеРазницыПоДисконтированиюПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыПоДисконтированиюПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по дисконтированию (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоДисконтированиюПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыПоДисконтированиюПрибыль

			#Область КурсовыеРазницыПоДисконтированиюУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыПоДисконтированиюУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по дисконтированию (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоДисконтированиюУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыПоДисконтированиюУбыток

			#Область КурсовыеРазницыЗаймыВыданныеПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыЗаймыВыданныеПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по займам выданным (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыЗаймыВыданныеПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыЗаймыВыданныеПрибыль

			#Область КурсовыеРазницыЗаймыВыданныеУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыЗаймыВыданныеУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по займам выданным (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыЗаймыВыданныеУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыЗаймыВыданныеУбыток

			#Область КурсовыеРазницыКредитыИЗаймыПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыКредитыИЗаймыПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по кредитам и займам (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКредитыИЗаймыПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыКредитыИЗаймыПрибыль

			#Область КурсовыеРазницыКредитыИЗаймыУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыКредитыИЗаймыУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по кредитам и займам (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКредитыИЗаймыУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыКредитыИЗаймыУбыток

			#Область КурсовыеРазницыАрендаПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыАрендаПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с арендодателями (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыАрендаПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_2";
			#КонецОбласти //КурсовыеРазницыАрендаПрибыль

			#Область КурсовыеРазницыАрендаУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыАрендаУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с арендодателями (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыАрендаУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_2";
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьВнеоборотныеАктивы2_4";
			#КонецОбласти //КурсовыеРазницыАрендаУбыток

			#Область КурсовыеРазницыКлиентыПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыКлиентыПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с клиентами (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыКлиентыПрибыль

			#Область КурсовыеРазницыКлиентыУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыКлиентыУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с клиентами (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыКлиентыУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыКлиентыУбыток

			#Область КурсовыеРазницыПоставщикиПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыПоставщикиПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с поставщиками (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыПоставщикиПрибыль

			#Область КурсовыеРазницыПоставщикиУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыПоставщикиУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с поставщиками (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыПоставщикиУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыПоставщикиУбыток

			#Область КурсовыеРазницыРасчетыПоКомиссииПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыРасчетыСКомитентомПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с комитентом/комиссионером (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыРасчетыСКомитентомПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыРасчетыСКомитентомПрибыль

			#Область КурсовыеРазницыРасчетыПоКомиссииУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыРасчетыСКомитентомУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы по расчетам с комитентом/комиссионером (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыРасчетыСКомитентомУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //КурсовыеРазницыРасчетыСКомитентомУбыток

			#Область КурсовыеРазницыРезервыПоДолгамПрибыль
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыРезервыПоДолгамПрибыль";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы резервы по сомнительным долгам (прибыль)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыРезервыПоДолгамПрибыль;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //КурсовыеРазницыРезервыПоДолгамПрибыль

			#Область КурсовыеРазницыРезервыПоДолгамУбыток
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "КурсовыеРазницыРезервыПоДолгамУбыток";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Курсовые разницы резервы по сомнительным долгам (убыток)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияКонтрагентДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Контрагент - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Контрагенты;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КурсовыеРазницыРезервыПоДолгамУбыток;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //КурсовыеРазницыРезервыПоДолгамУбыток

			#Область НачислениеДивидендов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеДивидендов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление дивидендов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеДивидендов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("НачислениеДивидендов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьРеглУчет";
			#КонецОбласти //НачислениеДивидендов

			#Область НачислениеРезерваПодОбесценениеЗапасов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "НачислениеРезерваПодОбесценениеЗапасов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Начисление резерва под обесценение запасов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.НачислениеРезерваПодОбесценениеЗапасов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьРезервыПодОбесценениеЗапасов";
			#КонецОбласти //НачислениеРезерваПодОбесценениеЗапасов

			#Область ОтклонениеВСтоимостиТоваровДоходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтклонениеВСтоимостиТоваровДоходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отклонение в стоимости товаров (Доходы)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтклонениеВСтоимостиТоваровДоходы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ВозвратТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ВозвратТоваровПоставщику");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтклонениеВСтоимостиТоваровДоходы

			#Область ОтклонениеВСтоимостиТоваровРасходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтклонениеВСтоимостиТоваровРасходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отклонение в стоимости товаров (Расходы)'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтклонениеВСтоимостиТоваровРасходы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //ОтклонениеВСтоимостиТоваровРасходы

			#Область ОтражениеПрочихАктивовПассивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтражениеПрочихАктивовПассивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение прочих активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеПрочихАктивовПассивов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //ОтражениеПрочихАктивовПассивов

			#Область ОтражениеРасходовЗаСчетПрочихАктивовПассивов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ОтражениеРасходовЗаСчетПрочихАктивовПассивов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Отражение расходов за счет прочих активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтражениеРасходовЗаСчетПрочихАктивовПассивов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ЗаключениеДоговораАренды");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ОтражениеРасходовЗаСчетПрочихАктивовПассивов

			#Область ПередачаПрочихРасходовМеждуФилиалами
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПередачаПрочихРасходовМеждуФилиалами";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Передача прочих расходов между филиалами'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПрочихРасходовМеждуФилиалами;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПередачаПрочихРасходовМеждуФилиалами

			#Область ПереоценкаДенежныхСредств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаДенежныхСредств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка денежных средств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаДенежныхСредств;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПереоценкаДенежныхСредств

			#Область ПереоценкаРасчетовПоАренде
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаРасчетовПоАренде";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка расчетов по аренде'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовПоАренде;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьНесколькоВалют";
			#КонецОбласти //ПереоценкаРасчетовПоАренде

			#Область ПереоценкаРасчетовСКлиентами
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаРасчетовСКлиентами";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка расчетов с клиентами'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПереоценкаРасчетовСКлиентами

			#Область ПереоценкаРасчетовСКомитентомКомиссионером
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаРасчетовСКомитентом";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка расчетов с комитентом/комиссионером'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКомитентом;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПереоценкаРасчетовСКомитентом

			#Область ПереоценкаРасчетовСПоставщиками
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаРасчетовСПоставщиками";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка расчетов с поставщиками'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПереоценкаРасчетовСПоставщиками

			#Область ПереоценкаРезервовПоСомнительнымДолгам
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаРезервовПоСомнительнымДолгам";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка резервов по сомнительным долгам'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРезервовПоСомнительнымДолгам;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьНесколькоВалют";
			#КонецОбласти //ПереоценкаРезервовПоСомнительнымДолгам

			#Область ПереоценкаСуммДисконтирования
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаСуммДисконтирования";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка сумм дисконтирования'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаСуммДисконтирования;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПереоценкаСуммДисконтирования

			#Область ПереоценкаФинансовыхИнструментов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПереоценкаФинансовыхИнструментов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Переоценка финансовых инструментов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаФинансовыхИнструментов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетКурсовыхРазниц");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПереоценкаФинансовыхИнструментов

			#Область ПересортицаПартийТоваров
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПересортицаПартийТоваров";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Пересортица партий товаров'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаПартийТоваров;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетСебестоимостиТоваров");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПересортицаПартийТоваров

			#Область ПрочиеДоходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочиеДоходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие доходы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПоступлениеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочиеДоходы

			#Область ПрочиеДоходыАктивыПассивы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочиеДоходыАктивыПассивы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие доходы за счет прочих активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеДоходыАктивыПассивы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочиеДоходыАктивыПассивы

			#Область ПрочиеРасходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочиеРасходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие расходы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДенежныеСредстваДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Денежные средства - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДенежныеСредства;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочиеРасходы

			#Область ПрочиеРасходыАктивыПассивы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ПрочиеРасходыАктивыПассивы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Прочие расходы за счет прочих активов/пассивов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочиеРасходыАктивыПассивы;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //ПрочиеРасходыАктивыПассивы

			#Область РаспределениеДоходовПоНаправлениямДеятельности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РаспределениеДоходовПоНаправлениямДеятельности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение доходов по направлениям деятельности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеДоходовПоНаправлениямДеятельности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РаспределениеДоходовПоНаправлениямДеятельности");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РаспределениеДоходовПоНаправлениямДеятельности

			#Область РаспределениеРБП
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РаспределениеРБП";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение расходов будущих периодов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеРБП;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РаспределениеРасходовБудущихПериодов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РаспределениеРБП

			#Область РаспределениеРасходовНаСебестоимость
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РаспределениеРасходовНаСебестоимость";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение расходов на себестоимость'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимость;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете2_5");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("НачислениеОценочныхОбязательствПоОтпускам");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("АвансовыйОтчет");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ВозвратТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОтражениеЗарплатыВФинансовомУчете");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПередачаТоваровМеждуОрганизациями");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриобретениеТоваровУслуг");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПриобретениеУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РаспределениеРасходовБудущихПериодов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РасходныйКассовыйОрдер");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СписаниеБезналичныхДенежныхСредств");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("СчетФактураНалоговыйАгент");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ТаможеннаяДекларацияИмпорт");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РаспределениеПрочихЗатрат");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РаспределениеРасходовНаСебестоимость

			#Область РаспределениеРасходовНаСебестоимостьПродаж
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РаспределениеРасходовНаСебестоимостьПродаж";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение расходов на себестоимость продаж'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимостьПродаж;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("АктВыполненныхРабот");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("КорректировкаРеализации");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ОтчетДавальцу");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РеализацияТоваровУслуг");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РеализацияУслугПрочихАктивов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РаспределениеРасходовНаСебестоимостьПродаж

			#Область РаспределениеРасходовНаСебестоимостьПроизводства
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РаспределениеРасходовНаСебестоимостьПроизводства";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение расходов на себестоимость производства'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеРасходовНаСебестоимостьПроизводства;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РаспределениеПрочихЗатрат");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РаспределениеРасходовНаСебестоимостьПроизводства

			#Область РаспределениеРасходовПоНаправлениямДеятельности
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РаспределениеРасходовПоНаправлениямДеятельности";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Распределение расходов по направлениям деятельности'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РаспределениеРасходовПоНаправлениямДеятельности;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //РаспределениеРасходовПоНаправлениямДеятельности

			#Область РасходыОтПереоценкиТоваров
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РасходыОтПереоценкиТоваров";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Расходы от переоценки товаров'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураДоходыРасходы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Доходы/Расходы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РасходыОтПереоценкиТоваров;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РасчетСебестоимостиТоваров");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РасходыОтПереоценкиТоваров

			#Область РеклассификацияДолгосрочныхАктивовОбязательств
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеклассификацияДолгосрочныхАктивовОбязательств";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реклассификация долгосрочных активов и обязательств'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияДолгосрочныхАктивовОбязательств;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //РеклассификацияДолгосрочныхАктивовОбязательств

			#Область РеклассификацияДоходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеклассификацияДоходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реклассификация доходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияДоходов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РеклассификацияДоходов

			#Область РеклассификацияРасходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "РеклассификацияРасходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Реклассификация расходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеклассификацияРасходов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //РеклассификацияРасходов

			#Область СписаниеОшибокОкругления
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеОшибокОкругления";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание ошибок округления'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОшибокОкругления;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //СписаниеОшибокОкругления

			#Область СписаниеОшибокОкругленияВозвратныеОтходы
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеОшибокОкругленияВозвратныеОтходы";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание ошибок округления возвратные отходы'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеОшибокОкругленияВозвратныеОтходы;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //СписаниеОшибокОкругленияВозвратныеОтходы

			#Область СписаниеПрочихДоходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеПрочихДоходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание прочих доходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПрочихДоходов;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //СписаниеПрочихДоходов

			#Область СписаниеПрочихРасходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеПрочихРасходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание прочих расходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПрочихРасходов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ПрочиеДоходыРасходы");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			#КонецОбласти //СписаниеПрочихРасходов

			#Область СписаниеРасходовНаПартииПроизводства
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеРасходовНаПартииПроизводства";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание расходов на партии производства'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияНоменклатураНоменклатура";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Номенклатура - Номенклатура'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Истина;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("ЭтапПроизводства2_2");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("ПроизводствоБезЗаказа");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РаспределениеВозвратныхОтходов");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РаспределениеПроизводственныхЗатрат");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;
			Документ = Метаданные.Документы.Найти("РаспределениеПрочихЗатрат");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУправлениеПроизводством2_2";
			#КонецОбласти //СписаниеРасходовНаПартииПроизводства

			#Область СписаниеРезервовПодОбесценениеЗапасов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СписаниеРезервовПодОбесценениеЗапасов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Списание резервов под обесценение запасов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ВыручкаИСебестоимостьПродаж";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Выручка и себестоимость продаж'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.Номенклатура;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРезервовПодОбесценениеЗапасов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ФормироватьРезервыПодОбесценениеЗапасов";
			#КонецОбласти //СписаниеРезервовПодОбесценениеЗапасов

			#Область СторнированиеПрочихДоходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СторнированиеПрочихДоходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторнирование прочих доходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихДоходов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //СторнированиеПрочихДоходов

			#Область СторнированиеПрочихРасходов
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СторнированиеПрочихРасходов";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторнирование прочих расходов'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ПрочиеАктивыПассивы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторнированиеПрочихРасходов;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Истина;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;

			#КонецОбласти //СторнированиеПрочихРасходов

			#Область СторноПроизводственныхЗатрат
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "СторноПроизводственныхЗатрат";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Сторно производственных затрат'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "";
			Элемент.ПредставлениеИсточникаДанных = "";
			Элемент.Описание = "";
			Элемент.Приход = Неопределено;
			Элемент.Расход = Неопределено;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПроизводственныхЗатрат;
			Элемент.ИспользоватьВБюджетировании = Ложь;
			Элемент.ИспользоватьВМеждународномУчете = Ложь;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Ложь;
			#КонецОбласти //СторноПроизводственныхЗатрат

			#Область ТранзитРасходовМеждуОВЗ
			Элемент = Элементы.Добавить(); // см. СтрокаТЧПредопреденногоЭлемента
			Элемент.ИмяПредопределенныхДанных = "ТранзитРасходовМеждуОВЗ";
			Элемент.Родитель = Справочники.НастройкиХозяйственныхОпераций.ФинансовыйРезультат;
			МультиязычностьСервер.ЗаполнитьМультиязычныйРеквизит(Элемент, "Наименование", "ru = 'Транзит расходов между объектами возникновения затрат'", КодыЯзыков); // @НСтр-2
			Элемент.ИсточникДанных = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
			Элемент.ПредставлениеИсточникаДанных = НСтр("ru = 'Движения Доходы/Расходы - Прочие активы/пассивы'", КодОсновногоЯзыка);
			Элемент.Описание = "";
			Элемент.Приход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.Расход = Перечисления.ТипыДанныхУчета.ДоходыРасходы;
			Элемент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ТранзитРасходовМеждуОВЗ;
			Элемент.ИспользоватьВБюджетировании = Истина;
			Элемент.ИспользоватьВМеждународномУчете = Истина;
			Элемент.ИспользоватьДляВыбора = Ложь;
			Элемент.ИспользоватьВРеестреДокументов = Ложь;
			Элемент.ИспользоватьДляОграниченийДоступа = Истина;

			Элемент.Документы = ТабличныеЧасти.Документы.Скопировать();
			Документ = Метаданные.Документы.Найти("РаспределениеПрочихЗатрат");
			Если Документ <> Неопределено Тогда
				ЭлементТЧ = Элемент.Документы.Добавить();
				ЭлементТЧ.ИмяДокумента = Документ.Имя;
				НайденнаяСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Документ.ПолноеИмя());
				ЭлементТЧ.ИдентификаторОбъектаМетаданных = НайденнаяСсылка;
			КонецЕсли;

			Элемент.ФункциональныеОпции = ТабличныеЧасти.ФункциональныеОпции.Скопировать();
			ЭлементТЧ = Элемент.ФункциональныеОпции.Добавить();
			ЭлементТЧ.ИмяФункциональнойОпции = "ИспользоватьУчетПоОбъектамВозникновенияЗатрат";
			#КонецОбласти //ТранзитРасходовМеждуОВЗ

		#КонецОбласти //ФинансовыйРезультат

	#КонецОбласти //Финансы

КонецПроцедуры

// Вызывается при начальном заполнении создаваемого элемента.
//
// Параметры:
//  Объект                  - СправочникОбъект.НастройкиХозяйственныхОпераций - заполняемый объект.
//  Данные                  - СтрокаТаблицыЗначений - данные заполнения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
Процедура ПриНачальномЗаполненииЭлемента(Объект, Данные, ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьСервер.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, Метаданные.Справочники.НастройкиХозяйственныхОпераций);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецЕсли

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	// СтандартныеПодсистемы.БазоваяФункциональность
	МультиязычностьКлиентСервер.ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка);
	// Конец СтандартныеПодсистемы.БазоваяФункциональность
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращаемое значение:
// СправочникОбъект.НастройкиХозяйственныхОпераций, Структура - Содержит колонкти ТЧ:
// * ПоказателиРегистра - ТаблицаЗначений - 
// * Документы - ТаблицаЗначений -
// * ФункциональныеОпции - ТаблицаЗначений - 
Функция СтрокаТЧПредопреденногоЭлемента() Экспорт
	
	Возврат Новый Структура;
	
КонецФункции

#Область ОбработчикЗаполнения

Процедура ЗаполнитьПредопределенныеЭлементыПоДанымИзКода()
	Языки = ЯзыкиКонфигурации();
	МетаданныеОбъекта = Метаданные.Справочники.НастройкиХозяйственныхОпераций;
	
	ЛокализуемыеРеквизитыОбъекта = НаименованияЛокализуемыхРеквизитыОбъекта(МетаданныеОбъекта);
	ПредопределенныеДанные = ПредопределенныеДанныеОбъекта(МетаданныеОбъекта, ЛокализуемыеРеквизитыОбъекта);
	
	МультиязычныеСтрокиВРеквизитах = МультиязычныеСтрокиВРеквизитах(МетаданныеОбъекта);
	ПоддерживаетсяИерархия =  ПредопределенныеДанные.Колонки.Найти("ЭтоГруппа") <> Неопределено;
	
	ИзмененныеИсточникиДанных = Неопределено;
	
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить("ПоказателиРегистра");
	ТабличныеЧасти.Добавить("Документы");
	ТабличныеЧасти.Добавить("ФункциональныеОпции");
	Для Каждого ДанныеЭлемента Из ПредопределенныеДанные Цикл
		ЭлементСсылка = Справочники.НастройкиХозяйственныхОпераций[ДанныеЭлемента.ИмяПредопределенныхДанных];
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
		СписокРеквизитов = "Родитель,ИмяПредопределенныхДанных,Наименование";
		Если НЕ ЭлементОбъект.ЭтоГруппа Тогда
			СписокРеквизитов = СписокРеквизитов + ",ИсточникДанных,ПредставлениеИсточникаДанных,Приход,Расход,Описание,ХозяйственнаяОперация,ИспользоватьВБюджетировании,ИспользоватьВМеждународномУчете,ИспользоватьДляВыбора,ИспользоватьВРеестреДокументов,ИспользоватьДляОграниченийДоступа";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ЭлементОбъект, ДанныеЭлемента, СписокРеквизитов);
		Если НЕ ЭлементОбъект.ЭтоГруппа Тогда
			Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
				ЭлементОбъект[ИмяТЧ].Загрузить(ДанныеЭлемента[ИмяТЧ]);
			КонецЦикла;
		КонецЕсли;
		Если ЛокализуемыеРеквизитыОбъекта.Количество() > 0 Тогда
			Если МультиязычныеСтрокиВРеквизитах Тогда
				
				КодЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
				Если ЗначениеЗаполнено(КодЯзыка) Тогда
					Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
						ЭлементОбъект[ИмяЛокализуемогоРеквизита.Ключ] = ДанныеЭлемента[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
					КонецЦикла;
				КонецЕсли;
				
				КодЯзыка = МультиязычностьСервер.КодПервогоДополнительногоЯзыкаИнформационнойБазы();
				Если ЗначениеЗаполнено(КодЯзыка) Тогда
					Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
						ЭлементОбъект[ИмяЛокализуемогоРеквизита.Ключ + "Язык1"] = ДанныеЭлемента[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
					КонецЦикла;
				КонецЕсли;
				
				КодЯзыка = МультиязычностьСервер.КодВторогоДополнительногоЯзыкаИнформационнойБазы();
				Если ЗначениеЗаполнено(КодЯзыка) Тогда
					Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
						ЭлементОбъект[ИмяЛокализуемогоРеквизита.Ключ + "Язык2"] = ДанныеЭлемента[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли НЕ (ПоддерживаетсяИерархия И ЭлементОбъект.ЭтоГруппа) Тогда
				
				Для каждого КодЯзыка Из Языки Цикл
					Представления = ЭлементОбъект.Представления; // ТабличнаяЧасть - 
					НовоеПредставление = Представления.Добавить();
					НовоеПредставление.КодЯзыка = КодЯзыка;
					Для каждого ИмяЛокализуемогоРеквизита Из ЛокализуемыеРеквизитыОбъекта Цикл
						Значение = ДанныеЭлемента[ИмяЛокализуемогоРеквизита.Ключ + "_" + КодЯзыка];
						НовоеПредставление[ИмяЛокализуемогоРеквизита.Ключ] = ?(ЗначениеЗаполнено(Значение), Значение, ДанныеЭлемента[ИмяЛокализуемогоРеквизита.Ключ]);
					КонецЦикла;
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ИзмененныеИсточникиДанных) = Тип("Соответствие") Тогда
			ПараметрыИсточникаДанных = ИзмененныеИсточникиДанных.Получить(ЭлементСсылка);
			Если ТипЗнч(ПараметрыИсточникаДанных) = Тип("Структура") Тогда
				Если ПараметрыИсточникаДанных.Свойство("ИспользоватьВБюджетировании") Тогда
					ЭлементОбъект.ИспользоватьВБюджетировании = ПараметрыИсточникаДанных.ИспользоватьВБюджетировании;
				КонецЕсли;
				Если ПараметрыИсточникаДанных.Свойство("Приход") Тогда
					ЭлементОбъект.Приход = ?(ТипЗнч(ПараметрыИсточникаДанных.Приход) = Тип("Структура"), ПараметрыИсточникаДанных.Приход.Новый, ПараметрыИсточникаДанных.Приход);
				КонецЕсли;
				Если ПараметрыИсточникаДанных.Свойство("Расход") Тогда
					ЭлементОбъект.Расход = ?(ТипЗнч(ПараметрыИсточникаДанных.Расход) = Тип("Структура"), ПараметрыИсточникаДанных.Расход.Новый, ПараметрыИсточникаДанных.Расход);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Возвращает предобределенные даные объекта
// 
// Параметры:
// 	МетаданныеОбъекта - ОбъектМетаданныхСправочник - Метаданные заполняемого справочника
//  ЛокализуемыеРеквизиты - Соответствие, Неопределено - Локализуемые реквизиты
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Предопределенные данные объекта
//
Функция ПредопределенныеДанныеОбъекта(МетаданныеОбъекта, ЛокализуемыеРеквизиты = Неопределено) Экспорт
	
	КодыЯзыков = ЯзыкиКонфигурации();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеОбъекта.ПолноеИмя());
	Если Не ЗначениеЗаполнено(ЛокализуемыеРеквизиты) Тогда
		ЛокализуемыеРеквизиты = НаименованияЛокализуемыхРеквизитыОбъекта(МетаданныеОбъекта);
	КонецЕсли;
	ПредопределенныеДанные = Новый ТаблицаЗначений;
	ТабличныеЧасти = Новый Структура;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизиты, КодыЯзыков);
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизиты, КодыЯзыков);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		
		ПредопределенныеДанные.Колонки.Добавить(ТабличнаяЧасть.Имя, Новый ОписаниеТипов("ТаблицаЗначений"));
		Таблица = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из ТабличнаяЧасть.СтандартныеРеквизиты Цикл
			ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизиты, КодыЯзыков);
		КонецЦикла;
		
		Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
			ДобавитьКолонкуТаблицыПредопределенныхДанных(Таблица, Реквизит, ЛокализуемыеРеквизиты, КодыЯзыков);
		КонецЦикла;
		ТабличныеЧасти.Вставить(ТабличнаяЧасть.Имя, Таблица);
		
	КонецЦикла;
	
	Если ПредопределенныеДанные.Колонки.Найти("ИмяПредопределенныхДанных") <> Неопределено Тогда
		ПредопределенныеДанные.Индексы.Добавить("ИмяПредопределенныхДанных");
	КонецЕсли;
	
	МенеджерОбъекта.ПриНачальномЗаполненииЭлементов(КодыЯзыков, ПредопределенныеДанные, ТабличныеЧасти);
	Возврат ПредопределенныеДанные;
	
КонецФункции

#Область МультиязычностьСервер

Функция ЯзыкиКонфигурации()
	
	Языки = Новый Массив;
	Для каждого Язык Из Метаданные.Языки Цикл
		Языки.Добавить(Язык.КодЯзыка);
	КонецЦикла;
	Возврат Языки;

КонецФункции

Функция МультиязычныеСтрокиВРеквизитах(ОбъектМетаданных) Экспорт
	Возврат ОбъектМетаданных.ТабличныеЧасти.Найти("Представления") = Неопределено;
КонецФункции

// Параметры:
// 	ОбъектМетаданных - ОбъектМетаданныхСправочник - Описание
// 	Префикс - Строка - Описание
// Возвращаемое значение:
// 	Соответствие - Описание
Функция НаименованияЛокализуемыхРеквизитыОбъекта(ОбъектМетаданных, Префикс = "")
	
	СписокРеквизитовОбъекта = Новый Соответствие;
	Если МультиязычныеСтрокиВРеквизитах(ОбъектМетаданных) Тогда
	
		ДлинаСуффиксаЯзыка = СтрДлина("Язык1");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 0
		|	*
		|ИЗ
		|	&ПолноеИмя";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПолноеИмя", ОбъектМетаданных.ПолноеИмя());
		РезультатЗапроса = Запрос.Выполнить();
		
		Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
			Если СтрЗаканчиваетсяНа(Колонка.Имя, "Язык1") Или СтрЗаканчиваетсяНа(Колонка.Имя, "Язык2") Тогда
				СписокРеквизитовОбъекта.Вставить(Префикс + Лев(Колонка.Имя, СтрДлина(Колонка.Имя) - ДлинаСуффиксаЯзыка), Истина);
			КонецЕсли;
		КонецЦикла;
	Иначе
		
		Реквизиты = ОбъектМетаданных.ТабличныеЧасти.Представления.Реквизиты; // КоллекцияКолонокТаблицыЗначений - 
		Для каждого Реквизит Из Реквизиты Цикл
			Если СтрСравнить(Реквизит.Имя, "КодЯзыка") = 0 Тогда
				Продолжить;
			КонецЕсли;
			СписокРеквизитовОбъекта.Вставить(Префикс + Реквизит.Имя, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписокРеквизитовОбъекта;
	
КонецФункции

Процедура ДобавитьКолонкуТаблицыПредопределенныхДанных(ПредопределенныеДанные, Реквизит, ЛокализуемыеРеквизиты, Языки)
	
	Если ЛокализуемыеРеквизиты[Реквизит.Имя] = Истина Тогда
		ПредопределенныеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип, ПризнакЛокализуемогоРеквизита());
		Для каждого Язык Из Языки Цикл
			ПредопределенныеДанные.Колонки.Добавить(Реквизит.Имя + "_" + Язык, Реквизит.Тип, ПризнакЛокализуемогоРеквизита());
		КонецЦикла;
	Иначе
		Если ЭтоЛокализуемыйРеквизит(Реквизит) Тогда
			ИмяБезСуффикса = ИмяБезСуффиксаЯзык(Реквизит);
			ЛокализуемыеРеквизиты.Вставить(ИмяБезСуффикса, Истина);
			Для каждого Язык Из Языки Цикл
				ПредопределенныеДанные.Колонки.Добавить(ИмяБезСуффикса + "_" + Язык, Реквизит.Тип, ПризнакЛокализуемогоРеквизита());
			КонецЦикла;
		Иначе
			ПредопределенныеДанные.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция ИмяБезСуффиксаЯзык(Знач Реквизит)
	
	Возврат Лев(Реквизит.Имя, СтрДлина(Реквизит.Имя) - СтрДлина("Язык1"));

КонецФункции

Функция ЭтоЛокализуемыйРеквизит(Реквизит)
	Возврат СтрЗаканчиваетсяНа(Реквизит.Имя, "Язык1") Или СтрЗаканчиваетсяНа(Реквизит.Имя, "Язык2");
КонецФункции

Функция ПризнакЛокализуемогоРеквизита()
	Возврат "Локализуемый";
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ЗаполнитьОбработчикиРазделенныхДанных

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьОбработчикиРазделенныхДанных";
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.УправлениеОбработчиками = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

#Область ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	Обработчик.Версия = "*";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cd45225d-f1f6-4a31-a02a-c00bf89351c1");
	Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов справочника  ""Настройки хозяйственных операций"" согласно заданным настройкам в текстовых макетах.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.НастройкиХозяйственныхОпераций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

КонецПроцедуры

// Заполняет обработчик разделенных данных, зависимый от изменения неразделенных данных.
//
// Параметры:
//   Параметры - Структура - структура параметров обработчиков:
//     * РазделенныеОбработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
// 
Процедура ЗаполнитьОбработчикиРазделенныхДанных(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено Тогда
		Обработчики = Параметры.РазделенныеОбработчики;
		Обработчик = Обработчики.Добавить();
		Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
		Обработчик.Версия = "*";
		Обработчик.РежимВыполнения = "Оперативно";
		Обработчик.Идентификатор = Новый УникальныйИдентификатор("cd45225d-f1f6-4a31-a02a-c00bf89351c1");
		Обработчик.Комментарий = НСтр("ru = 'Обновляет реквизиты предопределенных элементов справочника  ""Настройки хозяйственных операций"" согласно заданным настройкам в текстовых макетах.'");
		
		Изменяемые = Новый Массив;
		Изменяемые.Добавить(Метаданные.Справочники.НастройкиХозяйственныхОпераций.ПолноеИмя());
		Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик первого запуска.
// Заполняет предопределенные элементы справочника "НастройкиХозяйственныхОпераций".
//
Процедура ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций(Параметры = Неопределено) Экспорт
	
	ЗаполнитьПредопределенныеЭлементыПоДанымИзКода();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

