#Область ПрограммныйИнтерфейс

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Функция возвращает по идентификатору устройства его параметры.
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//
// Возвращаемое значение:
//  Структура.
//
Функция ПараметрыУстройства(Идентификатор) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ОфлайнОборудование.Параметры КАК ХранилищеЗначения
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ОфлайнОборудование
	|ГДЕ
	|	ОфлайнОборудование.Ссылка = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Неопределено;	
	ХранилищеПараметры = Выборка.ХранилищеЗначения;
	Если ТипЗнч(ХранилищеПараметры) = Тип("ХранилищеЗначения") Тогда
		Результат = ХранилищеПараметры.Получить();
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// Процедура предназначена для сохранения параметров устройства
// в реквизит Параметры типа хранилище значения в элементе справочника.
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//  Параметры - Структура - параметры устройства.
//
// Возвращаемое значение:
//  Булево.
//
Функция СохранитьПараметрыУстройства(Идентификатор, Параметры) Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ОфлайнОборудование.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ОфлайнОборудование КАК ОфлайнОборудование
	                      |ГДЕ
	                      |	ОфлайнОборудование.Ссылка = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ОфлайнОборудование
		
		ОбъектСправочника.Заблокировать();
		ОбъектСправочника.Параметры = Новый ХранилищеЗначения(Параметры);
		
		Если Параметры.Свойство("ВидТранспортаОфлайнОбмена") Тогда
			ОбъектСправочника.ВидТранспортаОфлайнОбмена = Параметры.ВидТранспортаОфлайнОбмена;
		КонецЕсли;
		
		Если Параметры.Свойство("ИдентификаторWebСервисОборудования") Тогда
			ОбъектСправочника.ИдентификаторWebСервисОборудования = Параметры.ИдентификаторWebСервисОборудования;
		КонецЕсли;
		
		ОбъектСправочника.Записать();
		Результат = Истина;
		
		ОбновитьПовторноИспользуемыеЗначения();
		
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;

КонецФункции

// Функция возвращает структуру с данными устройства
// (со значениями реквизитов элемента справочника).
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//
// Возвращаемое значение:
//  Структура:
//   * Ссылка - СправочникСсылка.ОфлайнОборудование
//   * Наименование - Строка
//   * ОбработчикОфлайнОборудования - ПеречислениеСсылка.ОбработчикиОфлайнОборудования
//   * Параметры - Структура
//   * РабочееМесто - СправочникСсылка.РабочиеМеста
//   * ИмяКомпьютера - Строка
//
Функция ДанныеУстройства(Идентификатор) Экспорт

	ДанныеУстройства = Новый Структура();

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОфлайнОборудование.Ссылка КАК Ссылка,
	                      |	ОфлайнОборудование.Наименование КАК Наименование,
	                      |	ОфлайнОборудование.РабочееМесто КАК РабочееМесто,
	                      |	ОфлайнОборудование.Параметры КАК ХранилищеЗначения,
	                      |	РабочиеМеста.ИмяКомпьютера КАК ИмяКомпьютера,
	                      |	ОфлайнОборудование.ОбработчикОфлайнОборудования КАК ОбработчикОфлайнОборудования
	                      |ИЗ
	                      |	Справочник.ОфлайнОборудование КАК ОфлайнОборудование
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	                      |		ПО ОфлайнОборудование.РабочееМесто = РабочиеМеста.Ссылка
	                      |ГДЕ
	                      |	ОфлайнОборудование.Ссылка = &Идентификатор");
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		// Заполним структуру данных устройства.
		ДанныеУстройства.Вставить("Ссылка"                      , Выборка.Ссылка);
		ДанныеУстройства.Вставить("Наименование"                , Выборка.Наименование);
		ДанныеУстройства.Вставить("ОбработчикОфлайнОборудования", Выборка.ОбработчикОфлайнОборудования);
		ДанныеУстройства.Вставить("РабочееМесто"                , Выборка.РабочееМесто);
		ДанныеУстройства.Вставить("ИмяКомпьютера"               , Выборка.ИмяКомпьютера);
		ДанныеУстройства.Вставить("Параметры"                   , Новый Структура());
		ХранилищеПараметры = Выборка.ХранилищеЗначения;
		Если ТипЗнч(ХранилищеПараметры) = Тип("ХранилищеЗначения") Тогда
			ДанныеУстройства.Вставить("Параметры", ХранилищеПараметры.Получить());
		КонецЕсли;
		
		Если ТипЗнч(ДанныеУстройства.Параметры) = Тип("Структура") Тогда
			ДанныеУстройства.Параметры.Вставить("Идентификатор", Выборка.Ссылка); 
		КонецЕсли;
	КонецЕсли;
		
	Возврат ДанныеУстройства;
	
КонецФункции

// Функция возвращает список подключенного в справочнике ПО
//
// Параметры:
//  Идентификатор - СправочникСсылка.ОфлайнОборудование - экземпляр офлайн оборудования.
//  РабочееМесто - СправочникСсылка.РабочиеМеста - рабочее место клиента
// Возвращаемое значение:
//  Массив.
// 
Функция ОборудованиеПоПараметрам(Идентификатор = Неопределено, РабочееМесто = Неопределено) Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОфлайнОборудование.Ссылка КАК Ссылка,
	|	ОфлайнОборудование.ИдентификаторУстройства КАК ИдентификаторУстройства,
	|	ОфлайнОборудование.Наименование КАК Наименование,
	|	ОфлайнОборудование.ОбработчикОфлайнОборудования КАК ОбработчикОфлайнОборудования,
	|	ОфлайнОборудование.РабочееМесто КАК РабочееМесто,
	|	ОфлайнОборудование.Параметры КАК ХранилищеЗначения,
	|	РабочиеМеста.ИмяКомпьютера КАК ИмяКомпьютера
	|ИЗ
	|	Справочник.ОфлайнОборудование КАК ОфлайнОборудование
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РабочиеМеста КАК РабочиеМеста
	|		ПО (РабочиеМеста.Ссылка = ОфлайнОборудование.РабочееМесто)
	|ГДЕ
	|	(ОфлайнОборудование.УстройствоИспользуется)";
		// Добавим в текст запроса условия-фильтры переданные в параметрах вызова.
		Если Идентификатор <> Неопределено Тогда
		// Добавим в текст запроса фильтр по конкретному устройству (имеет приоритет над другими фильтрами).
		ТекстЗапроса = ТекстЗапроса + "
		  |	И (ОфлайнОборудование.РабочееМесто <> ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка))
		  |	И ОфлайнОборудование.Ссылка = &Идентификатор";
		КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|	И (НЕ ОфлайнОборудование.ПометкаУдаления)";
	
	// Добавим полученное условие отбора к тексту запроса.
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование;";

	Запрос = Новый Запрос(ТекстЗапроса);
	
	// Установим параметры запроса (фильтрующие выборку значения).
	Если Идентификатор = Неопределено Тогда
		// То используется фильтр по рабочему месту.
		Если НЕ ЗначениеЗаполнено(РабочееМесто) Тогда
			// Если РМ не задано в параметрах, то всегда текущее из параметров сеанса.
			РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
		КонецЕсли;

		Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
	Иначе // Фильтр по конкретному устройству.
		Если ТипЗнч(Идентификатор) = Тип("Структура") И Идентификатор.Свойство("ИдентификаторУстройства") Тогда
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор.ИдентификаторУстройства);
		Иначе
			Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
		КонецЕсли;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	// Перебирая выборку составляем список устройств.
	СписокОборудования = Новый Массив();
	Пока Выборка.Следующий() Цикл
		// Заполним структуру данных устройства.
		ДанныеУстройства = Новый Структура();
		ДанныеУстройства.Вставить("Ссылка"                    , Выборка.Ссылка);
		
		ДанныеУстройства.Вставить("ИдентификаторУстройства"     , Выборка.ИдентификаторУстройства);
		ДанныеУстройства.Вставить("Наименование"                , Выборка.Наименование);
		ДанныеУстройства.Вставить("ОбработчикОфлайнОборудования", Выборка.ОбработчикОфлайнОборудования);
		ДанныеУстройства.Вставить("Параметры"                   , Новый Структура());
		ДанныеУстройства.Вставить("РабочееМесто"                , Выборка.РабочееМесто);
		ДанныеУстройства.Вставить("ИмяКомпьютера"               , Выборка.ИмяКомпьютера);
		ХранилищеПараметры = Выборка.ХранилищеЗначения;
		Если ТипЗнч(ХранилищеПараметры) = Тип("ХранилищеЗначения") Тогда
			ДанныеУстройства.Вставить("Параметры", ХранилищеПараметры.Получить());
		КонецЕсли;
		
		Если ТипЗнч(ДанныеУстройства.Параметры) = Тип("Структура") Тогда
			ДанныеУстройства.Параметры.Вставить("Идентификатор", Выборка.Ссылка);
		КонецЕсли;
		СписокОборудования.Добавить(ДанныеУстройства);
	КонецЦикла;
	
	// Возвращаем полученный список с данными всех найденных устройств.
	Возврат СписокОборудования;
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом
// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Менеджер = "Справочник.ОчередьЧековККТ";
	МенеджерОборудованияВызовСервераПереопределяемый.ПриЗаполненииОграниченияДоступа(Менеджер, Ограничение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецЕсли

#КонецОбласти