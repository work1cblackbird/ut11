#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
	
		Если Параметры = Неопределено Тогда
			Параметры = Новый Структура();
		КонецЕсли;
		
		Параметры.Вставить("РежимВыбора", Истина);
		
		ВыбраннаяФорма       = "Справочник.МестаПримененияСАТУРН.Форма.ФормаСписка";
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОрганизацииВладельцыМестаПрименения(МестоПрименения) Экспорт
	
	МассивВладельцев = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	КлассификаторОрганизацийСАТУРНМестаПрименения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КлассификаторОрганизацийСАТУРН.МестаПрименения КАК КлассификаторОрганизацийСАТУРНМестаПрименения
		|ГДЕ
		|	НЕ КлассификаторОрганизацийСАТУРНМестаПрименения.Ссылка.ПометкаУдаления
		|	И КлассификаторОрганизацийСАТУРНМестаПрименения.МестоПрименения = &МестоПрименения";
	
	Запрос.УстановитьПараметр("МестоПрименения", МестоПрименения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивВладельцев.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивВладельцев;
	
КонецФункции

Функция ДанныеОбъекта(ЭлементДанных) Экспорт
	
	ДанныеМестаПрименения = Новый Структура;
	
	ДанныеМестаПрименения.Вставить("GUID",          ЭлементДанных.sys_guid);
	ДанныеМестаПрименения.Вставить("Идентификатор", ЭлементДанных.id);
	ДанныеМестаПрименения.Вставить("Статус",        ИнтерфейсСАТУРН.Статус(ЭлементДанных.lcState));
	ДанныеМестаПрименения.Вставить("ДатаСоздания",  ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементДанных.sys_timeFrom));
	ДанныеМестаПрименения.Вставить("ДатаИзменения", ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементДанных.sys_changedAt));
	
	ДанныеМестаПрименения.Вставить("Наименование",                ЭлементДанных.name);
	ДанныеМестаПрименения.Вставить("НаименованиеСубъектаРФ",      ЭлементДанных.subName);
	ДанныеМестаПрименения.Вставить("ОКТМО",                       ЭлементДанных.oktmo);
	ДанныеМестаПрименения.Вставить("КадастровыйНомер",            ЭлементДанных.cadNum);
	ДанныеМестаПрименения.Вставить("ИдентификаторКонтураЕФИСЗСН", ЭлементДанных.efisId);
	ДанныеМестаПрименения.Вставить("ПлощадьКонтураВГектарах",     Число(ЭлементДанных.area));
	ДанныеМестаПрименения.Вставить("ГеографическиеКоординаты",    ЭлементДанных.location);
	ДанныеМестаПрименения.Вставить("Комментарий",                 ЭлементДанных.description);

	ДанныеМестаПрименения.Вставить("ПоднадзорныйОбъектНомерОбъекта",                ЭлементДанных.uco_objectNumber);
	ДанныеМестаПрименения.Вставить("ПоднадзорныйОбъектНомерПлощадки",               ЭлементДанных.uco_areaNumber);
	ДанныеМестаПрименения.Вставить("ПоднадзорныйОбъектТип",                         ЭлементДанных.uco_objectType);
	ДанныеМестаПрименения.Вставить("ПоднадзорныйОбъектРазрешенныеВидыДеятельности", ЭлементДанных.uco_allowedActions_csv);
	
	// инициализация значений, которые могут отсутствовать в структуре данных
	ДанныеМестаПрименения.Вставить("КадастровыйНомерРайона", "");
	ДанныеМестаПрименения.Вставить("ГеографическаяФорма",    Неопределено);
	
	Если ЭлементДанных.Свойство("cadRegNum") Тогда
		
		ДанныеМестаПрименения.Вставить("КадастровыйНомерРайона",      ЭлементДанных.cadRegNum);
	
	КонецЕсли;
	
	Если ЭлементДанных.Свойство("geoForm") Тогда
		
		ДанныеМестаПрименения.Вставить("ГеографическаяФорма",         ЭлементДанных.geoForm);
	
	КонецЕсли;
	
	Если ТипЗнч(ЭлементДанных.managingContractorId) = Тип("Структура") Тогда
		
		Если ЭлементДанных.managingContractorId.Свойство("id") Тогда
			
			ДанныеМестаПрименения.Вставить("ИдентификаторОрганизации", ЭлементДанных.managingContractorId.id);
			ДанныеМестаПрименения.Вставить("ДанныеОрганизации",        ЭлементДанных.managingContractorId);
			
		ИначеЕсли ЭлементДанных.managingContractorId.Свойство("_id") Тогда
			
			ДанныеМестаПрименения.Вставить("ИдентификаторОрганизации", ЭлементДанных.managingContractorId._id);
			ДанныеМестаПрименения.Вставить("ДанныеОрганизации",        ЭлементДанных.managingContractorId);
			
		КонецЕсли;
		
	Иначе
		
		ДанныеМестаПрименения.Вставить("ИдентификаторОрганизации", ЭлементДанных.managingContractorId);
		
	КонецЕсли;
	
	Возврат ДанныеМестаПрименения;
	
КонецФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	Если ЭлементОчереди.Операция = ОперацияЗагрузкиКлассификатора() Тогда
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		Попытка
			
			Для Каждого ЭлементДанных Из ВходящиеДанные Цикл
				
				ДанныеОбъекта   = ДанныеОбъекта(ЭлементДанных);
				СсылкаНаЭлемент = ЗагрузитьОбъект(ДанныеОбъекта, ПараметрыОбмена,,, ЭлементОчереди.ОрганизацияСАТУРН);
				
				Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
					Продолжить;
				КонецЕсли;
				ИзмененныеОбъекты.Добавить(СсылкаНаЭлемент);
				
			КонецЦикла;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ОперацияЗагрузкиКлассификатора() Экспорт
	Возврат Перечисления.ВидыОперацийСАТУРН.МестоПримененияЗапросКлассификатора;
КонецФункции

#Область ПоискСсылок

Функция МестоПрименения(Идентификатор, ПараметрыОбмена, ОрганизацияСАТУРН = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Идентификатор)
		Или Идентификатор = -1 Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ИмяТаблицы       = Метаданные.Справочники.МестаПримененияСАТУРН.ПолноеИмя();
	СправочникСсылка = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		ИнтеграцияСАТУРНСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
	Иначе
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		
		ТранзакцияЗафиксирована = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникСсылка = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
			
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
				ДанныеОбъекта = ИнтеграцияСАТУРНСлужебный.ДанныеОбъекта(
					Идентификатор,
					Метаданные.Справочники.МестаПримененияСАТУРН, ПараметрыОбмена);
				Если ДанныеОбъекта = Неопределено Тогда
					СправочникСсылка = СоздатьМестоПрименения(Идентификатор, ПараметрыОбмена);
					ИнтеграцияСАТУРНСлужебный.ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, ОрганизацияСАТУРН);
				Иначе
					СправочникСсылка = ЗагрузитьОбъект(ДанныеОбъекта, ПараметрыОбмена,, Ложь, ОрганизацияСАТУРН);
				КонецЕсли;
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТранзакцияЗафиксирована = Ложь;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при создании Места применения с идентификатором %1:
				           |%2'"),
				Идентификатор,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'Ошибка при создании Места применения с идентификатором %1:
				           |%2'"),
				Идентификатор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ТекстОшибкиПодробно,
				НСтр("ru = 'Работа с Местами применения'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована Тогда
			ИнтеграцияСАТУРНСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ЗагрузитьОбъект(ДанныеМестаПрименения, ПараметрыОбмена, СправочникОбъект = Неопределено, ТребуетсяПоиск = Истина, ОрганизацияСАТУРН = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ДанныеМестаПрименения = Неопределено Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ЗаписьНового = Ложь;
	ИмяТаблицы   = Метаданные.Справочники.МестаПримененияСАТУРН.ПолноеИмя();
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, ДанныеМестаПрименения.Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникОбъект = СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			
			ИдентификаторОбъекта = Новый УникальныйИдентификатор();
			СправочникСсылка = ПолучитьСсылку(ИдентификаторОбъекта);
			СправочникОбъект.УстановитьСсылкуНового(СправочникСсылка);

			ЗаписьНового = Истина;
			
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
	
	Иначе
		СправочникСсылка = СправочникОбъект.Ссылка;
	КонецЕсли;
	
	Если Не ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Наименование           = ДанныеМестаПрименения.Наименование;
	СправочникОбъект.Идентификатор          = ДанныеМестаПрименения.Идентификатор;
	СправочникОбъект.Статус                 = ДанныеМестаПрименения.Статус;
	СправочникОбъект.НаименованиеСубъектаРФ = ДанныеМестаПрименения.НаименованиеСубъектаРФ;
	СправочникОбъект.КадастровыйНомер       = ДанныеМестаПрименения.КадастровыйНомер;
	СправочникОбъект.Комментарий            = ДанныеМестаПрименения.Комментарий;
	
	Если ЗначениеЗаполнено(ДанныеМестаПрименения.ИдентификаторОрганизации) Тогда
		
		Организация       = Справочники.КлассификаторОрганизацийСАТУРН.Организация(ДанныеМестаПрименения.ИдентификаторОрганизации, ПараметрыОбмена);
		ОрганизацияОбъект = Организация.ПолучитьОбъект();
		
		СтруктураОтбора = Новый Структура("МестоПрименения", СправочникСсылка);
		СтрокаСвязкиОрганизацииСМестомПрименения = ОрганизацияОбъект.МестаПрименения.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокаСвязкиОрганизацииСМестомПрименения.Количество() = 0 Тогда
			
			НоваяСтрокаПривязки = ОрганизацияОбъект.МестаПрименения.Добавить();
			НоваяСтрокаПривязки.МестоПрименения = СправочникСсылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();
	
	ОрганизацияОбъект.Записать();
	
	ИнтеграцияСАТУРНСлужебный.ОбновитьСсылку(
		ПараметрыОбмена,
		ИмяТаблицы,
		ДанныеМестаПрименения.Идентификатор,
		СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Функция СоздатьМестоПрименения(Идентификатор, ПараметрыОбмена)
	
	СправочникОбъект = СоздатьЭлемент();
	СправочникОбъект.Идентификатор     = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.Наименование      = НСтр("ru = '<Требуется загрузка>'");
	
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли