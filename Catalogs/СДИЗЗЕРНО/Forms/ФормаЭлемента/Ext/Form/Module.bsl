#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СДИЗЗЕРНО"
		И (Источник = Объект.Ссылка
			ИЛИ (ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("Ссылка")
				И Параметр.Ссылка = Объект.Ссылка)) Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "Запись_КлючиРеквизитовОрганизацийЗЕРНО" Тогда
		
		Отбор = Новый Структура("Перевозчик", Параметр);
		НайденныеСтроки = РеквизитыФормыПеревозчиков.НайтиСтроки(Отбор);
		Если Объект.Грузоотправитель = Параметр
			Или Объект.Грузополучатель = Параметр
			Или Объект.Покупатель = Параметр
			Или Объект.Продавец = Параметр
			Или Объект.УполномоченноеЛицо = Параметр
			Или НайденныеСтроки.Количество() Тогда
		
			Прочитать();
		
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "Запись_КлючиАдресовЗЕРНО" Тогда

		Если Объект.ПунктНазначения = Источник
			Или Объект.ПунктОтправления = Источник
			Или (ТипЗнч(Параметр) = Тип("Структура")
				И Параметр.Свойство("Ссылка")
				И (Параметр.Ссылка = Объект.ПунктНазначения Или Параметр.Ссылка = Объект.ПунктОтправления)) Тогда
		
			Прочитать();
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НадписьСвязанныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормыРедактированияСвязанныхДокументов(ТипЗнч(Объект.Ссылка));
	ПараметрыФормы.ТолькоПросмотр = Истина;
	
	Для Каждого СтрокаТаблицы Из Объект.СвязанныеДокументы Цикл
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("ПервичныйДокумент", СтрокаТаблицы.ПервичныйДокумент);
		ПараметрыФормы.ДанныеДокументов.Добавить(ДанныеДокумента);
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Объект.СвязанныеДокументыПрочие Цикл
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("ПервичныйДокумент", СтрокаТаблицы.ПервичныйДокумент);
		ПараметрыФормы.ДанныеДокументов.Добавить(ДанныеДокумента);
	КонецЦикла;
	
	ОткрытьФорму(
		"ОбщаяФорма.СвязанныеДокументыЗЕРНО",
		ПараметрыФормы, 
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ГиперссылкаДанныеПеревозчикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьТранспортныеСредства" Тогда
		
		РеквизитыПеревозчика = РеквизитыФормыПеревозчиков.НайтиСтроки(
			Новый Структура("ИмяПоляНадписьТранспортныеСредства", Элемент.Имя));
		Если РеквизитыПеревозчика.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Перевозчик = РеквизитыПеревозчика[0].Перевозчик;
		
		ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыУказанияТранспортныхСредств();
		ПараметрыОткрытияФормы.Перевозчик     = Перевозчик;
		ПараметрыОткрытияФормы.РежимОткрытия  = "ТранспортныеСредства";
		ПараметрыОткрытияФормы.ТолькоПросмотр = Истина;
		
		Отбор = Новый Структура("Перевозчик", Перевозчик);
		СтрокиДанных = Объект.ТранспортныеСредства.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
			СтрокаДанных = Новый Структура();
			СтрокаДанных.Вставить("Перевозчик");
			СтрокаДанных.Вставить("ТипТранспорта");
			СтрокаДанных.Вставить("НомерТранспортногоСредства");
			СтрокаДанных.Вставить("НомерАвтомобильногоКонтейнера");
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
			ПараметрыОткрытияФормы.ТранспортныеСредства.Добавить(СтрокаДанных);
		КонецЦикла;
		
		ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуУказанияТранспортныхСредств(ПараметрыОткрытияФормы, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьМестаПерегрузки" Тогда
		
		РеквизитыПеревозчика = РеквизитыФормыПеревозчиков.НайтиСтроки(
			Новый Структура("ИмяПоляНадписьМестаПерегрузки", Элемент.Имя));
		Если РеквизитыПеревозчика.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Перевозчик = РеквизитыПеревозчика[0].Перевозчик;
		
		Отбор = Новый Структура("Перевозчик", Перевозчик);
		СтрокиДанных = Объект.МестаПерегрузки.НайтиСтроки(Отбор);
		
		МассивМестаПерегрузки = Новый Массив();
		
		Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
			СтрокаДанных = Новый Структура();
			СтрокаДанных.Вставить("Перевозчик");
			СтрокаДанных.Вставить("Адрес");
			ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
			СтрокаДанных.Вставить("АдресСтрокой", Строка(СтрокаТаблицы.Адрес));
			МассивМестаПерегрузки.Добавить(СтрокаДанных);
		КонецЦикла;
		
		ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыУказанияТранспортныхСредств();
		ПараметрыОткрытияФормы.Перевозчик      = Перевозчик;
		ПараметрыОткрытияФормы.РежимОткрытия   = "МестаПерегрузки";
		ПараметрыОткрытияФормы.ТолькоПросмотр  = Истина;
		ПараметрыОткрытияФормы.МестаПерегрузки = МассивМестаПерегрузки;
		
		ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуУказанияТранспортныхСредств(ПараметрыОткрытияФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректируетСДИЗОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "КорректируемыйСДИЗ" Тогда
		
		Если Не ЗначениеЗаполнено(Объект.КорректируемыйСДИЗ) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, Объект.КорректируемыйСДИЗ);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АктуальнаяВерсияСДИЗОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "АктуальныйСДИЗ" Тогда
		
		Если Не ЗначениеЗаполнено(АктуальнаяВерсияСДИЗ) Тогда
			Возврат;
		КонецЕсли;
		
		ПоказатьЗначение(, АктуальнаяВерсияСДИЗ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияПогашений

&НаКлиенте
Процедура ИсторияПогашенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИсторияПогашенийОбработкаВыбора(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияОтказаПогашений

&НаКлиенте
Процедура ИсторияОтказаПогашенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИсторияПогашенийОбработкаВыбора(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ЗапросСДИЗЗавершение = Новый ОписаниеОповещения("АннулироватьСДИЗЗавершение", ЭтотОбъект);
	ИнтеграцияЗЕРНОСлужебныйКлиент.АннулироватьСДИЗ(Объект.Ссылка, ЭтотОбъект, ЗапросСДИЗЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЧерезБраузер(Команда)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторФГИС)Тогда 
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
			ИнтеграцияЗЕРНОКлиентСервер.ПутьКСерверуСИнформациейПоСДИЗ(Объект.ИдентификаторФГИС, Объект.ВидПродукции));
	Иначе 
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Идентификатор СДИЗ не заполнен!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Погасить(Команда)
	
	ОткрытьФорму("Документ.ПогашениеСДИЗЗЕРНО.ФормаОбъекта",
		Новый Структура("Основание", Объект.Ссылка), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьСДИЗ(Команда)
	
	ЗапросСДИЗЗавершение = Новый ОписаниеОповещения("Подключаемый_ЗапросСДИЗЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыЗапросаСправочника();
	ПараметрыФормы.СсылкаНаОбъект = Объект.Ссылка;
	ПараметрыФормы.ВидПродукции   = Объект.ВидПродукции;
	ПараметрыФормы.Идентификатор  = Объект.Идентификатор;
	ПараметрыФормы.ВидЗапроса     = 1;
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуЗапросаСправочника(ПараметрыФормы, ЭтотОбъект, ЗапросСДИЗЗавершение);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьСДИЗ(Команда)
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуСозданияДокумента(
		"Документ.ОформлениеСДИЗЗерно",
		Объект.Ссылка,
		ЭтотОбъект,,
		Истина);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура КорректироватьПогашениеСДИЗ(Команда)
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуСозданияДокумента(
		"Документ.ПогашениеСДИЗЗЕРНО",
		Объект.Ссылка,
		ЭтотОбъект,,
		Истина);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АннулироватьСДИЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапросСДИЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЗаполнитьСлужебныеРеквизиты();
	НастроитьЭлементыФормыПревозчиков();
	НастроитьЭлементыФормы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты()
	
	Представление = СтрШаблон(НСтр("ru='СДИЗ (%1), номер:'"), НРег(Объект.Статус));
	
	ЦветГиперссылкиОбычный     = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветГиперссылкиОсобыйТекст = ЦветаСтиля.ЦветОсобогоТекста;
	
	Если ЗначениеЗаполнено(Объект.Партия) Тогда
		РеквизитыПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Партия, "ОКПД2,КодТНВЭД");
		ОКПД2    = РеквизитыПартии.ОКПД2;
		КодТНВЭД = РеквизитыПартии.КодТНВЭД;
	КонецЕсли;
	
	НаименованияОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(ОКПД2);
	Если НаименованияОКПД2.Количество() Тогда
		ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
			НаименованияОКПД2[0].Наименование, ОКПД2);
	КонецЕсли;
	
	ЗаполнитьИсториюПогашений();
	
	КоличествоТекущее = Объект.Количество - КоличествоПогашено - КоличествоОтказПогашения;
	
	Если ЗначениеЗаполнено(Объект.РеестровыйНомерПолучателя) Тогда
		ЭлеваторПолучатель = Справочники.РеестрЭлеваторовЗЕРНО.НайтиПоРеквизиту("Идентификатор", Объект.РеестровыйНомерПолучателя);
	КонецЕсли;
	
	ЗаполнитьДанныеКорректировок();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсториюПогашений()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ,
		|	ИсторияПогашенийСДИЗЗЕРНО.НомерПартии,
		|	ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО,
		|	ИсторияПогашенийСДИЗЗЕРНО.Причина,
		|	ИсторияПогашенийСДИЗЗЕРНО.ОписаниеПричины,
		|	ИсторияПогашенийСДИЗЗЕРНО.Статус,
		|	ИсторияПогашенийСДИЗЗЕРНО.ПолноеПогашение,
		|	ИсторияПогашенийСДИЗЗЕРНО.ИдентификаторЗаявки,
		|	ИсторияПогашенийСДИЗЗЕРНО.ДатаОперации,
		|	ИсторияПогашенийСДИЗЗЕРНО.ВидОперации,
		|	РеестрПартийЗЕРНО.Ссылка КАК Партия
		|ИЗ
		|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
		|		ПО ИсторияПогашенийСДИЗЗЕРНО.НомерПартии = РеестрПартийЗЕРНО.Идентификатор
		|ГДЕ
		|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ = &СДИЗ
		|УПОРЯДОЧИТЬ ПО
		| ДатаОперации";
	
	Запрос.УстановитьПараметр("СДИЗ", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ИсторияПогашений.Очистить();
	ИсторияПогашенийКоличество         = 0;
	ИсторияОтказаПогашенияКоличество   = 0;
	КоличествоПогашено                 = 0;
	КоличествоОтказПогашения           = 0;
	ИсторияПогашенийКоличествоАктивных = 0;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НоваяСтрока = ИсторияПогашений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		Если НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ Тогда
			ИсторияПогашенийКоличество = ИсторияПогашенийКоличество + 1;
			Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыЗаписейЗЕРНО.Подписано Тогда
				КоличествоПогашено = КоличествоПогашено + ВыборкаДетальныеЗаписи.КоличествоЗЕРНО;
				ИсторияПогашенийКоличествоАктивных = ИсторияПогашенийКоличествоАктивных + 1;
			КонецЕсли;
		ИначеЕсли НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ Тогда
			ИсторияОтказаПогашенияКоличество = ИсторияОтказаПогашенияКоличество + 1;
			Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыЗаписейЗЕРНО.Подписано Тогда
				КоличествоОтказПогашения = КоличествоОтказПогашения + ВыборкаДетальныеЗаписи.КоличествоЗЕРНО;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеКорректировок()
	
	Если ЗначениеЗаполнено(Объект.КорректируемыйСДИЗ) Тогда
		
		Элементы.КорректируетСДИЗ.Видимость = Истина;
		
		НомерКорректируемогоСДИЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КорректируемыйСДИЗ, "Идентификатор");
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Данный СДИЗ корректирует СДИЗ'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НомерКорректируемогоСДИЗ,,,, "КорректируемыйСДИЗ"));
		
		Элементы.КорректируетСДИЗ.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
	Иначе
		Элементы.КорректируетСДИЗ.Видимость = Ложь;
	КонецЕсли;
	
	АктуальнаяВерсияСДИЗ = Справочники.СДИЗЗЕРНО.АктуальнаяВерсияКорректировочногоДокументаСДИЗ(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(АктуальнаяВерсияСДИЗ) Тогда
		
		Элементы.АктуальнаяВерсияСДИЗ.Видимость = Истина;
		
		НомерАктуальногоСДИЗ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АктуальнаяВерсияСДИЗ, "Идентификатор");
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Данный СДИЗ был скорректирован. Актуальная версия документа -'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НомерАктуальногоСДИЗ,,,, "АктуальныйСДИЗ"));
		
		Элементы.АктуальнаяВерсияСДИЗ.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
	Иначе
		Элементы.АктуальнаяВерсияСДИЗ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормыПревозчиков()
	
	Перевозчики          = ИнтеграцияЗЕРНОКлиентСервер.УникальныеПеревозчики(ЭтотОбъект);
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты   = Новый Массив();
	УдаляемыеЭлементы    = Новый Массив();
	
	Для Каждого СтрокаТаблицы Из РеквизитыФормыПеревозчиков Цикл
		УдаляемыеРеквизиты.Добавить(СтрокаТаблицы.ИмяПоляПеревозчик);
		УдаляемыеРеквизиты.Добавить(СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства);
		УдаляемыеРеквизиты.Добавить(СтрокаТаблицы.ИмяПоляНадписьПеревозчик);
		УдаляемыеРеквизиты.Добавить(СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки);
		
		УдаляемыеЭлементы.Добавить(СтрокаТаблицы.ИмяПоляПеревозчик);
		УдаляемыеЭлементы.Добавить(СтрокаТаблицы.ИмяПоляНадписьПеревозчик);
		УдаляемыеЭлементы.Добавить(СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства);
		УдаляемыеЭлементы.Добавить(СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки);
		УдаляемыеЭлементы.Добавить(СтрШаблон("Группа%1", СтрокаТаблицы.ИмяПоляПеревозчик));
	КонецЦикла;
	
	Для Каждого ИмяЭлемента Из УдаляемыеЭлементы Цикл
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыФормыПеревозчиков.Очистить();
	
	Для Каждого КлючИЗначение Из Перевозчики Цикл
		
		ИдентификаторПеревозчика = СтрЗаменить(КлючИЗначение.Ключ.УникальныйИдентификатор(), "-", "");
		ИмяРеквизита             = СтрШаблон("Перевозчик_%1", ИдентификаторПеревозчика);
		
		НоваяСтрока = РеквизитыФормыПеревозчиков.Добавить();
		НоваяСтрока.Перевозчик               = КлючИЗначение.Ключ;
		НоваяСтрока.ИмяПоляПеревозчик        = ИмяРеквизита;
		НоваяСтрока.ИмяПоляНадписьПеревозчик           = СтрШаблон("Надпись%1",              ИмяРеквизита);
		НоваяСтрока.ИмяПоляНадписьТранспортныеСредства = СтрШаблон("ТранспортныеСредства%1", ИмяРеквизита);
		НоваяСтрока.ИмяПоляНадписьМестаПерегрузки      = СтрШаблон("МестаПерегрузки%1",      ИмяРеквизита);
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				ИмяРеквизита,
				Новый ОписаниеТипов("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО"),,
				НСтр("ru = 'Перевозчик'")));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				НоваяСтрока.ИмяПоляНадписьПеревозчик,
				Новый ОписаниеТипов("ФорматированнаяСтрока"),,
				НСтр("ru = 'Перевозчик'")));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				НоваяСтрока.ИмяПоляНадписьТранспортныеСредства,
				Новый ОписаниеТипов("ФорматированнаяСтрока"),,
				НСтр("ru = 'Транспортные средства'")));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(
				НоваяСтрока.ИмяПоляНадписьМестаПерегрузки,
				Новый ОписаниеТипов("ФорматированнаяСтрока"),,
				НСтр("ru = 'Места перегрузки'")));
		
	КонецЦикла;
	
	Если Не Перевозчики.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	Для Каждого СтрокаТаблицы Из РеквизитыФормыПеревозчиков Цикл
		
		ГруппаПеревозчик = Элементы.Добавить(
			СтрШаблон("Группа%1", СтрокаТаблицы.ИмяПоляПеревозчик),
			Тип("ГруппаФормы"),
			Элементы.ГруппаПеревозчики);
		ГруппаПеревозчик.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаПеревозчик.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ГруппаПеревозчик.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаПеревозчик.ОтображатьЗаголовок = Ложь;
		
		ПолеПеревозчик = Элементы.Добавить(
			СтрокаТаблицы.ИмяПоляПеревозчик,
			Тип("ПолеФормы"),
			ГруппаПеревозчик);
		ПолеПеревозчик.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПеревозчик.ТолькоПросмотр = Истина;
		ПолеПеревозчик.ПутьКДанным    = СтрокаТаблицы.ИмяПоляПеревозчик;
		
		НадписьПеревозчик = Элементы.Добавить(
			СтрокаТаблицы.ИмяПоляНадписьПеревозчик,
			Тип("ПолеФормы"),
			ГруппаПеревозчик);
		НадписьПеревозчик.Вид                = ВидПоляФормы.ПолеНадписи;
		НадписьПеревозчик.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НадписьПеревозчик.ПутьКДанным        = СтрокаТаблицы.ИмяПоляНадписьПеревозчик;
		
		НадписьТранспортныеСредства = Элементы.Добавить(
			СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства,
			Тип("ПолеФормы"),
			Элементы.ГруппаПеревозчики);
		НадписьТранспортныеСредства.Вид         = ВидПоляФормы.ПолеНадписи;
		НадписьТранспортныеСредства.ПутьКДанным = СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства;
		НадписьТранспортныеСредства.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ГиперссылкаДанныеПеревозчикаОбработкаНавигационнойСсылки");
		НадписьТранспортныеСредства.АвтоМаксимальнаяШирина = Ложь;
		
		НадписьМестаПерегрузки = Элементы.Добавить(
			СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки,
			Тип("ПолеФормы"),
			Элементы.ГруппаПеревозчики);
		НадписьМестаПерегрузки.Вид         = ВидПоляФормы.ПолеНадписи;
		НадписьМестаПерегрузки.ПутьКДанным = СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки;
		НадписьМестаПерегрузки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ГиперссылкаДанныеПеревозчикаОбработкаНавигационнойСсылки");
		НадписьМестаПерегрузки.АвтоМаксимальнаяШирина = Ложь;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("Перевозчик", СтрокаТаблицы.Перевозчик);
		
		СтрокиТранспортныеСредства = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТранспортныеСредства.Количество() Тогда
			
			ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиТранспортныеСредства();
			
			ПредставлениеТранспортныхСредств = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				СтрокиТранспортныеСредства,
				ПараметрыФормированияНадписи);
			
			Если СтрокиТранспортныеСредства.Количество() = 1 Тогда
				Элементы[СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства].Заголовок = НСтр("ru = 'Транспортное средство'");
			КонецЕсли;
			
			ЭтотОбъект[СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства] = Новый ФорматированнаяСтрока(
				ПредставлениеТранспортныхСредств,,,,
				"ОткрытьТранспортныеСредства");
			
		Иначе
			Элементы[СтрокаТаблицы.ИмяПоляНадписьТранспортныеСредства].Видимость = Ложь;
		КонецЕсли;
		
		СтрокиМестаПерегрузки = Объект.МестаПерегрузки.НайтиСтроки(СтруктураПоиска);
		Если СтрокиМестаПерегрузки.Количество() Тогда
			
			ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиМестаПерегрузки();
			
			ПредставлениеМестПерегрузки = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				СтрокиМестаПерегрузки,
				ПараметрыФормированияНадписи);
			
			Если СтрокиМестаПерегрузки.Количество() = 1 Тогда
				Элементы[СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки].Заголовок = НСтр("ru = 'Место перегрузки'");
			КонецЕсли;
			
			ЭтотОбъект[СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки] = Новый ФорматированнаяСтрока(
				ПредставлениеМестПерегрузки,,,,
				"ОткрытьМестаПерегрузки");
			
		Иначе
			Элементы[СтрокаТаблицы.ИмяПоляНадписьМестаПерегрузки].Видимость = Ложь;
		КонецЕсли;
		
		ЭтотОбъект[СтрокаТаблицы.ИмяПоляПеревозчик] = СтрокаТаблицы.Перевозчик;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыФормы()
	
	Элементы.Представление.Заголовок = Представление;
	
	Элементы.ИсторияПогашений.ОтборСтрок = Новый ФиксированнаяСтруктура(
		"ВидОперации", Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ);
	Элементы.ИсторияОтказаПогашений.ОтборСтрок = Новый ФиксированнаяСтруктура(
		"ВидОперации", Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ);
	
	Элементы.Партия.Видимость         = ЗначениеЗаполнено(Объект.Партия);
	Элементы.НомерПартии.Видимость    = Не ЗначениеЗаполнено(Объект.Партия);
	Элементы.ОКПД2.Видимость          = ЗначениеЗаполнено(ОКПД2);
	Элементы.ПартияКодТНВЭД.Видимость = ЗначениеЗаполнено(КодТНВЭД);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ТолькоПросмотр = Не ОбщегоНазначения.РежимОтладки();
	
	СкрываемыеПустыеРеквизиты = Новый Массив();
	СкрываемыеПустыеРеквизиты.Добавить("Грузоотправитель");
	СкрываемыеПустыеРеквизиты.Добавить("Грузополучатель");
	СкрываемыеПустыеРеквизиты.Добавить("Продавец");
	СкрываемыеПустыеРеквизиты.Добавить("Покупатель");
	СкрываемыеПустыеРеквизиты.Добавить("ПунктОтправления");
	СкрываемыеПустыеРеквизиты.Добавить("ПунктНазначения");
	СкрываемыеПустыеРеквизиты.Добавить("Лаборатория");
	СкрываемыеПустыеРеквизиты.Добавить("ДоговорХранения");
	СкрываемыеПустыеРеквизиты.Добавить("ДоговорГПД");
	СкрываемыеПустыеРеквизиты.Добавить("ГосКонтракт");
	СкрываемыеПустыеРеквизиты.Добавить("КонтрактВЭД");
	СкрываемыеПустыеРеквизиты.Добавить("ДополнительноеСоглашение");
	СкрываемыеПустыеРеквизиты.Добавить("ДекларацияСоответствия");
	СкрываемыеПустыеРеквизиты.Добавить("ВетеринарныйСертификат");
	СкрываемыеПустыеРеквизиты.Добавить("ФитосанитарныйСертификат");
	СкрываемыеПустыеРеквизиты.Добавить("ПротоколИспытаний");
	СкрываемыеПустыеРеквизиты.Добавить("НомерЗакупкиЕИС");
	СкрываемыеПустыеРеквизиты.Добавить("СрокХранения");
	СкрываемыеПустыеРеквизиты.Добавить("УсловияХранения");
	СкрываемыеПустыеРеквизиты.Добавить("ТипХранения");
	СкрываемыеПустыеРеквизиты.Добавить("МестоХранения");
	СкрываемыеПустыеРеквизиты.Добавить("ПлощадьХранения");
	СкрываемыеПустыеРеквизиты.Добавить("Количество");
	СкрываемыеПустыеРеквизиты.Добавить("РеестровыйНомерПолучателя");
	
	СкрытьЭлеменыСПустымЗначением(СкрываемыеПустыеРеквизиты);
	
	СкрываемыеПустыеРеквизиты = Новый Массив();
	СкрываемыеПустыеРеквизиты.Добавить("КоличествоОтказПогашения");
	СкрываемыеПустыеРеквизиты.Добавить("КоличествоПогашено");
	СкрываемыеПустыеРеквизиты.Добавить("КоличествоТекущее");
	
	СкрытьЭлеменыСПустымЗначением(СкрываемыеПустыеРеквизиты, Истина);
	
	Элементы.ЭлеваторПолучатель.Видимость = ЗначениеЗаполнено(ЭлеваторПолучатель);
	
	Если ЗначениеЗаполнено(ЭлеваторПолучатель) Тогда
		Элементы.РеестровыйНомерПолучателя.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаКорректироватьСДИЗ.Доступность = (Объект.Статус = Перечисления.СтатусыСДИЗЗЕРНО.Оформлен);
	
	Элементы.СписокКорректироватьПогашениеСДИЗ.Доступность = ИсторияПогашений.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьЭлеменыСПустымЗначением(СкрываемыеПустыеРеквизиты, ЭтоРеквизитыФормы = Ложь)
	
	Для Каждого ИмяРеквизита Из СкрываемыеПустыеРеквизиты Цикл
		Если ЭтоРеквизитыФормы Тогда
			ЗначениеРеквизита = ЭтотОбъект[ИмяРеквизита];
		Иначе
			ЗначениеРеквизита = Объект[ИмяРеквизита];
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Элементы[ИмяРеквизита].Видимость = Ложь;
			НадписьРеквизита = Элементы.Найти("Надпись" + ИмяРеквизита);
			Если НадписьРеквизита <> Неопределено Тогда
				НадписьРеквизита.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		
		ПараметрыОбработкиПредставлений = Новый Массив();
		ПараметрыОбработкиПредставлений.Добавить("УполномоченноеЛицо");
		ПараметрыОбработкиПредставлений.Добавить("Грузоотправитель");
		ПараметрыОбработкиПредставлений.Добавить("Продавец");
		ПараметрыОбработкиПредставлений.Добавить("Грузополучатель");
		ПараметрыОбработкиПредставлений.Добавить("Покупатель");
		ПараметрыОбработкиПредставлений.Добавить("ПунктОтправления");
		ПараметрыОбработкиПредставлений.Добавить("ПунктНазначения");
		
		КлючиОрганизаций = Новый Соответствие();
		КлючиАдресов     = Новый Соответствие();
		Для Каждого ИмяРеквизита Из ПараметрыОбработкиПредставлений Цикл
			ЗначениеРеквизита = Объект[ИмяРеквизита];
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО") Тогда
				КлючиОрганизаций.Вставить(
					ЗначениеРеквизита,
					ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления());
			ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.КлючиАдресовЗЕРНО") Тогда
				КлючиАдресов.Вставить(
					ЗначениеРеквизита,
					ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления());
			КонецЕсли;
		КонецЦикла;
		
		Перевозчики = ИнтеграцияЗЕРНОКлиентСервер.УникальныеПеревозчики(Форма);
		Для Каждого КлючИЗначение Из Перевозчики Цикл
			КлючиОрганизаций.Вставить(
				КлючИЗначение.Ключ,
				ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления());
		КонецЦикла;
		
		ПредставленияСопоставлений = ИнтеграцияЗЕРНОВызовСервера.ПредставленияСопоставлений(КлючиОрганизаций, КлючиАдресов);
		
		Для Каждого ИмяРеквизита Из ПараметрыОбработкиПредставлений Цикл
			ЗначениеРеквизита = Объект[ИмяРеквизита];
			Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			ДанныеПредставления = ПредставленияСопоставлений[ЗначениеРеквизита];
			Если ДанныеПредставления = Неопределено Тогда
				Представление = Неопределено;
			Иначе
				Представление = ДанныеПредставления.Представление;
			КонецЕсли;
			Форма["Надпись" + ИмяРеквизита] = Представление;
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из Форма.РеквизитыФормыПеревозчиков Цикл
			ДанныеПредставления = ПредставленияСопоставлений[СтрокаТаблицы.Перевозчик];
			Если ДанныеПредставления = Неопределено Тогда
				Представление = Неопределено;
			Иначе
				Представление = ДанныеПредставления.Представление;
			КонецЕсли;
			Форма[СтрокаТаблицы.ИмяПоляНадписьПеревозчик] = Представление;
		КонецЦикла;
		
		Элементы.Реализация.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ"));
		Элементы.Приемка.Видимость    = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт"));
		Элементы.Отгрузка.Видимость   = (Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт"));
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СвязанныеДокументы")
		ИЛИ Инициализация Тогда
		
		Количество = Объект.СвязанныеДокументы.Количество();
		
		Форма.НадписьСвязанныеДокументы = НСтр("ru = 'Связанные документы'")
			+ ?(Количество > 0, " ("+Количество+")", "");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Статус")
		Или Инициализация Тогда
		
		Элементы.Аннулировать.Видимость = (Форма.ИсторияПогашенийКоличествоАктивных = 0)
			И Не ЗначениеЗаполнено(Форма.АктуальнаяВерсияСДИЗ)
			И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСДИЗЗЕРНО.Оформлен")
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСДИЗЗЕРНО.ОформленИПодтвержден"));
		
		Элементы.Погасить.Видимость = Не ЗначениеЗаполнено(Форма.АктуальнаяВерсияСДИЗ)
			И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСДИЗЗЕРНО.Оформлен")
			Или Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСДИЗЗЕРНО.ОформленИПодтвержден"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийНомерПартии.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияОтказаПогашенийНомерПартии.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияОтказаПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияОтказаПогашенийПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияОтказаПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашений.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийСтатус.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаписейЗЕРНО.Аннулировано;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияОтказаПогашений.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияОтказаПогашенийСтатус.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыЗаписейЗЕРНО.Аннулировано;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПогашенийОбработкаВыбора(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Поле.Имя = "ИсторияОтказаПогашенийПартия"
		Или Поле.Имя = "ИсторияПогашенийПартия"
		Или Поле.Имя = "ИсторияОтказаПогашенийНомерПартии") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ИсторияПогашений.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Партия) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Партия);
	
КонецПроцедуры

#КонецОбласти