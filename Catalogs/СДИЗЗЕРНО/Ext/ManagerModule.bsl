#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Данные.ТребуетсяЗагрузка Тогда
		СтрШаблон(НСтр("ru = '%1 (не загружено)'"), Данные.Идентификатор);
	Иначе
		Представление = Строка(Данные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("Идентификатор");
	Поля.Добавить("ТребуетсяЗагрузка");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Справочники.СДИЗЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеПоСДИЗ(СДИЗ) Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие();
	СписокЗапросов       = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|		КОГДА ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗ)
	|		И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|			ТОГДА ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоПогашено,
	|	СУММА(ВЫБОР
	|		КОГДА
	|			ИсторияПогашенийСДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗОтказПогашенияСДИЗ)
	|		И ИсторияПогашенийСДИЗЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаписейЗЕРНО.Подписано)
	|			ТОГДА ИсторияПогашенийСДИЗЗЕРНО.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоОтказПогашения,
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ
	|ПОМЕСТИТЬ ПогашенияИОтказы
	|ИЗ
	|	РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|СГРУППИРОВАТЬ ПО
	|	ИсторияПогашенийСДИЗЗЕРНО.СДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СДИЗЗЕРНО.Ссылка                                       КАК СДИЗ,
	|	СДИЗЗЕРНО.Грузоотправитель                             КАК Грузоотправитель,
	|	СДИЗЗЕРНО.Грузополучатель                              КАК Грузополучатель,
	|	СДИЗЗЕРНО.Продавец                                     КАК Продавец,
	|	СДИЗЗЕРНО.Покупатель                                   КАК Покупатель,
	|	СДИЗЗЕРНО.ПунктОтправления                             КАК ПунктОтправления,
	|	СДИЗЗЕРНО.ПунктНазначения                              КАК ПунктНазначения,
	|	СДИЗЗЕРНО.Количество                                   КАК Количество,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.ОКПД2, """")                КАК ОКПД2,
	|	ЕСТЬNULL(РеестрПартийЗЕРНО.КодТНВЭД, """")             КАК КодТНВЭД,
	|	ЕСТЬNULL(ПогашенияИОтказы.КоличествоПогашено, 0)       КАК КоличествоПогашено,
	|	ЕСТЬNULL(ПогашенияИОтказы.КоличествоОтказПогашения, 0) КАК КоличествоОтказПогашения
	|ИЗ
	|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПогашенияИОтказы КАК ПогашенияИОтказы
	|		ПО ПогашенияИОтказы.СДИЗ = СДИЗЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО РеестрПартийЗЕРНО.Ссылка = СДИЗЗЕРНО.Партия
	|ГДЕ
	|	СДИЗЗЕРНО.Ссылка В (&Ссылка)",
	"СДИЗ");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СДИЗЗЕРНОТранспортныеСредства.Ссылка                        КАК СДИЗ,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерСтроки                   КАК НомерСтроки,
	|	СДИЗЗЕРНОТранспортныеСредства.Перевозчик                    КАК Перевозчик,
	|	СДИЗЗЕРНОТранспортныеСредства.ТипТранспорта                 КАК ТипТранспорта,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерТранспортногоСредства    КАК НомерТранспортногоСредства,
	|	СДИЗЗЕРНОТранспортныеСредства.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.ТранспортныеСредства КАК СДИЗЗЕРНОТранспортныеСредства
	|ГДЕ
	|	СДИЗЗЕРНОТранспортныеСредства.Ссылка В (&Ссылка)",
	"ТранспортныеСредства");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СДИЗЗЕРНОСвязанныеДокументы.Ссылка            КАК СДИЗ,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ПервичныеДокументы.ТипДокумента               КАК ТипДокумента,
	|	ПервичныеДокументы.Дата                       КАК Дата,
	|	ПервичныеДокументы.Номер                      КАК Номер
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.СвязанныеДокументы КАК СДИЗЗЕРНОСвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО КАК ПервичныеДокументы
	|		ПО ПервичныеДокументы.Ссылка = СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент
	|ГДЕ
	|	СДИЗЗЕРНОСвязанныеДокументы.Ссылка В (&Ссылка)",
	"СвязанныеДокументы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	СДИЗЗЕРНОСвязанныеДокументы.Ссылка            КАК СДИЗ,
	|	СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент КАК ПервичныйДокумент,
	|	ПервичныеДокументы.ТипДокумента               КАК ТипДокумента,
	|	ПервичныеДокументы.Дата                       КАК Дата,
	|	ПервичныеДокументы.Номер                      КАК Номер
	|ИЗ
	|	Справочник.СДИЗЗЕРНО.СвязанныеДокументыПрочие КАК СДИЗЗЕРНОСвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО КАК ПервичныеДокументы
	|		ПО ПервичныеДокументы.Ссылка = СДИЗЗЕРНОСвязанныеДокументы.ПервичныйДокумент
	|ГДЕ
	|	СДИЗЗЕРНОСвязанныеДокументы.Ссылка В (&Ссылка)",
	"СвязанныеДокументыПрочие");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Погашение.Номенклатура   КАК Номенклатура,
	|	Погашение.Характеристика КАК Характеристика,
	|	Погашение.СДИЗ           КАК СДИЗ
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК Погашение
	|ГДЕ
	|	Погашение.СДИЗ В (&Ссылка)",
	"СвязаннаяНоменклатура");
	
	ПараметрыСДИЗ = ОбщегоНазначения.СкопироватьРекурсивно(СДИЗ);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПараметрыСДИЗ, ПустаяСсылка());
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ПараметрыСДИЗ);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	ДанныеСДИЗ = РезультатЗапроса["СДИЗ"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	ТранспортныеСредства.Индексы.Добавить("СДИЗ");
	
	//@skip-warning
	СвязанныеДокументы = РезультатЗапроса["СвязанныеДокументы"].Выгрузить();
	СвязанныеДокументы.Индексы.Добавить("СДИЗ");
	
	//@skip-warning
	СвязанныеДокументыПрочие = РезультатЗапроса["СвязанныеДокументыПрочие"].Выгрузить();
	СвязанныеДокументыПрочие.Индексы.Добавить("СДИЗ");
	
	//@skip-warning
	СвязаннаяНоменклатура = РезультатЗапроса["СвязаннаяНоменклатура"].Выгрузить();
	СвязаннаяНоменклатура.Индексы.Добавить("СДИЗ");
	
	Для Каждого СтрокаТаблицы Из ДанныеСДИЗ Цикл
		
		ДанныеСДИЗ = Новый Структура();
		ДанныеСДИЗ.Вставить("ОКПД2");
		ДанныеСДИЗ.Вставить("Грузоотправитель");
		ДанныеСДИЗ.Вставить("Грузополучатель");
		ДанныеСДИЗ.Вставить("Продавец");
		ДанныеСДИЗ.Вставить("Покупатель");
		ДанныеСДИЗ.Вставить("ПунктОтправления");
		ДанныеСДИЗ.Вставить("ПунктНазначения");
		ДанныеСДИЗ.Вставить("КодТНВЭД");
		ДанныеСДИЗ.Вставить("Количество");
		ДанныеСДИЗ.Вставить("КоличествоПогашено");
		ДанныеСДИЗ.Вставить("КоличествоОтказПогашения");
		ДанныеСДИЗ.Вставить("КоличествоДоступно");
		ДанныеСДИЗ.Вставить("ТранспортныеСредства",     Новый Массив());
		ДанныеСДИЗ.Вставить("СвязанныеДокументы",       Новый Массив());
		ДанныеСДИЗ.Вставить("СвязанныеДокументыПрочие", Новый Массив());
		ДанныеСДИЗ.Вставить("Номенклатура");
		ДанныеСДИЗ.Вставить("Характеристика");
		
		ЗаполнитьЗначенияСвойств(ДанныеСДИЗ, СтрокаТаблицы);
		
		ДанныеСДИЗ.КоличествоДоступно = (ДанныеСДИЗ.Количество
		                               - ДанныеСДИЗ.КоличествоПогашено
		                               - ДанныеСДИЗ.КоличествоОтказПогашения);
		
		СтруктураПоиска = Новый Структура("СДИЗ", СтрокаТаблицы.СДИЗ);
		
		СтрокиТранспортныеСредства = ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаТранспортноеСредства Из СтрокиТранспортныеСредства Цикл
			ДанныеТранспортногоСредства = Новый Структура();
			ДанныеТранспортногоСредства.Вставить("Перевозчик");
			ДанныеТранспортногоСредства.Вставить("ТипТранспорта");
			ДанныеТранспортногоСредства.Вставить("ТранспортноеСредство");
			ДанныеТранспортногоСредства.Вставить("НомерТранспортногоСредства");
			ДанныеТранспортногоСредства.Вставить("НомерАвтомобильногоКонтейнера");
			ЗаполнитьЗначенияСвойств(ДанныеТранспортногоСредства, СтрокаТранспортноеСредства);
			ДанныеСДИЗ.ТранспортныеСредства.Добавить(ДанныеТранспортногоСредства);
		КонецЦикла;
		
		СтрокиСвязанныеДокументы = СвязанныеДокументы.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаСвязанныйДокумент Из СтрокиСвязанныеДокументы Цикл
			ДанныеСвязанногоДокумента = Новый Структура();
			ДанныеСвязанногоДокумента.Вставить("ПервичныйДокумент");
			ДанныеСвязанногоДокумента.Вставить("ТипДокумента");
			ДанныеСвязанногоДокумента.Вставить("Дата");
			ДанныеСвязанногоДокумента.Вставить("Номер");
			ЗаполнитьЗначенияСвойств(ДанныеСвязанногоДокумента, СтрокаСвязанныйДокумент);
			ДанныеСДИЗ.СвязанныеДокументы.Добавить(ДанныеСвязанногоДокумента);
		КонецЦикла;
		
		СтрокиСвязанныеДокументыПрочие = СвязанныеДокументыПрочие.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаСвязанныйДокумент Из СтрокиСвязанныеДокументыПрочие Цикл
			ДанныеСвязанногоДокумента = Новый Структура();
			ДанныеСвязанногоДокумента.Вставить("ПервичныйДокумент");
			ДанныеСвязанногоДокумента.Вставить("ТипДокумента");
			ДанныеСвязанногоДокумента.Вставить("Дата");
			ДанныеСвязанногоДокумента.Вставить("Номер");
			ЗаполнитьЗначенияСвойств(ДанныеСвязанногоДокумента, СтрокаСвязанныйДокумент);
			ДанныеСДИЗ.СвязанныеДокументыПрочие.Добавить(ДанныеСвязанногоДокумента);
		КонецЦикла;
		
		СтрокаСвязаннаяНоменклатура = СвязаннаяНоменклатура.Найти(СтрокаТаблицы.СДИЗ, "СДИЗ");
		Если СтрокаСвязаннаяНоменклатура <> Неопределено Тогда
			ДанныеСДИЗ.Номенклатура = СтрокаСвязаннаяНоменклатура.Номенклатура;
			ДанныеСДИЗ.Характеристика = СтрокаСвязаннаяНоменклатура.Характеристика;
		КонецЕсли;
		
		ВозвращаемоеЗначение.Вставить(СтрокаТаблицы.СДИЗ, ДанныеСДИЗ);
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	Операция                     = ЭлементОчереди.Операция;
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
		
		РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросОтказовПогашенийСДИЗ Тогда
		
		РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗ Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные.Record);
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
	
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			СообщенияXML = Новый Массив();
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				СсылкаНаОбъект = ЗагрузитьСДИЗ(
					СтрокаДанных,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена);
				Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
					ИзмененныеОбъекты.Добавить(СсылкаНаОбъект);
				КонецЕсли;
				
				Если ПараметрыЗапроса.Свойство("ЗапрашиватьПогашенияСДИЗ")
					И ПараметрыЗапроса.ЗапрашиватьПогашенияСДИЗ
					И ЗначениеЗаполнено(СтрокаДанных.number) Тогда
					
					ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
					ПараметрыОбработкиСообщений.Ссылка        = ПустаяСсылка();
					ПараметрыОбработкиСообщений.ВидПродукции  = ЭлементОчереди.ВидПродукции;
					ПараметрыОбработкиСообщений.Организация   = ЭлементОчереди.Организация;
					ПараметрыОбработкиСообщений.Подразделение = ЭлементОчереди.Подразделение;
					ПараметрыОбработкиСообщений.ЭтоЭлеватор   = ПараметрыЗапроса.ЭтоЭлеватор;
					
					ПараметрыОбработкиСообщений.ПараметрыЗапроса = Новый Структура();
					ПараметрыОбработкиСообщений.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаДанных.number);
					
					СообщениеXML = СообщениеЗагрузкиПогашенийСДИЗ(ПараметрыОбработкиСообщений, ПараметрыОбмена);
					СообщенияXML.Добавить(СообщениеXML);
					
				КонецЕсли;
				
				Если ПараметрыЗапроса.Свойство("ЗапрашиватьОтказыПогашенийСДИЗ")
					И ПараметрыЗапроса.ЗапрашиватьОтказыПогашенийСДИЗ
					И ЗначениеЗаполнено(СтрокаДанных.number) Тогда
					
					ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
					ПараметрыОбработкиСообщений.Ссылка        = ПустаяСсылка();
					ПараметрыОбработкиСообщений.ВидПродукции  = ЭлементОчереди.ВидПродукции;
					ПараметрыОбработкиСообщений.Организация   = ЭлементОчереди.Организация;
					ПараметрыОбработкиСообщений.Подразделение = ЭлементОчереди.Подразделение;
					ПараметрыОбработкиСообщений.ЭтоЭлеватор   = ПараметрыЗапроса.ЭтоЭлеватор;
					
					ПараметрыОбработкиСообщений.ПараметрыЗапроса = Новый Структура();
					ПараметрыОбработкиСообщений.ПараметрыЗапроса.Вставить("НомерСДИЗ", СтрокаДанных.number);
					
					СообщениеXML = СообщениеЗагрузкиОтказовПогашенийСДИЗ(ПараметрыОбработкиСообщений, ПараметрыОбмена);
					СообщенияXML.Добавить(СообщениеXML);
					
				КонецЕсли;
				
				ИмяПоляКорректируемыйСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректируемыйСДИЗПоВидуПродукции(ЭлементОчереди.ВидПродукции);
				
				Если СтрокаДанных.Свойство(ИмяПоляКорректируемыйСДИЗ) И ЗначениеЗаполнено(СтрокаДанных[ИмяПоляКорректируемыйСДИЗ]) Тогда
					
					СДИЗКорректируемый = СДИЗ(СтрокаДанных[ИмяПоляКорректируемыйСДИЗ], 
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ЭлементОчереди.ВидПродукции,
						ПараметрыОбмена);
						
					СДИЗОбъект = СсылкаНаОбъект.ПолучитьОбъект();
					СДИЗОбъект.КорректируемыйСДИЗ = СДИЗКорректируемый;
					СДИЗОбъект.Записать();
					
					ИзмененныеОбъекты.Добавить(СДИЗКорректируемый);
					
				КонецЕсли;
				
				ИмяПоляКорректирующийСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректирующийСДИЗПоВидуПродукции(ЭлементОчереди.ВидПродукции);
				
				Если СтрокаДанных.Свойство(ИмяПоляКорректирующийСДИЗ) И ЗначениеЗаполнено(СтрокаДанных[ИмяПоляКорректирующийСДИЗ]) Тогда
					
					Блокировка = Новый БлокировкаДанных();
					
					ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
					ЭлементБлокировки.УстановитьЗначение("Идентификатор", СтрокаДанных[ИмяПоляКорректирующийСДИЗ]);
					
					КорректирующийСДИЗ = СДИЗ(СтрокаДанных[ИмяПоляКорректирующийСДИЗ],
						ЭлементОчереди.Организация,
						ЭлементОчереди.Подразделение,
						ЭлементОчереди.ВидПродукции,
						ПараметрыОбмена);
					ИзмененныеОбъекты.Добавить(КорректирующийСДИЗ);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПолученныеДанные.hasMore Тогда
				
				НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
				НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
				
				Если Не ЗначениеЗаполнено(НовыеПараметрыФормирования.Организация) Тогда
					НовыеПараметрыФормирования.Организация = ЭлементОчереди.Организация;
				КонецЕсли;
				
				СообщениеXML = СообщениеЗагрузкиСДИЗ(НовыеПараметрыФормирования, ПараметрыОбмена);
				СообщениеXML.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, РеквизитыИсходящегоСообщения);
				
				СообщенияXML.Добавить(СообщениеXML);
				
			КонецЕсли;
			
			Если СообщенияXML.Количество() Тогда
				ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена);
			КонецЕсли;
			
			ИнтеграцияЗЕРНОСлужебный.УстановитьДатуВыполненияСинхронизации(ПараметрыОбмена, ПолученныеДанные, ЭлементОчереди);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ Тогда
		
		Если ВРег(ПолученныеДанные.resultOperation) = "DONE" Тогда
			
			РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
			ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
			НомерПартии                  = ПараметрыЗапроса.НомерПартии;
			ИмяПоляНомерСДИЗ             = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ЭлементОчереди.ВидПродукции);
			НомерСДИЗ                    = ПолученныеДанные[ИмяПоляНомерСДИЗ];
			
			Блокировка = Новый БлокировкаДанных();
			
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерСДИЗ);
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
			
			Попытка
				
				Блокировка.Заблокировать();
				УстановитьПривилегированныйРежим(Истина);
				
				СДИЗ = СДИЗ(НомерСДИЗ, ЭлементОчереди.Организация, ЭлементОчереди.Подразделение, ЭлементОчереди.ВидПродукции, ПараметрыОбмена);
				СДИЗОбъект        = СДИЗ.ПолучитьОбъект();
				СДИЗОбъект.Статус = Перечисления.СтатусыСДИЗЗЕРНО.Аннулирован;
				СДИЗОбъект.Записать();
				ИзмененныеОбъекты.Добавить(СДИЗ);
				
				Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
					НомерПартии,
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена);
				ПартияОбъект        = Партия.ПолучитьОбъект();
				ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Подписано;
				ПартияОбъект.Записать();
				ИзмененныеОбъекты.Добавить(Партия);
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - СправочникСсылка.СДИЗЗЕРНО - СДИЗ.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	СообщенияXML = Новый Массив();
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		
		Операция = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Операция;
		
		Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ Тогда
			СообщениеXML = СообщениеЗагрузкиПогашенийСДИЗ(
				ДополнительныеПараметры.ПараметрыОбработкиДокумента,
				ДополнительныеПараметры.ПараметрыОбмена);
			СообщенияXML.Добавить(СообщениеXML);
		ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросОтказовПогашенийСДИЗ Тогда
			СообщениеXML = СообщениеЗагрузкиОтказовПогашенийСДИЗ(
				ДополнительныеПараметры.ПараметрыОбработкиДокумента,
				ДополнительныеПараметры.ПараметрыОбмена);
			СообщенияXML.Добавить(СообщениеXML);
		ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ Тогда
			СообщениеXML = СообщениеАннулированияСДИЗ(
				ДополнительныеПараметры.ПараметрыОбработкиДокумента,
				ДополнительныеПараметры.ПараметрыОбмена);
			СообщенияXML.Добавить(СообщениеXML);
		Иначе
			СообщенияXML = СообщенияЗагрузкиСДИЗ(
				ДополнительныеПараметры.ПараметрыОбработкиДокумента,
				ДополнительныеПараметры.ПараметрыОбмена);
		КонецЕсли;
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		
		Операция = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Операция;
		
		Если Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ Тогда
			СообщениеXML = СообщениеАннулированияСДИЗ(
				ДополнительныеПараметры.ПараметрыОбработкиДокумента,
				ДополнительныеПараметры.ПараметрыОбмена);
			СообщенияXML.Добавить(СообщениеXML);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ПараметрыФормированияСообщенияXML()
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ПараметрыФормированияСообщенияXML();
	
	ВозвращаемоеЗначение.КоличествоНаСтранице = ИнтеграцияЗЕРНО.ПараметрыОптимизации().КоличествоЭлементовСтраницыОтвета;
	ВозвращаемоеЗначение.Вставить("ЭтоЭлеватор",                    Ложь);
	ВозвращаемоеЗначение.Вставить("НомерСДИЗ",                      Неопределено);
	ВозвращаемоеЗначение.Вставить("Интервал",                       Неопределено);
	ВозвращаемоеЗначение.Вставить("Статус",                         Неопределено);
	ВозвращаемоеЗначение.Вставить("ВидСДИЗ",                        Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторСДИЗ",              Неопределено);
	ВозвращаемоеЗначение.Вставить("НомерПартии",                    Неопределено);
	ВозвращаемоеЗначение.Вставить("ОКПД2",                          Неопределено);
	ВозвращаемоеЗначение.Вставить("ЗапрашиватьПогашенияСДИЗ",       Ложь);
	ВозвращаемоеЗначение.Вставить("ЗапрашиватьОтказыПогашенийСДИЗ", Ложь);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Сообщения загрузки СДИЗ
//
// Параметры:
//  ПараметрыОбработкиДокумента - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
//
Функция СообщенияЗагрузкиСДИЗ(ПараметрыОбработкиДокумента, ПараметрыОбмена)
	
	СообщенияXML = Новый Массив();
	
	ПараметрыЗапроса      = ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыФормирования = ПараметрыФормированияСообщенияXML();
	
	ПараметрыФормирования.ВидПродукции     = ПараметрыОбработкиДокумента.ВидПродукции;
	ПараметрыФормирования.Операция         = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗ;
	ПараметрыФормирования.ПараметрыЗапроса = ПараметрыЗапроса;
	ПараметрыФормирования.Организация      = ПараметрыОбработкиДокумента.Организация;
	ПараметрыФормирования.Подразделение    = ПараметрыОбработкиДокумента.Подразделение;
	ПараметрыФормирования.ЭтоЭлеватор      = ПараметрыОбработкиДокумента.ЭтоЭлеватор;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	АбстрактноеСообщениеXML.Операция            = Перечисления.ВидыОперацийЗЕРНО.ЗапросСДИЗАбстрактнаяОперация;
	АбстрактноеСообщениеXML.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	АбстрактноеСообщениеXML.Версия              = ПараметрыФормирования.НомерВерсии;
	АбстрактноеСообщениеXML.ПараметрыЗапроса    = ПараметрыФормирования;
	АбстрактноеСообщениеXML.Организация         = ПараметрыФормирования.Организация;
	АбстрактноеСообщениеXML.Подразделение       = ПараметрыФормирования.Подразделение;
	АбстрактноеСообщениеXML.СсылкаНаОбъект      = ПустаяСсылка();
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	Если ПараметрыЗапроса <> Неопределено Тогда
		Если ПараметрыЗапроса.Свойство("НомерСДИЗ")
			И ЗначениеЗаполнено(ПараметрыЗапроса.НомерСДИЗ) Тогда
			ПараметрыФормирования.НомерСДИЗ = ПараметрыЗапроса.НомерСДИЗ;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("Интервал")
			И ПараметрыЗапроса.Интервал <> Неопределено Тогда
			ПараметрыФормирования.Интервал = ПараметрыЗапроса.Интервал;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("Статус")
			И ЗначениеЗаполнено(ПараметрыЗапроса.Статус) Тогда
			ПараметрыФормирования.Статус = ПараметрыЗапроса.Статус;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ВидСДИЗ")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ВидСДИЗ) Тогда
			ПараметрыФормирования.ВидСДИЗ = ПараметрыЗапроса.ВидСДИЗ;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ИдентификаторСДИЗ")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторСДИЗ) Тогда
			ПараметрыФормирования.ИдентификаторСДИЗ = ПараметрыЗапроса.ИдентификаторСДИЗ;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("НомерПартии")
			И ЗначениеЗаполнено(ПараметрыЗапроса.НомерПартии) Тогда
			ПараметрыФормирования.НомерПартии = ПараметрыЗапроса.НомерПартии;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ОКПД2")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ОКПД2) Тогда
			ПараметрыФормирования.ОКПД2 = ПараметрыЗапроса.ОКПД2;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ЗапрашиватьПогашенияСДИЗ") Тогда
			ПараметрыФормирования.ЗапрашиватьПогашенияСДИЗ = ПараметрыЗапроса.ЗапрашиватьПогашенияСДИЗ;
		КонецЕсли;
		Если ПараметрыЗапроса.Свойство("ЗапрашиватьОтказыПогашенийСДИЗ") Тогда
			ПараметрыФормирования.ЗапрашиватьОтказыПогашенийСДИЗ = ПараметрыЗапроса.ЗапрашиватьОтказыПогашенийСДИЗ;
		КонецЕсли;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	ПараметрыСообщений = Новый ТаблицаЗначений();
	ПараметрыСообщений.Колонки.Добавить("НомерСДИЗ", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Если ТипЗнч(ПараметрыФормирования.НомерСДИЗ) = Тип("Массив") Тогда
		Для Каждого НомерСДИЗ Из ПараметрыФормирования.НомерСДИЗ Цикл
			НоваяСтрока = ПараметрыСообщений.Добавить();
			НоваяСтрока.НомерСДИЗ = НомерСДИЗ;
		КонецЦикла;
	Иначе
		НоваяСтрока = ПараметрыСообщений.Добавить();
		НоваяСтрока.НомерСДИЗ = ПараметрыФормирования.НомерСДИЗ;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ПараметрыСообщений Цикл
		
		НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормирования);
		НовыеПараметрыФормирования.НомерСДИЗ = СтрокаТаблицы.НомерСДИЗ;
		
		Если ЗначениеЗаполнено(НовыеПараметрыФормирования.НомерСДИЗ) Тогда
			
			Если ПараметрыФормирования.ЗапрашиватьПогашенияСДИЗ Тогда
				
				ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
				ПараметрыОбработкиСообщений.Ссылка        = ПустаяСсылка();
				ПараметрыОбработкиСообщений.ВидПродукции  = НовыеПараметрыФормирования.ВидПродукции;
				ПараметрыОбработкиСообщений.Организация   = НовыеПараметрыФормирования.Организация;
				ПараметрыОбработкиСообщений.Подразделение = НовыеПараметрыФормирования.Подразделение;
				ПараметрыОбработкиСообщений.ЭтоЭлеватор   = НовыеПараметрыФормирования.ЭтоЭлеватор;
				
				ПараметрыОбработкиСообщений.ПараметрыЗапроса = Новый Структура();
				ПараметрыОбработкиСообщений.ПараметрыЗапроса.Вставить("НомерСДИЗ", НовыеПараметрыФормирования.НомерСДИЗ);
				
				ПогашенияСДИЗXML = СообщениеЗагрузкиПогашенийСДИЗ(ПараметрыОбработкиСообщений, ПараметрыОбмена);
				ПогашенияСДИЗXML.ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(ПогашенияСДИЗXML, АбстрактноеСообщениеXML);
				
				НовыеПараметрыФормирования.ЗапрашиватьПогашенияСДИЗ = Ложь;
				
			КонецЕсли;
			
			Если ПараметрыФормирования.ЗапрашиватьОтказыПогашенийСДИЗ Тогда
				
				ПараметрыОбработкиСообщений = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
				ПараметрыОбработкиСообщений.Ссылка        = ПустаяСсылка();
				ПараметрыОбработкиСообщений.ВидПродукции  = НовыеПараметрыФормирования.ВидПродукции;
				ПараметрыОбработкиСообщений.Организация   = НовыеПараметрыФормирования.Организация;
				ПараметрыОбработкиСообщений.Подразделение = НовыеПараметрыФормирования.Подразделение;
				ПараметрыОбработкиСообщений.ЭтоЭлеватор   = НовыеПараметрыФормирования.ЭтоЭлеватор;
				
				ПараметрыОбработкиСообщений.ПараметрыЗапроса = Новый Структура();
				ПараметрыОбработкиСообщений.ПараметрыЗапроса.Вставить("НомерСДИЗ", НовыеПараметрыФормирования.НомерСДИЗ);
				
				ОтказыПогашенияСДИЗXML = СообщениеЗагрузкиОтказовПогашенийСДИЗ(ПараметрыОбработкиСообщений, ПараметрыОбмена);
				ОтказыПогашенияСДИЗXML.ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(ОтказыПогашенияСДИЗXML, АбстрактноеСообщениеXML);
				
				НовыеПараметрыФормирования.ЗапрашиватьОтказыПогашенийСДИЗ = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СообщениеXML = СообщениеЗагрузкиСДИЗ(НовыеПараметрыФормирования, ПараметрыОбмена);
		СообщениеXML.ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		АбстрактноеСообщениеXML.ДополнительноеОписание = СообщениеXML.ДополнительноеОписание;
		СообщенияXML.Добавить(СообщениеXML);
		
		Если ПогашенияСДИЗXML <> Неопределено Тогда
			СообщенияXML.Добавить(ПогашенияСДИЗXML);
		КонецЕсли;
		
		Если ОтказыПогашенияСДИЗXML <> Неопределено Тогда
			СообщенияXML.Добавить(ОтказыПогашенияСДИЗXML);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

// Сообщение загрузки СДИЗ
//
// Параметры:
//  ПараметрыФормирования - см. ПараметрыФормированияСообщенияXML
//  ПараметрыОбмена       - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
// Возвращаемое значение:
//  см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
//
Функция СообщениеЗагрузкиСДИЗ(ПараметрыФормирования, ПараметрыОбмена)
	
	ВидПродукции     = ПараметрыФормирования.ВидПродукции;
	Операция         = ПараметрыФормирования.Операция;
	ПараметрыЗапроса = ПараметрыФормирования.ПараметрыЗапроса;
	Организация      = ПараметрыФормирования.Организация;
	Подразделение    = ПараметрыФормирования.Подразделение;
	ЭтоЭлеватор      = ПараметрыФормирования.ЭтоЭлеватор;
	НомерВерсии      = ПараметрыФормирования.НомерВерсии;
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListGpbSDIZ";
	Иначе
		ПространствоИмен = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		Если ЭтоЭлеватор Тогда
			ИмяСвойстваЗапроса = "RequestGetListSDIZElevator";
		Иначе
			ИмяСвойстваЗапроса = "RequestGetListSDIZ";
		КонецЕсли;
	КонецЕсли;
	
	ТелоXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Операция;
	СообщениеXML.ВидПродукции     = ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = НомерВерсии;
	СообщениеXML.ПараметрыЗапроса = ПараметрыФормирования;
	СообщениеXML.СсылкаНаОбъект   = ПустаяСсылка();
	СообщениеXML.Организация      = Организация;
	СообщениеXML.Подразделение    = Подразделение;
	СообщениеXML.ПараметрыЗапроса.Вставить("ЭтоЭлеватор", ЭтоЭлеватор);
	
	ДанныеОписания = Новый Массив();
	
	Если ПараметрыФормирования.Свойство("Интервал")
		И ПараметрыФормирования.Интервал <> Неопределено Тогда
		Интервал = ПараметрыФормирования.Интервал;
		Если ЗначениеЗаполнено(Интервал.НачалоПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "dateFrom", Интервал.НачалоПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'с %1'"),
					Формат(Интервал.НачалоПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
		Если ЗначениеЗаполнено(Интервал.КонецПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "dateTo", Интервал.КонецПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'по %1'"),
					Формат(Интервал.КонецПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыФормирования.Свойство("НачалоПериодаИзменений")
		И ПараметрыФормирования.НачалоПериодаИзменений <> Неопределено Тогда
		ИнтеграцияИС.УстановитьДатуСЧасовымПоясом(
			ТелоXDTO, "recordsModifiedFrom",
			ПараметрыФормирования.НачалоПериодаИзменений, ХранилищеВременныхДат);
		ДанныеОписания.Добавить(
			СтрШаблон(
				НСтр("ru = 'измененные с %1'"),
				Формат(ПараметрыФормирования.НачалоПериодаИзменений, "ДФ=dd.MM.yyyy;")));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.Статус) Тогда
		Статус = ИнтеграцияЗЕРНОСлужебный.СтатусСДИЗ(ПараметрыФормирования.Статус);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "status", Статус, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'статус: %1'"), ПараметрыЗапроса.Статус));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.ВидСДИЗ) Тогда
		ВидСДИЗ = ИнтеграцияЗЕРНОСлужебный.ВидСДИЗ(ПараметрыФормирования.ВидСДИЗ);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "kindSDIZ", ВидСДИЗ, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'вид СДИЗ: %1'"), ПараметрыФормирования.ВидСДИЗ));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.ИдентификаторСДИЗ) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "sdizID", ПараметрыФормирования.ИдентификаторСДИЗ, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'id: %1'"), ПараметрыФормирования.ИдентификаторСДИЗ));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.НомерПартии) Тогда
		ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, ИмяПоляНомерПартии, СокрЛП(ПараметрыФормирования.НомерПартии), СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'номер партии: %1'"), ПараметрыФормирования.НомерПартии));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.ОКПД2) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "OKPD2", ПараметрыФормирования.ОКПД2, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'ОКПД2: %1'"), ПараметрыФормирования.ОКПД2));
	КонецЕсли;
	Если ЗначениеЗаполнено(ПараметрыФормирования.НомерСДИЗ) Тогда
		ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, ИмяПоляНомерСДИЗ, СокрЛП(ПараметрыФормирования.НомерСДИЗ), СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), ПараметрыФормирования.НомерСДИЗ));
	КонецЕсли;
	
	СообщениеXML.ДополнительноеОписание = СтрСоединить(ДанныеОписания, " ");
	
	Если ПараметрыФормирования.ЗапрашиватьПогашенияСДИЗ Тогда
		СообщениеXML.ПараметрыЗапроса.Вставить(
			"ЗапрашиватьПогашенияСДИЗ",
			ПараметрыФормирования.ЗапрашиватьПогашенияСДИЗ);
	КонецЕсли;
	Если ПараметрыФормирования.ЗапрашиватьОтказыПогашенийСДИЗ Тогда
		СообщениеXML.ПараметрыЗапроса.Вставить(
			"ЗапрашиватьОтказыПогашенийСДИЗ",
			ПараметрыФормирования.ЗапрашиватьОтказыПогашенийСДИЗ);
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьДанныеПостраничногоПросмотра(
		ТелоXDTO,
		СообщениеXML,
		ПараметрыФормирования.НомерСтраницы,
		ПараметрыФормирования.КоличествоНаСтранице);
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ТелоXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, СообщениеXML.ТекстСообщенияЗапросXML);
	
	Возврат СообщениеXML;
	
КонецФункции

// Сообщение загрузки погашений СДИЗ
//
// Параметры:
//  ПараметрыОбработкиДокумента - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений
//  ПараметрыОбмена             - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
// Возвращаемое значение:
//  см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
//
Функция СообщениеЗагрузкиПогашенийСДИЗ(ПараметрыОбработкиДокумента, ПараметрыОбмена)
	
	ВидПродукции     = ПараметрыОбработкиДокумента.ВидПродукции;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.ЗапросПогашенийСДИЗ;
	ПараметрыЗапроса = ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	Организация      = ПараметрыОбработкиДокумента.Организация;
	Подразделение    = ПараметрыОбработкиДокумента.Подразделение;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListGpbExtinction";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListExtinction";
	КонецЕсли;
	
	ТелоXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Операция;
	СообщениеXML.ВидПродукции     = ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = 1;
	СообщениеXML.ПараметрыЗапроса = Новый Структура();
	СообщениеXML.СсылкаНаОбъект   = ПустаяСсылка();
	СообщениеXML.Организация      = Организация;
	СообщениеXML.Подразделение    = Подразделение;
	СообщениеXML.ПараметрыЗапроса.Вставить("НомерСДИЗ", ПараметрыЗапроса.НомерСДИЗ);
	
	ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, ИмяПоляНомерСДИЗ, ПараметрыЗапроса.НомерСДИЗ, СообщениеXML);
	
	ДанныеОписания = Новый Массив();
	ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), ПараметрыЗапроса.НомерСДИЗ));
	
	Если ПараметрыЗапроса.Свойство("Интервал") Тогда
		Интервал = ПараметрыЗапроса.Интервал;
		Если ЗначениеЗаполнено(Интервал.НачалоПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "dateFrom", Интервал.НачалоПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'с %1'"),
					Формат(Интервал.НачалоПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
		Если ЗначениеЗаполнено(Интервал.КонецПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "dateTo", Интервал.КонецПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'по %1'"),
					Формат(Интервал.КонецПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("Статус") Тогда
		Статус = ИнтеграцияЗЕРНОСлужебный.СтатусЗаписи(ПараметрыЗапроса.Статус);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "status", Статус, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'статус: %1'"), ПараметрыЗапроса.Статус));
	КонецЕсли;
	
	СообщениеXML.ДополнительноеОписание  = СтрСоединить(ДанныеОписания, " ");
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ТелоXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

// Сообщение загрузки отказов погашений СДИЗ
//
// Параметры:
//  ПараметрыОбработкиДокумента - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений
//  ПараметрыОбмена             - см. ИнтеграцияЗЕРНО.ПараметрыОбмена
// Возвращаемое значение:
//  см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
//
Функция СообщениеЗагрузкиОтказовПогашенийСДИЗ(ПараметрыОбработкиДокумента, ПараметрыОбмена)
	
	ВидПродукции     = ПараметрыОбработкиДокумента.ВидПродукции;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.ЗапросОтказовПогашенийСДИЗ;
	ПараметрыЗапроса = ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	Организация      = ПараметрыОбработкиДокумента.Организация;
	Подразделение    = ПараметрыОбработкиДокумента.Подразделение;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListGpbExtinctionRefusal";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListExtinctionRefusal";
	КонецЕсли;
	
	ТелоXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Операция;
	СообщениеXML.ВидПродукции     = ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = 1;
	СообщениеXML.ПараметрыЗапроса = Новый Структура();
	СообщениеXML.СсылкаНаОбъект   = ПустаяСсылка();
	СообщениеXML.Организация      = Организация;
	СообщениеXML.Подразделение    = Подразделение;
	СообщениеXML.ПараметрыЗапроса.Вставить("НомерСДИЗ", ПараметрыЗапроса.НомерСДИЗ);
	
	ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, ИмяПоляНомерСДИЗ, ПараметрыЗапроса.НомерСДИЗ, СообщениеXML);
	
	ДанныеОписания = Новый Массив();
	ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), ПараметрыЗапроса.НомерСДИЗ));
	
	Если ПараметрыЗапроса.Свойство("Интервал") Тогда
		Интервал = ПараметрыЗапроса.Интервал;
		Если ЗначениеЗаполнено(Интервал.НачалоПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "dateFrom", Интервал.НачалоПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'с %1'"),
					Формат(Интервал.НачалоПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
		Если ЗначениеЗаполнено(Интервал.КонецПериода) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "dateTo", Интервал.КонецПериода, СообщениеXML);
			ДанныеОписания.Добавить(
				СтрШаблон(
					НСтр("ru = 'по %1'"),
					Формат(Интервал.КонецПериода, "ДФ=dd.MM.yyyy;")));
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыЗапроса.Свойство("Статус") Тогда
		Статус = ИнтеграцияЗЕРНОСлужебный.СтатусЗаписи(ПараметрыЗапроса.Статус);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, "status", Статус, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = 'статус: %1'"), ПараметрыЗапроса.Статус));
	КонецЕсли;
	
	СообщениеXML.ДополнительноеОписание  = СтрСоединить(ДанныеОписания, " ");
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ТелоXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

// Сообщение аннулирования СДИЗ
//
// Параметры:
//  ПараметрыОбработкиДокумента - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений
// Возвращаемое значение:
//  см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML
//
Функция СообщениеАннулированияСДИЗ(ПараметрыОбработкиДокумента, ПараметрыОбмена)
	
	Организация   = Неопределено;
	Операция      = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСДИЗ;
	РеквизитыСДИЗ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПараметрыОбработкиДокумента.Ссылка,
		"ВидПродукции, УполномоченноеЛицо, Идентификатор, НомерПартии");
	Если РеквизитыСДИЗ.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledGpbSDIZ";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledSDIZ";
	КонецЕсли;
	
	СвязанноеЗначение = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ОрганизацииКонтрагентыПоКлючам(
		РеквизитыСДИЗ.УполномоченноеЛицо)[РеквизитыСДИЗ.УполномоченноеЛицо];
	
	Если СвязанноеЗначение <> Неопределено Тогда
		Организация   = СвязанноеЗначение.Организация;
		Подразделение = СвязанноеЗначение.Подразделение;
	КонецЕсли;
	
	ТелоXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция         = Операция;
	СообщениеXML.ВидПродукции     = РеквизитыСДИЗ.ВидПродукции;
	СообщениеXML.ТипСообщения     = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия           = 1;
	СообщениеXML.ПараметрыЗапроса = Новый Структура();
	СообщениеXML.СсылкаНаОбъект   = ПараметрыОбработкиДокумента.Ссылка;
	СообщениеXML.Организация      = Организация;
	СообщениеXML.Подразделение    = Подразделение;
	СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), РеквизитыСДИЗ.Идентификатор);
	СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", РеквизитыСДИЗ.НомерПартии);
	
	ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(РеквизитыСДИЗ.ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ТелоXDTO, ИмяПоляНомерСДИЗ, РеквизитыСДИЗ.Идентификатор, СообщениеXML);
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Не удалось определить организацию по %1'"), РеквизитыСДИЗ.УполномоченноеЛицо));
	КонецЕсли;
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ТелоXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

#КонецОбласти

#Область ПоискСсылок

Функция СДИЗ(Идентификатор, Организация, Подразделение, ВидПродукции, ПараметрыОбмена) Экспорт
	
	ИмяТаблицы = Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя();
	
	СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
	Иначе
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		
		ТранзакцияЗафиксирована = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
			
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				СправочникСсылка = СоздатьСДИЗ(Идентификатор);
				ИнтеграцияЗЕРНОСлужебный.ДобавитьКЗагрузке(
					ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, Организация, Подразделение, ВидПродукции);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТранзакцияЗафиксирована = Ложь;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				           |%3'"),
				Метаданные.Справочники.СДИЗЗЕРНО.Синоним,
				Идентификатор,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				           |%3'"),
				Метаданные.Справочники.СДИЗЗЕРНО.Синоним,
				Идентификатор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ТекстОшибкиПодробно,
				НСтр("ru = 'Работа со справочником СДИЗ'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована Тогда
			ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ЗагрузитьСДИЗ(ЭлементДанных, Организация, Подразделение, ВидПродукции, ПараметрыОбмена, СуществующийОбъект = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	ЗаписьНового       = Ложь;
	МетаданныеЭлемента = Метаданные.Справочники.СДИЗЗЕРНО;
	Идентификатор      = ЭлементДанных.number;
	
	Если СуществующийОбъект = Неопределено Тогда
		
		СуществующийЭлемент = Неопределено;
		Если ТребуетсяПоиск Тогда
			СуществующийЭлемент = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена,
				МетаданныеЭлемента.ПолноеИмя(),
				Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			СуществующийОбъект = СоздатьЭлемент();
			ЗаписьНового = Истина;
		Иначе
			СуществующийОбъект = СуществующийЭлемент.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗаписьНового Тогда
		СуществующийОбъект.Заблокировать();
	КонецЕсли;
	
	ОчиститьЗагружаемыеДанные(СуществующийОбъект);
	
	СуществующийОбъект.ИдентификаторФГИС = Формат(ЭлементДанных.id, "ЧГ=0;");
	СуществующийОбъект.Идентификатор     = Идентификатор;
	СуществующийОбъект.ВидПродукции      = ВидПродукции;
	СуществующийОбъект.Количество        = ЭлементДанных.amountOriginal;
	СуществующийОбъект.ДатаОформления    = ЭлементДанных.dateRegistration;
	
	СуществующийОбъект.УполномоченноеЛицо = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		ЭлементДанных.Owner, ПараметрыОбмена);
	
	ИмяПоляНомерПартии        = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	ИмяПоляПартия             = Справочники.РеестрПартийЗЕРНО.ИмяПоляПартияПоВидуПродукции(ВидПродукции);
	ИмяПоляКорректируемыйСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляКорректируемыйСДИЗПоВидуПродукции(ВидПродукции);
	
	СуществующийОбъект.НомерПартии = ЭлементДанных[ИмяПоляНомерПартии];
	
	ДанныеПартии = ЭлементДанных[ИмяПоляПартия];
	
	Если ДанныеПартии <> Неопределено Тогда
		
		ПараметрыЗагрузкиПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыЗагрузкиПартии();
		ПараметрыЗагрузкиПартии.Организация     = Организация;
		ПараметрыЗагрузкиПартии.Подразделение   = Подразделение;
		ПараметрыЗагрузкиПартии.ВидПродукции    = ВидПродукции;
		ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
		
		СуществующийОбъект.Партия = Справочники.РеестрПартийЗЕРНО.ЗагрузитьПартиюЗерна(
			ДанныеПартии,
			ПараметрыЗагрузкиПартии);
			
	КонецЕсли;
	
	Если ИнтеграцияЗЕРНОСлужебный.ЭтоВерсияВключая_1_0_8(ПараметрыОбмена.ПараметрыОптимизации) Тогда
		КорректируемыйСДИЗ = ЭлементДанных[ИмяПоляКорректируемыйСДИЗ];
		Если КорректируемыйСДИЗ <> Неопределено Тогда
			СуществующийОбъект.КорректируемыйСДИЗ = СДИЗ(
				ЭлементДанных[ИмяПоляКорректируемыйСДИЗ],
				Организация,
				Подразделение,
				ВидПродукции,
				ПараметрыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСДИЗПоВидуОперации(СуществующийОбъект, ЭлементДанных, Организация, Подразделение, ВидПродукции, ПараметрыОбмена);
	
	СуществующийОбъект.Статус = ИнтеграцияЗЕРНОСлужебный.СтатусСДИЗ(ЭлементДанных.status);
	СуществующийОбъект.ТребуетсяЗагрузка = Ложь;
	СуществующийОбъект.Записать();
	
	ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(
		ПараметрыОбмена,
		МетаданныеЭлемента.ПолноеИмя(),
		Идентификатор,
		СуществующийОбъект.Ссылка,,
		Истина);
	
	Возврат СуществующийОбъект.Ссылка;
	
КонецФункции

Функция СоздатьСДИЗ(Идентификатор)
	
	СправочникОбъект = СоздатьЭлемент();
	СправочникОбъект.Идентификатор         = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка     = Истина;
	СправочникОбъект.ОбменДанными.Загрузка = Истина;
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Процедура ЗаполнитьСДИЗПоВидуОперации(СуществующийОбъект, ЭлементДанных, Организация, Подразделение, ВидПродукции, ПараметрыОбмена)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементДанных, "OperationSDIZElevator") Тогда
		
		ДанныеСДИЗ = ЭлементДанных.OperationSDIZElevator;
		ЗаполнитьСведенияПриПриемкеЭлеватор(СуществующийОбъект, ДанныеСДИЗ.AcceptanceElevator, Организация, Подразделение, ПараметрыОбмена);
		ЗаполнитьСведенияПриОтгрузкеЭлеватор(СуществующийОбъект, ДанныеСДИЗ.ShipmentElevator, Организация, Подразделение, ПараметрыОбмена);
		СуществующийОбъект.ВидОперации = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор;
	
	Иначе
		
		Если ЭлементДанных.OperationInRF <> Неопределено Тогда
			СуществующийОбъект.ВидОперации = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗРФ;
			ДанныеСДИЗ = ЭлементДанных.OperationInRF;
			ЗаполнитьОперацииСДИЗ(СуществующийОбъект, ДанныеСДИЗ);
			ЗаполнитьСведенияПриОтгрузке(СуществующийОбъект, ДанныеСДИЗ.Shipment, Организация, Подразделение, ПараметрыОбмена);
			ЗаполнитьСведенияПриПриемке(СуществующийОбъект, ДанныеСДИЗ.Acceptance, Организация, Подразделение, ВидПродукции, ПараметрыОбмена);
			ЗаполнитьСведенияПриРеализации(СуществующийОбъект, ДанныеСДИЗ.Realization, Организация, Подразделение, ПараметрыОбмена);
		ИначеЕсли ЭлементДанных.OperationExportRF <> Неопределено Тогда
			СуществующийОбъект.ВидОперации = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт;
			ДанныеСДИЗ = ЭлементДанных.OperationExportRF;
			ЗаполнитьОперацииСДИЗ(СуществующийОбъект, ДанныеСДИЗ);
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
				ЗаполнитьСведенияПриОтгрузке(СуществующийОбъект, ДанныеСДИЗ.Shipment, Организация, Подразделение, ПараметрыОбмена);
			КонецЕсли;
			ЗаполнитьСведенияИмпортЭкспорт(
				СуществующийОбъект,
				ДанныеСДИЗ.AdditionalInformationImportExport,
				Организация,
				Подразделение,
				ПараметрыОбмена);
		ИначеЕсли ЭлементДанных.OperationImportRF <> Неопределено Тогда
			СуществующийОбъект.ВидОперации = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗИмпорт;
			ДанныеСДИЗ = ЭлементДанных.OperationImportRF;
			ЗаполнитьОперацииСДИЗ(СуществующийОбъект, ДанныеСДИЗ);
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
				ЗаполнитьСведенияПриПриемке(СуществующийОбъект, ДанныеСДИЗ.Acceptance, Организация, Подразделение, ВидПродукции, ПараметрыОбмена);
			КонецЕсли;
			ЗаполнитьСведенияИмпортЭкспорт(
				СуществующийОбъект,
				ДанныеСДИЗ.AdditionalInformationImportExport,
				Организация,
				Подразделение,
				ПараметрыОбмена);
		Иначе
			Возврат;
		КонецЕсли;
		
		ЗаполнитьСведенияПриПеревозке(СуществующийОбъект, ДанныеСДИЗ.Shipping, Организация, Подразделение, ПараметрыОбмена, ВидПродукции);
		ЗаполнитьСведенияТранспорнойДокументации(СуществующийОбъект, ДанныеСДИЗ, Организация, Подразделение, ПараметрыОбмена);
		
	КонецЕсли;
	
	СуществующийОбъект.ДекларацияСоответствия = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		ЭлементДанных, "DeclarationOfConformit", Организация, Подразделение, ПараметрыОбмена);
	СуществующийОбъект.ВетеринарныйСертификат = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		ЭлементДанных, "VeterinaryCertificate", Организация, Подразделение, ПараметрыОбмена);
	СуществующийОбъект.ФитосанитарныйСертификат = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		ЭлементДанных, "PhytosanitaryCertificate", Организация, Подразделение, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗаполнитьОперацииСДИЗ(СуществующийОбъект, Сведения)
	
	ОперацииСДИЗ = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(Сведения.OperationSDIZ);
	
	Для Каждого ОперацияXDTO Из ОперацииСДИЗ Цикл
		ОперацияСДИЗ = ИнтеграцияЗЕРНОСлужебный.ОперацияСДИЗ(ОперацияXDTO);
		СуществующийОбъект[ОперацияСДИЗ] = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПриПриемке(СуществующийОбъект, Сведения, Организация, Подразделение, ВидПродукции, ПараметрыОбмена)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Грузополучатель = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		Сведения.Consignee, ПараметрыОбмена);
		
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		СуществующийОбъект.Грузополучатель = Грузополучатель;
		СуществующийОбъект.ПунктНазначения = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
			Сведения.ConsigneeAddress,
			ПараметрыОбмена);
	КонецЕсли;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно 
		И Сведения.ConsigneeElevatorNumber <> Неопределено
		И ЗначениеЗаполнено(Сведения.ConsigneeElevatorNumber.number) Тогда
		СуществующийОбъект.РеестровыйНомерПолучателя = Сведения.ConsigneeElevatorNumber.number;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПриПриемкеЭлеватор(СуществующийОбъект, Сведения, Организация, Подразделение, ПараметрыОбмена)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществующийОбъект.Приемка         = Истина;
	СуществующийОбъект.УсловияХранения = Сведения.storageConditions;
	
	Если Сведения.StorageType <> Неопределено Тогда
		СуществующийОбъект.ТипХранения = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
			Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения, Сведения.StorageType.code,
			Организация, Подразделение, ПараметрыОбмена);
	КонецЕсли;
	
	СуществующийОбъект.ПлощадьХранения = Сведения.storageArea;
	СуществующийОбъект.СрокХранения    = Сведения.storagePeriod;
	
	СуществующийОбъект.ДоговорХранения = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		Сведения, "AcceptanceElevator", Организация, Подразделение, ПараметрыОбмена, Истина);
		
	Если Сведения.ElevatorService <> Неопределено Тогда
		
		УслугиХранения = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(Сведения.ElevatorService);
		Для Каждого СтрокаДанных Из УслугиХранения Цикл
			НоваяСтрока = СуществующийОбъект.УслугиХранения.Добавить();
			НоваяСтрока.УслугаХранения = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ТипУслугиЭлеватора, СтрокаДанных.code,
				Организация, Подразделение, ПараметрыОбмена);
		КонецЦикла;
		
	КонецЕсли;
	
	СуществующийОбъект.МестоХранения = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
		Сведения.StoragePlace,
		ПараметрыОбмена);
	
	Если Сведения.Moving <> Неопределено Тогда
		Если Сведения.Moving.StorageType <> Неопределено Тогда
			СуществующийОбъект.ТипХранения = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ТипХранения, Сведения.Moving.StorageType.code,
				Организация, Подразделение, ПараметрыОбмена);
		КонецЕсли;
		СуществующийОбъект.МестоХранения = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
			Сведения.Moving.MovingStoragePlace,
			ПараметрыОбмена);
		Если ЗначениеЗаполнено(Сведения.Moving.movingStorageConditions) Тогда
			СуществующийОбъект.УсловияХранения = Сведения.Moving.movingStorageConditions;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПриОтгрузкеЭлеватор(СуществующийОбъект, Сведения, Организация, Подразделение, ПараметрыОбмена)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОперацияСДИЗ = ИнтеграцияЗЕРНОСлужебный.ОперацияСДИЗ(Сведения.Operation);
	СуществующийОбъект[ОперацияСДИЗ] = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПриОтгрузке(СуществующийОбъект, Сведения, Организация, Подразделение, ПараметрыОбмена)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществующийОбъект.Грузоотправитель = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		Сведения.Shipper, ПараметрыОбмена);
	СуществующийОбъект.ПунктОтправления = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
		Сведения.ShipperAddress,
		ПараметрыОбмена);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПриПеревозке(СуществующийОбъект, Сведения, Организация, Подразделение, ПараметрыОбмена, ВидПродукции)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СуществующийОбъект.Грузоотправитель = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		Сведения.Shipper, ПараметрыОбмена);
	
	Если ИнтеграцияЗЕРНОСлужебный.ЭтоВерсияВключая_1_0_8(ПараметрыОбмена.ПараметрыОптимизации) Тогда
		СуществующийОбъект.ПунктОтправления = Справочники.КлючиАдресовЗЕРНО.КлючАдресаКомплексный(
			Сведения.ShipperAddress,
			ПараметрыОбмена);
	Иначе
		СуществующийОбъект.ПунктОтправления = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
			Сведения.ShipperAddress,
			ПараметрыОбмена);
	КонецЕсли;
	
	Грузополучатель = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		Сведения.Consignee, ПараметрыОбмена);
		
	Если ЗначениеЗаполнено(Грузополучатель) Тогда
		СуществующийОбъект.Грузополучатель = Грузополучатель;
		Если ИнтеграцияЗЕРНОСлужебный.ЭтоВерсияВключая_1_0_8(ПараметрыОбмена.ПараметрыОптимизации) Тогда
			СуществующийОбъект.ПунктНазначения = Справочники.КлючиАдресовЗЕРНО.КлючАдресаКомплексный(
				Сведения.ConsigneeAddress,
				ПараметрыОбмена);
		Иначе
			СуществующийОбъект.ПунктНазначения = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
				Сведения.ConsigneeAddress,
				ПараметрыОбмена);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПеревозчика = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(Сведения, "CarrierBlock");
	Для Каждого СтрокаДанных Из ДанныеПеревозчика Цикл
		
		Перевозчик = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
			СтрокаДанных.Carrier, ПараметрыОбмена);
			
		ТранспортныеСредства = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(СтрокаДанных, "TransportInfo");
		Адреса               = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(СтрокаДанных, "CarrierAddress");
		
		Для Каждого ДанныеТранспортногоСредства Из ТранспортныеСредства Цикл
			
			НоваяСтрока = СуществующийОбъект.ТранспортныеСредства.Добавить();
			НоваяСтрока.Перевозчик                    = Перевозчик;
			НоваяСтрока.НомерТранспортногоСредства    = ДанныеТранспортногоСредства.numberTransport;
			НоваяСтрока.НомерАвтомобильногоКонтейнера = ДанныеТранспортногоСредства.numberContainer;
			НоваяСтрока.ТипТранспорта = Справочники.КлассификаторНСИЗЕРНО.КлассификаторНСИ(
				Перечисления.ВидыКлассификаторовЗЕРНО.ВидТранспортногоСредства,
				ДанныеТранспортногоСредства.TransportCode,
				Организация, Подразделение, ПараметрыОбмена);
			
		КонецЦикла;
		
		Для Каждого ДанныеАдреса Из Адреса Цикл
			
			НоваяСтрока = СуществующийОбъект.МестаПерегрузки.Добавить();
			НоваяСтрока.Перевозчик = Перевозчик;
			НоваяСтрока.Адрес      = Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
				ДанныеАдреса,
				ПараметрыОбмена);
			
		КонецЦикла;

	КонецЦикла;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно 
		И Сведения.ConsigneeElevatorNumber <> Неопределено
		И ЗначениеЗаполнено(Сведения.ConsigneeElevatorNumber.number) Тогда
		СуществующийОбъект.РеестровыйНомерПолучателя = Сведения.ConsigneeElevatorNumber.number;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияТранспорнойДокументации(СуществующийОбъект, ДанныеСДИЗ, Организация, Подразделение, ПараметрыОбмена)
	
	ДанныеТранспорта = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ДанныеСДИЗ, "OtherTransportDocument");
	Для Каждого СтрокаДанных Из ДанныеТранспорта Цикл
		НоваяСтрока = СуществующийОбъект.СвязанныеДокументыПрочие.Добавить();
		НоваяСтрока.ПервичныйДокумент = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
			СтрокаДанных, "OtherTransportDocument", Организация, Подразделение, ПараметрыОбмена, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияПриРеализации(СуществующийОбъект, Сведения, Организация, Подразделение, ПараметрыОбмена)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Сведения.Seller <> Неопределено Тогда
		СуществующийОбъект.Продавец = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
			Сведения.Seller, ПараметрыОбмена);
	КонецЕсли;
	Если Сведения.Buyer <> Неопределено Тогда
		СуществующийОбъект.Покупатель = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
			Сведения.Buyer, ПараметрыОбмена);
	КонецЕсли;
	
	СуществующийОбъект.ДоговорГПД = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		Сведения, "Contract", Организация, Подразделение, ПараметрыОбмена);
	
	ПодтверждающиеДокументы = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(Сведения, "ConfirmingDocument");
	Для Каждого СтрокаДокумент Из ПодтверждающиеДокументы Цикл
		НоваяСтрока = СуществующийОбъект.СвязанныеДокументы.Добавить();
		НоваяСтрока.ПервичныйДокумент = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
			СтрокаДокумент, "ConfirmingDocument", Организация, Подразделение, ПараметрыОбмена, Истина);
	КонецЦикла;

	Если Сведения.GovernmentPurchase <> Неопределено Тогда
		СуществующийОбъект.НомерЗакупкиЕИС = Сведения.GovernmentPurchase.numberGovernmentPurchase;
		СуществующийОбъект.ГосКонтракт = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
			Сведения.GovernmentPurchase, "GovernmentContract", Организация, Подразделение, ПараметрыОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияИмпортЭкспорт(СуществующийОбъект, Сведения, Организация, Подразделение, ПараметрыОбмена)
	
	Если Сведения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СуществующийОбъект.Лаборатория = Неопределено;
	СуществующийОбъект.Лаборатория = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючОрганизации(
		Сведения.AccreditedLaboratory, ПараметрыОбмена);
	СуществующийОбъект.КонтрактВЭД = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		Сведения, "ContractVED", Организация, Подразделение, ПараметрыОбмена);
	СуществующийОбъект.ДополнительноеСоглашение = Справочники.КлючиРеквизитовПервичныхДокументовЗЕРНО.КлючПервичногоДокумента(
		Сведения, "AdditionalAgreement", Организация, Подразделение, ПараметрыОбмена);
	
КонецПроцедуры

Процедура ОчиститьЗагружаемыеДанные(СуществующийОбъект);
	
	СуществующийОбъект.ТранспортныеСредства.Очистить();
	СуществующийОбъект.МестаПерегрузки.Очистить();
	СуществующийОбъект.СвязанныеДокументы.Очистить();
	СуществующийОбъект.СвязанныеДокументыПрочие.Очистить();
	СуществующийОбъект.УслугиХранения.Очистить();
	
	СуществующийОбъект.Грузоотправитель           = Неопределено;
	СуществующийОбъект.ПунктОтправления           = Неопределено;
	СуществующийОбъект.Грузополучатель            = Неопределено;
	СуществующийОбъект.ПунктНазначения            = Неопределено;
	СуществующийОбъект.Лаборатория                = Неопределено;
	СуществующийОбъект.НомерПартии                = Неопределено;
	СуществующийОбъект.Продавец                   = Неопределено;
	СуществующийОбъект.Покупатель                 = Неопределено;
	СуществующийОбъект.НомерЗакупкиЕИС            = Неопределено;
	СуществующийОбъект.УсловияХранения            = Неопределено;
	СуществующийОбъект.ТипХранения                = Неопределено;
	СуществующийОбъект.МестоХранения              = Неопределено;
	СуществующийОбъект.ПлощадьХранения            = Неопределено;
	СуществующийОбъект.СрокХранения               = Неопределено;
	
	СуществующийОбъект.ДоговорГПД                 = Неопределено;
	СуществующийОбъект.ГосКонтракт                = Неопределено;
	СуществующийОбъект.КонтрактВЭД                = Неопределено;
	СуществующийОбъект.ПротоколИспытаний          = Неопределено;
	СуществующийОбъект.ДополнительноеСоглашение   = Неопределено;
	СуществующийОбъект.ДоговорХранения            = Неопределено;
	СуществующийОбъект.Перевозка                  = Ложь;
	СуществующийОбъект.Приемка                    = Ложь;
	СуществующийОбъект.Реализация                 = Ложь;
	СуществующийОбъект.Отгрузка                   = Ложь;
	СуществующийОбъект.КорректируемыйСДИЗ         = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ТранспортныеСредстваПоСДИЗ(СДИЗ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СДИЗЗЕРНОТранспортныеСредства.Перевозчик,
		|	СДИЗЗЕРНОТранспортныеСредства.ТипТранспорта,
		|	СДИЗЗЕРНОТранспортныеСредства.НомерТранспортногоСредства,
		|	СДИЗЗЕРНОТранспортныеСредства.НомерАвтомобильногоКонтейнера
		|ИЗ
		|	Справочник.СДИЗЗЕРНО.ТранспортныеСредства КАК СДИЗЗЕРНОТранспортныеСредства
		|ГДЕ
		|	СДИЗЗЕРНОТранспортныеСредства.Ссылка = &СДИЗ";
	
	Запрос.УстановитьПараметр("СДИЗ", СДИЗ);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция АктуальнаяВерсияКорректировочногоДокументаСДИЗ(СДИЗ) Экспорт
	
	АктуальныйСДИЗ = ПустаяСсылка();
	
	Если Не ЗначениеЗаполнено(СДИЗ) Тогда
		Возврат АктуальныйСДИЗ;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СДИЗЗЕРНО.Ссылка КАК АктуальныйСДИЗ
		|ИЗ
		|	Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
		|ГДЕ
		|	СДИЗЗЕРНО.КорректируемыйСДИЗ = &КорректируемыйСДИЗ";
	
	Запрос.УстановитьПараметр("КорректируемыйСДИЗ", СДИЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		АктуальныйСДИЗ = ВыборкаДетальныеЗаписи.АктуальныйСДИЗ;
	КонецЕсли;
	
	Возврат АктуальныйСДИЗ;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
