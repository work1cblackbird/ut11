#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ДеревоПартийХарактеристика",
		"Элементы.ДеревоПартий.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ДеревоПартийСерия",
		"Элементы.ДеревоПартий.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект,
		"ДеревоПартийСерия",
		"Элементы.ДеревоПартий.ТекущиеДанные.Характеристика");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Серия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "Серия", "Номенклатура");
		
	ИспользоватьСерииНоменклатуры          = ИнтеграцияИС.СерииИспользуются();
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ДеревоПартийХарактеристика.Видимость = Ложь;
		Элементы.Характеристика.Видимость             = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьСерииНоменклатуры Тогда
		Элементы.ДеревоПартийСерия.Видимость = Ложь;
		Элементы.Серия.Видимость             = Ложь;
	КонецЕсли;
	
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Характеристика");
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Серия");
	
	Элементы.ТипИзмеряемойВеличиныСАТУРН.ТолькоПросмотр =
		ЗначениеЗаполнено(Объект.ТипИзмеряемойВеличиныСАТУРН)
		И Не Объект.ТипИзмеряемойВеличиныУстановленПользователем;
	
	НастроитьДинамическийСписокОстатки();
	
	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПартияСАТУРН"
		И Параметр = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СоответствиеНоменклатурыСАТУРН"
		И Параметр = Объект.Ссылка Тогда
		ЗаполнитьСопоставлениеСНоменклатурой();
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Сопоставление");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	СобытияФормИСПереопределяемый.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если СопоставлениеМожноЗаписать() Тогда
		ЗаписатьСопоставление();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДеревоПартий
		И ЗначениеЗаполнено(Объект.РодительскаяПартия)
		И ДеревоПартий.ПолучитьЭлементы().Количество() = 0 Тогда
		
		ЗаполнитьДеревоПартий();
		
		Для Каждого СтрокаДерева Из ДеревоПартий.ПолучитьЭлементы() Цикл
			Элементы.ДеревоПартий.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипИзмеряемойВеличиныСАТУРНПриИзменении(Элемент)
	
	Объект.ТипИзмеряемойВеличиныУстановленПользователем = ЗначениеЗаполнено(Объект.ТипИзмеряемойВеличиныСАТУРН);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыбратьСопоставление" Тогда
		СтандартнаяОбработка = Ложь;
		
		СписокИнтерактивногоВыбора = Новый СписокЗначений();
		Для Каждого СтрокаТаблицы Из Сопоставление Цикл
			СписокИнтерактивногоВыбора.Добавить(СтрокаТаблицы.НомерСтроки, СтрокаТаблицы.ПредставлениеНоменклатуры);
		КонецЦикла;
		
		ВыборСопоставленияЗавершение = Новый ОписаниеОповещения("ВыборСопоставленияЗавершение", ЭтотОбъект);
		
		ПоказатьВыборИзСписка(
			ВыборСопоставленияЗавершение,
			СписокИнтерактивногоВыбора,
			Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"),
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ЭтотОбъект, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	ХарактеристикаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	СерияПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПартий

&НаКлиенте
Процедура ДеревоПартийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДеревоПартий.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.ДеревоПартийПартия Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыРодительскойПартии = СтатусЗагрузкиИдентификаторПартии(ДанныеСтроки.Партия);
		
		Если ПараметрыРодительскойПартии.Загружена Тогда
			ПоказатьЗначение(, ДанныеСтроки.Партия);
		Иначе
			
			ПараметрыОткрытия = Новый Структура("Идентификатор, НеПоказыватьСостояниеЗагрузки", ПараметрыРодительскойПартии.Идентификатор, Истина);
			ОткрытьФорму("Справочник.ПартииСАТУРН.Форма.ДанныеКлассификатора", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ДеревоПартийНоменклатура Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
			ПоказатьЗначение(, ДанныеСтроки.Номенклатура);
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Представление) Тогда
			ИнтеграцияСАТУРНСлужебныйКлиент.ОткрытьФормуСопоставленнойНоменклатурыПоПартии(ДанныеСтроки.Партия, ЭтотОбъект);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ДеревоПартийХарактеристика Тогда
		ПоказатьЗначение(, ДанныеСтроки.Характеристика);
	ИначеЕсли Поле = Элементы.ДеревоПартийСерия Тогда
		ПоказатьЗначение(, ДанныеСтроки.Серия);
	ИначеЕсли Поле = Элементы.ДеревоПартийПАТ Тогда
		ПоказатьЗначение(, ДанныеСтроки.ПАТ);
	ИначеЕсли Поле = Элементы.ДеревоПартийПартияУпаковочнаяЕдиница Тогда
		ПоказатьЗначение(, ДанныеСтроки.Партия);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОстатки

&НаКлиенте
Процедура ОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.Остатки.РежимВыбора
		Или ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элементы.Остатки.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если Поле.Имя = Элементы.ОстаткиМестоХранения.Имя Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.МестоХранения) Тогда
			
			ПоказатьЗначение(, ДанныеСтроки.МестоХранения);
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = Элементы.ОстаткиОрганизацияСАТУРН.Имя Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ОрганизацияСАТУРН) Тогда
			
			ПоказатьЗначение(, ДанныеСтроки.ОрганизацияСАТУРН);
			
		КонецЕсли;
			
	ИначеЕсли Поле.Имя = Элементы.ОстаткиПАТ.Имя Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ПАТ) Тогда
			
			ПоказатьЗначение(, ДанныеСтроки.ПАТ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОстаткиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	ДанныеСписка           = ДанныеСписка(Строки);
	МестаХраненияСклады    = ДанныеСписка.МестаХраненияСклады;
	
	ЦветТребуетВнимания    = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	
	Для Каждого Строка Из Строки Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение.Данные.ОрганизацияСАТУРН) Тогда
			
			Оформление = Строка.Значение.Оформление.Получить("ОрганизацияСАТУРН");
			Если Оформление <> Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(Строка.Значение.Данные.КонтрагентОрганизация) Тогда
					Оформление.УстановитьЗначениеПараметра(
						"Текст", СтрШаблон(НСтр("ru = '%1 <не сопоставлен>'"), Строка.Значение.Данные.ОрганизацияСАТУРН));
					Оформление.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветТребуетВнимания);
				Иначе
					Оформление.УстановитьЗначениеПараметра(
						"Текст",  СтрШаблон(НСтр("ru = '%1 (%2)'"), Строка.Значение.Данные.ОрганизацияСАТУРН, Строка.Значение.Данные.КонтрагентОрганизация));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Значение.Данные.МестоХранения) Тогда
			
			Оформление = Строка.Значение.Оформление.Получить("МестоХранения");
			Если Оформление <> Неопределено Тогда
				Данные = МестаХраненияСклады[Строка.Значение.Данные.МестоХранения];
				
				Если Данные = Неопределено Тогда
					Оформление.УстановитьЗначениеПараметра(
						"Текст", НСтр("ru = '<не сопоставлен>'"));
					Оформление.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветТребуетВнимания);
				ИначеЕсли Не ЗначениеЗаполнено(Данные) Тогда
					Оформление.УстановитьЗначениеПараметра(
						"Текст", СтрШаблон(НСтр("ru = '%1 <не сопоставлен>'"), Строка.Значение.Данные.МестоХранения));
					Оформление.УстановитьЗначениеПараметра(
						"ЦветТекста", ЦветТребуетВнимания);
				Иначе
					Оформление.УстановитьЗначениеПараметра(
						"Текст",  СтрШаблон(НСтр("ru = '%1 (%2)'"), Строка.Значение.Данные.МестоХранения, Данные));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьИзСервиса(Команда)
	
	ПараметрОповещения = ЗагрузитьПартиюНаСервере();
	
	Если ЗначениеЗаполнено(ПараметрОповещения) Тогда
		
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка, ПараметрОповещения);
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСАТУРН(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",                 Объект.Идентификатор);
	ПараметрыФормы.Вставить("НеПоказыватьСостояниеЗагрузки", Истина);
	
	ОткрытьФорму(
		"Справочник.ПартииСАТУРН.Форма.ДанныеКлассификатора",
		ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.ПартииСАТУРН);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ЭтотОбъект, РегистрыСведений.СоответствиеНоменклатурыСАТУРН);
	
	ЗаполнитьСопоставлениеСНоменклатурой(Ложь);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"), "Номенклатура");
	
	Если ЗначениеЗаполнено(Объект.РодительскаяПартия)
		И ДеревоПартий.ПолучитьЭлементы().Количество() Тогда
		ЗаполнитьДеревоПартий();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ДеревоПартийХарактеристика",
		"ДеревоПартий.ХарактеристикиИспользуются");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"ДеревоПартийСерия",
		"ДеревоПартий.СтатусУказанияСерий",
		"ДеревоПартий.ТипНоменклатуры");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "Характеристика", "ХарактеристикиИспользуются"); 
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "Серия", "СтатусУказанияСерий", "ТипНоменклатуры");
		
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоПартийНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоПартий.Представление");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",      Новый ПолеКомпоновкиДанных("ДеревоПартий.Представление"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПартиюНаСервере()
	
	Результат = ИнтерфейсСАТУРНВызовСервера.ПартияПоИдентификатору(Объект.Идентификатор);
		
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ВызватьИсключение Результат.ТекстОшибки;
		
	Иначе
		
		ДанныеПартии = ИнтерфейсСАТУРН.ДанныеПартии(Результат.Элемент);
		Партия = ИнтеграцияСАТУРН.ЗагрузитьПартию(ДанныеПартии,, Результат.ПараметрыОбмена); 

	КонецЕсли;
	
	Возврат Партия;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоПартий()
	
	ДеревоПартий.ПолучитьЭлементы().Очистить();
	Если Не ЗначениеЗаполнено(Объект.РодительскаяПартия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПостроения = Справочники.ПартииСАТУРН.ПараметрыПостроенияДереваПартий();
	ПараметрыПостроения.ИсходныеПартии.Добавить(Объект.Ссылка);
	
	ДанныеДереваПартий                    = Справочники.ПартииСАТУРН.ДеревоПартий(ПараметрыПостроения);
	СоответствиеСтрокДереваПоНоменклатуре = Новый Соответствие();
	КешированныеЗначения                  = Неопределено;
	
	Для Каждого СтрокаДерева Из ДанныеДереваПартий.Строки Цикл
		ЗаполнитьСтрокуДереваРекурсивно(
			СтрокаДерева,
			ДеревоПартий,
			СоответствиеСтрокДереваПоНоменклатуре,
			КешированныеЗначения);
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыДереваЗначенийПоНоменкалутре(СоответствиеСтрокДереваПоНоменклатуре);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДереваРекурсивно(УзелИсточник, УзелПриемник, СоответствиеСтрокДереваПоНоменклатуре, КешированныеЗначения)
	
	ПозицииДляПересчетаКоличества = Новый Массив;
	Для Каждого СтрокаДерева Из УзелИсточник.Строки Цикл
		
		НоваяСтрока = УзелПриемник.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева,, "Количество");
		НоваяСтрока.КоличествоСАТУРН = СтрокаДерева.Количество;
		
		КоличествоСтрокСопоставления = СтрокаДерева.Сопоставления.Количество();
		Если КоличествоСтрокСопоставления = 1 Тогда
			Для Каждого СтрокаСопоставления Из СтрокаДерева.Сопоставления Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСопоставления, "Номенклатура,Характеристика,Серия,СтатусУказанияСерий");
				Прервать;
			КонецЦикла;
		ИначеЕсли КоличествоСтрокСопоставления > 1 Тогда
			ПараметрыФормированияНадписи = ИнтеграцияСАТУРНКлиентСервер.ПараметрыПредставленияТабличнойЧасти("Номенклатура");
			ПараметрыФормированияНадписи.Пустая = "";
			НоваяСтрока.Представление = ИнтеграцияСАТУРНКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				СтрокаДерева.Сопоставления,
				ПараметрыФормированияНадписи);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			МассивСтрок = СоответствиеСтрокДереваПоНоменклатуре[НоваяСтрока.Номенклатура];
			Если МассивСтрок = Неопределено Тогда
				МассивСтрок = Новый Массив();
				СоответствиеСтрокДереваПоНоменклатуре[НоваяСтрока.Номенклатура] = МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(НоваяСтрока);
			ПозицииДляПересчетаКоличества.Добавить(НоваяСтрока);
		КонецЕсли;
		
		ЗаполнитьСтрокуДереваРекурсивно(
			СтрокаДерева,
			НоваяСтрока,
			СоответствиеСтрокДереваПоНоменклатуре,
			КешированныеЗначения);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация       = ПустаяСтрока(СписокРеквизитов);
	ЭтоНовый            = Объект.Ссылка.Пустая();
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Тогда
		Элементы.ТребуетсяЗагрузка.Видимость = Объект.ТребуетсяЗагрузка;
	КонецЕсли;
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("Сопоставление") Тогда
		Элементы.СопоставлениеПредставление.Видимость = Форма.ОтображатьГиперссылкуСопоставлений;
		Элементы.Номенклатура.Доступность = (Не ЭтоНовый);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусЗагрузкиИдентификаторПартии(Партия)
	
	СтруктураВозврата = Новый Структура("Загружена, Идентификатор", Ложь, "");
	РеквизитыПартии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Партия, "ТребуетсяЗагрузка, Идентификатор");
	
	СтруктураВозврата.Загружена     = Не РеквизитыПартии.ТребуетсяЗагрузка;
	СтруктураВозврата.Идентификатор = РеквизитыПартии.Идентификатор;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#Область ОстаткиПартии

&НаСервере
Процедура НастроитьДинамическийСписокОстатки()
	
	КоэффициентВес              = 0;
	КоэффициентОбъем            = 0;
	ТипИзмеряемойВеличиныСАТУРН = Объект.ТипИзмеряемойВеличиныСАТУРН;
	ЕстьОстаткиПартии           = ЕстьОстаткиПартии();
	Элементы.Остатки.Видимость  = ЕстьОстаткиПартии;
	
	Если ЕстьОстаткиПартии И ЗначениеЗаполнено(Номенклатура) Тогда
		
		ДанныеУпаковки = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковки(Номенклатура);
		ТипИзмеряемойВеличиныОбъем = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем;
		ТипИзмеряемойВеличиныВес   = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес;
			
		Если Не ЗначениеЗаполнено(Объект.ТипИзмеряемойВеличиныСАТУРН) Тогда
			Если ДанныеУпаковки.ТипИзмеряемойВеличиныОбъем Тогда
				ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
			ИначеЕсли ДанныеУпаковки.ТипИзмеряемойВеличиныВес Тогда
				ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
			ИначеЕсли ДанныеУпаковки.Объем > 0 Тогда
				ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
			Иначе
				ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
			КонецЕсли;
		КонецЕсли;
		
		КоэффициентВес   = ?(ДанныеУпаковки.Вес   = 0, 0, 1 / ДанныеУпаковки.Вес);
		КоэффициентОбъем = ?(ДанныеУпаковки.Объем = 0, 0, 1 / ДанныеУпаковки.Объем);
		
		Элементы.ОстаткиДоступныйОстатокУпаковок.Видимость = Истина;
		Элементы.ОстаткиДоступныйОстатокУпаковок.Заголовок = СтрШаблон(
			НСтр("ru = 'Доступный остаток, %1'"),
			ОбщегоНазначенияИС.ПредставлениеНоменклатуры(Номенклатура, Характеристика));
		
	Иначе
		Элементы.ОстаткиДоступныйОстатокУпаковок.Видимость = Ложь;
	КонецЕсли;
	
	Остатки.Параметры.УстановитьЗначениеПараметра("ТипИзмеряемойВеличины", ТипИзмеряемойВеличиныСАТУРН);
	Остатки.Параметры.УстановитьЗначениеПараметра("КоэффициентВес",        КоэффициентВес);
	Остатки.Параметры.УстановитьЗначениеПараметра("КоэффициентОбъем",      КоэффициентОбъем);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Остатки, "Статус", Перечисления.СтатусыОбъектовСАТУРН.Актуально, ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Остатки, "Партия", Объект.Ссылка, ВидСравненияКомпоновкиДанных.Равно,, Истина);

КонецПроцедуры

&НаСервере
Функция ЕстьОстаткиПартии()
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОстаткиПартийСАТУРНОстатки.Партия,
		|	ОстаткиПартийСАТУРНОстатки.КоличествоСАТУРНОстаток,
		|	ОстаткиПартийСАТУРНОстатки.ВОбработкеСАТУРНОстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиПартийСАТУРН.Остатки(, Партия = &Партия) КАК ОстаткиПартийСАТУРНОстатки";
	
	Запрос.УстановитьПараметр("Партия", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеСписка(Строки)
	
	СтруктураВозврата = Новый Структура();
	СтруктураВозврата.Вставить("МестаХраненияСклады",    Новый Соответствие());
	
	МестаХраненияСклады    = Новый Соответствие;
	КлючиМестХранения      = Новый Массив;
	
	Для Каждого Строка Из Строки Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение.Данные.МестоХранения) Тогда
			Если КлючиМестХранения.Найти(Строка.Значение.Данные.МестоХранения) = Неопределено Тогда
				КлючиМестХранения.Добавить(Строка.Значение.Данные.МестоХранения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	МестаХраненияСАТУРН.Ссылка КАК МестоХранения,
		|	КлассификаторОрганизацийСАТУРНМестаХранения.ТорговыйОбъект.Представление КАК МестоХраненияСклад
		|ИЗ
		|	Справочник.МестаХраненияСАТУРН КАК МестаХраненияСАТУРН
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН.МестаХранения КАК
		|			КлассификаторОрганизацийСАТУРНМестаХранения
		|		ПО КлассификаторОрганизацийСАТУРНМестаХранения.МестоХранения = МестаХраненияСАТУРН.Ссылка
		|ГДЕ
		|	МестаХраненияСАТУРН.Ссылка В (&МассивСсылок)
		|ИТОГИ
		|ПО
		|	МестоХранения";
	
	Запрос.УстановитьПараметр("МассивСсылок", КлючиМестХранения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаМестоХранения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаМестоХранения.Следующий() Цикл
		
		ВыборкаДетальныеЗаписи = ВыборкаМестоХранения.Выбрать();
		МассивСкладов          = Новый Массив;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			МассивСкладов.Добавить(ВыборкаДетальныеЗаписи.МестоХраненияСклад);
			
		КонецЦикла;
		
		Если МассивСкладов.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли МассивСкладов.Количество() = 1 Тогда
			
			МестаХраненияСклады.Вставить(ВыборкаМестоХранения.МестоХранения, МассивСкладов[0]);
			
		Иначе
			
			ШаблонСтроки = НСтр("ru = '%1 ( + еще %2 )'");
			МестаХраненияСклады.Вставить(ВыборкаМестоХранения.МестоХранения,
				СтрШаблон(ШаблонСтроки, МассивСкладов[0], МассивСкладов.Количество() - 1));
			
		КонецЕсли;
	
	КонецЦикла;

	СтруктураВозврата.МестаХраненияСклады    = МестаХраненияСклады;
	
	Возврат СтруктураВозврата;

КонецФункции

#КонецОбласти

#Область СопоставлениеСНоменклатурой

&НаКлиенте
Процедура ВыборСопоставленияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("НомерСтроки", ВыбранныйЭлемент.Значение);
	Для Каждого СтрокаТаблицы Из Сопоставление.НайтиСтроки(СтруктураПоиска) Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТаблицы);
		Прервать;
	КонецЦикла;
	
	ОчиститьСообщения();
	ВыборСопоставленияНаСервере();
	
КонецПроцедуры

&НаСервере
Функция СопоставлениеМожноЗаписать(ВыводитьТекстОшибки = Ложь, ПроверятьСерию = Ложь)
	
	ВозвращаемоеЗначение = Истина;
	Если ПроверятьСерию
		И ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий)
		И Не ЗначениеЗаполнено(Серия) Тогда
		ВозвращаемоеЗначение = Ложь;
		Если ВыводитьТекстОшибки Тогда
			ОбщегоНазначенияИС.СообщитьПользователюВФорму(
				УникальныйИдентификатор,
				НСтр("ru = 'Поле ""Серия"" не заполнено'"),,
				"Серия");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура)
		И ХарактеристикиИспользуются
		И Не ЗначениеЗаполнено(Характеристика) Тогда
		ВозвращаемоеЗначение = Ложь;
		Если ВыводитьТекстОшибки Тогда
			ОбщегоНазначенияИС.СообщитьПользователюВФорму(
				УникальныйИдентификатор,
				НСтр("ru = 'Поле ""Характеристика"" не заполнено'"),,
				"Характеристика");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере()
	
	Характеристика = Неопределено;
	Серия          = Неопределено;
	
	ЗаполнитьСлужебныеРеквизитыНоменклатуры();
	НастроитьДинамическийСписокОстатки();
	
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Характеристика");
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Серия");
	
КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииНаСервере()
	
	Серия = Неопределено;
	ЗаполнитьСлужебныеРеквизитыНоменклатуры();
	
	СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Характеристика");
	
КонецПроцедуры

&НаСервере
Процедура СерияПриИзмененииНаСервере()
	
	ЗаполнитьСлужебныеРеквизитыНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура ВыборСопоставленияНаСервере()
	
	Если СопоставлениеМожноЗаписать(Истина) Тогда
		ЗаписатьСопоставление();
	Иначе
		ЗаполнитьСопоставлениеСНоменклатурой();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСопоставление()
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных();
	
	ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.СоответствиеНоменклатурыСАТУРН.ПолноеИмя());
	ЭлементБлокировки.УстановитьЗначение("Партия", Объект.Ссылка);
	
	НаборЗаписей = РегистрыСведений.СоответствиеНоменклатурыСАТУРН.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партия.Установить(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора, ЭтотОбъект);
		СтрокаНабора.Партия = Объект.Ссылка;
		СтрокаНабора.ПАТ          = Объект.ПАТ;
	КонецЕсли;
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибки = НСтр("ru = 'При записи соответствия номенклатуры САТУРН произошла ошибка:'")
			+ Символы.ПС + "%1";
		
		ОбщегоНазначения.СообщитьПользователю(
			СтрШаблон(ТекстОшибки, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		ИнтеграцияСАТУРНСлужебный.ЗаписатьОшибкуВЖурналРегистрации(
			СтрШаблон(ТекстОшибки, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
	КонецПопытки;
	
	ЗаполнитьСопоставлениеСНоменклатурой();
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Сопоставление");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСопоставлениеСНоменклатурой(ПрименятьУсловноеОформление = Истина)
	
	Сопоставление.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СоответствиеНоменклатурыСАТУРН.Номенклатура        КАК Номенклатура,
		|	СоответствиеНоменклатурыСАТУРН.Характеристика      КАК Характеристика,
		|	СоответствиеНоменклатурыСАТУРН.Серия               КАК Серия,
		|	СоответствиеНоменклатурыСАТУРН.Партия        КАК Партия,
		|	СоответствиеНоменклатурыСАТУРН.СтатусУказанияСерий КАК СтатусУказанияСерий,
		|	ЛОЖЬ                                               КАК ХарактеристикиИспользуются,
		|	СоответствиеНоменклатурыСАТУРН.Порядок             КАК Порядок,
		|	1                                                  КАК Счетчик
		|ИЗ
		|	РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК СоответствиеНоменклатурыСАТУРН
		|ГДЕ
		|	СоответствиеНоменклатурыСАТУРН.Партия = &Партия
		|	И &Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Серия Убыв";
	
	Запрос.УстановитьПараметр("Партия", Объект.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Сопоставление.Загрузить(ТаблицаДанных);
	НомерСтроки = 1;
	Для Каждого СтрокаТаблицы Из Сопоставление Цикл
		СтрокаТаблицы.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
		СтрокаТаблицы.ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
			СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика,, СтрокаТаблицы.Серия);
	КонецЦикла;
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Сопоставление);
	
	ТаблицаДанных.Свернуть("Номенклатура,Характеристика","Счетчик");
	
	ОтображатьГиперссылкуСопоставлений = (Сопоставление.Количество() > 0);
	
	Если ТаблицаДанных.Количество() = 1 Тогда
		ВариантовСерий = ТаблицаДанных[0].Счетчик - 1;
		Если ВариантовСерий < 2 Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Сопоставление[0]); //по серии
		Иначе
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Сопоставление[ВариантовСерий]); //без серии
		КонецЕсли;
		ОтображатьГиперссылкуСопоставлений = Ложь;
		ЗаполнитьСлужебныеРеквизитыНоменклатуры();
	Иначе
		Номенклатура               = Неопределено;
		Характеристика             = Неопределено;
		Серия                      = Неопределено;
		СтатусУказанияСерий        = 0;
		ХарактеристикиИспользуются = Ложь;
		ТипНоменклатуры            = Неопределено;
	КонецЕсли;
	
	Если ПрименятьУсловноеОформление Тогда
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Характеристика");
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, "Серия");
	КонецЕсли;
	
	Если ОтображатьГиперссылкуСопоставлений Тогда
		ПараметрыФормированияНадписи = ИнтеграцияСАТУРНКлиентСервер.ПараметрыПредставленияТабличнойЧасти("ПредставлениеНоменклатуры");
		ПараметрыФормированияНадписи.Пустая = "";
		СопоставлениеПредставление = Новый ФорматированнаяСтрока(
			ИнтеграцияСАТУРНКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
				Сопоставление,
				ПараметрыФормированияНадписи),,
				ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС,,
			"ВыбратьСопоставление");
	Иначе
		СопоставлениеПредставление = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыНоменклатуры()
	
	ВременнаяТаблица = Сопоставление.Выгрузить(Новый Массив());
	НоваяСтрока = ВременнаяТаблица.Добавить();
	НоваяСтрока.НомерСтроки    = 1;
	НоваяСтрока.Номенклатура   = Номенклатура;
	НоваяСтрока.Характеристика = Характеристика;
	НоваяСтрока.Серия          = Серия;
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ВременнаяТаблица);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НоваяСтрока, ПараметрыУказанияСерий);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВременнаяТаблица[0]);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыДереваЗначенийПоНоменкалутре(СоответствиеСтрокДереваПоНоменклатуре)
	
	ТаблицаТовары = Новый ТаблицаЗначений();
	ТаблицаТовары.Колонки.Добавить("НомерСтроки",                ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаТовары.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаТовары.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ТаблицаТовары.Колонки.Добавить("ЕдиницаИзмерения",           Метаданные.ОпределяемыеТипы.Упаковка.Тип);
	ТаблицаТовары.Колонки.Добавить("ТипНоменклатуры",            Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	
	Для Каждого КлючИЗначение Из СоответствиеСтрокДереваПоНоменклатуре Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		НоваяСтрока.Номенклатура = КлючИЗначение.Ключ;
		НоваяСтрока.НомерСтроки  = ТаблицаТовары.Количество();
	КонецЦикла;
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ТаблицаТовары);
	
	Для Каждого СтрокаТаблицы Из ТаблицаТовары Цикл
		СтрокиДерева = СоответствиеСтрокДереваПоНоменклатуре[СтрокаТаблицы.Номенклатура];
		Если СтрокиДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			СтрокаДерева.ХарактеристикиИспользуются = СтрокаТаблицы.ХарактеристикиИспользуются;
			СтрокаДерева.ТипНоменклатуры            = СтрокаТаблицы.ТипНоменклатуры;
			СтрокаДерева.ЕдиницаИзмерения           = СтрокаТаблицы.ЕдиницаИзмерения;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

