#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Поиск ключей адресов по сопоставленному торговому объекту
//
// Параметры:
//  ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектИСМП - сопоставленный объект
//
// Возвращаемое значение:
//  Массив из СправочникСсылка.КлючиАдресовИСМП
Функция СопоставленныеКлючиАдресов(ТорговыйОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОператорыАдреса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючиАдресовИСМП.ОператорыАдреса КАК ОператорыАдреса
	|ГДЕ
	|   ОператорыАдреса.ТорговыйОбъект = &ТорговыйОбъект";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Поиск сопоставленных торговых объектов для переданных ключей адресов
//
// Параметры:
//  КлючиАдресов - СправочникСсылка.КлючиАдресовИСМП - ключ адреса
//
// Возвращаемое значение:
//  Соответствие из СправочникСсылка.КлючиАдресовИСМП:
//  * Ключ - СправочникСсылка.КлючиАдресовИСМП - ссылка на выгружаемый учетный документ.
//  * Значение - Массив из ОпределяемыйТип.ТорговыйОбъектИСМП.
Функция ТорговыеОбъектыПоКлючам(КлючиАдресов) Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие();
	СсылкиНаКлючи        = Новый Массив;
	
	Если ТипЗнч(КлючиАдресов) = Тип("Массив") Тогда
		СсылкиНаКлючи = КлючиАдресов;
	Иначе
		СсылкиНаКлючи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючиАдресов);
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.ТорговыйОбъектИСМП.Тип;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлючиАдресовИСМП.Ссылка          КАК КлючАдреса,
		|	КлючиАдресовИСМП.Идентификатор   КАК Идентификатор,
		|	КлючиАдресовИСМП.ОператорыАдреса.(
		|		ТорговыйОбъект КАК ТорговыйОбъект) КАК ОператорыАдреса
		|ИЗ
		|	Справочник.КлючиАдресовИСМП КАК КлючиАдресовИСМП
		|ГДЕ
		|	КлючиАдресовИСМП.Ссылка В (&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", СсылкиНаКлючи);
	
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеПоКлючу = ВозвращаемоеЗначение[ВыборкаДетальныеЗаписи.КлючАдреса];
		Если ЗначениеПоКлючу = Неопределено Тогда
			ЗначениеПоКлючу = Новый Массив();
			ВозвращаемоеЗначение[ВыборкаДетальныеЗаписи.КлючАдреса] = ЗначениеПоКлючу;
		КонецЕсли;
		
		СопоставленныеОбъекты = ВыборкаДетальныеЗаписи.ОператорыАдреса.Выбрать();
		Если СопоставленныеОбъекты.Следующий() Тогда
			ТекущееЗначение = Новый Структура("Склад, Контрагент");
			Если Метаданные.ОпределяемыеТипы.Склад.Тип.СодержитТип(ТипЗнч(СопоставленныеОбъекты.ТорговыйОбъект)) Тогда
				ТекущееЗначение.Склад = СопоставленныеОбъекты.ТорговыйОбъект;
			ИначеЕсли Метаданные.ОпределяемыеТипы.Подразделение.Тип.СодержитТип(ТипЗнч(СопоставленныеОбъекты.ТорговыйОбъект)) Тогда
				ТекущееЗначение.Контрагент = СопоставленныеОбъекты.ТорговыйОбъект;
			КонецЕсли;
			ЗначениеПоКлючу.Добавить(ТекущееЗначение);
		Иначе
			ДанныеПодбора = ИнтеграцияИСВызовСервера.СписокАвтоподбора(
				ОписаниеТипов, ВыборкаДетальныеЗаписи.Идентификатор, Ложь);
			Если ДанныеПодбора.Количество() Тогда
				Для Каждого ЭлементСпискаЗначений Из ДанныеПодбора Цикл
					ВладелецАдреса = ЭлементСпискаЗначений.Значение.ВладелецАдреса;
					Если ЗначениеЗаполнено(ВладелецАдреса) Тогда
						ТекущееЗначение = Новый Структура("Склад, Контрагент");
						Если Метаданные.ОпределяемыеТипы.Склад.Тип.СодержитТип(ТипЗнч(ВладелецАдреса)) Тогда
							ТекущееЗначение.Склад = ВладелецАдреса;
						ИначеЕсли Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип.СодержитТип(ТипЗнч(ВладелецАдреса)) Тогда
							ТекущееЗначение.Контрагент = ВладелецАдреса;
						Иначе
							Продолжить;
						КонецЕсли;
						ЗначениеПоКлючу.Добавить(ТекущееЗначение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Записывает в справочник "Ключи адресов ИС МП" соответствие прикладных реквизитов
//   * Не изменяет существующие сопоставления (поле ТорговыйОбъект)
//
// Параметры:
//   Ключ           - СправочникСсылка.КлючиАдресовИСМП  - данные классификатора ИС МП
//   ТорговыйОбъект - ОпределяемыйТип.ТорговыйОбъектИСМП - прикладной справочник
Процедура СопоставитьСПрикладнымиРеквизитами(Ключ, ТорговыйОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ)
		Или Не ЗначениеЗаполнено(ТорговыйОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТорговыйОбъект", ТорговыйОбъект);
	Запрос.УстановитьПараметр("Ссылка", Ключ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Справочник.КлючиАдресовИСМП.ОператорыАдреса
	|ГДЕ
	|	Ссылка = &Ссылка
	|	И ТорговыйОбъект = &ТорговыйОбъект";
	Если Запрос.Выполнить().Пустой() Тогда
		КлючОбъект = Ключ.ПолучитьОбъект();
		КлючОбъект.ОператорыАдреса.Добавить().ТорговыйОбъект = ТорговыйОбъект;
		УстановитьПривилегированныйРежим(Истина);
		КлючОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Идентификатор");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = Данные.Идентификатор;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

#Область ПоискСсылок

Функция ИсходныеДанныеАдреса(Адрес, Индекс = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Address",    Адрес);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция КлючАдреса(ИсходныеДанные, Сопоставление = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсходныеДанные) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	СправочникСсылка = НайтиПоРеквизиту("Идентификатор", ИсходныеДанные);
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		ИмяТаблицы = Метаданные.Справочники.КлючиАдресовИСМП.ПолноеИмя();
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", ИсходныеДанные);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			КлючАдресаОбъект = СоздатьЭлемент();
			КлючАдресаОбъект.Идентификатор = ИсходныеДанные;
			
			Если ЗначениеЗаполнено(Сопоставление) Тогда
				НовоеСопоставление = КлючАдресаОбъект.ОператорыАдреса.Добавить();
				НовоеСопоставление.ТорговыйОбъект = Сопоставление;
			КонецЕсли;
			
			КлючАдресаОбъект.Записать();
			
			СправочникСсылка = КлючАдресаОбъект.Ссылка;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				           |%3'"),
				Метаданные.Справочники.КлючиАдресовИСМП.Синоним,
				ИсходныеДанные,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				           |%3'"),
				Метаданные.Справочники.КлючиАдресовИСМП.Синоним,
				ИсходныеДанные,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ТекстОшибкиПодробно,
				НСтр("ru = 'Работа с ключами адресов ИС МП'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
