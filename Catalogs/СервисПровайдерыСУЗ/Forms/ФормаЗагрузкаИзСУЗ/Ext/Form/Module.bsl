#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьОбновлениеДанныхСписка();
	УстановитьОтборСтрокСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательОтбораПриИзменении(Элемент)
	
	УстановитьОтборСтрокСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	ОчиститьСообщения();
	ВыполнитьЗагрузкуДанных();
	ОповеститьОбИзменении(Тип("СправочникСсылка.СервисПровайдерыСУЗ"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	ИзменитьПометку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВсе(Команда)
	
	ИзменитьПометку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ВыполнитьОбновлениеДанныхСписка();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СписокСервисПровайдер.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Справочники.СервисПровайдерыСУЗ.ПустаяСсылка();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеДанныхСписка()
	
	ОчиститьСообщения();
	ОчиститьВременныеДанные();
	Список.Очистить();
	
	ПараметрыЗаполнения = ПолучитьПараметрыЗаполнения();
	Если ПараметрыЗаполнения.Организации.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не найдены настройки обмена с СУЗ.'"));
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ВидыПродукции.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не найдено ни одного вида продукции, для которого включен учет маркируемой продукции.'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого Организация Из ПараметрыЗаполнения.Организации Цикл
		
		РезультатЗагрузки = ЗагрузитьДанныеИзСУЗ(Организация, ПараметрыЗаполнения.ВидыПродукции);
		
		Если РезультатЗагрузки.ТребуетсяОбновлениеКлючаСессии Тогда
			ЗапроситьКлючСессииНачало(Организация, ПараметрыЗаполнения.ВидыПродукции);
		ИначеЕсли ЗначениеЗаполнено(РезультатЗагрузки.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Данные по организации %1 не получены по причине: %2'"),
				Организация,
				РезультатЗагрузки.ТекстОшибки));
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьНаличиеСуществующихСервисПровайдеров();
	
	Список.Сортировать("Наименование");
	ОчиститьВременныеДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВременныеДанные()
	
	Если ЭтоАдресВременногоХранилища(АдресВременныхДанных) Тогда
		УдалитьИзВременногоХранилища(АдресВременныхДанных);
	КонецЕсли;
	
	АдресВременныхДанных = "";
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыЗаполнения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОбменаСУЗ.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.НастройкиОбменаСУЗ КАК НастройкиОбменаСУЗ;
	|
	|ВЫБРАТЬ
	|	НастройкиУчетаМаркируемойПродукцииИСМП.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП КАК НастройкиУчетаМаркируемойПродукцииИСМП
	|ГДЕ
	|	НастройкиУчетаМаркируемойПродукцииИСМП.ВестиУчетПродукции";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("Организации",   РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Организация"));
	Результат.Вставить("ВидыПродукции", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ВидПродукции"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПометку(Пометка)
	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		СтрокиДляОбработки = ВыделенныеСтроки;
		ПолучатьДанныеСтроки = Истина;
	Иначе
		СтрокиДляОбработки = Список;
		ПолучатьДанныеСтроки = Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиДляОбработки Цикл
		Если ПолучатьДанныеСтроки Тогда
			Строка = Список.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		Строка.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокСписка()
	
	Если ПереключательОтбора = 0 Тогда
		Элементы.Список.ОтборСтрок = Новый ФиксированнаяСтруктура("СервисПровайдер",
			ПредопределенноеЗначение("Справочник.СервисПровайдерыСУЗ.ПустаяСсылка"));
	Иначе
		Элементы.Список.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#Область НастройкиОбмена

&НаСервереБезКонтекста
Функция ТекущиеНастройкаОбменаСУЗ(Организация)
	
	ПараметрыОбмена = Новый Структура();
	ПараметрыОбмена.Вставить(
		"НастройкиОбменаСУЗ",
		ИнтеграцияИСМП.НастройкиОбменаСУЗ(Организация));
	
	ПараметрыШапки = ИнтеграцияИСМПСлужебный.НоваяСтруктураПоискаНастроекОбменаСУЗ();
	ПараметрыШапки.Организация = Организация;
	
	Возврат ИнтеграцияИСМПСлужебный.НастройкаОбменаСУЗ(
		ПараметрыОбмена,
		ПараметрыШапки);
	
КонецФункции

#КонецОбласти

#Область КлючАвторизации

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(Организация, ВидыПродукции)
	
	РезультатПолученияНастройки = ТекущиеНастройкаОбменаСУЗ(Организация);
	Если Не РезультатПолученияНастройки.Успешно Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Данные по организации %1 не получены по причине: %2'"),
			Организация,
			РезультатПолученияНастройки.ТекстОшибки));
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессииСУЗ(
		РезультатПолученияНастройки.НастройкаОбмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Организация",   Организация);
	ДополнительныеПараметры.Вставить("ВидыПродукции", ВидыПродукции);
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения(
		"ЗапроситьКлючСессииЗавершение",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ПараметрыЗапроса, 
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[ДополнительныеПараметры.Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Произошла ошибка авторизации'"));
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			СтрШаблон(НСтр("ru = 'Данные по организации %1 не получены по причине: %2'"),
			ДополнительныеПараметры.Организация,
			ТекстОшибки));
	Иначе
		Результат = ЗагрузитьДанныеИзСУЗ(ДополнительныеПараметры.Организация, ДополнительныеПараметры.ВидыПродукции);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось выполнить авторизацию по организации %1'"),
				ДополнительныеПараметры.Организация));
		ИначеЕсли ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Данные по организации %1 не получены по причине: %2'"),
				ДополнительныеПараметры.Организация,
				Результат.ТекстОшибки));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеСписка

&НаСервере
Функция ЗагрузитьДанныеИзСУЗ(Организация, ВидыПродукции)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", Ложь);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    "");
	
	РезультатПолученияНастройки = ТекущиеНастройкаОбменаСУЗ(Организация);
	НастройкаОбменаСУЗ          = РезультатПолученияНастройки.НастройкаОбмена;
	
	Если Не РезультатПолученияНастройки.Успешно Тогда
		ВозвращаемоеЗначение.ТекстОшибки = РезультатПолученияНастройки.ТекстОшибки;
		Возврат ВозвращаемоеЗначение;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(АдресВременныхДанных) Тогда
		ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресВременныхДанных);
	Иначе
		ЗагруженныеДанные = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого ВидПродукции Из ПоддерживаемыеВидыПродукции(НастройкаОбменаСУЗ.ФорматОбмена, ВидыПродукции) Цикл
		
		Результат = ИнтерфейсСУЗ.СписокСервисПровайдеров_V2(ВидПродукции, НастройкаОбменаСУЗ);
		
		Если Результат.ТребуетсяОбновлениеКлючаСессии Тогда
			АдресВременныхДанных = ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор);
			ВозвращаемоеЗначение.ТребуетсяОбновлениеКлючаСессии = Истина;
			Возврат ВозвращаемоеЗначение;
		КонецЕсли;
		
		Если Результат.СтатусОбработки <> ПредопределенноеЗначение(
			"Перечисление.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена") Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'Организация: %1. Вид продукции: %2. Ошибка получения данных из СУЗ: %3'"),
				Организация,
				ВидПродукции,
				Результат.ТекстОшибки));
			Продолжить;
		КонецЕсли;
		
		Если Результат.Список = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Строка Из Результат.Список Цикл
			Если Строка.ВидыПродукции.Количество() > 0 Тогда
				Если ЗагруженныеДанные[Строка.Идентификатор] = Неопределено Тогда
					СтрокаСписка = Список.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаСписка, Строка);
					ЗагруженныеДанные.Вставить(Строка.Идентификатор, СтрокаСписка);
				КонецЕсли;
				Для Каждого ВидПродукцииСтроки Из Строка.ВидыПродукции Цикл
					Если СтрокаСписка.ВидыПродукции.НайтиПоЗначению(ВидПродукцииСтроки) = Неопределено Тогда
						СтрокаСписка.ВидыПродукции.Добавить(ВидПродукцииСтроки);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	АдресВременныхДанных = ПоместитьВоВременноеХранилище(ЗагруженныеДанные, УникальныйИдентификатор);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоддерживаемыеВидыПродукции(ФорматОбмена, ВидыПродукции)
	
	Результат = Новый Массив;
	
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Если ИнтерфейсСУЗ.ПоддерживаетсяФорматОбменаПоВидуПродукции(ФорматОбмена, ВидПродукции)
			И Не (ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V2
				И ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха) Тогда
			Результат.Добавить(ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьНаличиеСуществующихСервисПровайдеров()
	
	Идентификаторы = Новый Массив;
	
	Если ЭтоАдресВременногоХранилища(АдресВременныхДанных) Тогда
		ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресВременныхДанных);
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ЗагруженныеДанные Цикл
		Идентификаторы.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СервисПровайдерыСУЗ.Идентификатор КАК Идентификатор,
	|	СервисПровайдерыСУЗ.Ссылка        КАК Ссылка
	|ИЗ
	|	Справочник.СервисПровайдерыСУЗ КАК СервисПровайдерыСУЗ
	|ГДЕ
	|	СервисПровайдерыСУЗ.Идентификатор В (&Идентификаторы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗагруженныеДанные[Выборка.Идентификатор].СервисПровайдер = Выборка.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаДанных

&НаСервере
Процедура ВыполнитьЗагрузкуДанных()
	
	Если ТипЗнч(Элементы.Список.ОтборСтрок) = Тип("ФиксированнаяСтруктура") Тогда
		ОтборСтрок = Новый Структура(Элементы.Список.ОтборСтрок);
	Иначе
		ОтборСтрок = Новый Структура;
	КонецЕсли;
	
	ОтборСтрок.Вставить("Пометка", Истина);
	
	ВыбранныеСтроки = Список.НайтиСтроки(ОтборСтрок);
	
	Если ВыбранныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не указаны сервис-провайдеры, которых необходимо загрузить'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ВыбранныеСтроки Цикл
		
		Если ЗначениеЗаполнено(Строка.СервисПровайдер) Тогда
			Объект = Строка.СервисПровайдер.ПолучитьОбъект();
			Объект.ВидыПродукции.Очистить();
		Иначе
			Объект = Справочники.СервисПровайдерыСУЗ.СоздатьЭлемент();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, Строка);
		
		Для Каждого ВидПродукцииЭлемент Из Строка.ВидыПродукции Цикл
			СтрокаВидыПродукции = Объект.ВидыПродукции.Добавить();
			СтрокаВидыПродукции.ВидПродукции = ВидПродукцииЭлемент.Значение;
		КонецЦикла;
		
		Отказ = Ложь;
		
		Попытка
			Объект.Записать();
		Исключение
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Не удалось загрузить сервис провайдера %1 по причине: %2'"),
				Строка.Наименование,
				ОписаниеОшибки()));
		КонецПопытки;
		
		Если Не Отказ Тогда
			Строка.СервисПровайдер = Объект.Ссылка;
			Строка.Пометка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
