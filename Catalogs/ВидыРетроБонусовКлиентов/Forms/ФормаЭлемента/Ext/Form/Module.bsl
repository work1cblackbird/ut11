//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БезРасчетаПриИзменении(Элемент)
	
	Объект.ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется");
	Объект.ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка");
	Объект.ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагентуКлиенту");
	УстановитьДоступныйСписокБазРасчетаПродаж(ЭтотОбъект);
	Объект.УчитыватьНДС = Ложь;
	
	УстановитьДоступныйСписокСоставУчастников(ЭтотОбъект);
	Объект.ОтборУчастников = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные");
	УстановитьДоступныйСписокОтборУчастников(ЭтотОбъект);
	Объект.СоставТоваров = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка");
	УстановитьДоступныйСписокОтборТоваров(ЭтотОбъект);
	Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.Однократно");
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
	Если Объект.БезРасчета Тогда
		
		Объект.ПорядокРаспределения = ПредопределенноеЗначение("Перечисление.ПорядкиРаспределенияРетроБонусов.ПустаяСсылка");
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательПродажПриИзменении(Элемент)
	
	УстановитьДоступныйСписокБазРасчетаПродаж(ЭтотОбъект);
	
	Если (Объект.ПоказательПродаж <> ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется")
		  И Объект.ПоказательПродаж <> ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.Сумма")) Тогда
		
		Объект.СоставТоваров = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.Номенклатура");
		Объект.ОтборТоваров = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные");
		
	КонецЕсли;
	УстановитьДоступныйСписокОтборТоваров(ЭтотОбъект);
	
	Если Объект.ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется") Тогда
		
		Объект.ПериодичностьУсловий = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка");
		Объект.ПорядокРаспределения = ПредопределенноеЗначение("Перечисление.ПорядкиРаспределенияРетроБонусов.ПустаяСсылка");
		
	ИначеЕсли Объект.ПоказательПродаж = ПредопределенноеЗначение("Перечисление.ЦелевыеПоказателиПродажРетроБонусов.КоличествоСовокупно") Тогда
		
		Объект.ПорядокРаспределения = ПредопределенноеЗначение("Перечисление.ПорядкиРаспределенияРетроБонусов.ПустаяСсылка");
		
	КонецЕсли;
	
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьУсловийПриИзменении(Элемент)
	
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура БазаРасчетаПродажПриИзменении(Элемент)
	
	Если Объект.БазаРасчетаПродаж = ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены") Тогда
		
		Объект.УчитыватьНДС = Ложь;
		Объект.СоставТоваров = ПредопределенноеЗначение("Перечисление.СоставыТоваровРетроБонусов.Номенклатура");
		Объект.ОтборТоваров = ПредопределенноеЗначение("Перечисление.СоставыСписковРетроБонусов.Выбранные");
		
	КонецЕсли;
	
	УстановитьДоступныйСписокОтборТоваров(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставТоваровПриИзменении(Элемент)
	
	УстановитьДоступныйСписокОтборТоваров(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставУчастниковПриИзменении(Элемент)
	
	УстановитьДоступныйСписокОтборУчастников(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы("СоставУчастников");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоДействия", "ОкончаниеДействия"));
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства
 
// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - вызванная команда.
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ВидРетроБонусаИспользуется = Справочники.ВидыРетроБонусовКлиентов.ВидРетроБонусаИспользуется(Объект);
	
	ИспользуютсяСегментыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры");
	ИспользуютсяСегментыПартнеров = ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров");
	ИспользуютсяДоговора = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	ИспользуютсяТиповыеСоглашения = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользуютсяИндивидуальныеСоглашения = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ДенежныеСредстваСервер.УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(ЭтотОбъект);
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьДоступныйСписокБазРасчетаПродаж(ЭтотОбъект);
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	УстановитьДоступныйСписокСоставУчастников(ЭтотОбъект);
	УстановитьДоступныйСписокОтборУчастников(ЭтотОбъект);
	УстановитьДоступныйСписокОтборТоваров(ЭтотОбъект);
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтотОбъект, ИзмененныйРеквизит, РеквизитыФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтотОбъект, ИзмененныйРеквизит, РеквизитыФормы(ЭтотОбъект));
	
КонецПроцедуры

// Установить доступный список баз расчета продаж
// 
// Параметры:
//  Форма - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокБазРасчетаПродаж(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхБазРасчетаПродаж();
	ПараметрыОтбора.БезРасчета = Объект.БезРасчета;
	ПараметрыОтбора.ПоказательПродаж = Объект.ПоказательПродаж;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокБазРасчетаПродаж(ПараметрыОтбора);
	Форма.Элементы.БазаРасчетаПродаж.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "БазаРасчетаПродаж", МассивВыбора);
	
КонецПроцедуры

// Установить доступный список периодичности начислений
// 
// Параметры:
//  Форма - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокПериодичностьНачислений(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхПериодичностейНачислений();
	ПараметрыОтбора.ПериодичностьУсловий = Объект.ПериодичностьУсловий;
	ПараметрыОтбора.ПоказательПродаж = Объект.ПоказательПродаж;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокПериодичностьНачислений(ПараметрыОтбора);
	Форма.Элементы.ПериодичностьНачислений.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ПериодичностьНачислений", МассивВыбора);
	
КонецПроцедуры

// Установить доступный список отбор товаров.
// 
// Параметры:
//  Форма - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокОтборТоваров(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхОтборовТоваров();
	ПараметрыОтбора.БезРасчета = Объект.БезРасчета;
	ПараметрыОтбора.ПоказательПродаж = Объект.ПоказательПродаж;
	ПараметрыОтбора.БазаРасчетаПродаж = Объект.БазаРасчетаПродаж;
	ПараметрыОтбора.СоставТоваров = Объект.СоставТоваров;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокОтборТоваров(ПараметрыОтбора);
	Форма.Элементы.ОтборТоваров.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ОтборТоваров", МассивВыбора);
	
КонецПроцедуры

// Установить доступный список состав участников.
// 
// Параметры:
//  Форма - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокСоставУчастников(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхСоставовУчастников();
	ПараметрыОтбора.БезРасчета = Объект.БезРасчета;
	ПараметрыОтбора.ИспользоватьСегментыПартнеров = Форма.ИспользуютсяСегментыПартнеров;
	ПараметрыОтбора.ИспользоватьДоговоры = Форма.ИспользуютсяДоговора;
	ПараметрыОтбора.ИспользоватьТиповыеСоглашения = Форма.ИспользуютсяТиповыеСоглашения;
	ПараметрыОтбора.ИспользоватьИндивидуальныеСоглашения = Форма.ИспользуютсяИндивидуальныеСоглашения;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокСоставУчастников(ПараметрыОтбора);
	Форма.Элементы.СоставУчастников.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "СоставУчастников", МассивВыбора);
	
КонецПроцедуры

// Установить доступный список отбор участников.
// 
// Параметры:
//  Форма - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокОтборУчастников(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхОтборовУчастников();
	ПараметрыОтбора.БезРасчета = Объект.БезРасчета;
	ПараметрыОтбора.СоставУчастников = Объект.СоставУчастников;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокОтбораУчастников(ПараметрыОтбора);
	Форма.Элементы.ОтборУчастников.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ОтборУчастников", МассивВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ВидРетроБонусаИспользуется");
	РеквизитыФормы.Вставить("ИспользуютсяСегментыНоменклатуры");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Возврат РеквизитыФормы;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method - неявный вызов из УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти