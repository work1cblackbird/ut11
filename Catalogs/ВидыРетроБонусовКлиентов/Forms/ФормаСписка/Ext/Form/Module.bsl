//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыРетроБонусовКлиентов);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		Элементы.Список.ИзменятьСоставСтрок = Ложь;
		ЕстьПравоИзменения = Ложь;
		
	КонецЕсли;
	
	Элементы.ГруппаУстановитьСтатус.Видимость = ЕстьПравоИзменения;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СписокКоманднаяПанель);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Асинх Процедура УстановитьСтатусПодготовлен(Команда)
	
	ВидыКОбработке = ВыделенныеВидыКСменеСтатуса();
	Если ВидыКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке видов ретро-бонусов будет установлен статус ""Подготовлен"".
						|Продолжить?'");
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		
		КоличествоОбработанных = УстановитьСтатусСервер(
			ВидыКОбработке,
			ПредопределенноеЗначение("Перечисление.СтатусыВидовРетроБонусов.Подготовлен"));
			
		ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.Список,
			КоличествоОбработанных,
			ВидыКОбработке.Количество(),
			НСтр("ru = 'Подготовлен'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьСтатусДействует(Команда)
	
	ВидыКОбработке = ВыделенныеВидыКСменеСтатуса();
	Если ВидыКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке видов ретро-бонусов будет установлен статус ""Действует"". 
						|Продолжить?'");
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		
		КоличествоОбработанных = УстановитьСтатусСервер(
			ВидыКОбработке,
			ПредопределенноеЗначение("Перечисление.СтатусыВидовРетроБонусов.Действует"));
			
		ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.Список,
			КоличествоОбработанных,
			ВидыКОбработке.Количество(),
			НСтр("ru = 'Действует'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура УстановитьСтатусЗакрыт(Команда)
	
	ВидыКОбработке = ВыделенныеВидыКСменеСтатуса();
	Если ВидыКОбработке.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'У выделенных в списке видов ретро-бонусов будет установлен статус ""Закрыт"".
						|После изменения статуса действующие виды ретро-бонусов перестанут действовать.
						|Продолжить?'");
	
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОчиститьСообщения();
		
		КоличествоОбработанных = УстановитьСтатусСервер(
			ВидыКОбработке,
			ПредопределенноеЗначение("Перечисление.СтатусыВидовРетроБонусов.Закрыт"));
			
		ОповеститьПользователяОбУстановкеСтатуса(
			Элементы.Список,
			КоличествоОбработанных,
			ВидыКОбработке.Количество(),
			НСтр("ru = 'Закрыт'"));
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция УстановитьСтатусСервер(Знач ВидыРетроБонусов, Знач НовыйСтатус)
	
	Возврат Справочники.ВидыРетроБонусовКлиентов.УстановитьСтатус(
		ВидыРетроБонусов,
		НовыйСтатус);
	
КонецФункции

// Процедура показывает оповещение после обработки статусов выделенных в списке видов
//
// Параметры:
//	СписокВидов  - ТаблицаФормы - элемент формы
//	КоличествоОбработанных - Число - количество успешно обработанных видов
//	КоличествоВсего - Число - количество выделенных в списке видов
//	Статус - Строка - устанавливаемый статус.
//
&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокВидов, КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		Если СписокВидов <> Неопределено Тогда
			СписокВидов.Обновить();
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = 'Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке объектов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", Строка(КоличествоОбработанных));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%", Строка(КоличествоВсего));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru = 'Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Статус ""%Статус%"" не установлен ни для одного объекта'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru = 'Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыРетроБонусовКлиентов
//
&НаКлиенте
Функция ВыделенныеВидыКСменеСтатуса()
	
	ВидыКОбработке = Новый Массив; // Массив из СправочникСсылка.ВидыРетроБонусовКлиентов
	
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.Список);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		Возврат ВидыКОбработке;
		
	КонецЕсли;
	
	ВыделенныеВидыГруппы = Новый Массив; // Массив из СправочникСсылка.ВидыРетроБонусовКлиентов
	Для Каждого ВидРетроБонуса Из Элементы.Список.ВыделенныеСтроки Цикл // СправочникСсылка.ВидыРетроБонусовКлиентов
		
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВидРетроБонуса);
		Если ДанныеСтроки.ЭтоГруппа Тогда
			
			ВыделенныеВидыГруппы.Добавить(ВидРетроБонуса);
		
		КонецЕсли;
		
	КонецЦикла;
	
	ВидыКОбработке = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ВыделенныеСтроки, ВыделенныеВидыГруппы);
	Возврат ВидыКОбработке;
	
КонецФункции

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#КонецОбласти	