//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Справочник.ВидыРетроБонусовКлиентов.ПФ_MXL_Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка'");
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаПечати, "ЭтоГруппа", Ложь);
	
	//-- Локализация
	
КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
		
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Прочее

// Вид ретро бонуса используется в документах
// 
// Параметры:
//  Объект - СправочникОбъект.ВидыРетроБонусовКлиентов -
//  	   - см. Справочник.ВидыРетроБонусовКлиентов.Форма.ФормаЭлемента.Объект 
//  ПроверятьСБлокировкой - Булево - Проверять с блокировкой на документы
// 
// Возвращаемое значение:
//  Булево - Вид ретро бонуса используется
//
Функция ВидРетроБонусаИспользуется(Объект, ПроверятьСБлокировкой = Ложь) Экспорт
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Если ПроверятьСБлокировкой Тогда
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.УсловияРетроБонусовКлиентов");
		ЭлементБлокировки.УстановитьЗначение("ВидРетроБонуса", Объект.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		
		// Вызывается из внешней транзакции записи
		//@skip-check lock-out-of-try
		Блокировка.Заблокировать();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидРетроБонуса", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УсловияРетроБонусовКлиентов.Ссылка
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
	|ГДЕ
	|	УсловияРетроБонусовКлиентов.ВидРетроБонуса = &ВидРетроБонуса";
	Результат = Запрос.Выполнить();
	Возврат НЕ Результат.Пустой();
	
КонецФункции

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив из Строка - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условия применения настройки
//		* Свойства - Структура - имена и значения свойств
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	МодульНастройки = ФинансоваяОтчетностьСервер;
	
	НастройкаПоляОтборУчастников(Настройки, МодульНастройки);
	НастройкаПоляБезРасчета(Настройки, МодульНастройки);
	НастройкаПоляПоказательПродаж(Настройки, МодульНастройки);
	НастройкаПоляБазаРасчетаПродаж(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки);
	НастройкаПоляСУчетомНДС(Настройки, МодульНастройки);
	НастройкаПоляСоставУчастников(Настройки, МодульНастройки);
	НастройкаПоляСоставТоваров(Настройки, МодульНастройки);
	НастройкаПоляОтборТоваров(Настройки, МодульНастройки);
	НастройкаПоляПорядокРаспределения(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки);
	НастройкаПоляДекорацииИспользования(Настройки, МодульНастройки);
	
КонецПроцедуры

// Устанавливает статус вида ретро-бонуса
//
// Параметры:
//	ВидыРетроБонусов - Массив из СправочникСсылка.ВидыРетроБонусовКлиентов - Массив ссылок на виды ретро-бонусов
//	Статус - ПеречислениеСсылка.СтатусыВидовРетроБонусов - Статус, который будет установлен у видов ретро-бонусов
//
// Возвращаемое значение:
//	Число - Количество обработанных объектов.
//
Функция УстановитьСтатус(Знач ВидыРетроБонусов, Знач Статус) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = Новый Массив(); // Массив из СправочникСсылка.ВидыРетроБонусовКлиентов
	КоличествоОбработанных = 0;
	
	Для Каждого ВидРетроБонуса Из ВидыРетроБонусов Цикл
		
		Если ТипЗнч(ВидРетроБонуса) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСсылок.Добавить(ВидРетроБонуса);
		
	КонецЦикла;
	
	Если МассивСсылок = 0 Тогда
		Возврат КоличествоОбработанных;
	КонецЕсли;
	
	РеквизитыВидов = ВыборкаРеквизитовВидов(МассивСсылок, Статус); 
	
	Пока РеквизитыВидов.Следующий() Цикл
		
		Если РеквизитыВидов.ПометкаУдаления Тогда
			
			ШаблонОшибки = НСтр("ru = 'Вид ретро-бонуса ""%1"" помечен на удаление. Изменение статуса пропущено.'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Если РеквизитыВидов.СтатусСовпадает Тогда
			
			ШаблонОшибки = НСтр("ru = 'Виду ретро-бонуса ""%1"" уже присвоен статус ""%2""'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление,
				Строка(Статус));
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			Продолжить;
			
		КонецЕсли;
		
		Попытка
			
			ЗаблокироватьДанныеДляРедактирования(РеквизитыВидов.Ссылка);
			
		Исключение
			
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ШаблонОшибки = НСтр("ru = 'Не удалось заблокировать вид ретро-бонуса""%1"". %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				РеквизитыВидов.Представление,
				ОписаниеОшибки);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
			
			Продолжить;
			
		КонецПопытки;
		
		Объект = РеквизитыВидов.Ссылка.ПолучитьОбъект();
		Объект.Статус = Статус;	
		
		Если Объект.ПроверитьЗаполнение() Тогда
			
			Попытка
				
				Объект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
				
			Исключение
				
				ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ШаблонОшибки = НСтр("ru = 'Не удалось записать %1. %2'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки,
					РеквизитыВидов.Представление,
					ОписаниеОшибки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, РеквизитыВидов.Ссылка);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Справочники.ВидыРетроБонусовКлиентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.21";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("5927ed42-5c05-476a-be33-413c8de15752");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Справочники.ВидыРетроБонусовКлиентов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	МассивКомментариев = Новый Массив(); // Массив из Строка
	МассивКомментариев.Добавить(НСтр("ru = 'Исправляет заполнение полей ""База расчета продаж"", ""Отбор товаров"", ""Состав товаров"" для справочника ""Виды ретро-бонусов клиентов"", если в них установлен флаг расчета суммы вне системы.'"));
	Обработчик.Комментарий = СтрСоединить(МассивКомментариев, " ");
	
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив; // Массив из Строка
	Читаемые.Добавить(Метаданные.Справочники.ВидыРетроБонусовКлиентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив из Строка
	Изменяемые.Добавить(Метаданные.Справочники.ВидыРетроБонусовКлиентов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив; // Массив из Строка
	Блокируемые.Добавить(Метаданные.Справочники.ВидыРетроБонусовКлиентов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьЭлемент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Ссылка
	|ИЗ
	|	Справочник.ВидыРетроБонусовКлиентов КАК Данные
	|ГДЕ
	|	Данные.БезРасчета
	|	И (Данные.БазаРасчетаПродаж <> ЗНАЧЕНИЕ(Перечисление.БазыРасчетаПродажРетроБонусов.ПустаяСсылка)
	|		ИЛИ Данные.СоставТоваров <> ЗНАЧЕНИЕ(Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка)
	|		ИЛИ Данные.ОтборТоваров <> ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка))";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		ОписаниеИзменений = Новый Массив; // Массив из Строка
		ОписаниеИзменений.Добавить(НСтр("ru = 'При обновлении системы выполнены следующие операции:'"));
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ВидыРетроБонусовКлиентов
			Записывать = Ложь;
			
			Если СправочникОбъект <> Неопределено Тогда
				
				ПредставлениеСсылки = Строка(СправочникОбъект);
				
				Если СправочникОбъект.БезРасчета Тогда
					
					Если НЕ СправочникОбъект.БазаРасчетаПродаж.Пустая() Тогда
						
						СправочникОбъект.БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ПустаяСсылка();
						ОписаниеИзменений.Добавить(НСтр("ru = '- обновлено значение поля ""База расчета продаж"" для элемента с признаком расчета вне системы'"));
						Записывать = Истина;
						
					КонецЕсли;
					
					Если НЕ СправочникОбъект.СоставТоваров.Пустая() Тогда
						
						СправочникОбъект.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.ПустаяСсылка();
						ОписаниеИзменений.Добавить(НСтр("ru = '- обновлено значение поля ""Состав товаров"" для элемента с признаком расчета вне системы'"));
						Записывать = Истина;
						
					КонецЕсли;
					
					Если НЕ СправочникОбъект.ОтборТоваров.Пустая() Тогда
						
						СправочникОбъект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
						ОписаниеИзменений.Добавить(НСтр("ru = '- обновлено значение поля ""Отбор товаров"" для элемента с признаком расчета вне системы'"));
						Записывать = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Записывать Тогда
				
				СправочникОбъект.ЗаписьИсторииДанных.КомментарийВерсии = СтрСоединить(ОписаниеИзменений);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка);
				
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(),
				СтрокаТаблицы.Ссылка,
				ПредставлениеСсылки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область МетодыНастройкиПолейФормы

Процедура НастройкаПоляБезРасчета(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БезРасчета");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляПоказательПродаж(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПоказательПродаж");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПоказательПродаж");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляБазаРасчетаПродаж(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БазаРасчетаПродаж");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БазаРасчетаПродаж");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляСоставУчастников(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставУчастников");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляОтборУчастников(Настройки, МодульНастройки)
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	
	СписокУчастников = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
	СписокУчастников.Добавить(СоставыУчастников.Договоры);
	СписокУчастников.Добавить(СоставыУчастников.Соглашения);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "СоставУчастников", СписокУчастников,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляСоставТоваров(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставТоваров");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	ОтборПолей = БазовыйОтборТоваров(МодульНастройки);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СоставТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ИспользуютсяСегментыНоменклатуры", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборТоваров(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	ОтборПолей = БазовыйОтборТоваров(МодульНастройки);
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Функция БазовыйОтборТоваров(МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	БазаРасчета = Перечисления.БазыРасчетаПродажРетроБонусов;
	
	Отбор = Новый ОтборКомпоновкиДанных();
	
	МодульНастройки.НовыйОтбор(Отбор, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(Отбор, "БазаРасчетаПродаж", БазаРасчета.ВыручкаБазовыеЦены);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.НеИспользуется);
	ИсклПоказатели.Добавить(ПоказателиПродаж.Сумма);
	МодульНастройки.НовыйОтбор(Отбор, "ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Возврат Отбор;
	
КонецФункции

Процедура НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьУсловий");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ПоказательПродаж", ПоказателиПродаж.НеИспользуется);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПоляСУчетомНДС(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("УчитыватьНДС");
	
	БазаРасчета = Перечисления.БазыРасчетаПродажРетроБонусов;
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БазаРасчетаПродаж", БазаРасчета.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БазаРасчетаПродаж", БазаРасчета.ВыручкаБазовыеЦены);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("УчитыватьНДС");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПорядокРаспределения(Настройки, МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПорядокРаспределения");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.НеИспользуется);
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПорядокРаспределения");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПоляДекорацииИспользования(Настройки, МодульНастройки)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияВидРетроБонусаИспользуется");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ВидРетроБонусаИспользуется", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Выборка реквизитов видов для обновления статусов
// 
// Параметры:
//  Виды  - Массив из СправочникСсылка.ВидыРетроБонусовКлиентов - Массив ссылок
//  Статус - ПеречислениеСсылка.СтатусыВидовРетроБонусов - Статус
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Выборка реквизитов видов:
//	* Представление - Строка
//	* Ссылка - СправочникСсылка.ВидыРетроБонусовКлиентов
//	* СтатусСовпадает - Булево
//	* ПометкаУдаления - Булево
//	* Используется - Булево - используется в документах условий ретро-бонусов
//
Функция ВыборкаРеквизитовВидов(Виды, Статус)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыРетроБонусов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИспользуемыеВиды
	|ИЗ
	|	Справочник.ВидыРетроБонусовКлиентов КАК ВидыРетроБонусов
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
	|			ГДЕ
	|				УсловияРетроБонусовКлиентов.ВидРетроБонуса = ВидыРетроБонусов.Ссылка)
	|	И ВидыРетроБонусов.Ссылка В(&Виды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыРетроБонусов.Представление КАК Представление,
	|	ВидыРетроБонусов.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ВидыРетроБонусов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ВидыРетроБонусов.ПометкаУдаления КАК ПометкаУдаления,
	|	НЕ ИспользуемыеВиды.Ссылка ЕСТЬ NULL КАК Используется
	|ИЗ
	|	Справочник.ВидыРетроБонусовКлиентов КАК ВидыРетроБонусов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИспользуемыеВиды КАК ИспользуемыеВиды
	|		ПО ВидыРетроБонусов.Ссылка = ИспользуемыеВиды.Ссылка
	|ГДЕ
	|	ВидыРетроБонусов.Ссылка В(&Виды)";
	
	Запрос.УстановитьПараметр("Виды", Виды);
	Запрос.УстановитьПараметр("Статус", Статус);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли