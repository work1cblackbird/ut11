#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция СтруктураСозданияШтрихкодаУпаковки() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВидПродукции");
	Результат.Вставить("ТипУпаковки");
	Результат.Вставить("ТипШтрихкода");
	Результат.Вставить("Штрихкод", "");
	Результат.Вставить("ХешСумма", "");
	Результат.Вставить("Номенклатура");
	Результат.Вставить("Характеристика");
	Результат.Вставить("Упаковка");
	Результат.Вставить("Серия");
	Результат.Вставить("Количество", 0);
	Результат.Вставить("КоличествоПотребительскихУпаковок", 0);
	Результат.Вставить("ДатаУпаковки", '00010101');
	Результат.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	Результат.Вставить("ХешСуммаНормализации", "");
	
	Возврат Результат;
	
КонецФункции

// Инициализирует дополнительные параметры создания элементов справочника ШтрикходыУпаковокТоваров.
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * ОтключитьПоискСуществующего - Булево - Отключает поиск дублей по значению штрихкода.
// * ЗаполнятьУпаковку - Булево - Признак того, что упаковка уже сгенерирована и при создании элемента справочника, требуется заполнить поле Упаковка.
Функция ДополнительныеПараметрыСозданияШтрихкодовУпаковок() Экспорт
	
	ПараметрыСоздания = Новый Структура();
	ПараметрыСоздания.Вставить("ОтключитьПоискСуществующего", Истина);
	ПараметрыСоздания.Вставить("ЗаполнятьУпаковку",           Ложь);
	Возврат ПараметрыСоздания;
	
КонецФункции

// Инициализирует параметры для функции РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции
// Параметры:
//  ДеревоМаркированнойПродукции - ДеревоЗначений  - дерево, содержащее результаты проверки и подбора в соответствующей форме
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//  ДополнительныеПараметры - См. ДополнительныеПараметрыСозданияШтрихкодовУпаковок
// Возвращаемое значение:
//   Структура - результат обработки:
//    * ШтрихкодыУпаковок - ТаблицаЗначений - в данную таблицу помещаются уже существующие в информационной базе упаковки
//    * КэшСтатусовУказанияСерий - Произвольный - кэш статусов указания серий
//    * КэшСтрокДерева - Произвольный - Кэш строк дерева
//    * ВидПродукции - ПеречислениеСсылка.ВидыПродукцииИС - вид продукции
//    * ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования
//    * ДополнительныеПараметры - См. ДополнительныеПараметрыСозданияШтрихкодовУпаковок
//    * ЕстьКолонкаПроизвольнаяЕдиницаУчета - Булево - Признак наличия в дереве колонки ПроизвольнаяЕдиницаУчета
//    * ЭтоДетализацияБезУпаковокНижнихУровней - Булево - Признак отсутствия потребительских упаковок на нижнем уровне
Функция ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(ДеревоМаркированнойПродукции, ПараметрыСканирования, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("ШтрихкодыУпаковок",        Неопределено);
	ПараметрыСоздания.Вставить("КэшСтатусовУказанияСерий", Неопределено);
	ПараметрыСоздания.Вставить("КэшСтрокДерева",           Неопределено);
	ПараметрыСоздания.Вставить("ВидПродукции",             Неопределено);
	ПараметрыСоздания.Вставить("ПараметрыСканирования",    ПараметрыСканирования);
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыСоздания.Вставить("ДополнительныеПараметры", ДополнительныеПараметрыСозданияШтрихкодовУпаковок());
	Иначе
		ПараметрыСоздания.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	КонецЕсли;

	ЭтоСтрокаДереваЗначений = (ТипЗнч(ДеревоМаркированнойПродукции) = Тип("СтрокаДереваЗначений"));
	Если ЭтоСтрокаДереваЗначений Тогда
		ЕстьКолонкаПроизвольнаяЕдиницаУчета = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДеревоМаркированнойПродукции, "ПроизвольнаяЕдиницаУчета");
	Иначе
		ЕстьКолонкаПроизвольнаяЕдиницаУчета = ДеревоМаркированнойПродукции.Колонки.Найти("ПроизвольнаяЕдиницаУчета") <> Неопределено;
	КонецЕсли;

	ПараметрыСоздания.Вставить("ЕстьКолонкаПроизвольнаяЕдиницаУчета",         ЕстьКолонкаПроизвольнаяЕдиницаУчета);
	ПараметрыСоздания.Вставить("ИмяКолонкиКоличествоПотребительскихУпаковок", "КоличествоПодчиненныхПотребительскихУпаковок");
	
	ЭтоДетализацияБезУпаковокНижнихУровней = Ложь;
	Если ПараметрыСканирования <> Неопределено
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыСканирования, "ДетализацияСтруктурыХранения")
		И (ПараметрыСканирования.ДетализацияСтруктурыХранения  = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками
			Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки
			Или ПараметрыСканирования.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияИС.ПалетыСМонотоварнымиКоробами) Тогда
		ЭтоДетализацияБезУпаковокНижнихУровней = Истина;
	КонецЕсли;
	ПараметрыСоздания.Вставить("ЭтоДетализацияБезУпаковокНижнихУровней", ЭтоДетализацияБезУпаковокНижнихУровней);
	
	Возврат ПараметрыСоздания;
	
КонецФункции

// Создает элементы справочника Штрихкоды упаковок по данным дерева маркированной продукции, сформированного в форме проверки и подбора.
//
// Параметры:
//   ДеревоМаркированнойПродукции    - ДеревоЗначений  - дерево, содержащее результаты проверки и подбора в соответствующей форме.
//   ТаблицаШтрихкодовВерхнегоУровня - ТаблицаЗначений - в таблицу помещаются данные о содержимом верхнего уровня.
//   Параметры - См. ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции
// Возвращаемое значение:
//   Структура - результат обработки:
//    * ВложенныеШтрихкодыУпаковок - Массив - вложенные в текущую упаковку штриховые коды.
Функция РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(ДеревоМаркированнойПродукции,
	ТаблицаШтрихкодовВерхнегоУровня, Параметры) Экспорт
	
	МодульПроверкаИПодборПродукцииИСМПКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПроверкаИПодборПродукцииИСМПКлиентСервер");
	
	ЭтоСтрокаДереваЗначений = (ТипЗнч(ДеревоМаркированнойПродукции) = Тип("СтрокаДереваЗначений"));
	Если ЭтоСтрокаДереваЗначений
		И ДеревоМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		КоличествоПотребительскихУпаковок = 1;
	// Мультитоварный набор ведет себя как потребительская упаковка
	ИначеЕсли ЭтоСтрокаДереваЗначений
		И ДеревоМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		И ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		КоличествоПотребительскихУпаковок = 1;
	ИначеЕсли ЭтоСтрокаДереваЗначений
		И ДеревоМаркированнойПродукции.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
		И ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
		И ДеревоМаркированнойПродукции.Строки.Количество()
		И Не МодульПроверкаИПодборПродукцииИСМПКлиентСервер.НоменклатурыСтрокСовпадают(
			ДеревоМаркированнойПродукции, ДеревоМаркированнойПродукции.Строки[0]) Тогда
		КоличествоПотребительскихУпаковок = 1;
	ИначеЕсли ЭтоСтрокаДереваЗначений
		И ДеревоМаркированнойПродукции.Строки.Количество() = 0 Тогда
		// Количество уже расчитано в форме проверки и подбора
		КоличествоПотребительскихУпаковок = ДеревоМаркированнойПродукции[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
	Иначе
		// Количество будет получено из подчиненных строк
		КоличествоПотребительскихУпаковок = 0;
	КонецЕсли;

	ВозвращаемоеЗначение = Новый Структура(
		"ВложенныеШтрихкодыУпаковок", Новый Массив);
	
	Если Параметры.ШтрихкодыУпаковок = Неопределено Тогда
		Параметры.ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(
			ШтрихкодированиеИС.ЗначенияШтрихкодовИзДереваМаркируемойПродукции(
				ДеревоМаркированнойПродукции));
	КонецЕсли;
	
	ПараметрыПродолженияПоиска = Новый Структура;
	ПараметрыПродолженияПоиска.Вставить("РассчитыватьКоличествоПотребительскихУпаковок", КоличествоПотребительскихУпаковок = 0);
	ПараметрыПродолженияПоиска.Вставить("КоличествоПотребительскихУпаковок",             КоличествоПотребительскихУпаковок);
	ПараметрыПродолженияПоиска.Вставить("ПараметрыСоздания",                 Параметры.ДополнительныеПараметры);
	ПараметрыПродолженияПоиска.Вставить("ТаблицаШтрихкодовВерхнегоУровня",   ТаблицаШтрихкодовВерхнегоУровня);
	ПараметрыПродолженияПоиска.Вставить("ДеревоМаркированнойПродукции",      ДеревоМаркированнойПродукции);
	ПараметрыПродолженияПоиска.Вставить("ВозвращаемоеЗначение",              ВозвращаемоеЗначение);
	
	Если ДеревоМаркированнойПродукции.Строки.Количество() > 1 Тогда
		ВыполнитьПоискИБ = Новый Соответствие;
	Иначе
		ВыполнитьПоискИБ = Неопределено;
	КонецЕсли;
	
	РезультатыПоСтрокамДерева = Новый Соответствие;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует
			Или (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
				И СтрокаДерева.НедопустимыйКодМаркировки) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			Или (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				И СтрокаДерева.Строки.Количество() = 0) Тогда
			Результат = Новый Структура(
				"ВложенныеШтрихкодыУпаковок", Новый Массив);
		Иначе
			
			Результат = РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(
				СтрокаДерева, ТаблицаШтрихкодовВерхнегоУровня, Параметры);
			
			// Не создавать упаковки с недопустимым статусом кода, но создавать упаковки вложений
			Если СтрокаДерева.НедопустимыйКодМаркировки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок,
					Результат.ВложенныеШтрихкодыУпаковок);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок")
			И СтрокаДерева.ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПропускатьГруппировкуОбъемноСортовогоУчетаПоGTIN(СтрокаДерева) Тогда
			Продолжить;
		КонецЕсли;
		
		РезультатПоиска = ШтрихкодУпаковкиПоХешСумме(
			СтрокаДерева, Параметры, ВыполнитьПоискИБ);
		
		Если РезультатПоиска <> Неопределено Тогда
			
			ПродолжитьПослеПоискаШтрихкодаУпаковкиПоХешСумме(
				СтрокаДерева, РезультатПоиска, Результат,
				ПараметрыПродолженияПоиска, Параметры);
			
		Иначе
			
			РезультатыПоСтрокамДерева.Вставить(СтрокаДерева, Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой = ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой(ВыполнитьПоискИБ, Параметры);
	Для Каждого КлючИЗначение Из ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой Цикл
		
		СтрокаДерева    = КлючИЗначение.Ключ;
		РезультатПоиска = КлючИЗначение.Значение;
		
		Результат = РезультатыПоСтрокамДерева[СтрокаДерева];
		
		ПродолжитьПослеПоискаШтрихкодаУпаковкиПоХешСумме(
			СтрокаДерева, РезультатПоиска, Результат,
			ПараметрыПродолженияПоиска, Параметры);
		
	КонецЦикла;
	
	Если ЭтоСтрокаДереваЗначений Тогда
		ДеревоМаркированнойПродукции[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок] = ПараметрыПродолженияПоиска.КоличествоПотребительскихУпаковок;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Процедура ПродолжитьПослеПоискаШтрихкодаУпаковкиПоХешСумме(
	СтрокаДерева, РезультатПоиска, Результат, ПараметрыПродолженияПоиска, Параметры)
	
	Если РезультатПоиска <> Неопределено
		И РезультатПоиска.ШтрихкодУпаковки <> Неопределено
		И Не РезультатПоиска.ЭтоПустаяУпаковка Тогда
		
		ШтрихкодУпаковки        = РезультатПоиска.ШтрихкодУпаковки;
		НовыеЗначенияРеквизитов = Новый Структура;
		
		ЭтоСтрокаДанныхЧастичногоВыбытия = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
				СтрокаДерева, Параметры.ПараметрыСканирования, Параметры.ВидПродукции, Истина);
		
		ПропуститьСохранениеКоличества = ЭтоСтрокаДанныхЧастичногоВыбытия;
		
		Если Не ПропуститьСохранениеКоличества
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И Параметры.ЕстьКолонкаПроизвольнаяЕдиницаУчета
			И СтрокаДерева.ПроизвольнаяЕдиницаУчета
			И СтрокаДерева.Количество <> РезультатПоиска.Количество Тогда
			
			НовыеЗначенияРеквизитов.Вставить("Количество", СтрокаДерева.Количество);
			
		КонецЕсли;
		
		Если ЭтоСтрокаДанныхЧастичногоВыбытия
			И СтрокаДерева.ЧастичноеВыбытиеВариантУчета = Перечисления.ВариантыУчетаЧастичногоВыбытияИС.НастроеннаяНоменклатура Тогда
			Если СтрокаДерева.Номенклатура = РезультатПоиска.Номенклатура
				И СтрокаДерева.Характеристика = РезультатПоиска.Характеристика
				И ЗначениеЗаполнено(СтрокаДерева.Серия)
				И СтрокаДерева.Серия <> РезультатПоиска.Серия Тогда
				
				НовыеЗначенияРеквизитов.Вставить("Серия", СтрокаДерева.Серия);
				
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
				И Не ЗначениеЗаполнено(РезультатПоиска.Номенклатура) Тогда
				
				НовыеЗначенияРеквизитов.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
				НовыеЗначенияРеквизитов.Вставить("Характеристика", СтрокаДерева.Характеристика);
				НовыеЗначенияРеквизитов.Вставить("Серия",          СтрокаДерева.Серия);
				
			КонецЕсли;
		ИначеЕсли СтрокаДерева.Номенклатура <> РезультатПоиска.Номенклатура
			Или ((ЗначениеЗаполнено(СтрокаДерева.Характеристика) Или ЗначениеЗаполнено(РезультатПоиска.Характеристика))
				И СтрокаДерева.Характеристика <> РезультатПоиска.Характеристика)
			Или (ЗначениеЗаполнено(СтрокаДерева.Серия)
				И СтрокаДерева.Серия <> РезультатПоиска.Серия) Тогда
			
			НовыеЗначенияРеквизитов.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
			НовыеЗначенияРеквизитов.Вставить("Характеристика", СтрокаДерева.Характеристика);
			НовыеЗначенияРеквизитов.Вставить("Серия",          СтрокаДерева.Серия);
			
		КонецЕсли;
		
		Если НовыеЗначенияРеквизитов.Количество() > 0 Тогда
			ИзменитьШтрихкодУпаковки(РезультатПоиска.ШтрихкодУпаковки, НовыеЗначенияРеквизитов);
		КонецЕсли;
		
	Иначе
		
		ДанныеНовойУпаковки = СтруктураСозданияШтрихкодаУпаковки();
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ВидПродукции") Тогда
			ВидПродукции = ?(ЗначениеЗаполнено(СтрокаДерева.ВидПродукции), СтрокаДерева.ВидПродукции, Параметры.ВидПродукции);
		Иначе
			ВидПродукции = Параметры.ВидПродукции;
		КонецЕсли;
		
		ДанныеНовойУпаковки.ВидПродукции = ВидПродукции;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
			ЗначениеШтрихкода = СтрШаблон(
				"(02)%1(37)%2",
				СтрокаДерева.GTIN,
				Формат(СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок], "ЧГ=0;"));
		Иначе
			ЗначениеШтрихкода = СтрокаДерева.Штрихкод;
		КонецЕсли;
		
		ДанныеНовойУпаковки.Штрихкод     = ЗначениеШтрихкода;
		ДанныеНовойУпаковки.ДатаУпаковки = ТекущаяДатаСеанса();
		ДанныеНовойУпаковки.ТипУпаковки  = СтрокаДерева.ТипУпаковки;
		
		ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.Номенклатура;
		ДанныеНовойУпаковки.Характеристика = СтрокаДерева.Характеристика;
		ДанныеНовойУпаковки.Серия          = СтрокаДерева.Серия;
		ДанныеНовойУпаковки.ТипШтрихкода   = СтрокаДерева.ТипШтрихкода;
		
		ДанныеНовойУпаковки.ХешСуммаНормализации = СтрокаДерева.ХешСуммаНормализации;
		ХешСумма                                 = Неопределено;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
			И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			
			Если Параметры.ЕстьКолонкаПроизвольнаяЕдиницаУчета И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество                        = СтрокаДерева.Количество;
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
			Иначе
				ДанныеНовойУпаковки.Количество = СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
			КонецЕсли;
			
			ХешСумма = СтрокаДерева.ХешСумма;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
			
			Если Параметры.ЕстьКолонкаПроизвольнаяЕдиницаУчета И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество                        = СтрокаДерева.Количество;
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
			Иначе
				ДанныеНовойУпаковки.Количество = СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
			КонецЕсли;
			
			ХешСумма = СтрокаДерева.ХешСумма;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN Тогда
			
			Если СтрокаДерева.ВУпаковкеРазнаяНоменклатура 
				Или СтрокаДерева.ВУпаковкеРазныеХарактеристики 
				Или СтрокаДерева.ВУпаковкеРазныеСерии Тогда
				ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			Иначе 
				ДанныеНовойУпаковки.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			
			Если Параметры.ЕстьКолонкаПроизвольнаяЕдиницаУчета И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество                        = СтрокаДерева.Количество;
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
			Иначе
				ДанныеНовойУпаковки.Количество = СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
			КонецЕсли;
			
			ХешСумма = СтрокаДерева.ХешСумма;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			
			ХешСумма = СтрокаДерева.ХешСумма;
			
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Если Параметры.ЕстьКолонкаПроизвольнаяЕдиницаУчета И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество                        = СтрокаДерева.Количество;
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
			Иначе
				ДанныеНовойУпаковки.Количество = 1;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
				СтрокаДерева,
				Параметры.ПараметрыСканирования,
				ВидПродукции,
				Истина) Тогда
			ДанныеНовойУпаковки.Количество = СтрокаДерева.Коэффициент;
			Если СтрокаДерева.ЧастичноеВыбытиеВариантУчета = Перечисления["ВариантыУчетаЧастичногоВыбытияИС"]["НастроеннаяНоменклатура"] Тогда
				ДанныеНовойУпаковки.Номенклатура   = СтрокаДерева.ЧастичноеВыбытиеНоменклатура;
				ДанныеНовойУпаковки.Характеристика = СтрокаДерева.ЧастичноеВыбытиеХарактеристика;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеНовойУпаковки.ХешСумма = ХешСумма;
		
		Если РезультатПоиска <> Неопределено
			И РезультатПоиска.ШтрихкодУпаковки <> Неопределено
			И РезультатПоиска.ЭтоПустаяУпаковка Тогда
			
			ДанныеНовойУпаковки.Удалить("ВидПродукции");
			ДанныеНовойУпаковки.Удалить("Штрихкод");
			
			ШтрихкодУпаковки        = РезультатПоиска.ШтрихкодУпаковки;
			ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, ДанныеНовойУпаковки, Результат.ВложенныеШтрихкодыУпаковок);
			
		Иначе
			
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
			ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму", Истина);
			ПараметрыЗаписи.Вставить("ВидПродукции", ВидПродукции);
			
			ШтрихкодУпаковки = СоздатьШтрихкодУпаковки(
				ДанныеНовойУпаковки,
				Результат.ВложенныеШтрихкодыУпаковок,
				ПараметрыЗаписи,
				Параметры.КэшСтатусовУказанияСерий,
				ПараметрыПродолженияПоиска.ПараметрыСоздания);
			
			НоваяСтрока = Параметры.ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.Штрихкод = ДанныеНовойУпаковки.Штрихкод;
			НоваяСтрока.ХешСумма = ХешСумма;
			НоваяСтрока.Ссылка   = ШтрихкодУпаковки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДерева.ШтрихкодУпаковки = ШтрихкодУпаковки;
	
	ЭтоСтрокаДереваВерхнегоУровня = Ложь;
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет
		И ПропускатьГруппировкуОбъемноСортовогоУчетаПоGTIN(СтрокаДерева.Родитель) Тогда
		ЭтоСтрокаДереваВерхнегоУровня = Истина;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN
		И Не ПропускатьГруппировкуОбъемноСортовогоУчетаПоGTIN(СтрокаДерева) Тогда
		ЭтоСтрокаДереваВерхнегоУровня = Истина;
	ИначеЕсли ТипЗнч(ПараметрыПродолженияПоиска.ДеревоМаркированнойПродукции) = Тип("ДеревоЗначений") Тогда
		ЭтоСтрокаДереваВерхнегоУровня = Истина;
	// ПараметрыПродолженияПоиска.ДеревоМаркированнойПродукции - это СтрокаДереваЗначений
	ИначеЕсли ПараметрыПродолженияПоиска.ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПачкиБезБлока
		Или ПараметрыПродолженияПоиска.ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.БлокиБезКоробки
		Или ПараметрыПродолженияПоиска.ДеревоМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ПродукцияБезУпаковки Тогда
		ЭтоСтрокаДереваВерхнегоУровня = Истина;
	КонецЕсли;
	
	Если ЭтоСтрокаДереваВерхнегоУровня Тогда
		
		НоваяСтрокаШтрихкодыВерхнегоУровня = ПараметрыПродолженияПоиска.ТаблицаШтрихкодовВерхнегоУровня.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаШтрихкодыВерхнегоУровня, СтрокаДерева);
		
		Если ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЭтоСтрокаДанныхЧастичногоВыбытия(
				СтрокаДерева,
				Параметры.ПараметрыСканирования,
				Параметры.ВидПродукции)
			И ПараметрыПродолженияПоиска.ТаблицаШтрихкодовВерхнегоУровня.Колонки.Найти("ЧастичноеВыбытиеКоличество") <> Неопределено Тогда
			Если СтрокаДерева.ЧастичноеВыбытие Тогда
				НоваяСтрокаШтрихкодыВерхнегоУровня.ЧастичноеВыбытиеКоличество     = СтрокаДерева.Количество;
				Если СтрокаДерева.ЧастичноеВыбытиеВариантУчета = Перечисления["ВариантыУчетаЧастичногоВыбытияИС"]["НастроеннаяНоменклатура"] Тогда
					НоваяСтрокаШтрихкодыВерхнегоУровня.ЧастичноеВыбытиеНоменклатура   = СтрокаДерева.Номенклатура;
					НоваяСтрокаШтрихкодыВерхнегоУровня.ЧастичноеВыбытиеХарактеристика = СтрокаДерева.Характеристика;
				КонецЕсли;
			Иначе
				НоваяСтрокаШтрихкодыВерхнегоУровня.ЧастичноеВыбытиеВариантУчета   = Неопределено;
				НоваяСтрокаШтрихкодыВерхнегоУровня.ЧастичноеВыбытиеНоменклатура   = Неопределено;
				НоваяСтрокаШтрихкодыВерхнегоУровня.ЧастичноеВыбытиеХарактеристика = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПараметрыПродолженияПоиска.РассчитыватьКоличествоПотребительскихУпаковок Тогда
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ПараметрыПродолженияПоиска.КоличествоПотребительскихУпаковок = ПараметрыПродолженияПоиска.КоличествоПотребительскихУпаковок + 1;
		Иначе
			ПараметрыПродолженияПоиска.КоличествоПотребительскихУпаковок = ПараметрыПродолженияПоиска.КоличествоПотребительскихУпаковок + СтрокаДерева[Параметры.ИмяКолонкиКоличествоПотребительскихУпаковок];
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПродолженияПоиска.ВозвращаемоеЗначение.ВложенныеШтрихкодыУпаковок.Добавить(ШтрихкодУпаковки);
	
КонецПроцедуры

// Создает элементы справочника Штрихкоды упаковок по данным дерева маркированной продукции, сформированного в форме проверки и подбора.
//
// Параметры:
//   ДеревоМаркированнойПродукции - ДеревоЗначений  - дерево, содержащее результаты проверки и подбора в соответствующей форме
//   Параметры - См. ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции
//
Процедура ЗаполнитьШтрихкодыУпаковокИКоличествоПоДеревуМаркируемойПродукции(ДеревоМаркированнойПродукции, Параметры, СтрокиДереваСНайденнымиШтрихкодамиУпаковок = Неопределено) Экспорт
	
	Если Параметры.ШтрихкодыУпаковок = Неопределено Тогда
		Параметры.ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(
			ШтрихкодированиеИС.ЗначенияШтрихкодовИзДереваМаркируемойПродукции(
				ДеревоМаркированнойПродукции));
	КонецЕсли;
	
	Если ДеревоМаркированнойПродукции.Строки.Количество() > 1 Тогда
		ВыполнитьПоискИБ = Новый Соответствие;
	Иначе
		ВыполнитьПоискИБ = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.Строки Цикл
		
		Если Параметры.КэшСтрокДерева = Неопределено Тогда
			Параметры.КэшСтрокДерева = Новый Соответствие;
		КонецЕсли;
		
		КэшСтроки = Параметры.КэшСтрокДерева.Получить(СтрокаДерева);
		Если КэшСтроки = Неопределено Тогда
			
			КэшСтроки = Новый Структура;
			КэшСтроки.Вставить("ВложенныеХешСуммы1", Новый СписокЗначений);
			КэшСтроки.Вставить("ВложенныеХешСуммы2", Новый СписокЗначений);
			Параметры.КэшСтрокДерева.Вставить(СтрокаДерева, КэшСтроки);
			
		КонецЕсли;
		
		КэшСтрокиРодителя = Параметры.КэшСтрокДерева.Получить(СтрокаДерева.Родитель);
		
		Если СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			ЗаполнитьШтрихкодыУпаковокИКоличествоПоДеревуМаркируемойПродукции(
				СтрокаДерева, Параметры, СтрокиДереваСНайденнымиШтрихкодамиУпаковок);
		КонецЕсли;
		
		ХешСумма1 = ХешСуммаСодержимогоУпаковки(КэшСтроки.ВложенныеХешСуммы1);
		ХешСумма2 = ХешСуммаСодержимогоУпаковки(КэшСтроки.ВложенныеХешСуммы2);
		
		Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
			Продолжить;
		КонецЕсли;
		
		// Обход ошибки расчета хеш суммы без учета поля ХешСуммыНормализации
		// Вариант по-умолчанию. ХешСуммыНормализации используется.
		СтрокаДерева.ХешСумма = ХешСумма1;
		РезультатПоиска = ШтрихкодУпаковкиПоХешСумме(
			СтрокаДерева, Параметры, ВыполнитьПоискИБ);
		
		Если РезультатПоиска <> Неопределено
			И ЗначениеЗаполнено(РезультатПоиска.ШтрихкодУпаковки) Тогда
			
			Если СтрокиДереваСНайденнымиШтрихкодамиУпаковок <> Неопределено
				И ЗначениеЗаполнено(РезультатПоиска.ШтрихкодУпаковки)
				И СтрокаДерева.ШтрихкодУпаковки <> РезультатПоиска.ШтрихкодУпаковки Тогда
				СтрокиДереваСНайденнымиШтрихкодамиУпаковок.Добавить(СтрокаДерева);
			КонецЕсли;
			
			СтрокаДерева.ШтрихкодУпаковки = РезультатПоиска.ШтрихкодУпаковки;
			Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
				И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
				И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
				СтрокаДерева.Количество = РезультатПоиска.Количество;
			КонецЕсли;
			
		ИначеЕсли ХешСумма2 <> ХешСумма1 Тогда
			
			// Обход ошибки расчета хеш суммы без учета поля ХешСуммыНормализации
			// Вариант по-умолчанию. ХешСуммыНормализации НЕ используется.
			СтрокаДерева.ХешСумма = ХешСумма2;
			РезультатПоиска = ШтрихкодУпаковкиПоХешСумме(
				СтрокаДерева, Параметры, ВыполнитьПоискИБ);
			
			Если РезультатПоиска <> Неопределено
				И ЗначениеЗаполнено(РезультатПоиска.ШтрихкодУпаковки) Тогда
				
				Если СтрокиДереваСНайденнымиШтрихкодамиУпаковок <> Неопределено
					И ЗначениеЗаполнено(РезультатПоиска.ШтрихкодУпаковки)
					И СтрокаДерева.ШтрихкодУпаковки <> РезультатПоиска.ШтрихкодУпаковки Тогда
					СтрокиДереваСНайденнымиШтрихкодамиУпаковок.Добавить(СтрокаДерева);
				КонецЕсли;
				
				СтрокаДерева.ШтрихкодУпаковки = РезультатПоиска.ШтрихкодУпаковки;
				Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
					И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
					И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
					СтрокаДерева.Количество = РезультатПоиска.Количество;
				КонецЕсли;
				
			Иначе
				
				// Обход ошибки расчета хеш суммы без учета поля ХешСуммыНормализации
				// Поиск без ХешСуммыНормализации не повлиял на результат.
				СтрокаДерева.ХешСумма = ХешСумма1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КэшСтрокиРодителя <> Неопределено Тогда
			
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.ХешСуммаНормализации) Тогда
					КэшСтрокиРодителя.ВложенныеХешСуммы1.Добавить(СтрокаДерева.ХешСуммаНормализации);
				Иначе
					КэшСтрокиРодителя.ВложенныеХешСуммы1.Добавить(СтрокаДерева.Штрихкод);
				КонецЕсли;
				КэшСтрокиРодителя.ВложенныеХешСуммы2.Добавить(СтрокаДерева.Штрихкод);
			ИначеЕсли СтрокаДерева.ХешСумма = ХешСумма1 Тогда
				КэшСтрокиРодителя.ВложенныеХешСуммы1.Добавить(ХешСумма1);
				КэшСтрокиРодителя.ВложенныеХешСуммы2.Добавить(ХешСумма1);
			ИначеЕсли СтрокаДерева.ХешСумма = ХешСумма2 Тогда
				КэшСтрокиРодителя.ВложенныеХешСуммы1.Добавить(ХешСумма2);
				КэшСтрокиРодителя.ВложенныеХешСуммы2.Добавить(ХешСумма2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой = ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой(ВыполнитьПоискИБ, Параметры);
	Для Каждого КлючИЗначение Из ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой Цикл
		
		СтрокаДерева    = КлючИЗначение.Ключ;
		РезультатПоиска = КлючИЗначение.Значение;
		
		СтрокаДерева.ШтрихкодУпаковки = РезультатПоиска.ШтрихкодУпаковки;
		СтрокаДерева.ХешСумма         = РезультатПоиска.ХешСумма;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
			И ЗначениеЗаполнено(СтрокаДерева.Номенклатура)
			И СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
			СтрокаДерева.Количество = РезультатПоиска.Количество;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой(ВыполнитьПоискИБ, Параметры)
	
	Результат = Новый Соответствие;
	
	Если ВыполнитьПоискИБ <> Неопределено
		И ВыполнитьПоискИБ.Количество() Тогда
		
		НайденныеШтрихкодыУпаковокСтрокДереваСПустойХешСуммой = Новый Массив;
		Для Каждого КлючИЗначение Из ВыполнитьПоискИБ Цикл
			
			НайденныеШтрихкодыУпаковокСтрокДереваСПустойХешСуммой.Добавить(КлючИЗначение.Ключ);
			
			РезультатПоиска = Новый Структура;
			РезультатПоиска.Вставить("ШтрихкодУпаковки",  Неопределено);
			РезультатПоиска.Вставить("Количество",        0);
			РезультатПоиска.Вставить("Номенклатура",      Неопределено);
			РезультатПоиска.Вставить("Характеристика",    Неопределено);
			РезультатПоиска.Вставить("Серия",             Неопределено);
			РезультатПоиска.Вставить("ХешСумма",          "");
			РезультатПоиска.Вставить("ЭтоПустаяУпаковка", Ложь);
			
			Результат.Вставить(КлючИЗначение.Значение, РезультатПоиска);
			
		КонецЦикла;
		
		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
			НайденныеШтрихкодыУпаковокСтрокДереваСПустойХешСуммой, Параметры.ПараметрыСканирования);
		
		Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(Параметры.ПараметрыСканирования)
			Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(Параметры.ПараметрыСканирования) Тогда
			МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
			МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(
				ВложенныеШтрихкодыУпаковок,
				Параметры.ПараметрыСканирования);
		КонецЕсли;
		
		ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
		Для Каждого СтрокаДереваВложенныхШтрихкодов Из ВложенныеШтрихкодыУпаковок.ДеревоУпаковок.Строки Цикл
			
			СтрокаДерева = ВыполнитьПоискИБ[СтрокаДереваВложенныхШтрихкодов.ШтрихкодУпаковки];
			
			Если СравнитьСтрокуДереваСДаннымиИБ(СтрокаДерева, СтрокаДереваВложенныхШтрихкодов, ТаблицаХешСумм, Параметры) Тогда
				
				РезультатПоиска = Результат[СтрокаДерева];
				РезультатПоиска.ШтрихкодУпаковки = СтрокаДереваВложенныхШтрихкодов.ШтрихкодУпаковки;
				РезультатПоиска.Количество       = СтрокаДереваВложенныхШтрихкодов.Количество;
				
				РезультатПоиска.Номенклатура    = СтрокаДереваВложенныхШтрихкодов.Номенклатура;
				РезультатПоиска.Характеристика  = СтрокаДереваВложенныхШтрихкодов.Характеристика;
				РезультатПоиска.Серия           = СтрокаДереваВложенныхШтрихкодов.Серия;
				РезультатПоиска.ХешСумма        = СтрокаДереваВложенныхШтрихкодов.ХешСумма;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает элементы справочника на основе данных дерева упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
//  ПараметрыСканирования - См. ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования.
//  ДополнительныеПараметры - См. ДополнительныеПараметрыСозданияШтрихкодовУпаковок.
//
Процедура СоздатьШтрихкодыУпаковокПоДаннымДерева(ДеревоУпаковок, ПараметрыСканирования, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыСозданияШтрихкодов = ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции(ДеревоУпаковок, ПараметрыСканирования, ДополнительныеПараметры);
	ПараметрыСозданияШтрихкодов.ШтрихкодыУпаковок        = СуществующиеЭлементыШтрихкодовДерева(ДеревоУпаковок);
	ПараметрыСозданияШтрихкодов.КэшСтатусовУказанияСерий = Новый Соответствие;
	ПараметрыСозданияШтрихкодов.КэшСтрокДерева           = Новый Соответствие;
	ПараметрыСозданияШтрихкодов.ИмяКолонкиКоличествоПотребительскихУпаковок = "КоличествоПотребительскихУпаковок";
	
	СоздатьШтрихкодыУпаковокПоСтрокамДерева(
		ДеревоУпаковок.Строки, ПараметрыСозданияШтрихкодов);
	
КонецПроцедуры

//Возвращает элемент справочника по реквизиту. Если элемент не найден, возвращает Неопределено.
//
//Параметры:
//   ЗначениеШтрихкода - Строка - ключ поиска.
//
//Возвращаемое значение:
//   СправочникСсылка.ШтрихкодыУпаковокТоваров, Неопределено - найденный элемент справочника.
//
Функция ПолучитьПоЗначениюШтрихкода(ЗначениеШтрихкода) Экспорт
	
	ДанныеШтрихкода = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода);
	
	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДанныеШтрихкода.Ссылка;
	
КонецФункции

//Возвращает данные справочника. Если элемент не найден, возвращает Неопределено.
//
//Параметры:
//   ЗначениеШтрихкода - Строка - ключ поиска.
//
//Возвращаемое значение:
//   Неопределено - .
//   Структура - 
//
Функция ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(ЗначениеШтрихкода) Экспорт
	
	ЗначенияШтрихкодов = Новый Массив;
	ЗначенияШтрихкодов.Добавить(ЗначениеШтрихкода);
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов);
	
	Если ШтрихкодыУпаковок.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ШтрихкодыУпаковок[0]);
	
КонецФункции

// Создает новый элемент справочник по переданным параметрам.
// 
// Параметры:
// 	ДанныеШтрихкодаУпаковки - Структура - Описание:
// * Ответственный - Справочникссылка.Пользователи - 
// * ДатаУпаковки - Дата -
// * Количество - Число -
// * Серия - ОпределяемыйТип.СерияНоменклатуры- 
// * Упаковка - ОпределяемыйТип.Упаковка - 
// * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры - 
// * Номенклатура - ОпределяемыйТип.Номенклатура - 
// * ХешСумма - Строка -
// * Штрихкод - Строка -
// * ТипШтрихкода - ПеречислениеСсылка.ТипыШтрихкодов - 
// * ТипУпаковки - ПеречислениеСсылка.ТипыУпаковок - 
// * ВидПродукции - Перечислениессылка.ВидыПродукцииИС - 
// 	ВложенныеШтрихкоды - Неопределено, Массив - Описание
// 	ПараметрыЗаписи - Структура, Неопределено - Описание:
// * НеРассчитыватьХешСумму - Булево -
// * НеРассчитыватьКоличествоВложенныхШтрихкодов - Булево -
// 	КэшСтатусовУказанияСерий - Произвольный, Неопределено, Соответствие - Описание
// 	ПараметрыСоздания - См. ДополнительныеПараметрыСозданияШтрихкодовУпаковок
// Возвращаемое значение:
// 	СправочникСсылка.ШтрихкодыУпаковокТоваров - Описание
Функция СоздатьШтрихкодУпаковки(ДанныеШтрихкодаУпаковки, ВложенныеШтрихкоды = Неопределено,
	ПараметрыЗаписи = Неопределено, КэшСтатусовУказанияСерий = Неопределено, ПараметрыСоздания = Неопределено) Экспорт
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЭтоАгрегатТСД(ДанныеШтрихкодаУпаковки.Штрихкод) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НовыйЭлемент = СоздатьЭлемент();
	
	НовыйЭлемент.Номенклатура   = ДанныеШтрихкодаУпаковки.Номенклатура;
	НовыйЭлемент.Характеристика = ДанныеШтрихкодаУпаковки.Характеристика;
	НовыйЭлемент.Серия          = ДанныеШтрихкодаУпаковки.Серия;
	
	Если КэшСтатусовУказанияСерий = Неопределено Тогда
		КэшСтатусовУказанияСерий = Новый Соответствие();
		СтатусУказанияСерий = Неопределено;
	Иначе
		СтатусУказанияСерий = КэшСтатусовУказанияСерий[ДанныеШтрихкодаУпаковки.Номенклатура];
	КонецЕсли;
	
	Если СтатусУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(НовыйЭлемент, Справочники.ШтрихкодыУпаковокТоваров);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(НовыйЭлемент, ПараметрыУказанияСерий);
		
		КэшСтатусовУказанияСерий.Вставить(ДанныеШтрихкодаУпаковки.Номенклатура, НовыйЭлемент.СтатусУказанияСерий);
	Иначе
		НовыйЭлемент.СтатусУказанияСерий = СтатусУказанияСерий;
	КонецЕсли;
	
	НовыйЭлемент.Серия = ДанныеШтрихкодаУпаковки.Серия;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ДанныеШтрихкодаУпаковки,,"Номенклатура, Характеристика, Серия");
	
	НовыйЭлемент.ЗначениеШтрихкода = ДанныеШтрихкодаУпаковки.Штрихкод;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ТипШтрихкода) Тогда
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			НовыйЭлемент.ЗначениеШтрихкода, ДанныеШтрихкодаУпаковки.ВидПродукции, ПримечаниеКРезультатуРазбора);
		Если ДанныеРазбора <> Неопределено Тогда
			НовыйЭлемент.ТипШтрихкода = ДанныеРазбора.ТипШтрихкода;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВложенныеШтрихкоды <> Неопределено Тогда
		Для Каждого Штрихкод Из ВложенныеШтрихкоды Цикл
			СтрокаТЧ = НовыйЭлемент.ВложенныеШтрихкоды.Добавить();
			СтрокаТЧ.Штрихкод = Штрихкод;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НовыйЭлемент.ДатаУпаковки) Тогда
		НовыйЭлемент.ДатаУпаковки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыЗаписи) = Тип("Структура") Тогда
		
		Для Каждого ПараметрЗаписи Из ПараметрыЗаписи Цикл
			НовыйЭлемент.ДополнительныеСвойства.Вставить(ПараметрЗаписи.Ключ, ПараметрЗаписи.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ОтключитьПоискСуществующего = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыСоздания, "ОтключитьПоискСуществующего", Ложь);
	
	Если ЗначениеЗаполнено(НовыйЭлемент.ЗначениеШтрихкода) И Не ОтключитьПоискСуществующего Тогда
		
		ДанныеУпаковки = ПолучитьДанныеУпаковкиПоЗначениюШтрихкода(НовыйЭлемент.ЗначениеШтрихкода);
		
		Если ДанныеУпаковки <> Неопределено И Не ЭтоПустаяУпаковка(ДанныеУпаковки) Тогда
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Элемент справочника со значением штрихкода %1 уже существует.
					       |Необходимо использовать другое значение штрихкода.'"),
				НовыйЭлемент.ЗначениеШтрихкода);
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;
	
КонецФункции

Процедура ИзменитьШтрихкодУпаковки(ШтрихкодУпаковки, ЗначенияРеквизитов, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ШтрихкодыУпаковокТоваров");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ШтрихкодУпаковки);
		Блокировка.Заблокировать();
		
		ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
		Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл
			ШтрихкодУпаковкиОбъект[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
		КонецЦикла;
		
		Если ЗначенияРеквизитов.Свойство("Серия") Тогда
			ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ШтрихкодУпаковкиОбъект, Справочники.ШтрихкодыУпаковокТоваров);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ШтрихкодУпаковкиОбъект, ПараметрыУказанияСерий);
			ЗначенияРеквизитов.Свойство("Серия", ШтрихкодУпаковкиОбъект.Серия);
		КонецЕсли;
		
		Если ВложенныеШтрихкоды <> Неопределено Тогда
			ШтрихкодУпаковкиОбъект.ВложенныеШтрихкоды.Очистить();
			Для Каждого Штрихкод Из ВложенныеШтрихкоды Цикл
				Строка = ШтрихкодУпаковкиОбъект.ВложенныеШтрихкоды.Добавить();
				Строка.Штрихкод = Штрихкод;
			КонецЦикла;
		КонецЕсли;
	
		ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
		ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьХешСумму", Истина);
	
		ШтрихкодУпаковкиОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: Запись штрихкода упаковки'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		
		ВызватьИсключение ПодробноеПредставлениеОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьШтрихкодУпаковки(ШтрихкодУпаковки, ЗначенияРеквизитов, ОтключитьЗаменуСвойств = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШтрихкодУпаковкиОбъект = ШтрихкодУпаковки.ПолучитьОбъект();
	ШтрихкодУпаковкиОбъект.Заблокировать();
	
	Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл
		Если ОтключитьЗаменуСвойств <> Неопределено
			И ОтключитьЗаменуСвойств[ЗначениеРеквизита.Ключ] <> Неопределено
			И ЗначениеЗаполнено(ШтрихкодУпаковкиОбъект[ЗначениеРеквизита.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		ШтрихкодУпаковкиОбъект[ЗначениеРеквизита.Ключ] = ЗначениеРеквизита.Значение;
	КонецЦикла;
	
	Если ЗначенияРеквизитов.Свойство("Серия") Тогда
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(ШтрихкодУпаковкиОбъект, Справочники.ШтрихкодыУпаковокТоваров);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ШтрихкодУпаковкиОбъект, ПараметрыУказанияСерий);
		ЗначенияРеквизитов.Свойство("Серия", ШтрихкодУпаковкиОбъект.Серия);
	КонецЕсли;
	
	ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	ШтрихкодУпаковкиОбъект.ДополнительныеСвойства.Вставить("НеРассчитыватьХешСумму", Истина);
	
	ШтрихкодУпаковкиОбъект.Записать();
	
КонецПроцедуры

Функция ХешСуммаСодержимогоУпаковки(ДанныеДляВычисления) Экспорт
	
	Если ДанныеДляВычисления.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеДляВычисления.СортироватьПоЗначению();
	СтрокаДляРасчетаХеша = СтрСоединить(ДанныеДляВычисления.ВыгрузитьЗначения());
	
	Возврат ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрокаДляРасчетаХеша);
	
КонецФункции

Функция ДанныеДляВычисленияХешСуммы(ШтрихкодУпаковкиТовараОбъект) Экспорт
	
	ДанныеДляВычисления = Новый СписокЗначений;
	
	МассивВложенныхШтрихкодов = Новый Массив;
	Для Каждого СтрокаВложенныйШтрихкод Из ШтрихкодУпаковкиТовараОбъект.ВложенныеШтрихкоды Цикл
		МассивВложенныхШтрихкодов.Добавить(СтрокаВложенныйШтрихкод.Штрихкод);
	КонецЦикла;
	
	Если МассивВложенныхШтрихкодов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки,
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода,
		|	ШтрихкодыУпаковокТоваров.ХешСумма,
		|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В (&МассивВложенныхШтрихкодов)");
		
		Запрос.УстановитьПараметр("МассивВложенныхШтрихкодов", МассивВложенныхШтрихкодов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка <> Неопределено Тогда
			Пока Выборка.Следующий() Цикл
				Если Выборка.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
					Если ЗначениеЗаполнено(Выборка.ХешСуммаНормализации) Тогда
						ДанныеДляВычисления.Добавить(Выборка.ХешСуммаНормализации);
					Иначе
						ДанныеДляВычисления.Добавить(Выборка.ЗначениеШтрихкода);
					КонецЕсли;
				Иначе
					ДанныеДляВычисления.Добавить(Выборка.ХешСумма);
					Если Не ЗначениеЗаполнено(Выборка.ХешСумма) Тогда
						ДанныеДляВычисления.Очистить();
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеДляВычисления.Количество() = 0 Тогда
		
		Если ЗначениеЗаполнено(ШтрихкодУпаковкиТовараОбъект.ХешСуммаНормализации) Тогда
			ЗначениеШтрихкода = ШтрихкодУпаковкиТовараОбъект.ХешСуммаНормализации;
		Иначе
			ЗначениеШтрихкода = ШтрихкодУпаковкиТовараОбъект.ЗначениеШтрихкода;
		КонецЕсли;
		
		Количество                        = ШтрихкодУпаковкиТовараОбъект.Количество;
		КоличествоПотребительскихУпаковок = ШтрихкодУпаковкиТовараОбъект.КоличествоПотребительскихУпаковок;
		Если КоличествоПотребительскихУпаковок = 0 Тогда
			КоличествоПотребительскихУпаковок = Количество;
		КонецЕсли;
		
		ПримечаниеКРезультатуРазбора = Неопределено;
		ДанныеРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
			ШтрихкодУпаковкиТовараОбъект.ЗначениеШтрихкода, Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, ПримечаниеКРезультатуРазбора);
		
		Если ДанныеРазбора <> Неопределено
			И ДанныеРазбора.ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
			
			НоменклатураGUID   = СтрокаGUID(ШтрихкодУпаковкиТовараОбъект.Номенклатура);
			ХарактеристикаGUID = СтрокаGUID(ШтрихкодУпаковкиТовараОбъект.Характеристика);
			СерияGUID          = СтрокаGUID(ШтрихкодУпаковкиТовараОбъект.Серия);
			
			// Количество - в том числе Вес,
			// КоличествоПотребительскихУпаковок содержится в самом штрихкоде
			ДанныеДляВычисления.Добавить(
			СтрШаблон("%1|%2|%3|%4|%5",
				ЗначениеШтрихкода,
				Формат(Количество, "ЧГ=0;"),
				НоменклатураGUID, ХарактеристикаGUID, СерияGUID));
			
		Иначе
			
			ДанныеДляВычисления.Добавить(
				СтрШаблон("%1|%2",
					ЗначениеШтрихкода,
					Формат(КоличествоПотребительскихУпаковок, "ЧГ=0;")));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеДляВычисления;
	
КонецФункции

Функция СтрокаGUID(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//Возвращает параметры для заполнения свойств, связанных с номенклатурой по вложенным штрихкодам.
// Если объект не имеет вложенных штрихкодов, тогда структура заполняется текущими реквизитами объекта.
// Для проверки по вложенным штрихкодам достаточно брать непосредственно вложенные штрихкоды, без анализа
// вложенных уже в них штрихкодов 2ого уровня, т.к. они при записи также проверются по вложенным упаковкам.
// Если во вложенных упаковках упаковки с одной позицией номенклатуры и характеристики, то
// такая упаковка считается монотоварной.
// 
// Параметры:
//   Объект - СправочникОбъект.ШтрихкодыУпаковокТоваров - объект со свойствами и вложенными товарами
//          - ДанныеФормыСтруктура                      - объект формы
//
//Возвращаемое значение:
//   Структура - со свойствами:
//    * ТипУпаковки    - ПеречислениеСсылка.ТипыУпаковок.
//    * Номенклатура   - ОпределяемыйТип.Номенклатура.
//    * Характеристика - ОпределяемыйТип.ХарактеристикаНоменклатуры.
//    * Упаковка       - ОпределяемыйТип.Упаковка.
//    * Серия          - ОпределяемыйТип.СерияНоменклатуры.
//
Функция ПараметрыНоменклатурыВложенныхШтрихкодов(Объект) Экспорт
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("ТипУпаковки",    Объект.ТипУпаковки);
	ПараметрыНоменклатуры.Вставить("Номенклатура",   Объект.Номенклатура);
	ПараметрыНоменклатуры.Вставить("Характеристика", Объект.Характеристика);
	ПараметрыНоменклатуры.Вставить("Упаковка",       Объект.Упаковка);
	ПараметрыНоменклатуры.Вставить("Серия",          Объект.Серия);
	
	Если Объект.ВложенныеШтрихкоды.Количество() > 0 Тогда
		
		// Получаем строки 1ого уровня для выполнения запроса
		СписокШтрихкодовУпаковок = Новый Массив;
		Для каждого Строка Из Объект.ВложенныеШтрихкоды Цикл
			СписокШтрихкодовУпаковок.Добавить(Строка.Штрихкод);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("СписокШтрихкодовУпаковок", СписокШтрихкодовУпаковок);
		Запрос.УстановитьПараметр("ПустаяНоменклатура", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		Запрос.УстановитьПараметр("ПустаяХарактеристика", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
		Запрос.УстановитьПараметр("ПустаяУпаковка", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Упаковка"));
		Запрос.УстановитьПараметр("ПустаяСерия", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Номенклатура) КАК Номенклатура,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Номенклатура) КАК КоличествоПозицийНоменклатуры,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Характеристика) КАК Характеристика,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Характеристика) КАК КоличествоПозицийХарактеристик,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Упаковка) КАК Упаковка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Упаковка) КАК КоличествоПозицийУпаковок,
		|	МАКСИМУМ(ШтрихкодыУпаковокТоваров.Серия) КАК Серия,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ШтрихкодыУпаковокТоваров.Серия) КАК КоличествоПозицийСерий
		|ПОМЕСТИТЬ СвернутыеЗначения
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.Ссылка В(&СписокШтрихкодовУпаковок)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МонотоварнаяУпаковка)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыУпаковок.МультитоварнаяУпаковка)
		|	КОНЕЦ КАК ТипУпаковки,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА СвернутыеЗначения.Номенклатура
		|		ИНАЧЕ &ПустаяНоменклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|			ТОГДА СвернутыеЗначения.Характеристика
		|		ИНАЧЕ &ПустаяХарактеристика
		|	КОНЕЦ КАК Характеристика,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|				И СвернутыеЗначения.КоличествоПозицийУпаковок = 1
		|			ТОГДА СвернутыеЗначения.Упаковка
		|		ИНАЧЕ &ПустаяУпаковка
		|	КОНЕЦ КАК Упаковка,
		|	ВЫБОР
		|		КОГДА СвернутыеЗначения.КоличествоПозицийНоменклатуры = 1
		|				И СвернутыеЗначения.КоличествоПозицийХарактеристик = 1
		|				И СвернутыеЗначения.КоличествоПозицийСерий = 1
		|			ТОГДА СвернутыеЗначения.Серия
		|		ИНАЧЕ &ПустаяСерия
		|	КОНЕЦ КАК Серия
		|ИЗ
		|	СвернутыеЗначения КАК СвернутыеЗначения";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыНоменклатуры, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыНоменклатуры;
	
КонецФункции

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров);
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе.
//
//Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
//Возвращаемое значение:
//   Произвольный - параметры указания серий (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий)
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров, Объект);
	
КонецФункции

//Возвращает текст запроса для расчета статусов указания серий
//
//Параметры:
//   ПараметрыУказанияСерий - Произвольный - (см. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий)
//
//Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Справочники.ШтрихкодыУпаковокТоваров, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

// см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
//
Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команды) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП) Тогда
		
		КомандаПроверка                     = Команды.Добавить();
		КомандаПроверка.Идентификатор       = Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП.Имя;
		КомандаПроверка.Менеджер            = Метаданные.Обработки.ПроверкаКодовМаркировкиИСМП.ПолноеИмя();
		КомандаПроверка.Представление       = НСтр("ru = 'Проверка кода маркировки'");
		КомандаПроверка.МножественныйВыбор  = Истина;
		КомандаПроверка.Важность            = "СмТакже";
		КомандаПроверка.ФункциональныеОпции = Метаданные.ФункциональныеОпции.ВестиУчетМаркируемойПродукцииИСМП.Имя;
		КомандаПроверка.ИмяФормы            = "Обработка.ПроверкаКодовМаркировкиИСМП.Форма.ФормаПроверки";
		КомандаПроверка.ИмяПараметраФормы   = "Штрихкоды";
		КомандаПроверка.Вид                 = "КоманднаяПанель";
		КомандаПроверка.Картинка            = БиблиотекаКартинок.ИнформацияГосИС;
		
		ТипыШтрихкодовИСМП = Новый Массив();
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
		ТипыШтрихкодовИСМП.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаПроверка,
			"ТипШтрихкода",
			ТипыШтрихкодовИСМП,
			ВидСравненияКомпоновкиДанных.ВСписке);
		
	КонецЕсли;
	
КонецПроцедуры

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Штрихкоды упаковок
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ШтрихкодыУпаковок";
	КомандаПечати.Представление = НСтр("ru = 'Печать штрихкодов упаковок'");
	
	КомандаПечати.МенеджерПечати = "Справочник.ШтрихкодыУпаковокТоваров";

	// Этикетка ИС МП
	Если ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Идентификатор = "ЭтикеткаКодМаркировкиИСМП";
		КомандаПечати.Представление = НСтр("ru = 'Печать этикетки (ИС МП)'");
		КомандаПечати.МенеджерПечати = "Справочник.ШтрихкодыУпаковокТоваров";
		КомандаПечати.ФункциональныеОпции = "ВестиУчетМаркируемойПродукцииИСМП";
	КонецЕсли;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ШтрихкодыУпаковок") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ШтрихкодыУпаковок",
			НСтр("ru='Штрихкоды упаковок'"),
			СформироватьПечатнуюФормуШтрихкодыУпаковок(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭтикеткаКодМаркировкиИСМП") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"ЭтикеткаКодМаркировкиИСМП",
			НСтр("ru='Печать этикетки (обувь, одежда, табак...)'"),
			СформироватьПечатнуюФормуЭтикеткаИСМП(МассивОбъектов, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеДляПечатиШтрихкодовУпаковокИСМП(
	Штрихкоды, МассивШаблоновКодовМаркировок=Неопределено, ПроверятьДоступность=Истина) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ИсходнаяТаблица = РегистрыСведений["ПулКодовМаркировкиСУЗ"].НоваяТаблицаДанныхДляПечатиЭтикеток();
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		Штрихкоды, "ЗначениеШтрихкода,Номенклатура,Характеристика,ХешСуммаЗначенияШтрихкода,ТипШтрихкода,ТипУпаковки");
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		
		ТекущиеЗначения = ЗначенияРеквизитов.Получить(Штрихкод);
		
		Если ТекущиеЗначения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока                        = ИсходнаяТаблица.Добавить();
		НоваяСтрока.КодМаркировки          = ТекущиеЗначения.ЗначениеШтрихкода;
		НоваяСтрока.Номенклатура           = ТекущиеЗначения.Номенклатура;
		НоваяСтрока.Характеристика         = ТекущиеЗначения.Характеристика;
		НоваяСтрока.ХешСуммаКодаМаркировки = ТекущиеЗначения.ХешСуммаЗначенияШтрихкода;
		НоваяСтрока.ТипШтрихкода           = ТекущиеЗначения.ТипШтрихкода;
		НоваяСтрока.ЭтоКодМаркировки       = ТекущиеЗначения.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИсходнаяТаблица.КодМаркировки          КАК КодМаркировки,
		|	ИсходнаяТаблица.Организация            КАК Организация,
		|	ИсходнаяТаблица.ВидПродукции           КАК ВидПродукции,
		|	ИсходнаяТаблица.Номенклатура           КАК Номенклатура,
		|	ИсходнаяТаблица.Характеристика         КАК Характеристика,
		|	ИсходнаяТаблица.ТипШтрихкода           КАК ТипШтрихкода,
		|	ИсходнаяТаблица.ХешСуммаКодаМаркировки КАК ХешСуммаКодаМаркировки,
		|	ИсходнаяТаблица.ЭтоКодМаркировки       КАК ЭтоКодМаркировки
		|ПОМЕСТИТЬ ИсходнаяТаблица
		|ИЗ
		|	&ИсходнаяТаблица КАК ИсходнаяТаблица
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодМаркировки,
		|	ХешСуммаКодаМаркировки
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ДанныеРегистра.Организация,    ИсходнаяТаблица.Организация)        КАК Организация,
		|	ЕСТЬNULL(ДанныеРегистра.ВидПродукции,   ИсходнаяТаблица.ВидПродукции)       КАК ВидПродукции,
		|	ЕСТЬNULL(ДанныеРегистра.КодМаркировки,  ИсходнаяТаблица.КодМаркировки)      КАК КодМаркировки,
		|	ЕСТЬNULL(ДанныеРегистра.ХешСуммаКодаМаркировки, ИсходнаяТаблица.ХешСуммаКодаМаркировки) КАК ХешСуммаКодаМаркировки,
		|	ЕСТЬNULL(ДанныеРегистра.Номенклатура,   ИсходнаяТаблица.Номенклатура)       КАК Номенклатура,
		|	ЕСТЬNULL(ДанныеРегистра.Характеристика, ИсходнаяТаблица.Характеристика)     КАК Характеристика,
		|	ЕСТЬNULL(ДанныеРегистра.ТипШтрихкода,   ИсходнаяТаблица.ТипШтрихкода)       КАК ТипШтрихкода,
		|	ИсходнаяТаблица.ЭтоКодМаркировки                                            КАК ЭтоКодМаркировки,
		|	ВЫБОР
		|		КОГДА ДанныеРегистра.КодМаркировки ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Доступно,
		|	1     КАК Количество
		|ИЗ
		|	ИсходнаяТаблица КАК ИсходнаяТаблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ДанныеРегистра
		|	ПО ДанныеРегистра.КодМаркировки          = ИсходнаяТаблица.КодМаркировки
		|	И ДанныеРегистра.ХешСуммаКодаМаркировки  = ИсходнаяТаблица.ХешСуммаКодаМаркировки
		|";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица", ИсходнаяТаблица);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаКоды = РезультатЗапроса.Выбрать();
	
	МассивДанныхКодов = Новый Массив;
	
	Пока ВыборкаКоды.Следующий() Цикл
		
		Если ВыборкаКоды.ЭтоКодМаркировки И ПроверятьДоступность И Не ВыборкаКоды.Доступно Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru='Код маркировки %1: будет напечатан кратко. Отсутствует полный код в пуле кодов маркировки'"),
				ВыборкаКоды.КодМаркировки));
		КонецЕсли;
		
		Модуль = ОбщегоНазначения.ОбщийМодуль("ПечатьЭтикетокИСМПКлиентСервер");
		СтруктураКодаМаркировкиДляПечати = Модуль.СтруктураПечатиЭтикетки();
		ЗаполнитьЗначенияСвойств(СтруктураКодаМаркировкиДляПечати, ВыборкаКоды);
		МассивДанныхКодов.Добавить(СтруктураКодаМаркировкиДляПечати);
		
		Если МассивШаблоновКодовМаркировок <> Неопределено Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМПКлиентСервер");
			СписокШаблонов = Модуль.ШаблоныКодовПоНоменклатуре(ВыборкаКоды.Номенклатура);
			Для Каждого СтрокаШаблон Из СписокШаблонов Цикл
				Если МассивШаблоновКодовМаркировок.Найти(СтрокаШаблон.Значение) = Неопределено Тогда
					МассивШаблоновКодовМаркировок.Добавить(СтрокаШаблон.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанныхКодов;
	
КонецФункции

Функция ПараметрыШтрихкодовУпаковокДляПечати() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ТипШтрихкода",      Перечисления.ТипыШтрихкодов.ПустаяСсылка());
	Параметры.Вставить("Штрихкод", "");
	Параметры.Вставить("ДатаУпаковки",      '00010101');
	Параметры.Вставить("Номенклатура",      Метаданные.ОпределяемыеТипы.Номенклатура.Тип.ПривестиЗначение());
	Параметры.Вставить("Характеристика",    Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип.ПривестиЗначение());
	Параметры.Вставить("Упаковка",          Метаданные.ОпределяемыеТипы.Упаковка.Тип.ПривестиЗначение());
	Параметры.Вставить("Серия",             Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип.ПривестиЗначение());
	Параметры.Вставить("Количество",        0);
	Параметры.Вставить("СерияМарки",        "");
	Параметры.Вставить("НомерМарки",        "");
	
	Возврат Параметры;
	
КонецФункции

Функция ПараметрыМакетовДляПечати() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Макет_SSCC",           УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.SSCC"));
	Параметры.Вставить("Макет_Code128Формат1", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат1"));
	Параметры.Вставить("Макет_Code128Формат2", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат2"));
	Параметры.Вставить("Макет_Code128Формат3", УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Code128Формат3"));
	Параметры.Вставить("Макет_GS1_128",        УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1_128"));
	Параметры.Вставить("Макет_DataBar",        УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1DataBarExpandedStacked"));
	Параметры.Вставить("Макет_PDF417",         УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.PDF417"));
	Параметры.Вставить("Макет_QR",             УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.QR"));
	
	Эталон = УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	Параметры.Вставить("КоличествоМиллиметровВПикселе", КоличествоМиллиметровВПикселе);
	
	Возврат Параметры;
	
КонецФункции

Функция РаспечататьНовыйКодУпаковки(ШтрихкодУпаковки, Шаблон) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТипШтрихкодаУпаковки = ШтрихкодУпаковки.ТипШтрихкодаУпаковки;
	ЗначениеШтрихкода = ШтрихкодУпаковки.ЗначениеШтрихкода;
	
	Если Шаблон = Неопределено Тогда
		Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.SSCC Тогда
			Шаблон = УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.SSCC");
		ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
			Шаблон = УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.GS1_128");
		КонецЕсли;
	КонецЕсли;
	
	ТипКода = 2;
	Область = Шаблон.ПолучитьОбласть(Шаблон.ОбластьПечати.Имя);
	
	ПараметрыОбласти = ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	ПараметрыОбласти.Вставить("Номенклатура",   ШтрихкодУпаковки.Номенклатура);
	ПараметрыОбласти.Вставить("Характеристика", ШтрихкодУпаковки.Характеристика);
	ПараметрыОбласти.Вставить("Количество",     ШтрихкодУпаковки.Количество);
	
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.SSCC Тогда
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(ЗначениеШтрихкода);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		Если СтрНайти(ЗначениеШтрихкода, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(ЗначениеШтрихкода);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(ЗначениеШтрихкода);
		КонецЕсли;
		
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ИмяПараметра = "ИдентификаторПрименения_" + СвойстваПараметра.КлючИдентификатора;
				ПараметрыОбласти.Вставить(ИмяПараметра, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыОбласти.ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
		ПараметрыОбласти.Номенклатура,
		ПараметрыОбласти.Характеристика);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, ПараметрыОбласти);
	
	Рисунок = Область.Рисунки.ШтрихкодПечать;
	
	Эталон = УправлениеПечатью.МакетПечатнойФормы("Справочник.ШтрихкодыУпаковокТоваров.Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ШтрихкодДляКомпоненты));
	ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
	ПараметрыШтрихкода.Вставить("ТипКода",          ТипКода);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст",  Истина);
	
	ПараметрыГенерацииШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ЗаполнитьЗначенияСвойств(ПараметрыГенерацииШтрихкода, ПараметрыШтрихкода);
	
	РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыГенерацииШтрихкода);
	Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
		Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла внутренняя ошибка'"));
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Для использовании процедуры требуется добавить переопределить УправлениеПечатьюПереопределяемый.ПередДобавлениемКомандПечати
// Пример:
//  СтандартнаяОбработка = Ложь;
//  Справочники.ШтрихкодыУпаковокТоваров.ДобавитьКомандыПечати(КомандыПечати);
//  ДополнительныеОтчетыИОбработки.ПриПолученииКомандПечати(КомандыПечати, "Справочник.ШтрихкодыУпаковокТоваров").
Процедура ДобавитьШтрихкодВТабличныйДокумент(ТабличныйДокумент, ПараметрыМакетовДляПечати, ПараметрыШтрихкодовУпаковокДляПечати) Экспорт
	
	ТипШтрихкодаУпаковки = ПараметрыШтрихкодовУпаковокДляПечати.ТипШтрихкода;
	Штрихкод             = ПараметрыШтрихкодовУпаковокДляПечати.Штрихкод;
	ДатаУпаковки         = ПараметрыШтрихкодовУпаковокДляПечати.ДатаУпаковки;
	Номенклатура         = ПараметрыШтрихкодовУпаковокДляПечати.Номенклатура;
	Характеристика       = ПараметрыШтрихкодовУпаковокДляПечати.Характеристика;
	Упаковка             = ПараметрыШтрихкодовУпаковокДляПечати.Упаковка;
	Серия                = ПараметрыШтрихкодовУпаковокДляПечати.Серия;
	Количество           = ПараметрыШтрихкодовУпаковокДляПечати.Количество;
	СерияМарки           = ПараметрыШтрихкодовУпаковокДляПечати.СерияМарки;
	НомерМарки           = ПараметрыШтрихкодовУпаковокДляПечати.НомерМарки;
	
	Если Не ЗначениеЗаполнено(ТипШтрихкодаУпаковки)
		Или Не ЗначениеЗаполнено(Штрихкод) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОбласти = ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	ПараметрыОбласти.Вставить("ДатаУпаковки",   ДатаУпаковки);
	ПараметрыОбласти.Вставить("Номенклатура",   Номенклатура);
	ПараметрыОбласти.Вставить("Характеристика", Характеристика);
	ПараметрыОбласти.Вставить("Упаковка",       Упаковка);
	ПараметрыОбласти.Вставить("Серия",          Серия);
	ПараметрыОбласти.Вставить("Количество",     Количество);
	ПараметрыОбласти.Вставить("СерияМарки",     СерияМарки);
	ПараметрыОбласти.Вставить("НомерМарки",     НомерМарки);
	
	ШтрихкодДляКомпоненты = Штрихкод;
	
	ОтображатьТекст    = Истина;
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.SSCC Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_SSCC;
		ТипКода = 2;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(Штрихкод);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.Code128 Тогда
		
		НомерФорматаCode128 = ШтрихкодыУпаковокКлиентСервер.ФорматШтрихкодаCode128(Штрихкод);
		
		Если НомерФорматаCode128 = 1 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат1;
		ИначеЕсли НомерФорматаCode128 = 2 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат2;
		ИначеЕсли НомерФорматаCode128 = 3 Тогда
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат3;
		Иначе
			Макет = ПараметрыМакетовДляПечати.Макет_Code128Формат1;
		КонецЕсли;
		ТипКода = 4;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(Штрихкод);
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОбласти, ПараметрыШтрихкода.Результат);
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_GS1_128;
		ТипКода = 2;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		Если СтрНайти(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(Штрихкод);
		КонецЕсли;
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ИмяПараметра = "ИдентификаторПрименения_" + СвойстваПараметра.КлючИдентификатора;
				ПараметрыОбласти.Вставить(ИмяПараметра, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_DataBar;
		ТипКода = 17;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		
		Если СтрНайти(Штрихкод, "(") Тогда
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		Иначе
			ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1(Штрихкод);
		КонецЕсли;
		Если Не ПараметрыШтрихкода.Результат = Неопределено Тогда
			
			Для каждого СвойстваПараметра Из ПараметрыШтрихкода.Результат Цикл
				ПараметрыОбласти.Вставить(СвойстваПараметра.ИмяИдентификатора, СвойстваПараметра.Значение);
			КонецЦикла;
			
			ШтрихкодДляКомпоненты = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
				ПараметрыШтрихкода.Результат,
				Истина,
				ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины());
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.PDF417 Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_PDF417;
		ТипКода = 6;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;
		
	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_QR;
		ТипКода = 16;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;

	ИначеЕсли ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
		
		Макет   = ПараметрыМакетовДляПечати.Макет_QR;
		ТипКода = 24;
		Область = Макет.ПолучитьОбласть(Макет.ОбластьПечати.Имя);
		ОтображатьТекст = Ложь;
		
	КонецЕсли;
	
	ПараметрыОбласти.ПредставлениеНоменклатуры = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
		Номенклатура,
		Характеристика,
		Упаковка);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, ПараметрыОбласти);
	
	Рисунок = Область.Рисунки.ШтрихкодПечать;
	
	КоличествоМиллиметровВПикселе = ПараметрыМакетовДляПечати.КоличествоМиллиметровВПикселе;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",           Окр(Рисунок.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",           Окр(Рисунок.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",         СокрЛП(ШтрихкодДляКомпоненты));
	ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
	ПараметрыШтрихкода.Вставить("ТипКода",          ТипКода);
	ПараметрыШтрихкода.Вставить("ОтображатьТекст",  ОтображатьТекст);
	
	Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
		ПараметрыШтрихкода.Вставить("GS1DatabarКоличествоСтрок", 2);
	КонецЕсли;
	
	ПараметрыГенерацииШтрихкода = ГенерацияШтрихкода.ПараметрыГенерацииШтрихкода();
	ЗаполнитьЗначенияСвойств(ПараметрыГенерацииШтрихкода, ПараметрыШтрихкода);
	
	РезультатГенерацииШтрихкода = ГенерацияШтрихкода.ИзображениеШтрихкода(ПараметрыГенерацииШтрихкода);
	Если РезультатГенерацииШтрихкода.Картинка <> Неопределено Тогда
		Рисунок.Картинка = РезультатГенерацииШтрихкода.Картинка;
	Иначе
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'При генерации картинки штрихкода произошла ошибка'"));
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(Область);
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Возврат
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	Поля.Добавить("ЗначениеШтрихкода");
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПустаяСтрока(Данные.ЗначениеШтрихкода) Тогда
		Представление = Данные.ЗначениеШтрихкода;
	Иначе
		Представление = НСтр("ru = 'Штрихкод не указан'");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверкаВозможностиРедактирования(Параметры, АдресРезультата) Экспорт
	
	Результат = ОбщегоНазначения.ЕстьСсылкиНаОбъект(Параметры.СсылкаНаОбъект);
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

Функция ШтрихкодУпаковкиПоХешСумме(СтрокаДерева, ПараметрыПоиска, ВыполнитьПоискИБ = Неопределено)
	
	ТребуетсяВыполнитьПоискПоИБ = Ложь;
	
	ШтрихкодыУпаковок     = ПараметрыПоиска.ШтрихкодыУпаковок;
	ПараметрыСканирования = ПараметрыПоиска.ПараметрыСканирования;
	
	РезультатПоиска = Новый Структура;
	РезультатПоиска.Вставить("ШтрихкодУпаковки",  Неопределено);
	РезультатПоиска.Вставить("Количество",        0);
	РезультатПоиска.Вставить("Номенклатура",      Неопределено);
	РезультатПоиска.Вставить("Характеристика",    Неопределено);
	РезультатПоиска.Вставить("Серия",             Неопределено);
	РезультатПоиска.Вставить("ХешСумма",          "");
	РезультатПоиска.Вставить("ЭтоПустаяУпаковка", Ложь);
	
	Если СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
		ПараметрыОтбора.Вставить("ХешСумма", "");
		НайденныеШтрихкодыУпаковокШтрихкод = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеШтрихкодыУпаковокШтрихкод.Количество() > 0 Тогда
			НайденныйШтрихкодУпаковки = НайденныеШтрихкодыУпаковокШтрихкод[0];
			
			РезультатПоиска.ШтрихкодУпаковки = НайденныйШтрихкодУпаковки.Ссылка;
			РезультатПоиска.Количество       = НайденныйШтрихкодУпаковки.Количество;
			
			РезультатПоиска.Номенклатура   = НайденныйШтрихкодУпаковки.Номенклатура;
			РезультатПоиска.Характеристика = НайденныйШтрихкодУпаковки.Характеристика;
			РезультатПоиска.Серия          = НайденныйШтрихкодУпаковки.Серия;
			
		КонецЕсли;
		
	Иначе
		
		НайденоПоХэшСумме = Ложь;
		Если ЗначениеЗаполнено(СтрокаДерева.ХешСумма) Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
			ПараметрыОтбора.Вставить("ХешСумма", СтрокаДерева.ХешСумма);
			НайденныеШтрихкодыУпаковокХешСумма = ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора);
			НайденоПоХэшСумме = (НайденныеШтрихкодыУпаковокХешСумма.Количество() > 0);
			
		КонецЕсли;
		
		Если НайденоПоХэшСумме Тогда
			
			НайденныйШтрихкодУпаковки = НайденныеШтрихкодыУпаковокХешСумма[0];
			
			РезультатПоиска.ШтрихкодУпаковки = НайденныйШтрихкодУпаковки.Ссылка;
			РезультатПоиска.Количество       = НайденныйШтрихкодУпаковки.Количество;
			
			РезультатПоиска.Номенклатура   = НайденныйШтрихкодУпаковки.Номенклатура;
			РезультатПоиска.Характеристика = НайденныйШтрихкодУпаковки.Характеристика;
			РезультатПоиска.Серия          = НайденныйШтрихкодУпаковки.Серия;
			
		Иначе
			
			УникальныеСсылкиШтрихкодыУпаковок          = Новый Соответствие;
			НайденныеШтрихкодыУпаковокСПустойХешСуммой = Новый Массив;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Штрихкод", СтрокаДерева.Штрихкод);
			Для Каждого ЭлементДанных Из ШтрихкодыУпаковок.НайтиСтроки(ПараметрыОтбора) Цикл
				Если Не ПустаяСтрока(ЭлементДанных.ХешСумма) Тогда
					Продолжить;
				КонецЕсли;
				Если УникальныеСсылкиШтрихкодыУпаковок[ЭлементДанных.Ссылка] = Неопределено Тогда
					УникальныеСсылкиШтрихкодыУпаковок.Вставить(ЭлементДанных.Ссылка, Истина);
					НайденныеШтрихкодыУпаковокСПустойХешСуммой.Добавить(ЭлементДанных.Ссылка);
				КонецЕсли;
			КонецЦикла;
			
			// Если в ИБ сохранена групповая упаковка с полной детализацией,
			// а текущая упаковка имеет сокращенную детализацию, то возьмем ссылку из ИБ.
			Если (СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор)
				И ПустаяСтрока(СтрокаДерева.ХешСумма)
				И НайденныеШтрихкодыУпаковокСПустойХешСуммой.Количество() = 1 Тогда
				
				НайденныйЭлемент = НайденныеШтрихкодыУпаковокСПустойХешСуммой[0];
				
				КоличествоПотребительскихУпаковок = ?(НайденныйЭлемент.КоличествоПотребительскихУпаковок = 0,
					НайденныйЭлемент.Количество, НайденныйЭлемент.КоличествоПотребительскихУпаковок);
				
				Если ЗначениеЗаполнено(НайденныйЭлемент.ХешСумма)
					И СтрокаДерева[ПараметрыПоиска.ИмяКолонкиКоличествоПотребительскихУпаковок] = КоличествоПотребительскихУпаковок Тогда
					
					НайденныйШтрихкодУпаковки = НайденныйЭлемент;
					
					РезультатПоиска.ШтрихкодУпаковки = НайденныйШтрихкодУпаковки.Ссылка;
					РезультатПоиска.Количество       = НайденныйШтрихкодУпаковки.Количество;
					
					РезультатПоиска.Номенклатура   = НайденныйШтрихкодУпаковки.Номенклатура;
					РезультатПоиска.Характеристика = НайденныйШтрихкодУпаковки.Характеристика;
					РезультатПоиска.Серия          = НайденныйШтрихкодУпаковки.Серия;
					
					СтрокаДерева.ХешСумма = НайденныйЭлемент.ХешСумма;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайденныйШтрихкодУпаковки = Неопределено
				И НайденныеШтрихкодыУпаковокСПустойХешСуммой.Количество() Тогда
				
				ГрупповыеУпаковки           = Перечисления.ДетализацияСтруктурыХраненияИС.ГрупповыеУпаковки;
				КоробаСГрупповымиУпаковками = Перечисления.ДетализацияСтруктурыХраненияИС.КоробаСГрупповымиУпаковками;
				
				ДопустимоСравнение = Истина;
				Если ПараметрыСканирования.ДетализацияСтруктурыХранения = ГрупповыеУпаковки
					И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
					ДопустимоСравнение = Ложь;
				КонецЕсли;
				Если ПараметрыСканирования.ДетализацияСтруктурыХранения = КоробаСГрупповымиУпаковками
					И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
					И Не ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
					ДопустимоСравнение = Ложь;
				КонецЕсли;
				
				Если ВыполнитьПоискИБ <> Неопределено Тогда
					
					ТребуетсяВыполнитьПоискПоИБ = Истина;
					ВыполнитьПоискИБ.Вставить(НайденныеШтрихкодыУпаковокСПустойХешСуммой[0], СтрокаДерева);
					
				ИначеЕсли ДопустимоСравнение Тогда
					
					ВложенныеШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыИзвестныхУпаковок(
						НайденныеШтрихкодыУпаковокСПустойХешСуммой, ПараметрыСканирования);
					
					Если ШтрихкодированиеОбщегоНазначенияИС.ДопустимаТабачнаяПродукция(ПараметрыСканирования)
						Или ШтрихкодированиеОбщегоНазначенияИС.ДопустимаПродукцияИСМП(ПараметрыСканирования) Тогда
						МодульШтрихкодированиеМОТП = ОбщегоНазначения.ОбщийМодуль("ШтрихкодированиеМОТП");
						МодульШтрихкодированиеМОТП.ПривестиВложенныеШтрихкодыКТребуемомуВидуДетализации(
							ВложенныеШтрихкодыУпаковок,
							ПараметрыСканирования);
					КонецЕсли;
					
					ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
					Для Каждого СтрокаДереваВложенныхШтрихкодов Из ВложенныеШтрихкодыУпаковок.ДеревоУпаковок.Строки Цикл
						
						Если ЭтоПустаяУпаковка(СтрокаДереваВложенныхШтрихкодов)
							И ЗначениеЗаполнено(СтрокаДереваВложенныхШтрихкодов.ШтрихкодУпаковки)
							И СтрокаДереваВложенныхШтрихкодов.ВидУпаковки <> Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет Тогда
							
							РезультатПоиска.ШтрихкодУпаковки  = СтрокаДереваВложенныхШтрихкодов.ШтрихкодУпаковки;
							РезультатПоиска.Количество        = СтрокаДерева.Количество;
							РезультатПоиска.Номенклатура      = СтрокаДерева.Номенклатура;
							РезультатПоиска.Характеристика    = СтрокаДерева.Характеристика;
							РезультатПоиска.Серия             = СтрокаДерева.Серия;
							РезультатПоиска.ХешСумма          = СтрокаДерева.ХешСумма;
							РезультатПоиска.ЭтоПустаяУпаковка = Истина;
							
							Прервать;
							
						ИначеЕсли СравнитьСтрокуДереваСДаннымиИБ(СтрокаДерева, СтрокаДереваВложенныхШтрихкодов, ТаблицаХешСумм, ПараметрыПоиска) Тогда
							
							РезультатПоиска.ШтрихкодУпаковки = СтрокаДереваВложенныхШтрихкодов.ШтрихкодУпаковки;
							РезультатПоиска.Количество       = СтрокаДереваВложенныхШтрихкодов.Количество;
							
							РезультатПоиска.Номенклатура   = СтрокаДереваВложенныхШтрихкодов.Номенклатура;
							РезультатПоиска.Характеристика = СтрокаДереваВложенныхШтрихкодов.Характеристика;
							РезультатПоиска.Серия          = СтрокаДереваВложенныхШтрихкодов.Серия;
							РезультатПоиска.ХешСумма       = СтрокаДереваВложенныхШтрихкодов.ХешСумма;
							
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТребуетсяВыполнитьПоискПоИБ Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатПоиска;
	КонецЕсли;
	
КонецФункции

Функция СравнитьСтрокуДереваСДаннымиИБ(СтрокаДерева, СтрокаДереваВложенныхШтрихкодов, ТаблицаХешСумм, ПараметрыПоиска)
	
	Результат = Ложь;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДереваВложенныхШтрихкодов.ТипУпаковки) Тогда
		
		ХешИсходнойСтрокиДерева                    = СтрокаДерева.ХешСумма;
		ХешИсходнойСтрокиДереваВложенныхШтрихкодов = СтрокаДереваВложенныхШтрихкодов.ХешСумма;
		
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДерева, ТаблицаХешСумм, Истина, Ложь,, ПараметрыПоиска.ИмяКолонкиКоличествоПотребительскихУпаковок);
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(СтрокаДереваВложенныхШтрихкодов, ТаблицаХешСумм, Истина, Ложь,, "КоличествоПотребительскихУпаковокПоДаннымИБ");
		
		// Сравнение хешей с учетом количества потребительских упаковок
		Если СтрокаДереваВложенныхШтрихкодов.ХешСумма = СтрокаДерева.ХешСумма Тогда
			
			Результат = Истина;
			
		КонецЕсли;
		
		СтрокаДерева.ХешСумма                    = ХешИсходнойСтрокиДерева;
		СтрокаДереваВложенныхШтрихкодов.ХешСумма = ХешИсходнойСтрокиДереваВложенныхШтрихкодов;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
//
// Возвращаемое значение:
//  Массив - имена блокируемых реквизитов.
//
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("Упаковка");
	Результат.Добавить("Серия");
	Результат.Добавить("ЗначениеШтрихкода");
	Результат.Добавить("ТипУпаковки");
	Результат.Добавить("ТипШтрихкода");
	
	Результат.Добавить("Количество");
	Результат.Добавить("КоличествоПотребительскихУпаковок");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Формирует табличный документ "Штрихкоды упаковок".
//
Функция СформироватьПечатнуюФормуШтрихкодыУпаковок(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ШтрихкодыУпаковокТоваров_ШтрихкодыУпаковок";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка            КАК Ссылка,
	|	ШтрихкодыУпаковокТоваров.ТипШтрихкода      КАК ТипШтрихкода,
	|	ШтрихкодыУпаковокТоваров.ТипУпаковки       КАК ТипУпаковки,
	|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК Штрихкод,
	|	ШтрихкодыУпаковокТоваров.Номенклатура      КАК Номенклатура,
	|	ШтрихкодыУпаковокТоваров.Характеристика    КАК Характеристика,
	|	ШтрихкодыУпаковокТоваров.Упаковка          КАК Упаковка,
	|	ШтрихкодыУпаковокТоваров.Серия             КАК Серия,
	|	ШтрихкодыУпаковокТоваров.Количество        КАК Количество,
	|	ШтрихкодыУпаковокТоваров.ДатаУпаковки      КАК ДатаУпаковки
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.Ссылка В(&МассивОбъектов)
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода В(&ДопустимыеТипыШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипШтрихкода");
	
	Запрос.УстановитьПараметр("МассивОбъектов",           МассивОбъектов);
	Запрос.УстановитьПараметр("ДопустимыеТипыШтрихкодов", ДопустимыеТипыШтрихкодовДляПечати());
	
	ПараметрыМакетов = ПараметрыМакетовДляПечати();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.Штрихкод) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыШтрихкодовУпаковок = ПараметрыШтрихкодовУпаковокДляПечати();
		
		ЗаполнитьЗначенияСвойств(ПараметрыШтрихкодовУпаковок, Выборка);
		
		ВидыПродукции = Новый Массив;
		ВидыПродукции.Добавить(Перечисления.ВидыПродукцииИС.Алкогольная);
		РезультатРазбора = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(Выборка.Штрихкод, ВидыПродукции);
		
		Если РезультатРазбора <> Неопределено Тогда
			Если РезультатРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
				ПараметрыШтрихкодовУпаковок.СерияМарки = Сред(Выборка.Штрихкод, 4, 3);
				ПараметрыШтрихкодовУпаковок.НомерМарки = Сред(Выборка.Штрихкод, 7, 8);
			ИначеЕсли РезультатРазбора.ТипШтрихкода = Перечисления.ТипыШтрихкодов.PDF417 Тогда
				ПараметрыШтрихкодовУпаковок.СерияМарки = Сред(Выборка.Штрихкод, 20, 12);
				ПараметрыШтрихкодовУпаковок.НомерМарки = Сред(Выборка.Штрихкод, 32, 6);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьШтрихкодВТабличныйДокумент(ТабличныйДокумент, ПараметрыМакетов, ПараметрыШтрихкодовУпаковок);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует табличный документ "Этикетка ИС МП (обувь/табак)".
//
Функция СформироватьПечатнуюФормуЭтикеткаИСМП(МассивОбъектов, ПараметрыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("ГосИС.ИСМП") Тогда
		Возврат ТабличныйДокумент;
	КонецЕсли;
	
	СтруктураНастроек = Неопределено;
	
	СтруктураОбъектовПечати = Новый Структура;
	СтруктураОбъектовПечати.Вставить("РежимПечати", "Выборочно");
	СтруктураОбъектовПечати.Вставить("ОбъектыПечати", ДанныеДляПечатиШтрихкодовУпаковокИСМП(МассивОбъектов));
	ПараметрыПечати.Вставить("СтруктураДанных", СтруктураОбъектовПечати);
	
	ПроверятьДоступность = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыПечати, "ПроверятьДоступность");
	
	Если ПроверятьДоступность = Неопределено Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнтеграцияИСМП");
		ПараметрыПечати.Вставить("РазрешитьПовторнуюПечать", Модуль.РазрешенаПовторнаяПечатьКодовМаркировки());
	Иначе
		ПараметрыПечати.Вставить("РазрешитьПовторнуюПечать", Не ПроверятьДоступность);
	КонецЕсли;
	
	Если Не ПараметрыПечати.Свойство("КаждаяЭтикеткаНаНовомЛисте") Тогда
		ПараметрыПечати.Вставить("КаждаяЭтикеткаНаНовомЛисте", Истина);
	КонецЕсли;
	
	РегистрыСведений["ПулКодовМаркировкиСУЗ"].РаспечататьЭтикеткиИЗафиксироватьДатуПечати(
		ПараметрыПечати, ТабличныйДокумент, СтруктураНастроек,, Истина);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДопустимыеТипыШтрихкодовДляПечати()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.SSCC);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.Code128);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.PDF417);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.DataMatrix);
	МассивТипов.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
	
	Возврат МассивТипов;
	
КонецФункции

Функция ВозможныеПараметрыОбластиПечатиШтрихкодовПоТипуШтрихкода(ТипШтрихкодаУпаковки)
	
	ПараметрыОбласти = Новый Структура;
	
	ПараметрыОбласти.Вставить("ПредставлениеНоменклатуры", "");
	
	КолонкиПечати = ШтрихкодыУпаковокКлиентСерверПовтИсп.ТипыКолонокПечатиПоТипуШтрихкода(ТипШтрихкодаУпаковки);
	Для каждого ИдентификаторИтипКолонки Из КолонкиПечати Цикл
		ИдентификаторКолонки = ИдентификаторИтипКолонки.Ключ;
		ТипКолонки = ИдентификаторИтипКолонки.Значение;
		ЗначениеПоУмолчанию = ТипКолонки.ПривестиЗначение(Неопределено);
		
		Если ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_128
			ИЛИ ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
			ИЛИ ТипШтрихкодаУпаковки = Перечисления.ТипыШтрихкодов.GS1_DataMatrix Тогда
			ИмяКолонки = "ИдентификаторПрименения_" + ИдентификаторКолонки;
		Иначе
			ИмяКолонки = ИдентификаторКолонки;
		КонецЕсли;
		
		ПараметрыОбласти.Вставить(ИмяКолонки, ЗначениеПоУмолчанию);
	КонецЦикла;
	
	Возврат ПараметрыОбласти;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсиюЗаполнениеХешСуммаЗначенияШтрихкодаGS1(Параметры) Экспорт
	
	ТипШтрихкода = Новый Массив;
	ТипШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
	ТипШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
	ТипШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataMatrix);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковокТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
	|ГДЕ
	|	ШтрихкодыУпаковокТоваров.ХешСуммаНормализации = """"
	|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода В(&ТипШтрихкода)";
	Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсиюЗаполнениеХешСуммаЗначенияШтрихкодаGS1(Параметры) Экспорт
	
	ПолноеИмяОбъекта  = "Справочник.ШтрихкодыУпаковокТоваров";
	МетаданныеОбъекта = Метаданные.Справочники.ШтрихкодыУпаковокТоваров;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Результат = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуСсылокДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта, МенеджерВременныхТаблиц);
	
	Если Не Результат.ЕстьДанныеДляОбработки Тогда
		Параметры.ОбработкаЗавершена = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Результат.ЕстьЗаписиВоВременнойТаблице Тогда
		Параметры.ОбработкаЗавершена = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТСсылкиДляОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	&ВТСсылкиДляОбработки КАК ВТСсылкиДляОбработки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВТСсылкиДляОбработки", Результат.ИмяВременнойТаблицы);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Если СправочникОбъект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СправочникОбъект.ХешСуммаНормализации) Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ЗаполнитьСвойствоХешСуммаЗначенияШтрихкода(СправочникОбъект);
			
			Если ЗначениеЗаполнено(СправочникОбъект.ХешСуммаНормализации) Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Ссылка,, Параметры.Очередь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось обработать справочник: %Справочник% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Выборка.Ссылка);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			                         УровеньЖурналаРегистрации.Предупреждение,
			                         МетаданныеОбъекта,
			                         Выборка.Ссылка,
			                         ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаполнитьСвойствоХешСуммаЗначенияШтрихкода(ДанныеШтрихкодаУпаковок, ПараметрыШтрихкода = Неопределено) Экспорт
	
	ЗначениеШтрихкода = ДанныеШтрихкодаУпаковок.ЗначениеШтрихкода;
	ТипШтрихкода      = ДанныеШтрихкодаУпаковок.ТипШтрихкода;
	
	Если Не ЗначениеЗаполнено(ЗначениеШтрихкода) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		Или ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
		Или ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыШтрихкода = Неопределено Тогда
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(ЗначениеШтрихкода);
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
		ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода.Результат, Ложь);
	ИначеЕсли (ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128
		Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked
		Или ПараметрыШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataMatrix) Тогда
		ЗначениеШтрихкодаБезСкобок = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ПараметрыШтрихкода.Результат, Ложь, "");
	Иначе
		Возврат;
	КонецЕсли;
	
	ДанныеШтрихкодаУпаковок.ХешСуммаНормализации = ИнтеграцияИС.ХешированиеДанныхSHA256(ЗначениеШтрихкодаБезСкобок);
	
КонецПроцедуры

// Создает и заполняет штрихкоды упаковок для строк дерева. Исключением может быть существующий маркированный товар.
//
// Параметры:
//   СтрокиДерева - КоллекцияСтрокДереваЗначений - источник генерации штрихкодов упаковок
//   ПараметрыСозданияШтрихкодов - См. ПараметрыСозданияШтриходовУпаковокПоДеревуМаркируемойПродукции
Процедура СоздатьШтрихкодыУпаковокПоСтрокамДерева(СтрокиДерева, ПараметрыСозданияШтрихкодов)
	
	Если СтрокиДерева.Количество() > 1 Тогда
		ВыполнитьПоискИБ = Новый Соответствие;
	Иначе
		ВыполнитьПоискИБ = Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		КэшСтроки = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева);
		Если КэшСтроки = Неопределено Тогда

			КэшСтроки = Новый Структура;
			КэшСтроки.Вставить("ВложенныеУпаковки", Новый Массив);
			КэшСтроки.Вставить("ВложенныеХешСуммы", Новый СписокЗначений);
			ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Вставить(СтрокаДерева, КэшСтроки);

		КонецЕсли;

		КэшСтрокиРодителя = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева.Родитель);

		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда

			НайденнаяСтрока = ПараметрыСозданияШтрихкодов.ШтрихкодыУпаковок.Найти(СтрокаДерева.Штрихкод, "Штрихкод");
			Если НайденнаяСтрока = Неопределено Тогда

				СтрокаДерева.ШтрихкодУпаковки = СоздатьЭлементСправочникаШтрихкодыУпаковок(
					СтрокаДерева, ПараметрыСозданияШтрихкодов.КэшСтатусовУказанияСерий, ПараметрыСозданияШтрихкодов.ДополнительныеПараметры);

			ИначеЕсли СтрокаДерева.Серия <> НайденнаяСтрока.Серия Тогда
				
				ЗначенияРеквизитов = Новый Структура("Серия", СтрокаДерева.Серия);
				ИзменитьШтрихкодУпаковки(НайденнаяСтрока.Ссылка, ЗначенияРеквизитов);
				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;

			Иначе

				СтрокаДерева.ШтрихкодУпаковки = НайденнаяСтрока.Ссылка;

			КонецЕсли;

			Если КэшСтрокиРодителя <> Неопределено Тогда
				Если ЗначениеЗаполнено(СтрокаДерева.ХешСуммаНормализации) Тогда
					КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.ХешСуммаНормализации);
				Иначе
					КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.Штрихкод);
				КонецЕсли;
				КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
			КонецЕсли;

		Иначе
			
			СоздатьШтрихкодыУпаковокПоСтрокамДерева(СтрокаДерева.Строки, ПараметрыСозданияШтрихкодов);
			
			СтрокаДерева.ХешСумма = ХешСуммаСодержимогоУпаковки(КэшСтроки.ВложенныеХешСуммы);
			
			РезультатПоиска = ШтрихкодУпаковкиПоХешСумме(
				СтрокаДерева, ПараметрыСозданияШтрихкодов, ВыполнитьПоискИБ);
			
			Если РезультатПоиска <> Неопределено Тогда
				
				Если РезультатПоиска.ШтрихкодУпаковки = Неопределено Тогда
					СтрокаДерева.ШтрихкодУпаковки = СоздатьЭлементСправочникаШтрихкодыУпаковок(
						СтрокаДерева, ПараметрыСозданияШтрихкодов.КэшСтатусовУказанияСерий, ПараметрыСозданияШтрихкодов.ДополнительныеПараметры,
						СтрокаДерева.ХешСумма, КэшСтроки.ВложенныеУпаковки);
				Иначе
					СтрокаДерева.ХешСумма         = РезультатПоиска.ХешСумма;
					СтрокаДерева.ШтрихкодУпаковки = РезультатПоиска.ШтрихкодУпаковки;
				КонецЕсли;
				
				КэшСтрокиРодителя = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева.Родитель);
				Если КэшСтрокиРодителя <> Неопределено Тогда
					КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.ХешСумма);
					КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой = ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой(ВыполнитьПоискИБ, ПараметрыСозданияШтрихкодов);
	Для Каждого КлючИЗначение Из ШтрихкодыУпаковокДляСтрокДереваСПустойХешСуммой Цикл
		
		СтрокаДерева    = КлючИЗначение.Ключ;
		РезультатПоиска = КлючИЗначение.Значение;
		
		Если РезультатПоиска.ШтрихкодУпаковки = Неопределено Тогда
			СтрокаДерева.ШтрихкодУпаковки = СоздатьЭлементСправочникаШтрихкодыУпаковок(
				СтрокаДерева, ПараметрыСозданияШтрихкодов.КэшСтатусовУказанияСерий, ПараметрыСозданияШтрихкодов.ДополнительныеПараметры,
				СтрокаДерева.ХешСумма, КэшСтроки.ВложенныеУпаковки);
		Иначе
			СтрокаДерева.ХешСумма = РезультатПоиска.ХешСумма;
		КонецЕсли;
		
		КэшСтрокиРодителя = ПараметрыСозданияШтрихкодов.КэшСтрокДерева.Получить(СтрокаДерева.Родитель);
		Если КэшСтрокиРодителя <> Неопределено Тогда
			КэшСтрокиРодителя.ВложенныеХешСуммы.Добавить(СтрокаДерева.ХешСумма);
			КэшСтрокиРодителя.ВложенныеУпаковки.Добавить(СтрокаДерева.ШтрихкодУпаковки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Создает элемент справочника "Штрихкоды упаковок" на основании строки дерева упаковок.
//
//Параметры:
//   СтрокаДерева               - СтрокаДереваЗначений - источник реквизитов для создания элемента справочника
//   КэшСтатусовУказанияСерий   - Произвольный - кэш статусов указания серий
//   ПараметрыСозданияШтрихкода - См. ДополнительныеПараметрыСозданияШтрихкодовУпаковок
//   ХешСумма                   - Строка - Хеш сумма, которая рассчитывается на основании вложенных упаковок.
//   ВложенныеШтрихкоды         - Неопределено, Массив из СправочникСсылка.ШтрихкодыУпаковокТоваров - вложенные элементы в упаковке.
//Возвращаемое значение:
//   СправочникСсылка.ШтрихкодыУпаковокТоваров - созданные элемент справочника.
//
Функция СоздатьЭлементСправочникаШтрихкодыУпаковок(СтрокаДерева, КэшСтатусовУказанияСерий, ПараметрыСозданияШтрихкода,
	ХешСумма = "", ВложенныеШтрихкоды = Неопределено)
	
	Если ТипЗнч(СтрокаДерева.ТипУпаковки) <> Тип("ПеречислениеСсылка.ТипыУпаковок") Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	// Создание нового элемента справочника.
	ДанныеНовойУпаковки = СтруктураСозданияШтрихкодаУпаковки();
	ДанныеНовойУпаковки.ТипУпаковки       = СтрокаДерева.ТипУпаковки;
	ДанныеНовойУпаковки.ТипШтрихкода      = СтрокаДерева.ТипШтрихкода;
	ДанныеНовойУпаковки.Штрихкод          = СтрокаДерева.Штрихкод;
	ДанныеНовойУпаковки.ДатаУпаковки      = ТекущаяДатаСеанса();
	
	Если ПараметрыСозданияШтрихкода.ЗаполнятьУпаковку Тогда
		ДанныеНовойУпаковки.Упаковка = СтрокаДерева.Упаковка;
	КонецЕсли;
	
	ДанныеНовойУпаковки.Номенклатура      = СтрокаДерева.Номенклатура;
	ДанныеНовойУпаковки.Характеристика    = СтрокаДерева.Характеристика;
	ДанныеНовойУпаковки.Серия             = СтрокаДерева.Серия;
	
	ПроизвольнаяЕдиницаУчета = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "УчетноеКоличество") Тогда // Потоковая печать
		Если СтрокаДерева.УчетноеКоличество <> 0 Тогда
			ДанныеНовойУпаковки.Количество = СтрокаДерева.УчетноеКоличество;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
			ПроизвольнаяЕдиницаУчета = Истина;
		КонецЕсли;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаДерева, "ПроизвольнаяЕдиницаУчета") Тогда // Дерево из сервиса
		Если СтрокаДерева.ПроизвольнаяЕдиницаУчета Тогда
			ДанныеНовойУпаковки.Количество = СтрокаДерева.Количество;
			ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = СтрокаДерева.КоличествоПотребительскихУпаковок;
			Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				ДанныеНовойУпаковки.КоличествоПотребительскихУпаковок = 1;
			КонецЕсли;
			ПроизвольнаяЕдиницаУчета = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеНовойУпаковки.ХешСуммаНормализации = СтрокаДерева.ХешСуммаНормализации;
	
	Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
		ДанныеНовойУпаковки.ХешСумма = ХешСумма;
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции) Тогда
			Если Не ПроизвольнаяЕдиницаУчета Тогда
				ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоПотребительскихУпаковок;
			КонецЕсли;
		Иначе
			ДанныеНовойУпаковки.Количество = СтрокаДерева.Количество;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		ДанныеНовойУпаковки.ХешСумма = ХешСумма;
		Если Не ПроизвольнаяЕдиницаУчета Тогда
			ДанныеНовойУпаковки.Количество = СтрокаДерева.КоличествоПотребительскихУпаковок;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И Не ПроизвольнаяЕдиницаУчета Тогда
		ДанныеНовойУпаковки.Количество = СтрокаДерева.Количество;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("НеРассчитыватьКоличествоВложенныхШтрихкодов", Истина);
	ПараметрыЗаписи.Вставить("НеРассчитыватьХешСумму",                      Истина);
	ПараметрыЗаписи.Вставить("ВидПродукции",                                СтрокаДерева.ВидПродукции);
	
	НоваяУпаковка = СоздатьШтрихкодУпаковки(ДанныеНовойУпаковки, ВложенныеШтрихкоды,
		ПараметрыЗаписи, КэшСтатусовУказанияСерий, ПараметрыСозданияШтрихкода);
	
	Возврат НоваяУпаковка;
	
КонецФункции

// Формирует таблицу элементов справочника "Штрихкоды упаковок", которые найдены по значениям штрихкодов дерева упаковок.
//
// Параметры:
//  ДеревоУпаковок - ДеревоЗначений - Дерево упаковок.
// Возвращаемое значение:
//  ТаблицаЗначений - Описание:
// * ЗначениеШтрихкода - Строка - Код маркировки.
// * Ссылка - СправочникСсылка.ШтрихкодыУпаковокТоваров - Ссылка на элемент справочника.
// * ХешСумма - Строка - Хеш сумма, которая рассчитывается на основании вложенных упаковок.
Функция СуществующиеЭлементыШтрихкодовДерева(ДеревоУпаковок)

	КвалификаторыСтроки = Новый КвалификаторыСтроки(200);
	ОписаниеСтроки      = Новый ОписаниеТипов("Строка", ,КвалификаторыСтроки);

	ЗначенияШтрихкодов = Новый ТаблицаЗначений;
	ЗначенияШтрихкодов.Колонки.Добавить("Штрихкод", ОписаниеСтроки);
	ВсеЗначенияШтрихкодовСтрокДерева(ДеревоУпаковок.Строки, ЗначенияШтрихкодов);

	ТаблицаЭлементов = ШтрихкодированиеИС.ШтрихкодыУпаковок(ЗначенияШтрихкодов.ВыгрузитьКолонку("Штрихкод"));

	Возврат ТаблицаЭлементов;

КонецФункции

// Заполняет таблицу "Значения штрихкодов" кодами маркировки, присутствующими в строках дерева упаковок.
//
// Параметры:
// 	СтрокиДерева - КоллекцияСтрокДереваЗначений - Описание
// 	ЗначенияШтрихкодов - ТаблицаЗначений - таблица со кодами маркировок.
// * ЗначениеШтрихкода - Строка - Код маркировки.
Процедура ВсеЗначенияШтрихкодовСтрокДерева(СтрокиДерева, ЗначенияШтрихкодов)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		НоваяСтрока = ЗначенияШтрихкодов.Добавить();
		НоваяСтрока.Штрихкод = СтрокаДерева.Штрихкод;
		ВсеЗначенияШтрихкодовСтрокДерева(СтрокаДерева.Строки, ЗначенияШтрихкодов);

	КонецЦикла;

КонецПроцедуры

Функция ЭтоПустаяУпаковка(ДанныеУпаковки)
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеУпаковки.ТипУпаковки) Тогда
		Возврат ПустаяСтрока(ДанныеУпаковки.ХешСумма);
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ПропускатьГруппировкуОбъемноСортовогоУчетаПоGTIN(СтрокаДерева)
	
	Если СтрокаДерева = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаПродукцииИСМП.ГруппировкаОбъемноСортовогоУчетаПоGTIN
		И СтрокаДерева.Строки.Количество() = 1
		И СтрокаДерева.Строки[0].ВидУпаковки = Перечисления.ВидыУпаковокИС.ОбъемноСортовойУчет;
	
КонецФункции

#КонецОбласти

#КонецЕсли
