#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Параметры.Ключ.Пустая() Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	СобытияФормИСПереопределяемый.УстановитьПараметрыВыбораСвязиПараметровВыбораДоговора(ЭтотОбъект, "ДоговорКонтрагента");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипОрганизацияКонтрагент = 0 И ИспользуютсяДоговорыОрганизаций
		Или ТипОрганизацияКонтрагент = 1 И ИспользуютсяДоговорыКонтрагентов Тогда
		
		Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента)
			Или ПустаяСтрока(Объект.НомерДоговора) Или Не ЗначениеЗаполнено(Объект.ДатаДоговора) Тогда
			
			ТекстСообщения = Нстр("ru = 'Не заполнен договор'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.ДоговорКонтрагента", Отказ);
			
			МассивНепроверяемыхРеквизитов = Новый Массив;
			МассивНепроверяемыхРеквизитов.Добавить("НомерДоговора");
			МассивНепроверяемыхРеквизитов.Добавить("ДатаДоговора");
			
			ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентСтрокойПриИзменении(Элемент)
	
	ПолеСоставногоТипаПриИзменении(Элемент);
	КонтрагентПриИзмененииНаСервере();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонтрагентПриИзмененииНаСервере();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТипХраненияПриИзменении(Элемент)
	
	НастроитьЗакрепленнуюПлощадь(ЭтотОбъект);
	
	Если Не ТребуетсяУказаниеПлощади Тогда
		Объект.ЗакрепленнаяПлощадь = 0;
	КонецЕсли;
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.МестоХранения        = "";
		Объект.МестоХраненияСтрокой = "";
		КомментарийАдрес            = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// структуры ВидКонтактнойИнформацииАдрес.
	Объект.МестоХранения = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформацииАдрес, КомментарийАдрес);
	Объект.МестоХраненияСтрокой = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	// Сбрасываем как представления, так и внутренние значения полей.
	Объект.МестоХранения        = "";
	Объект.МестоХраненияСтрокой = "";
	КомментарийАдрес            = "";
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.МестоХраненияСтрокой Тогда
		Объект.МестоХраненияСтрокой = Элемент.ТекстРедактирования;
		Объект.МестоХранения = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформацииАдрес);
	ПараметрыОткрытия.Вставить("ЗначенияПолей",           Объект.МестоХранения);
	ПараметрыОткрытия.Вставить("Представление",           Объект.МестоХраненияСтрокой);
	ПараметрыОткрытия.Вставить("Комментарий",             КомментарийАдрес);
	
	// Переопределямый заголовок формы, по умолчанию отобразятся данные по ВидКонтактнойИнформации.
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Адрес места хранения'"));
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Объект.МестоХранения        = ВыбранноеЗначение.КонтактнаяИнформация;
	Объект.МестоХраненияСтрокой = ВыбранноеЗначение.Представление;
	КомментарийАдрес    = ВыбранноеЗначение.Комментарий;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ОчиститьДатуНомерДоговора(ЭтотОбъект);
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеВыбораДоговора              = Новый Структура;
	ДанныеВыбораДоговора.Вставить("Организация", Объект.Организация);
	ДанныеВыбораДоговора.Вставить("Контрагент",  Объект.Контрагент);
	ДанныеВыбораДоговора.Вставить("Договор",     Объект.ДоговорКонтрагента);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДоговора", ЭтотОбъект);
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораДоговораОрганизацииКонтрагента(ЭтотОбъект, ДанныеВыбораДоговора, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорКонтрагента.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Организация.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагент");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнициализироватьПоляКонтактнойИнформации();
	НастроитьЗакрепленнуюПлощадь(ЭтотОбъект);
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииИспользованияДоговоровКонтрагентов(ИспользуютсяДоговорыКонтрагентов);
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииИспользованияДоговоровОрганизаций(ИспользуютсяДоговорыОрганизаций);
	
	Если Параметры.Ключ.Пустая() Тогда
		ЗначенияЗаполнения = Параметры.ЗначенияЗаполнения;
		Элементы.Организация.Доступность = Не ЗначенияЗаполнения.Свойство("Организация")
			Или ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Организация);
		Элементы.КонтрагентСтрокой.Доступность  = Не ЗначенияЗаполнения.Свойство("Контрагент")
			Или Не ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения.Контрагент);
	КонецЕсли;
	
	ТипОрганизацияКонтрагент = ОпределитьТипОрганизацияКонтрагент(Объект.Контрагент);
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ДоговорКонтрагента.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.НомерДоговора.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	Элементы.ДатаДоговора.Доступность = ЗначениеЗаполнено(Объект.Контрагент);
	
	Если Объект.Контрагент <> Неопределено
		И (Форма.ТипОрганизацияКонтрагент = 0 И Не Форма.ИспользуютсяДоговорыОрганизаций
		   Или Форма.ТипОрганизацияКонтрагент = 1 И Не Форма.ИспользуютсяДоговорыКонтрагентов) Тогда
		
		Элементы.ДоговорКонтрагента.Видимость = Ложь;
		Элементы.ГруппаНомерДата.Видимость    = Истина;
		
	Иначе
		
		Элементы.ДоговорКонтрагента.Видимость = Форма.ИспользуютсяДоговорыКонтрагентов Или Форма.ИспользуютсяДоговорыОрганизаций;
		Элементы.ГруппаНомерДата.Видимость = Не (Форма.ИспользуютсяДоговорыКонтрагентов Или Форма.ИспользуютсяДоговорыОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДатуНомерДоговора(Форма)
	
	Форма.Объект.НомерДоговора = "";
	Форма.Объект.ДатаДоговора  = Дата(1, 1, 1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьТипОрганизацияКонтрагент(Контрагент)
	
	Возврат ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Контрагент);
	
КонецФункции

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "КонтрагентСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформацииАдрес = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	Объект.МестоХраненияСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(Объект.МестоХранения);
	КомментарийАдрес = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(Объект.МестоХранения);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗакрепленнуюПлощадь(Форма)
	
	Форма.ТребуетсяУказаниеПлощади = ИнтеграцияЗЕРНОКлиентСервер.ТипХраненияТребуетУказанияПлощади(Форма.Объект.ТипХранения);
	Форма.Элементы.ЗакрепленнаяПлощадь.Доступность               = Форма.ТребуетсяУказаниеПлощади;
	Форма.Элементы.ЗакрепленнаяПлощадь.АвтоОтметкаНезаполненного = Форма.ТребуетсяУказаниеПлощади;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорКонтрагентаПриИзмененииНаСервере()
	
	СоответствиеДоговоров = Новый Соответствие();
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриОпределенииНомераДатыДоговораДокументов(Объект.ДоговорКонтрагента, СоответствиеДоговоров);
	РеквизитыДоговора = СоответствиеДоговоров[Объект.ДоговорКонтрагента];
	
	Если РеквизитыДоговора <> Неопределено Тогда
		Объект.НомерДоговора = РеквизитыДоговора.НомерДоговора;
		Объект.ДатаДоговора  = РеквизитыДоговора.ДатаДоговора;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииНаСервере()
	
	ТипОрганизацияКонтрагент  = ОпределитьТипОрганизацияКонтрагент(Объект.Контрагент);
	Объект.ДоговорКонтрагента = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ДоговорКонтрагентаИС");
	ОчиститьДатуНомерДоговора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДоговора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ДоговорКонтрагента = Результат;
		ДоговорКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти