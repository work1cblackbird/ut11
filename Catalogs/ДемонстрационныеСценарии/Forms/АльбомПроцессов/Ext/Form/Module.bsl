
#Область ОбработчикиСобытийФормы 

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбработатьПереданныеПараметры(Отказ); 
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	СформироватьHTMLДокумент();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы 

&НаКлиенте
Процедура ТекстHTMLДокументСформирован(Элемент)
	
	Если Не НеВызыватьКомандуПечати 
		И Не ФормаДиалогаПечатиПриОткрытииОткрывалась Тогда
		Элементы.ТекстHTML.Документ.execCommand("Print");
		ФормаДиалогаПечатиПриОткрытииОткрывалась = Истина;
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ТекстHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ДемонстрационныеСценарииКлиент.ПриНажатииВПолеHTMLДокумента(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияФормы

&НаСервере
Процедура ОбработатьПереданныеПараметры(Отказ)

	Если ТипЗнч(Параметры.СценарииОтчета) <> Тип("Массив") Тогда
		
		Отказ = Истина;
		
	ИначеЕсли Параметры.СценарииОтчета.Количество() = 0 Тогда
		
		Отказ = Истина;
		
	Иначе
		
		СценарииОтчета.ЗагрузитьЗначения(Параметры.СценарииОтчета);
		
	КонецЕсли;
	
	НеВызыватьКомандуПечати = Параметры.НеВызыватьКомандуПечати;
	
	Если Отказ Тогда
		
		ОбщегоНазначения.СообщитьПользователю(ДемонстрационныеСценарииКлиентСервер.ТекстСообщенияНекорректныеПараметрыАльбомПроцессов());
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы()

	ЯзыкСценариев = ТекущийЯзык().КодЯзыка;

КонецПроцедуры 

#КонецОбласти 

#Область ФормированиеHTMLДокумента

&НаСервере
Процедура СформироватьHTMLДокумент()

	ДанныеДляФормирования = ДанныеДляФормированияHTMLДокумента(); 
	
	Если ДанныеДляФормирования.КоличествоСценариев = 0 Тогда
		
		ВызватьИсключение ДемонстрационныеСценарииКлиентСервер.ТекстСообщенияНекорректныеПараметрыАльбомПроцессов();
		
	КонецЕсли;
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ГруппДляВывода = ДанныеДляФормирования.Данные.Количество();
	ГруппВыведено = 0;
	
	Для Каждого ДанныеСценарияГруппы Из ДанныеДляФормирования.Данные Цикл
	
		Для Каждого СтрокаДерева Из ДанныеСценарияГруппы.Строки Цикл
			
			ВывестиHTMLДокументСтрокуСценария(СтрокаДерева, ДокументHTML);
		
		КонецЦикла; 
		
		ГруппВыведено = ГруппВыведено + 1;
		
		Если ГруппВыведено < ГруппДляВывода Тогда
			
			ДобавитьВДокументHTMLРазрывПечатиДляСтраницы(ДокументHTML);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстHTML = ТекстHTMLИзОбъектаДокументHTML( ДокументHTML);

КонецПроцедуры

&НаСервере
Процедура ДобавитьПустуюСтрокуВДокументHTML(ДокументHTML)
	
	ЭлементРазрыв = ДокументHTML.СоздатьЭлемент("br");
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементРазрыв);
	
КонецПроцедуры 

&НаСервере
Процедура ДобавитьВДокументHTMLРазрывПечатиДляСтраницы(ДокументHTML)
	
	ДобавитьПустуюСтрокуВДокументHTML(ДокументHTML);
	ДобавитьПустуюСтрокуВДокументHTML(ДокументHTML);
	
	ЭлементТаблица = ДокументHTML.СоздатьЭлемент("table");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"width", "100%");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"padding", "0");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"border", "none");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"border-collapse", "collapse");
	
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементТаблица);
	
	ЭлементСтрокаТаблицы = ДокументHTML.СоздатьЭлемент("tr");
	УстановитьАтрибутЭлементаHTML(ЭлементСтрокаТаблицы,"background-color", "#B0B0B0");
	УстановитьАтрибутЭлементаHTML(ЭлементСтрокаТаблицы,"padding", "0");
	УстановитьАтрибутЭлементаHTML(ЭлементСтрокаТаблицы,"height",  "1");
	
	ЭлементТаблица.ДобавитьДочерний(ЭлементСтрокаТаблицы);
	
	ЭлементРазрыв = ДокументHTML.СоздатьЭлемент("br");
	УстановитьАтрибутЭлементаHTML(ЭлементСтрокаТаблицы,"page-break-after", "always"); 
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементРазрыв);
	
КонецПроцедуры 

// Выводит строку со сценарием в отчет
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - содержит:
//    * ПолныйКод    - Строка - полный код сценария
//    * Наименование - Строка - наименование сценария
//    * ТекстHTML    - Строка - описание сценария
//  ДокументHTML - ДокументHTML - документ в который выводится заголовок
&НаСервере
Процедура ВывестиHTMLДокументСтрокуСценария(СтрокаДерева, ДокументHTML)
	
	РодительскаяСтрока = СтрокаДерева.Родитель; 
	
	Если РодительскаяСтрока <> Неопределено
		И РодительскаяСтрока.ЭтоГруппа <> СтрокаДерева.ЭтоГруппа Тогда
		
		ИндексТекущейСтроки = РодительскаяСтрока.Строки.Индекс(СтрокаДерева);
		Если ИндексТекущейСтроки > 0 Тогда
			Если РодительскаяСтрока.Строки[РодительскаяСтрока.Строки.Индекс(СтрокаДерева) - 1].ЭтоГруппа Тогда
				ДобавитьПустуюСтрокуВДокументHTML(ДокументHTML);
			КонецЕсли;
		КонецЕсли;
		
		Если Не РодительскаяСтрока.ШапкаТаблицыВыведена Тогда
			
			РодительскаяСтрока.ЭлементТаблицаHTML = ЭлементТаблицаПослеВыводаШапкиТаблицы(ДокументHTML); 
			
			РодительскаяСтрока.ШапкаТаблицыВыведена = Истина; 
			
		КонецЕсли;
		
		ВывестиСтрокуСценарияВТаблицу(ДокументHTML, РодительскаяСтрока.ЭлементТаблицаHTML, СтрокаДерева); 
		
	Иначе
		
		Если РодительскаяСтрока <> Неопределено Тогда
			РодительскаяСтрока.ШапкаТаблицыВыведена = Ложь;
		КонецЕсли;
		
		ВывестиЗаголовокСценария(СтрокаДерева, ДокументHTML);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл 
			
			ВывестиHTMLДокументСтрокуСценария(ПодчиненнаяСтрока, ДокументHTML);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вывести строку сценария в таблицу.
// 
// Параметры:
//  ДокументHTML - ДокументHTML - документ, в который выводится строка
//  ЭлементТаблицаHTML - ЭлементHTML - содержит таблицу в которую выводится строка
//  СтрокаДерева - СтрокаДереваЗначений - содержит:
//    * ПолныйКод    - Строка - полный код сценария
//    * Наименование - Строка - наименование сценария
//    * ТекстHTML    - Строка - описание сценария
&НаСервере
Процедура ВывестиСтрокуСценарияВТаблицу(ДокументHTML, ЭлементТаблицаHTML, СтрокаДерева)
	
	ЭлементСтрокаТаблицы = ДокументHTML.СоздатьЭлемент("tr");
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, СтрокаДерева.ПолныйКод, Ложь);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, СтрокаДерева.Наименование, Ложь);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, ИсполнителиСтрокой(СтрокаДерева.Исполнители), Ложь);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, ДокументHTMLИзТекстаHTMLДляЯчейкиТаблицы(СтрокаДерева.ТекстHTML), Ложь);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, ОбъектыКонфигурацииСтрокой(СтрокаДерева.ДокументыСправочники), Ложь);
	
	ЭлементТаблицаHTML.ДобавитьДочерний(ЭлементСтрокаТаблицы);
	
КонецПроцедуры

&НаСервере
Функция ДокументHTMLИзТекстаHTMLДляЯчейкиТаблицы(ТекстHTML)
	
	СодержимоеТела = СодержимоеТегаHTML(ТекстHTML, "body");
	ДокументHTML   =  ОбъектДокументHTMLИзТекстаHTML(СодержимоеТела);
	
	Возврат ДокументHTML;

КонецФункции

&НаСервере
Функция СодержимоеТегаHTML(Текст, ИмяТега, ВключатьОткрывающийЗакрывающийТег = Ложь, НомерПоПорядку = 1)
	
	Результат = Неопределено;
	
	Начало    = "<"  + ИмяТега;
	Окончание = "</" + ИмяТега + ">";
	
	НайденнаяПозицияНачало = СтрНайти(НРег(Текст), НРег(Начало), НаправлениеПоиска.СНачала, 1, НомерПоПорядку);
	НайденнаяПозицияОкончание = СтрНайти(НРег(Текст), НРег(Окончание), НаправлениеПоиска.СНачала, 1, НомерПоПорядку);
	Если НайденнаяПозицияНачало = 0
		Или НайденнаяПозицияОкончание = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Содержимое = Сред(Текст,
	                  НайденнаяПозицияНачало,
	                  НайденнаяПозицияОкончание - НайденнаяПозицияНачало + СтрДлина(Окончание));
	
	Если ВключатьОткрывающийЗакрывающийТег Тогда
		
		Результат = СокрЛП(Содержимое);
		
	Иначе
		
		ОткрывающийТег = Лев(Содержимое, СтрНайти(Содержимое, ">"));
		Содержимое = СтрЗаменить(Содержимое, ОткрывающийТег, "");
		
		ЗакрывающийТег = Прав(Содержимое, СтрДлина(Содержимое) - СтрНайти(Содержимое, "<", НаправлениеПоиска.СКонца) + 1);
		Содержимое = СтрЗаменить(Содержимое, ЗакрывающийТег, "");
		
		Результат = СокрЛП(Содержимое);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИсполнителиСтрокой(ИсполнителиМассив) 
	
	Возврат СтрСоединить(ИсполнителиМассив, ",");
	
КонецФункции

&НаСервере
Функция ОбъектыКонфигурацииСтрокой(ОбъектыКонфигурацииМассив) 
	
	Возврат СтрСоединить(ОбъектыКонфигурацииМассив, ",");
	
КонецФункции

&НаСервере
Функция ЭлементТаблицаПослеВыводаШапкиТаблицы(ДокументHTML)
	
	ЦветФонаЯчейкиШапки = "E6E6FA";
	ВысотаЯчейкиШапки   = "50";
	
	ЭлементТаблица = ДокументHTML.СоздатьЭлемент("table");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"border", "1");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"border-collapse", "collapse");
	УстановитьАтрибутЭлементаHTML(ЭлементТаблица,"rules", "all");
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементТаблица);
	
	ДобавитьКолонкуТаблицы(ДокументHTML, ЭлементТаблица, "60", "left");
	ДобавитьКолонкуТаблицы(ДокументHTML, ЭлементТаблица, "200", "left");
	ДобавитьКолонкуТаблицы(ДокументHTML, ЭлементТаблица, "150", "left");
	ДобавитьКолонкуТаблицы(ДокументHTML, ЭлементТаблица, "900", "left");
	ДобавитьКолонкуТаблицы(ДокументHTML, ЭлементТаблица, "150", "left");
	
	ЭлементШапкаТаблицы = ДокументHTML.СоздатьЭлемент("thead");
	ЭлементСтрокаТаблицы = ДокументHTML.СоздатьЭлемент("tr");
	
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, НСтр("ru = 'Код'"),                   Истина, ЦветФонаЯчейкиШапки, ВысотаЯчейкиШапки);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, НСтр("ru = 'Шаг процесса'"),          Истина, ЦветФонаЯчейкиШапки, ВысотаЯчейкиШапки);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, НСтр("ru = 'Исполнитель'"),           Истина, ЦветФонаЯчейкиШапки, ВысотаЯчейкиШапки);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, НСтр("ru = 'Действия в программе'"),  Истина, ЦветФонаЯчейкиШапки, ВысотаЯчейкиШапки);
	ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрокаТаблицы, НСтр("ru = 'НСИ, документы, формы'"), Истина, ЦветФонаЯчейкиШапки, ВысотаЯчейкиШапки);
	
	ЭлементШапкаТаблицы.ДобавитьДочерний(ЭлементСтрокаТаблицы);
	ЭлементТаблица.ДобавитьДочерний(ЭлементШапкаТаблицы);
	
	Возврат ЭлементТаблица;
	
КонецФункции 

&НаСервере
Процедура ДобавитьКолонкуТаблицы(ДокументHTML, ЭлементТаблица, Ширина, Выравнивание);
	
	ЭлементКолонка = ДокументHTML.СоздатьЭлемент("col");
	
	УстановитьАтрибутЭлементаHTML(ЭлементКолонка, "width", Ширина);
	УстановитьАтрибутЭлементаHTML(ЭлементКолонка, "aligh", Выравнивание);
	УстановитьАтрибутЭлементаHTML(ЭлементКолонка, "valign", "top");
	
	ЭлементТаблица.ДобавитьДочерний(ЭлементКолонка);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЯчейкуВТаблицу(ДокументHTML, ЭлементСтрока, ЗначениеЯчейки, ВыделятьЖирным = Ложь, ЦветФона = Неопределено, Высота = 0)
	
	ЭлементЯчейка = ДокументHTML.СоздатьЭлемент("td");
	УстановитьАтрибутЭлементаHTML(ЭлементЯчейка, "valign", "top");
	УстановитьАтрибутЭлементаHTML(ЭлементЯчейка,"border", "1");
	УстановитьАтрибутЭлементаHTML(ЭлементЯчейка,"border-collapse", "collapse");
	Если ЦветФона <> Неопределено Тогда
		УстановитьАтрибутЭлементаHTML(ЭлементЯчейка,"bgcolor", ЦветФона);
	КонецЕсли;
	Если Высота <> 0 Тогда
		УстановитьАтрибутЭлементаHTML(ЭлементЯчейка,"height", Высота);
	КонецЕсли;
	ЭлементШрифт =  ЭлементШрифт(ЭлементСтрока.ДокументВладелец, "2", "Tahoma"); 
	
	Если ТипЗнч(ЗначениеЯчейки) = Тип("ДокументHTML") Тогда
		
		Для Каждого ДочернийУзел Из ЗначениеЯчейки.ДочерниеУзлы Цикл
			
			Если ДочернийУзел.ТипУзла = ТипУзлаDOM.Элемент Тогда
				
				КлонДочернегоУзла = ДочернийУзел.КлонироватьУзел( Истина);
				ЭлементЯчейка.ДобавитьДочерний(КлонДочернегоУзла);
				
			КонецЕсли;
			
		КонецЦикла;
	
	Иначе
		
		Если ВыделятьЖирным Тогда
			ЭлементЖирный = ДокументHTML.СоздатьЭлемент("b");
			ЭлементЖирный.ТекстовоеСодержимое = ЗначениеЯчейки;
			ЭлементШрифт.ДобавитьДочерний(ЭлементЖирный);
		Иначе 
			ЭлементШрифт.ТекстовоеСодержимое = ЗначениеЯчейки;
		КонецЕсли;
		
		ЭлементЯчейка.ДобавитьДочерний(ЭлементШрифт);
		
	КонецЕсли;
	
	ЭлементСтрока.ДобавитьДочерний(ЭлементЯчейка);
	
КонецПроцедуры

// Выводит заголовок сценария в отчет
// 
// Параметры:
//  СтрокаДерева - СтрокаДереваЗначений - содержит:
//    * ПолныйКод    - Строка - полный код сценария
//    * Наименование - Строка - наименование сценария
//    * ТекстHTML    - Строка - описание сценария
//  ДокументHTML - ДокументHTML - документ в который выводится заголовок
&НаСервере
Процедура ВывестиЗаголовокСценария(СтрокаДерева, ДокументHTML)
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ДокументHTML.Тело.ДобавитьДочерний(ЭлементБлок);
	УровеньСтрокиДерева = УровеньСтрокиДерева(СтрокаДерева);
	ЭлементШрифт = ЭлементШрифт(ДокументHTML, РазмерШрифтаПоУровнюСтрокиДерева(УровеньСтрокиДерева), "Cambria", "#4b0082");
	ДобавитьТекстовыйУзел(ЭлементШрифт, СтрШаблон("%1 %2", СтрокаДерева.ПолныйКод, СтрокаДерева.Наименование), Истина);

	ЭлементБлок.ДобавитьДочерний(ЭлементШрифт);
	
КонецПроцедуры

&НаСервере
Функция РазмерШрифтаПоУровнюСтрокиДерева(УровеньСтрокиДерева)

	Если УровеньСтрокиДерева = 0 Тогда
		Возврат "4";
	ИначеЕсли УровеньСтрокиДерева = 1 Тогда
		Возврат "3";
	Иначе
		Возврат "2";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УровеньСтрокиДерева(СтрокаДерева)
	
	Уровень = 0;
	
	ОпределитьКоличествоУровнейДерева(СтрокаДерева, Уровень);
	
	Возврат Уровень;
	
КонецФункции 

&НаСервере
Процедура ОпределитьКоличествоУровнейДерева(СтрокаДерева, Уровень)
	
	РодительскаяСтрока =СтрокаДерева.Родитель; 
	Если РодительскаяСтрока <> Неопределено Тогда
		Уровень = Уровень + 1; 
		ОпределитьКоличествоУровнейДерева(РодительскаяСтрока, Уровень)
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстовыйУзел(ЭлементРодитель, Текст, ВыделятьЖирным = Ложь, ДобавлятьПереносСтроки = Ложь)
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ДобавитьДочерний(ТекстовыйУзел);
		ЭлементРодитель.ДобавитьДочерний(ЭлементЖирный);
	Иначе
		
		ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
		
	КонецЕсли;
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭлементШрифт(ДокументHTML, Размер, ИмяШрифта, ЦветШрифта = Неопределено)
	
	ЭлементШрифт = ДокументHTML.СоздатьЭлемент("Font");
	УстановитьАтрибутЭлементаHTML(ЭлементШрифт,"size",   Размер);
	УстановитьАтрибутЭлементаHTML(ЭлементШрифт,"face",   ИмяШрифта);
	Если ЦветШрифта <> Неопределено Тогда
		УстановитьАтрибутЭлементаHTML(ЭлементШрифт,"color", ЦветШрифта);
	КонецЕсли;
	
	Возврат ЭлементШрифт;
	
КонецФункции

&НаСервере
Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML, Имя, ТекстовоеСодержимое)
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляФормированияHTMLДокумента()
	
	ДанныеДляФормирования = Новый Структура;
	ДанныеДляФормирования.Вставить("Данные",              Новый Массив);
	ДанныеДляФормирования.Вставить("КоличествоСценариев", 0); 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДемонстрационныеСценарии.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
	|ГДЕ
	|	ДемонстрационныеСценарии.Ссылка В(&СценарииОтчета)
	|	И ДемонстрационныеСценарии.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("СценарииОтчета",СценарииОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат ДанныеДляФормирования;
		
	КонецЕсли;
	
	ВыборкаСценарииГруппы = РезультатЗапроса.Выбрать(); 
	ДанныеДляФормирования.КоличествоСценариев = ВыборкаСценарииГруппы.Количество();
	
	Если ДанныеДляФормирования.КоличествоСценариев = 0 Тогда
		Возврат ДанныеДляФормирования;
	КонецЕсли;
	
	Пока ВыборкаСценарииГруппы.Следующий() Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДемонстрационныеСценарии.Ссылка                                             КАК Ссылка,
		|	МИНИМУМ(ЕСТЬNULL(ДемонстрационныеСценарииОписанияСценария.НомерСтроки, -1)) КАК НомерСтрокиОписания
		|ПОМЕСТИТЬ СценарииОписания
		|ИЗ
		|	Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
		|		ПО (ДемонстрационныеСценарииОписанияСценария.Ссылка = ДемонстрационныеСценарии.Ссылка)
		|			И (ДемонстрационныеСценарииОписанияСценария.КодЯзыка = &КодЯзыка)
		|ГДЕ
		|	ДемонстрационныеСценарии.Родитель В ИЕРАРХИИ(&ДемонстрационныйСценарий)
		|	И НЕ ДемонстрационныеСценарии.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО ДемонстрационныеСценарии.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДемонстрационныеСценарии.Ссылка       КАК Ссылка,
		|	ДемонстрационныеСценарии.Родитель     КАК Родитель,
		|	ДемонстрационныеСценарии.Наименование КАК Наименование,
		|	ДемонстрационныеСценарии.ПолныйКод    КАК ПолныйКод,
		|	ДемонстрационныеСценарии.ЭтоГруппа    КАК ЭтоГруппа,
		|	ДемонстрационныеСценарии.ТипГруппы    КАК ТипГруппы,
		|	ДемонстрационныеСценарии.ПрофилиГруппДоступа.(
		|		Профиль КАК Профиль
		|	) КАК ПрофилиГруппДоступа,
		|	ДемонстрационныеСценарии.ОбъектыКонфигурации.(
		|		ОбъектКонфигурации КАК ОбъектКонфигурации
		|	) КАК ОбъектыКонфигурации,
		|	ЕСТЬNULL(ДемонстрационныеСценарииОписанияСценария.ПрисоединенныйФайл, ЗНАЧЕНИЕ(Справочник.ДемонстрационныеСценарииПрисоединенныеФайлы.ПустаяСсылка)) КАК ПрисоединенныйФайл
		|ИЗ
		|	СценарииОписания КАК СценарииОписания
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии КАК ДемонстрационныеСценарии 
		|		ПО ДемонстрационныеСценарии.Ссылка = СценарииОписания.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДемонстрационныеСценарии.ОписанияСценария КАК ДемонстрационныеСценарииОписанияСценария
		|		ПО (ДемонстрационныеСценарииОписанияСценария.Ссылка = ДемонстрационныеСценарии.Ссылка)
		|			И (СценарииОписания.НомерСтрокиОписания = ДемонстрационныеСценарииОписанияСценария.НомерСтроки)
		|УПОРЯДОЧИТЬ ПО
		|	ПолныйКод
		|ИТОГИ ПО
		|	ДемонстрационныеСценарии.Ссылка ИЕРАРХИЯ";
		
		МультиязычностьСервер.ИзменитьПолеЗапросаПодТекущийЯзык(Запрос.Текст, "Наименование");
		
		Запрос.УстановитьПараметр("ДемонстрационныйСценарий", ВыборкаСценарииГруппы.Ссылка);
		Запрос.УстановитьПараметр("КодЯзыка",                 ЯзыкСценариев);
		
		РезультатЗапроса = Запрос.Выполнить(); // @skip-warning
		
		ДанныеПоГруппе = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ПреобразоватьДеревоДанных(ДанныеПоГруппе);
		
		ДанныеДляФормирования.Данные.Добавить(ДанныеПоГруппе); 
	
	КонецЦикла;
	
	Возврат ДанныеДляФормирования;
	
КонецФункции 

&НаСервере
Процедура ПреобразоватьДеревоДанных(ДеревоДанных)
	
	ДеревоДанных.Колонки.Добавить("ДокументыСправочники", Новый ОписаниеТипов("Массив"));
	ДеревоДанных.Колонки.Добавить("Исполнители",          Новый ОписаниеТипов("Массив"));
	ДеревоДанных.Колонки.Добавить("ТекстHTML",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ДеревоДанных.Колонки.Добавить("ШапкаТаблицыВыведена", Новый ОписаниеТипов("Булево"));
	ДеревоДанных.Колонки.Добавить("ЭлементТаблицаHTML",   Новый ОписаниеТипов("ЭлементТаблицаHTML"));
	
	Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
		
		СтрокиКУдалению = Новый Массив;
		ПреобразоватьСтрокуДерева(СтрокаДерева, СтрокиКУдалению);
		
	КонецЦикла;
	
	ИмяПоляКИзменению = ДемонстрационныеСценарии.ИмяМультиязычногоРеквизита("Наименование");
	ДеревоДанных.Колонки[ИмяПоляКИзменению].Имя = "Наименование";
	
	ДеревоДанных.Колонки.Удалить("ПрофилиГруппДоступа"); 
	ДеревоДанных.Колонки.Удалить("ОбъектыКонфигурации");
	ДеревоДанных.Колонки.Удалить("ПрисоединенныйФайл"); 
	
	Для Каждого СтрокаДерева Из СтрокиКУдалению Цикл
		
		РодительскаяСтрока = СтрокаДерева.Родитель;
		Если РодительскаяСтрока <> Неопределено Тогда
			
			РодительскаяСтрока.Строки.Удалить(СтрокаДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьСтрокуДерева(СтрокаДерева, СтрокиКУдалению)
	
	РодительскаяСтрока = СтрокаДерева.Родитель;
	Если РодительскаяСтрока <> Неопределено 
		И РодительскаяСтрока.Ссылка = СтрокаДерева.Ссылка Тогда 
		
		Для Каждого СтрокаТаблицы Из СтрокаДерева.ОбъектыКонфигурации Цикл
			
			РодительскаяСтрока.ДокументыСправочники.Добавить(СтрокаТаблицы.ОбъектКонфигурации);
			
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы Из СтрокаДерева.ПрофилиГруппДоступа Цикл
			
			РодительскаяСтрока.Исполнители.Добавить(СтрокаТаблицы.Профиль);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаДерева.ПрисоединенныйФайл) Тогда 
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(СтрокаДерева.ПрисоединенныйФайл);
	
			Если ЭтоАдресВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла) Тогда
				
				ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
				ТекстHTML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеФайла, "UTF-8");
				
			Иначе
				
				ТекстHTML = "";
				
			КонецЕсли;
			
		Иначе
			
			ТекстHTML = "";
			
		КонецЕсли;
		
		ДемонстрационныеСценарииКлиентСервер.ДобавитьТегиТелаЕслиНеобходимо(ТекстHTML);
		
		УдалитьЛишниеПереводыСтрок(ТекстHTML);
		
		РодительскаяСтрока.ТекстHTML = ТекстHTML;
		
		СтрокиКУдалению.Добавить(СтрокаДерева);
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ПреобразоватьСтрокуДерева(ПодчиненнаяСтрока, СтрокиКУдалению);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеПереводыСтрок(ТекстДляОбработки)

	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, "<o:p>&nbsp;</o:p>", "");
	ТекстДляОбработки = СтрЗаменить(ТекстДляОбработки, "<p><br></p>", "");

КонецПроцедуры

&НаСервере
Функция ТекстHTMLИзОбъектаДокументHTML(ДокументHTML)
	
	Попытка
		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьHTML = Новый ЗаписьHTML;
		ЗаписьHTML.УстановитьСтроку();
		ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
		Возврат ЗаписьHTML.Закрыть();
	Исключение
		Возврат "";
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ОбъектДокументHTMLИзТекстаHTML(ТекстHTML, Кодировка = Неопределено)
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = СтрНайти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = СтрНайти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = Лев(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + Прав(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
		
	Иначе
		
		Попытка
		
			ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
		
		Исключение
			
			ЧтениеHTML.УстановитьСтроку(ТекстHTML);
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

#КонецОбласти

#КонецОбласти 
