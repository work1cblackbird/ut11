#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("Предмет") Тогда
		Объект.Основание = Параметры.Предмет;
	КонецЕсли;

	Элементы.Основание.Заголовок = ОбщегоНазначения.ПредметСтрокой(Объект.Основание);
	Элементы.ГруппаОснование.Видимость = ЗначениеЗаполнено(Объект.Основание);

	ТекущийСтатус = Объект.Статус;
	ТекущийАвтор = Объект.Автор;
	ТекущийИсполнитель = Объект.Автор;

	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор 	= Пользователи.ТекущийПользователь();
		Объект.Статус 	= СтатусЗарегистрирован();

		ПриЧтенииСозданииНаСервере();
	КонецЕсли;

	Взаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);

	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ПолучателиУведомлений);
		
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);

	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПолучателиУведомлений, ЭтотОбъект);

	Если НоваяСтрока Тогда

		ТекущиеДанные = Элементы.ПолучателиУведомлений.ТекущиеДанные;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ПолучателиУведомлений.ТекущиеДанные;
	КэшСтроки = РаботаСТабличнымиЧастямиКлиентСервер.КэшСтроки(Элементы.ПолучателиУведомлений, ЭтотОбъект);

	Если (КэшСтроки.Пользователь <> ТекущиеДанные.Пользователь Или НоваяСтрока) Тогда
		НовыеПолучателиУведомлений.Добавить(ТекущиеДанные.Пользователь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ЗакрытиеДублейИнцидента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	ОтправитьОповещение(ПараметрыЗаписи.Свойство("ДубльИзменен"));

	ТекущийСтатус = Объект.Статус;
	ТекущийАвтор = Объект.Автор;
	ТекущийИсполнитель = Объект.Автор;

	НовыеПолучателиУведомлений.Очистить();
	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Подсказка, Дубли");

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи) 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Дубль") <> ТекущийОбъект.Дубль Тогда
		ПараметрыЗаписи.Вставить("ДубльИзменен", Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОснованиеНажатие(Элемент)

	ПоказатьЗначение( , Объект.Основание);

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьИнцидент(Команда)

	Объект.Статус = СтатусЗакрыт();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");

КонецПроцедуры

&НаКлиенте
Процедура РешенИнцидент(Команда)

	Объект.Статус = СтатусРешен();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");

КонецПроцедуры

&НаКлиенте
Процедура ВернутьОтветственному(Команда)

	Объект.Статус = СтатусЗарегистрирован();

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");

КонецПроцедуры

&НаСервере
Процедура ОтправитьОповещение(ДубльИзменен)

	Если Объект.Статус = СтатусЗарегистрирован() Тогда
		Если ЗначениеЗаполнено(Объект.Дубль) И ДубльИзменен Тогда
			ГенерацияОповещения("ПолучателиУведомлений", "ПомеченКакДубль");
			ГенерацияОповещения("Автору", "ПомеченКакДубль");
		ИначеЕсли ТекущийСтатус = СтатусРешен() Тогда
			ГенерацияОповещения("ПолучателиУведомлений", "ВернутьИсполнителю");
			ГенерацияОповещения("Исполнителю", "ВернутьИсполнителю");
		Иначе
			ГенерацияОповещения("ПолучателиУведомлений", "Зарегистрирован");
			ГенерацияОповещения("Исполнителю", "Зарегистрирован");
		КонецЕсли;
	ИначеЕсли Объект.Статус = СтатусРешен() Тогда
		ГенерацияОповещения("ПолучателиУведомлений", "Решен");
		ГенерацияОповещения("Автору", "Решен");
	ИначеЕсли Объект.Статус = СтатусЗакрыт() Тогда
		ГенерацияОповещения("ПолучателиУведомлений", "Закрыт");
		ГенерацияОповещения("Исполнителю", "Закрыт");
	ИначеЕсли Объект.Статус = СтатусНеактуален() Тогда
		ГенерацияОповещения("ПолучателиУведомлений", "Неактуален");
		ГенерацияОповещения("Исполнителю", "Неактуален");
	КонецЕсли;

	ЕстьДубли = ДублиУИнцидента();
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстСообщения(КомуНаправлено, Статус)

	ТекстСообщения = "";

	Если КомуНаправлено = "ПолучателиУведомлений" Тогда
		Если Статус = "Зарегистрирован" Тогда
			ТекстСообщения = НСтр("ru = 'Зарегистрирован инцидент %1'");
		ИначеЕсли Статус = "Решен" Тогда
			ТекстСообщения = НСтр("ru = 'Решен инцидент %1'");
		ИначеЕсли Статус = "Закрыт" Тогда
			ТекстСообщения = НСтр("ru = 'Закрыт инцидент %1'");
		ИначеЕсли Статус = "ВернутьИсполнителю" Тогда
			ТекстСообщения = НСтр("ru = 'Не решен и повторно направлен исполнителю инцидент %1'");
		ИначеЕсли Статус = "Неактуален" Тогда
			ТекстСообщения = НСтр("ru = 'Отозван в связи с потерей актуальности инцидент %1'");
		ИначеЕсли Статус = "ПомеченКакДубль" Тогда
			ТекстСообщения = НСтр("ru = 'Инцидент %1 указан как дубль инцидента %2'");
		КонецЕсли;
	ИначеЕсли КомуНаправлено = "Исполнителю" Тогда
		Если Статус = "Зарегистрирован" Тогда
			ТекстСообщения = НСтр("ru = 'Зарегистрирован и направлен Вам на решение инцидент %1'");
		ИначеЕсли Статус = "Закрыт" Тогда
			ТекстСообщения = НСтр("ru = 'Закрыт инцидент %1'");
		ИначеЕсли Статус = "ВернутьИсполнителю" Тогда
			ТекстСообщения = НСтр("ru = 'Не подтвержден и повторно направлен Вам на решение инцидент %1'");
		ИначеЕсли Статус = "Неактуален" Тогда
			ТекстСообщения = НСтр("ru = 'Отозван в связи с потерей актуальности инцидент %1'");
		Иначе
			ТекстСообщения = "";
		КонецЕсли;
	ИначеЕсли КомуНаправлено = "Автору" Тогда
		Если Статус = "Решен" Тогда
			ТекстСообщения = НСтр("ru = 'Решен и направлен Вам для подтверждения инцидент %1'");
		ИначеЕсли Статус = "ПомеченКакДубль" Тогда
			ТекстСообщения = НСтр("ru = 'Инцидент %1 указан как дубль инцидента %2'");
		Иначе
			ТекстСообщения = "";
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстСообщения;

КонецФункции

&НаСервере
Процедура ГенерацияОповещения(КомуНаправлено, Статус)

#Область Проверка

	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Обсуждения") Тогда
		Возврат;
	КонецЕсли;

	МодульОбсуждения = ОбщегоНазначения.ОбщийМодуль("Обсуждения");

	СтатусИзменен 		= Объект.Статус <> ТекущийСтатус;
	АвторИзменен 		= Объект.Автор <> ТекущийАвтор;
	ИсполнительИзменен 	= Объект.Исполнитель <> ТекущийИсполнитель;
	ДубльИзменен		= Статус = "ПомеченКакДубль";
	
	Получатели = Новый Массив;
	Если КомуНаправлено = "ПолучателиУведомлений" Тогда
		Если СтатусИзменен Или ДубльИзменен Тогда
			Получатели = Объект.ПолучателиУведомлений.Выгрузить( , "Пользователь").ВыгрузитьКолонку("Пользователь");
		Иначе
			Получатели = НовыеПолучателиУведомлений.ВыгрузитьЗначения();
		КонецЕсли;
	ИначеЕсли КомуНаправлено = "Автору" Тогда
		Если ЗначениеЗаполнено(Объект.Автор) И (СтатусИзменен Или АвторИзменен Или ДубльИзменен) Тогда
			Получатели.Добавить(Объект.Автор);
		КонецЕсли;
	ИначеЕсли КомуНаправлено = "Исполнителю" Тогда
		Если ЗначениеЗаполнено(Объект.Исполнитель) И (СтатусИзменен Или ИсполнительИзменен Или ДубльИзменен) Тогда
			Получатели.Добавить(Объект.Исполнитель);
		КонецЕсли;
	КонецЕсли;

	Если Получатели.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область ГенерацияОповещения

	ТекстСообщения = СформироватьТекстСообщения(КомуНаправлено, Статус);

	Если ПустаяСтрока(ТекстСообщения) Тогда
		Возврат;
	КонецЕсли;

	Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	ТекстСообщения, ПолучитьНавигационнуюСсылку(Объект.Ссылка), ПолучитьНавигационнуюСсылку(Объект.Дубль));

	Сообщение = МодульОбсуждения.ОписаниеСообщения(Текст);

	Попытка
		МодульОбсуждения.ОтправитьСообщение(
		Пользователи.ТекущийПользователь(), Получатели, Сообщение, Объект.Ссылка);
	Исключение

		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();

		ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Инциденты.Оповещение о регистрации инцидента'", КодОсновногоЯзыка),
			УровеньЖурналаРегистрации.Ошибка, , , ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

	КонецПопытки;

#КонецОбласти

КонецПроцедуры

&НаКлиенте
Процедура КритичностьПриИзменении(Элемент)

	ЗаполнитьПолучателиУведомлений();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыФормыОсновная

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда

		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);

	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДублиИнцидентовНажатие(Элемент)

	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	ПроверяемыйИнцидент = Объект.Ссылка;
	Если ЗначениеЗаполнено(Объект.Дубль) Тогда
		ПроверяемыйИнцидент = Объект.Дубль;
	КонецЕсли;

	ЗначенияОтбора = Новый Структура("ПроверяемыйИнцидент", ПроверяемыйИнцидент);
	ПараметрыФормы = Новый Структура("Отбор, СформироватьПриОткрытии", ЗначенияОтбора, Истина);
	ОткрытьФорму("Отчет.ДублиИнцидента.Форма", ПараметрыФормы);

КонецПроцедуры

&НаКлиенте
Процедура ВидИнцидентаПриИзменении(Элемент)

	ВидИнцидентаПриИзмененииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ВидИнцидентаПриИзмененииНаСервере()

	ОбновитьЭлементыДополнительныхРеквизитов();
	ЗаполнитьПолучателиУведомлений();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыРезультатРассмотрения

&НаКлиенте
Процедура ДубльПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено(Объект.Дубль) Тогда
		Возврат;
	КонецЕсли;

	СтатусЗакрыт = СтатусДубля(Объект.Дубль);
	Если СтатусЗакрыт Тогда
		ТекстВопроса = НСтр("ru = 'Выбранный инцидент ""%1"" закрыт.
							|Для текущего инцидента будет установлен статус закрыт, продолжить?'");

		ТекстВопроса = СтрШаблон(ТекстВопроса, Объект.Дубль);

		ПоказатьВопрос(Новый ОписаниеОповещения("ДубльПриИзмененииЗавершение", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДубльПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Статус = СтатусЗакрыт();
		НастроитьЗависимыеЭлементыФормы(ЭтаФорма, "Статус");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено,
	СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания,
		СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания,
		СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);

КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область НастройкаФормы

&НаСервере
Процедура НастроитьЭлементыФормы()

	НастроитьЗависимыеЭлементыФормы(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при изменении реквизитов от которых зависят свойства других реквизитов, например, видимость.
//
&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Результат = Неопределено;

	Если СтруктураРеквизитов.Свойство("Статус", Результат) Или Инициализация Тогда

		Если Не Объект.Ссылка.Пустая() Тогда
			Элементы.РешенИнцидент.Видимость = Объект.Статус = СтатусЗарегистрирован();
			Элементы.ЗакрытьИнцидент.Видимость = Объект.Статус = СтатусРешен();
			Элементы.ВернутьОтветственному.Видимость = Объект.Статус = СтатусРешен();
		Иначе
			Элементы.РешенИнцидент.Видимость = Ложь;
			Элементы.ЗакрытьИнцидент.Видимость = Ложь;
			Элементы.ВернутьОтветственному.Видимость = Ложь;
		КонецЕсли;

	КонецЕсли;

	Если СтруктураРеквизитов.Свойство("Подсказка", Результат) Или Инициализация Тогда

		Если Объект.Статус = СтатусЗарегистрирован() Тогда
			Если Объект.Ссылка.Пустая() Тогда
				Элементы.Пояснение.Заголовок = НСтр("ru = 'Заполните информацию по инциденту. 
													|Инцидент будет зарегистрирован на исполнителя после записи.'");
			ИначеЕсли ЗначениеЗаполнено(Объект.Дубль) Тогда
				Элементы.Пояснение.Заголовок = НСтр("ru = 'Помечен как дубль, никаких действий над инцидентом выполнять не нужно. 
													|Будет автоматически закрыт при закрытии основного инцидента.'");
			Иначе
				Элементы.Пояснение.Заголовок = НСтр(
					"ru = 'Инцидент зарегистрирован, исполнителю необходимо устранить инцидент и установить статус ""решен"".'");
			КонецЕсли;
		ИначеЕсли Объект.Статус = СтатусРешен() Тогда
			Элементы.Пояснение.Заголовок = НСтр("ru = 'Инцидент решен исполнителем, автору необходимо проверить исполнение инцидента и подтвердить установив статус ""закрыт"" 
												|или повторно направить исполнителю нажав ""вернуть исполнителю"", если инцидент не решен.'");
		ИначеЕсли Объект.Статус = СтатусЗакрыт() Тогда
			Элементы.Пояснение.Заголовок = НСтр("ru = 'Инцидент закрыт, не требует никаких действий.'");
		ИначеЕсли Объект.Статус = СтатусНеактуален() Тогда
			Элементы.Пояснение.Заголовок = НСтр(
				"ru = 'Инцидент отозван в связи с потерей актуальности, не требует никаких действий.'");
		КонецЕсли;

	КонецЕсли;

	Если СтруктураРеквизитов.Свойство("Дубли", Результат) Или Инициализация Тогда

		Элементы.ДекорацияДублиИнцидентов.Видимость = Форма.ЕстьДубли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочие

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()

	ЕстьДубли = ДублиУИнцидента();

	НастроитьЭлементыФормы();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПолучателиУведомлений()

	Если Не ЗначениеЗаполнено(Объект.ВидИнцидента) Тогда
		Возврат;
	КонецЕсли;

	УдалитьСтрокиТЧПолучателиУведомлений();

	Запрос = Новый Запрос;

	СхемаЗапроса = Новый СхемаЗапроса;

	СхемаЗапроса.УстановитьТекстЗапроса("
										|	ВЫБРАТЬ
										|	ВидыИнцидентовПолучателиУведомлений.Пользователь КАК Пользователь,
										|	ВидыИнцидентовПолучателиУведомлений.Роль КАК Роль,
										|	ИСТИНА КАК ЗаполненоИзНастроек
										|ИЗ
										|	Справочник.ВидыИнцидентов.ПолучателиУведомлений КАК ВидыИнцидентовПолучателиУведомлений
										|ГДЕ
										|	ВидыИнцидентовПолучателиУведомлений.Ссылка = &Ссылка
										|	И ВидыИнцидентовПолучателиУведомлений.Ссылка.ПометкаУдаления = Ложь");

	Запрос.УстановитьПараметр("Ссылка", Объект.ВидИнцидента);
	Если ЗначениеЗаполнено(Объект.Критичность) Тогда
		Запрос.УстановитьПараметр("Критичность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Критичность,
			"РеквизитДопУпорядочивания"));
		ОператорВыбора = СхемаЗапроса.ПакетЗапросов[0].Операторы[0];
		ОператорВыбора.Отбор.Добавить(
			"ВидыИнцидентовПолучателиУведомлений.Критичность.РеквизитДопУпорядочивания >= &Критичность");
		ЗапросВыбора = СхемаЗапроса.ПакетЗапросов[0];
		ОператорЗапроса = ЗапросВыбора.Операторы.Добавить();
		ОператорЗапроса.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
		ОператорЗапроса.Источники.Добавить("Справочник.ВидыИнцидентов.ПолучателиУведомлений", "ПолучателиУведомлений");
		ОператорЗапроса.ВыбираемыеПоля.Добавить("ПолучателиУведомлений.Пользователь");
		ОператорЗапроса.ВыбираемыеПоля.Добавить("ПолучателиУведомлений.Роль");
		ОператорЗапроса.ВыбираемыеПоля.Добавить("ИСТИНА");
		ОператорЗапроса.Отбор.Добавить("ПолучателиУведомлений.Ссылка = &Ссылка");
		ОператорЗапроса.Отбор.Добавить(
			"ЕСТЬNULL(ПолучателиУведомлений.Критичность, ЗНАЧЕНИЕ(Справочник.КритичностьИнцидентов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.КритичностьИнцидентов.ПустаяСсылка)");
		ОператорЗапроса.Отбор.Добавить("ПолучателиУведомлений.Ссылка.ПометкаУдаления = Ложь");
		ЗапросВыбора.Индекс.Добавить(ЗапросВыбора.Колонки[1]);
	КонецЕсли;

	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ПолучателиУведомлений.НайтиСтроки(Новый Структура("Пользователь",
			Выборка.Пользователь));
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НовыеПолучателиУведомлений.Добавить(Выборка.Пользователь);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗакрытиеДублейИнцидента()
	
	Если Объект.Ссылка.Пустая() Или Объект.Статус <> СтатусЗакрыт() Тогда
		Возврат;
	КонецЕсли;

	Если Не ЕстьДублиИнцидента(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	ПройденныеИнциденты = Новый Массив;
	ДублиИнцидента = Справочники.Инциденты.ДублиИнцидента(Объект.Ссылка, ПройденныеИнциденты);
	ДублиИнцидента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ДублиИнцидента);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ДублиИнцидента, Объект.Ссылка);
	ДублиИнцидента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДублиИнцидента, "Статус");
	
	Для Каждого Инцидент Из ДублиИнцидента Цикл
		
		Если Инцидент.Значение = СтатусЗакрыт() Тогда
			Продолжить;
		КонецЕсли;

		ИнцидентОбъект = Инцидент.Ключ.ПолучитьОбъект();
		
		Попытка
			ИнцидентОбъект.Заблокировать();
		Исключение
			ТекстИсключенияЗаписи = СтрШаблон(
							НСтр("ru = 'Не удалось установить статус закрыт для дубля инцидента ""%1"".
								 |Возможно, данные редактируется другим пользователем'"), ИнцидентОбъект.Ссылка);

			ВызватьИсключение ТекстИсключенияЗаписи;
		КонецПопытки;
		ИнцидентОбъект.Статус = Перечисления.СтатусыИнцидентов.Закрыт;
		ИнцидентОбъект.Записать();

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДублиИнцидента(Ссылка)

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Справочник.Инциденты КАК Инциденты
	|ГДЕ
	|	Инциденты.Дубль = &Ссылка
	|	И Инциденты.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УдалитьСтрокиТЧПолучателиУведомлений()

	Для Каждого СтрокаКУдалению Из Объект.ПолучателиУведомлений.НайтиСтроки(Новый Структура("ЗаполненоИзНастроек",
		Истина)) Цикл

		Объект.ПолучателиУведомлений.Удалить(СтрокаКУдалению);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СтатусДубля(Ссылка)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Статус") = СтатусЗакрыт();

КонецФункции

&НаСервере
Функция ДублиУИнцидента()

	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;

	Запрос = Новый Запрос;

	Запрос.Текст =
	"ВЫБРАТЬ
	|	Инциденты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Инциденты КАК Инциденты
	|ГДЕ
	|	Инциденты.Дубль = &Ссылка
	|	И Инциденты.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Инциденты.Ссылка
	|ИЗ
	|	Справочник.Инциденты КАК Инциденты
	|ГДЕ
	|	Инциденты.Ссылка = &Ссылка
	|	И ЕСТЬNULL(Инциденты.Дубль,
	|		ЗНАЧЕНИЕ(Справочник.Инциденты.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Инциденты.ПустаяСсылка)
	|	И Инциденты.ПометкаУдаления = ЛОЖЬ";

	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗарегистрирован()

	Возврат ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Зарегистрирован");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусРешен()

	Возврат ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Решен");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусЗакрыт()

	Возврат ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Закрыт");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусНеактуален()

	Возврат ПредопределенноеЗначение("Перечисление.СтатусыИнцидентов.Неактуален");

КонецФункции

#КонецОбласти