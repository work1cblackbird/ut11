#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьНадписьПредприятияБезНастроек();
	ВосстановитьНастройкиФормы();
	ЗаполнитьДанныеФормы();
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьИндивидуальныеРегламентныеЗаданияПриИзменении(Элемент)
	
	ИспользоватьИндивидуальныеРегламентныеЗаданияПриИзмененииНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеАвтоматическогоОбменаСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеАвтоматическогоОбмена);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеСинхронизацииКлассификаторовСтрокойНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеСинхронизацииКлассификаторов);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	
	ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеСинхронизацииКлассификаторовПриИзменении(Элемент)
	
	Использование = ИспользованиеСинхронизацииКлассификаторов;
	ИспользованиеСинхронизацииКлассификаторов = Не Использование;
	
	УстановитьИспользованиеИндивидуальныхНастроек(Новый Массив, Истина, Использование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкиАвтоматическогоОбменаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВключитьИспользованиеИндивидуальныхНастроек"
		И Не ИспользоватьИндивидуальныеРегламентныеЗадания Тогда
		ИспользоватьИндивидуальныеРегламентныеЗадания = Истина;
		ИспользоватьИндивидуальныеРегламентныеЗаданияПриИзмененииНаФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяПоследнегоВыполненияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьДействие(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыполнитьДействие(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредприятияБезНастроекНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СоздатьНастройкуРегламентногоЗадания" Тогда
		СтандартнаяОбработка = Ложь;
		Если ПредприятияБезНастроек.Количество() = 1 Тогда
			Результат = Новый Структура;
			Результат.Вставить("ХозяйствующийСубъект", ПредприятияБезНастроек[0].Значение.ХозяйствующийСубъект);
			Результат.Вставить("Предприятие",          ПредприятияБезНастроек[0].Значение.Предприятие);
			ПослеВыбораПредприятияБезНастроек(Результат, Неопределено);
		ИначеЕсли ПредприятияБезНастроек.Количество() > 1 Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Предприятия", ПредприятияБезНастроек.ВыгрузитьЗначения());
			
			ОткрытьФорму("Справочник.НастройкиРегламентныхЗаданийВЕТИС.Форма.ФормаВыбораПредприятия",
				ПараметрыОткрытия,
				ЭтотОбъект,,,,
				Новый ОписаниеОповещения("ПослеВыбораПредприятияБезНастроек", ЭтотОбъект),
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОтборПоОрганизацииВЕТИС

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСПриИзменении(Элемент)
	
	Элементы.ОткрытьЛичныйКабинетВЕТИС.Видимость = ЗначениеЗаполнено(ОрганизацииВЕТИС);
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ОрганизацииВЕТИС, Ложь, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы());
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВЕТИСКлиент.ОткрытьФормуВыбораОрганизацийВЕТИС(
		ЭтотОбъект, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),
		Новый ОписаниеОповещения("ПослеВыбораОрганизацииВЕТИС", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, Неопределено, Ложь, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы());
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацииВЕТИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ВыбранноеЗначение, Ложь, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы());
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСПриИзменении(Элемент)
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ОрганизацияВЕТИС, Ложь, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы());
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВЕТИСКлиент.ОткрытьФормуВыбораОрганизацийВЕТИС(
		ЭтотОбъект,
		"Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы(),
		Новый ОписаниеОповещения("ПослеВыбораОрганизацииВЕТИС", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, Неопределено, Ложь, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы());
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияВЕТИСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияВЕТИСКлиент.ОбработатьВыборОрганизацийВЕТИС(
		ЭтотОбъект, ВыбранноеЗначение, Ложь, "Отбор",
		ИнтеграцияВЕТИСКлиент.ОтборОрганизацияВЕТИСПрефиксы());
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНастроек

&НаКлиенте
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТаблицаНастроекАктивизацияСтроки();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	
	Если Элементы.ТаблицаНастроек.ТекущийЭлемент = Элементы.ТаблицаНастроекНастройкаОбмена Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НастройкаОбмена", ТекущиеДанные.НастройкаОбмена);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеРедактированияНастройкиОбмена",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.НастройкаОбмена);
		
		ОткрытьФорму("Справочник.НастройкиРегламентныхЗаданийВЕТИС.Форма.ФормаЭлемента",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Элементы.ТаблицаНастроек.ТекущийЭлемент = Элементы.ТаблицаНастроекРасписаниеСтрокой Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(ТекущиеДанные.Расписание);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Элемент",         Элемент);
		ДополнительныеПараметры.Вставить("ВыбраннаяСтрока", ВыбраннаяСтрока);
		
		ДиалогРасписания.Показать(Новый ОписаниеОповещения("НастроитьРасписаниеЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ДополнительныеПараметры = Неопределено;
	Иначе
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НастройкаОбмена", ТекущиеДанные.НастройкаОбмена);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеРедактированияНастройкиОбмена",
		ЭтотОбъект,
		ДополнительныеПараметры);
	
	ОткрытьФорму("Справочник.НастройкиРегламентныхЗаданийВЕТИС.Форма.ФормаЭлемента",,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Снять с ""%1"" пометку на удаление?'"),
				ТекущиеДанные.НастройкаОбмена);
		Иначе
			ТекстВопроса = СтрШаблон(НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				ТекущиеДанные.НастройкаОбмена);
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НастройкаОбмена", ТекущиеДанные.НастройкаОбмена);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ОтветНаВопросПриИзмененииПометкиУдаления",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Использование = ТекущиеДанные.Использование;
	ТекущиеДанные.Использование = Не Использование;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные);
	
	УстановитьИспользованиеИндивидуальныхНастроек(МассивСтрок, Ложь, Использование);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьДанныеФормы(Команда)
	
	ВыполнитьОбновлениеДанныхФормы(Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ВключитьИспользованиеРегламентныхЗаданий(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаНастроек.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		ВыделенныеСтроки = ТаблицаНастроек;
	КонецЕсли;
	
	УстановитьИспользованиеИндивидуальныхНастроек(ВыделенныеСтроки, Ложь, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьИспользованиеРегламентныхЗаданий(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаНастроек.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		ВыделенныеСтроки = ТаблицаНастроек;
	КонецЕсли;
	
	УстановитьИспользованиеИндивидуальныхНастроек(ВыделенныеСтроки, Ложь, Ложь);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНастроекИспользование.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНастроекРасписаниеСтрокой.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНастроекПометкаУдаления.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНастроекСостояние.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНастроекСостояниеОшибка.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьДоступность(Форма)
	
	РежимАвтоматическогоОбмена = Не Форма.ИспользоватьИндивидуальныеРегламентныеЗадания;
	
	Форма.Элементы.ИспользованиеСинхронизацииКлассификаторов.ТолькоПросмотр     = РежимАвтоматическогоОбмена;
	Форма.Элементы.РасписаниеСинхронизацииКлассификаторовСтрокой.Доступность    = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.РежимОбменаАвтоматический.Видимость                          = РежимАвтоматическогоОбмена;
	Форма.Элементы.РасписаниеАвтоматическогоОбменаСтрокой.Видимость             = РежимАвтоматическогоОбмена;
	Форма.Элементы.ОшибкиАвтоматическогоОбмена.Видимость                        = РежимАвтоматическогоОбмена;
	Форма.Элементы.ОтборОрганизацииВЕТИС.Видимость                              = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.ОтборОрганизацияВЕТИС.Видимость                              = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.ВремяПоследнегоВыполнения.Доступность                        = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.Действия.Доступность                                         = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.ТаблицаНастроек.ТолькоПросмотр                               = РежимАвтоматическогоОбмена;
	Форма.Элементы.ТаблицаНастроекРасписаниеСтрокой.Доступность                 = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.ТаблицаНастроекВключитьИспользованиеРегламентныхЗаданий.Доступность  = Не РежимАвтоматическогоОбмена;
	Форма.Элементы.ТаблицаНастроекОтключитьИспользованиеРегламентныхЗаданий.Доступность = Не РежимАвтоматическогоОбмена;
	
КонецПроцедуры

#Область ДействияСНастройкамиФормы

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРегламентныхЗаданийВЕТИС",
		"ОрганизацияВЕТИС", ОрганизацияВЕТИС);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРегламентныхЗаданийВЕТИС",
		"ОрганизацииВЕТИСПредставление", ОрганизацииВЕТИСПредставление);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиРегламентныхЗаданийВЕТИС",
		"ОрганизацииВЕТИС",
		ИнтеграцияВЕТИСКлиентСервер.ДеревоОтбораОрганизацииВЕТИСВМассивСтруктур(
			ОрганизацииВЕТИС,,Ложь,
			Элементы.СтраницыОтборОрганизацияВЕТИС.ТекущаяСтраница = Элементы.СтраницаОтборОрганизацияВЕТИС));
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	Если Параметры.Свойство("ОрганизацииВЕТИС") Тогда
		ОрганизацииВЕТИССохраненные = ИнтеграцияВЕТИСКлиентСервер.ДеревоОтбораОрганизацииВЕТИСВМассивСтруктур(
			Параметры.ОрганизацииВЕТИС,,Ложь);
	Иначе
		ОрганизацияВЕТИС              = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиРегламентныхЗаданийВЕТИС", "ОрганизацияВЕТИС", ОрганизацияВЕТИС);
		ОрганизацииВЕТИСПредставление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиРегламентныхЗаданийВЕТИС", "ОрганизацииВЕТИСПредставление", ОрганизацииВЕТИСПредставление);
		ОрганизацииВЕТИССохраненные   = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиРегламентныхЗаданийВЕТИС", "ОрганизацииВЕТИС", Неопределено);
	КонецЕсли;
	
	ИнтеграцияВЕТИСКлиентСервер.НастроитьОтборПоОрганизацииВЕТИС(ЭтотОбъект, ОрганизацииВЕТИССохраненные, "Отбор", "Отбор");
	ИнтеграцияВЕТИС.ОтборПоОрганизацииПриСозданииНаСервере(ЭтотОбъект, "Отбор");
	
КонецПроцедуры

#КонецОбласти

#Область ОтборПоОрганизацииВЕТИС

&НаКлиенте
Процедура ПослеВыбораОрганизацииВЕТИС(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбновлениеДанныхФормы(Ложь);
	СохранитьНастройкиФормы();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВыполнитьОбновлениеДанныхФормы(ЗаполнятьОбщиеДанные)
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяНастройкаОбмена = Неопределено;
	Иначе
		ТекущаяНастройкаОбмена = ТекущиеДанные.НастройкаОбмена;
	КонецЕсли;
	
	ЗаполнитьДанныеФормы(ЗаполнятьОбщиеДанные);
	
	Если ТекущаяНастройкаОбмена <> Неопределено Тогда
		УстановитьТекущуюСтрокуНастроек(ТекущаяНастройкаОбмена);
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормы(ЗаполнятьОбщиеДанные = Истина)
	
	ДанныеРегламентныхЗаданий = ОбменДаннымиВЕТИС.ДанныеРегламентныхЗаданий();
	
	ДопустимоеВремяВыполнения = ОбменДаннымиВЕТИС.ДопустимоеВремяВыполненияРегламентногоЗаданияПоНастройкеОбмена();
	МаксимальноеКоличествоПредприятий = ОбменДаннымиВЕТИС.МаксимальноеКоличествоПредприятийДляНастройкиОбмена();
	
	Запрос = ОбменДаннымиВЕТИС.ЗапросНастроекРегламентыхЗаданий(ОрганизацииВЕТИС);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВГраница = РезультатЗапроса.ВГраница();
	
	Если ЗаполнятьОбщиеДанные Тогда
		
		Выборка = РезультатЗапроса[ВГраница].Выбрать();
		Выборка.Следующий();
		ИспользоватьИндивидуальныеРегламентныеЗадания = Не Выборка.АвтоматическийОбмен;
		
		Если Выборка.КоличествоПредприятий > МаксимальноеКоличествоПредприятий Тогда
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрШаблон(
					НСтр("ru = 'В одном задании происходит обмен по большому числу предприятий - %1.'"),
					Выборка.КоличествоПредприятий),,
					ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Рекомендуется'"),,
				ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'включить'"),,,,
				"ВключитьИспользованиеИндивидуальныхНастроек"));
			МассивСтрок.Добавить(" ");
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'использование индивидуальных регламентных заданий.'"),,
				ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС));
			ОшибкиАвтоматическогоОбмена = Новый ФорматированнаяСтрока(МассивСтрок);
		Иначе
			ОшибкиАвтоматическогоОбмена = Новый ФорматированнаяСтрока("");
		КонецЕсли;
		
		РегламентноеЗаданиеАвтоматическогоОбмена = ПолучитьРегламентноеЗаданиеАвтоматическогоОбмена(ДанныеРегламентныхЗаданий);
		ДанныеРегламентногоЗадания = ДанныеРегламентныхЗаданий[РегламентноеЗаданиеАвтоматическогоОбмена];
		РасписаниеАвтоматическогоОбмена = ДанныеРегламентногоЗадания.Расписание;
		РасписаниеАвтоматическогоОбменаСтрокой = Строка(РасписаниеАвтоматическогоОбмена);
		
		РегламентноеЗаданиеСинхронизацииКлассификаторов = ПолучитьРегламентноеЗаданиеСинхронизацииКлассификаторов(ДанныеРегламентныхЗаданий);
		Если Не ЗначениеЗаполнено(РегламентноеЗаданиеСинхронизацииКлассификаторов) Тогда
			ИспользованиеСинхронизацииКлассификаторов = Ложь;
			РасписаниеСинхронизацииКлассификаторов    = Новый РасписаниеРегламентногоЗадания;
		Иначе
			ДанныеРегламентногоЗадания = ДанныеРегламентныхЗаданий[РегламентноеЗаданиеСинхронизацииКлассификаторов];
			ИспользованиеСинхронизацииКлассификаторов = ДанныеРегламентногоЗадания.Использование;
			РасписаниеСинхронизацииКлассификаторов    = ДанныеРегламентногоЗадания.Расписание;
		КонецЕсли;		
		РасписаниеСинхронизацииКлассификаторовСтрокой = Строка(РасписаниеСинхронизацииКлассификаторов);
		
	КонецЕсли;
	
	ТаблицаНастроек.Очистить();
	
	Выборка = РезультатЗапроса[ВГраница - 1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = ТаблицаНастроек.Добавить();
		СтрокаТаблицы.НастройкаОбмена                = Выборка.Настройка;
		СтрокаТаблицы.ХозяйствующийСубъект           = Выборка.ХозяйствующийСубъект;
		СтрокаТаблицы.ПометкаУдаления                = Выборка.ПометкаУдаления;
		СтрокаТаблицы.ДатаНачалаПоследнегоВыполнения = Выборка.ДатаНачалаВыполнения;
		СтрокаТаблицы.ВремяПоследнегоВыполнения      = Выборка.ВремяВыполнения;
		Если ЗначениеЗаполнено(Выборка.РегламентноеЗадание) Тогда
			ДанныеРегламентногоЗадания = ДанныеРегламентныхЗаданий[Выборка.РегламентноеЗадание];
		Иначе
			ДанныеРегламентногоЗадания = Неопределено;
		КонецЕсли;
		Если ДанныеРегламентногоЗадания = Неопределено Тогда
			СтрокаТаблицы.Расписание = Новый РасписаниеРегламентногоЗадания;
		Иначе
			СтрокаТаблицы.РегламентноеЗадание = Выборка.РегламентноеЗадание;
			СтрокаТаблицы.Использование       = ДанныеРегламентногоЗадания.Использование;
			СтрокаТаблицы.Расписание          = ДанныеРегламентногоЗадания.Расписание;
		КонецЕсли;
		СтрокаТаблицы.РасписаниеСтрокой = Строка(СтрокаТаблицы.Расписание);
		
		Если Выборка.ПометкаУдаления
			И Выборка.ПометкаУдаленияХС Тогда
			СтрокаТаблицы.Состояние = НСтр("ru = 'Хозяйствующий субъект и регламентное задание помечены на удаление'");
			СтрокаТаблицы.Действия.Добавить("СнятьПометкуУдаленияХСИНастройки");
		ИначеЕсли Выборка.ПометкаУдаленияХС Тогда
			СтрокаТаблицы.Состояние = НСтр("ru = 'Хозяйствующий субъект помечен на удаление'");
			СтрокаТаблицы.СостояниеОшибка = Истина;
			СтрокаТаблицы.Действия.Добавить("СнятьПометкуУдаленияХС");
			СтрокаТаблицы.Действия.Добавить("ПометитьНаУдалениеНастройку");
		ИначеЕсли Выборка.ПометкаУдаления Тогда
			СтрокаТаблицы.Состояние = НСтр("ru = 'Регламентное задание помечено на удаление'");
			СтрокаТаблицы.Действия.Добавить("СнятьПометкуУдаленияНастройкиИВключитьРегламентноеЗадание");
		ИначеЕсли Не СтрокаТаблицы.Использование Тогда
			СтрокаТаблицы.Состояние = НСтр("ru = 'Регламентное задание отключено'");
			СтрокаТаблицы.СостояниеОшибка = Истина;
			СтрокаТаблицы.Действия.Добавить("ВключитьРегламентноеЗадание");
		ИначеЕсли Выборка.КоличествоНеИспользуемыхПредприятий > 0 Тогда
			Если Выборка.КоличествоНеИспользуемыхПредприятий = 1 Тогда
				СтрокаТаблицы.Состояние = СтрШаблон(
					НСтр("ru = 'Содержит неиспользуемое предприятие ""%1""'"),
					Выборка.ПредприятиеНаименование);
			Иначе
				СтрокаТаблицы.Состояние = СтрШаблон( 
					НСтр("ru = 'Содержит неиспользуемые предприятия ""%1 ( + еще %2 )""'"),
					Выборка.ПредприятиеНаименование,
					Выборка.КоличествоНеИспользуемыхПредприятий - 1);
			КонецЕсли;
			СтрокаТаблицы.СостояниеОшибка = Истина;
			СтрокаТаблицы.Действия.Добавить("УдалитьНеиспользуемыеПредприятия");
		ИначеЕсли Выборка.КоличествоПредприятий > МаксимальноеКоличествоПредприятий Тогда
			СтрокаТаблицы.Состояние = СтрШаблон(
				НСтр("ru = 'В настройку включено слишком много предприятий - %1'"),
				Выборка.КоличествоПредприятий);
			СтрокаТаблицы.СостояниеОшибка = Истина;
			СтрокаТаблицы.Действия.Добавить("СкорректироватьНастройку");
		ИначеЕсли Выборка.ВремяВыполнения > ДопустимоеВремяВыполнения Тогда
			СтрокаТаблицы.Состояние = СтрШаблон(
				НСтр("ru = 'Последний обмен выполнялся длительное время - %1'"),
				ПредставлениеВремениВыполнения(Выборка.ВремяВыполнения));
		ИначеЕсли Выборка.КоличествоПересечений > 0 Тогда
			Если Выборка.КоличествоПересечений = 1 Тогда
				СтрокаТаблицы.Состояние = СтрШаблон(
					НСтр("ru = 'Выполнение задания пересекается по времени с ""%1""'"),
					Выборка.НастройкаПересеченияНаименование);
			Иначе
				СтрокаТаблицы.Состояние = СтрШаблон(
					НСтр("ru = 'Выполнение задания пересекается по времени с ""%1 ( + еще %2 )""'"),
					Выборка.НастройкаПересеченияНаименование,
					Выборка.КоличествоПересечений - 1);
			КонецЕсли;
			СтрокаТаблицы.Действия.Добавить("ОткрытьИсториюВыполненияПоХС");
		КонецЕсли;
		
	КонецЦикла;
	
	ПредприятияБезНастроек.Очистить();
	Выборка = РезультатЗапроса[ВГраница - 2].Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредприятиеБезНастроек = ПредприятияБезНастроек.Добавить();
		ПредприятиеБезНастроек.Значение = Новый Структура;
		ПредприятиеБезНастроек.Значение.Вставить("ХозяйствующийСубъект", Выборка.ХозяйствующийСубъект);
		ПредприятиеБезНастроек.Значение.Вставить("Предприятие",          Выборка.Предприятие);
	КонецЦикла;
	
	Элементы.ПредприятияБезНастроекНадпись.Видимость = ИспользоватьИндивидуальныеРегламентныеЗадания
		И ПредприятияБезНастроек.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРегламентноеЗаданиеАвтоматическогоОбмена(ДанныеРегламентныхЗаданий)
	
	РегламентноеЗадание = Неопределено;
	ЗаданиеБезКлюча     = Неопределено;
	Для Каждого ДанныеРегламентногоЗадания Из ДанныеРегламентныхЗаданий Цикл
		Если ДанныеРегламентногоЗадания.Значение.Предопределенное Тогда
			РегламентноеЗадание = ДанныеРегламентногоЗадания.Ключ;
			Прервать;
		ИначеЕсли ЗаданиеБезКлюча = Неопределено
			И Не ЗначениеЗаполнено(ДанныеРегламентногоЗадания.Значение.Ключ) Тогда
			ЗаданиеБезКлюча = ДанныеРегламентногоЗадания.Ключ;
		КонецЕсли;
	КонецЦикла;
	
	Если РегламентноеЗадание = Неопределено
		И ЗаданиеБезКлюча <> Неопределено Тогда
		РегламентноеЗадание = ЗаданиеБезКлюча;
	КонецЕсли;
	
	Если РегламентноеЗадание = Неопределено Тогда
		РегламентноеЗадание = СоздатьРегламентноеЗаданиеАвтоматическогоОбмена(ДанныеРегламентныхЗаданий);
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервере
Функция СоздатьРегламентноеЗаданиеАвтоматическогоОбмена(ДанныеРегламентныхЗаданий)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Не ИспользоватьИндивидуальныеРегламентныеЗадания);
	ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обмен с ВЕТИС (автоматический обмен)'"));
	ПараметрыЗадания.Вставить("Расписание",    Новый РасписаниеРегламентногоЗадания);
	
	Задание = СоздатьРегламентноеЗадание(ПараметрыЗадания);
	РегламентноеЗадание = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	ДанныеРегламентногоЗадания = Новый Структура(ОбменДаннымиВЕТИС.СвойстваРегламентногоЗадания());
	ЗаполнитьЗначенияСвойств(ДанныеРегламентногоЗадания, Задание);
	ДанныеРегламентныхЗаданий.Вставить(РегламентноеЗадание, ДанныеРегламентногоЗадания);
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервере
Функция ПолучитьРегламентноеЗаданиеСинхронизацииКлассификаторов(ДанныеРегламентныхЗаданий)
	
	Ключ = ОбменДаннымиВЕТИС.КлючРегламентногоЗаданияСинхронизацииКлассификаторов();
	
	РегламентноеЗадание = Неопределено;
	Для Каждого ДанныеРегламентногоЗадания Из ДанныеРегламентныхЗаданий Цикл
		Если ДанныеРегламентногоЗадания.Значение.Ключ = Ключ Тогда
			РегламентноеЗадание = ДанныеРегламентногоЗадания.Ключ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если РегламентноеЗадание = Неопределено
		И ИспользоватьИндивидуальныеРегламентныеЗадания Тогда
		РегламентноеЗадание = СоздатьРегламентноеЗаданиеСинхронизацииКлассификаторов(ДанныеРегламентныхЗаданий, Новый Структура);
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьРегламентноеЗаданиеСинхронизацииКлассификаторов(ДанныеРегламентныхЗаданий, Параметры)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = ОбменДаннымиВЕТИС.КлючРегламентногоЗаданияСинхронизацииКлассификаторов();
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Использование", Ложь);
	ПараметрыЗадания.Вставить("Расписание",    Новый РасписаниеРегламентногоЗадания);
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, Параметры);
	ПараметрыЗадания.Вставить("Наименование",  НСтр("ru = 'Обмен с ВЕТИС (синхронизация классификаторов)'"));
	ПараметрыЗадания.Вставить("Ключ",          Ключ);
	ПараметрыЗадания.Вставить("Параметры",     Новый Массив);
	ПараметрыЗадания.Параметры.Добавить(Ключ);
	
	Задание = СоздатьРегламентноеЗадание(ПараметрыЗадания);
	РегламентноеЗадание = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	ДанныеРегламентногоЗадания = Новый Структура(ОбменДаннымиВЕТИС.СвойстваРегламентногоЗадания());
	ЗаполнитьЗначенияСвойств(ДанныеРегламентногоЗадания, Задание);
	ДанныеРегламентныхЗаданий.Вставить(РегламентноеЗадание, ДанныеРегламентногоЗадания);
	
	Возврат РегламентноеЗадание;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьРегламентноеЗадание(ПараметрыЗадания)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания.ОтправкаПолучениеДанныхВЕТИС);
	
	Возврат РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	
КонецФункции

&НаКлиенте
Процедура ИспользоватьИндивидуальныеРегламентныеЗаданияПриИзмененииНаФорме()
	
	ТекстВопроса = "";
	
	Если ИспользоватьИндивидуальныеРегламентныеЗадания Тогда
		
		ЕстьНеИспользуемыеРегламентныеЗадания = Не ИспользованиеСинхронизацииКлассификаторов;
		Если Не ЕстьНеИспользуемыеРегламентныеЗадания Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
				Если Не СтрокаТаблицы.Использование
					И Не СтрокаТаблицы.ПометкаУдаления Тогда
					ЕстьНеИспользуемыеРегламентныеЗадания = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьНеИспользуемыеРегламентныеЗадания Тогда
			ТекстВопроса = НСтр("ru = 'Имеются отключенные индивидуальные регламентные задания.
				|Включить использование отключенных индивидуальных регламентных заданий?'");
		КонецЕсли;
		
	Иначе
		
		ЕстьИспользуемыеРегламентныеЗадания = ИспользованиеСинхронизацииКлассификаторов;
		Если Не ЕстьИспользуемыеРегламентныеЗадания Тогда
			Для Каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
				Если СтрокаТаблицы.Использование Тогда
					ЕстьИспользуемыеРегламентныеЗадания = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьИспользуемыеРегламентныеЗадания Тогда
			ТекстВопроса = НСтр("ru = 'При включении единого регламентного задания, индивидуальные задания выполняться не будут.
				|Отключить использование индивидуальных регламентных заданий?'");
		КонецЕсли;
			
	КонецЕсли;
	
	Если ТекстВопроса <> "" Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОтветНаВопросПриИзмененииРежимаОбмена", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ОчиститьСообщения();
		ПриИзмененииРежимаОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПриИзмененииРежимаОбмена(ОтветНаВопрос, ДополнительныеПараметры) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		УстановитьИспользованиеИндивидуальныхНастроек(
			ТаблицаНастроек,
			Истина,
			ИспользоватьИндивидуальныеРегламентныеЗадания);
		ПриИзмененииРежимаОбмена();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ОчиститьСообщения();
		ПриИзмененииРежимаОбмена();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
		ИспользоватьИндивидуальныеРегламентныеЗадания = Не ИспользоватьИндивидуальныеРегламентныеЗадания;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаОбмена()
	
	Если Не УстановитьРежимАвтоматическогоОбмена(
		Не ИспользоватьИндивидуальныеРегламентныеЗадания,
		РегламентноеЗаданиеАвтоматическогоОбмена) Тогда
		ИспользоватьИндивидуальныеРегламентныеЗадания = Не ИспользоватьИндивидуальныеРегламентныеЗадания;
	КонецЕсли;
	
	УстановитьВидимостьДоступность(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИспользованиеИндивидуальныхНастроек(МассивСтрок, УстановитьСинхронизациюКлассификаторов, Использование)
	
	ОчиститьСообщения();
	
	СоответствиеСтрок = Новый Соответствие;
	
	Если УстановитьСинхронизациюКлассификаторов
		И (ИспользованиеСинхронизацииКлассификаторов <> Использование
		Или Не ЗначениеЗаполнено(РегламентноеЗаданиеСинхронизацииКлассификаторов)) Тогда
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("НастройкаОбмена",     Неопределено);
		СтруктураСтроки.Вставить("РегламентноеЗадание", РегламентноеЗаданиеСинхронизацииКлассификаторов);
		СтруктураСтроки.Вставить("Расписание",          РасписаниеСинхронизацииКлассификаторов);
		СтруктураСтроки.Вставить("Использование",       Использование);
		СтруктураСтроки.Вставить("Обработан",           Ложь);
		СоответствиеСтрок.Вставить(-1, СтруктураСтроки);
	КонецЕсли;
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Если ТипЗнч(Строка) = Тип("ДанныеФормыЭлементКоллекции") Тогда
			ДанныеСтроки = Строка;
			ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
		Иначе
			ИдентификаторСтроки = Строка;
			ДанныеСтроки = ТаблицаНастроек.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Использование
			И ДанныеСтроки.ПометкаУдаления Тогда
			Продолжить;
		ИначеЕсли ДанныеСтроки.Использование <> Использование
			Или Не ЗначениеЗаполнено(ДанныеСтроки.РегламентноеЗадание) Тогда
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("НастройкаОбмена",     ДанныеСтроки.НастройкаОбмена);
			СтруктураСтроки.Вставить("РегламентноеЗадание", ДанныеСтроки.РегламентноеЗадание);
			СтруктураСтроки.Вставить("Расписание",          ДанныеСтроки.Расписание);
			СтруктураСтроки.Вставить("Использование",       Использование);
			СтруктураСтроки.Вставить("Обработан",           Ложь);
			СоответствиеСтрок.Вставить(ИдентификаторСтроки, СтруктураСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СоответствиеСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьИспользованиеИндивидуальныхНастроекСервер(СоответствиеСтрок);
	
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		Если КлючИЗначение.Значение.Обработан Тогда
			Если КлючИЗначение.Ключ = -1 Тогда
				Если Не ЗначениеЗаполнено(РегламентноеЗаданиеСинхронизацииКлассификаторов) Тогда
					РегламентноеЗаданиеСинхронизацииКлассификаторов = КлючИЗначение.Значение.РегламентноеЗадание;
				КонецЕсли;
				ИспользованиеСинхронизацииКлассификаторов = КлючИЗначение.Значение.Использование;
			Иначе
				ДанныеСтроки = ТаблицаНастроек.НайтиПоИдентификатору(КлючИЗначение.Ключ);
				Если ДанныеСтроки <> Неопределено Тогда
					Если Не ЗначениеЗаполнено(ДанныеСтроки.РегламентноеЗадание) Тогда
						ДанныеСтроки.РегламентноеЗадание = КлючИЗначение.Значение.РегламентноеЗадание;
					КонецЕсли;
					ДанныеСтроки.Использование = КлючИЗначение.Значение.Использование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяНастройкаОбмена = Неопределено;
	Иначе
		ТекущаяНастройкаОбмена = ТекущиеДанные.НастройкаОбмена;
	КонецЕсли;
	
	Если МассивСтрок.Количество() > 0 Тогда
		ЗаполнитьДанныеФормы(Ложь);
		Если ТекущаяНастройкаОбмена <> Неопределено Тогда
			УстановитьТекущуюСтрокуНастроек(ТекущаяНастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьИспользованиеИндивидуальныхНастроекСервер(СоответствиеСтрок)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого КлючИЗначение Из СоответствиеСтрок Цикл
		Попытка
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("Использование", КлючИЗначение.Значение.Использование);
			ПараметрыЗадания.Вставить("Расписание",    КлючИЗначение.Значение.Расписание);
			Если ЗначениеЗаполнено(КлючИЗначение.Значение.РегламентноеЗадание) Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(КлючИЗначение.Значение.РегламентноеЗадание, ПараметрыЗадания);
			Иначе
				Если КлючИЗначение.Ключ = -1 Тогда
					КлючИЗначение.Значение.РегламентноеЗадание = СоздатьРегламентноеЗаданиеСинхронизацииКлассификаторов(
						Новый Соответствие,
						ПараметрыЗадания);
				Иначе
					КлючИЗначение.Значение.РегламентноеЗадание = СоздатьРегламентноеЗаданиеПоНастройкеОбмена(
						КлючИЗначение.Значение.НастройкаОбмена,
						ПараметрыЗадания);
				КонецЕсли;
			КонецЕсли;
			КлючИЗначение.Значение.Обработан = Истина;
		Исключение
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
				НСтр("ru = 'При изменении признака использования регламентного задания для настройки обмена <%1> возникла ошибка: %2.'"),
				КлючИЗначение.Значение.НастройкаОбмена,
				ОписаниеОшибки()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьРегламентноеЗаданиеПоНастройкеОбмена(НастройкаОбмена, ПараметрыЗадания)
	
	Объект = НастройкаОбмена.ПолучитьОбъект();
	Объект.ДополнительныеСвойства.Вставить("Расписание",    Новый РасписаниеРегламентногоЗадания);
	Объект.ДополнительныеСвойства.Вставить("Использование", Ложь);
	ЗаполнитьЗначенияСвойств(Объект.ДополнительныеСвойства, ПараметрыЗадания);
	Объект.Записать();
	
	Возврат Объект.РегламентноеЗадание;
	
КонецФункции

&НаСервереБезКонтекста
Функция УстановитьРежимАвтоматическогоОбмена(Использование, РегламентноеЗаданиеАвтоматическогоОбмена)
	
	Результат = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("Использование", Использование);
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗаданиеАвтоматическогоОбмена, ПараметрыЗадания);
		
		Константы.ИспользоватьАвтоматическуюОтправкуПолучениеДанныхВЕТИС.Установить(Использование);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
			НСтр("ru = 'При установке режима обмена возникла ошибка: %1.'"),
			ОписаниеОшибки()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеРедактированияНастройкиОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДанныеФормы(Ложь);
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.НастройкаОбмена) Тогда
		УстановитьТекущуюСтрокуНастроек(ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтрокуНастроек(НастройкаОбмена)
	
	Для Каждого Строка Из ТаблицаНастроек Цикл
		Если Строка.НастройкаОбмена = НастройкаОбмена Тогда
			Элементы.ТаблицаНастроек.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНаВопросПриИзмененииПометкиУдаления(ОтветНаВопрос, ДополнительныеПараметры) Экспорт

	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ИзменитьПометкуУдаления(ДополнительныеПараметры.НастройкаОбмена);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ДополнительныеПараметры.НастройкаОбмена);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьПометкуУдаления(Данные)
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Массив = Данные;
	Иначе
		Массив = Новый Массив;
		Массив.Добавить(Данные);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Для Каждого Ссылка Из Массив Цикл
			Объект = Ссылка.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Не Объект.ПометкаУдаления);
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеЗавершение(Расписание, ДополнительныеПараметры) Экспорт
	
	Если Расписание <> Неопределено Тогда
		
		Если ДополнительныеПараметры.Элемент = Элементы.РасписаниеАвтоматическогоОбменаСтрокой Тогда
			УстановитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеАвтоматическогоОбмена, Расписание);
			РасписаниеАвтоматическогоОбмена = Расписание;
			РасписаниеАвтоматическогоОбменаСтрокой = Строка(Расписание);
		ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.РасписаниеСинхронизацииКлассификаторовСтрокой Тогда
			Если Не ЗначениеЗаполнено(РегламентноеЗаданиеСинхронизацииКлассификаторов) Тогда
				УстановитьИспользованиеИндивидуальныхНастроек(Новый Массив, Истина, ИспользованиеСинхронизацииКлассификаторов);				
			КонецЕсли;
			УстановитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеСинхронизацииКлассификаторов, Расписание);
			РасписаниеСинхронизацииКлассификаторов = Расписание;
			РасписаниеСинхронизацииКлассификаторовСтрокой = Строка(Расписание);
		ИначеЕсли ДополнительныеПараметры.Элемент = Элементы.ТаблицаНастроек Тогда
			Строка = ТаблицаНастроек.НайтиПоИдентификатору(ДополнительныеПараметры.ВыбраннаяСтрока);
			Если Строка <> Неопределено Тогда
				Если Не ЗначениеЗаполнено(Строка.РегламентноеЗадание) Тогда
					МассивСтрок = Новый Массив;
					МассивСтрок.Добавить(Строка);
					УстановитьИспользованиеИндивидуальныхНастроек(МассивСтрок, Ложь, Строка.Использование);
				КонецЕсли;
				УстановитьРасписаниеРегламентногоЗадания(Строка.РегламентноеЗадание, Расписание);
				Строка.Расписание = Расписание;
				Строка.РасписаниеСтрокой = Строка(Расписание);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьРасписаниеРегламентногоЗадания(РегламентноеЗадание, Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Расписание", Расписание);
	РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, ПараметрыЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекАктивизацияСтроки()
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.Действия.Количество() = 0 Тогда
		Действия = Новый ФорматированнаяСтрока("");
	Иначе
		МассивСтрок = Новый Массив;
		Для Каждого ЭлементДействия Из ТекущиеДанные.Действия Цикл
			Если МассивСтрок.Количество() > 0 Тогда
				МассивСтрок.Добавить(Символы.ПС);
			КонецЕсли;
			ДобавитьДействие(МассивСтрок, ЭлементДействия);
		КонецЦикла;
		Действия = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено Тогда
		ВремяПоследнегоВыполнения = Новый ФорматированнаяСтрока("");
	ИначеЕсли ТекущиеДанные.ВремяПоследнегоВыполнения = 0 Тогда
		ВремяПоследнегоВыполнения = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Регламентное задание еще не выполнялось'"));
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрШаблон(
			НСтр("ru = 'Последний запуск %1. Время выполнения %2'"),
			ТекущиеДанные.ДатаНачалаПоследнегоВыполнения,
			ПредставлениеВремениВыполнения(ТекущиеДанные.ВремяПоследнегоВыполнения)));
		МассивСтрок.Добавить(" - ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'История выполнения'"),,,,
			"ОткрытьИсториюВыполненияПоНастройке"));
			
		ВремяПоследнегоВыполнения = Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеВремениВыполнения(ВремяВыполнения)
	
	Если ВремяВыполнения > 0 Тогда
		Если ВремяВыполнения < 60 Тогда
			Результат = НСтр("ru = 'менее минуты'");
		ИначеЕсли ВремяВыполнения > 86400 Тогда
			Результат = НСтр("ru = 'более суток'");
		ИначеЕсли ВремяВыполнения < 3600 Тогда
			Результат = СтрШаблон(
				НСтр("ru = '%1 мин.'"),
				Цел(ВремяВыполнения / 60));
		Иначе
			Результат = СтрШаблон(
				НСтр("ru = '%1 ч. %2 мин.'"),
				Цел(ВремяВыполнения / 3600),
				Цел((ВремяВыполнения % 3600) / 60));
		КонецЕсли;
	Иначе
		Результат = НСтр("ru = 'неизвестно'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьДействие(МассивСтрок, ЭлементДействия)
	
	Если ЭлементДействия.Значение = "СнятьПометкуУдаленияХСИНастройки" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Снять пометку удаления с хозяйствующего субъекта и настройки регламентного задания'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "СнятьПометкуУдаленияХС" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Снять пометку удаления с хозяйствующего субъекта'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "СнятьПометкуУдаленияНастройки" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Снять пометку удаления с настройки регламентного задания'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "СнятьПометкуУдаленияНастройкиИВключитьРегламентноеЗадание" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Снять пометку удаления с настройки и включить регламентное задание'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "ПометитьНаУдалениеНастройку" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Пометить на удаление настройку регламентного задания'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "ПометитьНаУдалениеХС" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Пометить на удаление хозяйствующий субъект'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "ВключитьРегламентноеЗадание" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Включить регламентное задание'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "УдалитьНеиспользуемыеПредприятия" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Удалить из настройки неиспользуемые предприятия'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "СкорректироватьНастройку" Тогда
		МассивСтрок.Добавить(
			НСтр("ru = 'В одну настроку не рекомендуется включать более пяти предприятий.'"));
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Настроить'"),,,,
			ЭлементДействия.Значение));
	ИначеЕсли ЭлементДействия.Значение = "ОткрытьИсториюВыполненияПоХС" Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'История выполнения заданий по хозяйствующему субъекту'"),,,,
			ЭлементДействия.Значение));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(ТекущееДействие)
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущееДействие = "СнятьПометкуУдаленияХСИНастройки" Тогда
		
		Массив = Новый Массив;
		Массив.Добавить(ТекущиеДанные.ХозяйствующийСубъект);
		Массив.Добавить(ТекущиеДанные.НастройкаОбмена);
		
		ИзменитьПометкуУдаления(Массив);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ТекущиеДанные.НастройкаОбмена);
		
	ИначеЕсли ТекущееДействие = "СнятьПометкуУдаленияХС" Тогда
		
		ИзменитьПометкуУдаления(ТекущиеДанные.ХозяйствующийСубъект);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ТекущиеДанные.НастройкаОбмена);
		
	ИначеЕсли ТекущееДействие = "СнятьПометкуУдаленияНастройки" Тогда
		
		ИзменитьПометкуУдаления(ТекущиеДанные.НастройкаОбмена);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ТекущиеДанные.НастройкаОбмена);
		
	ИначеЕсли ТекущееДействие = "СнятьПометкуУдаленияНастройкиИВключитьРегламентноеЗадание" Тогда
		
		ИзменитьПометкуУдаления(ТекущиеДанные.НастройкаОбмена);
		
		ТекущиеДанные.ПометкаУдаления = Ложь;
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекущиеДанные);
		
		УстановитьИспользованиеИндивидуальныхНастроек(МассивСтрок, Ложь, Истина);
		
	ИначеЕсли ТекущееДействие = "ПометитьНаУдалениеНастройку" Тогда
		
		ИзменитьПометкуУдаления(ТекущиеДанные.НастройкаОбмена);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ТекущиеДанные.НастройкаОбмена);
		
	ИначеЕсли ТекущееДействие = "ПометитьНаУдалениеХС" Тогда
		
		ИзменитьПометкуУдаления(ТекущиеДанные.ХозяйствующийСубъект);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ТекущиеДанные.НастройкаОбмена);
		
	ИначеЕсли ТекущееДействие = "ВключитьРегламентноеЗадание" Тогда
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекущиеДанные);
		
		УстановитьИспользованиеИндивидуальныхНастроек(МассивСтрок, Ложь, Истина);
		
	ИначеЕсли ТекущееДействие = "УдалитьНеиспользуемыеПредприятия" Тогда
		
		УдалитьНеиспользуемыеПредприятия(ТекущиеДанные.НастройкаОбмена);
		ЗаполнитьДанныеФормы(Ложь);
		УстановитьТекущуюСтрокуНастроек(ТекущиеДанные.НастройкаОбмена);
		
	ИначеЕсли ТекущееДействие = "СкорректироватьНастройку" Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("НастройкаОбмена", ТекущиеДанные.НастройкаОбмена);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗавершениеРедактированияНастройкиОбмена",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", ТекущиеДанные.НастройкаОбмена);
		
		ОткрытьФорму("Справочник.НастройкиРегламентныхЗаданийВЕТИС.Форма.ФормаЭлемента",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			ОписаниеОповещения,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли ТекущееДействие = "ОткрытьИсториюВыполненияПоХС" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
		ПараметрыОткрытия.Отбор.Вставить("ХозяйствующийСубъект",
			ТекущиеДанные.ХозяйствующийСубъект);
		
		ОткрытьФорму("РегистрСведений.ИсторияВыполненияОбменовСВЕТИС.ФормаСписка",
			ПараметрыОткрытия,
			ЭтотОбъект,
			ТекущиеДанные.ХозяйствующийСубъект);
		
	ИначеЕсли ТекущееДействие = "ОткрытьИсториюВыполненияПоНастройке" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура);
		ПараметрыОткрытия.Отбор.Вставить("НастройкаРегламентногоЗадания", ТекущиеДанные.НастройкаОбмена);
		
		ОткрытьФорму("РегистрСведений.ИсторияВыполненияОбменовСВЕТИС.ФормаСписка",
			ПараметрыОткрытия,
			ЭтотОбъект,
			ТекущиеДанные.НастройкаОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьНеиспользуемыеПредприятия(НастройкаОбмена)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", НастройкаОбмена);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиПредприятия.Предприятие КАК Предприятие
	|ИЗ
	|	Справочник.НастройкиРегламентныхЗаданийВЕТИС КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиРегламентныхЗаданийВЕТИС.Предприятия КАК НастройкиПредприятия
	|		ПО Настройки.Ссылка = НастройкиПредприятия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ХозяйствующиеСубъектыВЕТИС.Предприятия КАК ХСПредприятия
	|		ПО Настройки.ХозяйствующийСубъект = ХСПредприятия.Ссылка
	|		И НастройкиПредприятия.Предприятие = ХСПредприятия.Предприятие
	|ГДЕ
	|	Настройки.Ссылка = &Ссылка
	|	И ВЫБОР
	|		КОГДА НастройкиПредприятия.Предприятие ЕСТЬ NULL
	|		ИЛИ НастройкиПредприятия.Предприятие = ЗНАЧЕНИЕ(Справочник.ПредприятияВЕТИС.ПустаяСсылка)
	|		ИЛИ НЕ ХСПредприятия.НеИспользовать
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ";
	
	Объект = НастройкаОбмена.ПолучитьОбъект();
	Объект.Предприятия.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Строка = Объект.Предприятия.Добавить();
		Строка.Предприятие = Выборка.Предприятие;
	КонецЦикла;
	
	Объект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНадписьПредприятияБезНастроек()
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'Рекомендуется'"),,
		ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'создать'"),,,,
		"СоздатьНастройкуРегламентногоЗадания"));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(
		НСтр("ru = 'настройки регламентных заданий.'"),,
		ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС));
	
	ПредприятияБезНастроекНадпись = Новый ФорматированнаяСтрока(МассивСтрок);
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПредприятияБезНастроек(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ТаблицаНастроек.ТекущиеДанные;
	
	ДополнительныеПараметрыФормы = Новый Структура;
	Если ТекущиеДанные = Неопределено Тогда
		ДополнительныеПараметрыФормы.Вставить("НастройкаОбмена", Неопределено);
	Иначе
		ДополнительныеПараметрыФормы.Вставить("НастройкаОбмена", ТекущиеДанные.НастройкаОбмена);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗавершениеРедактированияНастройкиОбмена",
		ЭтотОбъект,
		ДополнительныеПараметрыФормы);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("ХозяйствующийСубъект", Результат.ХозяйствующийСубъект);
	ПараметрыОткрытия.ЗначенияЗаполнения.Вставить("Предприятия", Новый Массив);
	ПараметрыОткрытия.ЗначенияЗаполнения.Предприятия.Добавить(Результат.Предприятие);
	
	ОткрытьФорму("Справочник.НастройкиРегламентныхЗаданийВЕТИС.Форма.ФормаЭлемента",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
