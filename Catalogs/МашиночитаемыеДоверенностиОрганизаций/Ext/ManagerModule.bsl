#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеСведенияМЧД
//
Функция СведенияМЧД(МЧД) Экспорт

	Реквизиты = "ДатаВыдачи, ДатаОкончания, ДатаОбновленияСтатуса, СтатусВРеестреФНС, ДоверительЮЛ_КПП,
				|Подписана, Верна, Отозвана, ДатаОтзыва, ДатаОтправкиЗаявленияНаОтзыв, ВариантЗаполненияПолномочий,
				|СовместныеПолномочия, НесколькоПредставителей,
				|ИННДоверителяРодительскойДоверенности, НомерДоверенности, НомерРодительскойДоверенности, Представители";
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
	СведенияМЧД = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	СведенияМЧД.Ссылка = МЧД;
	СведенияМЧД.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(МЧД).Правило;
	ЗаполнитьЗначенияСвойств(СведенияМЧД, РеквизитыМЧД,
		"ДатаВыдачи, ДатаОкончания, СтатусВРеестреФНС, Подписана, Верна, Отозвана,
		|ДатаОтзыва, ДатаОтправкиЗаявленияНаОтзыв, СовместныеПолномочия, НесколькоПредставителей,
		|ИННДоверителяРодительскойДоверенности, НомерДоверенности, НомерРодительскойДоверенности");
	СведенияМЧД.ПолномочияОграничены = Не МашиночитаемыеДоверенности.ЭтоМЧДСПолнымиПолномочиями(МЧД);
	СведенияМЧД.ДатаПолученияСведений = РеквизитыМЧД.ДатаОбновленияСтатуса;
	СведенияМЧД.ПолномочияУказаныИзКлассификатора = МашиночитаемыеДоверенности.ПолномочияМЧДУказаныИзКлассификатора( ,
		РеквизитыМЧД.ВариантЗаполненияПолномочий);
	
	Представители = РеквизитыМЧД.Представители.Выбрать(); 
	ИННПредставителей = Новый Массив;
	Пока Представители.Следующий() Цикл
		ИННДобавление = ?(ЗначениеЗаполнено(Представители.ЮЛ_ИНН), Представители.ЮЛ_ИНН, Представители.ФЛ_ИНН);
		ЕстьИННВМассиве = ИННПредставителей.Найти(ИННДобавление);
		Если ЕстьИННВМассиве = Неопределено Тогда
			ИННПредставителей.Добавить(ИННДобавление);
		КонецЕсли;
	КонецЦикла;
	СведенияМЧД.ИННПредставителей = ИННПредставителей;
	
	СведенияМЧД.ИННДоверителя = МашиночитаемыеДоверенности.ИННДоверителя(МЧД);
	СведенияМЧД.КППДоверителя = РеквизитыМЧД.ДоверительЮЛ_КПП;

	Возврат СведенияМЧД;

КонецФункции

// Возвращает сведения о представителе 
// по данным МЧД из массива представителей описанном в МашиночитаемыеДоверенности.НовыеДанныеМЧД
// 
// Параметры:
//	Представитель - Структура:
//	* ТипУполномоченногоПредставителя - Строка
//	* ПредставительЮЛ_НаимОрг - Строка
//	* ПредставительЮЛ_ИНН - Строка
//	* ПредставительЮЛ_КПП - Строка
//	* ПредставительЮЛ_ОГРН - Строка
//	* ПредставительФЛ_ИНН - Строка
//	* ПредставительФЛ_ОГРН - Строка
//	* ПредставительФЛ_СНИЛС - Строка
//	* ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
//	* ПредставительФЛ_ДатаРождения - Дата
//	* Представитель - Неопределено
//					- СправочникСсылка
//	* Фамилия - Строка
//	* Имя - Строка
//	* Отчество - Строка
//	* УдостоверениеЛичности см. МашиночитаемыеДоверенности.НовыеДанныеУдостоверенияЛичности
//	
// Возвращаемое значение:
//  см. МашиночитаемыеДоверенностиКлиентСервер.НовыеСведенияОПредставителеМЧД
//
Функция СведенияОПредставителеПоДаннымМЧД(Представитель) Экспорт
	
	СведенияОПредставителеМЧД = 
		МашиночитаемыеДоверенностиКлиентСервер.НовыеСведенияОПредставителеМЧД();
	
	СведенияОПредставителеМЧД.ФЛ_Фамилия = Представитель.Фамилия;
	СведенияОПредставителеМЧД.ФЛ_Имя = Представитель.Имя;
	СведенияОПредставителеМЧД.ФЛ_Отчество = Представитель.Отчество;
	СведенияОПредставителеМЧД.Представитель = 
		МашиночитаемыеДоверенности.ПолучитьПредставлениеФИО(Представитель);
	
	СведенияОПредставителеМЧД.ФЛ_СНИЛС = Представитель.ПредставительФЛ_СНИЛС;
	СведенияОПредставителеМЧД.ФЛ_ДатаРождения = Представитель.ПредставительФЛ_ДатаРождения;
	СведенияОПредставителеМЧД.ФЛ_Гражданство = Представитель.ПредставительФЛ_Гражданство;
	
	Если Представитель.Свойство("УдостоверениеЛичности") Тогда
		УдостоверениеЛичности = Представитель.УдостоверениеЛичности;
		СведенияОПредставителеМЧД.ДокументВид = УдостоверениеЛичности.ВидДок;
		СведенияОПредставителеМЧД.ДокументДатаВыдачи = УдостоверениеЛичности.ДатаДок;
		СведенияОПредставителеМЧД.ДокументКемВыдан = УдостоверениеЛичности.ВыдДок;	
		СведенияОПредставителеМЧД.ДокументКодПодразделения = УдостоверениеЛичности.КодВыдДок;
		СведенияОПредставителеМЧД.ДокументНомер = УдостоверениеЛичности.НомДок;
		СведенияОПредставителеМЧД.ДокументСерия = УдостоверениеЛичности.СерДок;
	КонецЕсли;
	
	Если Представитель.ТипУполномоченногоПредставителя = "ЮЛ" Тогда
		СведенияОПредставителеМЧД.ЮЛ_Наименование = Представитель.ПредставительЮЛ_НаимОрг;
		СведенияОПредставителеМЧД.ЮЛ_ИНН = Представитель.ПредставительЮЛ_ИНН;
		СведенияОПредставителеМЧД.ЮЛ_КПП = Представитель.ПредставительЮЛ_КПП;
		СведенияОПредставителеМЧД.ЮЛ_ОГРН = Представитель.ПредставительЮЛ_ОГРН;
		СведенияОПредставителеМЧД.ФЛ_ИНН = Представитель.ПредставительФЛ_ИНН;
	КонецЕсли;
	
	Если Представитель.ТипУполномоченногоПредставителя = "ИП" Тогда
		СведенияОПредставителеМЧД.Представитель = Представитель.ПредставительЮЛ_НаимОрг;
		СведенияОПредставителеМЧД.ФЛ_ИНН = Представитель.ПредставительЮЛ_ИНН;
		СведенияОПредставителеМЧД.ФЛ_ОГРН = Представитель.ПредставительЮЛ_ОГРН;
	КонецЕсли; 
	
	Если Представитель.ТипУполномоченногоПредставителя = "ФЛ" Тогда
		СведенияОПредставителеМЧД.ФЛ_ИНН = Представитель.ПредставительФЛ_ИНН;
	КонецЕсли;
	
	ШаблонПредставленияФЛ = 
	НСтр("ru = 'Дата рождения:%1	ИНН:%2	СНИЛС:%3'");
	
	ДатаРождения = Формат(СведенияОПредставителеМЧД.ФЛ_ДатаРождения, "ДЛФ=D");
	
	ТекстПредставленияФЛ = 
		СтрШаблон(ШаблонПредставленияФЛ, 
			ДатаРождения, 
			СведенияОПредставителеМЧД.ФЛ_ИНН, 
			СведенияОПредставителеМЧД.ФЛ_СНИЛС);
	
	СведенияОПредставителеМЧД.ПредставлениеПредставителя = 
		СведенияОПредставителеМЧД.Представитель 
		+ Символы.ПС
		+ ТекстПредставленияФЛ;
	
	Если Представитель.ТипУполномоченногоПредставителя = "ЮЛ" Тогда
		
		ШаблонПредставленияЮЛ = 
		НСтр("ru = 'ИНН:%1	КПП:%2	ОГРН:%3'");
		
		ТекстПредставленияЮЛ = 
			СтрШаблон(ШаблонПредставленияЮЛ, 
				СведенияОПредставителеМЧД.ЮЛ_ИНН, 
				СведенияОПредставителеМЧД.ЮЛ_КПП, 
				СведенияОПредставителеМЧД.ЮЛ_ОГРН);
		
		СведенияОПредставителеМЧД.ПредставлениеПредставителя = 
			СведенияОПредставителеМЧД.ЮЛ_Наименование 
			+ Символы.ПС
			+ ТекстПредставленияЮЛ
			+ Символы.ПС
			+ СведенияОПредставителеМЧД.ПредставлениеПредставителя;
		
	КонецЕсли;
	
	Возврат СведенияОПредставителеМЧД;

КонецФункции

// Получает данные МЧД.
// 
// Параметры:
//  МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
//
Функция ПолучитьДанныеМЧД(МЧД) Экспорт

	ДанныеМЧД = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеМЧД.НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МЧД, "НомерДоверенности");
	ДанныеМЧД.ИННДоверителя = МашиночитаемыеДоверенности.ИННДоверителя(МЧД);

	Возврат ДанныеМЧД;

КонецФункции

// Заполняет элемент справочника МЧД сведениями.
// 
// Параметры:
//  НомерДоверенности - Строка
//  ИННДоверителя - Строка
//  Сведения - См. МашиночитаемыеДоверенности.ПолучитьСведенияДоверенностиНаСервереМЧД
//
// Возвращаемое значение:
//  См. МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД
//
Функция ЗаполнитьМЧД(НомерДоверенности, ИННДоверителя, Сведения) Экспорт

	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;
	Результат = МашиночитаемыеДоверенности.НовыеДанныеСтатусаМЧД();

	ДанныеДоверенности = МашиночитаемыеДоверенности.НовыеДанныеДоверенности();
	ДанныеДоверенности.НомерДоверенности = НомерДоверенности;
	ДанныеДоверенности.ИННДоверителя = ИННДоверителя;
	РезультатСоздания = НайтиСоздатьМЧД(ДанныеДоверенности);
	
	Если РезультатСоздания.Ошибка Тогда
		
		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = РезультатСоздания.ОписаниеОшибки;
		Возврат Результат;
		
	КонецЕсли;
	
	МЧД = РезультатСоздания.Ссылка;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = Сведения.ПолныеДанные.ДанныеВыгрузки;
	ДанныеДляЗагрузки.ДанныеПодписи = Сведения.ПолныеДанные.ДанныеПодписи;
	ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = Сведения.ПолныеДанные.ДанныеПодписиЗаявленияНаОтмену;
	
	ДополнительныеСведения = Новый Структура;
	СтатусДоверенности = МашиночитаемыеДоверенностиКлиентСервер.СтатусВРеестреФНС(Сведения.ЧастичныеДанные.СтатусДоверенности);
	ДополнительныеСведения.Вставить("СтатусВРеестреФНС", СтатусДоверенности);
	ДополнительныеСведения.Вставить("ДатаОбновленияСтатуса", Сведения.ДатаЗагрузкиИзРеестра);
	
	РезультатЗагрузки = 
		ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки,
			ТребуетсяПроверкаМЧДНаКлиенте, Истина, ДополнительныеСведения);
	
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	
	
	Если НЕ ПустаяСтрока(РезультатЗагрузки.Ошибка) Тогда

		Результат.Ошибка = Истина;
		Результат.ОписаниеОшибки = РезультатЗагрузки.Ошибка;
		Возврат Результат;
			
	КонецЕсли;
	
	Реквизиты = "ДатаВыдачи, ДатаОкончания, ДоверительЮЛ_ИНН, ДоверительЮЛ_КПП,
		|ДоверительФЛ_ИНН, ДатаОбновленияСтатуса, СтатусВРеестреФНС,
		|Подписана, Верна, Отозвана, ДатаОтзыва, ПолномочияОграничены, ВариантЗаполненияПолномочий,
		|СовместныеПолномочия, НесколькоПредставителей, НомерРодительскойДоверенности,
		|ИННДоверителяРодительскойДоверенности, Полномочия, ВозможноПередоверие, Представители";
	
	РеквизитыМЧД = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МЧД, Реквизиты);
	Полномочия = РеквизитыМЧД.Полномочия.Выгрузить().Скопировать(, "Код, Описание, Пояснение, Содержание");
	
	СведенияМЧД = МашиночитаемыеДоверенности.НовыеСведенияМЧД();
	СведенияМЧД.Ссылка = МЧД;
	СведенияМЧД.ПравилоПроверки = РегистрыСведений.ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки(МЧД).Правило;
	СведенияМЧД.ТипПередоверия = ?(РеквизитыМЧД.ВозможноПередоверие, "1", "2");
	
	ЗаполнитьЗначенияСвойств(СведенияМЧД, РеквизитыМЧД,
		"ДатаВыдачи, ДатаОкончания, СтатусВРеестреФНС, Подписана, Верна,
		|Отозвана, ДатаОтзыва, ПолномочияОграничены,
		|СовместныеПолномочия, НесколькоПредставителей, НомерРодительскойДоверенности,
		|ИННДоверителяРодительскойДоверенности");
	
	СведенияМЧД.ДатаПолученияСведений = РеквизитыМЧД.ДатаОбновленияСтатуса;
	СведенияМЧД.ПолномочияУказаныИзКлассификатора = МашиночитаемыеДоверенности.ПолномочияМЧДУказаныИзКлассификатора( ,
		РеквизитыМЧД.ВариантЗаполненияПолномочий);
	Представители = РеквизитыМЧД.Представители.Выбрать(); 
	ИННПредставителей = Новый Массив;
	Пока Представители.Следующий() Цикл
		ИННПредставителей.Добавить(Представители.ФЛ_ИНН);	
	КонецЦикла;
	СведенияМЧД.ИННПредставителей = ИННПредставителей;
		
	СведенияМЧД.ИННДоверителя = МашиночитаемыеДоверенности.ИННДоверителя(МЧД);
	СведенияМЧД.КППДоверителя = РеквизитыМЧД.ДоверительЮЛ_КПП;
	СведенияМЧД.Полномочия = ОбщегоНазначения.ТаблицаЗначенийВМассив(Полномочия);
	Результат.Сведения = СведенияМЧД;
	
	Возврат Результат;
	
КонецФункции

// Ищет МЧД контрагента, а в случае неудачного поиска создает новую МЧД
// 
// Параметры:
//  ДанныеДоверенности - см. МашиночитаемыеДоверенности.НовыеДанныеДоверенности
// 
// Возвращаемое значение:
//  Структура:
//  * Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  * Ошибка - Булево
//  * ОписаниеОшибки - Строка
//  
Функция НайтиСоздатьМЧД(ДанныеДоверенности) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Ссылка", ПустаяСсылка());
	Результат.Вставить("Ошибка", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");

	МЧД = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);

	Если ЗначениеЗаполнено(МЧД) Тогда
		Результат.Ссылка = МЧД;
	Иначе

		НачатьТранзакцию();

		Попытка

			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
			ЭлементБлокировки.УстановитьЗначение("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();

			МЧД = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);

			Если ЗначениеЗаполнено(МЧД) Тогда
				Результат.Ссылка = МЧД;
			Иначе

				МЧД = СоздатьЭлемент();
				МЧД.НомерДоверенности = ДанныеДоверенности.НомерДоверенности;
				Если СтрДлина(ДанныеДоверенности.ИННДоверителя) < 12 Тогда
					МЧД.ДоверительЮЛ_ИНН = ДанныеДоверенности.ИННДоверителя;
				Иначе
					МЧД.ДоверительФЛ_ИНН = ДанныеДоверенности.ИННДоверителя;
				КонецЕсли;
				МЧД.Записать();
				Результат.Ссылка = МЧД.Ссылка;

			КонецЕсли;

			ЗафиксироватьТранзакцию();

		Исключение

			ОтменитьТранзакцию();
			Результат.Ошибка = Истина;
			Результат.ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

		КонецПопытки;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Возвращает идентификатор машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - Идентификатор машиночитаемой доверенности.
//
Функция ПолучитьИдентификаторМЧД(Ссылка) Экспорт
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
КонецФункции

// Возвращает имя файла машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Строка - Имя файла машиночитаемой доверенности.
//
Функция ПолучитьИмяФайлаМЧД(Ссылка) Экспорт

	Реквизиты = "ДатаОтправки, НомерДоверенности";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);

	ЭлементыИмениФайла = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФорматыЭДО_ФНС.ПространствоИмен_МЧД());
	ДатаФайла = ?(ЗначениеЗаполнено(ЗначенияРеквизитов.ДатаОтправки), ЗначенияРеквизитов.ДатаОтправки,
		ТекущаяДатаСеанса());
	ЭлементыИмениФайла.Добавить(Формат(ДатаФайла, "ДФ=ггггММдд;"));
	ЭлементыИмениФайла.Добавить(ЗначенияРеквизитов.НомерДоверенности);

	Возврат СтрСоединить(ЭлементыИмениФайла, "_");

КонецФункции

// Возвращает двоичные данные машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеМЧД(Ссылка) Экспорт
	
	ДвоичныеДанныеXML = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "XMLфайлМЧД").Получить();
	Если ДвоичныеДанныеXML <> Неопределено Тогда
		Возврат ДвоичныеДанныеXML;
	КонецЕсли;
	
	ДоверенностьXML = СформироватьXML(Ссылка);
	ДвоичныеДанныеXML = ПолучитьДвоичныеДанныеИзСтроки(ДоверенностьXML, "windows-1251");
	Возврат ДвоичныеДанныеXML;

КонецФункции

// Возвращает двоичные данные заявления на отзыв машиночитаемой доверенности.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  ДвоичныеДанные - Двоичные данные заявления на отзыв машиночитаемой доверенности.
//
Функция ПолучитьДвоичныеДанныеЗаявленияНаОтзыв(Ссылка) Экспорт
		
	НомерДоверенности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НомерДоверенности");
	РезультатВыгрузки = МашиночитаемыеДоверенности.ВыгрузитьЗаявлениеНаОтменуМЧД(НомерДоверенности, "Отзыв");
	СтрокаXML = РезультатВыгрузки.Содержимое;
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(СтрокаXML, "windows-1251");
	
КонецФункции

// Загружает в элемент справочника данные из архива с файлом МЧД и подписью.
// Если доверенности с таким номером нет, то создает новую, иначе перезаполняет существующую.
//
// Параметры:
//  ДанныеФайла - ДвоичныеДанные, Строка - Двоичные данные архива или адрес во временном хранилище,
//  			- см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД.
//  МЧД			- Неопределено
//  			- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДополнительныеСведения - См. МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД
//  						- Неопределено
//  
// Возвращаемое значение:
//  Структура:
//  * МЧД - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций.
//  * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  * ДанныеДляПроверки - Неопределено, См. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД
//  * ТекстОшибки - Строка
//
Функция ЗагрузитьМЧДИзФайла(ДанныеФайла, МЧД = Неопределено, ДополнительныеСведения = Неопределено) Экспорт

	ТребуетсяПроверкаМЧДНаКлиенте = Ложь;

	Результат = Новый Структура;
	Результат.Вставить("МЧД", ПустаяСсылка());
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", ТребуетсяПроверкаМЧДНаКлиенте);
	Результат.Вставить("ДанныеДляПроверки", Неопределено);
	Результат.Вставить("ТекстОшибки", "");

	Если ТипЗНч(ДанныеФайла) = Тип("Структура") Тогда
		ДанныеАрхива = ДанныеФайла;
	Иначе
		ДанныеАрхива = МашиночитаемыеДоверенности.ПрочитатьАрхив(ДанныеФайла);
	КонецЕсли;
	
	Если ДанныеАрхива = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеАрхива.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;

	Результат.ДанныеДляПроверки = ДанныеДляПроверки;
	
	ДанныеДляЗагрузки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД();
	ДанныеДляЗагрузки.ДанныеДоверенности = ДанныеАрхива.ДанныеДоверенности;
	ДанныеДляЗагрузки.ДанныеПодписи = ДанныеАрхива.ДанныеПодписи;
	ДанныеДляЗагрузки.ДанныеПодписиЗаявленияНаОтмену = ДанныеАрхива.ДанныеПодписиЗаявленияНаОтмену;
	
	ВидОперации = НСтр("ru = 'Загрузка машиночитаемой доверенности из файла.'");
	
	РезультатЧтения = МашиночитаемыеДоверенности.ОбъектXDTOМЧД(ДанныеДляЗагрузки.ДанныеДоверенности);
	
	Если ЗначениеЗаполнено(РезультатЧтения.ТекстОшибки) Тогда
		Результат.ТекстОшибки = РезультатЧтения.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Если ДополнительныеСведения = Неопределено Тогда
		ДополнительныеСведения = МашиночитаемыеДоверенностиКлиентСервер.ДополнительныеСведенияПоЗагрузкеМЧД();
	КонецЕсли;

	РезультатПроверкиНаСервере = Новый Структура("Результат, ТекстОшибки", Истина, "");
	РезультатЗагрузки = ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, Истина,
		ДополнительныеСведения, МЧД, РезультатПроверкиНаСервере);
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	Результат.Вставить("РезультатПроверкиНаСервере", РезультатПроверкиНаСервере);

	Если Не РезультатЗагрузки.Выполнено Тогда
		ТекстОшибки = НСтр("ru = 'Ошибка при заполнении доверенности из файла:'") + Символы.ПС
			+ РезультатЗагрузки.Ошибка;
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ТекстОшибки, ТекстОшибки);
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Результат.МЧД = РезультатЗагрузки.Ссылка;

	Возврат Результат;

КонецФункции

// Возвращает преобразованные данные доверенности в строку xml.
// 
// Параметры:
//  Ссылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДанныеОсновнойДоверенности - см. МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена
// 
// Возвращаемое значение:
//  Строка - доверенность в формате xml.
Функция СформироватьXML(Ссылка, ДанныеОсновнойДоверенности = Неопределено) Экспорт

	ДанныеДоверенности = ДанныеИзИнформационнойБазы(Ссылка);
	
	ДоверенностьXML = ДанныеДоверенностиВСтрокуXMLВерсия002(ДанныеДоверенности);

	Возврат ДоверенностьXML;

КонецФункции

// Определяет наличие у пользователя прав на изменение машиночитаемых доверенностей организаций.
//
// Возвращаемое значение:
//  Булево - Истина, если у пользователя есть право на изменение, иначе Ложь.
//
Функция ЕстьПравоИзменения() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.МашиночитаемыеДоверенностиОрганизаций);

КонецФункции

#Область ЗагрузкаЭлементаСправочника

// Загружает элемент справочника из файла обмена.
// 
// Параметры:
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  ОбновлятьСуществующий - Булево - Если Истина, то будет обновлен существующий элемент, если он найден.
//  ДополнительныеСведения - Неопределено, Структура - Если переданы, то будут заполнены в элементе справочника.
//  МЧД			- Неопределено
//  			- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура - Результат загрузки:
//   * Выполнено - Булево - Признак успешности выполнения загрузки.
//   * Ссылка - Неопределено, СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на элемент справочника.
//   * Ошибка - Строка - Текст ошибки, если не удалось загрузить элемент.
//   * ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//
Функция ЗагрузитьЭлементИзФайлаОбмена(ДанныеДляЗагрузки, ТребуетсяПроверкаМЧДНаКлиенте, ОбновлятьСуществующий = Ложь,
	ДополнительныеСведения = Неопределено, МЧД = Неопределено, РезультатПроверкиНаСервере = Неопределено) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ссылка", Неопределено);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("ТребуетсяПроверкаМЧДНаКлиенте", Ложь);

	Попытка
		
		РезультатЧтения = МашиночитаемыеДоверенности.ДанныеИзФайлаОбмена(ДанныеДляЗагрузки.ДанныеДоверенности, Истина);
		Если НЕ РезультатЧтения.Успех Тогда
			Результат.Ошибка = РезультатЧтения.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		ДанныеДоверенности = РезультатЧтения.ДанныеДоверенности;
		
	Исключение
		
		Результат.Ошибка = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Результат;
		
	КонецПопытки;

	РезультатПроверки = МашиночитаемыеДоверенности.ПроверитьКлючевыеРеквизитыДанныхФайлаДоверенности(
		ДанныеДоверенности, Истина);
	Если РезультатПроверки.ЕстьОшибки Тогда
		Результат.Ошибка = РезультатПроверки.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДополнительныеСведения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДанныеДоверенности, ДополнительныеСведения, Истина);
	КонецЕсли;
		
	ТекущийЭлемент = ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
		ТребуетсяПроверкаМЧДНаКлиенте, МЧД, РезультатПроверкиНаСервере);
	Результат.Ссылка = ТекущийЭлемент;
	Результат.ТребуетсяПроверкаМЧДНаКлиенте = ТребуетсяПроверкаМЧДНаКлиенте;
	Если ЗначениеЗаполнено(ТекущийЭлемент) Тогда
		Результат.Выполнено = Истина;
	Иначе
		Результат.Ошибка = НСтр("ru = 'Не удалось записать элемент справочника. Подробности в журнале регистрации.'");
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	МашиночитаемыеДоверенности.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
		СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	МашиночитаемыеДоверенности.ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  Доверитель - см. МашиночитаемыеДоверенности.НовыеРеквизитыОтбора
//  Представитель - см. МашиночитаемыеДоверенности.НовыеРеквизитыОтбора
//  ДействительныеНаДату - Дата
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. МашиночитаемыеДоверенности.НоваяТаблицаДоверенностей 
Функция ПолучитьДоверенностиПоОтбору(Доверитель, Представитель, ДействительныеНаДату) Экспорт
	
	Результат = МашиночитаемыеДоверенности.НоваяТаблицаДоверенностей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаВыдачи КАК ДатаВыдачи,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОкончания КАК ДатаОкончания,
	|	МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС КАК СтатусВРеестреФНС,
	|	МашиночитаемыеДоверенностиОрганизаций.Верна КАК Верна,
	|	МашиночитаемыеДоверенностиОрганизаций.Отозвана КАК Отозвана,
	|	МашиночитаемыеДоверенностиОрганизаций.ДатаОтзыва КАК ДатаОтзыва,
	|	МашиночитаемыеДоверенностиОрганизаций.ПолномочияОграничены КАК ПолномочияОграничены,
	|	МашиночитаемыеДоверенностиОрганизаций.ВариантЗаполненияПолномочий = ЗНАЧЕНИЕ(Перечисление.ВариантыЗаполненияПолномочийМЧД.Классификатор) КАК
	|		ПолномочияУказаныИзКлассификатора,
	|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности КАК НомерДоверенности,
	|	МашиночитаемыеДоверенностиОрганизаций.XMLфайлМЧД КАК ФайлМЧД,
	|	МашиночитаемыеДоверенностиОрганизаций.Представление КАК Представление,
	|	МашиночитаемыеДоверенностиОрганизаций.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
	|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
	|	МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_КПП КАК КППДоверителя,
	|	ЕСТЬNULL(ПравилаПроверкиПолномочийПоМЧД.ПравилоПроверки,
	|		ЗНАЧЕНИЕ(Справочник.ПравилаПроверкиПолномочийМЧД.ПустаяСсылка)) КАК ПравилоПроверки,
	|	МашиночитаемыеДоверенностиОрганизаций.ИННДоверителяРодительскойДоверенности КАК ИННДоверителяРодительскойДоверенности
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МашиночитаемыеДоверенностиОрганизаций.Представители КАК ТаблицаПедставителей
	|		ПО МашиночитаемыеДоверенностиОрганизаций.Ссылка = ТаблицаПедставителей.Ссылка
	|		И НЕ МашиночитаемыеДоверенностиОрганизаций.ПометкаУдаления
	|		И МашиночитаемыеДоверенностиОрганизаций.СтатусВРеестреФНС В (&СтатусВРеестреФНС)
	|		И НЕ МашиночитаемыеДоверенностиОрганизаций.СовместныеПолномочия
	|		И &ДополнительныйОтбор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаПроверкиПолномочийПоМЧД КАК ПравилаПроверкиПолномочийПоМЧД
	|		ПО МашиночитаемыеДоверенностиОрганизаций.Ссылка = ПравилаПроверкиПолномочийПоМЧД.Доверенность";
	
	Запрос.УстановитьПараметр("СтатусВРеестреФНС", МашиночитаемыеДоверенности.СтатусыДействительнойДоверенности());
	
	ДоверительИНН = СокрЛП(Доверитель.ИНН);
	ДоверительКПП = СокрЛП(Доверитель.КПП);
	ПредставительИНН = СокрЛП(Представитель.ИНН);
	ПредставительКПП = СокрЛП(Представитель.КПП);
	
	ТекстыУсловий = Новый Массив;
	Если Не ПустаяСтрока(ДоверительИНН) Тогда
		Запрос.УстановитьПараметр("ДоверительИНН", ДоверительИНН);
		ТекстыУсловий.Добавить("(МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_ИНН = &ДоверительИНН
		|			ИЛИ МашиночитаемыеДоверенностиОрганизаций.ДоверительФЛ_ИНН = &ДоверительИНН
		|			ИЛИ МашиночитаемыеДоверенностиОрганизаций.ИННДоверителяРодительскойДоверенности = &ДоверительИНН)");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ДоверительКПП) Тогда
		Запрос.УстановитьПараметр("ДоверительКПП", ДоверительКПП);
		
		ТекстыУсловияКПП = Новый Массив;
		ТекстыУсловияКПП.Добавить("МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_КПП = &ДоверительКПП");
		
		МаскиКППГоловнойОрганизации = МашиночитаемыеДоверенности.МаскиКППГоловнойОрганизации();
		Для Каждого Маска Из МаскиКППГоловнойОрганизации Цикл
			ТекстыУсловияКПП.Добавить(СтрШаблон("МашиночитаемыеДоверенностиОрганизаций.ДоверительЮЛ_КПП ПОДОБНО ""%1""",
				Маска));
		КонецЦикла;
		ТекстыУсловий.Добавить("(" + МашиночитаемыеДоверенности.ТекстОтбора(ТекстыУсловияКПП, " ИЛИ ") + ")");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставительИНН) Тогда
		Запрос.УстановитьПараметр("ПредставительИНН", ПредставительИНН);
		ТекстыУсловий.Добавить("(ТаблицаПедставителей.ФЛ_ИНН = &ПредставительИНН
		|			ИЛИ ТаблицаПедставителей.ЮЛ_ИНН = &ПредставительИНН)");
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПредставительКПП) Тогда
		Запрос.УстановитьПараметр("ПредставительКПП", ПредставительКПП);
		ТекстыУсловий.Добавить("ТаблицаПедставителей.ЮЛ_КПП = &ПредставительКПП");
	КонецЕсли;
	// Формируем тексты отбора
	ТекстУсловий = МашиночитаемыеДоверенности.ТекстОтбора(ТекстыУсловий);
	
	// Подставляем условия в запрос
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительныйОтбор", ТекстУсловий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СвойстваДоверенности = МашиночитаемыеДоверенности.НовыеСвойстваДоверенности();
		ЗаполнитьЗначенияСвойств(СвойстваДоверенности, Выборка);
		
		Если МашиночитаемыеДоверенности.ДоверенностьДействительнаПоСвойствам(СвойстваДоверенности, ДействительныеНаДату) Тогда
			СтрокаТаблицыМЧД = Результат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыМЧД, Выборка);
			Если ЗначениеЗаполнено(Выборка.ДоверительФЛ_ИНН) Тогда
				СтрокаТаблицыМЧД.ИННДоверителя = Выборка.ДоверительФЛ_ИНН;
			Иначе
				СтрокаТаблицыМЧД.ИННДоверителя = Выборка.ДоверительЮЛ_ИНН;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Сортировать("ДатаВыдачи УБЫВ");
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ЭлементСправочника - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//  ДанныеСтатуса - См. МашиночитаемыеДоверенности.НовыйСтатусВРеестреФНС
//  
// Возвращаемое значение:
//  Булево - Истина в случае успешной записи.
Функция УстановитьСтатус(ЭлементСправочника, ДанныеСтатуса) Экспорт
	
	Если Не ЗначениеЗаполнено(ЭлементСправочника) Тогда
		Возврат Ложь;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДанныеСтатуса.СтатусВРеестреФНС) 
		И Не ЗначениеЗаполнено(ДанныеСтатуса.ДатаПолученияСтатуса) Тогда
			
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектСправочника = ЭлементСправочника.ПолучитьОбъект();
	Если ЗначениеЗаполнено(ДанныеСтатуса.ДатаПолученияСтатуса) Тогда
		ОбъектСправочника.ДатаОбновленияСтатуса = ДанныеСтатуса.ДатаПолученияСтатуса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеСтатуса, "СтатусВРеестреФНС")) Тогда
		
		Если Не ЗначениеЗаполнено(ОбъектСправочника.СтатусВРеестреФНС)
			И ЗначениеЗаполнено(ОбъектСправочника.ДатаОтзыва) Тогда
			ОбъектСправочника.Отозвана = Ложь;
			ОбъектСправочника.ДатаОтзыва = Дата(1, 1, 1);
		КонецЕсли;
		
		ОбъектСправочника.СтатусВРеестреФНС = ДанныеСтатуса.СтатусВРеестреФНС;
		
		Если ЗначениеЗаполнено(ДанныеСтатуса.ДатаОтзыва) Тогда
			ОбъектСправочника.Отозвана = Истина;
			ОбъектСправочника.ДатаОтзыва = ДанныеСтатуса.ДатаОтзыва;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаписатьОбъектВБазу(ОбъектСправочника);
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Параметры:
//  ДанныеXDTO - ОбъектXDTO
// 
// Возвращаемое значение:
//  Строка
Функция СНИЛСДоверителя(ДанныеXDTO) Экспорт
	
	ВерсияФормата = МашиночитаемыеДоверенности.ВерсияФорматаОбъектаМЧД(ДанныеXDTO);
	ЭтоПередоверие = МашиночитаемыеДоверенности.ЭтоПередоверие(ДанныеXDTO);
	
	ПутьКСвойству = "";
	Если ВерсияФормата = МашиночитаемыеДоверенности.ФорматМЧД_2022_Версия_002() Тогда
		Если Не ЭтоПередоверие Тогда
			ПутьКСвойству = "Документ.Довер.СвДоверит.РосОргДовер.ЛицоБезДов.СвФЛ.СНИЛС";
		Иначе
			ПутьКСвойству = "Документ.Передов.СвЛицПередПолн.ФЛПрдПолн.СвФЛ.СНИЛС";
		КонецЕсли;
	Иначе
		ПутьКСвойству = "Документ.СвДоверит.РосОргДовер.ЛицоБезДов.СвФЛ.СНИЛС";
	КонецЕсли;
	
	СНИЛС = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ДанныеXDTO, ПутьКСвойству, "");
	
	Возврат СНИЛС;
	
КонецФункции

// Ищет доверенности
// 
// Параметры:
//  НомерДоверенности - Строка
//  ВключаяПомеченныеНаУдаление - Булево
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
Функция НайтиДоверенности(НомерДоверенности, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МашиночитаемыеДоверенностиОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенностиОрганизаций
		|ГДЕ
		|	МашиночитаемыеДоверенностиОрганизаций.НомерДоверенности = &НомерДоверенности
		|	И МашиночитаемыеДоверенностиОрганизаций.Подписана
		|	И (&ВключаяПомеченныеНаУдаление	ИЛИ НЕ МашиночитаемыеДоверенностиОрганизаций.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("ВключаяПомеченныеНаУдаление", ВключаяПомеченныеНаУдаление);
	Запрос.УстановитьПараметр("НомерДоверенности", НомерДоверенности);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#Область ЗагрузкаЭлементаСправочника

// Заполняет и записывает элемент справочника.
//
// Параметры:
//  ДанныеДоверенности - см. МашиночитаемыеДоверенности.НовыеДанныеМЧД
//  ОбновлятьСуществующий - Булево - Обновлять существующий
//  ДанныеДляЗагрузки - см. МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляЗагрузкиМЧД
//  ТребуетсяПроверкаМЧДНаКлиенте - Булево - Флаг устанавливается в Истина, 
//                                             если отсутствует возможность проверить подпись МЧД на сервере 
//                                             (в настройках установлена проверка подписи на клиенте) 
//                                             и необходимо выполнить проверку на клиенте.
//  МЧД			- Неопределено
//  			- СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
//  Возвращаемое значение:
//   СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций - Ссылка на элемент справочника.
//
Функция ЗаписатьЭлементСправочника(ДанныеДоверенности, ОбновлятьСуществующий, ДанныеДляЗагрузки,
	ТребуетсяПроверкаМЧДНаКлиенте, МЧД = Неопределено, РезультатПроверкиНаСервере = Неопределено)
	
	Результат = ПустаяСсылка();
	НашлиЭлемент = Неопределено;
	
	Если ЗначениеЗаполнено(МЧД) Тогда
		НашлиЭлемент = МЧД;
	КонецЕсли;
	
	Если ОбновлятьСуществующий И Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		НашлиЭлемент = НайтиПоРеквизиту("НомерДоверенности", ДанныеДоверенности.НомерДоверенности);
	КонецЕсли;
	
	ЭтоНайденнаяНеРеестроваяМЧД = ЗначениеЗаполнено(НашлиЭлемент) 
		И МашиночитаемыеДоверенности.ЭтоНереестроваяМЧД(НашлиЭлемент);
		
	ЗагружаемРеестровуюМЧД = ДанныеДоверенности.Свойство("СтатусВРеестреФНС")
		И ЗначениеЗаполнено(ДанныеДоверенности.СтатусВРеестреФНС);
		
	Если ЭтоНайденнаяНеРеестроваяМЧД И Не ЗагружаемРеестровуюМЧД Тогда
		Возврат НашлиЭлемент;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(НашлиЭлемент) Тогда
		ОбъектСправочника = СоздатьЭлемент();
	Иначе
		ОбъектСправочника = НашлиЭлемент.ПолучитьОбъект();
	КонецЕсли;

	ДанныеДляПроверки = МашиночитаемыеДоверенностиКлиентСервер.НовыеДанныеДляПроверкиМЧД();
	ДанныеДляПроверки.ДанныеДоверенности = ДанныеДляЗагрузки.ДанныеДоверенности;
	ДанныеДляПроверки.ДанныеПодписи = ДанныеДляЗагрузки.ДанныеПодписи;
	
	Если МашиночитаемыеДоверенности.ТребуетсяПерезаполнениеМЧД(ОбъектСправочника, ДанныеДляЗагрузки) Тогда
			
		ПрефиксыРеквизитовДляОчистки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
			"Доверитель, ЛицоБезДов, УдалитьПредставитель");
		Для Каждого СтрокаРеквизита Из ОбъектСправочника.Метаданные().Реквизиты Цикл
			Для каждого ПрефиксРеквизитаДляОчистки Из ПрефиксыРеквизитовДляОчистки Цикл
				Если СтрНачинаетсяС(СтрокаРеквизита.Имя, ПрефиксРеквизитаДляОчистки) Тогда
					ОбъектСправочника[СтрокаРеквизита.Имя] = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// здесь переносим значения реквизитов
		ЗаполнитьЗначенияСвойств(ОбъектСправочника, ДанныеДоверенности, , "Организация");
		Если ЗначениеЗаполнено(ДанныеДоверенности.Организация) Тогда
			ОбъектСправочника.Организация = ДанныеДоверенности.Организация;
		КонецЕсли;
		
		МашиночитаемыеДоверенности.ЗаполнитьРеквизитыОтзыва(ОбъектСправочника, ДанныеДляЗагрузки);
		
		ТабличныеЧасти = Новый Структура;
		ТабличныеЧасти.Вставить("ФИО", ДанныеДоверенности.ФИО);
		ТабличныеЧасти.Вставить("Полномочия", ДанныеДоверенности.Полномочия);
		ТабличныеЧасти.Вставить("УдостоверенияЛичности", ДанныеДоверенности.УдостоверенияЛичности);
		ТабличныеЧасти.Вставить("Представители", ДанныеДоверенности.Представители);
		
		Для Каждого СтрокаТЧ Из ТабличныеЧасти Цикл
			ТекущаяТЧ = ОбъектСправочника[СтрокаТЧ.Ключ];
			ТекущаяТЧ.Очистить();
			Для Каждого НоваяСтрока Из СтрокаТЧ.Значение Цикл
				ДобавленнаяСтрока = ТекущаяТЧ.Добавить();
				Если СтрокаТЧ.Ключ = "Представители" Тогда
					СведенияОПредставителе = СведенияОПредставителеПоДаннымМЧД(НоваяСтрока);
					ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СведенияОПредставителе);
				Иначе
					ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ИзменилсяСтатусВРеестре = ЗагружаемРеестровуюМЧД
		И ДанныеДоверенности.СтатусВРеестреФНС <> ОбъектСправочника.СтатусВРеестреФНС;
		
	Если ИзменилсяСтатусВРеестре Тогда
		ОбъектСправочника.СтатусВРеестреФНС = ДанныеДоверенности.СтатусВРеестреФНС;
	КонецЕсли;
	
	ИзмениласьДатаОтзыва = ЗагружаемРеестровуюМЧД
		И ЗначениеЗаполнено(ДанныеДоверенности.ДатаОтзыва)
		И ДанныеДоверенности.ДатаОтзыва <> ОбъектСправочника.ДатаОтзыва;
		
	Если ИзмениласьДатаОтзыва Тогда
		ОбъектСправочника.ДатаОтзыва = ДанныеДоверенности.ДатаОтзыва;
	КонецЕсли;
	
	Если ЗагружаемРеестровуюМЧД Тогда
		ОбъектСправочника.ДатаОбновленияСтатуса = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МашиночитаемыеДоверенности.ЗаполнитьПодписанаВерна(ОбъектСправочника, ДанныеДляПроверки, ТребуетсяПроверкаМЧДНаКлиенте,,РезультатПроверкиНаСервере);
	
	ОтсутствуетВозможностьПроверитьНаСервере = Не ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере();
	ЭтоПровереннаяРеестроваяМЧД =
		МашиночитаемыеДоверенности.ЭтоПровереннаяРеестроваяМЧД(ДанныеДляПроверки, ДанныеДоверенности);
	
	Если ЭтоПровереннаяРеестроваяМЧД И ОтсутствуетВозможностьПроверитьНаСервере Тогда
		ОбъектСправочника.Верна = Истина;
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСправочника.СтатусВРеестреФНС) 
		И Не ЗначениеЗаполнено(ДанныеДоверенности.СтатусВРеестреФНС) Тогда
		ОбъектСправочника.Верна = Истина;
		ТребуетсяПроверкаМЧДНаКлиенте = Истина;
	КонецЕсли;
	
	ОбъектСправочника.ПолномочияОграничены = МашиночитаемыеДоверенности.ПолномочияОграничены(ДанныеДоверенности);
	
	Удачно = Ложь;
	
	Если ОбъектСправочника.ПроверитьЗаполнение() Тогда
	
		Удачно = ЗаписатьОбъектВБазу(ОбъектСправочника);
	
	КонецЕсли;
	
	Если Удачно Тогда
		Результат = ОбъектСправочника.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ОбъектСправочника - СправочникОбъект.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Булево - Истина в случае успешной записи.
Функция ЗаписатьОбъектВБазу(ОбъектСправочника)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Справочник.МашиночитаемыеДоверенностиОрганизаций");
	Если Не ОбъектСправочника.ЭтоНовый() Тогда
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектСправочника.Ссылка);
	КонецЕсли;

	Удачно = Истина;

	НачатьТранзакцию();

	Попытка
		Блокировка.Заблокировать();
		ОбъектСправочника.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ИмяСобытия = НСтр("ru = 'Ошибка изменения МЧД.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ДанныеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, УровеньЖурналаРегистрации.Ошибка,,, ДанныеОшибки);
		Удачно = Ложь;
	КонецПопытки;
	
	Возврат Удачно;
	
КонецФункции

#КонецОбласти

#Область ВыгрузкаЭлементаСправочника

// Возвращает данные доверенности из информационной базы.
// 
// Параметры:
//  СправочникСсылка - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  Структура:
// * ОКУД - Строка
// * ИдентификаторФайла - Строка
// * СведенияОбИнформационнойСистеме - Строка
// * Номер - Строка
// * ДатаВыдачи - Дата
// * ДатаОкончания - Дата
// * СрокДействия - Дата
// * ВозможноПередоверие - Булево
// * ПредыдущийНомер - Строка
// * ИностраннаяОрганизация - Булево
// * ДоверительЮЛ_ИНН - Строка
// * ДоверительЮЛ_КПП - Строка
// * ДоверительЮЛ_ОГРН - Строка
// * ДоверительЮЛ_СтрРег - СправочникСсылка.СтраныМира
// * ДоверительЮЛ_НаимРегОрг - Строка
// * ДоверительЮЛ_РегНомер - Строка
// * ДоверительЮЛ_Адр - Строка
// * ДоверительФЛ_ИНН - Строка
// * ДоверительФЛ_ОГРН - Строка
// * ДоверительФЛ_СНИЛС - Строка
// * ДоверительФЛ_Гражданство - СправочникСсылка.СтраныМира
// * ДоверительФЛ_Пол - Строка
// * ДоверительФЛ_ДатаРождения - Дата
// * ДоверительФЛ_МестоРожд - Строка
// * ДоверительЮЛ_НаимОрг - Строка
// * ДоверительЮЛ_ТипОрганизации - Строка
// * ЛицоБезДовЮЛ_НаимОрг - Строка
// * ЛицоБезДовЮЛ_ИНН - Строка
// * ЛицоБезДовЮЛ_КПП - Строка
// * ЛицоБезДовЮЛ_ОГРН - Строка
// * ЛицоБезДовФЛ_ИНН - Строка
// * ЛицоБезДовФЛ_СНИЛС - Строка
// * ЛицоБезДовФЛ_Гражданство - СправочникСсылка.СтраныМира
// * ЛицоБезДовФЛ_ДатаРождения - Дата
// * ЛицоБезДовФЛ_Должность - Строка
// * ЛицоБезДовФЛ_ОснованиеПолномочий - Строка
// * ЛицоБезДовФЛ_Имя - Строка
// * ЛицоБезДовФЛ_Отчество - Строка
// * ЛицоБезДовФЛ_Фамилия - Строка
// * ЛицоБезДовФЛ_ВидДок - Строка
// * ЛицоБезДовФЛ_СерДок - Строка
// * ЛицоБезДовФЛ_НомДок - Строка
// * ЛицоБезДовФЛ_ДатаДок - Строка
// * ЛицоБезДовФЛ_ВыдДок - Строка
// * ЛицоБезДовФЛ_КодВыдДок - Строка
// * ПереченьПредставителей - Массив Из Структура:
// 		** ПредставительЮЛ_НаимОрг - Строка
// 		** ПредставительЮЛ_ИНН - Строка
// 		** ПредставительЮЛ_КПП - Строка
// 		** ПредставительЮЛ_ОГРН - Строка
// 		** ПредставительФЛ_ИНН - Строка
// 		** ПредставительФЛ_ОГРН - Строка
// 		** ПредставительФЛ_СНИЛС - Строка
// 		** ПредставительФЛ_Гражданство - СправочникСсылка.СтраныМира
// 		** ПредставительФЛ_ДатаРождения - Дата
// 		** ПредставительЮЛ_Полномочия - Массив из Строка
// 		** ПредставительФЛ_Имя - Строка
// 		** ПредставительФЛ_Отчество - Строка
// 		** ПредставительФЛ_Фамилия - Строка
// 		** ПредставительФЛ_ВидДок - Строка
// 		** ПредставительФЛ_СерДок - Строка
// 		** ПредставительФЛ_НомДок - Строка
// 		** ПредставительФЛ_ДатаДок - Дата
// 		** ПредставительФЛ_ВыдДок - Строка
// 		** ПредставительФЛ_КодВыдДок - Строка
// * ИныеСведения - Строка
Функция ДанныеИзИнформационнойБазы(СправочникСсылка)

	Результат = Новый Структура;
	Результат.Вставить("ОКУД", "0251222");

	ИдентификаторФайла = МашиночитаемыеДоверенности.ПолучитьИмяФайлаМЧД(СправочникСсылка);
	Результат.Вставить("ИдентификаторФайла", ИдентификаторФайла);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиПолномочия.НомерСтроки КАК НомерСтроки,
	|	МашиночитаемыеДоверенностиПолномочия.Ссылка КАК Доверенность,
	|	МашиночитаемыеДоверенностиПолномочия.Код КАК Код,
	|	МашиночитаемыеДоверенностиПолномочия.Описание КАК Описание,
	|	МашиночитаемыеДоверенностиПолномочия.Содержание КАК Содержание,
	|	МашиночитаемыеДоверенностиПолномочия.Пояснение КАК Пояснение
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.Полномочия КАК МашиночитаемыеДоверенностиПолномочия
	|ГДЕ
	|	МашиночитаемыеДоверенностиПолномочия.Ссылка = &СправочникСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиФИО.Владелец КАК Владелец,
	|	МашиночитаемыеДоверенностиФИО.Фамилия КАК Фамилия,
	|	МашиночитаемыеДоверенностиФИО.Имя КАК Имя,
	|	МашиночитаемыеДоверенностиФИО.Отчество КАК Отчество
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.ФИО КАК МашиночитаемыеДоверенностиФИО
	|ГДЕ
	|	МашиночитаемыеДоверенностиФИО.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенности.Организация КАК ОрганизацияМЧД,
	|	МашиночитаемыеДоверенности.НомерДоверенности КАК НомерДоверенности,
	|	МашиночитаемыеДоверенности.ДатаВыдачи КАК ДатаВыдачи,
	|	МашиночитаемыеДоверенности.ДатаОкончания КАК ДатаОкончания,
	|	МашиночитаемыеДоверенности.СрокДействия КАК СрокДействия,
	|	МашиночитаемыеДоверенности.ВозможноПередоверие КАК ВозможноПередоверие,
	|	МашиночитаемыеДоверенности.НомерРодительскойДоверенности КАК НомерРодительскойДоверенности,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ИностраннаяОрганизация КАК ДоверительЮЛ_ИностраннаяОрганизация,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ИНН КАК ДоверительЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_КПП КАК ДоверительЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ОГРН КАК ДоверительЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_СтрРег КАК ДоверительЮЛ_СтрРег,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_НаимРегОрг КАК ДоверительЮЛ_НаимРегОрг,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_РегНомер КАК ДоверительЮЛ_РегНомер,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_Адр КАК ДоверительЮЛ_Адр,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ИНН КАК ДоверительФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ОГРН КАК ДоверительФЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_СНИЛС КАК ДоверительФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_Гражданство КАК ДоверительФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_Пол КАК ДоверительФЛ_Пол,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_ДатаРождения КАК ДоверительФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.ДоверительФЛ_МестоРожд КАК ДоверительФЛ_МестоРожд,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_НаимОрг КАК ДоверительЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_НаимОрг КАК ЛицоБезДовЮЛ_НаимОрг,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_ИНН КАК ЛицоБезДовЮЛ_ИНН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_КПП КАК ЛицоБезДовЮЛ_КПП,
	|	МашиночитаемыеДоверенности.ЛицоБезДовЮЛ_ОГРН КАК ЛицоБезДовЮЛ_ОГРН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ИНН КАК ЛицоБезДовФЛ_ИНН,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_СНИЛС КАК ЛицоБезДовФЛ_СНИЛС,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_Гражданство КАК ЛицоБезДовФЛ_Гражданство,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ДатаРождения КАК ЛицоБезДовФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_Должность КАК ЛицоБезДовФЛ_Должность,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_ОснованиеПолномочий КАК ЛицоБезДовФЛ_ОснованиеПолномочий,
	|	МашиночитаемыеДоверенности.СведенияОбИнформационнойСистеме КАК СведенияОбИнформационнойСистеме
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенности
	|ГДЕ
	|	МашиночитаемыеДоверенности.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.Владелец КАК Владелец,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ВидДок КАК ВидДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.СерДок КАК СерДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.НомДок КАК НомДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ДатаДок КАК ДатаДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.ВыдДок КАК ВыдДок,
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.КодВыдДок КАК КодВыдДок
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.УдостоверенияЛичности КАК МашиночитаемыеДоверенностиУдостоверенияЛичности
	|ГДЕ
	|	МашиночитаемыеДоверенностиУдостоверенияЛичности.Ссылка = &СправочникСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ДокументВид КАК ДокументВид,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ДокументКемВыдан КАК ДокументКемВыдан,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ДокументКодПодразделения КАК ДокументКодПодразделения,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ДокументНомер КАК ДокументНомер,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ДокументСерия КАК ДокументСерия,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_ДатаРождения КАК ФЛ_ДатаРождения,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_Гражданство КАК ФЛ_Гражданство,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_Имя КАК Имя,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_ИНН КАК ФЛ_ИНН,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_ОГРН КАК ФЛ_ОГРН,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_Отчество КАК Отчество,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_СНИЛС КАК ФЛ_СНИЛС,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ФЛ_Фамилия КАК Фамилия,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ЮЛ_ИНН КАК ЮЛ_ИНН,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ЮЛ_КПП КАК ЮЛ_КПП,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ЮЛ_Наименование КАК ЮЛ_Наименование,
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.ЮЛ_ОГРН КАК ЮЛ_ОГРН
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций.Представители КАК МашиночитаемыеДоверенностиОрганизацийПредставители
	|ГДЕ
	|	МашиночитаемыеДоверенностиОрганизацийПредставители.Ссылка = &СправочникСсылка";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СправочникСсылка", СправочникСсылка);

	УстановитьПривилегированныйРежим(Истина);
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);

	ВыборкаПолномочий = ПакетЗапросов[0].Выбрать();

	Полномочия = Новый Массив;
	Пока ВыборкаПолномочий.Следующий() Цикл
		СтруктураПолномочий = МашиночитаемыеДоверенности.НовыеПолномочияПредставителя();
		ЗаполнитьЗначенияСвойств(СтруктураПолномочий, ВыборкаПолномочий);
		Полномочия.Добавить(СтруктураПолномочий);
	КонецЦикла;
	
	ВыборкаПодписантов = ПакетЗапросов[1].Выгрузить();
	ВыборкаДокументов = ПакетЗапросов[3].Выгрузить();
	
	ВыборкаПредставителей = ПакетЗапросов[4].Выбрать();

	ПустойПодписант = Новый Структура("Имя, Отчество, Фамилия", "", "", "");

	ПустойДокумент = Новый Структура;
	ПустойДокумент.Вставить("ВидДок", "");
	ПустойДокумент.Вставить("СерДок", "");
	ПустойДокумент.Вставить("НомДок", "");
	ПустойДокумент.Вставить("ДатаДок", "");
	ПустойДокумент.Вставить("ВыдДок", "");
	ПустойДокумент.Вставить("КодВыдДок", "");

	ВыборкаИнформации = ПакетЗапросов[2].Выбрать();

	Если ВыборкаИнформации.Следующий() Тогда

		Результат.Вставить("СведенияОбИнформационнойСистеме", ВыборкаИнформации.СведенияОбИнформационнойСистеме);

		Результат.Вставить("Номер", ВыборкаИнформации.НомерДоверенности);
		Результат.Вставить("ДатаВыдачи", ВыборкаИнформации.ДатаВыдачи);
		Результат.Вставить("ДатаОкончания", ВыборкаИнформации.ДатаОкончания);
		Результат.Вставить("СрокДействия", ВыборкаИнформации.СрокДействия);
		Результат.Вставить("ВозможноПередоверие", ВыборкаИнформации.ВозможноПередоверие);
		Результат.Вставить("ПредыдущийНомер", ВыборкаИнформации.НомерРодительскойДоверенности);		
		
		// информация об доверителе
		Результат.Вставить("ИностраннаяОрганизация", ВыборкаИнформации.ДоверительЮЛ_ИностраннаяОрганизация);
		Результат.Вставить("ДоверительЮЛ_ИНН", ВыборкаИнформации.ДоверительЮЛ_ИНН);
		Результат.Вставить("ДоверительЮЛ_КПП", ВыборкаИнформации.ДоверительЮЛ_КПП);
		Результат.Вставить("ДоверительЮЛ_ОГРН", ВыборкаИнформации.ДоверительЮЛ_ОГРН);
		Результат.Вставить("ДоверительЮЛ_СтрРег", ВыборкаИнформации.ДоверительЮЛ_СтрРег);
		Результат.Вставить("ДоверительЮЛ_НаимРегОрг", ВыборкаИнформации.ДоверительЮЛ_НаимРегОрг);
		Результат.Вставить("ДоверительЮЛ_РегНомер", ВыборкаИнформации.ДоверительЮЛ_РегНомер);
		Результат.Вставить("ДоверительЮЛ_Адр", ВыборкаИнформации.ДоверительЮЛ_Адр);
		Результат.Вставить("ДоверительФЛ_ИНН", ВыборкаИнформации.ДоверительФЛ_ИНН);
		Результат.Вставить("ДоверительФЛ_ОГРН", ВыборкаИнформации.ДоверительФЛ_ОГРН);
		Результат.Вставить("ДоверительФЛ_СНИЛС", ВыборкаИнформации.ДоверительФЛ_СНИЛС);
		Результат.Вставить("ДоверительФЛ_Гражданство", ВыборкаИнформации.ДоверительФЛ_Гражданство);
		Результат.Вставить("ДоверительФЛ_Пол", ВыборкаИнформации.ДоверительФЛ_Пол);
		Результат.Вставить("ДоверительФЛ_ДатаРождения", ВыборкаИнформации.ДоверительФЛ_ДатаРождения);
		Результат.Вставить("ДоверительФЛ_МестоРожд", ВыборкаИнформации.ДоверительФЛ_МестоРожд);
		Результат.Вставить("ДоверительЮЛ_НаимОрг", ВыборкаИнформации.ДоверительЮЛ_НаимОрг);

		ТипОрганизации = "";			
		Если Результат.ИностраннаяОрганизация Тогда
			ТипОрганизации = "ИО";
		Иначе				
			Если ИнтеграцияЭДО.ЭтоФизЛицо(ВыборкаИнформации.ОрганизацияМЧД) Тогда
				Если ПустаяСтрока(ВыборкаИнформации.ДоверительФЛ_ОГРН) Тогда
					ТипОрганизации = "ФЛ";
				Иначе	
					ТипОрганизации = "ИП";
				КонецЕсли;
			Иначе
				ТипОрганизации = "ЮЛ";
			КонецЕсли;
		КонецЕсли;
		Результат.Вставить("ДоверительЮЛ_ТипОрганизации", ТипОрганизации);			
		
		// информация об подписанте
		Результат.Вставить("ЛицоБезДовЮЛ_НаимОрг", ВыборкаИнформации.ЛицоБезДовЮЛ_НаимОрг);
		Результат.Вставить("ЛицоБезДовЮЛ_ИНН", ВыборкаИнформации.ЛицоБезДовЮЛ_ИНН);
		Результат.Вставить("ЛицоБезДовЮЛ_КПП", ВыборкаИнформации.ЛицоБезДовЮЛ_КПП);
		Результат.Вставить("ЛицоБезДовЮЛ_ОГРН", ВыборкаИнформации.ЛицоБезДовЮЛ_ОГРН);
		Результат.Вставить("ЛицоБезДовФЛ_ИНН", ВыборкаИнформации.ЛицоБезДовФЛ_ИНН);
		Результат.Вставить("ЛицоБезДовФЛ_СНИЛС", ВыборкаИнформации.ЛицоБезДовФЛ_СНИЛС);
		Результат.Вставить("ЛицоБезДовФЛ_Гражданство", ВыборкаИнформации.ЛицоБезДовФЛ_Гражданство);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаРождения", ВыборкаИнформации.ЛицоБезДовФЛ_ДатаРождения);
		Результат.Вставить("ЛицоБезДовФЛ_Должность", ВыборкаИнформации.ЛицоБезДовФЛ_Должность);
		Результат.Вставить("ЛицоБезДовФЛ_ОснованиеПолномочий", ВыборкаИнформации.ЛицоБезДовФЛ_ОснованиеПолномочий);

		Если Результат.ДоверительЮЛ_ТипОрганизации = "ФЛ" ИЛИ Результат.ДоверительЮЛ_ТипОрганизации = "ИП" Тогда
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец",
				Перечисления.СубъектыДоверенности.ДоверительФЛ));
		Иначе
			НашлиСтроки = ВыборкаПодписантов.НайтиСтроки(Новый Структура("Владелец",
				Перечисления.СубъектыДоверенности.ДоверительРук));
		КонецЕсли;

		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиФИО = ПустойПодписант;
		Иначе
			НашлиФИО = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_Имя", НашлиФИО.Имя);
		Результат.Вставить("ЛицоБезДовФЛ_Отчество", НашлиФИО.Отчество);
		Результат.Вставить("ЛицоБезДовФЛ_Фамилия", НашлиФИО.Фамилия);

		НашлиСтроки = ВыборкаДокументов.НайтиСтроки(Новый Структура("Владелец",
			Перечисления.СубъектыДоверенности.ДоверительФЛ));
		Если НашлиСтроки.Количество() = 0 Тогда
			НашлиДок = ПустойДокумент;
		Иначе
			НашлиДок = НашлиСтроки[0];
		КонецЕсли;

		Результат.Вставить("ЛицоБезДовФЛ_ВидДок", НашлиДок.ВидДок);
		Результат.Вставить("ЛицоБезДовФЛ_СерДок", НашлиДок.СерДок);
		Результат.Вставить("ЛицоБезДовФЛ_НомДок", НашлиДок.НомДок);
		Результат.Вставить("ЛицоБезДовФЛ_ДатаДок", НашлиДок.ДатаДок);
		Результат.Вставить("ЛицоБезДовФЛ_ВыдДок", НашлиДок.ВыдДок);
		Результат.Вставить("ЛицоБезДовФЛ_КодВыдДок", НашлиДок.КодВыдДок);
		
		Результат.Вставить("Полномочия", Полномочия);
		
		// информация о представителе
		
		ПереченьПредставителей = Новый Массив;
		Пока ВыборкаПредставителей.Следующий() Цикл
			
			ДанныеПредставителя = Новый Структура;
			ДанныеПредставителя.Вставить("ПредставительЮЛ_НаимОрг", 	 ВыборкаПредставителей.ЮЛ_Наименование);
			ДанныеПредставителя.Вставить("ПредставительЮЛ_ИНН", 		 ВыборкаПредставителей.ЮЛ_ИНН);
			ДанныеПредставителя.Вставить("ПредставительЮЛ_КПП", 		 ВыборкаПредставителей.ЮЛ_КПП);
			ДанныеПредставителя.Вставить("ПредставительЮЛ_ОГРН", 		 ВыборкаПредставителей.ЮЛ_ОГРН);
			ДанныеПредставителя.Вставить("ПредставительФЛ_ИНН", 		 ВыборкаПредставителей.ФЛ_ИНН);
			ДанныеПредставителя.Вставить("ПредставительФЛ_ОГРН", 		 ВыборкаПредставителей.ФЛ_ОГРН);
			ДанныеПредставителя.Вставить("ПредставительФЛ_СНИЛС", 		 ВыборкаПредставителей.ФЛ_СНИЛС);
			ДанныеПредставителя.Вставить("ПредставительФЛ_Гражданство",  ВыборкаПредставителей.ФЛ_Гражданство);
			ДанныеПредставителя.Вставить("ПредставительФЛ_ДатаРождения", ВыборкаПредставителей.ФЛ_ДатаРождения);

			ДанныеПредставителя.Вставить("ПредставительФЛ_Фамилия", 	 ВыборкаПредставителей.Фамилия);
			ДанныеПредставителя.Вставить("ПредставительФЛ_Имя", 		 ВыборкаПредставителей.Имя);
			ДанныеПредставителя.Вставить("ПредставительФЛ_Отчество", 	 ВыборкаПредставителей.Отчество);

			ДанныеПредставителя.Вставить("ПредставительФЛ_ВидДок", 		 ВыборкаПредставителей.ДокументВид);
			ДанныеПредставителя.Вставить("ПредставительФЛ_СерДок", 		 ВыборкаПредставителей.ДокументСерия);
			ДанныеПредставителя.Вставить("ПредставительФЛ_НомДок", 		 ВыборкаПредставителей.ДокументНомер);
			ДанныеПредставителя.Вставить("ПредставительФЛ_ДатаДок", 	 ВыборкаПредставителей.ДокументДатаВыдачи);
			ДанныеПредставителя.Вставить("ПредставительФЛ_ВыдДок", 		 ВыборкаПредставителей.ДокументКемВыдан);
			ДанныеПредставителя.Вставить("ПредставительФЛ_КодВыдДок", 	 ВыборкаПредставителей.ДокументКодПодразделения);
			
			ДанныеПредставителя.Вставить("ТипПредставителя", "ФЛ");
			
			Если ЗначениеЗаполнено(ВыборкаПредставителей.ЮЛ_ИНН) 
				И ЗначениеЗаполнено(ВыборкаПредставителей.ЮЛ_ОГРН) Тогда
				ДанныеПредставителя.ТипПредставителя = "ЮЛ";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВыборкаПредставителей.ФЛ_ОГРН) Тогда
				ДанныеПредставителя.ТипПредставителя = "ИП";
			КонецЕсли;
			
			ПереченьПредставителей.Добавить(ДанныеПредставителя);
			
		КонецЦикла;
		
		Результат.Вставить("ПереченьПредставителей", ПереченьПредставителей);
		
	КонецЕсли;

	Результат.Вставить("ИныеСведения", "");

	Возврат Результат;

КонецФункции

// Возвращает сконвертированные данные доверенности в строку XML.
// 
// Параметры:
//  ДанныеДоверенности - См. МашиночитаемыеДоверенности.НовыеДанныеМЧД
// 
// Возвращаемое значение:
//  Строка - строка XML из данных XML
Функция ДанныеДоверенностиВСтрокуXMLВерсия002(ДанныеДоверенности)

	Ошибки = Неопределено;
	ПространствоИмен = МашиночитаемыеДоверенности.ФорматМЧД_2022_Версия_002();

	Доверенность = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ВерсФорм", "002", Истина, Ошибки); 
	
	ИдФайл = СтрШаблон("ON_DOVBB_%1_%2",
		Формат(ТекущаяДатаСеанса(), "ДФ=yyyyMMdd"),
		ДанныеДоверенности.Номер);	
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИдФайл", ИдФайл, Истина, Ошибки);

	Документ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "ОКУД", ДанныеДоверенности.ОКУД, Истина, Ошибки);
	
	Довер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер", ПространствоИмен);
		
	// формирование раздела Сведения о доверенности
	СвДов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДов", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "НомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаВыдДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаКонДовер", ДанныеДоверенности.ДатаОкончания, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ПрПередов", ?(ДанныеДоверенности.ВозможноПередоверие, "1", "2"),
		Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ПрСовмПолн", "1", Истина, Ошибки); // полномочия совместные	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ВнНомДовер", ДанныеДоверенности.Номер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "ДатаВнРегДовер", ДанныеДоверенности.ДатаВыдачи, Истина, Ошибки);

	Безотзыв = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДов.Безотзыв", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "ПрБезотзыв", "1", Истина, Ошибки); // отзыв возможен
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Безотзыв, "УслОтзыва", "1", Истина, Ошибки); // по истечению срока действия
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "Безотзыв", Безотзыв, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДов, "СведСистОтм", ДанныеДоверенности.СведенияОбИнформационнойСистеме,
		Истина, Ошибки);
		
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Довер, "СвДов", СвДов, Ложь, Ошибки);
	
	// формирование раздела Сведения о доверителе
	СвДоверит = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ТипДовер", ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации,
		Истина, Ошибки);

	ЛицоБезДовФЛ_Фамилия = ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия;
	ЛицоБезДовФЛ_Имя = ДанныеДоверенности.ЛицоБезДовФЛ_Имя;
	ЛицоБезДовФЛ_Отчество = ДанныеДоверенности.ЛицоБезДовФЛ_Отчество;

	Если ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИО" Тогда

		ИнОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ИнОргДовер", 
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимИО", ДанныеДоверенности.ДоверительЮЛ_НаимОрг, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СтрРег", ДанныеДоверенности.ДоверительЮЛ_СтрРег, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "НаимРегОрг", ДанныеДоверенности.ДоверительЮЛ_НаимРегОрг,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "РегНомер", ДанныеДоверенности.ДоверительЮЛ_РегНомер,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "АдрСтрРег", ДанныеДоверенности.ДоверительЮЛ_Адр, 
			Истина, Ошибки);

		СвРукОП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ИнОргДовер.СвРукОП",
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "НаимДокПолн", "_", Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
			Истина, Ошибки);
		
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРукОП, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнОргДовер, "СвРукОП", СвРукОП, Истина, Ошибки);
		СвДоверит.ИнОргДовер.Добавить(ИнОргДовер);

	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ЮЛ" Тогда

		РосОргДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер", 
			ПространствоИмен);
			
		СвРосОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер.СвРосОрг", 
			ПространствоИмен);	
			
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "НаимОрг", ДанныеДоверенности.ДоверительЮЛ_НаимОрг,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "ОГРН", ДанныеДоверенности.ДоверительЮЛ_ОГРН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "ИННЮЛ", ДанныеДоверенности.ДоверительЮЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "КПП", ДанныеДоверенности.ДоверительЮЛ_КПП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "АдрРФ", ДанныеДоверенности.ДоверительЮЛ_Адр, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "АдрМНФакт", "_", 
			Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "НаимУчрДок", "_", 
			Истина, Ошибки);	
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвРосОрг, "Тлф", "_", 
			Истина, Ошибки);

		ЛицоБезДов = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер.ЛицоБезДов",
			ПространствоИмен);

		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН) Тогда
			СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", ДанныеДоверенности.ЛицоБезДовЮЛ_НаимОрг, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", ДанныеДоверенности.ЛицоБезДовЮЛ_ИНН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", ДанныеДоверенности.ЛицоБезДовЮЛ_КПП, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", ДанныеДоверенности.ЛицоБезДовЮЛ_ОГРН, 
				Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЛицоБезДов, "СвОрг", СвОрг, Истина, Ошибки);
		КонецЕсли;

		СвФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.РосОргДовер.ЛицоБезДов.СвФЛ",
			ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеДоверенности.ЛицоБезДовФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "СНИЛС", ДанныеДоверенности.ЛицоБезДовФЛ_СНИЛС, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "Должность", ДанныеДоверенности.ЛицоБезДовФЛ_Должность, 
			Истина, Ошибки);
			
		ОснованиеПолномочий = "_";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_ОснованиеПолномочий) Тогда
			ОснованиеПолномочий = ДанныеДоверенности.ЛицоБезДовФЛ_ОснованиеПолномочий;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "НаимДокПолн", ОснованиеПолномочий, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ЛицоБезДовФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ЛицоБезДовФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство) Тогда
			ЛицоБезДовФЛ_Гражданство = ДанныеДоверенности.ЛицоБезДовФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ЛицоБезДовФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвФЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ЛицоБезДов, "СвФЛ", СвФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "СвРосОрг", СвРосОрг, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(РосОргДовер, "ЛицоБезДов", ЛицоБезДов, Истина, Ошибки); 
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "РосОргДовер", РосОргДовер, Истина, Ошибки);

	ИначеЕсли ДанныеДоверенности.ДоверительЮЛ_ТипОрганизации = "ИП" Тогда

		ИПДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ИПДовер", ПространствоИмен);
		ЧастиФИО = Новый Массив;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Фамилия);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Имя) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Имя);
		КонецЕсли;
		Если Не ПустаяСтрока(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество) Тогда
			ЧастиФИО.Добавить(ДанныеДоверенности.ЛицоБезДовФЛ_Отчество);
		КонецЕсли;
		НаименованиеИП = СтрСоединить(ЧастиФИО, " ");
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "НаимИП", НаименованиеИП, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "ОГРНИП", ДанныеДоверенности.ДоверительФЛ_ОГРН, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, 
			Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		Если Не ПустаяСтрока(ДанныеДоверенности.ДоверительФЛ_МестоРожд) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
				Истина, Ошибки);
		КонецЕсли;

		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИПДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ИПДовер", ИПДовер, Истина, Ошибки);

	Иначе

		ФЛДовер = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвДоверит.ФЛДовер", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ПрДеесп", "1", Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "ИННФЛ", ДанныеДоверенности.ДоверительФЛ_ИНН, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СНИЛС", ДанныеДоверенности.ДоверительФЛ_СНИЛС, Истина, Ошибки);

		СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", ДанныеДоверенности.ДоверительФЛ_ДатаРождения,
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", ДанныеДоверенности.ДоверительФЛ_МестоРожд, 
			Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
		
		Если ДанныеДоверенности.ДоверительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
		ИначеЕсли ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
		Иначе
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
		КонецЕсли;

		ДоверительФЛ_Гражданство = "";
		Если ЗначениеЗаполнено(ДанныеДоверенности.ДоверительФЛ_Гражданство) Тогда
			ДоверительФЛ_Гражданство = ДанныеДоверенности.ДоверительФЛ_Гражданство.Код;
		КонецЕсли;
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ДоверительФЛ_Гражданство, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФЛДовер, "СведФЛ", СведФЛ, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "ФЛДовер", ФЛДовер, Истина, Ошибки);

	КонецЕсли;

	Подписант = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Фамилия", ЛицоБезДовФЛ_Фамилия, Истина, Ошибки);
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Имя) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Имя", ЛицоБезДовФЛ_Имя, Ложь, Ошибки);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЛицоБезДовФЛ_Отчество) Тогда
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Подписант, "Отчество", ЛицоБезДовФЛ_Отчество, Ложь, Ошибки);
	КонецЕсли; 
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвДоверит, "Подписант", Подписант, Истина, Ошибки);
	Довер.СвДоверит.Добавить(СвДоверит);
	
	// формирование раздела Сведения об уполномоченном представителе
	
	Для Каждого Представитель Из ДанныеДоверенности.ПереченьПредставителей Цикл
		
		СвУпПред = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "ТипПред", Представитель.ТипПредставителя, Истина, Ошибки);
		
		Если Не ПустаяСтрока(Представитель.ПредставительЮЛ_ИНН) Тогда
			
			Если Представитель.ТипПредставителя = "ИП" Тогда
				
				СведИП = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СведИП", 
				ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "НаимИП", Представитель.ПредставительЮЛ_НаимОрг,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ИННФЛ", Представитель.ПредставительЮЛ_ИНН, 
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ОГРНИП", Представитель.ПредставительЮЛ_ОГРН, 
				Истина, Ошибки);
				
				ПредставительФЛ_Фамилия = Представитель.ПредставительФЛ_Фамилия;
				ПредставительФЛ_Имя = Представитель.ПредставительФЛ_Имя;
				ПредставительФЛ_Отчество = Представитель.ПредставительФЛ_Отчество;
				
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
				Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "ФИО", ФИО, Истина, Ошибки);
				
				СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", Представитель.ПредставительФЛ_ДатаРождения,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
				
				Если Представитель.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
				ИначеЕсли ЗначениеЗаполнено(Представитель.ПредставительФЛ_Гражданство) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
				Иначе
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
				КонецЕсли;
				
				ПредставительФЛ_Гражданство = "";
				Если ЗначениеЗаполнено(Представитель.ПредставительФЛ_Гражданство) Тогда
					ПредставительФЛ_Гражданство = Представитель.ПредставительФЛ_Гражданство.Код;
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведИП, "СведФЛ", СведФЛ, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "СведИП", СведИП, Истина, Ошибки);
				
			Иначе
				
				УзелСвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СвОрг", ПространствоИмен);
				СвОрг = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СвОргТип", ПространствоИмен);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимОрг", Представитель.ПредставительЮЛ_НаимОрг,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ИННЮЛ", Представитель.ПредставительЮЛ_ИНН, 
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КПП", Представитель.ПредставительЮЛ_КПП, 
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "ОГРН", Представитель.ПредставительЮЛ_ОГРН, 
				Истина, Ошибки);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "НаимУчрДок", "_", Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "КонтактТлф", "_", Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвОрг, "РегНомер", "_", Истина, Ошибки);
				
				СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФизЛТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", Представитель.ПредставительФЛ_ИНН, 
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", Представитель.ПредставительФЛ_СНИЛС, 
				Истина, Ошибки);
				
				ПредставительФЛ_Фамилия = Представитель.ПредставительФЛ_Фамилия;
				ПредставительФЛ_Имя = Представитель.ПредставительФЛ_Имя;
				ПредставительФЛ_Отчество = Представитель.ПредставительФЛ_Отчество;
				
				ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
				Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
				КонецЕсли;
				Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
				КонецЕсли;
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);
				
				СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", Представитель.ПредставительФЛ_ДатаРождения,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
				
				Если Представитель.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
				ИначеЕсли ЗначениеЗаполнено(Представитель.ПредставительФЛ_Гражданство) Тогда
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
				Иначе
					РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
				КонецЕсли;
				
				ПредставительФЛ_Гражданство = "";
				Если ЗначениеЗаполнено(Представитель.ПредставительФЛ_Гражданство) Тогда
					ПредставительФЛ_Гражданство = Представитель.ПредставительФЛ_Гражданство.Код;
				КонецЕсли;
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
				
				УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", Представитель.ПредставительФЛ_ВидДок,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(Представитель.ПредставительФЛ_СерДок
				+ " " + Представитель.ПредставительФЛ_НомДок), Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", Представитель.ПредставительФЛ_ДатаДок,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", Представитель.ПредставительФЛ_ВыдДок, 
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", Представитель.ПредставительФЛ_КодВыдДок,
				Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УзелСвОрг, "СвОрг", СвОрг, Истина, Ошибки);
				УзелСвОрг.СвФЛ.Добавить(СведФизЛ);
				
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "СвОрг", УзелСвОрг, Истина, Ошибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Представитель.ПредставительФЛ_ИНН) И Представитель.ТипПредставителя = "ФЛ" Тогда
			
			СведФизЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвУпПред.СведФизЛ", 
			ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ИННФЛ", Представитель.ПредставительФЛ_ИНН, 
			Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СНИЛС", Представитель.ПредставительФЛ_СНИЛС, 
			Истина, Ошибки);
			
			ПредставительФЛ_Фамилия = Представитель.ПредставительФЛ_Фамилия;
			ПредставительФЛ_Имя = Представитель.ПредставительФЛ_Имя;
			ПредставительФЛ_Отчество = Представитель.ПредставительФЛ_Отчество;
			
			ФИО = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("ФИОТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", ПредставительФЛ_Фамилия, Истина, Ошибки);
			Если НЕ ПустаяСтрока(ПредставительФЛ_Имя) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Имя", ПредставительФЛ_Имя, Ложь, Ошибки);
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПредставительФЛ_Отчество) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ФИО, "Отчество", ПредставительФЛ_Отчество, Ложь, Ошибки);
			КонецЕсли;
			
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "ФИО", ФИО, Истина, Ошибки);
			
			СведФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("СведФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ДатаРожд", Представитель.ПредставительФЛ_ДатаРождения,
			Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "МестоРожд", "_", Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "КонтактТлф", "_", Истина, Ошибки);
			
			Если Представитель.ПредставительФЛ_Гражданство = Справочники.СтраныМира.Россия Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "1", Истина, Ошибки);
			ИначеЕсли ЗначениеЗаполнено(Представитель.ПредставительФЛ_Гражданство) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "2", Истина, Ошибки);
			Иначе
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "ПрГражд", "3", Истина, Ошибки);
			КонецЕсли;
			
			ПредставительФЛ_Гражданство = "";
			Если ЗначениеЗаполнено(Представитель.ПредставительФЛ_Гражданство) Тогда
				ПредставительФЛ_Гражданство = Представитель.ПредставительФЛ_Гражданство.Код;
			КонецЕсли;
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "Гражданство", ПредставительФЛ_Гражданство, Истина, Ошибки);
			
			УдЛичнФЛ = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("УдЛичнФЛТип", ПространствоИмен);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВидДок", Представитель.ПредставительФЛ_ВидДок,
			Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "СерНомДок", СокрЛП(Представитель.ПредставительФЛ_СерДок
			+ " " + Представитель.ПредставительФЛ_НомДок), Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ДатаДок", Представитель.ПредставительФЛ_ДатаДок,
			Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "ВыдДок", Представитель.ПредставительФЛ_ВыдДок, 
			Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(УдЛичнФЛ, "КодВыдДок", Представитель.ПредставительФЛ_КодВыдДок,
			Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФЛ, "УдЛичнФЛ", УдЛичнФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СведФизЛ, "СведФЛ", СведФЛ, Истина, Ошибки);
			РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвУпПред, "СведФизЛ", СведФизЛ, Истина, Ошибки);
			
		КонецЕсли;
		
		Довер.СвУпПред.Добавить(СвУпПред);
		
	КонецЦикла;
	
	// формирование раздела Сведения о полномочиях представителя (представителей)
	
	Если ДанныеДоверенности.Полномочия.Количество() = 0 Тогда
		
		СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.СвПолн", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн",
			МашиночитаемыеДоверенностиКлиентСервер.ПредставлениеНеограниченныхПолномочий(), Истина, Ошибки);
		Документ.СвПолн.Добавить(СвПолн);
	
	Иначе
		
		Для Каждого Полномочие Из ДанныеДоверенности.Полномочия Цикл
			
			СвПолн = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.Документ.Довер.СвПолн", ПространствоИмен);
			
			Если НЕ ПустаяСтрока(Полномочие.Код) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "КодПолн", Полномочие.Код, Истина, Ошибки);
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(Полномочие.Описание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ТекстПолн", Полномочие.Описание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Содержание) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "СодержПолн", Полномочие.Содержание, Истина, Ошибки);
			КонецЕсли;

			Если НЕ ПустаяСтрока(Полномочие.Пояснение) Тогда
				РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(СвПолн, "ДопТекстПолн", Полномочие.Пояснение, Истина, Ошибки);
			КонецЕсли;
			
			Довер.СвПолн.Добавить(СвПолн);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Документ, "Довер", Довер, Истина, Ошибки);
	РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "Документ", Документ, Истина, Ошибки);
	
	// Иные сведения по соглашению участников электронного взаимодействия
	// и по требованиям федеральных органов исполнительной власти.
	Если Не ПустаяСтрока(ДанныеДоверенности.ИныеСведения) Тогда
		ИнСвед = РаботаСФайламиБЭД.ПолучитьОбъектТипаCML("Доверенность.ИнСвед", ПространствоИмен);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(ИнСвед, "ИнСвед", ДанныеДоверенности.ИныеСведения, Истина, Ошибки);
		РаботаСФайламиБЭД.ЗаполнитьСвойствоXDTO(Доверенность, "ИнСвед", ИнСвед, Истина, Ошибки);
	КонецЕсли;

	СтрокаXML = "";

	Попытка

		Если ЗначениеЗаполнено(Ошибки) Тогда
			ТекстОшибки = ОбщегоНазначенияБЭД.СоединитьОшибки(Ошибки);
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;

		ДвоичныеДанныеXML = РаботаСФайламиБЭД.XDTOВДвоичныеДанные(Доверенность, Ложь);
		ДвоичныеДанныеXML = ОбщегоНазначенияБЭД.УдалитьПространствоИмен(ДвоичныеДанныеXML, ПространствоИмен);
		СтрокаXML = ПолучитьСтрокуИзДвоичныхДанных(ДвоичныеДанныеXML, "windows-1251");

	Исключение

		ВидОперации = НСтр("ru = 'Формирование xml по данным МЧД.'");
		ПодробныйТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронноеВзаимодействие.ОбработатьОшибку(ВидОперации, ПодробныйТекстОшибки);
		ВызватьИсключение НСтр("ru = 'Ошибка формата МЧД. Проверьте введенные данные.'");

	КонецПопытки;

	Возврат СтрокаXML;

КонецФункции	

#КонецОбласти

// Формирует данные доверенности для транспортного контейнера.
// 
// Параметры:
//  Доверенность - СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
//               - СправочникСсылка.МЧД003
// 
// Возвращаемое значение:
//  См. ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности
Функция ДанныеДоверенностиДляКонтейнера(Доверенность) Экспорт
	
	ИмяФайлаБезРасширения = МашиночитаемыеДоверенности.ПолучитьИмяФайлаМЧД(Доверенность);
	Реквизиты = "XMLфайлМЧД, ЭлектроннаяПодпись, ДатаВыдачи, ДатаОкончания, СтатусВРеестреФНС,
		|НомерДоверенности, ДоверительЮЛ_ИНН, ДоверительФЛ_ИНН, СведенияОбИнформационнойСистеме";
	СвойстваДоверенности = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Доверенность, Реквизиты);
	
	ДанныеДоверенности = ТранспортныеКонтейнерыЭДО.НовоеОписаниеДанныхДоверенности();
	
	Если ЗначениеЗаполнено(СвойстваДоверенности.СтатусВРеестреФНС)
		И СвойстваДоверенности.СтатусВРеестреФНС <> Перечисления.СтатусыМашиночитаемойДоверенностиВРеестреФНС.ОшибкаРегистрации Тогда
			
		ДанныеДоверенности.СсылкаНаРеестр = СвойстваДоверенности.СведенияОбИнформационнойСистеме;
		ДанныеДоверенности.СсылкаНаДоверенностьВРеестре = 
			МашиночитаемыеДоверенности.СсылкаНаДоверенностьВРаспределенномРеестреФНС(
				СвойстваДоверенности.НомерДоверенности);
	Иначе
		ДанныеДоверенности.ЭтоФайловаяДоверенность = Истина;
		ДанныеДоверенности.Доверенность.ДвоичныеДанные = СвойстваДоверенности.XMLфайлМЧД.Получить();
		ДанныеДоверенности.Доверенность.ИмяФайла = ИмяФайлаБезРасширения + ".xml";
		ДанныеДоверенности.Подпись.ДвоичныеДанные = СвойстваДоверенности.ЭлектроннаяПодпись.Получить();
		ДанныеДоверенности.Подпись.ИмяФайла = ИмяФайлаБезРасширения + ".p7s";
	КонецЕсли;
	
	ДанныеДоверенности.НомерДоверенности = СвойстваДоверенности.НомерДоверенности;
	ДанныеДоверенности.ДоверительИНН =
		Макс(СвойстваДоверенности.ДоверительЮЛ_ИНН, СвойстваДоверенности.ДоверительФЛ_ИНН);	
	ДанныеДоверенности.ДатаВыдачи = СвойстваДоверенности.ДатаВыдачи;
	ДанныеДоверенности.ДатаОкончания = СвойстваДоверенности.ДатаОкончания;
	
	Возврат ДанныеДоверенности;
	
КонецФункции

// Параметры:
//  ИмяВременнойТаблицы - Строка
//  Доверенности - Массив из СправочникСсылка.МашиночитаемыеДоверенностиОрганизаций
// 
// Возвращаемое значение:
//  См. ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса
Функция ЗапросМЧДДляПодписания(ИмяВременнойТаблицы, Доверенности) Экспорт

	ОписаниеЗапроса = ОбщегоНазначенияБЭД.НовоеОписаниеЗапроса();

	МеткаВременнойТаблицы = "ПОМЕСТИТЬ ИмяВременнойТаблицы";
	ЗначениеВременнойТаблицы = "";
	Если ЗначениеЗаполнено(ИмяВременнойТаблицы) Тогда
		ЗначениеВременнойТаблицы = СтрЗаменить(МеткаВременнойТаблицы, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	КонецЕсли;

	ТекстыЗапросов = Новый Массив;

	ОписаниеЗапроса.СлужебныеПараметры.Вставить("ОтборСообщения", Доверенности);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МашиночитаемыеДоверенности.Ссылка,
	|	МашиночитаемыеДоверенности.Организация КАК Организация,
	|	МашиночитаемыеДоверенности.ЛицоБезДовФЛ_СНИЛС КАК СНИЛСДоверителя,
	|	ВЫБОР
	|		КОГДА МашиночитаемыеДоверенности.ДоверительЮЛ_ИНН = """"
	|			ТОГДА МашиночитаемыеДоверенности.ДоверительФЛ_ИНН
	|		ИНАЧЕ МашиночитаемыеДоверенности.ДоверительЮЛ_ИНН
	|	КОНЕЦ КАК ОрганизацияИНН,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_КПП КАК ОрганизацияКПП,
	|	МашиночитаемыеДоверенности.ДоверительЮЛ_ОГРН КАК ОрганизацияОГРН,
	|	МашиночитаемыеДоверенности.СтатусВРеестреФНС
	|ПОМЕСТИТЬ ИмяВременнойТаблицы
	|ИЗ
	|	Справочник.МашиночитаемыеДоверенностиОрганизаций КАК МашиночитаемыеДоверенности
	|ГДЕ
	|	МашиночитаемыеДоверенности.Ссылка В (&ОтборСообщения)";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, МеткаВременнойТаблицы, ?(ЗначениеЗаполнено(ТекстыЗапросов), "",
		ЗначениеВременнойТаблицы));

	ТекстыЗапросов.Добавить(ТекстЗапроса);

	ОписаниеЗапроса.Текст = ТекстЗапроса;

	Возврат ОписаниеЗапроса;

КонецФункции

#КонецОбласти

#КонецЕсли
