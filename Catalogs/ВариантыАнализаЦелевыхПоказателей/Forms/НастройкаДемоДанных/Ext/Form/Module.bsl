#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация контекста
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.СтруктураНастроекДемоДанных);
	СтруктураНастроекДемоДанных = Параметры.СтруктураНастроекДемоДанных;
	
	Элементы.ТипДиаграммы.СписокВыбора.ЗагрузитьЗначения(Параметры.СтруктураНастроекДемоДанных.ДоступныеТипыДиаграмм);
	ТипДиаграммы = СтруктураНастроекДемоДанных.ТипДиаграммы;
	
	Элементы.НаименованиеПоказателя.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	ХранилищеНастроекОформления = СтруктураНастроекОформления.ХранилищеНастроекОформления;
	КоличествоОбъектовАнализа = Макс(3, КоличествоОбъектовАнализа);
	ХранилищеДемонстрационныхДанных = Параметры.СтруктураНастроекДемоДанных.ХранилищеДемонстрационныхДанных; // ХранилищеЗначения
	
	Если ХранилищеДемонстрационныхДанных = Неопределено Тогда
		ДемонстрационныеДанные = Неопределено;
	Иначе
		ДемонстрационныеДанные = ХранилищеДемонстрационныхДанных.Получить();
	КонецЕсли;
	Если ДемонстрационныеДанные = Неопределено Тогда
		// Демонстрационные данные еще не вводились
		ИнициализироватьОбязательныеДанные();
	ИначеЕсли ТипЗнч(ДемонстрационныеДанные) = Тип("Структура") Тогда
		// Демонстрационные данные были введены ранее
		ХранилищеДанных = ДемонстрационныеДанные.Данные; // ХранилищеЗначения
		Если ХранилищеДанных.Получить().Количество() = 0 Тогда
			ИнициализироватьОбязательныеДанные();
		Иначе
			Если Не СтруктураНастроекДемоДанных.НастройкиТребующиеОбновления.ТребуетсяОбновление Тогда
				Если ДемонстрационныеДанные.Свойство("КоличествоОбъектовАнализа") Тогда
					КоличествоОбъектовАнализа = ДемонстрационныеДанные.КоличествоОбъектовАнализа;
				КонецЕсли;
				
				ЗначениеВДанныеФормы(ХранилищеДанных.Получить(), Данные);
				
				ОбновитьДиаграмму();
			Иначе
				ИнициализироватьОбязательныеДанные();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектАнализаОписаниеТипа = Параметры.СтруктураНастроекДемоДанных.ОбъектАнализаОписаниеТипа;
	Если ОбъектАнализаОписаниеТипа <> Неопределено Тогда
		Элементы.ДанныеОбъектАнализа.ОграничениеТипа = ОбъектАнализаОписаниеТипа;
	КонецЕсли;
	Элементы.ДанныеОбъектАнализа.Заголовок = Параметры.СтруктураНастроекДемоДанных.ОбъектАнализаЗаголовок;
	Элементы.ДанныеЗначениеПоказателя.ОграничениеТипа = Параметры.СтруктураНастроекДемоДанных.ЗначениеАнализаОписаниеТипа;
	Элементы.ДанныеЗначениеПоказателя.Заголовок = Параметры.СтруктураНастроекДемоДанных.ЗначениеАнализаЗаголовок;
	Элементы.ДанныеЗначениеПоказателяДополнительное.ОграничениеТипа = Параметры.СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительноеОписаниеТипа;
	Элементы.ДанныеЗначениеПоказателяДополнительное.Заголовок = Параметры.СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительноеЗаголовок;
	Для Каждого СтрокаДанных Из Данные Цикл 
		СтрокаДанных.ОбъектАнализа = Элементы.ДанныеОбъектАнализа.ДоступныеТипы.ПривестиЗначение(СтрокаДанных.ОбъектАнализа);
		СтрокаДанных.ЗначениеПоказателя = Элементы.ДанныеЗначениеПоказателя.ДоступныеТипы.ПривестиЗначение(СтрокаДанных.ЗначениеПоказателя);
		СтрокаДанных.ЗначениеПоказателяДополнительное = Элементы.ДанныеЗначениеПоказателяДополнительное.ДоступныеТипы.ПривестиЗначение(СтрокаДанных.ЗначениеПоказателяДополнительное);
	КонецЦикла;
	
	УстановитьВидимостьДоступностьЭлементовФормы();
	УстановитьМасштабЭлементовФормы();
	УстановитьУсловноеОформление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДиаграммыПриИзменении(Элемент)
	Модифицированность = Истина;
	
	ОбновитьДиаграмму();
КонецПроцедуры

&НаКлиенте
Процедура КоличествоОбъектовАнализаПриИзменении(Элемент)
	ИнициализироватьОбязательныеДанные();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанные

&НаКлиенте
Процедура ДанныеОбъектАнализаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Данные.ТекущиеДанные;
	ТекущаяСтрока = Элементы.Данные.ТекущаяСтрока;
	
	ПолучаемыйИндекс = Данные.Индекс(Данные.НайтиПоИдентификатору(ТекущаяСтрока)) + КоличествоОбъектовАнализа;
	Пока ПолучаемыйИндекс < Данные.Количество() Цикл 
		СтрокаДанных = Данные.Получить(ПолучаемыйИндекс);
		СтрокаДанных.ОбъектАнализа = ТекущиеДанные.ОбъектАнализа;
		
		ПолучаемыйИндекс = ПолучаемыйИндекс + КоличествоОбъектовАнализа;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьДиаграмму();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастроитьОформление(Команда)
	ПараметрыФормы = Новый Структура("СтруктураНастроекОформления", СтруктураНастроекОформления);
	
	ОткрытьФорму("Справочник.ВариантыАнализаЦелевыхПоказателей.Форма.НастройкаОформления", ПараметрыФормы,,,,, 
		Новый ОписаниеОповещения("НастроитьОформлениеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымИБ(Команда)
	Модифицированность = Истина;
	
	РезультатЗаполнения = ЗаполнитьПоДаннымИБНаСервере();
	Если Не РезультатЗаполнения.ДанныеЗаполнены Тогда
		ТекстПредупреждения = НСтр("ru = 'Ошибка заполнения'");
		ПоказатьПредупреждение(, РезультатЗаполнения.ОписаниеОшибки,,ТекстПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	Закрыть(РезультатРедактирования());
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НастроитьОформлениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураНастроекОформления, Результат);
		
		ХранилищеНастроекОформления = Результат.ХранилищеНастроекОформления;
		СтруктураНастроекОформления.Вставить("ХранилищеНастроекОформления", ХранилищеНастроекОформления);
		
		Модифицированность = Истина;
	КонецЕсли;
	
	ОбновитьДиаграмму();
КонецПроцедуры

&НаСервере 
Функция ЗаполнитьПоДаннымИБНаСервере()
	РезультатЗаполнения = Новый Структура("ОписаниеОшибки, ДанныеЗаполнены");
	
	ИсточникДанных = МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, 
		Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма,
		Истина);
		
	Если Не ИсточникДанных.ОшибкаРасчета Тогда
		ПодготовленныеДанные = ИсточникДанных.Данные; // ТаблицаЗначений - 
		КолонкаТаблицы = ПодготовленныеДанные.Колонки[Строка(СтруктураНастроекДемоДанных.ЗначениеАнализа)]; // КолонкаТаблицыЗначений -
		КолонкаТаблицы.Имя = "ЗначениеПоказателя";
		ТипАнализа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантАнализа, "ТипАнализа");
		Если ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
			ИЛИ ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
			Если СтруктураНастроекДемоДанных.РежимПокомпонентногоСравнения = 0 Тогда
				КолонкаТаблицы = ПодготовленныеДанные.Колонки[Строка(СтруктураНастроекДемоДанных.ОбъектАнализа)]; // КолонкаТаблицыЗначений -
				КолонкаТаблицы.Имя = "ОбъектАнализа";
		Иначе
			КолонкаТаблицы = ПодготовленныеДанные.Колонки[Строка(СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительное)]; // КолонкаТаблицыЗначений -
				КолонкаТаблицы.Имя = "ЗначениеПоказателяДополнительное";
			КонецЕсли;
		КонецЕсли;
		Если ПодготовленныеДанные.Колонки.Найти("Период") = Неопределено Тогда
			ТаблицаПериодов = ТаблицаПериодов();
			ПодготовленныеДанные.Колонки.Добавить("Период");
			ПодготовленныеДанные.ЗаполнитьЗначения(ТаблицаПериодов[ТаблицаПериодов.Количество()-1].Период, "Период");
		КонецЕсли;
		Если ПодготовленныеДанные.Колонки.Найти("ОбъектАнализа") = Неопределено Тогда
			ПодготовленныеДанные.Колонки.Добавить("ОбъектАнализа");
		КонецЕсли;
		Если ПодготовленныеДанные.Колонки.Найти("ЗначениеПоказателяДополнительное") = Неопределено Тогда
			ПодготовленныеДанные.Колонки.Добавить("ЗначениеПоказателяДополнительное");
		КонецЕсли;
		Если ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
			ПодготовленныеДанные.Сортировать("Период Возр, ОбъектАнализа Возр");
		КонецЕсли;

		ЗначениеВДанныеФормы(ПодготовленныеДанные, Данные);
		
		ОбновитьДиаграмму();
	КонецЕсли;
	
	РезультатЗаполнения.ДанныеЗаполнены = Не ИсточникДанных.ОшибкаРасчета;
	РезультатЗаполнения.ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
	
	Возврат РезультатЗаполнения;
КонецФункции


&НаСервере
Функция РезультатРедактирования()
	НастройкиИДанные = Новый Структура("Настройки, Данные");
	НастройкиИДанные.Вставить("Настройки", НастройкиТребующиеОбновления);
	НастройкиИДанные.Вставить("Данные", Новый ХранилищеЗначения(РеквизитФормыВЗначение("Данные")));
	
	ХранилищеДемонстрационныхДанных = Новый ХранилищеЗначения(НастройкиИДанные); 
	
	Результат = Новый Структура;
	Результат.Вставить("Модифицированность", Модифицированность);
	Результат.Вставить("ТипДиаграммы", ТипДиаграммы);
	Результат.Вставить("КоличествоОбъектовАнализа", КоличествоОбъектовАнализа);
	Результат.Вставить("СтруктураНастроекОформления", СтруктураНастроекОформления);
	Результат.Вставить("ХранилищеДемонстрационныхДанных", ХранилищеДемонстрационныхДанных);
		
	Возврат Результат;
КонецФункции

// Возвращает структуру настроек варианта анализа.
// 
// Параметры:
// 	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант анализа.
// Возвращаемое значение:
// 	Структура - Описание:
// * ВключатьНоль - Булево -
// * РежимШкалыЗначений - ПеречислениеСсылка.РежимШкалыЗначенийДиаграмм -
// * ХранилищеПользовательскихНастроекКомпоновкиДанных - ХранилищеЗначения - 
// * ХранилищеНастроекОформления - ХранилищеЗначения -
// * ТолькоЦветОсновнойСерии - Булево -
// * РежимСглаживанияДиаграмм - Булево -
// * ОтображатьЛегенду - Булево -
// * ОкантовкаДиаграмм - Булево -
// * ГрадиентДляПокомпонентногоСравнения - Булево -
// * ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения - Булево -
// * ВыводитьПодписиКДиаграммам - Булево -
// * ВыводитьМаркерТочекПрогноза - Булево -
// * ВыводитьМаркерыТочек - Булево -
// * КратностьЗначений - ПеречислениеСсылка.ВидыПредставленияЧисел -
// * ТочностьРасчетаДробнойЧасти - Число -
// * РежимПокомпонентногоСравнения - Число -
// * ЗначениеАнализаДополнительное - ХранилищеЗначения -
// * ОбъектАнализа - ХранилищеЗначения -
// * ЗначениеАнализа - ХранилищеЗначения -
// * ГоризонтПрогноза - Число -
// * ГлубинаАнализаПрогноза - Число -
// * РассчитыватьПрогноз - Булево -
// * Владелец - ПланВидовХарактеристикСсылкаИмяПланаВидовХарактеристик, ПланСчетовСсылкаИмяПланаСчетов, ПланВидовРасчетаСсылкаИмяПланаВидовРасчета, ПланОбменаСсылкаИмяПланаОбмена, Неопределено, СправочникСсылка.ВариантыАнализаЦелевыхПоказателей -
// * МетодРасчетаЗначений - ПеречислениеСсылка.МетодыРасчетаВариантовАнализаЦелевыхПоказателей -
// * ПериодичностьРасчетаПоказателя - ПеречислениеСсылка.Периодичность -
// * ПериодСравнения - ХранилищеЗначения -
// * ПериодАнализа - ХранилищеЗначения -
// * ТипАнализа - ПеречислениеСсылка.ТипыАнализаПоказателей -
// * Ссылка - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей -
&НаСервере
Функция ПараметрыПоказателя(ВариантАнализа)
	ПараметрыПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа, "ТипАнализа, ПериодАнализа, ПериодСравнения, ПериодичностьРасчетаПоказателя,
																					 |МетодРасчетаЗначений, Владелец, РассчитыватьПрогноз, ГлубинаАнализаПрогноза, ГоризонтПрогноза, ЗначениеАнализа, ОбъектАнализа,
																					 |ЗначениеАнализаДополнительное, РежимПокомпонентногоСравнения, ТочностьРасчетаДробнойЧасти, КратностьЗначений, РежимШкалыЗначений");
	ПараметрыПоказателя.Вставить("Ссылка", ВариантАнализа);
	ПараметрыПоказателя.Вставить("ТипДиаграммы", ТипДиаграммы);
	
	ПараметрыПоказателя.Вставить("ВыводитьМаркерыТочек", Ложь);
	ПараметрыПоказателя.Вставить("ВыводитьМаркерТочекПрогноза", Ложь);
	ПараметрыПоказателя.Вставить("ВыводитьПодписиКДиаграммам", Ложь);
	ПараметрыПоказателя.Вставить("ВыделятьМаксимальноеЗначениеДляПокомпонентногоСравнения", Ложь);
	ПараметрыПоказателя.Вставить("ГрадиентДляПокомпонентногоСравнения", Ложь);
	ПараметрыПоказателя.Вставить("ОкантовкаДиаграмм", Ложь);
	ПараметрыПоказателя.Вставить("ОтображатьЛегенду", Ложь);
	ПараметрыПоказателя.Вставить("РежимСглаживанияДиаграмм", Ложь);
	ПараметрыПоказателя.Вставить("ТолькоЦветОсновнойСерии", Ложь);
	ПараметрыПоказателя.Вставить("ХранилищеНастроекОформления", Неопределено);
	ПараметрыПоказателя.Вставить("ХранилищеПользовательскихНастроекКомпоновкиДанных", ХранилищеПользовательскихНастроекКомпоновкиДанных);
	
	ПараметрыПоказателя.Вставить("ВключатьНоль", Ложь);
	
	ЗаполнитьЗначенияСвойств(ПараметрыПоказателя, СтруктураНастроекОформления);
	
	Возврат ПараметрыПоказателя;
КонецФункции

&НаСервере 
Функция ТаблицаПериодов()
	// Получим данные
	ЕстьСравнение = Ложь;
	ПериодичностьРасчетаПоказателя = НастройкиТребующиеОбновления.ПериодичностьРасчетаПоказателя;
	ПериодАнализа = НастройкиТребующиеОбновления.ПериодАнализа; // СтандартныйПериод - 
	ПериодСравнения = НастройкиТребующиеОбновления.ПериодСравнения; // СтандартныйПериод - 
	
	Если НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		ЕстьСравнение = Истина;
	КонецЕсли;
	
	ТаблицаПериодов = МониторингЦелевыхПоказателей.ПериодыЗаданнойПериодичности(ПериодАнализа.ДатаНачала, ПериодАнализа.ДатаОкончания, ПериодичностьРасчетаПоказателя);
	Если ЕстьСравнение Тогда
		ТаблицаПериодов = МониторингЦелевыхПоказателей.ДополнитьТаблицуПериодов(ТаблицаПериодов, ПериодСравнения.ДатаНачала, ПериодСравнения.ДатаОкончания, ПериодичностьРасчетаПоказателя);
	КонецЕсли;
	
	Возврат ТаблицаПериодов;
КонецФункции

&НаСервере
Функция ИсточникДемоДанных(ВариантАнализа) Экспорт
	ПодготовленныеДанные = РеквизитФормыВЗначение("Данные");
	
	ПодготовленныеДанные.Колонки.ЗначениеПоказателя.Заголовок = СтруктураНастроекДемоДанных.ЗначениеАнализаЗаголовок;
	ПодготовленныеДанные.Колонки.ЗначениеПоказателя.Имя = СтруктураНастроекДемоДанных.ЗначениеАнализа;
	
	ДанныеВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа, "ТипАнализа, РежимПокомпонентногоСравнения");
	
	Если ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		ИЛИ ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
		Если ДанныеВариантаАнализа.РежимПокомпонентногоСравнения = 0 Тогда
			ПодготовленныеДанные.Колонки.ОбъектАнализа.Заголовок = СтруктураНастроекДемоДанных.ОбъектАнализаЗаголовок;
			ПодготовленныеДанные.Колонки.ОбъектАнализа.Имя = СтруктураНастроекДемоДанных.ОбъектАнализа;
			
			ПодготовленныеДанные.Колонки.Удалить(ПодготовленныеДанные.Колонки.Найти("ЗначениеПоказателяДополнительное"))
		Иначе
			ПодготовленныеДанные.Колонки.ЗначениеПоказателяДополнительное.Заголовок = СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительноеЗаголовок;
			ПодготовленныеДанные.Колонки.ЗначениеПоказателяДополнительное.Имя = СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительное;
			
			ПодготовленныеДанные.Колонки.Удалить(ПодготовленныеДанные.Колонки.Найти("ОбъектАнализа"))
		КонецЕсли;
	КонецЕсли;
	Если ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
		Если ДанныеВариантаАнализа.РежимПокомпонентногоСравнения = 0 Тогда
			ПоследняяДата = ПодготовленныеДанные[0].Период;
			ПодготовленныеДанные.ЗаполнитьЗначения(Неопределено, "Период");
			
			ИтогПоТаблице = ПодготовленныеДанные.Итог(Строка(СтруктураНастроекДемоДанных.ЗначениеАнализа));
			НоваяСтрока = ПодготовленныеДанные.Добавить();
			НоваяСтрока.Период = ПоследняяДата;
			НоваяСтрока[Строка(СтруктураНастроекДемоДанных.ЗначениеАнализа)] = ИтогПоТаблице;
			Если ДанныеВариантаАнализа.РежимПокомпонентногоСравнения = 1 Тогда
				ИтогПоТаблицеДополнительный = ПодготовленныеДанные.Итог(Строка(СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительное));
				НоваяСтрока[Строка(СтруктураНастроекДемоДанных.ЗначениеАнализаДополнительное)] = ИтогПоТаблицеДополнительный;
			КонецЕсли;
		Иначе
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПоказателя = ПараметрыПоказателя(ВариантАнализа);
	ЗаполнитьЗначенияСвойств(ПараметрыПоказателя, СтруктураНастроекДемоДанных, "ОбъектАнализа, ЗначениеАнализа, ЗначениеАнализаДополнительное");
	
	ИсточникДанных = МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализаИзДемоДанных(ПараметрыПоказателя, Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, , ПодготовленныеДанные);
	
	Возврат ИсточникДанных;
КонецФункции

&НаСервере 
Процедура ИнициализироватьОбязательныеДанные()
	ТаблицаПериодов = Новый ТаблицаЗначений;
	
	ТаблицаПериодов = ТаблицаПериодов();
	
	Данные.Очистить();
	Если НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
		Или НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда 
		Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
			НоваяСтрокаДанных = Данные.Добавить();
			НоваяСтрокаДанных.Период = СтрокаТаблицыПериодов.Период;
		КонецЦикла;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
		Если НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 0 Тогда
			Для Счетчик = 1 По КоличествоОбъектовАнализа Цикл 
				НоваяСтрокаДанных = Данные.Добавить();
				НоваяСтрокаДанных.Период = ТаблицаПериодов[ТаблицаПериодов.Количество()-1].Период;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
				НоваяСтрокаДанных = Данные.Добавить();
				НоваяСтрокаДанных.Период = СтрокаТаблицыПериодов.Период;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
		Если НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 0 Тогда
			Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
				Для Счетчик = 1 По КоличествоОбъектовАнализа Цикл 
					НоваяСтрокаДанных = Данные.Добавить();
					НоваяСтрокаДанных.Период = СтрокаТаблицыПериодов.Период;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
				НоваяСтрокаДанных = Данные.Добавить();
				НоваяСтрокаДанных.Период = СтрокаТаблицыПериодов.Период;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда 
		Для Каждого СтрокаТаблицыПериодов Из ТаблицаПериодов Цикл 
			НоваяСтрокаДанных = Данные.Добавить();
			НоваяСтрокаДанных.Период = СтрокаТаблицыПериодов.Период;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДиаграмму()
	ИсточникДанных = ИсточникДемоДанных(ВариантАнализа);
	
	Если ИсточникДанных.Данные.Количество() > 0 Тогда
		Диаграмма.Очистить();
		
		ПараметрыПоказателя = ПараметрыПоказателя(ВариантАнализа);
	
		УстановитьНаименованиеПоказателя(ПараметрыПоказателя, ИсточникДанных);
		Диаграмма = МониторингЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(Диаграмма, ВариантАнализа, ИсточникДанных);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция БазовыйМасштабТекста()
	Возврат 100;
КонецФункции

&НаСервере
Функция ШрифтЗаголовкаПоказателяВажно()
	Возврат Новый Шрифт(,, Истина,,,, БазовыйМасштабТекста());
КонецФункции


// Описание
// 
// Параметры:
// 	ПараметрыПоказателя - См. ПараметрыПоказателя
// 	ИсточникДанных - см. МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализаИзДемоДанных
&НаСервере 
Процедура УстановитьНаименованиеПоказателя(ПараметрыПоказателя, ИсточникДанных)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	КратностьЗначений = ПараметрыПоказателя.КратностьЗначений;
	
	ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(ПараметрыПоказателя, ИсточникДанных);

	МаркерСветофора = Новый ФорматированнаяСтрока("●" + Символы.НПП, ШрифтЗаголовкаПоказателяВажно(), ЦветаСостоянияИТренда.ЦветСостояния);
	РазделительСтрок = " ";
	
	НаименованиеВариантаАнализа = Новый ФорматированнаяСтрока(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыПоказателя.Ссылка, "Наименование"), ШрифтЗаголовкаПоказателяВажно());
	
	МассивСтрокНаименования = Новый Массив;
	Если ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "НеприемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ПриемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ЦельДостигнута" Тогда
		
		МассивСтрокНаименования.Добавить(МаркерСветофора);
	КонецЕсли;
	МассивСтрокНаименования.Добавить(НаименованиеВариантаАнализа);
	Если Не КратностьЗначений = ВидыПредставленияЧисел.БезИзменений 
		И ЗначениеЗаполнено(КратностьЗначений) Тогда
		МассивСтрокНаименования.Добавить(РазделительСтрок);
		ПараметрыКратности = Новый Структура("КратностьЗначений", КратностьЗначений);
		СтрокаПараметровКратности = Новый ФорматированнаяСтрока(
			МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ПараметрыКратности));
		МассивСтрокНаименования.Добавить(СтрокаПараметровКратности);
	КонецЕсли;
	
	ТекстовоеПредставлениеПериода = МониторингЦелевыхПоказателей.ПредставлениеПериодаВариантаАнализа(ИсточникДанных);
	Если Не ТекстовоеПредставлениеПериода = Неопределено Тогда
		МассивСтрокНаименования.Добавить(РазделительСтрок);
		СтрокаПредставленияПериода = Новый ФорматированнаяСтрока(
			ТекстовоеПредставлениеПериода);
		МассивСтрокНаименования.Добавить(СтрокаПредставленияПериода);
	КонецЕсли;
	
	НаименованиеПоказателя = Новый ФорматированнаяСтрока(МассивСтрокНаименования);
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	Если НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения Тогда
		Элементы.ДанныеПериод.Видимость = Истина;
		Элементы.ДанныеОбъектАнализа.Видимость = Ложь;
		Элементы.КоличествоОбъектовАнализа.Видимость = Ложь;
		Элементы.ДанныеЗначениеПоказателяДополнительное.Видимость = Ложь;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика Тогда
		Элементы.ДанныеПериод.Видимость = Истина;
		Элементы.ДанныеОбъектАнализа.Видимость = НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 0;
		Элементы.КоличествоОбъектовАнализа.Видимость = НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 0;
		Элементы.ДанныеЗначениеПоказателяДополнительное.Видимость = НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 1;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение Тогда
		Элементы.ДанныеПериод.Видимость = Ложь;
		Элементы.ДанныеОбъектАнализа.Видимость = НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 0;
		Элементы.КоличествоОбъектовАнализа.Видимость = НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 0;
		Элементы.ДанныеЗначениеПоказателяДополнительное.Видимость = НастройкиТребующиеОбновления.РежимПокомпонентногоСравнения = 1;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.СравнениеСПрошлымПериодом Тогда
		Элементы.ДанныеПериод.Видимость = Истина;
		Элементы.ДанныеОбъектАнализа.Видимость = Ложь;
		Элементы.КоличествоОбъектовАнализа.Видимость = Ложь;
		Элементы.ДанныеЗначениеПоказателяДополнительное.Видимость = Ложь;
	ИначеЕсли НастройкиТребующиеОбновления.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ИзмерениеТекущегоСостояния Тогда
		Элементы.ДанныеПериод.Видимость = Истина;
		Элементы.ДанныеОбъектАнализа.Видимость = Ложь;
		Элементы.КоличествоОбъектовАнализа.Видимость = Ложь;
		Элементы.ДанныеЗначениеПоказателяДополнительное.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура УстановитьМасштабЭлементовФормы()
	НастройкиКлиентскогоПриложения = Новый НастройкиКлиентскогоПриложения;
	
	ИнтерфейсТакси = (НастройкиКлиентскогоПриложения.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси);
	МасштабКомпактный = (НастройкиКлиентскогоПриложения.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный);
	
	Если Не ИнтерфейсТакси ИЛИ МасштабКомпактный Тогда
		Элементы.ТипДиаграммы.Ширина = 39;
	Иначе
		Элементы.ТипДиаграммы.Ширина = 35;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	УсловноеОформление.Элементы.Очистить();

	ЦветНезаполненныхДанных = ЦветаСтиля.НезаполненноеПолеТаблицы;
	ТекстНезаполненныхДанных = НСтр("ru= '<Значение = 0>'");

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеЗначениеПоказателя.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.ЗначениеПоказателя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНезаполненныхДанных);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНезаполненныхДанных);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеЗначениеПоказателяДополнительное.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Данные.ЗначениеПоказателяДополнительное");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНезаполненныхДанных);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНезаполненныхДанных);
КонецПроцедуры

#КонецОбласти