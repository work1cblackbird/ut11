
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.ДополнительныеПараметры.Свойство("ИмяЭлементаПозиционирования") Тогда
		
		НайденныйЭлемент = Элементы.Найти(Параметры.ДополнительныеПараметры.ИмяЭлементаПозиционирования);
		Если НайденныйЭлемент <> Неопределено Тогда
			ТекущийЭлемент = НайденныйЭлемент;
		КонецЕсли;
		
		Если Параметры.ДополнительныеПараметры.Свойство("ЗначениеЭлементаПозиционирования") Тогда
			
			СтруктураПоиска = Новый Структура("МестоХранения", Параметры.ДополнительныеПараметры.ЗначениеЭлементаПозиционирования);
			ПоискСтрок = Объект.МестаХранения.НайтиСтроки(СтруктураПоиска);
			
			Если ПоискСтрок.Количество() Тогда
				Элементы.МестаХранения.ТекущаяСтрока = ПоискСтрок[0].ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	Если ИмяСобытия = "Запись_КлассификаторОрганизацийСАТУРН"
		И Параметр = Объект.Ссылка Тогда
		
		Прочитать();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрОповещения = Объект.Ссылка;
	ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка, ПараметрОповещения);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// РаботаСПолямиСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямиСоставногоТипа

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаРолейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьСписокРолей" Тогда
	
		ПараметрыОткрытия = Новый Структура("Организация", Объект.Ссылка);
		ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.Форма.СписокРолей", 
			ПараметрыОткрытия, 
			ЭтотОбъект,,,,, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКонтрагентСтрокойПриИзменении(Элемент)
	
	ПолеСоставногоТипаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКонтрагентСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКонтрагентСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияКонтрагентСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура("ТипКИ, КИ", НСтр("ru = 'Юридический адрес'"), Объект.ЮридическийАдрес);
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.Форма.ФормаПросмотраКонтактнойИнформации",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытияФормы = Новый Структура("ТипКИ, КИ", НСтр("ru = 'Фактический адрес'"), Объект.ФактическийАдрес);
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.Форма.ФормаПросмотраКонтактнойИнформации",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаПрименения

&НаКлиенте
Процедура МестаПримененияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МестаПрименения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.МестоПрименения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаХранения

&НаКлиенте
Процедура МестаХраненияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		
		Индекс = Объект.МестаХранения.Индекс(ТекущиеДанные);
		
		СтрокаТЧ = Объект.МестаХранения.Вставить(Индекс + 1);
		СтрокаТЧ.МестоХранения          = ТекущиеДанные.МестоХранения;
		СтрокаТЧ.ТорговыйОбъект         = Неопределено;
		СтрокаТЧ.ПроизводственныйОбъект = Неопределено;
		
		Элемент.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МестаХранения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Поле.Имя = Элементы.МестаХраненияМестоХранения.Имя Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.МестоХранения);

КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияТорговыйОбъектПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияТорговыйОбъектОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияТорговыйОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияТорговыйОбъектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияПроизводственныйОбъектПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияПроизводственныйОбъектОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияПроизводственныйОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияПроизводственныйОбъектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьИзСервиса(Команда)
	
	ПараметрОповещения = ЗагрузитьОрганизациюНаСервере();
	
	Если ЗначениеЗаполнено(ПараметрОповещения) Тогда
		
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(Объект.Ссылка, ПараметрОповещения);
		Закрыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДанныеСАТУРН(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",                 Объект.Идентификатор);
	ПараметрыФормы.Вставить("НеПоказыватьСостояниеЗагрузки", Истина);
	
	ОткрытьФорму(
		"Справочник.КлассификаторОрганизацийСАТУРН.Форма.ДанныеКлассификатора",
		ПараметрыФормы, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ПараметрыФормыИзменения = Новый Структура;
	ПараметрыФормыИзменения.Вставить("Организация", Объект.Ссылка);
	
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.Форма.ПомощникСоздания", ПараметрыФормыИзменения);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсеМестаПрименения(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Загрузка списка мест применения возможна только для записанной организации. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриСинхронизацииЗавершение",
			ЭтотОбъект,
			Новый Структура("ЗагрузитьНовыеМестаПрименения", Истина));
			
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьСинхронизациюМестПрименений(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьВсеМестаХранения(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Загрузка списка мест хранения возможна только для записанной организации. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриСинхронизацииЗавершение",
			ЭтотОбъект,
			Новый Структура("ЗагрузитьНовыеМестаХранения", Истина));
			
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьСинхронизациюМестХранения(Истина);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМестаПрименения(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Подбор мест применения возможен только для записанной организации. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриПодбореМестПримененияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьПодборМестПрименения();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМестаХранения(Команда)

	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Подбор мест хранения возможен только для записанной организации. Записать?'");
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриПодбореМестХраненияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВыполнитьПодборМестХранения();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьПоИННКПП(Команда)
	
	ОчиститьСообщения();
	НайденКонтрагент = СопоставитьПоИННКППСервер();
	
	Если Не НайденКонтрагент Тогда
		
		ЗаголовокОповещения = НСтр("ru = 'Поиск по ИНН/КПП'");
		ТекстОповещения     = НСтр("ru = 'Организация/контрагент по ИНН и КПП не найдены.'");
		ПоказатьОповещениеПользователя(ЗаголовокОповещения,, ТекстОповещения);
		
	Иначе
		
		СтруктураВыбора = Новый Структура("Ссылка, Представление", Объект.Контрагент, Строка(Объект.Контрагент));
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элементы.КонтрагентСтрокой, СтруктураВыбора, Истина);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Места хранения: Не сопоставленный торговый объект
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МестаХраненияТорговыйОбъектСтрокой.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МестаХранения.ТорговыйОбъект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	// Места хранения: Не сопоставленный производственный объект
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МестаХраненияПроизводственныйОбъектСтрокой.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МестаХранения.ПроизводственныйОбъект");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не сопоставлено>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		СвязанноеЗначение = Справочники.КлассификаторОрганизацийСАТУРН.ОрганизацииКонтрагентыПоКлассификаторамСАТУРН(Объект.Ссылка)[Объект.Ссылка];
		Если СвязанноеЗначение = Неопределено Тогда
		ИначеЕсли ЗначениеЗаполнено(СвязанноеЗначение.Организация) Тогда
			Элементы.КонтрагентСтрокой.ПодсказкаВвода = Строка(СвязанноеЗначение.Организация);
		ИначеЕсли ЗначениеЗаполнено(СвязанноеЗначение.Контрагент) Тогда
			Элементы.КонтрагентСтрокой.ПодсказкаВвода = Строка(СвязанноеЗначение.Контрагент);
		КонецЕсли;
	
	КонецЕсли;
	
	РолиОрганизацииПриИзмененииСервер();
	
	УправлениеЭлементамиФормы(ЭтотОбъект);
	
	// РаботаСПолямиСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямиСоставногоТипа
	
КонецПроцедуры

&НаСервере
Функция СопоставитьПоИННКППСервер()
	
	НайденноеСоответствие = ОбщегоНазначенияИС.ОрганизацияПоИННКПП(Объект.ИНН, Объект.КПП);
		
	Если Не ЗначениеЗаполнено(НайденноеСоответствие) Тогда
		НайденноеСоответствие = ИнтеграцияИС.КонтрагентПоИННКПП(Объект.ИНН, Объект.КПП);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НайденноеСоответствие) Тогда
		
		Объект.Контрагент = НайденноеСоответствие;
		УправлениеЭлементамиФормы(ЭтотОбъект);
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
	
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗагрузитьОрганизациюНаСервере()
	
	Результат = ИнтерфейсСАТУРНВызовСервера.ОрганизацияПоИдентификатору(Объект.Идентификатор);
		
	Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
		
		ВызватьИсключение Результат.ТекстОшибки;
		
	Иначе
		
		ДанныеОрганизации = ИнтерфейсСАТУРН.ДанныеОрганизации(Результат.Элемент);
		Организация = ИнтеграцияСАТУРН.ЗагрузитьОрганизацию(ДанныеОрганизации,, Результат.ПараметрыОбмена); 

	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

&НаСервере
Процедура РолиОрганизацииПриИзмененииСервер()
	
	МассивСтрок = Новый Массив;
	МассивРолей = Новый Массив;
	
	Для Каждого СтрокаДанныхРолей Из Объект.Роли Цикл
		
		МассивРолей.Добавить(Строка(СтрокаДанныхРолей.Роль));
		
	КонецЦикла;
	
	Если МассивРолей.Количество() = 0 Тогда
		
		Строка = Новый ФорматированнаяСтрока(НСтр("ru = '<отсутствуют>'"),, ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
		МассивСтрок.Добавить(Строка);
		
	ИначеЕсли МассивРолей.Количество() = 1 Тогда
		
		Строка = Новый ФорматированнаяСтрока(МассивРолей[0],, ЦветаСтиля.ЦветГиперссылкиГосИС,, "ОткрытьСписокРолей");
		МассивСтрок.Добавить(Строка);
		
	Иначе
		
		ШаблонСтроки = НСтр("ru = '%1 ( + еще %2 )'");
		СтрокаОтображенияРолей = СтрШаблон(ШаблонСтроки, МассивРолей[0], МассивРолей.Количество() - 1);
		
		Строка = Новый ФорматированнаяСтрока(СтрокаОтображенияРолей,, ЦветаСтиля.ЦветГиперссылкиГосИС,, "ОткрытьСписокРолей");
		МассивСтрок.Добавить(Строка);
		
	КонецЕсли;
	
	СтрокаРолей = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиФормы(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ТребуетсяЗагрузка.Видимость              = Объект.ТребуетсяЗагрузка;
	
КонецПроцедуры

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "КонтрагентСтрокой, МестаХраненияТорговыйОбъектСтрокой, МестаХраненияПроизводственныйОбъектСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СинхронизацияМестПрименения

&НаКлиенте
Процедура ВопросПриСинхронизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Записать();

	Если ЗаписаноУспешно Тогда
		
		Если ДополнительныеПараметры.Свойство("ЗагрузитьНовыеМестаПрименения") Тогда
		
			ВыполнитьСинхронизациюМестПрименений(ДополнительныеПараметры.ЗагрузитьНовыеМестаПрименения);
	
		ИначеЕсли ДополнительныеПараметры.Свойство("ЗагрузитьНовыеМестаХранения") Тогда
			
			ВыполнитьСинхронизациюМестХранения(ДополнительныеПараметры.ЗагрузитьНовыеМестаХранения);
	
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыполнитьСинхронизациюМестПрименений(ЗагрузитьНовые)

	МассивМестПрименения = МассивМестПримененияОрганизации(Объект.Идентификатор);
	
	Если МассивМестПрименения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	
	НачатьТранзакцию();
	
	Попытка
	
		Объект.МестаПрименения.Очистить();
	
		Для Каждого МестоПримененияОрганизации Из МассивМестПрименения Цикл
			
			НоваяСтрокаДанных = Объект.МестаПрименения.Добавить();
			НоваяСтрокаДанных.МестоПрименения = МестоПримененияОрганизации;
			
		КонецЦикла;
		
		Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОписаниеИсключения = НСтр( "ru = 'Синхронизация списка мест применения не выполнена по причине:'");
		ВызватьИсключение (ОписаниеИсключения + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьСинхронизациюМестХранения(ЗагрузитьНовые)
	
	МассивМестХранения = МассивМестХраненияОрганизации(Объект.Идентификатор);
	
	Если МассивМестХранения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Прочитать();
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого МестоХраненияОрганизации Из МассивМестХранения Цикл
			
			ПараметрыПоиска = Новый Структура("МестоХранения", МестоХраненияОрганизации);
			СтрокиДанных = Объект.МестаХранения.НайтиСтроки(ПараметрыПоиска);
			
			Если СтрокиДанных.Количество() = 0 Тогда
				
				НоваяСтрокаДанных = Объект.МестаХранения.Добавить();
				НоваяСтрокаДанных.МестоХранения = МестоХраненияОрганизации;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ОписаниеИсключения = НСтр( "ru = 'Синхронизация списка мест хранения не выполнена по причине:'");
		ВызватьИсключение (ОписаниеИсключения + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивМестПримененияОрганизации(ИдентификаторОрганизации)
	
	МассивМестПрименения = Новый Массив;
	
	НомерСтраницы        = 1;
	РазмерПорцииЗагрузки = 100;
	
	ПродолжитьПорционнуюЗагрузку = Истина;
	
	Пока ПродолжитьПорционнуюЗагрузку Цикл
	
		Результат  = ИнтерфейсСАТУРНВызовСервера.МестаПримененияПоОрганизации(ИдентификаторОрганизации, НомерСтраницы, РазмерПорцииЗагрузки);
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
			Возврат МассивМестПрименения;
			
		КонецЕсли;
		
		Для Каждого ЭлементДанных Из Результат.Список Цикл
			
			ДанныеМестаПрименения = ИнтерфейсСАТУРН.ДанныеМестаПрименения(ЭлементДанных);
			МестоПрименения = ИнтеграцияСАТУРН.ЗагрузитьМестоПрименения(ДанныеМестаПрименения);
			
			МассивМестПрименения.Добавить(МестоПрименения);
			
		КонецЦикла;
		
		Если Результат.Список.Количество() < РазмерПорцииЗагрузки Тогда
			ПродолжитьПорционнуюЗагрузку = Ложь;
		Иначе
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивМестПрименения;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивМестХраненияОрганизации(ИдентификаторОрганизации)
	
	МассивМестХранения = Новый Массив;
	
	НомерСтраницы        = 1;
	РазмерПорцииЗагрузки = 100;
	
	ПродолжитьПорционнуюЗагрузку = Истина;
	
	Пока ПродолжитьПорционнуюЗагрузку Цикл
	
		Результат  = ИнтерфейсСАТУРНВызовСервера.МестаХраненияПоОрганизации(ИдентификаторОрганизации, НомерСтраницы, РазмерПорцииЗагрузки);
		
		Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
			Возврат МассивМестХранения;
			
		КонецЕсли;
		
		Для Каждого ЭлементДанных Из Результат.Список Цикл
			
			ДанныеМестаХранения = ИнтерфейсСАТУРН.ДанныеМестаХранения(ЭлементДанных);
			МестоХранения = ИнтеграцияСАТУРН.ЗагрузитьМестоХранения(ДанныеМестаХранения);
			
			МассивМестХранения.Добавить(МестоХранения);
			
		КонецЦикла;
		
		Если Результат.Список.Количество() < РазмерПорцииЗагрузки Тогда
			ПродолжитьПорционнуюЗагрузку = Ложь;
		Иначе
			НомерСтраницы = НомерСтраницы + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивМестХранения;
	
КонецФункции

#КонецОбласти

#Область ПодборМестПрименения

&НаКлиенте
Процедура ВопросПриПодбореМестПримененияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Записать();

	Если ЗаписаноУспешно Тогда
		ВыполнитьПодборМестПрименения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросПриПодбореМестХраненияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Записать();

	Если ЗаписаноУспешно Тогда
		ВыполнитьПодборМестХранения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборМестПрименения()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",               Объект.Идентификатор);
	ПараметрыФормы.Вставить("ПереходитьКМестамПрименения", Истина);
	
	ОповещениеОкончанияПодбора = Новый ОписаниеОповещения("ОкончаниеПодбораМестПрименения", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.КлассификаторОрганизацийСАТУРН.Форма.ДанныеКлассификатора",
		ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОкончанияПодбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборМестХранения()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор",             Объект.Идентификатор);
	ПараметрыФормы.Вставить("ПереходитьКМестамХранения", Истина);
	
	ОповещениеОкончанияПодбора = Новый ОписаниеОповещения("ОкончаниеПодбораМестПрименения", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.КлассификаторОрганизацийСАТУРН.Форма.ДанныеКлассификатора",
		ПараметрыФормы, ЭтотОбъект,,,,
		ОповещениеОкончанияПодбора,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПодбораМестПрименения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Объект.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьПредставленияНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме()
	Прочитать();
КонецПроцедуры

#КонецОбласти

#КонецОбласти
