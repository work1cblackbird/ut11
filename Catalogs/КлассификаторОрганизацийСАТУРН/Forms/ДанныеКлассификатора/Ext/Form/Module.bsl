
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	МестаХраненияТекущийНомерСтраницы   = 1;
	МестаПримененияТекущийНомерСтраницы = 1;
	РазмерПорции                        = 100;
	
	ЦветГиперссылки                     = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
	ОбработатьПереданныеПараметры(Отказ);
	УправлениеЭлементамиФормы();
	СтандартныеПодсистемыСервер.СброситьРазмерыИПоложениеОкна(ЭтотОбъект);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформацияСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьОрганизацию" Тогда
		ПоказатьЗначение(, ОрганизацияСАТУРН);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыОбъектовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СформироватьСостояниеЗагрузки(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаПрименения

&НаКлиенте
Процедура МестаПримененияЗагрузитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МестаПрименения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(ТекущиеДанные, МестаПримененияКЗагрузке, КоличествоМестПримененияКЗагрузке);
	
	СформироватьСостояниеЗагрузки(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МестаПримененияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МестаПрименения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.МестоПрименения) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.МестоПрименения);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМестаХранения

&НаКлиенте
Процедура МестаХраненияЗагрузитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МестаХранения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(ТекущиеДанные, МестаХраненияКЗагрузке, КоличествоМестХраненияКЗагрузке);
	
	СформироватьСостояниеЗагрузки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МестаХранения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.МестоХранения) Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.МестоХранения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Загрузить(Команда)
	
	ЗагрузкаОрганизации();
	
	Если ЗначениеЗаполнено(ОрганизацияСАТУРН) Тогда
		
		ТекстЗаголовка = НСтр("ru = 'Загрузка из классификатора'");
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Выполнена загрузка организации %1.'"), ОрганизацияСАТУРН);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32ГосИС);
		
		ПараметрОповещения = ОрганизацияСАТУРН;
		ОбщегоНазначенияКлиент.ОповеститьОбИзмененииОбъекта(ОрганизацияСАТУРН, ПараметрОповещения);
		
		Закрыть(ОрганизацияСАТУРН);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияНавигацияПоискСтраницаПервая(Команда)
	
	ОчиститьСообщения();
	
	МестаХраненияТекущийНомерСтраницы = 1;
	РезультатОбработки = ЗаполнитьДанныеМестХранения(Идентификатор, МестаХраненияТекущийНомерСтраницы);
	
	Если ЗначениеЗаполнено(РезультатОбработки.ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(РезультатОбработки.ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияНавигацияПоискСтраницаПредыдущая(Команда)
	
	ОчиститьСообщения();

	МестаХраненияТекущийНомерСтраницы = МестаХраненияТекущийНомерСтраницы - 1;
	РезультатОбработки = ЗаполнитьДанныеМестХранения(Идентификатор, МестаХраненияТекущийНомерСтраницы);
	
	Если ЗначениеЗаполнено(РезультатОбработки.ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(РезультатОбработки.ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаХраненияНавигацияПоискСтраницаСледующая(Команда)
	
	ОчиститьСообщения();
	
	МестаХраненияТекущийНомерСтраницы = МестаХраненияТекущийНомерСтраницы + 1;
	РезультатОбработки = ЗаполнитьДанныеМестХранения(Идентификатор, МестаХраненияТекущийНомерСтраницы);
	
	Если ЗначениеЗаполнено(РезультатОбработки.ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(РезультатОбработки.ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестаПримененияНавигацияПоискСтраницаПервая(Команда)
	
	ОчиститьСообщения();
	
	МестаПримененияТекущийНомерСтраницы = 1;
	РезультатОбработки = ЗаполнитьДанныеМестПрименения(Идентификатор, МестаПримененияТекущийНомерСтраницы);
	
	Если ЗначениеЗаполнено(РезультатОбработки.ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(РезультатОбработки.ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МестаПримененияНавигацияПоискСтраницаПредыдущая(Команда)
	
	ОчиститьСообщения();

	МестаПримененияТекущийНомерСтраницы = МестаПримененияТекущийНомерСтраницы - 1;
	РезультатОбработки = ЗаполнитьДанныеМестПрименения(Идентификатор, МестаПримененияТекущийНомерСтраницы);
	
	Если ЗначениеЗаполнено(РезультатОбработки.ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(РезультатОбработки.ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МестаПримененияНавигацияПоискСтраницаСледующая(Команда)
	
	ОчиститьСообщения();
	
	МестаПримененияТекущийНомерСтраницы = МестаПримененияТекущийНомерСтраницы + 1;
	РезультатОбработки = ЗаполнитьДанныеМестПрименения(Идентификатор, МестаПримененияТекущийНомерСтраницы);
	
	Если ЗначениеЗаполнено(РезультатОбработки.ТекстСообщения) Тогда
		
		ПоказатьОповещениеПользователя(РезультатОбработки.ТекстСообщения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	Если Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаПрименения Тогда
		
		Для Каждого СтрокаМестПрименения Из МестаПрименения Цикл
			
			Если СтрокаМестПрименения.Загрузить Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМестПрименения.Загрузить = Истина;
			ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(СтрокаМестПрименения, МестаПримененияКЗагрузке, КоличествоМестПримененияКЗагрузке);
			
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаХранения Тогда
		
		Для Каждого СтрокаМестХранения Из МестаХранения Цикл
			
			Если СтрокаМестХранения.Загрузить Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМестХранения.Загрузить = Истина;
			ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(СтрокаМестХранения, МестаХраненияКЗагрузке, КоличествоМестХраненияКЗагрузке);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьСостояниеЗагрузки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Если Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаПрименения Тогда
		
		Для Каждого СтрокаМестПрименения Из МестаПрименения Цикл
			
			Если Не СтрокаМестПрименения.Загрузить Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМестПрименения.Загрузить = Ложь;
			ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(СтрокаМестПрименения, МестаПримененияКЗагрузке, КоличествоМестПримененияКЗагрузке);
			
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаХранения Тогда
		
		Для Каждого СтрокаМестХранения Из МестаХранения Цикл
			
			Если Не СтрокаМестХранения.Загрузить Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМестХранения.Загрузить = Ложь;
			ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(СтрокаМестХранения, МестаХраненияКЗагрузке, КоличествоМестХраненияКЗагрузке);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	СформироватьСостояниеЗагрузки(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Не давать выбрать уже загруженные Места хранения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МестаХраненияЗагрузить.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("МестаХранения.ИндексКартинкиЕстьВБазе");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Не давать выбрать уже загруженные Места применения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МестаПримененияЗагрузить.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("МестаПрименения.ИндексКартинкиЕстьВБазе");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Не выводить пиктограмму еще не загруженных Мест хранения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МестаХраненияИндексКартинкиЕстьВБазе.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("МестаХранения.ИндексКартинкиЕстьВБазе");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Не выводить пиктограмму еще не загруженных Мест применения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МестаПримененияИндексКартинкиЕстьВБазе.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("МестаПрименения.ИндексКартинкиЕстьВБазе");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаОрганизации()
	
	Если ЗначениеЗаполнено(АдресХраненияПараметрыОбмена) Тогда
		ПараметрыОбмена = ПолучитьИзВременногоХранилища(АдресХраненияПараметрыОбмена);
	Иначе
		ПараметрыОбмена = Неопределено;
	КонецЕсли;
	
	ОрганизацияСАТУРН = ИнтеграцияСАТУРН.ЗагрузитьОрганизацию(ДанныеОрганизации,, ПараметрыОбмена);
	
	Для Каждого СтрокаМестаХранения Из МестаХраненияКЗагрузке Цикл
		
		МестоХранения = ЗагрузитьМестоХранения(СтрокаМестаХранения, ПараметрыОбмена);
		
		СтруктураОтбора = Новый Структура("Идентификатор", СтрокаМестаХранения.Идентификатор);
		СтрокиДанныхМестХранения = МестаХранения.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаМестХранения Из СтрокиДанныхМестХранения Цикл
			
			СтрокаМестХранения.МестоХранения = МестоХранения;
			
		КонецЦикла;
		
	КонецЦикла;

	Для Каждого СтрокаМестаПрименения Из МестаПримененияКЗагрузке Цикл
		
		МестоПрименения = ЗагрузитьМестоПрименения(СтрокаМестаПрименения, ПараметрыОбмена);
		
		СтруктураОтбора = Новый Структура("Идентификатор", СтрокаМестаПрименения.Идентификатор);
		СтрокиДанныхМестПрименения = МестаПрименения.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаМестПрименения Из СтрокиДанныхМестПрименения Цикл
			
			СтрокаМестПрименения.МестоПрименения = МестоПрименения;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьМестоХранения(ДанныеМестаХранения, ПараметрыОбмена)
	
	Возврат ИнтеграцияСАТУРН.ЗагрузитьМестоХранения(ДанныеМестаХранения,, ПараметрыОбмена);
	
КонецФункции

&НаСервере
Функция ЗагрузитьМестоПрименения(ДанныеМестаПрименения, ПараметрыОбмена) 
	
	Возврат ИнтеграцияСАТУРН.ЗагрузитьМестоПрименения(ДанныеМестаПрименения,, ПараметрыОбмена);
	
КонецФункции

&НаСервере
Процедура ОбработатьПереданныеПараметры(Отказ)
	
	Если Не ЗначениеЗаполнено(Параметры.Идентификатор) Тогда
		ВызватьИсключение НСтр("ru = 'Форма не предназначена для открытия без передачи в неё идентификатора организации.'");
	Иначе
		
		Идентификатор = Параметры.Идентификатор;
		НеПоказыватьСостояниеЗагрузки = Параметры.НеПоказыватьСостояниеЗагрузки;
		Результат = ИнтерфейсСАТУРНВызовСервера.ОрганизацияПоИдентификатору(Идентификатор);
		
		Если Не ПустаяСтрока(Результат.ТекстОшибки) Тогда
			
			ЕстьОшибка  = Истина;
			Строки = Новый Массив;
			Строки.Добавить(
				Новый ФорматированнаяСтрока(
				НСтр("ru = 'Ошибка:'")));
			Строки.Добавить(" ");
			Строки.Добавить(Новый ФорматированнаяСтрока(Результат.ТекстОшибки,, ЦветаСтиля.ЦветТекстаПроблемаГосИС));
			
			ТекстОшибки = Новый ФорматированнаяСтрока(Строки);
			Элементы.ФормаЗагрузить.Доступность = Ложь;
			
		Иначе
			
			ЕстьОшибка  = Ложь;
			ДанныеОрганизации = ИнтерфейсСАТУРН.ДанныеОрганизации(Результат.Элемент);
			
			ЗаполнитьДанныеОрганизации(ДанныеОрганизации);
			ЗаполнитьДанныеМестХранения(Идентификатор, МестаХраненияТекущийНомерСтраницы);
			ЗаполнитьДанныеМестПрименения(Идентификатор, МестаПримененияТекущийНомерСтраницы);
			
			Элементы.ФормаЗагрузить.Доступность = Истина;
			
			Если Параметры.ПереходитьКМестамПрименения Тогда
				Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаПрименения;
			ИначеЕсли Параметры.ПереходитьКМестамХранения Тогда
				Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаХранения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеВИБ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	КлассификаторОрганизацийСАТУРН.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлассификаторОрганизацийСАТУРН КАК КлассификаторОрганизацийСАТУРН
	|ГДЕ
	|	КлассификаторОрганизацийСАТУРН.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ОрганизацияСАТУРН = Выборка.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеВИБМестХранения()

	КоличествоЗагруженныхМестХранения = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МестаХраненияСАТУРН.Ссылка        КАК Ссылка,
	|	МестаХраненияСАТУРН.Идентификатор КАК Идентификатор,
	|	МестаХраненияСАТУРН.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.МестаХраненияСАТУРН КАК МестаХраненияСАТУРН
	|ГДЕ
	|	МестаХраненияСАТУРН.Идентификатор В (&МассивИдентификаторов)
	|	И МестаХраненияСАТУРН.Идентификатор <> """"";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", ОбщегоНазначения.ВыгрузитьКолонку(МестаХранения, "Идентификатор", Истина));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Идентификатор", Выборка.Идентификатор);
		СтрокиВСоставе = МестаХранения.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаВСоставе Из СтрокиВСоставе Цикл
			
			СтрокаВСоставе.МестоХранения           = Выборка.Ссылка;
			СтрокаВСоставе.ИндексКартинкиЕстьВБазе = 1;
			
			КоличествоЗагруженныхМестХранения = КоличествоЗагруженныхМестХранения + 1;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеВИБМестПрименения()
	
	КоличествоЗагруженныхМестПрименения = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	МестаПримененияСАТУРН.Ссылка        КАК Ссылка,
	|	МестаПримененияСАТУРН.Идентификатор КАК Идентификатор,
	|	МестаПримененияСАТУРН.Наименование  КАК Наименование
	|ИЗ
	|	Справочник.МестаПримененияСАТУРН КАК МестаПримененияСАТУРН
	|ГДЕ
	|	МестаПримененияСАТУРН.Идентификатор В (&МассивИдентификаторов)
	|	И МестаПримененияСАТУРН.Идентификатор <> """"";
	
	Запрос.УстановитьПараметр("МассивИдентификаторов", ОбщегоНазначения.ВыгрузитьКолонку(МестаПрименения, "Идентификатор", Истина));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Идентификатор", Выборка.Идентификатор);
		СтрокиВСоставе = МестаПрименения.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаВСоставе Из СтрокиВСоставе Цикл
			
			СтрокаВСоставе.МестоПрименения         = Выборка.Ссылка;
			СтрокаВСоставе.ИндексКартинкиЕстьВБазе = 1;
			
			КоличествоЗагруженныхМестПрименения = КоличествоЗагруженныхМестПрименения + 1;
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьНаличиеВСпискеДляЗагрузки()
	
	Если Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаХранения Тогда
		
		КоличествоМестХраненияКЗагрузке = 0;
		
		Для Каждого СтрокаМестХранения Из МестаХранения Цикл
			
			СтрокиПоискаВЗагрузке = МестаХраненияКЗагрузке.НайтиСтроки(Новый Структура("GUID", СтрокаМестХранения.GUID));
			
			Если СтрокиПоискаВЗагрузке.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМестХранения.Загрузить    = Истина;
			КоличествоМестХраненияКЗагрузке = КоличествоМестХраненияКЗагрузке + 1;
			
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыОбъектов.ТекущаяСтраница = Элементы.СтраницаМестаПрименения Тогда
		
		КоличествоМестПримененияКЗагрузке = 0;
		
		Для Каждого СтрокаМестПрименения Из МестаПрименения Цикл
		
			СтрокиПоискаВЗагрузке = МестаПримененияКЗагрузке.НайтиСтроки(Новый Структура("GUID", СтрокаМестПрименения.GUID));
			
			Если СтрокиПоискаВЗагрузке.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМестПрименения.Загрузить    = Истина;
			КоличествоМестПримененияКЗагрузке = КоличествоМестПримененияКЗагрузке + 1;
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеОрганизации(ДанныеОрганизации)
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеОрганизации);
	ОпределитьНаличиеВИБ();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДанныеМестХранения(Идентификатор, НомерСтраницы)
	
	РезультатВозврата = Новый Структура("Отказ, ТекстСообщения", Ложь, "");
	
	Результат  = ИнтерфейсСАТУРНВызовСервера.МестаХраненияПоОрганизации(Идентификатор, НомерСтраницы, РазмерПорции);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		РезультатВозврата.Отказ = Истина;
		
		ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат РезультатВозврата;
		
	КонецЕсли;
	
	Если Результат.Список.Количество() = 0 Тогда
		
		РезультатВозврата.ТекстСообщения = НСтр("ru = 'Нет больше данных по местам хранения.'");
		Элементы.МестаХраненияНавигацияНайденоВКлассификатореСтраницаСледующая.Доступность = Ложь;
		
		Возврат РезультатВозврата;
		
	КонецЕсли;
	
	МестаХранения.Очистить();
	
	Для Каждого ЭлементДанных Из Результат.Список Цикл
		
		ДанныеМестаХранения = ИнтерфейсСАТУРН.ДанныеМестаХранения(ЭлементДанных);
		
		НоваяСтрокаТаблицы = МестаХранения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ДанныеМестаХранения);
		
		МассивСловСтрокиПодтипа = Новый Массив;
		
		Если Не НоваяСтрокаТаблицы.ЭтоПроизводственнаяПлощадка
			И Не НоваяСтрокаТаблицы.ЭтоСкладВременногоХранения Тогда
			
			МассивСловСтрокиПодтипа.Добавить("-");
			
		Иначе
			
			Если НоваяСтрокаТаблицы.ЭтоСкладВременногоХранения Тогда
				МассивСловСтрокиПодтипа.Добавить(НСтр("ru = 'Склад временного хранения'"));
			КонецЕсли;
			
			Если НоваяСтрокаТаблицы.ЭтоПроизводственнаяПлощадка Тогда
				МассивСловСтрокиПодтипа.Добавить(НСтр("ru = 'Производственная площадка'"));
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрокаТаблицы.Подтип = СтрСоединить(МассивСловСтрокиПодтипа, "; ");
		
	КонецЦикла;
	
	ОпределитьНаличиеВИБМестХранения();
	ОпределитьНаличиеВСпискеДляЗагрузки();
	
	УправлениеЭлементамиФормы();
	
	Возврат РезультатВозврата;
	
КонецФункции

&НаСервере
Функция ЗаполнитьДанныеМестПрименения(Идентификатор, НомерСтраницы)
	
	РезультатВозврата = Новый Структура("Отказ, ТекстСообщения", Ложь, "");
	
	Результат  = ИнтерфейсСАТУРНВызовСервера.МестаПримененияПоОрганизации(Идентификатор, НомерСтраницы, РазмерПорции);
	
	Если ЗначениеЗаполнено(Результат.ТекстОшибки) Тогда
		
		РезультатВозврата.Отказ = Истина;
		
		ОбщегоНазначения.СообщитьПользователю(Результат.ТекстОшибки);
		Возврат РезультатВозврата;
		
	КонецЕсли;
	
	Если Результат.Список.Количество() = 0 Тогда
		
		РезультатВозврата.ТекстСообщения = НСтр("ru = 'Нет больше данных по местам применения.'");
		Элементы.МестаХраненияНавигацияНайденоВКлассификатореСтраницаСледующая.Доступность = Ложь;
		
		Возврат РезультатВозврата;
		
	КонецЕсли;
	
	МестаПрименения.Очистить();
	
	Для Каждого ЭлементДанных Из Результат.Список Цикл
		
		ДанныеМестаПрименения = ИнтерфейсСАТУРН.ДанныеМестаПрименения(ЭлементДанных);
		
		НоваяСтрокаТаблицы = МестаПрименения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, ДанныеМестаПрименения);
		
	КонецЦикла;
	
	ОпределитьНаличиеВИБМестПрименения();
	ОпределитьНаличиеВСпискеДляЗагрузки();
	
	УправлениеЭлементамиФормы();
	
	Возврат РезультатВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьСостояниеЗагрузки(Форма)

	Строки = Новый Массив;
	
	Если ЗначениеЗаполнено(Форма.ОрганизацияСАТУРН) Тогда
		
		Строки.Добавить(НСтр("ru = 'Организация уже загружена'"));
		
		Строки.Добавить(" (");
		Строки.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'открыть'"),, Форма.ЦветГиперссылки,, "ОткрытьОрганизацию"));
		Строки.Добавить(").");
		
	КонецЕсли;
	
	Если Форма.Элементы.СтраницыОбъектов.ТекущаяСтраница = Форма.Элементы.СтраницаМестаХранения Тогда
		
		КоличествоМестХранения = Форма.МестаХранения.Количество();
		Строки.Добавить(" ");
		
		Если КоличествоМестХранения > 0 Тогда
			
			Строки.Добавить(СтрШаблон(НСтр("ru = 'Мест хранения на странице - %1'"), КоличествоМестХранения));
			
			Если Форма.КоличествоЗагруженныхМестХранения > 0 Тогда
				
				Строки.Добавить(", ");
				
				Если Форма.КоличествоЗагруженныхМестХранения = КоличествоМестХранения Тогда
					
					Строки.Добавить(НСтр("ru = 'все загружены'"));
					
				Иначе
					
					Строки.Добавить(СтрШаблон(НСтр("ru = 'загружено - %1'"), Форма.КоличествоЗагруженныхМестХранения));
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если Форма.КоличествоМестХраненияКЗагрузке > 0 Тогда
				
				Строки.Добавить(", ");
				Строки.Добавить(СтрШаблон(НСтр("ru = 'к загрузке - %1'"), Форма.КоличествоМестХраненияКЗагрузке));
				
			КонецЕсли;
		
		Иначе
			
			Строки.Добавить(НСтр("ru = 'Места хранения отсутствуют'"));
			
		КонецЕсли;
		
		Строки.Добавить(".");
		
	ИначеЕсли Форма.Элементы.СтраницыОбъектов.ТекущаяСтраница = Форма.Элементы.СтраницаМестаПрименения Тогда
	
		КоличествоМестПрименения = Форма.МестаПрименения.Количество();
		Строки.Добавить(" ");
		
		Если КоличествоМестПрименения > 0 Тогда
			
			Строки.Добавить(СтрШаблон(НСтр("ru = 'Мест применения на странице - %1'"), КоличествоМестПрименения));
			
			Если Форма.КоличествоЗагруженныхМестПрименения > 0 Тогда
				
				Строки.Добавить(", ");
				
				Если Форма.КоличествоЗагруженныхМестПрименения = КоличествоМестПрименения Тогда
					
					Строки.Добавить(НСтр("ru = 'все загружены'"));
					
				Иначе
					
					Строки.Добавить(СтрШаблон(НСтр("ru = 'загружено - %1'"), Форма.КоличествоЗагруженныхМестПрименения));
					
				КонецЕсли;
					
			КонецЕсли;
			
			Если Форма.КоличествоМестПримененияКЗагрузке > 0 Тогда
				
				Строки.Добавить(", ");
				Строки.Добавить(СтрШаблон(НСтр("ru = 'к загрузке - %1'"), Форма.КоличествоМестПримененияКЗагрузке));
				
			КонецЕсли;
		
		Иначе
			
			Строки.Добавить(НСтр("ru = 'Места применения отсутствуют'"));
			
		КонецЕсли;
		
		Строки.Добавить(".");
		
	КонецЕсли;
	
	Форма.ИнформацияСостояниеЗагрузки = Новый ФорматированнаяСтрока(Строки);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Если ЕстьОшибка Тогда
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОшибка;
		Элементы.ФормаОтмена.Видимость         = Ложь;
		Элементы.ФормаЗакрыть.Видимость        = Истина;
		Элементы.ФормаЗагрузить.Видимость      = Ложь;
		
	Иначе
		
		СформироватьСостояниеЗагрузки(ЭтотОбъект);
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаДанныеКлассификатора;
		
		Если ЗначениеЗаполнено(ОрганизацияСАТУРН) Тогда
			
			Если НеПоказыватьСостояниеЗагрузки Тогда
				Элементы.ИнформацияСостояниеЗагрузки.Видимость = Ложь;
			КонецЕсли;
			
			Элементы.ФормаОтмена.Видимость    = Ложь;
			Элементы.ФормаЗакрыть.Видимость   = Истина;
			Элементы.ФормаЗагрузить.Видимость = Истина;
			
		Иначе
			
			Элементы.ФормаОтмена.Видимость    = Истина;
			Элементы.ФормаЗакрыть.Видимость   = Ложь;
			Элементы.ФормаЗагрузить.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.МестаХраненияНавигацияНайденоВКлассификаторе.Видимость = Истина;
	Элементы.МестаХраненияНавигацияНайденоВКлассификатореСтраницаПредыдущая.Доступность = (МестаХраненияТекущийНомерСтраницы > 1);
	Элементы.МестаХраненияНавигацияНайденоВКлассификатореСтраницаПервая.Доступность     = (МестаХраненияТекущийНомерСтраницы > 1);
	Элементы.МестаХраненияНавигацияНайденоВКлассификатореСтраницаСледующая.Доступность  = (МестаХранения.Количество() > 0 И МестаХранения.Количество() = РазмерПорции);
	
	Элементы.МестаПримененияНавигацияНайденоВКлассификаторе.Видимость = Истина;
	Элементы.МестаПримененияНавигацияНайденоВКлассификатореСтраницаПредыдущая.Доступность = (МестаПримененияТекущийНомерСтраницы > 1);
	Элементы.МестаПримененияНавигацияНайденоВКлассификатореСтраницаПервая.Доступность     = (МестаПримененияТекущийНомерСтраницы > 1);
	Элементы.МестаПримененияНавигацияНайденоВКлассификатореСтраницаСледующая.Доступность  = (МестаПрименения.Количество() > 0 И МестаПрименения.Количество() = РазмерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУдалитьДанныеКЗагрузкеПоОрганизации(СтрокаОбработки, ТаблицаОбработки, ИтоговоеКоличествоКОбработке)
	
	Если Не СтрокаОбработки.Загрузить Тогда
		
		СтрокиУдаления = ТаблицаОбработки.НайтиСтроки(Новый Структура("GUID", СтрокаОбработки.GUID));
		
		Если СтрокиУдаления.Количество() Тогда
		
			ИтоговоеКоличествоКОбработке = ИтоговоеКоличествоКОбработке - 1;
			ТаблицаОбработки.Удалить(СтрокиУдаления[0]);
			
		КонецЕсли;
		
	Иначе
		
		ИтоговоеКоличествоКОбработке = ИтоговоеКоличествоКОбработке + 1;
		ЗаполнитьЗначенияСвойств(ТаблицаОбработки.Добавить(), СтрокаОбработки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти