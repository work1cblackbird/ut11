#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет таблицу сопоставлений см. ИнтеграцияСАТУРН.НоваяТаблицаОрганизацияКонтрагент
// 
// Параметры:
//  ТаблицаСопоставлений - см. ИнтеграцияСАТУРН.НоваяТаблицаОрганизацияКонтрагент
// 
Процедура ЗаполнитьТаблицуСопоставленийКлассификаторамиСАТУРН(ТаблицаСопоставлений) Экспорт
	
	ИнтеграцияСАТУРНВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаСопоставлений);
	
	Запрос = Новый Запрос;
	Запрос.Текст  = "ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки            КАК НомерСтроки,
	|	ИсходнаяТаблица.ИНН                    КАК ИНН,
	|	ИсходнаяТаблица.ОрганизацияКонтрагент  КАК ОрганизацияКонтрагент,
	|	ИсходнаяТаблица.ТорговыйОбъект         КАК ТорговыйОбъект,
	|	ИсходнаяТаблица.ПроизводственныйОбъект КАК ПроизводственныйОбъект
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	&ИсходнаяТаблица КАК ИсходнаяТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки            КАК НомерСтроки,
	|	КлассификаторОрганизацийСАТУРН.Ссылка  КАК ОрганизацияСАТУРН,
	|	ИсходнаяТаблица.ТорговыйОбъект         КАК ТорговыйОбъект,
	|	ИсходнаяТаблица.ПроизводственныйОбъект КАК ПроизводственныйОбъект,
	|	1                                      КАК Приоритет
	|ПОМЕСТИТЬ НайденныеОрганизации
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН КАК КлассификаторОрганизацийСАТУРН
	|		ПО ИсходнаяТаблица.ОрганизацияКонтрагент = КлассификаторОрганизацийСАТУРН.Контрагент
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсходнаяТаблица.НомерСтроки            КАК НомерСтроки,
	|	КлассификаторОрганизацийСАТУРН.Ссылка  КАК ОрганизацияСАТУРН,
	|	ИсходнаяТаблица.ТорговыйОбъект         КАК ТорговыйОбъект,
	|	ИсходнаяТаблица.ПроизводственныйОбъект КАК ПроизводственныйОбъект,
	|	2                                      КАК Приоритет
	|ИЗ
	|	ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН КАК КлассификаторОрганизацийСАТУРН
	|		ПО ИсходнаяТаблица.ИНН = КлассификаторОрганизацийСАТУРН.ИНН
	|		И ИсходнаяТаблица.ИНН <> """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеОрганизации.НомерСтроки                  КАК НомерСтроки,
	|	НайденныеОрганизации.ОрганизацияСАТУРН            КАК ОрганизацияСАТУРН,
	|	МестаХраненияПроизводственныйОбъект.МестоХранения КАК МестоХраненияПроизводственныйОбъект,
	|	МестаХраненияТорговыйОбъект.МестоХранения         КАК МестоХраненияТорговыйОбъект,
	|	НайденныеОрганизации.Приоритет                    КАК Приоритет,
	|	1                                                 КАК ПриоритетОрганизацияКонтрагент
	|ИЗ
	|	НайденныеОрганизации КАК НайденныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН.МестаХранения КАК МестаХраненияТорговыйОбъект
	|		ПО НайденныеОрганизации.ОрганизацияСАТУРН = МестаХраненияТорговыйОбъект.Ссылка
	|		И НайденныеОрганизации.ТорговыйОбъект = МестаХраненияТорговыйОбъект.ТорговыйОбъект
	|		И НайденныеОрганизации.ТорговыйОбъект <> &ПустойТорговыйОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН.МестаХранения КАК МестаХраненияПроизводственныйОбъект
	|		ПО НайденныеОрганизации.ОрганизацияСАТУРН = МестаХраненияПроизводственныйОбъект.Ссылка
	|		И НайденныеОрганизации.ПроизводственныйОбъект = МестаХраненияПроизводственныйОбъект.ПроизводственныйОбъект
	|		И НайденныеОрганизации.ПроизводственныйОбъект <> &ПустойПроизводственныйОбъект
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НайденныеОрганизации.НомерСтроки,
	|	НайденныеОрганизации.ОрганизацияСАТУРН,
	|	МестаХраненияПроизводственныйОбъект.МестоХранения,
	|	МестаХраненияТорговыйОбъект.МестоХранения,
	|	НайденныеОрганизации.Приоритет,
	|	2
	|ИЗ
	|	НайденныеОрганизации КАК НайденныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН.МестаХранения КАК МестаХраненияТорговыйОбъект
	|		ПО НайденныеОрганизации.ТорговыйОбъект = МестаХраненияТорговыйОбъект.ТорговыйОбъект
	|		И НайденныеОрганизации.ТорговыйОбъект <> &ПустойТорговыйОбъект
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийСАТУРН.МестаХранения КАК МестаХраненияПроизводственныйОбъект
	|		ПО НайденныеОрганизации.ПроизводственныйОбъект = МестаХраненияПроизводственныйОбъект.ПроизводственныйОбъект
	|		И НайденныеОрганизации.ПроизводственныйОбъект <> &ПустойПроизводственныйОбъект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	ПриоритетОрганизацияКонтрагент";
	
	Запрос.УстановитьПараметр("ИсходнаяТаблица",              ТаблицаСопоставлений);
	Запрос.УстановитьПараметр("ПустойТорговыйОбъект",         ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ТорговыйОбъектСАТУРН"));
	Запрос.УстановитьПараметр("ПустойПроизводственныйОбъект", ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ПроизводственныйОбъектИС"));
	
	УстановитьПривилегированныйРежим(Истина);
	ВыборкаИзРезультатаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаИзРезультатаЗапроса.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("НомерСтроки", ВыборкаИзРезультатаЗапроса.НомерСтроки);
		СтрокаТаблицы   = ТаблицаСопоставлений.НайтиСтроки(СтруктураПоиска)[0];
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ОрганизацияСАТУРН) Тогда
			СтрокаТаблицы.ОрганизацияСАТУРН = ВыборкаИзРезультатаЗапроса.ОрганизацияСАТУРН;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.МестоХраненияТорговыйОбъект) Тогда
			СтрокаТаблицы.МестоХраненияТорговыйОбъект = ВыборкаИзРезультатаЗапроса.МестоХраненияТорговыйОбъект;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.МестоХраненияПроизводственныйОбъект) Тогда
			СтрокаТаблицы.МестоХраненияПроизводственныйОбъект = ВыборкаИзРезультатаЗапроса.МестоХраненияПроизводственныйОбъект;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОрганизацииКонтрагентыПоКлассификаторамСАТУРН(КлассификаторыСАТУРН) Экспорт
	
	ВозвращаемоеЗначение   = Новый Соответствие();
	СсылкиНаКлассификаторы = Новый Массив;
	
	ТаблицаДанных = НоваяТаблицаРеквизитовКлассификатораОрганизаций();
	ТаблицаДанных.Индексы.Добавить("ОрганизацияСАТУРН");
	
	Если ТипЗнч(КлассификаторыСАТУРН) = Тип("Массив") Тогда
		СсылкиНаКлассификаторы = КлассификаторыСАТУРН;
	Иначе
		СсылкиНаКлассификаторы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлассификаторыСАТУРН);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлассификаторОрганизацийСАТУРН.Ссылка     КАК ОрганизацияСАТУРН,
		|	КлассификаторОрганизацийСАТУРН.ИНН        КАК ИНН,
		|	КлассификаторОрганизацийСАТУРН.Контрагент КАК ОрганизацияКонтрагент
		|ИЗ
		|	Справочник.КлассификаторОрганизацийСАТУРН КАК КлассификаторОрганизацийСАТУРН
		|ГДЕ
		|	КлассификаторОрганизацийСАТУРН.Ссылка В (&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", СсылкиНаКлассификаторы);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ТипЗначенияПустойОрганизации = ТипЗнч(ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Организация"));
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеПоКлючу = Новый Структура("Организация, Контрагент");
		ВозвращаемоеЗначение.Вставить(ВыборкаДетальныеЗаписи.ОрганизацияСАТУРН, ЗначениеПоКлючу);
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОрганизацияКонтрагент) Тогда
			
			Если ТипЗнч(ВыборкаДетальныеЗаписи.ОрганизацияКонтрагент) = ТипЗначенияПустойОрганизации Тогда
				ЗначениеПоКлючу.Организация = ВыборкаДетальныеЗаписи.ОрганизацияКонтрагент;
			Иначе
				ЗначениеПоКлючу.Контрагент = ВыборкаДетальныеЗаписи.ОрганизацияКонтрагент;
			КонецЕсли;
		
		Иначе
			НоваяСтрока = ТаблицаДанных.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаДанных.Количество() Тогда
		ИнтеграцияСАТУРНПереопределяемый.ПриОпределенииКонтрагентовОрганизацийПоРеквизитам(ТаблицаДанных);
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		ЗаполнитьЗначенияСвойств(ВозвращаемоеЗначение[СтрокаТаблицы.ОрганизацияСАТУРН], СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Записывает в справочник "Классификатор организаций САТУРН" соответствие прикладных реквизитов
//   * Не изменяет существующие сопоставления (поле Контрагент)
//
// Параметры:
//   Ключ       - СправочникСсылка.КлассификаторОрганизацийСАТУРН - данные классификатора САТУРН
//   Контрагент - ОпределяемыйТип.ОрганизацияКонтрагентГосИС      - прикладной справочник
//
Процедура СопоставитьСПрикладнымиРеквизитами(Ключ, Контрагент) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ)
		Или Не ЗначениеЗаполнено(Контрагент)
		Или ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ключ, "Контрагент")) Тогда
		Возврат;
	КонецЕсли;
	
	КлючОбъект = Ключ.ПолучитьОбъект();
	КлючОбъект.Контрагент = Контрагент;
	
	УстановитьПривилегированныйРежим(Истина);
	КлючОбъект.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаВыбора" Тогда
	
		Если Параметры = Неопределено Тогда
			Параметры = Новый Структура();
		КонецЕсли;
		
		Параметры.Вставить("РежимВыбора", Истина);
		
		ВыбраннаяФорма       = "Справочник.КлассификаторОрганизацийСАТУРН.Форма.ФормаСписка";
		СтандартнаяОбработка = Ложь;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Обмен

Функция ДанныеОбъекта(ЭлементДанных) Экспорт
	
	ДанныеОрганизации = Новый Структура;
	
	ДанныеОрганизации.Вставить("GUID",          ЭлементДанных.sys_guid);
	ДанныеОрганизации.Вставить("Идентификатор", ЭлементДанных.id);
	ДанныеОрганизации.Вставить("Статус",        ИнтерфейсСАТУРН.Статус(ЭлементДанных.lcState));
	ДанныеОрганизации.Вставить("ДатаСозданияЦЕРБЕР",  ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateRegistration));
	ДанныеОрганизации.Вставить("ДатаИзмененияЦЕРБЕР", ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateModified));
	
	ДанныеОрганизации.Вставить("ДатаСоздания",  ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементДанных.sys_timeFrom));
	ДанныеОрганизации.Вставить("ДатаИзменения", ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементДанных.sys_changedAt));
	
	ДанныеОрганизации.Вставить("Тип",  ИнтерфейсСАТУРН.ТипХозяйствующегоСубъекта(ЭлементДанных.vetis_type));
	ДанныеОрганизации.Вставить("ИНН",  ЭлементДанных.INN);
	ДанныеОрганизации.Вставить("КПП",  ЭлементДанных.KPP);
	ДанныеОрганизации.Вставить("ОГРН", ЭлементДанных.OGRN);
	
	ДанныеОрганизации.Вставить("Наименование",       ЭлементДанных.name);
	ДанныеОрганизации.Вставить("НаименованиеПолное", ЭлементДанных.fullName);
	ДанныеОрганизации.Вставить("ФИО",                ЭлементДанных.personFio);
	ДанныеОрганизации.Вставить("ФактическийАдрес",   ЭлементДанных.factualAddress);
	ДанныеОрганизации.Вставить("ЮридическийАдрес",   ЭлементДанных.legalAddress);
	ДанныеОрганизации.Вставить("Телефон",            ЭлементДанных.phoneNumber);
	ДанныеОрганизации.Вставить("Email",              ЭлементДанных.email);
	ДанныеОрганизации.Вставить("ОтветственноеЛицо",  ЭлементДанных.responsiblePerson);
	ДанныеОрганизации.Вставить("ЭтоВладелецСклада",  ЭлементДанных.isWarehouseOwner = "true");
	
	ДанныеОрганизации.Вставить("Роли", Новый Массив);
	Если ЭлементДанных.isAgriculturalManufacturer = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.ПроизводительСельхозпродукции);
	КонецЕсли;
	Если ЭлементДанных.isAnother = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Прочий);
	КонецЕсли;
	Если ЭлементДанных.isDistributor = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Дистрибьютор);
	КонецЕсли;
	Если ЭлементДанных.isForeignConsumer = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.ИностраннаяОрганизацияПотребитель);
	КонецЕсли;
	Если ЭлементДанных.isImporter = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Импортер);
	КонецЕсли;
	Если ЭлементДанных.isIndustrialConsumer = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.ПромышленноеХимическоеПроизводство);
	КонецЕсли;
	Если ЭлементДанных.isManufacturer = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.ПроизводительПАТ);
	КонецЕсли;
	Если ЭлементДанных.isMeasuring = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Лаборатория);
	КонецЕсли;
	Если ЭлементДанных.isRegulator = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Регулятор);
	КонецЕсли;
	Если ЭлементДанных.isRetailTrader = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Ритейлер);
	КонецЕсли;
	Если ЭлементДанных.isTransporter = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.Перевозчик);
	КонецЕсли;
	Если ЭлементДанных.isUnregisteredConsumer = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.НезарегистрированныйУчастникОборота);
	КонецЕсли;
	Если ЭлементДанных.isUtilizer = "true" Тогда
		ДанныеОрганизации.Роли.Добавить(Перечисления.РолиКонтрагентовСАТУРН.ОрганизацияУтилизатор);
	КонецЕсли;
	
	ДанныеОрганизации.Вставить("Комментарий", ЭлементДанных.description);
	
	Возврат ДанныеОрганизации;
	
КонецФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	Если ЭлементОчереди.Операция = ОперацияЗагрузкиКлассификатора() Тогда
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		Попытка
			
			Для Каждого ЭлементДанных Из ВходящиеДанные Цикл
				
				ДанныеОбъекта   = ДанныеОбъекта(ЭлементДанных);
				СсылкаНаЭлемент = ЗагрузитьОбъект(ДанныеОбъекта, ПараметрыОбмена,,, ЭлементОчереди.ОрганизацияСАТУРН);
				
				Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
					Продолжить;
				КонецЕсли;
				ИзмененныеОбъекты.Добавить(СсылкаНаЭлемент);
				
			КонецЦикла;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСозданиеКлассификатора Тогда
		
		РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщенияJSON = Новый Массив;
		
		Идентификатор = ПолученныеДанные.objList._OBJ_ARRAY[0].id;
		
		СправочникОбъект               = СоздатьЭлемент();
		СправочникОбъект.Идентификатор = Идентификатор;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки = Идентификатор;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Документ            = СправочникОбъект.Ссылка;
		СообщениеJSON.Версия              = 1;
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ОрганизацияИзменениеКлассификатора;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = Идентификатор;
		СообщениеJSON.ПараметрыЗапроса    = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
		СообщениеJSON.АргументыОперации.theCard._id = Идентификатор;
		
		СообщениеJSON.ПараметрыЗапроса.ДанныеОбъекта.Идентификатор = Идентификатор;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияИзменениеКлассификатора Тогда
		
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыИсходящегоСообщенияОснования = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.КлассификаторОрганизацийСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникОбъект               = ЭлементОчереди.Документ.ПолучитьОбъект();
			РеквизитыИсключения            = "";
			
			Если ЗначениеЗаполнено(СправочникОбъект.Статус) Тогда
				РеквизитыИсключения = "Статус";
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СправочникОбъект, ПараметрыИсходящегоСообщенияОснования.ДанныеОбъекта,, РеквизитыИсключения);
			
			СправочникОбъект.Роли.Очистить();
			
			Для Каждого РольКонтрагента Из ПараметрыИсходящегоСообщенияОснования.ДанныеОбъекта.МассивРолей Цикл
				
				НоваяРоль = СправочникОбъект.Роли.Добавить();
				НоваяРоль.Роль = РольКонтрагента;
				
			КонецЦикла;
			
			СправочникОбъект.АдресЭлектроннойПочты = ПараметрыИсходящегоСообщенияОснования.ДанныеОбъекта.Email;
			СправочникОбъект.КонтактныйТелефон     = ПараметрыИсходящегоСообщенияОснования.ДанныеОбъекта.Телефон;
			СправочникОбъект.ЮридическийАдрес      = ПараметрыИсходящегоСообщенияОснования.ДанныеОбъекта.ЮридическийАдрес;
			СправочникОбъект.ФактическийАдрес      = ПараметрыИсходящегоСообщенияОснования.ДанныеОбъекта.ФактическийАдрес;
			
			СправочникОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВОтменено Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.КлассификаторОрганизацийСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникОбъект        = ЭлементОчереди.Документ.ПолучитьОбъект();
			СправочникОбъект.Статус = Перечисления.СтатусыОбъектовСАТУРН.Отменен;
			СправочникОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВАктуально Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.КлассификаторОрганизацийСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникОбъект        = ЭлементОчереди.Документ.ПолучитьОбъект();
			СправочникОбъект.Статус = Перечисления.СтатусыОбъектовСАТУРН.Актуально;
			СправочникОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОперацияЗагрузкиКлассификатора() Экспорт
	Возврат Перечисления.ВидыОперацийСАТУРН.ОрганизацияЗапросКлассификатора;
КонецФункции

// Таблица реквизитов организаций САТУРН.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица реквизитов ключей реквизитов организаций:
// * ОрганизацияСАТУРН - СправочникСсылка.КлассификаторОрганизацийСАТУРН - Ссылка на организацию САТУРН
// * ИНН            - Строка                                           - ИНН
// * Организация    - ОпределяемыйТип.Организация                      - Организация
// * Контрагент     - ОпределяемыйТип.КонтрагентГосИС                  - Контрагент
Функция НоваяТаблицаРеквизитовКлассификатораОрганизаций() Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений();
	ТаблицаДанных.Колонки.Добавить("ОрганизацияСАТУРН", Новый ОписаниеТипов("СправочникСсылка.КлассификаторОрганизацийСАТУРН"));
	ТаблицаДанных.Колонки.Добавить("ИНН",            ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаДанных.Колонки.Добавить("Организация",    Метаданные.ОпределяемыеТипы.Организация.Тип);
	ТаблицаДанных.Колонки.Добавить("Контрагент",     Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип);
	
	ТаблицаДанных.Колонки.Добавить("ОрганизацияКонтрагент", Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип);
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция СтруктураПередачиJSON()
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("_id",                        Неопределено);
	СтруктураДанных.Вставить("lcState",                    "");
	СтруктураДанных.Вставить("name",                       "");
	СтруктураДанных.Вставить("INN",                        "");
	СтруктураДанных.Вставить("responsiblePerson",          "");
	СтруктураДанных.Вставить("phoneNumber",                "");
	СтруктураДанных.Вставить("email",                      "");
	СтруктураДанных.Вставить("factualAddress",             "");
	СтруктураДанных.Вставить("legalAddress",               "");
	СтруктураДанных.Вставить("isAgriculturalManufacturer", "false");
	СтруктураДанных.Вставить("isAnother",                  "false");
	СтруктураДанных.Вставить("isDistributor",              "false");
	СтруктураДанных.Вставить("isForeignConsumer",          "false");
	СтруктураДанных.Вставить("isImporter",                 "false");
	СтруктураДанных.Вставить("isIndustrialConsumer",       "false");
	СтруктураДанных.Вставить("isManufacturer",             "false");
	СтруктураДанных.Вставить("isMeasuring",                "false");
	СтруктураДанных.Вставить("isRegulator",                "false");
	СтруктураДанных.Вставить("isRetailTrader",             "false");
	СтруктураДанных.Вставить("isTransporter",              "false");
	СтруктураДанных.Вставить("isUnregisteredConsumer",     "false");
	СтруктураДанных.Вставить("isUtilizer",                 "false");
	
	Возврат СтруктураДанных;
	
КонецФункции

#КонецОбласти

#Область ПоискСсылок

Функция Организация(Идентификатор, ПараметрыОбмена, ОрганизацияСАТУРН = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Идентификатор)
		Или Идентификатор = -1 Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ИмяТаблицы       = Метаданные.Справочники.КлассификаторОрганизацийСАТУРН.ПолноеИмя();
	СправочникСсылка = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		ИнтеграцияСАТУРНСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
	Иначе
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", Идентификатор);
		
		ТранзакцияЗафиксирована = Истина;
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникСсылка = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, Идентификатор);
			
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				ДанныеОбъекта = ИнтеграцияСАТУРНСлужебный.ДанныеОбъекта(
					Идентификатор,
					Метаданные.Справочники.КлассификаторОрганизацийСАТУРН, ПараметрыОбмена);
				Если ДанныеОбъекта = Неопределено Тогда
					СправочникСсылка = СоздатьОрганизацию(Идентификатор, ПараметрыОбмена);
					ИнтеграцияСАТУРНСлужебный.ДобавитьКЗагрузке(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка, ОрганизацияСАТУРН);
				Иначе
					СправочникСсылка = ЗагрузитьОбъект(ДанныеОбъекта, ПараметрыОбмена,, Ложь, ОрганизацияСАТУРН);
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТранзакцияЗафиксирована = Ложь;
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при создании Организации САТУРН с идентификатором %1:
				           |%2'"),
				Идентификатор,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'Ошибка при создании Организации САТУРН с идентификатором %1:
				           |%2'"),
				Идентификатор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ТекстОшибкиПодробно,
				НСтр("ru = 'Работа с Организациями САТУРН'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		Если ТранзакцияЗафиксирована Тогда
			ИнтеграцияСАТУРНСлужебный.ОбновитьСсылку(ПараметрыОбмена, ИмяТаблицы, Идентификатор, СправочникСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция ЗагрузитьОбъект(ДанныеОрганизации, ПараметрыОбмена, СправочникОбъект = Неопределено, ТребуетсяПоиск = Истина, ОрганизацияСАТУРН = Неопределено) Экспорт
	
	Если ДанныеОрганизации = Неопределено Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ЗаписьНового = Ложь;
	ЗаписьНового = Ложь;
	ИмяТаблицы   = Метаданные.Справочники.КлассификаторОрганизацийСАТУРН.ПолноеИмя();
	
	Если СправочникОбъект = Неопределено Тогда
		
		СправочникСсылка = Неопределено;
		Если ТребуетсяПоиск Тогда
			СправочникСсылка = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена, ИмяТаблицы, ДанныеОрганизации.Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
			
			СправочникОбъект = СоздатьЭлемент();
			СправочникОбъект.Заполнить(Неопределено);
			
			ИдентификаторОбъекта = Новый УникальныйИдентификатор();
			СправочникОбъект.УстановитьСсылкуНового(ПолучитьСсылку(ИдентификаторОбъекта));
			ЗаписьНового = Истина;
			
		Иначе
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗаписьНового Тогда
		СправочникОбъект.Заблокировать();
	КонецЕсли;
	
	СправочникОбъект.Наименование  = ДанныеОрганизации.Наименование;
	СправочникОбъект.Идентификатор = ДанныеОрганизации.Идентификатор;
	СправочникОбъект.Статус        = ДанныеОрганизации.Статус;
	СправочникОбъект.ИНН           = ДанныеОрганизации.ИНН;
	СправочникОбъект.КПП           = ДанныеОрганизации.КПП;
	СправочникОбъект.ОГРН          = ДанныеОрганизации.ОГРН;
	СправочникОбъект.Комментарий   = ДанныеОрганизации.Комментарий;
	
	СправочникОбъект.Роли.Очистить();
	Для Каждого Роль Из ДанныеОрганизации.Роли Цикл
		НоваяСтрока = СправочникОбъект.Роли.Добавить();
		НоваяСтрока.Роль = Роль;
	КонецЦикла;
	
	СправочникОбъект.ЮридическийАдрес      = ДанныеОрганизации.ЮридическийАдрес;
	СправочникОбъект.ФактическийАдрес      = ДанныеОрганизации.ФактическийАдрес;
	СправочникОбъект.АдресЭлектроннойПочты = ДанныеОрганизации.Email;
	СправочникОбъект.КонтактныйТелефон     = ДанныеОрганизации.Телефон;
	
	СправочникОбъект.ТребуетсяЗагрузка = Ложь;
	СправочникОбъект.Записать();
	
	ИнтеграцияСАТУРНСлужебный.ОбновитьСсылку(
		ПараметрыОбмена,
		ИмяТаблицы,
		ДанныеОрганизации.Идентификатор,
		СправочникОбъект.Ссылка);
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Функция СоздатьОрганизацию(Идентификатор, ПараметрыОбмена)
	
	СправочникОбъект = СоздатьЭлемент();
	СправочникОбъект.Идентификатор     = Идентификатор;
	СправочникОбъект.ТребуетсяЗагрузка = Истина;
	СправочникОбъект.Наименование      = НСтр("ru = '<Требуется загрузка>'");
	
	СправочникОбъект.Записать();
	
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON.
//
// Параметры:
//  СправочникСсылка - СправочникСсылка.КлассификаторОрганизацийСАТУРН - Ссылка на организацию.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(СправочникСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбработки = Неопределено;
	НовыйСтатус        = Неопределено;
	ДанныеОбъекта      = Неопределено;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ПараметрыОбработкиДокумента")
		И ТипЗнч(ДополнительныеПараметры.ПараметрыОбработкиДокумента) = Тип("Структура")
		И ДополнительныеПараметры.ПараметрыОбработкиДокумента.Свойство("ДополнительныеПараметры") Тогда
		
		ПараметрыОбработки = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры;
		
		Если ТипЗнч(ПараметрыОбработки) = Тип("Структура") Тогда
			
			Если ПараметрыОбработки.Свойство("НовыйСтатус") Тогда
			
				НовыйСтатус = ПараметрыОбработки.НовыйСтатус;
			
			КонецЕсли;
			
			Если ПараметрыОбработки.Свойство("ДанныеОрганизации") Тогда
				
				ДанныеОбъекта = ПараметрыОбработки.ДанныеОрганизации;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СообщенияJSON = Новый Массив;
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
		
		Если ДанныеОбъекта <> Неопределено Тогда
			
			ДобавитьСообщенияJSON = СозданиеИзменениеКлассификатораОрганизацииJSON(СправочникСсылка, ДанныеОбъекта);
			
			Если ДобавитьСообщенияJSON <> Неопределено Тогда
				
				Для Каждого СообщениеJSON Из ДобавитьСообщенияJSON Цикл
					СообщенияJSON.Добавить(СообщениеJSON);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НовыйСтатус <> Неопределено Тогда
			
			ДобавитьСообщенияJSON = СменаСтатусаКлассификатораОрганизацииJSON(СправочникСсылка, НовыйСтатус);
			
			Если ДобавитьСообщенияJSON <> Неопределено Тогда
				
				Для Каждого СообщениеJSON Из ДобавитьСообщенияJSON Цикл
					СообщенияJSON.Добавить(СообщениеJSON);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для создания/изменения организации.
//
// Параметры:
//  СправочникСсылка - СправочникСсылка.КлассификаторОрганизацийСАТУРН - Ссылка на организацию.
//  ДанныеОбъекта - Структура из См. ИнтеграцияСАТУРНКлиентСервер.СтруктураДанныхОрганизации - описание справочника
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СозданиеИзменениеКлассификатораОрганизацииJSON(СправочникСсылка, ДанныеОбъекта)
	
	СообщенияJSON  = Новый Массив;
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Документ            = СправочникСсылка;
	СообщениеJSON.Версия              = 1;
	СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СправочникСсылка);
	СообщениеJSON.АргументыОперации   = Новый Структура;
	СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
	СообщениеJSON.ПараметрыЗапроса.Вставить("ДанныеОбъекта", ДанныеОбъекта);
	
	Если ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ОрганизацияИзменениеКлассификатора;
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СправочникСсылка, "Идентификатор");
		
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыОрганизации.Идентификатор;
		
	Иначе
		СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСозданиеКлассификатора;
	КонецЕсли;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	АргументыОперации = СообщениеJSON.АргументыОперации;
	
	АргументыОперации.Вставить("theCard",       СтруктураПередачиJSON());
	
	ДанныеОрганизации = АргументыОперации.theCard;
	
	ДанныеОрганизации._id               = СообщениеJSON.ИдентификаторЗаявки;
	ДанныеОрганизации.lcState           = ИнтерфейсСАТУРН.Статус(ДанныеОбъекта.Статус);
	ДанныеОрганизации.name              = ДанныеОбъекта.Наименование;
	ДанныеОрганизации.INN               = ДанныеОбъекта.ИНН;
	ДанныеОрганизации.responsiblePerson = ДанныеОбъекта.ОтветственноеЛицо;
	ДанныеОрганизации.phoneNumber       = ДанныеОбъекта.Телефон;
	ДанныеОрганизации.email             = ДанныеОбъекта.Email;
	ДанныеОрганизации.factualAddress    = ДанныеОбъекта.ФактическийАдрес;
	ДанныеОрганизации.legalAddress      = ДанныеОбъекта.ЮридическийАдрес;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.ПроизводительСельхозпродукции) <> Неопределено Тогда
		ДанныеОрганизации.isAgriculturalManufacturer = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Прочий) <> Неопределено Тогда
		ДанныеОрганизации.isAnother = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Дистрибьютор) <> Неопределено Тогда
		ДанныеОрганизации.isDistributor = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.ИностраннаяОрганизацияПотребитель) <> Неопределено Тогда
		ДанныеОрганизации.isForeignConsumer = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Импортер) <> Неопределено Тогда
		ДанныеОрганизации.isImporter = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.ПромышленноеХимическоеПроизводство) <> Неопределено Тогда
		ДанныеОрганизации.isIndustrialConsumer = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.ПроизводительПАТ) <> Неопределено Тогда
		ДанныеОрганизации.isManufacturer = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.ПроизводительПАТ) <> Неопределено Тогда
		ДанныеОрганизации.isManufacturer = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Лаборатория) <> Неопределено Тогда
		ДанныеОрганизации.isMeasuring = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Регулятор) <> Неопределено Тогда
		ДанныеОрганизации.isRegulator = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Ритейлер) <> Неопределено Тогда
		ДанныеОрганизации.isRetailTrader = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.Перевозчик) <> Неопределено Тогда
		ДанныеОрганизации.isTransporter = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.НезарегистрированныйУчастникОборота) <> Неопределено Тогда
		ДанныеОрганизации.isUnregisteredConsumer = "true";
	КонецЕсли;
	
	Если ДанныеОбъекта.МассивРолей.Найти(Перечисления.РолиКонтрагентовСАТУРН.ОрганизацияУтилизатор) <> Неопределено Тогда
		ДанныеОрганизации.isUtilizer = "true";
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для смены статуса организации.
//
// Параметры:
//  СправочникСсылка - СправочникСсылка.КлассификаторОрганизацийСАТУРН - Ссылка на организацию.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбъектовСАТУРН - статус к установке
//
// Возвращаемое значение:
//  Массив из Структура - см. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СменаСтатусаКлассификатораОрганизацииJSON(СправочникСсылка, НовыйСтатус)
	
	Операция      = Неопределено;
	СообщенияJSON = Новый Массив;
	
	Если НовыйСтатус = Перечисления.СтатусыОбъектовСАТУРН.Актуально Тогда
		Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВАктуально;
	ИначеЕсли НовыйСтатус = Перечисления.СтатусыОбъектовСАТУРН.Отменен Тогда
		Операция = Перечисления.ВидыОперацийСАТУРН.ОрганизацияСменаСтатусаИзЧерновикаВОтменено;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Документ            = СправочникСсылка;
	СообщениеJSON.Версия              = 1;
	СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СправочникСсылка);
	СообщениеJSON.АргументыОперации   = Новый Структура;
	СообщениеJSON.ИдентификаторЗаявки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникСсылка, "Идентификатор");
	СообщениеJSON.Операция            = Операция;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
