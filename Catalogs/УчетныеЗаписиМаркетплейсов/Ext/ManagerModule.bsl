
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает хеш настроек для переданной структуры настроек.
//
// Параметры:
//   СтруктураНастроек - Структура - структура с ключами настроек: 
//     * ВидМаркетплейса      - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса для получения учетной записи;
//     * Организация          - СправочникСсылка.Организации - организация;
//     * ИдентификаторКлиента - Строка - идентификатор клиента маркетплейса;
//     * ИсточникКатегории    - ПеречислениеСсылка.ИсточникиКатегорийДляМаркетплейса - источник категорий;
//     * ВалютаУчета          - СправочникСсылка.Валюты - валюта учета;
//     * ВидыЦен              - ТаблицаЗначений - используемые виды цен:
//       ** ИмяНастройки        - Строка - имя настройки;
//       ** ВидЦены             - СправочникСсылка.ВидыЦен - вид цены.
// 
// Возвращаемое значение:
//   Строка - строковое представление хеш суммы.
//
Функция ПолучитьХешНастроек(СтруктураНастроек) Экспорт
	
	Возврат ИнтеграцияСМаркетплейсомOzonСервер.ПолучитьХешСтроки(ЗначениеВСтрокуВнутр(СтруктураНастроек));
	
КонецФункции

// Возвращает хеш настроек для учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись, для которой необходимо вернуть хеш настроек.
// 
// Возвращаемое значение:
//   Строка - строковое представление хеш суммы.
//
Функция ПолучитьХешНастроекПоСсылке(УчетнаяЗаписьМаркетплейса) Экспорт 
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	СтруктураНастроек = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, СтрокаИменНастроекУчетнойЗаписи());
	
	СтруктураНастроек.Вставить("ВидыЦен",                 СтруктураНастроек.ВидыЦен.Выгрузить());
	СтруктураНастроек.Вставить("ДополнительныеНастройки", СтруктураНастроек.ДополнительныеНастройки.Выгрузить());
	
	Возврат ПолучитьХешНастроек(СтруктураНастроек);
	
КонецФункции

// Возвращает доступную учетную запись в случае, если она является единственной в справочнике.
// В случае отсутствия записей или наличия более одной возвращается пустая ссылка.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса для получения учетной записи.
//
// Возвращаемое значение:
//   СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись по-умолчанию.
//
Функция ОсновнаяУчетнаяЗапись(ВидМаркетплейса) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	УчетныеЗаписиМаркетплейсов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
		|ГДЕ
		|	УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейса
		|	И УчетныеЗаписиМаркетплейсов.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ВидМаркетплейса", ВидМаркетплейса);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка");
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 2 Тогда
		Возврат ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка");
	КонецЕсли;

	Выборка.Следующий();
	Возврат Выборка.Ссылка;

КонецФункции

// Возвращает структуру с настройками учетной записи.
//
// Параметры:
//   ИсточникНастроек        - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись для получения настроек;
//                           - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса для получения пустых настроек.
//   ТолькоОсновные          - Булево - признак получения только значений основных реквизитов учетной записи.
//   НастройкиУчетныхЗаписей - Неопределено, Соответствие из КлючИЗначение - описания настроек учетных записей.
// 
// Возвращаемое значение:
//   Произвольный, Структура - настройки учетной записи из СтрокаИменНастроекУчетнойЗаписи() и иные настройки:
//     * УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор учетной записи.
//
Функция НастройкиУчетнойЗаписи(ИсточникНастроек, ТолькоОсновные = Ложь, НастройкиУчетныхЗаписей = Неопределено) Экспорт
	
	Если НастройкиУчетныхЗаписей = Неопределено Тогда
		НастройкиУчетныхЗаписей = Новый Соответствие;
	КонецЕсли;
	
	ЗначенияНастроек = НастройкиУчетныхЗаписей.Получить(ИсточникНастроек);
	Если ЗначенияНастроек = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ИсточникНастроек)
				Или ТипЗнч(ИсточникНастроек) = Тип("ПеречислениеСсылка.ВидыМаркетплейсов") Тогда
			ЗначенияНастроек = Новый Структура(СтрокаИменНастроекУчетнойЗаписи());
			ЗначенияНастроек.ВидМаркетплейса = ИсточникНастроек;
			ЗначенияНастроек.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор());
		Иначе
			ЗначенияНастроек =
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИсточникНастроек, СтрокаИменНастроекУчетнойЗаписи());
			ЗначенияНастроек.Вставить("УникальныйИдентификатор", ИсточникНастроек.УникальныйИдентификатор());
		КонецЕсли;
		
		ВидыЦен = Новый Структура;
		
		Если ТолькоОсновные Тогда
			ДополнитьНастройкиУчетнойЗаписи(ЗначенияНастроек, Истина);
		Иначе
			ОписаниеВидовЦен = ОписаниеВидовЦенУчетнойЗаписи(ЗначенияНастроек.ВидМаркетплейса);
			
			Для Каждого ОписаниеВидаЦен Из ОписаниеВидовЦен Цикл
				ВидыЦен.Вставить(ОписаниеВидаЦен.Ключ, ПредопределенноеЗначение("Справочник.ВидыЦен.ПустаяСсылка"));
			КонецЦикла;
			
			Если ЗначенияНастроек.ВидыЦен <> Неопределено Тогда
				Выборка = ЗначенияНастроек.ВидыЦен.Выбрать();
				Пока Выборка.Следующий() Цикл
					Если ВидыЦен.Свойство(Выборка.ИмяНастройки) Тогда
						ВидыЦен[Выборка.ИмяНастройки] = Выборка.ВидЦены;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ДополнитьНастройкиУчетнойЗаписи(ЗначенияНастроек);
		КонецЕсли;
		
		ЗначенияНастроек.ВидыЦен = ВидыЦен;
		ЗначенияНастроек.Удалить("ДополнительныеНастройки");
		
		НастройкиУчетныхЗаписей.Вставить(ИсточникНастроек, ЗначенияНастроек);
	КонецЕсли;
	
	Возврат ЗначенияНастроек;
	
КонецФункции

// Возвращает для учетной записи признак доступности работы с остатками на торговой площадке.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись для получения настроек.
// 
// Возвращаемое значение:
//   Булево - признак доступности работы с остатками на торговой площадке.
//
Функция ДоступнаРаботаСОстаткамиДляУчетнойЗаписи(УчетнаяЗаписьМаркетплейса) Экспорт

	РеквизитыУчетнойЗаписи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УчетнаяЗаписьМаркетплейса, "ВидМаркетплейса, СхемаРаботы");

	Возврат ДоступнаРаботаСОстатками(РеквизитыУчетнойЗаписи.ВидМаркетплейса, РеквизитыУчетнойЗаписи.СхемаРаботы);

КонецФункции

// Возвращает для схемы работы признак доступности работы с остатками на торговой площадке по виду маркетплейса.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов           - вид маркетплейса для проверки признака;
//   СхемаРаботы     - ПеречислениеСсылка.СхемыРаботыТорговыхПлощадок - схема работы для проверки признака.
// 
// Возвращаемое значение:
//   Булево - признак доступности работы с остатками на торговой площадке.
//
Функция ДоступнаРаботаСОстатками(ВидМаркетплейса, СхемаРаботы) Экспорт

	ДоступнаРаботаСОстатками = Ложь;

	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon") Тогда
		ДоступнаРаботаСОстатками = (СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.FBS")
			Или СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.DBS"));
	ИначеЕсли ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсЯндексМаркет") Тогда
		ДоступнаРаботаСОстатками = (СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.FBS")
			Или СхемаРаботы = ПредопределенноеЗначение("Перечисление.СхемыРаботыТорговыхПлощадок.Express"));
	КонецЕсли;

	Возврат ДоступнаРаботаСОстатками;

КонецФункции

// Возвращает информацию по видам цен учетной записи.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись, для которой необходимо вернуть хеш настроек.
// 
// Возвращаемое значение:
//   Структура - ключом является идентификатор вида цены на маркетплейсе, значением информация по виду цены.
//
Функция ВидыЦенУчетнойЗаписи(УчетнаяЗаписьМаркетплейса) Экспорт

	ВидыЦенУчетнойЗаписи = Новый Структура;
	
	НастройкиУчетнойЗаписи = НастройкиУчетнойЗаписи(УчетнаяЗаписьМаркетплейса);
	ВидыЦен = НастройкиУчетнойЗаписи.ВидыЦен;
	ОписаниеВидовЦен = ОписаниеВидовЦенУчетнойЗаписи(НастройкиУчетнойЗаписи.ВидМаркетплейса);

	Для Каждого ДанныеВидаЦен Из ВидыЦен Цикл
		ОписаниеВидаЦен = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВидовЦен, ДанныеВидаЦен.Ключ, Неопределено);
		ТребуетсяПроверкаЗаполнения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВидаЦен, "ПроверкаЗаполнения", Ложь);
		ПредставлениеВидаЦены = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОписаниеВидаЦен, "ПредставлениеВидаЦены", "");

		СтруктураДанныхВидаЦен = Новый Структура;
		СтруктураДанныхВидаЦен.Вставить("ВидЦены", ДанныеВидаЦен.Значение);
		СтруктураДанныхВидаЦен.Вставить("ПроверкаЗаполнения", ТребуетсяПроверкаЗаполнения);
		СтруктураДанныхВидаЦен.Вставить("ПредставлениеВидаЦены", ПредставлениеВидаЦены);

		ВидыЦенУчетнойЗаписи.Вставить(ДанныеВидаЦен.Ключ, СтруктураДанныхВидаЦен);
	КонецЦикла;

	Возврат ВидыЦенУчетнойЗаписи;

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет указать объекты метаданных, для которых задана логика ограничения доступа к данным.
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
		"РазрешитьЧтениеИзменение
		|ГДЕ
		|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		СтандартнаяОбработка = Ложь;
		
		Поля.Добавить("Ссылка");
		Поля.Добавить("ВидМаркетплейса");
		Поля.Добавить("Наименование");
		Поля.Добавить("СхемаРаботы");
		Поля.Добавить("ИдентификаторКлиента");
	#КонецЕсли
								
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)

	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		СтандартнаяОбработка = Ложь;
		Представление        = Данные.Наименование;
		
		Если Данные.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда
			ПредставлениеСхемыРаботы = Перечисления.СхемыРаботыТорговыхПлощадок.ПредставлениеСхемыРаботы(Данные.СхемаРаботы, Данные.Ссылка);

			Представление = Представление
							+ ?(ЗначениеЗаполнено(Данные.СхемаРаботы), ", " + ПредставлениеСхемыРаботы, "")
							+ ?(ЗначениеЗаполнено(Данные.ИдентификаторКлиента),
								" " + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '(номер магазина: %1)'"), Данные.ИдентификаторКлиента),
								"");
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает список реквизитов учетной записи маркетплейса.
//
// Возвращаемое значение:
//   Строка - список реквизитов, разделенных символом ",".
//
Функция СтрокаИменНастроекУчетнойЗаписи()
	
	СтрокаИменНастроек =
		"ВидМаркетплейса,
		|Организация,
		|ИдентификаторКлиента,
		|ИсточникКатегории,
		|ВалютаУчета,
		|СхемаРаботы,
		|Партнер,
		|Контрагент,
		|Соглашение,
		|ДоговорПродажиЧерезСкладыТорговойПлощадки,
		|ДоговорПродажиЧерезСкладыСобственные,
		|НеОбновлятьДанныеТорговойПлощадки,
		|ВидыЦен,
		|ДополнительныеНастройки";
		
	Возврат СтрокаИменНастроек;
	
КонецФункции

// Возвращает список дополнительных настроек учетной записи маркетплейса.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса.
//
// Возвращаемое значение:
//   Строка - список имен настроек, разделенных символом ",".
//
Функция СтрокаИменДополнительныхНастроекУчетнойЗаписи(ВидМаркетплейса)
	
	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		СтрокаИменНастроек =
			"ПродажиРазделяютсяПоДоговорам,
			|УслугаПродажиЧерезТорговуюПлощадку,
			|ПричинаОтменыПоУмолчанию,
			|РучнаяЗагрузкаДанныхОРеализованныхТоварах,
			|АвтоматическаяЗагрузкаДанныхОРеализованныхТоварах,
			|АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаПредыдущийМесяц,
			|АвтоматическаяЗагрузкаДанныхОРеализованныхТоварахЗаТекущийМесяц,
			|АвтоматическоеФормированиеРасходныхОрдеровНаТовары,
			|ПокупательПартнер,
			|ПокупательКонтрагент,
			|ПокупательСоглашение,
			|ПокупательДоговор,
			|СпособОтраженияПродажFBO,
			|СпособОтраженияПродажFBS,
			|ОчищатьДанныеЭкземпляров,
			|СоздаватьЗадачуОповещение";
	Иначе
		СтрокаИменНастроек = "";
	КонецЕсли;
	
	Возврат СтрокаИменНастроек;
	
КонецФункции

// Возвращает структуру с именами видов цен и признаком проверки заполнения цены.
//
// Возвращаемое значение:
//  Структура - где ключ - имя настройки с видом цен, значение - структура с ключами:
//								ПредставлениеВидаЦены - Строка - представление вида цены в форме настроек синхронизации,
//								ПроверкаЗаполнения - Булево - признак необходимости проверки заполнения цены.
//
Функция ОписаниеВидовЦенУчетнойЗаписи(ВидМаркетплейса)
	
	ОписаниеВидовЦен = Новый Структура;
	
	Если ВидМаркетплейса = ПредопределенноеЗначение("Перечисление.ВидыМаркетплейсов.МаркетплейсOzon")
		Или Не ЗначениеЗаполнено(ВидМаркетплейса) Тогда
		
		ТипыЦен = ИнтеграцияСМаркетплейсамиСерверЛокализация.ТипыЦенOzon(Истина, Ложь);
		Для Каждого ТипЦен Из ТипыЦен Цикл
			ДанныеВидаЦены = Новый Структура("ПредставлениеВидаЦены, ПроверкаЗаполнения",
					ТипЦен.Наименование, ТипЦен.ОбязательноеЗаполнение);
			ОписаниеВидовЦен.Вставить(ТипЦен.Идентификатор, ДанныеВидаЦены);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОписаниеВидовЦен;
	
КонецФункции

// Дополняет основные настройки учетной записи данными из дополнительных настроек.
//
// Параметры:
//   ОсновныеНастройки - Структура из КлючИЗначение - список основных настроек,
//                         указанных в СтрокаИменНастроекУчетнойЗаписи.
//   ТолькоОсновные    - Булево - признак ограничения заполнения настроек.
//
Процедура ДополнитьНастройкиУчетнойЗаписи(ОсновныеНастройки, ТолькоОсновные = Ложь)
	
	СтрокаОсновныхНастроек = "";
	Если ТолькоОсновные Тогда
		Если ОсновныеНастройки.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
			// Доступные способы отражения продаж:
			//   * "НеИспользуются" - не используются продажи через склады торговой площадки или с собственных складов.
			//   * "Комиссия" - продажи через комиссионера (агента).
			//   * "РеализацияВПути" - реализация с отложенным переходом права собственности (по факту доставки).
			СтрокаОсновныхНастроек = "СпособОтраженияПродажFBO, СпособОтраженияПродажFBS";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаВсехНастроек =
		СтрокаИменДополнительныхНастроекУчетнойЗаписи(ОсновныеНастройки.ВидМаркетплейса);
	
	ДополнительныеНастройки = ОписаниеДополнительныхНастроекУчетнойЗаписи(
		ОсновныеНастройки.ДополнительныеНастройки,
		СтрокаВсехНастроек,
		СтрокаОсновныхНастроек);
	ДополнительныеНастройкиУчетнойЗаписиЗначенияПоУмолчанию(ДополнительныеНастройки, ОсновныеНастройки);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОсновныеНастройки, ДополнительныеНастройки);
	
	ОсновныеНастройки.Вставить("ПродажиРазделяютсяПоДоговорам",
		ОсновныеНастройки.ДоговорПродажиЧерезСкладыТорговойПлощадки <> ОсновныеНастройки.ДоговорПродажиЧерезСкладыСобственные);
	
	Если ОсновныеНастройки.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ОсновныеНастройки.Вставить("ПостфиксЗаголовкаФормы",
			Строка(ОсновныеНастройки.ИдентификаторКлиента) + ", " + Строка(ОсновныеНастройки.Партнер));
			
		Если ОсновныеНастройки.СпособОтраженияПродажFBS = "НеИспользуются"
				Или ОсновныеНастройки.СпособОтраженияПродажFBO = "НеИспользуются" Тогда
			ОсновныеНастройки.ПродажиРазделяютсяПоДоговорам = Ложь;
		КонецЕсли;
	Иначе
		ОсновныеНастройки.Вставить("ПостфиксЗаголовкаФормы", Строка(ОсновныеНастройки.ИдентификаторКлиента));
	КонецЕсли;
	
КонецПроцедуры

// Возвращает соответствие с идентификаторами настроек и их значениями.
//
// Параметры:
//   ИсточникНастроек       - Неопределено, СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису;
//                          - ВыборкаИзРезультатаЗапроса - дополнительные настройки учетной записи.
//   СтрокаВсехНастроек     - Строка - строка с идентификаторами настроек через запятую.
//   СтрокаОсновныхНастроек - Строка - строка с идентификаторами настроек через запятую.
//
// Возвращаемое значение:
//   Структура - где ключ - идентификатор настройки, значение - произвольное значение, ограниченное 
//     типом реквизитов Справочники.УчетныеЗаписиМаркетплейсов.ТабличныеЧасти.ДополнительныеНастройки.ЗначениеНастройки
//     и Справочники.УчетныеЗаписиМаркетплейсов.ТабличныеЧасти.ДополнительныеНастройки.ЗначениеНастройкиСтрока.
//
Функция ОписаниеДополнительныхНастроекУчетнойЗаписи(Знач ИсточникНастроек, СтрокаВсехНастроек = "", СтрокаОсновныхНастроек = "") Экспорт
	
	Если ИсточникНастроек = Неопределено Тогда
		Если ПустаяСтрока(СтрокаОсновныхНастроек) Тогда
			ОписаниеНастроек = Новый Структура(СтрокаВсехНастроек);
		Иначе
			ОписаниеНастроек = Новый Структура(СтрокаОсновныхНастроек);
		КонецЕсли;
	Иначе
		Если ТипЗнч(ИсточникНастроек) = Тип("СправочникСсылка.УчетныеЗаписиМаркетплейсов") Тогда
			ИсточникНастроек =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникНастроек, "ДополнительныеНастройки"); // РезультатЗапроса
		КонецЕсли;
		
		ОписаниеНастроек = Новый Структура;
		
		ВыборкаНастроек = ИсточникНастроек.Выбрать();
		
		Если ПустаяСтрока(СтрокаОсновныхНастроек) Тогда
			ВсеНастройки = Новый Структура(СтрокаВсехНастроек);
			
			Пока ВыборкаНастроек.Следующий() Цикл
				ОписаниеНастроек.Вставить(ВыборкаНастроек.ИдентификаторНастройки, ЗначениеНастройки(ВыборкаНастроек));
				
				Если ВсеНастройки.Свойство(ВыборкаНастроек.ИдентификаторНастройки) Тогда
					ВсеНастройки.Удалить(ВыборкаНастроек.ИдентификаторНастройки);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ИмяНастройки Из ВсеНастройки Цикл
				ОписаниеНастроек.Вставить(ИмяНастройки.Ключ, Неопределено);
			КонецЦикла;
		Иначе
			МассивНастроек = СтрРазделить(СтрокаОсновныхНастроек, ", ", Ложь);
			Для Каждого Настройка Из МассивНастроек Цикл
				Если ВыборкаНастроек.НайтиСледующий(Настройка, "ИдентификаторНастройки") Тогда
					ОписаниеНастроек.Вставить(ВыборкаНастроек.ИдентификаторНастройки, ЗначениеНастройки(ВыборкаНастроек));
					ВыборкаНастроек.Сбросить();
				Иначе
					ОписаниеНастроек.Вставить(Настройка, Неопределено);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеНастроек;
	
КонецФункции

// Возвращает значение настройки из переданных данных.
//
// Параметры:
//   ДанныеНастройки - ВыборкаИзРезультатаЗапроса - данные настройки.
//
// Возвращаемое значение:
//   СправочникСсылка, Строка, Число - значениеНастройки из табличной части ДополнительныеНастройки.
//
Функция ЗначениеНастройки(ДанныеНастройки)
	
	Если ЗначениеЗаполнено(ДанныеНастройки.ЗначениеНастройкиСсылка) Тогда
		ЗначениеНастройки = ДанныеНастройки.ЗначениеНастройкиСсылка
	ИначеЕсли Не ПустаяСтрока(ДанныеНастройки.ЗначениеНастройкиСтрока) Тогда
		ЗначениеНастройки = ДанныеНастройки.ЗначениеНастройкиСтрока;
	Иначе
		ЗначениеНастройки = ДанныеНастройки.ЗначениеНастройки;
	КонецЕсли;
	
	Возврат ЗначениеНастройки;
	
КонецФункции

// Дополняет настройки учетной записи маркетплейса.
//
Процедура ДополнительныеНастройкиУчетнойЗаписиЗначенияПоУмолчанию(ДополнительныеНастройки, ОсновныеНастройки)
	
	Если ОсновныеНастройки.ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда
		ИспользоватьКомиссиюПриПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах");
		ИспользоватьТоварыВПути = ПолучитьФункциональнуюОпцию("ИспользоватьОтгрузкуБезПереходаПраваСобственности");
		
		Если ДополнительныеНастройки.СпособОтраженияПродажFBO = Неопределено Тогда
			Если ИспользоватьКомиссиюПриПродажах Тогда
				ДополнительныеНастройки.СпособОтраженияПродажFBO = "Комиссия";
			Иначе
				ДополнительныеНастройки.СпособОтраженияПродажFBO = "НеИспользуются";
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительныеНастройки.СпособОтраженияПродажFBS = Неопределено Тогда
			Если ИспользоватьКомиссиюПриПродажах
					И ЗначениеЗаполнено(ОсновныеНастройки.Партнер) Тогда
				ДополнительныеНастройки.СпособОтраженияПродажFBS = "Комиссия";
			ИначеЕсли ИспользоватьТоварыВПути Тогда
				ДополнительныеНастройки.СпособОтраженияПродажFBS = "РеализацияВПути";
			Иначе
				ДополнительныеНастройки.СпособОтраженияПродажFBS = "НеИспользуются";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество подключений к площадке маркетплейса.
//
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса.
// 
// Возвращаемое значение:
//   Число - количество подключений.
//
Функция ПолучитьКоличествоПодключений(ВидМаркетплейса) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидМаркетплейса", ВидМаркетплейса);
	Запрос.Текст =
    	"ВЫБРАТЬ
    	|	ЕСТЬNULL(КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УчетныеЗаписиМаркетплейсов.Ссылка), 0) КАК КоличествоПодключений
    	|ИЗ
    	|	Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
    	|ГДЕ
    	|	НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
    	|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейса";

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ВыборкаДетальныеЗаписи.Следующий();

	Возврат ВыборкаДетальныеЗаписи.КоличествоПодключений;

КонецФункции

// Изменяет признак контроля обновления данных торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса         - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
//	 НеОбновлятьДанныеТорговойПлощадки - Булево - Истина, если необходимо запретить обновление данных торговой площадки.
// 
// Возвращаемое значение:
//   Булево - результат выполнения действия.
//
Функция ИзменитьКонтрольОбновленияДанныхТорговойПлощадки(УчетнаяЗаписьМаркетплейса, НеОбновлятьДанныеТорговойПлощадки) Экспорт

	Результат = Истина;
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		НачатьТранзакцию();
		
		Попытка
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("Справочник.УчетныеЗаписиМаркетплейсов");
			ЭлементБлокировкиДанных.УстановитьЗначение("Ссылка", УчетнаяЗаписьМаркетплейса);
			БлокировкаДанных.Заблокировать();
			
			Объект = УчетнаяЗаписьМаркетплейса.ПолучитьОбъект();
			Если Объект = Неопределено Тогда 
				Результат = Ложь;
				
			Иначе
				ЗаблокироватьДанныеДляРедактирования(УчетнаяЗаписьМаркетплейса);
				
				Объект.НеОбновлятьДанныеТорговойПлощадки = НеОбновлятьДанныеТорговойПлощадки;
				Объект.Записать();
			КонецЕсли;
                
            ЗафиксироватьТранзакцию();

		Исключение   
			ОтменитьТранзакцию();
			Результат = Ложь;
			
			ШаблонСообщения = НСтр("ru = 'Ошибка изменения контроля обновления данных торговой площадки по причине: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Возвращает признак контроля обновления данных торговой площадки.
//
// Параметры:
//   УчетнаяЗаписьМаркетплейса - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись подключения к сервису.
// 
// Возвращаемое значение:
//   Булево - Истина, если обновление данных торговой площадки разрешено;
//		      Ложь - обновление данных запрещено.
//
Функция ОбновленияДанныхТорговойПлощадкиРазрешено(УчетнаяЗаписьМаркетплейса) Экспорт
	
	Если Не ЗначениеЗаполнено(УчетнаяЗаписьМаркетплейса) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗаписьМаркетплейса, "НеОбновлятьДанныеТорговойПлощадки");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
	
КонецФункции

#Область РаботаСРегламентнымиЗаданиями

// Удаляет регламентное задание по переданному ключу.
//
// Параметры:
//   Ключ - Строка - Ключ регламентного задания.
//
Процедура УдалитьРегламентноеЗадание(Ключ) Экспорт

	Отбор = Новый Структура("Ключ", Ключ);
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого РегламентноеЗадание Из РезультатПоиска Цикл
		РегламентныеЗаданияСервер.УдалитьЗадание(РегламентноеЗадание);
	КонецЦикла;

КонецПроцедуры

// Изменяет использование регламентного задания.
//
// Параметры:
//   Ключ           - Строка - ключ регламентного задания.
//   Использование  - Булево - признак использования, который нужно установить регламентному заданию, если оно не удаляется.
//
Процедура УстановитьИспользованиеРегламентногоЗадания(Ключ, Использование) Экспорт

	Отбор = Новый Структура("Ключ, Использование", Ключ, НЕ Использование);

	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого РегламентноеЗадание Из РезультатПоиска Цикл
		Параметры = Новый Структура();
		Параметры.Вставить("Использование", Использование);
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, Параметры);
	КонецЦикла;

КонецПроцедуры

// Изменяет наименование регламентного задания.
//
// Параметры:
//   Ключ                              - Строка - ключ регламентного задания.
//   ПредставлениеРегламентногоЗадания - Строка - представление регламентного задания
//                                                для формирования наименования регламентного задания.
//   ПредставлениеУчетнойЗаписи        - Строка - представление учетной записи 
//                                                для формирования наименования регламентного задания.
//
Процедура УстановитьНаименованиеРегламентногоЗадания(Ключ, ПредставлениеРегламентногоЗадания, ПредставлениеУчетнойЗаписи) Экспорт

	ШаблонНаименования = "%1 (%2)";
	НаименованиеРегЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонНаименования,
		ПредставлениеРегламентногоЗадания,
		ПредставлениеУчетнойЗаписи);

	Отбор = Новый Структура("Ключ", Ключ);
	РезультатПоиска = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	Для Каждого РегламентноеЗадание Из РезультатПоиска Цикл
		Параметры = Новый Структура();
		Параметры.Вставить("Наименование", Сред(НаименованиеРегЗадания, 1, 128));
		РегламентныеЗаданияСервер.ИзменитьЗадание(РегламентноеЗадание, Параметры);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

// Возвращает виды цен учетных записей маркетплейсов.
// 
// Параметры:
//   ВидМаркетплейса - ПеречислениеСсылка.ВидыМаркетплейсов - вид маркетплейса.
// 
// Возвращаемое значение:
//   Массив Из СправочникСсылка.ВидыЦен - список видов цен учетных записей маркетплейса Ozon.
//
Функция ВидыЦенУчетныхЗаписейМаркетплейса(ВидМаркетплейса) Экспорт

	Запрос = Новый Запрос;  
	Запрос.Текст =
    	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
    	|	ВидыЦенУчетныхЗаписей.ВидЦены КАК ВидЦены
    	|ИЗ
    	|	Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенУчетныхЗаписей
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов КАК УчетныеЗаписиМаркетплейсов
    	|		ПО ВидыЦенУчетныхЗаписей.Ссылка = УчетныеЗаписиМаркетплейсов.Ссылка
    	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЦен КАК СправочникВидыЦен
    	|		ПО (СправочникВидыЦен.Ссылка = ВидыЦенУчетныхЗаписей.ВидЦены)
    	|ГДЕ
    	|	НЕ УчетныеЗаписиМаркетплейсов.ПометкаУдаления
    	|	И УчетныеЗаписиМаркетплейсов.ВидМаркетплейса = &ВидМаркетплейса
    	|	И НЕ ВидыЦенУчетныхЗаписей.ВидЦены = ЗНАЧЕНИЕ(Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка)
    	|	И НЕ СправочникВидыЦен.ПометкаУдаления
    	|
    	|ОБЪЕДИНИТЬ ВСЕ
    	|
    	|ВЫБРАТЬ РАЗЛИЧНЫЕ
    	|	ВидыЦен.Ссылка
    	|ИЗ
    	|	Справочник.ВидыЦен КАК ВидыЦен
    	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиМаркетплейсов.ВидыЦен КАК ВидыЦенУчетныхЗаписей
    	|		ПО ВидыЦен.Ссылка = ВидыЦенУчетныхЗаписей.ВидЦены
    	|ГДЕ
    	|	НЕ ВидыЦен.ПометкаУдаления
    	|	И ВидыЦен.СпособЗаданияЦены = &СпособЗаданияЦены
    	|	И ВидыЦенУчетныхЗаписей.ВидЦены ЕСТЬ NULL";  
		 
	Если ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсOzon Тогда 
		СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗагружаетсяСOzon;		
	ИначеЕсли ВидМаркетплейса = Перечисления.ВидыМаркетплейсов.МаркетплейсЯндексМаркет Тогда 
		СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ЗагружаетсяИзЯндексМаркет;
	Иначе
		СпособЗаданияЦены = Перечисления.СпособыЗаданияЦен.ПустаяСсылка();
	КонецЕсли; 
	Запрос.Параметры.Вставить("ВидМаркетплейса",ВидМаркетплейса);
	Запрос.Параметры.Вставить("СпособЗаданияЦены",СпособЗаданияЦены);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;

	Выгрузка = Результат.Выгрузить();
	Возврат Выгрузка.ВыгрузитьКолонку("ВидЦены");

КонецФункции

#КонецОбласти

#КонецЕсли
