///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Пользователи.ЭтоПолноправныйПользователь(, Истина)
			И Не Параметры.ОткрыватьПодОграниченнымиПравами Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
		                             |
		                             |Изменение свойств регламентного задания
		                             |выполняется только администраторами.';
		                             |en = 'Insufficient access rights.
		                             |
		                             |Only administrators can change
		                             |scheduled job settings.'");
	КонецЕсли;

	Если Параметры.Свойство("УчетнаяЗаписьМаркетплейса") = Ложь
		Или Параметры.Свойство("Наименование") = Ложь
		Или Параметры.Свойство("ИмяМетаданных") = Ложь
		Или Параметры.Свойство("Префикс") = Ложь Тогда
		ВызватьИсключение НСтр("ru = 'Отсутствуют обязательные параметры открытия формы ""Регламентное задание"".';
								|en = 'The parameters required to open the ""Scheduled job"" form are missing.'");
	КонецЕсли;

	Если Метаданные.РегламентныеЗадания.Найти(Параметры.ИмяМетаданных) = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'В форму ""Регламентное задание"" передано некорректное имя объекта метаданных.';
								|en = 'Incorrect metadata object name is passed to the ""Scheduled job"" form.'");
	КонецЕсли;

	УчетнаяЗаписьМаркетплейса = Параметры.УчетнаяЗаписьМаркетплейса;
	Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"%1 (%2)", 
		Параметры.Наименование, 
		УчетнаяЗаписьМаркетплейса);
	Ключ = Параметры.Префикс + Строка(УчетнаяЗаписьМаркетплейса.УникальныйИдентификатор());

	УстановитьПривилегированныйРежим(Истина);
	Отбор = Новый Структура("Ключ", Ключ);
	Результат = РегламентныеЗаданияСервер.НайтиЗадания(Отбор);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Результат.Количество() = 0 Тогда

		Действие = "Добавить"; 
		Задание = Метаданные.РегламентныеЗадания[Параметры.ИмяМетаданных];
		Расписание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Задание).Расписание;

		ИмяМетаданных       = Задание.Имя;
		СинонимМетаданных   = Задание.Синоним;
		ИмяМетодаМетаданных = Задание.ИмяМетода;

	Иначе

		Действие = "Изменить"; 	
		Задание = ПолучитьРегламентноеЗадание(Результат[0]);
	
		Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда  
			Идентификатор = Строка(Задание.УникальныйИдентификатор);
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект,
				Задание,
				"Ключ,
				|Предопределенное,
				|Использование,
				|Наименование,
				|ИмяПользователя,
				|ИнтервалПовтораПриАварийномЗавершении,
				|КоличествоПовторовПриАварийномЗавершении");
			
			Если Задание.Метаданные = Неопределено Тогда
				ИмяМетаданных        = ПредставлениеПустыхМетаданных();
				СинонимМетаданных    = ПредставлениеПустыхМетаданных();
				ИмяМетодаМетаданных  = ПредставлениеПустыхМетаданных();
			Иначе
				ИмяМетаданных        = Задание.Метаданные.Имя;
				СинонимМетаданных    = Задание.Метаданные.Синоним;
				ИмяМетодаМетаданных  = Задание.Метаданные.ИмяМетода;
			КонецЕсли;

			Расписание = Задание.Расписание;
					
		ИначеЕсли ТипЗнч(Задание) = Тип("СправочникСсылка.ОчередьЗаданий") Тогда
			
			Идентификатор =Строка(Задание.УникальныйИдентификатор());
			СтрутураЗадания = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задание, "Ключ,
																		|Использование,
																		|ИмяПользователя,
																		|ИнтервалПовтораПриАварийномЗавершении,
																		|КоличествоПовторовПриАварийномЗавершении,
																		|Расписание,
																		|Параметры");
			
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект,
				СтрутураЗадания,
				"Ключ,
				|Использование,
				|ИмяПользователя,
				|ИнтервалПовтораПриАварийномЗавершении,
				|КоличествоПовторовПриАварийномЗавершении");
			
			ИмяМетаданных        = ПредставлениеПустыхМетаданных();
			СинонимМетаданных    = ПредставлениеПустыхМетаданных();
			ИмяМетодаМетаданных  = ПредставлениеПустыхМетаданных();

			Расписание = СтрутураЗадания.Расписание.Получить();
			
			ПараметрыЗадания = СтрутураЗадания.Параметры.Получить();
		КонецЕсли;

	КонецЕсли;
	
	Если Действие <> "Изменить" Тогда
		Идентификатор = НСтр("ru = '<будет создан при записи>'");
		Использование = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры    

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Оповещение = Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)

	ЗаписатьРегламентноеЗадание();
	Действие = "Изменить";
	ОбновитьЗаголовокФормы();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()

	ЗаписатьИЗакрытьЗавершение();

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеВыполнить()

	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Диалог.Показать(Новый ОписаниеОповещения("ОткрытьРасписаниеЗавершение", ЭтотОбъект));

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаписатьРегламентноеЗадание();
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасписаниеЗавершение(НовоеРасписание, Контекст) Экспорт

	Если НовоеРасписание <> Неопределено Тогда
		Расписание = НовоеРасписание;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  РегламентноеЗадание - в локальном режиме работы.
//  СтрокаТаблицыЗначений из см. РегламентныеЗаданияСервер.НайтиЗадания
//  Неопределено - задание не найдено.
//
&НаСервере
Функция ПолучитьРегламентноеЗадание(Идентификатор)

	УстановитьПривилегированныйРежим(Истина);

	ЗаданиеРезультат = РегламентныеЗаданияСервер.Задание(Идентификатор);

	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(ЗаданиеРезультат)  = Тип("СтрокаТаблицыЗначений") Тогда
		Задание = ЗаданиеРезультат.УникальныйИдентификатор;
	Иначе
		Задание = ЗаданиеРезультат;
	КонецЕсли;
	
	Возврат Задание;
	
КонецФункции

// Добавляет новое задание в очередь или регламентное.
// 
// Параметры: 
//   ПараметрыЗадания - Структура - параметры добавляемого задания, возможные свойства:
//     * Использование                            - Булево - Истина, если регламентное задание должно выполняться 
//                                                    автоматически согласно расписанию. 
//     * Метаданные                               - ОбъектМетаданныхРегламентноеЗадание - обязательно для указания. 
//                                                    Объект метаданных, на основе которого будет создано регламентное задание.
//     * Параметры                                - Массив Из Произвольный - параметры регламентного задания. Количество и 
//                                                    состав параметров должны соответствовать параметрам метода регламентного
//                                                    задания.
//     * Ключ                                     - Строка - прикладной идентификатор регламентного задания.
//     * ИнтервалПовтораПриАварийномЗавершении    - Число - интервал в секундах, через который нужно перезапускать задание 
//                                                    в случае его аварийного завершения.
//     * Расписание                               - РасписаниеРегламентногоЗадания - расписание задания.
//     * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//
// Возвращаемое значение:
//   УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы
//                               или идентификатор ссылки задания очереди в модели сервиса.
&НаСервере
Функция ДобавитьЗадание(ПараметрыЗадания)

	УстановитьПривилегированныйРежим(Истина);

	Задание = РегламентныеЗаданияСервер.ДобавитьЗадание(ПараметрыЗадания);
	УникальныйИдентификаторЗадания = РегламентныеЗаданияСервер.УникальныйИдентификатор(Задание);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Действие = "Изменить";
	
	Возврат УникальныйИдентификаторЗадания;
	
КонецФункции

// Изменяет задание очереди или регламентное.
//
// В модели сервиса (разделение включено):
// - в случае вызова в транзакции на задание устанавливается объектная блокировка,
// - если задание создано на основе шаблона или предопределенное, может быть указано
// только свойство Использование в параметре Параметры. Расписание в этом случае,
// изменять нельзя, т.к. оно хранится централизованно в неразделенном Шаблоне задания,
// отдельно для каждой области оно не сохраняется.
// 
// Параметры: 
//   Идентификатор - ОбъектМетаданных - объект метаданных регламентного задания для поиска непредопределенного 
//                     регламентного задания.
//                 - Строка - имя метаданных предопределенного регламентного задания в любом режиме работы
//                     или строка уникального идентификатора регламентного задания в локальном режиме работы
//                     или строка уникального идентификатора ссылки задания очереди в модели сервиса.
//                - УникальныйИдентификатор - идентификатор регламентного задания в локальном режиме работы
//                     или идентификатор ссылки задания очереди в модели сервиса.
//                - РегламентноеЗадание - регламентное задание в локальном режиме работы.
//                - СправочникСсылка.ОчередьЗаданий - идентификатор задания очереди в модели сервиса.
//                - СтрокаТаблицыЗначений: см. НайтиЗадания.
//
//  ПараметрыЗадания - Структура - параметры, которые следует установить заданию, возможные свойства:
//    * Использование                            - Булево - Истина, если регламентное задание должно выполняться 
//                                                   автоматически согласно расписанию.
//    * Параметры                                - Массив Из Произвольный - параметры регламентного задания. Количество 
//                                                   и состав параметров должны соответствовать параметрам метода 
//                                                   регламентного задания.
//    * Ключ                                     - Строка - прикладной идентификатор регламентного задания.
//    * ИнтервалПовтораПриАварийномЗавершении    - Число - интервал в секундах, через который нужно перезапускать задание
//                                                   в случае его аварийного завершения.
//    * Расписание                               - РасписаниеРегламентногоЗадания - расписание задания.
//    * КоличествоПовторовПриАварийномЗавершении - Число - количество повторов при аварийном завершении задания.
//   
&НаСервере
Процедура ИзменитьЗадание(Идентификатор, ПараметрыЗадания)

	УстановитьПривилегированныйРежим(Истина);

	РегламентныеЗаданияСервер.ИзменитьЗадание(Идентификатор, ПараметрыЗадания);

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьРегламентноеЗадание()
	
	Если Не ЗначениеЗаполнено(ИмяМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИдентификатор = ?(Действие = "Изменить", Идентификатор, Неопределено);
	
	ЗаписатьРегламентноеЗаданиеНаСервере();
	ОбновитьЗаголовокФормы();
	
	Оповестить("Запись_РегламентныеЗадания", ТекущийИдентификатор);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустыхМетаданных()

	Возврат НСтр("ru = '<нет метаданных>'");

КонецФункции

&НаСервере
Процедура ЗаписатьРегламентноеЗаданиеНаСервере() 
	
	Если ОткрыватьПодОграниченнымиПравами Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ПараметрыЗадания = Новый Структура(
	"Ключ,
	|Наименование,
	|Использование,
	|ИмяПользователя,      
	|ИнтервалПовтораПриАварийномЗавершении,
	|КоличествоПовторовПриАварийномЗавершении,
	|Расписание");
	ЗаполнитьЗначенияСвойств(ПараметрыЗадания, ЭтотОбъект);
	
	ПараметрыОбновления = Новый Массив();      
	ПараметрыОбновления.Добавить(УчетнаяЗаписьМаркетплейса);
	ПараметрыЗадания.Вставить("Параметры", ПараметрыОбновления); 
	ПараметрыЗадания.Вставить("ИмяМетода", ИмяМетодаМетаданных);
	
	УстановитьПривилегированныйРежим(Истина);

	Если Действие = "Изменить" Тогда
		ИзменитьЗадание(Идентификатор, ПараметрыЗадания);
	Иначе
		Если ИмяМетаданных <> ПредставлениеПустыхМетаданных() Тогда
			ПараметрыЗадания.Вставить("Метаданные", Метаданные.РегламентныеЗадания[ИмяМетаданных]);
		КонецЕсли;
		
		УникальныйИдентификаторЗадания = ДобавитьЗадание(ПараметрыЗадания);
		Идентификатор = Строка(УникальныйИдентификаторЗадания);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовокФормы()

	Если Не ПустаяСтрока(Наименование) Тогда
		Представление = Наименование;

	ИначеЕсли Не ПустаяСтрока(СинонимМетаданных) Тогда
		Представление = СинонимМетаданных;
	Иначе
		Представление = ИмяМетаданных;
	КонецЕсли;

	Если Действие = "Изменить" Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Регламентное задание)';
																				|en = '%1 (Scheduled job)'"), Представление);
	Иначе
		Заголовок = НСтр("ru = 'Регламентное задание (создание)';
						|en = 'Scheduled job (Create)'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти