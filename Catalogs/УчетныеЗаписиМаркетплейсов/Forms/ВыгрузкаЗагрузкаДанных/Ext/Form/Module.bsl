
#Область ОписаниеПеременных

&НаКлиенте
Перем ПодтверждениеЗакрытияФормы;

&НаКлиенте
Перем ИзмененоСодержимоеТабличногоДокумента;

&НаКлиенте
Перем УстановитьФильтрацию;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПараметрыШапки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки();

	ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам(ЭтотОбъект);

	УчетнаяЗапись = Параметры.УчетнаяЗапись;

	ИмяОбъектаМетаданных = Параметры.ИмяОбъектаМетаданных;
	ИмяТабличнойЧасти    = Параметры.ИмяТабличнойЧасти;
	ИмяМакетаСШаблоном   = Параметры.ИмяМакетаСШаблоном;

	ЭтоЗагрузкаДанных            = Параметры.ЭтоЗагрузкаДанных;
	ВариантВыгрузкиЗагрузки      = Параметры.ВариантВыгрузкиЗагрузки;
	ДоступныИнтеграционныеМетоды = Параметры.ДоступныИнтеграционныеМетоды;
	ЗагружатьНезаполненныеСтроки = Параметры.ЗагружатьНезаполненныеСтроки;

	ПериодВид = Параметры.ВидПериода;
	Если ЗначениеЗаполнено(ПериодВид) Тогда
		Если ЗначениеЗаполнено(Параметры.ДатаВПериоде) Тогда
			ДатаВПериоде = Параметры.ДатаВПериоде;
		Иначе
			ДатаВПериоде = ТекущаяДатаСеанса();
		КонецЕсли;

		Если ПериодВид = Перечисления.ДоступныеПериодыОтчета.Год Тогда
			ПериодКонец  = КонецГода(ДатаВПериоде);
			ПериодНачало = НачалоГода(ДатаВПериоде);
		ИначеЕсли ПериодВид = Перечисления.ДоступныеПериодыОтчета.Полугодие Тогда 
			Если Месяц(ДатаВПериоде) > 6 Тогда
				ПериодКонец  = КонецГода(ДатаВПериоде);
				ПериодКонец  = НачалоМесяца(ДобавитьМесяц(ПериодКонец, -6));
			Иначе
				ПериодНачало = НачалоГода(ДатаВПериоде);
				ПериодКонец  = КонецМесяца(ДобавитьМесяц(ПериодНачало, 6));
			КонецЕсли;
		ИначеЕсли ПериодВид = Перечисления.ДоступныеПериодыОтчета.Квартал Тогда
			ПериодНачало = НачалоКвартала(ДатаВПериоде);
			ПериодКонец  = КонецКвартала(ДатаВПериоде);
		ИначеЕсли ПериодВид = Перечисления.ДоступныеПериодыОтчета.Месяц Тогда
			ПериодНачало = НачалоМесяца(ДатаВПериоде);
			ПериодКонец  = КонецМесяца(ДатаВПериоде);
		ИначеЕсли ПериодВид = Перечисления.ДоступныеПериодыОтчета.Неделя Тогда
			ПериодНачало = НачалоНедели(ДатаВПериоде);
			ПериодКонец  = КонецНедели(ДатаВПериоде);
		ИначеЕсли ПериодВид = Перечисления.ДоступныеПериодыОтчета.День Тогда
			ПериодНачало = НачалоДня(ДатаВПериоде);
			ПериодКонец  = КонецДня(ДатаВПериоде);
		КонецЕсли;
		Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПериодНачало, ПериодКонец, Истина);
	КонецЕсли;

	ПояснениеВариантаЗагрузкиИзМакета = Параметры.ПояснениеВариантаЗагрузкиИзМакета;
	ПодсказкаВариантаЗагрузкиИзМакета = Параметры.ПодсказкаВариантаЗагрузкиИзМакета;
	ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл = Параметры.ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл;
	ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл = Параметры.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл;
	ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI = Параметры.ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI;
	ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI = Параметры.ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI;

	ИмяФормыСопоставленияДанных = Параметры.ИмяФормыСопоставленияДанных;
	Если Не ПустаяСтрока(Параметры.ПодсказкаОткрытияФормыСопоставленияДанных) Тогда
		КомандаОткрытияСопоставленияДанных = Команды.Найти("ОткрытьФормуСопоставленияДанных");
		КомандаОткрытияСопоставленияДанных.Подсказка = Параметры.ПодсказкаОткрытияФормыСопоставленияДанных;
	КонецЕсли;

	ИмяФормыПослеЗагрузкиДанных = Параметры.ИмяФормыПослеЗагрузкиДанных;
	Если Не ПустаяСтрока(ИмяФормыПослеЗагрузкиДанных) Тогда
		КомандаОткрытияПослеЗагрузкиДанных = Команды.Найти("ОткрытьФормуПослеЗагрузкиДанных");
		КомандаОткрытияПослеЗагрузкиДанных.Заголовок = Параметры.ПодсказкаОткрытияФормыПослеЗагрузкиДанных;
		КомандаОткрытияПослеЗагрузкиДанных.Подсказка = Параметры.ПодсказкаОткрытияФормыПослеЗагрузкиДанных;
	Иначе
		Элементы.ОткрытьФормуПослеЗагрузкиДанных.Видимость = Ложь;
	КонецЕсли;

	ИмяФормыДополнительныхНастроек = Параметры.ИмяФормыДополнительныхНастроек;
	ПараметрыФормыДополнительныхНастроек = Параметры.ПараметрыФормыДополнительныхНастроек;

	ДанныеТорговойПлощадки = Справочники.УчетныеЗаписиМаркетплейсов.НастройкиУчетнойЗаписи(УчетнаяЗапись, Истина);

	ДополнительныеПараметрыФормы = Параметры.ДополнительныеПараметрыФормы;
	Если ТипЗнч(ДополнительныеПараметрыФормы) <> Тип("Структура") Тогда
		ДополнительныеПараметрыФормы = Новый Структура;
		ДополнительныеПараметрыФормы.Вставить("ДанныеТорговойПлощадки", ДанныеТорговойПлощадки);
	КонецЕсли;

	ИмяФайлаПоУмолчанию = СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаМетаданных + ".ТабличныеЧасти." + ИмяТабличнойЧасти, СсылкаНаОбъект);

	// Настройка работы с реквизитом СсылкаНаОбъект.
	СсылкаНаОбъект = Параметры.СсылкаНаОбъект;
	Элементы.СсылкаНаОбъект.Видимость = (ТипЗнч(СсылкаНаОбъект) <> Тип("Неопределено"));
	Если Элементы.СсылкаНаОбъект.Видимость Тогда
		Элементы.СсылкаНаОбъект.ВыбиратьТип = Ложь;
	КонецЕсли;

	СсылкаНаОбъектЗаписыватьЗагружаемыйФайл = Параметры.СсылкаНаОбъектЗаписыватьЗагружаемыйФайл;

	Если Элементы.СсылкаНаОбъект.Видимость Тогда
		Попытка
			Идентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(СсылкаНаОбъект));
			ОбъектМетаданных = ОбщегоНазначения.ОбъектМетаданныхПоИдентификатору(Идентификатор);
			СсылкаНаОбъектИмяФормыВыбора = ОбъектМетаданных.Формы.ФормаВыбора.ПолноеИмя();
		Исключение
			СсылкаНаОбъектИмяФормыВыбора = "";
		КонецПопытки;

		// Установка подсказки ввода и ожидаемых действий.
		Если ЭтоЗагрузкаДанных Тогда
			Элементы.СсылкаНаОбъект.ПодсказкаВвода = НСтр("ru = '<Будет создан>'");
		Иначе
			Элементы.СсылкаНаОбъект.ПодсказкаВвода = НСтр("ru = '<Выбрать для выгрузки>'");
		КонецЕсли;
		ОбновитьПодсказкуСсылкиНаОбъект(СсылкаНаОбъектПодсказка, СсылкаНаОбъект, ЭтоЗагрузкаДанных);

		// Установка заголовка.
		СсылкаНаОбъектЗаголовок = Параметры.СсылкаНаОбъектЗаголовок;
		Если ПустаяСтрока(СсылкаНаОбъектЗаголовок) Тогда
			СсылкаНаОбъектЗаголовок = НСтр("ru = 'Ссылка на объект для выгрузки / загрузки данных'")
		КонецЕсли;
		Элементы.СсылкаНаОбъект.Заголовок = СсылкаНаОбъектЗаголовок;

		// Установка параметров выбора.
		УстановитьДляСсылкиНаОбъектПараметрыВыбора(Параметры.СсылкаНаОбъектПараметрыВыбора);
	КонецЕсли;

	// Настройка вариантов выгрузки/загрузки.
	ЭлементВариантаЗагрузки = Элементы.ВариантВыгрузкиЗагрузки.СписокВыбора.НайтиПоЗначению("ВнешнийФайл");
	Если ЭлементВариантаЗагрузки <> Неопределено Тогда
		Если ЭтоЗагрузкаДанных Тогда
			Элементы.ВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Вариант загрузки'");
			ЭлементВариантаЗагрузки.Представление = НСтр("ru = 'Из внешнего файла'");
		Иначе
			Элементы.ВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Вариант выгрузки'");
			ЭлементВариантаЗагрузки.Представление = НСтр("ru = 'Во внешний файл'");
		КонецЕсли;
	КонецЕсли;

	Если Не ЭтоЗагрузкаДанных Тогда
		ЭлементВариантаЗагрузки = Элементы.ВариантВыгрузкиЗагрузки.СписокВыбора.НайтиПоЗначению("ЗаполнениеТаблицы");
		Если ЭлементВариантаЗагрузки <> Неопределено Тогда
			Элементы.ВариантВыгрузкиЗагрузки.СписокВыбора.Удалить(ЭлементВариантаЗагрузки);
		КонецЕсли;

		Элементы.Далее.Видимость = Ложь;
		Элементы.СсылкаНаОбъект.АвтоВыборНезаполненного = Истина;
	КонецЕсли;

	ДоступныИнтеграционныеМетоды = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ДоступныИнтеграционныеМетоды", Ложь);
	Если Не ДоступныИнтеграционныеМетоды Тогда
		ЭлементВариантаЗагрузки = Элементы.ВариантВыгрузкиЗагрузки.СписокВыбора.НайтиПоЗначению("ИнтеграционнымиМетодами");
		Если ЭлементВариантаЗагрузки <> Неопределено Тогда
			Элементы.ВариантВыгрузкиЗагрузки.СписокВыбора.Удалить(ЭлементВариантаЗагрузки);
		КонецЕсли;
	КонецЕсли;

	// Настройка доступности команды сопоставления данных.
	Элементы.ОткрытьФормуСопоставленияДанных.Видимость = НЕ ПустаяСтрока(ИмяФормыСопоставленияДанных);

	// Настройка формы для выгрузки данных.
	Если ЭтоЗагрузкаДанных Тогда
		Элементы.ВыгрузитьЗагрузитьДанные.Заголовок = НСтр("ru = 'Загрузить данные из файла...'");
	Иначе // это выгрузка
		Элементы.ВыгрузитьЗагрузитьДанные.Заголовок = НСтр("ru = 'Сохранить данные в файл...'");
	КонецЕсли;

	// Многостраничная загрузка
	Если Параметры.ЛистыШаблона = Неопределено Или Не ЭтоЗагрузкаДанных Тогда
		Элементы.СтраницыЛисты.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		Элементы.СтраницаЛист1.Видимость          = Истина;
		
		// Восстановление настроек по колонкам.
		ИнициализироватьИнформациюПоКолонкамИМакетЗагрузки();
		
	Иначе                            
		ЛистыШаблона       = ОбщегоНазначения.СкопироватьРекурсивно(Параметры.ЛистыШаблона);
		ТекущийЛист        = "";
		ИмяМакетаСШаблоном = "";
		
		Элементы.СтраницыЛисты.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСнизу;
		Элементы.СтраницаЛист1.Видимость          = Ложь;
		
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			ТекущийЛист        = КлючИЗначение.Ключ;
			ИмяМакетаСШаблоном = КлючИЗначение.Значение.ИмяМакетаСШаблоном;
			
			ГруппаЛист = Элементы.Добавить(КлючИЗначение.Ключ, Тип("ГруппаФормы"), Элементы.СтраницыЛисты);
			ЗаполнитьЗначенияСвойств(ГруппаЛист, Элементы.СтраницаЛист1,, "Имя, Вид, Заголовок, ПутьКДаннымЗаголовка, Видимость");
			ГруппаЛист.Заголовок = КлючИЗначение.Значение.ИмяЛиста;
			
			ЭлементШаблон = Элементы.Добавить("ШаблонСДанными_" + КлючИЗначение.Ключ, Тип("ПолеФормы"), ГруппаЛист);
			ЗаполнитьЗначенияСвойств(ЭлементШаблон, Элементы.ШаблонСДанными,, "Имя");
			
			КлючИЗначение.Значение.Вставить("ПараметрыШапки",                           Неопределено);
			КлючИЗначение.Значение.Вставить("ИнформацияПоКолонкам",                     Неопределено);
			КлючИЗначение.Значение.Вставить("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    1);
			КлючИЗначение.Значение.Вставить("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", 1);
			КлючИЗначение.Значение.Вставить("ШаблонСДанными",                           Новый ТабличныйДокумент);
			КлючИЗначение.Значение.Вставить("ЗаполняемыйШаблон",                        Неопределено);
			
			// Восстановление настроек по колонкам.   
			ИнформацияПоКолонкам.Очистить();
			ИнициализироватьИнформациюПоКолонкамИМакетЗагрузки();
		КонецЦикла;
		
		ИзменитьЛистШаблона(Элементы.СтраницыЛисты.ТекущаяСтраница.Имя);
	КонецЕсли;

	// Заполнение информации по макетам для редактирования, если это операция выгрузки данных.
	ПолучитьВыгружаемыеМакеты();

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	УстановитьВидимостьЭлементовФормы();

	НастроитьСписокЗагруженныхОбъектов();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	СменитьСтраницу("ЗаполнениеТаблицыДанными");

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ПодтверждениеЗакрытияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Отказ = Отказ Или (ПодтверждениеЗакрытияФормы <> Истина);
	Если ЗавершениеРаботы И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных Тогда
		ТекстПредупреждения = НСтр("ru = 'Введенные данные не будут записаны.'");
		Возврат;
	КонецЕсли;

	Если Отказ И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных Тогда
		Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Введенные данные не будут записаны. Закрыть форму?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПодтверждениеЗакрытияФормы = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ВыгрузкаЗагрузкаДанных_ОбработатьОповещениеНаСервере" Тогда
		ОчиститьСообщения();

		// Источник - Структура - см. ИнтеграцияСМаркетплейсамиКлиент.НовыйИсточникОповещенияВыгрузкаЗагрузкаДанных
		Если ТипЗнч(Источник) = Тип("Структура") Тогда
			ИдентификаторФормыОповещения =
				ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник, "ИдентификаторФормыОповещения", Неопределено);
			Если ИдентификаторФормыОповещения <> УникальныйИдентификатор Тогда
				Возврат;
			КонецЕсли;

			ИмяМетода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник, "ИмяМетода", Неопределено);
			ОбработатьОповещение(ИмяМетода, Параметр);
		КонецЕсли;
	ИначеЕсли СписокОбъектовОтбор.НайтиПоЗначению(Источник) <> Неопределено Тогда
		Элементы.СписокЗагруженныхОбъектов.Обновить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СсылкаНаОбъектПриИзменении(Элемент)

	ОчиститьСообщения();

	ОбновитьПодсказкуСсылкиНаОбъект(СсылкаНаОбъектПодсказка, СсылкаНаОбъект, ЭтоЗагрузкаДанных);

	Если ДополнительныеПараметрыФормы.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
		Для Каждого КлючИЗначение Из ДополнительныеПараметрыФормы.ЗначенияПараметровСсылкиНаОбъект Цикл
			ДополнительныеПараметрыФормы.ЗначенияПараметровСсылкиНаОбъект.Удалить(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если СсылкаНаОбъектФиксированныеНастройки <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ФиксированныеНастройки", СсылкаНаОбъектФиксированныеНастройки);

		ОткрытьФорму(СсылкаНаОбъектИмяФормыВыбора, ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрТаблицаСопоставленияПриИзменении(Элемент)

	ОчиститьСообщения();

	УстановитьФильтрациюТаблицыСопоставления();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрПоОсновнымКолонкамПриИзменении(Элемент)

	УстановитьФильтрОсновныхКолонок(ФильтрПоОсновнымКолонкам);

КонецПроцедуры

&НаКлиенте
Процедура ВариантВыгрузкиЗагрузкиПриИзменении(Элемент)

	ОчиститьСообщения();

	СменитьСтраницуИсточникаДанных();
	НастроитьОтображениеЭлементовСтраницы();

КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)

	ОчиститьСообщения();
	СтандартнаяОбработка = Ложь;

	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода",
			ОбщегоНазначенияКлиент.ДатаСеанса(), ОбщегоНазначенияКлиент.ДатаСеанса());

	Если ПериодВид = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		ПараметрыВыбора.Вставить("ВыборКварталов", Ложь);
		ИмяОбщейФормы = "ОбщаяФорма.ВыборСтандартногоПериодаМесяц";
	Иначе
		ИмяОбщейФормы = "ОбщаяФорма.ВыборСтандартногоПериода";
		ПараметрыВыбора.Вставить("Кратность", ПериодВид);
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму(ИмяОбщейФормы, ПараметрыВыбора, ЭтотОбъект,,,, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура СтраницыЛистыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИзменитьЛистШаблона(ТекущаяСтраница.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонСДаннымиПриИзменении(Элемент)

	ПодтверждениеЗакрытияФормы = Ложь;
	ИзмененоСодержимоеТабличногоДокумента = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ШаблонСДаннымиПриАктивизации(Элемент)

	ШаблоныДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Шаблоны", Новый Массив);
	ВысотаШапки = ШаблоныДанныхШапки.Количество();

	Элемент.Защита = ?(Элемент.ТекущаяОбласть.Верх <= ВысотаШапки
		Или Элемент.ТекущаяОбласть.Верх > ВысотаЗаголовкаТаблицыМакетаСШаблоном + ВысотаШапки, Ложь, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаСопоставленияДанных

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	УстановитьФильтрацию = Ложь;

	Если ОтменаРедактирования Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если (ФильтрТаблицаСопоставления = "Сопоставленные" И Не ТекущиеДанные.СтрокаОбработана)
				Или (ФильтрТаблицаСопоставления = "Несопоставленные" И ТекущиеДанные.СтрокаОбработана)
				Или ФильтрТаблицаСопоставления = "ПодобраноАвтоматически" Тогда
			УстановитьФильтрацию = Истина;
		КонецЕсли;
	КонецЕсли;

	ПодключитьОбработчикОжидания("ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПослеУдаления(Элемент)

	УстановитьФильтрацию = Ложь;
	ПодключитьОбработчикОжидания("ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла", 0.1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСопоставленияДанныхПриАктивизацииЯчейки(Элемент)

	ДоступностьСопоставления = Ложь;

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.РезультатСопоставленияСтроки) Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ОписаниеОшибки) И Элемент.ВыделенныеСтроки.количество() = 1
			Или Элемент.ВыделенныеСтроки.количество() > 1 Тогда
			ДоступностьСопоставления = Элементы.ОткрытьФормуСопоставленияДанных.Видимость;
		КонецЕсли;
	КонецЕсли;

	Элементы.ОткрытьФормуСопоставленияДанных.Доступность = ДоступностьСопоставления;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаСопоставленияДанныхПолеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОбработатьСобытиеПриИзменении(Элемент, ТекущиеДанные);

	Элементы.ТаблицаСопоставленияДанных.ЗакончитьРедактированиеСтроки(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаСопоставленияДанныхПолеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбработатьСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);

	Если Не СтандартнаяОбработка Тогда
		Элементы.ТаблицаСопоставленияДанных.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗагруженныхОбъектов

&НаКлиенте
Процедура СписокЗагруженныхОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СписокЗагруженныхОбъектовПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура СписокЗагруженныхОбъектовПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элемент, Заголовок);
	СписокПометкаУдаленияСервер();

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокЗагруженныхОбъектовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)

	СостоянияСсылок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "СостоянияСсылок", Новый Соответствие);

	Для Каждого СтрокаСписка Из Строки Цикл
		СостояниеСсылки = СостоянияСсылок.Получить(СтрокаСписка.Значение.Данные["Ссылка"]);
		СтрокаСписка.Значение.Данные["СостояниеСсылки"] = СостояниеСсылки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьБланк(Команда)

	ОчиститьСообщения();

	ОткрытьФормуИзмененияБланка();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленияДанных(Команда)

	ДанныеДляСопоставления = Элементы.ТаблицаСопоставленияДанных.ВыделенныеСтроки;

	Если ДанныеДляСопоставления.Количество() = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выделены строки для сопоставления данных'"));
		Возврат;
	КонецЕсли;

	ОткрытьФормуПоИмениФормыСопоставленияДанных(ДанныеДляСопоставления);

КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)

	ОчиститьСообщения();

	ПереходКСледующемуШагуЗагрузкиДанных();

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)

	ОчиститьСообщения();

	ПереходКПредыдущемуШагуЗагрузкиДанных();

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьШаблонВФайл(Команда)

	ОчиститьСообщения();

	Оповещение = Новый ОписаниеОповещения("ВыгрузитьШаблонВФайлЗавершение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗагрузитьШаблонИзФайла(Команда)

	ОчиститьСообщения();

	Если ЭтоЗагрузкаДанных Тогда
		Если ВариантВыгрузкиЗагрузки = "ИнтеграционнымиМетодами" Тогда
			ЗагрузитьДанныеИнтеграционнымиМетодами();
		Иначе
			ИмяФайла = СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаМетаданных + ".ТабличныеЧасти." + ИмяТабличнойЧасти, СсылкаНаОбъект);

			ОповещениеЗавершения = Новый ОписаниеОповещения("ЗагрузитьДанныеИзФайлаВШаблон", ЭтотОбъект);

			ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
			ПараметрыЗагрузки.Диалог.Фильтр = НСтр("ru = 'Все поддерживаемые форматы файлов(*.xls;*.xlsx;*.ods;*.mxl)|*.xls;*.xlsx;*.ods;*.mxl|Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx|Электронная таблица OpenDocument (*.ods)|*.ods|Табличный документ (*.mxl)|*.mxl'");
			ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;

			Если Не ПустаяСтрока(ДанныеИзФайлаАдресДвоичныхДанных) Тогда
				УдалитьИзВременногоХранилища(ДанныеИзФайлаАдресДвоичныхДанных);
			КонецЕсли;
			ДанныеИзФайлаАдресДвоичныхДанных = НовыйАдресХранилища(УникальныйИдентификатор);

			ФайловаяСистемаКлиент.ЗагрузитьФайл(ОповещениеЗавершения, ПараметрыЗагрузки, ИмяФайла, ДанныеИзФайлаАдресДвоичныхДанных);
		КонецЕсли;
		
	Иначе
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран объект для выгрузки данных.'"),, "СсылкаНаОбъект",);
			Возврат;
		КонецЕсли;

		СохранитьШаблонСДаннымиВФайл();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек(Команда)

	ОчиститьСообщения();
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнениеЗначенийДополнительныхНастроекЗавершение", ЭтотОбъект);

	ПараметрыФормы = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыФормыДополнительныхНастроек);	// Структура
	ПараметрыФормы.СсылкаНаОбъект = СсылкаНаОбъект;
	ПараметрыФормы.ИмяОбъектаМетаданных = ИмяОбъектаМетаданных;
	ПараметрыФормы.ИмяТабличнойЧасти = ИмяТабличнойЧасти;
	ПараметрыФормы.ИнформацияПоКолонкам = ИнформацияПоКолонкам;
	Если ДополнительныеПараметрыФормы.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
		ПараметрыФормы.Вставить("ЗначенияПараметровСсылкиНаОбъект", ДополнительныеПараметрыФормы.ЗначенияПараметровСсылкиНаОбъект);
	Иначе
		ПараметрыФормы.Вставить("ЗначенияПараметровСсылкиНаОбъект", Новый Структура);
	КонецЕсли;

	ОткрытьФорму(ИмяФормыДополнительныхНастроек, ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)

	Если ТипЗнч(Элементы.СписокЗагруженныхОбъектов.ТекущаяСтрока) = Тип("Число") Тогда
		ОчиститьСообщения();

		ВыделенныеСтроки = Элементы.СписокЗагруженныхОбъектов.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		МассивСсылок = Новый Массив;
		Для Каждого ИндексСтрокиСписка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СписокЗагруженныхОбъектов.ДанныеСтроки(ИндексСтрокиСписка);
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;

		РаспроведенныеДокументы = ОбщегоНазначенияУТВызовСервера.СсылкиРаспроведенныхДокументов(МассивСсылок);

		Если РаспроведенныеДокументы.Количество() > 0 Тогда
			ОповещениеПроведенияОтменыПроведенияДокумента(Элементы.СписокЗагруженныхОбъектов, РаспроведенныеДокументы, Заголовок)
		КонецЕсли;
	Иначе
		ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.СписокЗагруженныхОбъектов, Заголовок);
	КонецЕсли;

	СписокОтменаПроведенияСервер();

КонецПроцедуры

&НаКлиенте
Процедура СписокПровести(Команда)

	Если ТипЗнч(Элементы.СписокЗагруженныхОбъектов.ТекущаяСтрока) = Тип("Число") Тогда
		ОчиститьСообщения();

		ВыделенныеСтроки = Элементы.СписокЗагруженныхОбъектов.ВыделенныеСтроки;
		Если ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;

		МассивСсылок = Новый Массив;
		Для Каждого ИндексСтрокиСписка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СписокЗагруженныхОбъектов.ДанныеСтроки(ИндексСтрокиСписка);
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;

		НепроведенныеДокументы = Новый Массив;
		ШаблонСообщения = НСтр("ru = 'Документ %1 не проведен: %2'");
		ДанныеОНепроведенныхДокументах = ОбщегоНазначенияВызовСервера.ПровестиДокументы(МассивСсылок);
		Для Каждого ИнформацияОДокументе Из ДанныеОНепроведенныхДокументах Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
					Строка(ИнформацияОДокументе.Ссылка),
					ИнформацияОДокументе.ОписаниеОшибки),
				ИнформацияОДокументе.Ссылка);
			
			НепроведенныеДокументы.Добавить(ИнформацияОДокументе.Ссылка);
		КонецЦикла;

		ПроведенныеДокументы = ОбщегоНазначенияКлиентСервер.РазностьМассивов(МассивСсылок, НепроведенныеДокументы);

		Если НепроведенныеДокументы.Количество() > 0 Тогда
			КнопкиДиалога = Новый СписокЗначений;
			КнопкиДиалога.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'ОК'"));

			ТекстДиалога = НСтр("ru = 'Не удалось провести один или несколько документов.'");
			ДополнительныеПараметры = Новый Структура("Список, ПроведенныеДокументы, ТипСписка",
				Элементы.СписокЗагруженныхОбъектов, ПроведенныеДокументы, Заголовок);
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьПроведенностьДокументовЗавершение", ОбщегоНазначенияУТКлиент,
				ДополнительныеПараметры);

			ПоказатьВопрос(ОписаниеОповещения, ТекстДиалога, КнопкиДиалога);
		Иначе
			ОповещениеПроведенияОтменыПроведенияДокумента(Элементы.СписокЗагруженныхОбъектов, ПроведенныеДокументы, Заголовок);
		КонецЕсли;

	Иначе
		ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.СписокЗагруженныхОбъектов, Заголовок);
	КонецЕсли;

	СписокПровестиСервер();

КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ВыделенныеСтроки = Элементы.СписокЗагруженныхОбъектов.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		МассивСсылок = Новый Массив;
		Для Каждого ИндексСтрокиСписка Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.СписокЗагруженныхОбъектов.ДанныеСтроки(ИндексСтрокиСписка);
			МассивСсылок.Добавить(ДанныеСтроки.Ссылка);
		КонецЦикла;
		
		Результат = ОбщегоНазначенияУТВызовСервера.СсылкиОбъектовПомеченныхНаУдаление(МассивСсылок, "Ссылка");
		
		МассивСсылок = Результат.МассивСсылок;
		ЕстьСтрокиПомеченныеНаУдаление = Результат.ЕстьСтрокиПомеченныеНаУдаление;
		
		ТекстВопроса = ?(Результат.ЕстьСтрокиПомеченныеНаУдаление,
			НСтр("ru='Снять с выделенных элементов пометку на удаление?'"),
			НСтр("ru='Пометить выделенные элементы на удаление?'"));
		
		ПараметрыОбновленияСписка = Новый Структура;
		ПараметрыОбновленияСписка.Вставить("Форма",          ЭтотОбъект);
		ПараметрыОбновленияСписка.Вставить("ИмяСписка",      "СписокЗагруженныхОбъектов");
		ПараметрыОбновленияСписка.Вставить("ОбновитьСписок", Истина);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Список",                    Элементы.СписокЗагруженныхОбъектов);
		ДополнительныеПараметры.Вставить("ВыделенныеСтроки",          МассивСсылок);
		ДополнительныеПараметры.Вставить("ТипСписка",                 Заголовок);
		ДополнительныеПараметры.Вставить("УстановкаПометкиУдаления",  Не ЕстьСтрокиПомеченныеНаУдаление);
		ДополнительныеПараметры.Вставить("ОповещениеОЗавершении",     Неопределено);
		ДополнительныеПараметры.Вставить("ПараметрыОбновленияСписка", ПараметрыОбновленияСписка);
		
		Оповещение = Новый ОписаниеОповещения("УстановитьПометкуУдаленияЗавершение", ОбщегоНазначенияУТКлиент, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.СписокЗагруженныхОбъектов, Заголовок);
	КонецЕсли;
	
	СписокПометкаУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПослеЗагрузкиДанных(Команда)
	
	Если ПустаяСтрока(ИмяФормыПослеЗагрузкиДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("УчетнаяЗапись",              УчетнаяЗапись);
	ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданных",       ИмяОбъектаМетаданных);
	ПараметрыОткрытия.Вставить("ИмяТабличнойЧасти",          ИмяТабличнойЧасти);
	ПараметрыОткрытия.Вставить("ДополнительныеПараметры",    ДополнительныеПараметрыФормы);
	ПараметрыОткрытия.Вставить("ТаблицаСопоставленияДанных", ТаблицаСопоставленияДанных);
	ПараметрыОткрытия.Вставить("ЗагруженныеОбъекты",         СписокОбъектовОтбор);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыПослеЗагрузкиДанных", ЭтотОбъект, ПараметрыОткрытия);
	ОткрытьФорму(ИмяФормыПослеЗагрузкиДанных, 
		ПараметрыОткрытия, 
		ЭтотОбъект, 
		Истина,,,
		ОповещениеОЗакрытии, 
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)

	ЗначенияПараметров =
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыФормы, "ЗначенияПараметровСсылкиНаОбъект", Новый Структура);

	ИнтеграцияСМаркетплейсамиКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя, ЗначенияПараметров);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление(СписокКолонок = Неопределено)

	ИмяТаблицы = "ТаблицаСопоставленияДанных";
	ИнформацияПоВсемКолонкам = ИнформацияПоВсемКолонкам();

	ВариантыРезультатовСопоставления = ИнтеграцияСМаркетплейсамиКлиентСервер.ВариантыРезультатовСопоставления();

	ЦветНеСопоставлено  = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветНеоднозначность = ЦветаСтиля.РезультатОжидаетсяЦвет;

	УсловноеОформление.Элементы.Очистить();

	//
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	Для Каждого ДанныеПоКолонке Из ИнформацияПоВсемКолонкам Цикл
		Если Не ДанныеПоКолонке.ВидимостьПриСопоставлении Тогда
			Продолжить;
		КонецЕсли;

		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + ДанныеПоКолонке.ИмяКолонки);
		ПолеОформления.Использование = Истина;
	КонецЦикла;

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "РезультатСопоставленияСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВариантыРезультатовСопоставления.Неоднозначность;
	ЭлементОтбора.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеоднозначность);

	//
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	Для Каждого ДанныеПоКолонке Из ИнформацияПоВсемКолонкам Цикл
		Если Не ДанныеПоКолонке.ВидимостьПриСопоставлении Тогда
			Продолжить;
		КонецЕсли;

		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + ДанныеПоКолонке.ИмяКолонки);
		ПолеОформления.Использование = Истина;
	КонецЦикла;

	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "РезультатСопоставленияСтроки");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВариантыРезультатовСопоставления.СтрокаНеСопоставлена;
	ЭлементОтбора.Использование = Истина;

	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПредупреждение);

	//

	Отбор = Новый Структура("ВидимостьПриСопоставлении, ОбязательнаДляЗаполнения", Истина, Истина);
	ОбязательныеКолонки = ИнформацияПоВсемКолонкам.НайтиСтроки(Отбор);
	
	Для Каждого ДанныеКолонки Из ОбязательныеКолонки Цикл
		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + ДанныеКолонки.ИмяКолонки);
		ПолеОформления.Использование = Истина;

		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "РезультатСопоставленияСтроки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВариантыРезультатовСопоставления.СтрокаНеСопоставлена;
		ЭлементОтбора.Использование = Истина;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ОписаниеОшибки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбора.ПравоеЗначение = ДанныеКолонки.ИмяКолонки;
		ЭлементОтбора.Использование = Истина;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ДанныеКолонки.ИмяКолонки);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеСопоставлено);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<требуется заполнение>'"));

		//
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "_" + ДанныеКолонки.ИмяКолонки);
		ПолеОформления.Использование = Истина;

		ГруппаОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "РезультатСопоставленияСтроки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВариантыРезультатовСопоставления.Неоднозначность;
		ЭлементОтбора.Использование = Истина;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + "ОписаниеОшибки");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбора.ПравоеЗначение = ДанныеКолонки.ИмяКолонки;
		ЭлементОтбора.Использование = Истина;

		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "." + ДанныеКолонки.ИмяКолонки);
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.Использование = Истина;

		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветНеоднозначность);
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<неоднозначность>'"));
	КонецЦикла;

	//
	ИспользуетсяМетодДополненияУсловногоОформления = ИнтеграцияСМаркетплейсамиСервер.МетодКонфигурацииИспользуется(
		ИмяОбъектаМетаданных,
		"ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных");

	Если Не ПустаяСтрока(ИмяОбъектаМетаданных)
	  И ИспользуетсяМетодДополненияУсловногоОформления Тогда
		МенеджерОбъекта = ИнтеграцияСМаркетплейсамиСервер.МенеджерОбъекта(ИмяОбъектаМетаданных);
		МенеджерОбъекта.ДополнитьУсловноеОформлениеТаблицыСопоставленияДанных(ЭтотОбъект, ИмяТабличнойЧасти);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеЭлементовСтраницы()

	Если ЭтоЗагрузкаДанных Тогда
		Если ВариантВыгрузкиЗагрузки = "ВнешнийФайл" Тогда
			ТекстПодсказки = НСтр("ru = 'Необходимо загрузить таблицу с данными в одном из форматов:
				|• Книги Microsoft Excel 97 (.xls) и Excel 2007 (.xlsx)
				|• Электронные таблицы LibreOffice Calc (.ods)
				|• Табличный документ (.mxl)'");
		ИначеЕсли ВариантВыгрузкиЗагрузки = "ИнтеграционнымиМетодами" Тогда
			Если ЭтоЗагрузкаДанных Тогда
				ТекстПодсказки = НСтр("ru = 'С помощью методов API выполняется автоматическое чтение данных с торговой площадки и их подготовка для записи в учетную систему 1С.'");
			Иначе
				ТекстПодсказки = НСтр("ru = 'С помощью методов API выполняется автоматическая отправка данных из учетной системы 1С на торговую площадку.'");
			КонецЕсли;
		Иначе
			ТекстПодсказки = НСтр("ru = 'Для заполнения таблицы скопируйте данные в таблицу из внешнего файла через буфер обмена.'");
		КонецЕсли;
	Иначе
		ТекстПодсказки = "";
	КонецЕсли;
	
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОбязательныеКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);

	Если ОбязательныеКолонки.Количество() > 0 И ЭтоЗагрузкаДанных Тогда
		СписокКолонок = "";

		Для Каждого Колонка Из ОбязательныеКолонки Цикл
			Если Не Колонка.ВидимостьВМакете Тогда
				Продолжить;
			КонецЕсли;

			Если ЗначениеЗаполнено(Колонка.Синоним) Тогда
				СписокКолонок = СписокКолонок + ", """ + Колонка.Синоним + """";
			Иначе
				СписокКолонок = СписокКолонок + ", """ + Колонка.ПредставлениеКолонки + """";
			КонецЕсли;
		КонецЦикла;

		Если Не ПустаяСтрока(СписокКолонок) Тогда
			СписокКолонок = Сред(СписокКолонок, 3);
			ТекстПодсказки = ТекстПодсказки + Символы.ПС
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Колонки, обязательные для заполнения: %1.'"), СписокКолонок);
		КонецЕсли;
	КонецЕсли;

	Если ЭтоЗагрузкаДанных Тогда

		Если ВариантВыгрузкиЗагрузки = "ЗаполнениеТаблицы" Тогда
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Где взять файл?'");
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Видимость = Не ПустаяСтрока(ПодсказкаВариантаЗагрузкиИзМакета);
			Элементы.ДекорацияПодсказкаЗаполненияВариантВыгрузкиЗагрузки.Заголовок =
				СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаВариантаЗагрузкиИзМакета);

			Элементы.ГруппаСохранитьБланк.Видимость = Ложь;
			Элементы.ИзменитьБланк.Видимость = Истина;

			Если Не ПустаяСтрока(ПояснениеВариантаЗагрузкиИзМакета) Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + ПояснениеВариантаЗагрузкиИзМакета;
			КонецЕсли;

		ИначеЕсли ВариантВыгрузкиЗагрузки = "ВнешнийФайл" Тогда
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Где взять файл?'");
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Видимость = Не ПустаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл);
			Элементы.ДекорацияПодсказкаЗаполненияВариантВыгрузкиЗагрузки.Заголовок =
				СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл);

			Если Не ПустаяСтрока(ИмяФормыДополнительныхНастроек)
			  И ПараметрыФормыДополнительныхНастроек <> Неопределено Тогда
				ЗаголовокДополнительнойФормы = ПараметрыФормыДополнительныхНастроек.ЗаголовокФормы;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Видимость = Истина;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек2.Видимость = Истина;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Заголовок = ?(ПустаяСтрока(ЗаголовокДополнительнойФормы),
					НСтр("ru = 'Ввести значения дополнительных настроек для загрузки данных'"), ЗаголовокДополнительнойФормы);
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек2.Заголовок =
					Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Заголовок;
			Иначе
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Видимость = Ложь;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек2.Видимость = Ложь;
			КонецЕсли;

			Элементы.ВыгрузитьЗагрузитьДанные.Заголовок = НСтр("ru = 'Загрузить данные из файла...'");

			Элементы.ГруппаСохранитьБланк.Видимость = Истина;
			Элементы.ИзменитьБланк.Видимость = (ЛистыШаблона = Неопределено);

			Если Не ПустаяСтрока(ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл) Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл;
			КонецЕсли;

		ИначеЕсли ВариантВыгрузкиЗагрузки = "ИнтеграционнымиМетодами" Тогда
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Где взять файл?'");

			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Видимость = Не ПустаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI);
			Элементы.ДекорацияПодсказкаЗаполненияВариантВыгрузкиЗагрузки.Заголовок =
				СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI);

			Элементы.ВыгрузитьЗагрузитьДанные.Заголовок = НСтр("ru = 'Загрузить данные методами API...'");
			Элементы.ГруппаСохранитьБланк.Видимость = Ложь;
			Элементы.ИзменитьБланк.Видимость = Ложь;

			Если Не ПустаяСтрока(ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI) Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI;
			КонецЕсли;

		КонецЕсли;

	Иначе // Это выгрузка

		Если ВариантВыгрузкиЗагрузки = "ВнешнийФайл" Тогда
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Что делать с выгруженным файлом?'");
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Видимость = Не ПустаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл);
			Элементы.ДекорацияПодсказкаЗаполненияВариантВыгрузкиЗагрузки.Заголовок =
				СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезФайл);

			Если Не ПустаяСтрока(ИмяФормыДополнительныхНастроек)
			  И ПараметрыФормыДополнительныхНастроек <> Неопределено Тогда
				ЗаголовокДополнительнойФормы = ПараметрыФормыДополнительныхНастроек.ЗаголовокФормы;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Видимость = Истина;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек2.Видимость = Истина;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Заголовок = ?(ПустаяСтрока(ЗаголовокДополнительнойФормы),
					НСтр("ru = 'Ввести значения дополнительных настроек для выгрузки данных'"), ЗаголовокДополнительнойФормы);
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек2.Заголовок =
					Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Заголовок;
			Иначе
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек1.Видимость = Ложь;
				Элементы.ОткрытьФормуЗаполненияЗначенийДополнительныхНастроек2.Видимость = Ложь;
			КонецЕсли;

			Элементы.ВыгрузитьЗагрузитьДанные.Заголовок = НСтр("ru = 'Выгрузить данные в файл...'");

			Элементы.ГруппаСохранитьБланк.Видимость = Ложь;
			Элементы.ИзменитьБланк.Видимость = Истина;

			Если Не ПустаяСтрока(ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл) Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + ПояснениеВариантаВыгрузкиЗагрузкиЧерезФайл;
			КонецЕсли;

		ИначеЕсли ВариантВыгрузкиЗагрузки = "ИнтеграционнымиМетодами" Тогда
			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Заголовок = НСтр("ru = 'Что делать с выгруженным файлом?'");

			Элементы.ГруппаПодсказкаВариантВыгрузкиЗагрузки.Видимость = Не ПустаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI);
			Элементы.ДекорацияПодсказкаЗаполненияВариантВыгрузкиЗагрузки.Заголовок =
				СтроковыеФункции.ФорматированнаяСтрока(ПодсказкаВариантаВыгрузкиЗагрузкиЧерезAPI);

			Элементы.ВыгрузитьЗагрузитьДанные.Заголовок = НСтр("ru = 'Отправить данные методами API...'");
			Элементы.ГруппаСохранитьБланк.Видимость = Ложь;
			Элементы.ИзменитьБланк.Видимость = Ложь;

			Если Не ПустаяСтрока(ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI) Тогда
				ТекстПодсказки = ТекстПодсказки + Символы.ПС + ПояснениеВариантаВыгрузкиЗагрузкиЧерезAPI;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Элементы.Период.Видимость = ЭтоЗагрузкаДанных И ВариантВыгрузкиЗагрузки = "ИнтеграционнымиМетодами" И НЕ ПустаяСтрока(ПериодВид);

	Элементы.НадписьПодсказкаДляЗаполнения.Заголовок     = ТекстПодсказки;
	Элементы.ПояснениеВариантаВыгрузкиЗагрузки.Заголовок = ТекстПодсказки;

КонецПроцедуры

// Устанавливает параметры выбора и отбора.
//
// Параметры:
//   ПараметрыВыбора - Массив из Структура - набор настроек типа структура с ключами:
//     * Имя           - Строка - имя реквизита настраиваемого объекта,
//     * ПутьКДанным   - Строка, Массив из Строка - путь к значению настройки.
//
// Пример:
//   Пример установки связи параметров выбора с одним значением:
//     ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным", "Договор", "ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки"));
//
//   Пример установки связи параметров выбора с несколькими значениями:
//     ЗначенияПараметраВыбора = Новый Массив;
//     ЗначенияПараметраВыбора.Добавить("ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыТорговойПлощадки");
//     ЗначенияПараметраВыбора.Добавить("ДанныеТорговойПлощадки.ДоговорПродажиЧерезСкладыСобственные");
//     ПараметрыВыбора.Добавить(Новый Структура("Имя, ПутьКДанным", "Договор", ЗначенияПараметраВыбора)).
//
&НаСервере
Процедура УстановитьДляСсылкиНаОбъектПараметрыВыбора(ПараметрыВыбора)

	Если ТипЗнч(Параметры.СсылкаНаОбъектПараметрыВыбора) <> Тип("Массив")
	  Или Параметры.СсылкаНаОбъектПараметрыВыбора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	СсылкаНаОбъектФиксированныеНастройки = Новый НастройкиКомпоновкиДанных;
	ЕстьНесколькоЗначенийДляНастройки = Ложь;

	МассивПараметров = Новый Массив;
	МассивРеквизитов = Новый Массив;
	ЗначенияРеквизитов = Новый Соответствие;

	Для Каждого ПараметрВыбора Из ПараметрыВыбора Цикл
		Если ТипЗнч(ПараметрВыбора.ПутьКДанным) = Тип("Строка") Тогда
			ЧастиПути = СтрРазделить(ПараметрВыбора.ПутьКДанным, ".");
			Если ЧастиПути.Количество() = 1 Тогда
				МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор." + ПараметрВыбора.Имя,
					ПараметрВыбора.ПутьКДанным));
			Иначе
				ИмяРеквизита = СтрСоединить(ЧастиПути);
				РеквизитОснование = ЭтотОбъект[ЧастиПути[0]];
				ЧастиПути.Удалить(0);
				ЗначениеРеквизита = РеквизитОснование[СтрСоединить(ЧастиПути, ".")];
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(ТипЗнч(ЗначениеРеквизита));

				ЗначенияРеквизитов.Вставить(ИмяРеквизита, ЗначениеРеквизита);
				МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов(МассивТипов)));
				МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор." + ПараметрВыбора.Имя, ИмяРеквизита));

				ЭлементОтбора =
					СсылкаНаОбъектФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.Использование  = Истина;
				ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрВыбора.Имя);
				ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение = ЗначениеРеквизита;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ПараметрВыбора.ПутьКДанным) = Тип("Массив")
		  И ПараметрВыбора.ПутьКДанным.Количество() > 0 Тогда
			ЕстьНесколькоЗначенийДляНастройки = Истина;

			СписокЗначений = Новый СписокЗначений;
			Для Каждого ВариантОтбора Из ПараметрВыбора.ПутьКДанным Цикл
				ЧастиПути = СтрРазделить(ВариантОтбора, ".");
				ИмяРеквизита = СтрСоединить(ЧастиПути);
				РеквизитОснование = ЭтотОбъект[ЧастиПути[0]];
				ЧастиПути.Удалить(0);
				ЗначениеРеквизита = РеквизитОснование[СтрСоединить(ЧастиПути, ".")];
				СписокЗначений.Добавить(ЗначениеРеквизита);
			КонецЦикла;

			ЭлементОтбора =
				СсылкаНаОбъектФиксированныеНастройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПараметрВыбора.Имя);
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = СписокЗначений;
		КонецЕсли;
	КонецЦикла;

	Если МассивРеквизитов.Количество() >0 Тогда
		ИзменитьРеквизиты(МассивРеквизитов);
		Для Каждого ДанныеРеквизита Из ЗначенияРеквизитов Цикл
			ЭтотОбъект[ДанныеРеквизита.Ключ] = ДанныеРеквизита.Значение;
		КонецЦикла;
	КонецЕсли;

	Если МассивПараметров.Количество() >0 Тогда
		Элементы.СсылкаНаОбъект.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
	КонецЕсли;

	Если Не ЕстьНесколькоЗначенийДляНастройки Тогда
		СсылкаНаОбъектФиксированныеНастройки = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НастроитьСписокЗагруженныхОбъектов()
	
	Если ПустаяСтрока(ИмяОбъектаМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетсяМетодНастройкиДинамическогоСписка = ИнтеграцияСМаркетплейсамиСервер.МетодКонфигурацииИспользуется(
		ИмяОбъектаМетаданных,
		"НастроитьДинамическийСписокОтображенияРезультатаЗагрузки");
	Если ИспользуетсяМетодНастройкиДинамическогоСписка Тогда
		МенеджерОбъекта = ИнтеграцияСМаркетплейсамиСервер.МенеджерОбъекта(ИмяОбъектаМетаданных);
		МенеджерОбъекта.НастроитьДинамическийСписокОтображенияРезультатаЗагрузки(
			Элементы.СписокЗагруженныхОбъектов,
			СписокЗагруженныхОбъектов,
			ИмяТабличнойЧасти);
	КонецЕсли;
	
	ЭлементДата = Элементы.Найти("СписокЗагруженныхОбъектовДата");
	Если ЭлементДата <> Неопределено Тогда
		СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(
			ЭтотОбъект,
			ЭлементДата.ПутьКДанным,
			Элементы.СписокЗагруженныхОбъектовДата.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницу(ИмяСтраницы)

	ИмяПредыдущейСтраницы = Элементы.СтраницыПомощника.ТекущаяСтраница.Имя;
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяСтраницы];

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными Тогда
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Заголовок         = НСтр("ru = 'Далее >'");
		Элементы.Далее.Видимость         = ЭтоЗагрузкаДанных;
		Элементы.Далее.Доступность       = Истина;

		Элементы.Назад.Видимость         = Ложь;

		СменитьСтраницуИсточникаДанных();
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных Тогда
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Заголовок         = НСтр("ru = 'Загрузить данные'");
		Элементы.Далее.Видимость         = Истина;
		Элементы.Далее.Доступность       = Истина;

		Элементы.Назад.Видимость         = Истина;
		Элементы.Назад.Доступность       = Истина;

		Если ИмяПредыдущейСтраницы <> "РезультатЗаписиВИБ" Тогда
			ФильтрПоОсновнымКолонкам = Истина;
			УстановитьФильтрОсновныхКолонок(ФильтрПоОсновнымКолонкам);
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.РезультатЗаписиВИБ Тогда
		Элементы.Далее.Видимость         = Ложь;

		Элементы.Назад.КнопкаПоУмолчанию = Истина;
		Элементы.Назад.Видимость         = Истина;
		Элементы.Назад.Доступность       = Истина;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ДлительныеОперации Тогда
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Далее.Заголовок         = НСтр("ru = 'Далее >'");
		Элементы.Далее.Видимость         = Истина;
		Элементы.Далее.Доступность       = Ложь;

		Элементы.Назад.Видимость         = Истина;
		Элементы.Назад.Доступность       = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СменитьСтраницуИсточникаДанных()

	Если ВариантВыгрузкиЗагрузки = "ЗаполнениеТаблицы" Тогда
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗаполнениеТаблицы;
		Элементы.ГруппаСсылкаНаОбъект.Видимость = (СсылкаНаОбъект <> Неопределено);
		Элементы.Период.Видимость = Ложь;
	ИначеЕсли ВариантВыгрузкиЗагрузки = "ВнешнийФайл" Тогда
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗагрузкаИзФайла;
		Элементы.ГруппаСсылкаНаОбъект.Видимость = (СсылкаНаОбъект <> Неопределено);
		Элементы.Период.Видимость = Ложь;
	Иначе // ИнтеграционнымиМетодами
		Элементы.СтраницыЗаполненияДанных.ТекущаяСтраница = Элементы.СтраницаВариантЗагрузкаИзФайла;
		Элементы.ГруппаСсылкаНаОбъект.Видимость = Ложь;
		Элементы.Период.Видимость = (ПериодВид <> ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПустаяСсылка"));
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьФильтрОсновныхКолонок(ОтображатьТолькоОсновные)
	
	ИнформацияПоВсемКолонкам = ИнформацияПоВсемКолонкам();
	Отбор = Новый Структура("ВидимостьПриСопоставлении", Истина);
	ОтображаемыеКолонки = ИнформацияПоВсемКолонкам.НайтиСтроки(Отбор);
	
	Для Каждого Колонка Из ОтображаемыеКолонки Цикл
		ЭлементФормы = Элементы.Найти("ТаблицаСопоставленияДанных_" + Колонка.ИмяКолонки);
		ГруппаЭлементаФормы = Элементы.Найти("ЗагружаемыеДанныеГруппа_" + Колонка.ИмяКолонки);
		Если ГруппаЭлементаФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если КолонкиОсновныеДляФильтра.НайтиПоЗначению(Колонка.ИмяКолонки) = Неопределено Тогда
			ГруппаЭлементаФормы.Видимость = Не ОтображатьТолькоОсновные И ЭлементФормы.Видимость;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуСсылкиНаОбъект(СсылкаНаОбъектПодсказка, Знач СсылкаНаОбъект, Знач ЭтоЗагрузкаДанных)

	Если ЭтоЗагрузкаДанных Тогда
		СсылкаНаОбъектПодсказка = ?(ЗначениеЗаполнено(СсылкаНаОбъект),
			НСтр("ru = '- Будет обновлен'"),
			НСтр("ru = '- Не выбран, будет создан'"));
	Иначе
		Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			СсылкаНаОбъектПодсказка = НСтр("ru = '- Будет выгружен'");
		Иначе
			СсылкаНаОбъектПодсказка = НСтр("ru = '- Нет данных для выгрузки'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоведениеЭлементовФормы()

	Если Не ПустаяСтрока(КомандаИзменитьПоведениеЭлементовФормы) Тогда
		ЗначенияПараметров =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыФормы, "ЗначенияПараметровСсылкиНаОбъект", Новый Структура);

		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ЗначенияПараметров);

		ВыполнитьВБезопасномРежиме(КомандаИзменитьПоведениеЭлементовФормы, ПараметрыМетода);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандыЗаполнения()

	Если ТипЗнч(ПодключаемыеКомандыЗаполнения) = Тип("Структура") Тогда
		Для Каждого КомандаЗаполнения Из ПодключаемыеКомандыЗаполнения Цикл
			Действие = ?(ПустаяСтрока(КомандаЗаполнения.Значение.Действие), "Подключаемый_ВыполнитьКоманду",
				КомандаЗаполнения.Значение.Действие);
			КомандаФормы = Команды.Добавить(КомандаЗаполнения.Ключ);
			КомандаФормы.Действие = Действие;
			КомандаФормы.Заголовок = КомандаЗаполнения.Значение.Представление;
			КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;

			Если ЗначениеЗаполнено(КомандаЗаполнения.Значение.Картинка) Тогда
				КомандаФормы.Картинка = КомандаЗаполнения.Значение.Картинка;
			КонецЕсли;

			НовыйЭлемент = Элементы.Добавить(КомандаЗаполнения.Ключ, Тип("КнопкаФормы"),
				Элементы.СопоставлениеДанныхГруппаЗаполнить);
			НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			НовыйЭлемент.ИмяКоманды = КомандаЗаполнения.Ключ;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеПриИзменении(Элемент, ТекущиеДанные)

	ИмяПоля = СтрЗаменить(Элемент.Имя, "ТаблицаСопоставленияДанных_", "");

	Обработчик = Неопределено;
	Если ТипЗнч(ПодключаемыеОбработчикиСобытий) = Тип("Структура") Тогда
		ИмяСобытия = ИмяПоля + "ПриИзменении";
		ПодключаемыеОбработчикиСобытий.Свойство(ИмяСобытия, Обработчик);
	КонецЕсли;

	Если Обработчик <> Неопределено Тогда
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ИмяПоля);
		ПараметрыМетода.Добавить(ТекущиеДанные.ПолучитьИдентификатор());
		ВыполнитьВБезопасномРежиме(Обработчик, ПараметрыМетода);
	КонецЕсли;

	ЗаполнитьРезультатСопоставленияСтроки(ТекущиеДанные,
		КолонкиОбязательныеПриПроверке,
		КолонкиДополнительныеПриПроверке);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ИмяПоля = СтрЗаменить(Элемент.Имя, "ТаблицаСопоставленияДанных_", "");

	Обработчик = Неопределено;
	Если ТипЗнч(ПодключаемыеОбработчикиСобытий) = Тип("Структура") Тогда
		ИмяСобытия = ИмяПоля + "ПараметрыНачалаВыбора";
		ПодключаемыеОбработчикиСобытий.Свойство(ИмяСобытия, Обработчик);
	КонецЕсли;

	Если Обработчик <> Неопределено Тогда
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ИмяПоля);

		Выражение = Обработчик + "(Параметры[0], Параметры[1])";
		ПараметрыОбработчика = ВыполнитьВБезопасномРежиме(Выражение, ПараметрыМетода, Истина);
	Иначе
		ПараметрыОбработчика = Неопределено;
	КонецЕсли;

	ИнтеграцияСМаркетплейсамиКлиент.ОбработатьСобытиеНачалоВыбора(
		ЭтотОбъект,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка,
		ПараметрыОбработчика);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРезультатСопоставленияСтроки(ТекущиеДанные, КолонкиОбязательныеПриПроверке,
		КолонкиДополнительныеПриПроверке)

	ИнтеграцияСМаркетплейсамиКлиентСервер.ЗаполнитьРезультатСопоставленияСтроки(
		ТекущиеДанные,
		КолонкиОбязательныеПриПроверке,
		КолонкиДополнительныеПриПроверке);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещение(ИмяМетода, ПараметрыОповещения)

	Обработчик = Неопределено;
	Если ТипЗнч(ПодключаемыеОбработчикиСобытий) = Тип("Структура") Тогда
		ПодключаемыеОбработчикиСобытий.Свойство(ИмяМетода, Обработчик);
	КонецЕсли;

	Если Обработчик <> Неопределено Тогда
		ПараметрыМетода = Новый Массив;
		ПараметрыМетода.Добавить(ПараметрыОповещения);
		ВыполнитьВБезопасномРежиме(Обработчик, ПараметрыМетода);
	КонецЕсли;

	Если ТипЗнч(ПараметрыОповещения) = Тип("Структура") Тогда
		ОбновитьСтатистикуСопоставления =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОповещения, "ОбновитьСтатистикуСопоставления", Ложь);
		Если ОбновитьСтатистикуСопоставления Тогда
			ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();
		КонецЕсли;

		ТекстСообщения =
			ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОповещения, "ТекстСообщения", "");
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьВБезопасномРежиме(Знач Обработчик, Знач ПараметрыМетода, ВычислитьВыражение = Ложь)

	// Первый параметр всегда Форма.
	ПараметрыМетода.Вставить(0, ЭтотОбъект);

	Результат = Неопределено;

	Если ВычислитьВыражение Тогда
		Результат = ОбщегоНазначения.ВычислитьВБезопасномРежиме(Обработчик, ПараметрыМетода);
	Иначе
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(Обработчик, ПараметрыМетода);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьПроверкуИнформацииПоКолонкам(ТаблицаИнформацияПоКолонкам, ИмяОбъектаМетаданных, ИмяТабличнойЧасти)

	ПроверкаПройдена = Истина;

	ИспользуетсяМетодПроверкиИнформацииПоКолонкам = ИнтеграцияСМаркетплейсамиСервер.МетодКонфигурацииИспользуется(
		ИмяОбъектаМетаданных,
		"ВыполнитьПроверкуИнформацииПоКолонкам");
	Если ИспользуетсяМетодПроверкиИнформацииПоКолонкам Тогда
		МенеджерОбъекта = ИнтеграцияСМаркетплейсамиСервер.МенеджерОбъекта(ИмяОбъектаМетаданных);
		ПроверкаПройдена =
			МенеджерОбъекта.ВыполнитьПроверкуИнформацииПоКолонкам(ТаблицаИнформацияПоКолонкам, ИмяТабличнойЧасти);
	КонецЕсли;

	Возврат ПроверкаПройдена;

КонецФункции

&НаКлиенте
Процедура ПереходКСледующемуШагуЗагрузкиДанных()

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Если ВариантВыгрузкиЗагрузки = "ИнтеграционнымиМетодами" Тогда
			ЗагрузитьДанныеИнтеграционнымиМетодами();
		Иначе
			СменитьСтраницу("ДлительныеОперации");
			ФоновоеЗаданиеПроцент = 0;
			
			Если ЭтоЗагрузкаДанных Тогда
				ИзмененоСодержимоеТабличногоДокумента = Истина;
				СопоставитьЗагружаемыеДанные();
			Иначе
				СохранитьШаблонСДаннымиВФайл();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		
		ВариантыРезультатовСопоставления = ИнтеграцияСМаркетплейсамиКлиентСервер.ВариантыРезультатовСопоставления();
		Отбор = Новый Структура("РезультатСопоставленияСтроки", ВариантыРезультатовСопоставления.СтрокаНеСопоставлена);
		Строки = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
			ПоказатьВопросЗаписиДанныхСОшибкамиЗаполнения();
			Возврат;
		КонецЕсли;
		
		ПослеВопросаОПродолженииЗагрузки(КодВозвратаДиалога.Да);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПереходКПредыдущемуШагуЗагрузкиДанных()

	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СопоставлениеЗагружаемыхДанных Тогда
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.РезультатЗаписиВИБ Тогда
		СменитьСтраницу("СопоставлениеЗагружаемыхДанных");
		ФильтрТаблицаСопоставления = "Все";
		УстановитьФильтрациюТаблицыСопоставления();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Знач РезультатВопроса, Знач ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодтверждениеЗакрытияФормы = Истина;
		Закрыть();
	Иначе
		ПодтверждениеЗакрытияФормы = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеЗначенийДополнительныхНастроекЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Не ДополнительныеПараметрыФормы.Свойство("ЗначенияПараметровСсылкиНаОбъект") Тогда
			ДополнительныеПараметрыФормы.Вставить("ЗначенияПараметровСсылкиНаОбъект", Результат);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ДополнительныеПараметрыФормы.ЗначенияПараметровСсылкиНаОбъект, Результат, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПериодНачало = ВыбранноеЗначение.НачалоПериода;
	ПериодКонец  = ВыбранноеЗначение.КонецПериода;

	Период = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПериодНачало, ПериодКонец, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФильтрациюТаблицыСопоставления()

	Если ФильтрТаблицаСопоставления = "Сопоставленные" Тогда
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаОбработана", Истина);
	ИначеЕсли ФильтрТаблицаСопоставления = "Несопоставленные" Тогда
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаОбработана", Ложь);
	ИначеЕсли ФильтрТаблицаСопоставления = "ПодобраноАвтоматически" Тогда
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Новый ФиксированнаяСтруктура("Служебный", "ПодобраноАвтоматически");
	Иначе
		Элементы.ТаблицаСопоставленияДанных.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла()
	
	Статистика = СтатисткаСопоставления();
	
	ТекстВсе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Все (%1)'"), Статистика.Всего);
	
	СписокВыбора = Элементы.ФильтрТаблицаСопоставления.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить("Все", ТекстВсе, Истина);
	СписокВыбора.Добавить("Несопоставленные",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Несопоставленные (%1 из %2)'"),
			Статистика.НеСопоставленных, Статистика.Всего));
	СписокВыбора.Добавить("Сопоставленные",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Сопоставленные (%1 из %2)'"),
			Статистика.Сопоставленных, Статистика.Всего));
			
	Если Статистика.ПодобраноАвтоматически > 0 Тогда
		СписокВыбора.Добавить("ПодобраноАвтоматически", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Найденные автоматически (%1 из %2)'"),
			Статистика.ПодобраноАвтоматически, 
			Статистика.Всего));
	КонецЕсли;
	
	Если УстановитьФильтрацию = Истина Тогда
		Если Статистика.НеСопоставленных > 0 Тогда
			ФильтрТаблицаСопоставления = "Несопоставленные";
		ИначеЕсли Статистика.ПодобраноАвтоматически > 0 Тогда
			ФильтрТаблицаСопоставления = "ПодобраноАвтоматически";
		Иначе
			ФильтрТаблицаСопоставления = "Все";
		КонецЕсли;
		
		УстановитьФильтрациюТаблицыСопоставления();
		УстановитьФильтрацию = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтатисткаСопоставления()
	
	Отбор                      = Новый Структура("ОписаниеОшибки", "");
	Результат                  = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
	КоличествоСопоставленных   = Результат.Количество();
	КоличествоНеСопоставленных = ТаблицаСопоставленияДанных.Количество() - КоличествоСопоставленных;
	
	Отбор                      = Новый Структура("Служебный", "ПодобраноАвтоматически");
	ПодобраноАвтоматически     = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор).Количество();
	
	Результат = Новый Структура;
	Результат.Вставить("Всего",                  ТаблицаСопоставленияДанных.Количество());
	Результат.Вставить("Сопоставленных",         КоличествоСопоставленных);
	Результат.Вставить("Несопоставленных",       КоличествоНеСопоставленных);
	Результат.Вставить("НеНайдено",              КоличествоНеСопоставленных);
	Результат.Вставить("ПодобраноАвтоматически", ПодобраноАвтоматически);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьШаблонВФайлЗавершение(Подключено, ДополнительныеПараметры) Экспорт

	ИмяФайла = СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаМетаданных + ".ТабличныеЧасти." + ИмяТабличнойЧасти,
		СсылкаНаОбъект, Не ЭтоЗагрузкаДанных);

	Если Подключено Тогда
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр             = НСтр("ru = 'Книга Excel 97 (*.xls)|*.xls|Книга Excel 2007 (*.xlsx)|*.xlsx|Электронная таблица OpenDocument (*.ods)|*.ods'");
		ДиалогВыбораФайла.Фильтр             = ДиалогВыбораФайла.Фильтр + ?(ЛистыШаблона = Неопределено, НСтр("ru = '|Табличный документ (*.mxl)|*.mxl'"), "");
		ДиалогВыбораФайла.Расширение         = "xls";
		ДиалогВыбораФайла.МножественныйВыбор = Ложь;
		ДиалогВыбораФайла.ИндексФильтра      = 0;
		ДиалогВыбораФайла.ПолноеИмяФайла     = ИмяФайла;

		Оповещение = Новый ОписаниеОповещения("ПослеВыбораФайлаДляСохранения", ЭтотОбъект);
		ФайловаяСистемаКлиент.ПоказатьДиалогВыбора(Оповещение, ДиалогВыбораФайла);
		
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораРасширенияФайла", ЭтотОбъект, ИмяФайла);
		ОткрытьФорму("Обработка.ЗагрузкаДанныхИзФайла.Форма.РасширениеФайла",
			,
			ЭтотОбъект,
			Истина,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()

	Заголовок = ?(ПустаяСтрока(Параметры.ЗаголовокФормы),
		НСтр("ru = 'Загрузка данных в справочник'"),
		Параметры.ЗаголовокФормы);

	Если ОбщегоНазначения.ЭтоВебКлиент() Тогда
		Элементы.СтраницаВариантЗаполнениеТаблицы.Видимость = Ложь;
		Элементы.ВариантВыгрузкиЗагрузки.Видимость          = Ложь;
		ВариантВыгрузкиЗагрузки = "ВнешнийФайл";
	КонецЕсли;

КонецПроцедуры

#Область ШагЗаполнениеТаблицыДанными

&НаКлиенте
Процедура ВыполнитьШагЗаполнениеТаблицыДаннымиНаКлиенте()

	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.ЗаполнениеТаблицыДанными;
	Элементы.Назад.Видимость = Истина;

КонецПроцедуры

&НаКлиенте
Функция ТаблицаСДаннымиПустая()

	Если ЛистыШаблона <> Неопределено Тогда     
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			Если КлючИЗначение.Значение.ВысотаЗаголовкаТаблицыМакетаСШаблоном > 0
					И КлючИЗначение.Значение.ШаблонСДанными.ВысотаТаблицы > КлючИЗначение.Значение.ВысотаЗаголовкаТаблицыМакетаСШаблоном Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Если ИзмененоСодержимоеТабличногоДокумента
				И (ВысотаЗаголовкаТаблицыМакетаСШаблоном = 0
					Или ШаблонСДанными.ВысотаТаблицы <= ВысотаЗаголовкаТаблицыМакетаСШаблоном) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

&НаСервере
Процедура ИнициализироватьИнформациюПоКолонкамИМакетЗагрузки()

	КлючНастроекМакета = ?(ЭтоЗагрузкаДанных, "ЗагрузкаДанныхИзФайла", "ВыгрузкаДанныхИзФайла") + ИмяМакетаСШаблоном;
	ИнформацияПоКолонкамТаблица = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ИмяОбъектаМетаданных, КлючНастроекМакета,,, ИмяПользователя());

	Если ИнформацияПоКолонкамТаблица <> Неопределено Тогда
		Попытка
			ЗначениеВРеквизитФормы(ИнформацияПоКолонкамТаблица, "ИнформацияПоКолонкам");

			ПроверкаПройдена = ВыполнитьПроверкуИнформацииПоКолонкам(ИнформацияПоКолонкамТаблица,
				ИмяОбъектаМетаданных, ИмяТабличнойЧасти);
			Если Не ПроверкаПройдена Тогда
				ИнформацияПоКолонкамТаблица = Неопределено;
			КонецЕсли;
		Исключение
			ИнформацияПоКолонкамТаблица = Неопределено;
		КонецПопытки;
	КонецЕсли;

	Если ИнформацияПоКолонкамТаблица = Неопределено Тогда
		ИнформацияПоКолонкамТаблица = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	КонецЕсли;

	ПараметрыЗагрузкиВТабличнуюЧасть = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяОбъектаМетаданных    = ИмяОбъектаМетаданных;
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяТабличнойЧасти       = ИмяТабличнойЧасти;
	ПараметрыЗагрузкиВТабличнуюЧасть.ИмяМакетаСШаблоном      = ИмяМакетаСШаблоном;
	ПараметрыЗагрузкиВТабличнуюЧасть.ДополнительныеПараметры = ДополнительныеПараметрыФормы;

	ПараметрыШапки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыШапки();
	ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(
		ПараметрыЗагрузкиВТабличнуюЧасть,
		ИнформацияПоКолонкамТаблица,
		ПараметрыШапки);

	ПараметрыЗагрузкиВТабличнуюЧасть.Свойство("ВысотаЗаголовкаТаблицыМакетаСШаблоном",    ВысотаЗаголовкаТаблицыМакетаСШаблоном);
	ПараметрыЗагрузкиВТабличнуюЧасть.Свойство("ВысотаЗаголовкаТаблицыЗагружаемогоМакета", ВысотаЗаголовкаТаблицыЗагружаемогоМакета);
	ПараметрыЗагрузкиВТабличнуюЧасть.Свойство("КомандаИзменитьПоведениеЭлементовФормы",   КомандаИзменитьПоведениеЭлементовФормы);
	ПараметрыЗагрузкиВТабличнуюЧасть.Свойство("ПодключаемыеОбработчикиСобытий",           ПодключаемыеОбработчикиСобытий);
	ПараметрыЗагрузкиВТабличнуюЧасть.Свойство("ПодключаемыеКомандыЗаполнения",            ПодключаемыеКомандыЗаполнения);

	КолонкиОсновныеДляФильтра.ЗагрузитьЗначения(ПараметрыЗагрузкиВТабличнуюЧасть.ОсновныеКолонки);

	ЗначениеВРеквизитФормы(ИнформацияПоКолонкамТаблица, "ИнформацияПоКолонкам");

	Если ЭтоЗагрузкаДанных Тогда
		ИзменитьБланкПоИнформацииПоКолонкам();
		ДобавитьКомандыЗаполнения();
	Иначе
		НастроитьОтображениеЭлементовСтраницы();
	КонецЕсли;
	
	Если ЛистыШаблона <> Неопределено Тогда
		ЛистыШаблона[ТекущийЛист].ПараметрыШапки                           = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыШапки);
		ЛистыШаблона[ТекущийЛист].ИнформацияПоКолонкам                     = ОбщегоНазначения.ТаблицаЗначенийВМассив(ИнформацияПоКолонкамТаблица);
		ЛистыШаблона[ТекущийЛист].ВысотаЗаголовкаТаблицыМакетаСШаблоном    = ВысотаЗаголовкаТаблицыМакетаСШаблоном;
		ЛистыШаблона[ТекущийЛист].ВысотаЗаголовкаТаблицыЗагружаемогоМакета = ВысотаЗаголовкаТаблицыЗагружаемогоМакета;
		ЛистыШаблона[ТекущийЛист].ШаблонСДанными                           = СкопироватьТабличныйДокумент(ШаблонСДанными);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьЛистШаблона(ТекущаяСтраницаИмя)
	
	ЛистыШаблона[ТекущийЛист].ШаблонСДанными = СкопироватьТабличныйДокумент(ШаблонСДанными);
	
	ТекущийЛист        = ТекущаяСтраницаИмя;
	ИмяМакетаСШаблоном = ЛистыШаблона[ТекущийЛист].ИмяМакетаСШаблоном;
	ШаблонСДанными     = СкопироватьТабличныйДокумент(ЛистыШаблона[ТекущийЛист].ШаблонСДанными);
	
	ИнформацияПоКолонкам.Очистить();
	Для Каждого ЭлементКоллекции Из ЛистыШаблона[ТекущийЛист].ИнформацияПоКолонкам Цикл
		ЗаполнитьЗначенияСвойств(ИнформацияПоКолонкам.Добавить(), ЭлементКоллекции);
	КонецЦикла;
	
	Если ЭтоЗагрузкаДанных Тогда
		ДобавитьКомандыЗаполнения();
	Иначе
		НастроитьОтображениеЭлементовСтраницы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКолонкиДляПроверки()

	КолонкиОбязательныеПриПроверке.Очистить();
	
	ИнформацияПоВсемКолонкам = ИнформацияПоВсемКолонкам();
	Отбор = Новый Структура("ОбязательнаДляЗаполнения", Истина);
	ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы = ИнформацияПоВсемКолонкам.НайтиСтроки(Отбор);
	
	Для Каждого КолонкаТаблицы Из ОтобранныеКолонкиОбязательнаДляЗаполненияТаблицы Цикл
		КолонкиОбязательныеПриПроверке.Добавить(КолонкаТаблицы.ИмяКолонки);
	КонецЦикла;

	КолонкиДополнительныеПриПроверке.Очистить();
	// Могут заполняться в подключаемых обработчиках события изменения значения поля загружаемой таблицы.

КонецПроцедуры

#КонецОбласти

#Область РедактированиеМакетовКонфигурации

&НаКлиенте
Процедура ОткрытьФормуИзмененияБланка()

	Перем Оповещение, ПараметрыФормы;

	Если ЭтоЗагрузкаДанных Тогда

		ПеремАдресХранилища = НовыйАдресХранилища(УникальныйИдентификатор);
		ПараметрыЗагрузки = Новый Структура;
		ПараметрыЗагрузки.Вставить("ИмяОбъектаМетаданных", ИмяОбъектаМетаданных);
		ПараметрыЗагрузки.Вставить("ИмяТабличнойЧасти",    ИмяТабличнойЧасти);
		ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном",   ИмяМакетаСШаблоном);
		ПараметрыЗагрузки.Вставить("АдресХранилища",       ПеремАдресХранилища);

		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИнформацияПоКолонкам", ИнформацияПоКолонкам);
		ПараметрыФормы.Вставить("ПараметрыЗагрузки",    ПараметрыЗагрузки);

		Оповещение = Новый ОписаниеОповещения("ПослеВызоваФормыИзменитьБланк", ЭтотОбъект);
		ОткрытьФорму("Справочник.УчетныеЗаписиМаркетплейсов.Форма.ВыгрузкаЗагрузкаДанныхРедактированиеБланка",
			ПараметрыФормы,
			ЭтотОбъект,
			,
			,
			,
			Оповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

	Иначе

		// Открытие формы аналогично
		// см. РегистрыСведений.ПользовательскиеМакетыПечати.Формы.МакетыПечатныхФорм.ОткрытьМакетПечатнойФормыДляРедактирования()
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ИмяОбъектаМетаданныхМакета", ИнформацияПоМакетуДляРедактирования.ИмяОбъектаМетаданныхМакета);
		ПараметрыОткрытия.Вставить("ТипМакета",                  ИнформацияПоМакетуДляРедактирования.ТипМакета);
		ПараметрыОткрытия.Вставить("Ссылка",                     ИнформацияПоМакетуДляРедактирования.Ссылка);
		ПараметрыОткрытия.Вставить("ИсточникДанных",             ИнформацияПоМакетуДляРедактирования.Владелец);
		ПараметрыОткрытия.Вставить("ИсточникиДанных",            ИнформацияПоМакетуДляРедактирования.ИсточникиДанных);
		ПараметрыОткрытия.Вставить("ЭтоПечатнаяФорма",           ИнформацияПоМакетуДляРедактирования.ЭтоПечатнаяФорма);
		ПараметрыОткрытия.Вставить("ДоступноНазначение",         Не ИнформацияПоМакетуДляРедактирования.Поставляемый);
		ПараметрыОткрытия.Вставить("Редактирование",             ЕстьПравоИзмененияМакета);
		ПараметрыОткрытия.Вставить("ТолькоОткрытие",             Не ЕстьПравоИзмененияМакета);

		Если ИнформацияПоМакетуДляРедактирования.ТипМакета = "MXL" Тогда
			ПараметрыОткрытия.Вставить("ИмяДокумента", ИнформацияПоМакетуДляРедактирования.Представление);
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента",
				ПараметрыОткрытия,
				ЭтотОбъект);
		ИначеЕсли ИнформацияПоМакетуДляРедактирования.ТипМакета = "DOCX" Тогда
			Если ВерсияМакета(ИнформацияПоМакетуДляРедактирования.Идентификатор, ИнформацияПоМакетуДляРедактирования.ТипМакета) = "Области" Тогда
				ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета",
					ПараметрыОткрытия,
					ЭтотОбъект);
			Иначе
				ПараметрыОткрытия.Вставить("ИмяДокумента", ИнформацияПоМакетуДляРедактирования.Представление);
				ОткрытьФорму("ОбщаяФорма.РедактированиеДокументаOfficeOpen",
					ПараметрыОткрытия,
					ЭтотОбъект);
			КонецЕсли;
		Иначе
			ОткрытьФорму("РегистрСведений.ПользовательскиеМакетыПечати.Форма.РедактированиеМакета",
				ПараметрыОткрытия,
				ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПолучитьВыгружаемыеМакеты()

	Если ЭтоЗагрузкаДанных Или Не ЗначениеЗаполнено(ИмяОбъектаМетаданных) Тогда
		Возврат;
	КонецЕсли;

	ЕстьПравоИзмененияМакета = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ПользовательскиеМакетыПечати);

	МакетыОбъекта = РегистрыСведений.ПользовательскиеМакетыПечати.МакетыОбъекта(ИмяОбъектаМетаданных);
	СтрокаМакета = МакетыОбъекта.Найти(ИмяОбъектаМетаданных + "." + ИмяМакетаСШаблоном, "Идентификатор");
	Если СтрокаМакета <> Неопределено Тогда
		ИнформацияПоМакетуДляРедактирования = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаМакета);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВерсияМакета(Знач Идентификатор, Знач ТипМакета)

	Макет = УправлениеПечатью.МакетПечатнойФормы(Идентификатор);
	ДанныеМакета = УправлениеПечатью.ИнициализироватьМакетОфисногоДокумента(Макет, ТипМакета);

	Если ДанныеМакета.СтруктураДокумента.ОбластиДокумента.Количество() > 1 
		ИЛИ ДанныеМакета.СтруктураДокумента.ОбластиДокумента["Абзац"] = Неопределено Тогда
		ВерсияМакета = "Области";
	Иначе
		ВерсияМакета = "Параметры";
	КонецЕсли;

	ДанныеМакета.Вставить("ВерсияМакета", ВерсияМакета);

	Возврат ДанныеМакета.ВерсияМакета;

КонецФункции

&НаКлиенте
Процедура ПослеВызоваФормыИзменитьБланк(Результат, Параметр) Экспорт

	Если Результат <> Неопределено Тогда
		ОбновитьНаименованиеИВидимостьКолонокТаблицыСопоставленияИБланк(
			Результат.ИнформацияПоКолонкам,
			Результат.АдресХранилища,
			Результат.ВнесеныИзменения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеИВидимостьКолонокТаблицыСопоставленияИБланк(Знач НоваяИнформацияПоКолонкам,
		Знач АдресХранилищаСЭталоннойИнформациейПоКолонкам = "", ВнесеныИзменения = Истина)

	Если Не ПустаяСтрока(АдресХранилищаСЭталоннойИнформациейПоКолонкам) Тогда
		ТаблицаИнформацииПоКолонкам = ПолучитьИзВременногоХранилища(АдресХранилищаСЭталоннойИнформациейПоКолонкам);
		УдалитьИзВременногоХранилища(АдресХранилищаСЭталоннойИнформациейПоКолонкам);

		Если ТаблицаИнформацииПоКолонкам <> Неопределено Тогда
			ЗначениеВРеквизитФормы(ТаблицаИнформацииПоКолонкам, "ИнформацияПоКолонкам");
			ТаблицаИнформацииПоКолонкам = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если НоваяИнформацияПоКолонкам.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из НоваяИнформацияПоКолонкам Цикл
			Отбор = Новый Структура("ИмяКолонки", СтрокаТаблицы.ИмяКолонки);
			СтрокиКолонки = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
			Если СтрокиКолонки.Количество() = 0 Тогда
				СтрокаКолонки = ИнформацияПоКолонкам.Добавить();
			Иначе
				СтрокаКолонки = СтрокиКолонки[0];
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаКолонки, СтрокаТаблицы);
		КонецЦикла;
		СохранятьНастройки = ВнесеныИзменения;
		
	Иначе
		ИнформацияПоКолонкам.Очистить();
		ИнициализироватьИнформациюПоКолонкамИМакетЗагрузки();
		СохранятьНастройки = Ложь;
	КонецЕсли;

	ИнформацияПоКолонкам.Сортировать("Позиция Возр");
	ОбновитьНаименованиеИВидимостьКолонокТаблицыСопоставления();
	Если ЛистыШаблона <> Неопределено Тогда
		ЛистыШаблона[ТекущийЛист].ИнформацияПоКолонкам = ОбщегоНазначения.ТаблицаЗначенийВМассив(РеквизитФормыВЗначение("ИнформацияПоКолонкам"));
	КонецЕсли;
	
	ИзменитьБланкПоИнформацииПоКолонкам(, СохранятьНастройки);
	Если ЛистыШаблона <> Неопределено Тогда
		ЛистыШаблона[ТекущийЛист].ШаблонСДанными = СкопироватьТабличныйДокумент(ШаблонСДанными);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеИВидимостьКолонокТаблицыСопоставления()
	
	ИнформацияПоВсемКолонкам = ИнформацияПоВсемКолонкам();
	
	Для Каждого СтрокаТаблицы Из ИнформацияПоВсемКолонкам Цикл
		Попытка
			Колонка = Элементы["ТаблицаСопоставленияДанных_ФЛ_"+ СтрокаТаблицы.ИмяКолонки]; // ПолеФормы
		Исключение
			Колонка = Неопределено;
		КонецПопытки;

		Если Колонка <> Неопределено Тогда
			Колонка.Видимость = СтрокаТаблицы.ВидимостьПриСопоставлении;
			
			Префикс = НСтр("ru = 'Из файла:'");
			Колонка.Заголовок = Префикс + " " + ?(НЕ ПустаяСтрока(СтрокаТаблицы.Синоним),
				СтрокаТаблицы.Синоним, СтрокаТаблицы.ПредставлениеКолонки);
		КонецЕсли;

		Попытка
			Колонка = Элементы["ТаблицаСопоставленияДанных_"+ СтрокаТаблицы.ИмяКолонки]; // ПолеФормы
		Исключение
			Колонка = Неопределено;
		КонецПопытки;

		Если Колонка <> Неопределено Тогда
			Колонка.Видимость = СтрокаТаблицы.ВидимостьПриСопоставлении;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ИзменитьБланкПоИнформацииПоКолонкам(Бланк = Неопределено, СохранитьНастройки = Ложь)

	Если Бланк = Неопределено Тогда
		Бланк = ШаблонСДанными;
	КонецЕсли;

	ТаблицаКолонок = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	Если СохранитьНастройки Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ИмяОбъектаМетаданных, КлючНастроекМакета,
			ТаблицаКолонок,, ИмяПользователя());
	КонецЕсли;

	Бланк.Очистить();
	Шапка = ИнтеграцияСМаркетплейсамиСервер.ШапкаБланкаДляЗаполненияПоИнформацииПоКолонкам(
		ТаблицаКолонок,
		ПараметрыШапки,
		ВысотаЗаголовкаТаблицыЗагружаемогоМакета);
	Бланк.Вывести(Шапка);

	НастроитьОтображениеЭлементовСтраницы();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СкопироватьТабличныйДокумент(ТабличныйДокумент)

	ПотокВПамяти = Новый ПотокВПамяти;
	ТабличныйДокумент.Записать(ПотокВПамяти);
	ПотокВПамяти.Перейти(0, ПозицияВПотоке.Начало);

	Результат = Новый ТабличныйДокумент;
	Результат.Прочитать(ПотокВПамяти, СпособЧтенияЗначенийТабличногоДокумента.Значение);

	Возврат Результат;

КонецФункции

&НаСервере
Функция ИнформацияПоВсемКолонкам()
	
	Если ЛистыШаблона = Неопределено Тогда
		Возврат ИнформацияПоКолонкам;
	КонецЕсли;
	
	Результат = ИнформацияПоКолонкам.Выгрузить();
	
	Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
		Для Каждого ЭлементКоллекции Из КлючИЗначение.Значение.ИнформацияПоКолонкам Цикл
			СтрокаТаблицыЗначений = Результат.Найти(ЭлементКоллекции.ИмяКолонки, "ИмяКолонки");
			
			Если СтрокаТаблицыЗначений = Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Результат.Добавить(), ЭлементКоллекции);
				
			ИначеЕсли ЭлементКоллекции.ПозицияВМакете > 0 И СтрокаТаблицыЗначений.ПозицияВМакете < 0 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ШагСопоставлениеЗагруженныхДанных

&НаСервере
Функция СопоставитьЗагружаемыеДанныеНаСервере()

	Если Не ТаблицаСопоставленияДанных_РеквизитыСозданы Тогда
		СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ();
	Иначе
		ТаблицаСопоставленияДанных.Очистить();
	КонецЕсли;

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Интеграция с маркетплейсами: Выполнение серверного метода сопоставления полученных из данных табличного документа'");

	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);

	ЗаполнитьКолонкиДляПроверки();

	ПеремАдресХранилища = НовыйАдресХранилища(УникальныйИдентификатор);
	ЗначенияПараметровСсылкиНаОбъект = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметрыФормы, "ЗначенияПараметровСсылкиНаОбъект", Новый Структура);

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяТабличнойЧасти",                ИмяТабличнойЧасти);
	ДополнительныеПараметры.Вставить("УчетнаяЗапись",                    УчетнаяЗапись);
	ДополнительныеПараметры.Вставить("КолонкиОбязательныеПриПроверке",   КолонкиОбязательныеПриПроверке);
	ДополнительныеПараметры.Вставить("КолонкиДополнительныеПриПроверке", КолонкиДополнительныеПриПроверке);
	ДополнительныеПараметры.Вставить("АдресХранилища",                   ПеремАдресХранилища);
	ДополнительныеПараметры.Вставить("ЗначенияПараметровСсылкиНаОбъект", ЗначенияПараметровСсылкиНаОбъект);

	// Обязательно присутствие метода СопоставитьЗагружаемыеДанные().
	ИспользуетсяМетодСопоставленияЗагружаемыхДанных = ИнтеграцияСМаркетплейсамиСервер.МетодКонфигурацииИспользуется(
		ИмяОбъектаМетаданных,
		"СопоставитьЗагружаемыеДанные");
	Если Не ИспользуетсяМетодСопоставленияЗагружаемыхДанных Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = 'Не определено использование процедуры %1'"), "СопоставитьЗагружаемыеДанные");
	КонецЕсли;

	ИмяМенеджераОбъекта = ИнтеграцияСМаркетплейсамиСервер.ИмяМенеджераОбъекта(ИмяОбъектаМетаданных);
	ИмяМетода = ИмяМенеджераОбъекта + ".СопоставитьЗагружаемыеДанные";

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполненияВФоне,
		ИмяМетода,
		РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"),
		ЗагруженныеДанные,
		ДополнительныеПараметры);

	Возврат ФоновоеЗадание;

КонецФункции

&НаСервере
Процедура СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ()

	МассивРеквизитов = Новый Массив;
	ТипСтрока = Новый ОписаниеТипов("Строка");

	ВременнаяТЗ = РеквизитФормыВЗначение("ТаблицаСопоставленияДанных");
	ВременнаяТЗ.Колонки.Очистить();

	ИнтеграцияСМаркетплейсамиСервер.ДобавитьСтандартныеКолонки(ВременнаяТЗ, Истина);
	ИнтеграцияСМаркетплейсамиСервер.ДобавитьСтандартныеКолонки(МассивРеквизитов, Истина,
		"ТаблицаСопоставленияДанных");

	ОбязательныеКолонки = Новый Массив;
	ПодсказкиРеквизитов = Новый Соответствие;
	КолонкиСодержащиеСвязиПараметровВыбора = Новый Соответствие;
	КолонкиСодержащиеПараметрыВыбора       = Новый Соответствие;

	ТабличнаяЧасть =
		ИнтеграцияСМаркетплейсамиСервер.ТабличнаяЧастьОбъектаМетаданных(ИмяОбъектаМетаданных, ИмяТабличнойЧасти);
	РеквизитыТЧ = ТабличнаяЧасть.Реквизиты;

	Для Каждого Колонка Из РеквизитыТЧ Цикл
		Если Колонка.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;

		Если Колонка.ПроверкаЗаполнения = ПроверкаЗаполнения.ВыдаватьОшибку Тогда
			ОбязательныеКолонки.Добавить(Колонка.Имя);
		КонецЕсли;

		Если Колонка.СвязиПараметровВыбора.Количество() > 0 Тогда
			КолонкиСодержащиеСвязиПараметровВыбора.Вставить(Колонка.Имя, Колонка.СвязиПараметровВыбора);
		КонецЕсли;

		Если Колонка.ПараметрыВыбора.Количество() > 0 Тогда
			КолонкиСодержащиеПараметрыВыбора.Вставить(Колонка.Имя, Колонка.ПараметрыВыбора);
		КонецЕсли;

		ТипРеквизита = ?(Колонка.Тип.СодержитТип(Тип("УникальныйИдентификатор")), ОбщегоНазначения.ОписаниеТипаСтрока(36),
			Колонка.Тип);

		ВременнаяТЗ.Колонки.Добавить(Колонка.Имя, ТипРеквизита, Колонка.Представление());
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, ТипРеквизита, "ТаблицаСопоставленияДанных",
			Колонка.Представление()));
			
		Если Не ПустаяСтрока(Колонка.Подсказка) Тогда
			ПодсказкиРеквизитов.Вставить(Колонка.Имя, Колонка.Подсказка);
		КонецЕсли;
	КонецЦикла;
	
	ИнформацияПоВсемКолонкам = ИнформацияПоВсемКолонкам();
	
	Для Каждого Колонка Из ИнформацияПоВсемКолонкам Цикл
		ТипКолонки = ?(Колонка.ТипКолонки = Неопределено, ТипСтрока, Колонка.ТипКолонки);
		ЗаголовокКолонки = ?(НЕ ПустаяСтрока(Колонка.Синоним), Колонка.Синоним, Колонка.ПредставлениеКолонки);

		РеквизитТЧ = РеквизитыТЧ.Найти(Колонка.ИмяКолонки);
		Если Колонка.ВидимостьПриСопоставлении И Не Колонка.ВидимостьВМакете Тогда
			Если РеквизитТЧ <> Неопределено Тогда
				// Колонка, видимая при сопоставлении.
				Колонка.Примечание = "";
				Продолжить;
			Иначе
				// Служебная невидимая колонка.
				ПрефиксКолонки = "";
			КонецЕсли;
		Иначе
			// Колонка с данными из файла.
			ПрефиксКолонки = "ФЛ_";
		КонецЕсли;

		ВременнаяТЗ.Колонки.Добавить(ПрефиксКолонки + Колонка.ИмяКолонки, ТипКолонки, ЗаголовокКолонки);
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ПрефиксКолонки + Колонка.ИмяКолонки, ТипКолонки,
			"ТаблицаСопоставленияДанных", ЗаголовокКолонки));
	КонецЦикла;

	ИзменитьРеквизиты(МассивРеквизитов);
	ТаблицаСопоставленияДанных_РеквизитыСозданы = Истина;

	ГруппаКолонокЗагружаемыеДанные = Элементы.Добавить("ЗагружаемыеДанные", Тип("ГруппаФормы"),
		Элементы.ТаблицаСопоставленияДанных);
	ГруппаКолонокЗагружаемыеДанные.Группировка = ГруппировкаКолонок.Горизонтальная;
	Картинка = БиблиотекаКартинок.Изменить;
	ТипБулево = Новый ОписаниеТипов("Булево");

	Для Каждого Колонка Из ВременнаяТЗ.Колонки Цикл
		ДанныеКолонки = Неопределено;
		Отбор = Новый Структура("ИмяКолонки", Колонка.Имя);
		Колонки = ИнформацияПоВсемКолонкам.НайтиСтроки(Отбор);
		Если Колонки.Количество() > 0 Тогда
			ДанныеКолонки = Колонки[0];
		КонецЕсли;

		РеквизитТЧ = РеквизитыТЧ.Найти(Колонка.Имя);
		Если РеквизитТЧ <> Неопределено Тогда
			Если ДанныеКолонки = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ЗагружаемыеДанныеГруппа_" + Колонка.Имя, Тип("ГруппаФормы"),
				ГруппаКолонокЗагружаемыеДанные);
			ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.Вертикальная;
			Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;
			
		ИначеЕсли Колонка.Имя = "НомерСтроки" 
					Или Колонка.Имя = "РезультатСопоставленияСтроки"
					Или Колонка.Имя = "ОписаниеОшибки" 
					Или Колонка.Имя = "СтрокаОбработана"
					Или Колонка.Имя = "Служебный" Тогда
			Родитель = ГруппаКолонокЗагружаемыеДанные;
		Иначе
			Продолжить;
		КонецЕсли;

		НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + Колонка.Имя, Тип("ПолеФормы"), Родитель);

		НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка.Имя;
		НовыйЭлемент.Заголовок = Колонка.Заголовок;

		Если Колонка.ТипЗначения = ТипБулево Тогда
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
		Иначе
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		КонецЕсли;

		Подсказка = ПодсказкиРеквизитов[Колонка.Имя];
		Если ЗначениеЗаполнено(Подсказка) Тогда
			НовыйЭлемент.Подсказка = Подсказка;
		КонецЕсли;

		Если РеквизитТЧ <> Неопределено Тогда
			Если ДанныеКолонки <> Неопределено Тогда
				НовыйЭлемент.Видимость = ДанныеКолонки.ВидимостьПриСопоставлении;
			Иначе
				НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;

		Если Колонка.Имя = "НомерСтроки" Тогда
			НовыйЭлемент.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
			НовыйЭлемент.ТолькоПросмотр = Истина;
			НовыйЭлемент.Ширина = 1;
		ИначеЕсли Колонка.Имя = "РезультатСопоставленияСтроки" 
					Или Колонка.Имя = "ОписаниеОшибки"
					Или Колонка.Имя = "СтрокаОбработана" 
					Или Колонка.Имя = "Служебный" Тогда
			НовыйЭлемент.Видимость = Ложь;
		КонецЕсли;

		Если ОбязательныеКолонки.Найти(Колонка.Имя) <> Неопределено Тогда
			НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		КонецЕсли;

		Если РеквизитТЧ <> Неопределено Тогда
			Если ДанныеКолонки <> Неопределено И Не ДанныеКолонки.ВидимостьВМакете Тогда
				НовыйЭлемент.КартинкаШапки = Картинка;
			КонецЕсли;

			КолонкаСвязьПараметровВыбора = КолонкиСодержащиеСвязиПараметровВыбора.Получить(Колонка.Имя);
			Если КолонкаСвязьПараметровВыбора <> Неопределено Тогда
				НовыйМассив = Новый Массив();
				Для Каждого СвязьПараметраВыбора Из КолонкаСвязьПараметровВыбора Цикл // СвязьПараметраВыбора
					Позиция = СтрНайти(СвязьПараметраВыбора.ПутьКДанным, ".", НаправлениеПоиска.СКонца);
					Если Позиция > 0 Тогда
						ИмяЭлемента = Сред(СвязьПараметраВыбора.ПутьКДанным, Позиция + 1);
						НоваяСвязь = Новый СвязьПараметраВыбора(СвязьПараметраВыбора.Имя,
							"Элементы.ТаблицаСопоставленияДанных.ТекущиеДанные." + ИмяЭлемента,
							СвязьПараметраВыбора.ИзменениеЗначения);
						НовыйМассив.Добавить(НоваяСвязь);
					КонецЕсли;
				КонецЦикла;
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
			КонецЕсли;

			КолонкаПараметрыВыбора = КолонкиСодержащиеПараметрыВыбора.Получить(Колонка.Имя);
			Если КолонкаПараметрыВыбора <> Неопределено Тогда
				НовыйЭлемент.ПараметрыВыбора = КолонкаПараметрыВыбора;
			КонецЕсли;

			// Подключение обработчика изменения значения поля
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаСопоставленияДанныхПолеПриИзменении");
			// Подключение обработчика начала выбора значения поля
			Если НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода Тогда
				НовыйЭлемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ТаблицаСопоставленияДанныхПолеНачалоВыбора");
			КонецЕсли;

			Отбор = Новый Структура("Родитель", Колонка.Имя);
			КолонкиГруппировки = ИнформацияПоВсемКолонкам.НайтиСтроки(Отбор);

			Префикс = НСтр("ru = 'Из файла:'");
			Если КолонкиГруппировки.Количество() = 1 Тогда
				КолонкаГруппа = КолонкиГруппировки[0];
				КолонкаУровень2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкаГруппа.ИмяКолонки);
				Если КолонкаУровень2 <> Неопределено Тогда 
					НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + КолонкаУровень2.Имя, Тип("ПолеФормы"), Родитель);
					НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
					НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + КолонкаУровень2.Имя;
					Если КолонкаГруппа.ВидимостьВМакете Тогда
						НовыйЭлемент.Заголовок = Префикс + " " + КолонкаУровень2.Заголовок;
					Иначе
						НовыйЭлемент.Заголовок = " ";
					КонецЕсли;
					НовыйЭлемент.Видимость = КолонкаГруппа.ВидимостьВМакете;
					НовыйЭлемент.ТолькоПросмотр = Истина;
					НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
				КонецЕсли;

			ИначеЕсли КолонкиГруппировки.Количество() > 1 Тогда
				ГруппаКолонокЗагружаемыеДанныеТЧ = Элементы.Добавить("ТаблицаСопоставленияДанныхГруппа_ФЛ_" + Колонка.Имя,
					Тип("ГруппаФормы"), Родитель);
				ГруппаКолонокЗагружаемыеДанныеТЧ.Группировка = ГруппировкаКолонок.ВЯчейке;
				Родитель = ГруппаКолонокЗагружаемыеДанныеТЧ;

				Для Каждого КолонкаГруппа Из КолонкиГруппировки Цикл
					Колонка2 = ВременнаяТЗ.Колонки.Найти("ФЛ_" + КолонкаГруппа.ИмяКолонки);
					Если Колонка2 <> Неопределено Тогда
						НовыйЭлемент = Элементы.Добавить("ТаблицаСопоставленияДанных_" + Колонка2.Имя, Тип("ПолеФормы"), Родитель);
						НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
						НовыйЭлемент.ПутьКДанным = "ТаблицаСопоставленияДанных." + Колонка2.Имя;
						Если КолонкаГруппа.ВидимостьВМакете Тогда
							НовыйЭлемент.Заголовок = Префикс + " " + Колонка2.Заголовок;
						Иначе
							НовыйЭлемент.Заголовок = " ";
						КонецЕсли;
						НовыйЭлемент.ТолькоПросмотр = Истина;
						НовыйЭлемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;

						Если СтрДлина(Колонка.Имя) > 3 И СтрНачинаетсяС(Колонка.Имя, "ФЛ_") Тогда
							Отбор = Новый Структура("ИмяКолонки", Сред(Колонка.Имя, 4));
							Колонки = ИнформацияПоВсемКолонкам.НайтиСтроки(Отбор);
							Если Колонки.Количество() > 0 Тогда
								НовыйЭлемент.Видимость = Колонки[0].ВидимостьВМакете;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				НовыйЭлемент.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ВременнаяТЗ, "ТаблицаСопоставленияДанных");

КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеОбОшибке(ТекстОшибкиДляПользователя, ТехническаяИнформация)

	ТекстСообщенияОбОшибке = ТекстОшибкиДляПользователя + Символы.ПС
		+ НСтр("ru = 'Возможная причина: Загружаемые данные некорректные.
					|Техническая информация: %1'");
	ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, ТехническаяИнформация);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке);

КонецПроцедуры

// Список параметров из текущей формы для подготовки к сопоставлению данных.
//
// Возвращаемое значение:
//   Структура - список параметров:
//    * УчетнаяЗапись          - СправочникСсылка.УчетныеЗаписиМаркетплейсов - учетная запись.
//    * ИмяОбъектаМетаданных   - Строка - имя объекта метаданных объекта выгрузки/загрузки.
//    * ИмяТабличнойЧасти      - Строка - имя табличной части объекта выгрузки/загрузки.
//    * СообщениеПользователю  - Строка - сообщение пользователю.
//
&НаКлиенте
Функция ПараметрыПодготовкиКСопоставлениюДанных()

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УчетнаяЗапись",         ПредопределенноеЗначение("Справочник.УчетныеЗаписиМаркетплейсов.ПустаяСсылка"));
	ПараметрыФормы.Вставить("ИмяОбъектаМетаданных",  "");
	ПараметрыФормы.Вставить("ИмяТабличнойЧасти",     "");
	ПараметрыФормы.Вставить("СообщениеПользователю", "");

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПоИмениФормыСопоставленияДанных(ДанныеДляСопоставления)

	Если ПустаяСтрока(ИмяФормыСопоставленияДанных) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыПодготовки = ПараметрыПодготовкиКСопоставлениюДанных();
	ПараметрыПодготовки.УчетнаяЗапись          = УчетнаяЗапись;
	ПараметрыПодготовки.ИмяОбъектаМетаданных   = ИмяОбъектаМетаданных;
	ПараметрыПодготовки.ИмяТабличнойЧасти      = ИмяТабличнойЧасти;

	ПараметрыФормы = ИнтеграцияСМаркетплейсамиКлиент.ПодготовитьПараметрыФормыСопоставленияИзВыгрузкиЗагрузкиДанных(
		ТаблицаСопоставленияДанных, ДанныеДляСопоставления, ПараметрыПодготовки);

	Если Не ПустаяСтрока(ПараметрыПодготовки.СообщениеПользователю) Тогда
		ПоказатьПредупреждение(, ПараметрыПодготовки.СообщениеПользователю);
		Возврат;
	КонецЕсли;

	Оповещение = Новый ОписаниеОповещения("ПослеСопоставленияДанныхИзФормыСопоставления", ЭтотОбъект, ПараметрыФормы.ПолеОбработчикаСобытияПриИзменении);
	ОткрытьФорму(ИмяФормыСопоставленияДанных, ПараметрыФормы, ЭтотОбъект, Истина,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияДанныхИзФормыСопоставления(Результат, ПолеОбработчикаСобытияПриИзменении) Экспорт

	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		Возврат;
	КонецЕсли;

	ЭлементПриИзменении = Элементы.Найти(ПолеОбработчикаСобытияПриИзменении);

	Для Каждого ДанныеПоляСопоставления Из Результат Цикл
		ПолеСопоставления = ДанныеПоляСопоставления.Ключ;

		Для Каждого ДанныеОбработки Из ДанныеПоляСопоставления.Значение Цикл
			Отбор = Новый Структура(ПолеСопоставления, ДанныеОбработки.Ключ);
			СтрокиОбработки = ТаблицаСопоставленияДанных.НайтиСтроки(Отбор);
			Для Каждого СтрокаОбработки Из СтрокиОбработки Цикл
				Для Каждого Свойство Из ДанныеОбработки.Значение Цикл
					СтрокаОбработки[Свойство.Ключ] = Свойство.Значение;
					ЗаполнитьРезультатСопоставленияСтроки(СтрокаОбработки, КолонкиОбязательныеПриПроверке, КолонкиДополнительныеПриПроверке);
				КонецЦикла;
				Если ЭлементПриИзменении <> Неопределено Тогда
					ОбработатьСобытиеПриИзменении(ЭлементПриИзменении, СтрокаОбработки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

	УстановитьФильтрацию = Ложь;
	ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();

КонецПроцедуры

&НаКлиенте
Процедура СопоставитьЗагружаемыеДанные(ШаблонБезОшибокЗаполнения = Истина)

	Если ТаблицаСДаннымиПустая() Тогда
		Если ВариантВыгрузкиЗагрузки = "ЗаполнениеТаблицы" Тогда
			ПоказатьПредупреждение(, (НСтр("ru = 'Для сопоставления и загрузки данных, заполните таблицу.'")));
		Иначе
			ПоказатьПредупреждение(, (НСтр("ru = 'Невозможно выполнить сопоставление данных, т.к данные не были загружены в таблицу.
				|Возможно, имена колонок в файле не соответствуют колонкам в бланке.'")));
		КонецЕсли;

		ВыполнитьШагЗаполнениеТаблицыДаннымиНаКлиенте();
		Возврат;
	КонецЕсли;

	ПодтверждениеЗакрытияФормы = Ложь;

	Если ИзмененоСодержимоеТабличногоДокумента Тогда
		ФоновоеЗадание = ЗагрузитьТабличныйДокументВТаблицуЗначенийНаСервере();
		НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		ЗаполнятьШаблонСДанными = Ложь;
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент", ЭтотОбъект, ЗаполнятьШаблонСДанными);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	Иначе
		ФоновоеЗадание = СопоставитьЗагружаемыеДанныеНаСервере();
		НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		Обработчик = Новый ОписаниеОповещения("ЗавершениеСопоставленияЗагружаемыхДанныхКлиент", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьТабличныйДокументВТаблицуЗначенийНаСервере()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Интеграция с маркетплейсами: Выполнение серверного метода загрузка данных из табличного документа'");

	Если ЛистыШаблона <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			КлючИЗначение.Значение.ЗаполняемыйШаблон = Неопределено;
		КонецЦикла;
	КонецЕсли;

	ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента(УникальныйИдентификатор);
	
	ПараметрыЗагрузки.ПараметрыШапки                        = ПараметрыШапки;
	ПараметрыЗагрузки.ИнформацияПоКолонкам                  = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыМакетаСШаблоном = ВысотаЗаголовкаТаблицыМакетаСШаблоном;
	ПараметрыЗагрузки.ЛистыШаблона                          = ОбщегоНазначения.СкопироватьРекурсивно(ЛистыШаблона);

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтеграцияСМаркетплейсамиСервер.ТабличныйДокументВТаблицу",
		ШаблонСДанными,
		ПараметрыЗагрузки);

	Возврат ФоновоеЗадание;

КонецФункции

&НаКлиенте
Процедура ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент(ФоновоеЗадание, ЗаполнятьШаблонСДанными) Экспорт

	Если Не ЭтоЗагрузкаДанных И Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбран объект для выгрузки данных.'"),, "СсылкаНаОбъект",);
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
		Возврат;
	КонецЕсли;

	ИзмененоСодержимоеТабличногоДокумента = Ложь;

	Если ФоновоеЗадание = Неопределено Тогда
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
		Возврат;
	КонецЕсли;

	ДанныеПолучены = Ложь;
	Если ФоновоеЗадание <> Неопределено И ФоновоеЗадание.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ДанныеПолучены = Истина;

			Если ЗаполнятьШаблонСДанными = Истина Тогда   
				Если ЛистыШаблона = Неопределено Тогда
					ШаблонСДанными = Результат.ШаблонСДанными;
				Иначе
					Для Каждого КлючИЗначение Из Результат.ЛистыШаблона Цикл
						ЛистыШаблона[КлючИЗначение.Ключ].ШаблонСДанными = СкопироватьТабличныйДокумент(КлючИЗначение.Значение.ШаблонСДанными);
						Если ТекущийЛист = КлючИЗначение.Ключ Тогда
							ШаблонСДанными = СкопироватьТабличныйДокумент(КлючИЗначение.Значение.ШаблонСДанными);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;

			Если ЭтоЗагрузкаДанных Тогда
				Если ЛистыШаблона = Неопределено Тогда
					ПараметрыШапки = Результат.ПараметрыШапки;
				Иначе
					Для Каждого КлючИЗначение Из Результат.ЛистыШаблона Цикл
						ЛистыШаблона[КлючИЗначение.Ключ].ПараметрыШапки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(КлючИЗначение.Значение.ПараметрыШапки);
						Если ТекущийЛист = КлючИЗначение.Ключ Тогда
							ПараметрыШапки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(КлючИЗначение.Значение.ПараметрыШапки);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				АдресЗагруженныхДанных = Результат.АдресТаблицыЗагруженныхДанных;
				СопоставитьЗагружаемыеДанные(Результат.ШаблонБезОшибокЗаполнения);
			Иначе
				Оповещение = Новый ОписаниеОповещения("ВыгрузитьШаблонВФайлЗавершение", ЭтотОбъект);
				НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
			КонецЕсли;

			// Если есть ошибки, нужно вывести.
			Если Не ДанныеПолучены И Результат.Свойство("ИнформацияОбОшибке") Тогда
				Если Не ПустаяСтрока(Результат.ИнформацияОбОшибке.ОписаниеОшибки) Тогда
					ФоновоеЗадание.КраткоеПредставлениеОшибки = Результат.ИнформацияОбОшибке.ОписаниеОшибки;
				Иначе
					ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ИнформацияОбОшибке.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
	КонецЕсли;

	Если Не ДанныеПолучены Тогда
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
		Если ЭтоЗагрузкаДанных Тогда
			ВывестиСообщениеОбОшибке(НСтр("ru = 'Не удалось произвести загрузку данных.'"), ФоновоеЗадание.КраткоеПредставлениеОшибки);
		Иначе
			ВывестиСообщениеОбОшибке(НСтр("ru = 'Не удалось сформировать макет для выгрузки данных.'"), ФоновоеЗадание.КраткоеПредставлениеОшибки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеСопоставленияЗагружаемыхДанныхКлиент(ФоновоеЗадание, ДополнительныеПараметры = Неопределено) Экспорт

	Если ФоновоеЗадание = Неопределено Тогда
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
		Возврат;
	КонецЕсли;

	Если ФоновоеЗадание.Статус = "Выполнено" Тогда
		ЗавершениеСопоставленияЗагружаемыхДанныхСервер(ФоновоеЗадание.АдресРезультата);

		УстановитьФильтрацию = Истина;
		ПоказатьСтатистикуПоСопоставлениюЗагрузкаИзФайла();

		ВсеСтрокиСопоставлены = (ФильтрТаблицаСопоставления <> "Несопоставленные") 
									И (ФильтрТаблицаСопоставления <> "ПодобраноАвтоматически");
		ВыполнитьШагСопоставлениеЗагружаемыхДанныхКлиент(ВсеСтрокиСопоставлены);

		ИзменитьПоведениеЭлементовФормы();
		
	ИначеЕсли ФоновоеЗадание.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'При загрузке данных из файла произошла ошибка. Подробности см. в журнале регистрации.'"));
		ПодтверждениеЗакрытияФормы = Истина;
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗавершениеСопоставленияЗагружаемыхДанныхСервер(АдресРезультата)

		ТаблицаСопоставленияДанныхИзХранилища = ПолучитьИзВременногоХранилища(АдресРезультата);
		УдалитьИзВременногоХранилища(АдресРезультата);

		Если ТаблицаСопоставленияДанныхИзХранилища = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ЗначениеВРеквизитФормы(ТаблицаСопоставленияДанныхИзХранилища, "ТаблицаСопоставленияДанных");
		ТаблицаСопоставленияДанныхИзХранилища = Неопределено;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьШагСопоставлениеЗагружаемыхДанныхКлиент(ВсеСтрокиСопоставлены = Неопределено)

	Если ВсеСтрокиСопоставлены = Истина Тогда
		ПослеВопросаОПродолженииЗагрузки(КодВозвратаДиалога.Да);
		
	Иначе
		СменитьСтраницу("СопоставлениеЗагружаемыхДанных");
		УстановитьУсловноеОформление();

		ПоказатьВопросЗаписиДанныхСОшибкамиЗаполнения();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВопросЗаписиДанныхСОшибкамиЗаполнения()

	Оповещение = Новый ОписаниеОповещения("ПослеВопросаОПродолженииЗагрузки", ЭтотОбъект);
	Если ЗагружатьНезаполненныеСтроки Тогда
		Если ФильтрТаблицаСопоставления = "ПодобраноАвтоматически" Тогда
			ТекстВопроса = НСтр("ru = 'Обнаружены строки, в которых значения обязательных колонок были подобраны автоматически.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Обнаружены строки, в которых не заполнены обязательные колонки.'");
		КонецЕсли;
	Иначе
		ТекстВопроса = НСтр("ru = 'Строки, в которых не заполнены обязательные колонки, будут пропущены.'");
	КонецЕсли;

	ПоказатьВопрос(Оповещение, ТекстВопроса + Символы.ПС + НСтр("ru = 'Продолжить?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОПродолженииЗагрузки(Результат, ДополнительныеПараметры = Неопределено) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		СменитьСтраницу("ДлительныеОперации");

		Если Не ПустаяСтрока(АдресЗагруженныхДанных) Тогда
			УдалитьИзВременногоХранилища(АдресЗагруженныхДанных);
			АдресЗагруженныхДанных = "";
		КонецЕсли;

		ФоновоеЗадание = ЗаписатьДанныеПрикладнаяЗагрузка();
		НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		Обработчик = Новый ОписаниеОповещения("ПослеЗаписиДанныхПрикладнаяЗагрузка", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
		ПодтверждениеЗакрытияФормы = Истина;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонСДаннымиВФайл()

	ФоновоеЗадание = СформироватьТабличныйДокументПоИмениМакетаСШаблоном();
	НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
	ЗаполнятьШаблонСДанными = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент", ЭтотОбъект, ЗаполнятьШаблонСДанными);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);

КонецПроцедуры

&НаСервере
Функция СформироватьТабличныйДокументПоИмениМакетаСШаблоном()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Интеграция с маркетплейсами: Выполнение серверного метода формирования табличного документа'");

	ПараметрыФормированияМакета = ИнтеграцияСМаркетплейсамиСервер.ПараметрыВыгрузкиДанныхВМакет();
	ПараметрыФормированияМакета.УчетнаяЗапись           = УчетнаяЗапись;
	ПараметрыФормированияМакета.ИмяОбъектаМетаданных    = ИмяОбъектаМетаданных;
	ПараметрыФормированияМакета.ИмяМакетаСШаблоном      = ИмяМакетаСШаблоном;
	ПараметрыФормированияМакета.СсылкаНаОбъект          = СсылкаНаОбъект;
	ПараметрыФормированияМакета.ИнформацияПоКолонкам    = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыФормированияМакета.ПараметрыШапки          = ПараметрыШапки;
	ПараметрыФормированияМакета.ДополнительныеПараметры = ДополнительныеПараметрыФормы;

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтеграцияСМаркетплейсамиСервер.СформироватьТабличныйДокументПоИмениМакетаСШаблоном",
		ПараметрыФормированияМакета);

	Возврат ФоновоеЗадание;

КонецФункции

#КонецОбласти

#Область ЗаписьОбъекта

&НаСервере
Функция ЗаписатьДанныеПрикладнаяЗагрузка()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Интеграция с маркетплейсами: Запись загруженных данных'");

	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("УчетнаяЗапись",                УчетнаяЗапись);
	ПараметрыЗаписи.Вставить("ПараметрыШапки",               ПараметрыШапки);
	ПараметрыЗаписи.Вставить("ДополнительныеПараметры",      ДополнительныеПараметрыФормы);
	ПараметрыЗаписи.Вставить("ИмяТабличнойЧасти",            ИмяТабличнойЧасти);
	ПараметрыЗаписи.Вставить("ЗагружатьНезаполненныеСтроки", ЗагружатьНезаполненныеСтроки);

	Если Не СсылкаНаОбъектЗаписыватьЗагружаемыйФайл
	  И Не ПустаяСтрока(ДанныеИзФайлаАдресДвоичныхДанных) Тогда
		УдалитьИзВременногоХранилища(ДанныеИзФайлаАдресДвоичныхДанных);
	КонецЕсли;

	Если ПустаяСтрока(ДанныеИзФайлаАдресДвоичныхДанных) Тогда
		ПараметрыЗаписи.Вставить("ДанныеФайла",          Неопределено);
		ПараметрыЗаписи.Вставить("РасширениеФайла",      "");
		ПараметрыЗаписи.Вставить("ПутьКВыбранномуФайлу", "");
	Иначе
		ПараметрыЗаписи.Вставить("ДанныеФайла",          ПолучитьИзВременногоХранилища(ДанныеИзФайлаАдресДвоичныхДанных));
		ПараметрыЗаписи.Вставить("РасширениеФайла",      ДанныеИзФайлаРасширение);
		ПараметрыЗаписи.Вставить("ПутьКВыбранномуФайлу", ПутьКВыбранномуФайлу);
	КонецЕсли;

	// Обязательно присутствие метода ЗаписатьЗагружаемыеДанные().
	ИспользуетсяМетодЗаписиЗагружаемыхДанных = ИнтеграцияСМаркетплейсамиСервер.МетодКонфигурацииИспользуется(
		ИмяОбъектаМетаданных,
		"ЗаписатьЗагружаемыеДанные");
	Если Не ИспользуетсяМетодЗаписиЗагружаемыхДанных Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = 'Не определено использование процедуры %1'"), "ЗаписатьЗагружаемыеДанные");
	КонецЕсли;

	ИмяМенеджераОбъекта = ИнтеграцияСМаркетплейсамиСервер.ИмяМенеджераОбъекта(ИмяОбъектаМетаданных);
	ИмяМетода = ИмяМенеджераОбъекта + ".ЗаписатьЗагружаемыеДанные";

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполненияВФоне,
		ИмяМетода,
		РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"),
		ПараметрыЗаписи,
		СсылкаНаОбъект);

	Возврат ФоновоеЗадание;

КонецФункции

&НаКлиенте
Процедура ПослеЗаписиДанныхПрикладнаяЗагрузка(ФоновоеЗадание, ДополнительныеПараметры) Экспорт

	Если ФоновоеЗадание = Неопределено Тогда
		СменитьСтраницу("СопоставлениеЗагружаемыхДанных");
		Возврат;
	КонецЕсли;

	Если ФоновоеЗадание.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата); // см. ИнтеграцияСМаркетплейсамиСервер.РезультатЗаписиЗагружаемыхДанных
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			ОчиститьСообщения();
			
			Если Не ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ОписаниеОшибки);
			КонецЕсли;

			Если ЗначениеЗаполнено(Результат.СсылкаНаОбъект) Тогда
				СсылкаНаОбъект = Результат.СсылкаНаОбъект;
				ОбновитьПодсказкуСсылкиНаОбъект(СсылкаНаОбъектПодсказка, СсылкаНаОбъект, ЭтоЗагрузкаДанных);
			КонецЕсли;

			СписокОбъектовОтбор.ЗагрузитьЗначения(Результат.Ссылки);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокЗагруженныхОбъектов, "СписокОбъектовОтбор", СписокОбъектовОтбор);
			СписокЗагруженныхОбъектов.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СостоянияСсылок", Результат.СостоянияСсылок);

			СписокДляОповещения = ПодготовитьСписокДляОповещения(Результат.Ссылки);
			Для Каждого ТипОбъекта Из СписокДляОповещения Цикл
				Оповестить(ТипОбъекта.Значение.ИмяСобытия,
					Новый Структура,
					ТипОбъекта.Значение.ПустаяСсылка);
				ОповеститьОбИзменении(ТипОбъекта.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
	КонецЕсли;

	Если Не ПустаяСтрока(ДанныеИзФайлаАдресДвоичныхДанных) Тогда
		УдалитьИзВременногоХранилища(ДанныеИзФайлаАдресДвоичныхДанных);
	КонецЕсли;

	СменитьСтраницу("РезультатЗаписиВИБ");

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьСписокДляОповещения(СсылкиНаОбъекты)

	МассивТипов = Новый Массив;

	Для Каждого Элемент Из СсылкиНаОбъекты Цикл
		ТипЭлемента = ТипЗнч(Элемент);
		Если МассивТипов.Найти(ТипЭлемента) = Неопределено Тогда
			МассивТипов.Добавить(ТипЭлемента);
		КонецЕсли;
	КонецЦикла;

	Результат = Новый Соответствие;

	Для Каждого ТипЭлемента Из МассивТипов Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЭлемента);
		Если ТипЗнч(ОбъектМетаданных) <> Тип("ОбъектМетаданных") Тогда
			Продолжить;
		КонецЕсли;
		ИмяСобытия = "Запись_" + ОбъектМетаданных.Имя;
		Попытка
			ПустаяСсылка = ПредопределенноеЗначение(ОбъектМетаданных.ПолноеИмя() + ".ПустаяСсылка");
		Исключение
			ПустаяСсылка = Неопределено;
		КонецПопытки;
		Результат.Вставить(ТипЭлемента, Новый Структура("ИмяСобытия,ПустаяСсылка", ИмяСобытия, ПустаяСсылка));
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыПослеЗагрузкиДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКомандРезультатаЗаписиВИБ

&НаСервере
Процедура СписокПометкаУдаленияСервер()

	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();

КонецПроцедуры

&НаСервере
Процедура СписокОтменаПроведенияСервер()

	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();

КонецПроцедуры

&НаСервере
Процедура СписокПровестиСервер()

	ОбеспечениеВДокументахСервер.ПроверитьЗапуститьФоновоеЗаданиеРаспределенияЗапасов();

КонецПроцедуры

&НаКлиенте
Процедура ОповещениеПроведенияОтменыПроведенияДокумента(Список, ВыделенныеСтроки, ТипСписка)

	НавигационнаяСсылка = Неопределено;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Документ = ТипСписка;
		ТекстОповещения = НСтр("ru='Изменение (%КоличествоДокументов%)'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%КоличествоДокументов%", ВыделенныеСтроки.Количество());
	Иначе
		Документ = ВыделенныеСтроки[0];
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Документ);
		ТекстОповещения = НСтр("ru='Изменение'");
	КонецЕсли;

	Список.Обновить();
	ПоказатьОповещениеПользователя(ТекстОповещения, НавигационнаяСсылка, Строка(Документ),
		БиблиотекаКартинок.Информация32);

КонецПроцедуры

#КонецОбласти

#Область РаботаСФайлами

&НаКлиенте
Процедура ПослеВыбораФайлаДляСохранения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ПутьКФайлу      = Результат[0];
		ВыбранныйФайл   = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ВыбранныйФайл.Расширение);

		Если ЗначениеЗаполнено(ВыбранныйФайл.Имя) Тогда
			Если ЛистыШаблона = Неопределено Тогда
				Если РасширениеФайла = "xlsx" Тогда
					ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
				ИначеЕсли РасширениеФайла = "mxl" И ЛистыШаблона = Неопределено Тогда
					ТипФайла = ТипФайлаТабличногоДокумента.MXL;
				ИначеЕсли РасширениеФайла = "xls" Тогда
					ТипФайла = ТипФайлаТабличногоДокумента.XLS;
				ИначеЕсли РасширениеФайла = "ods" Тогда
					ТипФайла = ТипФайлаТабличногоДокумента.ODS;
				Иначе
					ПоказатьПредупреждение(, НСтр("ru = 'Шаблон файла не был сохранен.'"));
					Возврат;
				КонецЕсли;
				
				Оповещение = Новый ОписаниеОповещения("ПослеЗаписиТабличногоДокументаВФайл", ЭтотОбъект);
				ШаблонСДанными.НачатьЗапись(Оповещение, ПутьКФайлу, ТипФайла);
				
			Иначе
				Если РасширениеФайла = "xlsx" Тогда
					ТипФайла = ТипФайлаПакетаОтображаемыхДокументов.XLSX;
				ИначеЕсли РасширениеФайла = "xls" Тогда
					ТипФайла = ТипФайлаПакетаОтображаемыхДокументов.XLS;
				ИначеЕсли РасширениеФайла = "ods" Тогда
					ТипФайла = ТипФайлаПакетаОтображаемыхДокументов.ODS;
				Иначе
					ПоказатьПредупреждение(, НСтр("ru = 'Выбранное расширение не поддерживается для многостраничных шаблонов.'"));
					Возврат;
				КонецЕсли;
				
				Пакет = Новый ПакетОтображаемыхДокументов;
				
				Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
					НовыйЛист              = Пакет.Состав.Добавить();
					НовыйЛист.Наименование = КлючИЗначение.Ключ;
					НовыйЛист.Данные       = ПоместитьВоВременноеХранилище(КлючИЗначение.Значение.ШаблонСДанными);
				КонецЦикла;
				
				Пакет.НачатьЗапись(Оповещение, ПутьКФайлу, ТипФайла);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрано имя сохраняемого файла.'"));
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиТабличногоДокументаВФайл(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Ложь Тогда
		Если ЭтоЗагрузкаДанных Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Шаблон файла не был сохранен.'"));
		Иначе
			ПоказатьПредупреждение(, НСтр("ru = 'Данные не были сохранены в файл.'"));
		КонецЕсли;
		
	Иначе
		Если ЭтоЗагрузкаДанных Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Сохранение шаблона'"),,
				НСтр("ru = 'Сохранение шаблона в файл выполнено успешно.'"));
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Выгрузка данных'"),,
				НСтр("ru = 'Выгрузка данных в файл выполнена успешно.'"));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораРасширенияФайла(Результат, ИмяФайла) Экспорт

	Если ЗначениеЗаполнено(Результат) Тогда
		АдресВоВременномХранилище = УникальныйИдентификатор;
		СохранитьШаблонВоВременноеХранилище(ШаблонСДанными, Результат, АдресВоВременномХранилище);
		ПараметрыСохраненияФайла = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
		ФайловаяСистемаКлиент.СохранитьФайл(Неопределено, АдресВоВременномХранилище,
			ИмяФайла + "." + Результат, ПараметрыСохраненияФайла);
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СохранитьШаблонВоВременноеХранилище(Знач ШаблонСДанными, Знач РасширениеФайла,
			Знач АдресВоВременномХранилище)

	ИмяФайла = ПолучитьИмяВременногоФайла(РасширениеФайла);
	Если РасширениеФайла = "xlsx" Тогда
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
	ИначеЕсли РасширениеФайла = "xls" Тогда
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
	ИначеЕсли РасширениеФайла = "ods" Тогда
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.ODS);
	Иначе
		ШаблонСДанными.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	КонецЕсли;
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);

	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресВоВременномХранилище);

	Возврат АдресВоВременномХранилище;

КонецФункции

&НаСервереБезКонтекста
Функция СформироватьИмяФайлаДляОбъектаМетаданных(Знач ИмяОбъектаМетаданных, Знач СсылкаНаОбъект,
		 Знач ДляВыгрузкиВФайл = Ложь)

	Возврат ИнтеграцияСМаркетплейсамиСервер.СформироватьИмяФайлаДляОбъектаМетаданных(ИмяОбъектаМетаданных, СсылкаНаОбъект, ДляВыгрузкиВФайл);

КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеИзФайлаВШаблон(Результат, ДополнительныеПараметры) Экспорт

	ИзмененоСодержимоеТабличногоДокумента = Ложь;

	Если Результат <> Неопределено Тогда
		СменитьСтраницу("ДлительныеОперации");
		ФоновоеЗаданиеПроцент = 0;

		ПутьКВыбранномуФайлу               = Результат.Имя;
		ДанныеИзФайлаРасширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ПутьКВыбранномуФайлу));

		ФоновоеЗадание = ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере();
		НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
		НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
		ЗаполнятьШаблонСДанными = Истина;
		Обработчик = Новый ОписаниеОповещения("ПослеЗагрузкиФайлаСДаннымиВТабличныйДокумент", ЭтотОбъект, ЗаполнятьШаблонСДанными);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗагрузитьФайлСДаннымиВТабличныйДокументНаСервере()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Интеграция с маркетплейсами: Выполнение серверного метода загрузки данных из файла'");

	ОчисткаШаблонСДанными();

	Если ЛистыШаблона <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			КлючИЗначение.Значение.ЗаполняемыйШаблон = СкопироватьТабличныйДокумент(КлючИЗначение.Значение.ШаблонСДанными);
		КонецЦикла;
	КонецЕсли;

	ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиТабличногоДокумента(УникальныйИдентификатор);
	
	ПараметрыЗагрузки.ДанныеФайла                              = ПолучитьИзВременногоХранилища(ДанныеИзФайлаАдресДвоичныхДанных);
	ПараметрыЗагрузки.РасширениеФайла                          = ДанныеИзФайлаРасширение;
	ПараметрыЗагрузки.ЗаполняемыйШаблон                        = ШаблонСДанными;
	ПараметрыЗагрузки.ПараметрыШапки                           = ПараметрыШапки;
	ПараметрыЗагрузки.ИнформацияПоКолонкам                     = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыЗагружаемогоМакета = ВысотаЗаголовкаТаблицыЗагружаемогоМакета;
	ПараметрыЗагрузки.ВысотаЗаголовкаТаблицыМакетаСШаблоном    = ВысотаЗаголовкаТаблицыМакетаСШаблоном;
	ПараметрыЗагрузки.ЛистыШаблона                             = ОбщегоНазначения.СкопироватьРекурсивно(ЛистыШаблона);
	
	ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияВФоне,
		"ИнтеграцияСМаркетплейсамиСервер.ЗагрузитьФайлВТаблицу",
		ПараметрыЗагрузки);

	Возврат ФоновоеЗадание;

КонецФункции

&НаСервере
Процедура ОчисткаШаблонСДанными()

	ШаблоныДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыШапки, "Шаблоны", Новый Массив);
	ВысотаШапки        = ШаблоныДанныхШапки.Количество();

	ОбластьЗаголовкаТаблица = ШаблонСДанными.ПолучитьОбласть(ВысотаШапки + 1, 1, ВысотаШапки + ВысотаЗаголовкаТаблицыМакетаСШаблоном, ШаблонСДанными.ШиринаТаблицы);
	ШаблонСДанными.Очистить();
	ШаблонСДанными.Вывести(ОбластьЗаголовкаТаблица);

	Если ЛистыШаблона <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			ШаблоныДанныхШапки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(КлючИЗначение.Значение.ПараметрыШапки, "Шаблоны", Новый Массив);
			ВысотаШапки        = ШаблоныДанныхШапки.Количество();

			ОбластьЗаголовкаТаблица = КлючИЗначение.Значение.ШаблонСДанными.ПолучитьОбласть(ВысотаШапки + 1, 1, 
				ВысотаШапки + КлючИЗначение.Значение.ВысотаЗаголовкаТаблицыМакетаСШаблоном, КлючИЗначение.Значение.ШаблонСДанными.ШиринаТаблицы);
			КлючИЗначение.Значение.ШаблонСДанными.Очистить();
			КлючИЗначение.Значение.ШаблонСДанными.Вывести(ОбластьЗаголовкаТаблица);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НовыйАдресХранилища(Знач УникальныйИдентификатор)

	Возврат ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор)

КонецФункции

#КонецОбласти

#Область ЗагрузкаИнтеграционнымиМетодами

&НаКлиенте
Процедура ЗагрузитьДанныеИнтеграционнымиМетодами()

	СменитьСтраницу("ДлительныеОперации");
	ФоновоеЗаданиеПроцент = 0;

	ФоновоеЗадание = ПолучитьДанныеИнтеграционнымиМетодамиНаСервере();

	НастройкиОжидания                                = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания           = Ложь;
	НастройкиОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессВыполнения", ЭтотОбъект);
	ЗаполнятьШаблонСДанными = Истина;
	Обработчик = Новый ОписаниеОповещения("ПослеПолученияДанныхИнтеграционнымиМетодами", ЭтотОбъект, ЗаполнятьШаблонСДанными);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФоновоеЗадание, Обработчик, НастройкиОжидания);

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеИнтеграционнымиМетодамиНаСервере()

	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = 
		НСтр("ru = 'Интеграция с маркетплейсами: Выполнение серверного метода загрузки данных методами API'");

	// Обязательно присутствие метода ПолучитьДанныеИнтеграционнымиМетодами().
	ИспользуетсяМетодСопоставленияЗагружаемыхДанных = ИнтеграцияСМаркетплейсамиСервер.МетодКонфигурацииИспользуется(
		ИмяОбъектаМетаданных,
		"ПолучитьДанныеИнтеграционнымиМетодами");
	Если Не ИспользуетсяМетодСопоставленияЗагружаемыхДанных Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Нстр("ru = 'Не определено использование процедуры %1'"), "ПолучитьДанныеИнтеграционнымиМетодами");
	КонецЕсли;

	ИмяМенеджераОбъекта = ИнтеграцияСМаркетплейсамиСервер.ИмяМенеджераОбъекта(ИмяОбъектаМетаданных);
	ИмяМетода = ИмяМенеджераОбъекта + ".ПолучитьДанныеИнтеграционнымиМетодами";

	ОчисткаШаблонСДанными();

	Если ЛистыШаблона <> Неопределено Тогда
		Для Каждого КлючИЗначение Из ЛистыШаблона Цикл
			КлючИЗначение.Значение.ЗаполняемыйШаблон = СкопироватьТабличныйДокумент(КлючИЗначение.Значение.ШаблонСДанными);
		КонецЦикла;
	КонецЕсли;

	ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИнтеграционнымиМетодами();
	
	ПараметрыЗагрузки.ИмяОбъектаМетаданных          = ИмяОбъектаМетаданных;
	ПараметрыЗагрузки.ИмяТабличнойЧасти             = ИмяТабличнойЧасти;
	ПараметрыЗагрузки.АдресТаблицыЗагруженныхДанных = НовыйАдресХранилища(УникальныйИдентификатор);
	ПараметрыЗагрузки.ОбязательныеКолонки           = КолонкиОбязательныеПриПроверке.ВыгрузитьЗначения();
	ПараметрыЗагрузки.ПараметрыШапки                = ПараметрыШапки;
	ПараметрыЗагрузки.ИнформацияПоКолонкам          = РеквизитФормыВЗначение("ИнформацияПоКолонкам");
	ПараметрыЗагрузки.УчетнаяЗапись                 = УчетнаяЗапись;
	ПараметрыЗагрузки.НачалоПериода                 = ПериодНачало;
	ПараметрыЗагрузки.КонецПериода                  = ПериодКонец;
	ПараметрыЗагрузки.ЛистыШаблона                  = ОбщегоНазначения.СкопироватьРекурсивно(ЛистыШаблона);

	Если Не ТаблицаСопоставленияДанных_РеквизитыСозданы Тогда
		СоздатьТаблицуСопоставленияПоИнформацииОКолонкахДляТЧ();
	Иначе
		ТаблицаСопоставленияДанных.Очистить();
	КонецЕсли;

	ФоновоеЗадание = ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполненияВФоне,
		ИмяМетода,
		РеквизитФормыВЗначение("ТаблицаСопоставленияДанных"),
		ПараметрыЗагрузки);

	Возврат ФоновоеЗадание;

КонецФункции

&НаКлиенте
Процедура ПослеПолученияДанныхИнтеграционнымиМетодами(ФоновоеЗадание, ДополнительныеПараметры = Неопределено) Экспорт

	ИзмененоСодержимоеТабличногоДокумента = Ложь;

	Если ФоновоеЗадание = Неопределено Тогда
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
		Возврат;
	КонецЕсли;

	ДанныеПолучены = Ложь;
	
	Если ФоновоеЗадание.Статус = "Выполнено" Тогда
		Результат = ПолучитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
		
		Если ТипЗнч(Результат) = Тип("Структура") Тогда
			АдресЗагруженныхДанных = Результат.АдресТаблицыЗагруженныхДанных;
			
			Если Не ПустаяСтрока(АдресЗагруженныхДанных) Тогда
				ДанныеПолучены = Истина;

				Если ЛистыШаблона = Неопределено Тогда
					ПараметрыШапки = Результат.ПараметрыШапки;
					Если Результат.Свойство("ШаблонСДанными") Тогда
						ШаблонСДанными = Результат.ШаблонСДанными;
					КонецЕсли;
				Иначе
					Для Каждого КлючИЗначение Из Результат.ЛистыШаблона Цикл
						ЛистыШаблона[КлючИЗначение.Ключ].ПараметрыШапки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(КлючИЗначение.Значение.ПараметрыШапки);
						ЛистыШаблона[КлючИЗначение.Ключ].ШаблонСДанными = СкопироватьТабличныйДокумент(КлючИЗначение.Значение.ШаблонСДанными);
						
						Если ТекущийЛист = КлючИЗначение.Ключ Тогда
							ПараметрыШапки = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(КлючИЗначение.Значение.ПараметрыШапки);
							ШаблонСДанными = СкопироватьТабличныйДокумент(КлючИЗначение.Значение.ШаблонСДанными);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				СопоставитьЗагружаемыеДанные(Истина);
			КонецЕсли;

			// Если есть ошибки, нужно вывести.
			Если Не ДанныеПолучены И Результат.Свойство("ИнформацияОбОшибке") Тогда
				Если Не ПустаяСтрока(Результат.ИнформацияОбОшибке.ОписаниеОшибки) Тогда
					ФоновоеЗадание.КраткоеПредставлениеОшибки = Результат.ИнформацияОбОшибке.ОписаниеОшибки;
				Иначе
					ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ИнформацияОбОшибке.ОписаниеОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если Не ПустаяСтрока(АдресЗагруженныхДанных) Тогда
			УдалитьИзВременногоХранилища(ФоновоеЗадание.АдресРезультата);
		КонецЕсли;
	КонецЕсли;

	Если Не ДанныеПолучены Тогда
		СменитьСтраницу("ЗаполнениеТаблицыДанными");
		ВывестиСообщениеОбОшибке(НСтр("ru = 'Не удалось произвести загрузку данных.'"), ФоновоеЗадание.КраткоеПредставлениеОшибки);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ВыводПрогресса

&НаКлиенте
Процедура ПрогрессВыполнения(Результат, ДополнительныеПараметры) Экспорт

	Если Результат.Статус = "Выполняется" Тогда
		Прогресс = ПрочитатьПрогресс(Результат.ИдентификаторЗадания);
		Если Прогресс <> Неопределено Тогда
			ФоновоеЗаданиеПроцент = Прогресс.Процент;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьПрогресс(Знач ИдентификаторЗадания)
	Возврат ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
КонецФункции

#КонецОбласти

#КонецОбласти
