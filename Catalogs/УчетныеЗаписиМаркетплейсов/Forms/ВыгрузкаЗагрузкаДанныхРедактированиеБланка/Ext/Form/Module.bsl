///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ИнтеграцияСМаркетплейсамиСервер.ИнициализироватьТаблицуИнформацииПоКолонкам(ЭтотОбъект);

	УстановитьОформлениеДанных();

	ПараметрыЗагрузки = ИнтеграцияСМаркетплейсамиСервер.ПараметрыЗагрузкиИзФайлаВТабличнуюЧасть();

	Если ТипЗнч(Параметры.ПараметрыЗагрузки) = Тип("Структура") Тогда
		ИмяМакетаСШаблоном   = Параметры.ПараметрыЗагрузки.ИмяМакетаСШаблоном;
		ИмяОбъектаМетаданных = Параметры.ПараметрыЗагрузки.ИмяОбъектаМетаданных;

		ЗаполнитьЗначенияСвойств(ПараметрыЗагрузки, Параметры.ПараметрыЗагрузки);
	КонецЕсли;

	Если ТипЗнч(Параметры.ИнформацияПоКолонкам) = Тип("ДанныеФормыКоллекция") Тогда
		Для Каждого ДанныеПоКолонке Из Параметры.ИнформацияПоКолонкам Цикл
			Если Не ДанныеПоКолонке.ВидимостьВМакете И ДанныеПоКолонке.ВидимостьПриСопоставлении Тогда
				Продолжить;
			КонецЕсли;

			ЗаполнитьЗначенияСвойств(ИнформацияПоКолонкам.Добавить(), ДанныеПоКолонке);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнформацияПоКолонкам

&НаКлиенте
Процедура ИнформацияПоКолонкамПриИзменении(Элемент)

	ВнесеныИзменения = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоКолонкамПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ОписаниеКолонки = Элемент.ТекущиеДанные.Примечание;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнформацияПоКолонкамВидимостьВМакетеПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИнформацияПоКолонкам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ВидимостьПриСопоставлении = ТекущиеДанные.ВидимостьВМакете;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)

	ПозицияКолонки = 1;
	ПозицияКолонкиВМакете = 1;

	Для Каждого СтрокаТаблицы Из ИнформацияПоКолонкам Цикл
		СтрокаТаблицы.Позиция = ПозицияКолонки;
		ПозицияКолонки = ПозицияКолонки + 1;

		Если СтрокаТаблицы.ВидимостьВМакете Тогда
			СтрокаТаблицы.ПозицияВМакете = ПозицияКолонкиВМакете;
			ПозицияКолонкиВМакете = ПозицияКолонкиВМакете + 1;
		Иначе
			СтрокаТаблицы.ПозицияВМакете = -1;
		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ИнформацияПоКолонкам", ИнформацияПоКолонкам);
	Результат.Вставить("АдресХранилища",       ПараметрыЗагрузки.АдресХранилища);
	Результат.Вставить("ВнесеныИзменения",     ВнесеныИзменения);

	Закрыть(Результат);

КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройки(Команда)

	Оповещение = Новый ОписаниеОповещения("СброситьНастройкиЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, НСтр("ru = 'Установить настройки колонок в первоначальное состояние?'"), РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из ИнформацияПоКолонкам Цикл
		Если Не СтрокаТаблицы.ВидимостьВМакете И СтрокаТаблицы.ВидимостьПриСопоставлении Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицы.ВидимостьВМакете          = Истина;
		СтрокаТаблицы.ВидимостьПриСопоставлении = Истина;
	КонецЦикла;

	ВнесеныИзменения = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	Для Каждого СтрокаТаблицы Из ИнформацияПоКолонкам Цикл
		Если Не СтрокаТаблицы.ВидимостьВМакете И СтрокаТаблицы.ВидимостьПриСопоставлении
			Или СтрокаТаблицы.ОбязательнаДляЗаполнения Тогда
			Продолжить;
		КонецЕсли;

		СтрокаТаблицы.ВидимостьВМакете          = Ложь;
		СтрокаТаблицы.ВидимостьПриСопоставлении = Ложь;
	КонецЦикла;

	ВнесеныИзменения = Истина;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОформлениеДанных()

	УсловноеОформление.Элементы.Очистить();

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкамНаименование");
	ПолеОформления.Использование = Истина;

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ОбязательнаДляЗаполнения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ВидимостьВМакете");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкамВидимостьВМакете");
	ПолеОформления.Использование = Истина;

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ОбязательнаДляЗаполнения");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ВидимостьВМакете");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкамВидимостьВМакете");
	ПолеОформления.Использование = Истина;

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ВидимостьВМакете");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование  = Истина;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ВидимостьПриСопоставлении");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкамСиноним");
	ПолеОформления.Использование = Истина;

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ВидимостьВМакете");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование  = Истина;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.ВидимостьПриСопоставлении");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкамСиноним");
	ПолеОформления.Использование = Истина;

	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИнформацияПоКолонкам.Синоним");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбора.Использование  = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Стандартное наименование'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройкиЗавершение(РезультатВопроса, ДополнительныеПараметры = Неопределено) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СброситьНастройкиКолонок();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиКолонок()

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		ИмяОбъектаМетаданных,
		"ЗагрузкаДанныхИзФайла" + ИмяМакетаСШаблоном,
		Неопределено,
		,
		ИмяПользователя());

	ВнесеныИзменения = Ложь;

	ТаблицаИнформацияПоКолонкам = ИнформацияПоКолонкам.Выгрузить();
	ТаблицаИнформацияПоКолонкам.Очистить();

	ИнтеграцияСМаркетплейсамиСервер.ОпределитьИнформациюПоКолонкамИПараметрамШапки(ПараметрыЗагрузки, ТаблицаИнформацияПоКолонкам, Новый Структура);
	ПоместитьВоВременноеХранилище(ТаблицаИнформацияПоКолонкам, ПараметрыЗагрузки.АдресХранилища);
	ЗначениеВРеквизитФормы(ТаблицаИнформацияПоКолонкам, "ИнформацияПоКолонкам");

	Отбор = Новый Структура("ВидимостьВМакете, ВидимостьПриСопоставлении", Ложь, Истина);
	СтрокиУдаления = ИнформацияПоКолонкам.НайтиСтроки(Отбор);
	Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
		ИнформацияПоКолонкам.Удалить(СтрокаУдаления);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти
