#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Идентификатор");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = Данные.Идентификатор;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Ключи адресов ЗЕРНО по адресу XDTO
// 
// Параметры:
//  КоллекцияАдресов   - см. ТаблицаПоискаКлючейПоАдресам
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//		Ключ - Строка - адрес XDTO
//		Значение - СправочникСсылка.КлючиАдресовЗЕРНО - Ключи адресов.
Функция КлючиПоАдресуXDTO(КоллекцияАдресов) Экспорт
	
	СоответствиеКлючей = Новый Соответствие();
	КоллекцияАдресов.Колонки.Добавить("АдресПоиска", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	
	Для Каждого СтруктураАдреса Из КоллекцияАдресов Цикл
		
		ДанныеАдреса = Новый Структура;
		ДанныеАдреса.Вставить("Индекс", "");
		ДанныеАдреса.Вставить("Комментарий", "");
		ДанныеАдреса.Вставить("Идентификатор", "");
		ДанныеАдреса.Вставить("ИдентификаторДома", "");
		ДанныеАдреса.Вставить("ИдентификаторАдресногоОбъекта", "");
		ДанныеАдреса.Вставить("ИдентификаторКвартиры", "");
		ДанныеАдреса.Вставить("ДополнительныеКоды", "");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("КодыАдреса", Истина);
		
		ИнтеграцияИС.ДанныеИзСтрокиКонтактнойИнформации(СтруктураАдреса.Адрес, ДанныеАдреса, ДополнительныеПараметры);
		
		Если ЗначениеЗаполнено(ДанныеАдреса.Индекс) Тогда
			СтруктураАдреса.АдресСтрокой = СтрЗаменить(СтруктураАдреса.АдресСтрокой, ДанныеАдреса.Индекс + ", ", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеАдреса.Комментарий) Тогда
			МестоположениеСКомментарием = СтруктураАдреса.АдресСтрокой + ", " + ДанныеАдреса.Комментарий;
		Иначе
			МестоположениеСКомментарием = СтруктураАдреса.АдресСтрокой;
		КонецЕсли;
		
		СтруктураАдреса.АдресПоиска = МестоположениеСКомментарием;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КоллекцияАдресов.АдресПоиска КАК АдресПоиска,
		|	КоллекцияАдресов.Адрес       КАК Адрес
		|ПОМЕСТИТЬ ВТ_ТаблицаАдресовПоиска
		|ИЗ
		|	&КоллекцияАдресов КАК КоллекцияАдресов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КлючиАдресовЗЕРНО.Ссылка      КАК Ссылка,
		|	ВТ_ТаблицаАдресовПоиска.Адрес КАК Адрес
		|ИЗ
		|	Справочник.КлючиАдресовЗЕРНО КАК КлючиАдресовЗЕРНО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаАдресовПоиска КАК ВТ_ТаблицаАдресовПоиска
		|		ПО ВТ_ТаблицаАдресовПоиска.АдресПоиска = КлючиАдресовЗЕРНО.Идентификатор";
	
	Запрос.УстановитьПараметр("КоллекцияАдресов", КоллекцияАдресов);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СоответствиеКлючей;
	Иначе
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ДанныеПоКлючу = СоответствиеКлючей.Получить(Выборка.Адрес);
			
			Если ДанныеПоКлючу = Неопределено Тогда
				ДанныеПоКлючу = Новый Массив;
			КонецЕсли;
			
			ДанныеПоКлючу.Добавить(Выборка.Ссылка);
			СоответствиеКлючей.Вставить(Выборка.Адрес, ДанныеПоКлючу);
			
		КонецЦикла;
		
		Возврат СоответствиеКлючей;
		
	КонецЕсли;
	
КонецФункции

// Конструктор таблицы для поиска ключей адресов по переданным данным адреса
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица поиска ключей по адресам:
// * Адрес        - Строка - адрес в формате XDTO
// * АдресСтрокой - Строка - короткий адрес, представление
Функция ТаблицаПоискаКлючейПоАдресам() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений();
	ТаблицаЗначений.Колонки.Добавить("Адрес", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗначений.Колонки.Добавить("АдресСтрокой", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	Возврат ТаблицаЗначений;
	
КонецФункции

Функция СопоставленныеКлючиАдресов(СкладКонтрагент) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладКонтрагент",СкладКонтрагент);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОператорыАдреса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КлючиАдресовЗЕРНО.ОператорыАдреса КАК ОператорыАдреса
	|ГДЕ
	|   ОператорыАдреса.СкладКонтрагент = &СкладКонтрагент";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция СкладыКонтрагентыПоКлючам(КлючиАдресов) Экспорт
	
	ВозвращаемоеЗначение = Новый Соответствие();
	СсылкиНаКлючи        = Новый Массив;
	
	Если ТипЗнч(КлючиАдресов) = Тип("Массив") Тогда
		СсылкиНаКлючи = КлючиАдресов;
	Иначе
		СсылкиНаКлючи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючиАдресов);
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.СкладКонтрагентЗЕРНО.Тип;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КлючиАдресовЗЕРНО.Ссылка          КАК КлючАдреса,
		|	КлючиАдресовЗЕРНО.Идентификатор   КАК Идентификатор,
		|	КлючиАдресовЗЕРНО.ОператорыАдреса.(
		|		СкладКонтрагент КАК СкладКонтрагент) КАК ОператорыАдреса
		|ИЗ
		|	Справочник.КлючиАдресовЗЕРНО КАК КлючиАдресовЗЕРНО
		|ГДЕ
		|	КлючиАдресовЗЕРНО.Ссылка В (&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", СсылкиНаКлючи);
	
	РезультатЗапроса       = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ЗначениеПоКлючу = ВозвращаемоеЗначение[ВыборкаДетальныеЗаписи.КлючАдреса];
		Если ЗначениеПоКлючу = Неопределено Тогда
			ЗначениеПоКлючу = Новый Массив();
			ВозвращаемоеЗначение[ВыборкаДетальныеЗаписи.КлючАдреса] = ЗначениеПоКлючу;
		КонецЕсли;
		
		СопоставленныеОбъекты = ВыборкаДетальныеЗаписи.ОператорыАдреса.Выбрать();
		Если СопоставленныеОбъекты.Следующий() Тогда
			ТекущееЗначение = Новый Структура("Склад, Контрагент");
			Если Метаданные.ОпределяемыеТипы.Склад.Тип.СодержитТип(ТипЗнч(СопоставленныеОбъекты.СкладКонтрагент)) Тогда
				ТекущееЗначение.Склад = СопоставленныеОбъекты.СкладКонтрагент;
			ИначеЕсли Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип.СодержитТип(ТипЗнч(СопоставленныеОбъекты.СкладКонтрагент)) Тогда
				ТекущееЗначение.Контрагент = СопоставленныеОбъекты.СкладКонтрагент;
			КонецЕсли;
			ЗначениеПоКлючу.Добавить(ТекущееЗначение);
		Иначе
			ДанныеПодбора = ИнтеграцияИСВызовСервера.СписокАвтоподбора(
				ОписаниеТипов, ВыборкаДетальныеЗаписи.Идентификатор, Ложь);
			Если ДанныеПодбора.Количество() Тогда
				Для Каждого ЭлементСпискаЗначений Из ДанныеПодбора Цикл
					ВладелецАдреса = ЭлементСпискаЗначений.Значение.ВладелецАдреса;
					Если ЗначениеЗаполнено(ВладелецАдреса) Тогда
						ТекущееЗначение = Новый Структура("Склад, Контрагент");
						Если Метаданные.ОпределяемыеТипы.Склад.Тип.СодержитТип(ТипЗнч(ВладелецАдреса)) Тогда
							ТекущееЗначение.Склад = ВладелецАдреса;
						ИначеЕсли Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип.СодержитТип(ТипЗнч(ВладелецАдреса)) Тогда
							ТекущееЗначение.Контрагент = ВладелецАдреса;
						Иначе
							Продолжить;
						КонецЕсли;
						ЗначениеПоКлючу.Добавить(ТекущееЗначение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Записывает в справочник "Ключи адресов ЗЕРНО" соответствие прикладных реквизитов
//   * Не изменяет существующие сопоставления (поле СкладКонтрагент)
//
// Параметры:
//   Ключ            - СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО - данные классификатора ЗЕРНО
//   СкладКонтрагент - ОпределяемыйТип.СкладКонтрагентЗЕРНО             - прикладной справочник
//
Процедура СопоставитьСПрикладнымиРеквизитами(Ключ, СкладКонтрагент) Экспорт
	
	Если Не ЗначениеЗаполнено(Ключ)
		Или Не ЗначениеЗаполнено(СкладКонтрагент) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СкладКонтрагент", СкладКонтрагент);
	Запрос.УстановитьПараметр("Ссылка", Ключ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1
	|ИЗ
	|	Справочник.КлючиАдресовЗЕРНО.ОператорыАдреса
	|ГДЕ
	|	Ссылка = &Ссылка
	|	И СкладКонтрагент = &СкладКонтрагент";
	Если Запрос.Выполнить().Пустой() Тогда
		КлючОбъект = Ключ.ПолучитьОбъект();
		КлючОбъект.ОператорыАдреса.Добавить().СкладКонтрагент = СкладКонтрагент;
		УстановитьПривилегированныйРежим(Истина);
		КлючОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПоискСсылок

Функция ИсходныеДанныеАдреса(Адрес, Индекс = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("PostalCode", Индекс);
	ВозвращаемоеЗначение.Вставить("Address",    Адрес);
	ВозвращаемоеЗначение.Вставить("OKTMO",      Неопределено);
	ВозвращаемоеЗначение.Вставить("OBJECTGUID", Неопределено);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция КлючАдреса(ИсходныеДанные, ПараметрыОбмена, Сопоставление = Неопределено, ИндексПрисутствует = Истина) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ИмяТаблицы = Метаданные.Справочники.КлючиАдресовЗЕРНО.ПолноеИмя();
	
	ДанныеАдреса = ДанныеАдреса(ИсходныеДанные, ПараметрыОбмена, Сопоставление, ИндексПрисутствует);
	Если Не ЗначениеЗаполнено(ДанныеАдреса.Идентификатор) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
		ПараметрыОбмена, ИмяТаблицы, ДанныеАдреса.Идентификатор);
	
	Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
		
		Блокировка = Новый БлокировкаДанных();
		ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", ДанныеАдреса.Идентификатор);
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка.Заблокировать();
			
			СправочникСсылка = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, ИмяТаблицы, ДанныеАдреса.Идентификатор);
			
			Если Не ЗначениеЗаполнено(СправочникСсылка) Тогда
				СправочникСсылка = ЗагрузитьКлючАдреса(ДанныеАдреса, ПараметрыОбмена,, Ложь);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				           |%3'"),
				Метаданные.Справочники.КлючиАдресовЗЕРНО.Синоним,
				ДанныеАдреса.Идентификатор,
				ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ТекстОшибкиПодробно = СтрШаблон(
				НСтр("ru = 'Ошибка при создании справочника %1 с идентификатором %2:
				           |%3'"),
				Метаданные.Справочники.КлючиАдресовЗЕРНО.Синоним,
				ДанныеАдреса.Идентификатор,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначенияИСВызовСервера.ЗаписатьОшибкуВЖурналРегистрации(
				ТекстОшибкиПодробно,
				НСтр("ru = 'Работа с ключами адресов'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат СправочникСсылка;
	
КонецФункции

Функция КлючАдресаКомплексный(ИсходныеДанные, ПараметрыОбмена, Сопоставление = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если ИсходныеДанные.AddressRF = Неопределено Тогда
		Возврат КлючАдреса(ИсходныеДанные.ForeignAddress, ПараметрыОбмена, Сопоставление, Ложь);
	Иначе
		Возврат КлючАдреса(ИсходныеДанные.AddressRF, ПараметрыОбмена, Сопоставление);
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьКлючАдреса(ДанныеАдреса, ПараметрыОбмена, СуществующийОбъект = Неопределено, ТребуетсяПоиск = Истина) Экспорт
	
	ЗаписьНового       = Ложь;
	МетаданныеЭлемента = Метаданные.Справочники.КлючиАдресовЗЕРНО;
	Идентификатор      = ДанныеАдреса.Идентификатор;
	
	Если СуществующийОбъект = Неопределено Тогда
		
		СуществующийЭлемент = Неопределено;
		Если ТребуетсяПоиск Тогда
			СуществующийЭлемент = ИнтеграцияЗЕРНОСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена,
				МетаданныеЭлемента.ПолноеИмя(),
				Идентификатор);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СуществующийЭлемент) Тогда
			СуществующийОбъект = СоздатьЭлемент();
			СуществующийОбъект.Идентификатор = Идентификатор;
			
			ЗаписьНового = Истина;
		Иначе
			СуществующийОбъект = СуществующийЭлемент.ПолучитьОбъект();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗаписьНового Тогда
		Если ЗначениеЗаполнено(ДанныеАдреса.Сопоставление) Тогда
			НовоеСопоставление = СуществующийОбъект.ОператорыАдреса.Добавить();
			НовоеСопоставление.СкладКонтрагент = ДанныеАдреса.Сопоставление;
		КонецЕсли;
	Иначе
		СуществующийОбъект.Заблокировать();
	КонецЕсли;
	СуществующийОбъект.Индекс              = ДанныеАдреса.Индекс;
	СуществующийОбъект.ОКТМО               = ДанныеАдреса.ОКТМО;
	СуществующийОбъект.ИдентификаторАдреса = ДанныеАдреса.ИдентификаторАдреса;
	СуществующийОбъект.Записать();
	
	ИнтеграцияЗЕРНОСлужебный.ОбновитьСсылку(ПараметрыОбмена, МетаданныеЭлемента.ПолноеИмя(), Идентификатор, СуществующийОбъект.Ссылка);
	
	Возврат СуществующийОбъект.Ссылка;
	
КонецФункции

Функция ДанныеАдреса(ДанныеДокумента, ПараметрыОбмена, Сопоставление, ИндексПрисутствует = Истина)
	
	ВозвращаемоеЗначение = Новый Структура();
	ВозвращаемоеЗначение.Вставить("Идентификатор",       Неопределено);
	ВозвращаемоеЗначение.Вставить("Индекс",              Неопределено);
	ВозвращаемоеЗначение.Вставить("Адрес",               ДанныеДокумента.Address);
	ВозвращаемоеЗначение.Вставить("Сопоставление",       Сопоставление);
	ВозвращаемоеЗначение.Вставить("ОКТМО",               Неопределено);
	ВозвращаемоеЗначение.Вставить("ИдентификаторАдреса", Неопределено);
	Если ДанныеДокумента.Свойство("ОКТМО") Тогда
		ВозвращаемоеЗначение.ОКТМО = ДанныеДокумента.OKTMO;
	КонецЕсли;
	Если ДанныеДокумента.Свойство("OBJECTGUID") Тогда
		ВозвращаемоеЗначение.ИдентификаторАдреса = ДанныеДокумента.OBJECTGUID;
	КонецЕсли;
	Если ИндексПрисутствует Тогда
		ВозвращаемоеЗначение.Индекс = ДанныеДокумента.PostalCode;
	КонецЕсли;
	
	ВозвращаемоеЗначение.Идентификатор = ИнтеграцияЗЕРНОСлужебный.СоставнойКлючОбъекта(
		ДанныеДокумента,
		ПоляСоставногоКлюча(),,
		Ложь,
		", ");
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПоляСоставногоКлюча() Экспорт
	
	ВозвращаемоеЗначение = Новый Массив();
	ВозвращаемоеЗначение.Добавить("Address");
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
