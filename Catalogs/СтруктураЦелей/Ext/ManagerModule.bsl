#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Помещает во временное хранилище схему компоновки данных,
// настройки компоновки данных и возвращает их адреса.
//
// Параметры:
//	ЭлементСтруктурыЦелей - СправочникСсылка.СтруктураЦелей, ДанныеФормыСтруктура - объект формы:
//			*Ссылка - СправочникСсылка.СтруктураЦелей - 
//
// Возвращаемое значение:
//	Структура - структура, содержащая адреса:
//		*СхемаКомпоновкиДанных - Строка - адрес схемы компоновки данных
//		*НастройкиКомпоновкиДанных - Строка - адрес настроек компоновки данных.
//
Функция АдресаСхемыКомпоновкиДанныхИНастроекВоВременномХранилище(ЭлементСтруктурыЦелей) Экспорт
	
	Адреса = Новый Структура("СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных");
	
	Если ТипЗнч(ЭлементСтруктурыЦелей) = Тип("СправочникСсылка.СтруктураЦелей") Тогда
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей;
	Иначе
		ЭлементСтруктурыЦелейСсылка = ЭлементСтруктурыЦелей.Ссылка;
	КонецЕсли;
	
	ДанныеЦелевогоПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементСтруктурыЦелейСсылка,
		"ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных)
		ИЛИ ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных = Неопределено
		ИЛИ ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЭлементСтруктурыЦелейСсылка,
				ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если СхемаКомпоновкиДанных = Неопределено И ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет("ШаблоннаяСхемаКомпоновкиДанных");
	ИначеЕсли СхемаКомпоновкиДанных = Неопределено
		И Не ПустаяСтрока(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных) Тогда
		
		СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет(ЭлементСтруктурыЦелей.СхемаКомпоновкиДанных);
	КонецЕсли;
	
	ОтключитьОтборыПоФункциональнымОпциям(СхемаКомпоновкиДанных.ВариантыНастроек.Основной.Настройки);
	Адреса.СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	
	Если ДанныеЦелевогоПоказателя.ХранилищеНастроекКомпоновкиДанных = Неопределено Тогда
		Настройки = Неопределено
	Иначе
		Настройки = ДанныеЦелевогоПоказателя.ХранилищеНастроекКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Настройки) Тогда
		ОтключитьОтборыПоФункциональнымОпциям(Настройки);
		Адреса.НастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Возврат Адреса;
	
КонецФункции

// Возвращает поля-ресурсы, доступные для выбора пользователем
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить поля-ресурсы.
//
// Возвращаемое значение:
//	СписокЗначений - список, доступных пользователю полей-ресурсов (имя и синоним).
//
Функция ДоступныеЗначенияАнализа(ЦельСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДоступныхЗначений = Новый СписокЗначений;
	
	ДанныеЦелевогоПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЦельСсылка,
		"СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
	
	Если ЗначениеЗаполнено(ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных)
		ИЛИ ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ДанныеЦелевогоПоказателя.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	
	СлужебныеПоля = СлужебныеПоляЗначенияАнализа();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Если НЕ ДоступноеПоле.Ресурс
			ИЛИ НЕ СлужебныеПоля.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДоступныхЗначений.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокДоступныхЗначений;
	
КонецФункции

// Возвращает поля-измерения, доступные для выбора пользователем
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить поля-измерения.
//
// Возвращаемое значение:
//	СписокЗначений - список, доступных пользователю полей-измерений (имя и синоним).
//
Функция ДоступныеОбъектыАнализа(ЦельСсылка) Экспорт 
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДоступныхОбъектов = Новый СписокЗначений;
	
	ДанныеЦелевогоПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЦельСсылка,
		"СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
	
	Если ЗначениеЗаполнено(ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных)
		ИЛИ ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка,
				ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ДанныеЦелевогоПоказателя.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	ДоступныеПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы;
	
	СлужебныеПоля = СлужебныеПоляОбъектаАнализа();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоля Цикл 
		Если НЕ СлужебныеПоля.Найти(Строка(ДоступноеПоле.Поле)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокДоступныхОбъектов.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СписокДоступныхОбъектов;
	
КонецФункции

// Функция возвращает структуру с синонимом и схемой компоновки данных по имени макета.
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить схему
//	ИмяМакета - Строка, Неопределено - имя получаемого макета схемы компоновки данных.
//
// Возвращаемое значение:
//	Структура - структура со свойствами:
//		*Описание - Строка - синоним получаемого макета.
//		*СхемаКомпоновкиДанных - СхемаКомпоновкиДанных, Неопределено - найденная схема компоновки данных.
//		*НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных, Неопределено - найденные настройки компоновки данных.
//
Функция ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(ЦельСсылка, ИмяМакета = Неопределено) Экспорт
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Описание", "");
	ВозвращаемоеЗначение.Вставить("СхемаКомпоновкиДанных", Неопределено);
	ВозвращаемоеЗначение.Вставить("НастройкиКомпоновкиДанных", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЦелей.ХранилищеСхемыКомпоновкиДанных КАК ХранилищеСхемыКомпоновкиДанных,
	|	СтруктураЦелей.ХранилищеНастроекКомпоновкиДанных КАК ХранилищеНастроекКомпоновкиДанных 
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей
	|ГДЕ
	|	СтруктураЦелей.Ссылка = &ЦельСсылка";
	
	Запрос.УстановитьПараметр("ЦельСсылка", ЦельСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Не ЗначениеЗаполнено(ИмяМакета) Тогда
		
		ВозвращаемоеЗначение.Описание = ИмяМакета;
		Если Выборка.Следующий() Тогда
			ХранилищеСхемыКомпоновкиДанных = Выборка.ХранилищеСхемыКомпоновкиДанных; // ХранилищеЗначения
			ХранилищеНастроекКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных; // ХранилищеЗначения
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = ХранилищеСхемыКомпоновкиДанных.Получить();
			ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
		КонецЕсли;
		
	Иначе
		
		Макет = Метаданные.НайтиПоТипу(ТипЗнч(ЦельСсылка)).Макеты.Найти(ИмяМакета);
		Если НЕ Макет = Неопределено Тогда
			ВозвращаемоеЗначение.Описание = Макет.Синоним;
			ВозвращаемоеЗначение.СхемаКомпоновкиДанных = Справочники.СтруктураЦелей.ПолучитьМакет(ИмяМакета);
			Если Выборка.Следующий() Тогда
				ХранилищеНастроекКомпоновкиДанных = Выборка.ХранилищеНастроекКомпоновкиДанных; // ХранилищеЗначения
				ВозвращаемоеЗначение.НастройкиКомпоновкиДанных = ХранилищеНастроекКомпоновкиДанных.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Возвращает пользовательские настройки по умолчанию для целевых показателей 
//
// Параметры:
//	ЦельСсылка - СправочникСсылка.СтруктураЦелей - цель, для которой требуется получить настройки.
//
// Возвращаемое значение:
//	ПользовательскиеНастройкиКомпоновкиДанных - пользовательские настройки по умолчанию.
//
Функция ПользовательскиеНастройкиПоУмолчанию(ЦельСсылка) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	ДанныеЦелевогоПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЦельСсылка,
		"СхемаКомпоновкиДанных, ХранилищеСхемыКомпоновкиДанных, ХранилищеНастроекКомпоновкиДанных");
	
	// Получим схему компоновки данных
	Если ЗначениеЗаполнено(ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных)
		ИЛИ ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить() = Неопределено Тогда
		
		СхемаИНастройки = Справочники.СтруктураЦелей.ОписаниеИСхемаКомпоновкиДанныхЦелиПоИмениМакета(
			ЦельСсылка,
			ДанныеЦелевогоПоказателя.СхемаКомпоновкиДанных);
		СхемаКомпоновкиДанных = СхемаИНастройки.СхемаКомпоновкиДанных;
	Иначе
		СхемаКомпоновкиДанных = ДанныеЦелевогоПоказателя.ХранилищеСхемыКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Настройки = ДанныеЦелевогоПоказателя.ХранилищеНастроекКомпоновкиДанных.Получить();
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникДоступныхНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
		
	КомпоновщикНастроек.Инициализировать(ИсточникДоступныхНастроек);
	Если НЕ Настройки = Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КонецЕсли;
	
	// Заполним обязательный параметр ВалютаРасчета для СКД где он есть и не заполнен
	ПараметрВалютаРасчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ПользовательскиеНастройки, "ВалютаРасчета");
	Если НЕ ПараметрВалютаРасчета = Неопределено
		И ПараметрВалютаРасчета.Значение = Справочники.Валюты.ПустаяСсылка() Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек.ПользовательскиеНастройки,
				"ВалютаРасчета",
				МониторингЦелевыхПоказателей.ПолучитьВалютуПоУмолчанию(),
				Истина);
	КонецЕсли;
	
	Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
	
КонецФункции

// Возвращает служебные поля-ресурсы, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив из Строка - массив служебных полей-ресурсов.
//
Функция СлужебныеПоляЗначенияАнализа() Экспорт
	
	СлужебныеПоля = Новый Массив;
	
	СлужебныеПоля.Добавить("ЦелевоеЗначение");
	СлужебныеПоля.Добавить("ЦелевойДиапазонМаксимум");
	СлужебныеПоля.Добавить("ЦелевойДиапазонМинимум");
	СлужебныеПоля.Добавить("ГраничноеНегативноеОтклонение");
	СлужебныеПоля.Добавить("ГраничноеПозитивноеОтклонение");
	СлужебныеПоля.Добавить("ПриведенноеГраничноеНегативноеОтклонение");
	СлужебныеПоля.Добавить("ПриведенноеГраничноеПозитивноеОтклонение");
	
	Возврат СлужебныеПоля;
	
КонецФункции

// Возвращает служебные поля-измерения, недоступные для выбора пользователем
//
// Возвращаемое значение:
//	Массив из Строка - массив служебных полей-измерений.
//
Функция СлужебныеПоляОбъектаАнализа() Экспорт
	
	СлужебныеПоля = Новый Массив;
	
	СлужебныеПоля.Добавить("ВидОтклоненияОтЦелевогоЗначения");
	СлужебныеПоля.Добавить("ВидЦелевогоЗначения");
	СлужебныеПоля.Добавить("ДатаЦелевыхЗначений");
	СлужебныеПоля.Добавить("Период");
	СлужебныеПоля.Добавить("СистемныеПоля");
	СлужебныеПоля.Добавить("ПараметрыДанных");
	
	// Поля-периоды не являются объектами анализа
	СлужебныеПоля.Добавить("ПериодДень");
	СлужебныеПоля.Добавить("ПериодНеделя");
	СлужебныеПоля.Добавить("ПериодДекада");
	СлужебныеПоля.Добавить("ПериодМесяц");
	СлужебныеПоля.Добавить("ПериодКвартал");
	СлужебныеПоля.Добавить("ПериодПолугодие");
	СлужебныеПоля.Добавить("ПериодГод");
	
	Возврат СлужебныеПоля;
	
КонецФункции

// Возвращает массив имен доступных для выбора макетов
//
// Возвращаемое значение:
//	Массив из Структура - массив имен доступных для выбора макетов:
//		*Имя - Строка - Имя макета.
//		*Синоним - Строка - Синоним макета.
//
Функция ШаблоныСхемыКомпоновкиДанных() Экспорт
	Шаблоны = Новый Массив;
	
	ИспользоватьПроизводство21 = Ложь;
	
	Для каждого Макет Из Метаданные.Справочники.СтруктураЦелей.Макеты Цикл
		Если Макет.ТипМакета <> Метаданные.СвойстваОбъектов.ТипМакета.СхемаКомпоновкиДанных
			Или Макет.Имя = "ШаблоннаяСхемаКомпоновкиДанных" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ИспользоватьПроизводство21
			И (Макет.Имя = "ИсполнениеПлановПроизводстваПредопределенный" 
				Или Макет.Имя = "ПросроченныеПроизводственныеЗаказыПредопределенный") Тогда
			Продолжить;
		КонецЕсли;
		
		Шаблоны.Добавить(Новый Структура("Имя, Синоним", Макет.Имя, Макет.Синоним));
	КонецЦикла;
	
	Возврат Шаблоны;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее


// Отключает отборы, если выключены соответствующие функциональные опции.
// 
// Параметры:
// 	Настройки - НастройкиКомпоновкиДанных - настройки.
Процедура ОтключитьОтборыПоФункциональнымОпциям(Настройки)
	ИспользоватьПартнеровКакКонтрагентов		= ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	ИспользоватьНесколькоОрганизаций			= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	ИспользоватьНесколькоКасс					= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ИспользоватьНесколькоРасчетныхСчетов		= ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользоватьХарактеристикиНоменклатуры		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьКлассификациюКлиентов			= ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж");
	
	Отборы = Настройки.Отбор.Элементы;
	ИзменяемыеОтборы = Новый Соответствие;
	Для Каждого Отбор Из Отборы Цикл
		Если ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ИзменяемыеОтборы.Вставить(Отбор.ЛевоеЗначение, Отбор);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Контрагент");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоОрганизаций Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Организация");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоКасс Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Касса");
	КонецЕсли;
	
	Если Не ИспользоватьНесколькоРасчетныхСчетов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "БанковскийСчет");
	КонецЕсли;
	
	Если Не ИспользоватьХарактеристикиНоменклатуры Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Характеристика");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификациюКлиентов Тогда
		ОтключитьОтбор(Настройки, ИзменяемыеОтборы, "Класс");
	КонецЕсли;
КонецПроцедуры

Процедура ОтключитьОтбор(Настройки, ИзменяемыеОтборы, ИмяПоля)
	ПроверяемоеПоле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	УдаляемыйОтбор = ИзменяемыеОтборы.Получить(ПроверяемоеПоле);
	Если Не УдаляемыйОтбор = Неопределено Тогда
		Настройки.Отбор.Элементы.Удалить(УдаляемыйОтбор);
	КонецЕсли;
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

Процедура ПослеЗагрузкиДанных(Контейнер) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтруктураЦелей.Ссылка,
	|	СтруктураЦелей.СхемаКомпоновкиДанных
	|ИЗ
	|	Справочник.СтруктураЦелей КАК СтруктураЦелей";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ПустаяСтрока(Выборка.СхемаКомпоновкиДанных) Тогда
			СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.СтруктураЦелей -
			СправочникОбъект.ХранилищеСхемыКомпоновкиДанных = Новый ХранилищеЗначения("");
			СправочникОбъект.ХранилищеНастроекКомпоновкиДанных = Новый ХранилищеЗначения("");
			
			СправочникОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
