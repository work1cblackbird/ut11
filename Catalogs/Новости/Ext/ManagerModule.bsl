///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2023, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция возвращает ХТМЛ текста новостей для 1С.
// 
// Параметры:
//  Новости              - СправочникОбъект.Новость, Структура, Массив из СправочникСсылка.Новости - данные новости или списка новостей;
//  ПараметрыОтображения - Структура, Неопределено - структура, в которой передаются параметры для отображения новости. Ключи:
//    * ОтображатьЗаголовок - Булево - Истина, если необходимо отображать заголовок.
//                                     Имеет смысл когда выводятся подряд несколько новостей.
//
// Возвращаемое значение:
//   Строка - текст в формате html для отображения в форме новости.
//
Функция ПолучитьХТМЛТекстНовостей(Новости, ПараметрыОтображения = Неопределено) Экспорт

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();

	Если ТипЗнч(Новости) = ТипМассив Тогда
		МассивНовостей = Новости;
	Иначе
		МассивНовостей = Новый Массив;
		МассивНовостей.Добавить(Новости);
	КонецЕсли;

	ПараметрыОтображенияЭталон = Новый Структура;
		ПараметрыОтображенияЭталон.Вставить("ОтображатьЗаголовок", Ложь);
	Если ТипЗнч(ПараметрыОтображения) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОтображенияЭталон, ПараметрыОтображения);
	КонецЕсли;

	ШаблонТекстХТМЛ = "
		|<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
		|<html>
		|	<head>
		|		<!-- Здесь можно вставить свои теги для заголовка -->
		|		<style type=""text/css"">
		|			/* Основные параметры текста */
		|			body {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-size: 10pt; /* Размер основного шрифта в пунктах */
		|			}
		|
		|			/* Блок заголовка 1 уровня */
		|			h1 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 150%; /* Размер основного шрифта в процентах */
		|				margin-left: 0em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 2 уровня */
		|			h2 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 140%; /* Размер основного шрифта в процентах */
		|				margin-left: 0.5em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 3 уровня */
		|			h3 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 130%; /* Размер основного шрифта в процентах */
		|				margin-left: 2em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 4 уровня */
		|			h4 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 120%; /* Размер основного шрифта в процентах */
		|				margin-left: 2.5em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 5 уровня */
		|			h5 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 120%; /* Размер основного шрифта в процентах */
		|				margin-left: 3em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок заголовка 6 уровня */
		|			h6 {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 120%; /* Размер основного шрифта в процентах */
		|				margin-left: 3.5em;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок Длинная цитата */
		|			blockquote {
		|				font-family: monospace; /* Семейство шрифтов */
		|				font-style: normal;
		|				color: #808080;
		|				background-color: #F0F0DA;
		|			}
		|
		|			/* Блок Короткая цитата */
		|			q {
		|				font-family: monospace; /* Семейство шрифтов */
		|				font-style: normal;
		|				color: #808080;
		|				background-color: #F0F0DA;
		|			}
		|
		|			/* Блок Источник цитаты */
		|			cite {
		|				font-family: monospace; /* Семейство шрифтов */
		|				font-style: normal;
		|				color: #808080;
		|				background-color: #F0F0DA;
		|			}
		|
		|			/* Блок Ввод с клавиатуры */
		|			kbd {
		|				font-family: monospace; /* Семейство шрифтов */
		|				background-color: #E6E6E6;
		|				border-width:thin;
		|				border-style: outset;
		|				border-color: #FFFBF0;
		|				padding-left: 2px;
		|				padding-right: 4px; 
		|			}
		|
		|			/* Блок Программный код */
		|			code {
		|				font-family: monospace; /* Семейство шрифтов */
		|				color: #3366FF;
		|				background-color: #FFFFD5;
		|			}
		|
		|			/* Блок Акцентированный текст */
		|			em {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bolder;
		|			}
		|
		|			/* Блок Акцентированный текст, приоритет */
		|			em.priority {
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: red;
		|			}
		|
		|			/* Блок Акцентированный текст, приоритет завершился по сроку */
		|			em.priority_ended {
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: grey;
		|			}
		|
		|			/* Блок Акцентированный текст, иконка приоритета */
		|			em.priority_icon {
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: red;
		|			}
		|
		|			/* Блок Параграф */
		|			p {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|				margin-bottom: 0.25em;
		|			}
		|
		|			/* Блок список маркированный */
		|			ul {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|				margin-bottom: 0.25em;
		|			}
		|
		|			/* Блок список нумерованный */
		|			ol {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|				margin-bottom: 0.25em;
		|			}
		|
		|			/* Блок элемент списка */
		|			li {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-style: normal;
		|				font-weight: normal;
		|			}
		|
		|			/* Цвет неактуальной новости */
		|			div.outofdate{
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: grey;
		|			}
		|
		|			/* Цвет актуальной новости */
		|			div.actual{
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: black;
		|			}
		|
		|			/* Блок информации о важности или актуальности */
		|			div#importanceData{
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				font-style: normal;
		|				font-size: 8pt; /* Размер основного шрифта в пунктах */
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок информации Весь текст новости */
		|			div#newsData{
		|				font-family: Arial; /* Семейство шрифтов */
		|			}
		|
		|			/* Блок информации Заголовок */
		|			div#newsHeader{
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-weight: bold;
		|				margin-bottom: 0.5em;
		|			}
		|
		|			/* Блок информации Только текст новости */
		|			div#newsText{
		|				font-family: Arial; /* Семейство шрифтов */
		|			}
		|
		|			/* Блок информации о категориях */
		|			div#newsCategories{
		|				font-family: Arial; /* Семейство шрифтов */
		|				color: grey;
		|				font-style: italic;
		|				font-size: 8pt; /* Размер основного шрифта в пунктах */
		|				margin-top: 1em;
		|			}
		|
		|			/* Блок информации о простых категориях */
		|			div#newsCategoriesSimple{
		|			}
		|
		|			/* Блок информации о категориях интервалы версий */
		|			div#newsCategoriesVersions{
		|			}
		|
		|			/* Блок информации ссылка на полный текст новости */
		|			div#newsHyperlink{
		|				font-family: Arial; /* Семейство шрифтов */
		|				margin-top: 2em;
		|			}
		|
		|			/* Гиперссылка, не посещенная */
		|			a:link {
		|			}
		|
		|			/* Гиперссылка, посещенная */
		|			a:visited {
		|			}
		|
		|			/* Гиперссылка при наведении курсора мыши */
		|			a:hover {
		|				background: #B8D7EB;
		|			}
		|
		|			/* Класс для всех горизонтальных линий */
		|			hr {
		|				color: #C8C8C8;
		|			}
		|
		|			/* Класс для скрытия блоков текста */
		|			.hidden {
		|				display: none;
		|			}
		|
		|			/* Здесь можно вставить свои стили */
		|
		|		</style>
		|	</head>
		|	<body>
		|		%Новости%
		|	</body>
		|</html>";

	ШаблонНовостиХТМЛ = "
		|
		|		<div id=""newsEntry"" news_id=""%ИдентификаторНовости%"">
		|			<h1 id=""newsHeader"">
		|				%Заголовок%
		|			</h1>
		|			<div id=""importanceData"">
		|				<a id=""publishDate"">%ДатаПубликации%</a>
		|				&nbsp;
		|				<a id=""importanceCaption"">%ИнформацияОВажности%</a>
		|			</div>
		|			<div id=""newsData"" class=""%КлассАктуальности%"">
		|				<div id=""newsText"">
		|					%ТекстНовостиДля1С%
		|				</div>
		|				<div id=""newsHyperlink"">
		|					%СсылкаНаПолныйТекстНовости%
		|				</div>
		|			</div>
		|		</div>
		|
		|";

	ТекстВсехНовостейХТМЛ = "";

	С = 0; // АПК:247 это счетчик.
	Для Каждого ТекущаяНовость Из МассивНовостей Цикл

		ТекстТекущейНовостиХТМЛ = ШаблонНовостиХТМЛ;

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%ИдентификаторНовости%",
			ТекущаяНовость.УИННовости);

		// Новость еще актуальна?
		Если (ТекущаяНовость.ДатаЗавершения = '00010101')
				ИЛИ (ТекущаяНовость.ДатаЗавершения > ТекущаяУниверсальнаяДата) Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				"%КлассАктуальности%",
				"actual");
			// Информация о важности.
			// Проверять только основное свойство важности, не включая важности для объектов метаданных.
			// Важность зависит от реквизита ДатаСбросаВажности.
			Если (ТекущаяНовость.ДатаСбросаВажности <> '00010101')
					И (ТекущаяНовость.ДатаСбросаВажности <= ТекущаяУниверсальнаяДата) Тогда
				ВажностьСброшена = Истина;
			Иначе
				ВажностьСброшена = Ложь;
			КонецЕсли;

			Если ТекущаяНовость.Важность = 0 Тогда // Обычная новость
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%ИнформацияОВажности%",
					"");
			ИначеЕсли ТекущаяНовость.Важность = 1 Тогда
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%ИнформацияОВажности%",
					?(ВажностьСброшена = Истина,
						"<em class=""priority_ended"">"
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Была очень важной до %1'"),
								Формат(
									МестноеВремя(ТекущаяНовость.ДатаСбросаВажности, ЧасовойПояс()),
									ОбработкаНовостейСлужебный.ФорматДатыВремениДляНовости()))
							+ "</em>",
						"<em class=""priority_icon"">!!! </em>
							|<em class=""priority"">"
							+ НСтр("ru='Очень важно'")
							+ "</em>"));
			ИначеЕсли ТекущаяНовость.Важность = 2 Тогда
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%ИнформацияОВажности%",
					?(ВажностьСброшена = Истина,
						"<em class=""priority_ended"">"
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Была важной до %1'"),
								Формат(
									МестноеВремя(ТекущаяНовость.ДатаСбросаВажности, ЧасовойПояс()),
									ОбработкаНовостейСлужебный.ФорматДатыВремениДляНовости()))
							+ "</em>",
						"<em class=""priority_icon"">! </em>
							|<em class=""priority"">"
							+ НСтр("ru='Важно'")
							+ "</em>"));
			КонецЕсли;
		Иначе
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				"%КлассАктуальности%",
				"outofdate");
			// Для неактуальной новости не выводить информацию о важности - она уже НЕважная в любом случае.
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				"%ИнформацияОВажности%",
				"<em>"
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Новость неактуальна с %1'"),
						Формат(
							МестноеВремя(ТекущаяНовость.ДатаЗавершения, ЧасовойПояс()),
							ОбработкаНовостейСлужебный.ФорматДатыВремениДляНовости()))
					+ "</em>");
		КонецЕсли;

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%Заголовок%",
			?(ПараметрыОтображенияЭталон.ОтображатьЗаголовок = Истина, СокрЛП(ТекущаяНовость.Наименование), ""));

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%ДатаПубликации%",
			Формат(
				МестноеВремя(ТекущаяНовость.ДатаПубликации, ЧасовойПояс()),
				ОбработкаНовостейСлужебный.ФорматДатыВремениДляНовости()));

		// ДатаПубликации хранится в часовом поясе UTC+0, надо привести к текущему часовому поясу.

		лкТекстНовости = ТекущаяНовость.ТекстНовости;
		лкТекстНовости = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(лкТекстНовости);

		ТекстТекущейНовостиХТМЛ = СтрЗаменить(
			ТекстТекущейНовостиХТМЛ,
			"%ТекстНовостиДля1С%",
			лкТекстНовости);

		Если ПустаяСтрока(ТекущаяНовость.СсылкаНаПолныйТекстНовости) Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(ТекстТекущейНовостиХТМЛ, "%СсылкаНаПолныйТекстНовости%", "");
		Иначе
			// Если ссылка является специальной ссылкой (начинается с "1C:" английскими буквами),
			//  то не выводить ее значение, а просто написать "здесь".
			Если СтрНайти(ВРег(ТекущаяНовость.СсылкаНаПолныйТекстНовости), ВРег("1C:")) = 1 Тогда
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%СсылкаНаПолныйТекстНовости%",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Полный текст новости <a href=""%1"">здесь</a>'"),
						СокрЛП(ТекущаяНовость.СсылкаНаПолныйТекстНовости)));
			Иначе
				ТекстТекущейНовостиХТМЛ = СтрЗаменить(
					ТекстТекущейНовостиХТМЛ,
					"%СсылкаНаПолныйТекстНовости%",
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Полный текст новости: <a href=""%1"">%1</a>'"),
						СокрЛП(ТекущаяНовость.СсылкаНаПолныйТекстНовости)));
			КонецЕсли;
		КонецЕсли;

		// Специальные теги:
		// Если в предопределенной новости Debug с id=8f9c7dca-3641-4ce1-88cb-5ea1ad021dfd
		//  есть тег <a id="ClientDebugInformation" />, то это специальная отладочная новость,
		//  в которой необходимо дополнительно указать:
		//  - настроенные административные отборы по этой ленте новостей;
		//  - настроенные пользовательские отборы по этой ленте новостей.
		ТегКлиентскойИнформации = "<a id=""ClientDebugInformation"" />";
		Если СтрНайти(ТекстТекущейНовостиХТМЛ, ТегКлиентскойИнформации) > 0 Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				ТегКлиентскойИнформации,
				ПолучитьХТМЛПредставлениеКлиентскихНастроекВлияющихНаОтображениеНовостей(ТекущаяНовость, ПараметрыОтображенияЭталон));
		КонецЕсли;

		// Если в новости есть такой тег "<div id=""IPPConfigUpdate"" />",
		//  значит эта новость содержит информацию об обновлении этой конфигурации
		//  и для пользователя с административными правами надо вывести вместо этого тега
		//  гиперссылку на запуск процедуры обновления конфигурации.
		#Если НЕ ТолстыйКлиентУправляемоеПриложение Тогда
			ТегСсылкиНаПроцедуруОбновления = "<div id=""IPPConfigUpdate"" />";
			Если СтрНайти(ТекстТекущейНовостиХТМЛ, ТегСсылкиНаПроцедуруОбновления) > 0 Тогда
				Если ОбработкаНовостейПовтИсп.ЭтоАдминистратор() Тогда
					ТекстТекущейНовостиХТМЛ = СтрЗаменить(
						ТекстТекущейНовостиХТМЛ,
						ТегСсылкиНаПроцедуруОбновления,
						"Нажмите <a href=""1C:IPPConfigUpdate"" title=""Нажмите для обновления конфигурации"">здесь</a> для обновления конфигурации");
				КонецЕсли;
			КонецЕсли;
		#КонецЕсли

		// В новости с id=6588f3f9-d569-478f-a370-7cd75d833966 сообщается о том, что по ленте новостей
		//  давно не были получены новости из-за технических ошибок.
		// Новость должна создаваться самой конфигурацией, но возможны ситуации, что сервер сам предупреждает, что он будет отключен.
		// Если в тексте новости есть текст "<!-- Текст для администраторов -->", то необходимо
		//  заменить его на гиперссылку открытия элемента ленты новостей для исправления автозагрузки новостей на ручное обновление.
		Если СокрЛП(ВРег(ТекущаяНовость.УИННовости)) = ВРег("6588f3f9-d569-478f-a370-7cd75d833966") Тогда
			Если ОбработкаНовостейПовтИсп.ЭтоАдминистратор() Тогда
				Если СтрНайти(ТекстТекущейНовостиХТМЛ, "<!-- Текст для администраторов -->") > 0 Тогда
					ТекстДляАдминистраторов = "
						|<br/>
						|<div id=""AdminBlock"">Возможные дальнейшие действия:<br>
						|	<ul>
						|		<li>Если у ленты новостей изменился адрес (URL), то нажмите <a href=""%СсылкаНаЛентуНовостей%"" title=""Нажмите для редактирования ленты новостей"">здесь</a> для открытия элемента справочника <b>Ленты новостей</b> и поправьте значение поля <b>Сайт</b> или <b>Имя файла</b> на закладке <b>Настройки загрузки новостей</b></li>
						|		<li>Если возникли временные трудности с работой сервера новостей, то можно отключить автообновление ленты новостей. Для этого нажмите <a href=""%СсылкаНаЛентуНовостей%"" title=""Нажмите для редактирования ленты новостей"">здесь</a> для открытия элемента справочника <b>Ленты новостей</b>, перейдите на закладку <b>Частота обновления</b> и выберите пункт <b>Обновлять только вручную</b>.</li>
						|		<li>Если лента новостей более недоступна, то можно просто установить ей пометку удаления в <a href=""%СсылкаНаСписокЛентНовостей%"" title=""Нажмите для открытия списка лент новостей"">форме списка</a>.</li>
						|		<li>Если лента новостей пустая по причине, что поставщик новостей ее долго не наполняет новостями, а технических трудностей с доступом к этой ленте нет, то просто игнорируйте это сообщение.</li>
						|	</ul>
						|</div>
						|";
					ТекстДляАдминистраторов = СтрЗаменить(
						ТекстДляАдминистраторов,
						"%СсылкаНаЛентуНовостей%",
						ПолучитьНавигационнуюСсылку(ТекущаяНовость.ЛентаНовостей));
					ТекстДляАдминистраторов = СтрЗаменить(
						ТекстДляАдминистраторов,
						"%СсылкаНаСписокЛентНовостей%",
						"e1cib/list/Справочник.ЛентыНовостей");
					ТекстТекущейНовостиХТМЛ = СтрЗаменить(
						ТекстТекущейНовостиХТМЛ,
						"<!-- Текст для администраторов -->",
						ТекстДляАдминистраторов);
				КонецЕсли;
			Иначе
				Если СтрНайти(ТекстТекущейНовостиХТМЛ, "<!-- Текст для администраторов -->") > 0 Тогда
					ТекстТекущейНовостиХТМЛ = СтрЗаменить(
						ТекстТекущейНовостиХТМЛ,
						"<!-- Текст для администраторов -->",
						НСтр("ru='Обратитесь к администратору'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Показать / скрыть блоки текста, ограниченные специальными комментариями.
		НастройкиПоказаСкрытияБлоковТекста = ОбработкаНовостейПовтИсп.ПолучитьНастройкиПоказаСкрытияБлоковТекста();
		Для Каждого ТекущаяНастройка Из НастройкиПоказаСкрытияБлоковТекста Цикл
			Если ТекущаяНастройка.Скрыть = Истина Тогда
				БлокНайден = Истина;
				Пока БлокНайден = Истина Цикл
					БлокНайден = Ложь;
					ГдеНачалоБлока = СтрНайти(ТекстТекущейНовостиХТМЛ, ТекущаяНастройка.ТэгНачалаБлока);
					Если ГдеНачалоБлока > 0 Тогда
						ГдеКонецБлока = СтрНайти(ТекстТекущейНовостиХТМЛ, ТекущаяНастройка.ТэгКонцаБлока, , ГдеНачалоБлока);
						Если ГдеКонецБлока > 0 Тогда
							// Обнаружены начало и конец блока текста, который надо скрыть.
							БлокНайден = Истина;
							ТекстТекущейНовостиХТМЛ =
								Лев(ТекстТекущейНовостиХТМЛ, ГдеНачалоБлока - 1)
								+ Прав(ТекстТекущейНовостиХТМЛ, СтрДлина(ТекстТекущейНовостиХТМЛ) - ГдеКонецБлока - СтрДлина(ТекущаяНастройка.ТэгКонцаБлока) + 1)
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;

		// Текст новости может быть динамически изменен - возможно, будут подставлены какие-то тексты вместо идентификаторов,
		//  удалены блоки текста и т.п.
		ОбработкаНовостейВызовСервера.ДополнительноОбработатьТекстНовостиПередПоказом(ТекущаяНовость, ТекстТекущейНовостиХТМЛ);

		ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + ТекстТекущейНовостиХТМЛ;

		// После каждой новости кроме последней вывести горизонтальную линию
		Если С < (МассивНовостей.Количество()-1) Тогда
			ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + Символы.ПС + "<hr/>" + Символы.ПС;
		КонецЕсли;

		С = С + 1; // АПК:247 это счетчик.
	КонецЦикла;

	ТекстХТМЛ = ШаблонТекстХТМЛ;
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%Новости%", ТекстВсехНовостейХТМЛ);

	// Текст всех новостей может быть динамически изменен - возможно, будут подставлены какие-то тексты вместо идентификаторов,
	//  добавлены / изменены стили, удалены блоки текста и т.п.
	ОбработкаНовостейВызовСервера.ДополнительноОбработатьТекстСпискаНовостейПередПоказом(ТекстХТМЛ);

	Возврат ТекстХТМЛ;

КонецФункции

// Функция возвращает ХТМЛ текст новости для внешних источников (RSS-агрегаторов).
// 
// Параметры:
//  Новости              - СправочникОбъект.Новость, Структура, Массив из СправочникСсылка.Новости - данные новости или списка новостей;
//  ПараметрыОтображения - Структура, Неопределено - структура, в которой передаются параметры для отображения новости. Ключи:
//    * ОтображатьЗаголовок - Булево - Истина, если необходимо отображать заголовок.
//                                     Имеет смысл когда выводятся подряд несколько новостей.
//
// Возвращаемое значение:
//   Строка - текст в формате html для отображения в форме новости.
//
Функция ПолучитьХТМЛТекстНовостейДляВнешнихИсточников(Новости, ПараметрыОтображения = Неопределено) Экспорт

	ТипМассив    = Тип("Массив");
	ТипСтруктура = Тип("Структура");

	Если ТипЗнч(Новости) = ТипМассив Тогда
		МассивНовостей = Новости;
	Иначе
		МассивНовостей = Новый Массив;
		МассивНовостей.Добавить(Новости);
	КонецЕсли;

	ПараметрыОтображенияЭталон = Новый Структура;
		ПараметрыОтображенияЭталон.Вставить("ОтображатьЗаголовок", Ложь);
	Если ТипЗнч(ПараметрыОтображения) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыОтображенияЭталон, ПараметрыОтображения);
	КонецЕсли;

	// ДатаПубликации хранится в часовом поясе UTC+0, надо привести к текущему часовому поясу.

	ШаблонТекстХТМЛ = "
		|<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"">
		|<html>
		|	<head>
		|		<style type=""text/css"">
		|			/* Основные параметры текста */
		|			body {
		|				font-family: Arial; /* Семейство шрифтов */
		|				font-size: 10pt; /* Размер основного шрифта в пунктах */
		|			}
		|		</style>
		|	</head>
		|	<body>
		|		%Новости%
		|	</body>
		|</html>";

	ТекстВсехНовостейХТМЛ = "";

	С = 0; // АПК:247 это счетчик.
	Для Каждого ТекущаяНовость Из МассивНовостей Цикл

		// В новостном центре ДатаПубликации не хранится в объекте новости, а проставляется в регистре накопления
		//  при публикации в каждый канал, поэтому взять текущую дату.

		ТекстТекущейНовостиХТМЛ = ТекущаяНовость.ТекстНовостиДляВнешнихИсточников;
		ТекстТекущейНовостиХТМЛ = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(ТекстТекущейНовостиХТМЛ);

		// Специальные теги:
		// Вставить список настроенных фильтров.
		ТегКлиентскойИнформации = "<a id=""ClientDebugInformation"" />";
		Если СтрНайти(ТекстТекущейНовостиХТМЛ, ТегКлиентскойИнформации) > 0 Тогда
			ТекстТекущейНовостиХТМЛ = СтрЗаменить(
				ТекстТекущейНовостиХТМЛ,
				ТегКлиентскойИнформации,
				ПолучитьХТМЛПредставлениеКлиентскихНастроекВлияющихНаОтображениеНовостей(ТекущаяНовость, ПараметрыОтображенияЭталон));
		КонецЕсли;

		// После каждой новости кроме последней вывести горизонтальную линию.
		Если С < (МассивНовостей.Количество()-1) Тогда
			ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + ТекстТекущейНовостиХТМЛ + Символы.ПС + "<hr/>" + Символы.ПС;
		Иначе
			ТекстВсехНовостейХТМЛ = ТекстВсехНовостейХТМЛ + ТекстТекущейНовостиХТМЛ;
		КонецЕсли;

		С = С + 1; // АПК:247 это счетчик.
	КонецЦикла;

	ТекстХТМЛ = ШаблонТекстХТМЛ;
	ТекстХТМЛ = СтрЗаменить(ТекстХТМЛ, "%Новости%", ТекстВсехНовостейХТМЛ);

	Возврат ТекстХТМЛ;

КонецФункции

// Получить список новостей.
// Для модели сервиса должно вызываться в разделенном сеансе, в противном случае неправильно сработают отборы по области данных.
//
// Параметры:
//  ТаблицаНовостей       - ДанныеФормыКоллекция, ТаблицаЗначений - эту таблицу необходимо заполнить;
//  Пользователь          - СправочникСсылка.Пользователи - текущий пользователь;
//  ПараметрыПолученияНовостей - Структура - ключи:
//   * ВариантОтбора - значение варианта отбора:
//     - 0 - все новости (без учета корзины);
//           Также можно передать ключ "КоличествоНовостей", который будет подставлен в запрос
//             как ПЕРВЫЕ... (приоритет этого ключа выше, чем у настройки "НастройкиПоказаНовостей");
//     - 1 - по ленте новостей (без учета корзины), должен быть ключ ЛентаНовостей. Если ключа "ЛентаНовостей" нет, или он пустой,
//           или неправильного типа, то будут отобраны все новости (без учета корзины).
//           Также можно передать ключ "КоличествоНовостей", который будет подставлен в запрос
//             как ПЕРВЫЕ... (приоритет этого ключа выше, чем у настройки "НастройкиПоказаНовостей");
//     - 2 - результат поиска. Также должен быть передан ключ "СписокНайденныхНовостей" типа СписокЗначений;
//     - 3 - контекстные новости (новости по объекту метаданных / форме). Также должны быть переданы структура с ключами "Метаданные"
//           и "Форма". Если значение ключа Форма = Неопределено, то будут получены новости по всем формам для этого объекта метаданных;
//     - 4 - Помеченные новости (без учета корзины). Также должен быть передан ключ "Тег" типа Строка.
//           Избранные новости отбираются этим же вариантом отбора, только тег = "Пометка1";
//     - 5 - Важные новости (без учета корзины), у которых важность = "важно" или "очень важно";
//     - 6 - Популярная тема. Также должен быть передан ключ "ИмяТемы" типа Строка.;
//     - 7 - Пользовательский отбор. Также должен быть передан ключ "ИмяОтбора" типа Строка
//           (это имя фильтра из ХранилищаНастроек.НастройкиНовостей);
//     - 8 - Корзина;
//   * ЛентаНовостей - только для ВариантОтбора = 1 - отбирать по этой ленте новостей;
//   * КоличествоНовостей - только для ВариантОтбора = 0 или 1 - будет подставлен в запрос
//                     как "ПЕРВЫЕ ..." (приоритет этого ключа выше, чем у настройки "НастройкиПоказаНовостей");
//   * СписокНайденныхНовостей - СписокЗначений - только для ВариантОтбора = 2 - отбирать по списку новостей;
//   * Метаданные        - Строка - отбирать контекстные новости или определять, что новость должна быть в топе;
//   * Форма             - Строка - отбирать контекстные новости или определять, что новость должна быть в топе;
//   * Тег               - Строка - только для ВариантОтбора = 4 - отбирать помеченные новости;
//   * ПорядокСортировки - Строка - если передан, то будет подставлен в запрос "как есть";
//   * Источник          - Строка - "ФормаПросмотраНовостейРабочийСтол" или "". Для "ФормаПросмотраНовостейРабочийСтол"
//         и варианта отбора = 0 доступно ограничение количества новостей.
//  ИнтерактивныеДействия - Массив из Строка - сюда вернется список интерактивных действий, которые необходимо выполнить на клиенте
//           после получения новостей.
//           Смысл таков, что на сервере нельзя, например, вывести какие-то окна и т.п.,
//             поэтому на сервере будет готовиться список интерактивных действий, а потом на клиенте обрабатываться.
//           Пример - оповещения пользователю (о важных новостях).
//           Интерактивные действия будут обрабатываться ОбработкаНовостейКлиент.ВыполнитьИнтерактивныеДействия.
//           Интерактивные действия заполняются в ОбработкаНовостейПереопределяемый.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей.
//
Процедура ПолучитьСписокНовостей(
			ТаблицаНовостей,
			Пользователь = Неопределено,
			ПараметрыПолученияНовостей,
			ИнтерактивныеДействия) Экспорт

#Область ИнициализацияМетода

	// Переменные - значения отборов.
	Перем МассивКонтекстныхНовостей, ТаблицаКонтекстныхНовостей;

	// Возможна ситуация, когда файловую информационную базу долго не открывали и долго не запускались регламентные задачи пересчета отборов.
	// В этом случае подсистема Новости переходит из состояния "Активна" в "ТребуетсяПересчетОтборовПослеДлительногоОжидания".
	// Т.к. эта форма открывает все новости, а не только важные и очень важные, то состояние подсистемы не учитывается и возвращаются
	//  все новости за исключением тех, которые только что загружены.

	ТипСтруктура            = Тип("Структура");
	ТипСписокЗначений       = Тип("СписокЗначений");
	ТипТаблицаЗначений      = Тип("ТаблицаЗначений");
	ТипДанныеФормыКоллекция = Тип("ДанныеФормыКоллекция");
	ТипЧисло                = Тип("Число");
	ТипСтрока               = Тип("Строка");

	ТекущаяУниверсальнаяДата = ТекущаяУниверсальнаяДата();

	МассивНовостейИзИзбранного = Новый Массив;

	Запрос = Новый Запрос;

	// Запрос будет компоноваться из трех частей:
	// - текст первоначальных отборов;
	// - много временных таблиц (отдельно на каждую ленту новостей + избранное + ...);
	// - итоговое объединение (из всех временных таблиц).
	// Запрос формируется с помощью специальных строк "&Мета" так, чтобы его можно было открыть в конструкторе запросов.
	ТекстЗапросаВсеПервоначальныеОтборы = ""; // Часть 1.

	СтрокиЗапросаВсехВременныхТаблиц = Новый Массив; // Часть 2. Итоговый набор строк.
		СтрокиЗапросаШаблонВременнойТаблицы = Новый Массив; // Шаблон.
		СтрокиЗапросаТекущейВременнойТаблицы = Новый Массив; // Текущий скомпилированный в цикле шаблон.

	СтрокиЗапросаВсехОбъединений = Новый Массив; // Часть 3. Итоговый набор строк.
		СтрокиЗапросаШаблонОбъединения = Новый Массив; // Шаблон.
		СтрокиЗапросаТекущегоОбъединения = Новый Массив; // Текущий скомпилированный в цикле шаблон.

	ПараметрыПолученияНовостейЭталон = Новый Структура;
		ПараметрыПолученияНовостейЭталон.Вставить("Метаданные"             , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("Форма"                  , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("ВариантОтбора"          , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("ПорядокСортировки"      , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("ЛентаНовостей"          , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("КоличествоНовостей"     , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("СписокНайденныхНовостей", Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("Источник"               , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("Тег"                    , Неопределено);
		ПараметрыПолученияНовостейЭталон.Вставить("ИмяОтбора"              , Неопределено);
	ЗаполнитьЗначенияСвойств(ПараметрыПолученияНовостейЭталон, ПараметрыПолученияНовостей);

	Если (ТипЗнч(ПараметрыПолученияНовостейЭталон.Метаданные) <> ТипСтрока) Тогда
		ПараметрыПолученияНовостейЭталон.Метаданные = "";
	КонецЕсли;
	Если (ТипЗнч(ПараметрыПолученияНовостейЭталон.Форма) <> ТипСтрока) Тогда
		ПараметрыПолученияНовостейЭталон.Форма = "";
	КонецЕсли;
	Если ТипЗнч(ПараметрыПолученияНовостейЭталон.ВариантОтбора) <> ТипЧисло Тогда
		ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0;
	Иначе
		Если (ПараметрыПолученияНовостейЭталон.ВариантОтбора < 0)
				ИЛИ (ПараметрыПолученияНовостейЭталон.ВариантОтбора > 8) Тогда
			ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ПараметрыПолученияНовостейЭталон.ПорядокСортировки) <> ТипСтрока Тогда
		ПараметрыПолученияНовостейЭталон.ПорядокСортировки = "";
	КонецЕсли;
	Если (ТипЗнч(ПараметрыПолученияНовостейЭталон.КоличествоНовостей) <> ТипЧисло)
			ИЛИ (ПараметрыПолученияНовостейЭталон.КоличествоНовостей < 0) Тогда
		ПараметрыПолученияНовостейЭталон.КоличествоНовостей = 0; // Все новости
	КонецЕсли;
	Если (ТипЗнч(ПараметрыПолученияНовостейЭталон.Источник) <> ТипСтрока) Тогда
		ПараметрыПолученияНовостейЭталон.Источник = "";
	КонецЕсли;

#КонецОбласти

#Область Обработка

#Область Обработка_ОсновныеНастройки

	Если ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0 Тогда // Все
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей".
		Если ТипЗнч(ПараметрыПолученияНовостейЭталон.ЛентаНовостей) = Тип("СправочникСсылка.ЛентыНовостей")
				И НЕ ПараметрыПолученияНовостейЭталон.ЛентаНовостей.Пустая() Тогда
			// Все настроено правильно
		Иначе
			ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 2 Тогда // Результат поиска, должен быть передан ключ "СписокНайденныхНовостей".
		Если ТипЗнч(ПараметрыПолученияНовостейЭталон.СписокНайденныхНовостей) = ТипСписокЗначений
				И ПараметрыПолученияНовостейЭталон.СписокНайденныхНовостей.Количество() > 0 Тогда
			// Все настроено правильно
		Иначе
			ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 3 Тогда // Контекстные новости, должен быть передан отбор в виде ключей "Метаданные" и "Форма".
		МассивКонтекстныхНовостей = Новый Массив;
		Если (НЕ ПустаяСтрока(ПараметрыПолученияНовостейЭталон.Метаданные)) Тогда
			// Здесь список лент новостей для получения контекстных новостей дополнительно никак
			//  не обрабатывается - показываются контекстные новости по всем лентам новостей.
			СписокЛентНовостей = Неопределено; // По всем лентам новостей
			//// ОбработкаНовостейПереопределяемый.ПереопределитьСписокЛентНовостейДляКонтекстныхНовостей(СписокЛентНовостей).
			НастройкиПолученияНовостей = Неопределено;
			ТаблицаКонтекстныхНовостей = ОбработкаНовостейСлужебный.ПолучитьКонтекстныеНовости(
				СписокЛентНовостей,
				ПараметрыПолученияНовостейЭталон.Метаданные,
				ПараметрыПолученияНовостейЭталон.Форма,
				Неопределено,
				"Для форм, простой", // Идентификатор.
				НастройкиПолученияНовостей);
			// Здесь таблица контекстных новостей дополнительно никак не обрабатывается - показываются все контекстные новости.
			// //// ОбработкаНовостейПереопределяемый.ДополнительноОбработатьТаблицуКонтекстныхНовостей(...).
			МассивКонтекстныхНовостей = ТаблицаКонтекстныхНовостей.ВыгрузитьКолонку("Новость");
		КонецЕсли;
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 4 Тогда // Помеченные новости, должен быть передан ключ "Тег".
		Если ТипЗнч(ПараметрыПолученияНовостейЭталон.Тег) = ТипСтрока
				И НЕ ПустаяСтрока(ПараметрыПолученияНовостейЭталон.Тег) Тогда
			// Все настроено правильно
		Иначе
			ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 5 Тогда // Важные новости
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 6 Тогда // Прочитать позже.
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 7 Тогда // Пользовательский отбор, должен быть передан ключ "ИмяОтбора".
		Если ТипЗнч(ПараметрыПолученияНовостейЭталон.ИмяОтбора) = ТипСтрока
				И НЕ ПустаяСтрока(ПараметрыПолученияНовостейЭталон.ИмяОтбора) Тогда
			// Все настроено правильно
		Иначе
			ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0;
		КонецЕсли;
	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 8 Тогда // Корзина.
	КонецЕсли;

	МассивОтключенныхЛентНовостейИзНастроек = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"ОтключенныеЛентыНовостей", // КлючОбъекта.
		""); // КлючНастроек, пока не обрабатывается.

	МассивОтключенныхЛентНовостей = Новый Массив;
	Если ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0 Тогда // Все
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей".
		// Все ленты новостей отключенные, кроме выбранной.
		Запрос = Новый Запрос;
		Запрос.Текст = "
			|ВЫБРАТЬ
			|	Спр.Ссылка КАК ЛентаНовостей
			|ИЗ
			|	Справочник.ЛентыНовостей КАК Спр
			|ГДЕ
			|	Спр.Ссылка <> &ВыбраннаяЛентаНовостей
			|";
		Запрос.УстановитьПараметр("ВыбраннаяЛентаНовостей", ПараметрыПолученияНовостейЭталон.ЛентаНовостей);
		РезультатЗапроса = Запрос.Выполнить(); // ПолучитьСписокНовостей(), получить список лент новостей кроме выбранной
		Если НЕ РезультатЗапроса.Пустой() Тогда
			МассивОтключенныхЛентНовостей = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("ЛентаНовостей");
		КонецЕсли;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 2 Тогда // Результат поиска, должен быть передан ключ "СписокНайденныхНовостей".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 3 Тогда // Контекстные новости.
		МассивОтключенныхЛентНовостей = Новый Массив;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 4 Тогда // Помеченные новости, должен быть передан ключ "Тег".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 5 Тогда // Важные новости.
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 6 Тогда // Прочитать позже.
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 7 Тогда // Пользовательский отбор, должен быть передан ключ "ИмяОтбора".
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 8 Тогда // Корзина.
		МассивОтключенныхЛентНовостей = МассивОтключенныхЛентНовостейИзНастроек;

	КонецЕсли;

	СтруктураНастроекПоказаНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
		"НастройкиПоказаНовостей", // КлючОбъекта
		""); // КлючНастроек. Настройки показа новостей - единые для пользователя.

	// В общих настройках хранится:
	// - Вариант показа новостей (ОтображаемыеНовости_Вариант = "Количество", "Период");
	// - Количество новостей (ОтображаемыеНовости_Количество для ОтображаемыеНовости_Вариант = "Количество");
	// - Возраст новостей (ОтображаемыеНовости_ПериодЧасов для ОтображаемыеНовости_Вариант = "Период");
	// - Показывать ли только активные новости (ОтборНовостей_ТолькоАктивные);
	// - Интервал обновления списка новостей (для запроса этот параметр не нужен).

	// На будущее: в каждом отборе (Отбор) будет хранится:
	// - Список исключенных из показа лент новостей (т.е. при добавлении ленты новостей на сервере она будет видна,
	//       пока пользователь ее явно не отключит);
	//   - за исключением отборов "Все", "Пометка" и по конкретной ленте новостей;
	// - Отборы по категориям по каждой ленте новостей;
	// Пока нет именованных фильтров, только один фильтр, т.е. пока не обрабатывается.

	ОтображаемыеНовости_Вариант     = СтруктураНастроекПоказаНовостей.ОтображаемыеНовости_Вариант;
	ОтображаемыеНовости_Количество  = СтруктураНастроекПоказаНовостей.ОтображаемыеНовости_Количество;
	ОтображаемыеНовости_ПериодЧасов = СтруктураНастроекПоказаНовостей.ОтображаемыеНовости_ПериодЧасов;
	ОтборНовостей_ТолькоАктивные    = СтруктураНастроекПоказаНовостей.ОтборНовостей_ТолькоАктивные;

	// Дополнительные проверки настроек показа новостей.
	Если (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Все"))
			И (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Количество"))
			И (ВРег(ОтображаемыеНовости_Вариант) <> ВРег("Период")) Тогда
		ОтображаемыеНовости_Вариант = "Все";
	КонецЕсли;

	Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество")) Тогда
		Если ОтображаемыеНовости_Количество <= 0 Тогда
			ОтображаемыеНовости_Количество = 10;
		КонецЕсли;
	ИначеЕсли (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Период")) Тогда
		Если ТипЗнч(ОтображаемыеНовости_ПериодЧасов) <> ТипЧисло Тогда
			ОтображаемыеНовости_ПериодЧасов = 720;
		КонецЕсли;
	КонецЕсли;

	// Для ВариантОтбора = 0 (все новости) или 1 (по ленте новостей) могли передать параметр КоличествоНовостей.
	Если (ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0)
			ИЛИ (ПараметрыПолученияНовостейЭталон.ВариантОтбора = 1) Тогда
		Если ПараметрыПолученияНовостейЭталон.КоличествоНовостей > 0 Тогда
			ОтображаемыеНовости_Количество = ПараметрыПолученияНовостейЭталон.КоличествоНовостей;
		КонецЕсли;
	КонецЕсли;

	Если ОтборНовостей_ТолькоАктивные <> Истина Тогда
		ОтборНовостей_ТолькоАктивные = Ложь;
	КонецЕсли;

#КонецОбласти

#Область Обработка_ЧастьЗапроса_Отборы

	ТекстЗапросаВсеПервоначальныеОтборы = 
		ОбработкаНовостейСлужебный.ПолучитьЧастьЗапросаНовостейИсключений()
		+ "
		|// {Блок запроса новостей-в топе. Начало
		|// Если Метаданные и Форма совпадает с параметрами формы и установлен признак ЭтоПостояннаяНовость,
		|//  то считается, что это новость 'в топе' и должна быть показана сверху списка новостей.
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Рег.Новость              КАК Новость,
		|	Рег.ЭтоПостояннаяНовость КАК ЭтоПостояннаяНовость
		|ПОМЕСТИТЬ ВТ_ПостоянныеНовости
		|ИЗ
		|	РегистрСведений.ПривязкаНовостейКМетаданным КАК Рег
		|ГДЕ
		|	Рег.Метаданные = &ИмяМетаданных
		|	И Рег.Форма = &ИмяФормы
		|	И Рег.ЭтоПостояннаяНовость = ИСТИНА
		|ИНДЕКСИРОВАТЬ ПО
		|	Новость
		|
		|// Блок запроса новостей-в топе. Конец}
		|;
		|";

#КонецОбласти

#Область Обработка_ЧастьЗапроса_ВременныеТаблицы

	// Выбор из справочника Новостей.
	// Отбор по ВЫБРАТЬ ПЕРВЫЕ может работать некорректно, т.к. при помещении во временную таблицу
	//  отсутствует сортировка по дате по убыванию.
	СтрокиЗапросаШаблонВременнойТаблицы = СтрРазделить("
		|ВЫБРАТЬ //&Мета_ОтображаемыеНовости_Количество
		|	Спр.Ссылка                                      КАК Ссылка,
		|	ВЫБОР
		|		КОГДА (Спр.ДатаЗавершения МЕЖДУ &ПерваяНепустаяДата И &ТекущаяУниверсальнаяДата) ТОГДА
		|			0 // Обычная важность, новость уже не актуальна
		|		КОГДА (Спр.ДатаСбросаВажности = &ПустаяДата)
		|				ИЛИ (Спр.ДатаСбросаВажности > &ТекущаяУниверсальнаяДата) ТОГДА
		|			Спр.Важность // Новость актуальна и дата сброса важности не наступила или не введена
		|		ИНАЧЕ
		|			0 // Обычная важность
		|	КОНЕЦ                                           КАК Важность, // 0, 1, 2
		|	ЕСТЬNULL(Рег.Пометка, 0)                        КАК Пометка, // 0..9
		|	ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)                    КАК Прочтена,
		|	ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ)     КАК УдаленаИзСпискаНовостей,
		|	ЕСТЬNULL(Рег.ОповещениеВключено, ИСТИНА)        КАК ОповещениеВключено,
		|	ЕСТЬNULL(Рег.ДатаНачалаОповещения, &ПустаяДата) КАК ДатаНачалаОповещения,
		|	ЕСТЬNULL(
		|		ВТ_ПостоянныеНовости.ЭтоПостояннаяНовость,
		|		ЛОЖЬ)                                       КАК ЭтоПостояннаяНовость,
		|	0 КАК Порядок //&Мета_ПолеПорядок
		|ПОМЕСТИТЬ
		|	Мета_ВТ
		|ИЗ
		|	Справочник.Новости КАК Спр
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.СостоянияНовостей КАК Рег
		|	ПО
		|		Рег.Пользователь = &ТекущийПользователь
		|		И Рег.Новость = Спр.Ссылка
		|		И Рег.Новость.ЛентаНовостей = &Мета_ЛентаНовостей
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВТ_ПостоянныеНовости
		|	ПО
		|		Спр.Ссылка = ВТ_ПостоянныеНовости.Новость
		|
		|ГДЕ
		|	// Не помеченные на удаление
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|
		|	// {Фильтры по категориям, версиям}
		|	И НЕ Спр.Ссылка В (
		|		ВЫБРАТЬ
		|			ВТ_НовостиИсключения.Новость
		|		ИЗ
		|			ВТ_НовостиИсключения
		|	)
		|
		|	И Спр.ЛентаНовостей = &Мета_ЛентаНовостей
		|
		|	// Не скрытые в основном списке
		|	И Спр.СкрыватьВОбщемСпискеНовостей = ЛОЖЬ
		|
		|	// Отбор за последние ХХХ часов
		|	И Спр.ДатаПубликации >= &ДатаНачалаПросмотраНовостей
		|
		|	// Отбор по неактуальным (если ДатаЗавершения указана и <= текущей дате, то новость уже неактуальна)
		|	И (
		|		Спр.ДатаЗавершения > &ТекущаяУниверсальнаяДата
		|		ИЛИ Спр.ДатаЗавершения = &ПустаяДата
		|		ИЛИ &ОтборНовостей_ТолькоАктивные = ЛОЖЬ
		|	)
		|
		|	// Отбор по списку новостей (для полнотекстового поиска и отбора по контекстным новостям)
		|	И &Мета_УсловияОтбораПоСпискуНовостей
		|
		|	// Отбор по пометке (0..9)
		|	И &Мета_УсловияПометки
		|
		|	// Отбор по важности (важные и очень важные)
		|	И &Мета_УсловияВажности
		|
		|	// Отбор по пометке удаления из списка новостей
		|	И &Мета_УсловияУдаленияИзСпискаНовостей
		|
		|	// Отбор по пометке удаления из списка новостей
		|	И &Мета_УсловияПрочитатьПозже
		|
		|//УПОРЯДОЧИТЬ ПО &Мета_УпорядочитьПо
		|;
		|
		|",
	Символы.ПС,
	Истина);

	// В тексте запроса заменить части запроса "&Мета_" в зависимости от ВариантОтбора

	// &Мета_ЛентаНовостей и Мета_ВТ будет заменяться по-другому.
	ВсеМетаЗамены = Новый Структура;
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "Первые"        , "//&Мета_ОтображаемыеНовости_Количество");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "СписокНовостей", "И &Мета_УсловияОтбораПоСпискуНовостей");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "Пометки"       , "И &Мета_УсловияПометки");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "Важность"      , "И &Мета_УсловияВажности");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "Корзина"       , "И &Мета_УсловияУдаленияИзСпискаНовостей");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "ПрочитатьПозже", "И &Мета_УсловияПрочитатьПозже");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "Порядок"       , "//УПОРЯДОЧИТЬ ПО &Мета_УпорядочитьПо");
		ДобавитьНачальноеУсловиеМетаЗамены(ВсеМетаЗамены, "ПолеПорядок"   , "0 КАК Порядок //&Мета_ПолеПорядок");

	ВсеМетаЗамены.ПолеПорядок.ЧемЗаменять = "0 КАК Порядок";

	Если ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0 // Все
			ИЛИ ПараметрыПолученияНовостейЭталон.ВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей".

		// Отбор по количеству порции. Сортировка допустима только если указано ключевое слово ВЫБРАТЬ ПЕРВЫЕ.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество"))
				ИЛИ (
					(ПараметрыПолученияНовостейЭталон.Источник = "ФормаПросмотраНовостейРабочийСтол")
					И (ОтображаемыеНовости_Количество > 0)) Тогда // По количеству
			ВсеМетаЗамены.Первые.ЧемЗаменять  = " ПЕРВЫЕ " + Формат(ОтображаемыеНовости_Количество, "ЧН=0; ЧГ=0");
			ВсеМетаЗамены.Порядок.ЧемЗаменять = "УПОРЯДОЧИТЬ ПО Спр.ДатаПубликации УБЫВ";
		КонецЕсли;

		// Отбор по пометке удаления из списка новостей.
		ВсеМетаЗамены.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ";

		// В папке "Все новости" не выводить топ-новости наверх, т.к. их может быть очень много (в сумме по каждой ленте новостей)
		Если ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0 Тогда // Все
			ВсеМетаЗамены.ПолеПорядок.ЧемЗаменять =
				"	ВЫБОР
				|		// Актуальная, очень важная, непрочтенная
				|		КОГДА (Спр.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
				|					ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата) // Актуальна
				|				И ( // Очень важная и непрочтенная
				|					(Спр.Ссылка.Важность = 1)
				|					И (ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)) = ЛОЖЬ
				|					И (
				|						(Спр.ДатаСбросаВажности = &ПустаяДата)
				|						ИЛИ (Спр.ДатаСбросаВажности > &ТекущаяУниверсальнаяДата)
				|					)
				|				) ТОГДА
				|			3
				|		ИНАЧЕ
				|			9
				|	КОНЕЦ                                           КАК Порядок
				|";
		Иначе
			ВсеМетаЗамены.ПолеПорядок.ЧемЗаменять =
				"	ВЫБОР
				|		// Актуальная, очень важная, непрочтенная, постоянная новость
				|		КОГДА (Спр.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
				|					ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата) // Актуальна
				|				И ( // Очень важная и непрочтенная
				|					(Спр.Ссылка.Важность = 1)
				|					И (ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)) = ЛОЖЬ
				|					И (
				|						(Спр.ДатаСбросаВажности = &ПустаяДата)
				|						ИЛИ (Спр.ДатаСбросаВажности > &ТекущаяУниверсальнаяДата)
				|					))
				|				И ( // Новость в топе
				|					ЕСТЬNULL(ВТ_ПостоянныеНовости.ЭтоПостояннаяНовость, ЛОЖЬ) = ИСТИНА)
				|				ТОГДА
				|			1
				|		// Актуальная, постоянная новость
				|		КОГДА (Спр.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
				|					ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата) // Актуальна
				|				И ( // Новость в топе
				|					ЕСТЬNULL(ВТ_ПостоянныеНовости.ЭтоПостояннаяНовость, ЛОЖЬ) = ИСТИНА)
				|				ТОГДА
				|			2
				|		// Актуальная, очень важная, непрочтенная
				|		КОГДА (Спр.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
				|					ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата) // Актуальна
				|				И ( // Очень важная и непрочтенная
				|					(Спр.Ссылка.Важность = 1)
				|					И (ЕСТЬNULL(Рег.Прочтена, ЛОЖЬ)) = ЛОЖЬ
				|					И (
				|						(Спр.ДатаСбросаВажности = &ПустаяДата)
				|						ИЛИ (Спр.ДатаСбросаВажности > &ТекущаяУниверсальнаяДата)
				|					)
				|				) ТОГДА
				|			3
				|		ИНАЧЕ
				|			9
				|	КОНЕЦ                                           КАК Порядок
				|";
		КонецЕсли;

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 2 Тогда // Результат поиска, должен быть передан ключ "СписокНайденныхНовостей".

		// Отбор по списку новостей.
		ВсеМетаЗамены.СписокНовостей.ЧемЗаменять = "И Спр.Ссылка В (&СписокНовостей)";
		Запрос.УстановитьПараметр("СписокНовостей", ПараметрыПолученияНовостейЭталон.СписокНайденныхНовостей);

		// Отбор по пометке удаления из списка новостей.
		ВсеМетаЗамены.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ";

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 3 Тогда // Контекстные новости, должен быть передан отбор в виде ключей "Метаданные" и "Форма".

		// Отбор по списку новостей.
		ВсеМетаЗамены.СписокНовостей.ЧемЗаменять = "И Спр.Ссылка В (&СписокНовостей)";
		Запрос.УстановитьПараметр("СписокНовостей", МассивКонтекстныхНовостей);

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 4 Тогда // Помеченные новости, должен быть передан ключ "Тег".

		// Тег = Неопределено; // АПК:282 Это не программный код.

		// Отбор по тегу (пометке).
		Если СтрНайти(ВРег(ПараметрыПолученияНовостейЭталон.Тег), ВРег("Пометка")) = 1
				И (СтрДлина(ПараметрыПолученияНовостейЭталон.Тег) = 8)Тогда
			ВсеМетаЗамены.Пометки.ЧемЗаменять = "И ЕСТЬNULL(Рег.Пометка, 0) = " + Прав(ПараметрыПолученияНовостейЭталон.Тег, 1);
		КонецЕсли;

		// Отбор по пометке удаления из списка новостей.
		ВсеМетаЗамены.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ";

		// В некоторых случаях необходимо просто добавить список новостей.
		// Например, при выборе новостей помеченных флажком, необходимо добавить новости из избранного.
		// При входе как АдминистраторСистемы, не показывать новости из избранного.
		МассивНовостейИзИзбранного = ПолучитьНовостиИзИзбранногоТекущегоПользователя();

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 5 Тогда // Важные новости

		// Отбор по важности (важные и очень важные).
		ВсеМетаЗамены.Важность.ЧемЗаменять = "И (Важность В (1, 2))";
		// Отбор по пометке удаления из списка новостей.
		ВсеМетаЗамены.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ";

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 6 Тогда // Прочитать позже.

		// Отбор по пометке "Прочитать позже".
		ВсеМетаЗамены.ПрочитатьПозже.ЧемЗаменять = "И ЕСТЬNULL(Рег.ПрочитатьПозже, ЛОЖЬ) = ИСТИНА";
		// Отбор по пометке удаления из списка новостей.
		ВсеМетаЗамены.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ";

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 7 Тогда // Пользовательский отбор, должен быть передан ключ "ИмяОтбора".

		// Очистить все мета-замены.

	ИначеЕсли ПараметрыПолученияНовостейЭталон.ВариантОтбора = 8 Тогда // Корзина

		// Отбор по количеству порции. Сортировка допустима только если указано ключевое слово ВЫБРАТЬ ПЕРВЫЕ.
		// Для других отборов не надо фильтровать первые ХХХ новостей.
		Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Количество"))
				ИЛИ ((ПараметрыПолученияНовостейЭталон.Источник = "ФормаПросмотраНовостейРабочийСтол") И (ОтображаемыеНовости_Количество > 0)) Тогда // По количеству
			ВсеМетаЗамены.Первые.ЧемЗаменять  = " ПЕРВЫЕ " + Формат(ОтображаемыеНовости_Количество, "ЧН=0; ЧГ=0");
			ВсеМетаЗамены.Порядок.ЧемЗаменять = "УПОРЯДОЧИТЬ ПО Спр.ДатаПубликации УБЫВ";
		КонецЕсли;

		// Отбор по пометке удаления из списка новостей.
		ВсеМетаЗамены.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ИСТИНА";

	КонецЕсли;

	// Выполнить мета-замены, этап 1.
	СтрокиЗапросаШаблонВременнойТаблицы = ВыполнитьМетаЗамены(СтрокиЗапросаШаблонВременнойТаблицы, ВсеМетаЗамены);

	// Соединить все строки временных таблиц в один массив.

	// Временные таблицы новостей из лент новостей.
	С = 1; // АПК:247 это счетчик.
	Выборка = Справочники.ЛентыНовостей.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если МассивОтключенныхЛентНовостей.Найти(Выборка.Ссылка) = Неопределено Тогда
			// Добавить параметр запроса.
			ИмяПараметра = "ЛентаНовостей" + Формат(С, "ЧН=0; ЧГ=0");
			Запрос.УстановитьПараметр(ИмяПараметра, Выборка.Ссылка);
			// Выполнить мета-замены, этап 2.
			МетаЗаменыЛентаНовостей = Новый Структура;
				ДобавитьУсловиеМетаЗамены(МетаЗаменыЛентаНовостей, "ИмяПараметра", "&Мета_ЛентаНовостей", "&" + ИмяПараметра);
				ДобавитьУсловиеМетаЗамены(МетаЗаменыЛентаНовостей, "ИмяВТ"       , "Мета_ВТ"            , "ВТ_" + ИмяПараметра);
			СтрокиЗапросаТекущейВременнойТаблицы = ВыполнитьМетаЗамены(СтрокиЗапросаШаблонВременнойТаблицы, МетаЗаменыЛентаНовостей);
			// К общему списку строк запроса добавить строки текущей временной таблицы.
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиЗапросаВсехВременныхТаблиц, СтрокиЗапросаТекущейВременнойТаблицы, Ложь);
			С = С + 1; // АПК:247 это счетчик.
		КонецЕсли;
	КонецЦикла;
	ВсегоЛентНовостей = С - 1;

	// Временная таблица новостей из избранного.
	// В некоторых случаях необходимо просто добавить список новостей.
	// Например, при выборе новостей помеченных флажком, необходимо добавить новости из избранного.
	Если МассивНовостейИзИзбранного.Количество() > 0 Тогда

		// &Мета_ЛентаНовостей и Мета_ВТ будет заменяться по-другому.
		МетаЗаменыИзбранное = Новый Структура;
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "Первые"         , "//&Мета_ОтображаемыеНовости_Количество");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "ЛентаСоединение", "И Рег.Новость.ЛентаНовостей = &Мета_ЛентаНовостей");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "ЛентаГде"       , "И Спр.ЛентаНовостей = &Мета_ЛентаНовостей");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "ИмяВТ"          , "Мета_ВТ");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "СписокНовостей" , "И &Мета_УсловияОтбораПоСпискуНовостей");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "Пометки"        , "И &Мета_УсловияПометки");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "Важность"       , "И &Мета_УсловияВажности");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "Корзина"        , "И &Мета_УсловияУдаленияИзСпискаНовостей");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "ПрочитатьПозже" , "И &Мета_УсловияПрочитатьПозже");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "Порядок"        , "//УПОРЯДОЧИТЬ ПО &Мета_УпорядочитьПо");
			ДобавитьНачальноеУсловиеМетаЗамены(МетаЗаменыИзбранное, "ПолеПорядок"    , "0 КАК Порядок //&Мета_ПолеПорядок");

		// Отбор по списку новостей.
		МетаЗаменыИзбранное.СписокНовостей.ЧемЗаменять = "И Спр.Ссылка В (&МассивНовостейИзИзбранного)";
		Запрос.УстановитьПараметр("МассивНовостейИзИзбранного", МассивНовостейИзИзбранного);

		// Отбор по пометке удаления из списка новостей.
		МетаЗаменыИзбранное.Корзина.ЧемЗаменять = "И ЕСТЬNULL(Рег.УдаленаИзСпискаНовостей, ЛОЖЬ) = ЛОЖЬ";

		// Отбор по ленте новостей.
		МетаЗаменыИзбранное.ИмяВТ.ЧемЗаменять = "ВТ_СписокНовостей_Избранное";

		МетаЗаменыИзбранное.ПолеПорядок.ЧемЗаменять = "0 КАК Порядок";

		// Выполнить мета-замены, этап 3.
		СтрокиЗапросаТекущейВременнойТаблицы = ВыполнитьМетаЗамены(СтрокиЗапросаШаблонВременнойТаблицы, МетаЗаменыИзбранное);
		// К общему списку строк запроса добавить строки текущей временной таблицы.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиЗапросаВсехВременныхТаблиц, СтрокиЗапросаТекущейВременнойТаблицы, Ложь);

	КонецЕсли;

#КонецОбласти

#Область Обработка_ЧастьЗапроса_Объединения

	Если СтрокиЗапросаВсехВременныхТаблиц.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	// Соединить все строки запроса-объединения в один массив.

	// Ко всем временным таблицам добавить запрос-объединение.
	СтрокиЗапросаШаблонОбъединения = СтрРазделить("
		|ВЫБРАТЬ
		|	ИСТИНА                                  КАК Видимость,
		|	Спр.Ссылка                              КАК Ссылка,
		|	Спр.Ссылка.Наименование                 КАК Наименование,
		|	Спр.Ссылка.Наименование                 КАК Заголовок,
		|	Спр.Ссылка.Подзаголовок                 КАК Подзаголовок,
		|	Спр.Ссылка.УИННовости                   КАК УИННовости,
		|	Спр.Ссылка.ДатаПубликации               КАК ДатаПубликации,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(Спр.Ссылка.ДатаПубликации, ДЕНЬ) = &НачалоДняТекущаяУниверсальнаяДата
		|			ТОГДА &ПредставлениеДаты_Сегодня
		|		КОГДА НАЧАЛОПЕРИОДА(Спр.Ссылка.ДатаПубликации, ДЕНЬ) = &ВчерашняяУниверсальнаяДата
		|			ТОГДА &ПредставлениеДаты_Вчера
		|		КОГДА Спр.Ссылка.ДатаПубликации >= &НачалоГодаТекущаяУниверсальнаяДата
		|				И Спр.Ссылка.ДатаПубликации <= &КонецГодаТекущаяУниверсальнаяДата
		|			ТОГДА &ПредставлениеДаты_ЭтотГод
		|		ИНАЧЕ &ПредставлениеДаты_ПолнаяДата
		|	КОНЕЦ                                   КАК ПредставлениеДатыПубликации,
		|	Спр.Ссылка.ДатаЗавершения               КАК ДатаЗавершения,
		|	Спр.Ссылка.ЛентаНовостей                КАК ЛентаНовостей,
		|	Спр.Ссылка.ЛентаНовостей.Код            КАК КодЛентыНовостей,
		|	Спр.Ссылка.ТекстНовости                 КАК ТекстНовости,
		|	Спр.Ссылка.СсылкаНаПолныйТекстНовости   КАК СсылкаНаПолныйТекстНовости,
		|	Спр.Важность                            КАК Важность,
		|	ВЫБОР
		|		КОГДА (Спр.Ссылка.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
		|				ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата)
		|				И (Спр.Ссылка.Важность = 1) ТОГДА // Только ОЧЕНЬ важные
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                   КАК Отображение_Срочная, // Только для сортировки в отчете
		|	ВЫБОР
		|		КОГДА Спр.Ссылка.ДатаЗавершения >= &ТекущаяУниверсальнаяДата
		|				ИЛИ Спр.Ссылка.ДатаЗавершения = &ПустаяДата
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ                                   КАК Актуальность,
		|	Спр.Пометка                             КАК Пометка,
		|	Спр.Прочтена                            КАК Прочтена,
		|	Спр.УдаленаИзСпискаНовостей             КАК УдаленаИзСпискаНовостей,
		|	Спр.ОповещениеВключено                  КАК ОповещениеВключено,
		|	Спр.ДатаНачалаОповещения                КАК ДатаНачалаОповещения,
		|	Спр.ЭтоПостояннаяНовость                КАК ЭтоПостояннаяНовость,
		|	Спр.Порядок                             КАК Порядок,
		|	Спр.Ссылка.Действия.(
		|		УИНДействия,
		|		Действие
		|	)                                       КАК Действия,
		|	Спр.Ссылка.ПараметрыДействий.(
		|		УИНДействия,
		|		Параметр,
		|		ЗначениеПараметра
		|	)                                       КАК ПараметрыДействия
		|
		|ИЗ
		|	Мета_ВТ КАК Спр
		|
		|",
	Символы.ПС,
	Истина);

	// В некоторых случаях необходимо просто добавить список новостей.
	// Например, при выборе новостей помеченных флажком, необходимо добавить новости из избранного.
	Если МассивНовостейИзИзбранного.Количество() > 0 Тогда

		// Выполнить мета-замены, этап 3 (основные новости).
		МетаЗаменыЛентаНовостейОбъединение = Новый Структура;
			ДобавитьУсловиеМетаЗамены(МетаЗаменыЛентаНовостейОбъединение, "ИмяВТ", "Мета_ВТ", "ВТ_СписокНовостей_Избранное"); // Специальная временная таблица.
		СтрокиЗапросаТекущегоОбъединения = ВыполнитьМетаЗамены(СтрокиЗапросаШаблонОбъединения, МетаЗаменыЛентаНовостейОбъединение);

		// К общему списку строк запроса добавить строки текущей таблицы объединения.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиЗапросаВсехОбъединений, СтрокиЗапросаТекущегоОбъединения, Ложь);

		// Если есть данные, то добавить "ОБЪЕДИНИТЬ ВСЕ"
		Если ВсегоЛентНовостей > 0 Тогда
			СтрокиЗапросаВсехОбъединений.Добавить("");
			СтрокиЗапросаВсехОбъединений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			СтрокиЗапросаВсехОбъединений.Добавить("");
		КонецЕсли;

	КонецЕсли;

	// Добавить новости из лент новостей.
	Для С=1 По ВсегоЛентНовостей Цикл
		ИмяПараметра = "ЛентаНовостей" + Формат(С, "ЧН=0; ЧГ=0");

		// Выполнить мета-замены, этап 3 (основные новости).
		МетаЗаменыЛентаНовостейОбъединение = Новый Структура;
			ДобавитьУсловиеМетаЗамены(МетаЗаменыЛентаНовостейОбъединение, "ИмяВТ", "Мета_ВТ", "ВТ_" + ИмяПараметра);
		СтрокиЗапросаТекущегоОбъединения = ВыполнитьМетаЗамены(СтрокиЗапросаШаблонОбъединения, МетаЗаменыЛентаНовостейОбъединение);

		// К общему списку строк запроса добавить строки текущей таблицы объединения.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокиЗапросаВсехОбъединений, СтрокиЗапросаТекущегоОбъединения, Ложь);

		// Если это не последняя строка, то добавить "ОБЪЕДИНИТЬ ВСЕ"
		Если С < ВсегоЛентНовостей Тогда
			СтрокиЗапросаВсехОбъединений.Добавить("");
			СтрокиЗапросаВсехОбъединений.Добавить("ОБЪЕДИНИТЬ ВСЕ");
			СтрокиЗапросаВсехОбъединений.Добавить("");
		КонецЕсли;

	КонецЦикла;

	// Если есть порядок сортировки - добавить и его.
	Если ПустаяСтрока(ПараметрыПолученияНовостейЭталон.ПорядокСортировки) Тогда
		СтрокиЗапросаВсехОбъединений.Добавить("УПОРЯДОЧИТЬ ПО");
		СтрокиЗапросаВсехОбъединений.Добавить("  Спр.Порядок,");
		СтрокиЗапросаВсехОбъединений.Добавить("  ДатаПубликации УБЫВ");
		СтрокиЗапросаВсехОбъединений.Добавить("");
	Иначе
		СтрокиЗапросаВсехОбъединений.Добавить("УПОРЯДОЧИТЬ ПО");
		СтрокиЗапросаВсехОбъединений.Добавить(ПараметрыПолученияНовостейЭталон.ПорядокСортировки);
		СтрокиЗапросаВсехОбъединений.Добавить("");
	КонецЕсли;

#КонецОбласти

#Область Обработка_ИтоговыйЗапросИзЧастей

	// Итоговый текст запроса.
	ТекстЗапроса =
		ТекстЗапросаВсеПервоначальныеОтборы
		+ СтрСоединить(СтрокиЗапросаВсехВременныхТаблиц, Символы.ПС)
		+ СтрСоединить(СтрокиЗапросаВсехОбъединений, Символы.ПС);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	Если (ОбщегоНазначения.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей()) Тогда
		Запрос.УстановитьПараметр("ТекущийПользователь", Справочники.Пользователи.ПустаяСсылка());
	Иначе
		Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	КонецЕсли;

	Запрос.УстановитьПараметр("ПустаяДата"                        , '00010101000000');
	Запрос.УстановитьПараметр("ПерваяНепустаяДата"                , '00010101000001'); // ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	Запрос.УстановитьПараметр("ПредставлениеДаты_Сегодня"         , НСтр("ru = 'Сегодня'"));
	Запрос.УстановитьПараметр("ПредставлениеДаты_Вчера"           , НСтр("ru = 'Вчера'"));
	Запрос.УстановитьПараметр("ПредставлениеДаты_ЭтотГод"         , НСтр("ru = 'Этот год'"));
	Запрос.УстановитьПараметр("ПредставлениеДаты_ПолнаяДата"      , НСтр("ru = 'Полная дата'"));
	Запрос.УстановитьПараметр("НачалоГодаТекущаяУниверсальнаяДата", НачалоГода(ТекущаяУниверсальнаяДата));
	Запрос.УстановитьПараметр("КонецГодаТекущаяУниверсальнаяДата" , КонецГода(ТекущаяУниверсальнаяДата));
	Запрос.УстановитьПараметр("НачалоДняТекущаяУниверсальнаяДата" , НачалоДня(ТекущаяУниверсальнаяДата));
	Запрос.УстановитьПараметр("ТекущаяУниверсальнаяДата"          , ТекущаяУниверсальнаяДата);
	Запрос.УстановитьПараметр("ВчерашняяУниверсальнаяДата"        , НачалоДня(ТекущаяУниверсальнаяДата-24*60*60));
	Запрос.УстановитьПараметр("ОтборНовостей_ТолькоАктивные"      , ОтборНовостей_ТолькоАктивные);
	Запрос.УстановитьПараметр("МассивОтключенныхЛентНовостей"     , МассивОтключенныхЛентНовостей);
	Запрос.УстановитьПараметр("ИмяМетаданных"                     , ПараметрыПолученияНовостейЭталон.Метаданные);
	Запрос.УстановитьПараметр("ИмяФормы"                          , ПараметрыПолученияНовостейЭталон.Форма);

	ДатаНачалаПросмотраНовостей = '00010101';
	Если ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0 // Все
			ИЛИ ПараметрыПолученияНовостейЭталон.ВариантОтбора = 1 Тогда // По ленте новостей, должен быть ключ "ЛентаНовостей"
		Если (ВРег(ОтображаемыеНовости_Вариант) = ВРег("Период")) Тогда
			Если ОтображаемыеНовости_ПериодЧасов > 0 Тогда
				ДатаНачалаПросмотраНовостей = НачалоЧаса(ТекущаяУниверсальнаяДата - ОтображаемыеНовости_ПериодЧасов*60*60);
			КонецЕсли;
		КонецЕсли;
		Запрос.УстановитьПараметр("ДатаНачалаПросмотраНовостей", ДатаНачалаПросмотраНовостей);
	Иначе
		// Для других отборов не надо фильтровать новости по времени.
		Запрос.УстановитьПараметр("ДатаНачалаПросмотраНовостей", '00010101');
	КонецЕсли;

#КонецОбласти

	Результат = Запрос.Выполнить(); // ПолучитьСписокНовостей().

#КонецОбласти

#Область Завершение

	Если ТипЗнч(ТаблицаНовостей) = ТипДанныеФормыКоллекция Тогда
		ТаблицаНовостей.Очистить();
		Если НЕ Результат.Пустой() Тогда
			ТаблицаНовостей.Загрузить(Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой));
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТаблицаНовостей) = ТипТаблицаЗначений Тогда
		ТаблицаНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	КонецЕсли;

	Если (ПараметрыПолученияНовостейЭталон.ВариантОтбора = 0)
			И (ПараметрыПолученияНовостейЭталон.Источник = "ФормаПросмотраНовостейРабочийСтол")
			И (ОтображаемыеНовости_Количество > 0)
			И (ТаблицаНовостей.Количество() > ОтображаемыеНовости_Количество) Тогда // По количеству
		С = ТаблицаНовостей.Количество();
		Пока (С > ОтображаемыеНовости_Количество) И (С > 0) Цикл
			ТаблицаНовостей.Удалить(С - 1);
			С = ТаблицаНовостей.Количество();
		КонецЦикла;
	КонецЕсли;

	ИнтеграцияПодсистемБИП.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей(ТаблицаНовостей, Пользователь, ПараметрыПолученияНовостей, ИнтерактивныеДействия);
	ОбработкаНовостейПереопределяемый.ЗаполнитьИнтерактивныеДействияПослеПолученияНовостей(ТаблицаНовостей, Пользователь, ПараметрыПолученияНовостей, ИнтерактивныеДействия);

#КонецОбласти

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура загружает стандартные значения из макета с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры, логины и пароли для доступа к веб-сервисам обновлений.
// Процедуры должны иметь похожий код:
//  Справочник.Новости.ЗагрузитьСтандартныеЗначения();
//  ОбработкаНовостейСлужебный.ПолучитьИОбработатьНовостиПоЛентамНовостей();
// Если включено разделение данных, то запускать вручную можно только при отключенных разделителях.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьСтандартныеЗначения(КонтекстВыполнения = Неопределено) Экспорт

#Область ИнициализацияМетода

	ОбъектМетаданных     = Справочники.Новости; // Переопределение
	ИмяОбъектаМетаданных = "Справочники.Новости"; // Переопределение
	ИмяСвойства          = "Новости"; // Переопределение

	НаименованиеМетода = ИмяОбъектаМетаданных + ".ЗагрузитьСтандартныеЗначения"; // Идентификатор.
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = НовыйКонтекстВыполнения(НаименованиеМетода, Истина); // Этот контекст.
	КонецЕсли;

	НачатьШагВыполнения(КонтекстВыполнения, "Запуск:" + НаименованиеМетода); // Идентификатор.

	ТипСтруктура    = Тип("Структура");
	ТипСоответствие = Тип("Соответствие");
	ТипСтрока       = Тип("Строка");

	ЕстьЛентыНовостей  = Истина;

#КонецОбласти

#Область Проверки

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные(КонтекстВыполнения) Тогда
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область Обработка

#Область Обработка_ПолучениеСпискаЛентНовостей

	Шаг = НаименованиеМетода + "/ПолучениеСпискаЛентНовостей";
	НачатьШагВыполнения(КонтекстВыполнения, Шаг);
	ЛогШаговВыполнения = Новый Массив;

	// Структура таблицы ЛентыНовостей (см. Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера):
	//  - Пометка                        - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
	//  - ОбязательныйКанал              - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
	//  - ЛентаНовостей                  - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
	//  - КодЛентыНовостей               - Строка - код ленты новостей;
	//  - Сайт                           - Строка - ;
	//  - ИмяФайла                       - Строка - ;
	//  - Протокол                       - Строка - возможные значения http, https, file;
	//  - ВариантЛогинаПароля            - ПеречислениеСсылка.ВариантЛогинаПароляДляЛентыНовостей - БезЛогинаПароля, ВручнуюОдинаковыйДляВсех, ВручнуюРазныйДляВсех, ВебИТС;
	//  - Логин                          - Строка - ;
	//  - Пароль                         - Строка -;
	//  - ПарольХранилищеЗначений        - ХранилищеЗначений - данные из базы, которые должны быть преобразованы;
	//  - ЛокальнаяЛентаНовостей         - Булево - лента новостей не обновляется из файла или из интернета, а заполняется напрямую в справочник Новости;
	//  - ЧастотаОбновления              - Число(1,0) - Частота обновления;
	//  - ПоследняяНовостьДатаПубликации - Дата - для формирования ETag;
	//  - ПоследняяНовостьУИН            - Строка - для формирования ETag;
	//  - АдресВХранилище                - Строка - Адрес загруженного файла во временном хранилище.

	// 1. Получить список лент новостей, которые необходимо обновить.
	// 1.1. Получить список лент новостей с параметрами.
	// Чтобы лента новостей автоматически не обновлялась - надо поставить ЧастотаОбновления=0, или установить пометку удаления.

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ЛОЖЬ                                     КАК Пометка, // Загружать только если есть макет
		|	Спр.Код                                  КАК Идентификатор,
		|	Спр.Ссылка                               КАК ЛентаНовостей,
		|	Спр.Код                                  КАК КодЛентыНовостей,
		|	ЛОЖЬ                                     КАК ОбязательныйКанал, // Чтобы исключить загрузку лент новостей, по которым нет макета
		|	Спр.Сайт                                 КАК Сайт,
		|	Спр.ИмяФайла                             КАК ИмяФайла,
		|	Спр.Протокол                             КАК Протокол,
		|	Спр.ВариантЛогинаПароля                  КАК ВариантЛогинаПароля,
		|	Спр.Логин                                КАК Логин,
		|	ВЫРАЗИТЬ(&ПустаяСтрока КАК СТРОКА(100))  КАК Пароль, // Заполнится потом из ПарольХранилищеЗначений
		|	Спр.Пароль                               КАК ПарольХранилищеЗначений,
		|	Спр.ЛокальнаяЛентаНовостей               КАК ЛокальнаяЛентаНовостей,
		|	Спр.ЧастотаОбновления                    КАК ЧастотаОбновления,
		|	&ПустаяДата                              КАК ПоследняяНовостьДатаПубликации,
		|	&ПустаяСтрока                            КАК ПоследняяНовостьУИН,
		|	ВЫРАЗИТЬ(&ПустаяСтрока КАК СТРОКА(1000)) КАК АдресВХранилище // Заполнится потом
		|ИЗ
		|	Справочник.ЛентыНовостей КАК Спр
		|ГДЕ
		|	Спр.ПометкаУдаления = ЛОЖЬ
		|";

	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	Запрос.УстановитьПараметр("ПустаяДата"  , '00010101');

	Результат = Запрос.Выполнить(); // ЗагрузитьСтандартныеЗначения()
	Если НЕ Результат.Пустой() Тогда
		ЛентыНовостей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ЛогШаговВыполнения.Добавить(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Лент новостей для обработки: %1'"),
				ЛентыНовостей.Количество()));
	Иначе
		ЛогШаговВыполнения.Добавить(
			НСтр("ru='Ошибка загрузки стандартных значений новостей из макетов. Справочник лент новостей пустой.'"));
		ЕстьЛентыНовостей = Ложь;
	КонецЕсли;

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", СтрСоединить(ЛогШаговВыполнения, Символы.ПС));

	Если ЕстьЛентыНовостей = Ложь Тогда
		ОбработкаНовостейСлужебный.ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область Обработка_Загрузка

#Область Обработка_Загрузка_ПолучениеДанныхИзМакетов

	Шаг = НаименованиеМетода + "/ПолучениеДанныхИзМакетов";
	НачатьШагВыполнения(КонтекстВыполнения, Шаг);
	ЛогШаговВыполнения = Новый Массив;

	// 1.2. Список лент новостей должен формироваться из макетов справочника Новости, например:
	//   Справочники.Новости.Макеты.СтандартныеЗначения_Urgent;
	//   Справочники.Новости.Макеты.СтандартныеЗначения_Developers;
	// означает что есть два макета для загрузки в ленты новостей с кодами "Urgent" и "Developers".
	// Имя макета должно начинаться со слова "СтандартныеЗначения_", после чего идет код ленты новостей (состоит из английских букв).
	Для каждого ТекущийМакет Из Метаданные.Справочники.Новости.Макеты Цикл
		Если СтрНайти(ВРег(ТекущийМакет.Имя), ВРег("СтандартныеЗначения_")) = 1 Тогда
			НайденныеСтроки = ЛентыНовостей.НайтиСтроки(Новый Структура("Идентификатор", Прав(ТекущийМакет.Имя, СтрДлина(ТекущийМакет.Имя)-20)));
			Если НайденныеСтроки.Количество() >= 1 Тогда
				НайденныеСтроки[0].Пометка  = Истина;
				НайденныеСтроки[0].Протокол = "file";
				НайденныеСтроки[0].ИмяФайла = "Метаданные.Справочники.Новости.Макеты." + ТекущийМакет.Имя;
			Иначе
				ЛогШаговВыполнения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка загрузки стандартных значений новостей из макета %1.
							|Не найдена лента новостей с таким идентификатором.'"),
						ТекущийМакет.Имя));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// 1.3. Также данные могут загружаться из произвольной строки (которая в свою очередь может быть как жестко закодирована,
	//  так и храниться в других макетах объектов метаданных или константе).
	//  Переопределение реализуется в ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей.
	ДополнительныеЛентыНовостей = ЛентыНовостей.СкопироватьКолонки();
	Для Каждого ТекущаяЛентаНовостей Из ЛентыНовостей Цикл
		ТекущаяЛентаНовостей.Пароль = ТекущаяЛентаНовостей.ПарольХранилищеЗначений.Получить();
		ПоставляемыеДанныеОбъекта = Новый Соответствие;
		ОбработкаНовостейСлужебный.ПолучитьДополнительныеСтандартныеЗначенияНовостей(ТекущаяЛентаНовостей.ЛентаНовостей, ПоставляемыеДанныеОбъекта);
		Если ТипЗнч(ПоставляемыеДанныеОбъекта) = ТипСоответствие Тогда
			Для Каждого СтрокаСтандартныхЗначений Из ПоставляемыеДанныеОбъекта Цикл
				Если (ТипЗнч(СтрокаСтандартныхЗначений.Значение) = ТипСтрока)
						И (НЕ ПустаяСтрока(СтрокаСтандартныхЗначений.Значение)) Тогда
					Попытка
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
						ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8, Символы.ПС, Ложь, Символы.ПС);
						ЗаписьТекста.Записать(СтрокаСтандартныхЗначений.Значение);
						ЗаписьТекста.Закрыть();
						НоваяСтрока = ДополнительныеЛентыНовостей.Добавить();
						ЗаполнитьЗначенияСвойств(
							НоваяСтрока,
							ТекущаяЛентаНовостей,
							"Пометка, Идентификатор, ЛентаНовостей, ОбязательныйКанал,
								|ВариантЛогинаПароля, Логин, Пароль, ЛокальнаяЛентаНовостей, ЧастотаОбновления");
						НоваяСтрока.Протокол        = "file";
						НоваяСтрока.Сайт            = ИмяВременногоФайла;
						НоваяСтрока.ИмяФайла        = ИмяВременногоФайла;
						НоваяСтрока.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
						НоваяСтрока.Пометка         = Истина;
						УдалитьФайлы(ИмяВременногоФайла);
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка загрузки дополнительных стандартных значений новостей по причине:
								|%1
								|Первые 2000 символов дополнительного содержимого:
								|%2'"),
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
							Лев(СтрокаСтандартныхЗначений.Значение, 2000));
						ЛогШаговВыполнения.Добавить(ТекстСообщения);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если ДополнительныеЛентыНовостей.Количество() > 0 Тогда
		Для Каждого ТекущаяДополнительнаяЛентаНовостей Из ДополнительныеЛентыНовостей Цикл
			НоваяСтрока = ЛентыНовостей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяДополнительнаяЛентаНовостей);
		КонецЦикла;
	КонецЕсли;

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", СтрСоединить(ЛогШаговВыполнения, Символы.ПС));

#КонецОбласти

#Область Обработка_Загрузка_ЗагрузкаДанныхИзМакетов

	Шаг = НаименованиеМетода + "/ЗагрузкаДанных";
	КонтекстВыполненияВложенный = НачатьШагВыполненияВложенный(КонтекстВыполнения, Шаг);

	// 2. Для выбранных лент новостей запустить получение новостей.
	// Следующие строки должны запуститься последовательно на одном сервере, поэтому значения адресов
	//  временного хранилища (отдельная колонка в таблице ЛентыНовостей) не должны пропасть.
	// {Раздельное обновление ИБ}

	// В процессе загрузки новостей создаются новости в справочнике Новости, но у них не рассчитаны отборы.
	// Из-за этого возможна ситуация, когда в системе видны новости, запрещенные к показу отборами по категориям.
	ОбработкаНовостейСлужебный.УстановитьСостояниеПодсистемы("СейчасЗагружаютсяНовости");
		Обработки.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера(ЛентыНовостей, КонтекстВыполненияВложенный);
		Обработки.УправлениеНовостями.РазборXMLФайловНовостей(ЛентыНовостей, КонтекстВыполненияВложенный);
	ОбработкаНовостейСлужебный.УстановитьСостояниеПодсистемы("Активна");

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", "", КонтекстВыполненияВложенный);

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Завершение

	ОбработкаНовостейСлужебный.ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);

#КонецОбласти

КонецПроцедуры

// Функция возвращает текст в формате html (с тегами форматирования), описывающий клиентские настройки,
//  влияющие на отображение новостей, например, настроенные фильтры.
//
//  ОбъектНовости        - СправочникОбъект.Новость или Структура - данные новости;
//  ПараметрыОтображения - Структура или Неопределено, в которой передаются параметры для отображения новости.
//                         Список возможных параметров см. в Функция ПолучитьХТМЛТекстНовостей().
//
// Возвращаемое значение:
//   Строка - текст в формате html для отображения в форме новости.
//
Функция ПолучитьХТМЛПредставлениеКлиентскихНастроекВлияющихНаОтображениеНовостей(ОбъектНовости, ПараметрыОтображения = Неопределено)

	Результат = "";

	// ////? Вставить информацию о настроенных фильтрах.

	Возврат Результат;

КонецФункции

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
// Используется для сопоставления элементов механизмом "Выгрузка/загрузка областей данных".
//
// Возвращаемое значение:
//   Массив, Строка - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("ЛентаНовостей");
	Результат.Добавить("УИННовости");

	Возврат Результат;

КонецФункции

#Область ДлительныеОперации

// Метод загружает новости в фоне. Является "оберткой" для Справочники.Новости.ПолучитьСписокНовостей.
//
// Параметры:
//  ПараметрыПроцедуры - Структура - параметры вызова Справочник.Новости.ПолучитьСписокНовостей:
//   * ТаблицаНовостей;
//   * Пользователь;
//   * ПараметрыПолученияНовостей;
//   * ИнтерактивныеДействия.
//  АдресХранилища - Строка - Адрес временного хранилища. Нужно для вызова из общего модуля ДлительныеОперации.
//
Процедура ПолучитьСписокНовостейВФоне(ПараметрыПроцедуры, АдресХранилища = Неопределено) Экспорт

	ТаблицаНовостей       = ПараметрыПроцедуры.ТаблицаНовостей;
	ИнтерактивныеДействия = ПараметрыПроцедуры.ИнтерактивныеДействия;

	ПолучитьСписокНовостей(
		ТаблицаНовостей,
		ПараметрыПроцедуры.Пользователь,
		ПараметрыПроцедуры.ПараметрыПолученияНовостей,
		ИнтерактивныеДействия);

	ПараметрыПроцедуры.ТаблицаНовостей       = ТаблицаНовостей;
	ПараметрыПроцедуры.ИнтерактивныеДействия = ИнтерактивныеДействия;

	АдресРезультата = ПоместитьВоВременноеХранилище(ПараметрыПроцедуры, АдресХранилища);

	ПараметрыПроцедуры.Вставить("АдресРезультата", АдресРезультата);

КонецПроцедуры

#КонецОбласти

#Область ЛогИОтладкаЛокальный

// Возвращает структуру контекста выполнения.
//
// Параметры:
//  НаименованиеМетода           - Строка - имя метода;
//  ЗаписыватьВЖурналРегистрации - Булево - если Истина, то в конце метода будет запись в журнал регистрации.
//
// Возвращаемое значение:
//   Структура - см. в коде.
//
Функция НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации = Ложь)

	Результат = ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации);

	// При создании нового контекста выполнения первый же шаг - показать основное состояние системы.
	ОбработкаНовостейКлиентСервер.ДобавитьШагВыполнения(Результат, "СостояниеСистемы", 0, ОбработкаНовостейПовтИсп.ОписаниеСостоянияСистемы());

	Возврат Результат;

КонецФункции

// Регистрирует начало шага выполнения в контексте выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//
Процедура НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага)

	ОбработкаНовостейКлиентСервер.НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага);

КонецПроцедуры

// Регистрирует начало шага выполнения в контексте выполнения и возвращает подготовленный контекст для вложенного вызова другого метода.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага           - Строка - Произвольный идентификатор.
//  НаименованиеМетодаВложенный - Строка - Произвольный идентификатор.
//
Функция НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, НаименованиеМетодаВложенный = "")

	// Вместо двух идентификаторов:
	// - "Основные:ЦиклПоВидамСоединений",
	// - НаименованиеМетода + "/ЦиклПоВидамСоединений");
	// кажется, что для чтения логов достаточно одного идентификатора:
	// - НаименованиеМетода + "/ЦиклПоВидамСоединений");
	Если ПустаяСтрока(НаименованиеМетодаВложенный) Тогда
		Возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, ИдентификаторШага);
	Иначе
		Возврат ОбработкаНовостейКлиентСервер.НачатьШагВыполненияВложенный(КонтекстВыполнения, ИдентификаторШага, НаименованиеМетодаВложенный);
	КонецЕсли;

КонецФункции

// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  КодРезультата               - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата          - Строка, Массив - произвольное описание результата шага.
//                                  Массив будет преобразован в строку с разделителями;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено)

	Возврат ОбработкаНовостейКлиентСервер.ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения);

КонецФункции

#КонецОбласти

#Область РаботаСТекстомЗапроса

// Для обработки запроса с мета-заменами (&Мета_) добавляет в список замен все условия.
// В запросе есть условия, начинающиеся с &Мета_, их надо заменить в зависимости от условий на другие значения.
// "&Мета_", в отличие от прямой конкатенации строк, позволяет редактировать текст запроса в редакторе запросов.
//
// Параметры:
//  МетаЗамены - Структура - список всех мета-замены;
//  Ключ       - Строка - Ключ мета-замены, для удобства установки значения;
//  ЧтоИскать  - Строка - что искать, должно начинаться с &Мета_.
//
Процедура ДобавитьНачальноеУсловиеМетаЗамены(МетаЗамены, Ключ, ЧтоИскать)

	МетаЗамены.Вставить(Ключ, Новый Структура("ЧтоИскать,ЧемЗаменять", ЧтоИскать, ""));

КонецПроцедуры

// Для обработки запроса с мета-заменами (&Мета_) добавляет в список замен все условия.
// В запросе есть условия, начинающиеся с &Мета_, их надо заменить в зависимости от условий на другие значения.
// "&Мета_", в отличие от прямой конкатенации строк, позволяет редактировать текст запроса в редакторе запросов.
//
// Параметры:
//  МетаЗамены  - Структура - список всех мета-замены;
//  Ключ        - Строка - Ключ мета-замены, для удобства установки значения;
//  ЧтоИскать   - Строка - что искать, должно начинаться с &Мета_, //&Мета_, или Мета_ (имя временной таблицы);
//  ЧемЗаменять - Строка - чем заменять.
//
Процедура ДобавитьУсловиеМетаЗамены(МетаЗамены, Ключ, ЧтоИскать, ЧемЗаменять)

	МетаЗамены.Вставить(Ключ, Новый Структура("ЧтоИскать,ЧемЗаменять", ЧтоИскать, ЧемЗаменять));

КонецПроцедуры

// Получить все новости из "избранного" текущего пользователя.
//
// Возвращаемое значение:
//   Массив из СправочникСсылка.Новости.
//
Функция ПолучитьНовостиИзИзбранногоТекущегоПользователя()

	ТипИзбранное = Тип("ИзбранноеРаботыПользователя");

	Результат = Новый Массив;

	// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
	ПолучатьНовостиИзИзбранного = Истина;
	Если (ОбщегоНазначения.РазделениеВключено())
			// Зашли в конфигурацию под пользователем без разделения (АдминистраторСистемы или фоновое задание (пустой пользователь)).
			И (ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей()) Тогда
		Возврат Результат;
	КонецЕсли;

	Избранное = ХранилищеСистемныхНастроек.Загрузить("Общее/ИзбранноеРаботыПользователя");
	Если ТипЗнч(Избранное) = ТипИзбранное Тогда // Для нового пользователя Избранное = Неопределено.
		ОписательСсылкиНаНовость = "e1cib/data/Справочник.Новости?ref=";
		МассивУникальныхИдентификаторовСсылок = Новый Массив;
		Для Каждого ТекущийЭлементИзбранного Из Избранное Цикл
			Если СтрНайти(ТекущийЭлементИзбранного.НавигационнаяСсылка, ОписательСсылкиНаНовость) > 0 Тогда
				ТолькоНавигационнаяСсылка = Прав(
					ТекущийЭлементИзбранного.НавигационнаяСсылка,
					СтрДлина(ТекущийЭлементИзбранного.НавигационнаяСсылка) - СтрДлина(ОписательСсылкиНаНовость));
				УникальныйИдентификаторСсылки = 
					Сред(ТолькоНавигационнаяСсылка, 25, 8)
					+ Сред(ТолькоНавигационнаяСсылка, 21, 4)
					+ Сред(ТолькоНавигационнаяСсылка, 17, 4)
					+ Сред(ТолькоНавигационнаяСсылка, 1, 4)
					+ Сред(ТолькоНавигационнаяСсылка, 5, 12);
				МассивУникальныхИдентификаторовСсылок.Добавить(УникальныйИдентификаторСсылки);
			КонецЕсли;
		КонецЦикла;
		Если МассивУникальныхИдентификаторовСсылок.Количество() > 0 Тогда
			ЗапросИзбранное = Новый Запрос;
			ЗапросИзбранное.Текст = "
				|ВЫБРАТЬ
				|	Рег.Новость КАК Ссылка
				|ИЗ
				|	РегистрСведений.СвойстваНовостей КАК Рег
				|ГДЕ
				|	Рег.УникальныйИдентификаторСсылки В (&МассивУникальныхИдентификаторовСсылок)
				|";
			ЗапросИзбранное.УстановитьПараметр("МассивУникальныхИдентификаторовСсылок", МассивУникальныхИдентификаторовСсылок);
			РезультатЗапроса = ЗапросИзбранное.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Результат = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// В массиве строк запроса выполняет замены по правилам из МетаЗамены.
//
// Параметры:
//  СтрокиЗапроса - Массив из Строка - массив строк запроса;
//  МетаЗамены - Структура - Ключ - Строка - произвольный ключ, а Значение:
//    * ЧтоИскать - Строка;
//    * ЧемЗаменять - Строка.
//
// Возвращаемое значение:
//   Массив из Строка - строки с выполненными заменами.
//
Функция ВыполнитьМетаЗамены(СтрокиЗапроса, МетаЗамены)

	Результат = Новый Массив;

	Для Каждого ТекущаяСтрока Из СтрокиЗапроса Цикл
		НоваяСтрока = ТекущаяСтрока;
		Для Каждого КлючЗначение Из МетаЗамены Цикл
			Если СтрНайти(ТекущаяСтрока, КлючЗначение.Значение.ЧтоИскать) > 0 Тогда
				НоваяСтрока = СтрЗаменить(НоваяСтрока, КлючЗначение.Значение.ЧтоИскать, КлючЗначение.Значение.ЧемЗаменять);
				Прервать; // Проектное решение, что в одной строке находится только одна мета-замена.
			КонецЕсли;
		КонецЦикла;
		Результат.Добавить(НоваяСтрока);
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли