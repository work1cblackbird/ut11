
#Область СлужебныеПроцедурыИФункции

// Операция получения количества складских заданий, заданного типа.
//
// Параметры:
//	IdWarehouse - Строка- идентификатор склада,
//	IdStorage - Строка- идентификатор помещения,
//	JobType - ОбъектXDTO - ТипыЗаданий - тип складского задания,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	JobsByWithoutIncluded - Булево - Истина - получение количества всех доступных складских заданий.
//
// Возвращаемое значение:
//	Число - количество доступных для выполнения заданий заданного вида.
//
Функция GetJobsCount(IdWarehouse, IdStorage, JobType, IdExecutor, JobsByWithoutIncluded)
	
	КоличествоЗаданий = РабочееМестоРаботникаСкладаXDTO.КоличествоСкладскихЗаданийWS(IdWarehouse, IdStorage, JobType,
		IdExecutor, JobsByWithoutIncluded);
	
	Возврат КоличествоЗаданий;
	
КонецФункции

// Операция получения таблицы заданий, выбранного типа операции.
//
// Параметры:
//	IdWarehouse - Строка- идентификатор склада,
//	IdStorage - Строка- идентификатор помещения,
//	JobType - ОбъектXDTO - ТипыЗаданий - тип складского задания,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	JobsByWithoutIncluded - Булево - Истина - получение количества всех доступных складских заданий.
//
// Возвращаемое значение:
//	ОбъектXDTO - таблица заданий заданного вида.
//
Функция GetJobsTable(IdWarehouse, IdStorage, JobType, IdExecutor, JobsByWithoutIncluded)
	
	ТаблицаЗаданийWS = РабочееМестоРаботникаСкладаXDTO.ТаблицаЗаданийWS(IdWarehouse, IdStorage, JobType, IdExecutor,
		JobsByWithoutIncluded);
	
	Возврат ТаблицаЗаданийWS;
	
КонецФункции

// Операция получения сведений со служебной информацией складского задания по штрихкоду документа складского задания.
//
// Параметры:
//	Barcode - Строка- штрихкод складского задания,
//	IdWarehouse - Строка- идентификатор склада,
//	IdStorage - Строка- идентификатор помещения,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	JobType - ОбъектXDTO - ТипыЗаданий - тип складского задания.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры складского задания:
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		ПорядокОбработки - ОбъектXDTO - порядок обработки складского задания,
//		ИсходныйИсполнитель - Пользователи - ОбъектXDTO - исходный исполнитель складского задания,
//		ОтборРазмещениеТоваров - ОтборРазмещениеТоваров - ОбъектXDTO - данные документа 'Отбор (размещение) товаров',
//		ПересчетТоваров - ПересчетТоваров - ОбъектXDTO - данные документа 'Пересчеты товаров',
//		ПриходныйОрдерНаТовары - ПриходныйОрдерНаТовары - ОбъектXDTO - данные документа 'Приходный ордер на товары',
//		РасходныйОрдерНаТовары - РасходныйОрдерНаТовары - ОбъектXDTO - данные документа 'Расходный ордер на товаров'.
//
Функция GetJobIDAndTypeByBarcode(Barcode, IdWarehouse, IdStorage, IdExecutor, JobType)
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ПараметрыЗаданияПоШтрихкодуWS(Barcode, IdWarehouse, IdStorage,
		IdExecutor, JobType);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Операция получения сведений со служебной информацией складского задания по ссылке документа складского задания.
//
// Параметры:
//	IdJob - Строка- идентификатор документа складского задания,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	JobType - ОбъектXDTO - ТипыЗаданий - тип складского задания.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры складского задания:
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		ПорядокОбработки - ОбъектXDTO - порядок обработки складского задания,
//		ИсходныйИсполнитель - Пользователи - ОбъектXDTO - исходный исполнитель складского задания,
//		ОтборРазмещениеТоваров - ОтборРазмещениеТоваров - ОбъектXDTO - данные документа 'Отбор (размещение) товаров',
//		ПересчетТоваров - ПересчетТоваров - ОбъектXDTO - данные документа 'Пересчеты товаров',
//		ПриходныйОрдерНаТовары - ПриходныйОрдерНаТовары - ОбъектXDTO - данные документа 'Приходный ордер на товары',
//		РасходныйОрдерНаТовары - РасходныйОрдерНаТовары - ОбъектXDTO - данные документа 'Расходный ордер на товаров'.
//
Функция GetAndTakeAllotmentPickJob(IdJob, IdExecutor, JobType)
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ПараметрыЗаданияПриПринятииВРаботуWS(IdJob, IdExecutor, JobType);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Операция получения данных о складских помещениях, предназначенных для приемки и отгрузки товаров.
//
// Параметры:
//	IdWarehouse - Строка- идентификатор склада,
//	IdStorage - Строка- идентификатор помещения.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры складских ячеек:
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		ЗоныПриемкиОтгрузки - ОбъектXDTO - таблица складских ячеек.
//
Функция GetAcceptanceAreas(IdWarehouse, IdStorage)
	
	ПараметрыСпискаЯчеек = РабочееМестоРаботникаСкладаXDTO.ЗоныПриемкиОтгрузкиWS(IdWarehouse, IdStorage);
	
	Возврат ПараметрыСпискаЯчеек;
	
КонецФункции

// Операция получения данных о товарах, хранящихся в складской ячейке, по ссылке ячейки.
//
// Параметры:
//	IdCell - Строка- идентификатор складской ячейки.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры товаров, хранящихся в ячейке:
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		Ячейка - СкладскиеЯчейки - ОбъектXDTO, Неопределено - складская ячейка,
//		ТоварыЯчейки - ОбъектXDTO - таблица товаров, хранящихся в ячейке.
//
Функция GetGoodsOfCellStored(IdCell)
	
	ПараметрыТоваровЯчейки = РабочееМестоРаботникаСкладаXDTO.ТоварыЯчейкиWS(IdCell);
	
	Возврат ПараметрыТоваровЯчейки;
	
КонецФункции

// Операция получения данных о товарах, хранящихся в складской ячейке, по штрихкоду ячейки.
//
// Параметры:
//	Barcode - Строка- штрихкод складской ячейки,
//	IdWarehouse - Строка- идентификатор склада,
//	IdStorage - Строка- идентификатор помещения.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры товаров, хранящихся в ячейке:
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		Ячейка - СкладскиеЯчейки - ОбъектXDTO, Неопределено - складская ячейка,
//		ТоварыЯчейки - ОбъектXDTO - таблица товаров, хранящихся в ячейке.
//
Функция GetGoodsOfCellStoredByBarcode(Barcode, IdWarehouse, IdStorage)
	
	ПараметрыТоваровЯчейки = РабочееМестоРаботникаСкладаXDTO.ТоварыЯчейкиПоШтрихкодуWS(Barcode, IdWarehouse, IdStorage);
	
	Возврат ПараметрыТоваровЯчейки;
	
КонецФункции

// Операция получения данных о товарах, хранящихся в складской ячейке, по штрихкоду ячейки.
//
// Параметры:
//	IdJob - Строка- идентификатор документа складского задания,
//	ScannedGoods - ЗначениеXDTO - ТаблицаОтсканированныхТоваров - отсканированные товары складского задания.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры обработка отобранных товаров складской операции "Перемещение":
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		ТоварыОтбор - ОтборРазмещениеТоваровТоварыОтбор - ОбъектXDTO - таблица отобранных товаров документа 
//			'Отбор (размещение) товаров', после выполнения отбора товаров по заданию складской операции "Перемещение".
//
Функция SetPickedGoodsInAllotmentPickJob(IdJob, ScannedGoods)
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ОбработатьОтсканированныеТоварыОтбораПеремещенияWS(IdJob,
		ScannedGoods);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Операция отмены выполнения складской операции. Устанавливает первоначальные данные документа складского задания, 
// до принятия его кладовщиком к исполнению.
//
// Параметры:
//	IdJob - Строка- идентификатор документа складского задания,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	JobType - ОбъектXDTO - ТипыЗаданий - тип складского задания.
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры складского задания операции "Перемещение":
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение.
//
Функция CancelJob(IdJob, IdExecutor, JobType)
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ОтменитьВыполнениеЗаданияWS(IdJob, IdExecutor, JobType);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Операция завершения выполнения складской операции. При сканировании товаров - отсканированные товары
// переносятся в табличные части документов. Устанавливаются нужные статусы у документов, выполняется 
// проведение документов.
//
// Параметры:
//	IdJob - Строка- идентификатор документа складского задания,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	ScannedGoods - ЗначениеXDTO - ТаблицаОтсканированныхТоваров - отсканированные товары складского задания,
//	JobType - ОбъектXDTO - ТипыЗаданий - тип складского задания,
//	AdditionalOptions - ОбъектXDTO - ПараметрыЗавершенияПеремещения - параметры завершения складской операции 
//		"Перемещение".
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры складского задания операции "Перемещение":
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		Задание - Строка, Неопределено - идентификатор документа 'Отбор (размещение) товаров' складской операции "Размещение",
//		НеотгружаемыеТовары - ТаблицаНеотгружаемыхТоваров - ОбъектXDTO - таблица неотгружаемых товаров складской 
//			операции "Проверка отбора".
//
Функция CompleteJob(IdJob, IdExecutor, ScannedGoods, JobType, AdditionalOptions)
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ЗавершитьВыполнениеСкладскогоЗаданияWS(IdJob,
		IdExecutor, ScannedGoods, JobType, AdditionalOptions);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

// Операция завершения выполнения складской операции. При сканировании товаров - отсканированные товары
// переносятся в табличные части документов. Устанавливаются нужные статусы у документов, выполняется 
// проведение документов.
//
// Параметры:
//	IdWarehouse - Строка- идентификатор склада,
//	IdStorage - Строка- идентификатор помещения,
//	IdAcceptanceDock - Строка - идентификатор складской ячейки зоны приемки,
//	IdExecutor - Строка- идентификатор исполнителя складского задания,
//	ScannedGoods - ЗначениеXDTO - ТаблицаОтсканированныхТоваров - отсканированные товары складского задания.
//	
//
// Возвращаемое значение:
//	ОбъектXDTO - параметры складского задания операции "Перемещение":
//		Успешно - Булево, Истина - данные складского задания получены,
//		ТекстСообщения - Строка - информационное сообщение,
//		Задание - Строка - идентификатор документа 'Отбор (размещение) товаров' складской операции "Размещение",
//		НеотгружаемыеТовары - ТаблицаНеотгружаемыхТоваров - ОбъектXDTO, Неопределено - таблица неотгружаемых товаров
//			складской операции "Проверка отбора".
//
Функция CompleteJobNewLocation(IdWarehouse, IdStorage, IdAcceptanceDock, IdExecutor, ScannedGoods)
	
	ПараметрыЗадания = РабочееМестоРаботникаСкладаXDTO.ЗавершитьВыполнениеЗаданияНовоеРазмещениеWS(IdWarehouse, IdStorage,
		IdAcceptanceDock, IdExecutor, ScannedGoods);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

#КонецОбласти
