///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)

	СтандартнаяОбработка = Истина;

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	ТипСтруктура     = Тип("Структура");
	ТипЛентаНовостей = Тип("СправочникСсылка.ЛентыНовостей");

	ПараметрыЭталон = Новый Структура;
		ПараметрыЭталон.Вставить("ЛентаНовостей", Неопределено);
	Если ТипЗнч(Параметры) = ТипСтруктура Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЭталон, Параметры);
	КонецЕсли;

	Если ТипЗнч(ПараметрыЭталон.ЛентаНовостей) = ТипЛентаНовостей
			И (НЕ ПараметрыЭталон.ЛентаНовостей.Пустая()) Тогда
		МассивДоступныхКатегорий = ПараметрыЭталон.ЛентаНовостей.ДоступныеКатегорииНовостей.ВыгрузитьКолонку("КатегорияНовостей");
		Если МассивДоступныхКатегорий.Количество() > 0 Тогда
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.ЗагрузитьЗначения(МассивДоступныхКатегорий);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

#КонецЕсли

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура загружает стандартные значения из макета с именем "СтандартныеЗначения".
// Имеет смысл заполнять значения из макета:
//  - при обновлении конфигурации (когда подключение к интернету может занять много времени);
//  - при первоначальном заполнении пустой базы, когда не заполнены параметры,
//      логины и пароли для доступа к веб-сервисам обновлений.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьСтандартныеЗначения(КонтекстВыполнения = Неопределено) Экспорт

#Область ИнициализацияМетода

	ОбъектМетаданных     = ПланыВидовХарактеристик.КатегорииНовостей; // Переопределение
	ИмяОбъектаМетаданных = "ПланыВидовХарактеристик.КатегорииНовостей"; // Переопределение
	ИмяСвойства          = "ChartOfCharacteristicTypesObject_КатегорииНовостей"; // Переопределение

	НаименованиеМетода = ИмяОбъектаМетаданных + ".ЗагрузитьСтандартныеЗначения"; // Идентификатор.
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = НовыйКонтекстВыполнения(НаименованиеМетода, Истина); // Этот контекст.
	КонецЕсли;

	НачатьШагВыполнения(КонтекстВыполнения, "Запуск:" + НаименованиеМетода); // Идентификатор.

	ТипСоответствие = Тип("Соответствие");
	ТипСтрока       = Тип("Строка");

#КонецОбласти

#Область Проверки

	Если НЕ ОбработкаНовостейСлужебный.Проверка_ДоступныНеразделенныеДанные(КонтекстВыполнения) Тогда
		Возврат;
	КонецЕсли;

#КонецОбласти

#Область Обработка

	Шаг = НаименованиеМетода + "/ЗагрузкаДанныхИзМакета";
	НачатьШагВыполнения(КонтекстВыполнения, Шаг);
	ЛогШаговВыполнения = Новый Массив;

	СодержимоеМакета = ОбъектМетаданных.ПолучитьМакет("СтандартныеЗначения").ПолучитьТекст();
	ПоставляемыеДанныеОбъекта = Новый Соответствие;
	ПоставляемыеДанныеОбъекта.Вставить(
		"" + ИмяОбъектаМетаданных + ":СтандартныеЗначения", // Идентификатор.
		СодержимоеМакета);
	ОбработкаНовостейСлужебный.ПолучитьДополнительныеСтандартныеЗначенияКлассификаторов(
		ИмяОбъектаМетаданных,
		ПоставляемыеДанныеОбъекта);
	Если ТипЗнч(ПоставляемыеДанныеОбъекта) = ТипСоответствие Тогда
		Для Каждого СтрокаСтандартныхЗначений Из ПоставляемыеДанныеОбъекта Цикл
			Если (ТипЗнч(СтрокаСтандартныхЗначений.Значение) = ТипСтрока)
					И (НЕ ПустаяСтрока(СтрокаСтандартныхЗначений.Значение)) Тогда
				ЕстьОшибки = Ложь;
				Попытка
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Попытка загрузки стандартных значений из строки (первые 2000 символов):
								|%1'"),
							Лев(СтрокаСтандартныхЗначений.Значение, 2000)));
					ЧтениеХМЛ = Новый ЧтениеXML;
					ЧтениеХМЛ.УстановитьСтроку(СтрокаСтандартныхЗначений.Значение);
					ЧтениеХМЛ.Прочитать();
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЛогШаговВыполнения.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка загрузки стандартных значений из строки по причине:
								|%1'"),
							ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке)));
					ЕстьОшибки = Истина;
				КонецПопытки;
				Если ЕстьОшибки <> Истина Тогда
					ХМЛТип = ПолучитьXMLТип(ЧтениеХМЛ);
					Если (НРег(ХМЛТип.ИмяТипа) = НРег("DefaultData")) Тогда
						// ... И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://v8.1c.ru/8.1/data/enterprise/current-config"))
						ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
						СвойствоОбъект = ОбъектХДТО.Свойства().Получить(ИмяСвойства);
						Если ТипЗнч(СвойствоОбъект) = Тип("СвойствоXDTO") Тогда
							Если (СвойствоОбъект.ВерхняяГраница = -1) ИЛИ (СвойствоОбъект.ВерхняяГраница > 1) Тогда
								СписокХДТО = ОбъектХДТО.ПолучитьСписок(СвойствоОбъект);
								Для каждого ЛокальныйТекущийОбъект Из СписокХДТО Цикл
									ЗагрузитьСтандартноеЗначение(
										ЛокальныйТекущийОбъект,
										ОбъектМетаданных,
										ИмяСвойства,
										ЛогШаговВыполнения);
								КонецЦикла;
							ИначеЕсли (СвойствоОбъект.НижняяГраница = 1) И (СвойствоОбъект.ВерхняяГраница = 1) Тогда
								ЗагрузитьСтандартноеЗначение(
									ОбъектХДТО.Получить(СвойствоОбъект),
									ОбъектМетаданных,
									ИмяСвойства,
									ЛогШаговВыполнения);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ЗавершитьШагВыполнения(КонтекстВыполнения, "", СтрСоединить(ЛогШаговВыполнения, Символы.ПС));

#КонецОбласти

#Область Завершение

	ОбработкаНовостейСлужебный.ЗаписатьКонтекстВыполненияВЖурналРегистрации(КонтекстВыполнения);

#КонецОбласти

КонецПроцедуры

// Процедура загружает стандартное значение из макета с именем "СтандартныеЗначения".
//
// Параметры:
//  ОбъектХДТО         - Объект ХДТО - загружаемый объект;
//  ОбъектМетаданных   - Объект метаданных;
//  ИмяСвойства        - Строка - имя свойства;
//  ЛогШаговВыполнения - Массив из Строка - пошаговое состояние загрузки данных.
//
Процедура ЗагрузитьСтандартноеЗначение(ОбъектХДТО, ОбъектМетаданных, ИмяСвойства, ЛогШаговВыполнения)

	Попытка
		Записывать = Истина;
		// Если в макете явно указан какой-то элемент, то найти его по УИН, а не по коду.
		НайденныйЭлемент = ОбъектХДТО.Ref;
		Если ПустаяСтрока(НайденныйЭлемент.ВерсияДанных) Тогда // Новый объект
			// Если в макете прописано помеченное на удаление значение, то не загружать его.
			Если ОбъектХДТО.DeletionMark = Истина Тогда
				// Заполнено помеченное на удаление значение - пропустить.
				ЛогШаговВыполнения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Пропуск (не найден помеченный на удаление): %1'"),
						СокрЛП(ОбъектХДТО.Code)));
				Записывать = Ложь;
			Иначе
				// Нет ранее созданных элементов с таким же кодом - оставить как есть.
				ЛогШаговВыполнения.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Создание: %1'"),
						СокрЛП(ОбъектХДТО.Code)));
			КонецЕсли;
		Иначе // Объект есть в базе данных
			// Записываем как указано в макете
			// Подменить на ранее созданный элемент с таким же кодом.
			ЛогШаговВыполнения.Добавить(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Изменение (по УИН): %1, %2'"),
					СокрЛП(НайденныйЭлемент.Код),
					СокрЛП(НайденныйЭлемент.Наименование)));
		КонецЕсли;
		Если Записывать = Истина Тогда
			ТекущийОбъект = СериализаторXDTO.ПрочитатьXDTO(ОбъектХДТО);
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			ТекущийОбъект.Записать();
			// После записи классификатора можно провести дополнительные обработки.
			ОбработкаНовостейСлужебный.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(ТекущийОбъект.Ссылка);
		КонецЕсли;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ИдентификаторШага = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Новости. Сервис и регламент. Загрузка стандартных значений. %1. Ошибка'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяСвойства);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Не удалось записать объект метаданных по причине:
				|%1'"),
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбработкаНовостейВызовСервера.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Сервис и регламент'", ОбщегоНазначения.КодОсновногоЯзыка()), // ИмяСобытия.
			ИдентификаторШага, // ИдентификаторШага.
			УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
			ОбъектМетаданных, // ОбъектМетаданных
			, // Данные
			ТекстСообщения, // Комментарий
			ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
		ЛогШаговВыполнения.Добавить(ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

// Возвращает реквизиты справочника, которые образуют естественный ключ для элементов справочника.
// Используется для сопоставления элементов механизмом "Выгрузка/загрузка областей данных".
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Массив(Строка) - массив имен реквизитов, образующих естественный ключ.
//
Функция ПоляЕстественногоКлюча() Экспорт

	Результат = Новый Массив;

	Результат.Добавить("Код");

	Возврат Результат;

КонецФункции

#Область ЛогИОтладкаЛокальный

// Возвращает структуру контекста выполнения.
//
// Параметры:
//  НаименованиеМетода           - Строка - имя метода;
//  ЗаписыватьВЖурналРегистрации - Булево - если Истина, то в конце метода будет запись в журнал регистрации.
//
// Возвращаемое значение:
//   Структура - см. в коде.
//
Функция НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации = Ложь)

	Результат = ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения(НаименованиеМетода, ЗаписыватьВЖурналРегистрации);

	// При создании нового контекста выполнения первый же шаг - показать основное состояние системы.
	ОбработкаНовостейКлиентСервер.ДобавитьШагВыполнения(Результат, "СостояниеСистемы", 0, ОбработкаНовостейПовтИсп.ОписаниеСостоянияСистемы());

	Возврат Результат;

КонецФункции

// Регистрирует начало шага выполнения в контексте выполнения.
//
// Параметры:
//  КонтекстВыполнения - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  ИдентификаторШага  - Строка - Произвольный идентификатор.
//
Процедура НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага)

	ОбработкаНовостейКлиентСервер.НачатьШагВыполнения(КонтекстВыполнения, ИдентификаторШага);

КонецПроцедуры

// Регистрирует завершение шага выполнения и возвращает последний шаг.
//
// Параметры:
//  КонтекстВыполнения          - Структура - см. возврат ОбработкаНовостейКлиентСервер.НовыйКонтекстВыполнения;
//  КодРезультата               - Число - Произвольный код описания возврата, 0 = нет ошибок;
//  ОписаниеРезультата          - Строка, Массив - произвольное описание результата шага.
//                                  Массив будет преобразован в строку с разделителями;
//  ВложенныйКонтекстВыполнения - Неопределено или Массив - массив вложенных шагов выполнения.
//
// Возвращаемое значение:
//   Структура - список ключей см. в ОбработкаНовостейКлиентСервер.НовыйОписательШагаВыполнения.
//
Функция ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения = Неопределено)

	Возврат ОбработкаНовостейКлиентСервер.ЗавершитьШагВыполнения(КонтекстВыполнения, КодРезультата, ОписаниеРезультата, ВложенныйКонтекстВыполнения);

КонецФункции

#КонецОбласти

#Область ПредопределенныеДанные

// Возвращает структуру с описанием предопределенных категорий:
//  - Product         - Описание продукта (наименование и версия);
//  - ProductVersion  - Версия продукта;
//  - PlatformVersion - Версия платформы.
//
// Возвращаемое значение:
//   Структура - Структура с ключами, соответствующими кодам предопределенных категорий.
//
Функция ПредопределенныеКатегорииНовостей() Экспорт

	Результат = ОбработкаНовостейПовтИсп.ПредопределенныеКатегорииНовостей();

	Возврат Результат;

КонецФункции

// Возвращает ссылку на элемент с кодом "Product"
//
// Возвращаемое значение:
//   ПланВидовХарактеристикСсылка - ссылка на элемент.
//
Функция КатегорияПродукт() Экспорт

	Результат = ПредопределенныеКатегорииНовостей()["Product"];

	Возврат Результат;

КонецФункции

// Возвращает ссылку на элемент с кодом "ProductVersion"
//
// Возвращаемое значение:
//   ПланВидовХарактеристикСсылка - ссылка на элемент.
//
Функция КатегорияВерсияПродукта() Экспорт

	Результат = ПредопределенныеКатегорииНовостей()["ProductVersion"];

	Возврат Результат;

КонецФункции

// Возвращает ссылку на элемент с кодом "PlatformVersion"
//
// Возвращаемое значение:
//   ПланВидовХарактеристикСсылка - ссылка на элемент.
//
Функция КатегорияВерсияПлатформы() Экспорт

	Результат = ПредопределенныеКатегорииНовостей()["PlatformVersion"];

	Возврат Результат;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
