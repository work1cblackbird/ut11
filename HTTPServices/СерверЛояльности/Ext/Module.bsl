#Область ОбработчикиСобытий

Функция pingGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Ответ.УстановитьТелоИзСтроки("ok");
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьБонусыКлиентаGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		ПараметрыМетода = Неопределено;
		КартаКлиента 	= Неопределено;
		
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросКоличестваБонусов", СтруктураОтвета);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ПараметрыМетода, КартаКлиента);
		
		Если КартаКлиента <> Неопределено Тогда
			
			ТребуетсяБлокировкаБонусов = Истина;
			СерверЛояльностиПоставщикДанныхПереопределяемый.ПроверитьБонуснуюПрограмму(КартаКлиента, ТребуетсяБлокировкаБонусов);
			СтруктураОтвета.ClientNotFound = Ложь;
			Если ТребуетсяБлокировкаБонусов Тогда
				БонусыЗаблокированы = СерверЛояльностиПоставщикДанных.БонусыЗаблокированы(КартаКлиента);
			
				Если Не БонусыЗаблокированы Тогда
				
					СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьДанныеОБонусах(КартаКлиента, СтруктураОтвета);
					Если СтруктураОтвета.BonusCount > 0 Тогда
						СерверЛояльностиПоставщикДанных.ЗаблокироватьБонусы(КартаКлиента, ТекущаяДатаСеанса());
					КонецЕсли;
				
				КонецЕсли;
			КонецЕсли;
			СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета);
			
		КонецЕсли;
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ПолучитьБонусыКлиента");
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция РазблокироватьБонусыКлиентаPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	Попытка
		
		ИспользоватьСерверЛояльности = Ложь;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
		Если Не ИспользоватьСерверЛояльности Тогда
			Возврат Ответ;
		КонецЕсли;
		
		ПараметрыМетода = Неопределено;
		КартаКлиента 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ПараметрыМетода, КартаКлиента);
		
		Если КартаКлиента <> Неопределено Тогда
			СерверЛояльностиПоставщикДанных.РазблокироватьБонусы(КартаКлиента);
			ТекстСообщения = НСтр("ru = 'Бонусы разблокированы'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Карта клиента не найдена'");
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "РазблокироватьБонусыКлиента");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция СписатьБонусыКлиентаPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода = Неопределено;
		КартаКлиента 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ПараметрыМетода, КартаКлиента);
		
		Если КартаКлиента <> Неопределено Тогда 
			Если ЗначениеЗаполнено(ПараметрыМетода.КоличествоБонусныхБаллов) Тогда
				СерверЛояльностиПоставщикДанных.СписатьБонусы(КартаКлиента, ПараметрыМетода.КоличествоБонусныхБаллов);
				ТекстСообщения = НСтр("ru = 'Бонусы успешно списаны'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Количество баллов не указано'");
			КонецЕсли;
		Иначе 
			ТекстСообщения = НСтр("ru = 'Карта клиента не найдена'");
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "СписатьБонусыКлиента");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ВыдатьКартуКлиентуPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода = Неопределено;
		КартаКлиента 	= Неопределено;
		СтруктураОтвета = Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("КартаКлиента", СтруктураОтвета);
		
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПроверитьДанныеКартыКлиента(ПараметрыМетода, СтруктураОтвета);
		
		Если СтруктураОтвета.Error = Ложь Тогда
			
			СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ПараметрыМетода, КартаКлиента);
			КартаСуществует = ЗначениеЗаполнено(КартаКлиента);
			ДругойКлиент = Неопределено;
			
			Если Не КартаСуществует Тогда
				КартаКлиента = Неопределено;
				ОписаниеОшибки = "";
				СерверЛояльностиПоставщикДанныхПереопределяемый.СоздатьКартуКлиента(ПараметрыМетода, КартаКлиента, ДругойКлиент, ОписаниеОшибки);
			КонецЕсли;

			Если ЗначениеЗаполнено(КартаКлиента) Тогда
				СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьСтруктуруОтветаДаннымиКарты(КартаКлиента, СтруктураОтвета, КартаСуществует);
			ИначеЕсли ЗначениеЗаполнено(ДругойКлиент) Тогда
				СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьСтруктуруОтветаДаннымиКлиента(ДругойКлиент, СтруктураОтвета);
			Иначе
				СтруктураОтвета.Error = Истина;
				Если ПустаяСтрока(ОписаниеОшибки) Тогда
					СтруктураОтвета.ErrorMessage = НСтр("ru = 'Не удалось создать карту клиента'");
				Иначе
					СтруктураОтвета.ErrorMessage = ОписаниеОшибки;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ВыдатьКартуКлиенту");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ИнформацияОЗапретахПродажGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	ПараметрыМетода = Неопределено;
	СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ДанныеОЗапретахПродаж(ПараметрыМетода, СтруктураОтвета);
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ИнформацияОЗапретахПродаж");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьДанныеПодарочногоСертификатаGET(Запрос)
	
	Попытка
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		ИспользоватьСерверЛояльности = Ложь;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
		Если Не ИспользоватьСерверЛояльности Тогда
			Возврат Ответ;
		КонецЕсли;
		
		ПараметрыМетода 	= Неопределено;
		СтруктураОтвета 	= Неопределено;
		ДанныеСертификата 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросДанныхПодарочногоСертификата", СтруктураОтвета);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиПодарочныйСертификат(ПараметрыМетода, ДанныеСертификата);
		
		Если ДанныеСертификата.ПодарочныйСертификат <> Неопределено Тогда 
			СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьБалансПодарочногоСертификата(ДанныеСертификата, СтруктураОтвета);
		Иначе
			Если Не ЗначениеЗаполнено(ПараметрыМетода.НомерСертификата) И ПараметрыМетода.Свойство("ГУИДСертификата") Тогда
				НомерСертификата = ПараметрыМетода.ГУИДСертификата; 
				ИмяРеквизита = "ГУИД";
			Иначе
				НомерСертификата = ПараметрыМетода.НомерСертификата;
				ИмяРеквизита = "номером";
			КонецЕсли;
		КонецЕсли;
		
		// Возвращаем структуру ответа 
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПолучитьДанныеПодарочногоСертификата");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции 

Функция ПолучитьДанныеПромокодаGET(Запрос)
	
	Попытка
		
		Ответ = Новый HTTPСервисОтвет(200);
		
		ИспользоватьСерверЛояльности = Ложь;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
		Если Не ИспользоватьСерверЛояльности Тогда
			Возврат Ответ;
		КонецЕсли;
		
		ПараметрыМетода 	= Неопределено;
		СтруктураОтвета 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросСостоянияПромокода", СтруктураОтвета);
		
		Если ПараметрыМетода.Промокод <> Неопределено Тогда
			СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьСостояниеПромокода(ПараметрыМетода, СтруктураОтвета, Истина);
		КонецЕсли;
		
		// Возвращаем структуру ответа 
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПолучитьДанныеПромокода");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция РазблокироватьПодарочныйСертификатPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода   = Неопределено;
		ДанныеСертификата = Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиПодарочныйСертификат(ПараметрыМетода, ДанныеСертификата);
		
		Если ДанныеСертификата.ПодарочныйСертификат <> Неопределено Тогда
			СерверЛояльностиПоставщикДанных.РазблокироватьПодарочныйСертификат(ДанныеСертификата);
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат разблокирован'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат не найден'");
		КонецЕсли;
		
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "РазблокироватьПодарочныйСертификат");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции 

Функция РазблокироватьПромокодPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода   = Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		
		СерверЛояльностиПоставщикДанных.СнятьРезервПримененияПромокода(ПараметрыМетода.Промокод);
		ТекстСообщения = НСтр("ru = 'Промокод разблокирован'");
			
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "РазблокироватьПодарочныйСертификат");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция СписатьПодарочныйСертификатPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ПараметрыМетода   = Неопределено;
		ДанныеСертификата = Неопределено;
		
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиПодарочныйСертификат(ПараметрыМетода, ДанныеСертификата);
		
		Если ДанныеСертификата.ПодарочныйСертификат <> Неопределено Тогда
			СерверЛояльностиПоставщикДанных.СписатьБалансПодарочногоСертификата(ДанныеСертификата, ПараметрыМетода.СуммаСписания);
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат успешно списан на указанную сумму'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат не найден'");
		КонецЕсли;
		Ответ.УстановитьТелоИзСтроки(ТекстСообщения);
	
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "СписатьПодарочныйСертификат");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ИспользоватьАвтоматическиеСкидкиGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	СтруктураОтвета = Неопределено;
	СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросИспользованияАвтоматическихСкидок", СтруктураОтвета);
	
	Попытка
		
		СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьАвтоматическиеСкидки(СтруктураОтвета.UseAutomaticDiscounts);
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
	
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
	
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ЗапросИспользованияАвтоматическихСкидок");
		
	КонецПопытки;
		
	Возврат Ответ;
	
КонецФункции

Функция РассчитатьАвтоматическиеСкидкиGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	ВходящиеДанные		= Запрос.ПолучитьТелоКакСтроку();
	ПараметрыРасчета 	= Неопределено;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ДесериализоватьПараметрыРасчета(ВходящиеДанные, ПараметрыРасчета);
	
	Попытка
	
		Если ПараметрыРасчета.ЕстьОшибки Тогда
			АвтоматическиеСкидки = Неопределено;
			СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("", АвтоматическиеСкидки);
			АвтоматическиеСкидки.Error = Истина;
			АвтоматическиеСкидки.ErrorMessage = ПараметрыРасчета.ОписаниеОшибки;
		Иначе
			СерверЛояльностиПоставщикДанныхПереопределяемый.РассчитатьАвтоматическиеСкидки(ПараметрыРасчета,
				АвтоматическиеСкидки);
			Если ПараметрыРасчета.ВернутьДанныеКарты И ПараметрыРасчета.БлокироватьКарту = "1"
					И Не АвтоматическиеСкидки.LoyaltyCardDescription.CardNotFound Тогда
					
				ДанныеКарты = АвтоматическиеСкидки.LoyaltyCardDescription.LoyaltyCard;
				Если ДанныеКарты.BonusData.BonusCount > 0 И Не ДанныеКарты.IsBlocked Тогда
					СерверЛояльностиПоставщикДанных.ЗаблокироватьБонусы(ПараметрыРасчета.ДисконтнаяКарта, ТекущаяДатаСеанса());
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, АвтоматическиеСкидки);
	
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Описание = ОписаниеОшибки();
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(Описание, "РассчитатьАвтоматическиеСкидки");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция РассчитатьАвтоматическиеСкидкиPOST(Запрос)
	
	Ответ = РассчитатьАвтоматическиеСкидкиGET(Запрос);
	
	Возврат Ответ;
	
КонецФункции

Функция ПроверитьПодарочныйСертификатGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	СтруктураОтвета = Неопределено;
	СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ПроверкаПодарочногоСертификата", СтруктураОтвета);
	
	Попытка
		
		ПараметрыМетода = Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПроверитьПодарочныйСертификат(ПараметрыМетода, СтруктураОтвета);
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
	
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПроверкаПодарочногоСертификата");
		
	КонецПопытки;
		
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСписокУправляемыхСкидокGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		
		ПараметрыРасчета 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыРасчета);
		
		СерверЛояльностиПоставщикДанных.СписокУправляемыхСкидок(СтруктураОтвета, ПараметрыРасчета);
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "СписокУправляемыхСкидок");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСписокСкидокПоВидамОплатыGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		СерверЛояльностиПоставщикДанных.СписокСкидокПоВидамОплаты(СтруктураОтвета);
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "СписокСкидокПоВидамОплаты");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОстаткиGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ВходящиеДанные = Запрос.ПолучитьТелоКакСтроку();
		ПараметрыПолученияОстатков = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПараметрыИзЗапросаПолучитьОстатки(ВходящиеДанные, ПараметрыПолученияОстатков);
		
		СтруктураОтвета = Неопределено;
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ПолучитьОстатки", СтруктураОтвета);
		
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьОстатки(ПараметрыПолученияОстатков, СтруктураОтвета);
		
		// Возвращаем структуру ответа 
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПолучитьОстатки");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОстаткиPOST(Запрос)
	
	Ответ = ПолучитьОстаткиGET(Запрос);
	
	Возврат Ответ;
	
КонецФункции

Функция НайтиКартуКлиентаGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		ПараметрыМетода = Неопределено;
		КартаКлиента = Неопределено;
		
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапросаНайтиКартуКлиента(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросКартЛояльности", СтруктураОтвета);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартыЛояльности(ПараметрыМетода, СтруктураОтвета);
		
		Если ПараметрыМетода.БлокироватьКарту = "1" И СтруктураОтвета.LoyaltyCardsList.Количество() = 1 
				И СтруктураОтвета.LoyaltyCardsList[0].BonusData.BonusCount > 0
				И Не СтруктураОтвета.LoyaltyCardsList[0].IsBlocked Тогда
			
			ГУИДКартыСтрокой = СтруктураОтвета.LoyaltyCardsList[0].CardGUID;
			СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьКартуКлиентаПоУникальномуИдентификатору(ГУИДКартыСтрокой,
				КартаКлиента);
			СерверЛояльностиПоставщикДанных.ЗаблокироватьБонусы(КартаКлиента, ТекущаяДатаСеанса());
			
		КонецЕсли;
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "НайтиКартуКлиента");
		
	КонецПопытки;
		
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьВидыКартGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		СерверЛояльностиПоставщикДанных.СписокВидовДисконтныхКарт(СтруктураОтвета);
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ПолучитьВидыКарт");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьОборотыПродажGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		СтруктураОтвета = Неопределено;
		ПараметрыМетода = Неопределено;
		КартаКлиента 	= Неопределено;
		
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ЗапросОборотовПродажи", СтруктураОтвета);
		СерверЛояльностиПоставщикДанныхПереопределяемый.НайтиКартуКлиента(ПараметрыМетода, КартаКлиента);
		
		Если КартаКлиента <> Неопределено Тогда
			
			СтруктураОтвета.ClientNotFound = Ложь;
			
			СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьДанныеОбОборотахПродаж(КартаКлиента, СтруктураОтвета);
			
			СерверЛояльностиПоставщикДанныхПереопределяемый.ЗаполнитьСтруктуруОтветаНомерамиКарты(КартаКлиента, СтруктураОтвета);
			
		КонецЕсли;
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ПолучитьОборотыПродаж");
		
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьСписокПродавцовGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	СтруктураОтвета = Неопределено;
	
	Попытка
		
		ПараметрыРасчета 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыРасчета);
		СерверЛояльностиПоставщикДанных.СписокСотрудников(ПараметрыРасчета, СтруктураОтвета);
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "СписокПродавцов");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьСписокСерийПоОтборуGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	
	СтруктураОтвета = Неопределено;

	Попытка
		
		ПараметрыРасчета 	= Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыРасчета);
		СерверЛояльностиПоставщикДанных.ЗаполнитьСписокСерий(ПараметрыРасчета, СтруктураОтвета);
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ПолучитьСписокСерийПоТовару");
		
	КонецПопытки;
	
	Возврат Ответ;
КонецФункции

Функция ПолучитьДанныеСерииGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	СтруктураОтвета = Неопределено;
	СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("ПолучитьДанныеСерии", СтруктураОтвета);
		
	Попытка
		
		ПараметрыМетода = Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьДанныеСерии(ПараметрыМетода, СтруктураОтвета);
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
	
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ПолучитьДанныеСерии");
		
	КонецПопытки;
		
	Возврат Ответ;
КонецФункции

Функция ОбработатьКодМаркировкиPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ВходящиеДанные = Запрос.ПолучитьТелоКакСтроку();
		ПараметрыОбработкиКодаМаркировки = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПараметрыИзЗапросаОбработатьКодМаркировки(ВходящиеДанные, ПараметрыОбработкиКодаМаркировки);
		
		РезультатОтвета = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ОбработатьКодМаркировки(ПараметрыОбработкиКодаМаркировки, РезультатОтвета);
		
		// Возвращаем структуру ответа 
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, РезультатОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ОбработатьКодМаркировки");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьТокенАвторизацииГосИСPOST(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	Попытка
		
		ВходящиеДанные = Запрос.ПолучитьТелоКакСтроку();
		ПараметрыПолученияТокенаАвторизации = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПараметрыИзЗапросаПолучитьТокенАвторизацииГосИС(ВходящиеДанные, ПараметрыПолученияТокенаАвторизации);
		
		РезультатОтвета = Неопределено;
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьТокенАвторизацииГосИС(ПараметрыПолученияТокенаАвторизации, РезультатОтвета);
		
		// Возвращаем структуру ответа 
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, РезультатОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки(), "ПолучитьТокенАвторизацииГосИС");
		
	КонецПопытки;
	
	Возврат Ответ;
	
КонецФункции

Функция ПолучитьАктуальнуюЦенуGET(Запрос)
	
	Ответ = Новый HTTPСервисОтвет(200);
	
	ИспользоватьСерверЛояльности = Ложь;
	СерверЛояльностиПоставщикДанныхПереопределяемый.ИспользоватьСерверЛояльности(Ответ, ИспользоватьСерверЛояльности);
	Если Не ИспользоватьСерверЛояльности Тогда
		Возврат Ответ;
	КонецЕсли;
	
	СтруктураОтвета = Неопределено;
	СерверЛояльностиПоставщикДанных.ПолучитьСтруктуруОтвета("СтруктураПолученияЦены", СтруктураОтвета);
		
	Попытка
		
		ПараметрыМетода = Неопределено;
		СерверЛояльностиПоставщикДанных.ПараметрыМетодаИзЗапроса(Запрос, ПараметрыМетода);
		СерверЛояльностиПоставщикДанныхПереопределяемый.ПолучитьДанныеСерии(ПараметрыМетода, СтруктураОтвета);
		
		// Возвращаем структуру ответа
		СтруктураОтветаJSON = Новый ЗаписьJSON;
		СтруктураОтветаJSON.УстановитьСтроку();
		ЗаписатьJSON(СтруктураОтветаJSON, СтруктураОтвета);
		
		Ответ.УстановитьТелоИзСтроки(СтруктураОтветаJSON.Закрыть());
		
	Исключение
		
		ОписаниеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Ответ = СерверЛояльностиПоставщикДанных.ЗафиксироватьОшибкуСервисаЛояльности(ОписаниеОшибки, "ПолучитьДанныеСерии");
		
	КонецПопытки;
		
	Возврат Ответ;
	
КонецФункции

#КонецОбласти
