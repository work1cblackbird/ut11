
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.5.17.58";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.ЗапускатьИВПодчиненномУзлеРИБСФильтрами = Истина;
	Обработчик.Процедура = "Константы.НастройкиСервисаПрогнозирования.ОбновитьНастройкиСервисаПрогнозирования";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("1ba4a016-01f1-f915-b6e1-de4231c0769f");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Константы.НастройкиСервисаПрогнозирования.ЗаполнениеДанныхОбновления";
	Обработчик.ОчередьОтложеннойОбработки = 1;
	Обработчик.ПроцедураПроверки = "";
	Обработчик.ЧитаемыеОбъекты = "Константа.НастройкиСервисаПрогнозирования";
	Обработчик.ИзменяемыеОбъекты = "Константа.НастройкиСервисаПрогнозирования";
	Обработчик.БлокируемыеОбъекты = "";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет настройки сервиса прогнозирования продаж'");
	
КонецПроцедуры

// Обновляет настройки сервиса прогнозирования при обновлении информационной базы.
//
// Параметры:
//  Параметры - Структура - параметры обработчика обновления.
//                          См. документацию по подсистеме СтандартныеПодсистемы.ОбновлениеВерсииИБ.
//
Процедура ОбновитьНастройкиСервисаПрогнозирования(Параметры) Экспорт
	
	Параметры.ПрогрессВыполнения.ВсегоОбъектов = 1;
	
	МетаданныеОбъекта    = Метаданные.Константы.НастройкиСервисаПрогнозирования;
	ПолноеИмяОбъекта     = МетаданныеОбъекта.ПолноеИмя();
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов   = 0;
	
	СохраненныеНастройкиПрогнозирования = Неопределено;
	ШаблонНовыхНастроек                 = СервисПрогнозирования.ПолучитьШаблонныеНастройкиСервиса();
	
	Блокировка              = Новый БлокировкаДанных;
	ЭлементБлокировки       = Блокировка.Добавить(ПолноеИмяОбъекта);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка.Заблокировать();
		
		МенеджерЗначения = Константы.НастройкиСервисаПрогнозирования.СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		НастройкиПрогнозирования = МенеджерЗначения.Значение;
		Если ЗначениеЗаполнено(НастройкиПрогнозирования) Тогда
			СохраненныеНастройкиПрогнозирования = НастройкиПрогнозирования.Получить(); // Неопределено, Структура - 
		КонецЕсли;
		
		Если СохраненныеНастройкиПрогнозирования <> Неопределено Тогда
			
			Если СохраненныеНастройкиПрогнозирования.Версия <> ШаблонНовыхНастроек.Версия Тогда
				СохраненныеНастройкиПрогнозирования.Версия           = ШаблонНовыхНастроек.Версия;
			КонецЕсли;
			Если СохраненныеНастройкиПрогнозирования.Тариф <> ШаблонНовыхНастроек.Тариф Тогда
				СохраненныеНастройкиПрогнозирования.Тариф            = ШаблонНовыхНастроек.Тариф;
			КонецЕсли;
			Если СохраненныеНастройкиПрогнозирования.ТипАвторизации <> ШаблонНовыхНастроек.ТипАвторизации Тогда
				СохраненныеНастройкиПрогнозирования.ТипАвторизации   = ШаблонНовыхНастроек.ТипАвторизации;
			КонецЕсли;
			Если СохраненныеНастройкиПрогнозирования.ИмяСервиса <> ШаблонНовыхНастроек.ИмяСервиса Тогда
				СохраненныеНастройкиПрогнозирования.ИмяСервиса       = ШаблонНовыхНастроек.ИмяСервиса;
				// Признак изменения интерфейса сервиса и необходимости перерегистрации приложения.
				Если ЗначениеЗаполнено(СохраненныеНастройкиПрогнозирования.ТокенПриложения) Тогда
					НужнаПеререгистрация = СохраненныеНастройкиПрогнозирования.СтатусПодключения
							= СервисПрогнозирования.СтатусПодключенияАктивен()
						Или СохраненныеНастройкиПрогнозирования.СтатусПодключения
							= СервисПрогнозирования.СтатусПодключенияВОчереди();
					Если НужнаПеререгистрация Тогда
						ШаблонНовыхНастроек.ИзмененАПИСервиса = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СохраненныеНастройкиПрогнозирования.АдресПодключения <> ШаблонНовыхНастроек.АдресПодключения Тогда
				СохраненныеНастройкиПрогнозирования.АдресПодключения = ШаблонНовыхНастроек.АдресПодключения;
			КонецЕсли;
			
			СтарыеКоллекции = СохраненныеНастройкиПрогнозирования.Коллекции;
			Если ТипЗнч(СтарыеКоллекции) = Тип("Соответствие") Тогда
				
				НовыеКоллекции = ШаблонНовыхНастроек.Коллекции;
				Ключи          = КлючиКОбработке();
				
				Для Каждого Ключ Из Ключи Цикл
					
					НовыйКлюч = СоответствиеКоллекцийИсточника(Ключ);
					
					СтараяКоллекция = СтарыеКоллекции[НовыйКлюч];
					Если СтараяКоллекция = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяКоллекция            = НовыеКоллекции[НовыйКлюч];
					ПользовательскиеРеквизиты = ПользовательскиеРеквизитыКоллекции(СтараяКоллекция["ВложенноеОписание"]);
					
					// Заполнение актуальных свойств коллекции сохраненными значениями.
					Для Каждого НовоеСвойство Из НоваяКоллекция Цикл
						
						СтароеЗначениеСвойства = Неопределено;
						СтараяКоллекция.Свойство(НовоеСвойство.Ключ, СтароеЗначениеСвойства);
						Если СтароеЗначениеСвойства = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						// Свойство "ВложенноеОписание" реквизитов коллекции.
						Если ТипЗнч(СтароеЗначениеСвойства) = Тип("Структура") Тогда
							
							Для Каждого НовыйРеквизит Из НовоеСвойство.Значение Цикл
								
								СтарыйРеквизит = Неопределено;
								СтароеЗначениеСвойства.Свойство(НовыйРеквизит.Ключ, СтарыйРеквизит);
								Если СтарыйРеквизит = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								
								Если СтарыйРеквизит.ЭтоПользовательскоеПоле Тогда
									Продолжить; // Исключение актуального реквизита, ошибочно перезаписанного в состав пользовательских реквизитов.
								КонецЕсли;
								
								ОписаниеНовогоРеквизита = НовыйРеквизит.Значение;
								Если СтарыйРеквизит.ИмяВСервисе <> ОписаниеНовогоРеквизита.ИмяВСервисе Тогда
									Продолжить;
								КонецЕсли;
								Если СтарыйРеквизит.Обязательный <> ОписаниеНовогоРеквизита.Обязательный Тогда
									Продолжить;
								КонецЕсли;
								ЗаполнитьЗначенияСвойств(ОписаниеНовогоРеквизита, СтарыйРеквизит);
								
							КонецЦикла;
							
						Иначе
							НоваяКоллекция.Вставить(НовоеСвойство.Ключ, СтароеЗначениеСвойства);
						КонецЕсли;
						
					КонецЦикла;
					
					НовоеОписаниеРеквизитов = НоваяКоллекция["ВложенноеОписание"];
					Для Каждого ПользовательскийРеквизит Из ПользовательскиеРеквизиты Цикл
						НовоеОписаниеРеквизитов.Вставить(ПользовательскийРеквизит.Ключ, ПользовательскийРеквизит.Значение);
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого КлючЗначение Из ШаблонНовыхНастроек Цикл
				
				Если Не СохраненныеНастройкиПрогнозирования.Свойство(КлючЗначение.Ключ) Тогда
					Продолжить; // Новая настройка, отсутствующая в прошлой версии.
				КонецЕсли;
				
				Если ((ТипЗнч(КлючЗначение.Значение) = Тип("Структура")
					Или ТипЗнч(КлючЗначение.Значение) = Тип("Соответствие"))
						И КлючЗначение.Значение.Количество() > 0) Тогда
					
					Если КлючЗначение.Ключ = "Коллекции" Тогда
						Продолжить; // Установка сохраненных значений происходит отдельно (см. выше).
					ИначеЕсли КлючЗначение.Ключ = "ИзмененАПИСервиса" Тогда
						Продолжить; // Устанавливается отдельно при изменении имени сервиса.
					КонецЕсли;
					
					Для Каждого КлючЗначениеВнутренний Из КлючЗначение.Значение Цикл
						ЭтоСтруктура  = ТипЗнч(СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ]) = Тип("Структура");
						КлючСтроковый = ТипЗнч(КлючЗначениеВнутренний.Ключ) = Тип("Строка");
						
						КлючСодержитсяВСтруктуре = СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ] <> Неопределено
							И ЭтоСтруктура
							И КлючСтроковый
							И СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ].Свойство(КлючЗначениеВнутренний.Ключ)
							И ЗначениеЗаполнено(СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ]);
							
						КлючСодержитсяВСоответствии = СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ] <> Неопределено
							И Не ЭтоСтруктура
							И СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ].Получить(КлючЗначениеВнутренний.Ключ) <> Неопределено;
						
						Если КлючСодержитсяВСтруктуре Или КлючСодержитсяВСоответствии Тогда
							ШаблонНовыхНастроек[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ]
								= СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ][КлючЗначениеВнутренний.Ключ];
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					ШаблонНовыхНастроек[КлючЗначение.Ключ] = СохраненныеНастройкиПрогнозирования[КлючЗначение.Ключ];
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ХранилищеПараметров = Новый ХранилищеЗначения(ШаблонНовыхНастроек);
		МенеджерЗначения.Значение = ХранилищеПараметров;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
		ОбработанныхОбъектов = ОбработанныхОбъектов + 1;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Настройки сервиса прогнозирования"" по причине:'")
			+ Символы.ПС + ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Предупреждение, МетаданныеОбъекта, , ТекстСообщения);
		
	КонецПопытки;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось обработать константу ""Настройки сервиса прогнозирования"".'");
		ВызватьИсключение ТекстСообщения;
	Иначе
		ТекстСообщения = НСтр("ru = 'Обработана константа ""Настройки сервиса прогнозирования"".'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта, , ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
		+ ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = (ОбработанныхОбъектов > 0);
	
КонецПроцедуры

// Используется при добавлении отложенных обработчиков обновления,
// когда не требуется регистрировать данные к обработке. Не заполнять.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
//@skip-warning
Процедура ЗаполнениеДанныхОбновления(Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючиКОбработке()
	
	Ответ = Новый Массив();
	Ответ.Добавить("Продажи");
	Ответ.Добавить("Товары");
	Ответ.Добавить("ХарактеристикиНоменклатуры");
	Ответ.Добавить("Покупатели");
	Ответ.Добавить("Склады");
	Ответ.Добавить("Остатки");
	Ответ.Добавить("Промо");
	Ответ.Добавить("Сезонность");
	
	Возврат Ответ;
	
КонецФункции

Функция СоответствиеКоллекцийИсточника(Коллекция)
	
	Если Коллекция = "Продажи" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Продажи;
	ИначеЕсли Коллекция = "Товары" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Товары;
	ИначеЕсли Коллекция = "ХарактеристикиНоменклатуры" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.ХарактеристикиНоменклатуры;
	ИначеЕсли Коллекция = "Покупатели" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Покупатели;
	ИначеЕсли Коллекция = "Склады" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Склады;
	ИначеЕсли Коллекция = "Остатки" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Остатки;
	ИначеЕсли Коллекция = "Промо" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Промо;
	ИначеЕсли Коллекция = "Сезонность" Тогда
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.Сезонность;
	Иначе
		Возврат Перечисления.КоллекцииСервисаПрогнозированияПродаж.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПользовательскиеРеквизитыКоллекции(СохраненноеВложенноеОписаниеРеквизитов)
	
	ПользовательскиеРеквизиты = Новый Структура();
	Для Каждого ОписаниеРеквизита Из СохраненноеВложенноеОписаниеРеквизитов Цикл
		
		ЗначениеОписанияРеквизита = ОписаниеРеквизита.Значение;
		Если ЗначениеОписанияРеквизита.ЭтоПользовательскоеПоле Тогда
			
			// Исключение ошибочно добавленных, скопировавшихся реквизитов.
			Если СтрНайти(ЗначениеОписанияРеквизита.ИмяВИсточнике, "_") Тогда
				ПользовательскиеРеквизиты.Вставить(ОписаниеРеквизита.Ключ, ЗначениеОписанияРеквизита);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПользовательскиеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецЕсли