#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
КонецПроцедуры

// Вызывается в одноименном обработчике формы отчета после выполнения кода формы.
//
// Подробнее - см. ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере
//
Процедура ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД) Экспорт
	
	Отчет = ЭтаФорма.Отчет;
	КомпоновщикНастроекФормы = Отчет.КомпоновщикНастроек;
	
	// Изменение настроек по функциональным опциям
	НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы);
	
	НовыеНастройкиКД = КомпоновщикНастроекФормы.Настройки;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрВидЦены = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидЦены");
	Если ПараметрВидЦены <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ПараметрВидЦены.Значение) Тогда
			Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ОценкаЗапасовПоВидуЦен", 3);
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроек, "ВидЦены", ЦенообразованиеВызовСервера.ВидЦеныПрайсЛист());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрОценкаЗапасовПоВидуЦен = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОценкаЗапасовПоВидуЦен");
	Если ПараметрОценкаЗапасовПоВидуЦен.Значение = 3 Тогда
		ПараметрВидЦены = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидЦены");
		Если Не ЗначениеЗаполнено(ПараметрВидЦены.Значение) Тогда
			ВызватьИсключение НСтр("ru= 'Не указан ""Вид цены"".'");
		КонецЕсли;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Отчеты.ВедомостьПоТоварамНаСкладахВЦенахНоменклатуры.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	НаборДанных25 = СхемаКомпоновкиДанных.НаборыДанных.Найти("Запрос2_5");
	Если ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25() Тогда
		НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Найти("Запрос");
		НаборДанных.Запрос = НаборДанных25.Запрос;
	КонецЕсли;
	СхемаКомпоновкиДанных.НаборыДанных.Удалить(НаборДанных25);

	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		
		ТекстЗамены = 
		"ВЫБОР
		|		КОГДА ЦеныНоменклатурыА.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 0) = 0
		|			ТОГДА ЦеныНоменклатурыА.Цена
		|		ИНАЧЕ ЦеныНоменклатурыА.Цена / &ТекстЗапросаКоэффициентУпаковки1
		|	КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&АктуальнаяЦена", ТекстЗамены);
		
		ТекстЗамены = 
		"ВЫБОР
		|		КОГДА ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЦеныНоменклатурыБ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 0) = 0
		|			ТОГДА ЦеныНоменклатурыБ.Цена
		|		ИНАЧЕ ЦеныНоменклатурыБ.Цена / &ТекстЗапросаКоэффициентУпаковки2
		|	КОНЕЦ";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтараяЦена", ТекстЗамены);
		
		ТекстЗамены = 
		"ВЫБОР
		|		КОГДА ЦеныНоменклатурыА.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1, 0) = 0
		|			ТОГДА ЦеныНоменклатурыА.Цена
		|		ИНАЧЕ ЦеныНоменклатурыА.Цена / &ТекстЗапросаКоэффициентУпаковки1
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА 0
		|		КОГДА ЦеныНоменклатурыБ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|				ИЛИ ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 0) = 0
		|			ТОГДА ЦеныНоменклатурыБ.Цена
		|		ИНАЧЕ ЦеныНоменклатурыБ.Цена / &ТекстЗапросаКоэффициентУпаковки2
		|	КОНЕЦ";

		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дельта", ТекстЗамены);
		
	Иначе
		
		ТекстЗамены = 
		"ЦеныНоменклатурыА.Цена";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&АктуальнаяЦена", ТекстЗамены);

		ТекстЗамены = 
		"ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		ИНАЧЕ
		|			ЦеныНоменклатурыБ.Цена
		|	КОНЕЦ";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтараяЦена", ТекстЗамены);

		ТекстЗамены = 
		"ЦеныНоменклатурыА.Цена
		|		- ВЫБОР
		|			КОГДА
		|				ЦеныНоменклатурыБ.Цена ЕСТЬ NULL
		|			ТОГДА
		|				0
		|			ИНАЧЕ
		|				ЦеныНоменклатурыБ.Цена
		|		КОНЕЦ";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Дельта", ТекстЗамены);
		
	КонецЕсли;
		
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
		
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных[0].Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыА.Упаковка",
			"ЦеныНоменклатурыА.Номенклатура"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
			"ЦеныНоменклатурыБ.Упаковка",
			"ЦеныНоменклатурыБ.Номенклатура"));
					
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесНоменклатуры1", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"ТаблицаТоварыНаСкладахМаксимальныйПериод.Номенклатура.ЕдиницаИзмерения", 
			"ТаблицаТоварыНаСкладахМаксимальныйПериод.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемНоменклатуры1", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
			"ТаблицаТоварыНаСкладахМаксимальныйПериод.Номенклатура.ЕдиницаИзмерения", 
			"ТаблицаТоварыНаСкладахМаксимальныйПериод.Номенклатура"));

	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаВесНоменклатуры2", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(
			"БлижайшиеОстаткиПоНоменклатуре.Номенклатура.ЕдиницаИзмерения", 
			"БлижайшиеОстаткиПоНоменклатуре.Номенклатура"));
		
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"&ТекстЗапросаОбъемНоменклатуры2", 
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(
			"БлижайшиеОстаткиПоНоменклатуре.Номенклатура.ЕдиницаИзмерения", 
			"БлижайшиеОстаткиПоНоменклатуре.Номенклатура"));
	
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ТекстЗапроса;
	
	СтрокаОтбора = "";
	СтрокаПоиска = "&ЗначениеОтбораПоРесурсам";
	МассивОтборов = Новый Массив();
	СоответствиеЗнаков = Неопределено;

	СписокРазрешенныхРесурсов = Новый СписокЗначений();
	Для Каждого СтрокаИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		Если СтрНайти(СтрокаИтога.Выражение, СтрокаПоиска) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРазрешенныхРесурсов.Добавить(СтрокаИтога.ПутьКДанным);
	КонецЦикла;

	Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(КомпоновщикНастроек);
	Для Каждого Группировка Из Группировки Цикл
		Если Не Группировка.Значение.Имя = "ГруппировкаТовары" Тогда
			Продолжить;
		КонецЕсли;
		
		Отборы = Группировка.Значение.Отбор; //ОтборКомпоновкиДанных
		
		ОшибкаЗаполнения = Ложь;
		МассивОтборов = СформироватьМассивОтборов(Отборы, СоответствиеЗнаков, СписокРазрешенныхРесурсов, ОшибкаЗаполнения);
		
		Если ОшибкаЗаполнения Тогда
			ВызватьИсключение НСтр("ru= 'В группировке ""Товары"" применены отборы не по ресурсам. Необходимо подобные отборы применить к отчету, а не к группировке.'");
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;

	СтрокаОтбора = СформироватьСтрокуОтбора(МассивОтборов);
	
	ПодставитьОтбор = Не ПустаяСтрока(СтрокаОтбора);
	
	Если ПодставитьОтбор Тогда
		СтрокаОтбора = """" + СтрокаОтбора + """";
	КонецЕсли;
	
	Для Каждого СтрокаИтога Из СхемаКомпоновкиДанных.ПоляИтога Цикл
		Если СтрНайти(СтрокаИтога.Выражение, СтрокаПоиска) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИтога.Выражение = СтрЗаменить(СтрокаИтога.Выражение, СтрокаПоиска, СтрокаОтбора);
	КонецЦикла;
		
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		КомпоновщикНастроек.ПолучитьНастройки(),
		ДанныеРасшифровки);

	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(ПараметризуемыеЗаголовкиПолей(), МакетКомпоновки);
	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(СтруктураДинамическихЗаголовков(), МакетКомпоновки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонвертацияОтборов

// Сформировать массив отборов.
// 
// Параметры:
//  Отборы - ОтборКомпоновкиДанных - Отборы
//  СоответствиеЗнаков - Неопределено, Соответствие из ВидСравненияКомпоновкиДанных - - Соответствие знаков
//  СписокРазрешенныхРесурсов - СписокЗначений из Строка - разрешенные ресурсы
//  ОшибкаЗаполнения - Булево 
// 
// Возвращаемое значение:
//  Массив из Строка - Сформировать массив отборов
Функция СформироватьМассивОтборов(Отборы, СоответствиеЗнаков, СписокРазрешенныхРесурсов, ОшибкаЗаполнения = Ложь)
	
	МассивОтборов = Новый Массив();
	
	Для Каждого ЭлементОтбора Из Отборы.Элементы Цикл
		
			Если Не ЭлементОтбора.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если Тип(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				
				ВложенныйМассивОтборов = СформироватьМассивОтборов(ЭлементОтбора, 
																	СоответствиеЗнаков, 
																	СписокРазрешенныхРесурсов, 
																	ОшибкаЗаполнения);
				
				Если ОшибкаЗаполнения Тогда
					Возврат МассивОтборов;
				КонецЕсли;
				
				ЗнакТипаГруппы = ПолучитьЗнакОтбора(ЭлементОтбора.ТипГруппы, СоответствиеЗнаков);
				
				СтрокаВложенныхОтборов = СформироватьСтрокуОтбора(ВложенныйМассивОтборов, ЗнакТипаГруппы);
				
				Если ЭлементОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе Тогда
					СтрокаВложенныхОтборов = "Не (" + СтрокаВложенныхОтборов + ")";
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаВложенныхОтборов) Тогда
					МассивОтборов.Добавить(СтрокаВложенныхОтборов);
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если СписокРазрешенныхРесурсов.НайтиПоЗначению(Строка(ЭлементОтбора.ЛевоеЗначение)) = Неопределено Тогда
				
				ОшибкаЗаполнения = Истина;
				Возврат МассивОтборов;
				
			КонецЕсли;
			
			
			ЗнакСравнения = ПолучитьЗнакОтбора(ЭлементОтбора.ВидСравнения, СоответствиеЗнаков);
			
			ПравоеЗначение = ?(ЭлементОтбора.ПравоеЗначение = Неопределено, 0, ЭлементОтбора.ПравоеЗначение);
			
			Если ЗнакСравнения = Неопределено Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке 
					Или ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда 
					
					МассивЗначений = Новый Массив();
					ЗнакСравнения = "=";
					
					Для Каждого ЭлементСписка Из ЭлементОтбора.ПравоеЗначение Цикл
						
						МассивЗначений.Добавить(СтрШаблон("Сумма(%1)%2%3",
													ЭлементОтбора.ЛевоеЗначение,
													ЗнакСравнения,
													ЭлементСписка.Значение));
													
					КонецЦикла;
					
					СтрокаЗначенийОтборов = СформироватьСтрокуОтбора(МассивЗначений, "ИЛИ");
					
					Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
						СтрокаЗначенийОтборов = "Не (" + СтрокаЗначенийОтборов + ")";
					КонецЕсли;
						
					Если Не ПустаяСтрока(СтрокаЗначенийОтборов) Тогда
						МассивОтборов.Добавить(СтрокаЗначенийОтборов);
					КонецЕсли;
					
					Продолжить;
					
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			МассивОтборов.Добавить(СтрШаблон("Сумма(%1)%2%3",
										ЭлементОтбора.ЛевоеЗначение,
										ЗнакСравнения,
										ПравоеЗначение));
			
	КонецЦикла;
	
	Возврат МассивОтборов;
	
КонецФункции

// Получить знак отбора.
// 
// Параметры:
//  ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнения
//  СоответствиеЗнаков - Неопределено, Соответствие из ВидСравненияКомпоновкиДанных - - Соответствие знаков
// 
// Возвращаемое значение:
//  Строка, Неопределено - Знак сравнения
Функция ПолучитьЗнакОтбора(ВидСравнения, СоответствиеЗнаков = Неопределено)

	Если СоответствиеЗнаков = Неопределено Тогда
		СформироватьСоответствиеЗнаков(СоответствиеЗнаков);
	КонецЕсли;
	
	Возврат СоответствиеЗнаков.Получить(ВидСравнения);
	
КонецФункции

Функция СформироватьСтрокуОтбора(МассивОтборов, Соединитель = "И")
	
	Возврат СтрСоединить(МассивОтборов, Символы.ПС +" " + Соединитель + " ");
	
КонецФункции

// Сформировать соответствие знаков.
// 
// Параметры:
//  СоответствиеЗнаков - Неопределено, Соответствие из ВидСравненияКомпоновкиДанных, ТипГруппыЭлементовОтбораКомпоновкиДанных -
Процедура СформироватьСоответствиеЗнаков(СоответствиеЗнаков)
	
	СоответствиеЗнаков = Новый Соответствие();
	
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.Больше, ">");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно, ">=");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.Заполнено, "<>");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.Меньше, "<");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, "<=");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.НеЗаполнено, "=");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.НеРавно, "<>");
	СоответствиеЗнаков.Вставить(ВидСравненияКомпоновкиДанных.Равно, "=");

	СоответствиеЗнаков.Вставить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ, "И");
	СоответствиеЗнаков.Вставить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли, "ИЛИ");
	СоответствиеЗнаков.Вставить(ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе, "И");
	
КонецПроцедуры

#КонецОбласти

Функция ВспомогательныеПараметрыОтчета()
	ВспомогательныеПараметры = Новый Массив;
	
	ПараметрОценкаЗапасовПоВидуЦен = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОценкаЗапасовПоВидуЦен");
	Если Не ПараметрОценкаЗапасовПоВидуЦен.Значение = 3 Тогда
		ВспомогательныеПараметры.Добавить("ВидЦены");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВидовЦен") Тогда
		ВспомогательныеПараметры.Добавить("ОценкаЗапасовПоВидуЦен");
	КонецЕсли;
	
	ВспомогательныеПараметры.Добавить("КоличественныеИтогиПоЕдИзм");
		
	КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	
	Возврат ВспомогательныеПараметры;
КонецФункции

Функция ПараметризуемыеЗаголовкиПолей()
	
	Возврат КомпоновкаДанныхСервер.СоответствиеЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек);
	
КонецФункции

Функция СтруктураДинамическихЗаголовков()
	ДинамическиеЗаголовки = Новый Структура;
	
	Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ГруппировкаНоменклатуры");
	ДоступнаяНастройка = ОтчетыКлиентСервер.НайтиДоступнуюНастройку(КомпоновщикНастроек.Настройки, Параметр);
	Если ДоступнаяНастройка <> Неопределено Тогда
		ПредставлениеЗначенияПараметра = ДоступнаяНастройка.ДоступныеЗначения[Параметр.Значение-1];
		ДинамическиеЗаголовки.Вставить("ГруппировкаНоменклатуры", ПредставлениеЗначенияПараметра);
	КонецЕсли;
	
	Возврат ДинамическиеЗаголовки;
КонецФункции

Процедура НастроитьПараметрыОтборыПоФункциональнымОпциям(КомпоновщикНастроекФормы)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьЕдиницыИзмеренияДляОтчетов") Тогда
		КомпоновкаДанныхСервер.УдалитьПараметрИзПользовательскихНастроекОтчета(КомпоновщикНастроекФормы, "ЕдиницыКоличества");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
