#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - Структура - Настройки общей формы отчета (для изменения).
//       См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	ДанныеПересеченияКодов = ПолучитьДанныеПересеченияКодов();

	СтандартнаяОбработка = Ложь;
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета,ДанныеРасшифровки);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ДанныеОтчета = Новый Структура("ПересеченияКодов",ДанныеПересеченияКодов);
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ДанныеОтчета, ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
 	МакетЗаголовка = ПолучитьМакет("МакетЗаголовка");
 	ОбластьПустаяСтрока = МакетЗаголовка.ПолучитьОбласть("ПустаяСтрока");
 	ДокументРезультат.Вывести(ОбластьПустаяСтрока);
	ДокументРезультат.НачатьГруппуСтрок("Пояснение");
 	ОбластьПояснения = МакетЗаголовка.ПолучитьОбласть("Пояснение");
 	ДокументРезультат.Вывести(ОбластьПояснения);
	ДокументРезультат.ЗакончитьГруппуСтрок();
 	ДокументРезультат.Вывести(ОбластьПустаяСтрока);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Булево - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Булево - Передается из параметров обработчика "как есть".
//
// См. также:
//   "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
	
КонецПроцедуры

#Область ДанныеПересеченияКодов
	
Функция ПолучитьДанныеМакета()

	Возврат ПолучитьОбщийМакет("КодВидаНоменклатурнойКлассификации").ПолучитьТекст();

КонецФункции

Функция ПолучитьДанныеКлассификатора()
	
	ТаблицаКлассификатора = Новый ТаблицаЗначений;
	ОписаниеТипаНаименования = ОбщегоНазначения.ОписаниеТипаСтрока(200);
	ОписаниеТипаКода = ОбщегоНазначения.ОписаниеТипаСтрока(13);
	ТаблицаКлассификатора.Колонки.Добавить("НаименованиеВидаНоменклатурнойКлассификации",ОписаниеТипаНаименования);
	ТаблицаКлассификатора.Колонки.Добавить("КодВидаНоменклатурнойКлассификации",ОписаниеТипаКода);
	
	ДанныеМакета = ПолучитьДанныеМакета();
	
	ИмяЭлементаМакета = "ВидНоменклатурнойКлассификации";
	
	Если Не ПустаяСтрока(ДанныеМакета) Тогда
		
		ЧтениеXML = Новый ЧтениеXML; 
		ЧтениеXML.УстановитьСтроку(ДанныеМакета);
		ЧтениеXML.ПерейтиКСодержимому();
		
		Пока ЧтениеXML.Прочитать() Цикл  
			Если ЧтениеXML.Имя = ИмяЭлементаМакета И ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда  
				ВидНоменклатурнойКлассификации = ТаблицаКлассификатора.Добавить();
				ВидНоменклатурнойКлассификации.НаименованиеВидаНоменклатурнойКлассификации = ЧтениеXML.ЗначениеАтрибута("Имя");
				ВидНоменклатурнойКлассификации.КодВидаНоменклатурнойКлассификации = ЧтениеXML.ЗначениеАтрибута("КодВида");
			КонецЕсли;
		КонецЦикла;           
		
	КонецЕсли;
	
	Возврат ТаблицаКлассификатора;
	
КонецФункции

Функция ПолучитьДанныеПересеченияКодов()
	
	ДанныеКлассификатора = ПолучитьДанныеКлассификатора();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДанныеКлассификатора",ДанныеКлассификатора);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеКлассификатора.НаименованиеВидаНоменклатурнойКлассификации КАК НаименованиеВидаНоменклатурнойКлассификации,
	|	ДанныеКлассификатора.КодВидаНоменклатурнойКлассификации КАК КодВидаНоменклатурнойКлассификации
	|ПОМЕСТИТЬ ДанныеКлассификатора
	|ИЗ
	|	&ДанныеКлассификатора КАК ДанныеКлассификатора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
	|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
	|	ДанныеКлассификатора.НаименованиеВидаНоменклатурнойКлассификации КАК НаименованиеВидаНоменклатурнойКлассификации,
	|	ДанныеКлассификатора.КодВидаНоменклатурнойКлассификации КАК КодВидаНоменклатурнойКлассификации
	|ИЗ
	|	ДанныеКлассификатора КАК ДанныеКлассификатора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ДанныеКлассификатора.КодВидаНоменклатурнойКлассификации = ШтрихкодыНоменклатуры.Штрихкод
	|ГДЕ
	|	ШтрихкодыНоменклатуры.Номенклатура.КодВидаНоменклатурнойКлассификации <> ШтрихкодыНоменклатуры.Штрихкод
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецЕсли