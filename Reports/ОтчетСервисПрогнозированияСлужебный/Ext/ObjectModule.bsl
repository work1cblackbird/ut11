#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДетализацияПоКлиентам        = Ложь;
	ДетализацияПоСкладам         = Ложь;
	ДетализацияПоХарактеристикам = Ложь;
	ДетализацияИспользуется      = Ложь;
	ВариантВыводаДетализации     = "";
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КлючВарианта    = НастройкиОтчета.ДополнительныеСвойства.КлючВарианта;
	
	ВидПлана = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ВидПлана");
	СтруктураЗначений = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидПлана.Значение, "ТипПлана,
		|ЗаполнятьСклад, ЗаполнятьСкладВТЧ,
		|ЗаполнятьПартнера, ЗаполнятьПартнераВТЧ, ЗаполнятьПоХарактеристикамНоменклатуры");
	
	Если СтруктураЗначений.ТипПлана = Перечисления.ТипыПланов.ПланПродаж Тогда
		Если СтруктураЗначений.ЗаполнятьПартнера Или СтруктураЗначений.ЗаполнятьПартнераВТЧ Тогда
			ДетализацияПоКлиентам = Истина;
		КонецЕсли;
		ДетализацияПоХарактеристикам = СтруктураЗначений.ЗаполнятьПоХарактеристикамНоменклатуры;
	КонецЕсли;
	
	Если СтруктураЗначений.ЗаполнятьСклад Или СтруктураЗначений.ЗаполнятьСкладВТЧ Тогда
		ДетализацияПоСкладам = Истина;
	КонецЕсли;
	
	Детализация = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Детализация");
	ЗначениеДетализации = Детализация.Значение;
	
	Если Детализация.Использование Тогда
		
		Если ЗначениеДетализации = "ПоСкладам" И ДетализацияПоСкладам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, "Склад");
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ГруппированиеСтроки";
			
		ИначеЕсли ЗначениеДетализации = "ПоКлиентам" И ДетализацияПоКлиентам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, "Партнер");
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ГруппированиеСтроки";
			
		ИначеЕсли ЗначениеДетализации = "ПоХарактеристикам" И ДетализацияПоХарактеристикам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ГруппировкаСтроки = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПолеСтроки);
			ДополнитьПоляГруппировкиПоВариантуДетализации(ГруппировкаСтроки, ЗначениеДетализации);
			
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ДополнениеСтроки";
			
		ИначеЕсли ЗначениеДетализации = "ПоСкладамКлиентам"
			И ДетализацияПоСкладам И ДетализацияПоКлиентам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ГруппировкаСтроки = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПолеСтроки);
			ДополнитьПоляГруппировкиПоВариантуДетализации(ГруппировкаСтроки, ЗначениеДетализации);
			
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ДополнениеСтроки";
			
		ИначеЕсли ЗначениеДетализации = "ПоСкладамХарактеристикам"
			И ДетализацияПоСкладам И ДетализацияПоХарактеристикам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ГруппировкаСтроки = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПолеСтроки);
			ДополнитьПоляГруппировкиПоВариантуДетализации(ГруппировкаСтроки, ЗначениеДетализации);
			
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ДополнениеСтроки";
			
		ИначеЕсли ЗначениеДетализации = "ПоКлиентамХарактеристикам"
			И ДетализацияПоКлиентам И ДетализацияПоХарактеристикам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ГруппировкаСтроки = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПолеСтроки);
			ДополнитьПоляГруппировкиПоВариантуДетализации(ГруппировкаСтроки, ЗначениеДетализации);
			
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ДополнениеСтроки";
			
		ИначеЕсли ЗначениеДетализации = "ПоСкладамКлиентамХарактеристикам"
			И ДетализацияПоСкладам И ДетализацияПоКлиентам И ДетализацияПоХарактеристикам Тогда
			
			СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
			СтрокиКомпоновки.Очистить();
			
			ПолеСтроки = ПолеСтрокиАнализируемыхДанных(КлючВарианта);
			ГруппировкаСтроки = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПолеСтроки);
			ДополнитьПоляГруппировкиПоВариантуДетализации(ГруппировкаСтроки, ЗначениеДетализации);
			
			ДетализацияИспользуется = Истина;
			ВариантВыводаДетализации = "ДополнениеСтроки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыводитьГруппировкуПоАналогамНоменклатуры = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек,
		"ВыводитьГруппировкуПоАналогамНоменклатуры");
	
	Если ВыводитьГруппировкуПоАналогамНоменклатуры <> Неопределено 
		И ВыводитьГруппировкуПоАналогамНоменклатуры.Использование
		И ВыводитьГруппировкуПоАналогамНоменклатуры.Значение Тогда
		
		НастройкиСервиса = СервисПрогнозирования.ПолучитьНастройкиСервиса();
		АналогСвойство = НастройкиСервиса.РеквизитАналогиТовараСвойство;
		Если ЗначениеЗаполнено(АналогСвойство) Тогда
			
			ШаблонДопСвойства            = "Номенклатура.[%1]";
			ПредставлениеСвойстваАналога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(АналогСвойство, "Представление");
			ПутьКСвойствуАналога         = СтрШаблон(ШаблонДопСвойства, ПредставлениеСвойстваАналога);
			
			Если ДетализацияИспользуется Тогда
				
				Если ВариантВыводаДетализации = "ГруппированиеСтроки" Тогда
					ДобавитьПодчиненнуюГруппировку(СтрокиКомпоновки[0].Структура, Новый ПолеКомпоновкиДанных(ПутьКСвойствуАналога));
					ДобавитьПодчиненнуюГруппировку(СтрокиКомпоновки[0].Структура, ПолеСтроки);
				ИначеЕсли ВариантВыводаДетализации = "ДополнениеСтроки" Тогда
					ГруппировкаАналога = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПутьКСвойствуАналога);
					СтрокиКомпоновки.Сдвинуть(ГруппировкаАналога, -1);
				КонецЕсли;
				
			Иначе
				
				СтрокиКомпоновки = НастройкиОтчета.Структура[0].Строки;
				СтрокиКомпоновки.Очистить();
				
				КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, ПутьКСвойствуАналога);
				КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(НастройкиОтчета, "Номенклатура");
				
			КонецЕсли;
			
		Иначе
			
			Если ДетализацияИспользуется И ВариантВыводаДетализации = "ГруппированиеСтроки" Тогда
				ДобавитьПодчиненнуюГруппировку(СтрокиКомпоновки[0].Структура, ПолеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ДетализацияИспользуется И ВариантВыводаДетализации = "ГруппированиеСтроки" Тогда
			ДобавитьПодчиненнуюГруппировку(СтрокиКомпоновки[0].Структура, ПолеСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапросаТовары = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Элементы.НаборДанныхТовары.Запрос;
	ТекстЗапросаКатегории = СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Элементы.НаборДанныхКатегории.Запрос;
	
	ПериодичностьОтчета = НастройкиОтчета.ПараметрыДанных.Элементы.Найти("ПериодичностьОтчета");
	Если ПериодичностьОтчета <> Неопределено Тогда
		Если ПериодичностьОтчета.Значение = Перечисления.Периодичность.Неделя Тогда
			ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "ДЕНЬ)", "НЕДЕЛЯ)");
			ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "ДЕНЬ)", "НЕДЕЛЯ)");
		ИначеЕсли ПериодичностьОтчета.Значение = Перечисления.Периодичность.Декада Тогда
			ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "ДЕНЬ)", "ДЕКАДА)");
			ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "ДЕНЬ)", "ДЕКАДА)");
		ИначеЕсли ПериодичностьОтчета.Значение = Перечисления.Периодичность.Месяц Тогда
			ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "ДЕНЬ)", "МЕСЯЦ)");
			ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "ДЕНЬ)", "МЕСЯЦ)");
		ИначеЕсли ПериодичностьОтчета.Значение = Перечисления.Периодичность.Квартал Тогда
			ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "ДЕНЬ)", "КВАРТАЛ)");
			ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "ДЕНЬ)", "КВАРТАЛ)");
		ИначеЕсли ПериодичностьОтчета.Значение = Перечисления.Периодичность.Полугодие Тогда
			ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "ДЕНЬ)", "ПОЛУГОДИЕ)");
			ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "ДЕНЬ)", "ПОЛУГОДИЕ)");
		ИначеЕсли ПериодичностьОтчета.Значение = Перечисления.Периодичность.Год Тогда
			ТекстЗапросаТовары = СтрЗаменить(ТекстЗапросаТовары, "ДЕНЬ)", "ГОД)");
			ТекстЗапросаКатегории = СтрЗаменить(ТекстЗапросаКатегории, "ДЕНЬ)", "ГОД)");
		КонецЕсли;
	КонецЕсли;

	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Элементы.НаборДанныхТовары.Запрос = ТекстЗапросаТовары;
	СхемаКомпоновкиДанных.НаборыДанных.НаборДанных1.Элементы.НаборДанныхКатегории.Запрос = ТекстЗапросаКатегории;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьПодчиненнуюГруппировку(СтруктураГруппировки, ПолеПодчиненнойГруппировки)
	
	Группировка = СтруктураГруппировки.Добавить();
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(
		Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = ПолеПодчиненнойГруппировки;
	
КонецПроцедуры

Процедура ДополнитьПоляГруппировкиПоВариантуДетализации(Группировка, ВариантДетализации)
	
	Если СтрНайти(ВариантДетализации, "Характеристикам") Тогда
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(
			Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Характеристика");
	КонецЕсли;
	
	Если СтрНайти(ВариантДетализации, "Складам") Тогда
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(
			Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Склад");
	КонецЕсли;
	
	Если СтрНайти(ВариантДетализации, "Клиентам") Тогда
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(
			Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Партнер");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолеСтрокиАнализируемыхДанных(КлючВарианта)
	
	Если КлючВарианта = "Основной"
		Или КлючВарианта = "ФактПрогноз"
		Или КлючВарианта = "ФактПрогнозРаздельно"
		Или КлючВарианта = "СравнениеСПланом" Тогда
		
		ПолеСтроки = Новый ПолеКомпоновкиДанных("Номенклатура");
		
	КонецЕсли;
	
	Если КлючВарианта = "ПрогнозПоКатегориям"
		Или КлючВарианта = "ФактПрогнозПоКатегориям"
		Или КлючВарианта = "ФактПрогнозПоКатегориямРаздельно"
		Или КлючВарианта = "СравнениеСПланомПоКатегориям" Тогда
		
		ПолеСтроки = Новый ПолеКомпоновкиДанных("ТоварнаяКатегория");
		
	КонецЕсли;
	
	Возврат ПолеСтроки;
	
КонецФункции

#КонецОбласти

#КонецЕсли
