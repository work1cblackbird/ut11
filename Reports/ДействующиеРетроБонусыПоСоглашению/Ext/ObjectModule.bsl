//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// При компоновке результата.
// 
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - Документ результат
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Соглашение = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Соглашение").Значение;  // СправочникСсылка.СоглашенияСКлиентами
	
	Если Соглашение = Неопределено Тогда
		
		ТекстОшибки = НСтр("ru = 'Не выбрано соглашение'");
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ДополнитьПараметрыПоСоглашению(НастройкиОтчета, Соглашение);
	УстановитьЗаголовокОтчета(НастройкиОтчета, Соглашение);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - См. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт 
	
	Если КлючВарианта = "ДействующиеРетроБонусыПоСоглашениюКонтекст" Тогда
		
		Настройки.ФормироватьСразу = Истина;
		Настройки.РазрешеноИзменятьВарианты = Ложь;
		Настройки.РазрешеноИзменятьСтруктуру = Ложь;
		
	КонецЕсли;
	
	Настройки.События.ПриСозданииНаСервере = Истина; 
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПриСозданииНаСервере
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		Форма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - См. ОбщаяФорма.ФормаОтчета
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться, если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено, когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы = КлючВарианта Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Параметры = Контекст.Параметры;
		Если Параметры.Свойство("ПараметрКоманды") Тогда
			
			ПараметрКоманды = Параметры.ПараметрКоманды; // СправочникСсылка.Партнеры, СправочникСсылка.Контрагенты
			ЗаполнитьПараметрыПоКонтексту(ПараметрКоманды, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
			
		КонецЕсли;
		
	КонецЕсли;
	
	КлючСхемы = КлючВарианта;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Заполняет параметры из переданного контекста.
// 
// Параметры:
//  ПараметрКоманды - ЛюбаяСсылка
//   НастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   ПользовательскиеНастройки - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ЗаполнитьПараметрыПоКонтексту(ПараметрКоманды, НастройкиКД, ПользовательскиеНастройки = Неопределено)
	
	ТипПараметраКоманды = ТипЗнч(ПараметрКоманды);
	
	Если ТипПараметраКоманды = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "Соглашение", ПараметрКоманды);
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				ПользовательскиеНастройки,
				"Соглашение", 
				ПараметрКоманды);
			
		КонецЕсли;
		
		ПустаяДата = Дата(1, 1, 1);
		
		Период = Новый СтандартныйПериод;
		Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Период.ДатаНачала = ПустаяДата;
		Период.ДатаОкончания = ПустаяДата;
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиКД,
			"Период",
			Период,
			Ложь);
		Если ПользовательскиеНастройки <> Неопределено Тогда
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				ПользовательскиеНастройки,
				"Период",
				Период,
				Ложь);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры по соглашению.
// 
// Параметры:
//  НастройкиКД - НастройкиКомпоновкиДанных
//  Соглашение - СправочникСсылка.СоглашенияСКлиентами
//
Процедура ДополнитьПараметрыПоСоглашению(НастройкиКД, Соглашение)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Соглашение);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСКлиентами.Типовое КАК СоглашениеТиповое,
	|	СоглашенияСКлиентами.Соглашение КАК СоглашениеРодитель,
	|	ЕСТЬNULL(СоглашенияСКлиентамиРодитель.Типовое, ЛОЖЬ) КАК СоглашениеРодительТиповое,
	|	СоглашенияСКлиентами.Контрагент КАК Контрагент,
	|	СоглашенияСКлиентами.Партнер КАК Партнер
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентамиРодитель
	|		ПО СоглашенияСКлиентами.Соглашение = СоглашенияСКлиентамиРодитель.Ссылка
	|ГДЕ
	|	СоглашенияСКлиентами.Ссылка = &Ссылка"; 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СоглашениеТиповое = Выборка.СоглашениеТиповое;
	СоглашениеРодитель = Выборка.СоглашениеРодитель;
	СоглашениеРодительТиповое = Выборка.СоглашениеРодительТиповое;
	Контрагент = Выборка.Контрагент;
	Партнер = Выборка.Партнер;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "СоглашениеТиповое", СоглашениеТиповое);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "СоглашениеРодитель", СоглашениеРодитель);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "СоглашениеРодительТиповое", СоглашениеРодительТиповое);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "Контрагент", Контрагент);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиКД, "Партнер", Партнер);
	
	УстановитьИспользованиеПолей(НастройкиКД, СоглашениеТиповое);
	
КонецПроцедуры

Процедура УстановитьИспользованиеПолей(НастройкиКД, Типовое)
	
	ОбрабатываемыеПоля = Новый Массив;  // Массив Из ПолеКомпоновкиДанных
	ОбрабатываемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Контрагент"));
	ОбрабатываемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Партнер"));
	ОбрабатываемыеПоля.Добавить(Новый ПолеКомпоновкиДанных("Соглашение"));
	
	Для Каждого Элемент Из НастройкиКД.Выбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			
			Если ОбрабатываемыеПоля.Найти(Элемент.Поле) <> Неопределено Тогда
				Элемент.Использование = НЕ Типовое;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает заголовок отчета.
// 
// Параметры:
//  НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки отчета
//  Соглашение - СправочникСсылка.СоглашенияСКлиентами
//
Процедура УстановитьЗаголовокОтчета(НастройкиОтчета, Соглашение)

	Шаблон = НСтр("ru = 'Действующие ретро-бонусы по соглашению ""%1""'");
	СоглашениеСтрокой = Строка(Соглашение);
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Шаблон,
		СоглашениеСтрокой);
		
	КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(НастройкиОтчета, "Заголовок", ЗаголовокОтчета);
	
КонецПроцедуры 

#КонецОбласти

#КонецЕсли