//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// При компоновке результата.
// 
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - Документ результат
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ДокументУРБ = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ДокументУРБ").Значение;  // ДокументСсылка.УсловияРетроБонусовКлиентов
	ДокументУРБПервичный = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ДокументУРБПервичный").Значение;  // ДокументСсылка.УсловияРетроБонусовКлиентов
	ДокументУРБПредставление = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ДокументУРБПредставление").Значение;  // Строка
	ДокументУРБПервичныйПредставление = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ДокументУРБПервичныйПредставление").Значение;  // Строка
	СоставУчастников = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "СоставУчастников").Значение;  // ПеречислениеСсылка.СоставыУчастниковРетроБонусов
	СоставТоваров = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "СоставТоваров").Значение;  // ПеречислениеСсылка.СоставыТоваровРетроБонусов
	Участники = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Участники").Значение;  // ПеречислениеСсылка.СоставыСписковРетроБонусов
	Товары = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Товары").Значение;  // ПеречислениеСсылка.СоставыСписковРетроБонусов
	СегментыЗафиксированы = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "СегментыЗафиксированы").Значение;  // Булево
	ВариантОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ВариантОтчета").Значение;  // Строка 
	ВыводитьАртикул = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ВыводитьАртикул").Значение;  // Булево
	
	СтруктураПараметров = СтруктураПараметровОтчета();
	СтруктураПараметров.ДокументУРБ = ДокументУРБ;
	СтруктураПараметров.ДокументУРБПервичный = ДокументУРБПервичный;
	СтруктураПараметров.ДокументУРБПредставление = ДокументУРБПредставление;
	СтруктураПараметров.ДокументУРБПервичныйПредставление = ДокументУРБПервичныйПредставление;
	СтруктураПараметров.СоставУчастников = СоставУчастников;
	СтруктураПараметров.СоставТоваров = СоставТоваров;
	СтруктураПараметров.Участники = Участники;
	СтруктураПараметров.Товары = Товары;
	СтруктураПараметров.СегментыЗафиксированы = СегментыЗафиксированы;
	СтруктураПараметров.ВыводитьАртикул = ВыводитьАртикул;
	
	ПоДаннымДокумента = (ВариантОтчета = 2);
	ОформитьЗаголовки(НастройкиОтчета, СтруктураПараметров, ПоДаннымДокумента);
	
	НаборыДанных = ИнициализироватьВнешнийНаборДанных(СтруктураПараметров, ПоДаннымДокумента);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, НаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - См. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ФормироватьСразу = Истина;
	Настройки.РазрешеноИзменятьВарианты = Ложь;
	Настройки.РазрешеноИзменятьСтруктуру = Ложь;
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета:
//      * Отчет - ОтчетОбъект.РасчетРетроБонусовКлиентов
//      * Параметры - Структура:
//         ** ПараметрКоманды - ДокументСсылка.УсловияРетроБонусовКлиентов
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	ПоДаннымДокумента = Ложь;
	Если НастройкиОтчета.ДополнительныеСвойства.КлючВарианта = "СоставСегментовРетроБонусовКлиентовПоДаннымДокументаКонтекст" Тогда
		
		ПоДаннымДокумента = Истина;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		ПараметрКоманды = Параметры.ПараметрКоманды; // ДокументСсылка.УсловияРетроБонусовКлиентов
		ТипПараметраКоманды = ТипЗнч(ПараметрКоманды);
		
		Форма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		
		Если ТипПараметраКоманды = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
			
			СтруктураПараметров = ДополнительныеПараметрыПоУРБ(ПараметрКоманды, ПоДаннымДокумента);
			СоставУчастников = СтруктураПараметров.СоставУчастников;
			СоставТоваров = СтруктураПараметров.СоставТоваров;
			СоставСегментыПоПартнерам = (СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
			СоставСегментыНоменклатуры = (СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
			УРБСогласован = СтруктураПараметров.УРБСогласован;
			
			Если НЕ УРБСогласован
			   И НЕ ПоДаннымДокумента Тогда
					
				ТекстСообщения = НСтр("ru = 'Формирование отчета предусмотрено только для согласованных условий и с настройкой по сегментам клиентов или товаров.'");
				ВызватьИсключение ТекстСообщения;
					
			ИначеЕсли НЕ СоставСегментыПоПартнерам
			   И НЕ СоставСегментыНоменклатуры Тогда
				
				ТекстСообщения = НСтр("ru = 'Формирование отчета предусмотрено только для документов с настройкой по сегментам клиентов или товаров.'");
				ВызватьИсключение ТекстСообщения;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - См. ОбщаяФорма.ФормаОтчета
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться, если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено, когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы = КлючВарианта Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Параметры = Контекст.Параметры;
		Если Параметры.Свойство("ПараметрКоманды") Тогда
			
			ПараметрКоманды = Параметры.ПараметрКоманды; // ДокументСсылка.УсловияРетроБонусовКлиентов
			ЗаполнитьПараметрыПоКонтексту(ПараметрКоманды, НовыеНастройкиКД);
			
			СоставТоваров = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, "СоставТоваров").Значение;
			
			Если СоставТоваров <> Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
				
				ВыводитьАртикул = СхемаКомпоновкиДанных.Параметры.ВыводитьАртикул;
				ВыводитьАртикул.ОграничениеИспользования = Истина;
				ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КлючСхемы = КлючВарианта;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОформитьЗаголовки(НастройкиОтчета, СтруктураПараметров, ПоДаннымДокумента)
	
	СоставУчастников = СтруктураПараметров.СоставУчастников;
	СоставТоваров = СтруктураПараметров.СоставТоваров;
	Участники = СтруктураПараметров.Участники;
	Товары = СтруктураПараметров.Товары;
	СегментыЗафиксированы = СтруктураПараметров.СегментыЗафиксированы;
	ВыводитьАртикул = СтруктураПараметров.ВыводитьАртикул;
	
	Если ПоДаннымДокумента Тогда
		ПредставлениеДокумента = СтруктураПараметров.ДокументУРБПредставление;
	Иначе
		ПредставлениеДокумента = СтруктураПараметров.ДокументУРБПервичныйПредставление;
	КонецЕсли;
		
	ШаблонЗаголовка = НСтр("ru = 'Состав сегментов документа %1'");
	ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеДокумента);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(НастройкиОтчета, "Заголовок", ЗаголовокОтчета);
	
	Для Каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		
		Если ЭлементСтруктуры.Имя = "Товары" Тогда
			
			Если СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
				
				Если Товары = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
					
					ЗаголовокГруппировки = НСтр("ru = 'Выбранные товары'");
					
				Иначе
					
					ЗаголовокГруппировки = НСтр("ru = 'Все кроме выбранных товаров'");
					
				КонецЕсли;
				КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(ЭлементСтруктуры, "Заголовок", ЗаголовокГруппировки);
				
				ПолеКомпоновки = Новый ПолеКомпоновкиДанных("Артикул");
				
				Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				
					Если ТипЗнч(ПолеГруппировки) = Тип("ПолеГруппировкиКомпоновкиДанных")
					   И ПолеГруппировки.Поле = ПолеКомпоновки Тогда
					   
						ПолеГруппировки.Использование = ВыводитьАртикул;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ЭлементСтруктуры.Использование = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Имя = "Партнеры" Тогда
			
			Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров Тогда
				
				Если Участники = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
					
					ЗаголовокГруппировки = НСтр("ru = 'Выбранные клиенты'");
					
				Иначе
					
					ЗаголовокГруппировки = НСтр("ru = 'Все кроме выбранных клиентов'");
					
				КонецЕсли;
				КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(ЭлементСтруктуры, "Заголовок", ЗаголовокГруппировки);
				
			Иначе
				
				ЭлементСтруктуры.Использование = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементСтруктуры.Имя = "КомментарийСегментыНеЗафиксированы" Тогда
			
			ИспользоватьГруппировку = (НЕ СегментыЗафиксированы И НЕ ПоДаннымДокумента);
			ЭлементСтруктуры.Использование = ИспользоватьГруппировку; 
			
		ИначеЕсли ЭлементСтруктуры.Имя = "КомментарийСегментыЗафиксированы" Тогда
			
			ИспользоватьГруппировку = (СегментыЗафиксированы И НЕ ПоДаннымДокумента);
			ЭлементСтруктуры.Использование = ИспользоватьГруппировку;
			
		ИначеЕсли ЭлементСтруктуры.Имя = "КомментарийПустой" Тогда
			
			ЭлементСтруктуры.Использование = Истина;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Заполняет параметры из переданного контекста.
// 
// Параметры:
//  ПараметрКоманды - ЛюбаяСсылка
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//
Процедура ЗаполнитьПараметрыПоКонтексту(ПараметрКоманды, НовыеНастройкиКД)
	
	ТипПараметраКоманды = ТипЗнч(ПараметрКоманды);
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ВариантОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ВариантОтчета").Значение;  // Строка
	ПоДаннымДокумента = (ВариантОтчета = 2);
	
	Если ТипПараметраКоманды = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НовыеНастройкиКД, "ДокументУРБ", ПараметрКоманды);
		
		СтруктураПараметров = ДополнительныеПараметрыПоУРБ(ПараметрКоманды, ПоДаннымДокумента);
		
		Для Каждого Элемент Из СтруктураПараметров Цикл
			
			Если КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, Элемент.Ключ) <> Неопределено Тогда
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
					НовыеНастройкиКД, 
					Элемент.Ключ,
					Элемент.Значение);
					
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьВнешнийНаборДанных(СтруктураПараметров, ПоДаннымДокумента)
	
	НаборДанных = Новый Структура;
	НаборДанных.Вставить("НаборДанныхТовары", Новый ТаблицаЗначений);
	НаборДанных.Вставить("НаборДанныхПартнеры", Новый ТаблицаЗначений);
	
	ДокументУРБ = СтруктураПараметров.ДокументУРБ;
	ДокументУРБПервичный = СтруктураПараметров.ДокументУРБПервичный;
	СоставУчастников = СтруктураПараметров.СоставУчастников;
	СоставТоваров = СтруктураПараметров.СоставТоваров;
	СегментыЗафиксированы = СтруктураПараметров.СегментыЗафиксированы;
	
	СоставСегментыПоПартнерам = (СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
	СоставСегментыНоменклатуры = (СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
	
	Если СоставСегментыПоПартнерам
	 ИЛИ СоставСегментыНоменклатуры Тогда
	
		Если СегментыЗафиксированы
		   И НЕ ПоДаннымДокумента Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДокументУсловий", ДокументУРБПервичный);
			Запрос.УстановитьПараметр("СоставСегментыПоПартнерам", СоставСегментыПоПартнерам);
			Запрос.УстановитьПараметр("СоставСегментыНоменклатуры", СоставСегментыНоменклатуры);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	РетроБонусыКлиентовТовары.Номенклатура КАК Номенклатура,
			|	РетроБонусыКлиентовТовары.Характеристика КАК Характеристика
			|ИЗ
			|	РегистрСведений.РетроБонусыКлиентовТовары КАК РетроБонусыКлиентовТовары
			|ГДЕ
			|	РетроБонусыКлиентовТовары.ДокументУсловий = &ДокументУсловий
			|	И &СоставСегментыНоменклатуры
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РетроБонусыКлиентовКонтрагенты.Партнер КАК Партнер
			|ИЗ
			|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
			|ГДЕ
			|	РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий
			|	И &СоставСегментыПоПартнерам"; 
			
			Результат = Запрос.ВыполнитьПакет();
			НаборДанных.НаборДанныхТовары = Результат[0].Выгрузить();
			НаборДанных.НаборДанныхПартнеры = Результат[1].Выгрузить();
			
		Иначе 
			
			Если ПоДаннымДокумента Тогда
				
				НаборДанных.НаборДанныхТовары = РетроБонусыСервер.ЗаполнитьДанныеДляФиксацииСегментовТоваров(
					ДокументУРБ, 
					ПоДаннымДокумента);
					
				НаборДанных.НаборДанныхПартнеры = РетроБонусыСервер.ЗаполнитьДанныеДляФиксацииСегментовПартнеров(
					ДокументУРБ, 
					ПоДаннымДокумента);
				
			Иначе
				
				НаборДанных.НаборДанныхТовары = РетроБонусыСервер.ЗаполнитьДанныеДляФиксацииСегментовТоваров(ДокументУРБПервичный);
				НаборДанных.НаборДанныхПартнеры = РетроБонусыСервер.ЗаполнитьДанныеДляФиксацииСегментовПартнеров(ДокументУРБПервичный);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НаборДанных;
	
КонецФункции

Функция ДополнительныеПараметрыПоУРБ(ДокументУРБ, ПоДаннымДокумента = Ложь)
	
	СтруктураПараметров = СтруктураПараметровОтчета();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУРБ);
	Запрос.УстановитьПараметр("ПоДаннымДокумента", ПоДаннымДокумента);
	
	Если ПоДаннымДокумента Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	УсловияРетроБонусовКлиентов.ОтборУчастников КАК Участники,
		|	УсловияРетроБонусовКлиентов.ОтборТоваров КАК Товары,
		|	ЕСТЬNULL(ВидыРетроБонусовКлиентов.СоставУчастников, ЗНАЧЕНИЕ(Перечисление.СоставыУчастниковРетроБонусов.ПустаяСсылка)) КАК СоставУчастников,
		|	ЕСТЬNULL(ВидыРетроБонусовКлиентов.СоставТоваров, ЗНАЧЕНИЕ(Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка)) КАК СоставТоваров,
		|	ЛОЖЬ КАК СегментыЗафиксированы,
		|	УсловияРетроБонусовКлиентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРетроБонусов.Согласован) КАК УРБСогласован,
		|	ВЫБОР
		|		КОГДА УсловияРетроБонусовКлиентов.Исправление
		|			ТОГДА УсловияРетроБонусовКлиентов.ИсправляемыйДокумент
		|		ИНАЧЕ УсловияРетроБонусовКлиентов.Ссылка
		|	КОНЕЦ КАК ДокументУРБПервичный,
		|	УсловияРетроБонусовКлиентов.Представление КАК ДокументУРБПредставление,
		|	ВЫБОР
		|		КОГДА УсловияРетроБонусовКлиентов.Исправление
		|			ТОГДА УсловияРетроБонусовКлиентов.ИсправляемыйДокумент.Представление
		|		ИНАЧЕ УсловияРетроБонусовКлиентов.Представление
		|	КОНЕЦ КАК ДокументУРБПервичныйПредставление
		|ИЗ
		|	Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыРетроБонусовКлиентов КАК ВидыРетроБонусовКлиентов
		|		ПО УсловияРетроБонусовКлиентов.ВидРетроБонуса = ВидыРетроБонусовКлиентов.Ссылка
		|ГДЕ
		|	УсловияРетроБонусовКлиентов.Ссылка = &ДокументУсловий";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.Участники, ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка)) КАК Участники,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.Товары, ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка)) КАК Товары,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.СоставУчастников, ЗНАЧЕНИЕ(Перечисление.СоставыУчастниковРетроБонусов.ПустаяСсылка)) КАК СоставУчастников,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.СоставТоваров, ЗНАЧЕНИЕ(Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка)) КАК СоставТоваров,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.СегментыЗафиксированы, ЛОЖЬ) КАК СегментыЗафиксированы,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.ДокументУсловий, ЛОЖЬ) <> ЛОЖЬ КАК УРБСогласован,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.ДокументУсловий, ЗНАЧЕНИЕ(Документ.УсловияРетроБонусовКлиентов.ПустаяСсылка)) КАК ДокументУРБПервичный,
		|	УсловияРетроБонусовКлиентов.Представление КАК ДокументУРБПредставление,
		|	ВЫБОР
		|		КОГДА НЕ РетроБонусыКлиентовУсловия.ДокументУсловий ЕСТЬ NULL
		|			ТОГДА РетроБонусыКлиентовУсловия.ДокументУсловий.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДокументУРБПервичныйПредставление
		|ИЗ
		|	Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РетроБонусыКлиентовУсловия КАК РетроБонусыКлиентовУсловия
		|		ПО УсловияРетроБонусовКлиентов.ИсправляемыйДокумент = РетроБонусыКлиентовУсловия.ДокументУсловий
		|			И (УсловияРетроБонусовКлиентов.Исправление)
		|ГДЕ
		|	УсловияРетроБонусовКлиентов.Ссылка = &ДокументУсловий
		|	И НЕ РетроБонусыКлиентовУсловия.ДокументУсловий ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.Участники, ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка)),
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.Товары, ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка)),
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.СоставУчастников, ЗНАЧЕНИЕ(Перечисление.СоставыУчастниковРетроБонусов.ПустаяСсылка)),
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.СоставТоваров, ЗНАЧЕНИЕ(Перечисление.СоставыТоваровРетроБонусов.ПустаяСсылка)),
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.СегментыЗафиксированы, ЛОЖЬ),
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.ДокументУсловий, ЛОЖЬ) <> ЛОЖЬ,
		|	ЕСТЬNULL(РетроБонусыКлиентовУсловия.ДокументУсловий, ЗНАЧЕНИЕ(Документ.УсловияРетроБонусовКлиентов.ПустаяСсылка)),
		|	УсловияРетроБонусовКлиентов.Представление КАК ДокументУРБПредставление,
		|	ВЫБОР
		|		КОГДА НЕ РетроБонусыКлиентовУсловия.ДокументУсловий ЕСТЬ NULL
		|			ТОГДА РетроБонусыКлиентовУсловия.ДокументУсловий.Представление
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ДокументУРБПервичныйПредставление
		|ИЗ
		|	Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РетроБонусыКлиентовУсловия КАК РетроБонусыКлиентовУсловия
		|		ПО УсловияРетроБонусовКлиентов.Ссылка = РетроБонусыКлиентовУсловия.ДокументУсловий
		|			И (НЕ УсловияРетроБонусовКлиентов.Исправление)
		|ГДЕ
		|	УсловияРетроБонусовКлиентов.Ссылка = &ДокументУсловий
		|	И НЕ РетроБонусыКлиентовУсловия.ДокументУсловий ЕСТЬ NULL";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		
	КонецЕсли;
	
	СтруктураПараметров.ДокументУРБ = ДокументУРБ;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция СтруктураПараметровОтчета()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументУРБ", Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("ДокументУРБПервичный", Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("ДокументУРБПредставление", "");
	СтруктураПараметров.Вставить("ДокументУРБПервичныйПредставление", "");
	СтруктураПараметров.Вставить("СоставУчастников", Перечисления.СоставыУчастниковРетроБонусов.ПустаяСсылка());
	СтруктураПараметров.Вставить("СоставТоваров", Перечисления.СоставыТоваровРетроБонусов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Участники", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Товары", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	СтруктураПараметров.Вставить("СегментыЗафиксированы", Ложь);
	СтруктураПараметров.Вставить("УРБСогласован", Ложь);
	СтруктураПараметров.Вставить("ВыводитьАртикул", Ложь);
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#КонецЕсли