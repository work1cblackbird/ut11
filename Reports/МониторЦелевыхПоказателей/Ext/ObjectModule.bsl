#Если НЕ МобильныйАвтономныйСервер Тогда

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем НумераторСтраниц; // Число - 
Перем ТекущийВариантИнтерфейсаКлиентскогоПриложения; // ВариантИнтерфейсаКлиентскогоПриложения -

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СтруктураНастроек(КомпоновщикНастроек) Экспорт
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВариантГруппировкиПоказателей", "");
	СтруктураНастроек.Вставить("КоличествоКолонокМонитораПоказателей", 0);
	СтруктураНастроек.Вставить("ВыбранныеВариантыАнализа");
	СтруктураНастроек.Вставить("ВыбранныеВариантыАнализаРасширенные");
	СтруктураНастроек.Вставить("ПериодичностьКонтроля", Перечисления.Периодичность.ПустаяСсылка());
	СтруктураНастроек.Вставить("ОтборСтатус", "");
		
	ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
		
	Настройки = ПользовательскиеНастройки.Элементы;
	Для Каждого Настройка Из Настройки Цикл
		ИмяНастройки = Строка(Настройка.Параметр);
		
		СтруктураНастроек[ИмяНастройки] = Настройка.Значение;
	КонецЦикла;
	
	Если ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ВыбранныеВариантыАнализаРасширенные") Тогда
		ТаблицаЗначений = ОбщегоНазначенияУТ.МассивВТаблицуЗначений(ПользовательскиеНастройки.ДополнительныеСвойства.ВыбранныеВариантыАнализаРасширенные);
	Иначе
		ТаблицаЗначений = Новый ТаблицаЗначений;
		
		ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ВариантыАнализаЦелевыхПоказателей");
		ТаблицаЗначений.Колонки.Добавить("ВариантАнализа", ОписаниеТипа);
		
		ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа");
		ТаблицаЗначений.Колонки.Добавить("ВариантОтображения", ОписаниеТипа);
		
		ОписаниеТипа = Новый ОписаниеТипов("Булево");
		ТаблицаЗначений.Колонки.Добавить("Детали", ОписаниеТипа);
		ТаблицаЗначений.Колонки.Добавить("Доступность", ОписаниеТипа);
		ТаблицаЗначений.Колонки.Добавить("ИтогТаблицы", ОписаниеТипа);
		
		ОписаниеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыАнализаПоказателей");
		ТаблицаЗначений.Колонки.Добавить("ТипАнализа", ОписаниеТипа);
		
		ПараметрОтборВариантовАнализа = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ФиксированныеНастройки, "ОтборВариантовАнализа");
		Если ПараметрОтборВариантовАнализа <> Неопределено 
			И ПараметрОтборВариантовАнализа.Использование Тогда
			ОтборВариантовАнализа = ПараметрОтборВариантовАнализа.Значение;
		Иначе
			ОтборВариантовАнализа = Неопределено;
		КонецЕсли; 
		
		// При условии, что отбор вариантов анализа - одиночное значение
		НоваяСтрока = ТаблицаЗначений.Добавить();
		НоваяСтрока.ВариантАнализа = ОтборВариантовАнализа;
		НоваяСтрока.Доступность = Истина;
	КонецЕсли;
	
	СтруктураНастроек.ВыбранныеВариантыАнализаРасширенные = ТаблицаЗначений;
	
	Возврат СтруктураНастроек;
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОтчетПустой = Ложь;
	
	// Получение настроек
	Настройки = СтруктураНастроек(КомпоновщикНастроек);
	
	// Получение источников данных
	ПараметрыСоставаМонитора = МониторингЦелевыхПоказателейКлиентСервер.ИнициализацияПараметровСоставаМонитора();
	
	ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = Ложь;
	
	ПараметрОтборВариантовАнализа = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек.ФиксированныеНастройки, "ОтборВариантовАнализа");
	Если ПараметрОтборВариантовАнализа <> Неопределено
		И ПараметрОтборВариантовАнализа.Использование Тогда
		ПараметрыСоставаМонитора.ОтборВариантовАнализа = ПараметрОтборВариантовАнализа.Значение;
	Иначе
		ПараметрыСоставаМонитора.ОтборВариантовАнализа = Неопределено;
	КонецЕсли;
	
	ПараметрыСоставаМонитора.ПринудительноОбновитьДанные  = Ложь;
	
	Дашборд = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("Дашборд", Дашборд);
	СтруктураНастроек = МониторингЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей(Дашборд);
	СтруктураНастроек.ВариантыАнализаПользовательскиеНастройки = Новый ХранилищеЗначения(Настройки.ВыбранныеВариантыАнализаРасширенные);
	СтруктураНастроек.Вставить("ВариантГруппировкиПоказателей", Настройки.ВариантГруппировкиПоказателей);
	СтруктураНастроек.Вставить("КоличествоКолонокМонитораПоказателей", Настройки.КоличествоКолонокМонитораПоказателей);
	ПараметрыСоставаМонитора.СтруктураНастроек = СтруктураНастроек ;
	
	ПараметрыСоставаМонитора.ОтборСтатус  = Настройки.ОтборСтатус;
	ПараметрыСоставаМонитора.ПериодичностьКонтроля = Настройки.ПериодичностьКонтроля;
	ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
	ПараметрыСоставаМонитора.ДемонстрационныйРежим = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек.ФиксированныеНастройки, "ДемонстрационныйРежим").Значение;
	
	МониторингЦелевыхПоказателей.ПолучитьСоставМонитора(ПараметрыСоставаМонитора);
	
	// Формирование отфильтрованного состава показателей
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
	
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
	МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения(ПараметрыСоставаМонитора, АдресХранилища);
		
	// Вывод источников данных в табличный документ
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Свойство("Монитор") Тогда
		СоставМонитора = СоставМонитораИзРезультатаПодготовкиДанных(Результат, ПараметрыСоставаМонитора);
		
		СформироватьОтчет(ДокументРезультат, СоставМонитора, ОтчетПустой);
	КонецЕсли;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает состав монитора.
// 
// Параметры:
// 	РезультатПодготовкиДанных - Структура - 
// 	 *Монитор - Структура - 
// 	ПараметрыСоставаМонитора - См. МониторингЦелевыхПоказателейКлиентСервер.ИнициализацияПараметровСоставаМонитора
// Возвращаемое значение:
// 	Структура - со свойством:
// 	 *Параметры - См. МониторингЦелевыхПоказателейКлиентСервер.ИнициализацияПараметровСоставаМонитора
Функция СоставМонитораИзРезультатаПодготовкиДанных(РезультатПодготовкиДанных, ПараметрыСоставаМонитора)
	СоставМонитора = РезультатПодготовкиДанных.Монитор;
	СоставМонитора.Вставить("Параметры", ПараметрыСоставаМонитора);
	Возврат СоставМонитора;
КонецФункции

#Область ВыводЭлементовПечатнойФормы

Процедура ВывестиОтступ(ДокументРезультат, Макет)
	Область = Макет.ПолучитьОбласть("ОтступСтрока");
	ДокументРезультат.Вывести(Область);
КонецПроцедуры

Процедура ВывестиЗаголовок(ДокументРезультат, Макет)
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	СвойстваОбласти = Новый Структура("Заголовок", НСтр("ru= 'Монитор целевых показателей'"));
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	
	ВывестиОтступ(ДокументРезультат, Макет);
	ДокументРезультат.Вывести(Область);
	ВывестиОтступ(ДокументРезультат, Макет);
КонецПроцедуры


// Выводит параметры отчета в табличный документ.
// 
// Параметры:
// 	ДокументРезультат - ТабличныйДокумент - табличный документ результат.
// 	Макет - ТабличныйДокумент - макет.
// 	СоставМонитора - см. СоставМонитораИзРезультатаПодготовкиДанных
//
Процедура ВывестиПараметры(ДокументРезультат, Макет, СоставМонитора)
	Область = Макет.ПолучитьОбласть("Параметры");
	Параметры = СоставМонитора.Параметры;
	
	ПериодичностьКонтроля = "";
	Состояние = "";
	
	Если Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.День Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Ежемесячные'");
	ИначеЕсли Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.Неделя Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Еженедельные'");
	ИначеЕсли Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.Декада Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Подекадные'");
	ИначеЕсли Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.Месяц Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Ежемесячные'");
	ИначеЕсли Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.Квартал Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Ежеквартальные'");
	ИначеЕсли Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.Полугодие Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Полугодичные'");
	ИначеЕсли Параметры.ПериодичностьКонтроля = Перечисления.Периодичность.Год Тогда
		ПериодичностьКонтроля = НСтр("ru= 'Ежегодные'");
	КонецЕсли;
	
	Если Параметры.ОтборСтатус = "РассчитаноСОшибками" Тогда
		Состояние = НСтр("ru= 'есть ошибки в расчете'");
	ИначеЕсли Не Параметры.ОтборСтатус = "РассчитаноСОшибками" 
		И ЗначениеЗаполнено(Параметры.ОтборСтатус) Тогда
		Состояние = НРег(МониторингЦелевыхПоказателей.ПредставлениеСостояния(Параметры.ОтборСтатус));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодичностьКонтроля) Или ЗначениеЗаполнено(Состояние) Тогда
		Если ЗначениеЗаполнено(ПериодичностьКонтроля) И ЗначениеЗаполнено(Состояние) Тогда
			СтрокаЗначениеПараметров = НСтр("ru= '%1 показатели, у которых %2'");
		ИначеЕсли Не ЗначениеЗаполнено(ПериодичностьКонтроля) И ЗначениеЗаполнено(Состояние) Тогда
			СтрокаЗначениеПараметров = НСтр("ru= 'Показатели, у которых %2'");
		ИначеЕсли ЗначениеЗаполнено(ПериодичностьКонтроля) И Не ЗначениеЗаполнено(Состояние) Тогда
			СтрокаЗначениеПараметров = НСтр("ru= '%1 показатели'");
		КонецЕсли;
		
		СтрокаЗначениеПараметров = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаЗначениеПараметров, ПериодичностьКонтроля, Состояние);
		
		СвойстваОбласти = Новый Структура("ЗначениеПараметров", СтрокаЗначениеПараметров);
		ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

		ДокументРезультат.Вывести(Область);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиДатуВремяФормирования(ДокументРезультат, Макет)
	Область = Макет.ПолучитьОбласть("ДатаВремяФормирования");
	
	СвойстваОбласти = Новый Структура("ЗаголовокСформирован, ДатаВремяФормирования", 
		НСтр("ru= 'Сформирован'")+ ":",
		ТекущаяДатаСеанса());
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

	ДокументРезультат.Вывести(Область);
КонецПроцедуры

Процедура ВывестиЗаголовокГруппы(ДокументРезультат, Макет, ПредставлениеГруппы, Цвет = Неопределено)
	Область = Макет.ПолучитьОбласть("ЗаголовокГруппы");
	
	Если Цвет <> Неопределено Тогда
		Область.Область("R1C2").ЦветТекста = Цвет;
	КонецЕсли;
	
	СвойстваОбласти = Новый Структура("ЗаголовокГруппы", ПредставлениеГруппы);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

	ВывестиОтступ(ДокументРезультат, Макет);
	ДокументРезультат.Вывести(Область);
	ДокументРезультат.НачатьГруппуСтрок();
	ВывестиОтступ(ДокументРезультат, Макет);
КонецПроцедуры


// Выводит элементы монитора в табличный документ.
// 
// Параметры:
// 	ДокументРезультат - ТабличныйДокумент - табличный документ результат.
// 	Макет - ТабличныйДокумент - макет.
// 	СоставМонитора - См. СоставМонитораИзРезультатаПодготовкиДанных
// 	СтруктураВывода - См. МониторингЦелевыхПоказателей.СтруктураВывода
Процедура ВывестиЭлементыМонитора(ДокументРезультат, Макет, СоставМонитора, СтруктураВывода)
	// Вывод заголовка и параметров
	ВывестиЗаголовок(ДокументРезультат, Макет);
	ВывестиПараметры(ДокументРезультат, Макет, СоставМонитора);
	ВывестиДатуВремяФормирования(ДокументРезультат, Макет);
	
	// Вывод показателей
	Параметры = СоставМонитора.Параметры;
	СтруктураНастроек = Параметры.СтруктураНастроек;
	
	Если Параметры.РежимАнализаВзаимосвязанных Тогда
		Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
			Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
				ГруппаПоказателя = ЭлементВывода;
				
				ВывестиЗаголовокГруппы(ДокументРезультат, Макет, ГруппаПоказателя);
				ВывестиЭлементыГруппы(ДокументРезультат, Макет, СтруктураВывода[ЭлементВывода], СтруктураНастроек.КоличествоКолонокМонитораПоказателей);
				
				ДокументРезультат.ЗакончитьГруппуСтрок();
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоСостоянию" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Состояние = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					ГруппаПоказателя = МониторингЦелевыхПоказателей.ПредставлениеСостояния(Состояние);
					
					ВывестиЗаголовокГруппы(ДокументРезультат, Макет, ГруппаПоказателя, ЦветСостояния(Состояние));
					ВывестиЭлементыГруппы(ДокументРезультат, Макет, СтруктураВывода[ЭлементВывода], СтруктураНастроек.КоличествоКолонокМонитораПоказателей);
					
					ДокументРезультат.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Идентификатор = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				КатегорияЦелиИдентификатор = МониторингЦелевыхПоказателей.СтрокуВУникальныйИдентификатор(Идентификатор);
				КатегорияЦели = Справочники.КатегорииЦелей.ПолучитьСсылку(КатегорияЦелиИдентификатор);
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					ГруппаПоказателя = КатегорияЦели;
					
					ВывестиЗаголовокГруппы(ДокументРезультат, Макет, ГруппаПоказателя);
					ВывестиЭлементыГруппы(ДокументРезультат, Макет, СтруктураВывода[ЭлементВывода], СтруктураНастроек.КоличествоКолонокМонитораПоказателей);
					
					ДокументРезультат.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиОтступ(ДокументРезультат, Макет);
КонецПроцедуры

Процедура ВывестиЭлементыГруппы(ДокументРезультат, Макет, КоллекцияВариантовАнализа, КоличествоКолонокМонитораПоказателей)
	СчетчикЭлементовСтроки = 1;
	СчетчикСтрок = 1;
	КоличествоСтрок = Цел(КоллекцияВариантовАнализа.Количество()/КоличествоКолонокМонитораПоказателей) 
		+ Мин(КоллекцияВариантовАнализа.Количество()% КоличествоКолонокМонитораПоказателей, 1);
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ХранилищеИсточникаДанных = ЭлементМонитора.ИсточникДанных; // ХранилищеЗначения
		ИсточникДанных = ХранилищеИсточникаДанных.Получить();
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		ВыводитьИтогТаблицы = ЭлементМонитора.ВыводитьИтогТаблицы;
		ВыводитьПодробности = ЭлементМонитора.ВыводитьПодробности;
		
		// Наполним элемент контентом по шаблону
		ВывестиЭлементыПоказателя(ДокументРезультат,
				Макет,
				ВариантАнализа,
				ИсточникДанных,
				ВариантОтображения,
				ВыводитьИтогТаблицы,
				ВыводитьПодробности);
		
		СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
		Если СчетчикЭлементовСтроки > КоличествоКолонокМонитораПоказателей Тогда 
			СчетчикЭлементовСтроки = 1;
			СчетчикСтрок = СчетчикСтрок + 1;
			
			// Для последней строки отступ выводить не требуется
			Если СчетчикСтрок <= КоличествоСтрок Тогда
				ВывестиОтступ(ДокументРезультат, Макет);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВывестиЭлементыПоказателя(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных, ВариантОтображения, ВыводитьИтогТаблицы, ВыводитьПодробности)
	Если ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
		ВывестиДиаграмму(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных);
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Кратко Тогда
		ВывестиКратко(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных, ВыводитьПодробности);
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Таблица Тогда
		ВывестиТаблицу(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных, ВыводитьИтогТаблицы);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиДиаграмму(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных)
	ВременныйДокумент = Новый ТабличныйДокумент;
	
	ВывестиЗаголовокПоказателя(ВременныйДокумент, Макет, ИсточникДанных);
	ВывестиСодержаниеПоказательДиаграмма(ВременныйДокумент, Макет, ИсточникДанных);
	ВывестиНомерСтраницы(ВременныйДокумент, Макет, ИсточникДанных);
	
	ДокументРезультат.Присоединить(ВременныйДокумент);
КонецПроцедуры

Процедура ВывестиТаблицу(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных, ВыводитьИтогТаблицы)
	ВременныйДокумент = Новый ТабличныйДокумент;
	
	ВывестиЗаголовокПоказателя(ВременныйДокумент, Макет, ИсточникДанных);
	ВывестиСодержаниеПоказательТаблица(ВременныйДокумент, Макет, ИсточникДанных, ВыводитьИтогТаблицы);
	ВывестиНомерСтраницы(ВременныйДокумент, Макет, ИсточникДанных);
	
	ДокументРезультат.Присоединить(ВременныйДокумент);
КонецПроцедуры

Процедура ВывестиКратко(ДокументРезультат, Макет, ВариантАнализа, ИсточникДанных, ВыводитьПодробности)
	ВременныйДокумент = Новый ТабличныйДокумент;
	
	ВывестиЗаголовокПоказателя(ВременныйДокумент, Макет, ИсточникДанных);
	ВывестиСодержаниеПоказательКратко(ВременныйДокумент, Макет, ИсточникДанных, ВыводитьПодробности);
	ВывестиНомерСтраницы(ВременныйДокумент, Макет, ИсточникДанных);
	
	ДокументРезультат.Присоединить(ВременныйДокумент);
КонецПроцедуры

Процедура ВывестиЗаголовокПоказателя(ДокументРезультат, Макет, ИсточникДанных)
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	ВариантАнализа = ИсточникДанных.ВариантАнализа; // СправочникСсылка.ВариантыАнализаЦелевыхПоказателей -
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	Разделитель = " / ";
	
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод маркера состояния
	Если ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "НеприемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ПриемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ЦельДостигнута" Тогда
		
		Маркер = "●";
		СуффиксМаркера = "";
		
		Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|МаркерСостоянияСтолбец");
	
		ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(ВариантАнализа, ИсточникДанных);
		Область.ТекущаяОбласть.ЦветТекста = ЦветаСостоянияИТренда.ЦветСостояния;
	
		СвойстваОбласти = Новый Структура("Маркер", Маркер);
		ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
		ДокументРезультат.Присоединить(Область);
	Иначе
		Маркер = "";
		СуффиксМаркера = "БезМаркера";
	КонецЕсли;
	
	РеквизитыВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа, "Наименование, КратностьЗначений");
	// Вывод наименования показателя
	Если СуффиксМаркера = "БезМаркера" Тогда
		Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяБезМаркераСтрока|ЗаголовокПоказателяБезМаркераСтолбец");
	Иначе
		Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|ЗаголовокПоказателяСтолбец");
	КонецЕсли;	
	
	СвойстваОбласти = Новый Структура("ЗаголовокПоказателя", РеквизитыВариантаАнализа.Наименование);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	// Вывод свойств показателя
	Если СуффиксМаркера = "БезМаркера" Тогда
		Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяБезМаркераСтрока|СвойстваПоказателяСтолбец");
	Иначе
		Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|СвойстваПоказателяСтолбец");
	КонецЕсли;
	СвойстваПоказателя = "";
	
	Если Не РеквизитыВариантаАнализа.КратностьЗначений = ВидыПредставленияЧисел.БезИзменений Тогда
		Кратность = МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа);
	Иначе
		Кратность = "";
	КонецЕсли;
	Если Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность) Тогда
		Размерность = Строка(ДинамическиеСвойстваВариантаАнализа.Размерность);
	Иначе
		Размерность = "";
	КонецЕсли;
	ТекстовоеПредставлениеПериода = МониторингЦелевыхПоказателей.ПредставлениеПериодаВариантаАнализа(ИсточникДанных);
	
	Если ЗначениеЗаполнено(Кратность) Тогда
		СвойстваПоказателя = СвойстваПоказателя + Кратность;
	КонецЕсли;
	Если ЗначениеЗаполнено(Размерность) Тогда
		СвойстваПоказателя = СвойстваПоказателя + ?(ЗначениеЗаполнено(СвойстваПоказателя), Разделитель, "") + Размерность;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстовоеПредставлениеПериода) Тогда
		СвойстваПоказателя = СвойстваПоказателя + ?(ЗначениеЗаполнено(СвойстваПоказателя), Разделитель, "") + ТекстовоеПредставлениеПериода;
	КонецЕсли;
	
	СвойстваОбласти = Новый Структура("СвойстваПоказателя", СвойстваПоказателя);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
КонецПроцедуры

Процедура ВывестиСодержаниеПоказательКратко(ДокументРезультат, Макет, ИсточникДанных, ВыводитьПодробности)
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	ВариантАнализа = ИсточникДанных.ВариантАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	КратностьЗначений = ВариантАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
	
	Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	СвойстваОбласти = Новый Структура("
		|Значение, 
		|Размерность, 
		|МаркерТренда, 
		|ОтнИзм, 
		|АбсИзм,
		|ОписаниеОшибки");
		
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		// Вывод маркера состояния
		Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрока|ПоказательСтолбец");
		
		// Заполнение области значения
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
		
		РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
		
		Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
			СтрокаРазмерности = " " + РазмерностьПоказателя;
		Иначе
			СтрокаРазмерности = "";
		КонецЕсли;
		СвойстваОбласти.Значение = СокрЛП(МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(
				ОтображаемоеЗначение, 
				ТочностьРасчетаДробнойЧасти, 
				КратностьЗначений));
				
		СвойстваОбласти.Размерность = СтрокаРазмерности;
		
		// Заполнение области деталей
		Если ВыводитьПодробности Тогда
			Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
				ПоследнееЦелевоеЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ЦелевоеЗначение, ТочностьРасчетаДробнойЧасти);
				ПредпоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
			Иначе
				ПоследнееЦелевоеЗначение = 0;
				ПредпоследнееЗначение = 0;
			КонецЕсли;
			
			Если Не ПредпоследнееЗначение = 0 Тогда
				ОтносительноеИзменение = Окр(100 * (ПоследнееЗначение - ПредпоследнееЗначение)/ПредпоследнееЗначение, ТочностьРасчетаДробнойЧасти);
				
				Если ОтносительноеИзменение > 0 Тогда
					МаркерТренда = "▲";
				ИначеЕсли ОтносительноеИзменение = 0 Тогда
					МаркерТренда = "";
				ИначеЕсли ОтносительноеИзменение < 0 Тогда
					МаркерТренда = "▼";
				КонецЕсли;
			КонецЕсли;
			
			АбсолютноеИзменение = ПоследнееЗначение - ПредпоследнееЗначение;
			
			Если АбсолютноеИзменение > 0 Тогда
				МаркерТренда = "▲";
			ИначеЕсли АбсолютноеИзменение = 0 Тогда
				МаркерТренда = "";
			ИначеЕсли АбсолютноеИзменение < 0 Тогда
				МаркерТренда = "▼";
			КонецЕсли;
			
			СвойстваОбласти.МаркерТренда = МаркерТренда;
			СвойстваОбласти.ОтнИзм = ОтносительноеИзменение;
			СвойстваОбласти.АбсИзм = МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(АбсолютноеИзменение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
		КонецЕсли;
	Иначе 
		// Вывод маркера состояния
		Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрокаОшибка|ПоказательСтолбец");
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			СвойстваОбласти.ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(ВариантАнализа, ИсточникДанных);
		ВыведеннаяОбласть.ЦветТекста = ЦветаСостоянияИТренда.ЦветСостояния;
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСодержаниеПоказательТаблица(ДокументРезультат, Макет, ИсточникДанных, ВыводитьИтогТаблицы)
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	ВариантАнализа = ИсточникДанных.ВариантАнализа;
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
		МониторингЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(ТаблицаЗначений, "", ВариантАнализа, ИсточникДанных);
		
		ОбластьОтступ = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ОтступСтолбец");
		ДокументРезультат.Вывести(ОбластьОтступ);
	
		// Вывод шапки таблицы
		Область = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ПоказательСтолбец");
		
		СвойстваОбласти = Новый Структура("ЗаголовокОбъектАнализа, ЗаголовокЗначение, Разделитель, Размерность");
		СвойстваОбласти.Вставить("ЗаголовокОбъектАнализа", ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление);
		СвойстваОбласти.Вставить("ЗаголовокЗначение", ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление);
		СвойстваОбласти.Вставить("Разделитель", ?(ЗначениеЗаполнено(ДинамическиеСвойстваВариантаАнализа.Размерность), ",", ""));
		СвойстваОбласти.Вставить("Размерность", ДинамическиеСвойстваВариантаАнализа.Размерность);
			
		ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
		ДокументРезультат.Присоединить(Область);
		
		// Вывод тела таблицы
		Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицы|ПоказательСтолбец");
		
		ОграничениеНаВыводСтрок = 12;
		КоличествоСтрок = ТаблицаЗначений.Количество();
		ЕстьПревышениеОграничения = (КоличествоСтрок > ОграничениеНаВыводСтрок);
		
		КоличествоВыведенныхСтрок = 0;
		ЗначениеОстальные = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
			Если КоличествоВыведенныхСтрок < 10 Тогда
				ДокументРезультат.Вывести(ОбластьОтступ);
				
				СвойстваОбласти = Новый Структура("ОбъектАнализа, ЗначениеАнализа", СтрокаТаблицы.КолонкаОбъектАнализа, СтрокаТаблицы.КолонкаЗначениеАнализа);
					
				ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
				ДокументРезультат.Присоединить(Область);
				
				КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок + 1; 
			Иначе
				ЗначениеОстальные = ЗначениеОстальные + СтрокаТаблицы.КолонкаЗначениеАнализа;
			КонецЕсли;
		КонецЦикла;
		
		Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицыОтступ|ПоказательСтолбец");
		Если КоличествоСтрок < ОграничениеНаВыводСтрок Тогда
			КоличествоСтрокПустышек = ОграничениеНаВыводСтрок - КоличествоСтрок;
			Пока КоличествоСтрокПустышек > 0 Цикл 
				ДокументРезультат.Вывести(ОбластьОтступ);
				ДокументРезультат.Присоединить(Область);
				
				КоличествоСтрокПустышек = КоличествоСтрокПустышек - 1;
			КонецЦикла;
		КонецЕсли;
			 
		Если ЕстьПревышениеОграничения Тогда
			Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицыЕще|ПоказательСтолбец");
			
			ЗаголовокОстальные = НСтр("ru= 'Остальные'");
			СтрокСверхОграничения = КоличествоСтрок - ОграничениеНаВыводСтрок;
			
			СвойстваОбласти = Новый Структура("ЗаголовокОстальные, СтрокСверхОграничения, ЗначениеОстальные", 
				ЗаголовокОстальные, СтрокСверхОграничения, ЗначениеОстальные);
				
			ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
			
			ДокументРезультат.Вывести(ОбластьОтступ);
			ДокументРезультат.Присоединить(Область);
		КонецЕсли;
		
		// Вывод подвала таблицы
		Если ВыводитьИтогТаблицы Тогда
			Область = Макет.ПолучитьОбласть("ПоказательТаблицаПодвал|ПоказательСтолбец");
			
			ЗаголовокИтого = НСтр("ru= 'Итого'");
			ЗначениеИтого = ТаблицаЗначений.Итог("КолонкаЗначениеАнализа");
			
			СвойстваОбласти = Новый Структура("ЗаголовокИтого, ЗначениеИтого", 
				ЗаголовокИтого, ЗначениеИтого);
				
			ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
			
			ДокументРезультат.Вывести(ОбластьОтступ);
			ДокументРезультат.Присоединить(Область);
		КонецЕсли;
	Иначе
		// Выведем сообщение об ошибке (используется диаграмма)
		ВывестиСодержаниеПоказательДиаграмма(ДокументРезультат, Макет, ИсточникДанных);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСодержаниеПоказательДиаграмма(ДокументРезультат, Макет, ИсточникДанных)
	ВариантАнализа = ИсточникДанных.ВариантАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	Область = Макет.ПолучитьОбласть("ПоказательДиаграммаСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод диаграммы
	Область = Макет.ПолучитьОбласть("ПоказательДиаграммаСтрока|ПоказательСтолбец");
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
	РисунокДиаграмма = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
	
	Диаграмма = РисунокДиаграмма.Объект;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		МониторингЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(Диаграмма, ВариантАнализа, ИсточникДанных);
	Иначе
		МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ИсточникДанных.ОписаниеОшибки);
	КонецЕсли;
	
	// Уточнение свойств диаграммы в табличном документе
	Диаграмма.ПрозрачныйФон = Истина;
	
	Индекс = ДокументРезультат.Рисунки.Индекс(РисунокДиаграмма);
	
	ОбластьМакетаСДиаграммой = ДокументРезультат.Область(ВыведеннаяОбласть.Верх, ВыведеннаяОбласть.Лево, ВыведеннаяОбласть.Низ, ВыведеннаяОбласть.Право);
	ДокументРезультат.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);
КонецПроцедуры

Процедура ВывестиНомерСтраницы(ДокументРезультат, Макет, ИсточникДанных)
	Область = Макет.ПолучитьОбласть("СтраницаСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("СтраницаСтрока|ПоказательСтолбец");
	СвойстваОбласти = Новый Структура("НомерСтраницы", "НомерСтраницы_" + НумераторСтраниц);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	НумераторСтраниц = НумераторСтраниц + 1;
КонецПроцедуры

Процедура ВывестиСообщениеНетДоступныхПоказателей(ДокументРезультат, Макет, Выводить)
	Если Выводить Тогда
		Если ПравоДоступа("Изменение", Метаданные.Справочники.ВариантыАнализаЦелевыхПоказателей) Тогда
			Область = Макет.ПолучитьОбласть("НетДоступныхПоказателейЕстьПравоИзменения");
		Иначе
			Область = Макет.ПолучитьОбласть("НетДоступныхПоказателей");
		КонецЕсли;
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
КонецПроцедуры

Процедура ВывестиСообщениеПустойРезультатОтбора(ДокументРезультат, Макет, Выводить)
	Если Выводить Тогда
		Область  = Макет.ПолучитьОбласть("ПустойРезультатОтбора");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область Прочее


// Формирует отчет
// 
// Параметры:
// 	ДокументРезультат - ТабличныйДокумент - Описание
// 	СоставМонитора - См. СоставМонитораИзРезультатаПодготовкиДанных
// 	ОтчетПустой - Булево - флаг пустого отчета.
Процедура СформироватьОтчет(ДокументРезультат, СоставМонитора, ОтчетПустой)
	// Инициализация параметров вывода
	МакетСводнойСтраницы = ПолучитьМакет("МакетСводнойСтраницы"); 
	
	СоставМонитораНеопределен = (СоставМонитора.НаборИсточниковДанных = Неопределено
		Или ТипЗнч(СоставМонитора.НаборИсточниковДанных) = Тип("ТаблицаЗначений") 
			И СоставМонитора.НаборИсточниковДанных.Количество() = 0);
	СоставМонитораПустойПоОтбору = (СоставМонитора.Пустой И Не СоставМонитораНеопределен);
	
	Если СоставМонитораНеопределен Или СоставМонитораПустойПоОтбору Тогда
		ОтчетПустой = Истина;
	КонецЕсли;
	
	// Вывод служебной информации
	ВывестиСообщениеНетДоступныхПоказателей(ДокументРезультат, МакетСводнойСтраницы, СоставМонитораНеопределен);
	ВывестиСообщениеПустойРезультатОтбора(ДокументРезультат, МакетСводнойСтраницы, СоставМонитораПустойПоОтбору);
	
	СводнаяСтраницаВыводилась = Ложь;
	Если Не СоставМонитораНеопределен И Не СоставМонитораПустойПоОтбору Тогда
		Если СоставМонитора.Параметры.ДемонстрационныйРежим Тогда
			ОбластьМакета = МакетСводнойСтраницы.ПолучитьОбласть("ДемонстрационныйРежим");
			ДокументРезультат.Вывести(ОбластьМакета);
		КонецЕсли;
	
		СтруктураВывода = МониторингЦелевыхПоказателей.СтруктураВывода(СоставМонитора);
		
		Если СоставМонитора.Параметры.ОтборВариантовАнализа = Неопределено Тогда 
			// Вывод сводной страницы показателей
			ВывестиЭлементыМонитора(ДокументРезультат, МакетСводнойСтраницы, СоставМонитора, СтруктураВывода);
			
			// Корректировка номеров страниц
			// Параметры вывода на печать - для подсчета страниц.
			МониторингЦелевыхПоказателей.УстановитьПараметрыВывода(ДокументРезультат);
			ЗаполнитьНомераСтраниц(ДокументРезультат, СтруктураВывода, ДокументРезультат.КоличествоСтраниц());
			
			СводнаяСтраницаВыводилась = Истина;
		КонецЕсли;
		
		// Вывод страниц отдельных показателей
		Если СводнаяСтраницаВыводилась Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			
			НачалоНовогоФорматаСтрок = ДокументРезультат.ВысотаТаблицы + 1;
			
			МониторингЦелевыхПоказателей.ВывестиОтдельныеПоказатели(ДокументРезультат, СоставМонитора, СтруктураВывода);
			
			ОбрабатываемаяОбласть = ДокументРезультат.Область(НачалоНовогоФорматаСтрок, , ДокументРезультат.ВысотаТаблицы + 1, );
			ОбрабатываемаяОбласть.СоздатьФорматСтрок();
			
			ДокументВременный = Новый ТабличныйДокумент;
			ДокументВременный.ВставитьОбласть(ОбрабатываемаяОбласть);
			
			ОбщаяШирина = Макс(150, СоставМонитора.Параметры.СтруктураНастроек.КоличествоКолонокМонитораПоказателей * 58);
			Для Счетчик = 1 По ДокументВременный.ШиринаТаблицы Цикл 
				Если Счетчик = 1 Тогда
					Ширина = 0;
				Иначе
					Ширина = ОбщаяШирина / (ДокументВременный.ШиринаТаблицы - 1);
				КонецЕсли;
				
				ДокументРезультат.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = Окр(Ширина, 2);
			КонецЦикла;
		Иначе
			МониторингЦелевыхПоказателей.ВывестиОтдельныеПоказатели(ДокументРезультат, СоставМонитора, СтруктураВывода);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры вывода на печать - параметры колонтитулов
	МониторингЦелевыхПоказателей.УстановитьПараметрыВывода(ДокументРезультат);
КонецПроцедуры

Процедура ЗаполнитьНомераСтраниц(ДокументРезультат, СтруктураВывода, Сдвиг)
	КоличествоПоказателей = 0;
	Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл 
		КоличествоПоказателей = КоличествоПоказателей + СтруктураВывода[ЭлементВывода].Количество();
	КонецЦикла;
	
	Для НомерСтраницы = 1 По КоличествоПоказателей Цикл 
		ИскомыйТекст = "НомерСтраницы_" + НомерСтраницы;
		ИскомаяОбласть = ДокументРезультат.НайтиТекст(ИскомыйТекст);
		ИскомаяОбласть.Текст = СтрЗаменить(ИскомаяОбласть.Текст, ИскомыйТекст, НомерСтраницы + Сдвиг);
	КонецЦикла;
КонецПроцедуры

Функция ЦветСостояния(Состояние)
	Если Состояние = "НеприемлемоеСостояние" 
		Или Состояние = "РассчитаноСОшибками" Тогда
		Возврат WebЦвета.Кирпичный;
	ИначеЕсли Состояние = "ПриемлемоеСостояние" Тогда
		Возврат WebЦвета.ТемноОранжевый;
	ИначеЕсли Состояние = "ЦельДостигнута" Тогда
		Возврат WebЦвета.ЦветМорскойВолны;
	Иначе
		Если ТекущийВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
			Возврат ЦветаСтиля.ГруппаВариантовОтчетовЦвет82;
		Иначе // Такси.
			Возврат ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
		КонецЕсли;
	КонецЕсли;
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область Инициализация

#Область ИнициализацияЛокальныхПеременных

ТекущийВариантИнтерфейсаКлиентскогоПриложения = КлиентскоеПриложение.ТекущийВариантИнтерфейса();
НумераторСтраниц = 1;

#КонецОбласти

#КонецОбласти 

#КонецЕсли

#КонецЕсли

