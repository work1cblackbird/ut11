#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Дашборд = Неопределено;
	Параметры.Свойство("Дашборд", Дашборд);
	ОбновлениеСтруктурыНастроекСервер(Дашборд);
	
	ТекущийВариантИнтерфейсаКлиентскогоПриложения = КлиентскоеПриложение.ТекущийВариантИнтерфейса();
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	Дашборды.Параметры.УстановитьЗначениеПараметра("ТекущийПользователь", ТекущийПользователь);
	
	Если Не ПустаяСтрока(Параметры.ИдентификаторВариантаАнализа) Тогда
		РежимАнализаВзаимосвязанных = Истина;
		
		// Установим заголовок
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(
			Параметры.ИдентификаторВариантаАнализа);
		ВариантАнализаСсылка = ВариантАнализа.Ссылка; // СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - 
		НаименованиеВариантаАнализа = ВариантАнализаСсылка.Наименование;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Анализируемый показатель ""%1""'"),
			НаименованиеВариантаАнализа);
		АвтоЗаголовок = Не РежимАнализаВзаимосвязанных;
		
		Параметры.Свойство("ДемонстрационныйРежим", ДемонстрационныйРежим);
		
		ТаблицаСоставаМонитора = ДанныеФормыВЗначение(Параметры.СоставМонитора, Тип("ТаблицаЗначений"));
		АдресаДинамическихПараметров = Новый ХранилищеЗначения(ТаблицаСоставаМонитора);
	КонецЕсли;
	
	ЗарегистрироватьПостоянныеКоманды();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если МобильныйКлиент Тогда
	Элементы.ГруппаДашборды.Видимость = Ложь;
	#Иначе
	Элементы.Дашборды.ТекущаяСтрока = СтруктураНастроек.Дашборд;
	#КонецЕсли
	ИнициализироватьОбработчикАвтообновления();
	ИнициализироватьОбработчикПервогоЗапуска();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьДашбордПоУмолчанию(СтруктураНастроек.Дашборд);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДашбордМЦП" Тогда
		ТекущиеДанные = Элементы.Дашборды.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
			И ТекущиеДанные.Ссылка = Источник Тогда
			ОбновлениеСтруктурыНастроекСервер(Источник);
			ИнициализироватьОбработчикАвтообновления();
			ОбновитьСоставМонитораКлиент(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	Если СтруктураНастроек.АвторасчетКоличестваКолонок Тогда
		СтруктураНастроек.Вставить("КоличествоКолонокМонитораПоказателей",
			РассчитатьКоличествоКолонокМонитораПоказателей());
	КонецЕсли;
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	УстановитьПользовательскийПараметр(ЭтотОбъект, "ОтборСтатус", ОтборСтатус);
	
	// Необходимо обновить количество выводимых колонок по настройке дашборда,
	// так как отбор показателей может корректировать количество выводимых колонок
	ОбновлениеСтруктурыНастроекСервер(СтруктураНастроек.Дашборд);
	
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьКонтроляПриИзменении(Элемент)
	УстановитьПользовательскийПараметр(ЭтотОбъект, "ПериодичностьКонтроля", ПериодичностьКонтроля);
	
	// Необходимо обновить количество выводимых колонок по настройке дашборда,
	// так как отбор показателей может корректировать количество выводимых колонок
	ОбновлениеСтруктурыНастроекСервер(СтруктураНастроек.Дашборд);
	
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Элемент - ПолеФормы - 
// 	СтандартнаяОбработка - Булево - 
&НаКлиенте
Процедура Подключаемый_ОткрытьАнализПоказателяНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторВариантаАнализа = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Элемент.Имя);
	
	ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору(
		"ВариантыАнализаЦелевыхПоказателей", ИдентификаторВариантаАнализа);

	Отбор = Новый Структура("ОтборВариантовАнализа, ДемонстрационныйРежим", ВариантАнализа, ДемонстрационныйРежим);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Отбор);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа",
		ПараметрыФормы, 
		ЭтотОбъект, 
		Новый УникальныйИдентификатор());
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыДашборды

&НаКлиенте
Процедура ДашбордыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("Подключаемый_ДашбордыВыбор", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДашбордыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ОткрытьФорму("Справочник.ДашбордыМЦП.ФормаОбъекта", , ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДашбордыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДашбордыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	КартинкаПометкиНаУдаление = ПоместитьВоВременноеХранилище(БиблиотекаКартинок.ПомеченныйНаУдалениеЭлемент);
	
	Для Каждого Строка Из Строки Цикл
		СтрокаСписка = Строка.Значение.Данные;
		Если СтрокаСписка.ПометкаУдаления Тогда
			СтрокаСписка.Иконка = КартинкаПометкиНаУдаление;
		Иначе
			СтрокаСписка.Иконка = ПолучитьНавигационнуюСсылку(Строка.Ключ, "Иконка");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)

	ТекущиеДанные = Элементы.Дашборды.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьФорму("Справочник.ДашбордыМЦП.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Ссылка), ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ИнициализироватьОбработчикАвтообновления();
	
	ОбновитьСоставМонитораКлиент(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьСнимокОтчета(Команда)

	Если ЗначениеЗаполнено(СтруктураНастроек.Дашборд) Тогда
		СохранитьСнимокОтчетаПользователя();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСнимкиОтчетов(Команда)
	
	ДлительнаяОперация = ОбновитьСнимкиОтчетовПользователя();
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбновленияСнимковОтчетов", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбновленияСнимковОтчетов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = НСтр("ru = 'Произошла ошибка обновления снимков отчетов:'") + Символы.ПС
			+ Результат.КраткоеПредставлениеОшибки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Снимки отчетов пользователя актуализированы.'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура СнимкиОтчетов(Команда)

	ОткрытьФорму("РегистрСведений.СнимкиОтчетов.ФормаСписка",
		Новый Структура("Пользователь, ВыводитьДашбордыМЦП", ПользователиКлиент.ТекущийПользователь(), Истина));

КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_АнализВзаимосвязанныхВариантовАнализа(Команда)
	ИмяКоманды = Команда.Имя;
	
	ИдентификаторВариантаАнализа = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(ИмяКоманды);
	ЧистоеИмяКоманды = ПолучитьЧистоеИмяКоманды(ИмяКоманды);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторВариантаАнализа");
	ПараметрыФормы.Вставить("ВидПоиска");
	ПараметрыФормы.Вставить("ОбновлятьДанныеПринудительно");
	ПараметрыФормы.Вставить("СоставМонитора");
	ПараметрыФормы.Вставить("ДемонстрационныйРежим");
	ПараметрыФормы.Вставить("ИдентификаторВариантаАнализа", ИдентификаторВариантаАнализа);
	ПараметрыФормы.Вставить("ВидПоиска", ЧистоеИмяКоманды);
	ПараметрыФормы.Вставить("ОбновлятьДанныеПринудительно", Истина);
	ПараметрыФормы.Вставить("СоставМонитора", СоставМонитора);
	ПараметрыФормы.Вставить("ДемонстрационныйРежим", ДемонстрационныйРежим);
		
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ФормаМониторЦелевыхПоказателей", ПараметрыФормы, ЭтотОбъект,
		ИдентификаторВариантаАнализа);
КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте 
Процедура Подключаемый_ИзменитьОбъектАнализаДиаграммы(Команда)
	Если Не Элементы[Команда.Имя].Пометка Тогда
		ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
		
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору(
			"ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
		
		ИдентификаторОбъектаАнализа = ПолучитьИдентификаторДинамическогоПараметра(Команда.Имя);
		
		ПараметрыИсточникаДанных = Новый Структура("ОбъектАнализа", ИдентификаторОбъектаАнализа);
		
		// Поместим динамические параметры во временное хранилище
		ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(ВариантАнализа,
			ИдентификаторПоказателя,
			ПараметрыИсточникаДанных);
		
		ИзменитьДинамическийПараметрДляДиаграммы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторПоказателя);
		
		// Изменим пометки кнопок
		Элементы[Команда.Имя].Пометка = Истина;
		КнопкиОбъектовАнализа = Элементы["ОбъектыАнализа__" + ИдентификаторПоказателя].ПодчиненныеЭлементы;
		
		Для Каждого КнопкаОбъектаАнализа Из КнопкиОбъектовАнализа Цикл 
			Если Не КнопкаОбъектаАнализа = Элементы[Команда.Имя] Тогда
				КнопкаОбъектаАнализа.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте 
Процедура Подключаемый_ИзменитьОбъектАнализаТаблицы(Команда)
	Если Не Элементы[Команда.Имя].Пометка Тогда
		ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
		
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору(
			"ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
		
		ИдентификаторОбъектаАнализа = ПолучитьИдентификаторДинамическогоПараметра(Команда.Имя);
		
		ПараметрыИсточникаДанных = Новый Структура("ОбъектАнализа", ИдентификаторОбъектаАнализа);
		
		// Поместим динамические параметры во временное хранилище
		ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(ВариантАнализа,
			ИдентификаторПоказателя, ПараметрыИсточникаДанных);
		
		ИзменитьДинамическийПараметрДляТаблицы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторПоказателя);
		
		// Изменим пометки кнопок
		Элементы[Команда.Имя].Пометка = Истина;
		КнопкиОбъектовАнализа = Элементы["ОбъектыАнализа__" + ИдентификаторПоказателя].ПодчиненныеЭлементы;
		
		Для Каждого КнопкаОбъектаАнализа Из КнопкиОбъектовАнализа Цикл 
			Если Не КнопкаОбъектаАнализа = Элементы[Команда.Имя] Тогда
				КнопкаОбъектаАнализа.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте 
Процедура Подключаемый_ИзменитьПериодичность(Команда)
	Если Не Элементы[Команда.Имя].Пометка Тогда
		ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
		
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору(
			"ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
		
		ИдентификаторПериодичности = ПолучитьИдентификаторДинамическогоПараметра(Команда.Имя);
		
		ПараметрыИсточникаДанных = Новый Структура;
		ПараметрыИсточникаДанных.Вставить("ПериодичностьРасчетаПоказателя",
			ПолучитьСсылкуПеречисленияПоИдентификатору("Периодичность", ИдентификаторПериодичности));
		
		// Поместим динамические параметры во временное хранилище
		ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(ВариантАнализа,
			ИдентификаторПоказателя, ПараметрыИсточникаДанных);
		
		ИзменитьДинамическийПараметрДляДиаграммы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторПоказателя);
		
		// Изменим пометки кнопок
		Элементы[Команда.Имя].Пометка = Истина;
		КнопкиОбъектовАнализа = Элементы["Периодичность__" + ИдентификаторПоказателя].ПодчиненныеЭлементы;
		
		Для Каждого КнопкаОбъектаАнализа Из КнопкиОбъектовАнализа Цикл 
			Если Не КнопкаОбъектаАнализа = Элементы[Команда.Имя] Тогда
				КнопкаОбъектаАнализа.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_ОткрытьАнализПоказателя(Команда)
	ИдентификаторПоказателя = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
	
	ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору(
		"ВариантыАнализаЦелевыхПоказателей", ИдентификаторПоказателя);
	
	Отбор = Новый Структура("ОтборВариантовАнализа, ДемонстрационныйРежим", ВариантАнализа, ДемонстрационныйРежим);
	ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", 
		Отбор,
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
		Истина);
		
	ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		Новый УникальныйИдентификатор());
КонецПроцедуры

// Подключаемый обработчик события элемента формы.
// 
// Параметры:
// 	Команда - КомандаФормы - 
&НаКлиенте
Процедура Подключаемый_ОткрытьОтчет(Команда)
	ИдентификаторВариантаАнализа = ПолучитьИдентификаторЭлементаПоИмениБезПозиции(Команда.Имя);
	СвойстваВариантаАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(
		ИдентификаторВариантаАнализа);
	
	ИдентификаторВариантаОтчета = ПолучитьИдентификаторВариантаОтчета(Команда.Имя);
	ВариантОтчета = ПолучитьВариантОтчетаПоИдентификатору(ИдентификаторВариантаОтчета);
	СвойстваВариантаОтчета = ПолучитьСвойстваВариантаОтчета(ВариантОтчета);
	
	НастройкиВариантаОтчета = МониторингЦелевыхПоказателейВызовСервера.СформироватьНастройкиВариантаОтчета(
		СвойстваВариантаАнализа, СвойстваВариантаОтчета);
	
	Если НастройкиВариантаОтчета = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru='Выбранный отчет не найден в системе'"));
	Иначе
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("КлючПользовательскихНастроек");
		ПараметрыОтчета.Вставить("ПользовательскиеНастройки");
		ПараметрыОтчета.Вставить("ФиксированныеНастройки");
		ПараметрыОтчета.Вставить("КлючВарианта");
		ПараметрыОтчета.Вставить("КлючНазначенияИспользования");
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии");
		ПараметрыОтчета.Вставить("КлючПользовательскихНастроек", Команда.Имя);
		ПараметрыОтчета.Вставить("ПользовательскиеНастройки", НастройкиВариантаОтчета.ПользовательскиеНастройки);
		ПараметрыОтчета.Вставить("ФиксированныеНастройки", НастройкиВариантаОтчета.ФиксированныеНастройки);
		ПараметрыОтчета.Вставить("КлючВарианта", СвойстваВариантаОтчета.КлючВарианта);
		ПараметрыОтчета.Вставить("КлючНазначенияИспользования", Команда.Имя);
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		
		ОткрытьФорму(СвойстваВариантаОтчета.КлючОбъекта + ".Форма", ПараметрыОтчета, СвойстваВариантаАнализа.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Если СоставМонитораНеопределен Тогда
		ТекстПредупреждения = НСтр("ru='Сформировать сводный отчет невозможно, т.к. монитор показателей не настроен.'");
		ТекстЗаголовка = НСтр("ru='Ошибка формирования сводного отчета'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения,, ТекстЗаголовка);
	ИначеЕсли СоставМонитораПустойПоОтбору Тогда
		ТекстПредупреждения = НСтр("ru='Сформировать сводный отчет невозможно, т.к. в текущий отбор не входит ни один показатель.'");
		ТекстЗаголовка = НСтр("ru='Ошибка формирования сводного отчета'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения,, ТекстЗаголовка);
	Иначе 
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, 
			"ВариантГруппировкиПоказателей", 
			СтруктураНастроек.ВариантГруппировкиПоказателей);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, 
			"КоличествоКолонокМонитораПоказателей", 
			СтруктураНастроек.КоличествоКолонокМонитораПоказателей);
		Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Дашборд",
			СтруктураНастроек.Дашборд);
		
		Отбор = Новый Структура("ДемонстрационныйРежим", ДемонстрационныйРежим);
		ПараметрыФормы = Новый Структура("Отбор, ПользовательскиеНастройки, СформироватьПриОткрытии", 
			Отбор,
			Отчет.КомпоновщикНастроек.ПользовательскиеНастройки,
			Истина);
			
		ОткрытьФорму("Отчет.МониторЦелевыхПоказателей.Форма.ПечатнаяФормаВариантаАнализа", 
			ПараметрыФормы, 
			ЭтотОбъект, 
			Новый УникальныйИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементВверхВниз(Команда)
	ТекущиеДанные = Элементы.Дашборды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПереместитьЭлемент(ТекущиеДанные.Ссылка, ?(Команда.Имя = "ПереместитьЭлементВверх", Истина, Ложь));
	Элементы.Дашборды.Обновить();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтилиОтображенияПоказателей

&НаСервере
Функция СтильОтображенияПоказателяБазовый()
	// Стиль диаграмм, таблиц, текстовых представлений
	Стиль = Новый Структура;

	Стиль.Вставить("Ширина", РассчитатьШиринуЭлемента(СтруктураНастроек.КоличествоКолонокМонитораПоказателей));
	Стиль.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);
	Стиль.Вставить("РастягиватьПоГоризонтали", Ложь);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыЭлементовПоказателя()
	Стиль = Новый Структура;

	Стиль.Вставить("ВидГруппы", ВидГруппыФормы.ОбычнаяГруппа);
	Стиль.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	Стиль.Вставить("Отображение", ОтображениеОбычнойГруппы.ОбычноеВыделение);
	Стиль.Вставить("ОтображатьЗаголовок", Ложь);
	Стиль.Вставить("РастягиватьПоВертикали", Ложь);
	Стиль.Вставить("РастягиватьПоГоризонтали", Ложь);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильОтображенияТекстовых()
	// Уточненный стиль текстовых представлений
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильОтображенияПоказателяБазовый());

	Стиль.Вставить("ВидПоля", ВидПоляФормы.ПолеНадписи);

	Стиль.Вставить("Высота", 4);
	Стиль.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Центр);
	Стиль.Вставить("ВертикальноеПоложение", ВертикальноеПоложениеЭлемента.Центр);
	Стиль.Вставить("ЦветФона", WebЦвета.Белый);
	Стиль.Вставить("Рамка", Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1));

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильСправочнойИнформации()
	// Уточненный стиль текстовых представлений
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильОтображенияПоказателяБазовый());

	Стиль.Вставить("ВидПоля", ВидПоляФормы.ПолеНадписи);
	Стиль.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Лево);
	Стиль.Вставить("Высота", 1);
	Стиль.Вставить("ВысотаЗаголовка", 1);
	Стиль.Вставить("РастягиватьПоВертикали", Ложь);
	Стиль.Вставить("ЦветТекста", ЦветаСтиля.ПоясняющийТекст);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильОтображенияДиаграмм()
	// Уточненный стиль диаграмм
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильОтображенияПоказателяБазовый());

	Стиль.Вставить("ВидПоля", ВидПоляФормы.ПолеДиаграммы);
	Стиль.Вставить("Высота", 8 * СтруктураНастроек.ПроизвольныйМасштаб / 100);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильОтображенияТаблиц()
	// Уточненный стиль таблиц
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильОтображенияПоказателяБазовый());

	Стиль.Вставить("Высота", 6 * СтруктураНастроек.ПроизвольныйМасштаб / 100);
	Стиль.Вставить("ПоложениеКоманднойПанели", ПоложениеКоманднойПанелиЭлементаФормы.Нет);
	Стиль.Вставить("ТолькоПросмотр", Истина);
	Стиль.Вставить("Шапка", Ложь);
	Стиль.Вставить("Подвал", Ложь);
	Стиль.Вставить("ГоризонтальныеЛинии", Ложь);
	Стиль.Вставить("ВертикальныеЛинии", Ложь);
	Стиль.Вставить("МножественныйВыбор", Ложь);
	Стиль.Вставить("ЧередованиеЦветовСтрок", Истина);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильКомандныхПанелейПоказателей()
	Стиль = Новый Структура;

	Стиль.Вставить("ВидГруппы", ВидГруппыФормы.КоманднаяПанель);

	Стиль.Вставить("РастягиватьПоГоризонтали", Истина);
	Стиль.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Право);
	Стиль.Вставить("ГоризонтальноеПоложениеВГруппе", ГоризонтальноеПоложениеЭлемента.Право);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыЭлементовЗаголовка()
	Стиль = Новый Структура;

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильЗаголовков()
	Стиль = Новый Структура;

	Стиль.Вставить("ВидПоля", ВидПоляФормы.ПолеНадписи);

	Стиль.Вставить("Высота", 1);
	Стиль.Вставить("РастягиватьПоВертикали", Ложь);
	Стиль.Вставить("ВертикальноеПоложение", ВертикальноеПоложениеЭлемента.Верх);
	Стиль.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Нет);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателей()
	Стиль = Новый Структура;

	Стиль.Вставить("ОтображатьЗаголовок", Истина);
	Стиль.Вставить("Отображение", ОтображениеОбычнойГруппы.ОбычноеВыделение);
	Стиль.Вставить("ШрифтЗаголовка", ШрифтГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка", ЦветГруппыПоказателей());
	Стиль.Вставить("СквозноеВыравнивание", СквозноеВыравнивание.Использовать);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыКолонкиПоказателей()
	Стиль = Новый Структура;

	Стиль.Вставить("Объединенная", Ложь);

	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателейЦельДостигнута()
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",	WebЦвета.ЦветМорскойВолны);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателейПриемлемоеСостояние()
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",	WebЦвета.ТемноОранжевый);
	
	Возврат Стиль;
КонецФункции

&НаСервере
Функция СтильГруппыПоказателейНеприемлемоеСостояние()
	Стиль = ОбщегоНазначения.СкопироватьРекурсивно(СтильГруппыПоказателей());
	Стиль.Вставить("ЦветТекстаЗаголовка",	WebЦвета.Кирпичный);
	
	Возврат Стиль;
КонецФункции

&НаСервере 
Функция СтильГруппыПоСостоянию(Состояние)
	Если Состояние = "НеприемлемоеСостояние" 
		Или Состояние = "РассчитаноСОшибками" Тогда
		Возврат СтильГруппыПоказателейНеприемлемоеСостояние();
	ИначеЕсли Состояние = "ПриемлемоеСостояние" Тогда
		Возврат СтильГруппыПоказателейПриемлемоеСостояние();
	ИначеЕсли Состояние = "ЦельДостигнута" Тогда
		Возврат СтильГруппыПоказателейЦельДостигнута();
	Иначе
		Возврат СтильГруппыПоказателей();
	КонецЕсли;
КонецФункции

&НаСервере
Функция БазовыйМасштабТекста()
	Возврат Макс(100, 100 + 30*(СтруктураНастроек.ПроизвольныйМасштаб / 100-1));
КонецФункции

&НаСервере
Функция ШрифтДеталейПоказателя()
	Возврат Новый Шрифт(,,       ,,,, 40 + БазовыйМасштабТекста());
КонецФункции

&НаСервере
Функция ШрифтЗначенияПоказателя()
	Возврат Новый Шрифт(,, Истина,,,, 120 + БазовыйМасштабТекста());
КонецФункции

&НаСервере
Функция ШрифтВажно()
	Возврат Новый Шрифт(,, Истина);
КонецФункции

&НаСервере
Функция ШрифтЗаголовкаПоказателяВажно()
	Возврат Новый Шрифт(,, Истина,,,, БазовыйМасштабТекста());
КонецФункции

&НаСервере
Функция ЦветГруппыПоказателей()
	// Настройки групп-оберток для показателей
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ЦветГруппыПоказателей = ЦветаСтиля.ГруппаВариантовОтчетовЦвет82;
	Иначе // Такси.
		ЦветГруппыПоказателей = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	КонецЕсли;
	
	Возврат ЦветГруппыПоказателей;
КонецФункции

&НаСервере
Функция ШрифтГруппыПоказателей()
	// Настройки групп-оберток для показателей
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		ШрифтГруппыПоказателей = Новый Шрифт("MS Shell Dlg", 10, Истина, Ложь, Ложь, Ложь, 100);
	Иначе // Такси.
		ШрифтГруппыПоказателей = Новый Шрифт("Arial", 12, Истина, Ложь, Ложь, Ложь, 100);
	КонецЕсли;
	
	Возврат ШрифтГруппыПоказателей;
КонецФункции

#КонецОбласти 

#Область СозданиеЭлементовФормы

&НаСервере
Функция ВертикальнаяГруппа(Имя, Заголовок, РодительскаяГруппа = Неопределено)
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.РазрешитьИзменениеСостава = Ложь;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаСтрокаЭлементов;
КонецФункции

&НаСервере
Функция ГоризонтальнаяГруппа(Имя, Заголовок, РодительскаяГруппа = Неопределено)
	ГруппаСтрокаЭлементов = Элементы.Добавить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа);
	ГруппаСтрокаЭлементов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаСтрокаЭлементов.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаСтрокаЭлементов.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаСтрокаЭлементов.Заголовок = Заголовок;
	ГруппаСтрокаЭлементов.ОтображатьЗаголовок = Ложь;
	
	Возврат ГруппаСтрокаЭлементов;
КонецФункции

// Добавляет вертикальные группы элементов формы, в которых 
// затем будут будут размещены элементы формы показателей.
// 
// Параметры:
//	РодительскаяГруппа - ГруппаФормы
//	ВариантОтображенияПоказателейСтроки - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа, Неопределено - указывает на краткое отображение или в виде диаграммы/таблицы
//	КлючУникальностиГруппы - Строка - уникальный идентификатор группы, основанный на имени зоны внимания.
//
&НаСервере 
Процедура ДобавитьГруппыКолонкиЭлементов(РодительскаяГруппа, КлючУникальностиГруппы, ВариантОтображенияПоказателейСтроки = Неопределено)
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	Если ВариантОтображенияПоказателейСтроки = ВариантыОтображенияВариантовАнализа.Кратко Тогда
		Для НомерКолонки = 1 По СтруктураНастроек.КоличествоКолонокМонитораПоказателей Цикл
			ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Колонка №%1'"),
				НомерКолонки);
			ГруппаКолонкаЭлементов = ВертикальнаяГруппа(
				"ГруппаКолонкаЭлементов" + "Кратко" + КлючУникальностиГруппы + "__" + НомерКолонки,
				ЗаголовокЭлемента,
				РодительскаяГруппа);
			ЗаполнитьЗначенияСвойств(ГруппаКолонкаЭлементов, СтильГруппыКолонкиПоказателей());
		КонецЦикла;
	Иначе
		Если Элементы.Найти("ГруппаКолонкаЭлементов" + "Подробно" + КлючУникальностиГруппы) = Неопределено Тогда
			Для НомерКолонки = 1 По СтруктураНастроек.КоличествоКолонокМонитораПоказателей Цикл
				ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Колонка №%1'"),
					НомерКолонки);
				ГруппаКолонкаЭлементов = ВертикальнаяГруппа(
					"ГруппаКолонкаЭлементов" + "Подробно" + КлючУникальностиГруппы + "__" + НомерКолонки,
					ЗаголовокЭлемента,
					РодительскаяГруппа);
				ЗаполнитьЗначенияСвойств(ГруппаКолонкаЭлементов, СтильГруппыКолонкиПоказателей());
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Добавляет команды, доступные для указанного варианта анализа.
// Возможные команды: "Влияющие показатели", "Зависимые показатели", "Периодичность", "Объект анализа", "Отчеты",
// "Анализ показателя".
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого добавляются команды.
//	ГруппаЭлементов - ГруппаФормы - командная панель, в которую нужно добавить кнопки.
//	ИдентификаторЭлементаФормы - Строка - строка, содержащая уникальный идентификатор элемента формы.
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - указывает на краткое отображение или в виде диаграммы/таблицы.
//
&НаСервере
Процедура ДобавитьКомандыВариантовАнализа(ВариантАнализа, ГруппаЭлементов, ИдентификаторЭлементаФормы, ВариантОтображения)
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	ПараметрыДоступностиАнализаВзаимосвязанных =
		МониторингЦелевыхПоказателей.ПолучитьПараметрыДоступностиАнализаВзаимосвязанных(ВариантАнализа);
	
	ДанныеВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа, "ТипАнализа, РежимПокомпонентногоСравнения");
	ДобавлятьПодменюВзаимосвязей = Истина;
	ДобавлятьПодменюОбъектовАнализа = Не ДемонстрационныйРежим
		И ((ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнение
		ИЛИ ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика)
		И ДанныеВариантаАнализа.РежимПокомпонентногоСравнения = 0);
	ДобавлятьПодменюПериодичности = Не ДемонстрационныйРежим
		И (ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения
		ИЛИ ДанныеВариантаАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ПокомпонентноеСравнениеДинамика);
	
	КоманднаяПанельКомандПоказателя = Элементы.Добавить(
		"КоманднаяПанельКомандПоказателя__" + ИдентификаторЭлементаФормы,
		Тип("ГруппаФормы"),
		Элементы["Заголовок__" + ИдентификаторЭлементаФормы]); // ГруппаФормы
	КоманднаяПанельКомандПоказателя.Заголовок = НСтр("ru='Команды показателя'");
	Стиль = СтильКомандныхПанелейПоказателей();
	КоманднаяПанельКомандПоказателя.Вид = Стиль.ВидГруппы;
	ЗаполнитьЗначенияСвойств(КоманднаяПанельКомандПоказателя, Стиль);
	
	// Добавим подменю "Все действия"
	ПодменюВсеДействия = Элементы.Добавить("ВсеДействия__" + ИдентификаторЭлементаФормы,
		Тип("ГруппаФормы"),
		КоманднаяПанельКомандПоказателя);
	ПодменюВсеДействия.Вид = ВидГруппыФормы.Подменю;
	ПодменюВсеДействия.Отображение = ОтображениеКнопки.Текст;
	ПодменюВсеДействия.Заголовок = " ";
	
	// Добавим реквизиты формы
	
	Если ДобавлятьПодменюВзаимосвязей
		И Не (ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые
			ИЛИ ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие) Тогда
		ПустаяКоманда = Команды.Добавить("ПустаяКоманда__" + ИдентификаторЭлементаФормы);
		ПустаяКоманда.Заголовок = НСтр("ru='Взаимосвязей нет'");
		ПустаяКоманда.Картинка = БиблиотекаКартинок.ПиктограммаВсеПоказатели;
	КонецЕсли;
	
	Если ДобавлятьПодменюВзаимосвязей
		И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые Тогда
		КомандаПоискаСвязи = Команды.Добавить("ЗависимыеПоказатели__" + ИдентификаторЭлементаФормы);
		КомандаПоискаСвязи.Заголовок = НСтр("ru='Зависимые показатели'");
		КомандаПоискаСвязи.Действие = "Подключаемый_АнализВзаимосвязанныхВариантовАнализа";
		КомандаПоискаСвязи.Картинка = БиблиотекаКартинок.ПиктограммаЗависимыеПоказатели;
	КонецЕсли;
	
	Если ДобавлятьПодменюВзаимосвязей
		И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие Тогда
		КомандаПоискаСвязи = Команды.Добавить("ВлияющиеПоказатели__" + ИдентификаторЭлементаФормы);
		КомандаПоискаСвязи.Заголовок = НСтр("ru='Влияющие показатели'");
		КомандаПоискаСвязи.Действие = "Подключаемый_АнализВзаимосвязанныхВариантовАнализа";
		КомандаПоискаСвязи.Картинка = БиблиотекаКартинок.ПиктограммаВлияющиеПоказатели;
	КонецЕсли;
	
	КомандаАнализПоказателя = Команды.Добавить("ОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы);
	КомандаАнализПоказателя.Заголовок = НСтр("ru='Анализ показателя'");
	КомандаАнализПоказателя.Действие = "Подключаемый_ОткрытьАнализПоказателя";
	КомандаАнализПоказателя.Картинка = БиблиотекаКартинок.Отчеты;
	
	// Получим количество варианты отчетов для показателя
	ВариантыОтчетовПоказателя = ПолучитьВариантыОтчетовПоказателя(ВариантАнализа);
	КоличествоВариантовОтчетов = ВариантыОтчетовПоказателя.Количество();
	
	Если ВариантОтображения = ВариантыОтображения.Диаграмма 
		ИЛИ ВариантОтображения = ВариантыОтображения.Таблица Тогда
		
		ДанныеВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа,
			"Владелец, ОбъектАнализа, ПериодичностьРасчетаПоказателя");
		
		// Добавим меню по объектам анализа
		ДоступныеОбъектыАнализа = Справочники.СтруктураЦелей.ДоступныеОбъектыАнализа(ДанныеВариантаАнализа.Владелец);
		ОбъектАнализаПоУмолчанию = ДанныеВариантаАнализа.ОбъектАнализа.Получить();
		
		Если ДобавлятьПодменюОбъектовАнализа И ДоступныеОбъектыАнализа.Количество() > 1 Тогда
			Для Каждого ОбъектАнализа Из ДоступныеОбъектыАнализа Цикл
				ИмяКоманды = "ИзменитьОбъектАнализа__" + ИдентификаторЭлементаФормы
					+ "__" + Строка(ОбъектАнализа.Значение);
				КомандаИзмененияОбъектаАнализа = Команды.Добавить(ИмяКоманды);
				КомандаИзмененияОбъектаАнализа.Заголовок = ОбъектАнализа.Представление;
				Если ВариантОтображения = ВариантыОтображения.Диаграмма Тогда
					КомандаИзмененияОбъектаАнализа.Действие = "Подключаемый_ИзменитьОбъектАнализаДиаграммы";
				Иначе
					КомандаИзмененияОбъектаАнализа.Действие = "Подключаемый_ИзменитьОбъектАнализаТаблицы";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Добавим меню периодичности
		// Получим адрес динамических параметров.
		ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
		НайденныеСоставМонитора = СоставМонитора.НайтиСтроки(ОтборПоВариантуАнализа);
		Если НайденныеСоставМонитора.Количество() > 0 Тогда
			АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
			
			Если Не ПустаяСтрока(АдресДинамическихПараметров) Тогда
				ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
				
				Если ДинамическиеПараметры.Свойство("ПериодичностьРасчетаПоказателя") Тогда
					ПериодичностьПоУмолчанию = ДинамическиеПараметры.ПериодичностьРасчетаПоказателя;
				Иначе
					ПериодичностьПоУмолчанию = ДанныеВариантаАнализа.ПериодичностьРасчетаПоказателя;
				КонецЕсли;
			Иначе
				ПериодичностьПоУмолчанию = ДанныеВариантаАнализа.ПериодичностьРасчетаПоказателя;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьПодменюПериодичности Тогда
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "День";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='День'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Неделя";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Неделя'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Декада";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Декада'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Месяц";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Месяц'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Квартал";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Квартал'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Полугодие";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Полугодие'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
			
			ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Год";
			КомандаИзмененияПериодичности = Команды.Добавить(ИмяКоманды);
			КомандаИзмененияПериодичности.Заголовок = НСтр("ru='Год'");
			КомандаИзмененияПериодичности.Действие = "Подключаемый_ИзменитьПериодичность";
		КонецЕсли;
		
		// Добавим элементы формы
		// Добавим подменю связей
		Если ДобавлятьПодменюВзаимосвязей Тогда
			Если ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые
			 ИЛИ ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие Тогда	
				ПодменюЗависимостей = Элементы.Добавить("ЗависимостиПоказателей__" + ИдентификаторЭлементаФормы,
					Тип("ГруппаФормы"),
					ПодменюВсеДействия);
				ПодменюЗависимостей.Вид = ВидГруппыФормы.Подменю;
				ПодменюЗависимостей.Заголовок = НСтр("ru='Взаимосвязи'");
				ПодменюЗависимостей.Картинка = БиблиотекаКартинок.ПиктограммаВсеПоказатели;
			Иначе
				КнопкаПоискаСвязи = Элементы.Добавить("ЗависимостиПоказателей__" + ИдентификаторЭлементаФормы,
					Тип("КнопкаФормы"),
					ПодменюВсеДействия);
				КнопкаПоискаСвязи.ИмяКоманды = "ПустаяКоманда__" + ИдентификаторЭлементаФормы;
				КнопкаПоискаСвязи.Доступность = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ДобавлятьПодменюВзаимосвязей И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеЗависимые Тогда
			КнопкаПоискаСвязи = Элементы.Добавить("ФормаЗависимыеПоказатели__" + ИдентификаторЭлементаФормы,
				Тип("КнопкаФормы"),
				ПодменюЗависимостей);
			КнопкаПоискаСвязи.ИмяКоманды = "ЗависимыеПоказатели__" + ИдентификаторЭлементаФормы;
		КонецЕсли;
		
		Если ДобавлятьПодменюВзаимосвязей И ПараметрыДоступностиАнализаВзаимосвязанных.ЕстьДоступныеВлияющие Тогда
			КнопкаПоискаСвязи =Элементы.Добавить("ФормаВлияющиеПоказатели__" + ИдентификаторЭлементаФормы,
				Тип("КнопкаФормы"),
				ПодменюЗависимостей);
			КнопкаПоискаСвязи.ИмяКоманды = "ВлияющиеПоказатели__" + ИдентификаторЭлементаФормы;
		КонецЕсли;
		
		Если ДобавлятьПодменюОбъектовАнализа И ДоступныеОбъектыАнализа.Количество() > 1 Тогда
			ПодменюОбъектыАнализа = Элементы.Добавить("ОбъектыАнализа__" + ИдентификаторЭлементаФормы,
				Тип("ГруппаФормы"),
				ПодменюВсеДействия);
			ПодменюОбъектыАнализа.Вид = ВидГруппыФормы.Подменю;
			ПодменюОбъектыАнализа.Заголовок = НСтр("ru='Объекты анализа'");
			
			Для Каждого ОбъектАнализа Из ДоступныеОбъектыАнализа Цикл
				КнопкаОбъектаАнализа = Элементы.Добавить(
					"ИзменитьОбъектАнализа__" + ИдентификаторЭлементаФормы + "__" + Строка(ОбъектАнализа.Значение),
					Тип("КнопкаФормы"),
					ПодменюОбъектыАнализа);
				КнопкаОбъектаАнализа.ИмяКоманды = "ИзменитьОбъектАнализа__" + ИдентификаторЭлементаФормы
					+ "__" + Строка(ОбъектАнализа.Значение);
				Если ОбъектАнализа.Значение = ОбъектАнализаПоУмолчанию Тогда
					КнопкаОбъектаАнализа.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДобавлятьПодменюПериодичности Тогда
			ИмяПериодичностиПоУмолчанию = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(
				ПериодичностьПоУмолчанию);
			
			ПодменюПериодичности = Элементы.Добавить("Периодичность__" + ИдентификаторЭлементаФормы,
				Тип("ГруппаФормы"),
				ПодменюВсеДействия);
			ПодменюПериодичности.Вид = ВидГруппыФормы.Подменю;
			ПодменюПериодичности.Заголовок = НСтр("ru='Периодичность'");
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "День",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "День";
			Если ИмяПериодичностиПоУмолчанию = "День" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Неделя",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Неделя";
			Если ИмяПериодичностиПоУмолчанию = "Неделя" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Декада",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Декада";
			Если ИмяПериодичностиПоУмолчанию = "Декада" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Месяц",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Месяц";
			Если ИмяПериодичностиПоУмолчанию = "Месяц" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Квартал",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Квартал";
			Если ИмяПериодичностиПоУмолчанию = "Квартал" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Полугодие",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы
				+ "__" + "Полугодие";
			Если ИмяПериодичностиПоУмолчанию = "Полугодие" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
			
			КнопкаПериодичности = Элементы.Добавить(
				"ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Год",
				Тип("КнопкаФормы"),
				ПодменюПериодичности);
			КнопкаПериодичности.ИмяКоманды = "ИзменитьПериодичность__" + ИдентификаторЭлементаФормы + "__" + "Год";
			Если ИмяПериодичностиПоУмолчанию = "Год" Тогда
				КнопкаПериодичности.Пометка = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КоличествоВариантовОтчетов Тогда
		Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
			ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
			НаименованиеВарианта = ВариантОтчетаПоказателя.Представление;
			
			ИмяКоманды = "ОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта;
			КомандаОткрытьОтчет = Команды.Добавить(ИмяКоманды);
			КомандаОткрытьОтчет.Заголовок = НаименованиеВарианта;
			КомандаОткрытьОтчет.Действие = "Подключаемый_ОткрытьОтчет";
			КомандаОткрытьОтчет.Картинка = БиблиотекаКартинок.Отчет;
		КонецЦикла;
		
		ПодменюОтчеты = Элементы.Добавить("Отчеты__" + ИдентификаторЭлементаФормы,
			Тип("ГруппаФормы"),
			ПодменюВсеДействия);
		ПодменюОтчеты.Вид = ВидГруппыФормы.Подменю;
		ПодменюОтчеты.Заголовок = НСтр("ru='Отчеты'");
		ПодменюОтчеты.Картинка = БиблиотекаКартинок.Отчет;
		
		Для Каждого ВариантОтчетаПоказателя Из ВариантыОтчетовПоказателя Цикл 
			ИдентификаторВарианта = ВариантОтчетаПоказателя.Значение;
			
			КнопкаОтчета = Элементы.Добавить(
				"ФормаОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта,
				Тип("КнопкаФормы"),
				ПодменюОтчеты);
			КнопкаОтчета.ИмяКоманды = "ОткрытьОтчет__" + ИдентификаторЭлементаФормы + "__" + ИдентификаторВарианта;
		КонецЦикла;
	КонецЕсли;
	
	// Добавим команды анализа, расшифровки и настройки
	КнопкаАнализПоказателя = Элементы.Добавить("ФормаОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы,
		Тип("КнопкаФормы"),
		ПодменюВсеДействия);
	КнопкаАнализПоказателя.ИмяКоманды = "ОткрытьАнализПоказателя__" + ИдентификаторЭлементаФормы;
КонецПроцедуры

// Кэширует свойства анализируемого состава монитора
// Анализируется количество источников данных: 
//	- по которым требуется вывод подробной информации
//	- по которым требуется вывод итога таблицы
//	- по которым требуется анализ состояния по нарастающему итогу.
// 
// Параметры:
//	АнализируемыйСоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках
//	АдресаДинамическихПараметров - ТаблицаЗначений, Неопределено - содержит вариант анализа и адрес дин. настроек во временном хранилище.
//
&НаСервере 
Процедура ЗаполнитьСводнуюИнформациюПоИсточникамДанных(АнализируемыйСоставМонитора, АдресаДинамическихПараметров = Неопределено)
	НаборИсточниковДанных = АнализируемыйСоставМонитора.НаборИсточниковДанных;
	
	Если Не АнализируемыйСоставМонитора.Пустой Тогда 
		ВариантыАнализаСПодробностями.Очистить();
		ОтборПоПодробным = Новый Структура("ВыводитьПодробности", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоПодробным);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ВариантыАнализаСПодробностями.Добавить(НайденныйВариантАнализа.ВариантАнализа);
		КонецЦикла;
		
		ТабличныеВариантыАнализаСИтогами.Очистить();
		ОтборПоТабличнымСИтогами = Новый Структура("ВыводитьИтогТаблицы", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоТабличнымСИтогами);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ТабличныеВариантыАнализаСИтогами.Добавить(НайденныйВариантАнализа.ВариантАнализа);
		КонецЦикла;
		
		ВариантыАнализаСНарастающимИтогом.Очистить();
		ОтборПоНарастающемуИтогу = Новый Структура("СостояниеПоНарастающемуИтогу", Истина);
		НайденныеВариантыАнализа = НаборИсточниковДанных.НайтиСтроки(ОтборПоНарастающемуИтогу);
		Для Каждого НайденныйВариантАнализа Из НайденныеВариантыАнализа Цикл 
			ВариантыАнализаСНарастающимИтогом.Добавить(НайденныйВариантАнализа.ВариантАнализа);
		КонецЦикла;
		
		ИменаКолонок = "ВариантАнализа, ОшибкаРасчета, РасчетыНеактуальны, Пустой, СостояниеПоНарастающемуИтогу";
		ИменаКолонок = ИменаКолонок + ", ВыводитьИтогТаблицы, ВыводитьПодробности, Группа, ЗонаВнимания, ПорядокЗоныВнимания";
		СоставМонитораОбъект = НаборИсточниковДанных.Скопировать(, ИменаКолонок); // ТаблицаЗначений - 
		СоставМонитораОбъект.Колонки.Добавить("АдресДинамическихПараметров");
		
		// Заполним переданные адреса динамических параметров
		Если Не АдресаДинамическихПараметров = Неопределено Тогда
			Для Каждого ЭлементСоставаМонитора Из СоставМонитораОбъект Цикл 
				ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ЭлементСоставаМонитора.ВариантАнализа);
				НайденныеСоставМонитора = АдресаДинамическихПараметров.НайтиСтроки(ОтборПоВариантуАнализа);
				Если НайденныеСоставМонитора.Количество() > 0 Тогда
					ЭлементСоставаМонитора.АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеВДанныеФормы(СоставМонитораОбъект, СоставМонитора);
	Иначе
		ВариантыАнализаСПодробностями.Очистить();
		ТабличныеВариантыАнализаСИтогами.Очистить();
		ВариантыАнализаСНарастающимИтогом.Очистить();
		СоставМонитора.Очистить();
	КонецЕсли;
КонецПроцедуры

// Пересчитывает источник данных для переданного варианта анализа при изменении объекта анализа или периодичности.
// Обновляет диаграмму варианта анализа.
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого изменили дин. параметр
//	ПараметрыИсточникаДанных - Структура - содержит состояние динамических параметров варианта анализа
//	ИдентификаторЭлементаФормы - Строка - уникальный идентификатор(имя) обновляемой диаграммы.
//
&НаСервере 
Процедура ИзменитьДинамическийПараметрДляДиаграммы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторЭлементаФормы)
	ПринудительноеОбновление = Ложь;
	
	Если ПараметрыИсточникаДанных.Свойство("ОбъектАнализа") Тогда
		Если Строка(ВариантАнализа.ОбъектАнализа.Получить()) = ПараметрыИсточникаДанных.ОбъектАнализа Тогда
			ПринудительноеОбновление = ПринудительноеОбновление Или Ложь;
		Иначе
			ПринудительноеОбновление = ПринудительноеОбновление Или Истина;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыИсточникаДанных.Свойство("ПериодичностьРасчетаПоказателя") Тогда	
		Если ВариантАнализа.ПериодичностьРасчетаПоказателя = ПараметрыИсточникаДанных.ПериодичностьРасчетаПоказателя Тогда
			ПринудительноеОбновление = ПринудительноеОбновление Или Ложь;
		Иначе
			ПринудительноеОбновление = ПринудительноеОбновление Или Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДанных = МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализа(ВариантАнализа, 
		Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма, 
		ПринудительноеОбновление, 
		ПараметрыИсточникаДанных);
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = НЕ ИсточникДанных.РасчетыАктуальны;
	
	Если НЕ ПустойИсточникДанных И НЕ РасчетыНеактуальны И НЕ ОшибкаРасчета Тогда
		ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы].ИсточникДанных = Новый ТаблицаЗначений;
		ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы].ИсточникДанных = Неопределено;
		
		Диаграмма = МониторингЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы],
			ВариантАнализа,
			ИсточникДанных);
		ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = Диаграмма;
	Иначе
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя'");
		КонецЕсли;

		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
	
	// Установим новое наименование диаграммы
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных, Истина);
КонецПроцедуры

// Пересчитывает источник данных для переданного варианта анализа при изменении объекта анализа или периодичности.
// Обновляет таблицу варианта анализа.
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого изменили дин. параметр
//	ПараметрыИсточникаДанных - Структура - содержит состояние динамических параметров варианта анализа
//	ИдентификаторЭлементаФормы - Строка - уникальный идентификатор(имя) обновляемой таблицы.
//
&НаСервере 
Процедура ИзменитьДинамическийПараметрДляТаблицы(ВариантАнализа, ПараметрыИсточникаДанных, ИдентификаторЭлементаФормы)
	Если ПараметрыИсточникаДанных.Свойство("ОбъектАнализа") Тогда
		Если Строка(ВариантАнализа.ОбъектАнализа.Получить()) = ПараметрыИсточникаДанных.ОбъектАнализа Тогда
			ПринудительноеОбновление = Ложь;
		Иначе
			ПринудительноеОбновление = Истина;
		КонецЕсли;
	ИначеЕсли ПараметрыИсточникаДанных.Свойство("ПериодичностьРасчетаПоказателя") Тогда	
		Если ВариантАнализа.ПериодичностьРасчетаПоказателя = ПараметрыИсточникаДанных.ПериодичностьРасчетаПоказателя Тогда
			ПринудительноеОбновление = Ложь;
		Иначе
			ПринудительноеОбновление = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДанныхВариантаАнализа = МониторингЦелевыхПоказателей.ПолучитьИсточникДанныхВариантаАнализа(
		ВариантАнализа,
		Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма,
		ПринудительноеОбновление,ПараметрыИсточникаДанных);
	
	Если Не ИсточникДанныхВариантаАнализа.Пустой Тогда
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанныхВариантаАнализа.ДинамическиеСвойстваВариантаАнализа;
		ВыводитьИтогВТаблице = (Не ТабличныеВариантыАнализаСИтогами.НайтиПоЗначению(ВариантАнализа) = Неопределено);
		
		Если ВыводитьИтогВТаблице Тогда 
			КратностьЗначений			= ВариантАнализа.КратностьЗначений;
			ТочностьРасчетаДробнойЧасти = ВариантАнализа.ТочностьРасчетаДробнойЧасти;
			Размерность					= СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
			
			ЗначениеЧисла = ИсточникДанныхВариантаАнализа.Данные.Итог(
				ИсточникДанныхВариантаАнализа.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
			ПредставлениеЧисла = МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(
				ЗначениеЧисла,
				ТочностьРасчетаДробнойЧасти,
				КратностьЗначений);
			ПредставлениеЧисла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru= '%1 %2'"),
				ПредставлениеЧисла,
				Размерность);
			ЭтотОбъект["ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы] = ПредставлениеЧисла;
			
		КонецЕсли;
		
		МониторингЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(
			ЭтотОбъект["ТаблицаЗначений__" + ИдентификаторЭлементаФормы],
			ИдентификаторЭлементаФормы,
			ВариантАнализа,
			ИсточникДанныхВариантаАнализа);
	Иначе
		Если Не ИсточникДанныхВариантаАнализа.РасчетыАктуальны Тогда
			ТекстОшибки = НСтр("ru= 'Данные неактуальны.'");
			Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(
				ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы],
				ТекстОшибки);
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = Диаграмма;
		ИначеЕсли ИсточникДанныхВариантаАнализа.ОшибкаРасчета Тогда
			ТекстОшибки = НСтр("ru= 'Ошибка при расчете значений показателя.'");
			Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(
				ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы],
				ТекстОшибки);
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = Диаграмма;
		Иначе
			ТекстОшибки = НСтр("ru= 'Недостаточно данных для расчета показателя.'");
			Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(
				ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы],
				ТекстОшибки);
			ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы] = Диаграмма;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Диаграмма"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей -
//	ИсточникДанных - Структура - содержит результаты расчета для варианта анализа
//	ГруппаЭлементов - ГруппаФормы - группа формы, в которую нужно добавить элементы формы
//	ИдентификаторЭлементаФормы - Строка - строка, содержащая уникальный идентификатор элемента формы.
//
&НаСервере
Процедура НарисоватьДиаграмму(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	
	МассивРеквизитов = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Диаграмма"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	ЗаголовокРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Диаграмма для %1'"),
		ВариантАнализа);
	Реквизит = Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы,
			ОписаниеТипов,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	// Добавим строковый реквизит
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ФорматированнаяСтрока"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	ЗаголовокРеквизита = НСтр("ru= 'Наименование показателя'");
	Реквизит = Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы,
			ОписаниеТипов,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Добавим поля формы
	ЗаголовокЭлемента = НСтр("ru= 'Статусы'");
	ГруппаЗаголовокПоказателя = ГоризонтальнаяГруппа("Заголовок__" + ИдентификаторЭлементаФормы,
			ЗаголовокЭлемента,
			ГруппаЭлементов);
	ЗаполнитьЗначенияСвойств(ГруппаЗаголовокПоказателя, СтильГруппыЭлементовЗаголовка());
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЗаголовокПоказателя); // ПолеФормы
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ПолеНаименования.Подсказка = ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы];
	Стиль = СтильЗаголовков();
	ПолеНаименования.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеНаименования, Стиль);
	
	ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
	Стиль = СтильОтображенияДиаграмм();
	ПолеДиаграммы.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеДиаграммы, Стиль);
	
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		Диаграмма = МониторингЦелевыхПоказателей.ЗаполнитьДиаграммуДляМонитора(Диаграмма,
			ВариантАнализа, ИсточникДанных);
	Иначе
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя'");
		КонецЕсли;
		
		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Таблица"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - 
//	ИсточникДанных - Структура - содержит результаты расчета для варианта анализа.
//	ГруппаЭлементов - ГруппаФормы - группа формы, в которую нужно добавить элементы формы.
//	ИдентификаторЭлементаФормы - Строка - строка, содержащая уникальный идентификатор элемента формы.
//
&НаСервере
Процедура НарисоватьТаблицу(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	ВыводитьИтогВТаблице = (Не ТабличныеВариантыАнализаСИтогами.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	
	МассивРеквизитов = Новый Массив;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ТаблицаЗначений"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		ЗаголовокРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Таблица для %1'"),
			ВариантАнализа);
		Реквизит = Новый РеквизитФормы("ТаблицаЗначений__" + ИдентификаторЭлементаФормы,
				ОписаниеТипов,
				"",
				ЗаголовокРеквизита);
		МассивРеквизитов.Добавить(Реквизит);
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		ЗаголовокРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Диаграмма для %1'"),
			ВариантАнализа);
		Реквизит = Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы,
				ОписаниеТипов,
				"",
				ЗаголовокРеквизита);
		МассивРеквизитов.Добавить(Реквизит);
	КонецЕсли;
	
	// Добавим строковый реквизит
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ФорматированнаяСтрока"));
	ОписаниеТиповФорматированныхСтрок = Новый ОписаниеТипов(МассивТипов);
	
	ЗаголовокРеквизита = НСтр("ru='Наименование показателя'");
	Реквизит = Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповФорматированныхСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	ОписаниеТиповСтрок = Новый ОписаниеТипов(МассивТипов);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
		ЗаголовокРеквизита = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление;
		Реквизит = Новый РеквизитФормы("КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы,
				ОписаниеТиповСтрок,
				"ТаблицаЗначений__" + ИдентификаторЭлементаФормы,
				ЗаголовокРеквизита);
		МассивРеквизитов.Добавить(Реквизит);
		
		ЗаголовокРеквизита = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализаПредставление;
		Реквизит = Новый РеквизитФормы("КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы,
				ОписаниеТиповСтрок,
				"ТаблицаЗначений__" + ИдентификаторЭлементаФормы,
				ЗаголовокРеквизита);
		МассивРеквизитов.Добавить(Реквизит);
		
		Если ВыводитьИтогВТаблице Тогда
			Реквизит = Новый РеквизитФормы("ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы, ОписаниеТиповСтрок);
			МассивРеквизитов.Добавить(Реквизит);
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	// Заполним данные реквизитов формы
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных);
	
	// Добавим поля формы
	ЗаголовокЭлемента = НСтр("ru= 'Заголовок показателя'");
	ГруппаЗаголовокПоказателя = ГоризонтальнаяГруппа("Заголовок__" + ИдентификаторЭлементаФормы,
		ЗаголовокЭлемента, ГруппаЭлементов);
	ЗаполнитьЗначенияСвойств(ГруппаЗаголовокПоказателя, СтильГруппыЭлементовЗаголовка());
	
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЗаголовокПоказателя); // ПолеФормы
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ПолеНаименования.Подсказка = ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы];
	Стиль = СтильЗаголовков();
	ПолеНаименования.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеНаименования, Стиль);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПолеТаблицы = Элементы.Вставить("ТаблицаЗначений__" + ИдентификаторЭлементаФормы,
			Тип("ТаблицаФормы"), ГруппаЭлементов);
		ПолеТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы;
		ЗаполнитьЗначенияСвойств(ПолеТаблицы, СтильОтображенияТаблиц());
		
		ПолеТаблицы.Подвал = ВыводитьИтогВТаблице;
		ПолеТаблицы.КонтекстноеМеню.Доступность = Ложь;
		
		ПолеПоляТаблицы = Элементы.Вставить("КолонкаОбъектАнализа" + "__" + ИдентификаторЭлементаФормы,
			Тип("ПолеФормы"), ПолеТаблицы);
		ПолеПоляТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПоляТаблицы.АвтоВысотаЯчейки = Истина;
		ПолеПоляТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы + "." + "КолонкаОбъектАнализа"
			+ "__" + ИдентификаторЭлементаФормы;
		ПолеПоляТаблицы.ОтображатьВПодвале = Ложь;
		
		ПолеПоляТаблицы = Элементы.Вставить("КолонкаЗначениеАнализа" + "__" + ИдентификаторЭлементаФормы,
			Тип("ПолеФормы"), ПолеТаблицы);
		ПолеПоляТаблицы.Вид = ВидПоляФормы.ПолеВвода;
		ПолеПоляТаблицы.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
		ПолеПоляТаблицы.ПутьКДанным = "ТаблицаЗначений__" + ИдентификаторЭлементаФормы + "." + "КолонкаЗначениеАнализа"
			+ "__" + ИдентификаторЭлементаФормы;
		
		Если ВыводитьИтогВТаблице Тогда 
			ПолеПоляТаблицы.ПутьКДаннымПодвала = "ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы;
			ПолеПоляТаблицы.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
			ПолеПоляТаблицы.ШрифтПодвала = ШрифтВажно();
			
			ЗначениеЧисла = ИсточникДанных.Данные.Итог(
				ИсточникДанных.ДинамическиеСвойстваВариантаАнализа.ЗначениеАнализа);
			ЭтотОбъект["ИтогТаблицаЗначений__" + ИдентификаторЭлементаФормы] = ЗначениеЧисла;
		КонецЕсли;
		
		МониторингЦелевыхПоказателей.ЗаполнитьТаблицуДляМонитора(
			ЭтотОбъект["ТаблицаЗначений__" + ИдентификаторЭлементаФормы],
			ИдентификаторЭлементаФормы,
			ВариантАнализа,
			ИсточникДанных);
		
	Иначе
		ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
		ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
		Стиль = СтильОтображенияДиаграмм();
		ПолеДиаграммы.Вид = Стиль.ВидПоля;
		ЗаполнитьЗначенияСвойств(ПолеДиаграммы, Стиль);
		
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя'");
		КонецЕсли;
		
		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы для вида отображения "Кратко"
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей -
//	ИсточникДанных - Структура - содержит результаты расчета для варианта анализа.
//	ГруппаЭлементов - ГруппаФормы - Группа формы, в которую нужно добавить элементы формы.
//	ИдентификаторЭлементаФормы - Строка - строка, содержащая уникальный идентификатор элемента формы.
//
&НаСервере
Процедура НарисоватьКратко(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	МассивРеквизитов = Новый Массив;
	
	ПоказыватьТекущееЗначениеИДеталиПоказателя = (Не ВариантыАнализаСПодробностями.НайтиПоЗначению(ВариантАнализа) = Неопределено);
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ФорматированнаяСтрока"));
	ОписаниеТиповФорматированныхСтрок = Новый ОписаниеТипов(МассивТипов);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
		ЗаголовокРеквизита = НСтр("ru='Значение показателя'");
		Реквизит = Новый РеквизитФормы("Значение__" + ИдентификаторЭлементаФормы,
				ОписаниеТиповФорматированныхСтрок,
				"",
				ЗаголовокРеквизита);
		МассивРеквизитов.Добавить(Реквизит);
	Иначе
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Диаграмма"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		ЗаголовокРеквизита = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Диаграмма для %1'"),
			ВариантАнализа);
		Реквизит = Новый РеквизитФормы("Диаграмма__" + ИдентификаторЭлементаФормы,
				ОписаниеТипов,
				"",
				ЗаголовокРеквизита);
		МассивРеквизитов.Добавить(Реквизит);
	КонецЕсли;
	
	ЗаголовокРеквизита = НСтр("ru='Наименование показателя'");
	Реквизит = Новый РеквизитФормы("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповФорматированныхСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ЗаголовокЭлемента = НСтр("ru='Заголовок показателя'");
	ГруппаЗаголовокПоказателя = ГоризонтальнаяГруппа("Заголовок__" + ИдентификаторЭлементаФормы,
		ЗаголовокЭлемента, ГруппаЭлементов);
	ЗаполнитьЗначенияСвойств(ГруппаЗаголовокПоказателя, СтильГруппыЭлементовЗаголовка());
	
	// Добавим элементы формы
	ПолеНаименования = Элементы.Вставить("НаименованиеПоказателя__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЗаголовокПоказателя); // ПолеФормы
	ПолеНаименования.ПутьКДанным = "НаименованиеПоказателя__" + ИдентификаторЭлементаФормы;
	ПолеНаименования.Подсказка = ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы];
	Стиль = СтильЗаголовков();
	ПолеНаименования.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеНаименования, Стиль);
	
	РеквизитыВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа,
		"КратностьЗначений, ТочностьРасчетаДробнойЧасти");
	КратностьЗначений = РеквизитыВариантаАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = РеквизитыВариантаАнализа.ТочностьРасчетаДробнойЧасти;
	
	УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных);
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПолеЗначения = Элементы.Вставить("Значение__" + ИдентификаторЭлементаФормы, Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
		ПолеЗначения.ПутьКДанным = "Значение__" + ИдентификаторЭлементаФормы;
		Стиль = СтильОтображенияТекстовых();
		ПолеЗначения.Вид = Стиль.ВидПоля;
		ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
		
		ПолеЗначения.УстановитьДействие("Нажатие", "Подключаемый_ОткрытьАнализПоказателяНажатие");
	
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
		
		РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
		
		Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
			СтрокаРазмерности = " " + РазмерностьПоказателя;
		Иначе
			СтрокаРазмерности = "";
		КонецЕсли;
		Если ПоказыватьТекущееЗначениеИДеталиПоказателя Тогда
			ДеталиПоказателяСтрока = "";
			Если Не ПустойИсточникДанных И Не РасчетыНеактуальны Тогда
				ПредпоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПредпоследнееЗначение,
					ТочностьРасчетаДробнойЧасти);
			Иначе
				ПредпоследнееЗначение = 0;
			КонецЕсли;
			
			Если Не ПредпоследнееЗначение = 0 Тогда
				ОтносительноеИзменение = Окр(100 * (ПоследнееЗначение - ПредпоследнееЗначение) / ПредпоследнееЗначение,
					ТочностьРасчетаДробнойЧасти);
				
				Если ОтносительноеИзменение > 0 Тогда
					ЗнакИзменения = "▲";
				ИначеЕсли ОтносительноеИзменение = 0 Тогда
					ЗнакИзменения = "";
				ИначеЕсли ОтносительноеИзменение < 0 Тогда
					ЗнакИзменения = "▼";
				КонецЕсли;
				
				ДеталиПоказателяСтрока = ДеталиПоказателяСтрока + ЗнакИзменения + Символы.НПП
					+ ОтносительноеИзменение + " %";
			КонецЕсли;
			
			АбсолютноеИзменение = ПоследнееЗначение - ПредпоследнееЗначение;
			
			Если АбсолютноеИзменение > 0 Тогда
				ЗнакИзменения = "▲";
			ИначеЕсли АбсолютноеИзменение = 0 Тогда
				ЗнакИзменения = "";
			ИначеЕсли АбсолютноеИзменение < 0 Тогда
				ЗнакИзменения = "▼";
			КонецЕсли;
			
			ПредставлениеЧисла = МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(
				АбсолютноеИзменение, ТочностьРасчетаДробнойЧасти, КратностьЗначений);
			ДеталиПоказателяСтрока = ДеталиПоказателяСтрока + 
				?(ЗначениеЗаполнено(ДеталиПоказателяСтрока), " / ", ЗнакИзменения + Символы.НПП)
					+ ПредставлениеЧисла + СтрокаРазмерности;
		КонецЕсли;
		
		ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(
			ВариантАнализа, ИсточникДанных);
		
		ЗначениеСтрока = Новый ФорматированнаяСтрока(
			СокрЛП(МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(
				ОтображаемоеЗначение, 
				ТочностьРасчетаДробнойЧасти, 
				КратностьЗначений) + СтрокаРазмерности), 
			ШрифтЗначенияПоказателя(),
			ЦветаСостоянияИТренда.ЦветСостояния);
		
		ДеталиПоказателяСтрока = Новый ФорматированнаяСтрока(
			?(ДеталиПоказателяСтрока = Неопределено, "", ДеталиПоказателяСтрока), 
			ШрифтДеталейПоказателя(), 
			ЦветаСостоянияИТренда.ЦветТренда);
		
		ЭтотОбъект["Значение__" + ИдентификаторЭлементаФормы] = Новый ФорматированнаяСтрока(
			ЗначениеСтрока, 
			?(ПоказыватьТекущееЗначениеИДеталиПоказателя, Символы.ПС, ""),
			ДеталиПоказателяСтрока);
	Иначе 
		ПолеДиаграммы = Элементы.Вставить("Диаграмма__" + ИдентификаторЭлементаФормы,
			Тип("ПолеФормы"),
			ГруппаЭлементов); // ПолеФормы
		ПолеДиаграммы.ПутьКДанным = "Диаграмма__" + ИдентификаторЭлементаФормы;
		Стиль = СтильОтображенияДиаграмм();
		ПолеДиаграммы.Вид = Стиль.ВидПоля;
		ЗаполнитьЗначенияСвойств(ПолеДиаграммы, Стиль);
		ЗаполнитьЗначенияСвойств(ПолеДиаграммы, СтильОтображенияТекстовых(), "Высота");
		
		ПолеДиаграммы.Высота = 3;
		
		Диаграмма = ЭтотОбъект["Диаграмма__" + ИдентификаторЭлементаФормы];
		
		Если ИсточникДанных.Свойство("ОписаниеОшибки") Тогда
			ОписаниеОшибки = ИсточникДанных.ОписаниеОшибки;
		Иначе
			ОписаниеОшибки = НСтр("ru='Ошибка расчета показателя'");
		КонецЕсли;
		
		Диаграмма = МониторингЦелевыхПоказателей.ПолучитьДиаграммуПриОшибкахРасчета(Диаграмма, ОписаниеОшибки);
	КонецЕсли;
КонецПроцедуры

// Добавляет элементы формы справочной информации о показателе для анализа взаимосвязанных.
//
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - 
//	ИсточникДанных - Структура - содержит результаты расчета для варианта анализа.
//	ГруппаЭлементов - ГруппаФормы - Группа формы, в которую нужно добавить элементы формы.
//	ИдентификаторЭлементаФормы - Строка - строка, содержащая уникальный идентификатор элемента формы.
//
&НаСервере
Процедура НарисоватьПоляСправкиОПоказателе(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	МассивРеквизитов = Новый Массив;
	
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	
	ПустойИсточникДанных = ИсточникДанных.Пустой;
	РасчетыНеактуальны = Не ИсточникДанных.РасчетыАктуальны;
	ОшибкаРасчета = ИсточникДанных.ОшибкаРасчета;
	
	// Добавим строковые реквизиты формы
	ОписаниеТиповСтрок = МониторингЦелевыхПоказателей.ПолучитьОписаниеТиповСтроки(0);
	
	ЗаголовокРеквизита = НСтр("ru='Цель'");
	Реквизит = Новый РеквизитФормы("ЦельЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Целевой тренд'");
	Реквизит = Новый РеквизитФормы("ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Целевые значения'");
	Реквизит = Новый РеквизитФормы("ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Состояние'");
	Реквизит = Новый РеквизитФормы("ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Тренд'");
	Реквизит = Новый РеквизитФормы("ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Значение'");
	Реквизит = Новый РеквизитФормы("ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Ответственный'");
	Реквизит = Новый РеквизитФормы("ОтветственныйЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ЗаголовокРеквизита = НСтр("ru='Формула'");
	Реквизит = Новый РеквизитФормы("ФормулаЗначение__" + ИдентификаторЭлементаФормы,
			ОписаниеТиповСтрок,
			"",
			ЗаголовокРеквизита);
	МассивРеквизитов.Добавить(Реквизит);
	
	ИзменитьРеквизиты(МассивРеквизитов);
	
	ПолеЗначения = Элементы.Вставить("ЦельЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ЦельЗначение__" + ИдентификаторЭлементаФормы;
	Стиль = СтильСправочнойИнформации();
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ПолеЗначения = Элементы.Вставить("ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ПолеЗначения = Элементы.Вставить("ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ПолеЗначения = Элементы.Вставить("ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ПолеЗначения = Элементы.Вставить("ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ПолеЗначения = Элементы.Вставить("ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Иначе
		ПолеЗначения.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
	КонецЕсли;
	
	ПолеЗначения = Элементы.Вставить("ОтветственныйЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ОтветственныйЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ПолеЗначения = Элементы.Вставить("ФормулаЗначение__" + ИдентификаторЭлементаФормы,
		Тип("ПолеФормы"), ГруппаЭлементов); // ПолеФормы
	ПолеЗначения.ПутьКДанным = "ФормулаЗначение__" + ИдентификаторЭлементаФормы;
	ПолеЗначения.Вид = Стиль.ВидПоля;
	ЗаполнитьЗначенияСвойств(ПолеЗначения, Стиль);
	
	ДанныеВариантаАнализа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантАнализа,
		"Владелец, КратностьЗначений, ТочностьРасчетаДробнойЧасти, Ответственный");
	ДанныеЦелевогоПоказателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеВариантаАнализа.Владелец,
		"ЦелевойТренд, ФормулаРасчета");
	
	// Заполним значения созданных полей
	СвойстваВариантаАнализа = МониторингЦелевыхПоказателей.ПолучитьСвойстваВариантаАнализа(ВариантАнализа,
		ИсточникДанных);
	ЭтотОбъект["ЦельЗначение__" + ИдентификаторЭлементаФормы] = ДанныеВариантаАнализа.Владелец;
	ЭтотОбъект["ЦелевойТрендЗначение__" + ИдентификаторЭлементаФормы] = ДанныеЦелевогоПоказателя.ЦелевойТренд;
	ЭтотОбъект["ЦелевыеЗначенияЗначение__" + ИдентификаторЭлементаФормы] = СвойстваВариантаАнализа.ЦелевыеЗначения;
	
	КратностьЗначений = ДанныеВариантаАнализа.КратностьЗначений;
	ТочностьРасчетаДробнойЧасти = ДанныеВариантаАнализа.ТочностьРасчетаДробнойЧасти;
	
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПоследнееЗначение = Окр(ИсточникДанных.СвойстваДанныхПоПериодам.ПоследнееЗначение, ТочностьРасчетаДробнойЧасти);
		ОтображаемоеЗначение = ПоследнееЗначение;
	Иначе 
		ПоследнееЗначение = 0;
		ОтображаемоеЗначение = 0;
	КонецЕсли;
	
	РазмерностьПоказателя = СокрЛП(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
	
	Если ЗначениеЗаполнено(РазмерностьПоказателя) Тогда
		СтрокаРазмерности = " " + РазмерностьПоказателя;
	Иначе
		СтрокаРазмерности = "";
	КонецЕсли;
	
	СписокСвойств = ИсточникДанных.СвойстваЗоныАнализаИТренда;
	ЭтотОбъект["ФактическоеСостояниеЗначение__" + ИдентификаторЭлементаФормы] = СписокСвойств.ПояснениеКСтатусу;
	ЭтотОбъект["ФактическийТрендЗначение__" + ИдентификаторЭлементаФормы] = СписокСвойств.ПояснениеКТренду;
	
	ИмяРеквизитаФормы = "ФактическоеЗначениеЗначение__" + ИдентификаторЭлементаФормы;
	Если Не ПустойИсточникДанных И Не РасчетыНеактуальны И Не ОшибкаРасчета Тогда
		ПредставлениеЧисла = МониторингЦелевыхПоказателей.ПолучитьСокращенноеПредставлениеЧисла(ОтображаемоеЗначение,
			ТочностьРасчетаДробнойЧасти, КратностьЗначений);
		ЭтотОбъект[ИмяРеквизитаФормы] = СокрЛП(ПредставлениеЧисла + СтрокаРазмерности);
	Иначе
		ЭтотОбъект[ИмяРеквизитаФормы] = ИсточникДанных.ОписаниеОшибки;
	КонецЕсли;
	
	ЭтотОбъект["ФормулаЗначение__" + ИдентификаторЭлементаФормы]	= ДанныеЦелевогоПоказателя.ФормулаРасчета;
	ЭтотОбъект["ОтветственныйЗначение__" + ИдентификаторЭлементаФормы]	= ДанныеВариантаАнализа.Ответственный;
КонецПроцедуры

// Добавляет группу элементов формы заданной ширины и высоты, содержащую пустую картинку.
// Используется для выравнивания элементов монитора.
// 
// Параметры:
//	ГруппаЭлементов - ГруппаФормы - группа, в кот. добавляется элемент
//	ИдентификаторЭлементаФормы - Строка - уникальный идентиф. добавляемого элмента
//	СтильЭлемента - Структура - структура, содержащая модифицируемые свойства элемента формы
//		Ключ - Строка - имя модифицируемого свойства
//		Значение - Строка - значение модифицируемого свойства.
//
&НаСервере 
Процедура НарисоватьПустойЭлемент(ГруппаЭлементов, ИдентификаторЭлементаФормы, СтильЭлемента)
	// Добавим декорацию формы
	ПолеДекорации = Элементы.Вставить("ВыравнивающийЭлемент__" + ИдентификаторЭлементаФормы,
		Тип("ДекорацияФормы"), ГруппаЭлементов);
	ПолеДекорации.Вид = ВидДекорацииФормы.Картинка;
	ПолеДекорации.Картинка = Новый Картинка;
	ПолеДекорации.Заголовок = НСтр("ru= 'Выравнивающий элемент'");
	ПолеДекорации.Доступность = Ложь;
	
	ЗаполнитьЗначенияСвойств(ПолеДекорации, СтильЭлемента);
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора - краткое представление, диаграммы и таблицы.
// 
// Параметры:
//	СоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках.
//
&НаСервере
Процедура НарисоватьЭлементыМонитора(СоставМонитора)
	СтруктураВывода = МониторингЦелевыхПоказателей.СтруктураВывода(СоставМонитора);
	
	КоличествоПоказателей = РассчитатьКоличествоПоказателейПоСтруктуреВывода(СтруктураВывода);
	Если КоличествоПоказателей < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
		СтруктураНастроек.Вставить("КоличествоКолонокМонитораПоказателей", КоличествоПоказателей);
	КонецЕсли;
	
	ШиринаКолонок = 0;

	СоздатьБазовуюСтруктуруЭлементовФормы(СоставМонитора, СтруктураВывода);
	
	Если РежимАнализаВзаимосвязанных Тогда
		// Создадим элементы формы для анализируемого показателя
		Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
			Если ЭлементВывода = "Анализируемые" Тогда
				ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка();
			ИначеЕсли ЭлементВывода = "Зависимые" Тогда
				ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели;
			ИначеЕсли ЭлементВывода = "Влияющие" Тогда
				ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели;
			КонецЕсли;
			Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
				НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(СтруктураВывода[ЭлементВывода],
					ВидПоискаВзаимосвязанных);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоСостоянию" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Состояние = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					НарисоватьЭлементыМонитораСУчетомСостояния(СтруктураВывода[ЭлементВывода], Состояние);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Идентификатор = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					НарисоватьЭлементыМонитораСУчетомГрупп(СтруктураВывода[ЭлементВывода], Идентификатор);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в режиме анализа взаимосвязанных.
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ВидПоискаВзаимосвязанных - ПеречислениеСсылка.ВидыПоискаСвязанныхПоказателей - значения зависимые, влияющие, взаимосвязанные, все.
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомВидаАнализаВзаимосвязаных(КоллекцияВариантовАнализа, ВидПоискаВзаимосвязанных)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	Если Не ВидПоискаВзаимосвязанных = Перечисления.ВидыПоискаСвязанныхПоказателей.ПустаяСсылка() Тогда
		ИмяВидаПоиска = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(ВидПоискаВзаимосвязанных);
	Иначе
		ИмяВидаПоиска = "АнализируемыйПоказатель";
	КонецЕсли;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ХранилищеИсточникаДанных = ЭлементМонитора.ИсточникДанных; // ХранилищеЗначения
		ИсточникДанных = ХранилищеИсточникаДанных.Получить();
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ВариантыОтображения.Диаграмма;
		ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
		
		ГруппаКолонкаЭлементов = Элементы["ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + "1"];
		ЗаполнитьЗначенияСвойств(ГруппаКолонкаЭлементов, СтильГруппыКолонкиПоказателей());
		
		ГруппаЭлемент = Элементы.Добавить("ЭлементДиаграмма__" + ИдентификаторЭлементаФормы,
			Тип("ГруппаФормы"), ГруппаКолонкаЭлементов);
		ГруппаЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаЭлемент.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаЭлемент.ОтображатьЗаголовок = Ложь;
		
		Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
			ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя
				+ ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность),
						" (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")", "");
		Иначе
			ГруппаЭлемент.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя
				+ " (" + МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа)
				+ ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность),
						" " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
		КонецЕсли;
		
		ГруппаЭлемент.РастягиватьПоВертикали = Ложь;
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьЭлементыПоказателя(ВариантАнализа,
				ИсточникДанных,
				ВариантОтображения,
				ГруппаЭлемент,
				ИдентификаторЭлементаФормы);
		
		// Заполним справочную информацию о показателе
		ГруппаКолонкаЭлементов = Элементы["ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + "2"];
		ЗаполнитьЗначенияСвойств(ГруппаКолонкаЭлементов, СтильГруппыКолонкиПоказателей());
		
		ГруппаСправка = Элементы.Добавить("ЭлементСправкаОПоказателе__" + ИдентификаторЭлементаФормы,
			Тип("ГруппаФормы"), ГруппаКолонкаЭлементов);
		ГруппаСправка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСправка.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		ГруппаСправка.Заголовок = НСтр("ru= 'Справка о показателе'");
		ГруппаСправка.ШрифтЗаголовка = ШрифтВажно();
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьПоляСправкиОПоказателе(ВариантАнализа, ИсточникДанных, ГруппаСправка, ИдентификаторЭлементаФормы);
	КонецЦикла;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в группу в режиме вывода по важности.
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	Состояние - Строка - состояние показателя. Может принимать значения: ЦельДостигнута, ПриемлемоеСостояние, НеприемлемоеСостояние, СостояниеНеОпределено, РасчитаноСОшибкой.
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомСостояния(КоллекцияВариантовАнализа, Состояние)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	СчетчикЭлементовСтроки = 1;
	КоличествоПоказателейВКоллекции = КоллекцияВариантовАнализа.Количество();
	КоличествоНенарисованныхПоказателей = КоличествоПоказателейВКоллекции;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ХранилищеИсточникаДанных = ЭлементМонитора.ИсточникДанных; // ХранилищеЗначения
		ИсточникДанных = ХранилищеИсточникаДанных.Получить();
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			СуффиксИмениГруппы = "Кратко";
		Иначе
			СуффиксИмениГруппы = "Подробно";
		КонецЕсли;
		
		ГруппаКолонкаЭлементов = Элементы["ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + Состояние + "__"
			+ СчетчикЭлементовСтроки];
		
		ГруппаЭлементовПоказателя = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы,
			Тип("ГруппаФормы"), ГруппаКолонкаЭлементов); // ГруппаФормы
		Стиль = СтильГруппыЭлементовПоказателя();
		ГруппаЭлементовПоказателя.Вид = Стиль.ВидГруппы;
		ЗаполнитьЗначенияСвойств(ГруппаЭлементовПоказателя, Стиль);
		
		Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
			ГруппаЭлементовПоказателя.Заголовок = ВариантАнализа.Наименование 
				+ ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность),
						" (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")", "");
		Иначе
			ГруппаЭлементовПоказателя.Заголовок = ВариантАнализа.Наименование 
				+ " (" + МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа)
				+ ?(Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность),
						" " + ДинамическиеСвойстваВариантаАнализа.Размерность, "") + ")";
		КонецЕсли;
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьЭлементыПоказателя(ВариантАнализа,
				ИсточникДанных,
				ВариантОтображения,
				ГруппаЭлементовПоказателя,
				ИдентификаторЭлементаФормы);
		
		КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
		
		Если КоличествоНенарисованныхПоказателей = 0
		   И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
			
			НужноДобавитьЭлементов = СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки;
			Для СчВыравнивающихЭлементов = 1 По НужноДобавитьЭлементов Цикл
				ИмяЭлемента = "ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + Состояние + "__"
					+ (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов);
				ГруппаКолонкаЭлементов = Элементы[ИмяЭлемента];
				
				ИмяЭлемента = "КонтейнерВыравнивающегоЭлемента__" + ИдентификаторЭлементаФормы + "__"
					+ СчВыравнивающихЭлементов;
				ГруппаЭлементовПоказателя = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаКолонкаЭлементов); // ГруппаФормы
				Стиль = СтильГруппыЭлементовПоказателя();
				ГруппаЭлементовПоказателя.Вид = Стиль.ВидГруппы;
				ЗаполнитьЗначенияСвойств(ГруппаЭлементовПоказателя, Стиль);
				
				ГруппаЭлементовПоказателя.Заголовок = НСтр("ru= 'Контейнер выравнивающего элемента'");
				
				ИмяЭлемента = ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов;
				НарисоватьПустойЭлемент(ГруппаЭлементовПоказателя,
						ИмяЭлемента,
						СтильОтображенияПоказателяБазовый());
			КонецЦикла;
		КонецЕсли;
		
		СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
		
		Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
			СчетчикЭлементовСтроки = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы монитора в группу в режиме вывода по категориям целей.
// 
// Параметры:
//	КоллекцияВариантовАнализа - ТаблицаЗначений - содержит источники данных и их свойства
//	ИдентификаторГруппы - Строка - идентификатор группы, в которую будут добавлены элементы формы.
//
&НаСервере 
Процедура НарисоватьЭлементыМонитораСУчетомГрупп(КоллекцияВариантовАнализа, ИдентификаторГруппы)
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	ВариантыОтображения = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	СчетчикЭлементовСтроки = 1;
	КоличествоПоказателейВКоллекции = КоллекцияВариантовАнализа.Количество();
	КоличествоНенарисованныхПоказателей = КоличествоПоказателейВКоллекции;
	
	Для Каждого ЭлементМонитора Из КоллекцияВариантовАнализа Цикл 
		ВариантАнализа = ЭлементМонитора.ВариантАнализа;
		ХранилищеИсточникаДанных = ЭлементМонитора.ИсточникДанных; // ХранилищеЗначения
		ИсточникДанных = ХранилищеИсточникаДанных.Получить();
		ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
		ВариантОтображения = ЭлементМонитора.ВариантОтображения;
		ВидПредставленияЧисел = ВариантАнализа.КратностьЗначений;
		ИдентификаторЭлементаФормы = СтрЗаменить(Строка(ВариантАнализа.УникальныйИдентификатор()),"-","_");
		
		Если ВариантОтображения = ВариантыОтображения.Кратко Тогда
			СуффиксИмениГруппы = "Кратко";
		Иначе
			СуффиксИмениГруппы = "Подробно";
		КонецЕсли;
		
		ИмяЭлемента = "ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + ИдентификаторГруппы + "__"
			+ СчетчикЭлементовСтроки;
		ГруппаКолонкаЭлементов = Элементы[ИмяЭлемента];
		
		ГруппаЭлементовПоказателя = Элементы.Добавить("Элемент__" + ИдентификаторЭлементаФормы,
			Тип("ГруппаФормы"), ГруппаКолонкаЭлементов); // ГруппаФормы
		Стиль = СтильГруппыЭлементовПоказателя();
		ГруппаЭлементовПоказателя.Вид = Стиль.ВидГруппы;
		ЗаполнитьЗначенияСвойств(ГруппаЭлементовПоказателя, Стиль);
		
		Если ВидПредставленияЧисел = ВидыПредставленияЧисел.БезИзменений Тогда
			ГруппаЭлементовПоказателя.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя
				+ " (" + ДинамическиеСвойстваВариантаАнализа.Размерность + ")";
		Иначе
			ГруппаЭлементовПоказателя.Заголовок = ВариантАнализа.Владелец.КраткоеНаименованиеЦелевогоПоказателя
				+ " (" + МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа)
				+ " " + ДинамическиеСвойстваВариантаАнализа.Размерность + ")";
		КонецЕсли;
		
		// Наполним элемент контентом по шаблонам вариантов
		НарисоватьЭлементыПоказателя(ВариантАнализа,
				ИсточникДанных,
				ВариантОтображения,
				ГруппаЭлементовПоказателя,
				ИдентификаторЭлементаФормы);
		
		КоличествоНенарисованныхПоказателей = КоличествоНенарисованныхПоказателей - 1;
		
		Если КоличествоНенарисованныхПоказателей = 0
			И СчетчикЭлементовСтроки < СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
			
			НужноДобавитьЭлементов = СтруктураНастроек.КоличествоКолонокМонитораПоказателей - СчетчикЭлементовСтроки;
			Для СчВыравнивающихЭлементов = 1 По НужноДобавитьЭлементов Цикл
				ИмяЭлемента = "ГруппаКолонкаЭлементов" + СуффиксИмениГруппы + ИдентификаторГруппы + "__"
					+ (СчетчикЭлементовСтроки + СчВыравнивающихЭлементов);
				ГруппаКолонкаЭлементов = Элементы[ИмяЭлемента];
				
				ИмяЭлемента = "КонтейнерВыравнивающегоЭлемента__" + ИдентификаторЭлементаФормы + "__"
					+ СчВыравнивающихЭлементов;
				ГруппаЭлементовПоказателя = Элементы.Добавить(ИмяЭлемента, Тип("ГруппаФормы"), ГруппаКолонкаЭлементов); // ГруппаФормы
				Стиль = СтильГруппыЭлементовПоказателя();
				ГруппаЭлементовПоказателя.Вид = Стиль.ВидГруппы;
				ЗаполнитьЗначенияСвойств(ГруппаЭлементовПоказателя, Стиль);
				
				ГруппаЭлементовПоказателя.Заголовок = НСтр("ru= 'Контейнер выравнивающего элемента'");
				
				ИмяЭлемента = ИдентификаторЭлементаФормы + "__" + СчВыравнивающихЭлементов;
				НарисоватьПустойЭлемент(ГруппаЭлементовПоказателя,
						ИмяЭлемента,
						СтильОтображенияПоказателяБазовый());
			КонецЦикла;
		КонецЕсли;
		
		СчетчикЭлементовСтроки = СчетчикЭлементовСтроки + 1;
		
		Если СчетчикЭлементовСтроки > СтруктураНастроек.КоличествоКолонокМонитораПоказателей Тогда
			СчетчикЭлементовСтроки = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Вызывает процедуры добавления элементов формы для переданного варианта анализа
// 
// Параметры:
//	ВариантАнализа - СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - вариант, для которого будут созданы элементы формы
//	ИсточникДанных - Структура - содержит результаты расчета для варианта анализа
//	ВариантОтображения - ПеречислениеСсылка.ВариантыОтображенияВариантовАнализа - кратко, диаграмма, таблица
//	ГруппаЭлементов - ГруппаФормы - группа, в которую будут добавлены элементы
//	ИдентификаторЭлементаФормы - Строка - строквый GUID варианта анализа("-" заменены на "_").
//
&НаСервере
Процедура НарисоватьЭлементыПоказателя(ВариантАнализа, ИсточникДанных, ВариантОтображения, ГруппаЭлементов, ИдентификаторЭлементаФормы)
	Если ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Диаграмма Тогда
		
		НарисоватьДиаграмму(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Кратко Тогда
		
		НарисоватьКратко(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	ИначеЕсли ВариантОтображения = Перечисления.ВариантыОтображенияВариантовАнализа.Таблица Тогда
		
		НарисоватьТаблицу(ВариантАнализа, ИсточникДанных, ГруппаЭлементов, ИдентификаторЭлементаФормы);
		
	КонецЕсли;
	
	ДобавитьКомандыВариантовАнализа(ВариантАнализа, ГруппаЭлементов, ИдентификаторЭлементаФормы, ВариантОтображения);
КонецПроцедуры

// Создает группы формы для последующего добавления в них элементов формы вариантов анализа.
// 
// Параметры:
//	СоставМонитора - Структура - содержит набор источников данных и обобщенную информацию об источниках.
//
&НаСервере
Процедура СоздатьБазовуюСтруктуруЭлементовФормы(СоставМонитора, СтруктураВывода)
	НаборИсточниковДанных = СоставМонитора.НаборИсточниковДанных;
	
	ВариантыОтображенияВариантовАнализа = Перечисления.ВариантыОтображенияВариантовАнализа;
	
	ЗаголовокЭлемента = НСтр("ru='Показатели'");
	ГруппаПоказатели = ВертикальнаяГруппа("ГруппаПоказатели",
			ЗаголовокЭлемента,
			Элементы.ОсновнаяСтраницаМонитора);
	
	Если РежимАнализаВзаимосвязанных Тогда
		ВариантАнализа = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСвойстваВариантаАнализаПоИдентификатору(
			Параметры.ИдентификаторВариантаАнализа);
		ВариантАнализаСсылка = ВариантАнализа.Ссылка; // СправочникСсылка.ВариантыАнализаЦелевыхПоказателей - 
		НаименованиеВариантаАнализа = ВариантАнализаСсылка.Наименование;
		
		ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Анализируемый показатель ""%1""'",),
			НаименованиеВариантаАнализа);
		ГруппаАнализируемыйПоказатель = ГоризонтальнаяГруппа("ГруппаАнализируемыйПоказатель",
				ЗаголовокЭлемента,
				ГруппаПоказатели);
		ЗаполнитьЗначенияСвойств(ГруппаАнализируемыйПоказатель, СтильГруппыПоказателей());
		
		// Колонок в режиме анализа взаимосвязей всегда 2 - диаграмма, справка о показателей.
		Для Сч = 1 По 2 Цикл
			ИмяЭлемента = "ГруппаКолонкаЭлементов" + "АнализируемыйПоказатель" + "__" + Сч;
			ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Колонка №%1'"),
				Сч);
			ВертикальнаяГруппа(ИмяЭлемента,
					ЗаголовокЭлемента,
					ГруппаАнализируемыйПоказатель);
		КонецЦикла;
		
		ОтборЗависимых = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
		Зависимые = НаборИсточниковДанных.НайтиСтроки(ОтборЗависимых);
		
		Если Зависимые.Количество() > 0 Тогда
			ИмяВидаПоиска = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(
				Перечисления.ВидыПоискаСвязанныхПоказателей.ЗависимыеПоказатели);
			
			ЗаголовокЭлемента = НСтр("ru='Зависимые показатели'");
			ГруппаЗависимые = ГоризонтальнаяГруппа("Группа" + ИмяВидаПоиска,
					ЗаголовокЭлемента,
					ГруппаПоказатели);
			ЗаполнитьЗначенияСвойств(ГруппаЗависимые, СтильГруппыПоказателей());
			
			// Колонок в режиме анализа взаимосвязей всегда 2 - диаграмма, справка о показателей.
			Для Сч = 1 По 2 Цикл
				ИмяЭлемента = "ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + Сч;
				ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Колонка №%1'"),
					Сч);
				ВертикальнаяГруппа(ИмяЭлемента,
						ЗаголовокЭлемента,
						ГруппаЗависимые);
			КонецЦикла;
		КонецЕсли;
		
		ОтборВлияющих = Новый Структура("Группа", Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
		Влияющие  = НаборИсточниковДанных.НайтиСтроки(ОтборВлияющих);
		
		Если Влияющие.Количество() > 0 Тогда
			ИмяВидаПоиска = МониторингЦелевыхПоказателей.ПолучитьИмяЗначенияПеречисления(
				Перечисления.ВидыПоискаСвязанныхПоказателей.ВлияющиеПоказатели);
			
			ЗаголовокЭлемента = НСтр("ru='Влияющие показатели'");
			ГруппаВлияющие = ГоризонтальнаяГруппа("Группа" + ИмяВидаПоиска,
					ЗаголовокЭлемента,
					ГруппаПоказатели);
			ЗаполнитьЗначенияСвойств(ГруппаВлияющие, СтильГруппыПоказателей());
			
			// Колонок в режиме анализа взаимосвязей всегда 2 - диаграмма, справка о показателей.
			Для Сч = 1 По 2 Цикл
				ИмяЭлемента = "ГруппаКолонкаЭлементов" + ИмяВидаПоиска + "__" + Сч;
				ЗаголовокЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Колонка №%1'"),
					Сч);
				ВертикальнаяГруппа(ИмяЭлемента,
						ЗаголовокЭлемента,
						ГруппаВлияющие);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЗаголовокЭлемента = НСтр("ru='Показатели (кратко)'");
		ГруппаПоказателиКратко = ВертикальнаяГруппа("ГруппаПоказателиКратко",
				ЗаголовокЭлемента,
				ГруппаПоказатели);
		
		ЗаголовокЭлемента = НСтр("ru='Показатели (подробно)'");
		ГруппаПоказателиПодробно = ВертикальнаяГруппа("ГруппаПоказателиПодробно",
				ЗаголовокЭлемента,
				ГруппаПоказатели);
		
		Если СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоСостоянию" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				СостояниеДляГруппы = СтрЗаменить(ЭлементВывода, "Показатели", "");
				Состояние = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					ГруппаПоказателя = ГоризонтальнаяГруппа("Группа" + СостояниеДляГруппы,
						МониторингЦелевыхПоказателей.ПредставлениеСостояния(Состояние),
						ГруппаПоказателиКратко);
					ЗаполнитьЗначенияСвойств(ГруппаПоказателя, СтильГруппыПоСостоянию(Состояние));
					
					Если СтрНайти(ЭлементВывода, "Кратко") > 0 Тогда
						ДобавитьГруппыКолонкиЭлементов(ГруппаПоказателя,
								Состояние,
								ВариантыОтображенияВариантовАнализа.Кратко);
					Иначе
						ДобавитьГруппыКолонкиЭлементов(ГруппаПоказателя,
								Состояние);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтруктураНастроек.ВариантГруппировкиПоказателей = "ПоКатегориямЦелей" Тогда
			Для Каждого ЭлементВывода Из СтруктураВывода.ПорядокВывода Цикл
				Идентификатор = СтрЗаменить(СтрЗаменить(СтрЗаменить(ЭлементВывода, "Показатели", ""), "Кратко", ""), "Подробно", "");
				КатегорияЦелиИдентификатор = МониторингЦелевыхПоказателей.СтрокуВУникальныйИдентификатор(Идентификатор);
				КатегорияЦели = Справочники.КатегорииЦелей.ПолучитьСсылку(КатегорияЦелиИдентификатор);
				Если СтруктураВывода[ЭлементВывода].Количество() > 0 Тогда
					ПредставлениеГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КатегорияЦели, "Наименование");
					
					Если СтрНайти(ЭлементВывода, "Кратко") > 0 Тогда
						ИмяЭлемента = "ГруппаТекстовыеЗаголовок__" + Идентификатор;
						ГруппаТекстовыеЗаголовок = ГоризонтальнаяГруппа(ИмяЭлемента,
								ПредставлениеГруппы,
								ГруппаПоказателиКратко);
					Иначе
						ИмяЭлемента = "ГруппаТабличныеИДиаграммные__" + Идентификатор;
						ГруппаТекстовыеЗаголовок = ГоризонтальнаяГруппа(ИмяЭлемента,
								ПредставлениеГруппы,
								ГруппаПоказателиПодробно);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(ГруппаТекстовыеЗаголовок, СтильГруппыПоказателей());
					ГруппаТекстовыеЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
					
					Если СтрНайти(ЭлементВывода, "Кратко") > 0 Тогда
						ДобавитьГруппыКолонкиЭлементов(ГруппаТекстовыеЗаголовок,
								Идентификатор,
								ВариантыОтображенияВариантовАнализа.Кратко);
					Иначе
						ДобавитьГруппыКолонкиЭлементов(ГруппаТекстовыеЗаголовок,
								Идентификатор);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьКоличествоПоказателейПоСтруктуреВывода(СтруктураВывода)
	
	КоличествоПоказателей = 1;
	
	Для Каждого ЭлементСтруктуры Из СтруктураВывода Цикл
		Если Лев(ЭлементСтруктуры.Ключ, 10) = "Показатели" Тогда
			КоличествоПоказателей = Макс(КоличествоПоказателей, ЭлементСтруктуры.Значение.Количество());
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ДашбордыВыбор()

	ТекущиеДанные = Элементы.Дашборды.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Ссылка = СтруктураНастроек.Дашборд Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеСтруктурыНастроекСервер(ТекущиеДанные.Ссылка);
	ИнициализироватьОбработчикАвтообновления();
	ОбновитьСоставМонитораКлиент(Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНаименованиеПоказателя(ВариантАнализа, ИдентификаторЭлементаФормы, ИсточникДанных, ДинамическоеИзменение = Ложь)
	ДинамическиеСвойстваВариантаАнализа = ИсточникДанных.ДинамическиеСвойстваВариантаАнализа;
	ВидыПредставленияЧисел = Перечисления.ВидыПредставленияЧисел;
	
	ТекстовоеПредставлениеПериода = МониторингЦелевыхПоказателей.ПредставлениеПериодаВариантаАнализа(ИсточникДанных);
	ЦветаСостоянияИТренда = МониторингЦелевыхПоказателей.ПолучитьЦветаСостоянияИТрендаПоказателя(ВариантАнализа,
		ИсточникДанных);
	
	МаркерСветофора = Новый ФорматированнаяСтрока("●" + Символы.НПП, ШрифтЗаголовкаПоказателяВажно(),
		ЦветаСостоянияИТренда.ЦветСостояния);
	МаркерМодифицированности = " * ";
	РазделительСтрок = " / ";
	
	НаименованиеВариантаАнализа = Новый ФорматированнаяСтрока(ВариантАнализа.Наименование,
		ШрифтЗаголовкаПоказателяВажно());
	ПериодичностьСтрока = Новый ФорматированнаяСтрока(
		Строка(ДинамическиеСвойстваВариантаАнализа.ПериодичностьРасчетаПоказателя),
		ШрифтЗаголовкаПоказателяВажно());
	Если ЗначениеЗаполнено(ДинамическиеСвойстваВариантаАнализа.ОбъектАнализа) Тогда
		ОбъектАнализаСтрока = Новый ФорматированнаяСтрока(
			ДинамическиеСвойстваВариантаАнализа.ОбъектАнализаПредставление,
			ШрифтЗаголовкаПоказателяВажно());
	Иначе
		ОбъектАнализаСтрока = "";
	КонецЕсли;
	
	МассивСтрокНаименования = Новый Массив;
	Если ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "НеприемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ПриемлемоеСостояние"
		Или ИсточникДанных.СвойстваЗоныАнализаИТренда.Статус = "ЦельДостигнута" Тогда
		
		МассивСтрокНаименования.Добавить(МаркерСветофора);
	КонецЕсли;
	МассивСтрокНаименования.Добавить(НаименованиеВариантаАнализа);
	Если ДинамическоеИзменение Тогда
		МассивСтрокНаименования.Добавить(МаркерМодифицированности);
		Если Не ВариантАнализа.ТипАнализа = Перечисления.ТипыАнализаПоказателей.ДинамикаИзменения Тогда
			МассивСтрокНаименования.Добавить(ОбъектАнализаСтрока);
			МассивСтрокНаименования.Добавить(РазделительСтрок);
		КонецЕсли;
		МассивСтрокНаименования.Добавить(ПериодичностьСтрока);
	КонецЕсли;
	Если Не ВариантАнализа.КратностьЗначений = ВидыПредставленияЧисел.БезИзменений Тогда
		МассивСтрокНаименования.Добавить(РазделительСтрок);
		МассивСтрокНаименования.Добавить(МониторингЦелевыхПоказателей.ПолучитьСтрокуПредставленияЧисел(ВариантАнализа));
	КонецЕсли;
	Если Не ПустаяСтрока(ДинамическиеСвойстваВариантаАнализа.Размерность) Тогда
		МассивСтрокНаименования.Добавить(РазделительСтрок);
		МассивСтрокНаименования.Добавить(Строка(ДинамическиеСвойстваВариантаАнализа.Размерность));
	КонецЕсли;
	МассивСтрокНаименования.Добавить(РазделительСтрок);
	МассивСтрокНаименования.Добавить(ТекстовоеПредставлениеПериода);
	
	ЭтотОбъект["НаименованиеПоказателя__" + ИдентификаторЭлементаФормы] = Новый ФорматированнаяСтрока(МассивСтрокНаименования);
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьОбновитьДинамическиеПараметрыВоВременномХранилище(Знач ВариантАнализа, Знач ИдентификаторПоказателя, Знач ПараметрыИсточникаДанных)
	Перем АдресДинамическихПараметров, ДинамическиеПараметры, НайденныеСоставМонитора, НовыйАдрес, ОтборПоВариантуАнализа;
	
	ОтборПоВариантуАнализа = Новый Структура("ВариантАнализа", ВариантАнализа);
	НайденныеСоставМонитора = СоставМонитора.НайтиСтроки(ОтборПоВариантуАнализа);
	
	АдресДинамическихПараметров = "";
	Если НайденныеСоставМонитора.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(НайденныеСоставМонитора[0].АдресДинамическихПараметров) Тогда
			АдресДинамическихПараметров = НайденныеСоставМонитора[0].АдресДинамическихПараметров;
			ДинамическиеПараметры = ПолучитьИзВременногоХранилища(АдресДинамическихПараметров);
			ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыИсточникаДанных, ДинамическиеПараметры, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(АдресДинамическихПараметров) Тогда
		АдресДинамическихПараметров = ПоместитьВоВременноеХранилище(ПараметрыИсточникаДанных, 
		АдресДинамическихПараметров);
	Иначе
		АдресДинамическихПараметров = ПоместитьВоВременноеХранилище(ПараметрыИсточникаДанных, 
		Новый УникальныйИдентификатор(СтрЗаменить(ИдентификаторПоказателя,"_","-")));
	КонецЕсли;
	
	Если НайденныеСоставМонитора.Количество() > 0 Тогда
		НайденныеСоставМонитора[0].АдресДинамическихПараметров = АдресДинамическихПараметров;
	Иначе
		НовыйАдрес = СоставМонитора.Добавить();
		НовыйАдрес.ВариантАнализа = ВариантАнализа;
		НовыйАдрес.АдресДинамическихПараметров = АдресДинамическихПараметров;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОбработчикАвтообновления(ПериодАвтообновления = Неопределено)
	Если ПериодАвтообновления = Неопределено Тогда
		ПериодАвтообновления = СтруктураНастроек.ПериодАвтообновления * 60;
	КонецЕсли;
	
	Если ПериодАвтообновления > 0 Тогда
		ОтключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент");
		ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент", ПериодАвтообновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьОбработчикПервогоЗапуска()
	ПериодПервогоЗапуска = 0.1;
	
	ПодключитьОбработчикОжидания("ОбработчикОжидания_ОбновитьСоставМонитораКлиент", ПериодПервогоЗапуска, Истина);
КонецПроцедуры

&НаСервере 
Процедура ОбновлениеСтруктурыНастроекСервер(Дашборд)

	СтруктураНастроек = МониторингЦелевыхПоказателей.ПолучитьНастройкиМонитораЦелевыхПоказателей(Дашборд);
	Если СтруктураНастроек.КоличествоКолонокМонитораПоказателей = 0 Тогда
		СтруктураНастроек.Вставить("КоличествоКолонокМонитораПоказателей",
			РассчитатьКоличествоКолонокМонитораПоказателей());
	КонецЕсли;
	
	Элементы.ГруппаБыстрыеОтборы.Видимость = СтруктураНастроек.ВыводитьОтборПоказателей;
	Если Не СтруктураНастроек.ВыводитьОтборПоказателей Тогда
		ОтборСтатус = Неопределено;
		ПериодичностьКонтроля = Неопределено;
		УстановитьПользовательскийПараметр(ЭтотОбъект, "ОтборСтатус", ОтборСтатус, Ложь);
		УстановитьПользовательскийПараметр(ЭтотОбъект, "ПериодичностьКонтроля", ПериодичностьКонтроля, Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьСУчетомНеобходимостиУдаления(МассивСуществующихРеквизитов)
	НеудаляемыеРеквизиты = Новый Массив;
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаДляПечати");
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаСНарастающимИтогом");
	НеудаляемыеРеквизиты.Добавить("ВариантыАнализаСПодробностями");
	НеудаляемыеРеквизиты.Добавить("ДемонстрационныйРежим");
	НеудаляемыеРеквизиты.Добавить("ДоступныеОтчеты");
	НеудаляемыеРеквизиты.Добавить("ОтборСтатус");
	НеудаляемыеРеквизиты.Добавить("ПериодичностьКонтроля");
	НеудаляемыеРеквизиты.Добавить("ТекущийПользователь");
	НеудаляемыеРеквизиты.Добавить("РежимАнализаВзаимосвязанных");
	НеудаляемыеРеквизиты.Добавить("СоставМонитора");
	НеудаляемыеРеквизиты.Добавить("СоставМонитораНеопределен");
	НеудаляемыеРеквизиты.Добавить("СоставМонитораПустойПоОтбору");
	НеудаляемыеРеквизиты.Добавить("Дашборды");
	НеудаляемыеРеквизиты.Добавить("ШиринаКолонок");
	НеудаляемыеРеквизиты.Добавить("СтруктураНастроек");
	НеудаляемыеРеквизиты.Добавить("ТабличныеВариантыАнализаСИтогами");
	НеудаляемыеРеквизиты.Добавить("ТекущийВариантИнтерфейсаКлиентскогоПриложения");
	// Длительные операции
	НеудаляемыеРеквизиты.Добавить("АдресХранилища");
	НеудаляемыеРеквизиты.Добавить("ИдентификаторЗадания");
	НеудаляемыеРеквизиты.Добавить("АдресаДинамическихПараметров");
	НеудаляемыеРеквизиты.Добавить("Отчет");
	НеудаляемыеРеквизиты.Добавить("ПостоянныеКоманды");
	
	Для Каждого НеудаляемыйРеквизит Из НеудаляемыеРеквизиты Цикл 
		Для Каждого СуществующийРеквизит Из МассивСуществующихРеквизитов Цикл 
			Если СуществующийРеквизит.Имя = НеудаляемыйРеквизит Тогда
				Индекс = МассивСуществующихРеквизитов.Найти(СуществующийРеквизит);
				Прервать;
			Иначе
				Индекс = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если Индекс <> Неопределено Тогда
			МассивСуществующихРеквизитов.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжидания_ОбновитьСоставМонитораКлиент()
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаСервере 
Процедура ОбновитьСоставМонитора(СоставМонитора)
	Элементы.ГруппаПояснениеПриЗапуске.Видимость = Ложь;
	
	// Удалим ранее созданные программно элементы формы
	ГруппаПоказатели = Элементы.Найти("ГруппаПоказатели");
	Если Не ГруппаПоказатели = Неопределено Тогда
		Элементы.Удалить(ГруппаПоказатели);
	КонецЕсли;
	
	// Удалим ранее созданные программно реквизиты
	МассивСуществующихРеквизитов = ПолучитьРеквизиты();
	
	ОбработатьСУчетомНеобходимостиУдаления(МассивСуществующихРеквизитов);
	
	Если МассивСуществующихРеквизитов.Количество() > 0 Тогда
		МассивПутейУдаляемыхРеквизитов = Новый Массив;
		
		Для Каждого СуществующийРеквизит Из МассивСуществующихРеквизитов Цикл 
			МассивПутейУдаляемыхРеквизитов.Добавить(СуществующийРеквизит.Имя);
		КонецЦикла;
		
		ИзменитьРеквизиты(, МассивПутейУдаляемыхРеквизитов);
	КонецЕсли;
	
	// Удалим ранее созданные программно команды
	МассивУдаляемыхКоманд = Новый Массив;
	Для Каждого Команда Из Команды Цикл 
		ИмяКоманды = Команда.Имя;
		
		Если ПостоянныеКоманды.НайтиПоЗначению(ИмяКоманды) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУдаляемыхКоманд.Добавить(ИмяКоманды);
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из МассивУдаляемыхКоманд Цикл
		Команды.Удалить(Команды.Найти(УдаляемаяКоманда));
	КонецЦикла;
	
	// Получить список состава монитора (показатель, тип, позиция)
	Если РежимАнализаВзаимосвязанных Тогда
		ХранилищеАдресовДинамическихПараметров = АдресаДинамическихПараметров; // ХранилищеЗначения
		АдресДинамическихПараметров = ХранилищеАдресовДинамическихПараметров.Получить();
	КонецЕсли;
	
	ЗаполнитьСводнуюИнформациюПоИсточникамДанных(СоставМонитора, АдресДинамическихПараметров);
	
	СоставМонитораНеопределен = (СоставМонитора.НаборИсточниковДанных = Неопределено);
	СоставМонитораПустойПоОтбору = (СоставМонитора.Пустой И Не СоставМонитораНеопределен);
	
	УстановитьВидимостьПредложенияДобавитьПоказателиВСоставМонитора(СоставМонитораНеопределен);
	УстановитьВидимостьСообщенияПустойРезультатОтбора(СоставМонитораПустойПоОтбору);
	
	Если Не СоставМонитораНеопределен И Не СоставМонитораПустойПоОтбору Тогда
		// Создать реквизиты формы по составу монитора
		// К имени элементов добавляется строка "__"+ID_Элемента, где
		// ID_Элемента = Показатель.УникальныйИдентификатор()
		НарисоватьЭлементыМонитора(СоставМонитора);
	КонецЕсли;
	
	ДоступныеОтчеты.Очистить();
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантОтчетаПоИдентификатору(Идентификатор)
	Перем ВариантОтчета;
	
	ВариантОтчета = МониторингЦелевыхПоказателейВызовСервера.ПолучитьСсылкуСправочникаПоИдентификатору(
		"ВариантыОтчетов", Идентификатор);
	
	Возврат ВариантОтчета;
КонецФункции

&НаСервере 
Функция ТекстЗапросаВариантовОтчетов()
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИдентификаторыМетаданных.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ИдентификаторыМетаданных
	|ИЗ
	|	Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыМетаданных
	|ГДЕ
	|	ИдентификаторыМетаданных.Ссылка В(&ДоступныеВариантыОтчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтчетыВариантовАнализа.ВариантОтчета КАК Ссылка,
	|	ВариантыОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВариантыАнализаЦелевыхПоказателей.ОтчетыДляРасшифровки КАК ОтчетыВариантовАнализа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО ОтчетыВариантовАнализа.ВариантОтчета = ВариантыОтчетов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИдентификаторыМетаданных КАК ИдентификаторыМетаданных
	|		ПО (ВариантыОтчетов.Отчет = ИдентификаторыМетаданных.Ссылка)
	|ГДЕ
	|	ОтчетыВариантовАнализа.Ссылка = &ВариантАнализа
	|	И НЕ ВариантыОтчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыОтчетов.Наименование";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция ПолучитьВариантыОтчетовПоказателя(ВариантАнализа)
	Перем ВариантыОтчетовПоказателя;
	
	ВариантыОтчетовПоказателя = Новый СписокЗначений;
	
	Если ДоступныеОтчеты.Количество() = 0 Тогда
		ДоступныеОтчеты.ЗагрузитьЗначения(Новый Массив(ВариантыОтчетовПовтИсп.ДоступныеОтчеты()));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВариантовОтчетов();
	Запрос.УстановитьПараметр("ДоступныеВариантыОтчетов", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("ВариантАнализа", ВариантАнализа);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаВариантов = РезультатЗапроса.Выбрать();
		Пока ВыборкаВариантов.Следующий() Цикл
			ВариантыОтчетовПоказателя.Добавить(
				СтрЗаменить(ВыборкаВариантов.Ссылка.УникальныйИдентификатор(), "-", "_"),
				ВыборкаВариантов.Наименование);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ВариантыОтчетовПоказателя;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторВариантаОтчета(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ДваИдентификатора = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	Идентификатор = Прав(ДваИдентификатора, СтрНайти(ДваИдентификатора, "__") - 1);
	
	Возврат Идентификатор;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторДинамическогоПараметра(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ДваИдентификатора = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	Идентификатор = Прав(ДваИдентификатора, СтрДлина(ДваИдентификатора) - СтрНайти(ДваИдентификатора, "__") - 1);
	
	Возврат Идентификатор;
КонецФункции

&НаКлиенте
Функция ПолучитьИдентификаторЭлементаПоИмениБезПозиции(ИмяЭлемента)
	Перем Идентификатор;
	
	Идентификатор = "";
	
	ИдентификаторСПозицией = Прав(ИмяЭлемента, СтрДлина(ИмяЭлемента) - СтрНайти(ИмяЭлемента, "__") - 1);
	Если СтрНайти(ИдентификаторСПозицией, "__") > 0 Тогда
		Идентификатор = Лев(ИдентификаторСПозицией, СтрНайти(ИдентификаторСПозицией, "__") - 1);
	Иначе
		Идентификатор = ИдентификаторСПозицией
	КонецЕсли;
	
	Возврат Идентификатор;
КонецФункции

&НаСервере
Функция ПолучитьСвойстваВариантаОтчета(ВариантОтчета)
	СвойстваВариантаОтчета = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	СвойстваВариантаОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВариантОтчета, "КлючВарианта, Отчет");
	СвойстваВариантаОтчета.Вставить("КлючОбъекта", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		СвойстваВариантаОтчета.Отчет, "ПолноеИмя"));
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СвойстваВариантаОтчета;
КонецФункции

&НаСервере
Функция ПолучитьСсылкуПеречисленияПоИдентификатору(ИмяОбъекта, Идентификатор)
	Перем ИскомаяСсылка;
	
	ИскомаяСсылка = Перечисления[ИмяОбъекта][Идентификатор];
	
	Возврат ИскомаяСсылка;
КонецФункции

&НаКлиенте
Функция ПолучитьЧистоеИмяКоманды(ИмяКоманды)
	Перем ЧистоеИмяКоманды;
	
	ЧистоеИмяКоманды = Лев(ИмяКоманды, СтрНайти(ИмяКоманды, "__") - 1);
	
	Возврат ЧистоеИмяКоманды;
КонецФункции

&НаСервере 
Процедура УстановитьВидимостьПредложенияДобавитьПоказателиВСоставМонитора(Видимость)
	Элементы.ГруппаПриПустомСоставеМонитора.Видимость = Видимость;
	ПостояннаяЧасть = НСтр("ru= 'Нет ни одного доступного для отображения варианта анализа.'"); 
	Если ПравоДоступа("Изменение", Метаданные.Справочники.ВариантыАнализаЦелевыхПоказателей) Тогда
		Элементы.ПояснениеЕслиМониторНеНастроен.Заголовок = ПостояннаяЧасть + Символы.ПС
			+ НСтр("ru= 'Для настройки используйте рабочее место ""Финансовый результат и контроллинг"" - ""Настройка доступности вариантов анализа"".'");
	Иначе
		Элементы.ПояснениеЕслиМониторНеНастроен.Заголовок = ПостояннаяЧасть + Символы.ПС
			+ НСтр("ru= 'Обратитесь к админитратору системы для настройки доступности вариантов анализа.'");
	КонецЕсли;
	Элементы.Печать.Доступность = Не Видимость;
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьСообщенияПустойРезультатОтбора(Видимость)
	Элементы.ГруппаПриПустомРезультатеОтбора.Видимость = Видимость;
КонецПроцедуры

&НаСервере 
Процедура ЗарегистрироватьПостоянныеКоманды()
	ПостоянныеКоманды.Добавить("ВключитьОтключитьДемонстрационныйРежим");
	ПостоянныеКоманды.Добавить("Изменить");
	ПостоянныеКоманды.Добавить("Обновить");
	ПостоянныеКоманды.Добавить("Печать");
	ПостоянныеКоманды.Добавить("СохранитьСнимокОтчета");
	ПостоянныеКоманды.Добавить("ОбновитьСнимкиОтчетов");
	ПостоянныеКоманды.Добавить("СнимкиОтчетов");
	ПостоянныеКоманды.Добавить("ПереместитьЭлементВверх");
	ПостоянныеКоманды.Добавить("ПереместитьЭлементВниз");
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьПользовательскийПараметр(Форма, ИмяПараметра, ЗначениеПараметра, ИспользованиеПараметра = Истина)

	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, ИмяПараметра, ЗначениеПараметра, ИспользованиеПараметра);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьДашбордПоУмолчанию(Дашборд)

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиМонитораЦелевыхПоказателей", "ДашбордПоУмолчанию",
		Дашборд, , ИмяПользователя());

КонецПроцедуры

&НаСервере
Функция РассчитатьШиринуЭлемента(КоличествоКолонок)

	Если ШиринаКолонок <> 0 Тогда
		Возврат ШиринаКолонок;
	КонецЕсли;
	
	ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
	
	ШиринаКолонок = Макс(30, Цел(ПараметрыЭкрана.Ширина / (16 * КоличествоКолонок)));
	
	Возврат ШиринаКолонок;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьКоличествоКолонокМонитораПоказателей()

	ШиринаЭлемента = 30;
	
	ПараметрыЭкрана = ОбщегоНазначенияКлиентСервер.ПараметрыЭкранаУстройства();
	
	Возврат Цел(ПараметрыЭкрана.Ширина / ШиринаЭлемента / 16);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПереместитьЭлемент(СсылкаНаОбъект, Вверх)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДашбордыМЦП.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &Вверх
	|			ТОГДА -ДашбордыМЦП.РеквизитДопУпорядочивания
	|		ИНАЧЕ ДашбордыМЦП.РеквизитДопУпорядочивания
	|	КОНЕЦ КАК РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.ДашбордыМЦП КАК ДашбордыМЦП
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Вверх
	|				ТОГДА ДашбордыМЦП.РеквизитДопУпорядочивания < &РеквизитДопУпорядочивания
	|			ИНАЧЕ ДашбордыМЦП.РеквизитДопУпорядочивания > &РеквизитДопУпорядочивания
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания");
	
	Запрос.УстановитьПараметр("Вверх", Вверх);
	Запрос.УстановитьПараметр("РеквизитДопУпорядочивания", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "РеквизитДопУпорядочивания"));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	НачатьТранзакцию();

	Попытка
		
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		ПеремещаемыйЭлемент = СсылкаНаОбъект.ПолучитьОбъект(); // СправочникОбъект.ДашбордыМЦП - 
		СоседнийЭлемент = Выборка.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ДашбордыМЦП -
		
		ПеремещаемыйЭлемент.РеквизитДопУпорядочивания = ПеремещаемыйЭлемент.РеквизитДопУпорядочивания + СоседнийЭлемент.РеквизитДопУпорядочивания;
		СоседнийЭлемент.РеквизитДопУпорядочивания     = ПеремещаемыйЭлемент.РеквизитДопУпорядочивания - СоседнийЭлемент.РеквизитДопУпорядочивания;
		ПеремещаемыйЭлемент.РеквизитДопУпорядочивания = ПеремещаемыйЭлемент.РеквизитДопУпорядочивания - СоседнийЭлемент.РеквизитДопУпорядочивания;
	
		УстановитьПривилегированныйРежим(Истина);
	
		ПеремещаемыйЭлемент.Записать();
		СоседнийЭлемент.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ДлительныеОперации

&НаСервере
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
КонецФункции

&НаКлиенте
Процедура ОбновитьСоставМонитораКлиент(ПринудительноОбновитьДанные = Ложь)
	
	ПараметрыСоставаМонитора = МониторингЦелевыхПоказателейКлиентСервер.ИнициализацияПараметровСоставаМонитора();
	
	Если РежимАнализаВзаимосвязанных Тогда
		ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = РежимАнализаВзаимосвязанных;
		ПараметрыСоставаМонитора.ВидПоиска 					  = Параметры.ВидПоиска;
		ПараметрыСоставаМонитора.СвойстваВариантаАнализа 	  = Параметры.ИдентификаторВариантаАнализа;
		ПараметрыСоставаМонитора.АдресаДинамическихПараметров = АдресаДинамическихПараметров;	
		ПараметрыСоставаМонитора.ОтборСтатус 			      = ОтборСтатус;
		ПараметрыСоставаМонитора.ПериодичностьКонтроля 		  = ПериодичностьКонтроля;
		ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
	Иначе
		ПараметрыСоставаМонитора.РежимАнализаВзаимосвязанных  = РежимАнализаВзаимосвязанных;
		ПараметрыСоставаМонитора.ОтборВариантовАнализа 		  = Неопределено;
		ПараметрыСоставаМонитора.ПринудительноОбновитьДанные  = ПринудительноОбновитьДанные;
		ПараметрыСоставаМонитора.СтруктураНастроек 			  = СтруктураНастроек;
		ПараметрыСоставаМонитора.ОтборСтатус 			      = ОтборСтатус;
		ПараметрыСоставаМонитора.ПериодичностьКонтроля 		  = ПериодичностьКонтроля;
		ПараметрыСоставаМонитора.УчитыватьВариантыОтображения = Истина;
	КонецЕсли;
	
	ПараметрыСоставаМонитора.ДемонстрационныйРежим			  = ДемонстрационныйРежим;
	
	ЗаданиеВыполнено = ЗаполнитьОтчетНаСервере(ПараметрыСоставаМонитора);
	Если ЗаданиеВыполнено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
	ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОтчетНаСервере(ПараметрыСоставаМонитора)
	
	ЗаданиеВыполнено = Ложь;
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения(ПараметрыСоставаМонитора, АдресХранилища);
		ЗагрузитьПодготовленныеДанные();
		ЗаданиеВыполнено = Истина;
	Иначе
		НаименованиеЗадания = НСтр("ru ='Заполнение отчета ""Монитор целевых показателей""'");
		
		ПараметрыЗаполнения = Новый Массив;
		ПараметрыЗаполнения.Добавить(ПараметрыСоставаМонитора);
		ПараметрыЗаполнения.Добавить(АдресХранилища);
		
		Задание = ФоновыеЗадания.Выполнить("МониторингЦелевыхПоказателей.ПодготовитьДанныеДляЗаполнения", 
			ПараметрыЗаполнения,, НаименованиеЗадания);
		Попытка
			Задание.ОжидатьЗавершенияВыполнения();
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Заполнение отчета ""Монитор целевых показателей""'", ОбщегоНазначения.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗаданиеВыполнено(Задание.УникальныйИдентификатор) Тогда
			ЗагрузитьПодготовленныеДанные();
			ЗаданиеВыполнено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Возврат;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал
		* ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
	ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
	Истина);
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Монитор") Тогда
		СформированныйСостав = Результат.Монитор;
		ОбновитьСоставМонитора(СформированныйСостав);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьДемонстрационныйРежим(Команда)
	Элементы[Команда.Имя].Пометка = Не Элементы[Команда.Имя].Пометка;
	ДемонстрационныйРежим = Не ДемонстрационныйРежим;
	
	Если Элементы[Команда.Имя].Пометка Тогда
		Заголовок = НСтр("ru= 'Демонстрационный режим'");
	Иначе
		Заголовок = "";
	КонецЕсли;
	
	ОбновитьСоставМонитораКлиент();
КонецПроцедуры

&НаСервере
Процедура СохранитьСнимокОтчетаПользователя()

	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Дашборд",
		СтруктураНастроек.Дашборд);

	НастройкиОтчета = Новый Структура;
	НастройкиОтчета.Вставить("ОтчетСсылка", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Отчеты.МониторЦелевыхПоказателей));
	НастройкиОтчета.Вставить("ВариантСсылка", СтруктураНастроек.Дашборд);
	НастройкиОтчета.Вставить("СвойстваРезультата", Новый Структура("КомпоновщикНастроек",
		ОтчетОбъект.КомпоновщикНастроек));

	РезультатОтчета = Новый ТабличныйДокумент;
	ОтчетОбъект.СкомпоноватьРезультат(РезультатОтчета);

	РегистрыСведений.СнимкиОтчетов.СохранитьСнимокОтчетаПользователя(РезультатОтчета, НастройкиОтчета);

КонецПроцедуры

&НаСервере
Функция ОбновитьСнимкиОтчетовПользователя()
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	ПараметрыЗаполнения.Вставить("ИмяСправочникаВариантыОтчетов", "ДашбордыМЦП");
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обновление снимков отчетов пользователя'");
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.СнимкиОтчетов.ОбновитьСнимкиОтчетовПользователя",
		ПараметрыЗаполнения, ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции	

#КонецОбласти

#КонецОбласти