#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Переменные

Перем мПолноеИмяФайлаВнешнейОбработки Экспорт;

Перем мВерсияОтчета Экспорт;

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Отчет не предназначен для интерактивного формирования
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеРегламентированногоОтчета

Процедура СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	СтруктураРеквизитовФормы = Новый Структура;
	
	Если ВРег(СокрЛП(ИмяФормы)) = ВРег("ФормаОтчета2021Кв3") Тогда
		СтруктураРеквизитовФормы.Вставить("мВерсияФормы", "01/07/" + Лев(Прав(СокрЛП(ИмяФормы), 7), 4));
	КонецЕсли;
	
	СтруктураРеквизитовФормы.Вставить("НаименованиеОтчета", "Уведомление об остатках товаров, подлежащих прослеживаемости");
	СтруктураРеквизитовФормы.Вставить("ФлажокОтклАвтоРасчет", Ложь);
	СтруктураРеквизитовФормы.Вставить("ОтображатьКнопкуЗаполнить", Ложь);
	СтруктураРеквизитовФормы.Вставить("АвтозаполняемыеПоказатели", Новый Структура);
	СтруктураРеквизитовФормы.Вставить("ВыводитьСтраницуВТаблДокНаСервере");
	СтруктураРеквизитовФормы.Вставить("НаимТекущегоРаздела");
	СтруктураРеквизитовФормы.Вставить("мАвтоВыборКодов");
	СтруктураРеквизитовФормы.Вставить("мБезОткрытияФормы");
	СтруктураРеквизитовФормы.Вставить("мЗаписываетсяНовыйДокумент");
	СтруктураРеквизитовФормы.Вставить("СписокПечатаемыхЛистов", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мПечатныеформы", Новый СписокЗначений);
	СтруктураРеквизитовФормы.Вставить("мРежимПечати");
	СтруктураРеквизитовФормы.Вставить("мСчетчикСтраниц");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГруппы");
	СтруктураРеквизитовФормы.Вставить("ДлинаИмениГрафы");
	СтруктураРеквизитовФормы.Вставить("ТочностьЕдиницыИзмерения");
	СтруктураРеквизитовФормы.Вставить("ВидДокумента");
	СтруктураРеквизитовФормы.Вставить("ЕдиницаИзмерения");
	СтруктураРеквизитовФормы.Вставить("мВариант");
	СтруктураРеквизитовФормы.Вставить("мСтрокаФормата");
	СтруктураРеквизитовФормы.Вставить("мВыбраннаяФорма");
	СтруктураРеквизитовФормы.Вставить("мДатаКонцаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мДатаНачалаПериодаОтчета");
	СтруктураРеквизитовФормы.Вставить("мСкопированаФорма");
	СтруктураРеквизитовФормы.Вставить("мСохраненныйДок");
	СтруктураРеквизитовФормы.Вставить("Организация");
	СтруктураРеквизитовФормы.Вставить("ИП");
	СтруктураРеквизитовФормы.Вставить("НаимОрганизации");
	СтруктураРеквизитовФормы.Вставить("СтрПериодОтчета");
	СтруктураРеквизитовФормы.Вставить("ТекущаяСтрокаРазделовОтчета");
	СтруктураРеквизитовФормы.Вставить("НомераСтрокМногоуровнегоРаздела");
	СтруктураРеквизитовФормы.Вставить("СтруктураМногострочныхЧастей");
	СтруктураРеквизитовФормы.Вставить("ИдентификаторЗадания");
	СтруктураРеквизитовФормы.Вставить("РезультатЗапускаАвтозаполненияПриСоздании");
	СтруктураРеквизитовФормы.Вставить("АдресВоВременномХранилище");
	СтруктураРеквизитовФормы.Вставить("ТекстДляЗаголовочнойЧасти");
	СтруктураРеквизитовФормы.Вставить("СформироватьФормуОтчетаАвтоматически");
	СтруктураРеквизитовФормы.Вставить("ТипКоличествоПрослеживаемогоТовара");
	
	// ПроцессыОбработкиДокументов
	//
	СтруктураРеквизитовФормы.Вставить("ПустаяСсылкаНаРегламентированныйОтчет");
	//
	// ПроцессыОбработкиДокументов
	
КонецПроцедуры

Процедура ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы) Экспорт
	
	// Свойства, общие для всех многострочных групп.
	СтруктураРеквизитовФормы.ДлинаИмениГруппы = 8;
	СтруктураРеквизитовФормы.ДлинаИмениГрафы  = 13;
	
	СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей = Новый Структура;
	
КонецПроцедуры

Процедура ИнициализироватьМногоуровневыеРазделы(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов) Экспорт
	
	СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела = Новый Массив;
	
	// Формирование структуры свойств многоуровневых разделов.
	//
	СтруктураМногоуровневыхРазделов = Новый Структура;
	
	СтруктураРаздела = Новый Структура;
	СтруктураМногоуровневыхРазделов.Вставить("Раздел1", СтруктураРаздела);
	
	// Формирование начальной структуры дерева разделов
	// с заполнением каждого уровня пустыми данными.
	//
	ДеревоДанных = Новый ДеревоЗначений;
	ДеревоДанных.Колонки.Добавить("Данные");
	ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для каждого Элем Из СтруктураМногоуровневыхРазделов Цикл
		Если Элем.Значение.Свойство("Подчиненность") Тогда
			Продолжить;
		КонецЕсли;
		
		ДеревоДанныхРаздела = ДеревоДанных.Скопировать();
		ТекВетка = ДеревоДанныхРаздела.Строки.Добавить();
		
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + Элем.Ключ));
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														Элем.Ключ,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		ИнициализироватьПодчиненныеРазделы(ИмяФормы,
										   Элем.Ключ,
										   ТекВетка,
										   СтруктураМногоуровневыхРазделов,
										   ТабличныйДокумент,
										   СтруктураРеквизитовФормы);
		
		Если НЕ СтруктураРеквизитовФормы.Свойство("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ) Тогда
			СтруктураРеквизитовФормы.Вставить("АдресВоВрХранилищеДеревоДанных" + Элем.Ключ, Неопределено);
		КонецЕсли;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + Элем.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеТабличногоДокумента(ИмяФормы,
								  НаимРаздела,
								  СтруктураМногоуровневыхРазделов,
								  ТабличныйДокумент,
								  СтруктураРеквизитовФормы) Экспорт
	
	ДанныеТаблДокумента = Новый Структура;
	
	// Многоуровневые разделы.
	//
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
		
		ИменаГруппМнЧ = Неопределено;
		СтруктураРаздела.Свойство("ИменаГруппМнЧ", ИменаГруппМнЧ);
		РазделСодержитМнЧ = (ИменаГруппМнЧ <> Неопределено);
		
		СтруктураДанных = Новый Структура();
		Для Каждого ТекущаяОбласть Из ТабличныйДокумент.Области Цикл
			Если СтрЧислоВхождений(Тип(ТекущаяОбласть), "Рисунок") = 0
				И ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекущаяОбласть.СодержитЗначение = Истина Тогда
				Если РазделСодержитМнЧ Тогда
					Если РегламентированнаяОтчетностьКлиентСервер.МногострочнаяЧастьТекущейОбласти(СтруктураРеквизитовФормы,
																					ТекущаяОбласть.Имя) = Неопределено Тогда
						СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
					КонецЕсли;
				Иначе
					СтруктураДанных.Вставить(ТекущаяОбласть.Имя, ТекущаяОбласть.Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ДанныеТаблДокумента.Вставить("Данные", СтруктураДанных);
		
		СтруктураДанныхМногострочныхЧастей = Новый Структура;
		Если РазделСодержитМнЧ Тогда
			Для каждого ИмяГруппыМнЧ Из СтруктураРаздела["ИменаГруппМнЧ"] Цикл
				ЭлемСтруктуры = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппыМнЧ];
				Если ЭлемСтруктуры["УровеньПодчинения"] = 0 Тогда
					ДеревоДанных = Новый ДеревоЗначений;
					ДеревоДанных.Колонки.Добавить("Данные");
					ДеревоДанных.Колонки.Добавить("ДанныеМногострочныхЧастей");
					СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
						ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяГруппыМнЧ, ДеревоДанных);
					СтруктураДанныхМногострочныхЧастей.Вставить(ИмяГруппыМнЧ, ДеревоДанных);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ДанныеТаблДокумента.Вставить("ДанныеМногострочныхЧастей", СтруктураДанныхМногострочныхЧастей);
		
	// Обычные разделы.
	//
	Иначе
		
		Для Инд = 0 По ТабличныйДокумент.Области.Количество() - 1 Цикл
			
			ТекОбласть = ТабличныйДокумент.Области[Инд];
			
			Если СтрЧислоВхождений(Тип(ТекОбласть), "Рисунок") = 0
				И ТекОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник
				И ТекОбласть.СодержитЗначение = Истина Тогда
				
				ДанныеТаблДокумента.Вставить(ТекОбласть.Имя, ТекОбласть.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеТаблДокумента;
	
КонецФункции

Процедура ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											 Знач ИмяРаздела,
											 Ветка,
											 СтруктураМногоуровневыхРазделов,
											 ТабличныйДокумент,
											 СтруктураРеквизитовФормы) Экспорт
	
	Если СтруктураМногоуровневыхРазделов[ИмяРаздела].Свойство("ИменаПодчиненныхРазделов") Тогда
		
		ИменаПодчРазделов = СтруктураМногоуровневыхРазделов[ИмяРаздела]["ИменаПодчиненныхРазделов"];
		Для каждого ИмяПодчРаздела Из ИменаПодчРазделов Цикл
			ПодчВетка = Ветка.Строки.Добавить().Строки.Добавить();
			
			ТабличныйДокумент.Очистить();
			ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяПодчРаздела));
			
			ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
															ИмяПодчРаздела,
															СтруктураМногоуровневыхРазделов,
															ТабличныйДокумент,
															СтруктураРеквизитовФормы);
									
			ПодчВетка.Данные = ДанныеТаблДокумента.Данные;
			ПодчВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
			
			ИнициализироватьПодчиненныеРазделы(ИмяФормы,
											   ИмяПодчРаздела,
											   ПодчВетка,
											   СтруктураМногоуровневыхРазделов,
											   ТабличныйДокумент,
											   СтруктураРеквизитовФормы);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьОбычныеРазделы(ИмяФормы,
 										 СтруктураРеквизитовФормы,
							 			 СтруктураМногоуровневыхРазделов,
								 		 СтруктураДанныхРазделов,
										 МассивИменРазделов = Неопределено) Экспорт
	
	Если МассивИменРазделов = Неопределено Тогда
		
		МассивИменРазделов = Новый Массив;
		МассивИменРазделов.Добавить("Титульный");
		
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ИмяРаздела Из МассивИменРазделов Цикл
				
		ТабличныйДокумент.Очистить();
		ТабличныйДокумент.Вывести(ЭтотОбъект.ПолучитьМакет(ИмяФормы + "_" + ИмяРаздела));
		
		СохранитьДанныеРаздела(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   СтруктураДанныхРазделов,
							   ТабличныйДокумент,
							   ИмяРаздела);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура СохранитьДанныеРаздела(ИмяФормы,
								 СтруктураРеквизитовФормы,
								 СтруктураМногоуровневыхРазделов,
								 СтруктураДанныхРазделов,
								 ТабличныйДокумент,
								 НаимРаздела,
								 ВеткаРаздела = Неопределено) Экспорт
	
	// Многоуровневые разделы.
	Если СтруктураМногоуровневыхРазделов.Свойство(НаимРаздела) Тогда
		
		Если ВеткаРаздела = Неопределено Тогда
			
			СтруктураРаздела = СтруктураМногоуровневыхРазделов[НаимРаздела];
			
			ИмяГлРаздела = Неопределено;
			СтруктураРаздела.Свойство("ИмяГлавногоРаздела", ИмяГлРаздела);
			ИмяГлРаздела = ?(ИмяГлРаздела = Неопределено, НаимРаздела, ИмяГлРаздела);
			
			ДеревоДанныхРаздела = ПолучитьИзВременногоХранилища(
				СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
			
			ТекВетка = ДеревоДанныхРаздела;
			
			Для Каждого НомерСтроки Из СтруктураРеквизитовФормы.НомераСтрокМногоуровнегоРаздела Цикл
				ТекВетка = ТекВетка.Строки[НомерСтроки - 1];
			КонецЦикла;
			
		Иначе
			
			ТекВетка = ВеткаРаздела;
			
		КонецЕсли;
		
		ДанныеТаблДокумента = ДанныеТабличногоДокумента(ИмяФормы,
														НаимРаздела,
														СтруктураМногоуровневыхРазделов,
														ТабличныйДокумент,
														СтруктураРеквизитовФормы);
		
		ТекВетка.Данные = ДанныеТаблДокумента.Данные;
		ТекВетка.ДанныеМногострочныхЧастей = ДанныеТаблДокумента.ДанныеМногострочныхЧастей;
		
		РегламентированнаяОтчетность.ПоместитьВКэш(ДеревоДанныхРаздела, Новый УникальныйИдентификатор,
		СтруктураРеквизитовФормы["АдресВоВрХранилищеДеревоДанных" + ИмяГлРаздела]);
		
		ДеревоДанныхРаздела = Неопределено;
		
	// Обычные разделы.
	Иначе
		
		СтруктураДанныхРазделов["СтруктураДанных" + НаимРаздела]
			= ДанныеТабличногоДокумента(ИмяФормы,
										НаимРаздела,
		 						  		СтруктураМногоуровневыхРазделов,
										ТабличныйДокумент,
										СтруктураРеквизитовФормы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураСтраницОтчета(ИмяФормы) Экспорт
	
	ДеревоСтраницОтчета = Новый ДеревоЗначений;
	
	ДеревоСтраницОтчета.Колонки.Добавить("Представление",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяСтраницы",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяПоляТабличногоДокум",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ИмяОбластиТабличногоПоля",
		Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
	ДеревоСтраницОтчета.Колонки.Добавить("ОриентацияСтраницы");
	ДеревоСтраницОтчета.Колонки.Добавить("ВыводНаПечать",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ПоказатьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));
	ДеревоСтраницОтчета.Колонки.Добавить("ВыгрузитьСтраницу",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1, 0)));	
		
	ДеревоСтраницОтчета.Строки.Очистить();
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Титульный";
	СтрокаУровня1.Представление      = "Титульный лист";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	СтрокаУровня1 = ДеревоСтраницОтчета.Строки.Добавить();
	СтрокаУровня1.ИмяСтраницы        = "Раздел1";
	СтрокаУровня1.Представление      = "Сведения об остатках";
	СтрокаУровня1.ОриентацияСтраницы = "Ландшафт";
	СтрокаУровня1.ВыводНаПечать      = 0;
	СтрокаУровня1.ПоказатьСтраницу   = 1;
	СтрокаУровня1.ВыгрузитьСтраницу  = 2;
	
	Возврат ДеревоСтраницОтчета;
	
КонецФункции

Функция СтруктураДанныхРазделов(ИмяФормы) Экспорт
	
	СтруктураДанныхРазделов = Новый Структура;
	
	СтруктураДанныхРазделов.Вставить("СтруктураДанныхТитульный", Новый Структура);
	
	Возврат СтруктураДанныхРазделов;
	
КонецФункции	

Процедура ЗаполнитьЗначенияПоУмолчанию(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураДанныхРазделов) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОбОрганизации(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 ДатаПодписи,
										 СтруктураДанныхТитульный,
										 СтруктураДанныхФизЛицо = Неопределено,
										 ВПрограммеИзмененаДатаПодписи = Ложь) Экспорт
	
	Если НЕ ВПрограммеИзмененаДатаПодписи Тогда
		
		СтрокаСведений = "ИННЮЛ, КППЮЛ, НаимЮЛПол, КодНО, ФИО";
		
		СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		СтруктураРеквизитовФормы.Организация, ДатаПодписи, СтрокаСведений);
		
		ИНН = СокрЛП(СведенияОбОрганизации.ИННЮЛ);
		КПП = СокрЛП(СведенияОбОрганизации.КППЮЛ);
		
		КодНО = СведенияОбОрганизации.КодНО;
		Для Инд = СтрДлина(СведенияОбОрганизации.КодНО) + 1 По 4 Цикл
			КодНО = " " + КодНО;
		КонецЦикла;
		
		Если СтруктураРеквизитовФормы.ИП Тогда
			НаименованиеОрганизации = СведенияОбОрганизации.ФИО;
		Иначе
			НаименованиеОрганизации = СведенияОбОрганизации.НаимЮлПол;
		КонецЕсли;
		
		Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
			
			СтруктураДанныхТитульный.Области.ИНН.Значение = ИНН;
			СтруктураДанныхТитульный.Области.КПП.Значение = КПП;
			
			СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение = КодНО;
			
			СтруктураДанныхТитульный.Области.НаимОрг.Значение = СокрЛП(НаименованиеОрганизации);
		
			СтруктураДанныхТитульный.Области.ДатаПодписи.Значение = ДатаПодписи;
			
		ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
			
			СтруктураДанныхТитульный.ИНН = ИНН;
			СтруктураДанныхТитульный.КПП = КПП;
			
			СтруктураДанныхТитульный.НалоговыйОрган = КодНО;
			
			СтруктураДанныхТитульный.НаимОрг = СокрЛП(НаименованиеОрганизации);
		
			СтруктураДанныхТитульный.ДатаПодписи = ДатаПодписи;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьСведенияОПодписантах(ИмяФормы,
								  СтруктураРеквизитовФормы,
								  СтруктураДанныхТитульный,
								  ДатаПодписи);
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОПодписантах(ИмяФормы,
										СтруктураРеквизитовФормы,
										СтруктураДанныхТитульный,
										ДатаПодписи) Экспорт
	
	ТипПодписанта = "1";
	Подписант = "";
	НаименованиеОрганизацииПредставителя = "";
	ДокументПредставителя = "";
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		КодНО = СокрЛП(СтруктураДанныхТитульный.Области.НалоговыйОрган.Значение);
		КПП = СокрЛП(СтруктураДанныхТитульный.Области.КПП.Значение);
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		КодНО = СокрЛП(СтруктураДанныхТитульный.НалоговыйОрган);
		КПП = СокрЛП(СтруктураДанныхТитульный.КПП);
	КонецЕсли;
	
	СведенияОПредставителе = РегламентированнаяОтчетностьВызовСервера.ПолучитьПоКодамСведенияОПредставителе(
		СтруктураРеквизитовФормы.Организация, КодНО, КПП);
	
	ТипПодписанта = СведенияОПредставителе.ТипПодписанта;
	
	Если ТипПодписанта = "1" Тогда
		// Представителя нет.
		Если РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураРеквизитовФормы.Организация) Тогда
			// Подписант - руководитель.
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИОРук, ФИО");
			Подписант = СокрЛП(?(ЗначениеЗаполнено(СведенияОбОрганизации.ФИОРук),
				СведенияОбОрганизации.ФИОРук, СведенияОбОрганизации.ФИО));
		Иначе
			СведенияОбОрганизации = РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
				СтруктураРеквизитовФормы.Организация, ДатаПодписи, "ФИО");
			Подписант = СокрЛП(СведенияОбОрганизации.ФИО);
		КонецЕсли;
	Иначе
		// Подписант - представитель.
		Подписант = СведенияОПредставителе.ФИОПредставителя;
		НаименованиеОрганизацииПредставителя = СведенияОПредставителе.НаименованиеОрганизацииПредставителя;
		ДокументПредставителя = СведенияОПредставителе.ДокументПредставителя;
	КонецЕсли;
	
	ФИОПодписанта = РегламентированнаяОтчетность.РазложитьФИО(Подписант);
	
	Если ТипЗнч(СтруктураДанныхТитульный) = Тип("ТабличныйДокумент") Тогда
		
		СтруктураДанныхТитульный.Области.ПрПодп.Значение    = ТипПодписанта;
		СтруктураДанныхТитульный.Области.ОргУп.Значение     = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.Области.ДокУпПред.Значение = ДокументПредставителя;
		
		СтруктураДанныхТитульный.Области.ОргПодписантФамилия.Значение  = ФИОПодписанта.Фамилия;
		СтруктураДанныхТитульный.Области.ОргПодписантИмя.Значение      = ФИОПодписанта.Имя;
		СтруктураДанныхТитульный.Области.ОргПодписантОтчество.Значение = ФИОПодписанта.Отчество;
		
	ИначеЕсли ТипЗнч(СтруктураДанныхТитульный) = Тип("Структура") Тогда
		
		СтруктураДанныхТитульный.ПрПодп    = ТипПодписанта;
		СтруктураДанныхТитульный.ОргУп     = НаименованиеОрганизацииПредставителя;
		СтруктураДанныхТитульный.ДокУпПред = ДокументПредставителя;
		
		СтруктураДанныхТитульный.ОргПодписантФамилия  = ФИОПодписанта.Фамилия;
		СтруктураДанныхТитульный.ОргПодписантИмя      = ФИОПодписанта.Имя;
		СтруктураДанныхТитульный.ОргПодписантОтчество = ФИОПодписанта.Отчество;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(ИмяФормы,
																		  СтруктураРеквизитовФормы,
																		  ТабличныйДокумент,
																		  ИмяГруппы,
																		  ДеревоДанных,
																		  Координаты = "")
	
	Если НЕ СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей.Свойство(ИмяГруппы) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменГраф = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаГраф"];
	ИмяПервойГрафы = МассивИменГраф[0];
	
	Инд_Число = 1;
	Пока ТабличныйДокумент.Области.Найти(ИмяПервойГрафы + Координаты
		+ РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число)) <> Неопределено Цикл
		НовВетка = ДеревоДанных.Строки.Добавить();
		
		// Заполнение данными из текущей строки многострочной части.
		Данные = Новый Структура;
		Инд = РегламентированнаяОтчетностьКлиентСервер.СтрокаСИндексомПоказателя(Инд_Число);
		Для каждого ИмяГрафы Из МассивИменГраф Цикл
			Обл = ТабличныйДокумент.Области.Найти(ИмяГрафы + Координаты + Инд);
			Если Обл <> Неопределено Тогда
				Данные.Вставить(ИмяГрафы, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		НовВетка.Данные = Данные;
		
		// Заполнение данными из строк многострочных частей, подчиненных текущей строке многострочной части.
		ДанныеМногострочныхЧастей = Новый Структура;
		ИменаПодчГрупп = СтруктураРеквизитовФормы.СтруктураМногострочныхЧастей[ИмяГруппы]["ИменаПодчиненныхГрупп"];
		Для каждого ИмяПодчГруппы Из ИменаПодчГрупп Цикл
			ДеревоПодчСтрок = Новый ДеревоЗначений;
			ДеревоПодчСтрок.Колонки.Добавить("Данные");
			ДеревоПодчСтрок.Колонки.Добавить("ДанныеМногострочныхЧастей");
			ПодчКоординаты = Координаты + Инд;
			СформироватьДеревоМногострочнойЧастиПоДаннымТабличногоДокумента(
			 ИмяФормы, СтруктураРеквизитовФормы, ТабличныйДокумент, ИмяПодчГруппы, ДеревоПодчСтрок, ПодчКоординаты);
			ДанныеМногострочныхЧастей.Вставить(ИмяПодчГруппы, ДеревоПодчСтрок);
		КонецЦикла;
		НовВетка.ДанныеМногострочныхЧастей = ДанныеМногострочныхЧастей;
		
		Инд_Число = Инд_Число + 1;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ВыгрузкаРегламентированногоОтчета

Функция УниверсальнаяВыгрузка(Параметры) Экспорт
	
	Перем ДанныеОтчета;
	Перем СтруктураРеквизитовФормы;
	Перем СтруктураМногоуровневыхРазделов;
	Перем СтруктураКонтейнераДанных;
	
	РезультатВыгрузки = Параметры.РезультатВыгрузки;
	
	Если Параметры.Свойство("СтруктураКонтейнераДанных", СтруктураКонтейнераДанных) Тогда
		
		ИмяФормы = СтруктураКонтейнераДанных.ВыбраннаяФорма;
		
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		
		СтруктураРеквизитовФормы.Вставить("СтруктураКонтейнераДанных", СтруктураКонтейнераДанных);
		СтруктураРеквизитовФормы.Вставить("Организация", СтруктураКонтейнераДанных.Организация);
		СтруктураРеквизитовФормы.Вставить("ИП", ЗначениеЗаполнено(СтруктураКонтейнераДанных.Организация)
		И НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(СтруктураКонтейнераДанных.Организация));
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		СтруктураДанныхРазделов = СтруктураДанныхРазделов(ИмяФормы);
		
		ИнициализироватьОбычныеРазделы(ИмяФормы, СтруктураРеквизитовФормы,
		СтруктураМногоуровневыхРазделов, СтруктураДанныхРазделов);
		
		ДанныеОтчета = Новый Структура;
		ДанныеОтчета.Вставить("Титульный", СтруктураДанныхРазделов.СтруктураДанныхТитульный);
		
		Если ЗначениеЗаполнено(СтруктураКонтейнераДанных.Организация) Тогда
			
			ЗаполнитьСведенияОбОрганизации(ИмяФормы, СтруктураРеквизитовФормы,
			СтруктураКонтейнераДанных.ДатаПодписи, ДанныеОтчета.Титульный);
			
			ЗначПоУмолчанию_НалоговыйОрган = ДанныеОтчета.Титульный.НалоговыйОрган;
			ЗначПоУмолчанию_КПП            = ДанныеОтчета.Титульный.КПП;
			
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Титульный, СтруктураКонтейнераДанных);
			
			Если НЕ СтруктураРеквизитовФормы.ИП
				И НЕ (ЗначениеЗаполнено(СтруктураКонтейнераДанных.НалоговыйОрган)
				И ЗначениеЗаполнено(СтруктураКонтейнераДанных.КПП)) Тогда
				
				ДанныеОтчета.Титульный.НалоговыйОрган = ЗначПоУмолчанию_НалоговыйОрган;
				ДанныеОтчета.Титульный.КПП            = ЗначПоУмолчанию_КПП;
				
			ИначеЕсли СтруктураРеквизитовФормы.ИП
				И НЕ ЗначениеЗаполнено(СтруктураКонтейнераДанных.НалоговыйОрган) Тогда
				
				ДанныеОтчета.Титульный.НалоговыйОрган = ЗначПоУмолчанию_НалоговыйОрган;
				
			Иначе
				
				ЗаполнитьСведенияОПодписантах(ИмяФормы, СтруктураРеквизитовФормы,
				ДанныеОтчета.Титульный, СтруктураКонтейнераДанных.ДатаПодписи);
				
			КонецЕсли;
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ДанныеОтчета.Титульный, СтруктураКонтейнераДанных);
			
		КонецЕсли;
		
	Иначе
		
		ИмяФормы = Параметры.ВыбраннаяФорма;
		
		СформироватьСтруктуруРеквизитовФормы(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногострочныеЧасти(ИмяФормы, СтруктураРеквизитовФормы);
		
		ИнициализироватьМногоуровневыеРазделы(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
		СтруктураРеквизитовФормы.мСохраненныйДок = Параметры.СохраненныйОтчет;
		
		СформироватьСтруктуруПоказателей(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		
	КонецЕсли;
	
	ПараметрыВыгрузки = СформироватьСтруктуруПараметров(ИмяФормы, ДанныеОтчета, СтруктураРеквизитовФормы);
	
	ДеревоВыгрузки = ИзвлечьСтруктуруXML(ИмяФормы);
	
	Если НЕ ПроверитьВозможностьВыгрузки(ИмяФормы,
										 ПараметрыВыгрузки,
										 ДеревоВыгрузки,
										 РезультатВыгрузки,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов) Тогда
		
		РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Ложь);
		
		Возврат РезультатВыгрузки;
		
	КонецЕсли;
	
	ЗаполнитьДанными(ИмяФормы,
					 ДанныеОтчета,
					 ПараметрыВыгрузки,
					 ДеревоВыгрузки,
					 РезультатВыгрузки,
					 СтруктураРеквизитовФормы,
					 СтруктураМногоуровневыхРазделов);
	
	КодировкаФайлаВыгрузки = "windows-1251";
	
	ТекстФайлаВыгрузки = ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаФайлаВыгрузки);
	ЗаписьТекста.Записать(ТекстФайлаВыгрузки);
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	ФайлВыгрузки = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ФайлВыгрузки, Новый УникальныйИдентификатор);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	РезультатВыгрузки.Вставить("ИмяФайлаВыгрузки", ПараметрыВыгрузки.ИдФайл + ".xml");
	РезультатВыгрузки.Вставить("АдресФайлаВыгрузки", АдресВоВременномХранилище);
	РезультатВыгрузки.Вставить("КодировкаФайлаВыгрузки", КодировкаФайлаВыгрузки);
	РезультатВыгрузки.Вставить("ТипФайлаВыгрузки", "ПрослеживаемыеТоварыОстатки");
	РезультатВыгрузки.Вставить("РеглОтчетВыгружен", Истина);
	
	Возврат РезультатВыгрузки;
	
КонецФункции

Процедура СформироватьСтруктуруПоказателей(ИмяФормы,
										   ДанныеОтчета,
										   СтруктураРеквизитовФормы,
										   СтруктураМногоуровневыхРазделов) Экспорт
	
	ДанныеОтчета = Новый Структура;
	
	СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
											СтруктураРеквизитовФормы,
											СтруктураМногоуровневыхРазделов);
	
	ПоказателиОтчета = СохрСтруктура.ПоказателиОтчета;
	
	Для Каждого Раздел Из ПоказателиОтчета Цикл
		
		ДанныеОтчета.Вставить(СтрЗаменить(Раздел.Ключ, "ПолеТабличногоДокумента", ""),
			РегламентированнаяОтчетность.СвернутьДанныеТабличногоПоля(Раздел.Значение));
			
	КонецЦикла;
		
	Для Каждого Раздел Из СтруктураМногоуровневыхРазделов Цикл
		
		ДанныеОтчета.Вставить(Раздел.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СохраненныеДанныеОтчета(ИмяФормы,
								СтруктураРеквизитовФормы,
								СтруктураМногоуровневыхРазделов) Экспорт
		
	СохраненныеДанныеОтчета = СтруктураРеквизитовФормы.мСохраненныйДок.ДанныеОтчета.Получить();
	
	Если СохраненныеДанныеОтчета.Свойство("ОкружениеСохранения") Тогда
		ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
														  СохраненныеДанныеОтчета,
														  СтруктураРеквизитовФормы,
														  СтруктураМногоуровневыхРазделов);
	КонецЕсли;
	
	Возврат СохраненныеДанныеОтчета;
	
КонецФункции

Функция СформироватьСтруктуруПараметров(ИмяФормы,
										ДанныеОтчета,
										СтруктураРеквизитовФормы) Экспорт
	
	Титульный = ДанныеОтчета.Титульный;
	
	ПараметрыВыгрузки = Новый Структура;
	
	Если ТекущаяДатаСеанса() >= ДатаПримененияФормыВНовойРедакции() Тогда
		ПараметрыВыгрузки.Вставить("ВерсФорм", "5.02");
	Иначе
		ПараметрыВыгрузки.Вставить("ВерсФорм", "5.01");
	КонецЕсли;
	
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		
		ИндивидуальныйПредприниматель = СтруктураРеквизитовФормы.ИП;
		ПараметрыВыгрузки.Вставить("НомКорр", Строка(Титульный.НомерКорректировки));
		ПараметрыВыгрузки.Вставить("КодНОПосредника",
		?(СтруктураРеквизитовФормы.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.Организация.КодНалоговогоОрганаПолучателя), ""));
		
	Иначе
		
		ИндивидуальныйПредприниматель = НЕ РегламентированнаяОтчетностьВызовСервера.ЭтоЮридическоеЛицо(
										СтруктураРеквизитовФормы.мСохраненныйДок.Организация);
		ПараметрыВыгрузки.Вставить("НомКорр", Строка(СтруктураРеквизитовФормы.мСохраненныйДок.Вид));
		ПараметрыВыгрузки.Вставить("КодНОПосредника",
		?(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КрупнейшийНалогоплательщик,
		СокрЛП(СтруктураРеквизитовФормы.мСохраненныйДок.Организация.КодНалоговогоОрганаПолучателя), ""));
		
	КонецЕсли;
	
	ПараметрыВыгрузки.Вставить("ЭтоЮЛ", НЕ ИндивидуальныйПредприниматель);
	ПараметрыВыгрузки.Вставить("ЭтоПБОЮЛ", ИндивидуальныйПредприниматель);
	
	ПараметрыВыгрузки.Вставить("ВерсПрог", РегламентированнаяОтчетность.НазваниеИВерсияПрограммы());
	ПараметрыВыгрузки.Вставить("НомУвед",  СокрЛП(Титульный.НомерУведомления));
	ПараметрыВыгрузки.Вставить("ДатаУведомления", Титульный.ДатаУведомления);
	ПараметрыВыгрузки.Вставить("ДатаУвед", Формат(Титульный.ДатаУведомления, "ДФ=дд.ММ.гггг"));
	
	ПараметрыВыгрузки.Вставить("ПризнакУведомления", СокрЛП(Титульный.ПризнакУведомления));
	ПараметрыВыгрузки.Вставить("ИННПродавца",        СокрЛП(Титульный.ИННПродавца));
	
	ПараметрыВыгрузки.Вставить("КодНО", СокрЛП(Титульный.НалоговыйОрган));
	
	ПараметрыВыгрузки.Вставить("НаимОрг", СокрЛП(Титульный.НаимОрг));
	ПараметрыВыгрузки.Вставить("ИНН",     СокрЛП(Титульный.ИНН));
	ПараметрыВыгрузки.Вставить("КПП",     СокрЛП(Титульный.КПП));
	
	ПараметрыВыгрузки.Вставить("ФормРеорг", СокрЛП(Титульный.КодФормыРеорганизации));
	ПараметрыВыгрузки.Вставить("ИННРеорг",  СокрЛП(Титульный.ИННРеорганизованнойОрганизации));
	ПараметрыВыгрузки.Вставить("КППРеорг",  СокрЛП(Титульный.КППРеорганизованнойОрганизации));
	
	ФИОИП = РегламентированнаяОтчетность.РазложитьФИО(Титульный.НаимОрг);
	ПараметрыВыгрузки.Вставить("Фамилия",  ФИОИП.Фамилия);
	ПараметрыВыгрузки.Вставить("Имя",      ФИОИП.Имя);
	ПараметрыВыгрузки.Вставить("Отчество", ФИОИП.Отчество);
	
	ПараметрыВыгрузки.Вставить("ПрПодп",      СокрЛП(Титульный.ПрПодп));
	ПараметрыВыгрузки.Вставить("НаимОргПред", СокрЛП(Титульный.ОргУп));
	ПараметрыВыгрузки.Вставить("НаимДокПред", СокрЛП(Титульный.ДокУпПред));
	
	ПараметрыВыгрузки.Вставить("ФамилияПодписанта",  СокрЛП(Титульный.ОргПодписантФамилия));
	ПараметрыВыгрузки.Вставить("ИмяПодписанта",      СокрЛП(Титульный.ОргПодписантИмя));
	ПараметрыВыгрузки.Вставить("ОтчествоПодписанта", СокрЛП(Титульный.ОргПодписантОтчество));
	
	ПараметрыВыгрузки.Вставить("ИмяКлючевогоУзлаСодержательнойЧасти", "УведОстатТов");
	
	ПараметрыВыгрузки.Вставить("ИдФайл", ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, "ON_UVOSTTOV"));
	
	Возврат ПараметрыВыгрузки;
	
КонецФункции

Функция ИзвлечьСтруктуруXML(ИмяФормы) Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Формат");
	ДеревоСтруктуры.Колонки.Добавить("МинРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("МаксРазмерность");
	ДеревоСтруктуры.Колонки.Добавить("Обязательность");
	ДеревоСтруктуры.Колонки.Добавить("Многостраничность");
	ДеревоСтруктуры.Колонки.Добавить("Многострочность");
	ДеревоСтруктуры.Колонки.Добавить("Раздел");
	ДеревоСтруктуры.Колонки.Добавить("Ключ");
	ДеревоСтруктуры.Колонки.Добавить("Условие");
	ДеревоСтруктуры.Колонки.Добавить("ЗначениеПоУмолчанию");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	ДеревоСтруктуры.Колонки.Добавить("Представление");
	ДеревоСтруктуры.Колонки.Добавить("Показатели");
	
	Макет = ЭтотОбъект.ПолучитьМакет("СхемаВыгрузки502");
	
	ВысотаТаблицы = Макет.ВысотаТаблицы;
	
	УчтенныеГруппы = Новый Соответствие;
	
	Для Уровень = 0 По Макет.КоличествоУровнейГруппировокСтрок() - 1 Цикл
		Макет.ПоказатьУровеньГруппировокСтрок(Уровень);
		Для НомерСтроки = 2 По ВысотаТаблицы Цикл
			НомСтр = ВысотаТаблицы - НомерСтроки + 2;
			Если Макет.Область(НомСтр, 0, НомСтр, 0).Видимость И УчтенныеГруппы.Получить(НомСтр) = Неопределено Тогда
				
				РодительскийУзел = ДеревоСтруктуры;
				Если Уровень <> 0 Тогда
					Для Инд = 1 По НомСтр - 2 Цикл
						Узел = УчтенныеГруппы.Получить(НомСтр - Инд);
						Если Узел <> Неопределено Тогда
							РодительскийУзел = Узел;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				НовСтр = РодительскийУзел.Строки.Вставить(0);
				НовСтр.Код = СокрЛП(Макет.Область(НомСтр, 1, НомСтр, 1).Текст);
				НовСтр.Раздел = СокрЛП(Макет.Область(НомСтр, 2, НомСтр, 2).Текст);
				НовСтр.Ключ = СокрЛП(Макет.Область(НомСтр, 3, НомСтр, 3).Текст);
				НовСтр.Тип = СокрЛП(Макет.Область(НомСтр, 4, НомСтр, 4).Текст);
				НовСтр.Формат = СокрЛП(Макет.Область(НомСтр, 5, НомСтр, 5).Текст);
				МинРазмерность = СокрЛП(Макет.Область(НомСтр, 6, НомСтр, 6).Текст);
				НовСтр.МинРазмерность = ?(ПустаяСтрока(МинРазмерность), ?(НовСтр.Формат = "N", 99999, 0), Число(МинРазмерность));
				МаксРазмерность = СокрЛП(Макет.Область(НомСтр, 7, НомСтр, 7).Текст);
				НовСтр.МаксРазмерность = ?(ПустаяСтрока(МаксРазмерность), 99999, Число(МаксРазмерность));
				НовСтр.Обязательность = СокрЛП(Макет.Область(НомСтр, 8, НомСтр, 8).Текст);
				НовСтр.Многостраничность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 9, НомСтр, 9).Текст);
				НовСтр.Многострочность = НЕ ПустаяСтрока(Макет.Область(НомСтр, 10, НомСтр, 10).Текст);
				НовСтр.Условие = СокрЛП(Макет.Область(НомСтр, 11, НомСтр, 11).Текст);
				НовСтр.ЗначениеПоУмолчанию = СокрЛП(Макет.Область(НомСтр, 12, НомСтр, 12).Текст);
				НовСтр.Представление = СокрЛП(Макет.Область(НомСтр, 13, НомСтр, 13).Текст);
				
				УчтенныеГруппы.Вставить(НомСтр, НовСтр);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПроверитьВозможностьВыгрузки(ИмяФормы,
								  	 ПараметрыВыгрузки,
									 ДеревоВыгрузки,
									 РезультатВыгрузки,
								 	 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов) Экспорт
	
	СтатусПроверки = Истина;
	
	// Титульный лист.
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан ИНН организации", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 10 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан ИНН организации, не состоящий из 10 цифр", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КПП) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан КПП организации", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.КПП) <> 9 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан КПП организации, не состоящий из 9 символов", "Титульный", "КПП");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимОрг) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано наименование организации", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		ВозможныеКодыФормыРеорганизции = Новый Массив;
		ВозможныеКодыФормыРеорганизции.Добавить("1");
		ВозможныеКодыФормыРеорганизции.Добавить("2");
		ВозможныеКодыФормыРеорганизции.Добавить("3");
		ВозможныеКодыФормыРеорганизции.Добавить("5");
		ВозможныеКодыФормыРеорганизции.Добавить("6");
		ВозможныеКодыФормыРеорганизции.Добавить("0");
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг)
			ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННРеорг) ИЛИ ЗначениеЗаполнено(ПараметрыВыгрузки.КППРеорг) Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФормРеорг) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код формы реорганизации (ликвидации)",
				"Титульный", "КодФормыРеорганизации");
				СтатусПроверки = Ложь;
			ИначеЕсли ПараметрыВыгрузки.ФормРеорг <> "0" Тогда
				Если ВозможныеКодыФормыРеорганизции.Найти(ПараметрыВыгрузки.ФормРеорг) = Неопределено Тогда
					СообщитьВТС(ИмяФормы, РезультатВыгрузки,
					"Задано некорректное значение кода формы реорганизации (ликвидации). Возможны значения: 0, 1, 2, 3, 5, 6",
					"Титульный", "КодФормыРеорганизации");
					СтатусПроверки = Ложь;
				Иначе
					ДлинаИННРеорг = СтрДлина(ПараметрыВыгрузки.ИННРеорг);
					Если ДлинаИННРеорг <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаИННРеорг = 0, "", "верно")
						+ " задан ИНН реорганизованной организации", "Титульный", "ИННРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
					ДлинаКППРеорг = СтрДлина(ПараметрыВыгрузки.КППРеорг);
					Если ДлинаКППРеорг <> 9 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не" + ?(ДлинаКППРеорг = 0, "", "верно")
						+ " задан КПП реорганизованной организации", "Титульный", "КППРеорганизованнойОрганизации");
						СтатусПроверки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИНН) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан ИНН индивидуального предпринимателя", "Титульный", "ИНН");
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(ПараметрыВыгрузки.ИНН) <> 12 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан ИНН индивидуального предпринимателя, не состоящий из 12 цифр",
			"Титульный", "ИНН");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Фамилия) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия индивидуального предпринимателя",
			"Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.Имя) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя индивидуального предпринимателя", "Титульный", "НаимОрг");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НомУвед) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан номер уведомления", "Титульный", "НомерУведомления");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыВыгрузки.ПризнакУведомления) Тогда
		Если ПараметрыВыгрузки.ПризнакУведомления <> "1" И ПараметрыВыгрузки.ПризнакУведомления <> "2" Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задано некорректное значение признака уведомления. Возможны значения: 1, 2", "Титульный", "ПризнакУведомления");
			СтатусПроверки = Ложь;
		ИначеЕсли ПараметрыВыгрузки.ПризнакУведомления = "2" Тогда
			Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИННПродавца) Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"ИНН продавца товаров, подлежащих прослеживаемости, должен быть заполнен, если признак уведомления равен 2",
				"Титульный", "ИННПродавца");
				СтатусПроверки = Ложь;
			Иначе
				КоллекцияИНН = СтрРазделить(ПараметрыВыгрузки.ИННПродавца, ", ", Ложь);
				Для каждого ТекИНН Из КоллекцияИНН Цикл
					Если СтрДлина(ТекИНН) <> 10 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Задан ИНН продавца товаров, подлежащих прослеживаемости, не состоящий из 10 символов, "
						+ "при значении признака уведомления, равном 2", "Титульный", "ИННПродавца");
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе // ПараметрыВыгрузки.ПризнакУведомления = "1"
			Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННПродавца) Тогда
				КоллекцияИНН = СтрРазделить(ПараметрыВыгрузки.ИННПродавца, ", ", Ложь);
				Для каждого ТекИНН Из КоллекцияИНН Цикл
					Если СтрДлина(ТекИНН) <> 12 Тогда
						СообщитьВТС(ИмяФормы, РезультатВыгрузки,
						"Задан ИНН продавца товаров, подлежащих прослеживаемости, не состоящий из 12 символов, "
						+ "при значении признака уведомления, равном 1", "Титульный", "ИННПродавца");
						СтатусПроверки = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ПараметрыВыгрузки.ИННПродавца) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"ИНН продавца товаров, подлежащих прослеживаемости, не должен быть заполнен, если не задан признак уведомления",
			"Титульный", "ИННПродавца");
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.КодНО) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан код налогового органа", "Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(ПараметрыВыгрузки.КодНО) <> 4 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан код налогового органа, не состоящий из 4 цифр",
		"Титульный", "НалоговыйОрган");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ФамилияПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана фамилия подписанта", "Титульный", "ОргПодписантФамилия");
		СтатусПроверки = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.ИмяПодписанта) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задано имя подписанта", "Титульный", "ОргПодписантИмя");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.ПрПодп = "2" И НЕ ЗначениеЗаполнено(ПараметрыВыгрузки.НаимДокПред) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не заданы наименование и реквизиты документа, подтверждающего полномочия представителя собственника товара",
		"Титульный", "ДокУпПред");
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	// Раздел 1.
	//
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		
		Данные = СтруктураРеквизитовФормы.СтруктураКонтейнераДанных.СодержательнаяЧасть;
		
	Иначе
		
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов);
		ДеревоРаздела = СохрСтруктура.ДанныеМногоуровневыхРазделов.Раздел1;
		Данные = ДеревоРаздела.Строки[0].Данные;
		
	КонецЕсли;
	
	НомерСтраницы = 1;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010000101"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задано наименование первичного учетного документа",
		"Раздел1", "П000010000101", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010000201"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задан номер первичного учетного документа",
		"Раздел1", "П000010000201", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010000301"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Не задана дата первичного учетного документа",
		"Раздел1", "П000010000301", НомерСтраницы);
		СтатусПроверки = Ложь;
	ИначеЕсли НЕ ДатаВходитВРазрешенныйПериод(
		ИмяФормы, Данные["П000010000301"], , ПараметрыВыгрузки.ДатаУведомления) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Задана дата первичного учетного документа, выходящая за пределы периода с 01.01.1900 по "
		+ Формат(ПараметрыВыгрузки.ДатаУведомления, "ДФ=дд.ММ.гггг"),
		"Раздел1", "П000010000301", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010000401"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задано наименование товара в соответствии с первичным учетным документом",
		"Раздел1", "П000010000401", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Данные["П000010000501"] < 0 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Количество товара в соответствии с первичным учетным документом не должно быть отрицательным",
		"Раздел1", "П000010000501", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010000601"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код единицы измерения товара в соответствии с первичным учетным документом (по ОКЕИ)",
		"Раздел1", "П000010000601", НомерСтраницы);
		СтатусПроверки = Ложь;
	Иначе
		ЗначПокДлина = СтрДлина(СокрЛП(Данные["П000010000601"]));
		Если ЗначПокДлина <> 3 И ЗначПокДлина <> 4 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан код единицы измерения товара в соответствии с первичным учетным документом (по ОКЕИ), "
			+ "не состоящий из 3-4 цифр", "Раздел1", "П000010000601", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010000701"]) И НЕ ЗначениеЗаполнено(Данные["П000010000801"]) Тогда
		
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Должен быть задан код товара в соответствии с ТН ВЭД ЕАЭС и (или) код товара в соответствии с ОКПД2",
		"Раздел1", "П000010000701", НомерСтраницы);
		СтатусПроверки = Ложь;
		
	Иначе
		
		Если ЗначениеЗаполнено(Данные["П000010000701"]) Тогда
			ЗначПокДлина = СтрДлина(СокрЛП(Данные["П000010000701"]));
			Если ЗначПокДлина < 6 ИЛИ ЗначПокДлина > 10 Тогда
				СообщитьВТС(ИмяФормы, РезультатВыгрузки,
				"Задан код товара по ТН ВЭД ЕАЭС, не состоящий из 6-10 цифр",
				"Раздел1", "П000010000701", НомерСтраницы);
				СтатусПроверки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЗначПок = СокрЛП(Данные["П000010000801"]);
		Если ЗначениеЗаполнено(ЗначПок) И НЕ ОКПД2СоответствуетТребованиям(ЗначПок) Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Задан код товара по ОКПД2, не соответствующий шаблонам: "
			+ "ХХ, ХХ.Х, ХХ.ХХ, ХХ.ХХ.Х, ХХ.ХХ.ХХ, ХХ.ХХ.ХХ.ХХХ (X - любая цифра)", "Раздел1", "П000010000801", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Данные["П000010000901"] < 0 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Количество товара, подлежащего прослеживаемости, в количественной единице измерения товара "
		+ "не должно быть отрицательным", "Раздел1", "П000010000901", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Данные["П000010001001"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Не задан код количественной единицы измерения товара (по ОКЕИ)",
		"Раздел1", "П000010001001", НомерСтраницы);
		СтатусПроверки = Ложь;
	Иначе
		ЗначПокДлина = СтрДлина(СокрЛП(Данные["П000010001001"]));
		Если ЗначПокДлина <> 3 И ЗначПокДлина <> 4 Тогда
			СообщитьВТС(ИмяФормы, РезультатВыгрузки,
			"Задан код количественной единицы измерения товара (по ОКЕИ), не состоящий из 3 или 4 цифр",
			"Раздел1", "П000010001001", НомерСтраницы);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыВыгрузки.НомКорр <> "0" И НЕ ЗначениеЗаполнено(Данные["П000010001101"]) Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Регистрационный номер партии товара, подлежащего прослеживаемости, должен быть заполнен, "
		+ "если номер корректировки уведомления неравен 0", "Раздел1", "П000010001101", НомерСтраницы);
		СтатусПроверки = Ложь;
	ИначеЕсли СтрДлина(СокрЛП(Данные["П000010001101"])) > 29 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки,
		"Длина регистрационного номера партии товара, подлежащего прослеживаемости, не должна превышать 29 символов",
		"Раздел1", "П000010001101", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Данные["П000010001201"] < 0 Тогда
		СообщитьВТС(ИмяФормы, РезультатВыгрузки, "Стоимость товаров (без НДС) не должна быть отрицательной",
		"Раздел1", "П000010001201", НомерСтраницы);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция ОКПД2СоответствуетТребованиям(Знач ОКПД2)
	
	ОКПД2 = СокрЛП(ОКПД2);
	Для Инд = 1 По СтрДлина(ОКПД2) Цикл
		ТекСимв = Сред(ОКПД2, Инд, 1);
		Если ТекСимв >= "0" И ТекСимв <= "8" Тогда
			ОКПД2 = Лев(ОКПД2, Инд - 1) + "9" + Сред(ОКПД2, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКПД2 = "" ИЛИ ОКПД2 = "99" ИЛИ ОКПД2 = "99.9" ИЛИ ОКПД2 = "99.99"
		ИЛИ ОКПД2 = "99.99.9" ИЛИ ОКПД2 = "99.99.99" ИЛИ ОКПД2 = "99.99.99.999";
	
КонецФункции

Процедура СообщитьВТС(ИмяФормы, Владелец, Описание, Раздел, ИмяЯчейки, ФИО = "") Экспорт
	
	РегламентированнаяОтчетность.СообщитьВТаблицуСообщений(Владелец, Описание, Раздел, ИмяЯчейки, ФИО);
	
КонецПроцедуры

Функция ДатаВходитВРазрешенныйПериод(ИмяФормы,
									 ПровДата,
									 ЛеваяГраница = '19000101',
									 ПраваяГраница = '20991231') Экспорт
	
	Возврат ПровДата >= ЛеваяГраница И ПровДата <= ПраваяГраница;
	
КонецФункции

Процедура ЗаполнитьДанными(ИмяФормы,
						   ДанныеОтчета,
						   ПараметрыВыгрузки,
						   ДеревоВыгрузки,
						   РезультатВыгрузки,
						   СтруктураРеквизитовФормы,
						   СтруктураМногоуровневыхРазделов) Экспорт
	
	ОбработатьУсловныеЭлементы(ИмяФормы,
							   ДанныеОтчета,
							   ПараметрыВыгрузки,
							   ДеревоВыгрузки,
							   РезультатВыгрузки);
	
	ЗаполнитьДаннымиУзел(ИмяФормы,
						 СтруктураРеквизитовФормы,
						 СтруктураМногоуровневыхРазделов,
						 ПараметрыВыгрузки,
						 ДеревоВыгрузки);
	
	ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки);
	
КонецПроцедуры

Процедура ВосстановитьСохраненныеДанныеОтчетаСтарогоОбразца(ИмяФормы,
															СписокСохранения,
															СтруктураРеквизитовФормы,
															СтруктураМногоуровневыхРазделов)
	
	Возврат;
	
КонецПроцедуры

Функция ИдентификаторФайлаВыгрузки(ИмяФормы, ПараметрыВыгрузки, ПрефиксИмени)
	
	Если ПараметрыВыгрузки.ЭтоЮЛ Тогда
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИНН) + СокрЛП(ПараметрыВыгрузки.КПП);
	Иначе
		ИННКПП = СокрЛП(ПараметрыВыгрузки.ИНН);
	КонецЕсли;
	
	ИдентификаторФайла = ПрефиксИмени
		+ "_" + ?(ЗначениеЗаполнено(ПараметрыВыгрузки.КодНОПосредника),
				ПараметрыВыгрузки.КодНОПосредника, ПараметрыВыгрузки.КодНО)
		+ "_" + ПараметрыВыгрузки.КодНО
		+ "_" + ИННКПП
		+ "_" + Формат(ТекущаяДатаСеанса(), "ДФ=ггггММдд")
		+ "_" + Строка(Новый УникальныйИдентификатор);
	
	Возврат ИдентификаторФайла;
	
КонецФункции

Процедура ОбработатьУсловныеЭлементы(ИмяФормы,
									 ДанныеОтчета,
									 Знач ПараметрыВыгрузки,
									 Узел,
									 РезультатВыгрузки)
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если Узел.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
			Возврат;
		КонецЕсли;
		РегламентированнаяОтчетность.ДополнитьСтруктуруПараметров(ДанныеОтчета, ПараметрыВыгрузки, Узел);
	КонецЕсли;
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		Если НЕ ПустаяСтрока(ТекСтр.Условие) Тогда
			Если НЕ РегламентированнаяОтчетность.УсловиеВыполнено(РезультатВыгрузки, ПараметрыВыгрузки, ТекСтр.Условие) Тогда
				Узел.Строки.Удалить(ТекСтр);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		ОбработатьУсловныеЭлементы(ИмяФормы,
								   ДанныеОтчета,
								   ПараметрыВыгрузки,
								   ТекСтр,
								   РезультатВыгрузки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиУзел(ИмяФормы,
							   СтруктураРеквизитовФормы,
							   СтруктураМногоуровневыхРазделов,
							   ПараметрыВыгрузки,
							   Узел,
							   НомерСтроки = Неопределено)
	
	СтрокиУзла = Новый Массив;
	Для Каждого Стр Из Узел.Строки Цикл
		СтрокиУзла.Добавить(Стр);
	КонецЦикла;
	
	Для Каждого Стр из СтрокиУзла Цикл
		Если Стр.Тип = "С" ИЛИ Стр.Тип = "C" Тогда // учет обоих вариантов: кириллицы и латиницы
			Если РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
																			 "ИмяКлючевогоУзлаСодержательнойЧасти")
			   И Стр.Код = ПараметрыВыгрузки.ИмяКлючевогоУзлаСодержательнойЧасти Тогда
				ЗаполнитьСодержательнуюЧасть(ИмяФормы,
											 СтруктураРеквизитовФормы,
											 СтруктураМногоуровневыхРазделов,
											 Стр,
											 ПараметрыВыгрузки);
			ИначеЕсли Стр.Многострочность Тогда
				НомСтр = 1;
				ПодчиненныйЭлемент = ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Стр);
				КлючПодчиненногоЭлемента = ПодчиненныйЭлемент.Ключ;
				Пока РегламентированнаяОтчетностьКлиентСервер.СвойствоОпределено(ПараметрыВыгрузки,
						КлючПодчиненногоЭлемента + "_" + Формат(НомСтр, "ЧГ=")) Цикл
					УзелСоответствующийСтроке = СкопироватьУзел(ИмяФормы, Узел, Стр);
					ЗаполнитьДаннымиУзел(ИмяФормы,
										 СтруктураРеквизитовФормы,
										 СтруктураМногоуровневыхРазделов,
										 ПараметрыВыгрузки,
										 УзелСоответствующийСтроке,
										 НомСтр);
					НомСтр = НомСтр + 1;
				КонецЦикла;
			Иначе
				ЗаполнитьДаннымиУзел(ИмяФормы,
									 СтруктураРеквизитовФормы,
									 СтруктураМногоуровневыхРазделов,
									 ПараметрыВыгрузки,
									 Стр,
									 НомерСтроки);
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(Стр.ЗначениеПоУмолчанию) Тогда
				Если НЕ ПустаяСтрока(Стр.Ключ) Тогда
					ПолныйКодПоказателя = Стр.Ключ + ?(ЗначениеЗаполнено(НомерСтроки), "_" + Формат(НомерСтроки, "ЧГ="), "");
					ЗначениеПоказателя = Неопределено;
					Если ПараметрыВыгрузки.Свойство(ПолныйКодПоказателя, ЗначениеПоказателя) Тогда
						ВывестиПоказательВXML(ИмяФормы,Стр, ЗначениеПоказателя);
					Иначе
						ВывестиПоказательВXML(ИмяФормы, Стр, "");
					КонецЕсли;
				Иначе
					Стр.Значение = "";
				КонецЕсли;
			ИначеЕсли Лев(Стр.ЗначениеПоУмолчанию, 1) = "&" Тогда
				ВывестиПоказательВXML(ИмяФормы, Стр, ПараметрыВыгрузки[Сред(Стр.ЗначениеПоУмолчанию, 2)]);
			Иначе
				Стр.Значение = Стр.ЗначениеПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	КоличествоСтрок = Узел.Строки.Количество();
	Для Инд = 1 По КоличествоСтрок Цикл
		Стр = Узел.Строки.Получить(КоличествоСтрок - Инд);
		ОтсечьНезаполненныеНеобязательныеУзлы(ИмяФормы, Стр, ПараметрыВыгрузки);
	КонецЦикла;
	
	Если ТипЗнч(Узел) <> Тип("ДеревоЗначений") Тогда
		Если (СтрНайти(Узел.Обязательность, "Н") <> 0
		 ИЛИ СтрНайти(Узел.Обязательность, "H") <> 0)
		   И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки) Тогда // учтем оба варианта: кириллицу и латиницу
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		ИначеЕсли (СтрНайти(Узел.Обязательность, "М") <> 0 
			  ИЛИ СтрНайти(Узел.Обязательность, "M") <> 0) // учтем оба варианта: кириллицу и латиницу
				И УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
				И ?(СтрНайти(Узел.Обязательность, "О") <> 0
			  ИЛИ СтрНайти(Узел.Обязательность, "O") <> 0,
			  	  РегламентированнаяОтчетность.ИмеютсяАналогичныеСоседниеУзлыКлюч(Узел), Истина) Тогда
			РегламентированнаяОтчетность.УдалитьУзел(Узел);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСодержательнуюЧасть(ИмяФормы,
									   СтруктураРеквизитовФормы,
									   СтруктураМногоуровневыхРазделов,
									   УзелРодитель,
									   ПараметрыВыгрузки)
	
	// ИНН продавца товаров, подлежащих прослеживаемости.
	//
	УзелРодитель_Родитель = УзелРодитель.Родитель;
	УзелИНН = ПолучитьПодчиненныйЭлемент(ИмяФормы, УзелРодитель_Родитель, "ИНН");
	КоллекцияИНН = СтрРазделить(ПараметрыВыгрузки.ИННПродавца, ", ", Ложь);
	Для каждого ТекИНН Из КоллекцияИНН Цикл
		ЭкзУзелИНН = СкопироватьУзел(ИмяФормы, УзелРодитель_Родитель, УзелИНН);
		Для каждого Эл Из ЭкзУзелИНН.Строки Цикл
			Если Эл.Код = "ИННЮЛ" И СтрДлина(ТекИНН) = 10 Тогда
				Эл.Значение = ТекИНН;
			ИначеЕсли Эл.Код = "ИННФЛ" И СтрДлина(ТекИНН) = 12 Тогда
				Эл.Значение = ТекИНН;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Раздел 1.
	//
	Если СтруктураРеквизитовФормы.Свойство("СтруктураКонтейнераДанных") Тогда
		Данные = СтруктураРеквизитовФормы.СтруктураКонтейнераДанных.СодержательнаяЧасть;
	Иначе
		СохрСтруктура = СохраненныеДанныеОтчета(ИмяФормы,
												СтруктураРеквизитовФормы,
												СтруктураМногоуровневыхРазделов);
		ДанныеРазд = СохрСтруктура.ДанныеМногоуровневыхРазделов["Раздел1"];
		Данные = ДанныеРазд.Строки[0].Данные;
	КонецЕсли;
	
	ЗаполнитьДаннымиУзел(ИмяФормы, СтруктураРеквизитовФормы, СтруктураМногоуровневыхРазделов, Данные, УзелРодитель);
	
КонецПроцедуры

Функция ПолучитьПервыйПодчиненныйУзелСЗаполненнымКлючом(ИмяФормы, Родитель)
	
	Для Каждого Стр из Родитель.Строки Цикл
		Если ЗначениеЗаполнено(Стр.Ключ) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция СкопироватьУзел(ИмяФормы, Родитель, Узел, Знач МаксИндекс = Неопределено)
	
	// Нахождение узла с максимальным индексом и с тем же кодом,
	// что и у копируемого, и добавление нового сразу после найденного.
	Если МаксИндекс = Неопределено Тогда
		СтрокиСТемЖеКодом = Родитель.Строки.НайтиСтроки(Новый Структура("Код", Узел.Код), Ложь);
		МаксИндекс = - 1;
		КолСтрокСТемЖеКодом = СтрокиСТемЖеКодом.Количество();
		Если КолСтрокСТемЖеКодом > 0 Тогда
			МаксИндекс = Родитель.Строки.Индекс(СтрокиСТемЖеКодом[КолСтрокСТемЖеКодом - 1]);
		КонецЕсли;
	КонецЕсли;
	
	ИндексСоздаваемогоУзла = МаксИндекс + 1;
	Если ИндексСоздаваемогоУзла >= Родитель.Строки.Количество() ИЛИ ИндексСоздаваемогоУзла = 0 Тогда
		// Аналогичный узел не найден или найденный узел - последний.
		НовыйУзел = Родитель.Строки.Добавить();
	Иначе
		НовыйУзел = Родитель.Строки.Вставить(ИндексСоздаваемогоУзла);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НовыйУзел, Узел, , "Родитель, Строки");
	
	Для Каждого Стр из Узел.Строки Цикл
		СкопироватьУзел(ИмяФормы, НовыйУзел, Стр, Узел.Строки.Количество() - 1);
	КонецЦикла;
	
	Возврат НовыйУзел;
	
КонецФункции

Процедура ВывестиПоказательВXML(ИмяФормы, Узел, ЗначениеПоказателя)
	
	МинШирина = Узел.МинРазмерность;
	МаксШирина = Узел.МаксРазмерность;
	
	Если Узел.Формат = "T" ИЛИ Узел.Формат = "Т" Тогда // учтем оба варианта: кириллицу и латиницу
		Если ТипЗнч(ЗначениеПоказателя) = Тип("Дата") Тогда
			ЗначениеПоказателяСтр = Формат(ЗначениеПоказателя, "ДФ=dd.MM.yyyy");
		Иначе
			ЗначениеПоказателяСтр = СокрЛП(ЗначениеПоказателя);
		КонецЕсли;
		Узел.Значение = ?(МаксШирина < СтрДлина(ЗначениеПоказателяСтр),
						  СокрЛП(Лев(ЗначениеПоказателяСтр, МаксШирина)),
						  ЗначениеПоказателяСтр);
	ИначеЕсли Узел.Формат = "N" Тогда
		СтрокаФормата = "ЧРД=.;ЧН=0;ЧГ=;";
		Если Узел.МаксРазмерность <> 0 И Узел.МаксРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧЦ=" + Формат(Узел.МаксРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Если Узел.МинРазмерность <> 99999 Тогда
			СтрокаФормата = СтрокаФормата + "ЧДЦ=" + Формат(Узел.МинРазмерность, "ЧГ=") + ";";
		КонецЕсли;
		Узел.Значение = СокрЛП(Формат(ЗначениеПоказателя, СтрокаФормата));
	КонецЕсли;
	
КонецПроцедуры

Функция УзелПуст(ИмяФормы, Узел, ПараметрыВыгрузки)
	
	Для Каждого Стр из Узел.Строки Цикл
		Если НЕ УзелПуст(ИмяФормы, Стр, ПараметрыВыгрузки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Узел.Формат = "S" Тогда
		Возврат Истина;
	ИначеЕсли Узел.Формат = "N" Тогда
		Возврат Узел.Значение = "0" ИЛИ (НЕ ЗначениеЗаполнено(Узел.Значение));
	Иначе
		Возврат НЕ ЗначениеЗаполнено(Узел.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПодчиненныйЭлемент(ИмяФормы, Узел, КодЭлемента)
	
	ЧислоВместоКодаЭлемента = (ТипЗнч(КодЭлемента) = Тип("Число"));
	Если ТипЗнч(КодЭлемента) = Тип("Число") Тогда
		Если Узел.Строки.Количество() > КодЭлемента Тогда
			Возврат Узел.Строки.Получить(КодЭлемента);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Для Каждого Стр Из Узел.Строки Цикл
			Если Стр.Код = КодЭлемента Тогда
				Возврат Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ИмяФормы, ДеревоВыгрузки, ПараметрыВыгрузки, КодировкаФайлаВыгрузки)
	
	ПотокXML = РегламентированнаяОтчетность.СоздатьНовыйПотокXML(КодировкаФайлаВыгрузки);
	ЗаписатьУзелДереваВXML(ИмяФормы, ДеревоВыгрузки, ПотокXML, ПараметрыВыгрузки);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	
	Возврат ТекстДляЗаписи;
	
КонецФункции

Процедура ЗаписатьУзелДереваВXML(ИмяФормы, СтрокаДерева, ПотокXML, ПараметрыВыгрузки)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("Файл");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(ИмяФормы, Стр, ПотокXML, ПараметрыВыгрузки);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML(ИмяФормы, Лист, ПотокXML, ПараметрыВыгрузки);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция СтруктураКонтейнераДанных(Параметры) Экспорт
	
	Контейнер = Новый Структура;
	Контейнер.Вставить("НаименованиеОтчета", "Уведомление об остатках товаров, подлежащих прослеживаемости");
	Контейнер.Вставить("ИсточникОтчета",        Параметры.ИсточникОтчета);
	Контейнер.Вставить("ВыбраннаяФорма",        Параметры.ВыбраннаяФорма);
	Контейнер.Вставить("ВерсияФормата",         Параметры.ВерсияФормата);
	Контейнер.Вставить("СсылкаНаВнешнийОбъект", Параметры.СсылкаНаВнешнийОбъект);
	
	Если Параметры.ИсточникОтчета = "РегламентированныйОтчетПрослеживаемыеТоварыОстатки"
		И Параметры.ВыбраннаяФорма = "ФормаОтчета2021Кв3" И Параметры.ВерсияФормата = "5.01" Тогда
		
		// Ссылка на элемент справочника "Организации" (СправочникСсылка.Организации).
		Контейнер.Вставить("Организация");
		
		// Дата подписи (Дата).
		Контейнер.Вставить("ДатаПодписи", '00010101');
		
		// Номер уведомления (Строка: 1 - 255 символов).
		Контейнер.Вставить("НомерУведомления", "");
		
		// Дата уведомления (Дата).
		Контейнер.Вставить("ДатаУведомления", '00010101');
		
		// № корректировки (Число: 0 - 999).
		Контейнер.Вставить("НомерКорректировки", 0);
		
		// Признак уведомления (Строка: 1 цифра).
		Контейнер.Вставить("ПризнакУведомления", "");
		
		// ИНН продавца товаров, подлежащих прослеживаемости. Строка с ИНН, разделенными сочетанием
		// символов ", " ("запятая и пробел"). Обязателен, если ПризнакУведомления равен "2".
		// Необязателен, если ПризнакУведомления равен "1". Не заполняется, если ПризнакУведомления равен "".
		Контейнер.Вставить("ИННПродавца", "");
		
		// Код налогового органа (Строка: строго 4 цифры).
		// Если не заполнен, определяется автоматически по сведениям об организации.
		Контейнер.Вставить("НалоговыйОрган", "");
		
		// КПП (Строка: строго 9 символов).
		// Если не заполнен, определяется автоматически по сведениям об организации.
		Контейнер.Вставить("КПП", "");
		
		// Форма реорганизации (ликвидации) (код) (Строка: 1 цифра).
		Контейнер.Вставить("КодФормыРеорганизации", "");
		
		// ИНН реорганизованной организации (Строка: строго 10 цифр).
		// Обязателен, если КодФормыРеорганизации равен "1", "2", "3", "5", "6"; иначе не заполняется.
		Контейнер.Вставить("ИННРеорганизованнойОрганизации", "");
		
		// КПП реорганизованной организации (Строка: строго 9 символов).
		// Обязателен, если КодФормыРеорганизации равен "1", "2", "3", "5", "6"; иначе не заполняется.
		Контейнер.Вставить("КППРеорганизованнойОрганизации", "");
		
		СодержательнаяЧасть = Новый Структура;
		
		// Наименование первичного учетного документа (Строка: 1 - 255 символов).
		СодержательнаяЧасть.Вставить("П000010000101", "");
		
		// Номер первичного учетного документа (Строка: 1 - 255 символов).
		СодержательнаяЧасть.Вставить("П000010000201", "");
		
		// Дата первичного учетного документа (Дата).
		СодержательнаяЧасть.Вставить("П000010000301", '00010101');
		
		// Наименование товара в соответствии с первичным учетным документом (Строка: 1 - 255 символов).
		СодержательнаяЧасть.Вставить("П000010000401", "");
		
		// Количество товара в соответствии с первичным учетным документом (Число: 0 - 9999999999999.999999).
		СодержательнаяЧасть.Вставить("П000010000501", 0);
		
		// Код единицы измерения товара в соответствии с первичным учетным документом,
		// по Общероссийскому классификатору единиц измерения (ОКЕИ) (Строка: 3 - 4 цифры).
		СодержательнаяЧасть.Вставить("П000010000601", "");
		
		// Классификационный код товара в соответствии с единой Товарной номенклатурой внешнеэкономической
		// деятельности Евразийского экономического союза (Строка: 6 - 10 цифр).
		СодержательнаяЧасть.Вставить("П000010000701", "");
		
		// Классификационный код товара в соответствии с Общероссийским классификатором
		// продукции по видам экономической деятельности (Строка: 2 - 12 символов).
		// Возможные шаблоны: ХХ, ХХ.Х, ХХ.ХХ, ХХ.ХХ.Х, ХХ.ХХ.ХХ, ХХ.ХХ.ХХ.ХХХ (X - любая цифра).
		СодержательнаяЧасть.Вставить("П000010000801", "");
		
		// Количество товара, подлежащего прослеживаемости, в единице количественного учета товара
		// (Число: 0 - 999999999999999.99999999999).
		СодержательнаяЧасть.Вставить("П000010000901", 0);
		
		// Код единицы количественного учета товара, подлежащего прослеживаемости (Строка: 3 - 4 цифры).
		СодержательнаяЧасть.Вставить("П000010001001", "");
		
		// Регистрационный номер партии товара, подлежащего прослеживаемости (Строка: строго 27 символов).
		// Не заполняется, если НомерКорректировки равен 0.
		СодержательнаяЧасть.Вставить("П000010001101", "");
		
		// Стоимость товаров (без НДС) в рублях и копейках (Число: 0 - 99999999999999999.99).
		СодержательнаяЧасть.Вставить("П000010001201", 0);
		
		Контейнер.Вставить("СодержательнаяЧасть", СодержательнаяЧасть);
		
		Возврат Контейнер;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДатаПримененияФормыВНовойРедакции()
	
	Возврат '20210911';
	
КонецФункции

#КонецОбласти

#КонецЕсли