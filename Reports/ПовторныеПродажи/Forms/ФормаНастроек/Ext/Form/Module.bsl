#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВосстановитьНастройки();
	УстановитьРежим();
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСегментыПартнеров") Тогда
		СегментКлиентовИспользование = Ложь;
		Элементы.ГруппаСегментКлиентов.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСегментыНоменклатуры") Тогда
		СегментНоменклатурыИспользование = Ложь;
		Элементы.ГруппаСегментНоменклатуры.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасширенныйРежимПриИзменении(Элемент)

	УстановитьРежим();
	
КонецПроцедуры

&НаКлиенте
Процедура АктивныеДоПриИзменении(Элемент)
	
	ЗасыпающиеОт = АктивныеДо; 
	Значения = Новый Структура("ЗасыпающиеОт",ЗасыпающиеОт);
	Элементы.ДекорацияЗасыпающиеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеОт] до'"), Значения);
	
	Если РасширенныйРежим = 0 Тогда
		ЗасыпающиеПерспективныеОт = АктивныеДо+1;
		ЗасыпающиеВерныеОт = АктивныеДо+1;	
		Значения = Новый Структура("ЗасыпающиеПерспективныеОт, ЗасыпающиеВерныеОт",ЗасыпающиеПерспективныеОт,ЗасыпающиеВерныеОт);
		Элементы.ДекорацияЗасыпающиеПерспективныеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеПерспективныеОт] до'"), Значения);
		Элементы.ДекорацияЗасыпающиеПерспективныеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеВерныеОт] до'"), Значения);
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура АктивныеПерспективныеДоПриИзменении(Элемент)
	
	ЗасыпающиеПерспективныеОт = АктивныеПерспективныеДо;
	Значения = Новый Структура("ЗасыпающиеПерспективныеОт",ЗасыпающиеПерспективныеОт);
	Элементы.ДекорацияЗасыпающиеПерспективныеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеПерспективныеОт] до'"), Значения);
	
КонецПроцедуры

&НаКлиенте
Процедура АктивныеВерныеДоПриИзменении(Элемент)
	
	ЗасыпающиеВерныеОт = АктивныеВерныеДо;
	Значения = Новый Структура("ЗасыпающиеВерныеОт",ЗасыпающиеВерныеОт);
	Элементы.ДекорацияЗасыпающиеВерныеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеВерныеОт] до'"), Значения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗасыпающиеДоПриИзменении(Элемент)
			
	Спящие = ЗасыпающиеДо; 
	
	Если РасширенныйРежим = 0 Тогда
		СпящиеПерспективные = ЗасыпающиеДо;
		СпящиеВерные = ЗасыпающиеДо;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗасыпающиеПерспективныеДоПриИзменении(Элемент)
	
	СпящиеПерспективные = ЗасыпающиеПерспективныеДо;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗасыпающиеВерныеДоПриИзменении(Элемент)
	
	СпящиеВерные = ЗасыпающиеВерныеДо;
	
КонецПроцедуры

&НаКлиенте
Процедура ПокупкиПерспективныеДоПриИзменении(Элемент)
	
	ПокупкиВерные = ПокупкиПерспективныеДо;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияИспользование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	МенеджерИспользование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПокупокПриИзменении(Элемент)
	
	СуммаПокупокИспользование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СегментКлиентовПриИзменении(Элемент)
	
	СегментКлиентовИспользование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СегментНоменклатурыПриИзменении(Элемент)
	
	СегментНоменклатурыИспользование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	НоменклатураИспользование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	ПериодИспользование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	ПериодИспользование = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗавершитьРедактирование(Команда)
	
	ПроверитьРежим();
	
	ПроверитьОтборы();

	Если Не ИнтервалыКорректны() Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"Организация,ОрганизацияИспользование,
		|Менеджер,МенеджерИспользование,Период,
		|ДатаНачала,ДатаОкончания,ПериодИспользование,
		|АктивныеВерныеДо,АктивныеДо,АктивныеПерспективныеДо,
		|ЗасыпающиеВерныеДо,ЗасыпающиеВерныеОт,ЗасыпающиеДо,ЗасыпающиеОт,
		|ЗасыпающиеПерспективныеДо,ЗасыпающиеПерспективныеОт,
		|КлиентыЧислаПроценты,ОтображатьНадписиУСтрелок,
		|Номенклатура,НоменклатураИспользование,ОтображатьСтрелки,
		|ПокупкиВерные,ПокупкиНовые,ПокупкиПерспективныеДо,ПокупкиПерспективныеОт,
		|РасширенныйРежим,Потенциал,
		|СегментКлиентов,СегментКлиентовИспользование,
		|СегментНоменклатуры,СегментНоменклатурыИспользование,
		|СуммаПокупок,СуммаПокупокИспользование,
		|Спящие,СпящиеВерные,СпящиеПерспективные";

	ДопПараметры = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(ДопПараметры, ЭтаФорма);

	Закрыть(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПериодИспользование = Ложь;
		ДатаНачала = Неопределено;
		ДатаОкончания = Неопределено;
	Иначе
		
	ПериодИспользование = Истина;

	Период = ВыбранноеЗначение;
	ДатаНачала = Дата("20130724");
	ДатаНачала = Период.ДатаНачала;
	ДатаОкончания = Период.ДатаОкончания;
	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Реквизиты = ПолучитьРеквизиты();
	Для Каждого Реквизит Из Реквизиты Цикл		
		Если Не Параметры.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если Реквизит.Имя = "ДатаНачала" Тогда	
			Период.ДатаНачала = Параметры[Реквизит.Имя];
			ЭтаФорма[Реквизит.Имя] = Параметры[Реквизит.Имя];
			Продолжить;	
		КонецЕсли;
		Если Реквизит.Имя = "ДатаОкончания" Тогда				
			Период.ДатаОкончания = Параметры[Реквизит.Имя];
			ЭтаФорма[Реквизит.Имя] = Параметры[Реквизит.Имя];
			Продолжить;	
		КонецЕсли;
		ЭтаФорма[Реквизит.Имя] = Параметры[Реквизит.Имя];
	КонецЦикла;
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ДекорацияВалюта.Заголовок = Валюта;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежим()

	Если РасширенныйРежим = 0 Тогда
		Элементы.ГруппаДниПерспективные.Видимость = Ложь;
		Элементы.ГруппаДниВерные.Видимость = Ложь;
		Элементы.ДекорацияНовые.Видимость = Ложь;
		Элементы.Декорация1.Видимость = Ложь;
		Элементы.ДекорацияАктивные.Шрифт = Новый Шрифт(,,,Ложь);
		Элементы.ДекорацияЗасыпающие.Шрифт = Новый Шрифт(,,,Ложь);
		Элементы.ДекорацияСпящие.Шрифт = Новый Шрифт(,,,Ложь);
	Иначе
		Элементы.ГруппаДниПерспективные.Видимость = Истина;
		Элементы.ГруппаДниВерные.Видимость = Истина;
		Элементы.ДекорацияНовые.Видимость = Истина;
		Элементы.Декорация1.Видимость = Истина;
		Элементы.ДекорацияАктивные.Шрифт = Новый Шрифт(,,Истина);
		Элементы.ДекорацияЗасыпающие.Шрифт = Новый Шрифт(,,Истина);
		Элементы.ДекорацияСпящие.Шрифт = Новый Шрифт(,,Истина);

			
		Значения = Новый Структура("ЗасыпающиеОт, ЗасыпающиеПерспективныеОт, ЗасыпающиеВерныеОт",ЗасыпающиеОт,ЗасыпающиеПерспективныеОт,ЗасыпающиеВерныеОт);
		Элементы.ДекорацияЗасыпающиеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеОт] до'"), Значения);
		Элементы.ДекорацияЗасыпающиеПерспективныеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеПерспективныеОт] до'"), Значения);
		Элементы.ДекорацияЗасыпающиеВерныеОт.Заголовок = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(НСтр("ru='от [ЗасыпающиеВерныеОт] до'"), Значения);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРежим()
	
	Если РасширенныйРежим = 0 Тогда
		АктивныеПерспективныеДо = АктивныеДо;
		АктивныеВерныеДо = АктивныеДо; 
		ЗасыпающиеПерспективныеОт = АктивныеДо;
		ЗасыпающиеВерныеОт = АктивныеДо;
		ЗасыпающиеПерспективныеДо = ЗасыпающиеДо;
		ЗасыпающиеВерныеДо = ЗасыпающиеДо; 
		СпящиеПерспективные = ЗасыпающиеДо;
		СпящиеВерные = ЗасыпающиеДо;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ИнтервалыКорректны()
	
	ИнтервалыКорректны = Истина;
	
	Если АктивныеДо = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан интервал дней.'"),,"АктивныеДо");
		ИнтервалыКорректны = Ложь;
	КонецЕсли;
	
	Если АктивныеПерспективныеДо = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан интервал дней.'"),,"АктивныеПерспективныеДо");
		ИнтервалыКорректны = Ложь;
	КонецЕсли;
	
	Если АктивныеВерныеДо = 0 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан интервал дней.'"),,"АктивныеВерныеДо");
		ИнтервалыКорректны = Ложь;
	КонецЕсли;
	
	Если ЗасыпающиеДо < ЗасыпающиеОт Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан интервал дней.'"),,"ЗасыпающиеДо");
		ИнтервалыКорректны = Ложь;
	КонецЕсли;

	Если ЗасыпающиеПерспективныеДо < ЗасыпающиеПерспективныеОт Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан интервал дней.'"),,"ЗасыпающиеПерспективныеДо");
		ИнтервалыКорректны = Ложь;
	КонецЕсли;

	Если ЗасыпающиеВерныеДо < ЗасыпающиеВерныеОт Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Некорректно задан интервал дней.'"),,"ЗасыпающиеВерныеДо");
		ИнтервалыКорректны = Ложь;
	КонецЕсли;

	Возврат ИнтервалыКорректны;

КонецФункции

&НаКлиенте
Процедура ПроверитьОтборы()
	
	Если ПериодИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ПериодИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОрганизацияИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОрганизацияИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(Менеджер) Тогда
			МенеджерИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПокупокИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(СуммаПокупок) Тогда
			СуммаПокупокИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если СегментКлиентовИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(СегментКлиентов) Тогда
			СегментКлиентовИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если СегментНоменклатурыИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(СегментНоменклатуры) Тогда
			СегментНоменклатурыИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если НоменклатураИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(Номенклатура) Тогда
			НоменклатураИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти