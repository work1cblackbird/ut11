#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗаданиеОтменить(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	
	МенеджерИспользование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	ОрганизацияИспользование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	ПериодИспользование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	ПериодИспользование = Истина;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура МенеджерИспользованиеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИспользованиеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура ПериодИспользованиеПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");

КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	СтандартнаяОбработка = Ложь;

	Расшифровка.Вставить("Цвет", Элемент.ТекущаяОбласть.ЦветФона);
	ОткрытьФорму("Отчет.ПовторныеПродажи.Форма.ФормаРасшифровки",Расшифровка,ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройки(Команда)
	
	ИменаСохраняемыхРеквизитов =
		"Организация,ОрганизацияИспользование,
		|Менеджер,МенеджерИспользование,
		|ДатаНачала,ДатаОкончания,ПериодИспользование,
		|АктивныеВерныеДо,АктивныеВерныеОт,АктивныеДо,АктивныеОт,
		|АктивныеПерспективныеДо,АктивныеПерспективныеОт,
		|ЗасыпающиеВерныеДо,ЗасыпающиеВерныеОт,ЗасыпающиеДо,ЗасыпающиеОт,
		|ЗасыпающиеПерспективныеДо,ЗасыпающиеПерспективныеОт,
		|КлиентыЧислаПроценты,ОтображатьНадписиУСтрелок,
		|Номенклатура,НоменклатураИспользование,ОтображатьСтрелки,
		|ПокупкиВерные,ПокупкиНовые,ПокупкиПерспективныеДо,ПокупкиПерспективныеОт,
		|РасширенныйРежим,Потенциал,
		|СегментКлиентов,СегментКлиентовИспользование,
		|СегментНоменклатуры,СегментНоменклатурыИспользование,
		|СуммаПокупок,СуммаПокупокИспользование,
		|Спящие,СпящиеВерные,СпящиеПерспективные";

	ДопПараметры = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(ДопПараметры, ЭтаФорма);

	ОткрытьФорму("Отчет.ПовторныеПродажи.Форма.ФормаНастроек",ДопПараметры,ЭтаФорма,,,, 
		Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
   	
	Если РезультатВыполнения = Неопределено Тогда
    	Возврат;
	КонецЕсли;
	
	НастройкиИзменены = Ложь;
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		Для Каждого КлючЗначение Из РезультатВыполнения Цикл
			Если ЭтаФорма[КлючЗначение.Ключ] <> КлючЗначение.Значение Тогда
				НастройкиИзменены = Истина;
			КонецЕсли;
			ЭтаФорма[КлючЗначение.Ключ] = КлючЗначение.Значение;
      	КонецЦикла;
  	КонецЕсли;
	
	Если НастройкиИзменены Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияУтКлиент.РедактироватьПериод(Период, , Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПериодИспользование = Ложь;
		ДатаНачала = Неопределено;
		ДатаОкончания = Неопределено;
	Иначе
		
	Период = ВыбранноеЗначение;
	ДатаНачала = Период.ДатаНачала;
	ДатаОкончания = Период.ДатаОкончания;

	ПериодИспользование = Истина;
КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ПроверитьОтборы();

	РезультатВыполнения = Сегменты();
	Если НЕ РезультатВыполнения.Статус = "Выполнено" Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		"Отчет.ПовторныеПродажи", "ТекущиеНастройки");

	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеНастроек);
	Иначе
		ЗаполнитьЗначенияПоУмолчанию()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()

	ИменаСохраняемыхРеквизитов ="Организация,ОрганизацияИспользование,
		|Менеджер,МенеджерИспользование,Период,
		|ДатаНачала,ДатаОкончания,ПериодИспользование,
		|АктивныеВерныеДо,АктивныеДо,АктивныеПерспективныеДо,
		|ЗасыпающиеВерныеДо,ЗасыпающиеВерныеОт,ЗасыпающиеДо,ЗасыпающиеОт,
		|ЗасыпающиеПерспективныеДо,ЗасыпающиеПерспективныеОт,
		|КлиентыЧислаПроценты,ОтображатьНадписиУСтрелок,
		|Номенклатура,НоменклатураИспользование,ОтображатьСтрелки,
		|ПокупкиВерные,ПокупкиНовые,ПокупкиПерспективныеДо,ПокупкиПерспективныеОт,
		|РасширенныйРежим,Потенциал,
		|СегментКлиентов,СегментКлиентовИспользование,
		|СегментНоменклатуры,СегментНоменклатурыИспользование,
		|СуммаПокупок,СуммаПокупокИспользование,
		|Спящие,СпящиеВерные,СпящиеПерспективные";

	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтаФорма);

	ОбщегоНазначения.ХранилищеСистемныхНастроекСохранить("Отчет.ПовторныеПродажи", "ТекущиеНастройки", Настройки); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()

	ПокупкиНовые = 1;
	ПокупкиПерспективныеОт = 2;
	ПокупкиПерспективныеДо = 7;
	ПокупкиВерные = 7;
	
	АктивныеДо = 30;
	АктивныеПерспективныеДо = 30;
	АктивныеВерныеДо = 30;

	ЗасыпающиеОт = 30;
	ЗасыпающиеДо = 50;
	ЗасыпающиеПерспективныеОт = 30;
	ЗасыпающиеПерспективныеДо = 50;
	ЗасыпающиеВерныеОт = 30;
	ЗасыпающиеВерныеДо = 50;
	
	Спящие = 50;
	СпящиеПерспективные = 50;
	СпящиеВерные = 50;

	ОтображатьСтрелки = Истина;
	ОтображатьНадписиУСтрелок = "Проценты";
	
	Потенциал = 12;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОтборы()
	
	Если ПериодИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			ПериодИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ОрганизацияИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(Организация) Тогда
			ОрганизацияИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если МенеджерИспользование = Истина Тогда
		Если Не ЗначениеЗаполнено(Менеджер) Тогда
			МенеджерИспользование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Сегменты()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ФоновоеЗаданиеОтменить(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;

	//Заполняем параметры расшифровки
	ИменаПараметровОтборов = 
		"Организация,ОрганизацияИспользование,
		|Менеджер,МенеджерИспользование,
		|ПериодИспользование,
		|Номенклатура,НоменклатураИспользование,,
		|СегментКлиентов,СегментКлиентовИспользование,
		|СегментНоменклатуры,СегментНоменклатурыИспользование,
		|СуммаПокупок,СуммаПокупокИспользование,
		|ПокупкиПерспективныеДо,АктивныеДо,ЗасыпающиеДо,
		|АктивныеПерспективныеДо,ЗасыпающиеПерспективныеДо,
		|АктивныеВерныеДо,ЗасыпающиеВерныеДо,ПокупкиВерные";

	Отборы = Новый Структура(ИменаПараметровОтборов);
	ЗаполнитьЗначенияСвойств(Отборы, ЭтаФорма);
	Отборы.Вставить("ДатаНачалаПериода",ДатаНачала);
	Отборы.Вставить("ДатаОкончанияПериода",ДатаОкончания);
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;

	ПараметрыВыполненияВФоне=ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Отчеты.ПовторныеПродажи.ЗаполнитьСегментыКлиентов", 
		Отборы,
		ПараметрыВыполненияВФоне);
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресРезультата;
	
	Если РезультатВыполнения.Статус = "Выполнено" Тогда
		ВывестиСегменты();
	КонецЕсли;

	Возврат РезультатВыполнения;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ВывестиСегменты();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ИдентификаторЗадания)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

&НаСервере
Процедура ВывестиСегменты()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	УдалитьИзВременногоХранилища(АдресХранилища);
	ИдентификаторЗадания = Неопределено;

	ИменаПараметровОтборов = 
		"Организация,ОрганизацияИспользование,
		|Менеджер,МенеджерИспользование,
		|ДатаНачала,ДатаОкончания,ПериодИспользование,
		|Номенклатура,НоменклатураИспользование,,
		|СегментКлиентов,СегментКлиентовИспользование,
		|СегментНоменклатуры,СегментНоменклатурыИспользование,
		|СуммаПокупок,СуммаПокупокИспользование";

	Отборы = Новый Структура(ИменаПараметровОтборов);
	ЗаполнитьЗначенияСвойств(Отборы, ЭтаФорма);
			
	//Выводим сегменты	
	Макет = Отчеты.ПовторныеПродажи.ПолучитьМакет("КлассификацияКлиентов");
	
	ОбластьАктивные = Макет.ПолучитьОбласть("Активные");
	ОбластьЗасыпающие = Макет.ПолучитьОбласть("Засыпающие");
	ОбластьСпящие = Макет.ПолучитьОбласть("Спящие");
	
	//Заполняем параметры	
	
	//Заполняем и/или рассчитываем процент переходов
	Если ОтображатьНадписиУСтрелок = "Проценты" Или ОтображатьНадписиУСтрелок = "ПроцентыЧисла" Тогда
		
		Если (РезультатВыполнения.АктивныеНовыеНачало.Количество()+РезультатВыполнения.ПерваяПокупка.Количество()) <> 0 Тогда  
			ПроцентПереходАП = Формат(Окр(100*РезультатВыполнения.ПереходАП/(РезультатВыполнения.АктивныеНовыеНачало.Количество()+РезультатВыполнения.ПерваяПокупка.Количество())), НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
			ПроцентПереходЗН = Формат(Окр(100*РезультатВыполнения.ПереходЗН/(РезультатВыполнения.АктивныеНовыеНачало.Количество()+РезультатВыполнения.ПерваяПокупка.Количество())),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
		Иначе
			ПроцентПереходАП = "0%";
			ПроцентПереходЗН = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.ЗасыпающиеНовыеНачало.Количество()+РезультатВыполнения.ПереходЗН) <> 0 Тогда  	
			ПроцентПереходСН = Формат(Окр(100*РезультатВыполнения.ПереходСН/(РезультатВыполнения.ЗасыпающиеНовыеНачало.Количество()+РезультатВыполнения.ПереходЗН)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));	
			ПроцентПереходЗНАП = Формат(Окр(100*РезультатВыполнения.ПереходЗНАП/(РезультатВыполнения.ЗасыпающиеНовыеНачало.Количество()+РезультатВыполнения.ПереходЗН)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));	
		Иначе
			ПроцентПереходСН = "0%";
			ПроцентПереходЗНАП = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.СпящиеНовыеНачало.Количество()+РезультатВыполнения.ПереходСН)<> 0 Тогда 
			ПроцентПереходСНАП = Формат(Окр(100*РезультатВыполнения.ПереходСНАП/(РезультатВыполнения.СпящиеНовыеНачало.Количество()+РезультатВыполнения.ПереходСН)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
		Иначе
			ПроцентПереходСНАП = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.АктивныеПерспективныеНачало.Количество()+РезультатВыполнения.ПереходАП+РезультатВыполнения.ПереходЗНАП+РезультатВыполнения.ПереходСНАП+РезультатВыполнения.ПереходЗПАП) <> 0 Тогда
			ПроцентПереходАВ = Формат(Окр(100*РезультатВыполнения.ПереходАВ/(РезультатВыполнения.АктивныеПерспективныеНачало.Количество()
				+ РезультатВыполнения.ПереходАП+РезультатВыполнения.ПереходЗНАП+РезультатВыполнения.ПереходСНАП+РезультатВыполнения.ПереходЗПАП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));	
			ПроцентПереходЗП = Формат(Окр(100*РезультатВыполнения.ПереходЗП/(РезультатВыполнения.АктивныеПерспективныеНачало.Количество()
				+ РезультатВыполнения.ПереходАП+РезультатВыполнения.ПереходЗНАП+РезультатВыполнения.ПереходСНАП+РезультатВыполнения.ПереходЗПАП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));	
		Иначе
			ПроцентПереходАВ = "0%";
			ПроцентПереходЗП = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.ЗасыпающиеПерспективныеНачало.Количество()+РезультатВыполнения.ПереходЗП+РезультатВыполнения.ПереходСПАП) <> 0 Тогда
			ПроцентПереходСП = Формат(Окр(100*РезультатВыполнения.ПереходСП/(РезультатВыполнения.ЗасыпающиеПерспективныеНачало.Количество()+РезультатВыполнения.ПереходЗП+РезультатВыполнения.ПереходСПАП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
			ПроцентПереходЗПАП = Формат(Окр(100*РезультатВыполнения.ПереходЗПАП/(РезультатВыполнения.ЗасыпающиеПерспективныеНачало.Количество()+РезультатВыполнения.ПереходЗП+РезультатВыполнения.ПереходСПАП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
			ПроцентПереходЗПАВ = Формат(Окр(100*РезультатВыполнения.ПереходЗПАВ/(РезультатВыполнения.ЗасыпающиеПерспективныеНачало.Количество()+РезультатВыполнения.ПереходЗП+РезультатВыполнения.ПереходСПАП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
		Иначе
			ПроцентПереходСП = "0%";
			ПроцентПереходЗПАП = "0%";
			ПроцентПереходЗПАВ = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.СпящиеПерспективныеСписокНачало.Количество()+РезультатВыполнения.ПереходСП) <> 0 Тогда 
			ПроцентПереходСПАП = Формат(Окр(100*РезультатВыполнения.ПереходСПАП/(РезультатВыполнения.СпящиеПерспективныеСписокНачало.Количество()+РезультатВыполнения.ПереходСП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
			ПроцентПереходСПАВ = Формат(Окр(100*РезультатВыполнения.ПереходСПАВ/(РезультатВыполнения.СпящиеПерспективныеСписокНачало.Количество()+РезультатВыполнения.ПереходСП)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
		Иначе
			ПроцентПереходСПАП = "0%";
			ПроцентПереходСПАВ = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.АктивныеВерныеНачало.Количество()+РезультатВыполнения.ПереходАВ+РезультатВыполнения.ПереходЗПАВ+РезультатВыполнения.ПереходСПАВ+РезультатВыполнения.ПереходЗВАВ) <> 0 Тогда 
			ПроцентПереходЗВ = Формат(Окр(100*РезультатВыполнения.ПереходЗВ/(РезультатВыполнения.АктивныеВерныеНачало.Количество()
				+ РезультатВыполнения.ПереходАВ+РезультатВыполнения.ПереходЗПАВ+РезультатВыполнения.ПереходСПАВ+РезультатВыполнения.ПереходЗВАВ)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));	
		Иначе
			ПроцентПереходЗВ = "0%";	
		КонецЕсли;
		
		Если (РезультатВыполнения.ЗасыпающиеВерныеНачало.Количество()+РезультатВыполнения.ПереходЗВ+РезультатВыполнения.ПереходСВАВ) <> 0 Тогда  
			ПроцентПереходСВ = Формат(Окр(100*РезультатВыполнения.ПереходСВ/(РезультатВыполнения.ЗасыпающиеВерныеНачало.Количество()
				+ РезультатВыполнения.ПереходЗВ+РезультатВыполнения.ПереходСВАВ)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
			ПроцентПереходЗВАВ = Формат(Окр(100*РезультатВыполнения.ПереходЗВАВ/(РезультатВыполнения.ЗасыпающиеВерныеНачало.Количество()
				+ РезультатВыполнения.ПереходЗВ+РезультатВыполнения.ПереходСВАВ)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
		Иначе
			ПроцентПереходСВ = "0%";
			ПроцентПереходЗВАВ = "0%";
		КонецЕсли;
		
		Если (РезультатВыполнения.СпящиеВерныеСписокНачало.Количество()+РезультатВыполнения.ПереходСВ) <> 0 Тогда	
			ПроцентПереходСВАВ = Формат(Окр(100*РезультатВыполнения.ПереходСВАВ/(РезультатВыполнения.СпящиеВерныеСписокНачало.Количество()+РезультатВыполнения.ПереходСВ)),НСтр("ru = 'ЧДЦ=0; ЧН=0%; ЧФ=Ч%'"));
		Иначе
			ПроцентПереходСВАВ = "0%";
		КонецЕсли;
		
		Если ОтображатьНадписиУСтрелок = "ПроцентыЧисла" Тогда
			
			ОбластьАктивные.Параметры.ПереходАП=Строка(РезультатВыполнения.ПереходАП) + " (" + Строка(ПроцентПереходАП) + ")";
			ОбластьАктивные.Параметры.ПереходАВ=Строка(РезультатВыполнения.ПереходАВ) + " (" + Строка(ПроцентПереходАВ) + ")";
			
			ОбластьЗасыпающие.Параметры.ПереходЗН = Строка(РезультатВыполнения.ПереходЗН) + " (" + Строка(ПроцентПереходЗН) + ")";
			ОбластьЗасыпающие.Параметры.ПереходЗП = Строка(РезультатВыполнения.ПереходЗП) + " (" + Строка(ПроцентПереходЗП) + ")";
		
			ОбластьСпящие.Параметры.ПереходСН = Строка(РезультатВыполнения.ПереходСН) + " (" + Строка(ПроцентПереходСН) + ")";
			ОбластьСпящие.Параметры.ПереходСП = Строка(РезультатВыполнения.ПереходСП) + " (" + Строка(ПроцентПереходСП) + ")";
			
			ОбластьЗасыпающие.Параметры.ПереходЗВ = Строка(РезультатВыполнения.ПереходЗВ) + " (" + Строка(ПроцентПереходЗВ) + ")";
			ОбластьСпящие.Параметры.ПереходСВ = Строка(РезультатВыполнения.ПереходСВ) + " (" + Строка(ПроцентПереходСВ) + ")";	
			
			//Стрелки вверх
			ОбластьСпящие.Параметры.ПереходСНАП = Строка(РезультатВыполнения.ПереходСНАП) + " (" + Строка(ПроцентПереходСНАП) + ")";
			ОбластьЗасыпающие.Параметры.ПереходЗНАП = Строка(РезультатВыполнения.ПереходЗНАП) + " (" + Строка(ПроцентПереходЗНАП) + ")";

			ОбластьСпящие.Параметры.ПереходСВАВ = Строка(РезультатВыполнения.ПереходСВАВ) + " (" + Строка(ПроцентПереходСВАВ) + ")";
			ОбластьЗасыпающие.Параметры.ПереходЗВАВ = Строка(РезультатВыполнения.ПереходЗВАВ) + " (" + Строка(ПроцентПереходЗВАВ) + ")";
			
			ОбластьСпящие.Параметры.ПереходСПАП = Строка(РезультатВыполнения.ПереходСПАП) + " (" + Строка(ПроцентПереходСПАП) + ")";
			ОбластьЗасыпающие.Параметры.ПереходЗПАП = Строка(РезультатВыполнения.ПереходЗПАП) + " (" + Строка(ПроцентПереходЗПАП) + ")";
			
			ОбластьСпящие.Параметры.ПереходСПАВ =  Строка(РезультатВыполнения.ПереходСПАВ) + " (" + Строка(ПроцентПереходСПАВ) + ")";;
			ОбластьЗасыпающие.Параметры.ПереходЗПАВ =  Строка(РезультатВыполнения.ПереходЗПАВ) + " (" + Строка(ПроцентПереходЗПАВ) + ")";;
		ИначеЕсли ОтображатьНадписиУСтрелок = "Проценты" Тогда
			
			ОбластьАктивные.Параметры.ПереходАП = ПроцентПереходАП;
			ОбластьАктивные.Параметры.ПереходАВ = ПроцентПереходАВ;
			
			ОбластьЗасыпающие.Параметры.ПереходЗН = ПроцентПереходЗН;
			ОбластьЗасыпающие.Параметры.ПереходЗП = ПроцентПереходЗП;
			
			ОбластьСпящие.Параметры.ПереходСН = ПроцентПереходСН;
			ОбластьСпящие.Параметры.ПереходСП =  ПроцентПереходСП;
			
			ОбластьЗасыпающие.Параметры.ПереходЗВ = ПроцентПереходЗВ;
			ОбластьСпящие.Параметры.ПереходСВ = ПроцентПереходСВ;	
			
			//Стрелки вверх
			ОбластьСпящие.Параметры.ПереходСНАП = ПроцентПереходСНАП;
			ОбластьЗасыпающие.Параметры.ПереходЗНАП = ПроцентПереходЗНАП;

			ОбластьСпящие.Параметры.ПереходСВАВ = ПроцентПереходСВАВ;
			ОбластьЗасыпающие.Параметры.ПереходЗВАВ = ПроцентПереходЗВАВ;
			
			ОбластьСпящие.Параметры.ПереходСПАП = ПроцентПереходСПАП;
			ОбластьЗасыпающие.Параметры.ПереходЗПАП = ПроцентПереходЗПАП;
			
			ОбластьСпящие.Параметры.ПереходСПАВ = ПроцентПереходСПАВ;
			ОбластьЗасыпающие.Параметры.ПереходЗПАВ = ПроцентПереходЗПАВ;
		КонецЕсли;

	ИначеЕсли ОтображатьНадписиУСтрелок = "Числа" Тогда 
		ОбластьАктивные.Параметры.ПереходАП=РезультатВыполнения.ПереходАП;
		ОбластьАктивные.Параметры.ПереходАВ=РезультатВыполнения.ПереходАВ;	
		ОбластьЗасыпающие.Параметры.ПереходЗН = РезультатВыполнения.ПереходЗН;
		ОбластьЗасыпающие.Параметры.ПереходЗП =РезультатВыполнения.ПереходЗП;	
		ОбластьСпящие.Параметры.ПереходСН = РезультатВыполнения.ПереходСН;
		ОбластьСпящие.Параметры.ПереходСП = РезультатВыполнения.ПереходСП;	
		ОбластьЗасыпающие.Параметры.ПереходЗВ =РезультатВыполнения.ПереходЗВ;
		ОбластьСпящие.Параметры.ПереходСВ = РезультатВыполнения.ПереходСВ;		
		//Стрелки вверх
		ОбластьСпящие.Параметры.ПереходСНАП = РезультатВыполнения.ПереходСНАП;
		ОбластьЗасыпающие.Параметры.ПереходЗНАП = РезультатВыполнения.ПереходЗНАП;
		ОбластьСпящие.Параметры.ПереходСВАВ = РезультатВыполнения.ПереходСВАВ;
		ОбластьЗасыпающие.Параметры.ПереходЗВАВ = РезультатВыполнения.ПереходЗВАВ;
		ОбластьСпящие.Параметры.ПереходСПАП = РезультатВыполнения.ПереходСПАП;
		ОбластьЗасыпающие.Параметры.ПереходЗПАП = РезультатВыполнения.ПереходЗПАП;
		ОбластьСпящие.Параметры.ПереходСПАВ = РезультатВыполнения.ПереходСПАВ;
		ОбластьЗасыпающие.Параметры.ПереходЗПАВ = РезультатВыполнения.ПереходЗПАВ;
	КонецЕсли;

	ОбластьАктивные.Параметры.Новые = РезультатВыполнения.ПерваяПокупка.Количество();
		
	//Заполняем количество клиентов
	КоличествоКлиентовВсего = РезультатВыполнения.АктивныеНовые.Количество()+РезультатВыполнения.АктивныеПерспективные.Количество()+РезультатВыполнения.АктивныеВерные.Количество()
			+РезультатВыполнения.ЗасыпающиеНовые.Количество()+РезультатВыполнения.ЗасыпающиеПерспективные.Количество()+РезультатВыполнения.ЗасыпающиеВерные.Количество()
			+РезультатВыполнения.СпящиеНовые.Количество()+РезультатВыполнения.СпящиеПерспективныеСписок.Количество()+РезультатВыполнения.СпящиеВерныеСписок.Количество();

	Если КоличествоКлиентовВсего <> 0 Тогда 
		АктивныеНовыеПроценты = (РезультатВыполнения.АктивныеНовые.Количество()/КоличествоКлиентовВсего)*100;
		АктивныеПерспективныеПроценты = (РезультатВыполнения.АктивныеПерспективные.Количество()/КоличествоКлиентовВсего)*100;
		АктивныеВерныеПроценты = (РезультатВыполнения.АктивныеВерные.Количество()/КоличествоКлиентовВсего)*100;

		ЗасыпающиеНовыеПроценты = (РезультатВыполнения.ЗасыпающиеНовые.Количество()/КоличествоКлиентовВсего)*100;
		ЗасыпающиеПерспективныеПроценты = (РезультатВыполнения.ЗасыпающиеПерспективные.Количество()/КоличествоКлиентовВсего)*100;
		ЗасыпающиеВерныеПроценты = (РезультатВыполнения.ЗасыпающиеВерные.Количество()/КоличествоКлиентовВсего)*100;

		СпящиеНовыеПроценты = (РезультатВыполнения.СпящиеНовые.Количество()/КоличествоКлиентовВсего)*100;
		СпящиеПерспективныеПроценты = (РезультатВыполнения.СпящиеПерспективныеСписок.Количество()/КоличествоКлиентовВсего)*100;
		СпящиеВерныеПроценты = (РезультатВыполнения.СпящиеВерныеСписок.Количество()/КоличествоКлиентовВсего)*100;
	КонецЕсли;
	
	//Заполняем и/или рассчитываем процент клиентов
	Если Не КлиентыЧислаПроценты Тогда 
		ОбластьАктивные.Параметры.АН = РезультатВыполнения.АктивныеНовые.Количество();
		ОбластьАктивные.Параметры.АП = РезультатВыполнения.АктивныеПерспективные.Количество();
		ОбластьАктивные.Параметры.АВ = РезультатВыполнения.АктивныеВерные.Количество();
		
		ОбластьЗасыпающие.Параметры.ЗН = РезультатВыполнения.ЗасыпающиеНовые.Количество();
		ОбластьЗасыпающие.Параметры.ЗП = РезультатВыполнения.ЗасыпающиеПерспективные.Количество();
		ОбластьЗасыпающие.Параметры.ЗВ = РезультатВыполнения.ЗасыпающиеВерные.Количество();

		ОбластьСпящие.Параметры.СН = РезультатВыполнения.СпящиеНовые.Количество();
		ОбластьСпящие.Параметры.СП = РезультатВыполнения.СпящиеПерспективныеСписок.Количество();
		ОбластьСпящие.Параметры.СВ = РезультатВыполнения.СпящиеВерныеСписок.Количество();
	Иначе			
		Текст = НСтр("ru='[Количество] ([Проценты]%)'");
		Значения = Новый Структура("Количество, Проценты");
		
		Значения.Вставить("Количество", РезультатВыполнения.АктивныеНовые.Количество());	
		Значения.Вставить("Проценты", Формат(АктивныеНовыеПроценты,"ЧДЦ=0"));
		ОбластьАктивные.Параметры.АН = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);	
		Значения.Вставить("Количество", РезультатВыполнения.АктивныеПерспективные.Количество());
		Значения.Вставить("Проценты", Формат(АктивныеПерспективныеПроценты,"ЧДЦ=0"));
		ОбластьАктивные.Параметры.АП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
		Значения.Вставить("Количество", РезультатВыполнения.АктивныеВерные.Количество());
		Значения.Вставить("Проценты", Формат(АктивныеВерныеПроценты,"ЧДЦ=0"));
		ОбластьАктивные.Параметры.АВ = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);

		Значения.Вставить("Количество", РезультатВыполнения.ЗасыпающиеНовые.Количество());
		Значения.Вставить("Проценты", Формат(ЗасыпающиеНовыеПроценты,"ЧДЦ=0"));
		ОбластьЗасыпающие.Параметры.ЗН = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
		Значения.Вставить("Количество", РезультатВыполнения.ЗасыпающиеПерспективные.Количество());
		Значения.Вставить("Проценты", Формат(ЗасыпающиеПерспективныеПроценты,"ЧДЦ=0"));
		ОбластьЗасыпающие.Параметры.ЗП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
		Значения.Вставить("Количество", РезультатВыполнения.ЗасыпающиеВерные.Количество());
		Значения.Вставить("Проценты", Формат(ЗасыпающиеВерныеПроценты,"ЧДЦ=0"));
		ОбластьЗасыпающие.Параметры.ЗВ = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
		
		Значения.Вставить("Количество", РезультатВыполнения.СпящиеНовые.Количество());
		Значения.Вставить("Проценты", Формат(СпящиеНовыеПроценты,"ЧДЦ=0"));
		ОбластьСпящие.Параметры.СН	= СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
		Значения.Вставить("Количество", РезультатВыполнения.СпящиеПерспективныеСписок.Количество());
		Значения.Вставить("Проценты", Формат(СпящиеПерспективныеПроценты,"ЧДЦ=0"));
		ОбластьСпящие.Параметры.СП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
		Значения.Вставить("Количество", РезультатВыполнения.СпящиеВерныеСписок.Количество());
		Значения.Вставить("Проценты", Формат(СпящиеВерныеПроценты,"ЧДЦ=0"));
		ОбластьСпящие.Параметры.СВ = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(Текст,Значения);
	КонецЕсли;
	
	//Заполняем выручку и потенциал
	Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	ФорматСтр = НСтр("ru='[Выручка] [Валюта]'");
	ВыручкаВалюта = Новый Структура("Валюта", Валюта);
	
	ВыручкаВалюта.Вставить("Выручка", Формат(РезультатВыполнения.ВыручкаНовые,"ЧДЦ=2; ЧН=0"));
	ОбластьАктивные.Параметры.АНП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
	
	ВыручкаВалюта.Вставить("Выручка", Формат(РезультатВыполнения.ВыручкаПерспективные,"ЧДЦ=2; ЧН=0"));
	ОбластьАктивные.Параметры.АПП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
	
	ВыручкаВалюта.Вставить("Выручка", Формат(РезультатВыполнения.ВыручкаВерные,"ЧДЦ=2; ЧН=0"));
	ОбластьАктивные.Параметры.АВП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
	
	//Делаем запрос на средний чек за прошлый период
	ЗапросПотенциал = Новый Запрос();
	ЗапросПотенциал.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                        |	Сегменты.Партнер КАК Партнер
	                        |ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	                        |ИЗ
	                        |	РегистрСведений.ПартнерыСегмента КАК Сегменты
	                        |ГДЕ
	                        |	Сегменты.Сегмент = &СегментКлиентов
	                        |
	                        |ИНДЕКСИРОВАТЬ ПО
	                        |	Партнер
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                        |	Сегменты.Номенклатура КАК Номенклатура
	                        |ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	                        |ИЗ
	                        |	РегистрСведений.НоменклатураСегмента КАК Сегменты
	                        |ГДЕ
	                        |	Сегменты.Сегмент = &СегментНоменклатуры
	                        |
	                        |ИНДЕКСИРОВАТЬ ПО
	                        |	Номенклатура
	                        |;
	                        |
	                        |////////////////////////////////////////////////////////////////////////////////
	                        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                        |	СРЕДНЕЕ(Продажи.СуммаВыручкиОборот) КАК СуммаВыручкиОборот
	                        |ИЗ
	                        |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	                        |			&НачалоПериода,
	                        |			&КонецПериода,
	                        |			Авто,
	                        |			(НЕ &ИспользуетсяОтборПоНоменклатуре
	                        |				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура)
	                        |				И (НЕ &ИспользуетсяОтборПоСегментуПартнеров
	                        |					ИЛИ АналитикаУчетаПоПартнерам.Партнер В
	                        |						(ВЫБРАТЬ
	                        |							ОтборПоСегментуПартнеров.Партнер
	                        |						ИЗ
	                        |							ОтборПоСегментуПартнеров))
	                        |				И (НЕ &ИспользуетсяОтборПоСегментуНоменклатуры
	                        |					ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В
	                        |						(ВЫБРАТЬ
	                        |							ОтборПоСегментуНоменклатуры.Номенклатура
	                        |						ИЗ
	                        |							ОтборПоСегментуНоменклатуры))
	                        |				И (НЕ &ИспользуетсяОтборПоМенеджеру
	                        |					ИЛИ Менеджер = &Менеджер)) КАК Продажи
	                        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	                        |		ПО Продажи.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	                        |ГДЕ
	                        |	(НЕ &ИспользуетсяОтборПоОрганизации
	                        |			ИЛИ КлючиАналитикиУчетаПоПартнерам.Организация = &Организация)
	                        |	И (НЕ &ИспользуетсяОтборПоСуммеПокупок
	                        |			ИЛИ Продажи.СуммаВыручкиОборот > &СуммаПокупок)
	                        |	И Продажи.СуммаВыручкиОборот > 0
	                        |СГРУППИРОВАТЬ ПО
	                        |	Продажи.Регистратор
	                        |ИТОГИ
	                        |	СРЕДНЕЕ(СуммаВыручкиОборот)
	                        |ПО
	                        |	ОБЩИЕ";
	
	//Устанавлиаем отбор
	ЗапросПотенциал.УстановитьПараметр("ИспользуетсяОтборПоНоменклатуре",НоменклатураИспользование);
	ЗапросПотенциал.УстановитьПараметр("ИспользуетсяОтборПоОрганизации",ОрганизацияИспользование);
	ЗапросПотенциал.УстановитьПараметр("ИспользуетсяОтборПоСуммеПокупок",СуммаПокупокИспользование);
	ЗапросПотенциал.УстановитьПараметр("ИспользуетсяОтборПоСегментуПартнеров",СегментКлиентовИспользование);
	ЗапросПотенциал.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры",СегментНоменклатурыИспользование);
	ЗапросПотенциал.УстановитьПараметр("ИспользуетсяОтборПоМенеджеру",МенеджерИспользование);
	ЗапросПотенциал.УстановитьПараметр("СегментКлиентов",СегментКлиентов);
	ЗапросПотенциал.УстановитьПараметр("СегментНоменклатуры",СегментНоменклатуры);
	ЗапросПотенциал.УстановитьПараметр("Номенклатура",Номенклатура);
	ЗапросПотенциал.УстановитьПараметр("Организация",Организация);
	ЗапросПотенциал.УстановитьПараметр("СуммаПокупок",СуммаПокупок);
	ЗапросПотенциал.УстановитьПараметр("Менеджер",Менеджер);
	
	//Рассчитываем период потенциала
	ДатаНачалаПотенциал = ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), -Потенциал);
	
	ЗапросПотенциал.УстановитьПараметр("НачалоПериода",ДатаНачалаПотенциал);
	ЗапросПотенциал.УстановитьПараметр("КонецПериода",КонецДня(ТекущаяДатаСеанса()));
	Выборка = ЗапросПотенциал.Выполнить();

		
	//Проверяем результат и вычисляем потенциал
	Если Не Выборка.Пустой()Тогда
		
		ПотенциалРезультат = Выборка.Выгрузить()[0].СуммаВыручкиОборот;
		ВыручкаВалюта.Вставить("Выручка", Формат(ПотенциалРезультат*РезультатВыполнения.ЗасыпающиеНовые.Количество(),"ЧДЦ=2; ЧН=0"));	
		ОбластьЗасыпающие.Параметры.ЗНП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
		
		ВыручкаВалюта.Вставить("Выручка", Формат(ПотенциалРезультат*РезультатВыполнения.ЗасыпающиеПерспективные.Количество(),"ЧДЦ=2; ЧН=0"));	
		ОбластьЗасыпающие.Параметры.ЗПП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
		
		ВыручкаВалюта.Вставить("Выручка", Формат(ПотенциалРезультат*РезультатВыполнения.ЗасыпающиеВерные.Количество(),"ЧДЦ=2; ЧН=0"));	
		ОбластьЗасыпающие.Параметры.ЗВП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
		
		ВыручкаВалюта.Вставить("Выручка",Формат(ПотенциалРезультат*РезультатВыполнения.СпящиеНовые.Количество(),"ЧДЦ=2; ЧН=0"));	
		ОбластьСпящие.Параметры.СНП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
		
		ВыручкаВалюта.Вставить("Выручка", Формат(ПотенциалРезультат*РезультатВыполнения.СпящиеПерспективныеСписок.Количество(),"ЧДЦ=2; ЧН=0"));	
		ОбластьСпящие.Параметры.СПП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);
		
		ВыручкаВалюта.Вставить("Выручка", Формат(ПотенциалРезультат*РезультатВыполнения.СпящиеВерныеСписок.Количество(),"ЧДЦ=2; ЧН=0"));	
		ОбластьСпящие.Параметры.СВП = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ФорматСтр,ВыручкаВалюта);

	Иначе
		ПотенциалРезультат = "?";
		
		ОбластьЗасыпающие.Параметры.ЗНП = ПотенциалРезультат;
		ОбластьЗасыпающие.Параметры.ЗПП = ПотенциалРезультат;
		ОбластьЗасыпающие.Параметры.ЗВП = ПотенциалРезультат;

		ОбластьСпящие.Параметры.СНП = ПотенциалРезультат;
		ОбластьСпящие.Параметры.СПП = ПотенциалРезультат;
		ОбластьСпящие.Параметры.СВП = ПотенциалРезультат;
	КонецЕсли;
			
	РасшифровкаАН = Новый Структура();
	РасшифровкаАН.Вставить("СписокРасшифровки",РезультатВыполнения.АктивныеНовые);
	РасшифровкаАН.Вставить("Проценты",АктивныеНовыеПроценты);
	РасшифровкаАН.Вставить("Выручка",РезультатВыполнения.ВыручкаНовые);
	РасшифровкаАН.Вставить("Сегмент","АН");
	РасшифровкаАН.Вставить("Отбор",Отборы);
	РасшифровкаАН.Вставить("До",АктивныеДо);
	
	РасшифровкаАП = Новый Структура();
	РасшифровкаАП.Вставить("СписокРасшифровки",РезультатВыполнения.АктивныеПерспективные);
	РасшифровкаАП.Вставить("Проценты",АктивныеПерспективныеПроценты);
	РасшифровкаАП.Вставить("Выручка",РезультатВыполнения.ВыручкаПерспективные);
	РасшифровкаАП.Вставить("Сегмент","АП");
	РасшифровкаАП.Вставить("Отбор",Отборы);
	РасшифровкаАП.Вставить("ПокупкиОт",ПокупкиПерспективныеОт);
	РасшифровкаАП.Вставить("ПокупкиДо",ПокупкиПерспективныеДо);
	РасшифровкаАП.Вставить("До",АктивныеПерспективныеДо);

	РасшифровкаАВ = Новый Структура();
	РасшифровкаАВ.Вставить("СписокРасшифровки",РезультатВыполнения.АктивныеВерные);
	РасшифровкаАВ.Вставить("Проценты",АктивныеВерныеПроценты);
	РасшифровкаАВ.Вставить("Выручка",РезультатВыполнения.ВыручкаВерные);
	РасшифровкаАВ.Вставить("Сегмент","АВ");
	РасшифровкаАВ.Вставить("Отбор",Отборы);
	РасшифровкаАВ.Вставить("Покупки",ПокупкиВерные);
	РасшифровкаАВ.Вставить("До",АктивныеВерныеДо);
	
	ОбластьАктивные.Параметры.кАН = РасшифровкаАН;
	ОбластьАктивные.Параметры.кАП = РасшифровкаАП;
	ОбластьАктивные.Параметры.кАВ = РасшифровкаАВ;
	
	РасшифровкаЗН = Новый Структура();
	РасшифровкаЗН.Вставить("СписокРасшифровки",РезультатВыполнения.ЗасыпающиеНовые);
	РасшифровкаЗН.Вставить("Проценты",ЗасыпающиеНовыеПроценты);
	РасшифровкаЗН.Вставить("Потенциал",ОбластьЗасыпающие.Параметры.ЗНП);
	РасшифровкаЗН.Вставить("Сегмент","ЗН");
	РасшифровкаЗН.Вставить("Отбор",Отборы);
	РасшифровкаЗН.Вставить("От",ЗасыпающиеОт);
	РасшифровкаЗН.Вставить("До",ЗасыпающиеДо);
	
	РасшифровкаЗП = Новый Структура();
	РасшифровкаЗП.Вставить("СписокРасшифровки",РезультатВыполнения.ЗасыпающиеПерспективные);
	РасшифровкаЗП.Вставить("Проценты",ЗасыпающиеПерспективныеПроценты);
	РасшифровкаЗП.Вставить("Потенциал", ОбластьЗасыпающие.Параметры.ЗПП);
	РасшифровкаЗП.Вставить("Сегмент","ЗП");
	РасшифровкаЗП.Вставить("Отбор",Отборы);
	РасшифровкаЗП.Вставить("ПокупкиОт",ПокупкиПерспективныеОт);
	РасшифровкаЗП.Вставить("ПокупкиДо",ПокупкиПерспективныеДо);
	РасшифровкаЗП.Вставить("От",ЗасыпающиеПерспективныеОт);
	РасшифровкаЗП.Вставить("До",ЗасыпающиеПерспективныеДо);
	
	РасшифровкаЗВ = Новый Структура();
	РасшифровкаЗВ.Вставить("СписокРасшифровки",РезультатВыполнения.ЗасыпающиеВерные);
	РасшифровкаЗВ.Вставить("Проценты",ЗасыпающиеВерныеПроценты);
	РасшифровкаЗВ.Вставить("Потенциал", ОбластьЗасыпающие.Параметры.ЗВП);
	РасшифровкаЗВ.Вставить("Сегмент","ЗВ");
	РасшифровкаЗВ.Вставить("Отбор",Отборы);
	РасшифровкаЗВ.Вставить("Покупки",ПокупкиВерные);
	РасшифровкаЗВ.Вставить("От",ЗасыпающиеВерныеОт);
	РасшифровкаЗВ.Вставить("До",ЗасыпающиеВерныеДо);

	ОбластьЗасыпающие.Параметры.кЗН = РасшифровкаЗН;  	
	ОбластьЗасыпающие.Параметры.кЗП = РасшифровкаЗП;
	ОбластьЗасыпающие.Параметры.кЗВ = РасшифровкаЗВ;
	
	РасшифровкаСН = Новый Структура();
	РасшифровкаСН.Вставить("СписокРасшифровки",РезультатВыполнения.СпящиеНовые);
	РасшифровкаСН.Вставить("Проценты",СпящиеНовыеПроценты);
	РасшифровкаСН.Вставить("Потенциал",ОбластьСпящие.Параметры.СНП);
	РасшифровкаСН.Вставить("Сегмент","СН");
	РасшифровкаСН.Вставить("Отбор",Отборы);
	РасшифровкаСН.Вставить("От",Спящие);
	
	РасшифровкаСП = Новый Структура();
	РасшифровкаСП.Вставить("СписокРасшифровки",РезультатВыполнения.СпящиеПерспективныеСписок);
	РасшифровкаСП.Вставить("Проценты",СпящиеПерспективныеПроценты);
	РасшифровкаСП.Вставить("Потенциал", ОбластьСпящие.Параметры.СПП);
	РасшифровкаСП.Вставить("Сегмент","СП");
	РасшифровкаСП.Вставить("Отбор",Отборы);
	РасшифровкаСП.Вставить("ПокупкиОт",ПокупкиПерспективныеОт);
	РасшифровкаСП.Вставить("ПокупкиДо",ПокупкиПерспективныеДо);
	РасшифровкаСП.Вставить("От",СпящиеПерспективные);
	
	РасшифровкаСВ = Новый Структура();
	РасшифровкаСВ.Вставить("СписокРасшифровки",РезультатВыполнения.СпящиеВерныеСписок);
	РасшифровкаСВ.Вставить("Проценты",СпящиеВерныеПроценты);
	РасшифровкаСВ.Вставить("Потенциал", ОбластьСпящие.Параметры.СВП);
	РасшифровкаСВ.Вставить("Сегмент","СВ");
	РасшифровкаСВ.Вставить("Отбор",Отборы);
	РасшифровкаСВ.Вставить("Покупки",ПокупкиВерные);
	РасшифровкаСВ.Вставить("От",СпящиеВерные);
	
	ОбластьСпящие.Параметры.кСН = РасшифровкаСН;
	ОбластьСпящие.Параметры.кСП = РасшифровкаСП;
	ОбластьСпящие.Параметры.кСВ = РасшифровкаСВ;
	
	// Выводим области
	Результат.Очистить();
	Результат.Вывести(ОбластьАктивные);
	Результат.Вывести(ОбластьЗасыпающие);
	Результат.Вывести(ОбластьСпящие);
	
	Если Не ОтображатьСтрелки Тогда
		Результат.УдалитьОбласть(Результат.Область("ПервичнаяСтрелка"),ТипСмещенияТабличногоДокумента.БезСмещения);
		Результат.УдалитьОбласть(Результат.Область("СтрелкиВертикаль1"),ТипСмещенияТабличногоДокумента.БезСмещения);
		Результат.УдалитьОбласть(Результат.Область("СтрелкиВертикаль2"),ТипСмещенияТабличногоДокумента.БезСмещения);
		Результат.УдалитьОбласть(Результат.Область("СтрелкиГоризонталь1"),ТипСмещенияТабличногоДокумента.БезСмещения);
		Результат.УдалитьОбласть(Результат.Область("СтрелкиГоризонталь2"),ТипСмещенияТабличногоДокумента.БезСмещения);
	КонецЕсли;  
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");

КонецПроцедуры

#КонецОбласти
