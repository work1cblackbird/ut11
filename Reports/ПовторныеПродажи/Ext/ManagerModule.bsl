//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// Задает расширенные настройки отчета
//
// Параметры:
//   Настройки - см. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.Настройки.
//
Процедура НастроитьВариантыОтчета(Настройки) Экспорт
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПовторныеПродажи);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ и организация стабильных продаж по постоянной клиентской базе.
	    |Каким клиентами будет выгодно сделать своевременное предложение?'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПолей = НСтр("ru= 'Клиенты
		|Клиент
		|Сегмент
		|Выручка
		|Потенциал
		|Активные
		|Засыпающие
		|Спящие и потерянные
		|Новые
		|Перспективные
		|Верные
		|Телефон
		|Продажи'");
	ОписаниеВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов = НСтр("ru= 'Дата начала
		|Дата окончания
		|Период
		|Организация
		|Менеджер
		|Сумма покупки от
		|Сегмент клиентов
		|Сегмент номенклатуры
		|Номенклатура'");
	Подсистема = Метаданные.НайтиПоПолномуИмени("Подсистема.CRMИМаркетинг.Подсистема.АнализКлиентскойБазы");
	ОписаниеВарианта.Размещение.Вставить(Подсистема);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

Процедура ЗаполнитьСегментыКлиентов(Отборы,АдресХранилища) Экспорт

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Сегменты.Партнер КАК Партнер
	               |ПОМЕСТИТЬ ОтборПоСегментуПартнеров
	               |ИЗ
	               |	РегистрСведений.ПартнерыСегмента КАК Сегменты
	               |ГДЕ
	               |	Сегменты.Сегмент = &СегментКлиентов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Партнер
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Сегменты.Номенклатура КАК Номенклатура
	               |ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
	               |ИЗ
	               |	РегистрСведений.НоменклатураСегмента КАК Сегменты
	               |ГДЕ
	               |	Сегменты.Сегмент = &СегментНоменклатуры
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Продажи.Регистратор) КАК Регистратор,
	               |	Продажи.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	               |	МАКСИМУМ(Продажи.ПериодСекунда) КАК ДатаПоследнейПокупки,
	               |	МИНИМУМ(Продажи.ПериодСекунда) КАК ДатаПервойПокупки
	               |ИЗ
	               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			Авто,
	               |			(НЕ &ИспользуетсяОтборПоНоменклатуре
	               |				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура)
	               |				И (НЕ &ИспользуетсяОтборПоСегментуПартнеров
	               |					ИЛИ АналитикаУчетаПоПартнерам.Партнер В
	               |						(ВЫБРАТЬ
	               |							ОтборПоСегментуПартнеров.Партнер
	               |						ИЗ
	               |							ОтборПоСегментуПартнеров))
	               |				И (НЕ &ИспользуетсяОтборПоСегментуНоменклатуры
	               |					ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В
	               |						(ВЫБРАТЬ
	               |							ОтборПоСегментуНоменклатуры.Номенклатура
	               |						ИЗ
	               |							ОтборПоСегментуНоменклатуры))
	               |				И (НЕ &ИспользуетсяОтборПоМенеджеру
	               |					ИЛИ Менеджер = &Менеджер)) КАК Продажи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
	               |		ПО Продажи.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
	               |ГДЕ
	               |	(НЕ &ИспользуетсяОтборПоОрганизации
	               |			ИЛИ КлючиАналитикиУчетаПоПартнерам.Организация = &Организация)
	               |	И (НЕ &ИспользуетсяОтборПоСуммеПокупок
	               |			ИЛИ Продажи.СуммаВыручкиОборот > &СуммаПокупок)
	               |	И Продажи.СуммаВыручкиОборот > 0
	               |СГРУППИРОВАТЬ ПО
	               |	Продажи.АналитикаУчетаПоПартнерам.Партнер";

	//Устанавлиаем отборы
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоНоменклатуре",Отборы.НоменклатураИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоОрганизации",Отборы.ОрганизацияИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСуммеПокупок",Отборы.СуммаПокупокИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуПартнеров",Отборы.СегментКлиентовИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры",Отборы.СегментНоменклатурыИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоМенеджеру",Отборы.МенеджерИспользование);
	Запрос.УстановитьПараметр("СегментКлиентов",Отборы.СегментКлиентов);
	Запрос.УстановитьПараметр("СегментНоменклатуры",Отборы.СегментНоменклатуры);
	Запрос.УстановитьПараметр("Номенклатура",Отборы.Номенклатура);
	Запрос.УстановитьПараметр("Организация",Отборы.Организация);
	Запрос.УстановитьПараметр("СуммаПокупок",Отборы.СуммаПокупок);
	Запрос.УстановитьПараметр("Менеджер",Отборы.Менеджер);
	
	Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Дата('00010101000000')));
	Запрос.УстановитьПараметр("КонецПериода",КонецДня(ТекущаяДатаСеанса()));
	
	Выборка = Запрос.Выполнить().Выбрать();
		
	ПерваяПокупка = Новый СписокЗначений;

	//Считаем первые покупки
	Пока Выборка.Следующий() Цикл			
		Если Отборы.ПериодИспользование = Истина Тогда
			//Если период используется, проверяем входят ли в период даты самой первой покупки клиента
			Если Выборка.ДатаПервойПокупки >= НачалоДня(Отборы.ДатаНачалаПериода) И Выборка.ДатаПервойПокупки <= КонецДня(Отборы.ДатаОкончанияПериода) Тогда
					ПерваяПокупка.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
			Иначе
				//Если период не используется, то каждая покупка первая
				ПерваяПокупка.Добавить(Выборка.Партнер, Выборка.Партнер);	
			КонецЕсли;
	КонецЦикла;
	
	АктивныеНовыеНачало = Новый СписокЗначений; 
	ЗасыпающиеНовыеНачало = Новый СписокЗначений;
	СпящиеНовыеНачало = Новый СписокЗначений;
		
	АктивныеПерспективныеНачало = Новый СписокЗначений;
	ЗасыпающиеПерспективныеНачало = Новый СписокЗначений;
	СпящиеПерспективныеСписокНачало = Новый СписокЗначений;
		
	АктивныеВерныеНачало = Новый СписокЗначений;
	ЗасыпающиеВерныеНачало = Новый СписокЗначений;
	СпящиеВерныеСписокНачало = Новый СписокЗначений;
	
	АктивныеНовые =  Новый СписокЗначений;
	ЗасыпающиеНовые = Новый СписокЗначений;
	СпящиеНовые =  Новый СписокЗначений;
	
	ВыручкаНовые = 0;
	ВыручкаПерспективные = 0;
	ВыручкаВерные = 0;
	
	АктивныеПерспективные = Новый СписокЗначений;
	ЗасыпающиеПерспективные = Новый СписокЗначений;
	СпящиеПерспективныеСписок = Новый СписокЗначений;
	
	АктивныеВерные = Новый СписокЗначений;
	ЗасыпающиеВерные = Новый СписокЗначений;
	СпящиеВерныеСписок = Новый СписокЗначений;
	
	ПереходАП = 0;
	ПереходАВ = 0;	
	ПереходЗН = 0;
	ПереходСН = 0;	
	ПереходЗНАП = 0;
	ПереходСНАП = 0;
	ПереходЗП = 0;
	ПереходСП = 0;
	ПереходЗПАП = 0;
	ПереходСПАП = 0;
	ПереходЗПАВ = 0;
	ПереходСПАВ = 0;
	ПереходЗВ = 0;
	ПереходСВ = 0;
	ПереходЗВАВ = 0;
	ПереходСВАВ = 0;
	
	//Если период используется, устанавливаем промежуток до периода и считаем сколько было клиентов
	Если Отборы.ПериодИспользование = Истина Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	Сегменты.Партнер КАК Партнер
		               |ПОМЕСТИТЬ ОтборПоСегментуПартнеров
		               |ИЗ
		               |	РегистрСведений.ПартнерыСегмента КАК Сегменты
		               |ГДЕ
		               |	Сегменты.Сегмент = &СегментКлиентов
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Партнер
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	Сегменты.Номенклатура КАК Номенклатура
		               |ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
		               |ИЗ
		               |	РегистрСведений.НоменклатураСегмента КАК Сегменты
		               |ГДЕ
		               |	Сегменты.Сегмент = &СегментНоменклатуры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Номенклатура
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		               |	Продажи.СуммаВыручкиОборот КАК СуммаВыручкиОборот,
		               |	Продажи.Регистратор КАК Регистратор,
		               |	Продажи.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		               |	Продажи.ПериодСекунда КАК ДатаПоследнейПокупки,
		               |	Продажи.ПериодСекунда КАК ДатаПервойПокупки,
		               |	Продажи.ПериодМинута КАК ДатаТекущейПокупки,
		               |	Продажи.Склад КАК Склад
		               |ИЗ
		               |	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Авто,
		               |			(НЕ &ИспользуетсяОтборПоНоменклатуре
		               |				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура)
		               |				И (НЕ &ИспользуетсяОтборПоСегментуПартнеров
		               |					ИЛИ АналитикаУчетаПоПартнерам.Партнер В
		               |						(ВЫБРАТЬ
		               |							ОтборПоСегментуПартнеров.Партнер
		               |						ИЗ
		               |							ОтборПоСегментуПартнеров))
		               |				И (НЕ &ИспользуетсяОтборПоСегментуНоменклатуры
		               |					ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В
		               |						(ВЫБРАТЬ
		               |							ОтборПоСегментуНоменклатуры.Номенклатура
		               |						ИЗ
		               |							ОтборПоСегментуНоменклатуры))
		               |				И (НЕ &ИспользуетсяОтборПоМенеджеру
		               |					ИЛИ Менеджер = &Менеджер)) КАК Продажи
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
		               |		ПО Продажи.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
		               |ГДЕ
		               |	(НЕ &ИспользуетсяОтборПоОрганизации
		               |			ИЛИ КлючиАналитикиУчетаПоПартнерам.Организация = &Организация)
		               |	И (НЕ &ИспользуетсяОтборПоСуммеПокупок
		               |			ИЛИ Продажи.СуммаВыручкиОборот > &СуммаПокупок)
		               |	И Продажи.СуммаВыручкиОборот > 0
		               |УПОРЯДОЧИТЬ ПО
		               |	ДатаТекущейПокупки
		               |ИТОГИ
		               |	СУММА(СуммаВыручкиОборот),
		               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Регистратор),
		               |	МАКСИМУМ(ДатаПоследнейПокупки),
		               |	МИНИМУМ(ДатаПервойПокупки)
		               |ПО
		               |	Партнер";

		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Дата('00010101000000')));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(Отборы.ДатаНачалаПериода) - 60 * 60 * 24);
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
		Пока Выборка.Следующий() Цикл
								
			ДнейСПокупки = (НачалоДня(Отборы.ДатаНачалаПериода)-(НачалоДня(Выборка.ДатаПоследнейПокупки)))/(60 * 60 * 24);
			
			//Новые
			Если Выборка.Регистратор = 1 Тогда
								
				//Заполняем активных
				Если ДнейСПокупки < Отборы.АктивныеДо Тогда
					АктивныеНовыеНачало.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
								
				//Заполняем засыпающих
				Если ДнейСПокупки >= Отборы.АктивныеДо И ДнейСПокупки <= Отборы.ЗасыпающиеДо Тогда
					ЗасыпающиеНовыеНачало.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
						
				//Заполняем спящих
				Если ДнейСПокупки >  Отборы.ЗасыпающиеДо Тогда
					СпящиеНовыеНачало.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;

			//Перспективные
			ИначеЕсли Выборка.Регистратор >= 2 И Выборка.Регистратор <= Отборы.ПокупкиПерспективныеДо Тогда
								
				//Заполняем активных
				Если ДнейСПокупки < Отборы.АктивныеПерспективныеДо Тогда
					АктивныеПерспективныеНачало.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
								
				//Заполняем засыпающих
				Если ДнейСПокупки >=  Отборы.АктивныеПерспективныеДо И ДнейСПокупки <= Отборы.ЗасыпающиеПерспективныеДо Тогда
					ЗасыпающиеПерспективныеНачало.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
								
				//Заполняем спящих
				Если ДнейСПокупки >  Отборы.ЗасыпающиеПерспективныеДо Тогда
					СпящиеПерспективныеСписокНачало.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
								
			//Верные	
			ИначеЕсли Выборка.Регистратор >=  Отборы.ПокупкиПерспективныеДо Тогда
								
				//Заполняем активных
				Если ДнейСПокупки <  Отборы.АктивныеВерныеДо Тогда
					АктивныеВерныеНачало.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
							
				//Заполняем засыпающих
				Если ДнейСПокупки >= Отборы.АктивныеВерныеДо И ДнейСПокупки <= Отборы.ЗасыпающиеВерныеДо Тогда
					ЗасыпающиеВерныеНачало.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
							
				//Заполняем спящих
				Если ДнейСПокупки >  Отборы.ЗасыпающиеВерныеДо Тогда
					СпящиеВерныеСписокНачало.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
						
			КонецЕсли;	
		КонецЦикла;	
	
		//Если период используется, устанавливаем даты периода и считаем переходы
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Отборы.ДатаНачалаПериода));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(Отборы.ДатаОкончанияПериода));
		
		ВыборкаПериод = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
		//Считаем движения и клиентов
		//ИДЕМ ПРЯМО - ПО КЛИЕНТАМ С ПОКУПКАМИ СДЕЛАНЫМИ В УКАЗАНЫЙ ПЕРИОД
		//(С ПРОВЕРКОЙ НА ТО, СКОЛЬКО ПОКУПОК БЫЛО РАНЬШЕ) 
		Пока ВыборкаПериод.Следующий() Цикл
											
				//ОПРЕДЕЛЯЕМ СКОЛЬКО ПОКУПОК БЫЛО
				Выборка.Сбросить();
				Если Выборка.НайтиСледующий(Новый Структура("Партнер",ВыборкаПериод.Партнер)) Тогда
					КолвоПокупокБыло = Выборка.Регистратор;
					КолвоПокупок = Выборка.Регистратор;
					//ЗАПОМИНИАЕМ ДАТУ ПРОШЛОЙ ПОКУПКИ
					ДатаПрошлойПокупки = Выборка.ДатаПоследнейПокупки;
					ДнейСНачПокупки = (НачалоДня(Отборы.ДатаНачалаПериода)-(НачалоДня(ДатаПрошлойПокупки)))/(60 * 60 * 24); 
				Иначе
					//ЕСЛИ НЕ НАШЛИ, ЗНАЧИТ И ПОКУПОК НЕ БЫЛО, ДАТА-ПУСТАЯ
					КолвоПокупокБыло = 0;
					КолвоПокупок = 0;
					ДатаПрошлойПокупки = "";
				КонецЕсли;
					
				//БУДЕМ ЗАПОМИНАТЬ РЕГИСТРАТОРЫ ЧТОБЫ НЕ ПОВТОРЯТЬСЯ
				ПрошлыеРегистраторы = Новый Соответствие;
					
				ВыборкаПериодПокупка = ВыборкаПериод.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПериодПокупка.Следующий() Цикл
						
					//ПРОВЕРЯЕМ РЕГИСТРАТОР, ЧТОБЫ НЕ ПОВТОРЯТЬСЯ
					Если ПрошлыеРегистраторы[ВыборкаПериодПокупка.Регистратор] = Истина Тогда
						Продолжить;
					КонецЕсли;

					ПрошлыеРегистраторы[ВыборкаПериодПокупка.Регистратор] = Истина;
						
					Если ДатаПрошлойПокупки = "" Тогда
						ДатаПрошлойПокупки = ВыборкаПериодПокупка.ДатаТекущейПокупки;
					КонецЕсли;
					
					КолвоПокупок = КолвоПокупок+1;
						
					ДнейСПокупки = (НачалоДня(Отборы.ДатаОкончанияПериода)-(НачалоДня(ВыборкаПериодПокупка.ДатаТекущейПокупки)))/ (60 * 60 * 24); 						
					ДнейСПредПокупки = (НачалоДня(Отборы.ДатаОкончанияПериода)-(НачалоДня(ДатаПрошлойПокупки)))/(60 * 60 * 24); 
						
					//ЕСЛИ 1 ПОКУПКА (Т.Е. В НОВЫХ) 
					//ЗНАЧИТ ПРОВЕРЯЕМ УШЛО ЛИ ВНИЗ (ЗДЕСЬ ПРЕД ПОКУПКУ НЕ ПРОВЕРЯЕМ Т.К. ЕЕ НЕТ)
					Если КолвоПокупокБыло = 0 И КолвоПокупок = 1 Тогда						
						//ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
						Если ДнейСПредПокупки >= Отборы.АктивныеДо Тогда
							ПереходЗН = ПереходЗН+1;
							//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
							Если ДнейСПредПокупки > Отборы.ЗасыпающиеДо Тогда
								ТекущийСегмент = "СН";
								ПереходСН = ПереходСН+1;
							Иначе
								ТекущийСегмент = "ЗН";
							КонецЕсли;
						Иначе
							ТекущийСегмент = "АН";
						КонецЕсли;
					КонецЕсли;
					
					//ЕСЛИ БЫЛА 1 ПОКУПКА И СТАЛО БОЛЬШЕ(Т.Е. В НОВЫХ) 
					//ЗНАЧИТ ПРОВЕРЯЕМ ОТКУДА УХАОДИЛИ ВЛЕВО
					Если КолвоПокупокБыло = 1 И КолвоПокупок > 1 Тогда						
						//ЕСЛИ БЫЛИ В АН ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
						Если ДнейСНачПокупки < Отборы.АктивныеДо Тогда
							//ЕСЛИ ДНЕЙ С ПРЕД ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АН ТО ВНИЗ
							Если ДнейСПредПокупки >= Отборы.АктивныеДо Тогда
								ПереходЗН = ПереходЗН+1;
								//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
								Если ДнейСПредПокупки > Отборы.ЗасыпающиеДо Тогда
									ПереходСН = ПереходСН+1;
									ТекущийСегмент = "СН";
								Иначе
									ТекущийСегмент = "ЗН";
								КонецЕсли;
							Иначе
								ТекущийСегмент = "АН";
							КонецЕсли;
						//ЕСЛИ БЫЛИ В ЗН ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ	 
						ИначеЕсли ДнейСНачПокупки >= Отборы.АктивныеДо И ДнейСНачПокупки <= Отборы.ЗасыпающиеДо  Тогда
							//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗН ТО ВНИЗ
							Если ДнейСПредПокупки > Отборы.ЗасыпающиеДо Тогда
							  	ПереходСН = ПереходСН+1;
								ТекущийСегмент = "СН";	 
							Иначе
								ТекущийСегмент = "ЗН";
							КонецЕсли;
						//ЕСЛИ БЫЛИ В СН ПРОСТО УТВЕРДЖАЕМ ЭТО	
						Иначе
							ТекущийСегмент = "СН";
						КонецЕсли;
						КолвоПокупокБыло =0;
					КонецЕсли;
					
					//ЕСЛИ СТАЛО БОЛЬШЕ ОДНОЙ ПОКУПКИ, НО НЕ БОЛЬШЕ ЧЕМ В ПЕРСПЕКТ (Т.Е. КЛИЕНТ ПОКА ОСТАЛСЯ В ПЕРСПЕКТ)
					//ЗНАЧИТ ПРОВЕРЯЕМ КУДА УХОДИМ ПО ПЕРСПЕКТ
					Если КолвоПокупок >= 2 И КолвоПокупок <=  Отборы.ПокупкиПерспективныеДо Тогда 
						
						//ЕСЛИ ПОКУПКИ ПОКА 2 ТОГДА ПРОВЕРЯЕМ ГДЕ БЫЛИ В НОВЫХ И КУДА УХОДИМ ПО ПЕРСПЕКТ
						Если КолвоПокупок = 2 Тогда		
							//Узнаем откуда перешли 
							//ЕСЛИ БЫЛИ В АН ПЕРЕХОД АП
							Если ДнейСПредПокупки < Отборы.АктивныеДо Тогда 
								ПереходАП = ПереходАП+1;										
							//ЕСЛИ БЫЛИ В ЗН ПЕРЕХОД ЗНАП
							ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеДо И ДнейСПредПокупки <= Отборы.ЗасыпающиеДо Тогда
							    ПереходЗНАП = ПереходЗНАП+1;
							//ЕСЛИ БЫЛИ В СН ТОГДА ПЕРЕХОД СНАП
							ИначеЕсли ДнейСПредПокупки > Отборы.ЗасыпающиеДо Тогда
							     ПереходСНАП = ПереходСНАП+1;
							КонецЕсли;
								
							//В ЛЮБОМ СЛУЧАЕ ЕСЛИ ПЕРЕШЛИ ОКАЗЫВАЕМСЯ В АП (НАВЕРХУ)И ОТТУДА ТОЛЬКО ПУТЬ ВНИЗ
							//ПРОВЕРЯЕМ УШЛО ЛИ ВНИЗ
							Если ДнейСПокупки >= Отборы.АктивныеПерспективныеДо Тогда
								ПереходЗП = ПереходЗП+1;
								//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
								Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
									ТекущийСегмент = "СП";
									ПереходСП = ПереходСП+1;
								Иначе
									ТекущийСегмент = "ЗП";
								КонецЕсли;
							Иначе														
							ТекущийСегмент = "АП";
							КонецЕсли;
									
						//ЕСЛИ БЫЛА 2 ПОКУПКА (ИЛИ БОЛЬШЕ)И СТАЛО БОЛЬШЕ(Т.Е. ИХ СТАЛО 3 И ОСТАЛИСЬ В ПЕРСП) 
						//ЗНАЧИТ ПРОВЕРЯЕМ ГДЕ БЫЛИ 
						ИначеЕсли КолвоПокупокБыло >= 2 И КолвоПокупок > 2 Тогда						
								//ЕСЛИ БЫЛИ В АН ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
								Если ДнейСНачПокупки < Отборы.АктивныеПерспективныеДо Тогда
									//ЕСЛИ ДНЕЙ С ПРЕД ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АН ТО ВНИЗ
									Если ДнейСПредПокупки >= Отборы.АктивныеПерспективныеДо Тогда
										ПереходЗП = ПереходЗП+1;
										//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
										Если ДнейСПредПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
											ПереходСП = ПереходСП+1;
											ТекущийСегмент = "СП";
										Иначе
											ТекущийСегмент = "ЗП";
										КонецЕсли;
									Иначе
										ТекущийСегмент = "АП";
									КонецЕсли;
					 			//ЕСЛИ БЫЛИ В ЗП ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ	 
								ИначеЕсли ДнейСНачПокупки >= Отборы.АктивныеПерспективныеДо И ДнейСПредПокупки <= Отборы.ЗасыпающиеПерспективныеДо Тогда
									//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗН ТО ВНИЗ
									Если ДнейСПредПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
									  	ПереходСП = ПереходСП+1;
										ТекущийСегмент = "СП";	 
									Иначе
										ТекущийСегмент = "ЗП";
									КонецЕсли;
								 //ЕСЛИ БЫЛИ В СП ПРОСТО УТВЕРДЖАЕМ ЭТО
								Иначе 
									ТекущийСегмент = "СП";
								КонецЕсли;
								КолвоПокупокБыло = 0;
						//ЕСЛИ ПОКУПОК УЖЕ БЫЛО БОЛЬШЕ 2 ТОГДА ПРОВЕРЯЕМ ГДЕ БЫЛИ И КУДА УХОДИМ ПО ПЕРСПЕКТ	
						Иначе
							//Узнаем откуда перешли 
							//ЕСЛИ БЫЛИ В АП ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
							Если ДнейСПредПокупки < Отборы.АктивныеПерспективныеДо Тогда
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АП ТО ВНИЗ
								Если ДнейСПокупки >= Отборы.АктивныеПерспективныеДо  Тогда
						        	ПереходЗП = ПереходЗП+1;
									//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
									Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
										ПереходСП = ПереходСП+1;
										ТекущийСегмент = "СП";
									Иначе
										ТекущийСегмент = "ЗП";
									КонецЕсли;
								КонецЕсли;
							//ЕСЛИ БЫЛИ В ЗП ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ ИЛИ НАВЕРХ	 
							ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеПерспективныеДо И ДнейСПредПокупки <=  Отборы.ЗасыпающиеПерспективныеДо Тогда
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗП ТО ВНИЗ
								Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
						        	ПереходСП = ПереходСП+1;
									ТекущийСегмент = "СП";
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ МЕНЬШЕ ЧЕМ НАДО ЧЕМ НАДО ДЛЯ ЗП ТО ВВЕРХ	 
								ИначеЕсли ДнейСПокупки < Отборы.АктивныеПерспективныеДо Тогда
								    ПереходЗПАП = ПереходЗПАП +1;
									ТекущийСегмент = "АП";
								КонецЕсли;
							//ЕСЛИ БЫЛИ В СП ПРОВЕРЯЕМ УШЛИ ЛИ НА ВЕРХ		
							ИначеЕсли ДнейСПредПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ МЕНЬШЕ ЧЕМ НАДО ДЛЯ СП ТО ВВЕРХ
								Если ДнейСПокупки <= Отборы.ЗасыпающиеПерспективныеДо Тогда
									ПереходСПАП = ПереходСПАП +1; 
									ТекущийСегмент = "ЗП";
									//УТОЧНЯЕМ ОКОНЧАЛЬТЕЛЬНЫЙ СЕГМЕНТ
									Если ДнейСПокупки < Отборы.АктивныеПерспективныеДо Тогда
										ТекущийСегмент = "АП"; 
									//СДЕЛАЛИ КАК БЫ КРУГ	
									ИначеЕсли ПереходЗП=0 Тогда
										ПереходЗП=ПереходЗП+1;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
												 	
					//ЕСЛИ ПОКУПОК БОЛЬШЕ ЧЕМ НАДО В ПЕРСПЕКТ (Т.Е. КЛИЕНТ ОКАЗАЛСЯ В ВЕРНЫХ)
					//ЗНАЧИТ ПРОВЕРЯЕМ КУДА УХОДИМ ПО ВЕРНЫМ					
					Если КолвоПокупок > Отборы.ПокупкиПерспективныеДо Тогда 
							
						//ЕСЛИ ПОКУПОК ПОКА ТОЛЬКО НИЖНИЙ ПОРОГ ВЕРНЫХ
						//ТОГДА ПРОВЕРЯЕМ ГДЕ БЫЛИ В ПЕРСПЕКТ И КУДА УХОДИМ ПО ВЕРНЫМ
						Если КолвоПокупок = Отборы.ПокупкиВерные+1 Тогда		
							//Узнаем откуда перешли 
							//ЕСЛИ БЫЛИ В АП ПЕРЕХОД АВ
							Если ДнейСПредПокупки < Отборы.АктивныеПерспективныеДо Тогда 
								ПереходАВ = ПереходАВ+1;										
							//ЕСЛИ БЫЛИ В ЗП ПЕРЕХОД ЗПАВ
							ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеПерспективныеДо И ДнейСПредПокупки <= Отборы.ЗасыпающиеПерспективныеДо Тогда
									ПереходЗПАВ = ПереходЗПАВ+1;
							//ЕСЛИ БЫЛИ В СП ТОГДА ПЕРЕХОД СПАВ
							ИначеЕсли ДнейСПредПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
							     ПереходСПАВ = ПереходСПАВ+1;
							КонецЕсли;					
								
							//В ЛЮБОМ СЛУЧАЕ ЕСЛИ ПЕРЕШЛИ ОКАЗЫВАЕМСЯ В АВ (НАВЕРХУ)И ОТТУДА ТОЛЬКО ПУТЬ ВНИЗ
							//ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ ПО ВЕРНЫМ
							Если ДнейСПокупки >= Отборы.АктивныеВерныеДо Тогда
								ПереходЗВ = ПереходЗВ+1;
								//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
								Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
									ПереходСВ = ПереходСВ+1;
									ТекущийСегмент = "СВ";
								Иначе
									ТекущийСегмент = "ЗВ";
								КонецЕсли;
							Иначе
								ТекущийСегмент = "АВ";
							КонецЕсли;
								
						//ЕСЛИ ПОКУПОК УЖЕ БОЛЬШЕ ЧЕМ НИЖНИЙ ПОРОГ ТОГДА ПРОВЕРЯЕМ ГДЕ БЫЛИ И КУДА УХОДИМ ПО ВЕРНЫМ	
						Иначе
							//Узнаем откуда перешли 
							//ЕСЛИ БЫЛИ В АВ ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
							Если ДнейСПредПокупки < Отборы.АктивныеВерныеДо Тогда
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АВ ТО ВНИЗ
								Если ДнейСПокупки >= Отборы.АктивныеВерныеДо Тогда
									ПереходЗВ = ПереходЗВ+1;
									//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
									Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
										ПереходСВ = ПереходСВ+1;
										ТекущийСегмент = "СВ";
									Иначе 
										ТекущийСегмент = "ЗВ";
									КонецЕсли;
								КонецЕсли;
							//ЕСЛИ БЫЛИ В ЗВ ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ ИЛИ НА ВЕРХ	 
							ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеВерныеДо И ДнейСПредПокупки <=  Отборы.ЗасыпающиеВерныеДо Тогда
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗВ ТО ВНИЗ
								Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
						        	ПереходСВ = ПереходСВ+1;
									ТекущийСегмент = "СВ";
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ МЕНЬШЕ ЧЕМ НАДО ЧЕМ НАДО ДЛЯ ЗВ ТО ВВЕРХ	 
								ИначеЕсли ДнейСПокупки < Отборы.АктивныеВерныеДо Тогда
									ПереходЗВАВ = ПереходЗВАВ +1;
									ТекущийСегмент = "АВ";
								КонецЕсли;
							//ЕСЛИ БЫЛИ В СВ ПРОВЕРЯЕМ УШЛИ ЛИ НА ВЕРХ		
							ИначеЕсли ДнейСПредПокупки > Отборы. ЗасыпающиеВерныеДо Тогда
								//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ МЕНЬШЕ ЧЕМ НАДО ДЛЯ СВ ТО ВВЕРХ
								Если ДнейСПокупки <= Отборы.ЗасыпающиеВерныеДо Тогда
									ПереходСВАВ = ПереходСВАВ +1;
									ТекущийСегмент = "ЗВ";
									//УТОЧНЯЕМ ОКОНЧАЛЬТЕЛЬНЫЙ СЕГМЕНТ
									Если ДнейСПокупки < Отборы.АктивныеВерныеДо Тогда
										ТекущийСегмент = "АВ";
									ИначеЕсли ПереходЗВ=0 Тогда
										ПереходЗВ=ПереходЗВ+1;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;			
						КонецЕсли;
							
					КонецЕсли;
				//ЗАПОМИНАЕМ ДАТУ ТЕКУЩЕЙ ПОКУПИ (НО "ПРОШЛОЙ" УЖЕ ДЛЯ СЛЕДУЮЩЕЙ ПОКУПКИ)
				ДатаПрошлойПокупки = ВыборкаПериодПокупка.ДатаТекущейПокупки;
				КонецЦикла;
					
			//ОПРЕДЕЛЯЕМ В КАКОМ СЕГМЕНТЕ ВСЕ ЖЕ ОСТАЛСЯ КЛИЕНТ НА КОНЕЦ ПЕРИОДА
			Если ТекущийСегмент = "АН" Тогда
				АктивныеНовые.Добавить(ВыборкаПериод.Партнер, ВыборкаПериод.Партнер);
				ВыручкаНовые = ВыручкаНовые + ВыборкаПериод.СуммаВыручкиОборот;
			ИначеЕсли ТекущийСегмент = "АП" Тогда
				АктивныеПерспективные.Добавить(ВыборкаПериод.Партнер, ВыборкаПериод.Партнер);
				ВыручкаПерспективные = ВыручкаПерспективные + ВыборкаПериод.СуммаВыручкиОборот;
			ИначеЕсли ТекущийСегмент = "АВ" Тогда
				АктивныеВерные.Добавить(ВыборкаПериод.Партнер,ВыборкаПериод.Партнер);
				ВыручкаВерные = ВыручкаВерные + ВыборкаПериод.СуммаВыручкиОборот;
			ИначеЕсли ТекущийСегмент = "ЗН" Тогда
				ЗасыпающиеНовые.Добавить(ВыборкаПериод.Партнер,ВыборкаПериод.Партнер);
			ИначеЕсли ТекущийСегмент = "СН" Тогда
				СпящиеНовые.Добавить(ВыборкаПериод.Партнер, ВыборкаПериод.Партнер);
			ИначеЕсли ТекущийСегмент = "ЗП" Тогда
				ЗасыпающиеПерспективные.Добавить(ВыборкаПериод.Партнер,ВыборкаПериод.Партнер);
			ИначеЕсли ТекущийСегмент = "СП" Тогда
				СпящиеПерспективныеСписок.Добавить(ВыборкаПериод.Партнер, ВыборкаПериод.Партнер);
		    ИначеЕсли ТекущийСегмент = "ЗВ" Тогда
				ЗасыпающиеВерные.Добавить(ВыборкаПериод.Партнер,ВыборкаПериод.Партнер);
			ИначеЕсли ТекущийСегмент = "СВ" Тогда
				СпящиеВерныеСписок.Добавить(ВыборкаПериод.Партнер,ВыборкаПериод.Партнер);
			КонецЕсли;
		КонецЦикла;				  
			
		//ТЕПЕРЬ ИДЕМ НАОБОРОТ - ИЩЕМ ТЕХ, КТО СДЕЛАЛ ПОКУПКУ ЗА ВРЕМЯ ДО УКАЗАНОГО ПЕРИОДА
		ВыборкаПериод.Сбросить();
		Выборка.Сбросить();
			
		Пока Выборка.Следующий() Цикл
			//ЕСЛИ КЛИЕНТ НАЙДЕН В ВЫБОРКЕ ЗА УКАЗАНЫЙ ПЕРИОД, ЗНАЧИТ МЫ ПО НЕМУ УЖЕ СДЕЛАЛИ ВСЕ РАСЧЕТЫ
			ВыборкаПериод.Сбросить();
			Если ВыборкаПериод.НайтиСледующий(Новый Структура("Партнер",Выборка.Партнер)) Тогда
				Продолжить;
			//ЕСЛИ КЛИЕНТ НЕ НАЙДЕН, ЗНАЧИТ НОВЫХ ПОКУПОК НЕ БЫЛО, ЕГО ЕЩЕ НЕ УЧЛИ
			//ПОСКОЛЬКУ НОВЫХ ПОКУПОК В УКАЗАНЫЙ ПЕРИОД НЕ БЫЛО
			//ТО ПОЛУЧАЕТСЯ ДАННЫЕ КЛИЕНТЫ МОГЛИ ПЕРЕМЕСТИТЬСЯ ТОЛЬКО ВНИЗ
			Иначе			
				ДнейСПредПокупки = (НачалоДня(Отборы.ДатаНачалаПериода)-(НачалоДня(Выборка.ДатаПоследнейПокупки)))/(60 * 60 * 24); 						
				ДнейСПокупки = (НачалоДня(Отборы.ДатаОкончанияПериода)-(НачалоДня(Выборка.ДатаПоследнейПокупки)))/(60 * 60 * 24); 						

				//ЕСЛИ 1 ПОКУПКА (Т.Е. КЛИЕНТ В НОВЫХ) 
				//ЗНАЧИТ ПРОВЕРЯЕМ ГДЕ БЫЛИ И УШЛИ ЛИ ВНИЗ 		
				Если Выборка.Регистратор = 1 Тогда
					
					//ЕСЛИ БЫЛИ В АН ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
					Если ДнейСПредПокупки < Отборы.АктивныеДо Тогда
						//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АН ТО ВНИЗ
						Если ДнейСПокупки >= Отборы.АктивныеДо Тогда
							ПереходЗН = ПереходЗН+1;
							//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
							Если ДнейСПокупки > Отборы.ЗасыпающиеДо Тогда
								ПереходСН = ПереходСН+1;
								СпящиеНовые.Добавить(Выборка.Партнер, Выборка.Партнер);
							Иначе
								ЗасыпающиеНовые.Добавить(Выборка.Партнер,Выборка.Партнер);
							КонецЕсли;
						Иначе
							АктивныеНовые.Добавить(Выборка.Партнер, Выборка.Партнер);
						КонецЕсли;
		             //ЕСЛИ БЫЛИ В ЗН ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ	 
					ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеДо И ДнейСПредПокупки <= Отборы.ЗасыпающиеДо Тогда
						//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗН ТО ВНИЗ
						Если ДнейСПокупки > Отборы.ЗасыпающиеДо Тогда
							ПереходСН = ПереходСН+1;
							СпящиеНовые.Добавить(Выборка.Партнер, Выборка.Партнер);	 
						Иначе
							ЗасыпающиеНовые.Добавить(Выборка.Партнер,Выборка.Партнер);
						КонецЕсли;
					//ЕСЛИ БЫЛИ В СН ТО ОСТАЕМСЯ ТАМЖЕ
					ИначеЕсли ДнейСПредПокупки > Отборы.ЗасыпающиеДо Тогда	
						Если ДнейСПокупки > Отборы.ЗасыпающиеДо Тогда
							СпящиеНовые.Добавить(Выборка.Партнер, Выборка.Партнер);
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;
								
				//ЕСЛИ БОЛЬШЕ ОДНОЙ ПОКУПКИ, НО НЕ БОЛЬШЕ ЧЕМ В ПЕРСПЕКТ (Т.Е. КЛИЕНТ В ПЕРСПЕКТ)
				//ЗНАЧИТ ПРОВЕРЯЕМ ГДЕ БЫЛИ И УШЛИ ЛИ ВНИЗ
				Если Выборка.Регистратор >= 2 И Выборка.Регистратор <=  Отборы.ПокупкиПерспективныеДо Тогда
					
					//ЕСЛИ БЫЛИ В АП ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
					Если ДнейСПредПокупки < Отборы.АктивныеПерспективныеДо Тогда
						//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АП ТО ВНИЗ
						Если ДнейСПокупки >= Отборы.АктивныеПерспективныеДо Тогда
							ПереходЗП = ПереходЗП+1;
							//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
							Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
								ПереходСП = ПереходСП+1;
								СпящиеПерспективныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);
							Иначе
								ЗасыпающиеПерспективные.Добавить(Выборка.Партнер,Выборка.Партнер);
							КонецЕсли;
						Иначе
							АктивныеПерспективные.Добавить(Выборка.Партнер, Выборка.Партнер);
						КонецЕсли;
		             //ЕСЛИ БЫЛИ В ЗП ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ	 
					ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеПерспективныеДо И ДнейСПредПокупки <=  Отборы.ЗасыпающиеПерспективныеДо Тогда
						//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗП ТО ВНИЗ
						Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
						  	ПереходСП = ПереходСП+1;
							СпящиеПерспективныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);	 
						Иначе
							ЗасыпающиеПерспективные.Добавить(Выборка.Партнер,Выборка.Партнер);
						КонецЕсли;
					//ЕСЛИ БЫЛИ В СП ТО ОСТАЕМСЯ ТАМЖЕ
					ИначеЕсли ДнейСПредПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда	
						Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
							СпящиеПерспективныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);
						КонецЕсли;
					КонецЕсли;	
							
				КонецЕсли;
									
				//ЕСЛИ ПОКУПОК БОЛЬШЕ ЧЕМ НАДО В ПЕРСПЕКТ (Т.Е. КЛИЕНТ В ВЕРНЫХ)
				//ЗНАЧИТ ПРОВЕРЯЕМ ГДЕ БЫЛИ И УШЛИ ЛИ ВНИЗ						
				Если Выборка.Регистратор >=  Отборы.ПокупкиПерспективныеДо Тогда
					
					//ЕСЛИ БЫЛИ В АВ ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ
					Если ДнейСПредПокупки < Отборы.АктивныеВерныеДо Тогда
						//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ АВ ТО ВНИЗ
						Если ДнейСПокупки >= Отборы.АктивныеВерныеДо Тогда 
							ПереходЗВ = ПереходЗВ+1;
							//ЕСЛИ УШЛИ ВНИЗ ПРОВЕРЯЕМ УШЛИ ЛИ ЕЩЕ ВНИЗ
							Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
								ПереходСВ = ПереходСВ +1;
								СпящиеВерныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);
							Иначе
								ЗасыпающиеВерные.Добавить(Выборка.Партнер,Выборка.Партнер);
							КонецЕсли;
						Иначе
							АктивныеПерспективные.Добавить(Выборка.Партнер, Выборка.Партнер);
						КонецЕсли;
		             //ЕСЛИ БЫЛИ В ЗВ ПРОВЕРЯЕМ УШЛИ ЛИ ВНИЗ	 
					ИначеЕсли ДнейСПредПокупки >= Отборы.АктивныеВерныеДо И ДнейСПредПокупки <=  Отборы.ЗасыпающиеВерныеДо Тогда
						//ЕСЛИ ДНЕЙ С ПОСЛЕДНЕЙ ПОКУПКИ БОЛЬШЕ ЧЕМ НАДО ДЛЯ ЗВ ТО ВНИЗ
						Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
						  	ПереходСВ = ПереходСВ+1;
							СпящиеВерныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);	 
						Иначе
							ЗасыпающиеВерные.Добавить(Выборка.Партнер,Выборка.Партнер);
						КонецЕсли;
					//ЕСЛИ БЫЛИ В СВ ТО ОСТАЕМСЯ ТАМЖЕ
					ИначеЕсли ДнейСПредПокупки > Отборы.ЗасыпающиеВерныеДо Тогда	
						Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
							СпящиеВерныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);
						КонецЕсли;
					КонецЕсли;	
									
				КонецЕсли;			
			КонецЕсли;
		КонецЦикла;	
	Иначе
		//Вычисляем сегменты
		Выборка.Сбросить();
		
		Пока Выборка.Следующий() Цикл
							
			ДнейСПокупки = (НачалоДня(ТекущаяДатаСеанса())-(НачалоДня(Выборка.ДатаПоследнейПокупки)))/(60 * 60 * 24); 						
		
			//Заполняем сегменты
			//Новые
			Если Выборка.Регистратор = 1 Тогда
							
				//Заполняем активных
				Если ДнейСПокупки < Отборы.АктивныеДо Тогда
					АктивныеНовые.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
							
				//Заполняем засыпающих
				Если ДнейСПокупки >= Отборы.АктивныеДо И ДнейСПокупки <=  Отборы.ЗасыпающиеДо Тогда
					ЗасыпающиеНовые.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
					
				//Заполняем спящих
				Если ДнейСПокупки > Отборы.ЗасыпающиеДо Тогда
					СпящиеНовые.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;

			//Перспективные
			ИначеЕсли Выборка.Регистратор >= 2 И Выборка.Регистратор <=  Отборы.ПокупкиПерспективныеДо Тогда
							
				//Заполняем активных
				Если ДнейСПокупки < Отборы.АктивныеПерспективныеДо Тогда
					АктивныеПерспективные.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
							
				//Заполняем засыпающих
				Если ДнейСПокупки >= Отборы.АктивныеПерспективныеДо И ДнейСПокупки <=  Отборы.ЗасыпающиеПерспективныеДо Тогда
					ЗасыпающиеПерспективные.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
							
				//Заполняем спящих
				Если ДнейСПокупки > Отборы.ЗасыпающиеПерспективныеДо Тогда
					СпящиеПерспективныеСписок.Добавить(Выборка.Партнер, Выборка.Партнер);
				КонецЕсли;
							
			//Верные	
			ИначеЕсли Выборка.Регистратор >=  Отборы.ПокупкиПерспективныеДо Тогда
							
				//Заполняем активных
				Если ДнейСПокупки < Отборы.АктивныеВерныеДо Тогда
					АктивныеВерные.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
						
				//Заполняем засыпающих
				Если ДнейСПокупки >= Отборы.АктивныеВерныеДо И ДнейСПокупки <=  Отборы.ЗасыпающиеВерныеДо Тогда
					ЗасыпающиеВерные.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
						
				//Заполняем спящих
				Если ДнейСПокупки > Отборы.ЗасыпающиеВерныеДо Тогда
					СпящиеВерныеСписок.Добавить(Выборка.Партнер,Выборка.Партнер);
				КонецЕсли;
						
			КонецЕсли;	
		КонецЦикла;			
	КонецЕсли;

	ПереходыСегментов = Новый Структура();
	ПереходыСегментов.Вставить("ПерваяПокупка",ПерваяПокупка);
	
	ПереходыСегментов.Вставить("АктивныеНовыеНачало",АктивныеНовыеНачало);
	ПереходыСегментов.Вставить("ЗасыпающиеНовыеНачало",ЗасыпающиеНовыеНачало);
	ПереходыСегментов.Вставить("СпящиеНовыеНачало",СпящиеНовыеНачало);
	ПереходыСегментов.Вставить("АктивныеПерспективныеНачало",АктивныеПерспективныеНачало);
	ПереходыСегментов.Вставить("ЗасыпающиеПерспективныеНачало",ЗасыпающиеПерспективныеНачало);
	ПереходыСегментов.Вставить("СпящиеПерспективныеСписокНачало",СпящиеПерспективныеСписокНачало);
	ПереходыСегментов.Вставить("АктивныеВерныеНачало",АктивныеВерныеНачало);
	ПереходыСегментов.Вставить("ЗасыпающиеВерныеНачало",ЗасыпающиеВерныеНачало);
	ПереходыСегментов.Вставить("СпящиеВерныеСписокНачало",СпящиеВерныеСписокНачало);
	
	ПереходыСегментов.Вставить("АктивныеНовые",АктивныеНовые);
	ПереходыСегментов.Вставить("ЗасыпающиеНовые",ЗасыпающиеНовые);
	ПереходыСегментов.Вставить("СпящиеНовые",СпящиеНовые);
	ПереходыСегментов.Вставить("АктивныеПерспективные",АктивныеПерспективные);
	ПереходыСегментов.Вставить("ЗасыпающиеПерспективные",ЗасыпающиеПерспективные);
	ПереходыСегментов.Вставить("СпящиеПерспективныеСписок",СпящиеПерспективныеСписок);
	ПереходыСегментов.Вставить("АктивныеВерные",АктивныеВерные);
	ПереходыСегментов.Вставить("ЗасыпающиеВерные",ЗасыпающиеВерные);
	ПереходыСегментов.Вставить("СпящиеВерныеСписок",СпящиеВерныеСписок);

	ПереходыСегментов.Вставить("ВыручкаНовые",ВыручкаНовые);
	ПереходыСегментов.Вставить("ВыручкаПерспективные",ВыручкаПерспективные);
	ПереходыСегментов.Вставить("ВыручкаВерные",ВыручкаВерные);

	ПереходыСегментов.Вставить("ПереходАП",ПереходАП);
	ПереходыСегментов.Вставить("ПереходАВ",ПереходАВ);
	ПереходыСегментов.Вставить("ПереходЗН",ПереходЗН);
	ПереходыСегментов.Вставить("ПереходСН",ПереходСН);
	ПереходыСегментов.Вставить("ПереходЗНАП",ПереходЗНАП);
	ПереходыСегментов.Вставить("ПереходСНАП",ПереходСНАП);
	ПереходыСегментов.Вставить("ПереходЗП",ПереходЗП);
	ПереходыСегментов.Вставить("ПереходСП",ПереходСП);
	ПереходыСегментов.Вставить("ПереходЗПАП",ПереходЗПАП);
	ПереходыСегментов.Вставить("ПереходСПАП",ПереходСПАП);
	ПереходыСегментов.Вставить("ПереходЗПАВ",ПереходЗПАВ);
	ПереходыСегментов.Вставить("ПереходСПАВ",ПереходСПАВ);
	ПереходыСегментов.Вставить("ПереходЗВ",ПереходЗВ);
	ПереходыСегментов.Вставить("ПереходСВ",ПереходСВ);
	ПереходыСегментов.Вставить("ПереходЗВАВ",ПереходЗВАВ);
	ПереходыСегментов.Вставить("ПереходСВАВ",ПереходСВАВ);
	
 	ПоместитьВоВременноеХранилище(ПереходыСегментов,АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСписокКлиентов(Параметры, АдресХранилища) Экспорт
	
	СписокКлиентов = Новый ТаблицаЗначений;
	СписокКлиентов.Колонки.Добавить("Клиент");
	СписокКлиентов.Колонки.Добавить("МенеджерКлиента");
	СписокКлиентов.Колонки.Добавить("ДатаПокупки");
	СписокКлиентов.Колонки.Добавить("КолвоПокупок");
	СписокКлиентов.Колонки.Добавить("СуммаПокупок");
	СписокКлиентов.Колонки.Добавить("КолвоПокупокВсего");
	СписокКлиентов.Колонки.Добавить("СуммаПокупокВсего");
	СписокКлиентов.Колонки.Добавить("ЭлАдрес");
	СписокКлиентов.Колонки.Добавить("Телефон");

	Запрос = Новый Запрос(
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						|	Сегменты.Партнер КАК Партнер
						|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
						|ИЗ
						|	РегистрСведений.ПартнерыСегмента КАК Сегменты
						|ГДЕ
						|	Сегменты.Сегмент = &СегментКлиентов
						|
						|ИНДЕКСИРОВАТЬ ПО
						|	Партнер
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						|	Сегменты.Номенклатура КАК Номенклатура
						|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
						|ИЗ
						|	РегистрСведений.НоменклатураСегмента КАК Сегменты
						|ГДЕ
						|	Сегменты.Сегмент = &СегментНоменклатуры
						|
						|ИНДЕКСИРОВАТЬ ПО
						|	Номенклатура
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						|	Продажи.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
						|	МАКСИМУМ(Продажи.ПериодСекунда) КАК ПериодСекунда,
						|	СУММА(Продажи.СуммаВыручкиОборот) КАК СуммаВыручкиОборот,
						|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Продажи.Регистратор) КАК Регистратор
						|ИЗ
						|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
						|			&НачалоПериода,
						|			&КонецПериода,
						|			Авто,
						|			(НЕ &ИспользуетсяОтборПоНоменклатуре
						|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура)
						|				И (НЕ &ИспользуетсяОтборПоСегментуПартнеров
						|					ИЛИ АналитикаУчетаПоПартнерам.Партнер В
						|						(ВЫБРАТЬ
						|							ОтборПоСегментуПартнеров.Партнер
						|						ИЗ
						|							ОтборПоСегментуПартнеров))
						|				И (НЕ &ИспользуетсяОтборПоСегментуНоменклатуры
						|					ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В
						|						(ВЫБРАТЬ
						|							ОтборПоСегментуНоменклатуры.Номенклатура
						|						ИЗ
						|							ОтборПоСегментуНоменклатуры))
						|				И (НЕ &ИспользуетсяОтборПоМенеджеру
						|					ИЛИ Менеджер = &Менеджер)
						|				И АналитикаУчетаПоПартнерам.Партнер В (&СписокСегмента)) КАК Продажи
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
						|		ПО Продажи.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
						|ГДЕ
						|	(НЕ &ИспользуетсяОтборПоОрганизации
						|			ИЛИ КлючиАналитикиУчетаПоПартнерам.Организация = &Организация)
						|	И (НЕ &ИспользуетсяОтборПоСуммеПокупок
						|			ИЛИ Продажи.СуммаВыручкиОборот > &СуммаПокупок)
						|	И Продажи.СуммаВыручкиОборот > 0
						|СГРУППИРОВАТЬ ПО
						|	Продажи.АналитикаУчетаПоПартнерам.Партнер");
	//Устанавлиаем отборы

	Запрос.УстановитьПараметр("СписокСегмента",Параметры.СписокРасшифровки);

	Запрос.УстановитьПараметр("ИспользуетсяОтборПоНоменклатуре",Параметры.НоменклатураИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоОрганизации",Параметры.ОрганизацияИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСуммеПокупок",Параметры.СуммаПокупокИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры",Параметры.СегментНоменклатурыИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоМенеджеру",Параметры.МенеджерИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуПартнеров",Параметры.СегментКлиентовИспользование);
	Запрос.УстановитьПараметр("СегментНоменклатуры",Параметры.СегментНоменклатуры);
	Запрос.УстановитьПараметр("СегментКлиентов",Параметры.СегментКлиентов);
	Запрос.УстановитьПараметр("Номенклатура",Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Организация",Параметры.Организация);
	Запрос.УстановитьПараметр("СуммаПокупок",Параметры.СуммаПокупок);
	Запрос.УстановитьПараметр("Менеджер",Параметры.Менеджер);
	
	Если Параметры.ПериодИспользование Тогда
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Дата('00010101000000')));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(Параметры.ДатаОкончанияПериода));
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Параметры.ДатаНачалаПериода));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(Параметры.ДатаОкончанияПериода));
		ВыборкаПериод = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Дата('00010101000000')));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаПериод = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
		
	//Заполняем таблицу
	Пока Выборка.Следующий() Цикл
		Строка = СписокКлиентов.Добавить();
		Строка.Клиент = Выборка.Партнер;
		Строка.МенеджерКлиента = Выборка.Партнер.ОсновнойМенеджер;
		Строка.ДатаПокупки = Выборка.ПериодСекунда;
		ВыборкаПериод.Сбросить();
		Если ВыборкаПериод.НайтиСледующий(Новый Структура("Партнер",Выборка.Партнер)) Тогда
			Строка.КолвоПокупок = ВыборкаПериод.Регистратор;
			Строка.СуммаПокупок = ВыборкаПериод.СуммаВыручкиОборот;
		Иначе
			Строка.КолвоПокупок = 0;
			Строка.СуммаПокупок = 0;
		КонецЕсли;
		Строка.КолвоПокупокВсего = Выборка.Регистратор;
		Если Строка.КолвоПокупокВсего = Строка.КолвоПокупок Тогда
			 Строка.СуммаПокупокВсего = Строка.СуммаПокупок;
		 Иначе
			 Строка.СуммаПокупокВсего = Выборка.СуммаВыручкиОборот;
		КонецЕсли;
		Строка.ЭлАдрес = "";
		Строка.Телефон = "";
		Для Каждого Контакт Из Выборка.Партнер.КонтактнаяИнформация Цикл
			Если Контакт.АдресЭП <> "" Тогда 
				Строка.ЭлАдрес = СокрЛ(Строка.ЭлАдрес)+Контакт.Представление+Символы.ПС;
			ИначеЕсли Контакт.НомерТелефона <> "" Тогда
				Строка.Телефон = СокрЛ(Строка.Телефон)+Контакт.Представление+Символы.ПС;;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Параметры.Вставить("СписокКлиентов",СписокКлиентов);
	ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);

КонецПроцедуры

Процедура ЗаполнитьСписокПокупок(Параметры, АдресХранилища) Экспорт
	
	СписокПокупок = Новый ТаблицаЗначений;
	СписокПокупок.Колонки.Добавить("Документ");
	СписокПокупок.Колонки.Добавить("Сумма");

	Запрос = Новый Запрос(
						"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						|	Сегменты.Партнер КАК Партнер
						|ПОМЕСТИТЬ ОтборПоСегментуПартнеров
						|ИЗ
						|	РегистрСведений.ПартнерыСегмента КАК Сегменты
						|ГДЕ
						|	Сегменты.Сегмент = &СегментКлиентов
						|
						|ИНДЕКСИРОВАТЬ ПО
						|	Партнер
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						|	Сегменты.Номенклатура КАК Номенклатура
						|ПОМЕСТИТЬ ОтборПоСегментуНоменклатуры
						|ИЗ
						|	РегистрСведений.НоменклатураСегмента КАК Сегменты
						|ГДЕ
						|	Сегменты.Сегмент = &СегментНоменклатуры
						|
						|ИНДЕКСИРОВАТЬ ПО
						|	Номенклатура
						|;
						|
						|////////////////////////////////////////////////////////////////////////////////
						|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
						|	Продажи.СуммаВыручкиОборот КАК СуммаВыручкиОборот,
						|	Продажи.Регистратор КАК Регистратор
						|ИЗ
						|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
						|			&НачалоПериода,
						|			&КонецПериода,
						|			Авто,
						|			(НЕ &ИспользуетсяОтборПоНоменклатуре
						|				ИЛИ АналитикаУчетаНоменклатуры.Номенклатура = &Номенклатура)
						|				И (НЕ &ИспользуетсяОтборПоСегментуПартнеров
						|					ИЛИ АналитикаУчетаПоПартнерам.Партнер В
						|						(ВЫБРАТЬ
						|							ОтборПоСегментуПартнеров.Партнер
						|						ИЗ
						|							ОтборПоСегментуПартнеров))
						|				И (НЕ &ИспользуетсяОтборПоСегментуНоменклатуры
						|					ИЛИ АналитикаУчетаНоменклатуры.Номенклатура В
						|						(ВЫБРАТЬ
						|							ОтборПоСегментуНоменклатуры.Номенклатура
						|						ИЗ
						|							ОтборПоСегментуНоменклатуры))
						|				И (НЕ &ИспользуетсяОтборПоМенеджеру
						|					ИЛИ Менеджер = &Менеджер)
						|				И АналитикаУчетаПоПартнерам.Партнер = &Клиент) КАК Продажи
						|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК КлючиАналитикиУчетаПоПартнерам
						|		ПО Продажи.АналитикаУчетаПоПартнерам = КлючиАналитикиУчетаПоПартнерам.Ссылка
						|ГДЕ
						|	(НЕ &ИспользуетсяОтборПоОрганизации
						|			ИЛИ КлючиАналитикиУчетаПоПартнерам.Организация = &Организация)
						|	И (НЕ &ИспользуетсяОтборПоСуммеПокупок
						|			ИЛИ Продажи.СуммаВыручкиОборот > &СуммаПокупок)
						|	И Продажи.СуммаВыручкиОборот > 0
						|ИТОГИ
						|	СУММА(СуммаВыручкиОборот)
						|ПО
						|	ОБЩИЕ");
	//Устанавлиаем отборы

	Запрос.УстановитьПараметр("ИспользуетсяОтборПоНоменклатуре",Параметры.НоменклатураИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоОрганизации",Параметры.ОрганизацияИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСуммеПокупок",Параметры.СуммаПокупокИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры",Параметры.СегментНоменклатурыИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоМенеджеру",Параметры.МенеджерИспользование);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуПартнеров",Параметры.СегментКлиентовИспользование);
	Запрос.УстановитьПараметр("СегментНоменклатуры",Параметры.СегментНоменклатуры);
	Запрос.УстановитьПараметр("СегментКлиентов",Параметры.СегментКлиентов);
	Запрос.УстановитьПараметр("Номенклатура",Параметры.Номенклатура);
	Запрос.УстановитьПараметр("Организация",Параметры.Организация);
	Запрос.УстановитьПараметр("СуммаПокупок",Параметры.СуммаПокупок);
	Запрос.УстановитьПараметр("Менеджер",Параметры.Менеджер);
	Запрос.УстановитьПараметр("Клиент",Параметры.Клиент);
	
	Если Параметры.ПериодИспользование Тогда
		Если Параметры.ВидПокупок = "КолвоПокупок" Тогда
			Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Параметры.ДатаНачалаПериода));
			Запрос.УстановитьПараметр("КонецПериода",КонецДня(Параметры.ДатаОкончанияПериода));
			Выборка = Запрос.Выполнить().Выбрать();
		ИначеЕсли Параметры.ВидПокупок = "КолвоПокупокВсего" Тогда 
			Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Дата('00010101000000')));
			Запрос.УстановитьПараметр("КонецПериода",КонецДня(Параметры.ДатаОкончанияПериода));
			Выборка = Запрос.Выполнить().Выбрать();
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("НачалоПериода",НачалоДня(Дата('00010101000000')));
		Запрос.УстановитьПараметр("КонецПериода",КонецДня(ТекущаяДатаСеанса()));
		Выборка = Запрос.Выполнить().Выбрать();
	КонецЕсли;
	
	Выборка.Следующий();
	Итог = Новый Структура("Итог",Выборка.СуммаВыручкиОборот);
	
	//Заполняем таблицу
	Пока Выборка.Следующий() Цикл
		Строка = СписокПокупок.Добавить();
		Строка.Документ = Выборка.Регистратор;
		Строка.Сумма = Выборка.СуммаВыручкиОборот;
	КонецЦикла;

	Параметры.Вставить("СписокПокупок",СписокПокупок);
	Параметры.Вставить("Итог",Итог);
	ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);

КонецПроцедуры

#КонецЕсли
