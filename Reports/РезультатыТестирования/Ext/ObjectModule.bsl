#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Перем ИмяОбъекта;
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресХранилища) Тогда
		Возврат;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
		
	Источник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	Источник.Имя = "ЛокальнаяБаза";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ВнешниеНаборыДанных = Новый Структура();
	
	БуферДД = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ПолучитьИзВременногоХранилища(АдресХранилища));
	Поток = Новый ПотокВПамяти(БуферДД);
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьПоток(Поток);
	
	РегистрыСоСлужебнымРегистратором = Тестирование.РегистрыСоСлужебнымРегистратором();
	ОтчетПустой = Истина;
	
	ДополнительныеПоляСортировки = Новый Массив;
	ДополнительныеПоляСортировки.Добавить("ВидДвижения");
	ДополнительныеПоляСортировки.Добавить("РасчетСебестоимости");
	ДополнительныеПоляСортировки.Добавить("РасчетПартий");
	
	Пока Чтение.Прочитать() Цикл
		
		Если Не ЗначениеЗаполнено(Чтение.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗначениеЧтения = ОбщегоНазначения.ЗначениеИзСтрокиXML(Чтение.Значение);
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если (Чтение.КонтекстПространствИмен.Глубина = 3 Или Чтение.КонтекстПространствИмен.Глубина = 4) И ТипЗнч(ЗначениеЧтения) = Тип("Строка") Тогда // это объект метаданных, формируем по нему группировку и таблицу.
			
			ОбъектМетаданных = ЗначениеЧтения;
			МассивСтрокОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбъектМетаданных, ".");
			ИмяОбъекта = МассивСтрокОбъекта.Получить(1);
			
			Если ОтборПоРегистру <> "ОдинРегистр" И ОтборПоРегистру <> "БезОтбора" И ОтборПоРегистру <> ИмяОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			РассматриваемыеМетаданные = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
			ЕстьНастраиваемоеПоле = ЕстьНастраиваемоеПоле(РассматриваемыеМетаданные);
			
			ИмяРегистратора = "Регистратор";
			Если Тестирование.РегистрыСоСлужебнымРегистратором().Найти(ОбъектМетаданных) <> Неопределено Тогда
				ИмяРегистратора = "ДокументРегистратор";
			ИначеЕсли Метаданные.РегистрыСведений.Содержит(РассматриваемыеМетаданные) 
				И РассматриваемыеМетаданные.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				ИмяРегистратора = "Партия";
			КонецЕсли;
			
			ПериодическийРегистр = НЕ Метаданные.РегистрыСведений.Содержит(РассматриваемыеМетаданные)
				ИЛИ РассматриваемыеМетаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический;
			
			Если СхемаКомпоновкиДанных.НаборыДанных.Найти(ИмяОбъекта) <> Неопределено Тогда // уже добавлен в схему
				НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[ИмяОбъекта];
				Продолжить;
			КонецЕсли;
			
			// каждый объект метаданных это новый отдельный набор данных для СКД.
			НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
			НаборДанных.Имя = ИмяОбъекта;
			НаборДанных.ИмяОбъекта = ИмяОбъекта;
			НаборДанных.ИсточникДанных = "ЛокальнаяБаза";
			// группировка таблиц по объектам метаданных: один объект - одна таблица.
			Таблица = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
			Таблица.Имя = ИмяОбъекта;
			
			НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов", АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать);
			ЗаголовокТаблицы = Таблица.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
			Если ЗаголовокТаблицы <> Неопределено Тогда
				ЗаголовокТаблицы.Значение = "Таблица: " + ОбъектМетаданных;
				ЗаголовокТаблицы.Использование = Истина;
			КонецЕсли;
			
			Строки = Таблица.Строки.Добавить();
			Строки.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов", АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать);
			
			ДобавитьОформляемоеПоле(Строки.Выбор, ИмяОбъекта + "_" + ИмяРегистратора);
			ДобавитьОформляемоеПоле(Строки.ПоляГруппировки, ИмяОбъекта + "_" + ИмяРегистратора);
			
			Если ПериодическийРегистр Тогда
				ДобавитьОформляемоеПоле(Строки.ПоляГруппировки, ИмяОбъекта + "_" + "Период");
				ДобавитьОформляемоеПоле(Строки.Порядок, ИмяОбъекта + "_" + "Период");
			КонецЕсли;
			
			Если НастройкаПоля = 1 И ЕстьНастраиваемоеПоле Тогда
				
				Строки = Строки.Структура.Добавить();
				
				ДобавитьОформляемоеПоле(Строки.Выбор, ИмяОбъекта + "_" + НастраиваемоеПоле);
				ДобавитьОформляемоеПоле(Строки.ПоляГруппировки, ИмяОбъекта + "_" + НастраиваемоеПоле);
				
			КонецЕсли;
			
			ГруппировкаДельта = Строки.Структура.Добавить();
			
			ДобавитьОформляемоеПоле(ГруппировкаДельта.Выбор, ИмяОбъекта + "_" + ИмяРегистратора);
			ДобавитьОформляемоеПоле(ГруппировкаДельта.ПоляГруппировки, ИмяОбъекта + "_" + ИмяРегистратора);
			
			Если НастройкаПоля = 1 И ЕстьНастраиваемоеПоле Тогда
				
				ДобавитьОформляемоеПоле(ГруппировкаДельта.Выбор, ИмяОбъекта + "_" + НастраиваемоеПоле);
				ДобавитьОформляемоеПоле(ГруппировкаДельта.ПоляГруппировки, ИмяОбъекта + "_" + НастраиваемоеПоле);
				
			ИначеЕсли НастройкаПоля = 2 И ЕстьНастраиваемоеПоле Тогда
				
				ДобавитьОформляемоеПоле(ГруппировкаДельта.Порядок, ИмяОбъекта + "_" + НастраиваемоеПоле);
				
			КонецЕсли;
			
			Если ПериодическийРегистр Тогда
				ДобавитьОформляемоеПоле(ГруппировкаДельта.Выбор, ИмяОбъекта + "_" + "Период");
				ДобавитьОформляемоеПоле(ГруппировкаДельта.ПоляГруппировки, ИмяОбъекта + "_" + "Период");
			КонецЕсли;
			
			ДетальныеЗаписи = ГруппировкаДельта.Структура.Добавить();
			ДетальныеЗаписи.Имя = ГруппировкаДельта.Имя + "_ДетальныеЗаписи";
			ДетальныеЗаписи.Использование = Истина;
			// поля группировки определим позже
			
		ИначеЕсли (Чтение.КонтекстПространствИмен.Глубина = 4 Или Чтение.КонтекстПространствИмен.Глубина = 5) И ИмяОбъекта <> Неопределено И ТипЗнч(ЗначениеЧтения) = Тип("ТаблицаЗначений") Тогда // это записи, выводим их в таблицу.
			
			Если ОтборПоРегистру <> "ОдинРегистр" И ОтборПоРегистру <> "БезОтбора" И ОтборПоРегистру <> ИмяОбъекта Тогда
				Продолжить;
			КонецЕсли;
			
			Набор = ЗначениеЧтения;
			Если ЗначениеЗаполнено(РегистраторОтбор) Тогда
				СтрокиПоРегистратору = Набор.НайтиСтроки(Новый Структура(ИмяРегистратора, РегистраторОтбор));
				Если СтрокиПоРегистратору.Количество() > 0 Тогда
					Набор = Набор.Скопировать(СтрокиПоРегистратору,);
				Иначе
					СхемаКомпоновкиДанных.НаборыДанных.Удалить(НаборДанных);
					НастройкиКомпоновкиДанных.Структура.Удалить(Таблица);
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Колонка Из Набор.Колонки Цикл
				
				ИмяПоля = "" + ИмяОбъекта + "_" + Колонка.Имя;
				Если НаборДанных.Поля.Найти(ИмяПоля) <> Неопределено Тогда // уже есть в схеме, добавлять не надо
					НаборУжеДобавлен = Истина;
					Продолжить;
				Иначе
					НаборУжеДобавлен = Ложь;
				КонецЕсли;
				
				Поле             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				Поле.Заголовок   = Колонка.Имя;
				Поле.Поле        = Колонка.Имя;
				Поле.ПутьКДанным = ИмяПоля;
				Поле.ТипЗначения = Колонка.ТипЗначения;
				
				МаксимальнаяШирина = Поле.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина"));
				Если МаксимальнаяШирина <> Неопределено Тогда
					МаксимальнаяШирина.Значение = 15;
					МаксимальнаяШирина.Использование = Истина;
				КонецЕсли;
				
				Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда // создаем вычисляемое поле и рассчитываем дельту старых и новых записей.
					
					ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
					ВычисляемоеПоле.ПутьКДанным = ИмяОбъекта + "_Вычисляемое_" + Колонка.Имя;
					Шаблон = "ВЫБОР КОГДА %ОбъектМетаданных%_ТипЗаписиТестирования = ""ЗаписиДоРасчета"" ТОГДА -%ИмяПоля% ИНАЧЕ %ИмяПоля% КОНЕЦ";
					ВычисляемоеПоле.Выражение = СтрЗаменить(Шаблон, "%ИмяПоля%", ИмяПоля);
					ВычисляемоеПоле.Выражение = СтрЗаменить(ВычисляемоеПоле.Выражение, "%ОбъектМетаданных%", ИмяОбъекта);
					ВычисляемоеПоле.ТипЗначения = Колонка.ТипЗначения;
					ВычисляемоеПоле.Заголовок = Колонка.Имя;
					ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
					ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 15);
					
					ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
					ПолеИтога.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
					ПолеИтога.Выражение = "СУММА(" + ВычисляемоеПоле.ПутьКДанным + ")";
					ПолеИтога.Группировки.Добавить(ИмяОбъекта + "_" + ИмяРегистратора);
					Если ПериодическийРегистр Тогда
						ПолеИтога.Группировки.Добавить(ИмяОбъекта + "_" + "Период");
					КонецЕсли;
					Если НастройкаПоля = 1 И ЕстьНастраиваемоеПоле Тогда
						ПолеИтога.Группировки.Добавить(ИмяОбъекта + "_" + НастраиваемоеПоле);
					КонецЕсли;
					
					ПолеЗначения = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
					ПолеЗначения.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
					ПолеЗначения.Выражение = ИмяПоля;
					ПолеЗначения.Группировки.Добавить(ИмяОбъекта + "_ТипЗаписиТестирования");
					
					ИмяПоля = ВычисляемоеПоле.ПутьКДанным;
					
					ДобавитьОформляемоеПоле(Строки.Выбор, ИмяПоля);
					ДобавитьОформляемоеПоле(ГруппировкаДельта.Выбор, ИмяПоля);
					
				Иначе
					
					Если Колонка.Имя <> "ТипЗаписиТестирования" И (Колонка.Имя <> НастраиваемоеПоле ИЛИ НастройкаПоля <> 1)
						И Колонка.Имя <> ИмяРегистратора И Колонка.Имя <> "Период" Тогда // добавим в группировку по дельте
						
						ДобавитьОформляемоеПоле(ГруппировкаДельта.ПоляГруппировки, ИмяПоля);
						ДобавитьОформляемоеПоле(ГруппировкаДельта.Выбор, ИмяПоля);
						
						Если ДополнительныеПоляСортировки.Найти(Колонка.Имя) <> Неопределено Тогда
							ДобавитьОформляемоеПоле(ГруппировкаДельта.Порядок, ИмяПоля);
						КонецЕсли;
						
					КонецЕсли;
					
					Если Колонка.Имя <> ИмяРегистратора И Колонка.Имя <> "Период" И (Колонка.Имя <> НастраиваемоеПоле ИЛИ НастройкаПоля <> 1) Тогда // выведем в детальные записи
						ДобавитьОформляемоеПоле(ДетальныеЗаписи.ПоляГруппировки, ИмяПоля);
					КонецЕсли;
					
				КонецЕсли;
				
				Если Колонка.Имя <> ИмяРегистратора И Колонка.Имя <> "ИмяРегистра" И Колонка.Имя <> "ПолноеИмяРегистра" Тогда // добавим в группировку по дельте
					Если Колонка.Имя = НастраиваемоеПоле И НастройкаПоля = 1 Тогда
						ПолеГруппировкиДетальныеЗаписи = ДетальныеЗаписи.Выбор.Элементы.Вставить(1, Тип("ВыбранноеПолеКомпоновкиДанных"));
					ИначеЕсли Колонка.Имя = "Период" Тогда
						ИндексВставки = ?(НастройкаПоля = 1, 2, 1);
						ПолеГруппировкиДетальныеЗаписи = ДетальныеЗаписи.Выбор.Элементы.Вставить(ИндексВставки, Тип("ВыбранноеПолеКомпоновкиДанных"));
					Иначе
						ПолеГруппировкиДетальныеЗаписи = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					КонецЕсли;
					ПолеГруппировкиДетальныеЗаписи.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
				КонецЕсли;
				
			КонецЦикла;
			
			Если НаборУжеДобавлен Тогда
				Для Каждого Строка Из Набор Цикл
					Таблица = ВнешниеНаборыДанных[ИмяОбъекта]; // ТаблицаЗначений
					СтрокаДанных = Таблица.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДанных, Строка);
				КонецЦикла;
			Иначе
				ВнешниеНаборыДанных.Вставить(ИмяОбъекта, Набор);
			КонецЕсли;
			
			ОтчетПустой = Ложь;
			
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных, ДанныеРасшифровки);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Чтение.Закрыть(); // освобождаем файл
	Поток.Закрыть();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЕстьНастраиваемоеПоле(РассматриваемыеМетаданные)
	
	ЕстьНастраиваемоеПоле = РассматриваемыеМетаданные.Измерения.Найти(НастраиваемоеПоле) <> Неопределено;
	ЕстьНастраиваемоеПоле = ЕстьНастраиваемоеПоле Или РассматриваемыеМетаданные.Реквизиты.Найти(НастраиваемоеПоле) <> Неопределено;
	
	ЭтоБухРегистр = ОбщегоНазначения.ЭтоРегистрБухгалтерии(РассматриваемыеМетаданные);
	
	Если ЭтоБухРегистр Тогда
		// Добавим счет и субконто:
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("СчетДт");
		МассивИзмерений.Добавить("СчетКт");
		МассивИзмерений.Добавить("СубконтоДт1");
		МассивИзмерений.Добавить("СубконтоКт1");
		МассивИзмерений.Добавить("СубконтоДт2");
		МассивИзмерений.Добавить("СубконтоКт2");
		МассивИзмерений.Добавить("СубконтоДт3");
		МассивИзмерений.Добавить("СубконтоКт3");
		ЕстьНастраиваемоеПоле = ЕстьНастраиваемоеПоле Или МассивИзмерений.Найти(НастраиваемоеПоле) <> Неопределено;
	КонецЕсли;
	
	Возврат ЕстьНастраиваемоеПоле;
	
КонецФункции

Функция ДобавитьОформляемоеПоле(КоллекцияОформляемыхПолей, ИмяПоля)
	
	СоответствиеТиповПолейТипамКоллекции = Новый Соответствие;
	СоответствиеТиповПолейТипамКоллекции.Вставить(Тип("ВыбранныеПоляКомпоновкиДанных"), Тип("ВыбранноеПолеКомпоновкиДанных"));
	СоответствиеТиповПолейТипамКоллекции.Вставить(Тип("ПоляГруппировкиКомпоновкиДанных"), Тип("ПолеГруппировкиКомпоновкиДанных"));
	СоответствиеТиповПолейТипамКоллекции.Вставить(Тип("ПорядокКомпоновкиДанных"), Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	ТипПоля = СоответствиеТиповПолейТипамКоллекции.Получить(ТипЗнч(КоллекцияОформляемыхПолей));
	ПолеКомпоновкиДанных = КоллекцияОформляемыхПолей.Элементы.Добавить(ТипПоля);
	ПолеКомпоновкиДанных.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ПолеКомпоновкиДанных.Использование = Истина;
	Возврат ПолеКомпоновкиДанных;
	
КонецФункции

#КонецОбласти

#КонецЕсли
