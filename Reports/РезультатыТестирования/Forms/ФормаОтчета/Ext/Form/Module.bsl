#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(Параметры.ПутьКФайлу) Тогда
		Элементы.ИмяФайла.Видимость = Ложь;
		Отчет.АдресХранилища = Параметры.ПутьКФайлу;
		ИнициализироватьКомпоновку();
		Элементы.ГруппаНастройкиПолей.Видимость = Элементы.НастраиваемоеПоле.СписокВыбора.Количество() > 1;
		Элементы.ОтборПоРегистру.Видимость = Элементы.ОтборПоРегистру.СписокВыбора.Количество() > 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр = НСтр("ru='Файл результатов сравнения (*.xml;*.txt)|*.xml;*.txt'");
	
	ДиалогВыбораФайла.Заголовок = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.Расширение = "xml";
	ДиалогВыбораФайла.ИндексФильтра = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаЗавершениеВыбора", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеПомещенияФайла", ЭтотОбъект);
		НачатьПомещениеФайла(ОписаниеОповещения,,
			ПолноеИмяФайла,  Ложь,
			УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт  
	
	Отчет.АдресХранилища = Адрес;
	ИнициализироватьКомпоновку();
	ИмяФайла = ВыбранноеИмяФайла;
	Элементы.ГруппаНастройкиПолей.Видимость = Элементы.НастраиваемоеПоле.СписокВыбора.Количество() > 1;
	Элементы.ОтборПоРегистру.Видимость = Элементы.ОтборПоРегистру.СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновку()
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	КомпоновщикНастроек = Отчет.КомпоновщикНастроек;
	
	Источник = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	Источник.Имя = "ЛокальнаяБаза";
	Источник.СтрокаСоединения = "";
	Источник.ТипИсточникаДанных = "Local";
	
	НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ВнешниеНаборыДанных = Новый Структура();
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("xml");
	
	ФайлОтчета = ПолучитьИзВременногоХранилища(Отчет.АдресХранилища);  // ДвоичныеДанные
	ФайлОтчета.Записать(ПутьКФайлу);
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ПутьКФайлу);
	ИмяОбъекта = Неопределено;
	
	ДокументыРегистраторы = Новый ТаблицаЗначений;
	ДокументыРегистраторы.Колонки.Добавить("ДокументРегистратор");
	
	ПоляНастройки = Новый Структура;
	
	Пока Чтение.Прочитать() Цикл
		Если ЗначениеЗаполнено(Чтение.Значение) Тогда
			Попытка
				ЗначениеЧтения = ОбщегоНазначения.ЗначениеИзСтрокиXML(Чтение.Значение);
			Исключение
				Продолжить;
			КонецПопытки;
			Если (Чтение.КонтекстПространствИмен.Глубина = 3 Или Чтение.КонтекстПространствИмен.Глубина = 4) И ТипЗнч(ЗначениеЧтения) = Тип("Строка") Тогда // это объект метаданных, формируем по нему группировку и таблицу.
				ОбъектМетаданных = ЗначениеЧтения;
				КоллекцияМетаданных = Метаданные.НайтиПоПолномуИмени(ОбъектМетаданных);
				ИмяПоляРегистратора = Тестирование.ИмяПоляРегистратораРегистра(КоллекцияМетаданных);
				Если Тестирование.РегистрыСоСлужебнымРегистратором().Найти(ОбъектМетаданных) <> Неопределено Тогда
					ИмяПоляРегистратора = "ДокументРегистратор";
				ИначеЕсли Метаданные.РегистрыСведений.Содержит(КоллекцияМетаданных) 
					И КоллекцияМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
					ИмяПоляРегистратора = "Партия";
				КонецЕсли;
				МассивСтрокОбъекта = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОбъектМетаданных, ".");
				ИмяОбъекта = МассивСтрокОбъекта.Получить(1);
				
				Если СхемаКомпоновкиДанных.НаборыДанных.Найти(ИмяОбъекта) <> Неопределено Тогда // уже добавлен в схему
					НаборДанных = СхемаКомпоновкиДанных.НаборыДанных[ИмяОбъекта];
					Продолжить;
				КонецЕсли;
				
				// каждый объект метаданных это новый отдельный набор данных для СКД.
				НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
				НаборДанных.Имя = ИмяОбъекта;
				НаборДанных.ИмяОбъекта = ИмяОбъекта;
				НаборДанных.ИсточникДанных = "ЛокальнаяБаза";
				
				// группировка таблиц по объектам метаданных: один объект - одна таблица.
				Таблица = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
				Таблица.Имя = ИмяОбъекта;
				
				НастройкиКомпоновкиДанных.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов", АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать);
				ЗаголовокТаблицы = Таблица.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Заголовок"));
				Если ЗаголовокТаблицы <> Неопределено Тогда
					ЗаголовокТаблицы.Значение = "Таблица: " + ОбъектМетаданных;
					ЗаголовокТаблицы.Использование = Истина;
				КонецЕсли;
				
				Строки = Таблица.Строки.Добавить();
				Строки.ПараметрыВывода.УстановитьЗначениеПараметра("АвтоПозицияРесурсов", АвтоПозицияРесурсовКомпоновкиДанных.НеИспользовать);
				
				ПолеГруппировкаРегистратор = Строки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ПолеГруппировкаРегистратор.Поле = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "_" + ИмяПоляРегистратора);
				ПолеГруппировкаРегистратор.Использование = Истина;
				
				ГруппировкаРегистратор = Строки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ГруппировкаРегистратор.Поле = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "_" + ИмяПоляРегистратора);
				ГруппировкаРегистратор.Использование = Истина;
				
				ГруппировкаДельта = Строки.Структура.Добавить();
				
				ПолеВыбораРегистратор = ГруппировкаДельта.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				ПолеВыбораРегистратор.Поле = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "_" + ИмяПоляРегистратора);
				ПолеВыбораРегистратор.Использование = Истина;
				
				ПолеГруппировкиДельта = ГруппировкаДельта.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеГруппировкиДельта.Поле = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "_" + ИмяПоляРегистратора);
				ПолеГруппировкиДельта.Использование = Истина;
				// поля группировки определим позже
				
				ДетальныеЗаписи = ГруппировкаДельта.Структура.Добавить();
				ДетальныеЗаписи.Имя = ГруппировкаДельта.Имя + "_ДетальныеЗаписи";
				ДетальныеЗаписи.Использование = Истина;
				// поля группировки определим позже
				
			ИначеЕсли (Чтение.КонтекстПространствИмен.Глубина = 4 Или Чтение.КонтекстПространствИмен.Глубина = 5) И ИмяОбъекта <> Неопределено И ТипЗнч(ЗначениеЧтения) = Тип("ТаблицаЗначений") Тогда // это записи, выводим их в таблицу.
				
				Набор = ЗначениеЧтения;
				Если Набор.Колонки.Найти("Регистратор") = Неопределено Тогда
					Набор.Колонки.Добавить("Регистратор");
				КонецЕсли;
				
				Для Каждого Колонка Из Набор.Колонки Цикл
					
					ИмяПоля = "" + ИмяОбъекта + "_" + Колонка.Имя;
					
					Если НаборДанных.Поля.Найти(ИмяПоля) <> Неопределено Тогда // уже есть в схеме, добавлять не надо
						Продолжить;
					КонецЕсли;
					
					Поле             = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
					Поле.Заголовок   = Колонка.Имя;
					Поле.Поле        = Колонка.Имя;
					Поле.ПутьКДанным = ИмяПоля;
					Поле.ТипЗначения = Колонка.ТипЗначения;
					
					МаксимальнаяШирина = Поле.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("МаксимальнаяШирина"));
					Если МаксимальнаяШирина <> Неопределено Тогда
						МаксимальнаяШирина.Значение = 15;
						МаксимальнаяШирина.Использование = Истина;
					КонецЕсли;
					
					Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда // создаем вычисляемое поле и рассчитываем дельту старых и новых записей.
						
						ВычисляемоеПолеПутьКДанным = ИмяОбъекта + "_Вычисляемое_" + Колонка.Имя;
						Если СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ВычисляемоеПолеПутьКДанным) <> Неопределено Тогда
							Продолжить;
						КонецЕсли;
						ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
						ВычисляемоеПоле.ПутьКДанным = ИмяОбъекта + "_Вычисляемое_" + Колонка.Имя;
						Шаблон = "ВЫБОР КОГДА %ОбъектМетаданных%_ТипЗаписиТестирования = ""ИсходныеЗаписи"" ТОГДА -%ИмяПоля% ИНАЧЕ %ИмяПоля% КОНЕЦ";
						ВычисляемоеПоле.Выражение = СтрЗаменить(Шаблон, "%ИмяПоля%", ИмяПоля);
						ВычисляемоеПоле.Выражение = СтрЗаменить(ВычисляемоеПоле.Выражение, "%ОбъектМетаданных%", ИмяОбъекта);
						ВычисляемоеПоле.ТипЗначения = Колонка.ТипЗначения;
						ВычисляемоеПоле.Заголовок = Колонка.Имя;
						ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("ВыделятьОтрицательные", Истина);
						ВычисляемоеПоле.Оформление.УстановитьЗначениеПараметра("МаксимальнаяШирина", 15);
						
						ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
						ПолеИтога.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
						ПолеИтога.Выражение = "СУММА(" + ВычисляемоеПоле.ПутьКДанным + ")";
						ПолеИтога.Группировки.Добавить(ИмяОбъекта + "_" + ИмяПоляРегистратора);
						
						ПолеЗначения = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
						ПолеЗначения.ПутьКДанным = ВычисляемоеПоле.ПутьКДанным;
						ПолеЗначения.Выражение = ИмяПоля;
						ПолеЗначения.Группировки.Добавить(ИмяОбъекта + "_ТипЗаписиТестирования");
						
						ИмяПоля = ВычисляемоеПоле.ПутьКДанным;
						
						ПолеГруппировкиРегистратор = Строки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ПолеГруппировкиРегистратор.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
						
						ПолеГруппировкиДельта = ГруппировкаДельта.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ПолеГруппировкиДельта.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
					Иначе
						
						// Для каждой колонки определим сколько раз она встречается в расходждениях (для разных наборов данных),
						// делаем доступной для настройки только те колонки, которые встречаются в нескольких наборах (больше 1).
						Если ПоляНастройки.Свойство(Колонка.Имя) Тогда
							ПоляНастройки[Колонка.Имя] = ПоляНастройки[Колонка.Имя] + 1;
						Иначе
							ПоляНастройки.Вставить(Колонка.Имя, 1);
						КонецЕсли;
						
						Если Колонка.Имя <> "ТипЗаписиТестирования" И Колонка.Имя <> ИмяПоляРегистратора Тогда // добавим в группировку по дельте
							ПолеГруппировкиДельта = ГруппировкаДельта.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ПолеГруппировкиДельта.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
							ПолеГруппировкиДельта.Использование = Истина;

							ПолеГруппировкиДельта = ГруппировкаДельта.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							ПолеГруппировкиДельта.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
						КонецЕсли;
						Если Колонка.Имя <> ИмяПоляРегистратора Тогда // выведем в детальные записи
							ПолеГруппировкиДетальныеЗаписи = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
							ПолеГруппировкиДетальныеЗаписи.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
							ПолеГруппировкиДетальныеЗаписи.Использование = Истина;
						КонецЕсли;
					КонецЕсли;
					Если Колонка.Имя <> ИмяПоляРегистратора И Колонка.Имя <> "ИмяРегистра" И Колонка.Имя <> "ПолноеИмяРегистра" Тогда // добавим в группировку по дельте
						ПолеГруппировкиДетальныеЗаписи = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						ПолеГруппировкиДетальныеЗаписи.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
					КонецЕсли;
					Если Колонка.Имя <> "ТипЗаписиТестирования" Тогда 
						ПолеПорядка = ДетальныеЗаписи.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						ПолеПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
						ПолеПорядка.Использование = Истина;
						ПолеПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
					КонецЕсли;
				КонецЦикла;
				ВнешниеНаборыДанных.Вставить(ИмяОбъекта, Набор);
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ДокументыРегистраторы, Набор.ВыгрузитьКолонку(ИмяПоляРегистратора), "ДокументРегистратор");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ДокументыРегистраторы.Свернуть("ДокументРегистратор");
	Отчет.ДокументыРегистраторы.Загрузить(ДокументыРегистраторы);
	Список = Элементы.РегистраторОтбор.СписокВыбора;
	Список.ЗагрузитьЗначения(ДокументыРегистраторы.ВыгрузитьКолонку("ДокументРегистратор"));
	Для Каждого ЭлементСписка Из Список Цикл
		ЭлементСписка.Представление = Строка(ЭлементСписка.Значение);
	КонецЦикла;
	
	Элементы.НастраиваемоеПоле.СписокВыбора.Очистить();
	Элементы.НастраиваемоеПоле.СписокВыбора.Добавить("БезНастройки", НСтр("ru = 'Без настройки'"));
	Для каждого ЭлементСтруктуры Из ПоляНастройки Цикл
		Если ЭлементСтруктуры.Значение > 1 Или СхемаКомпоновкиДанных.НаборыДанных.Количество() = 1 Тогда
			Элементы.НастраиваемоеПоле.СписокВыбора.Добавить(ЭлементСтруктуры.Ключ);
		КонецЕсли;
	КонецЦикла;
	Отчет.НастраиваемоеПоле = "БезНастройки"; // устанавливаем значение по умолчанию.
	
	Элементы.ОтборПоРегистру.СписокВыбора.Очистить();
	Если СхемаКомпоновкиДанных.НаборыДанных.Количество() > 1 Тогда
		Элементы.ОтборПоРегистру.СписокВыбора.Добавить("БезОтбора", НСтр("ru = 'Без отбора'"));
		Для каждого НаборДанных Из СхемаКомпоновкиДанных.НаборыДанных Цикл
			Элементы.ОтборПоРегистру.СписокВыбора.Добавить(НаборДанных.Имя);
		КонецЦикла;
	Иначе
		Элементы.ОтборПоРегистру.СписокВыбора.Добавить("ОдинРегистр", НСтр("ru = 'Один регистр'"));
	КонецЕсли;
	Отчет.ОтборПоРегистру = "БезОтбора"; // устанавливаем значение по умолчанию.
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек = КомпоновщикНастроек;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных);
	
	Чтение.Закрыть(); // освобождаем файл
	УдалитьФайлы(ПутьКФайлу);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	УдалитьВременныеФайлыНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьВременныеФайлыНаСервере()
	Если ЗначениеЗаполнено(Отчет.ПутьКФайлу) Тогда
		УдалитьФайлы(Отчет.ПутьКФайлу);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	СтандартнаяОбработка = Ложь;
	РезультатРасшифровки = РезультатОбработкаРасшифровкиСервер(Расшифровка);
	
	ТекстСообщения = НСтр("ru = 'Представление: %Представление% || Значение: %Значение% || Тип: %Тип%'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Представление%", Строка(РезультатРасшифровки.Значение));
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Тип%", Строка(ТипЗнч(РезультатРасшифровки.Значение)));
	
	Если РезультатРасшифровки.ЭтоПеречисление Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", РезультатРасшифровки.ИмяЗначенияПеречисления);
	ИначеЕсли РезультатРасшифровки.ЭтоСсылка Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(РезультатРасшифровки.Значение.УникальныйИдентификатор())); 
	Иначе
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Значение%", Строка(РезультатРасшифровки.Значение)); 
	КонецЕсли;
	
	Если РезультатРасшифровки.ЭтоСсылка Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,РезультатРасшифровки.Значение);
		Если ЗначениеЗаполнено(РезультатРасшифровки.Значение) Тогда
			ПоказатьЗначение(Неопределено, РезультатРасшифровки.Значение);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОбработкаРасшифровкиСервер(Расшифровка)
	РасшифровкаДанные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки); // ДанныеРасшифровкиКомпоновкиДанных
	Значение =  РасшифровкаДанные.Элементы[Расшифровка].ПолучитьПоля()[0].Значение;
	
	РезультатРасшифровки = Новый Структура;
	
	ЭтоСсылка = ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение));
	РезультатРасшифровки.Вставить("ЭтоСсылка", ЭтоСсылка);
	РезультатРасшифровки.Вставить("Значение", Значение);
	
	Если ЭтоСсылка
		И ОбщегоНазначения.ЭтоПеречисление(Значение.Метаданные()) Тогда
		РезультатРасшифровки.Вставить("ЭтоПеречисление", Истина);
		РезультатРасшифровки.Вставить("ИмяЗначенияПеречисления", ОбщегоНазначения.ИмяЗначенияПеречисления(Значение));
	Иначе
		РезультатРасшифровки.Вставить("ЭтоПеречисление", Ложь);
		РезультатРасшифровки.Вставить("ИмяЗначенияПеречисления","");
	КонецЕсли;		
	
	Возврат РезультатРасшифровки;
КонецФункции

&НаКлиенте
Процедура РегистраторОтборАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) И ЗначениеЗаполнено(Элемент.СписокВыбора) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
	
		Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если СтрНайти(ЭлементСписка.Представление, Текст) Тогда
				ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РегистраторОтборОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отчет.РегистраторОтбор = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура РегистраторОтборОчистка(Элемент, СтандартнаяОбработка)
	Отчет.РегистраторОтбор = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура НастраиваемоеПолеПриИзменении(Элемент)
	Элементы.НастройкаПоля.Видимость = Отчет.НастраиваемоеПоле <> "БезНастройки";
КонецПроцедуры

#КонецОбласти
