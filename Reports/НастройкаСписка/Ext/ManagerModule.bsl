//++ Устарело_Производство21
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Применяет к списку заданные настройки
//
// Параметры:
//  ДанныеСписка				- ДанныеФормыКоллекция - исходный список к которому нужно применить настройки
//  АдресСхемыКомпоновкиДанных	- Строка - адрес хранилища в котором расположена схема данных
//  НастройкиКомпоновки			- НастройкиКомпоновкиДанных - настройки списка
//  ПорядокПоУмолчанию			- Строка - список полей по которым нужно упорядочить если пользователь не настроил порядок.
//
Процедура ПрименитьНастройкуКСписку(ДанныеСписка, АдресСхемыКомпоновкиДанных, НастройкиКомпоновки, ПорядокПоУмолчанию = "") Экспорт

	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	
	// Загрузка СКД
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновки);
	КомпоновщикНастроек.Восстановить();
	
	// Отключение вывода общих итогов
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	КомпоновщикНастроек.Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	ИспользуемыеНастройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Компоновка макета
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(
											СхемаКомпоновкиДанных, 
											ИспользуемыеНастройки,,, 
											Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	НаборДанных = ДанныеСписка.Выгрузить().СкопироватьКолонки();
	НаборДанных.Колонки.Добавить("_Идентификатор", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
	Для каждого ДанныеСтроки Из ДанныеСписка Цикл
		НоваяСтрока = НаборДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		НоваяСтрока._Идентификатор = ДанныеСтроки.ПолучитьИдентификатор();
	КонецЦикла;
	
	НаборыДанныхОбъекты = Новый Структура;
	НаборыДанныхОбъекты.Вставить("НаборДанных", НаборДанных);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных, НаборыДанныхОбъекты);
	
	// Получение результата
	ТаблицаРезультата = Новый ТаблицаЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ТаблицаРезультата);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);

	ТаблицаРезультата.Индексы.Добавить("_Идентификатор");
	
	// Нельзя использовать загрузку таблицы значений, т.к. ТаблицаРезультата может содержать не все колонки.
	Для каждого ДанныеСтроки Из ДанныеСписка Цикл
		ДанныеСтроки.НеСоответствуетНастройкеСписка = (ТаблицаРезультата.Найти(ДанныеСтроки.ПолучитьИдентификатор(), "_Идентификатор") = Неопределено);
	КонецЦикла;
	
	ПоляСортировки = "";
	Для каждого ЭлементПорядка Из ИспользуемыеНастройки.Порядок.Элементы Цикл
		Если НЕ ЭлементПорядка.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляСортировки = ПоляСортировки 
							+ ?(ПоляСортировки = "", "", ", ")
							+ Строка(ЭлементПорядка.Поле)
							+ ?(ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Убыв, " убыв", "");
	КонецЦикла;
	
	Если ПоляСортировки <> "" Тогда
		ДанныеСписка.Сортировать(ПоляСортировки);
	ИначеЕсли ПорядокПоУмолчанию <> "" Тогда
		ДанныеСписка.Сортировать(ПорядокПоУмолчанию);
	КонецЕсли; 
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИнициализацияНастройки(РеквизитыСписка, НастройкиСписка, УникальныйИдентификаторФормы, НастройкаПолей = Неопределено) Экспорт

	ПоляОтбора = Неопределено;
	ПоляПорядка = Неопределено;
	НедоступныеПоля = Неопределено;
	
	Если НастройкаПолей <> Неопределено Тогда
		НастройкаПолей.Свойство("ПоляОтбора", ПоляОтбора);
		НастройкаПолей.Свойство("ПоляПорядка", ПоляПорядка);
		НастройкаПолей.Свойство("НедоступныеПоля", НедоступныеПоля);
	КонецЕсли;
	
	Если НедоступныеПоля = Неопределено Тогда
		НедоступныеПоля = Новый Массив;
	КонецЕсли;
	НедоступныеПоля.Добавить("НеСоответствуетНастройкеСписка");
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить(); 
	ИсточникДанных.Имя = "ИсточникДанных";
	ИсточникДанных.СтрокаСоединения = "";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных";
	НаборДанных.ИмяОбъекта = "НаборДанных";
	НаборДанных.ИсточникДанных = "ИсточникДанных";

	Для каждого РеквизитФормы Из РеквизитыСписка Цикл
		
		Если НедоступныеПоля.Найти(РеквизитФормы.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитФормы.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений"))
			ИЛИ РеквизитФормы.ТипЗначения.СодержитТип(Тип("СписокЗначений")) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабора.ПутьКДанным = РеквизитФормы.Имя;
		ПолеНабора.Заголовок   = РеквизитФормы.Заголовок;
		ПолеНабора.Поле        = РеквизитФормы.Имя;
		ПолеНабора.ТипЗначения = Новый ОписаниеТипов(РеквизитФормы.ТипЗначения);
		
		Если ПоляОтбора <> Неопределено И ПоляОтбора.Найти(РеквизитФормы.Имя) = Неопределено Тогда
			ПолеНабора.ОграничениеИспользования.Условие = Истина;
		КонецЕсли; 
		Если ПоляПорядка <> Неопределено И ПоляОтбора.Найти(РеквизитФормы.Имя) = Неопределено Тогда
			ПолеНабора.ОграничениеИспользования.Порядок = Истина;
		КонецЕсли; 
		
	КонецЦикла; 
	
	ПолеНабора = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	ПолеНабора.ПутьКДанным = "_Идентификатор";
	ПолеНабора.Заголовок   = "Идентификатор";
	ПолеНабора.Поле        = "_Идентификатор";
	ПолеНабора.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0));
	ПолеНабора.ОграничениеИспользования.Условие = Истина;
	ПолеНабора.ОграничениеИспользования.Порядок = Истина;
	
	СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Отбор.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Порядок.ИдентификаторПользовательскойНастройки = Строка(Новый УникальныйИдентификатор);
	
	ГруппировкаЗаписей = СхемаКомпоновкиДанных.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ВыбранноеПоле = ГруппировкаЗаписей.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Использование = Истина;
	ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных("_Идентификатор");
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	НастройкиСписка.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	НастройкиСписка.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Возврат АдресСхемы;
	
КонецФункции

Процедура ЗагрузитьНастройкиИзХранилища(КлючОбъекта, КлючНастроек, НастройкиСписка) Экспорт

	СохраненныеНастройки = ХранилищеНастроекДанныхФорм.Загрузить(КлючОбъекта, КлючНастроек);

	НастройкиСписка.ЗагрузитьНастройки(СохраненныеНастройки.Настройки);
	НастройкиСписка.ЗагрузитьПользовательскиеНастройки(СохраненныеНастройки.ПользовательскиеНастройки);
	
КонецПроцедуры

Процедура СохранитьНастройкиВХранилище(КлючОбъекта, КлючНастроек, НастройкиСписка) Экспорт

	СохраненныеНастройки = Новый Структура;
	СохраненныеНастройки.Вставить("Настройки", НастройкиСписка.ПолучитьНастройки());
	СохраненныеНастройки.Вставить("ПользовательскиеНастройки", НастройкиСписка.ПользовательскиеНастройки);
	ХранилищеНастроекДанныхФорм.Сохранить(КлючОбъекта, КлючНастроек, СохраненныеНастройки);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
//-- Устарело_Производство21