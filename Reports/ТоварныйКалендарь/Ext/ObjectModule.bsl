#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	
	// Подстановка.
	ТекстЗапроса = СхемаКомпоновкиДанных.НаборыДанных.СпрНоменклатура.Запрос;
	
	ИсточникУпаковки = "ВсяНоменклатура.ЕдиницаИзмерения";
	ИсточникНоменклатуры = "ВсяНоменклатура.Ссылка";
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", Подстановка);
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", Подстановка);
	СхемаКомпоновкиДанных.НаборыДанных.СпрНоменклатура.Запрос = ТекстЗапроса;
	
	// Формирование отчета.
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	КомпоновкаДанныхСервер.УстановитьЗаголовкиМакетаКомпоновки(ПараметризуемыеЗаголовкиПолей(), МакетКомпоновки);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ВнешниеНаборыДанных = ВнешниеНаборыДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	КомпоновкаДанныхСервер.СкрытьВспомогательныеПараметрыОтчета(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ВспомогательныеПараметрыОтчета());
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//	Форма			- ФормаКлиентскогоПриложения	- форма отчета.
//	КлючВарианта	- Строка			- имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//	Настройки		- См. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//
// Параметры:
//	Контекст							- Произвольный									- параметры контекста, в котором используется отчет.
//	КлючСхемы							- Строка										- идентификатор текущей схемы компоновщика настроек.
//	КлючВарианта						- Строка, Неопределено							- имя предопределенного или уникальный идентификатор пользовательского
//																							варианта отчета.
//																							Неопределено когда вызов для варианта расшифровки или без контекста.
//	НовыеНастройкиКД					- НастройкиКомпоновкиДанных, Неопределено		- настройки варианта отчета, которые будут загружены
//																							в компоновщик настроек после его инициализации.
//																							Неопределено когда настройки варианта не надо загружать (уже загружены ранее).
//	НовыеПользовательскиеНастройкиКД	- ПользовательскиеНастройкиКомпоновкиДанных,
//											Неопределено								- пользовательские настройки, которые будут загружены в компоновщик
//																							настроек после его инициализации.
//																							Неопределено когда пользовательские настройки не надо загружать
//																							(уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если КлючСхемы = КлючВарианта Тогда
		Возврат;
	КонецЕсли;
	
	КлючСхемы		= КлючВарианта;
	ЗаголовкиПолей	= ПараметризуемыеЗаголовкиПолей();
	
	КомпоновкаДанныхСервер.УстановитьЗаголовкиВыбранныхПолей(НовыеНастройкиКД.Выбор.Элементы, ЗаголовкиПолей);
	
	Если ТипЗнч(НовыеПользовательскиеНастройкиКД) <> Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторНастройки = НовыеНастройкиКД.Выбор.ИдентификаторПользовательскойНастройки;
	
	Если ЗначениеЗаполнено(ИдентификаторНастройки) Тогда
		НайденныйЭлементНастройки = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ИдентификаторНастройки);
		
		Если НайденныйЭлементНастройки <> Неопределено Тогда 
			КомпоновкаДанныхСервер.УстановитьЗаголовкиВыбранныхПолей(НайденныйЭлементНастройки.Элементы, ЗаголовкиПолей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы)
	
	ДатаОкончания = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОкончания");
	
	Если ДатаОкончания <> Неопределено И ДатаОкончания.Использование Тогда
		Если ТипЗнч(ДатаОкончания) = Тип("СтандартнаяДатаНачала") Тогда
			Если НачалоДня(ДатаОкончания.Значение.Дата) < НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДатаОкончания.Значение = НачалоДня(ТекущаяДатаСеанса());
			КонецЕсли;
		Иначе
			Если НачалоДня(ДатаОкончания.Значение) < НачалоДня(ТекущаяДатаСеанса()) Тогда
				ДатаОкончания.Значение = НачалоДня(ТекущаяДатаСеанса());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(КомпоновщикНастроек);
	
КонецПроцедуры

Функция ВспомогательныеПараметрыОтчета()
	
	ВспомогательныеПараметры = Новый Массив;
	
	ВспомогательныеПараметры.Добавить("КоличественныеИтогиПоЕдИзм");
	
	КомпоновкаДанныхСервер.ДобавитьВспомогательныеПараметрыОтчетаПоФункциональнымОпциям(ВспомогательныеПараметры);
	
	Возврат ВспомогательныеПараметры;

КонецФункции

Функция ПараметризуемыеЗаголовкиПолей()
	
	Возврат КомпоновкаДанныхСервер.СоответствиеЗаголовковПолейЕдиницИзмерений(КомпоновщикНастроек);
	
КонецФункции

Функция ВнешниеНаборыДанных()
	
	МакетДляОтборов = ПолучитьМакет("ВнешнийИсточникДанных");
	Адрес = ПоместитьВоВременноеХранилище(МакетДляОтборов);
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(Адрес);
	
	КомпоновщикНастроекМакета = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекМакета.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекМакета.ЗагрузитьНастройки(КомпоновщикНастроек.ПолучитьНастройки());
	КомпоновщикНастроекМакета.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.Полное);
	
	// Отбор по сегментам.
	ПараметрИспользуетсяОтборПоСегменту = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
		КомпоновщикНастроек, "ИспользуетсяОтборПоСегментуНоменклатуры");
	ЕстьОтбор = ПараметрИспользуетсяОтборПоСегменту.Значение И ПараметрИспользуетсяОтборПоСегменту.Использование;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикНастроекМакета.Настройки, "ИспользуетсяОтборПоСегментуНоменклатуры", Истина, ЕстьОтбор);
	
	ОтображатьОтгрузкиНаДатуОбеспечения = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ОтображатьОтгрузкиНаДатуОбеспечения");
	ИспользуетсяОтборПоСегментуНоменклатуры = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ИспользуетсяОтборПоСегментуНоменклатуры");
	ЕдиницыКоличества = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ЕдиницыКоличества");
	ДатаОкончания = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОкончания");
	ДатаОкончанияЗначение = '00010101';
	Если ТипЗнч(ДатаОкончания.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ДатаОкончанияЗначение = ДатаОкончания.Значение.Дата;
	Иначе
		ДатаОкончанияЗначение = ДатаОкончания.Значение;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(МакетДляОтборов, КомпоновщикНастроекМакета.ПолучитьНастройки(), , , ,Ложь);
	Запрос = КомпоновкаДанныхСервер.ПолучитьЗапросИзМакетаКомпоновки(Макет, "Набор");
	Запрос.Текст = ТекстЗапросаСПодстановками(Запрос.Текст, ОтображатьОтгрузкиНаДатуОбеспечения);
	
	УдалитьИзВременногоХранилища(Адрес);
	
	Запрос.УстановитьПараметр("ОтображатьОтгрузкиНаДатуОбеспечения", ОтображатьОтгрузкиНаДатуОбеспечения.Значение);
	Запрос.УстановитьПараметр("ИспользуетсяОтборПоСегментуНоменклатуры", ИспользуетсяОтборПоСегментуНоменклатуры.Значение);
	Запрос.УстановитьПараметр("ЕдиницыКоличества", ЕдиницыКоличества.Значение);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияЗначение);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Выполнить();

	ТаблицаПериодов = Новый ТаблицаЗначений();
	ТаблицаПериодов.Колонки.Добавить("Период", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ПараметрДатаОкончания = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "ДатаОкончания");
	Если ПараметрДатаОкончания = Неопределено Тогда
		ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	ИначеЕсли ТипЗнч(ПараметрДатаОкончания.Значение) = Тип("СтандартнаяДатаНачала") Тогда
		ДатаОкончания = ПараметрДатаОкончания.Значение.Дата;
	ИначеЕсли ТипЗнч(ПараметрДатаОкончания.Значение) = Тип("Дата") Тогда
		ДатаОкончания = ПараметрДатаОкончания.Значение;
	Иначе
		ДатаОкончания = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ПериодМинимум = НачалоДня(ТекущаяДатаСеанса());
	ПериодМаксимум = ДатаОкончания;
	
	Пока ПериодМинимум <= ПериодМаксимум Цикл
		НоваяСтрока = ТаблицаПериодов.Добавить();
		НоваяСтрока.Период = ПериодМинимум;
		ПериодМинимум = ПериодМинимум + 3600 * 24;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаПериодов", ТаблицаПериодов);
	Таблица = ВыгрузитьТаблицуДляРасчетаОстатков(Запрос);
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ДобавитьИЗаполнитьКолонкиНачальныйИКонченыйОстаток(Таблица);
	
	ВнешниеНаборыДанных = Новый Структура("ОсновнойНабор", Таблица);
	
	Возврат ВнешниеНаборыДанных;
	
КонецФункции

Процедура ДобавитьИЗаполнитьКолонкиНачальныйИКонченыйОстаток(Таблица)
	
	Таблица.Колонки.Добавить("КонечныйОстаток", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Таблица.Колонки.Добавить("КонечныйОстатокВес", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Таблица.Колонки.Добавить("КонечныйОстатокОбъем", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	КонечныйОстаток = 0;
	КонечныйОстатокВес = 0;
	КонечныйОстатокОбъем = 0;
	
	ИменаСвойств = "Номенклатура, Характеристика, Склад, Назначение";
	КлючЗаписи = Новый Структура(ИменаСвойств);
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		ИзмениласьЗапись = (КлючЗаписи.Номенклатура <> СтрокаТаблицы.Номенклатура
				Или КлючЗаписи.Характеристика <> СтрокаТаблицы.Характеристика
				Или КлючЗаписи.Склад <> СтрокаТаблицы.Склад
				Или КлючЗаписи.Назначение <> СтрокаТаблицы.Назначение);
		
		Если ИзмениласьЗапись Тогда
			КонечныйОстаток = СтрокаТаблицы.НачальныйОстаток;
			КонечныйОстатокВес = СтрокаТаблицы.НачальныйОстатокВес;
			КонечныйОстатокОбъем = СтрокаТаблицы.НачальныйОстатокОбъем;
			ЗаполнитьЗначенияСвойств(КлючЗаписи, СтрокаТаблицы);
		КонецЕсли;
		
		СтрокаТаблицы.НачальныйОстаток = КонечныйОстаток;
		СтрокаТаблицы.НачальныйОстатокВес = КонечныйОстатокВес;
		СтрокаТаблицы.НачальныйОстатокОбъем = КонечныйОстатокОбъем;
		
		Если СтрокаТаблицы.ГруппаПериодов < 2 Тогда
			КонечныйОстаток = СтрокаТаблицы.НачальныйОстаток
				+ СтрокаТаблицы.КоличествоПриход - СтрокаТаблицы.КоличествоРасход;
			КонечныйОстатокВес = СтрокаТаблицы.НачальныйОстатокВес
				+ СтрокаТаблицы.КоличествоПриходВес - СтрокаТаблицы.КоличествоРасходВес;
			КонечныйОстатокОбъем = СтрокаТаблицы.НачальныйОстатокОбъем
				+ СтрокаТаблицы.КоличествоПриходОбъем - СтрокаТаблицы.КоличествоРасходОбъем;
		КонецЕсли;
		
		СтрокаТаблицы.КонечныйОстаток = КонечныйОстаток;
		СтрокаТаблицы.КонечныйОстатокВес = КонечныйОстатокВес;
		СтрокаТаблицы.КонечныйОстатокОбъем = КонечныйОстатокОбъем;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстЗапросаСПодстановками(ТекстЗапроса, ОтображатьОтгрузкиНаДатуОбеспечения)
	
	ИсточникНоменклатуры = "ИнформацияОДоступности.Номенклатура";
	ИсточникУпаковки = ИсточникНоменклатуры + ".ЕдиницаИзмерения";
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаВесУпаковки(ИсточникУпаковки, ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаВесНоменклатуры", Подстановка);
	Подстановка = Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаОбъемУпаковки(ИсточникУпаковки, ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаОбъемНоменклатуры", Подстановка);
	Подстановка =
		"ВЫБОР
		|	КОГДА &ЕдиницыКоличества = 0
		|		ТОГДА
		|			1
		|	КОГДА &ЕдиницыКоличества = 1
		|		ТОГДА
		|			1/ %ИсточникНоменклатуры%.КоэффициентЕдиницыДляОтчетов
		|КОНЕЦ";
	Подстановка = СтрЗаменить(Подстановка, "%ИсточникНоменклатуры%", ИсточникНоменклатуры);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстЗапросаКоэффициентЕдиницы", Подстановка);
	
	ПодстановкаМаксимумДатаОтгрузкиДатаПоступления = "";
	Если ОтображатьОтгрузкиНаДатуОбеспечения.Значение Тогда
		ПодстановкаМаксимумДатаОтгрузкиДатаПоступления =
			"ВЫБОР
			|	КОГДА ИнформацияОДоступности.ДатаПоступления <
			|			ВЫБОР
			|				КОГДА ИнформацияОДоступности.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА
			|						НАЧАЛОПЕРИОДА(ЗаказыРеестра.ДатаДокументаИБ, ДЕНЬ)
			|				ИНАЧЕ ИнформацияОДоступности.ЖелаемаяДатаОтгрузки
			|			КОНЕЦ
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА ИнформацияОДоступности.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|					ТОГДА
			|						НАЧАЛОПЕРИОДА(ЗаказыРеестра.ДатаДокументаИБ, ДЕНЬ)
			|				ИНАЧЕ ИнформацияОДоступности.ЖелаемаяДатаОтгрузки
			|			КОНЕЦ
			|	ИНАЧЕ ИнформацияОДоступности.ДатаПоступления
			|КОНЕЦ";
	Иначе
		ПодстановкаМаксимумДатаОтгрузкиДатаПоступления =
			"ВЫБОР
			|	КОГДА ИнформацияОДоступности.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|		ТОГДА
			|			НАЧАЛОПЕРИОДА(ЗаказыРеестра.ДатаДокументаИБ, ДЕНЬ)
			|	ИНАЧЕ ИнформацияОДоступности.ЖелаемаяДатаОтгрузки
			|КОНЕЦ";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ПодстановкаМаксимумДатаОтгрузкиДатаПоступления", ПодстановкаМаксимумДатаОтгрузкиДатаПоступления);
	
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ВыгрузитьТаблицуДляРасчетаОстатков(Запрос)
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.Назначение.Партнер КАК Партнер,
		|	Таблица.Назначение.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Таблица.Назначение.Договор КАК Договор
		|ПОМЕСТИТЬ Назначения
		|ИЗ
		|	ВтТоварныйКалендарь КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Назначение";
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Таблица.Период КАК Период
		|ПОМЕСТИТЬ ВтПериоды
		|ИЗ
		|	&ТаблицаПериодов КАК Таблица
		|;
		|
		|/////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	Таблица.НачальныйОстаток КАК НачальныйОстаток,
		|	Таблица.НачальныйОстатокВес КАК НачальныйОстатокВес,
		|	Таблица.НачальныйОстатокОбъем КАК НачальныйОстатокОбъем
		|ПОМЕСТИТЬ ВтТовары
		|ИЗ
		|	ВтТоварныйКалендарь КАК Таблица
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение
		|	
		|;
		|
		|/////////////////////////////
		|ВЫБРАТЬ
		|	Товары.Номенклатура КАК Номенклатура,
		|	Товары.Характеристика КАК Характеристика,
		|	Товары.Склад КАК Склад,
		|	Товары.Назначение КАК Назначение,
		|	ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
		|	ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
		|	ЕСТЬNULL(Назначения.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
		|	1 КАК ГруппаПериодов,
		|	ТаблицаПериоды.Период КАК Период,
		|	ЕСТЬNULL(Таблица.Регистратор, НЕОПРЕДЕЛЕНО) КАК Регистратор,
		|	ЕСТЬNULL(Таблица.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
		|	ЕСТЬNULL(Таблица.КоличествоПриход, 0) КАК КоличествоПриход,
		|	ЕСТЬNULL(Таблица.КоличествоПриходВес, 0) КАК КоличествоПриходВес,
		|	ЕСТЬNULL(Таблица.КоличествоПриходОбъем, 0) КАК КоличествоПриходОбъем,
		|	ЕСТЬNULL(Таблица.КоличествоРасход, 0) КАК КоличествоРасход,
		|	ЕСТЬNULL(Таблица.КоличествоРасходВес, 0) КАК КоличествоРасходВес,
		|	ЕСТЬNULL(Таблица.КоличествоРасходОбъем, 0) КАК КоличествоРасходОбъем,
		|	Товары.НачальныйОстаток КАК НачальныйОстаток,
		|	Товары.НачальныйОстатокВес КАК НачальныйОстатокВес,
		|	Товары.НачальныйОстатокОбъем КАК НачальныйОстатокОбъем
		|ИЗ
		|	ВтТовары КАК Товары
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПериоды КАК ТаблицаПериоды
		|		ПО ИСТИНА
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТоварныйКалендарь КАК Таблица
		|		ПО Таблица.Номенклатура = Товары.Номенклатура
		|		 И Таблица.Характеристика = Товары.Характеристика
		|		 И Таблица.Склад = Товары.Склад
		|		 И Таблица.Назначение = Товары.Назначение
		|		 И Таблица.Период = ТаблицаПериоды.Период
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Назначения КАК Назначения
		|		ПО Назначения.Назначение = Товары.Назначение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Таблица.Номенклатура КАК Номенклатура,
		|	Таблица.Характеристика КАК Характеристика,
		|	Таблица.Склад КАК Склад,
		|	Таблица.Назначение КАК Назначение,
		|	ЕСТЬNULL(Назначения.Партнер, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Партнер,
		|	ЕСТЬNULL(Назначения.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) КАК НаправлениеДеятельности,
		|	ЕСТЬNULL(Назначения.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
		|	Таблица.ГруппаПериодов КАК ГруппаПериодов,
		|	Таблица.Период КАК Период,
		|	Таблица.Регистратор КАК Регистратор,
		|	Таблица.Дата КАК Дата,
		|	Таблица.КоличествоПриход КАК КоличествоПриход,
		|	Таблица.КоличествоПриходВес КАК КоличествоПриходВес,
		|	Таблица.КоличествоПриходОбъем КАК КоличествоПриходОбъем,
		|	Таблица.КоличествоРасход КАК КоличествоРасход,
		|	Таблица.КоличествоРасходВес КАК КоличествоРасходВес,
		|	Таблица.КоличествоРасходОбъем КАК КоличествоРасходОбъем,
		|	Таблица.НачальныйОстаток КАК НачальныйОстаток,
		|	Таблица.НачальныйОстатокВес КАК НачальныйОстатокВес,
		|	Таблица.НачальныйОстатокОбъем КАК НачальныйОстатокОбъем
		|ИЗ
		|	ВтТоварныйКалендарь КАК Таблица
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПериоды КАК ТаблицаПериоды
		|		ПО ТаблицаПериоды.Период = Таблица.Период
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Назначения КАК Назначения
		|		ПО Назначения.Назначение = Таблица.Назначение
		|		
		|ГДЕ
		|	ТаблицаПериоды.Период ЕСТЬ NULL
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура, Характеристика, Склад, Назначение, Период, Дата, Регистратор, ГруппаПериодов";
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

#КонецОбласти

#КонецЕсли