#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеИВыполнениеЗапросов

Функция ТекстЗапросаПоПартнеру(СоответствиеЗапросыДанные)
	
	СоответствиеЗапросыДанные.Вставить("ДанныеПартнера",0);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		ТекстРеквизитыКонтрагента =",
		|	ЕСТЬNULL(Контрагенты.ЮрФизЛицо,ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ПустаяСсылка)) КАК ЮрФизЛицо,
		|	ЕСТЬNULL(Контрагенты.ИНН,"""") КАК ИНН,
		|	ЕСТЬNULL(Контрагенты.КПП, """") КАК КПП";
		
		ТекстСоединениеКонтрагенты = "
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО Контрагенты.Партнер = Партнеры.Ссылка";
		
	Иначе
		
		ТекстРеквизитыКонтрагента ="";
		ТекстСоединениеКонтрагенты = "";
		
	КонецЕсли;
	
	Возврат "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Партнеры.Наименование,
	|	ВЫБОР
	|		КОГДА Партнеры.БизнесРегион = ЗНАЧЕНИЕ(Справочник.БизнесРегионы.ПустаяСсылка)
	|			ТОГДА &НеУказан
	|		ИНАЧЕ Партнеры.БизнесРегион
	|	КОНЕЦ КАК БизнесРегион,
	|	ВЫБОР
	|		КОГДА Партнеры.ОсновнойМенеджер = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|			ТОГДА &НеУказан
	|		ИНАЧЕ Партнеры.ОсновнойМенеджер
	|	КОНЕЦ КАК ОсновнойМенеджер,
	|	Партнеры.ДатаРегистрации КАК ДатаРегистрации,
	|	Партнеры.Клиент,
	|	Партнеры.Конкурент,
	|	Партнеры.Поставщик,
	|	Партнеры.ПрочиеОтношения,
	|	Партнеры.ОбслуживаетсяТорговымиПредставителями,
	|	Партнеры.Комментарий,
	|	Партнеры.ДополнительнаяИнформация" + ТекстРеквизитыКонтрагента + "
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры " + ТекстСоединениеКонтрагенты+ "
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыДополнительныеРеквизиты.Свойство,
	|	ПартнерыДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|ГДЕ
	|	ПартнерыДополнительныеРеквизиты.Ссылка = &Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство,
	|	ДополнительныеСведения.Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаПоПервичномуИнтересу(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ИсточникиПервичногоИнтереса) Или
		(НЕ ПолучитьФункциональнуюОпцию("ФиксироватьПервичныйИнтерес"))Тогда
		Возврат "";
	КонецЕсли; 
	
	СоответствиеЗапросыДанные.Вставить("ПервичныйИнтерес",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиПервичногоИнтереса.КаналПервичногоИнтереса,
	|	ИсточникиПервичногоИнтереса.ИсточникПервичногоИнтереса
	|ИЗ
	|	РегистрСведений.ИсточникиПервичногоИнтереса КАК ИсточникиПервичногоИнтереса
	|ГДЕ
	|	ИсточникиПервичногоИнтереса.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции 

Функция ТекстЗапросаОКонтактнойИнформацииПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("КонтактнаяИнформацияПартнера",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ
	|	ПартнерыКонтактнаяИнформация.Представление КАК Представление,
	|	ПартнерыКонтактнаяИнформация.ВидДляСписка  КАК ВидКонтактнойИнформации
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка = &Партнер
	|	И ПартнерыКонтактнаяИнформация.ВидДляСписка <> ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции 

Функция ТекстЗапросаОВышестоящихПартнерах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	СоответствиеЗапросыДанные.Вставить("ВышестоящиеПартнеры",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.КонтактнаяИнформация.(
	|		Вид,
	|		Представление
	|	)                         КАК КонтактнаяИнформация,
	|	Партнеры.ОсновнойМенеджер КАК ОсновнойМенеджер,
	|	Партнеры.Наименование     КАК Наименование,
	|	Партнеры.Ссылка           КАК Ссылка
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО ИерархияПартнеров.Родитель = Партнеры.Ссылка
	|ГДЕ
	|	ИерархияПартнеров.Партнер = &Партнер
	|	И ИерархияПартнеров.Родитель <> &Партнер
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции 

Функция ТекстЗапросаОКонтактныхЛицах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.КонтактныеЛицаПартнеров) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("КонтактныеЛица",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ
	|	КонтактныеЛицаПартнеров.Наименование,
	|	КонтактныеЛицаПартнеров.ДолжностьПоВизитке,
	|	КонтактныеЛицаПартнеров.РолиКонтактногоЛица.(
	|		РольКонтактногоЛица,
	|		НомерСтроки
	|	),
	|	КонтактныеЛицаПартнеров.КонтактнаяИнформация.(
	|		Вид,
	|		Представление
	|	),
	|	КонтактныеЛицаПартнеров.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер
	|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|	И (КонтактныеЛицаПартнеров.ДатаПрекращенияСвязи = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ КонтактныеЛицаПартнеров.ДатаПрекращенияСвязи > &ТекущаяДата)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОКонтрагентах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Контрагенты) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("Контрагенты",НомерПоследнегоПакета + 3);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 3;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформацияКонтрагента.Ссылка КАК Объект,
	|	КонтактнаяИнформацияКонтрагента.Вид КАК Вид,
	|	МАКСИМУМ(КонтактнаяИнформацияКонтрагента.ДействуетС) КАК ДействуетС
	|ПОМЕСТИТЬ СрезКонтактнойИнформацииКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформацияКонтрагента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО КонтактнаяИнформацияКонтрагента.Ссылка = Контрагенты.Ссылка
	|ГДЕ
	|	КонтактнаяИнформацияКонтрагента.ДействуетС <= &ТекущаяДата
	|	И Контрагенты.Партнер В
	|			(ВЫБРАТЬ
	|				ИерархияПартнеров.Родитель
	|			ИЗ
	|				РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|			ГДЕ
	|				ИерархияПартнеров.Партнер = &Партнер)
	|	И НЕ Контрагенты.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтактнаяИнформацияКонтрагента.Вид,
	|	КонтактнаяИнформацияКонтрагента.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Представление КАК Представление,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КонтактнаяИнформацияКонтрагенты
	|ИЗ
	|	СрезКонтактнойИнформацииКонтрагенты КАК СрезКонтактнойИнформации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтактнаяИнформация
	|		ПО СрезКонтактнойИнформации.Вид = КонтактнаяИнформация.Вид
	|			И СрезКонтактнойИнформации.ДействуетС = КонтактнаяИнформация.ДействуетС
	|			И СрезКонтактнойИнформации.Объект = КонтактнаяИнформация.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ЮрФизЛицо КАК ВидКонтрагента,
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	КонтактнаяИнформацияКонтрагенты.Вид КАК Вид,
	|	КонтактнаяИнформацияКонтрагенты.Представление КАК Представление
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ КонтактнаяИнформацияКонтрагенты КАК КонтактнаяИнформацияКонтрагенты
	|		ПО Контрагенты.Ссылка = КонтактнаяИнформацияКонтрагенты.Ссылка
	|ГДЕ
	|	Контрагенты.Партнер В
	|			(ВЫБРАТЬ
	|				ИерархияПартнеров.Родитель
	|			ИЗ
	|				РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|			ГДЕ
	|				ИерархияПартнеров.Партнер = &Партнер)
	|	И НЕ Контрагенты.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	
КонецФункции

Функция ТекстЗапросаОТекущихСделкахСКлиентом(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СделкиСКлиентами) Или
		(НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами"))Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ТекущиеСделки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СделкиСКлиентами.Наименование              КАК Наименование,
	|	СделкиСКлиентами.Ответственный             КАК Менеджер,
	|	СделкиСКлиентами.ПотенциальнаяСуммаПродажи КАК ПотенциальнаяСуммаПродажи,
	|	СтатистикаСделокСКлиентами.ЭтапПроцесса    КАК ТекущийЭтап,
	|	СделкиСКлиентами.Ссылка                    КАК Ссылка,
	|	Константы.ВалютаУправленческогоУчета       КАК Валюта
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСделокСКлиентами КАК СтатистикаСделокСКлиентами
	|		ПО (СтатистикаСделокСКлиентами.Сделка = СделкиСКлиентами.Ссылка),
	|	Константы КАК Константы
	|ГДЕ
	|	СделкиСКлиентами.Партнер = &Партнер
	|	И (НЕ СделкиСКлиентами.ПометкаУдаления)
	|	И СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)
	|	И ЕСТЬNULL(СтатистикаСделокСКлиентами.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|ИТОГИ
	|	СУММА(ПотенциальнаяСуммаПродажи),
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	МАКСИМУМ(Валюта)
	|ПО
	|	СделкиСКлиентами.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции 

Функция ТекстЗапросаОНеотработанныхАктахПриемки(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если (НЕ ПравоДоступа("Чтение",Метаданные.Документы.АктОРасхожденияхПослеОтгрузки))
		Или (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьАктыРасхожденийПослеОтгрузки")) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("АктыОРасхожденияхПослеОтгрузки",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;

	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АктОРасхожденияхПослеОтгрузки.Валюта КАК Валюта,
	|	АктОРасхожденияхПослеОтгрузки.Номер КАК Номер,
	|	АктОРасхожденияхПослеОтгрузки.Дата КАК Дата,
	|	АктОРасхожденияхПослеОтгрузки.Ссылка КАК Ссылка,
	|	АктОРасхожденияхПослеОтгрузки.Статус КАК Статус,
	|	АктОРасхожденияхПослеОтгрузки.Менеджер КАК Ответственный,
	|	СУММА(ВЫБОР
	|			КОГДА АктОРасхожденияхПослеОтгрузкиТовары.СуммаПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Сумма > 0
	|				ТОГДА АктОРасхожденияхПослеОтгрузкиТовары.СуммаПоДокументу - АктОРасхожденияхПослеОтгрузкиТовары.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Недостачи,
	|	СУММА(ВЫБОР
	|			КОГДА АктОРасхожденияхПослеОтгрузкиТовары.Сумма - АктОРасхожденияхПослеОтгрузкиТовары.СуммаПоДокументу > 0
	|				ТОГДА АктОРасхожденияхПослеОтгрузкиТовары.Сумма - АктОРасхожденияхПослеОтгрузкиТовары.СуммаПоДокументу
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Излишки
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеОтгрузки КАК АктОРасхожденияхПослеОтгрузки
	|		ПО АктОРасхожденияхПослеОтгрузкиТовары.Ссылка = АктОРасхожденияхПослеОтгрузки.Ссылка
	|			И (АктОРасхожденияхПослеОтгрузки.Партнер = &Партнер)
	|			И (АктОРасхожденияхПослеОтгрузки.Проведен)
	|			И (АктОРасхожденияхПослеОтгрузки.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыАктаОРасхождениях.Отработано))
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеОтгрузки.Валюта,
	|	АктОРасхожденияхПослеОтгрузки.Статус,
	|	АктОРасхожденияхПослеОтгрузки.Номер,
	|	АктОРасхожденияхПослеОтгрузки.Менеджер,
	|	АктОРасхожденияхПослеОтгрузки.Дата,
	|	АктОРасхожденияхПослеОтгрузки.Ссылка
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	СУММА(Недостачи),
	|	СУММА(Излишки)
	|ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаНезавершенныеПретензии(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если (НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Претензии))
		Или (НЕ ПолучитьФункциональнуюОпцию("ФиксироватьПретензии")) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("НезавершенныеПретензии",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПретензииКлиентов.Ссылка КАК Ссылка,
	|	ПретензииКлиентов.Наименование,
	|	ПретензииКлиентов.ДатаРегистрации КАК ДатаРегистрации,
	|	ПретензииКлиентов.Ответственный,
	|	ПретензииКлиентов.Статус,
	|	ПретензииКлиентов.ПричинаВозникновения
	|ИЗ
	|	Справочник.Претензии КАК ПретензииКлиентов
	|ГДЕ
	|	(ПретензииКлиентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПретензийКлиентов.Зарегистрирована)
	|	ИЛИ ПретензииКлиентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПретензийКлиентов.Обрабатывается))
	|
	|	И (НЕ ПретензииКлиентов.ПометкаУдаления)
	|	И ПретензииКлиентов.Партнер = &Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРегистрации
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОбороты(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если (НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж)) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("Обороты",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот КАК СуммаВыручкиОборот,
	|	ГОД(ВыручкаИСебестоимостьПродажОбороты.Период) КАК Период,
	|	Константы.ВалютаУправленческогоУчета КАК Валюта
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(
	|			,
	|			,
	|			Год,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					АналитикаУчетаПоПартнерам.КлючАналитики
	|				ИЗ
	|					РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|				ГДЕ
	|					АналитикаУчетаПоПартнерам.Партнер = &Партнер)) КАК ВыручкаИСебестоимостьПродажОбороты,
	|	Константы КАК Константы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ
	|	СУММА(СуммаВыручкиОборот)
	|ПО
	|	ВалютаУправленческогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОСделкахСУчастиемПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СделкиСКлиентами)
		Или (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСделкиСКлиентами")) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("УчастиеВСделках",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 2;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Сделка) КАК КоличествоСделок,
	|	СУММА(ВложенныйЗапрос.ПотенциальнаяСуммаПродажи) КАК ПотенциальнаяСуммаПродажи,
	|	Константы.ВалютаУправленческогоУчета КАК Валюта
	|ИЗ
	|	(ВЫБРАТЬ
	|		СделкиСКлиентами.Ссылка КАК Сделка,
	|		СделкиСКлиентами.ПотенциальнаяСуммаПродажи КАК ПотенциальнаяСуммаПродажи
	|	ИЗ
	|		Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|			ПО СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка
	|	ГДЕ
	|		СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)
	|		И СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = &Партнер
	|		И (НЕ СделкиСКлиентами.ПометкаУдаления)
	|		И СделкиСКлиентами.Партнер <> &Партнер
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СделкиСКлиентами.Ссылка,
	|		СделкиСКлиентами.ПотенциальнаяСуммаПродажи) КАК ВложенныйЗапрос,
	|	Константы КАК Константы
	|
	|СГРУППИРОВАТЬ ПО
	|	Константы.ВалютаУправленческогоУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СделкиСКлиентами.Ссылка КАК Сделка,
	|	СделкиСКлиентами.ПотенциальнаяСуммаПродажи КАК ПотенциальнаяСуммаПродажи,
	|	СделкиСКлиентамиПартнерыИКонтактныеЛица.РольПартнера,
	|	СделкиСКлиентамиПартнерыИКонтактныеЛица.КонтактноеЛицо,
	|	СделкиСКлиентамиПартнерыИКонтактныеЛица.РольКонтактногоЛица,
	|	СделкиСКлиентами.Наименование,
	|	СтатистикаСделокСКлиентами.ЭтапПроцесса КАК ТекущийЭтап
	|ИЗ
	|	Справочник.СделкиСКлиентами.ПартнерыИКонтактныеЛица КАК СделкиСКлиентамиПартнерыИКонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|		ПО СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка = СделкиСКлиентами.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСделокСКлиентами КАК СтатистикаСделокСКлиентами
	|		ПО (СтатистикаСделокСКлиентами.Сделка = СделкиСКлиентамиПартнерыИКонтактныеЛица.Ссылка),
	|	Константы КАК Константы
	|ГДЕ
	|	СделкиСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСделок.ВРаботе)
	|	И СделкиСКлиентамиПартнерыИКонтактныеЛица.Партнер = &Партнер
	|	И (НЕ СделкиСКлиентами.ПометкаУдаления)
	|	И СделкиСКлиентами.Партнер <> &Партнер
	|	И ЕСТЬNULL(СтатистикаСделокСКлиентами.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|ИТОГИ
	|	МАКСИМУМ(ПотенциальнаяСуммаПродажи)
	|ПО
	|	Сделка,
	|	ТекущийЭтап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОУчастиеПартнераВПрочихПроектах(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.МаркетинговыеМероприятия) 
		И НЕ ПравоДоступа("Чтение",Метаданные.Справочники.Проекты) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ПрочиеПроекты",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 2;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Вид,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МаркетинговыеМероприятия.Ссылка КАК Ссылка,
	|		&СтрокаМаркетинговоеМероприятие КАК Вид
	|	ИЗ
	|		Справочник.МаркетинговыеМероприятия.ПартнерыИКонтактныеЛица КАК МаркетинговыеМероприятияПартнерыИКонтактныеЛица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|			ПО МаркетинговыеМероприятияПартнерыИКонтактныеЛица.Ссылка = МаркетинговыеМероприятия.Ссылка
	|	ГДЕ
	|		(НЕ МаркетинговыеМероприятия.ПометкаУдаления)
	|		И МаркетинговыеМероприятия.ПартнерыИКонтактныеЛица.Партнер = &Партнер
	|		И (НЕ МаркетинговыеМероприятия.Завершено)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Проекты.Ссылка,
	|		&СтрокаПроект
	|	ИЗ
	|		Справочник.Проекты.ПартнерыИКонтактныеЛица КАК ПроектыПартнерыИКонтактныеЛица
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|			ПО ПроектыПартнерыИКонтактныеЛица.Ссылка = Проекты.Ссылка
	|	ГДЕ
	|		(НЕ Проекты.ПометкаУдаления)
	|		И (НЕ Проекты.Завершен)
	|		И Проекты.ПартнерыИКонтактныеЛица.Партнер = &Партнер) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаркетинговыеМероприятия.Ссылка КАК Ссылка,
	|	МаркетинговыеМероприятия.Наименование,
	|	МаркетинговыеМероприятияПартнерыИКонтактныеЛица.РольПартнера,
	|	МаркетинговыеМероприятияПартнерыИКонтактныеЛица.КонтактноеЛицо,
	|	&СтрокаМаркетинговоеМероприятие КАК Вид,
	|	"""" КАК РольКонтактногоЛица,
	|	МаркетинговыеМероприятия.Ответственный
	|ИЗ
	|	Справочник.МаркетинговыеМероприятия.ПартнерыИКонтактныеЛица КАК МаркетинговыеМероприятияПартнерыИКонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.МаркетинговыеМероприятия КАК МаркетинговыеМероприятия
	|		ПО МаркетинговыеМероприятияПартнерыИКонтактныеЛица.Ссылка = МаркетинговыеМероприятия.Ссылка
	|ГДЕ
	|	(НЕ МаркетинговыеМероприятия.ПометкаУдаления)
	|	И (НЕ МаркетинговыеМероприятия.Завершено)
	|	И МаркетинговыеМероприятияПартнерыИКонтактныеЛица.Партнер = &Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проекты.Ссылка,
	|	Проекты.Наименование,
	|	ПроектыПартнерыИКонтактныеЛица.РольПартнера,
	|	ПроектыПартнерыИКонтактныеЛица.КонтактноеЛицо,
	|	&СтрокаПроект,
	|	"""",
	|	Проекты.Ответственный
	|ИЗ
	|	Справочник.Проекты.ПартнерыИКонтактныеЛица КАК ПроектыПартнерыИКонтактныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|		ПО ПроектыПартнерыИКонтактныеЛица.Ссылка = Проекты.Ссылка
	|ГДЕ
	|	(НЕ Проекты.ПометкаУдаления)
	|	И (НЕ Проекты.Завершен)
	|	И Проекты.ПартнерыИКонтактныеЛица.Партнер = &Партнер
	|ИТОГИ ПО
	|	Вид,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОЗаказахПоставщику(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗаказПоставщику)
		Или НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам") Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ЗаказыПоставщику",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаказПоставщику.Ссылка КАК Ссылка,
	|	ДокументЗаказПоставщику.Номер КАК Номер,
	|	ДокументЗаказПоставщику.Дата КАК Дата,
	|	ДокументЗаказПоставщику.Валюта КАК Валюта,
	|	ДокументЗаказПоставщику.Менеджер КАК Ответственный,
	|	ДокументЗаказПоставщику.СуммаДокумента КАК СуммаДокумента,
	|	СостоянияЗаказовПоставщикам.Состояние КАК Состояние,
	|	ВЫБОР КОГДА СостоянияЗаказовПоставщикам.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|			И &ТекущаяДата > СостоянияЗаказовПоставщикам.ДатаСобытия 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ДокументЗаказПоставщику
	|		ПО (СостоянияЗаказовПоставщикам.Заказ = ДокументЗаказПоставщику.Ссылка)
	|ГДЕ
	|	ДокументЗаказПоставщику.Партнер = &Партнер
	|	И СостоянияЗаказовПоставщикам.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт) 
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	СУММА(СуммаДокумента)
	|ПО
	|	ОБЩИЕ,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

КонецФункции

Функция ТекстЗапросаОЗаказахПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗаказКлиента)
		Или НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов") Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("Заказы",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаказКлиента.Ссылка КАК Ссылка,
	|	ДокументЗаказКлиента.Номер КАК Номер,
	|	ДокументЗаказКлиента.Дата КАК Дата,
	|	ДокументЗаказКлиента.Валюта КАК Валюта,
	|	ДокументЗаказКлиента.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЗаказКлиента.Статус КАК Статус,
	|	ДокументЗаказКлиента.Менеджер КАК Ответственный,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
	|	ВЫБОР КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|			И &ТекущаяДата > СостоянияЗаказовКлиентов.ДатаСобытия 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаказКлиента.Ссылка)
	|ГДЕ
	|	ДокументЗаказКлиента.Партнер = &Партнер
	|	И СостоянияЗаказовКлиентов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовКлиентов.Закрыт)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	СУММА(СуммаДокумента)
	|ПО
	|	ОБЩИЕ,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОЗаявкахНаВозвратПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
		Или НЕ ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов") Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ЗаявкиНаВозврат",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументЗаявка.Ссылка КАК Ссылка,
	|	ДокументЗаявка.Номер КАК Номер,
	|	ДокументЗаявка.Дата КАК Дата,
	|	ДокументЗаявка.Валюта КАК Валюта,
	|	ДокументЗаявка.СуммаДокумента КАК СуммаДокумента,
	|	ДокументЗаявка.Статус КАК Статус,
	|	ДокументЗаявка.Менеджер КАК Ответственный,
	|	СостоянияЗаказовКлиентов.Состояние КАК Состояние,
	|	ВЫБОР КОГДА СостоянияЗаказовКлиентов.ДатаСобытия <> ДАТАВРЕМЯ(1, 1, 1)
	|			И &ТекущаяДата > СостоянияЗаказовКлиентов.ДатаСобытия 
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Просрочен
	|ИЗ
	|	РегистрСведений.СостоянияЗаказовКлиентов КАК СостоянияЗаказовКлиентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДокументЗаявка
	|		ПО (СостоянияЗаказовКлиентов.Заказ = ДокументЗаявка.Ссылка)
	|ГДЕ
	|	ДокументЗаявка.Партнер = &Партнер
	|	И СостоянияЗаказовКлиентов.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЗаявокНаВозвратТоваровОтКлиентов.Выполнена)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка),
	|	СУММА(СуммаДокумента)
	|ПО
	|	ОБЩИЕ,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОВзаиморасчетахСКлиентом(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоДокументам)
		ИЛИ НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ВзаиморасчетыСКлиентом",НомерПоследнегоПакета + 6);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 6;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики
	|ПОМЕСТИТЬ ОтборАналитикиПартнеров
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(Задания.Месяц, ДЕНЬ, -1)) КАК АктуальныйПериод,
	|	ИСТИНА КАК РасчетыНеактуальны
	|ПОМЕСТИТЬ Границы
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|ГДЕ
	|	Задания.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				ОтборАналитикиПартнеров.КлючАналитики
	|			ИЗ
	|				ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)
	|	И Задания.Месяц < &ТекущаяДата
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	Задания.АналитикаУчетаПоПартнерам
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам,
	|	РасчетыСКлиентами.ЗаказКлиента,
	|	РасчетыСКлиентами.Валюта,
	|	РасчетыСКлиентами.РасчетныйДокумент,
	|	Остатки.ДатаПлатежа,
	|	-(РасчетыСКлиентами.КВозвратуОстаток + РасчетыСКлиентами.ПредоплатаОстаток) КАК НашДолг,
	|	РасчетыСКлиентами.ДолгОстаток КАК ДолгКлиента,
	|	АналитикаУчета.Партнер,
	|	АналитикаУчета.Организация,
	|	АналитикаУчета.Контрагент
	|ПОМЕСТИТЬ ТаблицаЗадолженностей
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоДокументам.Остатки(
	|			&ТекущаяДата,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборАналитикиПартнеров.КлючАналитики
	|				ИЗ
	|					ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)) КАК РасчетыСКлиентами
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики}
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковКлиентов КАК Остатки
	|	ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
	|		И РасчетыСКлиентами.ЗаказКлиента = Остатки.ЗаказКлиента
	|		И РасчетыСКлиентами.Валюта = Остатки.Валюта
	|		И РасчетыСКлиентами.РасчетныйДокумент = Остатки.РасчетныйДокумент
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ЗаказКлиента,
	|	РасчетыПоСрокам.Валюта                                         КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлатежа,
	|	РасчетыПоСрокам.ПредоплатаОстаток                              КАК НашДолг,
	|	РасчетыПоСрокам.ДолгОстаток                                    КАК ДолгКлиента,
	|	АналитикаУчета.Партнер                                         КАК Партнер,
	|	АналитикаУчета.Организация                                     КАК Организация,
	|	АналитикаУчета.Контрагент                                      КАК Контрагент
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентамиПоСрокам.Остатки(
	|			&ТекущаяДата,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборАналитикиПартнеров.КлючАналитики
	|				ИЗ
	|					ОтборАналитикиПартнеров КАК ОтборАналитикиПартнеров)) КАК РасчетыПоСрокам
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики}
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадолженностей.ДатаПлатежа КАК ДатаНачала,
	|	ГрафикиРаботы.Дата КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ИЛИ ГрафикиРаботы.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочийДень
	|ПОМЕСТИТЬ Графики
	|ИЗ
	|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
	|		ПО (ГрафикиРаботы.ПроизводственныйКалендарь = &Календарь)
	|ГДЕ
	|	ГрафикиРаботы.Дата МЕЖДУ ТаблицаЗадолженностей.ДатаПлатежа И &ТекущаяДата
	|	И ТаблицаЗадолженностей.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
	|ПОМЕСТИТЬ РазностиДат
	|ИЗ
	|	Графики КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Графики КАК Графики
	|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
	|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
	|ГДЕ
	|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если Не ЗначениеЗаполнено(ВариантКлассификацииЗадолженности) Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаЗадолженностей.ЗаказКлиента,
		|	ТаблицаЗадолженностей.Валюта КАК Валюта,
		|	ЕСТЬNULL(Границы.АктуальныйПериод, НЕОПРЕДЕЛЕНО) КАК ДатаАктуальностиРасчетов,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.РасчетныйДокумент
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.ДатаПлатежа
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаПлатежа,
		|	ТаблицаЗадолженностей.НашДолг КАК НашДолг,
		|	ТаблицаЗадолженностей.ДолгКлиента КАК ДолгКлиента,
		|	ВЫБОР
		|		КОГДА НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ВЫБОР
		|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ = 0
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаЗадолженностей.ДолгКлиента
		|	КОНЕЦ КАК ДолгКлиентаПросрочено,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|						ТОГДА ВЫБОР
		|								КОГДА РазностиДат.КоличествоДней > 0
		|									ТОГДА РазностиДат.КоличествоДней
		|								ИНАЧЕ &НеПросрочено
		|							КОНЕЦ
		|					ИНАЧЕ ВЫБОР
		|							КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|								ТОГДА &НеПросрочено
		|							ИНАЧЕ ВЫБОР
		|									КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|										ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|									ИНАЧЕ &НеПросрочено
		|								КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		ИНАЧЕ &РасчетыНеАктуальны
		|	КОНЕЦ КАК НаименованиеИнтервала
		|ИЗ
		|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Границы КАК Границы
		|		ПО ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
		|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлатежа)
		|ИТОГИ
		|	СУММА(НашДолг),
		|	СУММА(ДолгКлиента),
		|	СУММА(ДолгКлиентаПросрочено)
		|ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		

	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ 
		|	ТаблицаЗадолженностей.ЗаказКлиента,
		|	ТаблицаЗадолженностей.Валюта КАК Валюта,
		|	ЕСТЬNULL(Границы.АктуальныйПериод, НЕОПРЕДЕЛЕНО) КАК ДатаАктуальностиРасчетов,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.РасчетныйДокумент
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.ДатаПлатежа
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаПлатежа,
		|	ТаблицаЗадолженностей.НашДолг КАК НашДолг,
		|	ТаблицаЗадолженностей.ДолгКлиента КАК ДолгКлиента,
		|	ВЫБОР
		|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
		|			ТОГДА 0
		|		КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|			ТОГДА ВЫБОР
		|					КОГДА РазностиДат.КоличествоДней > 0
		|						ТОГДА РазностиДат.КоличествоДней
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА 0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоДней,
		|	ВЫБОР
		|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
		|			ТОГДА 0
		|		КОГДА ВЫБОР
		|				КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ = 0
		|			ТОГДА 0
		|		ИНАЧЕ ТаблицаЗадолженностей.ДолгКлиента
		|	КОНЕЦ КАК ДолгКлиентаПросрочено,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(Интервалы.НаименованиеИнтервала, &НеПросрочено)
		|		ИНАЧЕ &РасчетыНеАктуальны
		|	КОНЕЦ КАК НаименованиеИнтервала
		|ИЗ
		|	ТаблицаЗадолженностей КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Границы КАК Границы
		|		ПО ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РазностиДат КАК РазностиДат
		|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлатежа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКлассификацииЗадолженности.Интервалы КАК Интервалы
		|		ПО (Интервалы.Ссылка = &ВариантКлассификацииЗадолженности)
		|			И (ВЫБОР
		|				КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ МЕЖДУ Интервалы.НижняяГраницаИнтервала И Интервалы.ВерхняяГраницаИнтервала)
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа ВОЗР
		|ИТОГИ
		|	СУММА(НашДолг),
		|	СУММА(ДолгКлиента),
		|	СУММА(ДолгКлиентаПросрочено)
		|ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОВзаиморасчетахСПоставщиком(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоДокументам) 
		ИЛИ НЕ ПравоДоступа("Чтение",Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ВзаиморасчетыСПоставщиком",НомерПоследнегоПакета + 6);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 6;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаУчетаПоПартнерам.КлючАналитики
	|ПОМЕСТИТЬ ОтборАналитикиПартнеровПоставщики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Задания.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	МИНИМУМ(ДОБАВИТЬКДАТЕ(Задания.Месяц, ДЕНЬ, -1)) КАК АктуальныйПериод,
	|	ИСТИНА КАК РасчетыНеактуальны
	|ПОМЕСТИТЬ ГраницыПоставщики
	|ИЗ
	|	РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|ГДЕ
	|	Задания.АналитикаУчетаПоПартнерам В
	|			(ВЫБРАТЬ
	|				ОтборАналитикиПартнеров.КлючАналитики
	|			ИЗ
	|				ОтборАналитикиПартнеровПоставщики КАК ОтборАналитикиПартнеров)
	|	И Задания.Месяц <= &ТекущаяДата
	|	И НЕ &НоваяАрхитектураВзаиморасчетов
	|СГРУППИРОВАТЬ ПО
	|	Задания.АналитикаУчетаПоПартнерам
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам,
	|	РасчетыСПоставщиками.ЗаказПоставщику,
	|	РасчетыСПоставщиками.Валюта,
	|	РасчетыСПоставщиками.РасчетныйДокумент,
	|	Остатки.ДатаПлатежа,
	|	-(РасчетыСПоставщиками.КВозвратуОстаток + РасчетыСПоставщиками.ПредоплатаОстаток) КАК ДолгПоставщика,
	|	РасчетыСПоставщиками.ДолгОстаток КАК НашДолг,
	|	АналитикаУчета.Партнер,
	|	АналитикаУчета.Организация,
	|	АналитикаУчета.Контрагент
	|ПОМЕСТИТЬ ТаблицаЗадолженностейПоставщики
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоДокументам.Остатки(
	|			&ТекущаяДата,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборАналитикиПартнеров.КлючАналитики
	|				ИЗ
	|					ОтборАналитикиПартнеровПоставщики КАК ОтборАналитикиПартнеров)) КАК РасчетыСПоставщиками
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики}
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОстатковПоставщиков КАК Остатки
	|	ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Остатки.АналитикаУчетаПоПартнерам
	|		И РасчетыСПоставщиками.ЗаказПоставщику = Остатки.ЗаказПоставщику
	|		И РасчетыСПоставщиками.Валюта = Остатки.Валюта
	|		И РасчетыСПоставщиками.РасчетныйДокумент = Остатки.РасчетныйДокумент
	|ГДЕ
	|	АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыПоСрокам.АналитикаУчетаПоПартнерам                      КАК АналитикаУчетаПоПартнерам,
	|	РасчетыПоСрокам.ОбъектРасчетов                                 КАК ЗаказПоставщику,
	|	РасчетыПоСрокам.Валюта                                         КАК Валюта,
	|	РасчетыПоСрокам.РасчетныйДокумент                              КАК РасчетныйДокумент,
	|	РасчетыПоСрокам.ДатаПлановогоПогашения                         КАК ДатаПлатежа,
	|	РасчетыПоСрокам.ДолгОстаток                                    КАК ДолгПоставщика,
	|	РасчетыПоСрокам.ПредоплатаОстаток                              КАК НашДолг,
	|	АналитикаУчета.Партнер                                         КАК Партнер,
	|	АналитикаУчета.Организация                                     КАК Организация,
	|	АналитикаУчета.Контрагент                                      КАК Контрагент
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(
	|			&ТекущаяДата,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборАналитикиПартнеров.КлючАналитики
	|				ИЗ
	|					ОтборАналитикиПартнеровПоставщики КАК ОтборАналитикиПартнеров)) КАК РасчетыПоСрокам
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчета
	|		ПО РасчетыПоСрокам.АналитикаУчетаПоПартнерам = АналитикаУчета.КлючАналитики}
	|ГДЕ
	|	&НоваяАрхитектураВзаиморасчетов
	|	И АналитикаУчета.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаЗадолженностей.ДатаПлатежа КАК ДатаНачала,
	|	ГрафикиРаботы.Дата КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий) ИЛИ ГрафикиРаботы.ВидДня = Значение(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочийДень
	|ПОМЕСТИТЬ ГрафикиПоставщики
	|ИЗ
	|	ТаблицаЗадолженностейПоставщики КАК ТаблицаЗадолженностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
	|		ПО (ГрафикиРаботы.ПроизводственныйКалендарь = &Календарь)
	|ГДЕ
	|	ГрафикиРаботы.Дата МЕЖДУ ТаблицаЗадолженностей.ДатаПлатежа И &ТекущаяДата
	|	И ТаблицаЗадолженностей.ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
	|ПОМЕСТИТЬ РазностиДатПоставщики
	|ИЗ
	|	ГрафикиПоставщики КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиПоставщики КАК Графики
	|		ПО ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
	|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
	|ГДЕ
	|	ВложенныйЗапрос.ДатаОкончания = НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

	Если Не ЗначениеЗаполнено(ВариантКлассификацииЗадолженности) Тогда 
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаЗадолженностей.ЗаказПоставщику,
		|	ТаблицаЗадолженностей.Валюта КАК Валюта,
		|	ЕСТЬNULL(Границы.АктуальныйПериод, НЕОПРЕДЕЛЕНО) КАК ДатаАктуальностиРасчетов,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.РасчетныйДокумент
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.ДатаПлатежа
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаПлатежа,
		|	-ТаблицаЗадолженностей.НашДолг КАК НашДолг,
		|	ТаблицаЗадолженностей.ДолгПоставщика КАК ДолгПоставщика,
		|	ВЫБОР
		|		КОГДА НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА &РасчетыНеАктуальны
		|		КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА РазностиДат.КоличествоДней > 0
		|						ТОГДА РазностиДат.КоличествоДней
		|					ИНАЧЕ &НеПросрочено
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА &НеПросрочено
		|				ИНАЧЕ ВЫБОР
		|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|						ИНАЧЕ &НеПросрочено
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК НаименованиеИнтервала,
		|	ВЫБОР
		|		КОГДА НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА 0
		|		КОГДА ВЫБОР
		|				КОГДА НЕ РазностиДат.КоличествоДней ЕСТЬ NULL 
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ = 0
		|			ТОГДА 0
		|		ИНАЧЕ -ТаблицаЗадолженностей.НашДолг
		|	КОНЕЦ КАК НашДолгПросрочено
		|ИЗ
		|	ТаблицаЗадолженностейПоставщики КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГраницыПоставщики КАК Границы
		|		ПО ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РазностиДатПоставщики КАК РазностиДат
		|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлатежа)
		|ИТОГИ
		|	СУММА(НашДолг),
		|	СУММА(ДолгПоставщика),
		|	СУММА(НашДолгПросрочено)
		|ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
	
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаЗадолженностей.ЗаказПоставщику,
		|	ТаблицаЗадолженностей.Валюта КАК Валюта,
		|	ЕСТЬNULL(Границы.АктуальныйПериод, НЕОПРЕДЕЛЕНО) КАК ДатаАктуальностиРасчетов,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.РасчетныйДокумент
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК РасчетныйДокумент,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ТаблицаЗадолженностей.ДатаПлатежа
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ДатаПлатежа,
		|	-ТаблицаЗадолженностей.НашДолг КАК НашДолг,
		|	ТаблицаЗадолженностей.ДолгПоставщика КАК ДолгПоставщика,
		|	ВЫБОР
		|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
		|			ТОГДА 0
		|		КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|			ТОГДА ВЫБОР
		|					КОГДА РазностиДат.КоличествоДней > 0
		|						ТОГДА РазностиДат.КоличествоДней
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|					ТОГДА 0
		|				ИНАЧЕ ВЫБОР
		|						КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|							ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоДней,
		|	ВЫБОР
		|		КОГДА (НЕ Границы.РасчетыНеактуальны ЕСТЬ NULL )
		|			ТОГДА 0
		|		КОГДА ВЫБОР
		|				КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ = 0
		|			ТОГДА 0
		|		ИНАЧЕ -ТаблицаЗадолженностей.НашДолг
		|	КОНЕЦ КАК НашДолгПросрочено,
		|	ВЫБОР
		|		КОГДА Границы.РасчетыНеактуальны ЕСТЬ NULL 
		|			ТОГДА ЕСТЬNULL(Интервалы.НаименованиеИнтервала, &НеПросрочено)
		|		ИНАЧЕ &РасчетыНеАктуальны
		|	КОНЕЦ КАК НаименованиеИнтервала
		|ИЗ
		|	ТаблицаЗадолженностейПоставщики КАК ТаблицаЗадолженностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГраницыПоставщики КАК Границы
		|		ПО ТаблицаЗадолженностей.АналитикаУчетаПоПартнерам = Границы.АналитикаУчетаПоПартнерам
		|		ЛЕВОЕ СОЕДИНЕНИЕ РазностиДатПоставщики КАК РазностиДат
		|		ПО (РазностиДат.ДатаНачала = ТаблицаЗадолженностей.ДатаПлатежа)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКлассификацииЗадолженности.Интервалы КАК Интервалы
		|		ПО (Интервалы.Ссылка = &ВариантКлассификацииЗадолженности)
		|			И (ВЫБОР
		|				КОГДА (НЕ РазностиДат.КоличествоДней ЕСТЬ NULL )
		|					ТОГДА ВЫБОР
		|							КОГДА РазностиДат.КоличествоДней > 0
		|								ТОГДА РазностиДат.КоличествоДней
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ТаблицаЗадолженностей.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
		|							ТОГДА 0
		|						ИНАЧЕ ВЫБОР
		|								КОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ) > 0
		|									ТОГДА РАЗНОСТЬДАТ(ТаблицаЗадолженностей.ДатаПлатежа, &ТекущаяДата, ДЕНЬ)
		|								ИНАЧЕ 0
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОНЕЦ МЕЖДУ Интервалы.НижняяГраницаИнтервала И Интервалы.ВерхняяГраницаИнтервала)
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПлатежа ВОЗР
		|ИТОГИ
		|	СУММА(НашДолг),
		|	СУММА(ДолгПоставщика),
		|	СУММА(НашДолгПросрочено)
		|ПО
		|	Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции 

Функция ТекстЗапросаОДоступныхСоглашениях(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами")
		Или НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СоглашенияСКлиентами) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ДоступныеСоглашения",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	СправочникСоглашенияСКлиентами.Ссылка КАК Ссылка,
	        |	СправочникСоглашенияСКлиентами.Наименование,
	        |	СправочникСоглашенияСКлиентами.Валюта,
	        |	ВЫБОР
	        |		КОГДА СправочникСоглашенияСКлиентами.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	        |			ТОГДА &СтрокаБезОграничения
	        |		ИНАЧЕ СправочникСоглашенияСКлиентами.ДатаОкончанияДействия
	        |	КОНЕЦ КАК СрокДействия,
	        |	ВЫБОР
	        |		КОГДА СправочникСоглашенияСКлиентами.Типовое
	        |			ТОГДА &СтрокаТиповое
	        |		ИНАЧЕ &СтрокаИндивидуальное
	        |	КОНЕЦ КАК Типовое
	        |ИЗ
	        |	Справочник.СоглашенияСКлиентами КАК СправочникСоглашенияСКлиентами
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК ГрафикиОплаты
	        |		ПО СправочникСоглашенияСКлиентами.ГрафикОплаты = ГрафикиОплаты.Ссылка
	        |ГДЕ
	        |	СправочникСоглашенияСКлиентами.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	        |	И (СправочникСоглашенияСКлиентами.Партнер = &Партнер
	        |			ИЛИ СправочникСоглашенияСКлиентами.СегментПартнеров В
	        |				(ВЫБРАТЬ
	        |					ПартнерыСегмента.Сегмент
	        |				ИЗ
	        |					РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	        |				ГДЕ
	        |					ПартнерыСегмента.Партнер = &Партнер)
	        |			ИЛИ СправочникСоглашенияСКлиентами.Типовое
	        |				И СправочникСоглашенияСКлиентами.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка))
	        |	И НЕ СправочникСоглашенияСКлиентами.ПометкаУдаления
	        |	И &ИспользоватьСоглашенияСКлиентами = ИСТИНА
	        |	И ВЫБОР
	        |			КОГДА &ТолькоТиповые = ИСТИНА
	        |					И &ТолькоИндивидуальные = ЛОЖЬ
	        |					И СправочникСоглашенияСКлиентами.Типовое
	        |				ТОГДА ИСТИНА
	        |			КОГДА &ТолькоИндивидуальные = ИСТИНА
	        |					И НЕ &ТолькоТиповые = ИСТИНА
	        |					И НЕ СправочникСоглашенияСКлиентами.Типовое
	        |				ТОГДА ИСТИНА
	        |			КОГДА &ТолькоТиповые = ЛОЖЬ
	        |					И &ТолькоИндивидуальные = ЛОЖЬ
	        |				ТОГДА ИСТИНА
	        |			ИНАЧЕ ЛОЖЬ
	        |		КОНЕЦ
	        |ИТОГИ
	        |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	        |ПО
	        |	ОБЩИЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|";
	
КонецФункции 

Функция ТекстЗапросаОСоглашенияхСПоставщиком(СоответствиеЗапросыДанные,НомерПоследнегоПакета)

	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.СоглашенияСПоставщиками) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("СоглашенияСПоставщиком",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СоглашенияСПоставщиками.Ссылка КАК Ссылка,
	|	СоглашенияСПоставщиками.Валюта КАК Валюта,
	|	СоглашенияСПоставщиками.Менеджер КАК Ответственный,
	|	ВЫБОР
	|		КОГДА СоглашенияСПоставщиками.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &СтрокаБезОграничения
	|		ИНАЧЕ СоглашенияСПоставщиками.ДатаОкончанияДействия
	|	КОНЕЦ КАК СрокДействия,
	|	СоглашенияСПоставщиками.Наименование
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|ГДЕ
	|	СоглашенияСПоставщиками.Партнер = &Партнер
	|	И (НЕ СоглашенияСПоставщиками.ПометкаУдаления)
	|	И СоглашенияСПоставщиками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСПоставщиками.Действует)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

КонецФункции

Функция ТекстЗапросаОНеотработанныхВзаимодействиях(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент"))
	     Или (НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЗапланированноеВзаимодействие)
	     И НЕ ПравоДоступа("Чтение",Метаданные.Документы.Встреча)
	     И НЕ ПравоДоступа("Чтение",Метаданные.Документы.ТелефонныйЗвонок)
	     И НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЭлектронноеПисьмоВходящее)
	     И НЕ ПравоДоступа("Чтение",Метаданные.Документы.ЭлектронноеПисьмоИсходящее)) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("НеотработанныеВзаимодействия",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(Встреча.Описание КАК СТРОКА(1024)) КАК Описание,
	|	Встреча.Ссылка КАК Ссылка,
	|	Встреча.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДатаВремя(1,1,1)) КАК РассмотретьПосле,
	|	&СтрокаВстреча КАК Вид
	|ИЗ
	|	Документ.Встреча.Участники КАК ВстречаУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Встреча КАК Встреча
	|		ПО ВстречаУчастники.Ссылка = Встреча.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО Встреча.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	(ВстречаУчастники.Контакт = &Партнер
	|			ИЛИ ВстречаУчастники.Контакт.Владелец = &Партнер)
	|	И (НЕ Встреча.ПометкаУдаления)
	|	И (НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, Ложь))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ЗапланированноеВзаимодействие.Описание КАК СТРОКА(1024)),
	|	ЗапланированноеВзаимодействие.Ссылка,
	|	ЗапланированноеВзаимодействие.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДатаВремя(1,1,1)) КАК РассмотретьПосле,
	|	&СтрокаЗапланированноеВзаимодействие
	|ИЗ
	|	Документ.ЗапланированноеВзаимодействие.Участники КАК ЗапланированноеВзаимодействиеУчастники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
	|		ПО ЗапланированноеВзаимодействиеУчастники.Ссылка = ЗапланированноеВзаимодействие.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЗапланированноеВзаимодействиеУчастники.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	(ЗапланированноеВзаимодействиеУчастники.Контакт = &Партнер
	|			ИЛИ ЗапланированноеВзаимодействиеУчастники.Контакт.Владелец = &Партнер)
	|	И (НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, Ложь))
	|	И (НЕ ЗапланированноеВзаимодействие.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ТелефонныйЗвонок.Описание КАК СТРОКА(1024)),
	|	ТелефонныйЗвонок.Ссылка,
	|	ТелефонныйЗвонок.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДатаВремя(1,1,1)) КАК РассмотретьПосле,
	|	&СтрокаТелефонныйЗвонок
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ТелефонныйЗвонок.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	(НЕ ТелефонныйЗвонок.ПометкаУдаления)
	|	И (ТелефонныйЗвонок.АбонентКонтакт = &Партнер
	|			ИЛИ ТелефонныйЗвонок.АбонентКонтакт.Владелец = &Партнер)
	|	И (НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, Ложь))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ЭлектронноеПисьмоВходящее.Тема КАК СТРОКА(1024)),
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДатаВремя(1,1,1)) КАК РассмотретьПосле,
	|	&СтрокаПисьмоВходящее
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоВходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	(ЭлектронноеПисьмоВходящее.ОтправительКонтакт = &Партнер
	|			ИЛИ ЭлектронноеПисьмоВходящее.ОтправительКонтакт.Владелец = &Партнер)
	|	И (НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, Ложь))
	|	И (НЕ ЭлектронноеПисьмоВходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ЭлектронноеПисьмоИсходящее.Тема КАК СТРОКА(1024)),
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ПредметыПапкиВзаимодействий.РассмотретьПосле, ДатаВремя(1,1,1)) КАК РассмотретьПосле,
	|	&СтрокаПисьмоИсходящее
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка = ЭлектронноеПисьмоИсходящее.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	(НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|	И (НЕ ЕСТЬNULL(ПредметыПапкиВзаимодействий.Рассмотрено, Ложь))
	|	И (ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт = &Партнер
	|			ИЛИ ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт.Владелец = &Партнер)
	|	И ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";

КонецФункции

Функция ТекстЗапросаОКлассификацииКлиента(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ABCXYZКлассификацияКлиентов)
		Или (НЕ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВаловойПрибыли")
		 И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоВыручке")
		 И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюПартнеровПоКоличествуПродаж")) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("КлассификацияКлиента",НомерПоследнегоПакета + 4);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 5;
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ABCXYZКлассификацияКлиентов.Период КАК Период
	|ПОМЕСТИТЬ ПериодыКлассификации
	|ИЗ
	|	РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCXYZКлассификацияКлиентов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПериодыКлассификации.Период) КАК МаксимумПериод,
	|	МИНИМУМ(ПериодыКлассификации.Период) КАК МинимумПериод
	|ПОМЕСТИТЬ МинимумМаксимумПериод
	|ИЗ
	|	ПериодыКлассификации КАК ПериодыКлассификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МинимумМаксимумПериод.МаксимумПериод КАК ТекущийПериод,
	|	ВЫБОР
	|		КОГДА МинимумМаксимумПериод.МинимумПериод = МинимумМаксимумПериод.МаксимумПериод
	|			ТОГДА NULL
	|		ИНАЧЕ МинимумМаксимумПериод.МинимумПериод
	|	КОНЕЦ КАК ПредыдущийПериод
	|ПОМЕСТИТЬ ОпределенныеПериодыКлассификации
	|ИЗ
	|	МинимумМаксимумПериод КАК МинимумМаксимумПериод
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ABCXYZКлассификацияКлиентов.ТипПараметраКлассификации КАК ТипПараметраКлассификации,
	|	ВЫБОР
	|		КОГДА ABCXYZКлассификацияКлиентов.Период = ОпределенныеПериодыКлассификации.ТекущийПериод
	|			ТОГДА ""Текущий""
	|		ИНАЧЕ ""Предыдущий""
	|	КОНЕЦ КАК СтрокаПериод,
	|	ЕстьNull(ABCXYZКлассификацияКлиентов.ТипКлассификации, ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ПустаяСсылка)) КАК ТипКлассификации,
	|	ЕстьNull(ABCXYZКлассификацияКлиентов.Класс, НЕОПРЕДЕЛЕНО)                                                     КАК Класс,
	|	ЕстьNull(ABCXYZКлассификацияКлиентов.ЗначениеПараметраКлассификации, 0)                                       КАК ЗначениеПараметраКлассификации,
	|	ЕстьNull(ABCXYZКлассификацияКлиентов.Период, ДатаВремя(1, 1, 1))                                              КАК Период
	|ИЗ
	|	ОпределенныеПериодыКлассификации КАК ОпределенныеПериодыКлассификации,
	|	ПериодыКлассификации КАК ПериодыКлассификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ABCXYZКлассификацияКлиентов КАК ABCXYZКлассификацияКлиентов
	|		ПО ПериодыКлассификации.Период = ABCXYZКлассификацияКлиентов.Период
	|ГДЕ
	|	ABCXYZКлассификацияКлиентов.Партнер = &Партнер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипКлассификации УБЫВ
	|ИТОГИ ПО
	|	ТипПараметраКлассификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОпределенныеПериодыКлассификации.ТекущийПериод,
	|	ОпределенныеПериодыКлассификации.ПредыдущийПериод
	|ИЗ
	|	ОпределенныеПериодыКлассификации КАК ОпределенныеПериодыКлассификации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ТекстЗапросаОСегментахПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.РегистрыСведений.ПартнерыСегмента) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("СегментыПартнера",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	 Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	СегментыПартнеров.Наименование,
	 |	СегментыПартнеров.Ответственный,
	 |	СегментыПартнеров.Ссылка КАК Ссылка,
	 |	СегментыПартнеров.Описание
	 |ИЗ
	 |	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СегментыПартнеров КАК СегментыПартнеров
	 |		ПО ПартнерыСегмента.Сегмент = СегментыПартнеров.Ссылка
	 |ГДЕ
	 |	ПартнерыСегмента.Партнер = &Партнер
	 |	И (НЕ СегментыПартнеров.ПометкаУдаления)
	 |ИТОГИ
	 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	 |ПО
	 |	ОБЩИЕ
	 |;
	 |
	 |////////////////////////////////////////////////////////////////////////////////
	 |";

КонецФункции 

Функция ТекстЗапросаОДоговорахКонтрагентов(СоответствиеЗапросыДанные,НомерПоследнегоПакета)
	
	Если НЕ ПравоДоступа("Чтение",Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
		Возврат "";
	КонецЕсли;
	
	СоответствиеЗапросыДанные.Вставить("ДоговорыКонтрагентов",НомерПоследнегоПакета + 1);
	НомерПоследнегоПакета = НомерПоследнегоПакета + 1;
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Наименование,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Контрагент,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &СтрокаБезОграничения
	|		ИНАЧЕ ДоговорыКонтрагентов.ДатаОкончанияДействия
	|	КОНЕЦ КАК СрокДействия
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В
	|			(ВЫБРАТЬ
	|				ИерархияПартнеров.Родитель
	|			ИЗ
	|				РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|			ГДЕ
	|				ИерархияПартнеров.Партнер = &Партнер)
	|	
	|	И (НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Ссылка)
	|ПО
	|	ОБЩИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

Функция ВыполнитьПакетЗапросовПоПартнеру(Партнер,СоответствиеЗапросыДанные)
	
	Запрос = Новый Запрос;
	ВременныеТаблицы = Новый МенеджерВременныхТаблиц;
	НомерПоследнегоПакета = 1;
	ТекущаяДата = КонецДня(ТекущаяДатаСеанса()) + 1;
	
	Запрос.Текст = Запрос.Текст + ТекстЗапросаПоПартнеру(СоответствиеЗапросыДанные);
	Запрос.Текст = Запрос.Текст + ТекстЗапросаПоПервичномуИнтересу(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
	Если Контакты Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОКонтактнойИнформацииПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОВышестоящихПартнерах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОКонтактныхЛицах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Запрос.Текст = Запрос.Текст + ТекстЗапросаОКонтрагентах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеКлиента Тогда
		
		ВзаиморасчетыСервер.РассчитатьДатыПлатежаКлиента(ВременныеТаблицы, ТекущаяДата);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаНезавершенныеПретензии(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОбороты(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОДоступныхСоглашениях(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОТекущихСделкахСКлиентом(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОВзаиморасчетахСКлиентом(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОЗаказахПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОЗаявкахНаВозвратПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОНеотработанныхАктахПриемки(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		
	КонецЕсли;
	
	Если ДанныеПоставщика Тогда
		
		ВзаиморасчетыСервер.РассчитатьДатыПлатежаПоставщика(ВременныеТаблицы, ТекущаяДата);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОВзаиморасчетахСПоставщиком(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОСоглашенияхСПоставщиком(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОЗаказахПоставщику(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		
	КонецЕсли;
	
	Если ДанныеКлиента ИЛИ ДанныеПоставщика Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОДоговорахКонтрагентов(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		
	КонецЕсли;
	
	Если ТекущаяАктивность Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОСделкахСУчастиемПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОУчастиеПартнераВПрочихПроектах(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОНеотработанныхВзаимодействиях(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		
	КонецЕсли;
	
	Если Классификация Тогда
		
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОКлассификацииКлиента(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		Запрос.Текст = Запрос.Текст + ТекстЗапросаОСегментахПартнера(СоответствиеЗапросыДанные,НомерПоследнегоПакета);
		
	КонецЕсли;
	
	CRMЛокализация.ДополнитьТекстЗапросаОтчетДосьеПартнера(ЭтотОбъект, Запрос, СоответствиеЗапросыДанные, НомерПоследнегоПакета);
	
	Запрос.МенеджерВременныхТаблиц = ВременныеТаблицы;
	Запрос.УстановитьПараметр("Партнер",Партнер);
	Запрос.УстановитьПараметр("НеУказан",НСтр("ru='не указан'"));
	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата);
	Запрос.УстановитьПараметр("СтрокаМаркетинговоеМероприятие",НСтр("ru='Маркетинговые мероприятия'"));
	Запрос.УстановитьПараметр("СтрокаПроект",НСтр("ru='Проекты'"));
	
	Запрос.УстановитьПараметр("ВариантКлассификацииЗадолженности", ВариантКлассификацииЗадолженности);
	
	Запрос.УстановитьПараметр("Календарь",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВариантКлассификацииЗадолженности,"Календарь"));
	Запрос.УстановитьПараметр("СтрокаБезОграничения",НСтр("ru='без ограничения'"));
	Запрос.УстановитьПараметр("СтрокаТиповое",НСтр("ru='Типовое'"));
	Запрос.УстановитьПараметр("СтрокаИндивидуальное",НСтр("ru='Индивидуальное'"));
	
	ИспользоватьТиповыеСоглашенияСКлиентами			= ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами	= ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	ИспользоватьСоглашенияСКлиентами				= ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	Запрос.УстановитьПараметр("ТолькоТиповые", ТолькоТиповые);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные", ТолькоИндивидуальные);
	Запрос.УстановитьПараметр("ИспользоватьСоглашенияСКлиентами", ИспользоватьСоглашенияСКлиентами);
	
	Запрос.УстановитьПараметр("СтрокаПисьмоИсходящее",НСтр("ru='Исходящее письмо'"));
	Запрос.УстановитьПараметр("СтрокаБезОграничения",НСтр("ru='без ограничений'"));
	Запрос.УстановитьПараметр("СтрокаПисьмоВходящее",НСтр("ru='Входящее письмо'"));
	Запрос.УстановитьПараметр("СтрокаТелефонныйЗвонок",НСтр("ru='Телефонный звонок'"));
	Запрос.УстановитьПараметр("СтрокаЗапланированноеВзаимодействие",НСтр("ru='Запланированное взаимодействие'"));
	Запрос.УстановитьПараметр("СтрокаВстреча",НСтр("ru='Встреча'"));
	Запрос.УстановитьПараметр("НеПросрочено", НСтр("ru = 'Не просрочено'"));
	Запрос.УстановитьПараметр("РасчетыНеАктуальны", НСтр("ru = 'Расчеты не актуальны'"));
	
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов",ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции 

#КонецОбласти

#Область ВыводДанных

// Описание
// 
// Параметры:
// 	РезультатЗапросаПоРеквизитамПартнера       - РезультатЗапроса - данные по реквизитам партнера.
// 	РезультатЗапросаПоДополнительнымРеквизитам - РезультатЗапроса - данные по дополнительным реквизитам партнера.
// 	РезультатЗапросаПервичныйИнтерес           - РезультатЗапроса - данные по первичному интересу.
// 	ТаблицаОтчета                              - ТабличныйДокумент - таблица отчета.
// 	Макет                                      - ТабличныйДокумент - макет отчета.
//
Процедура ВывестиДанныеПартнера(РезультатЗапросаПоРеквизитамПартнера,
	                            РезультатЗапросаПоДополнительнымРеквизитам,
	                            РезультатЗапросаПервичныйИнтерес,
	                            ТаблицаОтчета,Макет)
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	ВыборкаРеквизитыПартнера = РезультатЗапросаПоРеквизитамПартнера.Выбрать(); // ВыборкаИзРезультатаЗапроса
	ВыборкаРеквизитыПартнера.Следующий();

	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	Область = Макет.ПолучитьОбласть("Заголовок");
	Область.Параметры.НаименованиеПартнера = ВыборкаРеквизитыПартнера.Наименование;
	Область.Параметры.Партнер              = ?(ИспользоватьПартнеровКакКонтрагентов, НСтр("ru = 'Контрагент'"), НСтр("ru = 'Партнер'"));
	ТаблицаОтчета.Вывести(Область,1);
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,
	                           ТаблицаОтчета,
	                           ?(ИспользоватьПартнеровКакКонтрагентов, НСтр("ru = 'Данные контрагента'"), НСтр("ru = 'Данные партнера'")));
	
	Область = Макет.ПолучитьОбласть("ДанныеПартнера");
	ТаблицаОтчета.НачатьГруппуСтрок("ДанныеПартнера");
	ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаРеквизитыПартнера);
	Область.Параметры.ДатаРегистрации = Формат(ВыборкаРеквизитыПартнера.ДатаРегистрации,"ДФ=dd.MM.yy");
	Область.Параметры.ТипОтношений = ПартнерыИКонтрагенты.СформироватьСтрокуТекущихТиповОтношений(ВыборкаРеквизитыПартнера);
	ТаблицаОтчета.Вывести(Область,2);
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Область = Макет.ПолучитьОбласть("ДанныеКонтрагентаПартнера");
		Область.Параметры.ЮрФизЛицо = ВыборкаРеквизитыПартнера.ЮрФизЛицо;
		Область.Параметры.ИНН_КПП   = ВыборкаРеквизитыПартнера.ИНН + 
		                                ?(ПустаяСтрока(ВыборкаРеквизитыПартнера.КПП),"","\" + ВыборкаРеквизитыПартнера.КПП);
		ТаблицаОтчета.Вывести(Область,2);
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесРегионы") Тогда
		Область = Макет.ПолучитьОбласть("ДанныеПартнераБизнесРегион");
		Область.Параметры.БизнесРегион = ВыборкаРеквизитыПартнера.БизнесРегион;
		ТаблицаОтчета.Вывести(Область,2);
	КонецЕсли;
	
	Если РезультатЗапросаПервичныйИнтерес <> Неопределено И НЕ РезультатЗапросаПервичныйИнтерес.Пустой() Тогда
		
		ВыборкаПервичныйИнтерес = РезультатЗапросаПервичныйИнтерес.Выбрать();
		ВыборкаПервичныйИнтерес.Следующий();
		
		Область = Макет.ПолучитьОбласть("ПервичныйИнтерес");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаПервичныйИнтерес);
		ТаблицаОтчета.Вывести(Область,2);
		
	КонецЕсли;
	
	ВыборкаДопРеквизиты = РезультатЗапросаПоДополнительнымРеквизитам.Выбрать();
	Пока ВыборкаДопРеквизиты.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("ДанныеПартнераДополнительныйРеквизит");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДопРеквизиты);
		ТаблицаОтчета.Вывести(Область,2);
	
	КонецЦикла;
	
	ВывестиОбластьТекст(Макет,ТаблицаОтчета,НСтр("ru='Комментарий:'"),ВыборкаРеквизитыПартнера.Комментарий);
	ВывестиОбластьТекст(Макет,ТаблицаОтчета,НСтр("ru='Дополнительная информация:'"),ВыборкаРеквизитыПартнера.ДополнительнаяИнформация);
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

// Выводит текстовую область в отчет.
// 
// Параметры:
// 	Макет         - ТабличныйДокумент - макет отчета.
// 	ТаблицаОтчета - ТабличныйДокумент - таблица отчета.
// 	Заголовок     - Строка            - заголовок области.
// 	Текст         - Строка            - текст, выводимый в область.
Процедура ВывестиОбластьТекст(Макет,ТаблицаОтчета,Заголовок,Текст)

	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ТекстЗаголовок");
	Область.Параметры.Заголовок = Заголовок;
	ТаблицаОтчета.Вывести(Область);
	
	Область = Макет.ПолучитьОбласть("ТекстСодержание");
	Область.Параметры.Текст = Текст;
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

Процедура ВывестиДанныеОКонтактнойИнформацииПартнера(РезультатЗапросаПоКонтактнойИнформацииПартнера,ТаблицаОтчета,Макет)

	Если РезультатЗапросаПоКонтактнойИнформацииПартнера.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка_КИ_Партнера =  РезультатЗапросаПоКонтактнойИнформацииПартнера.Выбрать();
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,НСтр("ru = 'Контактная информация'"));
	ТаблицаОтчета.НачатьГруппуСтрок("КонтактнаяИнформация");
	Пока Выборка_КИ_Партнера.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("КонтактнаяИнформация");
		ЗаполнитьЗначенияСвойств(Область.Параметры,Выборка_КИ_Партнера);
		ТаблицаОтчета.Вывести(Область,2);
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеОВышестоящихПартнерах(РезультатЗапросаПоВышестоящимПартнерам,ТаблицаОтчета,Макет)

	Если РезультатЗапросаПоВышестоящимПартнерам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапросаПоВышестоящимПартнерам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,
	                           ТаблицаОтчета,
	                           СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Вышестоящие партнеры - %1.'"),
	                                                                                        ВыборкаИтоги.Ссылка));
	
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	ТаблицаОтчета.НачатьГруппуСтрок("ВышестоящиеПартнеры");
	ВывестиОбластьБезПараметров("ГоловнойПартнерШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	Пока ВыборкаДетали.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("ГоловнойПартнерСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		Область.Параметры.ПредставлениеКонтактнойИнформации = МногострочноеПредставлениеКонтактнойИнформации(ВыборкаДетали.КонтактнаяИнформация.Выгрузить());
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаТаблицы          = Область.Области.СтрокаТаблицыВышестоящиеПартнеры; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеОКонтактныхЛицах(РезультатЗапросаПоКонтактнымЛицам,ТаблицаОтчета,Макет)

	Если РезультатЗапросаПоКонтактнымЛицам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапросаПоКонтактнымЛицам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();

	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,
	                           ТаблицаОтчета,
	                           СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактные лица - %1'"),
	                                                                                   ВыборкаИтоги.Ссылка));
	
	ТаблицаОтчета.НачатьГруппуСтрок("КонтактныеЛица");
	ВывестиОбластьБезПараметров("КонтактноеЛицоШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("КонтактноеЛицоСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		Область.Параметры.ПредставлениеРоли = МногострочноеПредставлениеРолейКонтактногоЛица(ВыборкаДетали.РолиКонтактногоЛица);
		Область.Параметры.ПредставлениеКонтактнойИнформации = МногострочноеПредставлениеКонтактнойИнформации(ВыборкаДетали.КонтактнаяИнформация.Выгрузить());
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаТаблицы = Область.Области.СтрокаТаблицыКонтактныеЛица; // ОбластьЯчеекТабличногоДокумента 
			ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеОКонтрагентах(РезультатЗапросаПоКонтрагентам,ТаблицаОтчета,Макет)
	
	Если РезультатЗапросаПоКонтрагентам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтактнойИнформации = Новый ТаблицаЗначений;
	ТаблицаКонтактнойИнформации.Колонки.Добавить("Вид");
	ТаблицаКонтактнойИнформации.Колонки.Добавить("Представление");
	
	ВыборкаКонтрагент = РезультатЗапросаПоКонтрагентам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,
	                           ТаблицаОтчета,
	                           СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контрагенты - %1.'"),
	                                                                                   ВыборкаКонтрагент.Количество()));
	ТаблицаОтчета.НачатьГруппуСтрок("Контрагенты");
	ВывестиОбластьБезПараметров("КонтрагентыШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	Пока ВыборкаКонтрагент.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("КонтрагентыСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаКонтрагент);
		Область.Параметры.ИНН_КПП = ВыборкаКонтрагент.ИНН + ?(ПустаяСтрока(ВыборкаКонтрагент.КПП),"","\" + ВыборкаКонтрагент.КПП);
		
		ТаблицаКонтактнойИнформации.Очистить();
		
		ВыборкаДетали = ВыборкаКонтрагент.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			
			НоваяСтрока = ТаблицаКонтактнойИнформации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетали);
			
		КонецЦикла;
		
		Область.Параметры.ПредставлениеКонтактнойИнформации = МногострочноеПредставлениеКонтактнойИнформации(ТаблицаКонтактнойИнформации);
		
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаОтчета = Область.Области.СтрокаТаблицыКонтрагенты; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаОтчета.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		
		ТаблицаОтчета.Вывести(Область,2);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОТекущихСделкахСКлиентом(РезультатЗапросаПоТекущимСделкамСПартнером,ТаблицаОтчета,Макет)
	
	Если РезультатЗапросаПоТекущимСделкамСПартнером.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВыборкаИтоги = РезультатЗапросаПоТекущимСделкамСПартнером.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В работе сделок - %1, потенциально на сумму %2 %3.'"),
	                                                                         ВыборкаИтоги.Ссылка,
	                                                                         ВыборкаИтоги.ПотенциальнаяСуммаПродажи,
	                                                                         ВыборкаИтоги.Валюта);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	ТаблицаОтчета.НачатьГруппуСтрок("ТекущиеСделки");
	ВывестиОбластьБезПараметров("ТекущиеСделкиШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	ВыборкаСделки = ВыборкаИтоги.Выбрать();
	Пока ВыборкаСделки.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("ТекущиеСделкиСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаСделки);
		Если ЧетнаяСтрока Тогда
			СтрокаТаблицыТекущиеСделки = Область.Области.СтрокаТаблицыТекущиеСделки; //  ОбластьЯчеекТабличногоДокумента
			СтрокаТаблицыТекущиеСделки.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры



// Выводит в отчет информацию об участии партнера в прочих проектах
// 
// Параметры:
// 	РезультатЗапросаИтоги  - РезультатЗапроса - содержит итоговые данные.
// 	РезультатЗапросаДетали - РезультатЗапроса - содержит детальные данные.
// 	ТаблицаОтчета          - ТабличныйДокумент - таблица отчета.
// 	Макет                  - ТабличныйДокумент - макет отчета.
//
Процедура ВывестиДанныеОУчастиеПартнераВПрочихПроектах(РезультатЗапросаИтоги, РезультатЗапросаДетали, ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаИтоги.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВыборкаИтоги = РезультатЗапросаИтоги.Выбрать();
	
	ТекстЗаголовка = НСтр("ru = 'Участвует в'") + " ";
	
	Пока ВыборкаИтоги.Следующий() Цикл
		ТекстЗаголовка = ТекстЗаголовка + ВыборкаИтоги.Вид + " - " + ВыборкаИтоги.Количество + ", ";
	КонецЦикла;
	
	ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-2) + ".";
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	ТаблицаОтчета.НачатьГруппуСтрок("ПрочиеПроекты");
	ВывестиОбластьБезПараметров("ПрочиеПроектыШапка",Макет,ТаблицаОтчета);
	ВыборкаВид = РезультатЗапросаДетали.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВид.Следующий() Цикл
		Область = Макет.ПолучитьОбласть("Группировка");
		Область.Параметры.ИмяГруппировки = ВыборкаВид.Вид;
		ТаблицаОтчета.Вывести(Область,2);
		ТаблицаОтчета.НачатьГруппуСтрок("ПрочиеПроектыВид");
		
		ЧетнаяСтрока = Ложь;
		ВыборкаПроект = ВыборкаВид.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПроект.Следующий() Цикл
			
			Область = Макет.ПолучитьОбласть("ПрочиеПроектыСтрока");
			ВыборкаДетали = ВыборкаПроект.Выбрать();
			Область.Параметры.РолиВПроекте = СтрокаРолейПартнераВСделке(ВыборкаДетали);
			Область.Параметры.КонтактныеЛицаРоли = СтрокаРолейКонтактныхЛицВСделке(ВыборкаДетали);
			ВыборкаДетали.Следующий();
			ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
			Если ЧетнаяСтрока Тогда
				ОбластьСтрокаТаблицы = Область.Области.СтрокаТаблицыПрочиеПроекты; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			ТаблицаОтчета.Вывести(Область,3);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
			
		КонецЦикла;
		
		ТаблицаОтчета.ЗакончитьГруппуСтрок();
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОбороты(РезультатЗапросаОбороты, ТаблицаОтчета, Макет);

	Если РезультатЗапросаОбороты.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги =  РезультатЗапросаОбороты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Общий объем выручки от продаж клиенту - %1 %2.'"),
	                                                                         Формат(ВыборкаИтоги.СуммаВыручкиОборот, "ЧДЦ=2"),
	                                                                         ВыборкаИтоги.Валюта);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	ТаблицаОтчета.НачатьГруппуСтрок("Обороты");
	ВывестиОбластьБезПараметров("ШапкаОбороты",Макет,ТаблицаОтчета);
	
	ПродажиПредыдущийПериод = 0;
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("СтрокаОбороты");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		
		ПродажиТекущийПериод = ВыборкаДетали.СуммаВыручкиОборот;
		Если ПродажиПредыдущийПериод <> 0 И ПродажиТекущийПериод <> 0 И ПродажиТекущийПериод <> ПродажиПредыдущийПериод Тогда
			Если ПродажиПредыдущийПериод > ПродажиТекущийПериод Тогда
				Изменение = ОКР( - ((1 - ПродажиТекущийПериод / ПродажиПредыдущийПериод) * 100) ,2);
				ОбластьСтрокаОтчета = Область.Области.Изменение; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаОтчета.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Иначе
				Изменение = ОКР((ПродажиТекущийПериод / ПродажиПредыдущийПериод - 1) * 100,2);
			КонецЕсли;
			Область.Параметры.Изменение = Изменение;
		КонецЕсли;
		
		ПродажиПредыдущийПериод = ВыборкаДетали.СуммаВыручкиОборот;
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаОтчета = Область.Области.СтрокаТаблицыОбороты; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаОтчета.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры 

Процедура ВывестиДанныеОДоступныхСоглашениях(РезультатЗапросаПоСоглашениям,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоСоглашениям.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоСоглашениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доступно соглашений с клиентом - %1.'"),ВыборкаИтоги.Ссылка);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("СоглашенияСКлиентом");
	ВывестиОбластьБезПараметров("СоглашенияСКлиентомШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("СоглашенияСКлиентомСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаТаблицы           = Область.Области.СтрокаТаблицыСоглашенияСКлиентом; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОСоглашенияхСПоставщиком(РезультатЗапросаПоСоглашениям,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоСоглашениям.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоСоглашениям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Доступно соглашений с поставщиком - %1.'"),
	                                                                         ВыборкаИтоги.Ссылка);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("СоглашенияСПоставщиком");
	ВывестиОбластьБезПараметров("СоглашенияСПоставщикомШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("СоглашенияСПоставщикомСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаТаблицы = Область.Области.СтрокаТаблицыСоглашенияСПоставщиком; // ОбластьЯчеекТабличногоДокумента 
			ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОНеотработанныхВзаимодействиях(РезультатЗапросаПоВзаимодействиям,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоВзаимодействиям.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВыборкаИтоги = РезультатЗапросаПоВзаимодействиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неотработанных взаимодействий - %1'"),
	                                                                         ВыборкаИтоги.Ссылка);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("НеотработанныеВзаимодействия");
	ВывестиОбластьБезПараметров("НеотработанныеВзаимодействияШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("НеотработанныеВзаимодействияСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаОтчета = Область.Области.СтрокаТаблицыНеотработанныеВзаимодействия; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаОтчета.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

// Выводит информацию о сделках с участием партнера
// 
// Параметры:
// 	РезультатЗапросаИтоги  - РезультатЗапроса - итоговые данные о сделках.
// 	РезультатЗапросаДетали - РезультатЗапроса - детальные данные о сделках.
// 	ТаблицаОтчета          - ТабличныйДокумент - таблица отчета.
// 	Макет                  - ТабличныйДокумент - макет отчета.
//
Процедура ВывестиДанныеОСделкахСУчастиемПартнера(РезультатЗапросаИтоги,РезультатЗапросаДетали,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаДетали.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВыборкаИтоги = РезультатЗапросаИтоги.Выбрать(); 
	ВыборкаИтоги.Следующий();
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Участвует в сделках - %1, потенциально на сумму %2 %3.'"),
	                                                                         ВыборкаИтоги.КоличествоСделок,
	                                                                         ВыборкаИтоги.ПотенциальнаяСуммаПродажи,
	                                                                         ВыборкаИтоги.Валюта);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	ТаблицаОтчета.НачатьГруппуСтрок("УчастиеВСделках");
	ВывестиОбластьБезПараметров("УчастиеВСделкахШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДеталиСделка = РезультатЗапросаДетали.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДеталиСделка.Следующий() Цикл
		ВыборкаДеталиЭтапПроцесса = ВыборкаДеталиСделка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ВыборкаДеталиЭтапПроцесса.Следующий();
	
		Область = Макет.ПолучитьОбласть("УчастиеВСделкахСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДеталиЭтапПроцесса);
		ВыборкаДеталиРоли = ВыборкаДеталиЭтапПроцесса.Выбрать();
		Область.Параметры.РолиВСделке = СтрокаРолейПартнераВСделке(ВыборкаДеталиРоли);
		Область.Параметры.КонтактныеЛицаРоли = СтрокаРолейКонтактныхЛицВСделке(ВыборкаДеталиРоли);
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаОтчета = Область.Области.СтрокаТаблицыУчастиеВСделках; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаОтчета.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОЗаказахПартнера(РезультатЗапросаПоЗаказам,ТаблицаОтчета, Макет,ТипЗаказов)
	
	Если РезультатЗапросаПоЗаказам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоЗаказам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ВсегоЗаказов = ВыборкаИтоги.Ссылка;
	
	Если ТипЗаказов = "ЗаявкаНаВозврат" Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В работе заявок на возврат от клиента - %1'"),
		                                                                         ВсегоЗаказов);
	Иначе
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В работе заказов %1 - %2'"),
		                                                                         ТипЗаказов,ВсегоЗаказов);
	КонецЕсли; 
	
	ПерваяВалюта = Истина;
	ВыборкаВалюты = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалюты.Следующий() Цикл
		
		Если ВыборкаВалюты.Ссылка = ВсегоЗаказов Тогда
			ТекстЗаголовка = ТекстЗаголовка + " " +
			                 СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='на сумму %1 %2,'") + " ",
			                                                                              Формат(ВыборкаВалюты.СуммаДокумента, "ЧДЦ=2"),
			                                                                              ВыборкаВалюты.Валюта);
		Иначе
			ТекстЗамены = " " + ?(ТипЗаказов = "ЗаявкаНаВозврат", 
			                НСтр("ru='%1 заявка на возврат от клиента на сумму %2 %3,'") + " ", 
			                НСтр("ru='%1 заказ на сумму %2 %3,'") + " ");
			Если ВыборкаВалюты.Ссылка > 1 И ВыборкаВалюты.Ссылка < 5 Тогда
				ТекстЗамены = СтрЗаменить(ТекстЗамены, НСтр("ru='заявка'"), НСтр("ru='заявки'"));
				ТекстЗамены = СтрЗаменить(ТекстЗамены, НСтр("ru='заказ'"), НСтр("ru='заказа'"));
			ИначеЕсли ВыборкаВалюты.Ссылка > 4 Тогда
				ТекстЗамены = СтрЗаменить(ТекстЗамены, НСтр("ru='заявка'"), НСтр("ru='заявок'"));
				ТекстЗамены = СтрЗаменить(ТекстЗамены, НСтр("ru='заказ'"), НСтр("ru='заказов'"));
			КонецЕсли;
			ТекстЗаголовка =  ТекстЗаголовка + ?(ПерваяВалюта,", " +НСтр("ru='в том числе'") + " ","")
			                                     + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗамены,
			                                     ВыборкаВалюты.Ссылка,
			                                     Формат(ВыборкаВалюты.СуммаДокумента, "ЧДЦ=2"),
			                                     ВыборкаВалюты.Валюта);
			ПерваяВалюта =  Ложь;
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-2) + ".";
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("ЗаказыКлиентов");
	ВывестиОбластьБезПараметров("ЗаказыКлиентовШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаВалюты.Сбросить();
	Пока ВыборкаВалюты.Следующий() Цикл
		ВыборкаДетали = ВыборкаВалюты.Выбрать(); // ВыборкаИзРезультатаЗапроса
		Пока ВыборкаДетали.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("ЗаказыКлиентовСтрока");
			ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
			Область.Параметры.НомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='№ %1 от %2'"),
			                                                                                      ВыборкаДетали.Номер,
			                                                                                      ВыборкаДетали.Дата);
			Если ВыборкаДетали.Просрочен Тогда
				ОбластьСтрокаТаблицы            = Область.Области.СтрокаЗаказыКлиентовСтатус; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
			КонецЕсли;
			Если ЧетнаяСтрока Тогда
				ОбластьСтрокаТаблицы            = Область.Области.СтрокаТаблицы; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			ТаблицаОтчета.Вывести(Область,2);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеНеотработанныеАктыОРасхожденияхПослеОтгрузки(РезультатЗапросаПоАктамОРасхожденииПослеОтгрузки,ТаблицаОтчета,Макет) 

	Если РезультатЗапросаПоАктамОРасхожденииПослеОтгрузки.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	КоличествоАктов = 0;
	ПерваяВалюта = Истина;
	ТекстПоВалютам = "";

	ВыборкаИтоги = РезультатЗапросаПоАктамОРасхожденииПослеОтгрузки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтоги.Следующий() Цикл
		Если ВыборкаИтоги.Количество() = 1 Тогда
			ТекстПоВалютам = ТекстПоВалютам + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 " " + НСтр("ru='излишки на сумму %1 %3, недостачи на сумму %2 %3'") +", ",
			                 Формат(ВыборкаИтоги.Излишки, "ЧДЦ=2"),
			                 Формат(ВыборкаИтоги.Недостачи, "ЧДЦ=2"),
			                 ВыборкаИтоги.Валюта);
		Иначе
			ТекстПоВалютам =  ТекстПоВалютам + ?(ПерваяВалюта,", " + НСтр("ru='в том числе:'"),"") + Символы.ПС
			                                     + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(" " + НСтр(
			                                     "ru='%1 (%2)- излишки на сумму %3 , недостачи на сумму %4'") +", ",
			                                     ВыборкаИтоги.Ссылка,
			                                     ВыборкаИтоги.Валюта,
			                                     Формат(ВыборкаИтоги.Излишки,   "ЧДЦ=2"),
			                                     Формат(ВыборкаИтоги.Недостачи, "ЧДЦ=2"));
			ПерваяВалюта =  Ложь;
		КонецЕсли;
		КоличествоАктов = КоличествоАктов + ВыборкаИтоги.Ссылка;
	КонецЦикла;
	
	ТекстПоВалютам = Лев(ТекстПоВалютам,СтрДлина(ТекстПоВалютам)-2) + ".";
	ТекстЗаголовка = НСтр("ru = 'Неотработанных актов приемки клиента'") + " - "+ КоличествоАктов + ТекстПоВалютам;
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("АктыОРасхожденияхПослеОтгрузки");
	ВывестиОбластьБезПараметров("АктыОРасхожденияхПослеОтгрузкиШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаИтоги.Сбросить();
	Пока ВыборкаИтоги.Следующий() Цикл
		ВыборкаДетали = ВыборкаИтоги.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Область = Макет.ПолучитьОбласть("АктыОРасхожденияхПослеОтгрузкиСтрока");
			ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
			Область.Параметры.НомерДата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='№ %1 от %2'"),
			                                                                                      ВыборкаДетали.Номер, 
			                                                                                      ВыборкаДетали.Дата);
			Если ЧетнаяСтрока Тогда
				ОбластьСтрокаТаблицы          = Область.Области.СтрокаТаблицыАктОРасхожденияхПослеОтгрузки; // ОбластьЯчеекТабличногоДокумента 
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			ТаблицаОтчета.Вывести(Область,2);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		КонецЦикла;
	КонецЦикла;
	
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();

КонецПроцедуры

Процедура ВывестиДанныеНезавершенныеПретензии(РезультатЗапросаНезавершенныеПретензии,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаНезавершенныеПретензии.Пустой() Тогда
		Возврат;
	КонецЕсли;

	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаНезавершенныеПретензии.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Незавершенных претензий - %1.'"),
	                                                                         ВыборкаИтоги.Ссылка);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка,ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	ТаблицаОтчета.НачатьГруппуСтрок("НезавершенныеПретензии");
	ВывестиОбластьБезПараметров("НезавершенныеПретензииШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДетали.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("НезавершенныеПретензииСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		
		Если ЧетнаяСтрока Тогда
			ОбластьСтрокаОтчета = Область.Области.СтрокаНезавершенныеПретензии; // ОбластьЯчеекТабличногоДокумента
			ОбластьСтрокаОтчета.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОВзаиморасчетахСКлиентом(РезультатЗапросаПоВзаиморасчетам,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоВзаиморасчетам.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ТекстЗаголовка = НСтр("ru='Задолженность как клиента'") + " ";
	ВыборкаВалюты = РезультатЗапросаПоВзаиморасчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаДолгКлиента = "";
	СтрокаПросроченнаяЗадолженность = "";
	СтрокаНашДолг = "";
	
	Пока ВыборкаВалюты.Следующий() Цикл
		
		ДолгКлиента =  ВыборкаВалюты.ДолгКлиента - ВыборкаВалюты.НашДолг;
		
		Если ДолгКлиента > 0 Тогда
			СтрокаДолгКлиента = СтрокаДолгКлиента + Формат(ДолгКлиента,"ЧДЦ=2") + " " + ВыборкаВалюты.Валюта + ", ";
		Иначе
			СтрокаНашДолг = СтрокаНашДолг + Формат(-ДолгКлиента,"ЧДЦ=2") + " " + ВыборкаВалюты.Валюта + ", ";
		КонецЕсли;
		Если ВыборкаВалюты.ДолгКлиентаПросрочено <> 0 Тогда
			СтрокаПросроченнаяЗадолженность = СтрокаПросроченнаяЗадолженность
			                                  + Формат(ВыборкаВалюты.ДолгКлиентаПросрочено,"ЧДЦ=2") 
			                                  + " " + ВыборкаВалюты.Валюта + ", ";
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстДолгКлиента = "";
	Если Не ПустаяСтрока(СтрокаДолгКлиента) Тогда
		ТекстДолгКлиента = НСтр("ru='Общая задолженность как клиента'") + " " + Лев(СтрокаДолгКлиента,СтрДлина(СтрокаДолгКлиента)-2) + ".";
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаНашДолг) Тогда
		ТекстДолгКлиента = ТекстДолгКлиента + ?(ПустаяСтрока(ТекстДолгКлиента), "", Символы.ПС)
		                                      + НСтр("ru='Общая наша задолженность перед клиентом'") + " " 
		                                      + Лев(СтрокаНашДолг,СтрДлина(СтрокаНашДолг)-2) + ".";
	КонецЕсли;
	
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстДолгКлиента);
	
	Если НЕ ПустаяСтрока(СтрокаПросроченнаяЗадолженность) Тогда
	
		СтрокаПросроченнаяЗадолженность = НСтр("ru='Просроченная задолженность как клиента'") + " "
		                                  + Лев(СтрокаПросроченнаяЗадолженность,СтрДлина(СтрокаПросроченнаяЗадолженность)-2) + ".";
		ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтрокаПросроченнаяЗадолженность,ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	КонецЕсли;
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("ЗадолженностьКлиента");
	ВывестиОбластьБезПараметров("ЗадолженностьКлиентаШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаВалюты.Сбросить();
	Пока ВыборкаВалюты.Следующий() Цикл
	
		ВыборкаДетали = ВыборкаВалюты.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("ЗадолженностьКлиентаСтрока");
			
			ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
			
			Если Не ЗначениеЗаполнено(ВариантКлассификацииЗадолженности)
				И ТипЗнч(ВыборкаДетали.НаименованиеИнтервала) = Тип("Число") Тогда
				Область.Параметры.НаименованиеИнтервала = Строка(ВыборкаДетали.НаименованиеИнтервала) + " " 
					+ ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
						ВыборкаДетали.НаименованиеИнтервала, 
						НСтр("ru= 'день'"), НСтр("ru= 'дня'"), НСтр("ru= 'дней'"), "м");
			КонецЕсли; 
			Если ВыборкаДетали.ДолгКлиентаПросрочено > 0 Тогда
				
				ОбластьЯчеекТабличногоДокумента            = Область.Области.СтрокаЗадолженностьКлиентаПросрочено; //ОбластьЯчеекТабличногоДокумента
				ОбластьЯчеекТабличногоДокумента.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
				ОбластьЯчеекТабличногоДокумента            = Область.Области.СтрокаЗадолженностьКлиентаСрокПросроченоЗадолженности; //ОбластьЯчеекТабличногоДокумента
				ОбластьЯчеекТабличногоДокумента.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
			КонецЕсли;
			
			Если ВыборкаДетали.НаименованиеИнтервала = НСтр("ru = 'Расчеты не актуальны'") Тогда
			
				ОбластьСтрокаТаблицы            = Область.Области.ЗадолженностьКлиентаСтрока; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветТекста = WebЦвета.СветлоСерый;
				ЕстьНеактуальныеРасчетыСКлиентами = Истина;
			
			КонецЕсли;
			Если ЧетнаяСтрока Тогда
				ОбластьСтрокаТаблицы          = Область.Области.РасчетныйДокумент; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			ТаблицаОтчета.Вывести(Область,2);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОВзаиморасчетахСПоставщиком(РезультатЗапросаПоВзаиморасчетам,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоВзаиморасчетам.Пустой() Тогда 
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ТекстЗаголовка = НСтр("ru='Задолженность перед поставщиком'") + " ";
	
	СтрокаДолгПередПоставщиком = "";
	СтрокаПросроченнаяЗадолженность = "";
	
	ВыборкаВалюты = РезультатЗапросаПоВзаиморасчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалюты.Следующий() Цикл
		
		ДолгПередПоставщиком = ВыборкаВалюты.НашДолг + ВыборкаВалюты.ДолгПоставщика;
		СтрокаДолгПередПоставщиком = СтрокаДолгПередПоставщиком + Формат(ДолгПередПоставщиком, "ЧДЦ=2") + " " + ВыборкаВалюты.Валюта + ", ";
		Если ВыборкаВалюты.НашДолгПросрочено <> 0 Тогда
			СтрокаПросроченнаяЗадолженность = СтрокаПросроченнаяЗадолженность + Формат(ВыборкаВалюты.НашДолгПросрочено, "ЧДЦ=2") + " " + ВыборкаВалюты.Валюта + ", ";
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаДолгПередПоставщиком = НСтр("ru='Общая задолженность перед поставщиком'") + " "
	                             + Лев(СтрокаДолгПередПоставщиком,СтрДлина(СтрокаДолгПередПоставщиком)-2) + ".";
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтрокаДолгПередПоставщиком);
	
	Если НЕ ПустаяСтрока(СтрокаПросроченнаяЗадолженность) Тогда
	
		СтрокаПросроченнаяЗадолженность = НСтр("ru='В том числе просроченная задолженность'") + " "
		                                  + Лев(СтрокаПросроченнаяЗадолженность,СтрДлина(СтрокаПросроченнаяЗадолженность)-2) + ".";
		ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,СтрокаПросроченнаяЗадолженность,ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	КонецЕсли; 
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("ЗадолженностьПоставщика");
	ВывестиОбластьБезПараметров("ЗадолженностьПоставщикаШапка",Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	
	ВыборкаВалюты.Сбросить();
	Пока ВыборкаВалюты.Следующий() Цикл
	
		ВыборкаДетали = ВыборкаВалюты.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
		
			Область = Макет.ПолучитьОбласть("ЗадолженностьПоставщикаСтрока");
			ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
			Область.Параметры.ДолгПоставщика = - Область.Параметры.ДолгПоставщика;
			Если ВыборкаДетали.НашДолгПросрочено > 0 Тогда
				ОбластьСтрокаТаблицы = Область.Области.СтрокаЗадолженностьПоставщикаНашДолгПросрочено; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
				ОбластьСтрокаТаблицы = Область.Области.СтрокаЗадолженностьПоставщикаСрокПросрочено; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
			КонецЕсли;
			Если ВыборкаДетали.НаименованиеИнтервала = НСтр("ru = 'Расчеты не актуальны'") Тогда
			
				ОбластьСтрокаТаблицы            = Область.Области.ЗадолженностьПоставщикаСтрока; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветТекста = WebЦвета.СветлоСерый;
				ЕстьНеактуальныеРасчетыСПоставщиками = Истина;
			
			КонецЕсли;
			
			Если ЧетнаяСтрока Тогда
				ОбластьСтрокаТаблицы            = Область.Области.РасчетныйДокументПоставщик; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
			
			ТаблицаОтчета.Вывести(Область,2);
			
			ЧетнаяСтрока = НЕ ЧетнаяСтрока;
		
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

// Выводит в отчет данные о классификации клиентов
// 
// Параметры:
// 	РезультатЗапросаПоКлассификации - РезультатЗапроса - данные по классификации.
// 	РезультатЗапросаПериоды         - РезультатЗапроса - данные по периодам.
// 	ТаблицаОтчета                   - ТабличныйДокумент - таблица отчета.
// 	Макет                           - ТабличныйДокумент - макет отчета.
//
Процедура ВывестиДанныеОКлассификацииКлиента(РезультатЗапросаПоКлассификации,РезультатЗапросаПериоды,ТаблицаОтчета, Макет)

	Если РезультатЗапросаПоКлассификации.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,НСтр("ru='Классификация'"));
	
	// Шапка таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("Классификация");
	ВыборкаПериоды = РезультатЗапросаПериоды.Выбрать();
	ВыборкаПериоды.Следующий();
	Область = Макет.ПолучитьОбласть("КлассификацияШапка");
	ПериодКлассификации = Константы.ПериодABCКлассификацииПартнеров.Получить();
	Область.Параметры.ПредыдущийПериод	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)'"),
	                                                                                              Формат(ВыборкаПериоды.ПредыдущийПериод,
	                                                                                                    "ДЛФ=D"),
	                                                                                              ПериодКлассификации);
	Область.Параметры.ТекущийПериод		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)'"), 
	                                                                                              Формат(ВыборкаПериоды.ТекущийПериод,
	                                                                                                    "ДЛФ=D"),
	                                                                                              ПериодКлассификации);
	ТаблицаОтчета.Вывести(Область);
	
	// Тело таблицы
	
	ВыборкаТипПараметра = РезультатЗапросаПоКлассификации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Пока ВыборкаТипПараметра.Следующий() Цикл
		
		Область = Макет.ПолучитьОбласть("КлассификацияСтрока");
		
		Если ВыборкаТипПараметра.ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.Выручка
		     Или ВыборкаТипПараметра.ТипПараметраКлассификации = Перечисления.ТипыПараметровКлассификации.ВаловаяПрибыль Тогда
			
			ТекстПараметрКлассификации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 (%2)'"),
			                                                                                     Строка(ВыборкаТипПараметра.ТипПараметраКлассификации),
			                                                                                     ВалютаУправленческогоУчета);
			
		Иначе
			
			ТекстПараметрКлассификации = НСтр("ru='Количество покупок'");
			
		КонецЕсли;
		
		Область.Параметры.ПараметрКлассификации = ТекстПараметрКлассификации;
		ТекущаяКлассификация = "";
		ПредыдущаяКлассификация = "";
		ВыборкаДетали = ВыборкаТипПараметра.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если ВыборкаДетали.СтрокаПериод = "Текущий" Тогда
				Если (Не ВыборкаДетали.Класс = Перечисления.ABCКлассификация.НеКлассифицирован) 
					  И (Не ВыборкаДетали.Класс = Перечисления.XYZКлассификация.НеКлассифицирован) Тогда
					ТекущаяКлассификация = ТекущаяКлассификация + Лев(ВыборкаДетали.Класс,1) + ", ";
				КонецЕсли;
				Если ВыборкаДетали.ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
					Область.Параметры.ЗначениеТекущее = ВыборкаДетали.ЗначениеПараметраКлассификации;
				КонецЕсли;
			Иначе
				Если (Не ВыборкаДетали.Класс = Перечисления.ABCКлассификация.НеКлассифицирован) 
					  И (Не ВыборкаДетали.Класс = Перечисления.XYZКлассификация.НеКлассифицирован) Тогда
					ПредыдущаяКлассификация = ПредыдущаяКлассификация + Лев(ВыборкаДетали.Класс,1) + ", ";
				КонецЕсли;
				Если ВыборкаДетали.ТипКлассификации = Перечисления.ТипыКлассификации.ABC Тогда
					Область.Параметры.ЗначениеПредыдущее = ВыборкаДетали.ЗначениеПараметраКлассификации;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Область.Параметры.КлассификацияПредыдущее = Лев(ПредыдущаяКлассификация,СтрДлина(ПредыдущаяКлассификация)-2);
		Область.Параметры.КлассификацияТекущая    = Лев(ТекущаяКлассификация,СтрДлина(ТекущаяКлассификация) - 2);
		
		ТаблицаОтчета.Вывести(Область,2);
		
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОСегментахПартнера(РезультатЗапросаПоСегментам,ТаблицаОтчета, Макет);
	
	Если РезультатЗапросаПоСегментам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаИтоги = РезультатЗапросаПоСегментам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ВывестиЗаголовокПодраздела(Макет,
	                           ТаблицаОтчета,
	                           СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Входит в сегменты - %1.'"),
	                                                                                   ВыборкаИтоги.Ссылка));
	
	ТаблицаОтчета.НачатьГруппуСтрок("Сегменты");
	ВывестиОбластьБезПараметров("СегментыШапка",Макет,ТаблицаОтчета);
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть("СегментыСтрока");
		ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			СтрокаТаблицыСегментыПартнера = Область.Области.СтрокаТаблицыСегментыПартнера; //  ОбластьЯчеекТабличногоДокумента
			СтрокаТаблицыСегментыПартнера.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиДанныеОДоговорахКонтрагентов(РезультатЗапросаПоДоговорам,ТаблицаОтчета, Макет)
	
	Если РезультатЗапросаПоДоговорам.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	// Вывод шапки
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	
	ВыборкаИтоги = РезультатЗапросаПоДоговорам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИтоги.Следующий();
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Действующих договоров - %1.'"), 
	                                                                         ВыборкаИтоги.Ссылка);
	ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка);
	
	// Вывод таблицы
	ТаблицаОтчета.НачатьГруппуСтрок("ДоговорыКонтрагентов");
	ВывестиОбластьБезПараметров(?(ИспользоватьПартнеровКакКонтрагентов, "ДоговорыКонтрагентовШапкаПартнерыКакКонтрагенты","ДоговорыКонтрагентовШапка"),Макет,ТаблицаОтчета);
	
	ЧетнаяСтрока = Ложь;
	ВыборкаДетали = ВыборкаИтоги.Выбрать();
	Пока ВыборкаДетали.Следующий() Цикл
	
		Область = Макет.ПолучитьОбласть(?(ИспользоватьПартнеровКакКонтрагентов, "ДоговорыКонтрагентовСтрокаПартнерыКакКонтрагенты","ДоговорыКонтрагентовСтрока"));
		ЗаполнитьЗначенияСвойств(Область.Параметры, ВыборкаДетали);
		Если ЧетнаяСтрока Тогда
			Если ИспользоватьПартнеровКакКонтрагентов Тогда
				ОбластьСтрокаТаблицы = Область.Области.СтрокаТаблицыДоговорыКонтрагентовПартнерыКакКонтрагенты; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			Иначе
				ОбластьСтрокаТаблицы = Область.Области.СтрокаТаблицыДоговорыКонтрагентов; // ОбластьЯчеекТабличногоДокумента
				ОбластьСтрокаТаблицы.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
			КонецЕсли;
		КонецЕсли;
		ТаблицаОтчета.Вывести(Область,2);
		
		ЧетнаяСтрока = НЕ ЧетнаяСтрока;
	
	КонецЦикла;
	
	ТаблицаОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиОбластьБезПараметров(ИмяОбласти,Макет,ТаблицаОтчета) Экспорт

	Область = Макет.ПолучитьОбласть(ИмяОбласти);
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

// Выводит заголовок подраздела в отчёт
// 
// Параметры:
// 	Макет - ТабличныйДокумент - Описание
// 	ТаблицаОтчета - ТабличныйДокумент - 
// 	ТекстЗаголовка - Строка - Описание
// 	ЦветТекста - Неопределено, Цвет - Описание
//
Процедура ВывестиЗаголовокПодраздела(Макет,ТаблицаОтчета,ТекстЗаголовка,ЦветТекста = Неопределено) Экспорт

	Область = Макет.ПолучитьОбласть("ЗаголовокПодраздела");
	Область.Параметры.Заголовок = ТекстЗаголовка;
	Если ЦветТекста <> Неопределено Тогда
		ЗаголовокПодраздела = Область.Области.ЗаголовокПодраздела;  //ОбластьЯчеекТабличногоДокумента
		ЗаголовокПодраздела.ЦветТекста = ЦветТекста;
	КонецЕсли;
	ТаблицаОтчета.Вывести(Область);

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Формирует отчет
//
// Параметры:
//  ТаблицаОтчета - ТабличныйДокумент - табличный документ, в который выводится отчет
//  Партнер       - СправочникСсылка.Партнеры - партнер, для которого формируется отчет.
//
Процедура СформироватьОтчет(ТаблицаОтчета, Партнер)  Экспорт
	
	Макет = ПолучитьМакет("Макет");
	
	СоответствиеЗапросыДанные = Новый Соответствие;
	МассивРезультатовЗапросовПоПартнеру = ВыполнитьПакетЗапросовПоПартнеру(Партнер,СоответствиеЗапросыДанные);
	
	Если СоответствиеЗапросыДанные["ДанныеПартнера"] <> Неопределено Тогда
		ВывестиДанныеПартнера(МассивРезультатовЗапросовПоПартнеру[0],
		                      МассивРезультатовЗапросовПоПартнеру[1],
		                      ?(СоответствиеЗапросыДанные["ПервичныйИнтерес"]=Неопределено,
		                              Неопределено,
		                              МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ПервичныйИнтерес"]]),
		                      ТаблицаОтчета,Макет);
	КонецЕсли;
	
	Если Контакты Тогда
		Если СоответствиеЗапросыДанные["КонтактнаяИнформацияПартнера"] <> Неопределено Тогда
			ВывестиДанныеОКонтактнойИнформацииПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КонтактнаяИнформацияПартнера"]], 
			                                           ТаблицаОтчета,Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ВышестоящиеПартнеры"] <> Неопределено Тогда
			ВывестиДанныеОВышестоящихПартнерах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ВышестоящиеПартнеры"]],
			                                   ТаблицаОтчета,Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["КонтактныеЛица"] <> Неопределено Тогда
			ВывестиДанныеОКонтактныхЛицах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КонтактныеЛица"]],
			                                                                  ТаблицаОтчета,Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["Контрагенты"] <> Неопределено Тогда
			ВывестиДанныеОКонтрагентах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["Контрагенты"]],ТаблицаОтчета,Макет);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеКлиента Тогда
		Если СоответствиеЗапросыДанные["ВзаиморасчетыСКлиентом"] <> Неопределено Тогда
			ВывестиДанныеОВзаиморасчетахСКлиентом(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ВзаиморасчетыСКлиентом"]],
			                                      ТаблицаОтчета, Макет);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеПоставщика Тогда
		Если СоответствиеЗапросыДанные["ВзаиморасчетыСПоставщиком"] <> Неопределено Тогда
			ВывестиДанныеОВзаиморасчетахСПоставщиком(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ВзаиморасчетыСПоставщиком"]],
			                                         ТаблицаОтчета, Макет);
		КонецЕсли;
		
		CRMЛокализация.ПриВыводеДанныхПоставщикаОтчетДосьеПартнера(ЭтотОбъект, МассивРезультатовЗапросовПоПартнеру, СоответствиеЗапросыДанные, ТаблицаОтчета, Макет);
		
	КонецЕсли;
	Если ДанныеКлиента ИЛИ ДанныеПоставщика Тогда
		Если СоответствиеЗапросыДанные["ДоговорыКонтрагентов"] <> Неопределено Тогда
			ВывестиДанныеОДоговорахКонтрагентов(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ДоговорыКонтрагентов"]],
			                                    ТаблицаОтчета, Макет);
		КонецЕсли;
	КонецЕсли;
	Если ДанныеКлиента Тогда
		Если СоответствиеЗапросыДанные["НезавершенныеПретензии"] <> Неопределено Тогда
			ВывестиДанныеНезавершенныеПретензии(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["НезавершенныеПретензии"]],
			                                    ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["АктыОРасхожденияхПослеОтгрузки"] <> Неопределено Тогда
			ВывестиДанныеНеотработанныеАктыОРасхожденияхПослеОтгрузки(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["АктыОРасхожденияхПослеОтгрузки"]],
			                                               ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["Обороты"] <> Неопределено Тогда
			ВывестиДанныеОбороты(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["Обороты"]],
			                     ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ДоступныеСоглашения"] <> Неопределено Тогда
			ВывестиДанныеОДоступныхСоглашениях(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ДоступныеСоглашения"]],
			                                   ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ТекущиеСделки"] <> Неопределено Тогда
			ВывестиДанныеОТекущихСделкахСКлиентом(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ТекущиеСделки"]],
			                                      ТаблицаОтчета,Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["Заказы"] <> Неопределено Тогда
			ВывестиДанныеОЗаказахПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["Заказы"]],
			                              ТаблицаОтчета, Макет, НСтр("ru='клиента'"));
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ЗаявкиНаВозврат"] <> Неопределено Тогда
			ВывестиДанныеОЗаказахПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ЗаявкиНаВозврат"]],
			                              ТаблицаОтчета, Макет, "ЗаявкаНаВозврат");
		КонецЕсли;
		
		CRMЛокализация.ПриВыводеДанныхКлиентаОтчетДосьеПартнера(ЭтотОбъект, МассивРезультатовЗапросовПоПартнеру, СоответствиеЗапросыДанные, ТаблицаОтчета, Макет);

	КонецЕсли;
	Если ДанныеПоставщика Тогда
		Если СоответствиеЗапросыДанные["СоглашенияСПоставщиком"] <> Неопределено Тогда
			ВывестиДанныеОСоглашенияхСПоставщиком(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["СоглашенияСПоставщиком"]],
			                                      ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ЗаказыПоставщику"] <> Неопределено Тогда
			ВывестиДанныеОЗаказахПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ЗаказыПоставщику"]],
			                              ТаблицаОтчета, Макет,НСтр("ru='поставщику'"));
		КонецЕсли;
	КонецЕсли;
	Если ТекущаяАктивность Тогда
		Если СоответствиеЗапросыДанные["НеотработанныеВзаимодействия"] <> Неопределено Тогда
			ВывестиДанныеОНеотработанныхВзаимодействиях(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["НеотработанныеВзаимодействия"]],
			                                            ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["УчастиеВСделках"] <> Неопределено Тогда
			ВывестиДанныеОСделкахСУчастиемПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["УчастиеВСделках"]],
			                                       МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["УчастиеВСделках"]+1],
			                                       ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["ПрочиеПроекты"] <> Неопределено Тогда
			ВывестиДанныеОУчастиеПартнераВПрочихПроектах(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ПрочиеПроекты"]],
			                                             МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["ПрочиеПроекты"]+1],
			                                             ТаблицаОтчета, Макет);
		КонецЕсли;
	КонецЕсли;
	Если Классификация Тогда
		Если СоответствиеЗапросыДанные["КлассификацияКлиента"] <> Неопределено Тогда
			ВывестиДанныеОКлассификацииКлиента(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КлассификацияКлиента"]],
			                                   МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["КлассификацияКлиента"]+1],
			                                   ТаблицаОтчета, Макет);
		КонецЕсли;
		Если СоответствиеЗапросыДанные["СегментыПартнера"] <> Неопределено Тогда
			ВывестиДанныеОСегментахПартнера(МассивРезультатовЗапросовПоПартнеру[СоответствиеЗапросыДанные["СегментыПартнера"]],
			                                ТаблицаОтчета, Макет);
		КонецЕсли;
	КонецЕсли;
	
	ВывестиОбластьБезПараметров("ПустаяСтрока",Макет,ТаблицаОтчета);
	ТаблицаОтчета.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Функция МногострочноеПредставлениеКонтактнойИнформации(КонтактнаяИнформация)

	ПредставлениеКИ = "";
	
	Для каждого СтрокаКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКонтактнойИнформации.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		ПредставлениеКИ = ПредставлениеКИ + "
		|" + СтрокаКонтактнойИнформации.Вид + ": " + СтрокаКонтактнойИнформации.Представление;
	
	КонецЦикла;
	
	Возврат Прав(ПредставлениеКИ,СтрДлина(ПредставлениеКИ)-1);

КонецФункции

Функция МногострочноеПредставлениеРолейКонтактногоЛица(РолиКонтактногоЛица)
	
	ПредставлениеРоли = "";
	ТаблицаРолей = РолиКонтактногоЛица.Выгрузить();
	ТаблицаРолей.Сортировать("НомерСтроки Убыв");
	
	Для каждого СтрокаРоль Из ТаблицаРолей Цикл
		
		ПредставлениеРоли = ПредставлениеРоли + "
		|" + СтрокаРоль.РольКонтактногоЛица;
		
	КонецЦикла;
	
	Возврат Прав(ПредставлениеРоли,СтрДлина(ПредставлениеРоли)-1);
	
КонецФункции

Функция СтрокаРолейПартнераВСделке(ВыборкаДеталиРоли)
	
	ФормируемаяСтрока = "";
	Пока ВыборкаДеталиРоли.Следующий() Цикл
		
		Если СтрЧислоВхождений(ФормируемаяСтрока,ВыборкаДеталиРоли.РольПартнера) = 0 Тогда
			
			ФормируемаяСтрока = ФормируемаяСтрока + ВыборкаДеталиРоли.РольПартнера + ", ";
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаДеталиРоли.Сбросить();
	
	Возврат Лев(ФормируемаяСтрока,СтрДлина(ФормируемаяСтрока)-2) ;
	
КонецФункции

Функция СтрокаРолейКонтактныхЛицВСделке(ВыборкаДеталиРоли)
	
	ФормируемаяСтрока = "";
	Пока ВыборкаДеталиРоли.Следующий() Цикл
		
		ДлинаСтрокиДоОбработки = СтрДлина(ФормируемаяСтрока);
		
		ФормируемаяСтрока = ФормируемаяСтрока + ?(ЗначениеЗаполнено(ВыборкаДеталиРоли.КонтактноеЛицо),Строка(ВыборкаДеталиРоли.КонтактноеЛицо)
		                    + ?(ЗначениеЗаполнено(ВыборкаДеталиРоли.РольКонтактногоЛица)," - " + ВыборкаДеталиРоли.РольКонтактногоЛица,""),"");
		
		Если  СтрДлина(ФормируемаяСтрока) > ДлинаСтрокиДоОбработки Тогда
			ФормируемаяСтрока = ФормируемаяСтрока + "
			|";
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаДеталиРоли.Сбросить();
	
	Возврат Лев(ФормируемаяСтрока,СтрДлина(ФормируемаяСтрока)-1);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли