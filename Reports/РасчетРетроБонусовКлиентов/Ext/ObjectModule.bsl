//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Отчет.РасчетРетроБонусовКлиентов.МодульОбъекта.ПриКомпоновкеРезультата");
	
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиОтчетаВФорме = КомпоновщикНастроек.ПолучитьНастройки();
	ДокументУсловийРетроБонусов = ДокументИзДополнительныхСвойствИлиПараметров(НастройкиОтчетаВФорме);
	
	Если НЕ ЗначениеЗаполнено(ДокументУсловийРетроБонусов) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначенияРеквизитов = ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов);
	Отказ = Ложь;
	ПроверитьРеквизитыУсловий(ЗначенияРеквизитов, Отказ, Истина);
	
	Если ЗначенияРеквизитов.Исправление = Истина Тогда
		ИсходныйДокумент = ЗначенияРеквизитов.ИсправляемыйДокумент; // ДокументСсылка.УсловияРетроБонусовКлиентов
	Иначе
		ИсходныйДокумент = ДокументУсловийРетроБонусов;
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчетаВФорме, "ИсходныйДокумент", ИсходныйДокумент);
	
	ПараметрыУсловийРетроБонусов = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ИсходныйДокумент);
	
	ДокументНачисление = Документы.НачислениеРетроБонусовКлиента.ПустаяСсылка();
	НастройкиОтчетаВФорме.ДополнительныеСвойства.Свойство("ДокументНачислениеРетроБонусов", ДокументНачисление);
	Если ЗначениеЗаполнено(ДокументНачисление) Тогда
		
		Отказ = Ложь;
		РеквизитыНачисления = ЗначенияРеквизитовДокументаНачисления(ДокументНачисление);
		ПроверитьРеквизитыНачисления(ПараметрыУсловийРетроБонусов, РеквизитыНачисления, Отказ, Истина);
		
	КонецЕсли;
	
	ДополнительныеСвойства = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ПерваяКомпоновкаПриОткрытии = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ПерваяКомпоновкаПриОткрытии", Ложь);
	
	ПараметрыВарианта = ПараметрыВарианта(НастройкиОтчетаВФорме, КомпоновщикНастроек);
	
	ПредыдущиеПараметрыУсловийРетроБонусов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ПараметрыУсловийРетроБонусов", ПараметрыУсловийРетроБонусов);
	ИзменилисьПараметрыУсловий = ИзменилисьПараметрыУсловийРетроБонусов(
		ПредыдущиеПараметрыУсловийРетроБонусов, ПараметрыУсловийРетроБонусов);
	Если ИзменилисьПараметрыУсловий
	   И ПараметрыВарианта.ВариантМодифицированПользователем Тогда
		
		ВызватьИсключение НСтр("ru = 'Изменились реквизиты документа условий ретро-бонусов. Для актуализации варианта и настроек необходимо открыть отчет заново.'");
		
	КонецЕсли;
	
	ТекстЗапроса = Отчеты.РасчетРетроБонусовКлиентов.ТекстЗапроса(ПараметрыУсловийРетроБонусов, ПараметрыВарианта);
	СхемаКомпоновкиДанных.НаборыДанных.РасчетРетроБонусовКлиентов.Запрос = ТекстЗапроса;
	
	Если ПерваяКомпоновкаПриОткрытии
	 ИЛИ ИзменилисьПараметрыУсловий Тогда
		
		КомпоновщикНастроекПоВарианту = Новый КомпоновщикНастроекКомпоновкиДанных;
		НастроитьСхемуКомпоновкиДанных(
			ПараметрыУсловийРетроБонусов,
			СхемаКомпоновкиДанных,
			КомпоновщикНастроекПоВарианту,
			НастройкиОтчетаВФорме,
			ПараметрыВарианта);
		НастройкиОтчета = КомпоновщикНастроекПоВарианту.ПолучитьНастройки();
		
		ПеренестиИспользуемыеОтборы(СхемаКомпоновкиДанных, НастройкиОтчета, НастройкиОтчетаВФорме);
		
		СохранитьПараметрыУсловийРетроБонусов(ПараметрыУсловийРетроБонусов, ДополнительныеСвойства);
		
	Иначе
		
		НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
		
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.ЗаполнитьЭлементы(
		НастройкиОтчета.ПараметрыДанных,
		НастройкиОтчетаВФорме.ПараметрыДанных);
	
	Если ПараметрыВарианта.ЭтоРасшифровка Тогда
		
		// для расшифровки период всегда равен периоду исходного отчета
		ПараметрДатаНачала = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, "ДатаНачала");
		ПараметрДатаОкончания = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, "ДатаОкончания");
		ПериодОтчета = Новый СтандартныйПериод(ПараметрДатаНачала.Значение, ПараметрДатаОкончания.Значение);
		
		ПараметрКонтрагентРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, "Контрагент");
		КонтрагентРасшифровки = ПараметрКонтрагентРасшифровки.Значение;
		Если ТипЗнч(КонтрагентРасшифровки) = Тип("Структура") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НастройкиОтчета, "Контрагент", КонтрагентРасшифровки.ПравоеЗначение, Истина);
		КонецЕсли;
		КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Контрагент").Использование = Истина;
		
		ПараметрПартнерРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчетаВФорме, "Партнер");
		ПартнерРасшифровки = ПараметрПартнерРасшифровки.Значение;
		Если ТипЗнч(ПартнерРасшифровки) = Тип("Структура") Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НастройкиОтчета, "Партнер", ПартнерРасшифровки.ПравоеЗначение, Истина);
		КонецЕсли;
		КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Партнер").Использование = Истина;
		
	Иначе
		
		ПараметрПериодОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
			КомпоновщикНастроек.ПользовательскиеНастройки,
			"ПериодОтчета");
		ПериодОтчета = ПараметрПериодОтчета.Значение; // СтандартныйПериод
		
		ПроверитьИсправитьПериодОтчета(ПериодОтчета, ПараметрыУсловийРетроБонусов);
		
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек.ПользовательскиеНастройки, "ПериодОтчета", ПериодОтчета);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ПериодОтчета", ПериодОтчета);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ДатаНачала", ПериодОтчета.ДатаНачала);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ДатаОкончания", КонецДня(ПериодОтчета.ДатаОкончания));
	
	СписокОрганизаций = Новый СписокЗначений(); // СписокЗначений Из СправочникСсылка.Организации
	СписокОрганизаций.Добавить(ПараметрыУсловийРетроБонусов.Организация);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "Организация", СписокОрганизаций);
	
	ИсключаемыеХозяйственныеОперации = Отчеты.РасчетРетроБонусовКлиентов.ИсключаемыеХозяйственныеОперации();
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ИсключаемыеХозяйственныеОперации", ИсключаемыеХозяйственныеОперации);
	
	ИсключаемыеНастройкиХозОпераций = Отчеты.РасчетРетроБонусовКлиентов.ИсключаемыеНастройкиХозяйственныхОпераций();
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
		НастройкиОтчета, "ИсключаемыеНастройкиХозяйственныхОпераций", ИсключаемыеНастройкиХозОпераций);
	
	Если ПерваяКомпоновкаПриОткрытии
	 ИЛИ ИзменилисьПараметрыУсловий Тогда
		
		КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);
		КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
		ДополнительныеСвойства.Вставить("ВариантМодифицирован", Истина);
		ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
		Если ИзменилисьПараметрыУсловий Тогда
			ДополнительныеСвойства.Вставить("ПерваяКомпоновкаПриОткрытии", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	КлючВариантаРасшифровкиПоНоменклатуре = КлючВариантаРасшифровкиПоНоменклатуре(ПараметрыУсловийРетроБонусов);
	ДополнительныеСвойства.Вставить("КлючВариантаРасшифровкиПоНоменклатуре", КлючВариантаРасшифровкиПоНоменклатуре);
	КлючВариантаРасшифровкиПоДокументам = КлючВариантаРасшифровкиПоДокументам(ПараметрыУсловийРетроБонусов);
	ДополнительныеСвойства.Вставить("КлючВариантаРасшифровкиПоДокументам", КлючВариантаРасшифровкиПоДокументам);
	
	// временное включение доступности служебных параметров для вывода в шапку отчета
	СлужебныеПараметры = ИменаСлужебныхПараметров();
	Для Каждого ИмяПараметра Из СлужебныеПараметры Цикл
		СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Ложь;
	КонецЦикла;
	
	ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, 1, "ОпределениеУсловийУстановкаПараметров");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	МенеджерВТ = ВнешниеВременныеТаблицыДляОтчета(ИсходныйДокумент, ПараметрыУсловийРетроБонусов, Замер);
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина,, МенеджерВТ);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// отключение доступности служебных параметров для скрытия из формы настроек
	Для Каждого ИмяПараметра Из СлужебныеПараметры Цикл
		СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Истина;
	КонецЦикла;
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
	Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре Тогда
		ИмяШага = "КомпоновкаРасшифровкиПоНоменклатуре";
	ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
		ИмяШага = "КомпоновкаРасшифровкиПоДокументам";
	ИначеЕсли ПараметрыВарианта.РежимРасшифровки Тогда
		ИмяШага = "КомпоновкаРасшифровки";
	Иначе
		ИмяШага = "КомпоновкаОсновногоВарианта";
	КонецЕсли;
	Если Замер["КлючеваяОперация"] <> Неопределено Тогда
		Замер["КлючеваяОперация"] = Замер["КлючеваяОперация"] + "." + ИмяШага;
	КонецЕсли;
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, ДокументРезультат.ВысотаТаблицы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - См. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.ФормироватьСразу = Истина;
	Настройки.РазрешеноИзменятьСтруктуру = Истина;
	Настройки.РазрешеноВыбиратьИНастраиватьВариантыБезСохранения = Истина;
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПередЗагрузкойВариантаНаСервере = Истина;
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета:
//      * Отчет - ОтчетОбъект.РасчетРетроБонусовКлиентов
//      * Параметры - Структура:
//         ** ПараметрКоманды - ДокументСсылка.УсловияРетроБонусовКлиентов
//   Отказ - Булево - Признак отказа от создания формы.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//   СтандартнаяОбработка - Булево - Признак выполнения стандартной (системной) обработки события.
//      См. описание одноименного параметра "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
// См. также:
//   Процедура для вывода добавленных команд в форму: ОтчетыСервер.ВывестиКоманду().
//   Глобальный обработчик этого события: ОтчетыПереопределяемый.ПриСозданииНаСервере().
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	// Помещаем параметры в реквизиты формы отчета
	ДобавляемыеРеквизитыФормы = Новый Массив(); // Массив из РеквизитФормы
	
	ТипСсылкаНаДокументУсловий = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	РеквизитДокументУсловий = Новый РеквизитФормы("ДокументУсловийРетроБонусов", ТипСсылкаНаДокументУсловий);
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитДокументУсловий);
	
	ТипСсылкаНаДокументНачисление = Новый ОписаниеТипов("ДокументСсылка.НачислениеРетроБонусовКлиента");
	РеквизитДокументНачисление = Новый РеквизитФормы("ДокументНачислениеРетроБонусов", ТипСсылкаНаДокументНачисление);
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитДокументНачисление);
	
	РеквизитСсылкаНаДокумент = Новый РеквизитФормы("ОчищатьПериодПользовательскихНастроек", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитСсылкаНаДокумент);
	
	РеквизитПерваяКомпоновкаПриОткрытии = Новый РеквизитФормы("ПерваяКомпоновкаПриОткрытии", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизитыФормы.Добавить(РеквизитПерваяКомпоновкаПриОткрытии);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизитыФормы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ПерваяКомпоновкаПриОткрытии", Истина);
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		ДокументНачисление = Документы.НачислениеРетроБонусовКлиента.ПустаяСсылка();
		ТипПараметра = ТипЗнч(Параметры.ПараметрКоманды);
		Если ТипПараметра = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
			
			ДокументУсловийРетроБонусов = Параметры.ПараметрКоманды;
			
		ИначеЕсли ТипПараметра = Тип("ДокументСсылка.НачислениеРетроБонусовКлиента") Тогда
			
			ДокументНачисление = Параметры.ПараметрКоманды;
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Форма, "ДокументНачислениеРетроБонусов", ДокументНачисление);
			РеквизитыНачисления = ЗначенияРеквизитовДокументаНачисления(ДокументНачисление);
			ДокументУсловийРетроБонусов = РеквизитыНачисления.ДокументУсловий;
			
		Иначе
			
			ШаблонОшибки = НСтр("ru = 'Некорректный тип параметра команды ""%1""'");
			ТипПараметраСтрокой = Строка(ТипПараметра);
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, ТипПараметраСтрокой);
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
		ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
			Форма, "ОчищатьПериодПользовательскихНастроек", Истина);
		
		ЗначенияРеквизитов = ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов);
		ПроверитьРеквизитыУсловий(ЗначенияРеквизитов, Отказ);
		
		Если ЗначениеЗаполнено(ДокументНачисление) Тогда
			
			Если ЗначенияРеквизитов.Исправление = Истина Тогда
				ИсходныйДокумент = ЗначенияРеквизитов.ИсправляемыйДокумент;
			Иначе
				ИсходныйДокумент = ДокументУсловийРетроБонусов;
			КонецЕсли;
			ПараметрыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ИсходныйДокумент);
			ПроверитьРеквизитыНачисления(ПараметрыУсловий, РеквизитыНачисления, Отказ);
			
			КлючВарианта = КлючВариантаРасшифровкиПоНоменклатуре(ПараметрыУсловий);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "КлючТекущегоВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "Параметры.КлючВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "НастройкиОтчета.КлючПредопределенногоВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ФормаПараметры.НачальныйКлючВарианта", КлючВарианта);
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ФормаПараметры.НачальныйКлючПредопределенногоВарианта", КлючВарианта);
			
			Отбор = Новый Структура;
			Отбор.Вставить("Организация", РеквизитыНачисления.Организация);
			Отбор.Вставить("Валюта", РеквизитыНачисления.Валюта);
			Отбор.Вставить("ДатаНачала", РеквизитыНачисления.НачалоПериода);
			Отбор.Вставить("ДатаОкончания", РеквизитыНачисления.ОкончаниеПериода);
			Если ЗначениеЗаполнено(РеквизитыНачисления.Контрагент) Тогда
				Отбор.Вставить("Контрагент", РеквизитыНачисления.Контрагент);
			КонецЕсли;
			Если ЗначениеЗаполнено(РеквизитыНачисления.Партнер) Тогда
				Отбор.Вставить("Партнер", РеквизитыНачисления.Партнер);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, "ФормаПараметры.Отбор", Отбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отключение пользовательской доступности параметров расшифровки в основных вариантах
	
	ВариантыРасшифровкиПоДокументам = ИменаВариантовРасшифровкиПоДокументам();
	ВариантыРасшифровкиПоНоменклатуре = ИменаВариантовРасшифровкиПоНоменклатуре();
	ЭтоРасшифровка = (ВариантыРасшифровкиПоДокументам.Найти(Форма.КлючТекущегоВарианта) <> Неопределено)
		ИЛИ (ВариантыРасшифровкиПоНоменклатуре.Найти(Форма.КлючТекущегоВарианта) <> Неопределено);
	
	Если НЕ ЭтоРасшифровка Тогда
		
		ИменаПараметров = ИменаПараметровДляРасшифровки();
		Для Каждого ИмяПараметра Из ИменаПараметров Цикл
			СхемаКомпоновкиДанных.Параметры[ИмяПараметра].ОграничениеИспользования = Истина;
		КонецЦикла;
		
		ЗначениеВДанныеФормы(ЭтотОбъект, Форма.Отчет);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных - Настройки для загрузки в компоновщик настроек.
//
// См. также:
//   "Расширение управляемой формы для отчета.ПриЗагрузкеВариантаНаСервере" в синтакс-помощнике.
//
Процедура ПередЗагрузкойВариантаНаСервере(Форма, НовыеНастройкиКД) Экспорт
	
	ДокументУсловийРетроБонусов = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "ДокументУсловийРетроБонусов");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
	
	ДокументНачисление = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "ДокументНачислениеРетроБонусов");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("ДокументНачислениеРетроБонусов", ДокументНачисление);
	
	РежимРасшифровки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
		Форма, "РежимРасшифровки");
	НовыеНастройкиКД.ДополнительныеСвойства.Вставить("РежимРасшифровки", РежимРасшифровки);
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - См. ОбщаяФорма.ФормаОтчета
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться, если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено, когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	ПараметрыВарианта = ПараметрыВарианта(НовыеНастройкиКД, КомпоновщикНастроек);
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения")
	   И Контекст.ТипФормыОтчета = ТипФормыОтчета.Основная Тогда
		
		ПерваяКомпоновкаПриОткрытии = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "ПерваяКомпоновкаПриОткрытии");
		Если ПерваяКомпоновкаПриОткрытии = Истина Тогда
			НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ПерваяКомпоновкаПриОткрытии", ПерваяКомпоновкаПриОткрытии);
		КонецЕсли;
		
		// Для контекстного отчета очищаем сохраняемый в пользовательских настройках период, заполним по условиям РБ 
		
		ОчищатьПериодПользовательскихНастроек = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "ОчищатьПериодПользовательскихНастроек");
		Контекстный = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(
			Контекст, "НастройкиОтчета.Контекстный");
		
		Если Контекстный
		   И ОчищатьПериодПользовательскихНастроек Тогда
			
			ПустаяДата = '00010101';
			
			ПериодОтчета = Новый СтандартныйПериод;
			ПериодОтчета.ДатаНачала = ПустаяДата;
			ПериодОтчета.ДатаОкончания = ПустаяДата;
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НовыеПользовательскиеНастройкиКД,
				"ПериодОтчета",
				ПериодОтчета,
				Истина);
			
			ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(
				Контекст, "ОчищатьПериодПользовательскихНастроек", Ложь);
			
		КонецЕсли;
		
		// Удаляем исходные отборы по партнеру/контрагенту из параметров формы, иначе они затирают пользовательские настройки
		
		Если НЕ ПерваяКомпоновкаПриОткрытии Тогда
			
			ИменаПараметров = ИменаПараметровДляРасшифровки();
			ИменаПараметров.Добавить("Валюта");
			
			Для Каждого ИмяПараметра Из ИменаПараметров Цикл
				
				Если Контекст.ФормаПараметры.Отбор.Свойство(ИмяПараметра) Тогда
					Контекст.ФормаПараметры.Отбор.Удалить(ИмяПараметра);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Отключение пользовательского отбора по контрагенту и партнеру в расшифровке
	
	Если ПараметрыВарианта.ЭтоРасшифровка Тогда
		
		ПолеКомпоновкиКонтрагент = Новый ПолеКомпоновкиДанных("Контрагент");
		ПолеКомпоновкиПартнер = Новый ПолеКомпоновкиДанных("Партнер");
		
		Для Каждого Элемент Из НовыеНастройкиКД.Отбор.Элементы Цикл
			
			Если Элемент.ЛевоеЗначение = ПолеКомпоновкиПартнер
			 ИЛИ Элемент.ЛевоеЗначение = ПолеКомпоновкиКонтрагент Тогда
				
				Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				
				ИдентификаторНастройки = Элемент.ИдентификаторПользовательскойНастройки;
				Отбор = НовыеПользовательскиеНастройкиКД.Элементы.Найти(ИдентификаторНастройки);
				Если Отбор <> Неопределено Тогда
					
					Отбор.Использование = Ложь;
					Отбор.ПравоеЗначение = Неопределено;
					Отбор.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Отключение пользовательской настройки периода в расшифровке
	
	Если ПараметрыВарианта.ЭтоРасшифровка
	 ИЛИ ПараметрыВарианта.РежимРасшифровки = Истина Тогда
		
		ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, "ПериодОтчета");
		Если ПараметрПериод <> Неопределено Тогда
			ПараметрПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
		ПараметрПериод = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеПользовательскиеНастройкиКД, "ПериодОтчета");
		Если ПараметрПериод <> Неопределено Тогда
			ПараметрПериод.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДокументИзДополнительныхСвойствИлиПараметров(НастройкиОтчетаВФорме)
	
	ДокументУсловийРетроБонусов = Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка();
	ПараметрДанных = Неопределено;
	НастройкиОтчетаВФорме.ДополнительныеСвойства.Свойство("ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
	
	Если ДокументУсловийРетроБонусов <> Неопределено
	   И НЕ ДокументУсловийРетроБонусов.Пустая() Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			НастройкиОтчетаВФорме, "ДокументУсловийРетроБонусов", ДокументУсловийРетроБонусов);
		
	Иначе
		
		ПараметрДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("ДокументУсловийРетроБонусов");
		
	КонецЕсли;
	
	Если ПараметрДанных <> Неопределено Тогда
		
		ДокументУсловийРетроБонусов = ПараметрДанных.Значение; // ДокументСсылка.УсловияРетроБонусовКлиентов
		
	КонецЕсли;
	
	Возврат ДокументУсловийРетроБонусов;
	
КонецФункции

Функция ЗначенияРеквизитовДокументаУсловий(ДокументУсловийРетроБонусов)
	
	Реквизиты = "Проведен, БезРасчета, Статус, Исправление, ИсправляемыйДокумент";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУсловийРетроБонусов, Реквизиты);
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ЗначенияРеквизитовДокументаНачисления(ДокументНачисление)
	
	Реквизиты = "Проведен, ДокументУсловий, Организация, Контрагент, Партнер, НачалоПериода, ОкончаниеПериода, Валюта";
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументНачисление, Реквизиты);
	Возврат ЗначенияРеквизитов;
	
КонецФункции

Функция ПараметрыВарианта(НастройкиОтчетаВФорме, КомпоновщикНастроек)
	
	ПараметрыВарианта = Отчеты.РасчетРетроБонусовКлиентов.НовыеПараметрыВарианта();
	КлючВарианта = НастройкиОтчетаВФорме.ДополнительныеСвойства.КлючВарианта; // Строка
	ПараметрыВарианта.КлючВарианта = КлючВарианта;
	
	ВариантыРасшифровкиПоДокументам = ИменаВариантовРасшифровкиПоДокументам();
	ВариантыРасшифровкиПоНоменклатуре = ИменаВариантовРасшифровкиПоНоменклатуре();
	
	ПараметрыВарианта.ЭтоРасшифровкаПоДокументам = (ВариантыРасшифровкиПоДокументам.Найти(КлючВарианта) <> Неопределено);
	ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре = (ВариантыРасшифровкиПоНоменклатуре.Найти(КлючВарианта) <> Неопределено);
	ПараметрыВарианта.ЭтоРасшифровка = (ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре
		ИЛИ ПараметрыВарианта.ЭтоРасшифровкаПоДокументам);
	
	ПараметрыВарианта.РежимРасшифровки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		НастройкиОтчетаВФорме.ДополнительныеСвойства, "РежимРасшифровки", Ложь);
		
	Если ПараметрыВарианта.РежимРасшифровки Тогда
		
		Для Каждого ЭлементСтруктуры Из НастройкиОтчетаВФорме.Структура Цикл
			
			Если ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ПараметрыВарианта.ПоляРасшифровки.Добавить(ПолеГруппировки.Поле);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыВарианта.ВариантМодифицированПользователем = (ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ВариантМодифицирован", Ложь)
		ИЛИ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства, "ПользовательскиеНастройкиМодифицированы", Ложь));
	
	Возврат ПараметрыВарианта;
	
КонецФункции

Функция ИменаВариантовРасшифровкиПоДокументам()
	
	ВариантыРасшифровкиПоДокументам = Новый Массив; // Массив Из Строка
	ВариантыРасшифровкиПоДокументам.Добавить("НачисленияПоПартнерамРасшифровкаПоДокументам");
	ВариантыРасшифровкиПоДокументам.Добавить("НачисленияПоКонтрагентамРасшифровкаПоДокументам");
	ВариантыРасшифровкиПоДокументам.Добавить("НачисленияПоПартнерамКонтрагентамРасшифровкаПоДокументам");
	Возврат ВариантыРасшифровкиПоДокументам;
	
КонецФункции

Функция ИменаВариантовРасшифровкиПоНоменклатуре()
	
	ВариантыРасшифровкиПоНоменклатуре = Новый Массив; // Массив Из Строка
	ВариантыРасшифровкиПоНоменклатуре.Добавить("НачисленияПоПартнерамРасшифровкаПоНоменклатуре");
	ВариантыРасшифровкиПоНоменклатуре.Добавить("НачисленияПоКонтрагентамРасшифровкаПоНоменклатуре");
	ВариантыРасшифровкиПоНоменклатуре.Добавить("НачисленияПоПартнерамКонтрагентамРасшифровкаПоНоменклатуре");
	Возврат ВариантыРасшифровкиПоНоменклатуре;
	
КонецФункции

Функция ЗаголовокОтчета(ПараметрыУсловийРетроБонусов)
	
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКлиенту Тогда
		
		ЗаголовокОтчета = НСтр("ru = 'Расчет ретро-бонусов клиентов (по клиенту)'");
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
		
		ЗаголовокОтчета = НСтр("ru = 'Расчет ретро-бонусов клиентов (по контрагенту)'");
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагентуКлиенту Тогда
		
		ЗаголовокОтчета = НСтр("ru = 'Расчет ретро-бонусов клиентов (по контрагенту и клиенту)'");
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ДетализацияРасчетаУчастниковПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура НастроитьСхемуКомпоновкиДанных(ПараметрыУсловийРетроБонусов, СхемаКомпоновкиДанных, КомпоновщикНастроекПоВарианту, НастройкиОтчетаВФорме, ПараметрыВарианта)
	
	ВариантыОтчета = СхемаКомпоновкиДанных.ВариантыНастроек;
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ВидыБазыРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов;
	
	Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКлиенту Тогда
		
		Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.НачисленияПоПартнерамРасшифровкаПоНоменклатуре;
		ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.НачисленияПоПартнерамРасшифровкаПоДокументам;
		Иначе
			КомпонуемыйВариантОтчета = ВариантыОтчета.РасчетРетроБонусовКлиентовПоПартнерам;
		КонецЕсли;
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
		
		Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре
		 ИЛИ ПараметрыВарианта.РежимРасшифровки = Истина Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.НачисленияПоКонтрагентамРасшифровкаПоНоменклатуре;
		ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.НачисленияПоКонтрагентамРасшифровкаПоДокументам;
		Иначе
			КомпонуемыйВариантОтчета = ВариантыОтчета.РасчетРетроБонусовКлиентовПоКонтрагентам;
		КонецЕсли;
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагентуКлиенту Тогда
		
		Если ПараметрыВарианта.ЭтоРасшифровкаПоНоменклатуре Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.НачисленияПоПартнерамКонтрагентамРасшифровкаПоНоменклатуре;
		ИначеЕсли ПараметрыВарианта.ЭтоРасшифровкаПоДокументам Тогда
			КомпонуемыйВариантОтчета = ВариантыОтчета.НачисленияПоПартнерамКонтрагентамРасшифровкаПоДокументам;
		Иначе
			КомпонуемыйВариантОтчета = ВариантыОтчета.РасчетРетроБонусовКлиентовПоПартнерамКонтрагентам;
		КонецЕсли;
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ДетализацияРасчетаУчастниковПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	КомпоновщикНастроекПоВарианту.ЗагрузитьНастройки(КомпонуемыйВариантОтчета.Настройки);
	
	ИсточникДоступныхНастроекКД = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпоновщикНастроекПоВарианту.Инициализировать(ИсточникДоступныхНастроекКД);
	ПараметрыВывода = КомпоновщикНастроекПоВарианту.Настройки.ПараметрыВывода;
	
	// переносим установленные параметры вывода из настроек отчета в форме
	
	Для каждого ПараметрВыводаПоУмолчанию Из НастройкиОтчетаВФорме.ПараметрыВывода.Элементы Цикл
		
		Если НЕ ПараметрВыводаПоУмолчанию.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрВывода = ПараметрыВывода.НайтиЗначениеПараметра(ПараметрВыводаПоУмолчанию.Параметр);
		Если ПараметрВывода = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрВывода, ПараметрВыводаПоУмолчанию);
		
	КонецЦикла;
	
	// переносим настройку структуры из настроек компоновки формы в текущие настройки
	
	Если ПараметрыВарианта.ВариантМодифицированПользователем
	 ИЛИ ПараметрыВарианта.РежимРасшифровки Тогда
		
		КомпоновщикНастроекПоВарианту.Настройки.Структура.Очистить();
		Для Каждого ГруппировкаИсточник Из НастройкиОтчетаВФорме.Структура Цикл
			
			ГруппировкаПриемник = КомпоновкаДанныхКлиентСервер.ДобавитьГруппировку(КомпоновщикНастроекПоВарианту.Настройки);
			КомпоновкаДанныхКлиентСервер.СкопироватьНастройкиКомпоновкиДанных(ГруппировкаПриемник, ГруппировкаИсточник);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// настраиваем заголовок
	
	ПараметрВывода = ПараметрыВывода.Элементы.Найти("Title");
	Если ПараметрыВарианта.ЭтоРасшифровка Тогда
		ПараметрВывода.Значение = "";
		ПараметрВывода.Использование = Ложь;
	Иначе
		ПараметрВывода.Значение = ЗаголовокОтчета(ПараметрыУсловийРетроБонусов);
		ПараметрВывода.Использование = Истина;
	КонецЕсли;
	
	НастроитьВидимостьКолонок(ПараметрыУсловийРетроБонусов, КомпоновщикНастроекПоВарианту, ПараметрыВарианта);
	
	// отключение общих итогов для расчета в валюте взаиморасчетов
	
	Если ПараметрыУсловийРетроБонусов.БазаРасчетаПродаж = ВидыБазыРасчетаПродаж.ВыручкаВзаиморасчеты Тогда
		
		ВертикальноеРасположениеОбщихИтогов = ПараметрыВывода.Элементы.Найти("ВертикальноеРасположениеОбщихИтогов");
		ВертикальноеРасположениеОбщихИтогов.Значение = РасположениеИтоговКомпоновкиДанных.Нет;
		ВертикальноеРасположениеОбщихИтогов.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьВидимостьКолонок(ПараметрыУсловийРетроБонусов, КомпоновщикНастроекПоВарианту, ПараметрыВарианта)
	
	ЦелевыеПоказатели = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	БазаРасчетаПродаж = ПараметрыУсловийРетроБонусов.БазаРасчетаПродаж;
	БазаРасчетаПродажПредставление = Строка(БазаРасчетаПродаж);
	ВидыБазыРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов;
	
	ВидимостьКолонок = Новый Структура;
	ВидимостьКолонок.Вставить("СуммаВыручки", Ложь);
	ВидимостьКолонок.Вставить("СуммаВыручкиБезНДС", Ложь);
	ВидимостьКолонок.Вставить("СуммаВБазовыхЦенах", Ложь);
	ВидимостьКолонок.Вставить("СуммаПлан", Ложь);
	ВидимостьКолонок.Вставить("КоличествоПлан", Ложь);
	ВидимостьКолонок.Вставить("БазоваяЦена", Ложь);
	ВидимостьКолонок.Вставить("ПроданоПакетов", Ложь);
	ВидимостьКолонок.Вставить("Договор", Ложь);
	ВидимостьКолонок.Вставить("Соглашение", Ложь);
	
	Если БазаРасчетаПродаж = ВидыБазыРасчетаПродаж.ВыручкаУпрУчет
	 ИЛИ БазаРасчетаПродаж = ВидыБазыРасчетаПродаж.ВыручкаРеглУчет
	 ИЛИ БазаРасчетаПродаж = ВидыБазыРасчетаПродаж.ВыручкаВзаиморасчеты Тогда
		
		Если ПараметрыУсловийРетроБонусов.УчитыватьНДС Тогда
			ВидимостьКолонок.СуммаВыручки = Истина;
		Иначе
			ВидимостьКолонок.СуммаВыручкиБезНДС = Истина;
		КонецЕсли;
		
	ИначеЕсли БазаРасчетаПродаж = ВидыБазыРасчетаПродаж.ВыручкаБазовыеЦены Тогда
		
		ВидимостьКолонок.СуммаВБазовыхЦенах = Истина;
		ВидимостьКолонок.БазоваяЦена = Истина;
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестная база расчета продаж ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			БазаРасчетаПродажПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.ПоказательПродаж = ЦелевыеПоказатели.Сумма Тогда
		
		ВидимостьКолонок.СуммаПлан = Истина;
		
	ИначеЕсли ПараметрыУсловийРетроБонусов.ПоказательПродаж = ЦелевыеПоказатели.Количество
	      ИЛИ ПараметрыУсловийРетроБонусов.ПоказательПродаж = ЦелевыеПоказатели.КоличествоСовокупно
	      ИЛИ ПараметрыУсловийРетроБонусов.ПоказательПродаж = ЦелевыеПоказатели.ПакетноеПредложение Тогда
		
		ВидимостьКолонок.КоличествоПлан = Истина;
		
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.ПоказательПродаж = ЦелевыеПоказатели.ПакетноеПредложение Тогда
		ВидимостьКолонок.ПроданоПакетов = Истина;
	КонецЕсли;
	
	Если ПараметрыУсловийРетроБонусов.СоставУчастников = СоставыУчастников.Договоры Тогда
		ВидимостьКолонок.Договор = Истина;
	КонецЕсли;
	Если ПараметрыУсловийРетроБонусов.СоставУчастников = СоставыУчастников.Соглашения Тогда
		ВидимостьКолонок.Соглашение = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементВидимостиКолонок Из ВидимостьКолонок Цикл
		
		Если ЭлементВидимостиКолонок.Значение Тогда
			Продолжить;
		КонецЕсли;
		
		ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ЭлементВидимостиКолонок.Ключ);
		
		Если ЭтоПолеРасшифровки(ПараметрыВарианта, ПолеКомпоновки) Тогда
			Продолжить;
		КонецЕсли;
		
		ОтключитьИспользованиеВыбранногоПоля(КомпоновщикНастроекПоВарианту.Настройки.Выбор.Элементы, ПолеКомпоновки);
		Для Каждого СтруктураНастроек Из КомпоновщикНастроекПоВарианту.Настройки.Структура Цикл
			ОтключитьИспользованиеПоля(СтруктураНастроек, ПолеКомпоновки);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПолеРасшифровки(ПараметрыВарианта, ПолеКомпоновки)
	
	Для Каждого ПолеРасшифровки Из ПараметрыВарианта.ПоляРасшифровки Цикл
		
		Если ПолеРасшифровки = ПолеКомпоновки Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОтключитьИспользованиеПоля(СтруктураПодчиненная, ПолеКомпоновки)
	
	ОтключитьИспользованиеВыбранногоПоля(СтруктураПодчиненная.Выбор.Элементы, ПолеКомпоновки);
	
	Для Каждого ПолеГруппировки Из СтруктураПодчиненная.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Поле = ПолеКомпоновки Тогда
			ПолеГруппировки.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтруктураПодчиненная Из СтруктураПодчиненная.Структура Цикл
		ОтключитьИспользованиеПоля(СтруктураПодчиненная, ПолеКомпоновки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеВыбранногоПоля(Элементы, ПолеКомпоновки)
	
	Для Каждого ПолеВыбора Из Элементы Цикл
		
		Если ТипЗнч(ПолеВыбора) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПолеВыбора) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			ОтключитьИспользованиеВыбранногоПоля(ПолеВыбора.Элементы, ПолеКомпоновки);
		Иначе
			
			Если ПолеВыбора.Поле = ПолеКомпоновки Тогда
				ПолеВыбора.Использование = Ложь;
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КлючВариантаРасшифровкиПоНоменклатуре(ПараметрыУсловийРетроБонусов)
	
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКлиенту Тогда
		
		КлючВарианта = "НачисленияПоПартнерамРасшифровкаПоНоменклатуре";
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
		
		КлючВарианта = "НачисленияПоКонтрагентамРасшифровкаПоНоменклатуре";
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагентуКлиенту Тогда
		
		КлючВарианта = "НачисленияПоПартнерамКонтрагентамРасшифровкаПоНоменклатуре";
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ДетализацияРасчетаУчастниковПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат КлючВарианта;
	
КонецФункции

Функция КлючВариантаРасшифровкиПоДокументам(ПараметрыУсловийРетроБонусов)
	
	ДетализацияРасчетаУчастников = ПараметрыУсловийРетроБонусов.ДетализацияРасчетаУчастников;
	ДетализацияРасчетаУчастниковПредставление = Строка(ДетализацияРасчетаУчастников);
	ВидыДетализацииРасчетаУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКлиенту Тогда
		
		КлючВарианта = "НачисленияПоПартнерамРасшифровкаПоДокументам";
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагенту Тогда
		
		КлючВарианта = "НачисленияПоКонтрагентамРасшифровкаПоДокументам";
		
	ИначеЕсли ДетализацияРасчетаУчастников = ВидыДетализацииРасчетаУчастников.ПоКонтрагентуКлиенту Тогда
		
		КлючВарианта = "НачисленияПоПартнерамКонтрагентамРасшифровкаПоДокументам";
		
	Иначе
		
		ШаблонОшибки = НСтр("ru = 'Неизвестная детализация расчета по участникам ""%1"" для документа ""%2""'");
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки,
			ДетализацияРасчетаУчастниковПредставление,
			ПараметрыУсловийРетроБонусов.ДокументУсловийРетроБонусовПредставление);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Возврат КлючВарианта;
	
КонецФункции

Процедура ПроверитьИсправитьПериодОтчета(ПериодОтчета, ПараметрыУсловийРетроБонусов)
	
	ПустаяДата = '00010101';
	
	// проверка границ периода действия по условиям
	
	Если ПериодОтчета.ДатаНачала = ПустаяДата
	 ИЛИ ПериодОтчета.ДатаНачала < ПараметрыУсловийРетроБонусов.НачалоДействия
	 ИЛИ ПериодОтчета.ДатаНачала > ПараметрыУсловийРетроБонусов.ОкончаниеДействия Тогда
		
		Если ПериодОтчета.ДатаНачала <> ПустаяДата Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранная дата начала не соответствует периоду действия по условиям ретро-бонуса.
				|Дата начала будет приведена к дате начала по условиям ретро-бонуса.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		ПериодОтчета.ДатаНачала = ПараметрыУсловийРетроБонусов.НачалоДействия;
		
	КонецЕсли;
	
	Если ПериодОтчета.ДатаОкончания = ПустаяДата
	 ИЛИ ПериодОтчета.ДатаОкончания < ПараметрыУсловийРетроБонусов.НачалоДействия
	 ИЛИ ПериодОтчета.ДатаОкончания > КонецДня(ПараметрыУсловийРетроБонусов.ОкончаниеДействия) Тогда
		
		Если ПериодОтчета.ДатаОкончания <> ПустаяДата Тогда
			
			ТекстСообщения = НСтр("ru = 'Выбранная дата окончания не соответствует периоду действия по условиям ретро-бонуса.
				|Дата окончания будет приведена к дате окончания по условиям ретро-бонуса.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		ПериодОтчета.ДатаОкончания = ПараметрыУсловийРетроБонусов.ОкончаниеДействия;
		
	КонецЕсли;
	
	// проверка кратности периодичности начисления по условиям
	
	РезультатПроверкиПериодичность = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
		ПараметрыУсловийРетроБонусов.ПериодичностьУсловий,
		ПериодОтчета.ДатаНачала,
		ПериодОтчета.ДатаОкончания,
		Истина);
	
	Если РезультатПроверкиПериодичность.ЕстьНарушениеНачала Тогда
		
		ВызватьИсключение РезультатПроверкиПериодичность.ТекстОшибкиНачала;
		
	КонецЕсли;
		
	Если РезультатПроверкиПериодичность.ЕстьНарушениеОкончания Тогда
		
		ВызватьИсключение РезультатПроверкиПериодичность.ТекстОшибкиОкончания;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВнешниеВременныеТаблицыДляОтчета(ИсходныйДокумент, ПараметрыУсловийРетроБонусов, Замер)
	
	ТребуетсяПолучениеСоставаСегментовТоваров = (НЕ ПараметрыУсловийРетроБонусов.СегментыЗафиксированы)
		И ПараметрыУсловийРетроБонусов.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры;
	
	ТребуетсяПолучениеСоставаСегментовКлиентов = (НЕ ПараметрыУсловийРетроБонусов.СегментыЗафиксированы)
		И ПараметрыУсловийРетроБонусов.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров;
	
	Если ТребуетсяПолучениеСоставаСегментовТоваров
	 ИЛИ ТребуетсяПолучениеСоставаСегментовКлиентов Тогда
		МенеджерВТ = Новый МенеджерВременныхТаблиц();
	Иначе
		МенеджерВТ = Неопределено;
	КонецЕсли;
	
	ШаблонЗапроса =
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаНазначение
	|ИЗ
	|	&СоставСегментов КАК СоставСегментов";
	
	Если ТребуетсяПолучениеСоставаСегментовТоваров Тогда
		
		СоставСегментовТоваров = РетроБонусыСервер.СоставСегментовТоваров(ИсходныйДокумент);
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("СоставСегментов", СоставСегментовТоваров);
		
		ТекстЗапроса = ШаблонЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНазначение", "ВТ_СоставСегментовТоваров");
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.Выполнить();
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, 1, "ПолучениеСоставаСегментовТоваров");
		
	КонецЕсли;
	
	Если ТребуетсяПолучениеСоставаСегментовКлиентов Тогда
		
		СоставСегментовКлиентов = РетроБонусыСервер.СоставСегментовПартнеров(ИсходныйДокумент);
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.УстановитьПараметр("СоставСегментов", СоставСегментовКлиентов);
		
		ТекстЗапроса = ШаблонЗапроса;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаНазначение", "ВТ_СоставСегментовКлиентов");
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.Выполнить();
		
		ОценкаПроизводительности.ЗафиксироватьЗамерДлительнойОперации(Замер, 1, "ПолучениеСоставаСегментовПартнеров");
		
	КонецЕсли;
	
	Возврат МенеджерВТ;
	
КонецФункции

Процедура ПроверитьРеквизитыНачисления(ПараметрыУсловий, РеквизитыНачисления, Отказ, ВызыватьИсключение = Ложь)
	
	ТекстСообщения = "";
	ДетализацииУчастников = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ПроверяемыеРеквизиты = Новый Массив; // Массив Из Строка
	ПроверяемыеРеквизиты.Добавить("ДокументУсловий");
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("НачалоПериода");
	ПроверяемыеРеквизиты.Добавить("ОкончаниеПериода");
	ПроверяемыеРеквизиты.Добавить("Валюта");
	
	Если ПараметрыУсловий.ДетализацияРасчетаУчастников = ДетализацииУчастников.ПоКлиенту
	 ИЛИ ПараметрыУсловий.ДетализацияРасчетаУчастников = ДетализацииУчастников.ПоКонтрагентуКлиенту Тогда
		ПроверяемыеРеквизиты.Добавить("Партнер");
	КонецЕсли;
	
	Если ПараметрыУсловий.ДетализацияРасчетаУчастников = ДетализацииУчастников.ПоКонтрагенту
	 ИЛИ ПараметрыУсловий.ДетализацияРасчетаУчастников = ДетализацииУчастников.ПоКонтрагентуКлиенту Тогда
		ПроверяемыеРеквизиты.Добавить("Контрагент");
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'Не заполнено поле ""%1""'");
	
	Для Каждого ПроверяемыйРеквизит Из ПроверяемыеРеквизиты Цикл
		
		Если ЗначениеЗаполнено(РеквизитыНачисления[ПроверяемыйРеквизит]) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеРеквизита = Метаданные.Документы.НачислениеРетроБонусовКлиента.Реквизиты.Найти(ПроверяемыйРеквизит);
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, МетаданныеРеквизита.Синоним);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьРеквизитыУсловий(ЗначенияРеквизитов, Отказ, ВызыватьИсключение = Ложь)
	
	ТекстСообщения = "";
	
	Если ЗначенияРеквизитов.Проведен <> Истина Тогда
		ТекстСообщения = НСтр("ru = 'Документ условий ретро-бонусов не проведен. Формирование отчета выполнено не будет'");
	КонецЕсли;
	
	Если ЗначенияРеквизитов.БезРасчета = Истина Тогда
		ТекстСообщения = НСтр("ru = 'Формирование отчета не предусмотрено для ретро-бонусов с флагом ""Сумма бонуса рассчитывается вне системы""'");
	КонецЕсли;
	
	Если ЗначенияРеквизитов.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
		ТекстСообщения = НСтр("ru = 'Документ условий ретро-бонусов не согласован. Формирование отчета выполнено не будет'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ТекстСообщения;
		Иначе
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьПараметрыУсловийРетроБонусов(ПараметрыУсловийРетроБонусов, ДополнительныеСвойства)
	
	СохраняемаяСтруктура = Новый Структура;
	Колонки = ПараметрыУсловийРетроБонусов.Владелец().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		
		ЗначениеКолонки = ПараметрыУсловийРетроБонусов[Колонка.Имя];
		СохраняемаяСтруктура.Вставить(Колонка.Имя, ЗначениеКолонки);
		
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ПараметрыУсловийРетроБонусов", СохраняемаяСтруктура);
	
КонецПроцедуры

Функция ИзменилисьПараметрыУсловийРетроБонусов(ПредыдущиеПараметрыУсловийРетроБонусов, ПараметрыУсловийРетроБонусов)
	
	Колонки = ПараметрыУсловийРетроБонусов.Владелец().Колонки;
	Для Каждого Колонка Из Колонки Цикл
		
		ЗначениеНовое = ПараметрыУсловийРетроБонусов[Колонка.Имя];
		ЗначениеСтарое = ПредыдущиеПараметрыУсловийРетроБонусов[Колонка.Имя];
		Если ЗначениеНовое <> ЗначениеСтарое Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ИменаСлужебныхПараметров()
	
	ИменаПараметров = Новый Массив; // Массив Из Строка
	ИменаПараметров.Добавить("Организация");
	ИменаПараметров.Добавить("ИсходныйДокумент");
	
	Возврат ИменаПараметров;
	
КонецФункции

Функция ИменаПараметровДляРасшифровки()
	
	ИменаПараметров = Новый Массив; // Массив Из Строка
	ИменаПараметров.Добавить("Контрагент");
	ИменаПараметров.Добавить("Партнер");
	Возврат ИменаПараметров;
	
КонецФункции

Процедура ПеренестиИспользуемыеОтборы(СхемаКомпоновкиДанных, НастройкиПриемник, НастройкиИсточник)
	
	Для Каждого ЭлементИсточника Из НастройкиИсточник.Отбор.Элементы Цикл
		
		Если НЕ ЭлементИсточника.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементИсточника) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЭлементПриемника = Неопределено;
			
			Для каждого Элемент Из НастройкиПриемник.Отбор.Элементы Цикл
			
				Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Продолжить;
				КонецЕсли;
				
				Если Элемент.ЛевоеЗначение = ЭлементИсточника.ЛевоеЗначение Тогда
					ЭлементПриемника = Элемент;
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЭлементПриемника = Неопределено Тогда
				ЭлементПриемника = НастройкиПриемник.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ЭлементПриемника, ЭлементИсточника);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли