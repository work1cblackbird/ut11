//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// При компоновке результата.
// 
// Параметры:
//  ДокументРезультат - ТабличныйДокумент - Документ результат
//  ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Данные расшифровки
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ПараметрВариантОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ВариантОтчета");
	ПараметрПартнер = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Партнер");
	ПараметрКонтрагент = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Контрагент");
	ПараметрДатаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "ДатаОтчета");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрДатаОтчета", ПараметрДатаОтчета);
	СтруктураПараметров.Вставить("ПараметрВариантОтчета", ПараметрВариантОтчета);
	СтруктураПараметров.Вставить("ПараметрПартнер", ПараметрПартнер);
	СтруктураПараметров.Вставить("ПараметрКонтрагент", ПараметрКонтрагент);
	
	УстановитьДополнительныеПараметры(НастройкиОтчета, СтруктураПараметров);
	УстановитьЗаголовокОтчета(НастройкиОтчета, СтруктураПараметров);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОтчетПустой = ОтчетыСервер.ОтчетПустой(ЭтотОбъект, ПроцессорКомпоновки);
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", ОтчетПустой);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения, Неопределено - Форма отчета или форма настроек отчета.
//       Неопределено когда вызов без контекста.
//   КлючВарианта - Строка, Неопределено - Имя предопределенного
//       или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено когда вызов без контекста.
//   Настройки - См. ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт 
	
	Если КлючВарианта = "ДействующиеРетроБонусыПоКлиентуКонтекст"
	 ИЛИ КлючВарианта = "ДействующиеРетроБонусыПоКонтрагентуКонтекст" Тогда
		
		Настройки.ФормироватьСразу = Истина;
		Настройки.РазрешеноИзменятьВарианты = Ложь;
		Настройки.РазрешеноИзменятьСтруктуру = Ложь;
		
	КонецЕсли;
	
	Настройки.События.ПриСозданииНаСервере = Истина; 
	Настройки.События.ПередЗагрузкойНастроекВКомпоновщик = Истина;
	
КонецПроцедуры

// См. ОтчетыПереопределяемый.ПриСозданииНаСервере
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		Форма.НастройкиОтчета.РазрешеноВыбиратьВарианты = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается перед загрузкой новых настроек. Используется для изменения схемы компоновки.
//   Например, если схема отчета зависит от ключа варианта или параметров отчета.
//   Чтобы изменения схемы вступили в силу следует вызывать метод ОтчетыСервер.ПодключитьСхему().
//
// Параметры:
//   Контекст - См. ОбщаяФорма.ФормаОтчета
//   КлючСхемы - Строка -
//       Идентификатор текущей схемы компоновщика настроек.
//       По умолчанию не заполнен (это означает что компоновщик инициализирован на основании основной схемы).
//       Используется для оптимизации, чтобы переинициализировать компоновщик как можно реже).
//       Может не использоваться, если переинициализация выполняется безусловно.
//   КлючВарианта - Строка, Неопределено -
//       Имя предопределенного или уникальный идентификатор пользовательского варианта отчета.
//       Неопределено, когда вызов для варианта расшифровки или без контекста.
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ПередЗагрузкойНастроекВКомпоновщик(Контекст, КлючСхемы, КлючВарианта, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если КлючСхемы = КлючВарианта Тогда
		Возврат;
	КонецЕсли;
	
	Если НовыеНастройкиКД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		
		Параметры = Контекст.Параметры;
		Если Параметры.Свойство("ПараметрКоманды") Тогда
			
			ПараметрКоманды = Параметры.ПараметрКоманды; // СправочникСсылка.Партнеры, СправочникСсылка.Контрагенты
			ЗаполнитьПараметрыПоКонтексту(ПараметрКоманды, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД);
			
		КонецЕсли;
		
		ПараметрВариантОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НовыеНастройкиКД, "ВариантОтчета");
		ВариантОтчета = ПараметрВариантОтчета.Значение;
		УстановитьДоступностьПараметровДляВариантаОтчета(ВариантОтчета, СхемаКомпоновкиДанных);
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда 
		
			ПараметрОрганизация = СхемаКомпоновкиДанных.Параметры.Найти("Организация");
			
			ПараметрОрганизация.ОграничениеИспользования = Истина;
			ПараметрОрганизация.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
			ПараметрОрганизация.ЗапрещатьНезаполненныеЗначения = Ложь;
			
			ОрганизациюПоУмолчанию = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
			
			Если ЗначениеЗаполнено(ОрганизациюПоУмолчанию) Тогда
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
					НовыеНастройкиКД,
					"Организация", 
					ОрганизациюПоУмолчанию);
				
				Если НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
					
					КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
						НовыеПользовательскиеНастройкиКД,
						"Организация", 
						ОрганизациюПоУмолчанию);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОтчетыСервер.ПодключитьСхему(ЭтотОбъект, Контекст, СхемаКомпоновкиДанных, КлючСхемы);
		
		Если НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
			
			ПараметрДатаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(
				НовыеПользовательскиеНастройкиКД,
				"ДатаОтчета");
			
			Если НЕ ЗначениеЗаполнено(ПараметрДатаОтчета.Значение) Тогда
				
				ПараметрДата = ПараметрДатаОтчета.Значение; // СтандартнаяДатаНачала, Дата
				Если ТипЗнч(ПараметрДата) = Тип("СтандартнаяДатаНачала") Тогда
					
					ПараметрДата.Дата = НачалоДня(ТекущаяДатаСеанса());
					ПараметрДата.Вариант = ВариантСтандартнойДатыНачала.НачалоЭтогоДня;
					
				Иначе
					
					ПараметрДата = НачалоДня(ТекущаяДатаСеанса());
					
				КонецЕсли;
				
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
					НовыеПользовательскиеНастройкиКД,
					"ДатаОтчета", 
					ПараметрДата);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	КлючСхемы = КлючВарианта;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьДоступностьПараметровДляВариантаОтчета(ВариантОтчета, СхемаКомпоновкиДанных)
	
	ПараметрПартнер = СхемаКомпоновкиДанных.Параметры.Найти("Партнер");
	ПараметрКонтрагент = СхемаКомпоновкиДанных.Параметры.Найти("Контрагент");
	
	Если ВариантОтчета = 1 Тогда // по клиенту
		
		ПараметрПартнер.ОграничениеИспользования = Ложь;
		ПараметрПартнер.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрПартнер.ЗапрещатьНезаполненныеЗначения = Истина;
		
		ПараметрКонтрагент.ОграничениеИспользования = Истина;
		ПараметрКонтрагент.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрКонтрагент.ЗапрещатьНезаполненныеЗначения = Ложь;
		
	ИначеЕсли ВариантОтчета = 2 Тогда // по контрагенту
		
		ПараметрПартнер.ОграничениеИспользования = Истина;
		ПараметрПартнер.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрПартнер.ЗапрещатьНезаполненныеЗначения = Ложь;
		
		ПараметрКонтрагент.ОграничениеИспользования = Ложь;
		ПараметрКонтрагент.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрКонтрагент.ЗапрещатьНезаполненныеЗначения = Истина; 
		
	ИначеЕсли ВариантОтчета = 4 Тогда // по клиенту (контекст)
		
		ПараметрПартнер.ОграничениеИспользования = Истина;
		ПараметрПартнер.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрПартнер.ЗапрещатьНезаполненныеЗначения = Истина;
		
		ПараметрКонтрагент.ОграничениеИспользования = Истина;
		ПараметрКонтрагент.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрКонтрагент.ЗапрещатьНезаполненныеЗначения = Ложь;
		
	ИначеЕсли ВариантОтчета = 5 Тогда // по контрагенту (контекст)
		
		ПараметрПартнер.ОграничениеИспользования = Истина;
		ПараметрПартнер.Использование = ИспользованиеПараметраКомпоновкиДанных.Авто;
		ПараметрПартнер.ЗапрещатьНезаполненныеЗначения = Ложь;
		
		ПараметрКонтрагент.ОграничениеИспользования = Истина;
		ПараметрКонтрагент.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрКонтрагент.ЗапрещатьНезаполненныеЗначения = Истина;	
		
	Иначе // по клиенту и контрагенту
		
		ПараметрПартнер.ОграничениеИспользования = Ложь;
		ПараметрПартнер.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрПартнер.ЗапрещатьНезаполненныеЗначения = Истина;
		
		ПараметрКонтрагент.ОграничениеИспользования = Ложь;
		ПараметрКонтрагент.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		ПараметрКонтрагент.ЗапрещатьНезаполненныеЗначения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает дополнительные параметры по переданным параметрам.
// 
// Параметры:
//  НастройкиОтчета - НастройкиКомпоновкиДанных - 
//  СтруктураПараметров - Структура:
// * ПараметрПартнер - ЗначениеПараметраКомпоновкиДанных, Неопределено, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр партнер
// * ПараметрКонтрагент - ЗначениеПараметраКомпоновкиДанных, Неопределено, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр контрагент
Процедура УстановитьДополнительныеПараметры(НастройкиОтчета, СтруктураПараметров)
	
	ПараметрПартнер = СтруктураПараметров.ПараметрПартнер;
	ПараметрКонтрагент = СтруктураПараметров.ПараметрКонтрагент;
	ВариантОтчета = СтруктураПараметров.ПараметрВариантОтчета.Значение;
	
	Запрос = Новый Запрос;
	МассивЗапросов = Новый Массив;  // Массив из Строка
	
	Если ВариантОтчета = 2
	 ИЛИ ВариантОтчета = 5 Тогда
		
		ТекстЗапроса = ТекстЗапросаДанныеКонтрагента();
		МассивЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)";
		
		МассивЗапросов.Добавить(ТекстЗапроса);
		
		ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.Текст = ТекстЗапроса;

		Контрагент = ПараметрКонтрагент.Значение;
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		
		ПустаяСсылкаПартнер = Справочники.Партнеры.ПустаяСсылка();
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "Партнер", ПустаяСсылкаПартнер);
		
		Результат = Запрос.ВыполнитьПакет(); 
		
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий(); 
		ИНН = Выборка.ИНН;
		ПартнерКонтрагента = Выборка.Партнер;
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ИНН", ИНН);
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ПартнерКонтрагента", ПартнерКонтрагента);
		
		Договоры = Результат[1].Выгрузить().ВыгрузитьКолонку("Договор");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "Договоры", Договоры);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	НЕ ДоговорыКонтрагентов.РазрешенаРаботаСДочернимиПартнерами
		|	И ДоговорыКонтрагентов.Партнер = &Партнер
		|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|	И &Условие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.РазрешенаРаботаСДочернимиПартнерами
		|	И ДоговорыКонтрагентов.Партнер В(&СписокПартнеров)
		|	И ДоговорыКонтрагентов.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|	И &Условие";
		
		ТекстУсловия = "ИСТИНА";
		Если ВариантОтчета = 3 Тогда
			
			Контрагент = ПараметрКонтрагент.Значение;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			ТекстУсловия = "ДоговорыКонтрагентов.Контрагент = &Контрагент";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", ТекстУсловия);
			МассивЗапросов.Добавить(ТекстЗапроса);
			
			ТекстЗапроса = ТекстЗапросаДанныеКонтрагента();
			МассивЗапросов.Добавить(ТекстЗапроса);
			
		Иначе
			
			ПустаяСсылкаКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "Контрагент", ПустаяСсылкаКонтрагент);
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ИНН", "");
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", ТекстУсловия);
			МассивЗапросов.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
		ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
		Запрос.Текст = ТекстЗапроса;
		
		Партнер = ПараметрПартнер.Значение;
		СписокПартнеров = Новый СписокЗначений;
		ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[0].Выбрать(); 
		
		КонтрагентыПартнера = Новый СписокЗначений;  // СписокЗначений из СправочникСсылка.Контрагенты
		Пока Выборка.Следующий() Цикл
			КонтрагентыПартнера.Добавить(Выборка.Контрагент);
		КонецЦикла;
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "КонтрагентыПартнера", КонтрагентыПартнера);
		
		Договоры = Результат[1].Выгрузить().ВыгрузитьКолонку("Договор");
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "Договоры", Договоры);
		
		Если ВариантОтчета = 3 Тогда
			
			Выборка = Результат[2].Выбрать();
			Выборка.Следующий(); 
			ИНН = Выборка.ИНН;
			ПартнерКонтрагента = Выборка.Партнер;
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ИНН", ИНН);
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкиОтчета, "ПартнерКонтрагента", ПартнерКонтрагента);

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаДанныеКонтрагента()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.Партнер КАК Партнер
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Ссылка = &Контрагент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Устанавливает заголовок отчета.
// 
// Параметры:
//  НастройкиОтчета - НастройкиКомпоновкиДанных - Настройки отчета
//  СтруктураПараметров - Структура:
//   * ПараметрДатаОтчета - ЗначениеПараметраКомпоновкиДанных, Неопределено, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр дата отчета
//   * ПараметрВариантОтчета - ЗначениеПараметраКомпоновкиДанных, Неопределено, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр вариант отчета
//   * ПараметрПартнер - ЗначениеПараметраКомпоновкиДанных, Неопределено, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр партнер
//   * ПараметрКонтрагент - ЗначениеПараметраКомпоновкиДанных, Неопределено, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр контрагент
//
Процедура УстановитьЗаголовокОтчета(НастройкиОтчета, СтруктураПараметров)
	
	ПараметрДатаОтчета = СтруктураПараметров.ПараметрДатаОтчета;
	ПараметрВариантОтчета = СтруктураПараметров.ПараметрВариантОтчета;
	ПараметрПартнер = СтруктураПараметров.ПараметрПартнер;
	ПараметрКонтрагент = СтруктураПараметров.ПараметрКонтрагент;
	
	ПараметрДата = ПараметрДатаОтчета.Значение;  // СтандартнаяДатаНачала, Дата
	Если ТипЗнч(ПараметрДата) = Тип("СтандартнаяДатаНачала") Тогда
		ДатаОтчета = ПараметрДата.Дата;
	Иначе
		ДатаОтчета = ПараметрДата;
	КонецЕсли;
	ДатаОтчетаСтрокой = Формат(ДатаОтчета, "ДЛФ=D");
	
	Если ПараметрВариантОтчета <> Неопределено
	   И ЗначениеЗаполнено(ПараметрВариантОтчета.Значение) Тогда
		
		ЗаголовокОтчета = "";
		ВариантОтчета = ПараметрВариантОтчета.Значение;
		Если ВариантОтчета = 4 Тогда
			
			Если ПараметрПартнер <> Неопределено
			   И ЗначениеЗаполнено(ПараметрПартнер.Значение) Тогда
				
				ПартнерСтрокой = Строка(ПараметрПартнер.Значение);
				Шаблон = НСтр("ru = 'Действующие ретро-бонусы по клиенту ""%1"" на дату %2'");
				ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					ПартнерСтрокой, 
					ДатаОтчетаСтрокой);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВариантОтчета = 5 Тогда
			
			Если ПараметрКонтрагент <> Неопределено
			   И ЗначениеЗаполнено(ПараметрКонтрагент.Значение) Тогда
			   
				КонтрагентСтрокой = Строка(ПараметрКонтрагент.Значение);
				Шаблон = НСтр("ru = 'Действующие ретро-бонусы по контрагенту ""%1"" на дату %2'");
				ЗаголовокОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					КонтрагентСтрокой, 
					ДатаОтчетаСтрокой);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ЗаголовокОтчета) Тогда
			КомпоновкаДанныхКлиентСервер.УстановитьПараметрВывода(НастройкиОтчета, "Заголовок", ЗаголовокОтчета);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет параметры из переданного контекста.
// 
// Параметры:
//  ПараметрКоманды - ЛюбаяСсылка
//   НовыеНастройкиКД - НастройкиКомпоновкиДанных, Неопределено -
//       Настройки варианта отчета, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда настройки варианта не надо загружать (уже загружены ранее).
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных, Неопределено -
//       Пользовательские настройки, которые будут загружены в компоновщик настроек после его инициализации.
//       Неопределено, когда пользовательские настройки не надо загружать (уже загружены ранее).
//
Процедура ЗаполнитьПараметрыПоКонтексту(ПараметрКоманды, НовыеНастройкиКД, НовыеПользовательскиеНастройкиКД)
	
	ТипПараметраКоманды = ТипЗнч(ПараметрКоманды);
	
	Если ТипПараметраКоманды = Тип("СправочникСсылка.Партнеры") Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НовыеНастройкиКД, "Партнер", ПараметрКоманды);
		Если НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НовыеПользовательскиеНастройкиКД,
				"Партнер", 
				ПараметрКоманды);
			
		КонецЕсли;
		
	ИначеЕсли ТипПараметраКоманды = Тип("СправочникСсылка.Контрагенты") Тогда
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НовыеНастройкиКД, "Контрагент", ПараметрКоманды);
		Если НовыеПользовательскиеНастройкиКД <> Неопределено Тогда
			
			КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
				НовыеПользовательскиеНастройкиКД, 
				"Контрагент", 
				ПараметрКоманды);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли