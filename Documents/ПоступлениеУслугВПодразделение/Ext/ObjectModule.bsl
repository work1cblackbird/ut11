#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет условия закупок
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияЗакупок.Валюта;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация)
		И УсловияЗакупок.Организация <> Организация Тогда
		
		Организация = УсловияЗакупок.Организация;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Склад) Тогда
		Склад = УсловияЗакупок.Склад;
	КонецЕсли;
	
	НаправлениеДеятельности = УсловияЗакупок.НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент)
		И УсловияЗакупок.Контрагент <> Контрагент Тогда
		
		Контрагент = УсловияЗакупок.Контрагент;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ХозяйственнаяОперация) Тогда
		
		ОперацияПоСоглашению		= ХозяйственнаяОперация;
		ОперацииРаздельнойЗакупки	= ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										УсловияЗакупок.ХозяйственнаяОперация);
		
		Если ОперацииРаздельнойЗакупки.Найти(ХозяйственнаяОперация) = Неопределено Тогда
			
			Если УсловияЗакупок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика Тогда
				
				Если ОперацииРаздельнойЗакупки.Найти(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка) <> Неопределено Тогда
					ОперацияПоСоглашению = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка;
				КонецЕсли;
				
			ИначеЕсли УсловияЗакупок.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС Тогда
				
				Если ОперацииРаздельнойЗакупки.Найти(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка) <> Неопределено Тогда
					ОперацияПоСоглашению = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ХозяйственнаяОперация = ОперацияПоСоглашению;
		
	КонецЕсли;
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено
		И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ПарыОперацийРаздельнойЗакупки = ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки();
		ХозяйственнаяОперацияДоговора = ПарыОперацийРаздельнойЗакупки.Получить(ХозяйственнаяОперация);
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Валюта;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, ДопПараметры);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;
		
		ЗаполнитьНалогообложениеНДС();
		
	КонецЕсли;
	
	ЦенаВключаетНДС   = УсловияЗакупок.ЦенаВключаетНДС;
	ВидЦеныПоставщика = УсловияЗакупок.ВидЦеныПоставщика;
	
	ЗаполнитьВидДеятельностиНДС();
	
КонецПроцедуры

// Заполняет условия закупок по торговому соглашению с поставщиком
//
// Параметры:
//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа.
//
Процедура ЗаполнитьУсловияЗакупокПоУмолчанию(ПересчитатьЦены = Истина) Экспорт
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		
		ХозяйственныеОперации = Новый Массив;
		ХозяйственныеОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
			ХозяйственныеОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
			ХозяйственныеОперации.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
		КонецЕсли;
		
		ПараметрыОтбораСоглашения = Новый Структура;
		ПараметрыОтбораСоглашения.Вставить("ВыбранноеСоглашение",                     Соглашение);
		ПараметрыОтбораСоглашения.Вставить("ХозяйственныеОперации",                   ХозяйственныеОперации);
		ПараметрыОтбораСоглашения.Вставить("УчитыватьГруппыСкладов",                  Ложь);
		ПараметрыОтбораСоглашения.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Истина);
		ПараметрыОтбораСоглашения.Вставить("ИспользуютсяДоговорыКонтрагентов",        Истина);
		
		УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(Партнер, ПараметрыОтбораСоглашения);
		
		ЦеныЗаполнены = Ложь;
		
		Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
			
			Если Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
				
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
				ЗаполнитьУсловияЗакупок(УсловияЗакупокПоУмолчанию);
				
				Если ПересчитатьЦены И ЗначениеЗаполнено(Соглашение) Тогда
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
					
					ПараметрыЗаполнения = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
					ПараметрыЗаполнения.Вставить("ПоляЗаполнения",     "Цена, СтавкаНДС");
					ПараметрыЗаполнения.Вставить("Дата",               Дата);
					ПараметрыЗаполнения.Вставить("Валюта",             Валюта);
					ПараметрыЗаполнения.Вставить("Соглашение",         Соглашение);
					ПараметрыЗаполнения.Вставить("ВидЦеныПоставщика",  ВидЦеныПоставщика);
					ПараметрыЗаполнения.Вставить("НалогообложениеНДС", НалогообложениеНДС);
					
					ДействияСоСтроками = Новый Структура;
					ДействияСоСтроками.Вставить("ПересчитатьСумму",     "КоличествоУпаковок");
					ДействияСоСтроками.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаСуммы);
					ДействияСоСтроками.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
					
					ЦеныЗаполнены = ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(Услуги, Неопределено, ПараметрыЗаполнения, ДействияСоСтроками);
					
				КонецЕсли;
				
			Иначе
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
				Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			КонецЕсли;
			
		Иначе
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			Соглашение = Неопределено;
			
			ПарыОперацийРаздельнойЗакупки	= ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки();
			ХозяйственнаяОперацияДоговора	= ПарыОперацийРаздельнойЗакупки.Получить(ХозяйственнаяОперация);
			ТекущаяХозяйственнаяОперация	= ХозяйственнаяОперация;
			
			ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
			ДопПараметры.ВалютаВзаиморасчетов = Валюта;
			Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, ДопПараметры);
			
			ХозяйственныеОперации = ЗакупкиСервер.ХозяйственныеОперацииРаздельнойЗакупки("Документ.ПоступлениеУслугВПодразделение",
																						Соглашение,
																						Договор);
			Если ХозяйственныеОперации.Количество() > 0 Тогда
				ХозяйственнаяОперация = ХозяйственныеОперации[0];
				
				Если Не ЗначениеЗаполнено(Договор)
					И ЗначениеЗаполнено(ТекущаяХозяйственнаяОперация)
					И ХозяйственнаяОперация <> ТекущаяХозяйственнаяОперация Тогда
					
					ХозяйственнаяОперация = ТекущаяХозяйственнаяОперация;
					
				КонецЕсли;
				
				ЗаполнитьНалогообложениеНДС();
				ЗаполнитьВидДеятельностиНДС();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = "Услуги";
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ, ПараметрыПроверки);
	
	ИсправлениеДокументов.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов") Тогда
		ПараметрыВыбораСтатейИАналитик = Документы.ПоступлениеУслугВПодразделение.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
		ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	КонецЕсли;
	
	ПараметрыПроверки = УчетНДСУП.ПараметрыПроверкиЗаполнениеДокументаПоНалогообложениюНДСЗакупки();
	ПараметрыПроверки.ИмяТабличнойЧасти = "Услуги";
	ПараметрыПроверки.ИмяРеквизитаСтатьяРасходов = "СтатьяРасходов";
	ПараметрыПроверки.ИмяРеквизитаАналитикаРасходов = "АналитикаРасходов";
	УчетНДСУП.ПроверитьЗаполнениеДокументаЗакупкиПоНалогообложениюНДС(ЭтотОбъект, НалогообложениеНДС, ПараметрыПроверки, Отказ);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПоступлениеУслугВПодразделениеЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Автор = Пользователи.ТекущийПользователь();
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	ИсключаемыеСвойства = "";
	ХозяйственнаяОперацияПриемки = Неопределено;
	
	Если ТипДанныхЗаполнения = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ЗаполнятьПоНакладной = ?(ДанныеЗаполнения.Свойство("ЗаполнятьПоНакладной"), ДанныеЗаполнения.ЗаполнятьПоНакладной, Ложь);;
		ДанныеЗаполнения.Свойство("ИсключаемыеСвойства", ИсключаемыеСвойства);
		ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПриемки", ХозяйственнаяОперацияПриемки);
		
		ТипЗначенияОснования = ТипЗнч(ДанныеЗаполнения.ДокументОснование);
		Если ТипЗначенияОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			
			ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДанныеЗаполнения.ДокументОснование, ЗаполнятьПоНакладной, ХозяйственнаяОперацияПриемки);
			
		ИначеЕсли ТипЗначенияОснования = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
			
			ЗаполнитьДокументНаОснованииПриобретенияТоваровУслуг(ДанныеЗаполнения.ДокументОснование, ИсключаемыеСвойства, ХозяйственнаяОперацияПриемки);
			
		ИначеЕсли ТипЗначенияОснования = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ЗаполнитьДокументНаОснованииДоговора(ДанныеЗаполнения.ДокументОснование, ХозяйственнаяОперацияПриемки);
		
		КонецЕсли;
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДанныеЗаполнения);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		ЗаполнитьДокументНаОснованииПриобретенияТоваровУслуг(ДанныеЗаполнения, ИсключаемыеСвойства);
		
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеУслугВПодразделение") Тогда
		
		ИсправлениеДокументов.ЗаполнитьИсправление(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ПоступлениеУслугВПодразделениеЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения); 
	
	СуммаДокумента = Услуги.Итог("СуммаСНДС");
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
		
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "Услуги");
	
	ПоступлениеУслугВПодразделениеЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПоступлениеУслугВПодразделениеЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПоступлениеУслугВПодразделениеЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ИсправлениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	Для Каждого ТекСтрока Из Услуги Цикл
		
		ТекСтрока.АналитикаУчетаПартий = Справочники.КлючиАналитикиУчетаПартий.ПустаяСсылка();
		
	КонецЦикла;
	
	ЗаполнитьНалогообложениеНДС();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Услуги, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КэшированныеЗначения.ОбработанныеСтроки, СтруктураДействий, Неопределено);
	
	ИнициализироватьДокумент();
	
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, "Услуги");
	
	ПоступлениеУслугВПодразделениеЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Автор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ПоступлениеУслугВПодразделениеЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ЗаполнитьДокументНаОснованииЗаказаПоставщику(ДокументОснование, ЗаполнятьПоНакладной = Ложь, ХозяйственнаяОперацияПриемки = Неопределено)
	
	ПроверитьВариантОформленияЗакупокДоговора(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Соглашение КАК Соглашение,
	|	ЗаказПоставщику.Партнер КАК Партнер,
	|	ЗаказПоставщику.Контрагент КАК Контрагент,
	|	ЗаказПоставщику.Организация КАК Организация,
	|	ЗаказПоставщику.Статус КАК СтатусДокумента,
	|	ЗаказПоставщику.Договор КАК Договор,
	|	ЗаказПоставщику.Сделка КАК Сделка,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЕСТЬNULL(Соглашения.ВидЦеныПоставщика, ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)) КАК ВидЦеныПоставщика,
	|	ЗаказПоставщику.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЗаказПоставщику.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ЗаказПоставщику.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС,
	|	ЗаказПоставщику.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ЗаказПоставщику.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.НеСогласован), ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Согласован))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус,
	|	ЗаказПоставщику.ХозяйственнаяОперация КАК ХозяйственнаяОперацияПриемки
	|ПОМЕСТИТЬ ВТРаспоряжение
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК Соглашения
	|		ПО ЗаказПоставщику.Соглашение = Соглашения.Ссылка
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	УслугиКПоступлению.Номенклатура КАК Номенклатура,
	|	УслугиКПоступлению.Характеристика КАК Характеристика,
	|	УслугиКПоступлению.Назначение КАК Назначение,
	|	УслугиКПоступлению.КОформлениюПоступленийПоРаспоряжениюОстаток КАК Количество
	|ПОМЕСТИТЬ ВТУслуги
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &ДокументОснование
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))) КАК УслугиКПоступлению
	|ГДЕ
	|	&ЗаполнятьПоЗаказу
	|	И УслугиКПоступлению.КОформлениюПоступленийПоРаспоряжениюОстаток > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УслугиКПоступлению.ДокументПоступления,
	|	УслугиКПоступлению.Номенклатура,
	|	УслугиКПоступлению.Характеристика,
	|	УслугиКПоступлению.Назначение,
	|	УслугиКПоступлению.КОформлениюПоступленийПоНакладнымОстаток
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &ДокументОснование
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))) КАК УслугиКПоступлению
	|ГДЕ
	|	&ЗаполнятьПоНакладной
	|	И УслугиКПоступлению.КОформлениюПоступленийПоНакладнымОстаток > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УпаковкиТоваров.ДокументПоступления КАК ДокументПоступления,
	|	УпаковкиТоваров.Номенклатура КАК Номенклатура,
	|	УпаковкиТоваров.Характеристика КАК Характеристика,
	|	УпаковкиТоваров.Назначение КАК Назначение,
	|	УпаковкиТоваров.Подразделение КАК Подразделение,
	|	УпаковкиТоваров.СписатьНаРасходы КАК СписатьНаРасходы,
	|	УпаковкиТоваров.СтатьяРасходов КАК СтатьяРасходов,
	|	УпаковкиТоваров.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(УпаковкиТоваров.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТУпаковкиТоваров
	|ИЗ
	|	(ВЫБРАТЬ
	|		УслугиКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|		УслугиКПоступлению.Номенклатура КАК Номенклатура,
	|		УслугиКПоступлению.Характеристика КАК Характеристика,
	|		УслугиКПоступлению.Назначение КАК Назначение,
	|		ТоварыЗаказа.Подразделение КАК Подразделение,
	|		ТоварыЗаказа.СписатьНаРасходы КАК СписатьНаРасходы,
	|		ТоварыЗаказа.СтатьяРасходов КАК СтатьяРасходов,
	|		ТоварыЗаказа.АналитикаРасходов КАК АналитикаРасходов,
	|		СУММА(ТоварыЗаказа.Количество) КАК Количество
	|	ИЗ
	|		ВТУслуги КАК УслугиКПоступлению
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|			ПО УслугиКПоступлению.ДокументПоступления = ТоварыЗаказа.Ссылка
	|				И УслугиКПоступлению.Номенклатура = ТоварыЗаказа.Номенклатура
	|				И УслугиКПоступлению.Характеристика = ТоварыЗаказа.Характеристика
	|				И УслугиКПоступлению.Назначение = ТоварыЗаказа.Назначение
	|	ГДЕ
	|		НЕ ЕСТЬNULL(ТоварыЗаказа.Отменено, ЛОЖЬ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УслугиКПоступлению.ДокументПоступления,
	|		УслугиКПоступлению.Номенклатура,
	|		УслугиКПоступлению.Характеристика,
	|		УслугиКПоступлению.Назначение,
	|		ТоварыЗаказа.Подразделение,
	|		ТоварыЗаказа.СписатьНаРасходы,
	|		ТоварыЗаказа.СтатьяРасходов,
	|		ТоварыЗаказа.АналитикаРасходов
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УслугиКПоступлению.ДокументПоступления,
	|		УслугиКПоступлению.Номенклатура,
	|		УслугиКПоступлению.Характеристика,
	|		УслугиКПоступлению.Назначение,
	|		УслугиПоступления.Подразделение,
	|		УслугиПоступления.СписатьНаРасходы,
	|		УслугиПоступления.СтатьяРасходов,
	|		УслугиПоступления.АналитикаРасходов,
	|		-СУММА(УслугиПоступления.Количество)
	|	ИЗ
	|		ВТУслуги КАК УслугиКПоступлению
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугВПодразделение КАК ПоступлениеУслугВПодразделение
	|			ПО УслугиКПоступлению.ДокументПоступления = ПоступлениеУслугВПодразделение.Распоряжение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугВПодразделение.Услуги КАК УслугиПоступления
	|			ПО (ПоступлениеУслугВПодразделение.Ссылка = УслугиПоступления.Ссылка)
	|				И УслугиКПоступлению.Номенклатура = УслугиПоступления.Номенклатура
	|				И УслугиКПоступлению.Характеристика = УслугиПоступления.Характеристика
	|				И УслугиКПоступлению.Назначение = УслугиПоступления.Назначение
	|	ГДЕ
	|		ЕСТЬNULL(ПоступлениеУслугВПодразделение.Проведен, ЛОЖЬ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		УслугиКПоступлению.ДокументПоступления,
	|		УслугиКПоступлению.Номенклатура,
	|		УслугиКПоступлению.Характеристика,
	|		УслугиКПоступлению.Назначение,
	|		УслугиПоступления.Подразделение,
	|		УслугиПоступления.СписатьНаРасходы,
	|		УслугиПоступления.СтатьяРасходов,
	|		УслугиПоступления.АналитикаРасходов) КАК УпаковкиТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	УпаковкиТоваров.ДокументПоступления,
	|	УпаковкиТоваров.Номенклатура,
	|	УпаковкиТоваров.Характеристика,
	|	УпаковкиТоваров.Назначение,
	|	УпаковкиТоваров.Подразделение,
	|	УпаковкиТоваров.СписатьНаРасходы,
	|	УпаковкиТоваров.СтатьяРасходов,
	|	УпаковкиТоваров.АналитикаРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(УпаковкиТоваров.Количество) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение,
	|	СписатьНаРасходы,
	|	СтатьяРасходов,
	|	АналитикаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УслугиКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	УслугиКПоступлению.Номенклатура КАК Номенклатура,
	|	УслугиКПоступлению.Характеристика КАК Характеристика,
	|	УслугиКПоступлению.Назначение КАК Назначение,
	|	УслугиКПоступлению.Подразделение КАК Подразделение,
	|	УслугиКПоступлению.СписатьНаРасходы КАК СписатьНаРасходы,
	|	УслугиКПоступлению.СтатьяРасходов КАК СтатьяРасходов,
	|	УслугиКПоступлению.АналитикаРасходов КАК АналитикаРасходов,
	|	УслугиКПоступлению.Количество КАК Количество,
	|	ТоварыЗаказа.Цена КАК Цена,
	|	ТоварыЗаказа.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ВТЦеныТоваров
	|ИЗ
	|	ВТУпаковкиТоваров КАК УслугиКПоступлению
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|		ПО УслугиКПоступлению.ДокументПоступления = ТоварыЗаказа.Ссылка
	|			И УслугиКПоступлению.Номенклатура = ТоварыЗаказа.Номенклатура
	|			И УслугиКПоступлению.Характеристика = ТоварыЗаказа.Характеристика
	|			И УслугиКПоступлению.Назначение = ТоварыЗаказа.Назначение
	|			И УслугиКПоступлению.Подразделение = ТоварыЗаказа.Подразделение
	|			И УслугиКПоступлению.СписатьНаРасходы = ТоварыЗаказа.СписатьНаРасходы
	|			И УслугиКПоступлению.СтатьяРасходов = ТоварыЗаказа.СтатьяРасходов
	|			И УслугиКПоступлению.АналитикаРасходов = ТоварыЗаказа.АналитикаРасходов
	|ГДЕ
	|	НЕ ЕСТЬNULL(ТоварыЗаказа.Отменено, ЛОЖЬ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение,
	|	СписатьНаРасходы,
	|	СтатьяРасходов,
	|	АналитикаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	УслугиКПоступлению.Номенклатура КАК Номенклатура,
	|	УслугиКПоступлению.Характеристика КАК Характеристика,
	|	УслугиКПоступлению.Назначение КАК Назначение,
	|	УслугиКПоступлению.Подразделение КАК Подразделение,
	|	УслугиКПоступлению.СписатьНаРасходы КАК СписатьНаРасходы,
	|	УслугиКПоступлению.СтатьяРасходов КАК СтатьяРасходов,
	|	УслугиКПоступлению.АналитикаРасходов КАК АналитикаРасходов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УслугиКПоступлению.Цена) КАК КоличествоЦен,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УслугиКПоступлению.СтавкаНДС) КАК КоличествоСтавокНДС
	|ПОМЕСТИТЬ ВТЦеныТоваровГруппировка
	|ИЗ
	|	ВТЦеныТоваров КАК УслугиКПоступлению
	|
	|СГРУППИРОВАТЬ ПО
	|	УслугиКПоступлению.ДокументПоступления,
	|	УслугиКПоступлению.Номенклатура,
	|	УслугиКПоступлению.Характеристика,
	|	УслугиКПоступлению.Назначение,
	|	УслугиКПоступлению.Подразделение,
	|	УслугиКПоступлению.СписатьНаРасходы,
	|	УслугиКПоступлению.СтатьяРасходов,
	|	УслугиКПоступлению.АналитикаРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Подразделение,
	|	СписатьНаРасходы,
	|	СтатьяРасходов,
	|	АналитикаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРаспоряжение.Ссылка КАК Ссылка,
	|	ТаблицаРаспоряжение.Соглашение КАК Соглашение,
	|	ТаблицаРаспоряжение.Партнер КАК Партнер,
	|	ТаблицаРаспоряжение.Контрагент КАК Контрагент,
	|	ТаблицаРаспоряжение.Организация КАК Организация,
	|	ТаблицаРаспоряжение.СтатусДокумента КАК СтатусДокумента,
	|	ТаблицаРаспоряжение.Договор КАК Договор,
	|	ТаблицаРаспоряжение.Сделка КАК Сделка,
	|	ТаблицаРаспоряжение.Валюта КАК Валюта,
	|	ТаблицаРаспоряжение.ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	ТаблицаРаспоряжение.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ТаблицаРаспоряжение.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ТаблицаРаспоряжение.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ТаблицаРаспоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРаспоряжение.ЕстьОшибкиПроведен КАК ЕстьОшибкиПроведен,
	|	ТаблицаРаспоряжение.ЕстьОшибкиСтатус КАК ЕстьОшибкиСтатус,
	|	ТаблицаРаспоряжение.ХозяйственнаяОперацияПриемки КАК ХозяйственнаяОперацияПриемки
	|ИЗ
	|	ВТРаспоряжение КАК ТаблицаРаспоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.ДокументПоступления КАК ДокументПоступления,
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Характеристика КАК Характеристика,
	|	Услуги.Назначение КАК Назначение,
	|	Услуги.Подразделение КАК Подразделение,
	|	Услуги.СписатьНаРасходы КАК СписатьНаРасходы,
	|	Услуги.СтатьяРасходов КАК СтатьяРасходов,
	|	Услуги.АналитикаРасходов КАК АналитикаРасходов,
	|	СУММА(Услуги.Количество) КАК Количество,
	|	Услуги.Цена КАК Цена,
	|	Услуги.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		УслугиКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|		УслугиКПоступлению.Номенклатура КАК Номенклатура,
	|		УслугиКПоступлению.Характеристика КАК Характеристика,
	|		УслугиКПоступлению.Назначение КАК Назначение,
	|		УслугиКПоступлению.Подразделение КАК Подразделение,
	|		УслугиКПоступлению.СписатьНаРасходы КАК СписатьНаРасходы,
	|		УслугиКПоступлению.СтатьяРасходов КАК СтатьяРасходов,
	|		УслугиКПоступлению.АналитикаРасходов КАК АналитикаРасходов,
	|		УслугиКПоступлению.Количество КАК Количество,
	|		ВЫБОР
	|			КОГДА ЦеныТоваров.КоличествоЦен = 1
	|				ТОГДА УслугиКПоступлению.Цена
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Цена,
	|		ВЫБОР
	|			КОГДА ЦеныТоваров.КоличествоСтавокНДС = 1
	|				ТОГДА УслугиКПоступлению.СтавкаНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтавкаНДС
	|	ИЗ
	|		ВТЦеныТоваров КАК УслугиКПоступлению
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТЦеныТоваровГруппировка КАК ЦеныТоваров
	|			ПО УслугиКПоступлению.ДокументПоступления = ЦеныТоваров.ДокументПоступления
	|				И УслугиКПоступлению.Номенклатура = ЦеныТоваров.Номенклатура
	|				И УслугиКПоступлению.Характеристика = ЦеныТоваров.Характеристика
	|				И УслугиКПоступлению.Назначение = ЦеныТоваров.Назначение
	|				И УслугиКПоступлению.Подразделение = ЦеныТоваров.Подразделение
	|				И УслугиКПоступлению.СписатьНаРасходы = ЦеныТоваров.СписатьНаРасходы
	|				И УслугиКПоступлению.СтатьяРасходов = ЦеныТоваров.СтатьяРасходов
	|				И УслугиКПоступлению.АналитикаРасходов = ЦеныТоваров.АналитикаРасходов) КАК Услуги
	|
	|СГРУППИРОВАТЬ ПО
	|	Услуги.ДокументПоступления,
	|	Услуги.Номенклатура,
	|	Услуги.Характеристика,
	|	Услуги.Назначение,
	|	Услуги.Цена,
	|	Услуги.СтавкаНДС,
	|	Услуги.Подразделение,
	|	Услуги.СписатьНаРасходы,
	|	Услуги.СтатьяРасходов,
	|	Услуги.АналитикаРасходов";
	
	Запрос.УстановитьПараметр("ДокументОснование",		ДокументОснование);
	Запрос.УстановитьПараметр("ЗаполнятьПоЗаказу",		Не ЗаполнятьПоНакладной);
	Запрос.УстановитьПараметр("ЗаполнятьПоНакладной",	ЗаполнятьПоНакладной);
	
	РезультатЗапроса	= Запрос.ВыполнитьПакет();
	Выборка				= РезультатЗапроса[5].Выбрать();
	
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив;
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Подтвержден);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиВозможностиВводаНаОсновании();
	ПараметрыПроверки.Статус = Выборка.СтатусДокумента;
	ПараметрыПроверки.ЕстьОшибкиПроведен = Выборка.ЕстьОшибкиПроведен;
	ПараметрыПроверки.ЕстьОшибкиСтатус = Выборка.ЕстьОшибкиСтатус;
	ПараметрыПроверки.МассивДопустимыхСтатусов = МассивДопустимыхСтатусов;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОснованииСПараметрами(ДокументОснование,
																		ПараметрыПроверки);
	
	Распоряжение	= ДокументОснование;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	Если ХозяйственнаяОперацияПриемки = Неопределено Тогда
		
		ХозяйственнаяОперацияПриемки = Выборка.ХозяйственнаяОперацияПриемки;
		
	КонецЕсли;
	
	ПарыОперацийРаздельнойЗакупки = ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки(Истина);
	ХозяйственнаяОперацияПриемкиФактическоеПоступление = ПарыОперацийРаздельнойЗакупки.Получить(ХозяйственнаяОперацияПриемки);
	ХозяйственнаяОперацияПриемкиФактическоеПоступление = ?(Не ЗначениеЗаполнено(ХозяйственнаяОперацияПриемкиФактическоеПоступление),
															ХозяйственнаяОперацияПриемки,
															ХозяйственнаяОперацияПриемкиФактическоеПоступление);
	
	ХозяйственнаяОперация = ХозяйственнаяОперацияПриемкиФактическоеПоступление;
	
	ВыборкаТовары = РезультатЗапроса[6].Выбрать();

	Пока ВыборкаТовары.Следующий() Цикл
		
		СтрокаТЧ = Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаТовары);
		ЗаполнитьСуммовыеПоказателиСтрокиТоваров(СтрокаТЧ);
		
	КонецЦикла;

	ЗаполнитьЦеныПоСоглашению(Ложь);

КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииПриобретенияТоваровУслуг(ДокументОснование, ИсключаемыеСвойства, ХозяйственнаяОперацияПриемки = Неопределено)
	
	ПроверитьВариантОформленияЗакупокДоговора(ДокументОснование);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШапкаДокумента.Валюта КАК Валюта,
	|	ШапкаДокумента.Партнер КАК Партнер,
	|	ШапкаДокумента.Соглашение КАК Соглашение,
	|	ШапкаДокумента.Организация КАК Организация,
	|	ШапкаДокумента.Подразделение КАК Подразделение,
	|	ШапкаДокумента.Контрагент КАК Контрагент,
	|	ШапкаДокумента.Менеджер КАК Менеджер,
	|	ШапкаДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ШапкаДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ШапкаДокумента.Сделка КАК Сделка,
	|	ШапкаДокумента.Договор КАК Договор,
	|	ШапкаДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ШапкаДокумента.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ШапкаДокумента.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ШапкаДокумента.ЗакупкаПодДеятельность КАК ВидДеятельностиНДС,
	|	ШапкаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперацияПриемки
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ШапкаДокумента
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧДокумента.Номенклатура КАК Номенклатура,
	|	ТЧДокумента.НоменклатураПартнера КАК НоменклатураПартнера,
	|	ТЧДокумента.Характеристика КАК Характеристика,
	|	ТЧДокумента.Количество КАК Количество,
	|	ТЧДокумента.Цена КАК Цена,
	|	ТЧДокумента.Сумма КАК Сумма,
	|	ТЧДокумента.СтавкаНДС КАК СтавкаНДС,
	|	ТЧДокумента.СуммаНДС КАК СуммаНДС,
	|	ТЧДокумента.СуммаСНДС КАК СуммаСНДС,
	|	ТЧДокумента.Назначение КАК Назначение,
	|	ТЧДокумента.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ТЧДокумента.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ТЧДокумента.СписатьНаРасходы
	|	КОНЕЦ КАК СписатьНаРасходы,
	|	ТЧДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|	ТЧДокумента.АналитикаРасходов КАК АналитикаРасходов
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТЧДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТЧДокумента.Номенклатура = СпрНоменклатура.Ссылка
	|			И (ТЧДокумента.Номенклатура.ТипНоменклатуры В (&ТипНоменклатуры))
	|ГДЕ
	|	ТЧДокумента.Ссылка = &Ссылка";
		
	ТипНоменклатуры = Новый Массив;
	ТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	ТипНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	
	Запрос.УстановитьПараметр("ТипНоменклатуры", ТипНоменклатуры);
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	
	ПакетЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаШапка = ПакетЗапроса[0].Выбрать();
	Если ВыборкаШапка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка,, ИсключаемыеСвойства);
		
		Если ХозяйственнаяОперацияПриемки = Неопределено Тогда
			
			ХозяйственнаяОперацияПриемки = ВыборкаШапка.ХозяйственнаяОперацияПриемки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПарыОперацийРаздельнойЗакупки = ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки(Истина);
	ХозяйственнаяОперацияПриемкиФактическоеПоступление = ПарыОперацийРаздельнойЗакупки.Получить(ХозяйственнаяОперацияПриемки);
	ХозяйственнаяОперацияПриемкиФактическоеПоступление = ?(Не ЗначениеЗаполнено(ХозяйственнаяОперацияПриемкиФактическоеПоступление),
															ХозяйственнаяОперацияПриемки,
															ХозяйственнаяОперацияПриемкиФактическоеПоступление);
	
	ХозяйственнаяОперация = ХозяйственнаяОперацияПриемкиФактическоеПоступление;
	
	ВыборкаТЧ = ПакетЗапроса[1].Выбрать();
	Пока ВыборкаТЧ.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), ВыборкаТЧ);
		
	КонецЦикла;
	
	СуммаДокумента = Услуги.Итог("Сумма");
	
КонецПроцедуры

Процедура ЗаполнитьДокументНаОснованииДоговора(ДокументОснование, ХозяйственнаяОперацияПриемки = Неопределено)
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Договор.Ссылка КАК Ссылка,
		|	Договор.Ссылка КАК Договор,
		|	Договор.Партнер КАК Партнер,
		|	Договор.Контрагент КАК Контрагент,
		|	Договор.Организация КАК Организация,
		|	Договор.Статус КАК СтатусДокумента,
		|	ВЫБОР
		|		КОГДА Договор.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСтатус,
		|	ВЫБОР
		|		КОГДА Договор.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОказаниеАгентскихУслуг)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоАгентскиеУслуги,
		|	Договор.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	Договор.ХозяйственнаяОперация КАК ХозяйственнаяОперацияПриемки
		|ПОМЕСТИТЬ ВТРаспоряжение
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК Договор
		|ГДЕ
		|	Договор.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УслугиКПоступлению.ДокументПоступления КАК ДокументПоступления,
		|	УслугиКПоступлению.Номенклатура КАК Номенклатура,
		|	УслугиКПоступлению.Характеристика КАК Характеристика,
		|	УслугиКПоступлению.Назначение КАК Назначение,
		|	УслугиКПоступлению.Серия КАК Серия,
		|	УслугиКПоступлению.КОформлениюПоступленийПоРаспоряжениюОстаток КАК Количество,
		|	УслугиКПоступлению.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК СписатьНаРасходы
		|ПОМЕСТИТЬ ВТУслуги
		|ИЗ
		|	РегистрНакопления.ТоварыКПоступлению.Остатки(, ДокументПоступления = &ДокументОснование
		|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))) КАК УслугиКПоступлению
		|ГДЕ
		|	УслугиКПоступлению.КОформлениюПоступленийПоРаспоряжениюОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРаспоряжение.Ссылка КАК Ссылка,
		|	ТаблицаРаспоряжение.Договор КАК Договор,
		|	ТаблицаРаспоряжение.Партнер КАК Партнер,
		|	ТаблицаРаспоряжение.Контрагент КАК Контрагент,
		|	ТаблицаРаспоряжение.Организация КАК Организация,
		|	ТаблицаРаспоряжение.СтатусДокумента КАК СтатусДокумента,
		|	ТаблицаРаспоряжение.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ТаблицаРаспоряжение.ЭтоАгентскиеУслуги КАК ЭтоАгентскиеУслуги,
		|	ТаблицаРаспоряжение.ЕстьОшибкиСтатус КАК ЕстьОшибкиСтатус,
		|	ТаблицаРаспоряжение.ХозяйственнаяОперацияПриемки КАК ХозяйственнаяОперацияПриемки
		|ИЗ
		|	ВТРаспоряжение КАК ТаблицаРаспоряжение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУслуги.ДокументПоступления КАК ДокументПоступления,
		|	ТаблицаУслуги.Номенклатура КАК Номенклатура,
		|	ТаблицаУслуги.Характеристика КАК Характеристика,
		|	ТаблицаУслуги.Назначение КАК Назначение,
		|	ТаблицаУслуги.Серия КАК Серия,
		|	ТаблицаУслуги.Количество КАК Количество,
		|	ТаблицаУслуги.СписатьНаРасходы КАК СписатьНаРасходы
		|ИЗ
		|	ВТУслуги КАК ТаблицаУслуги");
		
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка		= РезультатЗапроса[2].Выбрать();
	ТЗУслуги	= РезультатЗапроса[3].Выгрузить();
	
	Выборка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыДоговоровКонтрагентов.Действует);
	
	ПараметрыПроверки = ОбщегоНазначенияУТ.ПараметрыПроверкиВозможностиВводаНаОсновании();
	ПараметрыПроверки.Статус = Выборка.СтатусДокумента;
	ПараметрыПроверки.ЕстьОшибкиСтатус = Выборка.ЕстьОшибкиСтатус;
	ПараметрыПроверки.МассивДопустимыхСтатусов = МассивДопустимыхСтатусов;
	
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(Выборка.Договор, ПараметрыПроверки);
	
	Если ХозяйственнаяОперацияПриемки = Неопределено Тогда
		
		ХозяйственнаяОперацияПриемки = Выборка.ХозяйственнаяОперацияПриемки;
		
	КонецЕсли;
	
	ПарыОперацийРаздельнойЗакупки = ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки(Истина);
	ХозяйственнаяОперацияПриемкиФактическоеПоступление = ПарыОперацийРаздельнойЗакупки.Получить(ХозяйственнаяОперацияПриемки);
	ХозяйственнаяОперацияПриемкиФактическоеПоступление = ?(Не ЗначениеЗаполнено(ХозяйственнаяОперацияПриемкиФактическоеПоступление),
		ХозяйственнаяОперацияПриемки,
		ХозяйственнаяОперацияПриемкиФактическоеПоступление);
	
	Распоряжение          = ДокументОснование;
	ХозяйственнаяОперация = ХозяйственнаяОперацияПриемкиФактическоеПоступление;

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	ЗаполнитьНалогообложениеНДС();
	
	Услуги.Загрузить(ТЗУслуги);
	
	ЗаполнитьЦеныПоСоглашению();
	
КонецПроцедуры

Процедура ПроверитьВариантОформленияЗакупокДоговора(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ВариантОформленияЗакупок КАК ВариантОформленияЗакупок
	|ИЗ
	|	&ПутьКДаннымШапки КАК ШапкаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ШапкаДокумента.Договор = ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	ШапкаДокумента.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПутьКДаннымШапки", 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Документ.%1", ДокументОснование.Метаданные().Имя));
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И НЕ Выборка.ВариантоформленияЗакупок = Перечисления.ВариантыОформленияЗакупок.НеотфактурованныеПоставкиТоваровИУслуг Тогда
		
		ВызватьИсключение НСтр("ru = 'Поступление услуг в подразделение можно создавать только если в договоре основания включена схема ""Неотфактурованные поставки товаров и услуг"".'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Распоряжение) Тогда
		Распоряжение = ДокументОснованиеПриЗаполнении(ДанныеЗаполнения);
	КонецЕсли;
	
	ВариантПриемкиТоваров = ЗакупкиСервер.ПолучитьВариантПриемкиТоваров(Распоряжение, Договор);
	
	Если Не ЗначениеЗаполнено(НалогообложениеНДС) Тогда
		ЗаполнитьНалогообложениеНДС();
	КонецЕсли;
	
	ЗаполнитьВидДеятельностиНДС();
	
КонецПроцедуры

Функция ДокументОснованиеПриЗаполнении(ДанныеЗаполнения)
	
	ТипыОснований = Новый Массив;
	ТипыОснований.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	ТипыОснований.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ДокументОснование")
		И ТипыОснований.Найти(ТипЗнч(ДанныеЗаполнения.ДокументОснование)) <> Неопределено Тогда
		
		Возврат ДанныеЗаполнения.ДокументОснование;
		
	ИначеЕсли ТипыОснований.Найти(ТипЗнч(ДанныеЗаполнения)) <> Неопределено Тогда 
		
		Возврат ДанныеЗаполнения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ЗаполнитьНалогообложениеНДС()
	
	ПараметрыЗаполнения = Документы.ПоступлениеУслугВПодразделение.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьВидДеятельностиНДС()
	
	ПараметрыЗаполнения = Документы.ПоступлениеТоваровНаСклад.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ВидДеятельностиНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//// Заполняет аналитики учета номенклатуры в табличных частях документа, хранящих информацию о товарах.
//// Если параметр не передан, тогда будет выполнено заполнение данных в табличных частях документа.
////
//// Параметры:
////	ТаблицыДокумента - см. Документы.ПриобретениеТоваровУслуг.КоллекцияТабличныхЧастейТоваров.
////
Процедура ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров(ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		
		ТаблицыДокумента = Документы.ПоступлениеУслугВПодразделение.КоллекцияТабличныхЧастейТоваров();
		ЗаполнитьЗначенияСвойств(ТаблицыДокумента, ЭтотОбъект);
		
	КонецЕсли;
	
	ТаблицаУслуги = ТаблицыДокумента.Услуги;
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация,
																		Справочники.Склады.ПустаяСсылка(),
																		Подразделение,
																		Партнер,
																		Договор);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Вставить("Работа", "Подразделение");
	ИменаПолей.Вставить("Услуга", "Подразделение"); 
	ИменаПолей.СтатусУказанияСерий = "";
	ИменаПолей.Серия = "";
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицаУслуги, МестаУчета, ИменаПолей);
	
	МестаУчета = Новый Структура("Произвольный", Договор);
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.АналитикаУчетаНоменклатуры = "АналитикаУчетаНоменклатурыТоварыУПартнеров"; 
	ИменаПолей.СтатусУказанияСерий = "";
	ИменаПолей.Серия = "";	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицаУслуги, МестаУчета, ИменаПолей);
	
КонецПроцедуры

Процедура ЗаполнитьСуммовыеПоказателиСтрокиТоваров(СтрокаТоваров)
	
	ДействияСоСтрокой = Новый Структура;
	
	Если ЗначениеЗаполнено(СтрокаТоваров.Цена) Тогда
		ПараметрыПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
		
		ДействияСоСтрокой.Вставить("ПересчитатьСумму",		"Количество");
		ДействияСоСтрокой.Вставить("ПересчитатьСуммуНДС",	ПараметрыПересчетаСуммы);
		ДействияСоСтрокой.Вставить("ПересчитатьСуммуСНДС",	ПараметрыПересчетаСуммы);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаТоваров.СтавкаНДС) Тогда
		ДействияСоСтрокой.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействияСоСтрокой) Тогда
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТоваров, ДействияСоСтрокой, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЦеныПоСоглашению(ЗаполнитьВсеСтроки = Истина)
	
	СтрокиБезЦен = Неопределено;
	
	Если Не ЗаполнитьВсеСтроки Тогда
		СтрокиБезЦен = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Услуги Цикл
			Если Не ЗначениеЗаполнено(СтрокаТЧ.Цена) Тогда
				СтрокиБезЦен.Добавить(СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	
	ПараметрыЗаполнения = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения",		"Цена, СтавкаНДС");
	ПараметрыЗаполнения.Вставить("Дата",				Дата);
	ПараметрыЗаполнения.Вставить("Валюта",				Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение",			Соглашение);
	ПараметрыЗаполнения.Вставить("ВидЦеныПоставщика",	ВидЦеныПоставщика);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС",	НалогообложениеНДС);
	
	ДействияСоСтроками = Новый Структура;
	ДействияСоСтроками.Вставить("ПересчитатьСумму",		"Количество");
	ДействияСоСтроками.Вставить("ПересчитатьСуммуНДС",	СтруктураПересчетаСуммы);
	ДействияСоСтроками.Вставить("ПересчитатьСуммуСНДС",	СтруктураПересчетаСуммы);
	
	ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(Услуги, СтрокиБезЦен, ПараметрыЗаполнения, ДействияСоСтроками);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
