#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Соглашение";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Соглашение, Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Менеджер", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, Менеджер";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Контрагент";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Контрагент";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"НаименованиеВходящегоДокумента", Параметры);	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ЦеныИСкидки");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("УчетРабот");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетНДС");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	ПоступлениеУслугВПодразделениеЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  СписокЗначений, Структура - Данные документа для проведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПоступлениеУслугВПодразделение") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры); 
		ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры);

		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(ДокументСсылка, Запрос, ТекстыЗапроса, Регистры);
		
		ПоступлениеУслугВПодразделениеЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;
	
	ОформитьПоступлениеТоваровПоДвухходовке(Запрос, ТекстыЗапроса, "ТоварыКПоступлению");
	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(
		Запрос, ТекстыЗапроса, Регистры, Метаданные.Документы.ПоступлениеУслугВПодразделение);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

	ИсправлениеДокументов.ДобавитьКомандуИсправление(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	ИсправлениеДокументов.ДобавитьКомандуСторно(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	ПоступлениеУслугВПодразделениеЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПоступлениеУслугВПодразделение)
		И ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки") Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПоступлениеУслугВПодразделение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.ПоступлениеУслугВПодразделение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПоступлениеУслугВПодразделение);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ПоступлениеУслугВПодразделениеЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры


#Область Прочее
// Заполняет параметры запроса, выполняющего получение данных об используемых в документе хозяйственных операциях.
//
// Параметры:
//	ПараметрыЗапроса - Структура - параметры запроса, которые нужно инициализировать:
//		* ХозОперацииЗакупкаУПоставщика				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииЗакупкаПоИмпорту				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииЗакупкаВСтранахЕАЭС			 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииПриемНаКомиссию				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииТоварыВПути					 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииНеотфактурованныеПоставки		 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииНеРазделятьОформлениеЗакупок	 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//
Процедура ЗаполнитьПараметрыХозяйственныхОпераций(ПараметрыЗапроса) Экспорт
	
	ИспользоватьВвозТоваровИзТаможенногоСоюза = ПолучитьФункциональнуюОпцию("ИспользоватьВвозТоваровИзТаможенногоСоюза");
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	
	ХозОперацииЗакупкаУПоставщика = Новый Массив;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.
			ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	КонецЕсли;
	
	ХозОперацииЗакупкаВСтранахЕАЭС = Новый Массив;
	Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
		Если ИспользоватьНеотфактурованныеПоставки Тогда
			ХозОперацииЗакупкаВСтранахЕАЭС.Добавить(
				Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
		КонецЕсли;
	КонецЕсли;
	
	ХозОперацииНеотфактурованныеПоставки = Новый Массив;
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозОперацииНеотфактурованныеПоставки.Добавить(
			Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
		
		Если ИспользоватьВвозТоваровИзТаможенногоСоюза Тогда
			ХозОперацииНеотфактурованныеПоставки.Добавить(
				Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗапроса.ХозОперацииЗакупкаУПоставщика           = ХозОперацииЗакупкаУПоставщика;
	ПараметрыЗапроса.ХозОперацииЗакупкаВСтранахЕАЭС          = ХозОперацииЗакупкаВСтранахЕАЭС;
	ПараметрыЗапроса.ХозОперацииНеотфактурованныеПоставки    = ХозОперацииНеотфактурованныеПоставки;
	
КонецПроцедуры

// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка - ссылка на распоряжение для выполнения складской операции.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	
	ВариантПриемкиТоваров = ЗначенияПолейДляОпределенияРаспоряжения.ВариантПриемкиТоваров;
	
	Если Не ЗначениеЗаполнено(ЗначенияПолейДляОпределенияРаспоряжения.Соглашение)
		И Не ЗначениеЗаполнено(ЗначенияПолейДляОпределенияРаспоряжения.Договор) Тогда
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
	ИначеЕсли Справочники.СоглашенияСПоставщиками.СоглашениеИспользуетсяПриПриемке(ВариантПриемкиТоваров) Тогда
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Соглашение;
	ИначеЕсли Справочники.ДоговорыКонтрагентов.ДоговорИспользуетсяПриПриемке(ВариантПриемкиТоваров) Тогда
		Возврат ЗначенияПолейДляОпределенияРаспоряжения.Договор;
	КонецЕсли;
	
КонецФункции

// Порядок обработки документа при изменении направления деятельности.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
// см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
//
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "Услуги";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Услуги", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
// Возвращаемое значение:
//	см. Справочники.Назначения.МакетФормыВыбораНазначений.
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	
	// Потребности в работах в подразделении-получателе.

	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказовРаботамиПоВалюте", Истина, "Объект.Услуги.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	ОписаниеКолонок.УсловиеИспользования = "Объект.Услуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура     = "Объект.Услуги.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика   = "Объект.Услуги.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Подразделение    = "Объект.Услуги.Подразделение";
	ОписаниеКолонок.ПутиКДанным.Валюта           = "Объект.Валюта";
	
	Возврат МакетФормы;
	
КонецФункции

// Возвращает массив допустимых наименований входящих документов.
// 
// Возвращаемое значение:
// 	Массив - массив наименований.
Функция НаименованияВходящихДокументов() Экспорт
	МассивНаименований = Новый Массив();
	МассивНаименований.Добавить(НСтр("ru='Поступление'"));
	ПоступлениеУслугВПодразделениеЛокализация.ДополнитьНаименованияВходящихДокументов(МассивНаименований);
	Возврат МассивНаименований
КонецФункции

// Возвращает структуру с наименованием табличных частей документа, хранящих информацию о товарах.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие наименования табличных частей:
//		* Услуги - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о товарах документа.
//	
Функция КоллекцияТабличныхЧастейТоваров() Экспорт
	
	ТаблицыДокумента = Новый Структура("Услуги");
	
	Возврат ТаблицыДокумента;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область УчетНДС

// Возвращает параметры для заполнения налогообложения НДС.
//
// Параметры:
//	Документ - ДанныеФормыСтруктура, ДокументСсылка.ПоступлениеУслугВПодразделение, ДокументОбъект.ПоступлениеУслугВПодразделение - 
//				документ поступления товаров на склад.
//
// Возвращаемое значение:
//	Структура - состав полей задается в функции УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки().
//
Функция ПараметрыЗаполненияНалогообложенияНДСЗакупки(Документ) Экспорт
	
	РеквизитыДокумента = Новый Структура("Контрагент, Договор, ХозяйственнаяОперация, Дата");
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеУслугВПодразделение") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, РеквизитыДокумента);
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Документ);
	КонецЕсли;
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, РеквизитыДокумента);
	ПараметрыЗаполнения.Период  = РеквизитыДокумента.Дата;
	ХозОперацииЗакупкаУПоставщика  = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ХозОперацииЗакупкаВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	ХозОперацииЗакупкаПоИмпорту    = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	Если ХозОперацииЗакупкаУПоставщика.Найти(РеквизитыДокумента.ХозяйственнаяОперация) <> Неопределено Тогда
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
	ИначеЕсли ХозОперацииЗакупкаВСтранахЕАЭС.Найти(РеквизитыДокумента.ХозяйственнаяОперация) <> Неопределено Тогда
		ПараметрыЗаполнения.ВвозТоваровИзТаможенногоСоюза = Истина;
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает параметры для заполнения вида деятельности НДС.
//
// Параметры:
//	Документ - ДанныеФормыСтруктура, ДокументСсылка.ПоступлениеУслугВПодразделение, ДокументОбъект.ПоступлениеУслугВПодразделение - 
//				документ поступления товаров на склад.
//
// Возвращаемое значение:
//	Структура - состав полей задается в функции УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Документ) Экспорт
	
	РеквизитыДокумента = Новый Структура("Дата, Организация, Договор, НаправлениеДеятельности, Подразделение");
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПоступлениеУслугВПодразделение") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, РеквизитыДокумента);
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Документ);
	КонецЕсли;
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, РеквизитыДокумента);
	
	ХозОперацииЗакупкаУПоставщика = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	
	ХозОперацииЗакупкаВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	ХозОперацииЗакупкаПоИмпорту = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
										Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	
	Если ХозОперацииЗакупкаУПоставщика.Найти(Документ.ХозяйственнаяОперация) <> Неопределено
		Или ХозОперацииЗакупкаВСтранахЕАЭС.Найти(Документ.ХозяйственнаяОперация) <> Неопределено
		Или ХозОперацииЗакупкаПоИмпорту.Найти(Документ.ХозяйственнаяОперация) <> Неопределено Тогда
		
		ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
		
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТКлиентСервер.ОбработкаПолученияПредставленияВходящегоДокумента(
		Данные, Представление, СтандартнаяОбработка, "ПоступлениеУслугВПодразделение");
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Очистить();
	Поля.Добавить("НаименованиеВходящегоДокумента");
	Поля.Добавить("НомерВходящегоДокумента");
	Поля.Добавить("ДатаВходящегоДокумента");
	Поля.Добавить("Дата");
	Поля.Добавить("Номер");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныеПроцедурыИФункции

// Возвращает параметры выбора статей в документе.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 
// Возвращаемое значение:
// 	Массив - Массив параметров настройки счетов учета (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
//
Функция ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	#Область УслугиСтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.Услуги";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("УслугиСтатьяРасходов");
	
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("УслугиАналитикаРасходов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	МассивПараметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	Возврат МассивПараметровВыбора;
	
КонецФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Соглашение.Валюта КАК ВалютаСоглашения,
	|	ДанныеДокумента.ВидЦеныПоставщика.Валюта КАК ВалютаВидаЦеныПоставщика,
	|	ДанныеДокумента.ВидЦеныПоставщика,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ДанныеДокумента.Соглашение.ЦенаВключаетНДС КАК ЦенаВключаетНДССоглашения,
	|	ДанныеДокумента.РегистрироватьЦеныПоставщика КАК РегистрироватьЦеныПоставщика,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Соглашение.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.ПорядокОтраженияНеотфактурованныхПоставокНУ КАК ПорядокОтраженияНеотфактурованныхПоставокНУ,
	|	ДанныеДокумента.Менеджер КАК Менеджер,
	|	ДанныеДокумента.Автор КАК Автор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	НастройкиХозяйственныхОпераций.Ссылка КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Период", 							Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка", 							Реквизиты.Ссылка);
	
	Запрос.УстановитьПараметр("Организация", 						Реквизиты.Организация);
	Запрос.УстановитьПараметр("Партнер", 							Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Контрагент", 						Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Валюта", 							Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ВалютаСоглашения", 					Реквизиты.ВалютаСоглашения);
	Запрос.УстановитьПараметр("ВалютаВидаЦеныПоставщика",			Реквизиты.ВалютаВидаЦеныПоставщика);
	Запрос.УстановитьПараметр("ВидЦеныПоставщика",					Реквизиты.ВидЦеныПоставщика);
	Запрос.УстановитьПараметр("ЦенаВключаетНДСДокумента", 			Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("ЦенаВключаетНДССоглашения", 			Реквизиты.ЦенаВключаетНДССоглашения);
	Запрос.УстановитьПараметр("РегистрироватьЦеныПоставщика", 		Реквизиты.РегистрироватьЦеныПоставщика);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", 				Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Подразделение", 						Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Договор", 							Реквизиты.Договор);
	Запрос.УстановитьПараметр("Менеджер", 							Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Автор", 								Реквизиты.Автор);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", 			Реквизиты.НаправлениеДеятельности); 
	Запрос.УстановитьПараметр("СуммаДокумента", 					Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("Номер", 								Реквизиты.Номер);
	Запрос.УстановитьПараметр("Комментарий", 						Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления", 					Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", 							Реквизиты.Проведен);
	Запрос.УстановитьПараметр("Исправление", 						Реквизиты.Исправление);
	Запрос.УстановитьПараметр("СторнируемыйДокумент", 				Реквизиты.СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", 				Реквизиты.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",			ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи);
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации",     Реквизиты.НастройкаХозяйственнойОперации);
	Запрос.УстановитьПараметр("ПорядокОтраженияНеотфактурованныхПоставокНУ", Реквизиты.ПорядокОтраженияНеотфактурованныхПоставокНУ);
	
	Если Не ЗначениеЗаполнено(Реквизиты.ВариантПриемкиТоваров) Тогда
		ВариантПриемкиТоваров = Константы.ВариантПриемкиТоваров.Получить();
	Иначе
		ВариантПриемкиТоваров = Реквизиты.ВариантПриемкиТоваров;
	КонецЕсли;
	
	ИнформацияПоДоговору = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ШаблонСтроки = "ru = 'По договору ""%1""'"; // @НСтр
		ИнформацияПоДоговору = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
	// Документ является внутренним документом и не отражает предъявление НДС поставщиком.
	// При этом в нем нужно учитывать планируемое включение НДС в стоимость для корректного отражения начислений в затратах (должна отражаться сумма с НДС).
	// Поэтому переопределяем настройку учетной политики в документе при формировании движений по регистрам ПрочиеРасходы и СебестоимостьТоваров.
	Запрос.УстановитьПараметр("ФормироватьНДСПредъявленныйПриВключенииВСтоимость", Ложь);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Период КАК ДатаДокументаИБ,
	|	&Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация КАК Организация,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоХранения,
	|	&Подразделение КАК Подразделение,
	|	&Менеджер КАК Ответственный,
	|	&Автор КАК Автор,
	|	&Комментарий КАК Комментарий,
	|	&Валюта КАК Валюта,
	|	&СуммаДокумента КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору КАК Дополнительно,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НаименованиеПервичногоДокумента,
	|	&Исправление КАК СторноИсправление,
	|	&СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	&Период КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.ПоступлениеУслугВПодразделение";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Ложь;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",    """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоИсправлению", """""");
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", 	ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", 		ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
		ТекстЗапроса,
		ПолноеИмяДокумента,
		СинонимТаблицыДокумента,
		ВЗапросеЕстьИсточник,
		ПереопределениеРасчетаПараметров);
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ОформитьПоступлениеТоваровПоДвухходовке(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.Ссылка.Распоряжение В
	|		(
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		)
	|		ТОГДА
	|			ИсточникДанных.Ссылка
	|		ИНАЧЕ
	|			ИсточникДанных.Ссылка.Распоряжение
	|	КОНЕЦ КАК Накладная,
	|	ИсточникДанных.Ссылка.Распоряжение КАК Заказ,
	|	ИсточникДанных.Ссылка.Договор КАК Договор,
	|	ИсточникДанных.Ссылка.Соглашение КАК Соглашение,
	|	ИсточникДанных.Ссылка.ВариантПриемкиТоваров КАК ВариантПриемкиТоваров,
	|	ИсточникДанных.Ссылка.Дата КАК Дата,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Назначение КАК Назначение,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	0 КАК СтатусУказанияСерий,
	|	0 КАК СтатусУказанияСерийНаСкладах,
	|	0 КАК СтатусУказанияСерийТоварыУПартнеров,
	|	ЛОЖЬ КАК СверхЗаказа,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
	|	ИсточникДанных.Ссылка.Партнер КАК Отправитель,
	|	ИсточникДанных.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ИсточникДанных.Количество КАК Количество,
	|	ИСТИНА КАК ЭтоНакладная,
	|	НЕ ИсточникДанных.Ссылка.Распоряжение В
	|		(
	|		НЕОПРЕДЕЛЕНО,
	|		ЗНАЧЕНИЕ(Документ.ПриобретениеТоваровУслуг.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка)
	|		)
	|	КАК ПоступлениеПоЗаказам
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В(&Ссылка)
	|
	|";
	
	ТекущийОбъектМетаданных = Метаданные.Документы.ПоступлениеУслугВПодразделение;
	
	
	ПараметрыМетода = СкладыСервер.ПараметрыМодульногоПроведения();
	ПараметрыМетода.УчитываютсяВДвиженияхУслугиРаботы = Истина;
	
	СкладыСервер.ОформитьПоступлениеТоваровПоДвухходовкеСРаботамиИУслугами(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных,
		ПараметрыМетода);

КонецПроцедуры

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка              КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата         КАК Период,
		|	ТабЧасть.Номенклатура        КАК Номенклатура,
		|	ТабЧасть.Характеристика      КАК Характеристика,
		|	ТабЧасть.Подразделение       КАК Склад,
		|	ТабЧасть.Назначение          КАК Назначение,
		|	ТабЧасть.Количество          КАК Количество,
		|	ИСТИНА                       КАК ПоГрафику,
		|	ТабЧасть.Ссылка.Распоряжение КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|	И НЕ ТабЧасть.СписатьНаРасходы";
	
	РаспределениеЗапасовДвижения.ПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстНомераСтрок = РасчетСебестоимостиПроведениеДокументов.ТекстЗапросаКодыСтрокДляАналитикиУчетаПартий(
		Метаданные.Документы.ПоступлениеУслугВПодразделение.Имя,
		"Услуги", "АналитикаУчетаНоменклатурыТоварыУПартнеров");
	
	ТекстВыборкаПоляАналитик = ТекстНомераСтрок + "
	|ВЫБРАТЬ
	|	""Услуги""							КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 			КАК НомерСтроки,
	|	ДанныеДокумента.Партнер					КАК Поставщик,
	|	ДанныеДокумента.Контрагент				КАК Контрагент,
	|	ТаблицаДокумента.СтавкаНДС 				КАК СтавкаНДС,
	|	ВЫБОР
	|	 	КОГДА ЕСТЬNULL(Статьи.ВидЦенностиНДС, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ОС), ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.НМА))
	|				И ЕСТЬNULL(Статьи.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|				И ЕСТЬNULL(Статьи.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ВводОСВЭксплуатацию)
	|		КОГДА ЕСТЬNULL(Статьи.ВариантРаздельногоУчетаНДС, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаздельногоУчетаНДС.Распределение)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ОпределяетсяРаспределением)
	|		КОГДА ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|				И ТаблицаДокумента.Назначение.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|			ТОГДА &НалогообложениеОрганизации
	|		КОГДА ЕСТЬNULL(ТаблицаДокумента.Назначение.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		 И НЕ ТаблицаДокумента.СписатьНаРасходы
	|			ТОГДА ТаблицаДокумента.Назначение.ВидДеятельностиНДС
	|		КОГДА ДанныеДокумента.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС)
	|				И ДанныеДокумента.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПоФактическомуИспользованию)
	|			ТОГДА &НалогообложениеОрганизации
	|		ИНАЧЕ ДанныеДокумента.ВидДеятельностиНДС
	|	КОНЕЦ                               	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПрочиеРаботыИУслуги) КАК ВидЦенности,
	|	КодыСтрок.КодСтроки						КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугВПодразделение КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ТаблицаДокумента.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыСтрокДляАналитикиУчетаПартий КАК КодыСтрок
	|		ПО ТаблицаДокумента.НомерСтроки = КодыСтрок.НомерСтроки
	|		И КодыСтрок.ИмяТабличнойЧасти = ""Услуги""
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статьи
	|		ПО ТаблицаДокумента.СтатьяРасходов = Статьи.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	&ПустоеНазначение КАК Назначение,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры.МестоХранения КАК МестоХранения
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаУслуги.АналитикаУчетаНоменклатуры.Номенклатура = Аналитика.Номенклатура
	|			И ТаблицаУслуги.АналитикаУчетаНоменклатуры.Характеристика = Аналитика.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = Аналитика.Серия
	|			И ТаблицаУслуги.АналитикаУчетаНоменклатуры.МестоХранения = Аналитика.МестоХранения
	|			И (&ПустоеНазначение = Аналитика.Назначение)
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|	И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура КАК Номенклатура,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика КАК Характеристика,
	|	&ПустоеНазначение КАК Назначение,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.Серия КАК Серия,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения КАК МестоХранения
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК ТаблицаУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура = Аналитика.Номенклатура
	|			И ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика = Аналитика.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = Аналитика.Серия
	|			И ТаблицаУслуги.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения = Аналитика.МестоХранения
	|			И (&ПустоеНазначение = Аналитика.Назначение)
	|ГДЕ
	|	ТаблицаУслуги.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|	И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
		Запрос.Параметры.Валюта,
	    Запрос.Параметры.Валюта,
	    Запрос.Параметры.Период,
	    Запрос.Параметры.Организация);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаВидЗапасов(Запрос)
	
	Если Запрос.Параметры.Свойство("ВидЗапасов") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыВидаЗапасов = Новый Структура();
	РеквизитыВидаЗапасов.Вставить("Организация", Запрос.Параметры.Организация);
	РеквизитыВидаЗапасов.Вставить("ТипЗапасов", Перечисления.ТипыЗапасов.Работа);
	ВидЗапасов = Справочники.ВидыЗапасов.ВидЗапасовДокумента(Запрос.Параметры.Организация, 
		Запрос.Параметры.ХозяйственнаяОперация,
		РеквизитыВидаЗапасов);
	
	Запрос.УстановитьПараметр("ВидЗапасов", ВидЗапасов);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|	ТаблицаТовары.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаТовары.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|
	|	СУММА(ТаблицаТовары.СуммаСНДСУпр) КАК СуммаСНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СуммаБезНДС,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СуммаБезНДСУпр,
	|
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл + ТаблицаТовары.СуммаНДСРегл) КАК СуммаСНДСРегл,
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СуммаБезНДСРегл,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаТовары.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ТаблицаТовары.ПостояннаяРазницаСНДС
	|		ИНАЧЕ ТаблицаТовары.ПостояннаяРазницаБезНДС КОНЕЦ) КАК ПостояннаяРазница,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаТовары.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ТаблицаТовары.ВременнаяРазницаСНДС
	|		ИНАЧЕ ТаблицаТовары.ВременнаяРазницаБезНДС КОНЕЦ) КАК ВременнаяРазница,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации 
	|
	|ПОМЕСТИТЬ ВтИсходныеПрочиеРасходы
	|ИЗ
	|	ВтТаблицаУслуги КАК ТаблицаТовары
	|ГДЕ
	|	(ТаблицаТовары.СписатьНаРасходы 
	|		ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов,
	|	ТаблицаТовары.АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.Подразделение,
	|	ТаблицаТовары.НаправлениеДеятельности,
	|	ТаблицаТовары.ВидДеятельностиНДС,
	|	ТаблицаТовары.ИдентификаторСтроки
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов("ИдентификаторСтроки");
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = "
	// Расходы
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	ТаблицаТовары.Подразделение КАК Подразделение,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	ТаблицаТовары.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаТовары.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ТаблицаТовары.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТовары.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|
	// Для целей учета НДС данный документ не используется, т.к. по нему не может быть входящей счет-фактуры.
	// НДС будет учтен далее в документе ПриобретениеТоваровУслуг
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК Стоимость,
	|	СУММА(ТаблицаТовары.СуммаБезНДСУпр) КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|
	|	СУММА(ТаблицаТовары.СуммаБезНДСРегл) КАК СтоимостьРегл,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаТовары.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ТаблицаТовары.ПостояннаяРазницаСНДС
	|		ИНАЧЕ ТаблицаТовары.ПостояннаяРазницаБезНДС КОНЕЦ) КАК ПостояннаяРазница,
	|	СУММА(ВЫБОР
	|		КОГДА ТаблицаТовары.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ТаблицаТовары.ВременнаяРазницаСНДС
	|		ИНАЧЕ ТаблицаТовары.ВременнаяРазницаБезНДС КОНЕЦ) КАК ВременнаяРазница,
	|	0 КАК НДСРегл,
	|
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаТовары.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ ВтИсходныеПартииПрочихРасходов
	|ИЗ
	|	ВтТаблицаУслуги КАК ТаблицаТовары
	|ГДЕ
	|	(ТаблицаТовары.СписатьНаРасходы 
	|		ИЛИ ТаблицаТовары.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.СтатьяРасходов,
	|	ТаблицаТовары.АналитикаРасходов,
	|	ТаблицаТовары.АналитикаУчетаПартий,
	|	ТаблицаТовары.Подразделение,
	|	ТаблицаТовары.НаправлениеДеятельности,
	|	ТаблицаТовары.ВидДеятельностиНДС,
	|	ТаблицаТовары.ИдентификаторСтроки
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаУслуги(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаУслуги";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	УстановитьПараметрыЗапросаВидЗапасов(Запрос);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура, 
	|	ТаблицаУслугиРаботы.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая КАК ЦеховаяКладовая,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.Назначение КАК Назначение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|
	|	АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура КАК НоменклатураУПартнеров,
	|	АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика КАК ХарактеристикаУПартнеров,
	|	АналитикаУчетаНоменклатурыТоварыУПартнеров.Серия КАК СерияУПартнеров,
	|	АналитикаУчетаНоменклатурыТоварыУПартнеров.Назначение КАК НазначениеУПартнеров,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики КАК АналитикаНоменклатурыБезНазначения,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатурыТоварыУПартнеров КАК АналитикаТоварыУПартнеров,
	|	АналитикаУПартнеровБезНазначения.КлючАналитики КАК АналитикаТоварыУПартнеровБезНазначения,
	|
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|
	|	&ВидЗапасов КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасовНаСкладе,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ПустаяСсылка) КАК ТипЗапасовНаСкладе,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ТаблицаУслугиРаботы.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаУслугиРаботы.Количество КАК Количество,
	|
	|	ВЫРАЗИТЬ(ТаблицаУслугиРаботы.СуммаСНДС * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаСНДСУпр,
	|	ВЫРАЗИТЬ(ТаблицаУслугиРаботы.СуммаНДС * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаНДСУпр,
	|	ВЫРАЗИТЬ((ТаблицаУслугиРаботы.СуммаСНДС - ТаблицаУслугиРаботы.СуммаНДС)
	|		* &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаБезНДСУпр,
	|	
	|	ВЫРАЗИТЬ(ТаблицаУслугиРаботы.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаСНДСРегл,
	|	ВЫРАЗИТЬ((ТаблицаУслугиРаботы.СуммаСНДС - ТаблицаУслугиРаботы.СуммаНДС)
	|		* &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаБезНДСРегл,
	|	ВЫРАЗИТЬ(ТаблицаУслугиРаботы.СуммаНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаНДСРегл,
	|	
	|	ТаблицаУслугиРаботы.СписатьНаРасходы КАК СписатьНаРасходы,
	|	ТаблицаУслугиРаботы.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаУслугиРаботы.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаУслугиРаботы.Подразделение КАК Подразделение,
	|	ТаблицаУслугиРаботы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА &ПорядокОтраженияНеотфактурованныхПоставокНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияНеотфактурованныхПоставокНУ.ОтражатьПриФактуровке)
	|		 И (НЕ ТаблицаУслугиРаботы.СписатьНаРасходы
	// Если в документе указана статья расходов, не принимаемая к налоговому учету по налогу на прибыль, то должна быть отражена постоянная разница.
	|		 ИЛИ ЕСТЬNULL(ТаблицаУслугиРаботы.СтатьяРасходов.ПринятиеКНалоговомуУчету, ЛОЖЬ))
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслугиРаботы.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазницаСНДС,
	|	ВЫБОР
	|		КОГДА &ПорядокОтраженияНеотфактурованныхПоставокНУ = ЗНАЧЕНИЕ(Перечисление.ВариантыОтраженияНеотфактурованныхПоставокНУ.ОтражатьПриФактуровке)
	|		 И (НЕ ТаблицаУслугиРаботы.СписатьНаРасходы
	// Если в документе указана статья расходов, не принимаемая к налоговому учету по налогу на прибыль, то должна быть отражена постоянная разница.
	|		 ИЛИ ЕСТЬNULL(ТаблицаУслугиРаботы.СтатьяРасходов.ПринятиеКНалоговомуУчету, ЛОЖЬ))
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаУслугиРаботы.СуммаСНДС - ТаблицаУслугиРаботы.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазницаБезНДС,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ТаблицаУслугиРаботы.СтатьяРасходов.ПринятиеКНалоговомуУчету, ИСТИНА)
	|			ТОГДА ВЫРАЗИТЬ(ТаблицаУслугиРаботы.СуммаСНДС * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазницаСНДС,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ТаблицаУслугиРаботы.СтатьяРасходов.ПринятиеКНалоговомуУчету, ИСТИНА)
	|			ТОГДА ВЫРАЗИТЬ((ТаблицаУслугиРаботы.СуммаСНДС - ТаблицаУслугиРаботы.СуммаНДС) * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазницаБезНДС,
	|	ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры
	|
	|ПОМЕСТИТЬ ВтТаблицаУслуги
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК ТаблицаУслугиРаботы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.Номенклатура = АналитикаБезНазначения.Номенклатура
	|			И ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.Характеристика = АналитикаБезНазначения.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = АналитикаБезНазначения.Серия
	|			И ТаблицаУслугиРаботы.АналитикаУчетаНоменклатуры.МестоХранения = АналитикаБезНазначения.МестоХранения
	|			И (ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУПартнеровБезНазначения
	|		ПО ТаблицаУслугиРаботы.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура = АналитикаУПартнеровБезНазначения.Номенклатура
	|			И ТаблицаУслугиРаботы.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика = АналитикаУПартнеровБезНазначения.Характеристика
	|			И ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) = АналитикаУПартнеровБезНазначения.Серия
	|			И ТаблицаУслугиРаботы.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения = АналитикаУПартнеровБезНазначения.МестоХранения
	|			И (ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаУПартнеровБезНазначения.Назначение)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.НомерСтроки = ТаблицаУслугиРаботы.НомерСтроки
	|		И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Услуги""
	|ГДЕ
	|	ТаблицаУслугиРаботы.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаТаблицаЦеныНоменклатурыПоставщиков(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЦеныНоменклатурыПоставщиков";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("УслугиСРазличнымиЦенами", ТекстыЗапроса) Тогда
		ТекстЗапросаУслугиСРазличнымиЦенами(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(Услуги.НоменклатураПартнера) КАК НоменклатураПартнера,
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Характеристика КАК Характеристика,
	|	&ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	&ВалютаВидаЦеныПоставщика КАК Валюта,
	|	&Период КАК Период,
	|	&Партнер КАК Партнер,
	|	МИНИМУМ(Услуги.Упаковка) КАК Упаковка,
	|	ВЫРАЗИТЬ(СРЕДНЕЕ(Услуги.Цена * ВЫБОР
	|				КОГДА &Валюта <> Услуги.ВидЦеныПоставщика.Валюта
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(КурсыВалютыЦены.КурсЗнаменатель, 0) > 0
	|									И ЕСТЬNULL(КурсыВалютыЦены.КурсЧислитель, 0) > 0
	|									И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|									И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|								ТОГДА КурсыВалюты.КурсЧислитель * КурсыВалютыЦены.КурсЗнаменатель / (КурсыВалютыЦены.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК ЧИСЛО(31, 2)) КАК Цена
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК Услуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ УслугиСРазличнымиЦенами КАК УслугиСРазличнымиЦенами
	|		ПО Услуги.Номенклатура = УслугиСРазличнымиЦенами.Номенклатура
	|			И Услуги.Характеристика = УслугиСРазличнымиЦенами.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
	|		ПО (КурсыВалюты.Валюта = &Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
	|		ПО (КурсыВалютыЦены.Валюта = &ВалютаВидаЦеныПоставщика)
	|ГДЕ
	|	НЕ Услуги.ВидЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Услуги.Номенклатура,
	|	Услуги.Характеристика";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаУслуги(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаУслуги";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Услуги.НоменклатураПартнера КАК НоменклатураПартнера,
		|	Услуги.Номенклатура КАК Номенклатура,
		|	Услуги.Характеристика КАК Характеристика,
		|	&ВидЦеныПоставщика КАК ВидЦеныПоставщика,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
		|	ВЫРАЗИТЬ(Услуги.Цена * ВЫБОР
		|			КОГДА &ЦенаВключаетНДСДокумента
		|					И НЕ &ЦенаВключаетНДССоглашения
		|				ТОГДА 100 / (100 + Услуги.СтавкаНДС.Ставка)
		|			КОГДА НЕ &ЦенаВключаетНДСДокумента
		|					И &ЦенаВключаетНДССоглашения
		|				ТОГДА (Услуги.СтавкаНДС.Ставка + 100) / 100
		|			ИНАЧЕ 1
		|		КОНЕЦ * ВЫБОР
		|			КОГДА &Валюта <> &ВалютаСоглашения
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыСоглашения.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыВалютыСоглашения.КурсЧислитель, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
		|								И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
		|							ТОГДА КурсыВалюты.КурсЧислитель * КурсыВалютыСоглашения.КурсЗнаменатель / (КурсыВалютыСоглашения.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(31, 2)) КАК Цена
		|ПОМЕСТИТЬ ВременнаяТаблицаУслуги
		|ИЗ
		|	Документ.ПоступлениеУслугВПодразделение.Услуги КАК Услуги
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалюты
		|		ПО (КурсыВалюты.Валюта = &Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
		|		ПО (КурсыВалютыСоглашения.Валюта = &ВалютаСоглашения)
		|ГДЕ
		|	Услуги.Ссылка = &Ссылка
		|	И &РегистрироватьЦеныПоставщика";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУслугиСРазличнымиЦенами(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "УслугиСРазличнымиЦенами";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВременнаяТаблицаУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Услуги.Номенклатура КАК Номенклатура,
	|	Услуги.Характеристика КАК Характеристика,
	|	&ВидЦеныПоставщика КАК ВидЦеныПоставщика,
	|	СРЕДНЕЕ(Услуги.Цена) КАК ЦенаЗаБазовуюЕдиницу,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Услуги.Упаковка) КАК КоличествоРазличныхУпаковок
	|ПОМЕСТИТЬ УслугиСРазличнымиЦенами
	|ИЗ
	|	ВременнаяТаблицаУслуги КАК Услуги
	|
	|СГРУППИРОВАТЬ ПО
	|	Услуги.Номенклатура,
	|	Услуги.Характеристика";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВременнаяТаблицаКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВременнаяТаблицаКурсыВалют";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ОтносительныеКурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЧислитель КАК КурсЧислитель,
	|	ОтносительныеКурсыВалютСрезПоследних.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ВременнаяТаблицаКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, БазоваяВалюта В (ВЫБРАТЬ
	|				БазоваяВалютаПоУмолчанию.Значение КАК Значение
	|			ИЗ
	|				Константа.БазоваяВалютаПоУмолчанию КАК БазоваяВалютаПоУмолчанию)) КАК
	|		ОтносительныеКурсыВалютСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМатериалыИРаботыВПроизводстве(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МатериалыИРаботыВПроизводстве";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаУслуги", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаУслуги(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	&Организация КАК Организация,
	|	ТаблицаУслуги.Подразделение,
	|	ТаблицаУслуги.Номенклатура,
	|	ТаблицаУслуги.Характеристика,
	|	ТаблицаУслуги.Серия,
	|	ТаблицаУслуги.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаУслуги.Количество КАК Количество,
	|	ТаблицаУслуги.Назначение КАК Назначение,
	|	ИСТИНА КАК Первичное
	|ИЗ
	|	ВтТаблицаУслуги КАК ТаблицаУслуги
	|ГДЕ
	|	ТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ТаблицаУслуги.Номенклатура.ПрослеживаемыйТовар
	|	И НЕ ТаблицаУслуги.СписатьНаРасходы
	|	И ТаблицаУслуги.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтТаблицаУслуги");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтТаблицаУслуги(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	// Для работ и услуг формируются движения "Расход" по регистру "Себестоимость товаров" по разделу учету "Неотфактурованные поставки".
	// В аналитике учета номенклатуры должен быть заполнен договор в поле "Место учета".
	// В стоимость регл и стоимость упр включается сумма НДС, если закупка под деятельность с включением НДС в стоимость.
	// Аналитики финансового учета не заполняются.
	// В реквизитах Кор... указывается аналитика для отражения расхождений при фактуровке поставки.
	// Для работ заполняется:
	//	- Кор аналитика учета номенклатуры
	//	- Кор раздел учета
	// Для услуг и работ, списанных на расходы заполняется:
	//	- Подразделение
	//	- Статья расходов списания
	//	- Аналитика расходов
	//	- Кор направление деятельности
	// Для статьи расходов, не принимаемой к налоговому учету по налогу на прибыль, должна всегда возникать постоянная разница  
	
	#Область ВнешнееПоступление_Товар_НеотфактурованнаяПоставкаИЕАЭС_Расход
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 		КАК Период,
	|	ТаблицаДокумента.Ссылка 	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация					КАК Организация,
	|	ВтТаблицаУслуги.АналитикаТоварыУПартнеров		КАК АналитикаУчетаНоменклатуры,
	|	ВтТаблицаУслуги.ВидЗапасов						КАК ВидЗапасов,
	|	ВЫБОР КОГДА &Исправление
	|		ТОГДА ТаблицаДокумента.ИсправляемыйДокумент
	|		ИНАЧЕ ТаблицаДокумента.Ссылка
	|	КОНЕЦ 											КАК Партия,
	|	ВтТаблицаУслуги.ВидДеятельностиНДС				КАК ВидДеятельностиНДС,
	|	ВтТаблицаУслуги.ВидДеятельностиНДС				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ВтТаблицаУслуги.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	НЕОПРЕДЕЛЕНО									КАК КорАналитикаУчетаПартий,
	|	ТаблицаДокумента.Партнер						КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 					КАК Контрагент,
	|	ВтТаблицаУслуги.СтавкаНДС 						КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	ВтТаблицаУслуги.АналитикаНоменклатуры			КАК КорАналитикаУчетаНоменклатуры,
	|	ВтТаблицаУслуги.ВидЗапасов						КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО									КАК Сделка,
	|	ВтТаблицаУслуги.Подразделение					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО 									КАК Менеджер,
	|	ВтТаблицаУслуги.АналитикаТоварыУПартнеров.Номенклатура.ГруппаАналитическогоУчета КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТаблицаУслуги.Количество						КАК Количество,
	|	НЕОПРЕДЕЛЕНО 									КАК ИдентификаторСтроки,
	|
	|	ВтТаблицаУслуги.СуммаСНДСУпр 					КАК Стоимость,
	|	ВтТаблицаУслуги.СуммаБезНДСУпр 					КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.СуммаСНДСРегл
	|		ИНАЧЕ ВтТаблицаУслуги.СуммаБезНДСРегл
	|	КОНЕЦ 											КАК СтоимостьРегл,
	|	0												КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.СуммаСНДСУпр
	|		ИНАЧЕ ВтТаблицаУслуги.СуммаБезНДСУпр
	|	КОНЕЦ 											КАК СтоимостьУпр,
	|	0 												КАК НДСУпр,
	|	0												КАК СтоимостьЗабалансовая,
	|	0												КАК СтоимостьЗабалансоваяРегл,
	|	0 												КАК ДопРасходы,
	|	0 												КАК ДопРасходыБезНДС,
	|	0 												КАК ДопРасходыРегл,
	|	0 												КАК ДопРасходыУпр,
	|	(ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.ПостояннаяРазницаСНДС
	|		ИНАЧЕ ВтТаблицаУслуги.ПостояннаяРазницаБезНДС КОНЕЦ) КАК ПостояннаяРазница,
	|	(ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.ВременнаяРазницаСНДС
	|		ИНАЧЕ ВтТаблицаУслуги.ВременнаяРазницаБезНДС КОНЕЦ) КАК ВременнаяРазница,
	|	0												КАК КорСтоимость,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.НеотфактурованныеПоставки) КАК РазделУчета,
	|	ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа) 
	|		 И НЕ ВтТаблицаУслуги.СписатьНаРасходы
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 											КАК КорРазделУчета,
	|	ТаблицаДокумента.ХозяйственнаяОперация 			КАК ХозяйственнаяОперация,
	|	ВтТаблицаУслуги.ИдентификаторСтроки				КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации					КАК НастройкаХозяйственнойОперации,
	|
	// Необязательные поля
	|	ВтТаблицаУслуги.АналитикаРасходов				КАК АналитикаРасходов,
	|	ВтТаблицаУслуги.СтатьяРасходов					КАК СтатьяРасходовСписания,
	|	ВтТаблицаУслуги.НаправлениеДеятельности			КАК КорНаправлениеДеятельности
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаУслуги КАК ВтТаблицаУслуги
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти

	// Для работ, не списанных на расходы, формируются движения "Приход" по регистру "Себестоимость товаров"
	// по разделу учета "Производственные затраты".
	// В аналитике учета номенклатуры в поле "Место учета" указывается подразделение.
	// В стоимость регл и стоимость упр включается сумма НДС, если закупка под деятельность с включением НДС в стоимость.
	
	#Область ВнешнееПоступление_Работа_ПроизводственныеЗатраты_Приход
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 		КАК Период,
	|	ТаблицаДокумента.Ссылка 	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО				КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО				КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 				КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация					КАК Организация,
	|	ВтТаблицаУслуги.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ВтТаблицаУслуги.ВидЗапасов						КАК ВидЗапасов,
	|	ВЫБОР КОГДА &Исправление
	|		ТОГДА ТаблицаДокумента.ИсправляемыйДокумент
	|		ИНАЧЕ ТаблицаДокумента.Ссылка
	|	КОНЕЦ 											КАК Партия,
	|	ВтТаблицаУслуги.ВидДеятельностиНДС				КАК ВидДеятельностиНДС,
	|	ВтТаблицаУслуги.ВидДеятельностиНДС				КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ВтТаблицаУслуги.АналитикаУчетаПартий			КАК АналитикаУчетаПартий,
	|	ВтТаблицаУслуги.АналитикаУчетаПартий			КАК КорАналитикаУчетаПартий,
	|	ТаблицаДокумента.Партнер						КАК Поставщик,
	|	ТаблицаДокумента.Контрагент 					КАК Контрагент,
	|	ВтТаблицаУслуги.СтавкаНДС 						КАК СтавкаНДС,
	|
	// Корреспондирующие поля
	|	ВтТаблицаУслуги.АналитикаНоменклатуры			КАК КорАналитикаУчетаНоменклатуры,
	|	ВтТаблицаУслуги.ВидЗапасовНаСкладе				КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО									КАК Сделка,
	|	НЕОПРЕДЕЛЕНО				 					КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО									КАК Менеджер,
	|	ВтТаблицаУслуги.АналитикаТоварыУПартнеров.Номенклатура.ГруппаАналитическогоУчета КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ВтТаблицаУслуги.Количество						КАК Количество,
	|	НЕОПРЕДЕЛЕНО 									КАК ИдентификаторСтроки,
	|
	|	ВтТаблицаУслуги.СуммаСНДСУпр					КАК Стоимость,
	|	ВтТаблицаУслуги.СуммаБезНДСУпр					КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.СуммаСНДСРегл
	|		ИНАЧЕ ВтТаблицаУслуги.СуммаБезНДСРегл
	|	КОНЕЦ 											КАК СтоимостьРегл,
	|	0												КАК НДСРегл,
	|	ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.СуммаСНДСУпр
	|		ИНАЧЕ ВтТаблицаУслуги.СуммаБезНДСУпр
	|	КОНЕЦ 											КАК СтоимостьУпр,
	|	0												КАК НДСУпр,
	|	0												КАК СтоимостьЗабалансовая,
	|	0												КАК СтоимостьЗабалансоваяРегл,
	|	0												КАК ДопРасходы,
	|	0												КАК ДопРасходыБезНДС,
	|	0												КАК ДопРасходыРегл,
	|	0												КАК ДопРасходыУпр,
	|	(ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.ПостояннаяРазницаСНДС
	|		ИНАЧЕ ВтТаблицаУслуги.ПостояннаяРазницаБезНДС КОНЕЦ) КАК ПостояннаяРазница,
	|	(ВЫБОР
	|		КОГДА ВтТаблицаУслуги.ВидДеятельностиНДС В (&ТипыНалогообложенияНДСУчитываетсяВСтоимости)
	|			ТОГДА ВтТаблицаУслуги.ВременнаяРазницаСНДС
	|		ИНАЧЕ ВтТаблицаУслуги.ВременнаяРазницаБезНДС КОНЕЦ) КАК ВременнаяРазница,
	|	0												КАК КорСтоимость,
	|
	// Прочие поля
	|	ТаблицаДокумента.ХозяйственнаяОперация			КАК ХозяйственнаяОперация,
	|	ВтТаблицаУслуги.ИдентификаторСтроки				КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации					КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ПоступлениеУслугВПодразделение КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаУслуги КАК ВтТаблицаУслуги
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ВтТаблицаУслуги.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И НЕ ВтТаблицаУслуги.СписатьНаРасходы
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнешнееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	ПоступлениеУслугВПодразделениеЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПолноеИмяОбъекта()
	Возврат "Документ.ПоступлениеУслугВПодразделение";
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
