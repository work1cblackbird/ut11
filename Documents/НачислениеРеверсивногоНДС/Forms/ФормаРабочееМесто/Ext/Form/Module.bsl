
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИспользуемыеТипыДокументов = Новый Массив();
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.НачислениеРеверсивногоНДС"));
	ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.Сторно"));
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанельФормы;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецПериода = КонецМесяца(ТекущаяДатаСеанса());
	
	Список.Параметры.УстановитьЗначениеПараметра("ТипСсылки",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.НачислениеРеверсивногоНДС"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьСписокКРаспоряжению();
	УстановитьОтборДинамическогоСписка();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПодробнаяИнформацияНажатие(Элемент)
		
	ПараметрыФормы = Новый Структура;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПараметрыФормы.Вставить("ДатаНачала"   , НачалоДня(ТекущаяДата));
	ПараметрыФормы.Вставить("ДатаОкончания", КонецДня(ТекущаяДата));
	ПараметрыФормы.Вставить("Данные", ДанныеДляЖР());
	
	ОтборПоУровню = Новый СписокЗначений;
	ОтборПоУровню.Добавить("Ошибка", "Ошибка");
	ПараметрыФормы.Вставить("Уровень", ОтборПоУровню);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	
	ОбновитьСписки();
	Элементы.РаспоряженияОрганизация.Видимость = НЕ ЗначениеЗаполнено(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьСписки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентПриИзменении(Элемент)
	
	ОбновитьСписки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры


&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияУТКлиент.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок


&НаКлиенте
Процедура РаспоряженияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Распоряжения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Поле.Имя = "РаспоряженияДокументОснование" Тогда
		
		ОткрываемоеЗначение = ТекущиеДанные.ДокументОснование;
		
	ИначеЕсли Поле.Имя = "РаспоряженияКонтрагент" Тогда
		
		ОткрываемоеЗначение = ТекущиеДанные.Контрагент;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ПоказатьЗначение(,ОткрываемоеЗначение);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Проведение_Сторно"
			Или ИмяСобытия = "Запись_Сторно"
			Или ИмяСобытия = "Запись_КорректировкаЗадолженности" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "СозданДокументНачисленияРеверсивногоНДС"
		И Параметр.Свойство("ДокументОснование") Тогда
		
		СтрокиДляУдаления = Распоряжения.НайтиСтроки(Новый Структура("ДокументОснование", Параметр.ДокументОснование));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			
			Распоряжения.Удалить(СтрокаДляУдаления);
			
		КонецЦикла;
		
		ОбновитьЗаголовокСтраницыКОформлению();
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура СписокПровести(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиДокументы(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтменаПроведения(Команда)
	
	ОбщегоНазначенияУТКлиент.ОтменаПроведения(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаления(Элементы.Список, Заголовок);
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
		
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		ЭтотОбъект,
		Новый Структура("НачалоПериода, КонецПериода", "ДатаНачала", "ДатаОкончания"),
		Оповещение);
	
КонецПроцедуры

// Параметры:
// 	Период - СтандартныйПериод - Выбранный период
// 	ДополнительныеПараметры - Произвольный - Содержит дополнительные параметры
&НаКлиенте
Процедура ВыбратьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		
		НачалоПериода = Период.ДатаНачала;
		КонецПериода = Период.ДатаОкончания;
		
		ОбновитьСписки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСкопировать(Команда)
	
	ОбщегоНазначенияУТКлиент.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСоздать(Команда)
	
	ЗначенияЗаполнения = Новый Структура("Организация, Контрагент", Организация, Контрагент);
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ.НачислениеРеверсивногоНДС.ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНачислениеНДС(Команда)
	
	ТекущиеДанные = Элементы.Распоряжения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание", ТекущиеДанные.ДокументОснование);
	ОткрытьФорму("Документ.НачислениеРеверсивногоНДС.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСписки()
	
	УстановитьОтборДинамическогоСписка();
	ОбновитьСписокКРаспоряжению();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДинамическогоСписка()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Организация", Организация,
													ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Организация));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Контрагент", Контрагент,
													ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Контрагент));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НачалоПериода", НачалоПериода);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КонецПериода", КонецПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокКРаспоряжению()
	
	Элементы.СтраницыСписокРаспоряжений.ТекущаяСтраница = Элементы.СтраницаСписокРаспоряженийОжидание;
	
	РезультатВыполнения = ЗапуститьВыполнениеВФоне();
	Если РезультатВыполнения.Статус = "Выполнено" 
		ИЛИ РезультатВыполнения.Статус = "Ошибка" Тогда
		
		ЗаполнитьТаблицуРаспоряжений(РезультатВыполнения);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершенииОбновленияСостоянияПроверкиДокументов = Новый ОписаниеОповещения("ОбработатьРезультатОбновленияСпискаРаспоряжений", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершенииОбновленияСостоянияПроверкиДокументов, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьВыполнениеВФоне()
	
	ПараметрыОбработки = Документы.НачислениеРеверсивногоНДС.ПараметрыФормированияСпискаДокументовДляНачисленияРеверсивногоНДС();
	ПараметрыОбработки.Организация = Организация;
	ПараметрыОбработки.Контрагент = Контрагент;
	ПараметрыОбработки.НачалоПериода = НачалоПериода;
	ПараметрыОбработки.КонецПериода = КонецПериода;
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияФункции(ЭтотОбъект.УникальныйИдентификатор);
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьФункцию(ПараметрыФоновогоЗадания, "Документы.НачислениеРеверсивногоНДС.ОбновитьСписокРаспоряжений", ПараметрыОбработки);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатОбновленияСпискаРаспоряжений(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		ЗаполнитьТаблицуРаспоряжений(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуРаспоряжений(Результат)
	
	ЗаполнитьТаблицуРаспоряженийНаСервере(Результат);
	ОбновитьЗаголовокСтраницыКОформлению();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуРаспоряженийНаСервере(Результат)
	
	Если Результат.Статус = "Выполнено" Тогда
		
		РезультатЗапроса = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		Распоряжения.Загрузить(РезультатЗапроса.Выгрузить());
		Распоряжения.Сортировать("Дата");
		
		Элементы.СтраницыСписокРаспоряжений.ТекущаяСтраница = Элементы.СтраницаСписокРаспоряжений;
		
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		
		ИтоговаяИнформация = Результат.КраткоеПредставлениеОшибки;
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось заполнить список распоряжений для начисления реверсивного НДС'", ОбщегоНазначения.КодОсновногоЯзыка()),
							УровеньЖурналаРегистрации.Ошибка,,ДанныеДляЖР(),Результат.ПодробноеПредставлениеОшибки);
		
		Элементы.СтраницыСписокРаспоряжений.ТекущаяСтраница = Элементы.СтраницаСписокРаспоряженийОшибка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДляЖР()
	
	Возврат НСтр("ru = 'Заполнение списка распоряжений для начисления реверсивного НДС'");
	
КонецФункции

&НаКлиенте
Процедура ОбновитьЗаголовокСтраницыКОформлению()
	
	ТекстЗаголовка = НСтр("ru = 'К оформлению'");
	КоличествоРаспоряжений = Распоряжения.Количество();
	Если КоличествоРаспоряжений = 0 Тогда
		
		Элементы.СтраницаРаспоряжения.Заголовок = ТекстЗаголовка;
		
	Иначе
		
		Элементы.СтраницаРаспоряжения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 (%2)", 
																							ТекстЗаголовка,
																							КоличествоРаспоряжений);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
