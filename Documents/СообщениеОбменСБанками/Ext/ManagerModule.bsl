#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает визуальное представление электронного документа.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена.
//  ИдентификаторПечати - Строка - идентификатор печатной формы.
//  ДляПечати - Булево - если документ формируется для печати, то он будет содержать разделители.
// 
// Возвращаемое значение:
//  ТабличныйДокумент - визуальное преставление электронного документа;
//  Неопределено - некорректное содержимое электронного документа.
//
Функция ФайлДанныхЭД(СообщениеОбмена, ИдентификаторПечати = Неопределено, ДляПечати = Ложь) Экспорт

	ДопИнформацияПоЭД = ДанныеФайла(СообщениеОбмена);
	
	Если ДопИнформацияПоЭД <> Неопределено И ДопИнформацияПоЭД <> Неопределено
		И ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
		И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ТабличныйДокумент = СформироватьПечатнуюФормуЭД(
			СообщениеОбмена, ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла, ИдентификаторПечати, ДляПечати);
		
		Если ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			Возврат ТабличныйДокумент;
		КонецЕсли;

	КонецЕсли;
	
КонецФункции

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПечататьЭД = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, ПараметрыПечати.Идентификатор);
	Если ПечататьЭД Тогда
		ТабДок = ПечатьЭД(МассивОбъектов, ОбъектыПечати, ПараметрыПечати.Идентификатор, ПараметрыПечати);
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, ПараметрыПечати.Идентификатор, ПараметрыПечати.Представление, ТабДок);
	КонецЕсли;

КонецПроцедуры

// Регистрирует данные для обработчика обновления
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПолныеИменаОбъектов = Метаданные.Документы.СообщениеОбменСБанками.ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	
	ВыгрузкаРезультата = ЗаполнитьТаблицуМаршрутовПодписанияЭДЗапрос().Выгрузить();
	МассивСсылок = ВыгрузкаРезультата.ВыгрузитьКолонку("Документ");
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
	
	ОтработаныВсеДанные = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	СообщениеОбменСБанками.Ссылка КАК Ссылка,
	|	СообщениеОбменСБанками.Дата КАК Дата
	|ИЗ
	|	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|ГДЕ
	|	СообщениеОбменСБанками.Ссылка > &Ссылка
	|	И ((СообщениеОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.УдалитьУтвержден)
	|	ИЛИ СообщениеОбменСБанками.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОбменСБанками.УдалитьНаУтверждении))
	|	ИЛИ (СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	|	И СообщениеОбменСБанками.ДатаОкончания = &ПустаяДата)
	|	ИЛИ (СообщениеОбменСБанками.ВидЭД = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.ВыпискаБанка)
	|	И СообщениеОбменСБанками.НомерСчета = """")
	|	ИЛИ СообщениеОбменСБанками.ПрограммаБанка = ЗНАЧЕНИЕ(Перечисление.ПрограммыБанка.ПустаяСсылка))
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Ссылка = Документы.СообщениеОбменСБанками.ПустаяСсылка();
	
	Пока Не ОтработаныВсеДанные Цикл

		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
		ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, МассивСсылок);
		
		КоличествоСсылок = МассивСсылок.Количество();
		Если КоличествоСсылок < 1000 Тогда
			ОтработаныВсеДанные = Истина;
		КонецЕсли;
		Если КоличествоСсылок > 0 Тогда
			Ссылка = МассивСсылок[КоличествоСсылок - 1];
		КонецЕсли;

	КонецЦикла
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеОбъекта = Метаданные.Документы.СообщениеОбменСБанками;
	ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
	
	ЧитаемыеСправочники = Новый Массив;
	ЧитаемыеСправочники.Добавить("Справочник.НастройкиОбменСБанками");
	ЧитаемыеСправочники.Добавить("Справочник.СообщениеОбменСБанкамиПрисоединенныеФайлы");
	ЧитаемыеСправочники.Добавить("Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования");
	
	Если ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "РегистрСведений.СостояниеПодписанияЭД")
		Или ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "РегистрСведений.ЭлектронныеПодписи")
		Или ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, "РегистрСведений.НаличиеФайлов")
		Или ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, ЧитаемыеСправочники) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ДанныеДляОбновления = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если Не ЗначениеЗаполнено(ДанныеДляОбновления) Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
			Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	ОбработанныхОбъектов = 0;
	ПроблемныхОбъектов = 0;
	
	Для каждого СтрокаТаблицы Из ДанныеДляОбновления Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Записать = Ложь;
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				ЗаполнитьТаблицуМаршрутовПодписанияЭДОбработатьДанные(Объект, Записать);
				УдалитьСтатусУтвержден(Объект, Записать);
				ОбработанПрисоединенныйФайл = Истина;
				ЗаполнитьПериодВыписки(Объект, Записать, ОбработанПрисоединенныйФайл);
				ЗаполнитьПрограммуБанка(Объект, Записать);
				Если НЕ ОбработанПрисоединенныйФайл Тогда
					ЗафиксироватьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Если Записать Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка);
			КонецЕсли;
			
			ОбработанныхОбъектов = ОбработанныхОбъектов + 1;

			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать документ: %Регистратор% по причине: %Причина%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Регистратор%", СтрокаТаблицы.Ссылка);
			ТекстСообщения = СтрЗаменить(
				ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			СобытиеЖурналаРегистрации = ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации();
			ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.СообщениеОбменСБанками, , ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработанныхОбъектов = 0 И ПроблемныхОбъектов <> 0 Тогда
		ШаблонСообщения = НСтр("ru = 'Не удалось обработать некоторые сообщения обмена с банками (пропущены): %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
	Иначе
		ШаблонСообщения = НСтр("ru = 'Обработана очередная порция сообщений обмена с банками: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбработанныхОбъектов);
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, МетаданныеОбъекта,, ТекстСообщения);
	КонецЕсли;
	
	Параметры.ПрогрессВыполнения.ОбработаноОбъектов = Параметры.ПрогрессВыполнения.ОбработаноОбъектов
													+ ОбработанныхОбъектов;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		Если ЗначениеЗаполнено(Данные.ДатаНачала) И ЗначениеЗаполнено(Данные.ДатаОкончания) Тогда
			ШаблонПредставления = НСтр("ru = '%1 с %2 по %3'");
			ДатаНачала = Формат(Данные.ДатаНачала, "ДЛФ=D");
			ДатаОкончания = Формат(Данные.ДатаОкончания, "ДЛФ=D");
			Представление = СтрШаблон(ШаблонПредставления, Данные.ВидЭД, ДатаНачала, ДатаОкончания);
		ИначеЕсли ЗначениеЗаполнено(Данные.ПредставлениеДокумента) Тогда
			Представление = Данные.ПредставлениеДокумента;
		Иначе
			ШаблонПредставления = НСтр("ru = '%1 от %2'");
			ДатаОкончания = Формат(Данные.ДатаОкончания, "ДЛФ=D");
			Представление = СтрШаблон(ШаблонПредставления, Данные.ВидЭД, ДатаОкончания);
		КонецЕсли;
	ИначеЕсли Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеЗачисленияДенежныхСредствНаСчетаСотрудников
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПодтверждениеОткрытияСчетовПоЗарплатномуПроекту
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.УведомлениеОЗачисленииВалюты Тогда
		ШаблонПредставления = НСтр("ru = '%1 от %2'");
		Представление = СтрШаблон(ШаблонПредставления, Данные.ВидЭД, Данные.Дата);
	ИначеЕсли Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Письмо Тогда
		Если Данные.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
			Шаблон = НСтр("ru = 'Входящее письмо из банка №%1 от %2'");
			Номер = Данные.НомерДокументаОтправителя;
		Иначе
			Шаблон = НСтр("ru = 'Исходящее письмо в банк №%1 от %2'");
			Номер = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Данные.Номер);
		КонецЕсли;
		Представление = СтрШаблон(Шаблон, Номер, Данные.Дата);
	ИначеЕсли Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаЗачислениеДенежныхСредствНаСчетаСотрудников
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокНаОткрытиеСчетовПоЗарплатномуПроекту
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СписокУволенныхСотрудников
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.СправкаОПодтверждающихДокументах 
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РеестрВыплатСамозанятым 
		ИЛИ Данные.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РеестрЧековВыплатСамозанятым Тогда
		Шаблон = НСтр("ru = '%1 №%2 от %3'");
		Представление = СтрШаблон(Шаблон, Данные.ВидЭД, Данные.НомерДокументаОтправителя, Формат(Данные.Дата, "ДЛФ=D" ));
	Иначе
		Представление = Данные.ВидЭД;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Очистить();
	Поля.Добавить("ПредставлениеДокумента");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("ДатаОкончания");
	Поля.Добавить("ВидЭД");
	Поля.Добавить("Дата");
	Поля.Добавить("Направление");
	Поля.Добавить("НомерДокументаОтправителя");
	Поля.Добавить("Номер");
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Получает данные подписей для вывода штампа
//
// Параметры:
//  ПрисоединенныйФайл - СправочникСсылка.СообщениеОбменСБанкамиПрисоединенныеФайлы - ссылка на присоединенный файл с подписью.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - информация для штампа. Содержит колонки:
//    * ДатаПодписи - Дата - дата и время установки подписи
//    * НомерСертификата - Строка - серийный номер сертификата
//    * ВыдалСертификат - Строка - удостоверяющий центр, который выдал сертификат
//    * ВладелецСертификата - Строка - кому выдан сертификат
//    * СрокДействия - Строка - период действия сертификата.
//
Функция ДанныеПодписейДляШтампа(ПрисоединенныйФайл) Экспорт
	
	УстановленныеПодписи = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
	ЭлектронныеПодписи = Новый ТаблицаЗначений;
	ЭлектронныеПодписи.Колонки.Добавить("ДатаПодписи");
	ЭлектронныеПодписи.Колонки.Добавить("НомерСертификата");
	ЭлектронныеПодписи.Колонки.Добавить("ВыдалСертификат");
	ЭлектронныеПодписи.Колонки.Добавить("ВладелецСертификата");
	ЭлектронныеПодписи.Колонки.Добавить("СрокДействия");
	
	Для каждого ЭлементКоллекции Из УстановленныеПодписи Цикл
		Попытка
			ДвоичныеДанныеСертификата = ЭлементКоллекции.Сертификат.Получить();
			Если ТипЗнч(ДвоичныеДанныеСертификата) = Тип("ДвоичныеДанные") Тогда
				Сертификат = Новый СертификатКриптографии(ДвоичныеДанныеСертификата);
			Иначе
				// исключительная ситуация, данных нет. Штамп не выводится.
				Продолжить;
			КонецЕсли;
		Исключение
			// Сертификаты БИФИТ имеют нестандартный формат. Штамп не выводится
			Продолжить;
		КонецПопытки;
		НоваяЗапись = ЭлектронныеПодписи.Добавить();
		НоваяЗапись.ДатаПодписи = ЭлементКоллекции.ДатаПодписи;
		НоваяЗапись.НомерСертификата = Строка(Сертификат.СерийныйНомер);
		НоваяЗапись.ВыдалСертификат = Сертификат.Издатель.CN;
		НоваяЗапись.ВладелецСертификата = ЭлементКоллекции.КомуВыданСертификат;
		Шаблон = НСтр("ru = 'с %1 по %2'");
		СрокДействия = СтрШаблон(Шаблон, Формат(Сертификат.ДатаНачала, "ДЛФ=D"), Формат(Сертификат.ДатаОкончания, "ДЛФ=D"));
		НоваяЗапись.СрокДействия = СрокДействия;
	КонецЦикла;

	Возврат ЭлектронныеПодписи
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункцииОбработчиковОбновления

Функция ЗаполнитьТаблицуМаршрутовПодписанияЭДЗапрос(СообщениеОбмена = Неопределено)
	
	// Выберем документы, которые сейчас находятся на подписи
	Запрос = Новый Запрос;
	
	ПодписываемыеПоМаршрутуВидыЭД = ОбменСБанкамиСлужебныйПовтИсп.ВидыДокументовПодписываемыхПоМаршруту();
	Запрос.УстановитьПараметр("ПустойМаршрут", Справочники.МаршрутыПодписания.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПодписываемыеПоМаршрутуВидыЭД", ПодписываемыеПоМаршрутуВидыЭД);
	Запрос.УстановитьПараметр("СостояниеНаПодписи", Перечисления.СостоянияОбменСБанками.НаПодписи);
	Запрос.УстановитьПараметр("СтатусЧастичноПодписан", Перечисления.СтатусыОбменСБанками.ЧастичноПодписан);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка КАК НастройкаОбмена,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент КАК ВидЭД,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.МаршрутПодписания КАК МаршрутПодписания
	|ПОМЕСТИТЬ НастройкиСМаршрутами
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент В(&ПодписываемыеПоМаршрутуВидыЭД)
	|	И ВЫБОР
	|			КОГДА НастройкиОбменСБанкамиИсходящиеДокументы.СпособПодтвержденияДокумента <> ЗНАЧЕНИЕ(Перечисление.СпособыПодтвержденияДокументовОбменСБанками.ПустаяСсылка)
	|				ТОГДА НастройкиОбменСБанкамиИсходящиеДокументы.СпособПодтвержденияДокумента = ЗНАЧЕНИЕ(Перечисление.СпособыПодтвержденияДокументовОбменСБанками.ЭлектроннаяПодпись)
	|			ИНАЧЕ НастройкиОбменСБанкамиИсходящиеДокументы.ИспользоватьЭП
	|		КОНЕЦ
	|	И НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Недействительна = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СообщениеОбменСБанками.Ссылка КАК Документ,
	|	&ТекстПолей КАК ТекстПолей
	|ИЗ
	|	НастройкиСМаршрутами КАК НастройкиСМаршрутами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
	|		ПО НастройкиСМаршрутами.НастройкаОбмена = СообщениеОбменСБанками.НастройкаОбмена
	|			И НастройкиСМаршрутами.ВидЭД = СообщениеОбменСБанками.ВидЭД
	|			И (СообщениеОбменСБанками.Состояние = &СостояниеНаПодписи)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостояниеПодписанияЭД КАК СостояниеПодписанияЭД
	|			ПО СообщениеОбменСБанками.Ссылка = СостояниеПодписанияЭД.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиОбменСБанками КАК НастройкиОбменСБанками
	|		ПО НастройкиСМаршрутами.НастройкаОбмена = НастройкиОбменСБанками.Ссылка
	|ГДЕ
	|	&УсловиеНаОбъекты
	|	И СостояниеПодписанияЭД.Объект ЕСТЬ NULL";
	Если СообщениеОбмена <> Неопределено Тогда
		Запрос.УстановитьПараметр("СообщениеОбмена", СообщениеОбмена);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъекты", "СообщениеОбменСБанками.Ссылка  = &СообщениеОбмена");
		
		// Добавим поля - это понадобится для обработки данных
		ТекстПолей = 
		"НастройкиСМаршрутами.ВидЭД,
		|	НастройкиСМаршрутами.МаршрутПодписания,
		|	НастройкиОбменСБанками.СертификатыПодписейОрганизации.(
		|		Ссылка,
		|		НомерСтроки,
		|		СертификатЭП КАК Сертификат,
		|		СертификатЭП.Отпечаток КАК Отпечаток
		|	),
		|	ВЫБОР
		|		КОГДА СообщениеОбменСБанками.Статус = &СтатусЧастичноПодписан
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЧастичноПодписан";
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПолей КАК ТекстПолей", ТекстПолей);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаОбъекты", "ИСТИНА");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстПолей КАК ТекстПолей", "ИСТИНА");
	КонецЕсли;
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ЗаполнитьТаблицуМаршрутовПодписанияЭДОбработатьДанные(Объект, Записать)

	// Выберем документы, которые сейчас находятся на подписи
	РезультатЗапроса = ЗаполнитьТаблицуМаршрутовПодписанияЭДЗапрос(Объект.Ссылка);
	ВыборкаСообщений = РезультатЗапроса.Выбрать();
	Если ВыборкаСообщений.Следующий() Тогда
		ИспользуемыеСертификаты = Новый Массив;
		ОтпечаткиСертификатов = Новый Соответствие;
		ВыборкаСертификатов = ВыборкаСообщений.СертификатыПодписейОрганизации.Выбрать();
		Пока ВыборкаСертификатов.Следующий() Цикл
			ИспользуемыеСертификаты.Добавить(ВыборкаСертификатов.Сертификат);
			ОтпечаткиСертификатов.Вставить(ВыборкаСертификатов.Отпечаток, ВыборкаСертификатов.Сертификат);
		КонецЦикла;
		
		ВесМаршрута = 0;
		
		// Сформируем первичный маршрут подписания
		МаршрутыПодписанияБЭД.СформироватьМаршрутПодписанияЭД(ВыборкаСообщений.Документ, 
			ВыборкаСообщений.МаршрутПодписания,,, ВесМаршрута);
		
		// Если документ уже подписан одной подписью, обновим таблицу подписания
		Если ВыборкаСообщений.ЧастичноПодписан Тогда
			ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(ВыборкаСообщений.Документ, Ложь);
			Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
				ВыборкаПодписей = ЭлектроннаяПодпись.УстановленныеПодписи(ПрисоединенныйФайл);
				Для Каждого СтруктураПодписи Из ВыборкаПодписей Цикл
					СертификатПодписи = ОтпечаткиСертификатов.Получить(СтруктураПодписи.Отпечаток);
					Если ЗначениеЗаполнено(СертификатПодписи) Тогда
						МаршрутыПодписанияБЭД.ОбновитьМаршрутПриПодписании(
							ВыборкаСообщений.Документ, СертификатПодписи, ВесМаршрута);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Сформируем и запишем представление прогресса подписания
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	СостоянияОбменСБанками.СсылкаНаОбъект КАК СсылкаНаОбъект
		               |ИЗ
		               |	РегистрСведений.СостоянияОбменСБанками КАК СостоянияОбменСБанками
		               |ГДЕ
		               |	СостоянияОбменСБанками.СообщениеОбмена = &СообщениеОбмена";
		Запрос.УстановитьПараметр("СообщениеОбмена", ВыборкаСообщений.Документ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Объект.ДополнительныеСвойства.Вставить("ОбновитьСостояниеОбъектовИБ");
		Объект.ПредставлениеПрогрессаПодписания = ОбменСБанкамиСлужебный.ПредставлениеПрогрессаПодписания(
			ВыборкаСообщений.Документ, ВесМаршрута);
			
		Если НЕ ОбщегоНазначенияБЭД.КонфигурацияИспользуетНесколькоЯзыков() Тогда
			Пока Выборка.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.СостоянияОбменСБанками.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.СсылкаНаОбъект.Установить(Выборка.СсылкаНаОбъект);
				НаборЗаписей.Прочитать();
				Для Каждого Запись Из НаборЗаписей Цикл
					Запись.ПредставлениеСостояния = СтрШаблон("%1 %2", Объект.Состояние, Объект.ПредставлениеПрогрессаПодписания);
				КонецЦикла;
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			КонецЦикла;
		КонецЕсли;
		
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСтатусУтвержден(ОбъектОбработки, Записать)
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектОбработки.Ссылка, "Статус, Состояние");
	
	Если ЗначенияРеквизитов.Состояние = Перечисления.СостоянияОбменСБанками.УдалитьНаУтверждении
		ИЛИ ЗначенияРеквизитов.Статус = Перечисления.СтатусыОбменСБанками.УдалитьУтвержден Тогда

		Если ОбъектОбработки.Состояние = Перечисления.СостоянияОбменСБанками.УдалитьНаУтверждении Тогда
			ОбъектОбработки.Состояние = Перечисления.СостоянияОбменСБанками.ТребуетсяОтправка;
		КонецЕсли;
		
		Если ОбъектОбработки.Статус = Перечисления.СтатусыОбменСБанками.УдалитьУтвержден Тогда
			ОбъектОбработки.Статус = Перечисления.СтатусыОбменСБанками.Сформирован;
		КонецЕсли;
		
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПрограммуБанка(ОбъектОбработки, Записать)
	
	Если Не ЗначениеЗаполнено(ОбъектОбработки.ПрограммаБанка)
		И ЗначениеЗаполнено(ОбъектОбработки.НастройкаОбмена) Тогда
		ОбъектОбработки.ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта
			(ОбъектОбработки.НастройкаОбмена, "ПрограммаБанка");
		Записать = Истина;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ДанныеВыпискиЗаПериод(ТаблицаВыписок, Период)
	
	ТаблицаВозврата = ТаблицаВыписок.СкопироватьКолонки();
	КорневаяСтрока = ТаблицаВозврата.Добавить();
	ПерваяСтрока = ТаблицаВыписок.Получить(0);
	ЗаполнитьЗначенияСвойств(КорневаяСтрока, ПерваяСтрока, "Банк, НомерСчета, Организация, Штамп");
	КорневаяСтрока.КонецПериода = Период.ДатаОкончания;
	КорневаяСтрока.НачалоПериода = Период.ДатаНачала;
	КорневаяСтрока.Операции = ПерваяСтрока.Операции.СкопироватьКолонки();
	КорневаяСтрока.Операции.Колонки.Добавить("ХешСтроки");
	ОборотВходящихПлатежей = 0; ОборотИсходящихПлатежей = 0;
	Для каждого Выписка Из ТаблицаВыписок Цикл
		Если Выписка.НачалоПериода = Период.ДатаНачала Тогда
			КорневаяСтрока.НачальныйОстаток = Выписка.НачальныйОстаток;
		КонецЕсли;
		Для каждого Операция Из Выписка.Операции Цикл
			Если Операция.ДатаОперации < Период.ДатаНачала ИЛИ Операция.ДатаОперации > Период.ДатаОкончания Тогда
				Продолжить;
			КонецЕсли;
			ХешСтроки = ХешСтрокиТаблицыЗначений(Операция);
			Если КорневаяСтрока.Операции.Найти(ХешСтроки, "ХешСтроки") = Неопределено Тогда
				НовЗапись = КорневаяСтрока.Операции.Добавить();
				ЗаполнитьЗначенияСвойств(НовЗапись, Операция);
				НовЗапись.ХешСтроки = ХешСтроки;
				Если Операция.НаправлениеПлатежа = "1" Тогда
					ОборотИсходящихПлатежей = ОборотИсходящихПлатежей + Операция.СуммаДокумента;
				Иначе
					ОборотВходящихПлатежей = ОборотВходящихПлатежей + Операция.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	КорневаяСтрока.Операции.Сортировать("ДатаОперации");
	
	Если Не ЗначениеЗаполнено(КорневаяСтрока.НачальныйОстаток) Тогда
		Для каждого Выписка Из ТаблицаВыписок Цикл
			Если Выписка.НачалоПериода < Период.ДатаНачала Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НачальныйОстаток = Выписка.НачальныйОстаток;
		Для каждого ЭлементКоллекции Из Выписка.Операции Цикл
			Если ЭлементКоллекции.ДатаОперации >= Период.ДатаНачала
				И ЭлементКоллекции.ДатаОперации <= Период.ДатаОкончания Тогда
				Если ЭлементКоллекции.НаправлениеПлатежа = "1" Тогда
					НачальныйОстаток = НачальныйОстаток - ЭлементКоллекции.СуммаДокумента;
				Иначе
					НачальныйОстаток = НачальныйОстаток + ЭлементКоллекции.СуммаДокумента;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		КорневаяСтрока.НачальныйОстаток = НачальныйОстаток;
	КонецЕсли;
	
	КорневаяСтрока.КонечныйОстаток = КорневаяСтрока.НачальныйОстаток + ОборотВходящихПлатежей - ОборотИсходящихПлатежей;
	КорневаяСтрока.ОборотВходящихПлатежей = ОборотВходящихПлатежей;
	КорневаяСтрока.ОборотИсходящихПлатежей = ОборотИсходящихПлатежей;
	
	КорневаяСтрока.ДатаФормирования = ТекущаяДатаСеанса();
	
	Возврат ТаблицаВозврата;
	
КонецФункции

Функция ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, СообщатьОбОшибке = Истина)
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаВДереве(Дерево, ИмяРеквизита, СообщатьОбОшибке)
	
КонецФункции

Функция ПечатьЭД(МассивОбъектов, ОбъектыПечати, ИдентификаторПечати, ПараметрыПечати)
	
	Если ИдентификаторПечати = "ВыпискаЗаПроизвольныйПериод" Тогда
		ТабДок = ТабличныйДокументВыпискиЗаПериод(МассивОбъектов, ПараметрыПечати.Период);
	ИначеЕсли ИдентификаторПечати = "КомплектДокументовЗаПроизвольныйПериод" Тогда
		ТабДок = ТабличныйДокументКомплектаДокументовЗаПериод(МассивОбъектов, ПараметрыПечати.Период);
	Иначе
		ТабДок = ФайлДанныхЭД(МассивОбъектов, ИдентификаторПечати, Истина);
	КонецЕсли;
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") Тогда
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 1, ОбъектыПечати, МассивОбъектов.Получить(0));
	Иначе
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДок, 1, ОбъектыПечати, МассивОбъектов);
	КонецЕсли;
	
	Возврат ТабДок;
	
КонецФункции

Функция ДанныеФайла(Знач СообщениеОбмена)
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, , Истина);
		Возврат ДанныеФайла;
	КонецЕсли;
	
КонецФункции

Функция СформироватьПечатнуюФормуЭД(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла, ИдентификаторПечати, ДляПечати)
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СообщениеОбмена, "Идентификатор, ВидЭД, ФорматФайла");
	
	Если ОбменСБанкамиСлужебный.ЭтоЗарплатныйПроект(РеквизитыСообщенияОбмена.ВидЭД) Тогда
		Возврат ТабличныйДокументЗарплатногоПроекта(СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;
	
	ОбщийТабДок = Новый ТабличныйДокумент;
	
	ВывестиИдентификаторДокумента(ОбщийТабДок, РеквизитыСообщенияОбмена.Идентификатор, ИдентификаторПечати);
		
	Если РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение Тогда
		ТабличныйДокумент = ПечатнаяФормаПлатежногоПоручения(
			СообщениеОбмена, РеквизитыСообщенияОбмена.ФорматФайла, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование Тогда
		ТабличныйДокумент = ПечатнаяФормаПлатежногоТребования(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки Тогда
		ТабличныйДокумент = ПечатнаяФормаЗапросаВыписки(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка Тогда
		ТабличныйДокумент = ПечатнаяФормаВыпискиБанка(
			СообщениеОбмена, ИдентификаторПечати, ДляПечати, РеквизитыСообщенияОбмена.ФорматФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.Квитанция Тогда
		ТабличныйДокумент = ПечатнаяФормаКвитанции(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД Тогда
		ТабличныйДокумент = ПечатнаяФормаЗапросаСостоянияЭД(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросЗонд Тогда
		ТабличныйДокумент = ПечатнаяФормаЗапросаЗонда(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ИзвещениеОСостоянииЭД Тогда
		ТабличныйДокумент = ПечатнаяФормаИзвещенияОСостоянии(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ЗапросНаОтзывЭД Тогда
		ТабличныйДокумент = ПечатнаяФормаЗапросаНаОтзыв(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПереводВалюты Тогда
		ТабличныйДокумент = ПечатнаяФормаПорученияНаПереводВалюты(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПокупкуВалюты Тогда
		ТабличныйДокумент = ПечатнаяФормаПорученияНаПокупкуВалюты(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ПоручениеНаПродажуВалюты Тогда
		ТабличныйДокумент = ПечатнаяФормаПорученияНаПродажуВалюты(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РаспоряжениеНаОбязательнуюПродажуВалюты Тогда
		ТабличныйДокумент = ПечатнаяФормаРаспоряженияНаОбязательнуюПродажуВалюты(
			СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РеестрВыплатСамозанятым Тогда
		ТабличныйДокумент = ПечатнаяФормаРеестрВыплатСамозанятым(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	ИначеЕсли РеквизитыСообщенияОбмена.ВидЭД = Перечисления.ВидыЭДОбменСБанками.РеестрЧековВыплатСамозанятым Тогда
		ТабличныйДокумент = ПечатнаяФормаРеестрЧековВыплатыСамозанятым(СообщениеОбмена, СсылкаНаДвоичныеДанныеФайла);
	КонецЕсли;
		
	ДобавитьТабличныйДокумент(ОбщийТабДок, ТабличныйДокумент);
		
	Возврат ОбщийТабДок;
	
КонецФункции

Функция ТабличныйДокументЗарплатногоПроекта(СсылкаНаДвоичныеДанныеФайла)
	
	ДанныеЭД = ПолучитьИзВременногоХранилища(СсылкаНаДвоичныеДанныеФайла);
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДанныеЭД.Записать(ИмяФайла);
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ОбменСБанкамиПереопределяемый.ЗаполнитьТабличныйДокумент(ИмяФайла, ТабличныйДокумент);
	ФайловаяСистема.УдалитьВременныйФайл(ИмяФайла);
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура ДобавитьТабличныйДокумент(ОбщийТабДок, ТабличныйДокумент)
		
	ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);
	ОбластьЯчеек.СоздатьФорматСтрок();
	ОбщийТабДок.Вывести(ТабличныйДокумент);
	ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;
	ОбщийТабДок.АвтоМасштаб = Истина;
	ОбщийТабДок.ОтображатьЗаголовки = Ложь;
	ОбщийТабДок.ОтображатьСетку = Ложь;
	ОбщийТабДок.ТолькоПросмотр = Истина;
	
КонецПроцедуры

Процедура ВывестиИдентификаторДокумента(ОбщийТабДок, Идентификатор, ИдентификаторПечати)

	Если ЗначениеЗаполнено(Идентификатор) И ИдентификаторПечати <> "КомплектДокументов"  Тогда
		МакетИдентификатораДокумента = ОбменСБанкамиСлужебный.ПолучитьМакетИдентификатораДокумента();
		ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = Идентификатор;
		ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();
		ОбластьЯчеек.СоздатьФорматСтрок();
		ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатнаяФормаПлатежногоПоручения(СообщениеОбмена, ФорматФайла, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	
	Если ФорматФайла = "json" Тогда
		ДанныеЭДДляПечати = ДанныеДляПечатиПлатежногоПорученияИзJSON(ДанныеФайла);
	Иначе
		Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
			Перечисления.ВидыЭДОбменСБанками.ПлатежноеПоручение, ДанныеФайла);
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
	КонецЕсли;
	
	ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, СообщениеОбмена);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиПлатежногоПорученияИзJSON(ДанныеДокумента)
	
	СтруктураВозврата = Новый Структура;
	ДанныеСтрокой = ОбменСБанкамиСлужебныйВызовСервера.СтрокаИзДвоичныхДанных(ДанныеДокумента);
	СтруктураДанных = ОбменСБанкамиСлужебный.ДанныеИзJSON(ДанныеСтрокой);
	
	СтруктураВозврата.Вставить("Номер", СтруктураДанных.number);
	СтруктураВозврата.Вставить("Дата", СтруктураДанных.date);
	СтруктураВозврата.Вставить("СекцияДокумент", "Платежное поручение");
	СтруктураВозврата.Вставить("Сумма", СтруктураДанных.amount);
	СтруктураВозврата.Вставить("Номер", СтруктураДанных.number);
	СтруктураВозврата.Вставить("ИдентификаторДокумента");
	СтруктураДанных.Свойство("externalId", СтруктураВозврата.ИдентификаторДокумента);
	
	ЗаполнитьРеквизитыПлательщикаИзJSON(СтруктураДанных, СтруктураВозврата);
	
	ЗаполнитьРеквизитыПолучателяИзJSON(СтруктураДанных, СтруктураВозврата);
	
	СтруктураВозврата.Вставить("ВидПлатежа");
	СтруктураДанных.Свойство("deliveryKind", СтруктураВозврата.ВидПлатежа);
	СтруктураВозврата.Вставить("Очередность");
	СтруктураДанных.Свойство("priority", СтруктураВозврата.Очередность);
	СтруктураВозврата.Вставить("КодВидаДохода");
	СтруктураДанных.Свойство("incomeTypeCode", СтруктураВозврата.КодВидаДохода);
	СтруктураВозврата.Вставить("НазначениеПлатежа");
	СтруктураДанных.Свойство("purpose", СтруктураВозврата.НазначениеПлатежа);
	
	ЗаполнитьБюджетныеРеквизитыИзJSON(СтруктураДанных, СтруктураВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ЗаполнитьБюджетныеРеквизитыИзJSON(СтруктураДанных, СтруктураВозврата);
	
	СтруктураВозврата.Вставить("Код");
	Если СтруктураДанных.Свойство("DepartmentalInfo") Тогда
		СтруктураДанных.DepartmentalInfo.Свойство("uip", СтруктураВозврата.Код);
		СтруктураВозврата.Вставить("СтатусСоставителя");
		СтруктураДанных.DepartmentalInfo.Свойство("drawerStatus101", СтруктураВозврата.СтатусСоставителя);
		СтруктураВозврата.Вставить("ЭтоПлатежВБюджет", ЗначениеЗаполнено(СтруктураВозврата.СтатусСоставителя));
		СтруктураВозврата.Вставить("ПоказательКБК");
		СтруктураДанных.DepartmentalInfo.Свойство("kbk", СтруктураВозврата.ПоказательКБК);
		СтруктураВозврата.Вставить("ОКТМО");
		СтруктураДанных.DepartmentalInfo.Свойство("oktmo", СтруктураВозврата.ОКТМО);
		СтруктураВозврата.Вставить("ПоказательОснования");
		СтруктураДанных.DepartmentalInfo.Свойство("reasonCode106", СтруктураВозврата.ПоказательОснования);
		СтруктураВозврата.Вставить("ПоказательПериода");
		СтруктураДанных.DepartmentalInfo.Свойство("taxPeriod107", СтруктураВозврата.ПоказательПериода);
		СтруктураВозврата.Вставить("ПоказательНомера");
		СтруктураДанных.DepartmentalInfo.Свойство("docNumber108", СтруктураВозврата.ПоказательНомера);
		СтруктураВозврата.Вставить("ПоказательДаты");
		СтруктураДанных.DepartmentalInfo.Свойство("docDate109", СтруктураВозврата.ПоказательДаты);
		СтруктураВозврата.Вставить("КодВыплат");
		СтруктураДанных.DepartmentalInfo.Свойство("paymentKind110", СтруктураВозврата.КодВыплат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПлательщикаИзJSON(СтруктураДанных, СтруктураВозврата);
	
	СтруктураВозврата.Вставить("ПлательщикНаименование");
	СтруктураДанных.Свойство("payerName", СтруктураВозврата.ПлательщикНаименование);
	СтруктураВозврата.Вставить("ПлательщикИНН");
	СтруктураДанных.Свойство("payerInn", СтруктураВозврата.ПлательщикИНН);
	СтруктураВозврата.Вставить("ПлательщикКПП");
	СтруктураДанных.Свойство("payerKpp", СтруктураВозврата.ПлательщикКПП);
	СтруктураВозврата.Вставить("ПлательщикРасчСчет");
	СтруктураДанных.Свойство("payerAccount", СтруктураВозврата.ПлательщикРасчСчет);
	СтруктураВозврата.Вставить("ПлательщикБИКБанка");
	СтруктураДанных.Свойство("payerBankBic", СтруктураВозврата.ПлательщикБИКБанка);
	СтруктураВозврата.Вставить("ПлательщикКоррСчетБанка");
	СтруктураДанных.Свойство("payerBankCorrAccount", СтруктураВозврата.ПлательщикКоррСчетБанка);
	РеквизитыБанка = РеквизитыБанка(СтруктураВозврата.ПлательщикБИКБанка);
	СтруктураВозврата.Вставить("ПлательщикГородБанка", РеквизитыБанка.Город);
	СтруктураВозврата.Вставить("ПлательщикНаименованиеБанка", РеквизитыБанка.Наименование);
	
КонецПроцедуры

Функция РеквизитыБанка(БИК)

	Возврат ОбменСБанкамиСлужебныйВызовСервера.РеквизитыБанка(БИК);
	
КонецФункции

Процедура ЗаполнитьРеквизитыПолучателяИзJSON(СтруктураДанных, СтруктураВозврата)
	
	СтруктураВозврата.Вставить("ПолучательНаименование");
	СтруктураДанных.Свойство("payeeName", СтруктураВозврата.ПолучательНаименование);
	СтруктураВозврата.Вставить("ПолучательИНН");
	СтруктураДанных.Свойство("payeeInn", СтруктураВозврата.ПолучательИНН);
	СтруктураВозврата.Вставить("ПолучательКПП");
	СтруктураДанных.Свойство("payeeKpp", СтруктураВозврата.ПолучательКПП);
	СтруктураВозврата.Вставить("ПолучательРасчСчет");
	СтруктураДанных.Свойство("payeeAccount", СтруктураВозврата.ПолучательРасчСчет);
	СтруктураВозврата.Вставить("ПолучательБИКБанка");
	СтруктураДанных.Свойство("payeeBankBic", СтруктураВозврата.ПолучательБИКБанка);
	СтруктураВозврата.Вставить("ПолучательКоррСчетБанка");
	СтруктураДанных.Свойство("payeeBankCorrAccount", СтруктураВозврата.ПолучательКоррСчетБанка);
	РеквизитыБанка = РеквизитыБанка(СтруктураВозврата.ПолучательБИКБанка);
	СтруктураВозврата.Вставить("ПолучательГородБанка", РеквизитыБанка.Город);
	СтруктураВозврата.Вставить("ПолучательНаименованиеБанка", РеквизитыБанка.Наименование);
		
КонецПроцедуры

Функция ПечатнаяФормаПлатежногоТребования(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.ПлатежноеТребование, ДанныеФайла);
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
	ЗаполнитьТабличныйДокументПлатежноеТребование_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, СообщениеОбмена);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаЗапросаВыписки(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.ЗапросВыписки, ДанныеФайла);
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора);
	ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаВыпискиБанка(СообщениеОбмена, ИдентификаторПечати, ДляПечати, ПрограммаБанка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если ИдентификаторПечати = "КомплектДокументов" Тогда
		ЗаполнитьТабличныйДокументКомплектаДокументов(СообщениеОбмена, ТабличныйДокумент);
	Иначе
		МассивСообщенийОбмена = Новый Массив;
		МассивСообщенийОбмена.Добавить(СообщениеОбмена);
		ДеревоРазбора = Неопределено;
		ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений(МассивСообщенийОбмена, ДеревоРазбора);
		ЗаполнитьТабличныйДокументВыпискиБанка(ДеревоРазбора, ТабличныйДокумент, ДляПечати);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаКвитанции(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора);
	ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаЗапросаСостоянияЭД(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД, ДанныеФайла);
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
	НазваниеМакета = СтрШаблон("ЭД_ЗапросОСостоянииЭД_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаЗапросаЗонда(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.ЗапросОСостоянииЭД, ДанныеФайла);
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
	НазваниеМакета = СтрШаблон("ЭД_ЗапросЗонд_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаИзвещенияОСостоянии(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
	ЗаполнитьТабличныйДокументИзвещениеОСостоянии_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаЗапросаНаОтзыв(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	ДанныеЭДДляПечати = ДанныеДляПечати(СтрокаОбъекта);
	НазваниеМакета = СтрШаблон("ЭД_ЗапросНаОтзыв_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, НазваниеМакета);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаПорученияНаПереводВалюты(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ДанныеЭДДляПечати = ПолучитьДанныеПлатежногоПорученияВВалютеДляПечати(СтрокаОбъекта, ДеревоРазбора);
	ЗаполнитьТабличныйДокументПорученияНаПереводВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаПорученияНаПокупкуВалюты(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ДанныеЭДДляПечати = ПолучитьДанныеПорученияНаПокупкуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора);
	ЗаполнитьТабличныйДокументПорученияНаПокупкуВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);	
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаПорученияНаПродажуВалюты(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ДанныеЭДДляПечати = ПолучитьДанныеПорученияНаПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора);
	ЗаполнитьТабличныйДокументПорученияНаПродажуВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаРаспоряженияНаОбязательнуюПродажуВалюты(СообщениеОбмена, ДанныеФайлаСсылка)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайлаСсылка);
	Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
		Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеФайла);
	ДеревоРазбора = Результат.ДеревоРазбора;
	СтрокаОбъекта = Результат.СтрокаОбъекта;
	
	ДанныеЭДДляПечати = ПолучитьДанныеРаспоряженияНаОбязательнуюПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора);
	ЗаполнитьТабличныйДокументРаспоряженияНаОбязательнуюПродажуВалюты(ТабличныйДокумент, ДанныеЭДДляПечати);
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТабличныйДокументВыпискиЗаПериод(МассивОбъектов, Период)
	
	ПолнаяТаблицаВыписок = ОбменСБанками.ДанныеВыпискиБанкаТаблицаЗначений(МассивОбъектов);
	ВыпискаЗаПериод = ДанныеВыпискиЗаПериод(ПолнаяТаблицаВыписок, Период);
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСБанками.ВыпискаБанка");

	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ВыпискаЗаПериод, "Выписки");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьТабличныйДокументВыпискиБанка(ДеревоДанных, ТабличныйДокумент, Истина);
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТабличныйДокументКомплектаДокументов(ДеревоРазбора, НастройкаОбмена)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ЕстьДокументы = Ложь;
	МассивИдентификаторов = Новый Массив;
		
	ПрограммаБанка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаОбмена, "ПрограммаБанка");
	
	СтрокаТаблицыВыписок = ДеревоРазбора.Строки.Найти("Выписки", "ПолныйПуть");
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		
		СтрокаОперацияВыписки = Выписка.Строки.Найти("Выписки.НомерСтроки.Операции", "ПолныйПуть");
		Если СтрокаОперацияВыписки.Значение <> Неопределено И СтрокаОперацияВыписки.Значение <> 0 Тогда
			Для Каждого Операция Из СтрокаОперацияВыписки.Строки Цикл
				ЕстьДокументы = Истина;
				НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
						
				Если НаправлениеПлатежа = "1" Тогда // исходящий
					ИдентификаторДокумента = ЗначениеРеквизитаВДереве(
						Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ИдентификаторДокумента");
					Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
						МассивИдентификаторов.Добавить(ИдентификаторДокумента);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьДокументы Тогда
		ТекстСообщения = НСтр("ru = 'За указанный период не было проведено ни одной операции'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ПлатежныеДокументыВИБ = Новый ТаблицаЗначений;
	Если МассивИдентификаторов.Количество() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	СообщениеОбменСБанками.Ссылка КАК Ссылка,
		               |	СообщениеОбменСБанками.Идентификатор КАК Идентификатор,
		               |	СообщениеОбменСБанками.ДополнительныеДанные КАК ДополнительныеДанные
		               |ИЗ
		               |	Документ.СообщениеОбменСБанками КАК СообщениеОбменСБанками
		               |ГДЕ
		               |	СообщениеОбменСБанками.НастройкаОбмена = &НастройкаОбмена
		               |	И СообщениеОбменСБанками.Идентификатор В(&МассивИдентификаторов)";
		Запрос.УстановитьПараметр("НастройкаОбмена", НастройкаОбмена);
		Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
		Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, "СообщениеОбменСБанками.Идентификатор", "СообщениеОбменСБанками.ВнешнийИдентификатор");
		КонецЕсли;
		ПлатежныеДокументыВИБ = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		
		СтрокаОперацияВыписки = Выписка.Строки.Найти("Выписки.НомерСтроки.Операции", "ПолныйПуть");
		Если СтрокаОперацияВыписки.Значение <> Неопределено И СтрокаОперацияВыписки.Значение <> 0 Тогда
			Для Каждого Операция Из СтрокаОперацияВыписки.Строки Цикл
				КодВидаЭД = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаЭД");
				Если КодВидаЭД = "10" ИЛИ КодВидаЭД = "30" Тогда
					ДобавитьПлатежноеПоручениеИзВыписки(ТабличныйДокумент, Операция, ПлатежныеДокументыВИБ, ПрограммаБанка)
				ИначеЕсли КодВидаЭД = "11" Тогда
					ДобавитьПлатежноеТребованиеИзВыписки(ТабличныйДокумент, Операция, ПлатежныеДокументыВИБ)
				ИначеЕсли КодВидаЭД = "12" Тогда
					ДобавитьИнкассовоеПоручениеИзВыписки(ТабличныйДокумент, Операция)
				ИначеЕсли КодВидаЭД = "17" Тогда
					ДобавитьПлатежныйОрдерИзВыписки(ТабличныйДокумент, Операция)
				ИначеЕсли КодВидаЭД = "18" Тогда
					ДобавитьБанковскийОрдерИзВыписки(ТабличныйДокумент, Операция)
				ИначеЕсли КодВидаЭД = "16" Тогда
					ДобавитьМемориальныйОрдерИзВыписки(ТабличныйДокумент, Операция)
				ИначеЕсли КодВидаЭД = "24" Тогда
					ДобавитьОбъявлениеНаВзносНаличнымиИзВыписки(ТабличныйДокумент, Операция)
				ИначеЕсли КодВидаЭД = "25" Тогда
					ДобавитьЧекИзВыписки(ТабличныйДокумент, Операция);
				Иначе
					ДобавитьВнутрибанковскийДокументИзВыписки(ТабличныйДокумент, Операция)
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ТабличныйДокументКомплектаДокументовЗаПериод(МассивОбъектов, Период)
	
	ПолнаяТаблицаВыписок = ОбменСБанками.ДанныеВыпискиБанкаТаблицаЗначений(МассивОбъектов);
	ВыпискаЗаПериод = ДанныеВыпискиЗаПериод(ПолнаяТаблицаВыписок, Период);
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ДеревоЭлектронногоДокумента("ОбменСБанками.ВыпискаБанка");

	ЭлектронноеВзаимодействие.ЗагрузитьТаблицуВДерево(ДеревоДанных, ВыпискаЗаПериод, "Выписки");
	
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивОбъектов.Получить(0), "НастройкаОбмена");
	
	Возврат ТабличныйДокументКомплектаДокументов(ДеревоДанных, НастройкаОбмена);

КонецФункции

Функция ДанныеДляПечати(СтрокаОбъекта)
	
	ДанныеДляОбъекта = Новый Структура;
	
	Для Каждого РеквизитСтроки Из СтрокаОбъекта.Строки Цикл
		ДанныеДляОбъекта.Вставить(РеквизитСтроки.Реквизит, РеквизитСтроки.ЗначениеРеквизита);
	КонецЦикла;
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПлатежноеТребование_ЭД(ТабличныйДокумент, Реквизиты, СообщениеОбмена)

	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеТребование_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьМакета = Макет.ПолучитьОбласть("ПлатежноеТребование");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	Если Реквизиты.УсловиеОплаты = "1" Тогда
		ОбластьМакета.Параметры.УсловиеОплаты = НСтр("ru = '1 - заранее данный акцепт плательщика'");
	Иначе
		ОбластьМакета.Параметры.УсловиеОплаты = НСтр("ru = '2 - требуется получение акцепта плательщика'");
	КонецЕсли;
	
	ОбластьМакета.Параметры.СуммаПрописью = ЧислоПрописью(
		Реквизиты.Сумма, "ДП=Ложь", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ТРЕБОВАНИЕ №'") + " " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Реквизиты.Дата, "ДЛФ=D");
	
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП(
		"" + Реквизиты.ПлательщикНаименованиеБанка + " " + Реквизиты.ПлательщикГородБанка);
	
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП(
		"" + Реквизиты.ПолучательНаименованиеБанка + " " + Реквизиты.ПолучательГородБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Если Реквизиты.Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("НаименованиеБанка", Реквизиты.ПлательщикНаименованиеБанка);
	РеквизитыБанка.Вставить("БИК", Реквизиты.ПлательщикБИКБанка);
	РеквизитыБанка.Вставить("ГородБанка", Реквизиты.ПлательщикГородБанка);
	
	ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, СообщениеОбмена, РеквизитыБанка);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПорученияНаПереводВалюты(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ПоручениеНаПереводВалюты_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	
	Если ДанныеПечати.ВидПлатежа = "Срочный" Тогда
		ОбластьШапка.Параметры.Срочный = "X";
	Иначе
		ОбластьШапка.Параметры.Стандартный = "X";
	КонецЕсли;
	
	Если ДанныеПечати.ТипКомиссии = "BEN" Тогда
		ОбластьШапка.Параметры.BEN = "X";
	ИначеЕсли ДанныеПечати.ТипКомиссии = "SHA" Тогда
		ОбластьШапка.Параметры.SHA = "X";
	ИначеЕсли ДанныеПечати.ТипКомиссии = "OUR" Тогда
		ОбластьШапка.Параметры.OUR = "X";
	КонецЕсли;

		
	ТабличныйДокумент.Вывести(ОбластьШапка);
		
	Если ДанныеПечати.КодыВидовВалютныхОпераций.Количество() Тогда
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("КодыВидовВалютнойОперацииШапка");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		Для Каждого Код Из ДанныеПечати.КодыВидовВалютныхОпераций Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Код);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьПодвал.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПлатежноеПоручениеИсходящее_ЭД(ТабличныйДокумент, Реквизиты, СообщениеОбмена)

	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеПоручение_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ №'") + " " + Реквизиты.Номер;
	ОбластьМакета.Параметры.ДатаДокумента = Формат(Реквизиты.Дата, "ДЛФ=D");

	// Для Сбербанка даты берутся из квитанции
	Квитанция = ОбменСБанкамиСлужебный.ПодчиненноеСообщениеОбмена(
		СообщениеОбмена, Перечисления.ВидыЭДОбменСБанками.Квитанция, Ложь);
	Если ЗначениеЗаполнено(Квитанция) Тогда
		ДанныеЭД = ОбменСБанкамиСлужебныйВызовСервера.ДвоичныеДанныеПрисоединенногоФайла(Квитанция);
		Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
			Перечисления.ВидыЭДОбменСБанками.Квитанция, ДанныеЭД);
		ДеревоРазбора = Результат.ДеревоРазбора;
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		ДатаПоступления = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
		Если НЕ ЗначениеЗаполнено(ДатаПоступления) Тогда
			ДатаПоступления = ЗначениеРеквизитаСтрокиДереваРазбора(
				ДеревоРазбора, СтрокаОбъекта, "ДатаИсполненияБанком");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДатаПоступления) Тогда
			ДатаПоступления = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
		КонецЕсли;
		ОбластьМакета.Параметры.ДатаПоступления = ДатаПоступления;
		ДатаСписания = ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
		Если ЗначениеЗаполнено(ДатаСписания) Тогда
			ОбластьМакета.Параметры.ДатаСписания = ДатаСписания;
		Иначе // иногда Сбербанк присылает квитанции без дат
			ЗаполнитьДатыИзДополнительныхДанных(СообщениеОбмена, ОбластьМакета.Параметры);
		КонецЕсли;
	Иначе // данные берутся из дополнительного реквизита электронного документа
		ЗаполнитьДатыИзДополнительныхДанных(СообщениеОбмена, ОбластьМакета.Параметры);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		КодВалюты = КодВалютыБанковскогоСчета(Реквизиты.ПлательщикРасчСчет);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				Реквизиты.Сумма, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;
	
	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП(
		"" + Реквизиты.ПлательщикНаименованиеБанка + " " + Реквизиты.ПлательщикГородБанка);
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП(
		"" + Реквизиты.ПолучательНаименованиеБанка + " " + Реквизиты.ПолучательГородБанка);
	
	Если Реквизиты.Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	РеквизитыБанка = Новый Структура;
	РеквизитыБанка.Вставить("НаименованиеБанка", Реквизиты.ПлательщикНаименованиеБанка);
	РеквизитыБанка.Вставить("БИК", Реквизиты.ПлательщикБИКБанка);
	РеквизитыБанка.Вставить("ГородБанка", Реквизиты.ПлательщикГородБанка);
	ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, СообщениеОбмена, РеквизитыБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументЗапросВыписки_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ЗапросВыписки_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ДанныеШапки = ДанныеПечати.Шапка;
	
	ОбластьЗаголовок.Параметры.ДатаНачалаПериода    = Формат(ДанныеШапки.ДатаНачала, "ДЛФ=D");
	ОбластьЗаголовок.Параметры.ДатаОкончанияПериода = Формат(ДанныеШапки.ДатаКонца,  "ДЛФ=D");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	РасчетныеСчета = ДанныеПечати.РасчетныеСчета;
	
	ОбластьСтрокаРасчетныйСчет = Макет.ПолучитьОбласть("СтрокаТЧ");
	
	Для Каждого СтрокаТЧ Из РасчетныеСчета Цикл
		ОбластьСтрокаРасчетныйСчет.Параметры.Заполнить(СтрокаТЧ);
		ТабличныйДокумент.Вывести(ОбластьСтрокаРасчетныйСчет);
	КонецЦикла;
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументИзвещениеОСостоянии_ЭД(ТабличныйДокумент, Реквизиты)

	НазваниеМакета = СтрШаблон("ЭД_ИзвещениеОСостоянииЭД_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если Реквизиты.ЕстьОшибка Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("Ошибка");
	Иначе
		ОбластьМакета = Макет.ПолучитьОбласть("Статус");
	КонецЕсли;
		
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокумент_ЭД(ТабличныйДокумент, Реквизиты, НазваниеМакета)

	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументКвитанция_ЭД(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_Квитанция_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	ОбластьТикетСББОЛ = Макет.ПолучитьОбласть("ТикетСББОЛ");
	ОбластьТикетСББОЛ.Параметры.ТикетСББОЛ = ДанныеПечати.ТикетСББОЛ;
	ТабличныйДокумент.Вывести(ОбластьТикетСББОЛ);
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСозданияКвитка) Тогда
		ОбластьДатаСозданияКвитка = Макет.ПолучитьОбласть("ДатаСозданияКвитка");
		ОбластьДатаСозданияКвитка.Параметры.ДатаСозданияКвитка = ДанныеПечати.ДатаСозданияКвитка;
		ТабличныйДокумент.Вывести(ОбластьДатаСозданияКвитка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.КодСостоянияДокумента) Тогда
		ОбластьКодСостоянияДокумента = Макет.ПолучитьОбласть("КодСостоянияДокумента");
		ОбластьКодСостоянияДокумента.Параметры.КодСостоянияДокумента = ДанныеПечати.КодСостоянияДокумента;
		ТабличныйДокумент.Вывести(ОбластьКодСостоянияДокумента);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторОрганизации) Тогда
		ОбластьИдентификаторОрганизации = Макет.ПолучитьОбласть("ИдентификаторОрганизации");
		ОбластьИдентификаторОрганизации.Параметры.ИдентификаторОрганизации = ДанныеПечати.ИдентификаторОрганизации;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторОрганизации);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ИдентификаторДокумента) Тогда
		ОбластьИдентификаторДокумента = Макет.ПолучитьОбласть("ИдентификаторДокумента");
		ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = ДанныеПечати.ИдентификаторДокумента;
		ТабличныйДокумент.Вывести(ОбластьИдентификаторДокумента);
	КонецЕсли;
	
	Если ДанныеПечати.ЕстьБанковскиеДаты Тогда
		ОбластьБанковскиеДаты = Макет.ПолучитьОбласть("БанковскиеДаты");
		ТабличныйДокумент.Вывести(ОбластьБанковскиеДаты);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаСписанияСоСчетаПлательщика) Тогда
		ОбластьДатаСписанияСоСчетаПлательщика = Макет.ПолучитьОбласть("ДатаСписанияСоСчетаПлательщика");
		ОбластьДатаСписанияСоСчетаПлательщика.Параметры.ДатаСписанияСоСчетаПлательщика = ДанныеПечати.ДатаСписанияСоСчетаПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаСписанияСоСчетаПлательщика);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПостановкиВКартотеку) Тогда
		ОбластьДатаПостановкиВКартотеку = Макет.ПолучитьОбласть("ДатаПостановкиВКартотеку");
		ОбластьДатаПостановкиВКартотеку.Параметры.ДатаПостановкиВКартотеку = ДанныеПечати.ДатаПостановкиВКартотеку;
		ТабличныйДокумент.Вывести(ОбластьДатаПостановкиВКартотеку);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкомПлательщика) Тогда
		ОбластьДатаОтметкиБанкомПлательщика = Макет.ПолучитьОбласть("ДатаОтметкиБанкомПлательщика");
		ОбластьДатаОтметкиБанкомПлательщика.Параметры.ДатаОтметкиБанкомПлательщика = ДанныеПечати.ДатаОтметкиБанкомПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкомПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПоступленияВБанкПлательщика) Тогда
		ОбластьДатаПоступленияВБанкПлательщика = Макет.ПолучитьОбласть("ДатаПоступленияВБанкПлательщика");
		ОбластьДатаПоступленияВБанкПлательщика.Параметры.ДатаПоступленияВБанкПлательщика = ДанныеПечати.ДатаПоступленияВБанкПлательщика;
		ТабличныйДокумент.Вывести(ОбластьДатаПоступленияВБанкПлательщика);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаПеречисленияПлатежа) Тогда
		ОбластьДатаПеречисленияПлатежа = Макет.ПолучитьОбласть("ДатаПеречисленияПлатежа");
		ОбластьДатаПеречисленияПлатежа.Параметры.ДатаПеречисленияПлатежа = ДанныеПечати.ДатаПеречисленияПлатежа;
		ТабличныйДокумент.Вывести(ОбластьДатаПеречисленияПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаОтметкиБанкаПолучателя) Тогда
		ОбластьДатаОтметкиБанкаПолучателя = Макет.ПолучитьОбласть("ДатаОтметкиБанкаПолучателя");
		ОбластьДатаОтметкиБанкаПолучателя.Параметры.ДатаОтметкиБанкаПолучателя = ДанныеПечати.ДатаОтметкиБанкаПолучателя;
		ТабличныйДокумент.Вывести(ОбластьДатаОтметкиБанкаПолучателя);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.ДатаИсполненияБанком) Тогда
		ОбластьДатаИсполненияБанком = Макет.ПолучитьОбласть("ДатаИсполненияБанком");
		ОбластьДатаИсполненияБанком.Параметры.ДатаИсполненияБанком = ДанныеПечати.ДатаИсполненияБанком;
		ТабличныйДокумент.Вывести(ОбластьДатаИсполненияБанком);
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) ИЛИ ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьСообщениеИзБанка = Макет.ПолучитьОбласть("СообщениеИзБанка");
		ТабличныйДокумент.Вывести(ОбластьСообщениеИзБанка);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.АвторСообщения) Тогда
		ОбластьАвторСообщения = Макет.ПолучитьОбласть("АвторСообщения");
		ОбластьАвторСообщения.Параметры.АвторСообщения = ДанныеПечати.АвторСообщения;
		ТабличныйДокумент.Вывести(ОбластьАвторСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеПечати.СообщениеИзБанка) Тогда
		ОбластьТекстСообщения = Макет.ПолучитьОбласть("ТекстСообщения");
		ОбластьТекстСообщения.Параметры.СообщениеИзБанка = ДанныеПечати.СообщениеИзБанка;
		ТабличныйДокумент.Вывести(ОбластьТекстСообщения);
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьДанныеКвитанцииДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполнения = Новый Структура;

	ТикетСББОЛ = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ТикетСББОЛ");
	ДанныеЗаполнения.Вставить("ТикетСББОЛ",ТикетСББОЛ);
	ДатаСозданияКвитка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСозданияКвитка");
	ДанныеЗаполнения.Вставить("ДатаСозданияКвитка", ДатаСозданияКвитка);
	КодСостоянияДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "КодСостоянияДокумента");
	ДанныеЗаполнения.Вставить("КодСостоянияДокумента", КодСостоянияДокумента);
	ИдентификаторОрганизации = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ИдентификаторОрганизации");
	ДанныеЗаполнения.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	ИдентификаторДокумента = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИдентификаторДокумента");
	ДанныеЗаполнения.Вставить("ИдентификаторДокумента", ИдентификаторДокумента);
	ДатаСписанияСоСчетаПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаСписанияСоСчетаПлательщика");
	ДанныеЗаполнения.Вставить("ДатаСписанияСоСчетаПлательщика", ДатаСписанияСоСчетаПлательщика);
	ДатаОтметкиБанкомПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкомПлательщика");
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкомПлательщика", ДатаОтметкиБанкомПлательщика);
	ДатаПостановкиВКартотеку = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПостановкиВКартотеку");
	ДанныеЗаполнения.Вставить("ДатаПостановкиВКартотеку", ДатаПостановкиВКартотеку);
	ДатаПоступленияВБанкПлательщика = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПоступленияВБанкПлательщика");
	ДанныеЗаполнения.Вставить("ДатаПоступленияВБанкПлательщика", ДатаПоступленияВБанкПлательщика);
	ДатаПеречисленияПлатежа = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаПеречисленияПлатежа");
	ДанныеЗаполнения.Вставить("ДатаПеречисленияПлатежа", ДатаПеречисленияПлатежа);
	ДатаОтметкиБанкаПолучателя = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаОтметкиБанкаПолучателя");
	ДанныеЗаполнения.Вставить("ДатаОтметкиБанкаПолучателя", ДатаОтметкиБанкаПолучателя);
	ДатаИсполненияБанком = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсполненияБанком");
	ДанныеЗаполнения.Вставить("ДатаИсполненияБанком", ДатаИсполненияБанком);
	АвторСообщения = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АвторСообщения");
	ДанныеЗаполнения.Вставить("АвторСообщения", АвторСообщения);
	СообщениеИзБанка = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "СообщениеИзБанка");
	ДанныеЗаполнения.Вставить("СообщениеИзБанка", СообщениеИзБанка);
	ЕстьБанковскиеДаты = ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЕстьБанковскиеДаты");
	ДанныеЗаполнения.Вставить("ЕстьБанковскиеДаты", ЕстьБанковскиеДаты);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ПолучитьДанныеВыпискиДляПечати(ДеревоДанных)
	
	МассивВозврата = Новый Массив;
	
	СтрокаТаблицыВыписок = ДеревоДанных.Строки.Найти("Выписки", "ПолныйПуть");
	
	Для Каждого Выписка Из СтрокаТаблицыВыписок.Строки Цикл
		
		Если Выписка.Значение = "" Тогда
			Продолжить;
		КонецЕсли;

		ДанныеВыписки = Новый Структура;
		Организация = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Организация");
		НаименованиеОрганизации = "";
		Если Организация = Истина Тогда
			НаименованиеОрганизации = ЗначениеРеквизитаВДереве(
				Выписка, "Выписки.НомерСтроки.Организация.НаименованиеМеждународное");
			Если Не ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
				НаименованиеОрганизации = ЗначениеРеквизитаВДереве(
					Выписка, "Выписки.НомерСтроки.Организация.Наименование");
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НаименованиеОрганизации) Тогда
			ДанныеВыписки.Вставить("Организация", НаименованиеОрганизации);
		Иначе
			ДанныеВыписки.Вставить("Организация", НСтр("ru = '<не указано>'"));
		КонецЕсли;
		
		Банк = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк");
		НаименованиеБанка = "";
		Если Банк = Истина Тогда
			НаименованиеБанкаМеждународное = ЗначениеРеквизитаВДереве(
				Выписка, "Выписки.НомерСтроки.Банк.НаименованиеМеждународное");
			НаименованиеБанкаЛокальное = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк.Наименование");
			НаименованиеБанка = ?(ЗначениеЗаполнено(НаименованиеБанкаЛокальное), НаименованиеБанкаЛокальное,
				НаименованиеБанкаМеждународное);
			БИКБанка = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк.БИК");
		КонецЕсли;
		Если ЗначениеЗаполнено(НаименованиеБанка) Тогда
			ДанныеВыписки.Вставить("Банк", НаименованиеБанка);
		ИначеЕсли ЗначениеЗаполнено(БИКБанка) Тогда
			ДанныеВыписки.Вставить("Банк", БИКБанка);
		Иначе
			ДанныеВыписки.Вставить("Банк", НСтр("ru = '<не указано>'"));
		КонецЕсли;
		
		ДанныеВыписки.Вставить("НомерСчета", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НомерСчета"));
		НачалоПериода = Формат(ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НачалоПериода"), "ДЛФ=D");
		ДанныеВыписки.Вставить("ДатаНачала", НачалоПериода);
		КонецПериода = Формат(ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.КонецПериода"), "ДЛФ=D");
		ДанныеВыписки.Вставить("ДатаОкончания", КонецПериода);
		ДанныеВыписки.Вставить("ВхОстаток", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.НачальныйОстаток"));
		ДанныеВыписки.Вставить("Дебет", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотИсходящихПлатежей"));
		ДанныеВыписки.Вставить("Кредит", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ОборотВходящихПлатежей"));
		ДанныеВыписки.Вставить("ИсхОстаток", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.КонечныйОстаток"));
	
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("ДатаОперации");
		ТЗ.Колонки.Добавить("КО");
		ТЗ.Колонки.Добавить("НомерДокумента");
		ТЗ.Колонки.Добавить("ДатаДокумента");
		ТЗ.Колонки.Добавить("Дебет");
		ТЗ.Колонки.Добавить("Кредит");
		ТЗ.Колонки.Добавить("БИК");
		ТЗ.Колонки.Добавить("Наименование");
		ТЗ.Колонки.Добавить("ОснованиеОперации");
		
		СтрокаОперацияВыписки = Выписка.Строки.Найти("Выписки.НомерСтроки.Операции", "ПолныйПуть");
		
		Если СтрокаОперацияВыписки.Значение <> Неопределено И СтрокаОперацияВыписки.Значение <> 0 Тогда
		
			Для Каждого Операция Из СтрокаОперацияВыписки.Строки Цикл
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.ДатаОперации = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
				НоваяСтрока.КО =ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
				НоваяСтрока.НомерДокумента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
				НоваяСтрока.ДатаДокумента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
				НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
					
				Если НаправлениеПлатежа = "1" Тогда // исходящий
					НоваяСтрока.Дебет = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
					Корреспондент = "Получатель";
				Иначе
					НоваяСтрока.Кредит = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
					Корреспондент = "Плательщик";
				КонецЕсли;
				
				SWIFT = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.SWIFT");
				БИК = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.БИК");
				НоваяСтрока.БИК = ?(ЗначениеЗаполнено(БИК), БИК, SWIFT);
				ИННКорреспондента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".ИНН");
				СчетКорреспондента = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".РасчСчет");
				НаименованиеБанкаМеждународное = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.НаименованиеМеждународное");
				НаименованиеБанка = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Банк.Наименование");
				БанкКорреспондента = ?(ЗначениеЗаполнено(НаименованиеБанка), НаименованиеБанка, НаименованиеБанкаМеждународное);
				НаименованиеКорреспондентаМеждународное = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".НаименованиеМеждународное");
				НаименованиеКорреспондентаЛокальное = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки." + Корреспондент + ".Наименование");
				НаименованиеКорреспондента = ?(ЗначениеЗаполнено(НаименованиеКорреспондентаЛокальное),
					НаименованиеКорреспондентаЛокальное, НаименованиеКорреспондентаМеждународное);
				НоваяСтрока.Наименование = "" + НаименованиеКорреспондента + Символы.ПС
					+ ?(ЗначениеЗаполнено(ИННКорреспондента), "ИНН(BIC) " + ИННКорреспондента + Символы.ПС, "") + СчетКорреспондента
					+ Символы.ПС + БанкКорреспондента;
				НоваяСтрока.ОснованиеОперации = ЗначениеРеквизитаВДереве(
					Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");
			КонецЦикла;
		КонецЕсли;
		ДанныеВыписки.Вставить("ОперацииПоСчету", ТЗ);
		
		Подписи = Новый ТаблицаЗначений;
		Подписи.Колонки.Добавить("ДатаПодписи");
		Подписи.Колонки.Добавить("НомерСертификата");
		Подписи.Колонки.Добавить("ВыдалСертификат");
		Подписи.Колонки.Добавить("ВладелецСертификата");
		Подписи.Колонки.Добавить("СрокДействия");
		
		СтрокаПодпись = Выписка.Строки.Найти("Выписки.НомерСтроки.ЭлектронныеПодписи", "ПолныйПуть");
		
		Если СтрокаПодпись.Значение <> Неопределено И СтрокаПодпись.Значение <> 0 Тогда
			Для Каждого Подпись Из СтрокаПодпись.Строки Цикл
				НоваяСтрока = Подписи.Добавить();
				НоваяСтрока.ДатаПодписи = ЗначениеРеквизитаВДереве(
					Подпись, "Выписки.НомерСтроки.ЭлектронныеПодписи.НомерСтроки.ДатаПодписи");
				НоваяСтрока.НомерСертификата = ЗначениеРеквизитаВДереве(
					Подпись, "Выписки.НомерСтроки.ЭлектронныеПодписи.НомерСтроки.НомерСертификата");
				НоваяСтрока.ВыдалСертификат = ЗначениеРеквизитаВДереве(
					Подпись, "Выписки.НомерСтроки.ЭлектронныеПодписи.НомерСтроки.ВыдалСертификат");
				НоваяСтрока.ВладелецСертификата = ЗначениеРеквизитаВДереве(
					Подпись, "Выписки.НомерСтроки.ЭлектронныеПодписи.НомерСтроки.ВладелецСертификата");
				НоваяСтрока.СрокДействия = ЗначениеРеквизитаВДереве(
					Подпись, "Выписки.НомерСтроки.ЭлектронныеПодписи.НомерСтроки.СрокДействия");
			КонецЦикла;
		КонецЕсли;

		ДанныеВыписки.Вставить("ЭлектронныеПодписи", Подписи);

		МассивВозврата.Добавить(ДанныеВыписки);
	КонецЦикла;
	
	ДанныеШтампа = ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп");
	Если ЗначениеЗаполнено(ДанныеШтампа) Тогда
		СтруктураШтампа = Новый Структура();
		СтруктураШтампа.Вставить("БИК", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.БИК"));
		СтруктураШтампа.Вставить("НаименованиеБанка", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.НаименованиеБанка"));
		СтруктураШтампа.Вставить("ГородБанка", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.ГородБанка"));
		СтруктураШтампа.Вставить("Отделение", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.Отделение"));
		СтруктураШтампа.Вставить("Офис", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Штамп.Офис"));
		СтруктураШтампа.Вставить("ДатаСоставленияВыписки", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ДатаФормирования"));
	Иначе
		СтруктураШтампа = Новый Структура();
		СтруктураШтампа.Вставить("БИК", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк.БИК"));
		СтруктураШтампа.Вставить("НаименованиеБанка", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.Банк.Наименование"));
		СтруктураШтампа.Вставить("ДатаСоставленияВыписки", ЗначениеРеквизитаВДереве(Выписка, "Выписки.НомерСтроки.ДатаФормирования"));
	КонецЕсли;
	ДанныеВыписки.Вставить("Штамп", СтруктураШтампа);

	Возврат МассивВозврата;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументВыпискиБанка(ДеревоРазбора, ТабличныйДокумент, ДляПечати)
	
	ДанныеПечати = ПолучитьДанныеВыпискиДляПечати(ДеревоРазбора);
	
	НазваниеМакета = СтрШаблон("ЭД_ВыпискаБанка_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	Для Каждого ДанныеВыписки Из ДанныеПечати Цикл
	
		ОбластьШапкаЗаголовок = Макет.ПолучитьОбласть("ШапкаЗаголовок");
		ОбластьШапкаЗаголовок.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаЗаголовок);
		
		ОбластьШапкаОрганизация = Макет.ПолучитьОбласть("ШапкаОрганизация");
		ОбластьШапкаОрганизация.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаОрганизация);
		
		ОбластьШапкаБанк = Макет.ПолучитьОбласть("ШапкаБанк");
		ОбластьШапкаБанк.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаБанк);
		
		ОбластьШапкаТаблица = Макет.ПолучитьОбласть("ИнформацияПоСчету");
		ОбластьШапкаТаблица.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблица);
		
		ОбластьШапкаТаблица = Макет.ПолучитьОбласть("ШапкаТаблица");
		ОбластьШапкаТаблица.Параметры.Заполнить(ДанныеВыписки);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблица);
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьПодвал.Параметры.Заполнить(ДанныеВыписки);
		
		ОбластьОтметок = Новый ТабличныйДокумент;
		ОбластьДатаСоставленияВыписки = Макет.ПолучитьОбласть("Отметки|ДатаСоставленияВыписки");
		ОбластьДатаСоставленияВыписки.Параметры.Заполнить(ДанныеВыписки.Штамп);
		ОбластьОтметок.Вывести(ОбластьДатаСоставленияВыписки);
		
		КоличествоСтрок = ДанныеВыписки.ЭлектронныеПодписи.Количество();
		ОбластьПодпись = Макет.ПолучитьОбласть("Отметки|Подпись");
		ОбластьОтметок.Присоединить(ОбластьПодпись);
		Если КоличествоСтрок = 1 Тогда
			НазваниеМакета = СтрШаблон("ШтампЭП_%1", ОбщегоНазначения.КодОсновногоЯзыка());
			МакетШтампа = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
			ОбластьШтампОдинарныйСтрока = МакетШтампа.ПолучитьОбласть("ШтампОдинарныйСтрока|ШтампОдинарный");
			СтрокаПодписи = ДанныеВыписки.ЭлектронныеПодписи.Получить(0);
			ОбластьШтампОдинарныйСтрока.Параметры.Заполнить(СтрокаПодписи);
			ОбластьОтметок.ВставитьОбласть(
				ОбластьШтампОдинарныйСтрока.Области.ОбластьШтампОдинарный, ОбластьОтметок.Области.ОбластьШтампОдинарный, , Истина);
		ИначеЕсли КоличествоСтрок > 1 Тогда
			НазваниеМакета = СтрШаблон("ШтампЭП_%1", ОбщегоНазначения.КодОсновногоЯзыка());
			МакетШтампа = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
			ОбластьШтампТабличныйШапка = МакетШтампа.ПолучитьОбласть("ШтампТабличныйШапка|ОбластьШтампТабличный");
			ОбластьШтампТабличныйРазделитель = МакетШтампа.ПолучитьОбласть("ШтампТабличныйРазделитель|ОбластьШтампТабличный");
			ОбластьСписокПодписей = Новый ТабличныйДокумент;
			ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйШапка);
			Счетчик = 0;
			Для каждого СтрокаПодписи Из ДанныеВыписки.ЭлектронныеПодписи Цикл
				Счетчик = Счетчик + 1;
				ОбластьШтампТабличныйСтрока = МакетШтампа.ПолучитьОбласть("ШтампТабличныйСтрока|ОбластьШтампТабличный");
				ОбластьШтампТабличныйСтрока.Параметры.Заполнить(СтрокаПодписи);
				ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйСтрока);
				Если КоличествоСтрок <> Счетчик Тогда
					ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйРазделитель);
				КонецЕсли;
			КонецЦикла;
			ОбластьШтампТабличныйПодвал = МакетШтампа.ПолучитьОбласть("ШтампТабличныйПодвал|ОбластьШтампТабличный");
			ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйПодвал);
		КонецЕсли;
		
		ОбластьШтамп = Макет.ПолучитьОбласть("Отметки|Штамп");
		ОбластьШтамп.Параметры.Заполнить(ДанныеВыписки.Штамп);
		ОбластьОтметок.Присоединить(ОбластьШтамп);
		
		Если КоличествоСтрок > 1 Тогда
			ОбластьОтметок.Вывести(ОбластьСписокПодписей);
		КонецЕсли;
		
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		Счетчик = 0;
		КоличествоСтрок = ДанныеВыписки.ОперацииПоСчету.Количество();
		
		МассивТаблиц = Новый Массив;
		Для каждого Операция Из ДанныеВыписки.ОперацииПоСчету Цикл
			МассивТаблиц.Очистить();
			Счетчик = Счетчик + 1;
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(Операция);
			МассивТаблиц.Добавить(ОбластьСтрока);
			Если Счетчик = КоличествоСтрок Тогда
				МассивТаблиц.Добавить(ОбластьПодвал);
				МассивТаблиц.Добавить(ОбластьОтметок);
			КонецЕсли;
			Если ДляПечати И НЕ ТабличныйДокумент.ПроверитьВывод(МассивТаблиц) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблица);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьЧерта = Макет.ПолучитьОбласть("Черта");
		ТабличныйДокумент.Вывести(ОбластьЧерта);
		
		Если НЕ ДанныеВыписки.ОперацииПоСчету.Количество() Тогда
			ОбластьНетОпераций = Макет.ПолучитьОбласть("НетОпераций");
			ТабличныйДокумент.Вывести(ОбластьНетОпераций);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		ТабличныйДокумент.Вывести(ОбластьОтметок);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнить табличный документ комплекта документов по данным банковской выписки.
//
// Параметры:
//  СообщениеОбмена - ДокументСсылка.СообщениеОбменСБанками - сообщение обмена с банком
//  ТабличныйДокумент - ТабличныйДокумент - возвращаемый табличный документ.
//
Процедура ЗаполнитьТабличныйДокументКомплектаДокументов(СообщениеОбмена, ТабличныйДокумент)
	
	ДеревоРазбора = Неопределено;
	МассивСообщенийОбмена = Новый Массив;
	МассивСообщенийОбмена.Добавить(СообщениеОбмена);
	ОбменСБанками.ПолучитьДанныеВыпискиБанкаДеревоЗначений(МассивСообщенийОбмена, ДеревоРазбора);
	НастройкаОбмена = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "НастройкаОбмена");
	
	ТабличныйДокумент = ТабличныйДокументКомплектаДокументов(ДеревоРазбора, НастройкаОбмена);
	
КонецПроцедуры

Функция ПолучитьДанныеЗапросаВыпискиДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДатаНачала = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");
	ДанныеЗаполненияШапки.Вставить("ДатаНачала", ДатаНачала);
	ДатаКонца = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");
	ДанныеЗаполненияШапки.Вставить("ДатаКонца", ДатаКонца);
		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСчета");
			
	СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));
	Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.НомерСчета =ЗначениеРеквизитаСтрокиДереваРазбора(
			ДеревоРазбора, СтрокаТЧ, "НомерСчета");
	КонецЦикла;
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("РасчетныеСчета", ТЗ);
		
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПолучитьДанныеПлатежногоПорученияВВалютеДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
	
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Число", Формат(Дата, "ДФ=dd"));
	ДанныеВозврата.Вставить("Месяц", Формат(Дата, "ДФ=MM"));
	ДанныеВозврата.Вставить("Год", Формат(Дата, "ДФ=yyyy"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	ДанныеВозврата.Вставить("НомерСчета", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.РасчСчет"));
	ДанныеВозврата.Вставить("ВидПлатежа", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВидПлатежа"));
	ДанныеВозврата.Вставить("ТипКомиссии", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.ТипКомиссии"));
	КодСтраныБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.ISOКод");
	ДанныеВозврата.Вставить("КодСтраныБанкаПолучателя", КодСтраныБанкаПолучателя);

	КодыВалютныхОпераций = Новый ТаблицаЗначений;
	КодыВалютныхОпераций.Колонки.Добавить("Код");
	КодыВалютныхОпераций.Колонки.Добавить("Сумма");
	КодыВалютныхОпераций.Колонки.Добавить("НомерПаспортаСделки");
	
	СтрокаОперация = ДеревоДанных.Строки.Найти("КодыВидовВалютныхОпераций", "ПолныйПуть");
	Для Каждого КодОперации Из СтрокаОперация.Строки Цикл
		НоваяСтрока = КодыВалютныхОпераций.Добавить();
		НоваяСтрока.Код = ЗначениеРеквизитаВДереве(
			КодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.КодВидаВалютнойОперации");
		НоваяСтрока.Сумма = ЗначениеРеквизитаВДереве(КодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.Сумма");
		НоваяСтрока.НомерПаспортаСделки = ЗначениеРеквизитаВДереве(
			КодОперации, "КодыВидовВалютныхОпераций.НомерСтроки.НомерПаспортаСделки");
	КонецЦикла;
	ДанныеВозврата.Вставить("КодыВидовВалютныхОпераций", КодыВалютныхОпераций);
	
	ДанныеВозврата.Вставить("ISOКодВалюты", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.ISOКодВалюты"));
	ДанныеВозврата.Вставить("Сумма", ЗначениеРеквизитаВДереве(ДеревоДанных, "ВалютаПеревода.Сумма"));
	
	НаименованиеПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеПлательщика", НаименованиеПлательщика);
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный") = Истина Тогда
		АдресПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Адрес");
		Город = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Город");
		Страна = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.АдресСтруктурированный.Страна.Наименование");
		ГородСтранаПлательщика = "";
		Если ЗначениеЗаполнено(Город) Тогда
			Если ЗначениеЗаполнено(Страна) Тогда
				ГородСтранаПлательщика = СтрШаблон("%1, %2", Город, Страна);
			Иначе
				ГородСтранаПлательщика = Город;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Страна) Тогда
			ГородСтранаПлательщика = Страна;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГородСтранаПлательщика) Тогда
			АдресПлательщика = ГородСтранаПлательщика + ", " + АдресПлательщика;
		КонецЕсли;
		ДанныеВозврата.Вставить("АдресПлательщика", АдресПлательщика);
	КонецЕсли;
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.Банк.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеБанкаПлательщика", НаименованиеБанкаПлательщика);
	SWIFTБанкаПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.SWIFT");
	ДанныеВозврата.Вставить("SWIFTБанкаПлательщика", SWIFTБанкаПлательщика);
	АдресБанкаПлательщика = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.Банк.Адрес");
	ДанныеВозврата.Вставить("АдресБанкаПлательщика", АдресБанкаПлательщика);
	
	БИКБанкКорреспондента = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.SWIFT");
	ДанныеВозврата.Вставить("БИКБанкаКорреспондента", БИКБанкКорреспондента);
	НаименованиеБанкаКорреспондента = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПлательщика.БанкПосредник.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеБанкаКорреспондента", НаименованиеБанкаКорреспондента);
	
	НомерСчетаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.РасчСчет");
	ДанныеВозврата.Вставить("НомерСчетаПолучателя", НомерСчетаПолучателя);
	НаименованиеПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеПолучателя", НаименованиеПолучателя);
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный") = Истина Тогда
		АдресПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Адрес");
		Город = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Город");
		Страна = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.АдресСтруктурированный.Страна.Наименование");
		ГородСтранаПолучателя = "";
		Если ЗначениеЗаполнено(Город) Тогда
			Если ЗначениеЗаполнено(Страна) Тогда
				ГородСтранаПолучателя = СтрШаблон("%1, %2", Город, Страна);
			Иначе
				ГородСтранаПолучателя = Город;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Страна) Тогда
			ГородСтранаПолучателя = Страна;
		КонецЕсли;
		Если ЗначениеЗаполнено(ГородСтранаПолучателя) Тогда
			АдресПолучателя = ГородСтранаПолучателя + ", " + АдресПолучателя;
		КонецЕсли;
		ДанныеВозврата.Вставить("АдресПолучателя", АдресПолучателя);
	КонецЕсли;
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		ДеревоДанных, "РеквизитыПолучателя.Банк.НаименованиеМеждународное");
	ДанныеВозврата.Вставить("НаименованиеБанкаПолучателя", НаименованиеБанкаПолучателя);
	SWIFTБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.SWIFT");
	ДанныеВозврата.Вставить("SWIFTБанкаПолучателя", SWIFTБанкаПолучателя);
	БИКБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.БИК");
	ДанныеВозврата.Вставить("БИКБанкаПолучателя", БИКБанкаПолучателя);
	АдресБанкаПолучателя = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Адрес");
	ДанныеВозврата.Вставить("АдресБанкаПолучателя", АдресБанкаПолучателя);
	Город = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Город");
	Страна = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПолучателя.Банк.Страна.Наименование");
	ДанныеВозврата.Вставить("ГородСтранаБанкаПолучателя", СтрШаблон("%1, %2", Город, Страна));

	НазначениеПлатежа = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыПлатежа.НазначениеПлатежа");
	ДанныеВозврата.Вставить("НазначениеПлатежа", НазначениеПлатежа);
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту)
	
	Возврат ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту);
	
КонецФункции

Функция ПолучитьДанныеПорученияНаПокупкуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
	
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Дата", Формат(Дата, "ДЛФ=DD"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	НаименованиеКлиента = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
	ДанныеВозврата.Вставить("НаименованиеКлиента", НаименованиеКлиента);
	ДанныеВозврата.Вставить("ИНН", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН"));
	УполномоченныйСотрудник = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ДанныеВозврата.Вставить("УполномоченныйСотрудник", УполномоченныйСотрудник);
	ДанныеВозврата.Вставить("Телефон", ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон"));
	ДанныеВозврата.Вставить("СуммаВВалюте", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПокупки.Сумма"));
	ДанныеВозврата.Вставить("НаименованиеВалюты", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПокупки.ISOКодВалюты"));
	ДанныеВозврата.Вставить("УсловияСделки", ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки"));
	НомерСчетаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.НомерСчета");
	ДанныеВозврата.Вставить("НомерСчетаЗачисления", НомерСчетаЗачисления);
	НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыЗачисления.Банк.Наименование");
	ДанныеВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ПолучитьДанныеПорученияНаПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
	
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Дата", Формат(Дата, "ДЛФ=DD"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	НаименованиеКлиента = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
	ДанныеВозврата.Вставить("НаименованиеКлиента", НаименованиеКлиента);
	ДанныеВозврата.Вставить("ИНН", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН"));
	УполномоченныйСотрудник = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ДанныеВозврата.Вставить("УполномоченныйСотрудник", УполномоченныйСотрудник);
	ДанныеВозврата.Вставить("Телефон", ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон"));
	ДанныеВозврата.Вставить("СуммаВВалюте", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПродажи.Сумма"));
	ДанныеВозврата.Вставить("НаименованиеВалюты", ЗначениеРеквизитаВДереве(ДеревоДанных, "СуммаПродажи.ISOКодВалюты"));
	ДанныеВозврата.Вставить("УсловияСделки", ЗначениеРеквизитаВДереве(ДеревоДанных, "УсловияСделки"));
	НомерСчетаСписания = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.НомерСчета");
	ДанныеВозврата.Вставить("НомерСчетаСписания", НомерСчетаСписания);
	НаименованиеБанка = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыСписания.Банк.Наименование");
	ДанныеВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
	
	Возврат ДанныеВозврата;
	
КонецФункции

Функция ПолучитьДанныеРаспоряженияНаОбязательнуюПродажуВалютыДляПечати(СтрокаОбъекта, ДеревоРазбора)
	
	ДанныеВозврата = Новый Структура;
	
	ДеревоДанных = ДеревоЭлектронногоДокументаБЭД.ЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ДеревоДанных");
		
	// Шапка.
	Дата = ЗначениеРеквизитаВДереве(ДеревоДанных, "Дата");
	ДанныеВозврата.Вставить("Дата", Формат(Дата, "ДЛФ=DD"));
	ДанныеВозврата.Вставить("Номер", ЗначениеРеквизитаВДереве(ДеревоДанных, "Номер"));
	ДанныеВозврата.Вставить("НомерУведомления", ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НомерДокумента"));
	ДатаУведомления = Формат(ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ДатаДокумента"), "ДЛФ=DD");
	ДанныеВозврата.Вставить("ДатаУведомления", ДатаУведомления);
	ДанныеВозврата.Вставить("Сумма", ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.Сумма"));
	ДанныеВозврата.Вставить("Валюта", ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.ISOКодВалюты"));
	НаименованиеБанкаУведомления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Уведомление.НаименованиеБанка");
	ДанныеВозврата.Вставить("НаименованиеБанкаУведомления", НаименованиеБанкаУведомления);
	НаименованиеОрганизации = ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.Наименование");
	ДанныеВозврата.Вставить("НаименованиеОрганизации", НаименованиеОрганизации);
	ДанныеВозврата.Вставить("ИНН", ЗначениеРеквизитаВДереве(ДеревоДанных, "РеквизитыОрганизации.ИНН"));
	УполномоченныйСотрудник = ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.ФИО");
	ДанныеВозврата.Вставить("УполномоченныйСотрудник", УполномоченныйСотрудник);
	ДанныеВозврата.Вставить("Телефон", ЗначениеРеквизитаВДереве(ДеревоДанных, "УполномоченныйСотрудник.Телефон"));
	ДанныеВозврата.Вставить("НомерТранзитногоСчета", ЗначениеРеквизитаВДереве(ДеревоДанных, "ТранзитныйСчет.НомерСчета"));
	
	// Зачисление.
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление") = Истина Тогда
		ДанныеВозврата.Вставить("НомерВалютногоСчета", ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НомерСчета"));
		ДанныеВозврата.Вставить("НаименованиеБанка", ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.НаименованиеБанка"));
		ДанныеВозврата.Вставить("swift", ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.SWIFT"));
		СуммаЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.СуммаЗачисления.Сумма");
		ДанныеВозврата.Вставить("СуммаЗачисления", СуммаЗачисления);
		ISOКодВалютыЗачисления = ЗначениеРеквизитаВДереве(ДеревоДанных, "Зачисление.СуммаЗачисления.ISOКодВалюты");
		ДанныеВозврата.Вставить("ВалютаЗачисления", ISOКодВалютыЗачисления);
	КонецЕсли;
	
	// Продажа.
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа") = Истина Тогда
		ДанныеВозврата.Вставить("СуммаПродажи", ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.Сумма"));
		ISOКодВалютыПродажи = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.ISOКодВалюты");
		ДанныеВозврата.Вставить("ВалютаПродажи", ISOКодВалютыПродажи);
		УсловиеСделки = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.УсловиеСделки");
		ДанныеВозврата.Вставить("УсловиеСделки", УсловиеСделки);
		НомерСчета = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.НомерСчета");
		ДанныеВозврата.Вставить("НомерСчета", НомерСчета);
		НаименованиеБанка = ЗначениеРеквизитаВДереве(
			ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.Наименование");
		ДанныеВозврата.Вставить("НаименованиеБанка", НаименованиеБанка);
		БИК = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.БИК");
		ДанныеВозврата.Вставить("БИК", БИК);
		КоррСчет = ЗначениеРеквизитаВДереве(ДеревоДанных, "НеобязательнаяПродажа.СчетЗачисленияОтПродажи.Банк.КоррСчет");
		ДанныеВозврата.Вставить("КоррСчет", КоррСчет);
	КонецЕсли;
	
	// Комиссия.
	Если ЗначениеРеквизитаВДереве(ДеревоДанных, "КомиссионноеВознаграждение") = "Счет" Тогда
		ДанныеВозврата.Вставить("СчетКомиссии", ЗначениеРеквизитаВДереве(ДеревоДанных, "КомиссионноеВознаграждение.Счет.НомерСчета"));
	КонецЕсли;
	
	Возврат ДанныеВозврата;
	
КонецФункции

Процедура ЗаполнитьТабличныйДокументПорученияНаПокупкуВалюты(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ПоручениеНаПокупкуВалюты_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Основная");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	
	Если ДанныеПечати.УсловияСделки = "2" Тогда
		ОбластьШапка.Параметры.КурсБанкаРоссии = "Х";
	Иначе
		ОбластьШапка.Параметры.КурсБанка = "Х";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументПорученияНаПродажуВалюты(ТабличныйДокумент, ДанныеПечати)
	
	НазваниеМакета = СтрШаблон("ЭД_ПоручениеНаПродажуВалюты_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Основная");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	
	Если ДанныеПечати.УсловияСделки = "2" Тогда
		ОбластьШапка.Параметры.КурсБанкаРоссии = "Х";
	Иначе
		ОбластьШапка.Параметры.КурсБанка = "Х";
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
КонецПроцедуры

Процедура ЗаполнитьТабличныйДокументРаспоряженияНаОбязательнуюПродажуВалюты(ТабличныйДокумент, ДанныеПечати)
	
	КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	НазваниеМакета = СтрШаблон("ЭД_РаспоряжениеНаОбязательнуюПродажуВалюты_%1", КодОсновногоЯзыка);
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	Макет.КодЯзыка = Метаданные.Языки.Русский.КодЯзыка;

	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ДанныеПечати);
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если ДанныеПечати.Свойство("СуммаЗачисления") Тогда
		ОбластьЗачисление = Макет.ПолучитьОбласть("Зачисление");
		ОбластьЗачисление.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьЗачисление);
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("СуммаПродажи") Тогда
		ОбластьПродажа = Макет.ПолучитьОбласть("Продажа");
		ОбластьПродажа.Параметры.Заполнить(ДанныеПечати);
		Если ДанныеПечати.УсловияСделки = "2" Тогда
			ОбластьПродажа.Параметры.КурсБанкаРоссии = "Х";
		Иначе
			ОбластьПродажа.Параметры.КурсБанка = "Х";
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПродажа);
	КонецЕсли;
	
	Если ДанныеПечати.Свойство("СчетКомиссии") Тогда
		ОбластьКомиссия = Макет.ПолучитьОбласть("Комиссия");
		ОбластьКомиссия.Параметры.Заполнить(ДанныеПечати);
		ТабличныйДокумент.Вывести(ОбластьЗачисление);
	КонецЕсли;
	
КонецПроцедуры

// Форматирует сумму прописью банковского платежного документа
//
// Параметры:
//  Сумма - число - реквизит, который надо представить прописью 
//  Валюта - СправочникСсылка.Валюты - валюта, в которой нужно представить сумму
//
// Возвращаемое значение
//  Отформатированная строка
//
Функция ФорматироватьСуммуПрописьюПлатежногоДокумента(Сумма, Валюта)
	
	ФорматСтрока  = "ДП=Ложь";
	ПарамПредмета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Валюта, "ПараметрыПрописи");
	
	Возврат ЧислоПрописью(Сумма, ФорматСтрока, ПарамПредмета);
	
КонецФункции

Функция ВалютаПоКоду(КодВалюты)
	
	ВалютаСчета = Справочники["Валюты"].НайтиПоКоду(КодВалюты);
	Если ЗначениеЗаполнено(ВалютаСчета) Тогда
		Возврат ВалютаСчета;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	КодыВалют = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КодВалюты);
	ОбщийМодульРаботаСКурсамиВалют = ОбщегоНазначения.ОбщийМодуль("РаботаСКурсамиВалют");
	ВалютыПоКлассификатору = ОбщийМодульРаботаСКурсамиВалют.ДобавитьВалютыПоКоду(КодыВалют);
	
	Если ВалютыПоКлассификатору.Количество() > 0 Тогда
		ВалютаСчета = ВалютыПоКлассификатору[0];
	Иначе
		ВалютаСчета = Справочники["Валюты"].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВалютаСчета;
	
КонецФункции

Функция КодВалютыБанковскогоСчета(НомерСчета)
	
	// П. 1.17 Положения
	// При осуществлении операций по счетам в иностранных, клиринговых валютах, а также в драгоценных металлах
	// в лицевом счете в разрядах (6-8), предназначенных для кода валюты, указываются соответствующие коды,
	// предусмотренные Общероссийским классификатором валют (ОКВ).
	
	Возврат Сред(НомерСчета, 6,3);
	
КонецФункции

Функция ХешСтрокиТаблицыЗначений(Строка)
	
	МассивЗначений = Новый Массив;
	Для каждого ЭлементКоллекции Из Строка Цикл
		МассивЗначений.Добавить(ЗначениеВСтрокуВнутр(ЭлементКоллекции));
	КонецЦикла;
	Хеш = Новый ХешированиеДанных(ХешФункция.CRC32);
	Хеш.Добавить(СтрСоединить(МассивЗначений));
	Возврат Хеш.ХешСумма
	
КонецФункции

Процедура ДобавитьБанковскийОрдерИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_БанковскийОрдер_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("БанковскийОрдер");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'БАНКОВСКИЙ ОРДЕР №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
	ОбластьМакета.Параметры.Очередность = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Очередность");
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ДобавитьВнутрибанковскийДокументИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_ВнутрибанковскийДокумент_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ВидДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидДокумента");
	ОбластьМакета.Параметры.НаименованиеНомер = ВРег(ВидДокумента) + " " + "№" + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;
		
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	ОбластьМакета.Параметры.ПлательщикИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН");
	ОбластьМакета.Параметры.ПлательщикКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП");
	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП("" + НаименованиеБанкаПлательщика + " "
		+ ГородБанкаПлательщика);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ГородБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП("" + НаименованиеБанкаПолучателя + " "
		+ ГородБанкаПолучателя);
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет");
	ОбластьМакета.Параметры.ПолучательИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.ПолучательКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		
	ОбластьМакета.Параметры.ВидОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
		
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	
КонецПроцедуры

Процедура ДобавитьИнкассовоеПоручениеИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_ИнкассовоеПоручение_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ИНКАССОВОЕ ПОРУЧЕНИЕ №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа");
	ОбластьМакета.Параметры.ДатаПоступления = ДатаДокумента;
	ОбластьМакета.Параметры.ДатаСписания = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
	ОбластьМакета.Параметры.СтатусСоставителя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.СтатусСоставителя");

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;

		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	ОбластьМакета.Параметры.ПлательщикИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН");
	ОбластьМакета.Параметры.ПлательщикКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП");
	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП("" + НаименованиеБанкаПлательщика + " "
		+ ГородБанкаПлательщика);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ГородБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП("" + НаименованиеБанкаПолучателя + " "
		+ ГородБанкаПолучателя);
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет");
	ОбластьМакета.Параметры.ПолучательИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.ПолучательКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	Код = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.Код = Код;
	ОбластьМакета.Параметры.КодВидаДохода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаДохода");
	ОбластьМакета.Параметры.Очередность = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.ПоказательКБК = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательКБК");
	ОбластьМакета.Параметры.ОКТМО = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ОКТМО");
	ОбластьМакета.Параметры.ПоказательОснования = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательОснования");
	ОбластьМакета.Параметры.ПоказательПериода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательПериода");
	ОбластьМакета.Параметры.ПоказательНомера = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательНомера");
	ОбластьМакета.Параметры.ПоказательДаты = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательДаты");
	ОбластьМакета.Параметры.КодВыплат = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.КодВыплат");
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");

	Если Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);
	
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ДобавитьМемориальныйОрдерИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_МемориальныйОрдер_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("МемориальныйОрдер");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'МЕМОРИАЛЬНЫЙ ОРДЕР №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "1" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СчетДебет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СчетКредит");
		КонецЕсли;
		
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;

	НаименованиеБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.Составитель.Наименование");
	ОбластьМакета.Параметры.Составитель = НаименованиеБанка;
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.НаименованиеСчетаДебета = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.НаименованиеСчетаДебет");
	ОбластьМакета.Параметры.ДебетСчета = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СчетДебет");
	БИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.Составитель.БИК");
	ОбластьМакета.Параметры.НаименованиеСчетаКредита = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.НаименованиеСчетаКредит");
	ОбластьМакета.Параметры.КредитСчета = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СчетКредит");
	ОбластьМакета.Параметры.ШифрДокумента = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.ШифрДокумента");
	ОбластьМакета.Параметры.СвободноеПоле9а = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СвободноеПоле9а");
	ОбластьМакета.Параметры.СвободноеПоле14 = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СвободноеПоле14");
	ОбластьМакета.Параметры.СвободноеПоле15 = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СвободноеПоле15");
	ОбластьМакета.Параметры.СвободноеПоле20 = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СвободноеПоле20");
	ОбластьМакета.Параметры.СодержаниеОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.МемориальныйОрдер.СодержаниеОперации");

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанка, БИКБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();


КонецПроцедуры

Процедура ДобавитьОбъявлениеНаВзносНаличнымиИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_ОбъявлениеНаВзносНаличными_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.Номер = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ОбластьМакета.Параметры.Дата = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	ОбластьМакета.Параметры.ИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.КПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = НаименованиеБанкаПлательщика;
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	ОбластьМакета.Параметры.Символ = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ОбъявлениеНаВзносНаличными.Символ");
	ОбластьМакета.Параметры.ИсточникПоступления = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ОбъявлениеНаВзносНаличными.ИсточникПоступления");
	
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ДобавитьПлатежноеПоручениеИзВыписки(ТабличныйДокумент, Операция, ПлатежныеДокументыВИБ, ПрограммаБанка)
	
	ИсходноеПлатежноеПоручение = Неопределено;
				
	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеПоручение_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ПОРУЧЕНИЕ №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа");
	ОбластьМакета.Параметры.СтатусСоставителя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.СтатусСоставителя");
		
	Если ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда
		ОбластьМакета.Параметры.ДатаПоступления = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаПоступления");
		ОбластьМакета.Параметры.ДатаСписания = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаСписания");
	ИначеЕсли ПлатежныеДокументыВИБ.Количество() Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		ИдентификаторДокумента = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ИдентификаторДокумента");

		НайденнаяСтрока = ПлатежныеДокументыВИБ.Найти(ИдентификаторДокумента, "Идентификатор");
		
		Если НаправлениеПлатежа = "1" И ЗначениеЗаполнено(ИдентификаторДокумента) И НайденнаяСтрока <> Неопределено Тогда
			ИсходноеПлатежноеПоручение = НайденнаяСтрока.Ссылка;
			Если ЗначениеЗаполнено(НайденнаяСтрока.ДополнительныеДанные) Тогда
				ЗначенияДополнительныхРеквизитов = НайденнаяСтрока.ДополнительныеДанные.Получить();
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ЗначенияДополнительныхРеквизитов);
			КонецЕсли;
		Иначе
			ОбластьМакета.Параметры.ДатаПоступления = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
			ОбластьМакета.Параметры.ДатаСписания = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
		КонецЕсли;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;
		
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	ОбластьМакета.Параметры.ПлательщикИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН");
	ОбластьМакета.Параметры.ПлательщикКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП");
	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП("" + НаименованиеБанкаПлательщика + " "
		+ ГородБанкаПлательщика);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ГородБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП("" + НаименованиеБанкаПолучателя + " "
		+ ГородБанкаПолучателя);
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет");
	ОбластьМакета.Параметры.ПолучательИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.ПолучательКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	Код = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.Код = Код;
	ОбластьМакета.Параметры.КодВидаДохода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаДохода");
	ОбластьМакета.Параметры.Очередность = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Очередность");
	ОбластьМакета.Параметры.ПоказательКБК = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательКБК");
	ОбластьМакета.Параметры.ОКТМО = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ОКТМО");
	ОбластьМакета.Параметры.ПоказательОснования = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательОснования");
	ОбластьМакета.Параметры.ПоказательПериода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательПериода");
	ОбластьМакета.Параметры.ПоказательНомера = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательНомера");
	ОбластьМакета.Параметры.ПоказательДаты = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательДаты");
	ОбластьМакета.Параметры.КодВыплат = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.КодВыплат");
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");

	Если Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ИсходноеПлатежноеПоручение) Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходноеПлатежноеПоручение, "ВидЭД");
		ДанныеФайла = ДанныеФайла(ИсходноеПлатежноеПоручение);
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ВидЭД, ДанныеЭД);
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		Реквизиты = ДанныеДляПечати(СтрокаОбъекта);
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("НаименованиеБанка", Реквизиты.ПлательщикНаименованиеБанка);
		РеквизитыБанка.Вставить("БИК", Реквизиты.ПлательщикБИКБанка);
		РеквизитыБанка.Вставить("ГородБанка", Реквизиты.ПлательщикГородБанка);
		ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, ИсходноеПлатежноеПоручение, РеквизитыБанка);
	Иначе
		ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);
	КонецЕсли;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка)
	
	ДанныеШтампа = Новый Структура("НаименованиеБанка, ГородБанка, Отделение, Офис, БИК, Статус, ДатаОперации");
	ДанныеШтампа.НаименованиеБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.НаименованиеБанка");
	ДанныеШтампа.ГородБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.ГородБанка");
	ДанныеШтампа.Отделение = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.Отделение");
	ДанныеШтампа.Офис = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.Офис");
	ДанныеШтампа.БИК = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.БИК");
	ДанныеШтампа.Статус = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.Статус");
	ДанныеШтампа.ДатаОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Штамп.ДатаОперации");

	ОбластьПодпись = Макет.ПолучитьОбласть("Отметки|Подпись");
	ТабличныйДокумент.Вывести(ОбластьПодпись);
	ОбластьШтамп = Макет.ПолучитьОбласть("Отметки|Штамп");
	Если ЗначениеЗаполнено(ДанныеШтампа.НаименованиеБанка) Тогда
		ЗаполнитьЗначенияСвойств(ОбластьШтамп.Параметры, ДанныеШтампа);
	Иначе
		ОбластьШтамп.Параметры.НаименованиеБанка = НаименованиеБанкаПлательщика;
		ОбластьШтамп.Параметры.БИК = ПлательщикБИКБанка;
		ОбластьШтамп.Параметры.ДатаОперации = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбластьШтамп.Параметры.Статус) Тогда
		ОбластьШтамп.Параметры.Статус = НСтр("ru = 'ПРОВЕДЕНО'");
	КонецЕсли;
	
	ТабличныйДокумент.Присоединить(ОбластьШтамп);
	
КонецПроцедуры

Процедура ДобавитьПлатежноеТребованиеИзВыписки(ТабличныйДокумент, Операция, ПлатежныеДокументыВИБ)
	
	ИсходноеПлатежноеТребование = Неопределено;
	
	НазваниеМакета = СтрШаблон("ЭД_ПлатежноеТребование_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПлатежноеТребование");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНОЕ ТРЕБОВАНИЕ №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа");
	ОбластьМакета.Параметры.УсловиеОплаты = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.УсловиеОплаты");
	ОбластьМакета.Параметры.СрокАкцепта = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежноеТребование.СрокАкцепта");
		
	Если ПлатежныеДокументыВИБ.Количество() Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		Если НаправлениеПлатежа = "1" Тогда // исходящий
			ИдентификаторДокумента = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ИдентификаторДокумента");
			Если ЗначениеЗаполнено(ИдентификаторДокумента) Тогда
				НайденнаяСтрока = ПлатежныеДокументыВИБ.Найти(ИдентификаторДокумента, "Идентификатор");
				Если НайденнаяСтрока <> Неопределено Тогда
					ИсходноеПлатежноеТребование = НайденнаяСтрока.Ссылка;
					ЗначенияДополнительныхРеквизитов = НайденнаяСтрока.ДополнительныеДанные.Получить();
					ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ЗначенияДополнительныхРеквизитов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
	
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;

		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьМакета.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета.Параметры.ПлательщикИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН");
	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП("" + НаименованиеБанкаПлательщика + " "
		+ ГородБанкаПлательщика);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ГородБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП("" + НаименованиеБанкаПолучателя + " "
		+ ГородБанкаПолучателя);
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет");
	ОбластьМакета.Параметры.ПолучательИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	Код = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.Код = Код;
	ОбластьМакета.Параметры.КодВидаДохода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаДохода");
	ОбластьМакета.Параметры.Очередность = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");

	Если Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если ЗначениеЗаполнено(ИсходноеПлатежноеТребование) Тогда
		ВидЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсходноеПлатежноеТребование, "ВидЭД");
		ДанныеФайла = ДанныеФайла(ИсходноеПлатежноеТребование);
		ДанныеЭД = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		Результат = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(ВидЭД, ДанныеЭД);
		СтрокаОбъекта = Результат.СтрокаОбъекта;
		Реквизиты = ДанныеДляПечати(СтрокаОбъекта);
		РеквизитыБанка = Новый Структура;
		РеквизитыБанка.Вставить("НаименованиеБанка", Реквизиты.ПлательщикНаименованиеБанка);
		РеквизитыБанка.Вставить("БИК", Реквизиты.ПлательщикБИКБанка);
		РеквизитыБанка.Вставить("ГородБанка", Реквизиты.ПлательщикГородБанка);
		ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, ИсходноеПлатежноеТребование, РеквизитыБанка);
	Иначе
		ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);
	КонецЕсли;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ДобавитьПлатежныйОрдерИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_ПлатежныйОрдер_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ПЛАТЕЖНЫЙ ОРДЕР №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа");
	ОбластьМакета.Параметры.СтатусСоставителя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.СтатусСоставителя");
	ОбластьМакета.Параметры.ДатаПоступления = ДатаДокумента;
	ОбластьМакета.Параметры.ДатаСписания = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;
		
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	ОбластьМакета.Параметры.ПлательщикИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН");
	ОбластьМакета.Параметры.ПлательщикКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП");
	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП("" + НаименованиеБанкаПлательщика + " "
		+ ГородБанкаПлательщика);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ГородБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП("" + НаименованиеБанкаПолучателя + " "
		+ ГородБанкаПолучателя);
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет");
	ОбластьМакета.Параметры.ПолучательИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.ПолучательКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	ОбластьМакета.Параметры.ВидОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
	Код = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.Код = Код;
	ОбластьМакета.Параметры.КодВидаДохода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.КодВидаДохода");
	ОбластьМакета.Параметры.Очередность = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.ПоказательКБК = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательКБК");
	ОбластьМакета.Параметры.ОКТМО = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ОКТМО");
	ОбластьМакета.Параметры.ПоказательОснования = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательОснования");
	ОбластьМакета.Параметры.ПоказательПериода = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательПериода");
	ОбластьМакета.Параметры.ПоказательНомера = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательНомера");
	ОбластьМакета.Параметры.ПоказательДаты = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.ПоказательДаты");
	ОбластьМакета.Параметры.КодВыплат = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежВБюджет.КодВыплат");
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");
		
	ОбластьМакета.Параметры.СодержаниеОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежныйОрдер.СодержаниеОперации");
	ОбластьМакета.Параметры.НомерЧастичногоПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежныйОрдер.НомерЧастичногоПлатежа");
	ОбластьМакета.Параметры.Шифр = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежныйОрдер.ШифрПлатежногоДокумента");
	ОбластьМакета.Параметры.СуммаОстаткаПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежныйОрдер.СуммаОстаткаПлатежа");
	ОбластьМакета.Параметры.НомерПлатежногоДокумента = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежныйОрдер.НомерПлатежногоДокумента");
	ОбластьМакета.Параметры.ДатаПлатежногоДокумента = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ПлатежныйОрдер.ДатаПлатежногоДокумента");
		
	Если Код = "0" Тогда
		ПолеКод = ОбластьМакета.Область("Код");
		ПолеКод.Шрифт = Новый Шрифт(ПолеКод.Шрифт, , 9);
	КонецЕсли;

	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ДобавитьЧекИзВыписки(ТабличныйДокумент, Операция)
	
	НазваниеМакета = СтрШаблон("ЭД_ДенежныйЧек_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакета.Параметры.НаименованиеНомер = НСтр("ru = 'ДЕНЕЖНЫЙ ЧЕК №'") + " "
		+ ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НомерДокумента");
	ДатаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаДокумента");
	ОбластьМакета.Параметры.ДатаДокумента = Формат(ДатаДокумента, "ДЛФ=D");
	ОбластьМакета.Параметры.ВидПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидПлатежа");
	ОбластьМакета.Параметры.ДатаПоступления = ДатаДокумента;
	ОбластьМакета.Параметры.ДатаСписания = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДатаОперации");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	ДанныеБумажнойФормы = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.ДанныеБумажнойФормы");
	Если ДанныеБумажнойФормы = Истина Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("СерияНомер");
		ОбластьМакета.Параметры.СерияЧека = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.ДанныеБумажнойФормы.Серия");
		ОбластьМакета.Параметры.НомерЧека = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.ДанныеБумажнойФормы.Номер");
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	СуммаДокумента = ЗначениеРеквизитаВДереве(Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.СуммаДокумента");
	
	// Попытка вывода суммы платежа прописью.
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Валюты") Тогда
		НаправлениеПлатежа = ЗначениеРеквизитаВДереве(
			Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НаправлениеПлатежа");
		
		Если НаправлениеПлатежа = "2" Тогда
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
		Иначе
			НомерСчета = ЗначениеРеквизитаВДереве(
				Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
		КонецЕсли;
		
		КодВалюты = КодВалютыБанковскогоСчета(НомерСчета);
		КодВалюты = ?(КодВалюты = "810", "643", КодВалюты);
		ВалютаДенежныхСредств = ВалютаПоКоду(КодВалюты);
		Если ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
			ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
			ОбластьСуммаПрописью.Параметры.СуммаПрописью = ФорматироватьСуммуПрописьюПлатежногоДокумента(
				СуммаДокумента, ВалютаДенежныхСредств);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописью);
		КонецЕсли;
	КонецЕсли;

	ОбластьМакета = Макет.ПолучитьОбласть("Содержимое");
	ОбластьМакета.Параметры.ПлательщикИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.ИНН");
	ОбластьМакета.Параметры.ПлательщикКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.КПП");
	ОбластьМакета.Параметры.ПлательщикНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Наименование");
	ОбластьМакета.Параметры.Сумма = СуммаДокумента;
	ОбластьМакета.Параметры.ПлательщикРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.РасчСчет");
	НаименованиеБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Наименование");
	ГородБанкаПлательщика = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПлательщика = СокрЛП("" + НаименованиеБанкаПлательщика + " "
		+ ГородБанкаПлательщика);
	ПлательщикБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.БИК");
	ОбластьМакета.Параметры.ПлательщикБИКБанка = ПлательщикБИКБанка;
	ОбластьМакета.Параметры.ПлательщикКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Плательщик.Банк.КоррСчет");
	НаименованиеБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Наименование");
	ГородБанкаПолучателя = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.Город");
	ОбластьМакета.Параметры.НаименованиеБанкаПолучателя = СокрЛП("" + НаименованиеБанкаПолучателя + " "
		+ ГородБанкаПолучателя);
	ОбластьМакета.Параметры.ПолучательБИКБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.БИК");
	ОбластьМакета.Параметры.ПолучательКоррСчетБанка = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Банк.КоррСчет");
	ОбластьМакета.Параметры.ПолучательИНН = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.ИНН");
	ОбластьМакета.Параметры.ПолучательКПП = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.КПП");
	ОбластьМакета.Параметры.ПолучательНаименование = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.Наименование");
	ОбластьМакета.Параметры.ПолучательРасчСчет = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.Получатель.РасчСчет");
	ОбластьМакета.Параметры.ВидОперации = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ВидОперации");
	ОбластьМакета.Параметры.Код = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.УникальныйИдентификаторПлатежа");
	ОбластьМакета.Параметры.НазначениеПлатежа = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.НазначениеПлатежа");
		
	ОбластьМакета.Параметры.ФИО = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.Получатель.ФИО");
	ОбластьМакета.Параметры.ДокументУдостоверяющийЛичность = ЗначениеРеквизитаВДереве(
		Операция, "Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.Получатель.ДокументУдостоверяющийЛичность");
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	СтрокаДеталь = Операция.Строки.Найти("Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.Детали", "ПолныйПуть", Истина);
	
	Если СтрокаДеталь.Значение <> Неопределено И СтрокаДеталь.Значение <> 0 Тогда
		ОбластьШапкаДетали = Макет.ПолучитьОбласть("ШапкаЦелейРасхода");
		ТабличныйДокумент.Вывести(ОбластьШапкаДетали);
		Для Каждого Деталь Из СтрокаДеталь.Строки Цикл
			СтрокаДетали = Макет.ПолучитьОбласть("СтрокаЦелиРасхода");
			СтрокаДетали.Параметры.Символ = ЗначениеРеквизитаВДереве(
				Деталь, "Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.Детали.НомерСтроки.Символ");
			СтрокаДетали.Параметры.ЦельРасхода = ЗначениеРеквизитаВДереве(Деталь,
				"Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.Детали.НомерСтроки.НаправлениеВыдачи");
			СтрокаДетали.Параметры.Сумма = ЗначениеРеквизитаВДереве(Деталь,
				"Выписки.НомерСтроки.Операции.НомерСтроки.ДенежныйЧек.Детали.НомерСтроки.Сумма");
			ТабличныйДокумент.Вывести(СтрокаДетали);
		КонецЦикла;
		ОбластьПодвалЦелейРасхода = Макет.ПолучитьОбласть("ПодвалЦелейРасхода");
		ТабличныйДокумент.Вывести(ОбластьПодвалЦелейРасхода);
	КонецЕсли;
	
	ДобавитьОбластьШтампа(ТабличныйДокумент, Макет, Операция, НаименованиеБанкаПлательщика, ПлательщикБИКБанка);

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

КонецПроцедуры

Процедура ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, СообщениеОбмена, РеквизитыБанка)
	
	РеквизитыСообщенияОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		СообщениеОбмена, "ДополнительныеДанные, Статус, Банк, ДатаИзмененияСтатуса");
	Если ЗначениеЗаполнено(РеквизитыСообщенияОбмена.ДополнительныеДанные) Тогда
		ЗначенияДополнительныхРеквизитов = РеквизитыСообщенияОбмена.ДополнительныеДанные.Получить();
	КонецЕсли;
	
	ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(СообщениеОбмена);

	ПодписанЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПрисоединенныйФайл, "ПодписанЭП");
	
	ЕстьШтамп = ЗначениеЗаполнено(ЗначенияДополнительныхРеквизитов) И ЗначенияДополнительныхРеквизитов.Свойство("ДанныеШтампа");
	ДокументОтправленВБанк = РеквизитыСообщенияОбмена.Статус <> Перечисления.СтатусыОбменСБанками.Сформирован
							И РеквизитыСообщенияОбмена.Статус <> Перечисления.СтатусыОбменСБанками.ОшибкаПередачи
							И РеквизитыСообщенияОбмена.Статус <> Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке
							И РеквизитыСообщенияОбмена.Статус <> Перечисления.СтатусыОбменСБанками.Подписан
							И РеквизитыСообщенияОбмена.Статус <> Перечисления.СтатусыОбменСБанками.ЧастичноПодписан;
	
	Если ЕстьШтамп ИЛИ ПодписанЭП ИЛИ ДокументОтправленВБанк Тогда
		
		ОбластьПодпись = Макет.ПолучитьОбласть("Отметки|Подпись");
		ТабличныйДокумент.Вывести(ОбластьПодпись);
		
		Если ЕстьШтамп Тогда
			ОбластьШтамп = Макет.ПолучитьОбласть("Отметки|Штамп");
			ОбластьШтамп.Параметры.Заполнить(ЗначенияДополнительныхРеквизитов.ДанныеШтампа);
			ТабличныйДокумент.Присоединить(ОбластьШтамп);
		ИначеЕсли ДокументОтправленВБанк Тогда  // заполняется штамп по состоянию отправленного документа
			ОбластьШтамп = Макет.ПолучитьОбласть("Отметки|Штамп");
			ЗаполнитьЗначенияСвойств(ОбластьШтамп.Параметры, РеквизитыБанка);
			ОбластьШтамп.Параметры.Статус = РеквизитыСообщенияОбмена.Статус;
			ОбластьШтамп.Параметры.ДатаОперации = РеквизитыСообщенияОбмена.ДатаИзмененияСтатуса;
			ТабличныйДокумент.Присоединить(ОбластьШтамп);
		КонецЕсли;
		
		Если ПодписанЭП Тогда
			ЭлектронныеПодписи = ДанныеПодписейДляШтампа(ПрисоединенныйФайл);
			Если ЭлектронныеПодписи.Количество() = 1 Тогда
				НазваниеМакета = СтрШаблон("ШтампЭП_%1", ОбщегоНазначения.КодОсновногоЯзыка());
				МакетШтампа = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
				ОбластьШтампОдинарныйСтрока = МакетШтампа.ПолучитьОбласть("ШтампОдинарныйСтрока|ШтампОдинарный");
				СтрокаПодписи = ЭлектронныеПодписи.Получить(0);
				ОбластьШтампОдинарныйСтрока.Параметры.Заполнить(СтрокаПодписи);
				ТабличныйДокумент.ВставитьОбласть(ОбластьШтампОдинарныйСтрока.Области.ОбластьШтампОдинарный,
					ТабличныйДокумент.Области.ОбластьШтампОдинарный, , Истина);
			ИначеЕсли ЭлектронныеПодписи.Количество() > 1 Тогда
				НазваниеМакета = СтрШаблон("ШтампЭП_%1", ОбщегоНазначения.КодОсновногоЯзыка());
				МакетШтампа = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);
				ОбластьШтампТабличныйШапка = МакетШтампа.ПолучитьОбласть("ШтампТабличныйШапка|ОбластьШтампТабличный");
				ОбластьШтампТабличныйРазделитель = МакетШтампа.ПолучитьОбласть("ШтампТабличныйРазделитель|ОбластьШтампТабличный");
				ОбластьСписокПодписей = Новый ТабличныйДокумент;
				ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйШапка);
				Счетчик = 0;
				КоличествоСтрок = ЭлектронныеПодписи.Количество();
				Для каждого СтрокаПодписи Из ЭлектронныеПодписи Цикл
					Счетчик = Счетчик + 1;
					ОбластьШтампТабличныйСтрока = МакетШтампа.ПолучитьОбласть("ШтампТабличныйСтрока|ОбластьШтампТабличный");
					ОбластьШтампТабличныйСтрока.Параметры.Заполнить(СтрокаПодписи);
					ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйСтрока);
					Если КоличествоСтрок <> Счетчик Тогда
						ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйРазделитель);
					КонецЕсли;
				КонецЦикла;
				ОбластьШтампТабличныйПодвал = МакетШтампа.ПолучитьОбласть("ШтампТабличныйПодвал|ОбластьШтампТабличный");
				ОбластьСписокПодписей.Вывести(ОбластьШтампТабличныйПодвал);
				ТабличныйДокумент.Вывести(ОбластьСписокПодписей);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПериодВыписки(ОбъектОбработки, Записать, ОбработанПрисоединенныйФайл)
	
	ПустаяДата = Дата("00010101");
	
	Если ОбъектОбработки.ВидЭД = Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка
		И (ОбъектОбработки.ДатаОкончания = ПустаяДата ИЛИ ОбъектОбработки.НомерСчета = "") Тогда

		ПрисоединенныйФайл = ОбменСБанкамиСлужебный.ПрисоединенныйФайл(ОбъектОбработки.Ссылка, Ложь);
		
		Если ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			
			Результат = ОбновлениеИнформационнойБазы.ОбъектОбработан(ПрисоединенныйФайл);
			
			Если НЕ Результат.Обработан Тогда
				ОбработанПрисоединенныйФайл = Ложь;
				Возврат;
			КонецЕсли;
		
			ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ПрисоединенныйФайл, Ложь);
			
			Если ДвоичныеДанные = Неопределено Тогда
				ОбъектОбработки.ПометкаУдаления = Истина;
			Иначе
				Попытка
					СтруктураРазбораФайла = ОбменСБанкамиСлужебный.СформироватьДеревоРазбора(
						Перечисления.ВидыЭДОбменСБанками.ВыпискаБанка, ДвоичныеДанные);
				Исключение
					ОбъектОбработки.ПометкаУдаления = Истина;
					Записать = Истина;
					Возврат;
				КонецПопытки;
				ДеревоРазбора = СтруктураРазбораФайла.ДеревоРазбора;
				СтрокаОбъекта = СтруктураРазбораФайла.СтрокаОбъекта;
				ДатаНачала = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаОбъекта, "ДатаНачала");
				ДатаОкончания = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
					ДеревоРазбора, СтрокаОбъекта, "ДатаКонца");
				СтруктураОтбора = Новый Структура("Реквизит", "БанковскиеСчетаОрганизаций");
				БанковскиеСчетаОрганизаций = СтрокаОбъекта.Строки.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаБанковскийСчет Из БанковскиеСчетаОрганизаций Цикл
					НомерСчета = ЭлектронноеВзаимодействие.ЗначениеРеквизитаСтрокиДереваРазбора(
						ДеревоРазбора, СтрокаБанковскийСчет, "БанковскийСчет.РасчСчет");
					Прервать;
				КонецЦикла;
					
				Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ЗначениеЗаполнено(НомерСчета) Тогда
					ОбъектОбработки.ДатаНачала = ДатаНачала;
					ОбъектОбработки.ДатаОкончания = ДатаОкончания;
					ОбъектОбработки.НомерСчета = НомерСчета;
				Иначе
					ОбъектОбработки.ПометкаУдаления = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОбъектОбработки.ПометкаУдаления = Истина;
		КонецЕсли;
		
		Записать = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДатыИзДополнительныхДанных(СообщениеОбмена, Параметры)
	
	ДополнительныеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ДополнительныеДанные");
	Если ЗначениеЗаполнено(ДополнительныеДанные) Тогда
		ЗначенияДополнительныхРеквизитов = ДополнительныеДанные.Получить();
		Если ЗначенияДополнительныхРеквизитов <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Параметры, ЗначенияДополнительныхРеквизитов);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#Область РаботаСРеестромВыплатСамозанятым

Процедура ЗаполнитьТабличныйДокументРеестрВыплатСамозанятым_ЭД(ТабличныйДокумент, Реквизиты, СообщениеОбмена)

	НазваниеМакета = СтрШаблон("ЭД_РеестрВыплатСамозанятым_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодписи = Макет.ПолучитьОбласть("Подписи");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакетаЗаголовок.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);

	МассивВыплатСамозанятым = Новый Массив;
	Если Реквизиты.Свойство("МассивВыплатСамозанятым", МассивВыплатСамозанятым) Тогда
		Для Каждого ФизЛицо Из МассивВыплатСамозанятым Цикл
			ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ФизЛицо);
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПодписи);
	
	БИКБанка = "";
	Если Реквизиты.Свойство("БИК", БИКБанка) Тогда 		
		РеквизитыБанка = РеквизитыБанка(БИКБанка);
		ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, СообщениеОбмена, РеквизитыБанка);
	КонецЕсли;

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

КонецПроцедуры

Функция ДанныеДляПечатиРеестрВыплатСамозанятым(СообщениеОбмена, ДанныеФайла)
	
	ДанныеДляОбъекта = Новый Структура;
	ОбъектXML = Новый ЧтениеXML;
	ПотокВПамяти = ДанныеФайла.ОткрытьПотокДляЧтения();

	Попытка

		ОбъектXML.ОткрытьПоток(ПотокВПамяти);
		Если ОбъектXML.Прочитать() Тогда
			
		КонецЕсли;

		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ДанныеДляОбъекта.Вставить(
			"Номер",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "НомерРеестра", ""));
		ДанныеДляОбъекта.Вставить(
			"Дата",
			Формат(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДатаРеестра", Дата(1,1,1)),"ДЛФ=D"));
		ДанныеДляОбъекта.Вставить(
			"Организация",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "НаименованиеОрганизации", ""));
		ДанныеДляОбъекта.Вставить(
			"БИК",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "БИК", ""));
		ДанныеДляОбъекта.Вставить(
			"Всего",
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "КонтрольныеСуммы.СуммаИтого", ""));
		МассивВыплатСамозанятым = Новый Массив;
		РеестрВыплатСамозанятым = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "РеестрВыплатСамозанятым", Неопределено);
		Если РеестрВыплатСамозанятым <> Неопределено Тогда
			ФизЛицо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(РеестрВыплатСамозанятым, "ФизЛицо", Неопределено);
			Если ФизЛицо <> Неопределено Тогда					
				Для Каждого ЭД_ФизЛицо Из ФизЛицо Цикл							
					ФизЛицо = СтрокаФизЛицаРеестрВыплат();	
					ЗаполнитьЗначенияСвойств(ФизЛицо, ЭД_ФизЛицо);
					ФизЛицо.ФИО = ФизЛицо.Фамилия + " " + ФизЛицо.Имя + " " + ФизЛицо.Отчество;
					МассивВыплатСамозанятым.Добавить(ФизЛицо);
				КонецЦикла;
				ДанныеДляОбъекта.Вставить("МассивВыплатСамозанятым", МассивВыплатСамозанятым);
			Иначе
				ДанныеДляОбъекта.Вставить("МассивВыплатСамозанятым", МассивВыплатСамозанятым);
			КонецЕсли;
		Иначе
			ДанныеДляОбъекта.Вставить("МассивВыплатСамозанятым", МассивВыплатСамозанятым);
		КонецЕсли;
			
	Исключение
		ТекстСообщения = НСтр("ru = 'При чтении данных электронного документа произошла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ШаблонОшибки = НСтр("ru = 'Возникла ошибка при чтении данных электронного документа.
			|Текст ошибки: %1
			|Файл %2.'");
		ТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), НСтр("ru = 'Реестр выплат'"));		
		Операция = НСтр("ru = 'Формирование печатной формы электронного документа'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

// Создает структуру описание строки табличного документа
//
//  Возвращаемое значение:
//   СтрокаФизЛицаРеестрВыплат - Структура  - описание строки табличного документа
//
Функция СтрокаФизЛицаРеестрВыплат()

	СтрокаФизЛицаРеестрВыплат = Новый Структура();
	СтрокаФизЛицаРеестрВыплат.Вставить("ФИО", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("Фамилия", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("Имя", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("Отчество", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("БИК", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("ИНН", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("НомерСчета", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("НазначениеПлатежа", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("Сумма", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("Нпп", "");
	СтрокаФизЛицаРеестрВыплат.Вставить("НомерЧека", "");		
	
	Возврат СтрокаФизЛицаРеестрВыплат;

КонецФункции // СтрокаФизЛицаРеестрВыплат()

Функция ПечатнаяФормаРеестрВыплатСамозанятым(СообщениеОбмена, АдресХранилищаФайла)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);	
	ДанныеЭДДляПечати = ДанныеДляПечатиРеестрВыплатСамозанятым(СообщениеОбмена, ДанныеФайла);
	ЗаполнитьТабличныйДокументРеестрВыплатСамозанятым_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, СообщениеОбмена);	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаРеестрЧековВыплатыСамозанятым(СообщениеОбмена, АдресХранилищаФайла)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ДанныеФайла = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);	
	ДанныеЭДДляПечати = ДанныеДляПечатиРеестрЧековВыплатСамозанятым(СообщениеОбмена, ДанныеФайла);
	ЗаполнитьТабличныйДокументРеестрЧековВыплатСамозанятым_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати, СообщениеОбмена);	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ДанныеДляПечатиРеестрЧековВыплатСамозанятым(СообщениеОбмена, ДанныеФайла)
	
	ДанныеДляОбъекта = Новый Структура;
	
	ОбъектXML = Новый ЧтениеXML;
	ПотокВПамяти = ДанныеФайла.ОткрытьПотокДляЧтения();

	Попытка
	
		ОбъектXML.ОткрытьПоток(ПотокВПамяти);
		Если ОбъектXML.Прочитать() Тогда
			
		КонецЕсли;

		ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);
		ДанныеДляОбъекта.Вставить("Номер", РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "НомерРеестра", ""));
		Дата = СокрЛП(РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "ДатаРеестра", ""));
		Если Дата <> "" Тогда
			Дата = СтрЗаменить(Дата, "-", "");
			Дата = Дата(Дата);
		КонецЕсли;
		ДанныеДляОбъекта.Вставить(
			"Дата",
			Формат(Дата, "ДЛФ=D"));
		ДанныеДляОбъекта.Вставить(
			"Организация", 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "НаименованиеОрганизации", ""));
		ДанныеДляОбъекта.Вставить(
			"БИК", 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "БИК", ""));
		ДанныеДляОбъекта.Вставить(
			"Всего", 
			РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "КонтрольныеСуммы.СуммаИтого", ""));
		МассивВыплатСамозанятым = Новый Массив;
		ОбъектФизЛицо = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ЭД, "РеестрЧековСамозанятых.ФизЛицо", Неопределено);
		Если ОбъектФизЛицо <> Неопределено Тогда	
			Если ТипЗнч(ОбъектФизЛицо) = Тип("СписокXDTO") Тогда 				
				Для Каждого ЭД_ФизЛицо Из ОбъектФизЛицо Цикл													
					ЗаполнитьСтрокуЧека(ЭД_ФизЛицо, МассивВыплатСамозанятым);
				КонецЦикла;
			ИначеЕсли  ТипЗнч(ОбъектФизЛицо) = Тип("ОбъектXDTO") Тогда 
				ЗаполнитьСтрокуЧека(ОбъектФизЛицо, МассивВыплатСамозанятым);
			КонецЕсли;
			ДанныеДляОбъекта.Вставить("МассивВыплатСамозанятым", МассивВыплатСамозанятым);
		Иначе
			ДанныеДляОбъекта.Вставить("МассивВыплатСамозанятым", МассивВыплатСамозанятым);
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'При чтении данных электронного документа произошла ошибка.
			|%1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ШаблонОшибки = НСтр("ru = 'Возникла ошибка при чтении данных электронного документа.
			|Текст ошибки: %1
			|Файл %2.'");
		ТекстОшибки = СтрШаблон(
			ШаблонОшибки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), НСтр("ru = 'Реестр чеков'"));				
		Операция = НСтр("ru = 'Формирование печатной формы электронного документа'");
		ЭлектронноеВзаимодействие.ОбработатьОшибку(Операция, ТекстОшибки, ТекстОшибки, "ОбменСБанками");
	КонецПопытки;
	ОбъектXML.Закрыть();
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Процедура ЗаполнитьСтрокуЧека(ОбъектФизЛицо, МассивВыплатСамозанятым)
	
	ФизЛицо = СтрокаФизЛицаРеестрЧековВыплат();
	Для каждого ИмяСвойства Из ОбъектФизЛицо.Свойства() Цикл
		ФизЛицо[ИмяСвойства.Имя] = РаботаСФайламиБЭД.ЗначениеСвойстваXDTO(ОбъектФизЛицо, ИмяСвойства.Имя);
	КонецЦикла; 
	ФизЛицо.ФИО = ФизЛицо.Фамилия + " " + ФизЛицо.Имя + " " + ФизЛицо.Отчество;
	Если ЗначениеЗаполнено(СокрЛП(ФизЛицо.Результат))
		И НРег(СокрЛП(ФизЛицо.Результат)) <> НРег("Зачислено")
		И НРег(СокрЛП(ФизЛицо.Результат)) <> НРег("ЗачисленоСсылкаНеСформирована")
		И ЗначениеЗаполнено(СокрЛП(ФизЛицо.РасшифровкаРезультата)) Тогда
		ФизЛицо.СсылкаНаЧек = СокрЛП(ФизЛицо.РасшифровкаРезультата);
	КонецЕсли;
	МассивВыплатСамозанятым.Добавить(ФизЛицо);
	
КонецПроцедуры

// Создает структуру описание строки табличного документа
//
//  Возвращаемое значение:
//   СтрокаФизЛицаРеестрЧековВыплат - Структура  - описание строки табличного документа
//
Функция СтрокаФизЛицаРеестрЧековВыплат()
	
	СтрокаФизЛицаРеестрЧековВыплат = Новый Структура();
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("ФИО", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("Фамилия", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("Имя", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("Отчество", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("БИК", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("ИНН", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("НомерСчета", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("Сумма", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("Нпп", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("СсылкаНаЧек", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("Результат", "");
	СтрокаФизЛицаРеестрЧековВыплат.Вставить("РасшифровкаРезультата", "");		
	
	Возврат СтрокаФизЛицаРеестрЧековВыплат;

КонецФункции // СтрокаФизЛицаРеестрЧековВыплат()

Процедура ЗаполнитьТабличныйДокументРеестрЧековВыплатСамозанятым_ЭД(ТабличныйДокумент, Реквизиты, СообщениеОбмена)

	НазваниеМакета = СтрШаблон("ЭД_РеестрЧековВыплатСамозанятым_%1", ОбщегоНазначения.КодОсновногоЯзыка());
	Макет = Документы.СообщениеОбменСБанками.ПолучитьМакет(НазваниеМакета);

	ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("Строка");
	ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьМакетаПодписи = Макет.ПолучитьОбласть("Подписи");
	
	ЗаполнитьЗначенияСвойств(ОбластьМакетаЗаголовок.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);

	МассивВыплатСамозанятым = Новый Массив;
	Если Реквизиты.Свойство("МассивВыплатСамозанятым", МассивВыплатСамозанятым) Тогда
		Номер = 1;
		Для Каждого ФизЛицо Из МассивВыплатСамозанятым Цикл
			ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ФизЛицо);
			ОбластьМакетаСтрока.Параметры.Нпп = Номер;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			Номер = Номер + 1;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбластьМакетаПодвал.Параметры, Реквизиты);
	ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
	
	ТабличныйДокумент.Вывести(ОбластьМакетаПодписи);
	
	БИКБанка = "";
	Если Реквизиты.Свойство("БИК", БИКБанка) Тогда 		
		РеквизитыБанка = РеквизитыБанка(БИКБанка);
		ЗаполнитьОбластьОтметок(Макет, ТабличныйДокумент, СообщениеОбмена, РеквизитыБанка);
	КонецЕсли;

	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

