
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ЗаказыПоставщикам = Параметры.ЗаказыПоставщикам;
	ПриобретениеТоваровУслуг = Параметры.ПриобретениеТоваровУслуг;
	ЗаполнитьОтклоненияПоЗаказамПоставщикам();
	
	ИспользоватьПричиныОтменыЗаказовПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	
	Если ТоварыКОтмене.Количество() > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене;
	ИначеЕсли ОтклоненияЦен.Количество() > 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		Элементы.ОкончаниеНазад.Видимость = Ложь;
		Если ЗаказыЗакрыты Тогда
			Элементы.СтраницыЗакрытиеЗаказов.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказовИнформация2;
		Иначе
			Элементы.СтраницыЗакрытиеЗаказов.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказовИнформация1;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьПричиныОтмены = ПолучитьФункциональнуюОпцию("ИспользоватьПричиныОтменыЗаказовПоставщикам");
	Элементы.ТоварыКОтменеДекорация.Видимость = ИспользоватьПричиныОтмены;
	Элементы.ТоварыКОтменеДекорацияБезПричины.Видимость = НЕ ИспользоватьПричиныОтмены;
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ПринудительноЗакрытьФорму Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Готово И Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		Отказ = Истина;
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			НСтр("ru = 'Закрытие заказов не выполнено. Закрыть форму?'"),
			СписокКнопок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = "Закрыть" Тогда
		ПринудительноЗакрытьФорму = Истина;
		Закрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыКОтмене

&НаКлиенте
Процедура ТоварыКОтменеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ТоварыКОтмене.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ТоварыКОтменеЗаказПоставщику" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ТоварыКОтмене.ТекущиеДанные.ЗаказПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтклоненияЦен

&НаКлиенте
Процедура ОтклоненияЦенВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ОтклоненияЦен.ТекущиеДанные <> Неопределено Тогда
		
		Если Поле.Имя = "ОтклоненияЦенЗаказПоставщику" Тогда
			ПоказатьЗначение(Неопределено, Элементы.ОтклоненияЦен.ТекущиеДанные.ЗаказПоставщику);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене Тогда
		
		ОчиститьСообщения();
		
		Если ИспользоватьПричиныОтменыЗаказовПоставщиками
			И Не ЗначениеЗаполнено(ПричинаОтмены) Тогда
			
			ТекстОшибки = НСтр("ru='Поле ""Причина отмены"" не заполнено'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПричинаОтмены",
				,);
				
			Возврат;
			
		КонецЕсли;
		
		Если ОтклоненияЦен.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен;
		Иначе
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		КонецЕсли;
	
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаЗакрытиеЗаказов Тогда
		
		Если ОтклоненияЦен.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен;
		ИначеЕсли ТоварыКОтмене.Количество() > 0 Тогда
			Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене;
		КонецЕсли;
		
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРазличияЦен Тогда
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТоварыКОтмене;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	
	Если ЗаказыЗакрыты Тогда
	
		Готово = Истина;
		Закрыть();
	
	ИначеЕсли ГотовоСервер() Тогда
		
		ТекстСообщения = НСтр("ru='Для заказов поставщикам (%КоличествоОбработанных%) установлен статус ""Закрыт""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", ЗаказыПоставщикам.Количество());
		ТекстЗаголовка = НСтр("ru='Статус ""Закрыт"" установлен'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
		Если ЗначениеЗаполнено(ПриобретениеТоваровУслуг) Тогда
			Оповестить("ЗакрытиеЗаказов", ПриобретениеТоваровУслуг);
		КонецЕсли;
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКОтменеЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыКОтмене.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЗаказПоставщику.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЗаказПоставщику");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ГиперссылкаЦвет);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.ЦенаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.FireBrick);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинки.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтЦеныЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенЦенаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаПоступления.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенСуммаЗаказа.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенИндексКартинкиСуммы.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ОтклоненияЦенПроцентОтклоненияОтСуммыЗаказа.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаЗаказа");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("ОтклоненияЦен.СуммаПоступления");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);

КонецПроцедуры

#Область Прочее

&НаСервере
Процедура ЗаполнитьОтклоненияПоЗаказамПоставщикам()
	УстановитьПривилегированныйРежим(Истина);
	
	МассивТиповДокументов = Новый Массив;
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ПриобретениеТоваровУслуг"));
	МассивТиповДокументов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));

	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Ссылка",    Новый ОписаниеТипов(МассивТиповДокументов));
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЧислитель", Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("КурсЗнаменатель", Новый ОписаниеТипов("Число"));
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
	|	ПриобретениеТоваровУслуг.Валюта КАК Валюта,
	|	ПриобретениеТоваровУслуг.Дата   КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ПриобретениеТоваровУслугТовары.Ссылка
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.ЗаказПоставщику В (&ЗаказыПоставщикам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказПоставщику.Ссылка КАК Ссылка,
	|	ЗаказПоставщику.Валюта КАК Валюта,
	|	ЗаказПоставщику.Дата   КАК Дата,
	|	ЗаказПоставщику.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В (&ЗаказыПоставщикам)");
	
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", ЗаказыПоставщикам.ВыгрузитьЗначения());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаКурсовВалют.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КурсыВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата, Выборка.ВалютаРегламентированногоУчета);
		НоваяСтрока.КурсЧислитель = КурсыВалюты.КурсЧислитель;
		НоваяСтрока.КурсЗнаменатель = КурсыВалюты.КурсЗнаменатель;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаКурсовВалют.Ссылка    КАК Ссылка,
	|	ТаблицаКурсовВалют.Валюта    КАК Валюта,
	|	ТаблицаКурсовВалют.Дата      КАК Дата,
	|	ТаблицаКурсовВалют.КурсЧислитель КАК КурсЧислитель,
	|	ТаблицаКурсовВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	&ТаблицаКурсовВалют КАК ТаблицаКурсовВалют
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Ссылка КАК ЗаказПоставщику
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЗаказовПоставщикам КАК СостоянияЗаказовПоставщикам
	|		ПО ЗаказПоставщику.Ссылка = СостоянияЗаказовПоставщикам.Заказ
	|ГДЕ
	|	ЗаказПоставщику.Ссылка В(&ЗаказыПоставщикам)
	|	И (ЗаказПоставщику.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
	|		ИЛИ СостоянияЗаказовПоставщикам.Состояние <>  ЗНАЧЕНИЕ(Перечисление.СостоянияЗаказовПоставщикам.Закрыт))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Остатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	Остатки.Номенклатура КАК Номенклатура,
	|	Остатки.Характеристика КАК Характеристика,
	|	Остатки.КодСтроки КАК КодСтроки,
	|	Остатки.Склад КАК Склад,
	|	Остатки.КОформлениюОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику В (&ЗаказыПоставщикам)) КАК Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыЗаказа.Ссылка КАК ЗаказПоставщику,
	|	ТоварыЗаказа.КодСтроки КАК КодСтроки,
	|	ТоварыЗаказа.Номенклатура КАК Номенклатура,
	|	ТоварыЗаказа.Характеристика КАК Характеристика,
	|	ПриобретениеТоваровУслугТовары.Ссылка.Валюта КАК ВалютаПоступления,
	|	СУММА(ТоварыЗаказа.Количество) КАК КоличествоЗаказа,
	|	NULL КАК КоличествоПоступления,
	|	(ТоварыЗаказа.Цена/ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1))*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) 
	|	* ВЫБОР
	|		КОГДА ТоварыЗаказа.Ссылка.Валюта <> ПриобретениеТоваровУслугТовары.Ссылка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЗаказ.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЗаказ.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЗаказ.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЗаказ.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1 КОНЕЦ КАК ЦенаЗаказа,
	|	СУММА(ТоварыЗаказа.Сумма 
	|		* ВЫБОР
	|		КОГДА ТоварыЗаказа.Ссылка.Валюта <> ПриобретениеТоваровУслугТовары.Ссылка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЗаказ.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЗаказ.КурсЧислитель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЗнаменатель, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.КурсЧислитель, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЗаказ.КурсЧислитель * КурсыВалюты.КурсЗнаменатель)
	|						/ (КурсыВалюты.КурсЧислитель * КурсыВалютыЗаказ.КурсЗнаменатель)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1 КОНЕЦ) КАК СуммаЗаказа,
	|	NULL КАК ЦенаПоступления,
	|	NULL КАК СуммаПоступления,
	|	ТоварыЗаказа.ПроцентРучнойСкидки КАК ПроцентРучнойСкидкиЗаказа,
	|	NULL КАК ПроцентРучнойСкидкиПоступления,
	|	NULL КАК СуммаРучнойСкидкиПоступления,
	|	ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки1,1)*ЕСТЬNULL(&ТекстЗапросаКоэффициентУпаковки2, 1) КАК КоэффициентПересчетаУпаковок
	|ПОМЕСТИТЬ ОтклоненияЦен
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ТоварыЗаказа
	|			ПО ТоварыЗаказа.КодСтроки = ПриобретениеТоваровУслугТовары.КодСтроки
	|				И ТоварыЗаказа.Ссылка = ПриобретениеТоваровУслугТовары.ЗаказПоставщику
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыЗаказ
	|		ПО ПриобретениеТоваровУслугТовары.ЗаказПоставщику.Ссылка.Валюта = КурсыВалютыЗаказ.Валюта
	|			И ПриобретениеТоваровУслугТовары.ЗаказПоставщику = КурсыВалютыЗаказ.Ссылка 
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалюты
	|		ПО ПриобретениеТоваровУслугТовары.Ссылка.Валюта = КурсыВалюты.Валюта
	|			И ПриобретениеТоваровУслугТовары.Ссылка = КурсыВалюты.Ссылка 
	|ГДЕ
	|	ТоварыЗаказа.Ссылка В(&ЗаказыПоставщикам)
	|	И ТоварыЗаказа.Ссылка.Проведен
	|	И НЕ ТоварыЗаказа.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыЗаказа.КодСтроки,
	|	ТоварыЗаказа.Номенклатура,
	|	ТоварыЗаказа.Упаковка,
	|	ТоварыЗаказа.Характеристика,
	|	ТоварыЗаказа.Ссылка,
	|	ТоварыЗаказа.ПроцентРучнойСкидки,
	|	ТоварыЗаказа.Цена,
	|	ПриобретениеТоваровУслугТовары.Упаковка,
	|	ПриобретениеТоваровУслугТовары.Номенклатура,
	|	ПриобретениеТоваровУслугТовары.Ссылка.Валюта,
	|	КурсыВалютыЗаказ.КурсЗнаменатель,
	|	КурсыВалютыЗаказ.КурсЧислитель,
	|	КурсыВалюты.КурсЗнаменатель,
	|	КурсыВалюты.КурсЧислитель
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыПоступления.ЗаказПоставщику,
	|	ТоварыПоступления.КодСтроки,
	|	ТоварыПоступления.Номенклатура,
	|	ТоварыПоступления.Характеристика,
	|	ТоварыПоступления.Ссылка.Валюта,
	|	NULL,
	|	СУММА(ТоварыПоступления.Количество),
	|	NULL,
	|	NULL,
	|	ТоварыПоступления.Цена,
	|	СУММА(ТоварыПоступления.Сумма),
	|	NULL,
	|	ТоварыПоступления.ПроцентРучнойСкидки,
	|	СУММА(ТоварыПоступления.СуммаРучнойСкидки),
	|	NULL
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ТоварыПоступления
	|ГДЕ
	|	ТоварыПоступления.ЗаказПоставщику В(&ЗаказыПоставщикам)
	|	И ТоварыПоступления.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыПоступления.ЗаказПоставщику,
	|	ТоварыПоступления.КодСтроки,
	|	ТоварыПоступления.Номенклатура,
	|	ТоварыПоступления.Характеристика,
	|	ТоварыПоступления.Цена,
	|	ТоварыПоступления.ПроцентРучнойСкидки,
	|	ТоварыПоступления.Ссылка.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтклоненияЦен.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ОтклоненияЦен.КодСтроки КАК КодСтроки,
	|	ОтклоненияЦен.Номенклатура КАК Номенклатура,
	|	ОтклоненияЦен.Характеристика КАК Характеристика,
	|	ОтклоненияЦен.ВалютаПоступления КАК ВалютаПоступления,
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) КАК ЦенаЗаказа,
	|	СУММА(ОтклоненияЦен.СуммаЗаказа) КАК СуммаЗаказа,
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) КАК ЦенаПоступления,
	|	СУММА(ОтклоненияЦен.СуммаПоступления) КАК СуммаПоступления,
	|	СУММА(ОтклоненияЦен.СуммаРучнойСкидкиПоступления) КАК СуммаРучнойСкидкиПоступления,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) = 0
	|				ИЛИ СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) * 100 / СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) - 100
	|	КОНЕЦ КАК ПроцентОтклоненияОтЦеныЗаказа,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) = 0
	|				ИЛИ СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) * 100 / СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) - 100
	|	КОНЕЦ КАК ПроцентОтклоненияОтСуммыЗаказа,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) < СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА 3
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) > СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА 1
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) < СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА 3
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) > СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА 1
	|		ИНАЧЕ 8
	|	КОНЕЦ КАК ИндексКартинкиСуммы,
	|	ВЫБОР
	|		КОГДА СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления) <> СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЦенаИзменилась,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ОтклоненияЦен.КоличествоЗаказа) = МАКСИМУМ(ОтклоненияЦен.КоличествоПоступления)
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> 0
	|				И СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления) <> СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СуммаИзменилась,
	|	МАКСИМУМ(ОтклоненияЦен.ПроцентРучнойСкидкиЗаказа) КАК ПроцентРучнойСкидкиЗаказа,
	|	МАКСИМУМ(ОтклоненияЦен.ПроцентРучнойСкидкиПоступления) КАК ПроцентРучнойСкидкиПоступления,
	|	СРЕДНЕЕ(ОтклоненияЦен.КоэффициентПересчетаУпаковок) КАК КоэффициентПересчетаУпаковок
	|ИЗ
	|	ОтклоненияЦен КАК ОтклоненияЦен
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтклоненияЦен.ЗаказПоставщику,
	|	ОтклоненияЦен.КодСтроки,
	|	ОтклоненияЦен.Номенклатура,
	|	ОтклоненияЦен.Характеристика,
	|	ОтклоненияЦен.ВалютаПоступления
	|
	|ИМЕЮЩИЕ
	|	СРЕДНЕЕ(ОтклоненияЦен.ЦенаЗаказа) <> СРЕДНЕЕ(ОтклоненияЦен.ЦенаПоступления)
	|		ИЛИ ((МАКСИМУМ(ОтклоненияЦен.КоличествоЗаказа) = МАКСИМУМ(ОтклоненияЦен.КоличествоПоступления)
	|			И СРЕДНЕЕ(ОтклоненияЦен.СуммаЗаказа) <> СРЕДНЕЕ(ОтклоненияЦен.СуммаПоступления)))");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки1",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ТоварыЗаказа.Упаковка",
		"ТоварыЗаказа.Номенклатура"));
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаКоэффициентУпаковки2",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ПриобретениеТоваровУслугТовары.Упаковка",
		"ПриобретениеТоваровУслугТовары.Номенклатура"));
	
	Запрос.УстановитьПараметр("ЗаказыПоставщикам", ЗаказыПоставщикам.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("ТаблицаКурсовВалют", ТаблицаКурсовВалют);
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗаказы = Результат[1].Выбрать();
	ТоварыКОтмене.Загрузить(Результат[2].Выгрузить());
	ОтклоненияЦен.Загрузить(Результат[4].Выгрузить());
	
	Если ВыборкаЗаказы.Количество() = 0 И
		ТоварыКОтмене.Количество() = 0 И
		ОтклоненияЦен.Количество() = 0 Тогда
		ЗаказыЗакрыты = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуПанелиНавигации(Форма)
	
	Если Форма.ТоварыКОтмене.Количество() > 0 И Форма.ОтклоненияЦен.Количество() > 0 Тогда
		
		Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаТоварыКОтмене Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияНачало;
			Форма.Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаРазличияЦен Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияПродолжение;
			Форма.Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
		Иначе
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
			Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	ИначеЕсли Форма.ТоварыКОтмене.Количество() > 0 Или Форма.ОтклоненияЦен.Количество() > 0 Тогда
		
		Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаРазличияЦен Или
			Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаТоварыКОтмене Тогда
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияНачало;
			Форма.Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
		Иначе
			Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
			Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
	Иначе
		
		Форма.Элементы.Навигация.ТекущаяСтраница = Форма.Элементы.НавигацияОкончание;
		Форма.Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ГотовоСервер()
	
	КоличествоОбработанных = 0;
	Готово = Истина;
	ПризнакГотово = Ложь;
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ТекСтрока Из ЗаказыПоставщикам Цикл
			
				// Захват объекта для редактирования
				Попытка
					ЗаблокироватьДанныеДляРедактирования(ТекСтрока.Значение);
				Исключение
					ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", ТекСтрока.Представление);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекСтрока.Значение);
					Продолжить;
				КонецПопытки;
				
				// Получение объекта документа
				Объект = ТекСтрока.Значение.ПолучитьОбъект();
				
				СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
				
				СтруктураДействийИзмененияЦен = Новый Структура;
				СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСумму");
				СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуРучнойСкидки");
				СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
				
				СтруктураДействийИзмененияСумм = Новый Структура;
				СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
				СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
				СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуРучнойСкидки");
				
				ЦеныСкорректированы = Ложь;
				
				ДополненныеПараметры = ВзаиморасчетыСервер.ДополненныеПараметрыМеханизма(Объект);
				ОбъектРасчетов = ОбщегоНазначенияУТКлиентСервер.ДанныеПоПути(Объект, ДополненныеПараметры.МассивПараметров[0].ОбъектРасчетов);
				
				Для Каждого СтрокаОтклонений Из ОтклоненияЦен Цикл
					
					Если СтрокаОтклонений.ЗаказПоставщику = ТекСтрока.Значение Тогда
						
						НайденнаяСтрока = Объект.Товары.Найти(СтрокаОтклонений.КодСтроки, "КодСтроки");
						
						Если НЕ СтрокаОтклонений.ЦенаИзменилась И СтрокаОтклонений.СуммаИзменилась Тогда
							
							Если НайденнаяСтрока <> Неопределено Тогда
								
								НайденнаяСтрока.Сумма = СтрокаОтклонений.СуммаПоступления;
								
								Если Объект.Валюта <> СтрокаОтклонений.ВалютаПоступления Тогда
									
									НайденнаяСтрока.Сумма = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(НайденнаяСтрока.Сумма,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация),
										СтрокаОтклонений.ВалютаПоступления,
										Объект.Валюта,
										Объект.Дата,
										Объект.ОбъектРасчетов);
										
								КонецЕсли;
								
								Если СтрокаОтклонений.ПроцентРучнойСкидкиПоступления <> 0 Тогда
									НайденнаяСтрока.ПроцентРучнойСкидки = -(СтрокаОтклонений.СуммаПоступления*100/(НайденнаяСтрока.КоличествоУпаковок*НайденнаяСтрока.Цена)-100);
									СтруктураДействийИзмененияСумм.Вставить("ПересчитатьСуммуРучнойСкидки");
								ИначеЕсли СтрокаОтклонений.СуммаРучнойСкидкиПоступления <> 0 Тогда
									СтруктураДействийИзмененияСумм.Удалить("ПересчитатьСуммуРучнойСкидки");
									НайденнаяСтрока.СуммаРучнойСкидки = СтрокаОтклонений.СуммаРучнойСкидкиПоступления;
									НайденнаяСтрока.ПроцентРучнойСкидки = 0;
								Иначе
									СтруктураДействийИзмененияСумм.Удалить("ПересчитатьСуммуРучнойСкидки");
									НайденнаяСтрока.ПроцентРучнойСкидки = 0;
								КонецЕсли;
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействийИзмененияСумм, Неопределено);
								ЦеныСкорректированы = Истина;
								
							КонецЕсли;
						Иначе
							Если НайденнаяСтрока <> Неопределено Тогда
								
								НайденнаяСтрока.Цена = СтрокаОтклонений.ЦенаПоступления * СтрокаОтклонений.КоэффициентПересчетаУпаковок;
								Если Объект.Валюта <> СтрокаОтклонений.ВалютаПоступления Тогда
									
									НайденнаяСтрока.Цена = РаботаСКурсамиВалютУТ.ПересчитатьВВалюту(НайденнаяСтрока.Цена,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация),
										СтрокаОтклонений.ВалютаПоступления,
										Объект.Валюта,
										Объект.Дата,
										Объект.ОбъектРасчетов);
										
								КонецЕсли;
								Если СтрокаОтклонений.ПроцентРучнойСкидкиПоступления <> 0 Тогда
									НайденнаяСтрока.ПроцентРучнойСкидки = СтрокаОтклонений.ПроцентРучнойСкидкиПоступления;
									СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуРучнойСкидки");
									СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
								ИначеЕсли СтрокаОтклонений.СуммаРучнойСкидкиПоступления <> 0 Тогда
									СтруктураДействийИзмененияЦен.Удалить("ПересчитатьСуммуРучнойСкидки");
									СтруктураДействийИзмененияЦен.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать,ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
									НайденнаяСтрока.СуммаРучнойСкидки = СтрокаОтклонений.СуммаРучнойСкидкиПоступления;
									НайденнаяСтрока.ПроцентРучнойСкидки = 0;
								Иначе
									СтруктураДействийИзмененияЦен.Удалить("ПересчитатьСуммуРучнойСкидки");
									СтруктураДействийИзмененияЦен.Удалить("ПересчитатьСуммуСУчетомРучнойСкидки");
									НайденнаяСтрока.ПроцентРучнойСкидки = 0;
								КонецЕсли;
								ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НайденнаяСтрока, СтруктураДействийИзмененияЦен, Неопределено);
								ЦеныСкорректированы = Истина;
								
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЦеныСкорректированы Тогда
					ВзаиморасчетыСервер.ПроверитьЗаполнитьЭтапыГрафикаОплаты(Объект);
				КонецЕсли;
				
				Если НЕ Объект.ПроверитьЗавершениеРасчетов() Тогда
					Продолжить;
				КонецЕсли;
				
				// Установка статуса документа
				Если ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления") 
					ИЛИ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты") Тогда
					
					Если Не Объект.УстановитьСтатус("Закрыт", Новый Структура("ОтменаНеотработанныхСтрок", ПричинаОтмены)) Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					Если Не Объект.УстановитьСтатус("Подтвержден", Новый Структура("ОтменаНеотработанныхСтрок", ПричинаОтмены)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				// Запись документа
				Попытка
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					КоличествоОбработанных = КоличествоОбработанных + 1;
				Исключение
					ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", ТекСтрока.Представление);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ТекСтрока.Значение);
				КонецПопытки
		КонецЦикла;
		
		Если ЗаказыПоставщикам.Количество() = КоличествоОбработанных Тогда
			ПризнакГотово = Истина;
			ЗафиксироватьТранзакцию();
			
		Иначе
			ПризнакГотово = Ложь;
			ОтменитьТранзакцию();
			
		КонецЕсли;
		
	Исключение
		
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ПризнакГотово = Ложь;
		
	КонецПопытки;
	
	Возврат ПризнакГотово
	
КонецФункции

&НаКлиенте
Процедура ЗаказыПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ПоказатьЗначение(Неопределено, Элементы.ЗаказыПоставщикам.ТекущиеДанные.Значение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
