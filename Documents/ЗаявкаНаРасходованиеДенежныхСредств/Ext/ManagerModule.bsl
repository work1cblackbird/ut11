#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, ДокументОснование, КтоЗаявил";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор, Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"БанковскийСчет", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор, Организация";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор, Организация";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"Касса", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Контрагент";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Договор, Валюта";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Контрагент";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"БанковскийСчетКонтрагента", Параметры);
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("Взаиморасчеты");
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ПланированиеКонтрольДенежныхСредств");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("ФинансовыеИнструменты");
	
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	ПолучитьДанныеДокумента(Запрос, ДокументСсылка);
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаТаблицаДенежныеСредстваКВыплате(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаЛимитыРасходаДенежныхСредств(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРасчетыПоФинансовымИнструментам(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаДвиженияДенежныхСредств(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
		
		ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// Возвращает структуру параметров для заполнения налогообложения НДС продажи.
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйКассовыйОрдер - документ, по которому необходимо сформировать параметры.
//
// Возвращаемое значение:
//  См. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи
//
Функция ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСПродажи();
	
	ПараметрыЗаполнения.Организация = Объект.Организация;
	ПараметрыЗаполнения.Дата = Объект.Дата;
	ПараметрыЗаполнения.Договор = Объект.Договор;
	ПараметрыЗаполнения.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
	ПараметрыЗаполнения.Подразделение = Объект.Подразделение;
	
	ПараметрыЗаполнения.РеализацияТоваров = Истина;
	ПараметрыЗаполнения.РеализацияРаботУслуг = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Возвращает структуру параметров для заполнения налогообложения НДС закупки.
//
// Параметры:
//  Объект - ДокументОбъект.РасходныйКассовыйОрдер - документ, по которому необходимо сформировать параметры.
//
// Возвращаемое значение:
//  См. УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки
//
Функция ПараметрыЗаполненияНалогообложенияНДСЗакупки(Объект) Экспорт
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияНалогообложенияНДСЗакупки();
	
	ПараметрыЗаполнения.Контрагент = Объект.Контрагент;
	ПараметрыЗаполнения.Договор = Объект.Договор; 
	ПараметрыЗаполнения.Период  = Объект.Дата;
	
	ПараметрыЗаполнения.ПриобретениеТоваров = Истина;
	ПараметрыЗаполнения.ПриобретениеРабот = Истина;
	ПараметрыЗаполнения.ПриобретениеНаСтатьи = Истина;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	НоваяКоманда = Документы.ОперацияПоПлатежнойКарте.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьОперациюПоПлатежнойКарте";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию";
		НоваяКоманда.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"ХозяйственнаяОперация",
			Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	НоваяКоманда = Документы.РасходныйКассовыйОрдер.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьРасходныйКассовыйОрдер";
		НоваяКоманда.ВидимостьВФормах =
			"ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию, ЗаявкиНаОплатуПоФинансовымИнструментам";
		НоваяКоманда.МножественныйВыбор = Истина;
		НоваяКоманда.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"ФормаОплатыНаличная",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	НоваяКоманда = Документы.СписаниеБезналичныхДенежныхСредств.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "СозданиеНаОснованииУТКлиент.СоздатьСписаниеБезналичныхДС";
		НоваяКоманда.ВидимостьВФормах =
			"ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию, ЗаявкиНаОплатуПоФинансовымИнструментам";
		НоваяКоманда.МножественныйВыбор = Истина;
		НоваяКоманда.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"ФормаОплатыБезналичная",
			Истина,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры)
	
КонецПроцедуры

// Добавляет команду создания документа "Заявка на расходование ДС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Порядок - Число - Порядок команды.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений:
//   * Менеджер - Строка
//   * Представление - Строка
//   * РежимЗаписи - Строка
//   * ФункциональныеОпции - Строка
//   * Порядок - Число
//  Неопределено.
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Порядок = 0) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаявкиНаРасходованиеДенежныхСредств";
		КомандаСоздатьНаОсновании.Порядок = Порядок;
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Добавляет команду создания документа "Заявка на расходование ДС".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании.
//
// Возвращаемое значение:
//  Неопределено
//
Функция ДобавитьКомандуСоздатьНаОснованииОтчетаПоКомиссии_Вознаграждение(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Обработчик =
			"СозданиеНаОснованииУТКлиент.ЗаявкаНаРасходованиеДсНаОснованииОтчетаПоКомиссии_Вознаграждение";
		КомандаСоздатьНаОсновании.Идентификатор = "ЗаявкаНаРасходованиеДсНаОснованииОтчетаПоКомиссии_Вознаграждение";
		КомандаСоздатьНаОсновании.Представление =
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств)
			+ " " + НСтр("ru = 'комитента (вознаграждение комиссионеру)'");
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьЗаявкиНаРасходованиеДенежныхСредств";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ЛимитыРасходаДенежныхСредств.ДобавитьКомандуОтчета(КомандыОтчетов);
	Отчеты.ОплатаЗаявокНаРасходованиеДенежныхСредств.ДобавитьКомандуОтчета(КомандыОтчетов);
	НоваяКоманда = Отчеты.КонтрольВыданныхПодотчетномуЛицуАвансовПоЗаявке.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если НоваяКоманда <>  Неопределено Тогда
		НоваяКоманда.ЕстьУсловияВидимости = Истина;
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"ХозяйственнаяОперация",
			Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику,
			ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры)
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Документы.СписаниеБезналичныхДенежныхСредств) Тогда
		// Банковские реквизиты
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.СписаниеБезналичныхДенежныхСредств";
		КомандаПечати.Идентификатор = "РеквизитыПлатежа";
		КомандаПечати.Представление = НСтр("ru = 'Реквизиты международного платежа'");
	КонецЕсли;
	
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	Объект - ДокументОбъект - Объект заявка
//	МассивВсехРеквизитов - Массив из Строка - Массив всех реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив из Строка - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	ХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("БанковскийСчетКонтрагента");
	МассивВсехРеквизитов.Добавить("БанковскийСчетПолучатель");
	МассивВсехРеквизитов.Добавить("ВалютаКонвертации");
	МассивВсехРеквизитов.Добавить("ДатаАвансовогоОтчета");
	МассивВсехРеквизитов.Добавить("КассаПолучатель");
	МассивВсехРеквизитов.Добавить("Контрагент");
	МассивВсехРеквизитов.Добавить("КурсКонвертации");
	МассивВсехРеквизитов.Добавить("КратностьКурсаКонвертации");
	МассивВсехРеквизитов.Добавить("ОрганизацияПолучатель");
	МассивВсехРеквизитов.Добавить("ПланированиеСуммы");
	МассивВсехРеквизитов.Добавить("ПодотчетноеЛицо");
	МассивВсехРеквизитов.Добавить("СтатьяАктивовПассивов");
	МассивВсехРеквизитов.Добавить("АналитикаАктивовПассивов");
	МассивВсехРеквизитов.Добавить("СтатьяДвиженияДенежныхСредств");
	МассивВсехРеквизитов.Добавить("СуммаКонвертации");
	МассивВсехРеквизитов.Добавить("ХозяйственнаяОперацияПоЗарплате");
	МассивВсехРеквизитов.Добавить("БанковскийСчетСписанияКомиссии");
	МассивВсехРеквизитов.Добавить("ДоговорЭквайринга");
	МассивВсехРеквизитов.Добавить("ТипНалога");
	МассивВсехРеквизитов.Добавить("ПлатежСКонвертацией");
	
	МассивВсехРеквизитов.Добавить("ГруппаФинансовогоУчета");
	МассивВсехРеквизитов.Добавить("НаправлениеДеятельности");
	МассивВсехРеквизитов.Добавить("Договор");
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.АналитикаРасходов");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.АналитикаАктивовПассивов");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорАренды");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДоговорЗаймаСотруднику");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Комментарий");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.НаправлениеДеятельности");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Партнер");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СтавкаНДС");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.СуммаНДС");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ТипПлатежаПоАренде");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ТипСуммыКредитаДепозита");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Подразделение");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Организация");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ДатаПогашения");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Контрагент");
	
	МассивВсехРеквизитов.Добавить("ЛицевыеСчетаСотрудников");
	МассивВсехРеквизитов.Добавить("ЛицевыеСчетаСотрудников.ФизическоеЛицо");
	МассивВсехРеквизитов.Добавить("ЛицевыеСчетаСотрудников.ЛицевойСчет");
	МассивВсехРеквизитов.Добавить("ЛицевыеСчетаСотрудников.СтатьяДвиженияДенежныхСредств");
	
	МассивРеквизитовОперации = Новый Массив;
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("Договор");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Партнер");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Контрагент");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтавкаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Организация");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДатаПогашения");
	
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("Договор");

		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОперацияПоПлатежнойКарте") Тогда
			МассивРеквизитовОперации.Добавить("ДоговорЭквайринга");
		КонецЕсли;
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Партнер");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Контрагент");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтавкаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Организация");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("ДатаАвансовогоОтчета");
		МассивРеквизитовОперации.Добавить("ПодотчетноеЛицо");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников");
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников.ФизическоеЛицо");
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников.ЛицевойСчет");
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников.СтатьяДвиженияДенежныхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Подразделение");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяРасходов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.АналитикаРасходов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.АналитикаАктивовПассивов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("Договор");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Партнер");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Контрагент");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Организация");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДатаПогашения");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ТипНалога");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетПолучатель");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("Договор");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтавкаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Организация");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДатаПогашения");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетПолучатель");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("ГруппаФинансовогоУчета");
		МассивРеквизитовОперации.Добавить("НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("Договор");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтавкаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаНДС");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Организация");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
		МассивРеквизитовОперации.Добавить("ОрганизацияПолучатель");
		МассивРеквизитовОперации.Добавить("БанковскийСчетПолучатель");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("ВалютаКонвертации");
		МассивРеквизитовОперации.Добавить("КурсКонвертации");
		МассивРеквизитовОперации.Добавить("КратностьКурсаКонвертации");
		МассивРеквизитовОперации.Добавить("СуммаКонвертации");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("БанковскийСчетПолучатель");
		МассивРеквизитовОперации.Добавить("КассаПолучатель");
		МассивРеквизитовОперации.Добавить("БанковскийСчетСписанияКомиссии");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("ХозяйственнаяОперацияПоЗарплате");
		
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников");
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников.ФизическоеЛицо");
		МассивРеквизитовОперации.Добавить("ЛицевыеСчетаСотрудников.ЛицевойСчет");
		
		Если Не Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		
		Если Константы.ИспользоватьНачислениеЗарплаты.Получить() Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Партнер");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Контрагент");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ТипСуммыКредитаДепозита");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Партнер");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Контрагент");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов Тогда
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ПланированиеСуммы");
		МассивРеквизитовОперации.Добавить("ПлатежСКонвертацией");
		
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Партнер");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Контрагент");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		МассивРеквизитовОперации.Добавить("ПодотчетноеЛицо");
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("Контрагент");
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ДоговорЗаймаСотруднику");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
			МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Комментарий");
		Иначе
			МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		КонецЕсли;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
		МассивРеквизитовОперации.Добавить("Контрагент");
		МассивРеквизитовОперации.Добавить("ДоговорЭквайринга");
		МассивРеквизитовОперации.Добавить("ПодразделениеРасходов");
		МассивРеквизитовОперации.Добавить("НаправлениеДеятельности");
		МассивРеквизитовОперации.Добавить("ОтражатьКомиссию");
		МассивРеквизитовОперации.Добавить("БанковскийСчетКонтрагента");
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредств");
		
	
	КонецЕсли;
	
КонецПроцедуры

// Дополняет переданную структуру значениями реквизитов доступных формы оплаты в зависимости от хозяйственной операции.
//
// Параметры:
//    ДанныеЗаполнения - Структура - Структура, содержащая хоз. операцию.
//
Процедура ЗаполнитьФормуОплатыПоХозОперации(ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ХозяйственнаяОперация = Неопределено; ХозяйственнаяОперацияПоЗарплате = Неопределено;
	ДанныеЗаполнения.Свойство("ХозяйственнаяОперация", ХозяйственнаяОперация);
	ДанныеЗаполнения.Свойство("ХозяйственнаяОперацияПоЗарплате", ХозяйственнаяОперацияПоЗарплате);
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		ФормаОплаты = ОграничениеФормыОплаты(ХозяйственнаяОперацияПоЗарплате);
	Иначе
		ФормаОплаты = ОграничениеФормыОплаты(ХозяйственнаяОперация);
	КонецЕсли;
	
	Если ФормаОплаты <> Неопределено Тогда
		ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",         (ФормаОплаты = Перечисления.ФормыОплаты.Наличная));
		ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная",      (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная));
		ДанныеЗаполнения.Вставить("ФормаОплатыПлатежнаяКарта",   (ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта));
		ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",           ФормаОплаты);
	Иначе // Значения по умолчанию
		РеквизитыЗаявки = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Реквизиты;
		Если Не ДанныеЗаполнения.Свойство("ФормаОплатыНаличная") Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",         РеквизитыЗаявки.ФормаОплатыНаличная.ЗначениеЗаполнения);
		КонецЕсли;
		Если Не ДанныеЗаполнения.Свойство("ФормаОплатыБезналичная") Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная",      РеквизитыЗаявки.ФормаОплатыБезналичная.ЗначениеЗаполнения);
		КонецЕсли;
		Если Не ДанныеЗаполнения.Свойство("ФормаОплатыПлатежнаяКарта") Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыПлатежнаяКарта",   РеквизитыЗаявки.ФормаОплатыПлатежнаяКарта.ЗначениеЗаполнения);
		КонецЕсли;
		Если Не ДанныеЗаполнения.Свойство("ФормаОплатыЗаявки") Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",           РеквизитыЗаявки.ФормаОплатыЗаявки.ЗначениеЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет доступную для хозяйственной операции форму оплаты
//
// Параметры:
//    Операция - ПеречислениеСсылка.ХозяйственныеОперации - Хоз. операция, для которой производится проверка.
//
// Возвращаемое значение:
//    ПеречислениеСсылка.ФормыОплаты, Неопределено - Ограничение по форме оплаты, либо Неопределено, если нет ограничений.
//
Функция ОграничениеФормыОплаты(Операция) Экспорт
	
	Ограничения = Новый Соответствие;
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет,                    Перечисления.ФормыОплаты.Безналичная);
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты,                 Перечисления.ФормыОплаты.Безналичная);
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту,    Перечисления.ФормыОплаты.Безналичная);
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета,          Перечисления.ФормыОплаты.Безналичная);
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту,          Перечисления.ФормыОплаты.Безналичная);
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу,              Перечисления.ФормыОплаты.Наличная);
	Ограничения.Вставить(Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыРаздатчиком,             Перечисления.ФормыОплаты.Наличная);
	
	Возврат Ограничения.Получить(Операция);
	
КонецФункции

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив из Строка - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условия применения настройки
//		* Свойства - Структура - имена и значения свойств
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Операции = Перечисления.ХозяйственныеОперации;
	
	ОтборДопускаетсяБезналичнаяОплата = ДенежныеСредстваСервер.ОтборБезналичнаяОплатаЗаявки();
	
	ОтборПриПеречисленииСотрудникуЧерезБанк = Новый ОтборКомпоновкиДанных();
	
	ГруппаИ = Финансы.НовыйОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ПеречислениеСотрудникуЧерезБанк", Истина);
	
	ПодГруппаИли = Финансы.НовыйОтбор(ГруппаИ, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ПодГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ПодГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	
	ПодГруппаИ = Финансы.НовыйОтбор(ПодГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ПодГруппаИ, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ПодГруппаИ, "ХозяйственнаяОперацияПоЗарплате", Операции.ВыплатаЗарплатыНаЛицевыеСчета);
	
	ОтборВыплатаСамозанятому = ДенежныеСредстваСервер.ОтборВыплатаСамозанятому();
	ОтборСписокКонтрагентов = ДенежныеСредстваСервер.ОтборСписокКонтрагентов(ОтборВыплатаСамозанятому);
	
	ОтборЗапретИзмененияСтатуса = Новый ОтборКомпоновкиДанных();
	ОтборКОплате = Финансы.НовыйОтбор(ОтборЗапретИзмененияСтатуса, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОтборКОплате.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ОтборКОплате, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ОтборКОплате, "Дополнительно.ПравоУтверждения", Ложь);
	
	#Область Шапка
	// Статус
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Статус");
	Финансы.СкопироватьОтбор(ОтборЗапретИзмененияСтатуса, Элемент.Условие);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	// ТипНалога
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипНалога");
	Элемент.Поля.Добавить("ЗаполнитьПоПредыдущемуПлатежу");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет);
	Элемент.Свойства.Вставить("Видимость");
	
	// ХозяйственнаяОперацияПоЗарплате
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ХозяйственнаяОперацияПоЗарплате");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Элемент.Свойства.Вставить("Видимость");
	
	// ФормаОплаты
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ФормаОплаты");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ФормаОплатыОграничена", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// Банковский счет
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчет");
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
	Элемент.Свойства.Вставить("Видимость");
	
	// Касса
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Касса");
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Наличная);
	Элемент.Свойства.Вставить("Видимость");
	
	// Контрагент
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИлиИ = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИлиИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	Финансы.НовыйОтбор(ГруппаИлиИ, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИлиИ, "ОперацияССамозанятым", Ложь);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперацияПоЗарплате", Операции.ВыплатаЗарплатыПоЗарплатномуПроекту);
	
	ПодГруппаИ = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, ПодГруппаИ);
	
	ПодГруппаИли = Финансы.НовыйОтбор(ПодГруппаИ, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.СкопироватьОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, ПодГруппаИли);
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, ПодГруппаИли);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	Элемент.Поля.Добавить("ДоговорЭквайринга");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Контрагент");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Истина);
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	Финансы.СкопироватьОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, Элемент.Условие);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Получатель'"));
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	ГруппаИли = Финансы.НовыйОтбор(ГруппаНе, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	Финансы.СкопироватьОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, ГруппаИли);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Эквайер'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Банк-получатель'"));
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.СкопироватьОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, ГруппаИли);
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, ГруппаИли);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Контрагент");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Брокер'"));
	
	// Договор подключения к платежной системе
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДоговорЭквайринга");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	Элемент.Свойства.Вставить("Видимость");
	
	// БанковскийСчетКонтрагента
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	
	ГруппаИли1 = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперацияПоЗарплате", Операции.ВыплатаЗарплатыПоЗарплатномуПроекту);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИ2, "СписокФизЛиц", Ложь);
	
	Финансы.СкопироватьОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, ГруппаИли1);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли1);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеСотрудникуЧерезБанк", Ложь);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Лицевой счет'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеСотрудникуЧерезБанк", Истина);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Счет получателя'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Счет получателя'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Счет брокера'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(Элемент.Условие, "СписокФизЛиц", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеСотрудникуЧерезБанк", Ложь);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Истина);
	
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперацияПоЗарплате", Операции.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(Элемент.Условие, "ПеречислениеСотрудникуЧерезБанк", Истина);
	
	// Подотчетное лицо
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодотчетноеЛицо");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Сотрудник");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПодотчетноеЛицо");
	Финансы.НовыйОтбор(Элемент.Условие, "СписокФизЛиц", Истина);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	// Список физ. лиц
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СписокФизЛицВключено");
	Элемент.Поля.Добавить("СписокФизЛицОтключено");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Элемент.Свойства.Вставить("Видимость");
	
	// ОрганизацияПолучатель
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ОрганизацияПолучатель");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВнутренняяПередачаДенежныхСредств);
	Элемент.Свойства.Вставить("Видимость");
	
	// БанковскийСчетПолучатель
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетПолучатель");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВнутренняяПередачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетПолучатель");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Счет конвертации'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетПолучатель");
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Счет получателя'"));
	
	// КассаПолучатель
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КассаПолучатель");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВнутренняяПередачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Наличная);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КассаПолучатель");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Касса конвертации'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КассаПолучатель");
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.НовыйОтбор(ГруппаНе, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Касса получателя'"));
	
	// Статья ДДС
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтатьяДвиженияДенежныхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВнутренняяПередачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыНаПлатежнуюКарту);
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтатьяДвиженияДенежныхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// ПланированиеСуммы
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПланированиеСуммы");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИ, "СписокФизЛиц", Ложь);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// Тип перечисления подотчетнику
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПеречислениеСотрудникуЧерезБанк");
	Элемент.Свойства.Вставить("Видимость", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперацияПоЗарплате", Операции.ВыплатаЗарплатыНаЛицевыеСчета);
	
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	#КонецОбласти
	
	#Область Реквизиты
	// Кто решил
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КтоРешил");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Элемент.Свойства.Вставить("Видимость");
	
	// Только просмотр
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Номер");
	Элемент.Поля.Добавить("Дата");
	Элемент.Поля.Добавить("ПланированиеСуммы");
	Элемент.Поля.Добавить("СуммаДокумента");
	Элемент.Поля.Добавить("Валюта");
	Элемент.Поля.Добавить("ФормаОплаты");
	Элемент.Поля.Добавить("Организация");
	Элемент.Поля.Добавить("Подразделение");
	Элемент.Поля.Добавить("Заявитель");
	Элемент.Поля.Добавить("ХозяйственнаяОперация");
	Элемент.Поля.Добавить("ТипНалога");
	Элемент.Поля.Добавить("ЛицевыеСчетаСотрудников");
	Элемент.Поля.Добавить("ХозяйственнаяОперацияПоЗарплате");
	Элемент.Поля.Добавить("ЖелательнаяДатаПлатежа");
	Элемент.Поля.Добавить("Контрагент");
	Элемент.Поля.Добавить("ДоговорЭквайринга");
	Элемент.Поля.Добавить("ОрганизацияПолучатель");
	Элемент.Поля.Добавить("ПодотчетноеЛицо");
	Элемент.Поля.Добавить("БанковскийСчетПолучатель");
	Элемент.Поля.Добавить("КассаПолучатель");
	Элемент.Поля.Добавить("СтатьяДвиженияДенежныхСредств");
	Элемент.Поля.Добавить("РасшифровкаПлатежа");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиения");
	Элемент.Поля.Добавить("НазначениеПлатежа");
	Элемент.Поля.Добавить("ВалютаКонвертации");
	Элемент.Поля.Добавить("КурсКонвертации");
	Элемент.Поля.Добавить("СуммаКонвертации");
	Элемент.Поля.Добавить("КратностьКурсаКонвертации");
	Элемент.Поля.Добавить("СверхЛимита");
	Элемент.Поля.Добавить("БанковскийСчет");
	Элемент.Поля.Добавить("Касса");
	Элемент.Поля.Добавить("ПериодАвансовогоОтчета");
	Элемент.Поля.Добавить("СписокФизЛицВключено");
	Элемент.Поля.Добавить("СписокФизЛицОтключено");
	Элемент.Поля.Добавить("ТипКомиссииЗаПеревод");
	Элемент.Поля.Добавить("КодыИнструкцийБанку");
	Элемент.Поля.Добавить("ИнформацияДляРегулирующихОрганов");
	Элемент.Поля.Добавить("ИнформацияПолучателюПлатежа");
	Элемент.Поля.Добавить("СуммаКомиссии");
	Элемент.Поля.Добавить("Подразделение");
	Элемент.Поля.Добавить("НаправлениеДеятельности");
	Элемент.Поля.Добавить("СтатьяРасходов");
	Элемент.Поля.Добавить("АналитикаРасходов");
	Элемент.Поля.Добавить("ПеречислениеСотрудникуЧерезБанк");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ГруппаИли, "Закрыта", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.Модифицированность", Ложь);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетКонтрагента");
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ПодГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ПодГруппаИли1 = Финансы.НовыйОтбор(ПодГруппаИ1, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ПодГруппаИли1, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ПодГруппаИли1, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ПодГруппаИ1, "Проведен", Истина);
	Финансы.НовыйОтбор(ПодГруппаИ1, "Дополнительно.Модифицированность", Ложь);
	
	ГруппаКонтрагентНеЗаполнен = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаКонтрагентНеЗаполнен.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаКонтрагентНеЗаполнен, "Контрагент", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ПодгруппаДопУсловия = Финансы.НовыйОтбор(ГруппаКонтрагентНеЗаполнен, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодгруппаДопУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.СкопироватьОтбор(ОтборПриПеречисленииСотрудникуЧерезБанк, ПодгруппаДопУсловия);
	Финансы.СкопироватьОтбор(ОтборСписокКонтрагентов, ПодгруппаДопУсловия);
	
	ПодгруппаОстальныеОперации = Финансы.НовыйОтбор(ПодгруппаДопУсловия, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодгруппаОстальныеОперации.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	
	ОперацииСФизЛицами = Новый Массив;
	ОперацииСФизЛицами.Добавить(Операции.ВыдачаДенежныхСредствПодотчетнику);
	ОперацииСФизЛицами.Добавить(Операции.ВыдачаЗаймаСотруднику);
	
	Финансы.НовыйОтбор(ПодгруппаОстальныеОперации, "ХозяйственнаяОперация", ОперацииСФизЛицами, , ВидСравненияКомпоновкиДанных.ВСписке);
	
	ГруппаФизЛицоНеЗаполнено = Финансы.НовыйОтбор(ГруппаИли, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаФизЛицоНеЗаполнено.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаФизЛицоНеЗаполнено, "ПодотчетноеЛицо", , , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	Финансы.НовыйОтбор(ГруппаФизЛицоНеЗаполнено, "ПеречислениеСотрудникуЧерезБанк", Ложь);
	
	ПодгруппаФизЛицоНеЗаполнено = Финансы.НовыйОтбор(ГруппаФизЛицоНеЗаполнено, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодгруппаФизЛицоНеЗаполнено.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ПодгруппаФизЛицоНеЗаполнено, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ПодгруппаФизЛицоНеЗаполнено, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Статус");
	Элемент.Поля.Добавить("Приоритет");
	Элемент.Поля.Добавить("СтраницаРаспределениеПоСчетам");
	Финансы.НовыйОтбор(Элемент.Условие, "Закрыта", Истина);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	// РаспределениеПоСчетам
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РаспределениеПоСчетам");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли1, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ГруппаИ1, "Проведен", Истина);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ПравоУтверждения", Ложь);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ПравоСогласования", Ложь);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ПравоУтверждения", Ложь);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	// Лицевые счета
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЛицевыеСчетаСотрудников");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперацияПоЗарплате", Операции.ВыплатаЗарплатыНаЛицевыеСчета);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Ложь);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИ2, "СписокФизЛиц", Истина);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// Закрыть заявку
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗакрытьЗаявку");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ОстатокОплаты", 0,, ВидСравненияКомпоновкиДанных.НеРавно);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Закрыта", Ложь);
	Финансы.НовыйОтбор(Элемент.Условие, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена,, ВидСравненияКомпоновкиДанных.НеРавно);
	
	ГруппаИсключения = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИсключения.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.СкопироватьОтбор(ОтборЗапретИзмененияСтатуса, ГруппаИсключения);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Закрыта");
	Финансы.НовыйОтбор(Элемент.Условие, "Закрыта", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// НадписьФактическаяОплата
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("НадписьФактическаяОплата");
	Финансы.НовыйОтбор(Элемент.Условие, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Элемент.Свойства.Вставить("Видимость");
	
	// Конвертация
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ВалютаКонвертации");
	Элемент.Поля.Добавить("КурсКонвертации");
	Элемент.Поля.Добавить("СуммаКонвертации");
	Элемент.Поля.Добавить("КратностьКурсаКонвертации");
	Элемент.Поля.Добавить("ВалютаКурсаКонвертации");
	Элемент.Поля.Добавить("ВалютаКратностиКурсаКонвертации");
	Элемент.Поля.Добавить("БанковскийСчетСписанияКомиссии");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Видимость");
	
	// ПериодАвансовогоОтчета, ДатаАвансовогоОтчета
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ПериодАвансовогоОтчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДатаАвансовогоОтчета");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ПериодАвансовогоОтчетаДата", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// Валютный платеж
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ТипКомиссииЗаПеревод");
	Элемент.Поля.Добавить("КодыИнструкцийБанку");
	Элемент.Поля.Добавить("ИнформацияПолучателюПлатежа");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйПлатеж", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ИнформацияДляРегулирующихОрганов");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютныйПлатеж", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьВалютныеПлатежи", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ТребуетсяИнформацияДляРегулирующихОрганов", Истина);
	Финансы.СкопироватьОтбор(ОтборДопускаетсяБезналичнаяОплата, Элемент.Условие);
	Элемент.Свойства.Вставить("Видимость");
	
	// Сверх лимита
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СверхЛимита");
	Финансы.НовыйОтбор(Элемент.Условие, "СверхЛимита", Истина);
	Элемент.Свойства.Вставить("ЦветТекстаЗаголовка", ЦветаСтиля.ЦветОсобогоТекста);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СверхЛимита");
	Финансы.НовыйОтбор(Элемент.Условие, "СверхЛимита", Ложь);
	Элемент.Свойства.Вставить("ЦветТекстаЗаголовка", ЦветаСтиля.ЦветТекстаФормы);
	
	// ДокументОснование
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДокументОснование");
	Финансы.НовыйОтбор(Элемент.Условие, "ДокументОснование",,, ВидСравненияКомпоновкиДанных.Заполнено);
	Элемент.Свойства.Вставить("Видимость");
	
	// Комиссия
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаКомиссия");
	Финансы.НовыйОтбор(Элемент.Условие, "ОтражатьКомиссию", Истина);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область РасшифровкаПлатежа
	// СтраницаРасшифровка
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаРасшифровка");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИ2, "СписокФизЛиц", Ложь);
	
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаРасшифровка");
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Расшифровка платежа'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаРасшифровка");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Ведомости'"));
	
	// СуммаНДС, СтавкаНДС
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СуммаНДС");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСуммаНДС");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СтавкаНДС");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСтавкаНДС");
	Элемент.Поля.Добавить("ВалютаНДС");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	ГруппаНе = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаНе);
	Элемент.Свойства.Вставить("Видимость");
	
	// Аналитика прочей выдачи
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Подразделение");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияПодразделение");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.НаправлениеДеятельности");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияНаправлениеДеятельности");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Элемент.Свойства.Вставить("Видимость");
	
	// СтатьяДвиженияДенежныхСредств
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВыплатаЗарплаты);
	
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// СуммаВзаиморасчетов, ВалютаВзаиморасчетов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСуммаВзаиморасчетов");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ВалютаВзаиморасчетов");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВалютаВзаиморасчетов");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНесколькоВалют", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// СуммаВзаиморасчетов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияСуммаВзаиморасчетов");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНесколькоВалют", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ВалютаВзаиморасчетов", "Валюта", , , Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	
	// ДекорацияВалютыИКурсПлатежа, КурсЧислительВзаиморасчетов, КурсЗнаменательВзаиморасчетов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияВалютыИКурсПлатежа");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.КурсЧислительВзаиморасчетов");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияКурсЧислительВзаиморасчетов");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.КурсЧислительВзаиморасчетовТекст");
	Элемент.Поля.Добавить("РасшифровкаПлатежаКурсЗнаменательВзаиморасчетовНадпись");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ВариантКурсаДоговора");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВариантКурсаДоговора");
	
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНесколькоВалют", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеВБюджет);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПрочаяВыдачаДенежныхСредств);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	
	Финансы.НовыйОтбор(Элемент.Условие, "Валюта", "Дополнительно.ВалютаВзаиморасчетов",, ВидСравненияКомпоновкиДанных.НеРавно, Истина);
	ПодгруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ПодгруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ПодгруппаИли, "Дополнительно.НесколькоВалютВзаиморасчетов", Истина);
	Финансы.НовыйОтбор(ПодгруппаИли,
						"Дополнительно.ВалютаВзаиморасчетов",
						Справочники.Валюты.ПустаяСсылка(), ,
						ВидСравненияКомпоновкиДанных.НеРавно);
	Элемент.Свойства.Вставить("Видимость");
	
	// ДекорацияВалютыИКурсПлатежа
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДекорацияВалютыИКурсПлатежа");
	ГруппаИ = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ВалютаВзаиморасчетов",,, ВидСравненияКомпоновкиДанных.Заполнено);
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ВариантКурсаДоговора",,, ВидСравненияКомпоновкиДанных.Заполнено);
	Элемент.Свойства.Вставить("Доступность");
	
	// РасшифровкаБезРазбиенияВариантКурсаДоговора
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияВариантКурсаДоговора");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Дополнительно.ВариантКурсаДоговора", Перечисления.ВариантыКурсаДоговора.УстановленныйВДоговоре,, ВидСравненияКомпоновкиДанных.Равно);
	ГруппаИ = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ВариантКурсаДоговора", Перечисления.ВариантыКурсаДоговора.ФиксированныйНаДатуОтгрузки,, ВидСравненияКомпоновкиДанных.Равно);
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.ТипОбъектаРасчетов", Перечисления.ТипыОбъектовРасчетов.Накладная,, ВидСравненияКомпоновкиДанных.Равно);
	Элемент.Свойства.Вставить("Гиперссылка");
	
	// ОбъектРасчетов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ОбъектРасчетов");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияОбъектРасчетов");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// Партнер
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Партнер");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияПартнер");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Партнер");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияПартнер");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	// ДоговорКредитаДепозита
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияДоговорКредитаДепозита");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеНаДепозиты);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Элемент.Свойства.Вставить("Видимость");
	
	// ТипСуммыКредитаДепозита
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ТипСуммыКредитаДепозита");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияТипСуммыКредитаДепозита");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ОплатаПоКредитам);
	Элемент.Свойства.Вставить("Видимость");
	
	// ДоговорЗаймаСотруднику
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ДоговорЗаймаСотруднику");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияДоговорЗаймаСотруднику");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаЗаймаСотруднику);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	// ДоговорАренды
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ДоговорАренды");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияДоговорАренды");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ТипПлатежаПоАренде");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияТипПлатежаПоАренде");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ОплатаАрендодателю);
	Элемент.Свойства.Вставить("Видимость");
	
	// Организация
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежа.Организация");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияОрганизация");
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьФилиалы", Истина);
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// ГиперссылкаРеквизитыОбъектаРасчетов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГиперссылкаРеквизитыОбъектаРасчетов");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	// Нераспределенный платеж
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаФинансовогоУчета");
	Элемент.Поля.Добавить("НаправлениеДеятельности");
	ГруппаИ = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию,, ВидСравненияКомпоновкиДанных.НеРавно);
	Финансы.НовыйОтбор(ГруппаИ, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту,, ВидСравненияКомпоновкиДанных.НеРавно);
	Финансы.НовыйОтбор(ГруппаИ, "Дополнительно.СуммаНераспределено", 0,, ВидСравненияКомпоновкиДанных.НеРавно);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ГруппаФинансовогоУчетаВозврата");
	Элемент.Поля.Добавить("НаправлениеДеятельностиВозврата");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Элемент.Свойства.Вставить("Видимость");
	
	// Договор
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Договор");
	
	Финансы.НовыйОтбор(Элемент.Условие, "СписокКонтрагентов", Ложь);
	
	ГруппаИ1 = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаИли = Финансы.НовыйОтбор(ГруппаИ1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьДоговорыСПоставщиками", Истина);
	
	ГруппаИ3 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ3, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИ3, "Дополнительно.ИспользоватьДоговорыМеждуОрганизациями", Истина);
	
	ГруппаИ4 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ4, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИ4, "Дополнительно.ИспользоватьДоговорыСПоставщиками", Истина);
	
	ГруппаИ5 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ5.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИ5);
	Финансы.НовыйОтбор(ГруппаИ5, "Дополнительно.ИспользоватьДоговорыСПоставщиками", Истина);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// Договор возврата
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ДоговорВозврата");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьДоговорыМеждуОрганизациями", Истина);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьДоговорыСКлиентами", Истина);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// Договор объекта расчетов
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияОбъектРасчетовДоговор");
	
	ОсновныеУсловия = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ОсновныеУсловия.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ОсновныеУсловия, "СписокКонтрагентов", Истина);
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьДоговорыСПоставщиками", Истина);
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли1);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьДоговорыМеждуОрганизациями", Истина);
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ2,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	ГруппаИ3 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ3, "Дополнительно.ИспользоватьДоговорыСКлиентами", Истина);
	ГруппаИли3 = Финансы.НовыйОтбор(ГруппаИ3,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли3, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежаДоговор");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаИ1 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ1, "Дополнительно.ИспользоватьДоговорыСПоставщиками", Истина);
	ГруппаИли1 = Финансы.НовыйОтбор(ГруппаИ1,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли1, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли1);
	
	ГруппаИ2 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ2, "Дополнительно.ИспользоватьДоговорыМеждуОрганизациями", Истина);
	ГруппаИли2 = Финансы.НовыйОтбор(ГруппаИ2,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли2, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	ГруппаИ3 = Финансы.НовыйОтбор(ГруппаИли,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	Финансы.НовыйОтбор(ГруппаИ3, "Дополнительно.ИспользоватьДоговорыСКлиентами", Истина);
	ГруппаИли3 = Финансы.НовыйОтбор(ГруппаИ3,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли3, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	
	Элемент.Свойства.Вставить("Видимость");
	
	// Дата погашения
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияДатаПогашения");
	Элемент.Поля.Добавить("РасшифровкаПлатежаДатаПогашения");
	
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	
	Элемент.Свойства.Вставить("Видимость");
	
	#КонецОбласти
	
	#Область Команды
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежаПодборПоОстаткам");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаПоставщику);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратОплатыКлиенту);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ОплатаДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ВозвратДенежныхСредствВДругуюОрганизацию);
	Финансы.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Операции.ПеречислениеТаможне);
	Финансы.СкопироватьОтбор(ОтборВыплатаСамозанятому, ГруппаИли);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммКонтрагенту");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаЗаймов);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("РасшифровкаПлатежаПодборПоОстаткам");
	Элемент.Поля.Добавить("ЗаполнитьОстаткамиНевыданныхСуммКонтрагенту");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(ГруппаИли, "Закрыта", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗаполнитьНазначениеПлатежа");
	Элемент.Поля.Добавить("ЛицевыеСчетаСотрудниковЗаполнитьСтатьюДвиженияДенежныхСредств");
	Элемент.Поля.Добавить("ПеречислениеСотрудникуЧерезБанк");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате);
	Финансы.НовыйОтбор(Элемент.Условие, "Проведен", Истина);
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.Модифицированность", Ложь);
	Элемент.Свойства.Вставить("Доступность", Ложь);
	#КонецОбласти
	
	#Область ЛицевыеСчетаСотрудников

	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЛицевыеСчетаСотрудниковЛицевойСчет");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Финансы.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Наличная);
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЛицевыеСчетаСотрудниковСтатьяДвиженияДенежныхСредств");
	ГруппаИли = Финансы.НовыйОтбор(Элемент.Условие, , , Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	Финансы.НовыйОтбор(ГруппаИли, "Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена);
	Элемент.Свойства.Вставить("АвтоОтметкаНезаполненного", Ложь);
	Элемент.Свойства.Вставить("ОтметкаНезаполненного", Ложь);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЛицевыеСчетаСотрудниковСтатьяДвиженияДенежныхСредств");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Операции.ВыдачаДенежныхСредствПодотчетнику);
	Элемент.Свойства.Вставить("Видимость");
	#КонецОбласти

КонецПроцедуры

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры


// Возвращает параметры выбора статей в документе.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	ДополнительнаяДоступность - Булево - Дополнительный признак доступности выбора статей и аналитик.
// 
// Возвращаемое значение:
// 	Массив - Массив параметров настройки счетов учета (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
//
Функция ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация, ДополнительнаяДоступность = Истина) Экспорт
	
	МассивПараметровВыбора = Новый Массив;
	
	#Область СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект.РасшифровкаПлатежа";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи = "ТипСтатьи";
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка();
	КонецЕсли;
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("РасшифровкаБезРазбиенияСтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("РасшифровкаПлатежаСтатьяРасходов");	
	ПараметрыВыбора.ДоступностьПоОперации = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
	
	#Область АналитикаАктивовПассивов
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("РасшифровкаБезРазбиенияАналитикаАктивовПассивов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("РасшифровкаПлатежаАналитикаАктивовПассивов");
	#КонецОбласти
	
	#Область АналитикаРасходов
	ПараметрыВыбора.ВыборСтатьиРасходов = ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("РасшифровкаБезРазбиенияАналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("РасшифровкаПлатежаАналитикаРасходов");
	#КонецОбласти
	
	МассивПараметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи = "ТипСтатьи";
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.ЗначениеПоУмолчанию = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	
	ПараметрыВыбора.ДоступностьПоОперации =
		(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту) И ДополнительнаяДоступность;
	
	МассивПараметровВыбора.Добавить(ПараметрыВыбора);
	
	Возврат МассивПараметровВыбора;
	
КонецФункции

// Возвращает параметры механизма взаиморасчетов.
//
// Параметры:
// 	ДанныеЗаполнения - ДокументОбъект, СправочникОбъект, ДокументСсылка, СправочникСсылка, Структура, ДанныеФормыСтруктура - Объект или коллекция для
//              расчета параметров взаиморасчетов.
//
// Возвращаемое значение:
// 	См. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Функция ПараметрыВзаиморасчеты(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		СтруктураДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ДанныеЗаполнения, 
			"ХозяйственнаяОперация, СписокКонтрагентов, ОперацияССамозанятым");
		ХозяйственнаяОперация = СтруктураДанныеЗаполнения.ХозяйственнаяОперация;
		СписокКонтрагентов = СтруктураДанныеЗаполнения.СписокКонтрагентов;
		ОперацияССамозанятым = СтруктураДанныеЗаполнения.ОперацияССамозанятым;
	ИначеЕсли ДанныеЗаполнения = Неопределено Тогда
		ХозяйственнаяОперация = Неопределено;
		СписокКонтрагентов = Ложь;
		ОперацияССамозанятым = Ложь;
	Иначе
		ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		СписокКонтрагентов = ДанныеЗаполнения.СписокКонтрагентов;
		ОперацияССамозанятым = ДанныеЗаполнения.ОперацияССамозанятым;
	КонецЕсли;
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		СтруктураПараметров.ТипРасчетов                      = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		СтруктураПараметров.ТипРасчетов                      = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	КонецЕсли;
	
	СтруктураПараметров.ИзменяетПланОплаты = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
	
	СтруктураПараметров.ИзменяетПланОтгрузкиПоставки = Ложь;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		СтруктураПараметров.Контрагент                             = "Объект.ОрганизацияПолучатель";
	ИначеЕсли (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		И ОперацияССамозанятым)
		И СписокКонтрагентов Тогда
		СтруктураПараметров.Контрагент                             = "";
	Иначе
		СтруктураПараметров.Контрагент                             = "Объект.Контрагент";
	КонецЕсли;
	
	СтруктураПараметров.КурсЧислитель                    = "";
	СтруктураПараметров.КурсЗнаменатель                  = "";
	СтруктураПараметров.ПорядокРасчетов                  = "";
	
	СтруктураПараметров.ФормаОплаты                      = "Объект.ФормаОплатыЗаявки";
	СтруктураПараметров.ОплатаВВалюте                    = "";
	СтруктураПараметров.Партнер                          = "Объект.РасшифровкаПлатежа.Партнер";
	
	СтруктураПараметров.ПутьКДаннымТЧРасшифровкаПлатежа  = "Объект.РасшифровкаПлатежа";
	СтруктураПараметров.Соглашение                       = "";
	СтруктураПараметров.БанковскийСчетОрганизации        = "Объект.БанковскийСчет"; 
	СтруктураПараметров.НалогообложениеНДС               = "Объект.НалогообложениеНДС";
	
	СтруктураПараметров.ЭлементыФормы.РасшифровкаПлатежа       = "РасшифровкаПлатежа";
	СтруктураПараметров.ЭлементыФормы.ПодборВРасшифровкуПлатежа  = "РасшифровкаПлатежаПодборПоОстаткам";
	СтруктураПараметров.ПлатежиПо275ФЗ                           = "Объект.ПлатежиПо275ФЗ";
	
	СтруктураПараметров.ОперацияССамозанятым = "Объект.ОперацияССамозанятым";
	
	Возврат СтруктураПараметров;
КонецФункции

// Производит закрытие заявок
// 
// Параметры:
//    Заявки - Массив Из ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств, ДокументСсылка.ЗаявкаНаКомандировку - Закрываемые заявки
//    Интерактивно - Булево - Признак закрытия заявки при проведении документа
//
// Возвращаемое значение:
//    Число - Количество закрытых заявок
//
Функция ЗакрытьЗаявки(Знач Заявки, Интерактивно = Ложь) Экспорт
	
	ЗамерПроизводительности = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.ЗаявкаНаРасходованиеДенежныхСредств.МодульМенеджера.ЗакрытьЗаявки");
	
	КоличествоОбработанных = 0;
	
	Если ТипЗнч(Заявки) <> Тип("Массив") Тогда
		Заявка = Заявки;
		Заявки = Новый Массив;
		Заявки.Добавить(Заявка);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Заявка", Заявки);
	
	ОбъектыКПересчетуГрафикаРасчетыСПоставщиками = Новый Массив;
	ОбъектыКПересчетуГрафикаРасчетыСКлиентами    = Новый Массив;
	ТекстЗапросаПересчетаГрафикаПлатежей =
	"ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект КАК ОбъектОплаты
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка В(&ОбъектыКПересчетуГрафикаРасчетыСПоставщиками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов,
	|	ОбъектыРасчетов.Объект КАК ОбъектОплаты
	|ИЗ
	|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|ГДЕ
	|	ОбъектыРасчетов.Ссылка В(&ОбъектыКПересчетуГрафикаРасчетыСКлиентами)";
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстыЗапроса.Добавить(ЗапросЗакрытияДенежныеСредстваКВыплате(),              "ДенежныеСредстваКВыплате");
	ТекстыЗапроса.Добавить(ЗапросЗакрытияРасчетыСПоставщиками(),                  "РасчетыСПоставщиками");
	ТекстыЗапроса.Добавить(ЗапросЗакрытияРасчетыСКлиентами(),                     "РасчетыСКлиентами");
	ТекстыЗапроса.Добавить(ЗапросЗакрытияРасчетыПоФинансовымИнструментам(),       "РасчетыПоФинансовымИнструментам");
	ТекстыЗапроса.Добавить(ЗапросЗакрытияДвиженияДенежныхСредств(),               "ДвиженияДенежныхСредств");
	ТекстыЗапроса.Добавить(ЗапросЗакрытияДвиженияДенежныеСредстваДоходыРасходы(), "ДвиженияДенежныеСредстваДоходыРасходы");
	ТекстыЗапроса.Добавить(ЗапросЗакрытияДвиженияДенежныеСредстваКонтрагент(),    "ДвиженияДенежныеСредстваКонтрагент");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредств") Тогда
		ТекстыЗапроса.Добавить(ЗапросЗакрытияЛимитыРасходаДенежныхСредств(),      "ЛимитыРасходаДенежныхСредств");
		Запрос.УстановитьПараметр("ВалютаУпр", Константы.ВалютаУправленческогоУчета.Получить());
		Запрос.УстановитьПараметр("ИспользоватьЛимитыРасходаПоОрганизациям",
			ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям"));
		Запрос.УстановитьПараметр("ИспользоватьЛимитыРасходаПоПодразделениям",
			ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям"));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		
		Если Не Интерактивно Тогда
			
			ТаблицаБлокировки = Новый ТаблицаЗначений;
			ТаблицаБлокировки.Колонки.Добавить("Регистратор");
			Для каждого Заявка Из Заявки Цикл
				ТаблицаБлокировки.Добавить();
			КонецЦикла;
			ТаблицаБлокировки.ЗагрузитьКолонку(Заявки, "Регистратор");
			
			Блокировка = Новый БлокировкаДанных;
			
			Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ТекстЗапроса.Представление + ".НаборЗаписей");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			КонецЦикла;
			
			Блокировка.Заблокировать();
		КонецЕсли;
		
		Результаты = ПроведениеДокументов.ВыгрузитьРезультатыЗапросаПроведения(Запрос, ТекстыЗапроса);
		
		СтруктураПоискаЗаписей = Новый Структура("ЗаявкаНаРасходованиеДенежныхСредств");
		
		Для каждого Заявка Из Заявки Цикл
			
			Если Не Интерактивно Тогда
				
				ЗаявкаОбъект = Заявка.ПолучитьОбъект();
				
				Попытка
					ЗаявкаОбъект.Заблокировать();
				Исключение
					ТекстСообщения = СтрШаблон(
						НСтр("ru = '%1 находится в процессе редактирования пользователем или системой и не может быть изменена.'"),
						ЗаявкаОбъект);
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
					Продолжить;
				КонецПопытки;
				
				ЗаявкаОбъект.Закрыта = Истина;
				ЗаявкаОбъект.Записать();
			КонецЕсли;
			
			Для каждого ЗаписиНабора Из Результаты Цикл
			
				СтруктураПоискаЗаписей.ЗаявкаНаРасходованиеДенежныхСредств = Заявка;
				СтрокиНабора = ЗаписиНабора.Значение.НайтиСтроки(СтруктураПоискаЗаписей);
				Если СтрокиНабора.Количество() Тогда
					
					НаборЗаписей = РегистрыНакопления[ЗаписиНабора.Ключ].СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(Заявка);
					ДанныеДляЗаписиВНабор = ЗаписиНабора.Значение.Скопировать(СтрокиНабора);
					НаборЗаписей.Загрузить(ДанныеДляЗаписиВНабор);
					НаборЗаписей.Записать(Ложь);
					
					Если ЗаписиНабора.Ключ = "РасчетыСПоставщиками" Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыКПересчетуГрафикаРасчетыСПоставщиками,
							ДанныеДляЗаписиВНабор.ВыгрузитьКолонку("ОбъектРасчетов"), Истина);
					ИначеЕсли ЗаписиНабора.Ключ = "РасчетыСКлиентами" Тогда
						ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыКПересчетуГрафикаРасчетыСКлиентами,
							ДанныеДляЗаписиВНабор.ВыгрузитьКолонку("ОбъектРасчетов"), Истина);
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
			КоличествоОбработанных = КоличествоОбработанных + 1;
		КонецЦикла;
		
		// Пересчет графика. Клинеты и поставщики.
		//
		Запрос.Текст = ТекстЗапросаПересчетаГрафикаПлатежей;
		Запрос.УстановитьПараметр("ОбъектыКПересчетуГрафикаРасчетыСПоставщиками", ОбъектыКПересчетуГрафикаРасчетыСПоставщиками);
		Запрос.УстановитьПараметр("ОбъектыКПересчетуГрафикаРасчетыСКлиентами", ОбъектыКПересчетуГрафикаРасчетыСКлиентами);
		
		ДанныеКПересчетуГрафикаПлатежей      = Запрос.ВыполнитьПакет();
		РезультатОбъектыРасчетыСПоставщиками = ДанныеКПересчетуГрафикаПлатежей[0];
		РезультатОбъектыРасчетыСКлиентами    = ДанныеКПересчетуГрафикаПлатежей[1];
		
		Если НЕ РезультатОбъектыРасчетыСПоставщиками.Пустой() Тогда
			РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСПоставщиками(РезультатОбъектыРасчетыСПоставщиками.Выгрузить());
		КонецЕсли;
		
		Если НЕ РезультатОбъектыРасчетыСКлиентами.Пустой() Тогда
			РегистрыСведений.ГрафикПлатежей.РассчитатьГрафикПлатежейПоРасчетамСКлиентами(РезультатОбъектыРасчетыСКлиентами.Выгрузить());
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = НСтр("ru = 'Не удалось закрыть заявки по причине: %1'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось закрыть заявки.'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ТекстОшибки,
			УровеньЖурналаРегистрации.Ошибка,,,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ЗамерПроизводительности, КоличествоОбработанных);
	
	Возврат КоличествоОбработанных;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
// 
// Параметры:
//  Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст = "РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(КтоЗаявил)
	|	И ВЫБОР
	|		КОГДА ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) ТОГДА
	|			ЗначениеРазрешено(ХозяйственнаяОперацияПоЗарплате)
	|		ИНАЧЕ
	|			ЗначениеРазрешено(ХозяйственнаяОперация)
	|		КОНЕЦ
	|	И ВЫБОР
	|		КОГДА ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ОплатаПоставщику)
	|			ИЛИ ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту) ТОГДА
	|			ЗначениеРазрешено(РасшифровкаПлатежа.Партнер) ИЛИ РасшифровкаПлатежа.Партнер ЕСТЬ NULL
	|		КОГДА ХозяйственнаяОперация = Значение(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) ТОГДА
	|			ЗначениеРазрешено(ПодотчетноеЛицо)
	|	ИНАЧЕ ИСТИНА КОНЕЦ";

КонецПроцедуры
// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос();
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ЗаявкаНаРасходованиеДенежныхСредств";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	Если ИмяРегистра = "ДенежныеСредстваКВыплате" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаДенежныеСредстваКВыплате(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	ИначеЕсли ИмяРегистра = "РеестрДокументов" Тогда
		
		ПереопределениеРасчетаПараметров.Вставить("ПартнерИзДокумента", "ДанныеДокумента.Партнер");
		ПереопределениеРасчетаПараметров.Вставить("КонтрагентИзДокумента", "ДанныеДокумента.Контрагент");
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Истина, ПереопределениеРасчетаПараметров);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметровПроведения();
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЕстьПодарочныйСертификат
	|ПОМЕСТИТЬ НаличиеВидаОбъектаРасчетовПодарочныйСертификат
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК РасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО (РасшифровкаПлатежа.ОбъектРасчетов = ОбъектыРасчетов.Ссылка)
	|ГДЕ
	|	ОбъектыРасчетов.Объект ССЫЛКА Справочник.ПодарочныеСертификаты
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                     КАК Период,
	|	ДанныеДокумента.ДатаПлатежа                              КАК ДатаПлатежа,
	|	ДанныеДокумента.ЖелательнаяДатаПлатежа                   КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.Организация                              КАК Организация,
	|	ДанныеДокумента.Подразделение                            КАК Подразделение,
	|	ДанныеДокумента.ОрганизацияПолучатель                    КАК ОрганизацияПолучатель,
	|
	|	ВЫБОР
	|		КОГДА
	|			ЕСТЬNULL(НаличиеВидаПодарочныйСертификат.ЕстьПодарочныйСертификат, ЛОЖЬ)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.Контрагенты.РозничныйПокупатель)
	|	ИНАЧЕ
	|		ДанныеДокумента.Контрагент
	|	КОНЕЦ                                                    КАК Контрагент,
	|	ДанныеДокумента.СписокКонтрагентов                       КАК СписокКонтрагентов,
	|
	|	ВЫБОР
	|		КОГДА
	|			ЕСТЬNULL(НаличиеВидаПодарочныйСертификат.ЕстьПодарочныйСертификат, ЛОЖЬ)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.Партнеры.РозничныйПокупатель)
	|	ИНАЧЕ
	|		ДанныеДокумента.Партнер
	|	КОНЕЦ                                                    КАК Партнер,
	|	ДанныеДокумента.Контрагент                               КАК КонтрагентИзДокумента,
	|	ДанныеДокумента.Партнер                                  КАК ПартнерИзДокумента,
	|	
	|	ДанныеДокумента.ПодотчетноеЛицо                          КАК ПодотчетноеЛицо,
	|	ДанныеДокумента.Валюта                                   КАК Валюта,
	|	ДанныеДокумента.Статус                                   КАК Статус,
	|	ДанныеДокумента.ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств            КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяЦелевыхСредств                     КАК СтатьяЦелевыхСредств,
	|	ДанныеДокумента.ХозяйственнаяОперацияПоЗарплате          КАК ХозяйственнаяОперацияПоЗарплате,
	|	ДанныеДокумента.ФормаОплатыЗаявки                        КАК ФормаОплаты,
	|	ДанныеДокумента.СверхЛимита                              КАК СверхЛимита,
	|
	|	ДанныеДокумента.БанковскийСчет                           КАК БанковскийСчет,
	|	ДанныеДокумента.Номер                                    КАК Номер,
	|	ДанныеДокумента.НазначениеПлатежа                        КАК НазначениеПлатежа,
	|	ДанныеДокумента.Комментарий                              КАК Комментарий,
	|	ДанныеДокумента.Проведен                                 КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                          КАК ПометкаУдаления,
	|	ДанныеДокумента.СуммаДокумента                           КАК СуммаДокумента,
	|	ДанныеДокумента.Договор                                  КАК Договор,
	|	ДанныеДокумента.НаправлениеДеятельности                  КАК НаправлениеДеятельности,
	|	ДанныеДокумента.КтоЗаявил                                КАК Ответственный,
	|	ДанныеДокумента.Автор                                    КАК Автор,
	|	ДанныеДокумента.КтоЗаявил                                КАК КтоЗаявил,
	|	ЕСТЬNULL(НаличиеВидаПодарочныйСертификат.ЕстьПодарочныйСертификат, ЛОЖЬ) КАК ЕстьПодарочныйСертификат,
	|	ДанныеДокумента.ПриоритетОплаты                          КАК ПриоритетОплаты,
	|	ДанныеДокумента.ПеречислениеСотрудникуЧерезБанк          КАК ПеречислениеСотрудникуЧерезБанк
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ НаличиеВидаОбъектаРасчетовПодарочныйСертификат КАК НаличиеВидаПодарочныйСертификат
	|		ПО ИСТИНА
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеДокумента(Запрос, ДокументСсылка)

	СписокЗапросов = Новый Массив;
	
	ТекстЗапросаДанныеДокументаШапка(СписокЗапросов);
	ТекстЗапросаДанныеДокументаТаблицаРасшифровкаПлатежа(СписокЗапросов);
	ТекстЗапросаДанныеДокументаТаблицаРаспределениеПоСчетам(СписокЗапросов);
	ТекстЗапросаДанныеДокументаТаблицаЛицевыеСчетаСотрудников(СписокЗапросов);

	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаШапка(СписокЗапросов)
	
	ТекстЗапросаШапка = "ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Дата,
	|	ДанныеШапки.Номер КАК Номер,
	|	ДанныеШапки.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеШапки.Проведен КАК Проведен,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.Организация КАК Организация,
	|	ДанныеШапки.Статус КАК Статус,
	|	ДанныеШапки.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеШапки.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеШапки.Валюта КАК Валюта,
	|	ДанныеШапки.ФормаОплатыНаличная КАК ФормаОплатыНаличная,
	|	ДанныеШапки.ФормаОплатыБезналичная КАК ФормаОплатыБезналичная,
	|	ДанныеШапки.ФормаОплатыПлатежнаяКарта КАК ФормаОплатыПлатежнаяКарта,
	|	ДанныеШапки.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеШапки.Касса КАК Касса,
	|	ДанныеШапки.НазначениеПлатежа КАК НазначениеПлатежа,
	|	ДанныеШапки.ЖелательнаяДатаПлатежа КАК ЖелательнаяДатаПлатежа,
	|	ДанныеШапки.Контрагент КАК Контрагент,
	|	ДанныеШапки.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|	ДанныеШапки.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	ДанныеШапки.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	ДанныеШапки.БанковскийСчетПолучатель КАК БанковскийСчетПолучатель,
	|	ДанныеШапки.КассаПолучатель КАК КассаПолучатель,
	|	ДанныеШапки.Подразделение КАК Подразделение,
	|	ДанныеШапки.КтоЗаявил КАК КтоЗаявил,
	|	ДанныеШапки.КтоРешил КАК КтоРешил,
	|	ДанныеШапки.Комментарий КАК Комментарий,
	|	ДанныеШапки.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	ДанныеШапки.ДатаПлатежа КАК ДатаПлатежа,
	|	ДанныеШапки.ДокументОснование КАК ДокументОснование,
	|	ДанныеШапки.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеШапки.Автор КАК Автор,
	|	ДанныеШапки.ВалютаКонвертации КАК ВалютаКонвертации,
	|	ДанныеШапки.СуммаКонвертации КАК СуммаКонвертации,
	|	ДанныеШапки.КурсКонвертации КАК КурсКонвертации,
	|	ДанныеШапки.ПланированиеСуммы КАК ПланированиеСуммы,
	|	ДанныеШапки.НомерВедомостиНаВыплатуЗарплаты КАК НомерВедомостиНаВыплатуЗарплаты,
	|	ДанныеШапки.ДатаВедомостиНаВыплатуЗарплаты КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	ДанныеШапки.СверхЛимита КАК СверхЛимита,
	|	ДанныеШапки.СтатьяАктивовПассивов КАК СтатьяАктивовПассивов,
	|	ДанныеШапки.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДанныеШапки.ИдентификаторПлатежа КАК ИдентификаторПлатежа,
	|	ДанныеШапки.ХозяйственнаяОперацияПоЗарплате КАК ХозяйственнаяОперацияПоЗарплате,
	|	ДанныеШапки.ДатаАвансовогоОтчета КАК ДатаАвансовогоОтчета,
	|	ДанныеШапки.ДоговорСУчастникомГОЗ КАК ДоговорСУчастникомГОЗ,
	|	ДанныеШапки.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
	|	ДанныеШапки.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	ДанныеШапки.ПредметОплаты КАК ПредметОплаты,
	|	ДанныеШапки.ВариантОплаты КАК ВариантОплаты,
	|	ДанныеШапки.ПунктКонтрактаПредмета КАК ПунктКонтрактаПредмета,
	|	ДанныеШапки.ПунктКонтрактаОплаты КАК ПунктКонтрактаОплаты,
	|	ДанныеШапки.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	ДанныеШапки.ВидПеречисленияВБюджет КАК ВидПеречисленияВБюджет,
	|	ДанныеШапки.КодОКАТО КАК КодОКАТО,
	|	ДанныеШапки.ПоказательОснования КАК ПоказательОснования,
	|	ДанныеШапки.ПоказательПериода КАК ПоказательПериода,
	|	ДанныеШапки.ПоказательНомера КАК ПоказательНомера,
	|	ДанныеШапки.ПоказательДаты КАК ПоказательДаты,
	|	ДанныеШапки.ПоказательТипа КАК ПоказательТипа,
	|	ДанныеШапки.СтатусСоставителя КАК СтатусСоставителя,
	|	ДанныеШапки.КодБК КАК КодБК,
	|	ДанныеШапки.ТипНалога КАК ТипНалога,
	|	ДанныеШапки.НДФЛПоВедомостям КАК НДФЛПоВедомостям,
	|	ДанныеШапки.ПриоритетОплаты КАК ПриоритетОплаты,
	|	ДанныеШапки.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ДанныеШапки.ИННПлательщика КАК ИННПлательщика,
	|	ДанныеШапки.КПППлательщика КАК КПППлательщика,
	|	ДанныеШапки.ТекстПлательщика КАК ТекстПлательщика,
	|	ДанныеШапки.ТипКомиссииЗаПеревод КАК ТипКомиссииЗаПеревод,
	|	ДанныеШапки.ИнформацияПолучателюПлатежа КАК ИнформацияПолучателюПлатежа,
	|	ДанныеШапки.УсловиеСделкиКонвертации КАК УсловиеСделкиКонвертации,
	|	ДанныеШапки.БанковскийСчетСписанияКомиссии КАК БанковскийСчетСписанияКомиссии,
	|	ДанныеШапки.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ДанныеШапки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеШапки.Договор КАК Договор,
	|	ДанныеШапки.КратностьКурсаКонвертации КАК КратностьКурсаКонвертации,
	|	ДанныеШапки.Партнер КАК Партнер,
	|	ДанныеШапки.СписокФизЛиц КАК СписокФизЛиц,
	|	ДанныеШапки.КодВидаДохода КАК КодВидаДохода,
	|	ДанныеШапки.ДоговорЭквайринга КАК ДоговорЭквайринга,
	|	ДанныеШапки.ОтражатьКомиссию КАК ОтражатьКомиссию,
	|	ДанныеШапки.СуммаКомиссии КАК СуммаКомиссии,
	|	ДанныеШапки.СтатьяРасходов КАК СтатьяРасходов,
	|	ДанныеШапки.АналитикаРасходов КАК АналитикаРасходов,
	|	ДанныеШапки.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	|	ДанныеШапки.КодВыплат КАК КодВыплат,
	|	ДанныеШапки.НалогообложениеНДС КАК НалогообложениеНДС,
	|	ДанныеШапки.КонтролироватьОплатуПоОбъектамРасчетов КАК КонтролироватьОплатуПоОбъектамРасчетов,
	|	ДанныеШапки.Закрыта КАК Закрыта,
	|	ДанныеШапки.ПеречислениеСотрудникуЧерезБанк КАК ПеречислениеСотрудникуЧерезБанк,
	|	ДанныеШапки.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	ДанныеШапки.СписокКонтрагентов КАК СписокКонтрагентов,
	|	ДанныеШапки.Контрагент.Партнер КАК КонтрагентПартнер,
	|	ДанныеШапки.БанковскийСчет.НаправлениеДеятельности КАК БанковскийСчетНаправлениеДеятельности,
	|	ДанныеШапки.Касса.НаправлениеДеятельности КАК КассаНаправлениеДеятельности,
	|	ДанныеШапки.ДоговорЭквайринга.НаправлениеДеятельности КАК ДоговорЭквайрингаНаправлениеДеятельности
	|ПОМЕСТИТЬ ДанныеДокументаШапка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеШапки
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапросаШапка);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаТаблицаРасшифровкаПлатежа(СписокЗапросов)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяРасходов КАК СтатьяРасходов,
	|	ТаблицаРасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ДоговорАренды КАК ДоговорАренды,
	|	ТаблицаРасшифровкаПлатежа.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	ТаблицаРасшифровкаПлатежа.Комментарий КАК Комментарий,
	|	ТаблицаРасшифровкаПлатежа.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита КАК ТипСуммыКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.Подразделение КАК Подразделение,
	|	ТаблицаРасшифровкаПлатежа.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|	ТаблицаРасшифровкаПлатежа.Ведомость КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.Организация КАК Организация,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТаблицаРасшифровкаПлатежа.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	|	ТаблицаРасшифровкаПлатежа.КурсЧислительВзаиморасчетов КАК КурсЧислительВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.КурсЗнаменательВзаиморасчетов КАК КурсЗнаменательВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	ТаблицаРасшифровкаПлатежа.ДатаПогашения КАК ДатаПогашения,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.НаправлениеДеятельности КАК ОбъектРасчетовНаправлениеДеятельности,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.Договор КАК ОбъектРасчетовДоговор,
	|	ТаблицаРасшифровкаПлатежа.Контрагент КАК Контрагент,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга КАК
	|		ДоговорКредитаДепозитаСтатьяДДСОсновногоДолга,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи КАК
	|		ДоговорКредитаДепозитаСтатьяДДСПоступленияВыдачи,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов КАК ДоговорКредитаДепозитаСтатьяДДСПроцентов,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии КАК ДоговорКредитаДепозитаСтатьяДДСКомиссии,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.НаправлениеДеятельности КАК
	|		ДоговорКредитаДепозитаНаправлениеДеятельности
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаРасшифровкаПлатежа
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаТаблицаРаспределениеПоСчетам(СписокЗапросов)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаРаспределениеПоСчетам.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРаспределениеПоСчетам.Ссылка КАК Ссылка,
	|	ТаблицаРаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ТаблицаРаспределениеПоСчетам.Сумма КАК Сумма,
	|	ТаблицаРаспределениеПоСчетам.ДатаПлатежа КАК ДатаПлатежа
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаРаспределениеПоСчетам
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам КАК ТаблицаРаспределениеПоСчетам
	|ГДЕ
	|	ТаблицаРаспределениеПоСчетам.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаТаблицаЛицевыеСчетаСотрудников(СписокЗапросов)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТаблицаЛицевыеСчетаСотрудников.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЛицевыеСчетаСотрудников.Ссылка КАК Ссылка,
	|	ТаблицаЛицевыеСчетаСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаЛицевыеСчетаСотрудников.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛицевыеСчетаСотрудников.Сумма КАК Сумма,
	|	ТаблицаЛицевыеСчетаСотрудников.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаЛицевыеСчетаСотрудников
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.ЛицевыеСчетаСотрудников КАК ТаблицаЛицевыеСчетаСотрудников
	|ГДЕ
	|	ТаблицаЛицевыеСчетаСотрудников.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",                         ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ЗаявкаНаРасходованиеДенежныхСредств"));
	Значения.Вставить("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств", ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств"));
	Значения.Вставить("ИспользоватьНачислениеЗарплаты",                  Константы.ИспользоватьНачислениеЗарплаты.Получить());
	Значения.Вставить("ИспользоватьЛимитыРасходаДенежныхСредств",        ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредств"));
	Значения.Вставить("ИспользоватьЛимитыРасходаПоОрганизациям",         ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям"));
	Значения.Вставить("ИспользоватьЛимитыРасходаПоПодразделениям",       ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям"));
	Значения.Вставить("ИспользоватьУчетПрочихАктивовПассивов",           ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	
	Если Реквизиты <> Неопределено Тогда
		Значения.Вставить("СтатьяДвиженияДенежныхСредств",               СтатьяДвиженияДенежныхСредствДокумента(Реквизиты));
		Значения.Вставить("СверхЛимита",                                 Реквизиты.СверхЛимита);
		Значения.Вставить("НомерНаПечать",                               ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Реквизиты, ДокументСсылка, МенеджерВременныхТаблиц, ДокументОбъект = Неопределено)

	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР КОГДА ТаблицаРасшифровкаПлатежа.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|		ТОГДА &Организация
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР КОГДА &СписокКонтрагентов
	|			ТОГДА ТаблицаРасшифровкаПлатежа.Контрагент
	|		ИНАЧЕ &Контрагент
	|	КОНЕЦ КАК Контрагент,
	|
	|	ВЫБОР КОГДА &ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|											ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|			ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ОбъектРасчетовДоговор, ЗНАЧЕНИЕ(Справочник.ДоговорыМеждуОрганизациями.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ОбъектРасчетовДоговор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|	КОНЕЦ КАК Договор,
	|	ВЫБОР
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов)) ТОГДА
	|			ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозитаНаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|		ИНАЧЕ
	|			ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ОбъектРасчетовНаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))
	|	КОНЕЦ КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ТаблицаОбъектовРасчетов
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	
	|ГДЕ
	|	ТаблицаРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРасчетов
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектовРасчетов.Организация КАК Организация,
	|	ТаблицаОбъектовРасчетов.Контрагент  КАК Контрагент,
	|	ТаблицаОбъектовРасчетов.Партнер     КАК Партнер,
	|	ТаблицаОбъектовРасчетов.Договор     КАК Договор,
	|	ТаблицаОбъектовРасчетов.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ТаблицаОбъектовРасчетов КАК ТаблицаОбъектовРасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТаблицаОбъектовРасчетов.Организация = Аналитика.Организация
	|		И ТаблицаОбъектовРасчетов.Контрагент = Аналитика.Контрагент
	|		И ТаблицаОбъектовРасчетов.Партнер = Аналитика.Партнер
	|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
	|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОбъектовРасчетов.Организация           КАК Организация,
	|	&ОрганизацияПолучатель                        КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ТаблицаОбъектовРасчетов.Договор   КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности
	|ИЗ
	|	ТаблицаОбъектовРасчетов КАК ТаблицаОбъектовРасчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТаблицаОбъектовРасчетов.Организация = Аналитика.Организация
	|		И &ОрганизацияПолучатель = Аналитика.Контрагент
	|		И ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) = Аналитика.Партнер
	|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
	|		И ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию))
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Организация", Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОрганизацияПолучатель", Реквизиты.ОрганизацияПолучатель);
	Запрос.УстановитьПараметр("Контрагент", Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("СписокКонтрагентов", Реквизиты.СписокКонтрагентов);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Реквизиты.ХозяйственнаяОперация);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Если ДокументОбъект = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДанныеДокументаТаблицаРасшифровкаПлатежа", "Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовДоговор", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.Договор");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозитаНаправлениеДеятельности", "ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.НаправлениеДеятельности");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаРасшифровкаПлатежа.ОбъектРасчетовНаправлениеДеятельности", "ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.НаправлениеДеятельности");
	КонецЕсли;

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;

КонецПроцедуры

Функция ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса, ДокументОбъект)
	
	ИмяРегистра = "ТаблицаРасшифровкаПлатежа";
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос, ДокументОбъект);
	
	ВидыНДФЛ = Новый Массив;
	ВидыНДФЛ.Добавить(Справочники.ВидыНалоговВзносов.ПолучитьСсылкуПредопределенногоЭлемента("НДФЛ"));
	ВидыНДФЛ.Добавить(Справочники.ВидыНалоговВзносов.ПолучитьСсылкуПредопределенногоЭлемента("НДФЛСПревышения"));
	Запрос.УстановитьПараметр("ВидыНДФЛ", ВидыНДФЛ);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Аналитика.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита КАК ТипСуммыКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ТаблицаРасшифровкаПлатежа.ДоговорАренды КАК ДоговорАренды,
	|	ТаблицаРасшифровкаПлатежа.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	ВЫБОР
	|		КОГДА &ЕстьПодарочныйСертификат = ИСТИНА
	|			ТОГДА &Партнер
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ЕСТЬNULL(ТаблицаОбъектовРасчетов.Контрагент, &Контрагент) КАК Контрагент,
	|			НЕОПРЕДЕЛЕНО
	|	КАК Подразделение,
	|
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|
	|ПОМЕСТИТЬ ТаблицаРасшифровкаПлатежа
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОбъектовРасчетов КАК ТаблицаОбъектовРасчетов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = ТаблицаОбъектовРасчетов.ОбъектРасчетов
	|		И ТаблицаРасшифровкаПлатежа.Партнер = ТаблицаОбъектовРасчетов.Партнер
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТаблицаОбъектовРасчетов.Организация = Аналитика.Организация
	|		И ТаблицаОбъектовРасчетов.Контрагент = Аналитика.Контрагент
	|		И ВЫБОР КОГДА &ЕстьПодарочныйСертификат = ИСТИНА
	|			ТОГДА &Партнер
	|			ИНАЧЕ ТаблицаОбъектовРасчетов.Партнер
	|		КОНЕЦ = Аналитика.Партнер
	|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
	|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорКредитаДепозита,
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммыКредитаДепозита,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорЗаймаСотруднику,
	|	НЕОПРЕДЕЛЕНО КАК ДоговорАренды,
	|	НЕОПРЕДЕЛЕНО КАК ТипПлатежаПоАренде,
	|	ТаблицаРасшифровкаПлатежа.Ведомость КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|		)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Аналитика.КлючАналитики, Неопределено) КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита КАК ТипСуммыКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ТаблицаРасшифровкаПлатежа.ДоговорАренды КАК ДоговорАренды,
	|	ТаблицаРасшифровкаПлатежа.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|				И ДанныеДокумента.ТипНалога В (&ВидыНДФЛ)
	|		ТОГДА ТаблицаРасшифровкаПлатежа.Ведомость 
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	ТаблицаРасшифровкаПлатежа.Партнер КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|		ТОГДА ТаблицаРасшифровкаПлатежа.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств)
	|		ТОГДА ТаблицаРасшифровкаПлатежа.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств))
	|		ТОГДА ТаблицаРасшифровкаПлатежа.СтатьяРасходов
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет))
	|		ТОГДА
	|			ВЫБОР КОГДА &ИспользоватьУчетПрочихАктивовПассивов ТОГДА
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги)
	|			ИНАЧЕ
	|				НЕОПРЕДЕЛЕНО
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатьяРасходов,
	|	ТаблицаРасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет) 
	|		ТОГДА ДанныеДокумента.ТипНалога 
	|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.АналитикаАктивовПассивов
	|	КОНЕЦ КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка КАК ДанныеДокумента
	|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		&Организация = Аналитика.Организация
	|		И &Контрагент = Аналитика.Контрагент
	|		И ТаблицаРасшифровкаПлатежа.Партнер = Аналитика.Партнер
	|		И Аналитика.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И Аналитика.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
	|
	|	ТаблицаРасшифровкаПлатежа.Сумма КАК Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Аналитика.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаПоПартнерам,
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита КАК ТипСуммыКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ТаблицаРасшифровкаПлатежа.ДоговорАренды КАК ДоговорАренды,
	|	ТаблицаРасшифровкаПлатежа.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|	
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ТаблицаОбъектовРасчетов КАК ТаблицаОбъектовРасчетов
	|	ПО
	|		ТаблицаРасшифровкаПлатежа.ОбъектРасчетов = ТаблицаОбъектовРасчетов.ОбъектРасчетов
	|		И ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) = ТаблицаОбъектовРасчетов.Партнер
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|	ПО
	|		ТаблицаОбъектовРасчетов.Организация = Аналитика.Организация
	|		И &ОрганизацияПолучатель = Аналитика.Контрагент
	|		И ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) = Аналитика.Партнер
	|		И ТаблицаОбъектовРасчетов.Договор = Аналитика.Договор
	|		И ТаблицаОбъектовРасчетов.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов,
	|
	|	ТаблицаРасшифровкаПлатежа.Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Аналитика.КлючАналитики, НЕОПРЕДЕЛЕНО),
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	ТаблицаРасшифровкаПлатежа.ДоговорАренды КАК ДоговорАренды,
	|	ТаблицаРасшифровкаПлатежа.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств,
	|	ВЫБОР
	|		КОГДА ТаблицаРасшифровкаПлатежа.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|			ТаблицаРасшифровкаПлатежа.Партнер
	|		ИНАЧЕ
	|			ДанныеДокумента.КонтрагентПартнер
	|	КОНЕЦ КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка КАК ДанныеДокумента
	|		ПО ТаблицаРасшифровкаПлатежа.Ссылка = ДанныеДокумента.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО (&Организация = Аналитика.Организация)
	|			И (&Контрагент = Аналитика.Контрагент)
	|			И ВЫБОР
	|				КОГДА ТаблицаРасшифровкаПлатежа.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) ТОГДА
	|					ТаблицаРасшифровкаПлатежа.Партнер
	|				ИНАЧЕ
	|					ТаблицаРасшифровкаПлатежа.Ссылка.Контрагент.Партнер
	|			КОНЕЦ = Аналитика.Партнер
	|			И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = Аналитика.Договор
	|			И ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.НаправлениеДеятельности, ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)) = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРасшифровкаПлатежа.НомерСтроки,
	|	ТаблицаРасшифровкаПлатежа.ОбъектРасчетов,
	|
	|	ТаблицаРасшифровкаПлатежа.Сумма,
	|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов,
	|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	
	|	ТаблицаРасшифровкаПлатежа.СтавкаНДС КАК СтавкаНДС,
	|	ТаблицаРасшифровкаПлатежа.СуммаНДС КАК СуммаНДС,
	|
	|	ЕСТЬNULL(Аналитика.КлючАналитики, НЕОПРЕДЕЛЕНО),
	|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	ТаблицаРасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	ТаблицаРасшифровкаПлатежа.ДоговорАренды КАК ДоговорАренды,
	|	ТаблицаРасшифровкаПлатежа.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	ТаблицаРасшифровкаПлатежа.Ссылка КАК Ссылка
	|
	|ИЗ
	|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО (&Организация = Аналитика.Организация)
	|			И (&Контрагент = Аналитика.Контрагент)
	|			И ТаблицаРасшифровкаПлатежа.Партнер = Аналитика.Партнер
	|			И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = Аналитика.Договор
	|			И ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|	)
	|	И &ИспользоватьНачислениеЗарплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	НЕОПРЕДЕЛЕНО,
	|
	|	Заявка.СуммаДокумента,
	|	Заявка.СуммаДокумента,
	|	Заявка.Валюта,
	|
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	
	|	&АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО КАК Ведомость,
	|	Заявка.СтатьяДвиженияДенежныхСредств,
	|	Заявка.СтатьяЦелевыхСредств,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО,
	|	
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
	|	Заявка.Ссылка
	|
	|ИЗ
	|	ДанныеДокументаШапка КАК Заявка
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|	И НЕ &ИспользоватьНачислениеЗарплаты
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваКВыплате(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "ДенежныеСредстваКВыплате";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаРаспределениеПоСчетам.ДатаПлатежа КАК Период,
	|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ТаблицаРаспределениеПоСчетам.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СписокФизЛиц ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|		) ТОГДА
	|			&ПодотчетноеЛицо
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		) ТОГДА
	|			&ОрганизацияПолучатель
	|		КОГДА ДанныеДокумента.СписокКонтрагентов
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			&КонтрагентИзДокумента
	|	КОНЕЦ КАК Получатель,
	|	
	|	&Организация КАК Организация,
	|	
	|	ТаблицаРаспределениеПоСчетам.Сумма КАК Сумма,
	|	
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДанныеДокументаТаблицаРаспределениеПоСчетам КАК ТаблицаРаспределениеПоСчетам
	|	ПО
	|		ТаблицаРаспределениеПоСчетам.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьЗаявкиНаРасходованиеДенежныхСредств
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
	|	И НЕ ТаблицаРаспределениеПоСчетам.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ДанныеДокумента.ЖелательнаяДатаПлатежа КАК Период,
	|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКасса,
	|	
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СписокФизЛиц ТОГДА
	|			НЕОПРЕДЕЛЕНО
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
	|		) ТОГДА
	|			&ПодотчетноеЛицо
	|		КОГДА &ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		) ТОГДА
	|			&ОрганизацияПолучатель
	|		КОГДА ДанныеДокумента.СписокКонтрагентов
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ
	|			&КонтрагентИзДокумента
	|	КОНЕЦ КАК Получатель,
	|	
	|	&Организация КАК Организация,
	|	
	|	ДанныеДокумента.СуммаДокумента - СУММА(ЕСТЬNULL(ТаблицаРаспределениеПоСчетам.Сумма, 0)) КАК Сумма,
	|	
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДанныеДокументаТаблицаРаспределениеПоСчетам КАК ТаблицаРаспределениеПоСчетам
	|	ПО
	|		ТаблицаРаспределениеПоСчетам.Ссылка = ДанныеДокумента.Ссылка
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И &ИспользоватьЗаявкиНаРасходованиеДенежныхСредств
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.СписокФизЛиц,
	|	ДанныеДокумента.СписокКонтрагентов,
	|	ДанныеДокумента.СуммаДокумента
	|
	|ИМЕЮЩИЕ
	|	ДанныеДокумента.СуммаДокумента - СУММА(ЕСТЬNULL(ТаблицаРаспределениеПоСчетам.Сумма, 0)) > 0
	|";
	
	Если ДокументОбъект = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаШапка", "Документ.ЗаявкаНаРасходованиеДенежныхСредств");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаТаблицаРаспределениеПоСчетам", "Документ.ЗаявкаНаРасходованиеДенежныхСредств.РаспределениеПоСчетам");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаЛимитыРасходаДенежныхСредств(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "ЛимитыРасходаДенежныхСредств";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Запрос.Параметры.Свойство("ИспользоватьЛимитыРасходаДенежныхСредств") Тогда
		ИспользоватьЛимитыРасходаДенежныхСредств = Запрос.Параметры.ИспользоватьЛимитыРасходаДенежныхСредств;
	Иначе
		ИспользоватьЛимитыРасходаДенежныхСредств = ПолучитьФункциональнуюОпцию("ИспользоватьЛимитыРасходаДенежныхСредств");
	КонецЕсли;
	
	Если НЕ ИспользоватьЛимитыРасходаДенежныхСредств Тогда
		Возврат "";
	КонецЕсли;

	Если НЕ (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаРасшифровкаПлатежа", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса, ДокументОбъект);
	КонецЕсли; 
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);

	МассивТекстовЗапроса = Новый Массив;
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
		И НЕ ДокументОбъект.СписокФизЛиц Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтрокиЗаявки,
		|	0 КАК НомерСтрокиВедомости,
		|	
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ДатаПлатежа, МЕСЯЦ)
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ЖелательнаяДатаПлатежа, МЕСЯЦ)
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|	КОНЕЦ КАК Период,
		|	
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
		|			ТОГДА &Организация 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
		|			ТОГДА &Подразделение 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|	
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	
		|	ВЫБОР
		|		КОГДА НЕ &СверхЛимита
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходВПределахЛимита,
		|	
		|	ВЫБОР
		|		КОГДА &СверхЛимита
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходСверхЛимита
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|	ПО
		|		ИСТИНА
		|
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		И ДокументОбъект.СписокФизЛиц Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаЛицевыеСчетаСотрудников.НомерСтроки КАК НомерСтрокиЗаявки,
		|	0 КАК НомерСтрокиВедомости,
		|	
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ДатаПлатежа, МЕСЯЦ)
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ЖелательнаяДатаПлатежа, МЕСЯЦ)
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|	КОНЕЦ КАК Период,
		|	
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
		|			ТОГДА &Организация 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
		|			ТОГДА &Подразделение 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|	
		|	ТаблицаЛицевыеСчетаСотрудников.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	
		|	ВЫБОР
		|		КОГДА НЕ &СверхЛимита
		|			ТОГДА ТаблицаЛицевыеСчетаСотрудников.Сумма * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходВПределахЛимита,
		|	
		|	ВЫБОР
		|		КОГДА &СверхЛимита
		|			ТОГДА ТаблицаЛицевыеСчетаСотрудников.Сумма * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходСверхЛимита
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаЛицевыеСчетаСотрудников КАК ТаблицаЛицевыеСчетаСотрудников
		|		ПО ДанныеДокумента.Ссылка = ТаблицаЛицевыеСчетаСотрудников.Ссылка
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки КАК НомерСтрокиЗаявки,
		|	0 КАК НомерСтрокиВедомости,
		|	
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ДатаПлатежа, МЕСЯЦ)
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ЖелательнаяДатаПлатежа, МЕСЯЦ)
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|	КОНЕЦ КАК Период,
		|	
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
		|			ТОГДА &Организация 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
		|			ТОГДА &Подразделение 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|	
		|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	
		|	ВЫБОР
		|		КОГДА НЕ &СверхЛимита
		|			ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходВПределахЛимита,
		|	
		|	ВЫБОР
		|		КОГДА &СверхЛимита
		|			ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходСверхЛимита
		|	
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ДанныеДокументаТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|	ПО
		|		ДанныеДокумента.Ссылка = ТаблицаРасшифровкаПлатежа.Ссылка
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	0 КАК НомерСтрокиЗаявки,
		|	0 КАК НомерСтрокиВедомости,
		|	
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ДатаПлатежа, МЕСЯЦ)
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		НАЧАЛОПЕРИОДА(&ЖелательнаяДатаПлатежа, МЕСЯЦ)
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ)
		|	КОНЕЦ КАК Период,
		|	
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
		|			ТОГДА &Организация 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|	КОНЕЦ КАК Организация,
		|	ВЫБОР
		|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
		|			ТОГДА &Подразделение 
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	КОНЕЦ КАК Подразделение,
		|	
		|	ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,&СтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств,
		|	
		|	ВЫБОР
		|		КОГДА НЕ &СверхЛимита 
		|			ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма,ДанныеДокумента.СуммаДокумента) * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходВПределахЛимита,
		|	
		|	ВЫБОР
		|		КОГДА &СверхЛимита 
		|			ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма,ДанныеДокумента.СуммаДокумента) * &КоэффициентПересчетаВВалютуУпр 
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РасходСверхЛимита
		|	
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|	ПО
		|		&ИспользоватьНачислениеЗарплаты
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если МассивТекстовЗапроса.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоФинансовымИнструментам(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РасчетыПоФинансовымИнструментам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаРасшифровкаПлатежа", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса, ДокументОбъект);
	КонецЕсли;
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос, ДокументОбъект);
	
	Если Запрос.Параметры.Свойство("ИспользоватьНачислениеЗарплаты") Тогда
		ИспользоватьНачислениеЗарплаты = Запрос.Параметры.ИспользоватьНачислениеЗарплаты;
	Иначе
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;
	
	МассивТекстовЗапросов = Новый Массив;
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаРасшифровкаПлатежа.НомерСтроки                       КАК НомерСтроки,
		|	&Период                                                     КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)                      КАК ВидДвижения,
		
		|	ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита            КАК Договор,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация В (
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
		|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов))
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
		|		ИНАЧЕ ТаблицаРасшифровкаПлатежа.ТипСуммыКредитаДепозита
		|	КОНЕЦ КАК ТипСуммы,
		|	ТаблицаРасшифровкаПлатежа.ВалютаВзаиморасчетов              КАК Валюта,
		
		|	0 КАК Сумма,
		|	ТаблицаРасшифровкаПлатежа.СуммаВзаиморасчетов               КАК Оплачивается,
		|	0 КАК СуммаУпр,
		|	0 КАК СуммаРегл,
		
		|	&ХозяйственнаяОперация                                      КАК ХозяйственнаяОперация,
		|	ВЫБОР
		|		КОГДА ДанныеДоговора.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Оплаты)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыГрафиковФинансовыхИнструментов.Транши)
		|	КОНЕЦ КАК ТипГрафика,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств     КАК СтатьяАналитики,
		|	&Ссылка                                                     КАК ЗаявкаНаРасходованиеДенежныхСредств
		|	
		|ИЗ
		|	ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДоговора
		|		ПО ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита = ДанныеДоговора.Ссылка";
		
		МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	
	Если МассивТекстовЗапросов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияДенежныхСредств(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "ДвиженияДенежныхСредств";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаРасшифровкаПлатежа", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса, ДокументОбъект);
	КонецЕсли;
	
	Если НЕ (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив;
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты)
		И НЕ ДокументОбъект.СписокФизЛиц Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		&ДатаПлатежа
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		&ЖелательнаяДатаПлатежа
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ВЫБОР ДанныеДокумента.ФормаОплатыЗаявки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
		|			ДанныеДокумента.Касса
		|		ИНАЧЕ
		|			ДанныеДокумента.БанковскийСчет
		|	КОНЕЦ КАК ДенежныеСредства,
		|	ВЫБОР ДанныеДокумента.ФормаОплатыЗаявки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
		|		ИНАЧЕ
		|			НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипДенежныхСредств,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) ТОГДА
		|			ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|		ИНАЧЕ &СтатьяДвиженияДенежныхСредств
		|	КОНЕЦ КАК СтатьяДвиженияДенежныхСредств,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику) ТОГДА
		|			ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств
		|		ИНАЧЕ &СтатьяЦелевыхСредств
		|	КОНЕЦ КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
		|				ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
		|			ТОГДА ДанныеДокумента.БанковскийСчетПолучатель
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
		|			ТОГДА ДанныеДокумента.КассаПолучатель
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
		|			ТОГДА ДанныеДокумента.ПодотчетноеЛицо
		|	КОНЕЦ КАК КорДенежныеСредства,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУПодотчетногоЛица)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваВПути)
		|	КОНЕЦ КАК КорТипДенежныхСредств,
		|	ДанныеДокумента.Валюта КАК КорВалюта,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ВЫБОР
		|					КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
		|						ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента)
		|					ИНАЧЕ ДанныеДокумента.СуммаДокумента
		|				КОНЕЦ
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ВЫБОР
		|					КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику)
		|						ТОГДА ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента)
		|					ИНАЧЕ ДанныеДокумента.СуммаДокумента
		|				КОНЕЦ
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
		|				ИЛИ &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты)
		|			ТОГДА ДанныеДокумента.БанковскийСчетПолучатель
		|		КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
		|			ТОГДА ДанныеДокумента.КассаПолучатель
		|	КОНЕЦ КАК ИсточникКорГФУДенежныхСредств,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|";
	
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		И ДокументОбъект.СписокФизЛиц Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаПлатежа
		|		КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ВЫБОР ДанныеДокумента.ФормаОплатыЗаявки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|			ТОГДА ДанныеДокумента.Касса
		|		ИНАЧЕ ДанныеДокумента.БанковскийСчет
		|	КОНЕЦ КАК ДенежныеСредства,
		|	ВЫБОР ДанныеДокумента.ФормаОплатыЗаявки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипДенежныхСредств,
		|	ТаблицаЛицевыеСчетаСотрудников.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	&СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ПодотчетноеЛицо КАК КорДенежныеСредства,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУПодотчетногоЛица) КАК КорТипДенежныхСредств,
		|	ДанныеДокумента.Валюта КАК КорВалюта,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|				ТОГДА ТаблицаЛицевыеСчетаСотрудников.Сумма
		|		КОНЕЦ) КАК СуммаКВыплатеВРамкахЛимита,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|				ТОГДА ТаблицаЛицевыеСчетаСотрудников.Сумма
		|		КОНЕЦ) КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникКорГФУДенежныхСредств,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеДокументаТаблицаЛицевыеСчетаСотрудников КАК ТаблицаЛицевыеСчетаСотрудников
		|		ПО ДанныеДокумента.Ссылка = ТаблицаЛицевыеСчетаСотрудников.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Подразделение,
		|	ВЫБОР ДанныеДокумента.ФормаОплатыЗаявки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|			ТОГДА ДанныеДокумента.Касса
		|		ИНАЧЕ ДанныеДокумента.БанковскийСчет
		|	КОНЕЦ,
		|	ВЫБОР ДанныеДокумента.ФормаОплатыЗаявки
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
		|		КОГДА ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ,
		|	ТаблицаЛицевыеСчетаСотрудников.СтатьяДвиженияДенежныхСредств,
		|	ДанныеДокумента.Валюта,
		|	ДанныеДокумента.ПодотчетноеЛицо,
		|	ДанныеДокумента.БанковскийСчет,
		|	ДанныеДокумента.Валюта";
	
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		&ДатаПлатежа
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		&ЖелательнаяДатаПлатежа
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.БанковскийСчет КАК ДенежныеСредства,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные) КАК ТипДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК КорДенежныеСредства,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Депозиты) КАК КорТипДенежныхСредств,
		|	ДанныеДокумента.Валюта КАК КорВалюта,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК ИсточникКорГФУДенежныхСредств,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|";
	
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда

		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		&ДатаПлатежа
		|	КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1,1,1) ТОГДА
		|		&ЖелательнаяДатаПлатежа
		|	ИНАЧЕ
		|		НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.БанковскийСчет КАК ДенежныеСредства,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные) КАК ТипДенежныхСредств,
		|	&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	&СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ДоговорЭквайринга КАК КорДенежныеСредства,
		|	Значение(Перечисление.ТипыДенежныхСредств.ДенежныеСредстваУЭквайера) КАК КорТипДенежныхСредств,
		|	ДанныеДокумента.Валюта КАК КорВалюта,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ДанныеДокумента.СуммаДокумента
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ДанныеДокумента.СуммаДокумента
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникКорГФУДенежныхСредств,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если МассивТекстовЗапроса.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияДенежныеСредстваДоходыРасходы(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваДоходыРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаРасшифровкаПлатежа", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса, ДокументОбъект);
	КонецЕсли;
	
	Если Запрос.Параметры.Свойство("ИспользоватьНачислениеЗарплаты") Тогда
		ИспользоватьНачислениеЗарплаты = Запрос.Параметры.ИспользоватьНачислениеЗарплаты;
	Иначе
		ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаПлатежа
		|		КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ТаблицаРасшифровкаПлатежа.Подразделение КАК ПодразделениеДоходовРасходов,
		|	ДанныеДокумента.БанковскийСчет КАК ДенежныеСредства,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная) ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
		|	КОНЕЦ КАК ТипДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ТаблицаРасшифровкаПлатежа.НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
		|	ТаблицаРасшифровкаПлатежа.СтатьяРасходов КАК СтатьяДоходовРасходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
		|	ТаблицаРасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаРасшифровкаПлатежа.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяРасходов КАК ИсточникГФУДоходовРасходов,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|";
	
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаПлатежа
		|		КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДоходовРасходов,
		|	ДанныеДокумента.БанковскийСчет КАК ДенежныеСредства,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные) КАК ТипДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиСтатьи,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.Налоги) КАК СтатьяДоходовРасходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
		|	ДанныеДокумента.ТипНалога КАК АналитикаАктивовПассивов,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ТаблицаРасшифровкаПлатежа.Сумма
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУДоходовРасходов,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|		ПО (ИСТИНА)
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплаты
		И НЕ ИспользоватьНачислениеЗарплаты Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаПлатежа
		|		КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	&ХозяйственнаяОперацияПоЗарплате КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДоходовРасходов,
		|	ДанныеДокумента.БанковскийСчет КАК ДенежныеСредства,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу) ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
		|	КОНЕЦ КАК ТипДенежныхСредств,
		|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДанныеДокумента.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельностиСтатьи,
		|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОплатаТруда) КАК СтатьяДоходовРасходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
		|	ДанныеДокумента.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ДанныеДокумента.СуммаДокумента
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ДанныеДокумента.СуммаДокумента
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	НЕОПРЕДЕЛЕНО КАК ИсточникГФУДоходовРасходов,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|	
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту
		И ДокументОбъект.ОтражатьКомиссию И ДокументОбъект.СуммаКомиссии <> 0 Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ДатаПлатежа
		|		КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА &ЖелательнаяДатаПлатежа
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|	КОНЕЦ КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КомиссияПоЭквайрингу) КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.Подразделение КАК ПодразделениеДоходовРасходов,
		|	ДанныеДокумента.БанковскийСчет КАК ДенежныеСредства,
		|	ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные) КАК ТипДенежныхСредств,
		|	ЕСТЬNULL(ДанныеДокумента.ДоговорЭквайринга.СтатьяДвиженияДенежныхСредствКомиссия, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ОплатаПоставщику)) КАК СтатьяДвиженияДенежныхСредств,
		|	ДанныеДокумента.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ДоговорЭквайрингаНаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
		|	ДанныеДокумента.СтатьяРасходов КАК СтатьяДоходовРасходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
		|	ДанныеДокумента.АналитикаРасходов КАК АналитикаРасходов,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаАктивовПассивов,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
		|			ТОГДА ДанныеДокумента.СуммаКомиссии
		|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
		|	ВЫБОР
		|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
		|			ТОГДА ДанныеДокумента.СуммаКомиссии
		|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
		|	ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|	ДанныеДокумента.СтатьяРасходов КАК ИсточникГФУДоходовРасходов,
		|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
		|
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	
	Если МассивТекстовЗапроса.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТаблицаДвиженияДенежныеСредстваКонтрагент(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "ДвиженияДенежныеСредстваКонтрагент";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
		ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаРасшифровкаПлатежа", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаРасшифровкаПлатежа(Запрос, ТекстыЗапроса, ДокументОбъект);
	КонецЕсли; 
	
	УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос, ДокументОбъект);
	
	МассивТекстовЗапросов = Новый Массив;
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне) Тогда
	
		ТекстПодзапроса = "ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ДатаПлатежа
		|			КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ЖелательнаяДатаПлатежа
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|		КОНЕЦ КАК Период,
		|		ДанныеДокумента.ФормаОплатыНаличная КАК ФормаОплатыНаличная,
		|		ДанныеДокумента.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
		|		ДанныеДокумента.Статус КАК Статус,
		|		&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		ДанныеДокумента.Организация КАК Организация,
		|		ДанныеДокумента.Подразделение КАК Подразделение,
		|		ДанныеДокумента.БанковскийСчетНаправлениеДеятельности КАК НаправлениеДеятельностиБанковскийСчет,
		|		ДанныеДокумента.КассаНаправлениеДеятельности КАК НаправлениеДеятельностиКасса,
		|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
		|		ДанныеДокумента.Касса КАК Касса,
		|		ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|		ДанныеДокумента.Валюта КАК ВалютаПлатежа,
		|		ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.НаправлениеДеятельности, ДанныеДокумента.НаправлениеДеятельности) КАК НаправлениеДеятельностиКонтрагента,
		|		ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам.Партнер, ТаблицаРасшифровкаПлатежа.Партнер) КАК Партнер,
		|		ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам.Контрагент, ДанныеДокумента.Контрагент) КАК Контрагент,
		|		ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.ОбъектРасчетов.Договор, ДанныеДокумента.Договор) КАК Договор,
		|		ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ОбъектРасчетов,
		|		ТаблицаРасшифровкаПлатежа.Сумма КАК СуммаКВыплате,
		|		ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|		ТаблицаРасшифровкаПлатежа.ОбъектРасчетов КАК ИсточникГФУРасчетов,
		|		ДанныеДокумента.СверхЛимита КАК СверхЛимита
		|
		|	ИЗ
		|		ДанныеДокументаШапка КАК ДанныеДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|			ПО (ИСТИНА)
		|";
	
		МассивТекстовЗапросов.Добавить(ТекстПодзапроса);
		
	КонецЕсли;
	
	Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
	
		ТекстПодзапроса = "ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ДатаПлатежа
		|			КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ЖелательнаяДатаПлатежа
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|		КОНЕЦ КАК Период,
		|		ДанныеДокумента.ФормаОплатыНаличная КАК ФормаОплатыНаличная,
		|		ДанныеДокумента.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
		|		ДанныеДокумента.Статус КАК Статус,
		|		&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		ДанныеДокумента.Организация КАК Организация,
		|		ДанныеДокумента.Подразделение КАК Подразделение,
		|		ДанныеДокумента.БанковскийСчетНаправлениеДеятельности КАК НаправлениеДеятельностиБанковскийСчет,
		|		ДанныеДокумента.КассаНаправлениеДеятельности КАК НаправлениеДеятельностиКасса,
		|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
		|		ДанныеДокумента.Касса КАК Касса,
		|		&СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		&СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|		ДанныеДокумента.Валюта КАК ВалютаПлатежа,
		|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКонтрагента,
		|		НЕОПРЕДЕЛЕНО КАК Партнер,
		|		ДанныеДокумента.БанковскийСчетПолучатель.Владелец КАК Контрагент,
		|		НЕОПРЕДЕЛЕНО КАК Договор,
		|		НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
		|		ДанныеДокумента.СуммаДокумента КАК СуммаКВыплате,
		|		ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|		НЕОПРЕДЕЛЕНО КАК ИсточникГФУРасчетов,
		|		ДанныеДокумента.СверхЛимита КАК СверхЛимита
		|	
		|	ИЗ
		|		ДанныеДокументаШапка КАК ДанныеДокумента
		|";
	
		МассивТекстовЗапросов.Добавить(ТекстПодзапроса);
		
	КонецЕсли;
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов) Тогда
	
		ТекстПодзапроса = "ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА &ДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ДатаПлатежа
		|			КОГДА &ЖелательнаяДатаПлатежа <> ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА &ЖелательнаяДатаПлатежа
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(&Период, ДЕНЬ)
		|		КОНЕЦ КАК Период,
		|		ДанныеДокумента.ФормаОплатыНаличная КАК ФормаОплатыНаличная,
		|		ДанныеДокумента.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
		|		ДанныеДокумента.Статус КАК Статус,
		|		ВЫБОР
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
		|					И (ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСОсновногоДолга = ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|						ИЛИ ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПоступленияВыдачи = ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
		|			КОГДА &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам)
		|					И (ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСПроцентов = ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств
		|						ИЛИ ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.СтатьяДДСКомиссии = ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств)
		|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПроцентовПоКредитам)
		|			ИНАЧЕ &ХозяйственнаяОперация
		|		КОНЕЦ КАК ХозяйственнаяОперация,
		|		ДанныеДокумента.Организация КАК Организация,
		|		ДанныеДокумента.Подразделение КАК Подразделение,
		|		ДанныеДокумента.БанковскийСчетНаправлениеДеятельности КАК НаправлениеДеятельностиБанковскийСчет,
		|		ДанныеДокумента.КассаНаправлениеДеятельности КАК НаправлениеДеятельностиКасса,
		|		ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
		|		ДанныеДокумента.Касса КАК Касса,
		|		ТаблицаРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|		ТаблицаРасшифровкаПлатежа.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
		|		ДанныеДокумента.Валюта КАК ВалютаПлатежа,
		|		ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
		|		ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|		ТаблицаРасшифровкаПлатежа.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|		ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК Договор,
		|		НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
		|		ЕСТЬNULL(ТаблицаРасшифровкаПлатежа.Сумма, ДанныеДокумента.СуммаДокумента) КАК СуммаКВыплате,
		|		ДанныеДокумента.БанковскийСчет КАК ИсточникГФУДенежныхСредств,
		|		ТаблицаРасшифровкаПлатежа.ДоговорКредитаДепозита КАК ИсточникГФУРасчетов,
		|		ДанныеДокумента.СверхЛимита КАК СверхЛимита
		|
		|	ИЗ
		|		ДанныеДокументаШапка КАК ДанныеДокумента
		|			ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровкаПлатежа КАК ТаблицаРасшифровкаПлатежа
		|			ПО (ИСТИНА)
		|";
	
		МассивТекстовЗапросов.Добавить(ТекстПодзапроса);
		
	КонецЕсли;
	
	Если МассивТекстовЗапросов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстПодзапроса = СтрСоединить(МассивТекстовЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Период КАК Период,
	|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокумента.ФормаОплатыНаличная
	|						ТОГДА ДанныеДокумента.НаправлениеДеятельностиКасса
	|					ИНАЧЕ ДанныеДокумента.НаправлениеДеятельностиБанковскийСчет
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеДокумента.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|					ТОГДА ДанныеДокумента.НаправлениеДеятельностиКасса
	|				ИНАЧЕ ДанныеДокумента.НаправлениеДеятельностиБанковскийСчет
	|			КОНЕЦ
	|	КОНЕЦ КАК НаправлениеДеятельностиДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокумента.ФормаОплатыНаличная
	|						ТОГДА ДанныеДокумента.Касса
	|					ИНАЧЕ ДанныеДокумента.БанковскийСчет
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеДокумента.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|					ТОГДА ДанныеДокумента.Касса
	|				ИНАЧЕ ДанныеДокумента.БанковскийСчет
	|			КОНЕЦ
	|	КОНЕЦ КАК ДенежныеСредства,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована)
	|			ТОГДА ВЫБОР
	|					КОГДА ДанныеДокумента.ФормаОплатыНаличная
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДанныеДокумента.ФормаОплатыЗаявки = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Наличные)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредств.Безналичные)
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипДенежныхСредств,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяЦелевыхСредств КАК СтатьяЦелевыхСредств,
	|	ДанныеДокумента.ВалютаПлатежа КАК ВалютаПлатежа,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.НаправлениеДеятельностиКонтрагента.УчетРасчетовСПоставщиками, ЛОЖЬ) ТОГДА
	|			ДанныеДокумента.НаправлениеДеятельностиКонтрагента
	|	КОНЕЦ КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ОбъектРасчетов КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СверхЛимита = ЛОЖЬ
	|			ТОГДА СУММА(ДанныеДокумента.СуммаКВыплате)
	|	КОНЕЦ КАК СуммаКВыплатеВРамкахЛимита,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СверхЛимита = ИСТИНА
	|			ТОГДА СУММА(ДанныеДокумента.СуммаКВыплате)
	|	КОНЕЦ КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеДокумента.ИсточникГФУДенежныхСредств КАК ИсточникГФУДенежныхСредств,
	|	ДанныеДокумента.ИсточникГФУРасчетов КАК ИсточникГФУРасчетов,
	|	&Ссылка КАК ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ
	|	&ТаблицаПодзапроса КАК ДанныеДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Период,
	|	ДанныеДокумента.Статус,
	|	ДанныеДокумента.ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Подразделение,
	|	ДанныеДокумента.НаправлениеДеятельностиБанковскийСчет,
	|	ДанныеДокумента.НаправлениеДеятельностиКасса,
	|	ДанныеДокумента.БанковскийСчет,
	|	ДанныеДокумента.Касса,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.СтатьяЦелевыхСредств,
	|	ДанныеДокумента.ВалютаПлатежа,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ДанныеДокумента.НаправлениеДеятельностиКонтрагента.УчетРасчетовСПоставщиками, ЛОЖЬ) ТОГДА
	|			ДанныеДокумента.НаправлениеДеятельностиКонтрагента
	|	КОНЕЦ,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Договор,
	|	ДанныеДокумента.ОбъектРасчетов,
	|	ДанныеДокумента.ИсточникГФУДенежныхСредств,
	|	ДанныеДокумента.ИсточникГФУРасчетов,
	|	ДанныеДокумента.СверхЛимита,
	|	ДанныеДокумента.ФормаОплатыНаличная,
	|	ДанныеДокумента.ФормаОплатыЗаявки
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПодзапроса", "(" + ТекстПодзапроса +")");

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУПР") Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентПересчетаВВалютуУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
		Запрос.Параметры.Валюта, Константы.ВалютаУправленческогоУчета.Получить(), Запрос.Параметры.Период);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр", КоэффициентПересчетаВВалютуУпр);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаАналитикаУчетаПоПартнерам(Запрос, ДокументОбъект)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	Если Запрос.МенеджерВременныхТаблиц = Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос.Параметры, Запрос.Параметры.Ссылка, Запрос.МенеджерВременныхТаблиц, ДокументОбъект);
	
	Если Запрос.Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		
		СтруктураАналитики = Новый Структура;
		СтруктураАналитики.Вставить("Организация", Запрос.Параметры.Организация);
		СтруктураАналитики.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
		СтруктураАналитики.Вставить("Партнер", Справочники.Партнеры.ПустаяСсылка());
		СтруктураАналитики.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		СтруктураАналитики.Вставить("НаправлениеДеятельности", Справочники.НаправленияДеятельности.ПустаяСсылка());
		
		АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(СтруктураАналитики);
		
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);
	Иначе
		
		Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив; 
	
	Если ДокументОбъект = Неопределено 
		ИЛИ (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоКредитам
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймов
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка()) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ИдентификаторМетаданных                КАК ТипСсылки,
		|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
		|	&Организация                            КАК Организация,
		|	&ПартнерИзДокумента                     КАК Партнер,
		|	&БанковскийСчет                         КАК МестоХранения,
		|	&КонтрагентИзДокумента                  КАК Контрагент,
		|	&Подразделение                          КАК Подразделение,
		|	&Период                                 КАК ДатаДокументаИБ,
		|	&Ссылка                                 КАК Ссылка,
		
		|	&Номер                                  КАК НомерДокументаИБ,
		|	НЕОПРЕДЕЛЕНО                            КАК Статус,
		|	&КтоЗаявил                              КАК Ответственный,
		|	&Автор                                  КАК Автор,
		|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
		|	&НазначениеПлатежа                      КАК Дополнительно,
		|	&Комментарий                            КАК Комментарий,
		|	&Проведен                               КАК Проведен,
		|	&ПометкаУдаления                        КАК ПометкаУдаления,
		|	&Период                                 КАК ДатаПервичногоДокумента,
		|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
		|	&СуммаДокумента                         КАК Сумма,
		|	&Валюта                                 КАК Валюта,
		|	&Договор                                КАК Договор,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	ЛОЖЬ                                    КАК СторноИсправление,
		|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
		|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
		|	&Период                                 КАК ДатаОтраженияВУчете,
		|	&ПриоритетОплаты                        КАК Приоритет
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоставщику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеТаможне),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КонвертацияВалюты),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаПоКредитам),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеНаДепозиты),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймов),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|	)";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено 
		ИЛИ (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ИдентификаторМетаданных                КАК ТипСсылки,
		|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
		|	&Организация                            КАК Организация,
		|	&Партнер                                КАК Партнер,
		|	&БанковскийСчет                         КАК МестоХранения,
		|	ВЫБОР
		|		КОГДА &ПеречислениеСотрудникуЧерезБанк
		|			ТОГДА &КонтрагентИзДокумента
		|		ИНАЧЕ &ПодотчетноеЛицо
		|	КОНЕЦ                                   КАК Контрагент,
		|	&Подразделение                          КАК Подразделение,
		|	&Период                                 КАК ДатаДокументаИБ,
		|	&Ссылка                                 КАК Ссылка,
		
		|	&Номер                                  КАК НомерДокументаИБ,
		|	НЕОПРЕДЕЛЕНО                            КАК Статус,
		|	&КтоЗаявил                              КАК Ответственный,
		|	&Автор                                  КАК Автор,
		|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
		|	&НазначениеПлатежа                      КАК Дополнительно,
		|	&Комментарий                            КАК Комментарий,
		|	&Проведен                               КАК Проведен,
		|	&ПометкаУдаления                        КАК ПометкаУдаления,
		|	&Период                                 КАК ДатаПервичногоДокумента,
		|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
		|	&СуммаДокумента                         КАК Сумма,
		|	&Валюта                                 КАК Валюта,
		|	&Договор                                КАК Договор,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	ЛОЖЬ                                    КАК СторноИсправление,
		|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
		|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
		|	&Период                                 КАК ДатаОтраженияВУчете,
		|	&ПриоритетОплаты                        КАК Приоритет
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику)
		|	)";

		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено 
		ИЛИ (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ИдентификаторМетаданных                КАК ТипСсылки,
		|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
		|	&Организация                            КАК Организация,
		|	&Партнер                                КАК Партнер,
		|	&БанковскийСчет                         КАК МестоХранения,
		|	ДанныеДокумента.БанковскийСчетПолучатель.Владелец КАК Контрагент,
		|	&Подразделение                          КАК Подразделение,
		|	&Период                                 КАК ДатаДокументаИБ,
		|	&Ссылка                                 КАК Ссылка,
		
		|	&Номер                                  КАК НомерДокументаИБ,
		|	НЕОПРЕДЕЛЕНО                            КАК Статус,
		|	&КтоЗаявил                              КАК Ответственный,
		|	&Автор                                  КАК Автор,
		|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
		|	&НазначениеПлатежа                      КАК Дополнительно,
		|	&Комментарий                            КАК Комментарий,
		|	&Проведен                               КАК Проведен,
		|	&ПометкаУдаления                        КАК ПометкаУдаления,
		|	&Период                                 КАК ДатаПервичногоДокумента,
		|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
		|	&СуммаДокумента                         КАК Сумма,
		|	&Валюта                                 КАК Валюта,
		|	&Договор                                КАК Договор,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	ЛОЖЬ                                    КАК СторноИсправление,
		|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
		|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
		|	&Период                                 КАК ДатаОтраженияВУчете,
		|	&ПриоритетОплаты                        КАК Приоритет
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
		|	)";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено 
		ИЛИ (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
		ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ИдентификаторМетаданных                КАК ТипСсылки,
		|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
		|	&Организация                            КАК Организация,
		|	НЕОПРЕДЕЛЕНО                            КАК Партнер,
		|	&БанковскийСчет                         КАК МестоХранения,
		|	НЕОПРЕДЕЛЕНО                            КАК Контрагент,
		|	&Подразделение                          КАК Подразделение,
		|	&Период                                 КАК ДатаДокументаИБ,
		|	&Ссылка                                 КАК Ссылка,
		
		|	&Номер                                  КАК НомерДокументаИБ,
		|	НЕОПРЕДЕЛЕНО                            КАК Статус,
		|	&КтоЗаявил                              КАК Ответственный,
		|	&Автор                                  КАК Автор,
		|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
		|	&НазначениеПлатежа                      КАК Дополнительно,
		|	&Комментарий                            КАК Комментарий,
		|	&Проведен                               КАК Проведен,
		|	&ПометкаУдаления                        КАК ПометкаУдаления,
		|	&Период                                 КАК ДатаПервичногоДокумента,
		|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
		|	&СуммаДокумента                         КАК Сумма,
		|	&Валюта                                 КАК Валюта,
		|	НЕОПРЕДЕЛЕНО                            КАК Договор,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	ЛОЖЬ                                    КАК СторноИсправление,
		|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
		|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
		|	&Период                                 КАК ДатаОтраженияВУчете,
		|	&ПриоритетОплаты                        КАК Приоритет
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
		|	)";
	
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено 
		ИЛИ (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту) Тогда
	
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ИдентификаторМетаданных                КАК ТипСсылки,
		|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
		|	&Организация                            КАК Организация,
		|	&Партнер                                КАК Партнер,
		|	&БанковскийСчет                         КАК МестоХранения,
		|	&Контрагент                             КАК Контрагент,
		|	&Подразделение                          КАК Подразделение,
		|	&Период                                 КАК ДатаДокументаИБ,
		|	&Ссылка                                 КАК Ссылка,
		
		|	&Номер                                  КАК НомерДокументаИБ,
		|	НЕОПРЕДЕЛЕНО                            КАК Статус,
		|	&КтоЗаявил                              КАК Ответственный,
		|	&Автор                                  КАК Автор,
		|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
		|	&НазначениеПлатежа                      КАК Дополнительно,
		|	&Комментарий                            КАК Комментарий,
		|	&Проведен                               КАК Проведен,
		|	&ПометкаУдаления                        КАК ПометкаУдаления,
		|	&Период                                 КАК ДатаПервичногоДокумента,
		|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
		|	&СуммаДокумента                         КАК Сумма,
		|	&Валюта                                 КАК Валюта,
		|	ДанныеДокумента.ДоговорЭквайринга       КАК Договор,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	ЛОЖЬ                                    КАК СторноИсправление,
		|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
		|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
		|	&Период                                 КАК ДатаОтраженияВУчете,
		|	&ПриоритетОплаты                        КАК Приоритет
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперация В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту)
		|	)
		|";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено
		ИЛИ ДокументОбъект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту
		ИЛИ ДокументОбъект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ИдентификаторМетаданных                КАК ТипСсылки,
		|	&ХозяйственнаяОперацияПоЗарплате        КАК ХозяйственнаяОперация,
		|	&Организация                            КАК Организация,
		|	&ПартнерИзДокумента                     КАК Партнер,
		|	&БанковскийСчет                         КАК МестоХранения,
		|	ВЫБОР
		|		КОГДА &ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту)
		|			ТОГДА &КонтрагентИзДокумента
		|		КОГДА &ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
		|				И &ПеречислениеСотрудникуЧерезБанк
		|			ТОГДА &КонтрагентИзДокумента
		|		ИНАЧЕ &ПодотчетноеЛицо
		|	КОНЕЦ                                   КАК Контрагент,
		|	&Подразделение                          КАК Подразделение,
		|	&Период                                 КАК ДатаДокументаИБ,
		|	&Ссылка                                 КАК Ссылка,
		
		|	&Номер                                  КАК НомерДокументаИБ,
		|	НЕОПРЕДЕЛЕНО                            КАК Статус,
		|	&КтоЗаявил                              КАК Ответственный,
		|	&Автор                                  КАК Автор,
		|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
		|	&НазначениеПлатежа                      КАК Дополнительно,
		|	&Комментарий                            КАК Комментарий,
		|	&Проведен                               КАК Проведен,
		|	&ПометкаУдаления                        КАК ПометкаУдаления,
		|	&Период                                 КАК ДатаПервичногоДокумента,
		|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
		|	&СуммаДокумента                         КАК Сумма,
		|	&Валюта                                 КАК Валюта,
		|	&Договор                                КАК Договор,
		|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
		|	ЛОЖЬ                                    КАК СторноИсправление,
		|	НЕОПРЕДЕЛЕНО                            КАК СторнируемыйДокумент,
		|	НЕОПРЕДЕЛЕНО                            КАК ИсправляемыйДокумент,
		|	&Период                                 КАК ДатаОтраженияВУчете,
		|	&ПриоритетОплаты                        КАК Приоритет
		|ИЗ
		|	ДанныеДокументаШапка КАК ДанныеДокумента
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|	И &ХозяйственнаяОперацияПоЗарплате В (
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыПоЗарплатномуПроекту),
		|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
		|	)";
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	Если ДокументОбъект <> Неопределено И МассивТекстовЗапроса.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Если ДокументОбъект = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаШапка", "Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ДобавитьТекстыОтраженияВзаиморасчетов(Запрос, ТекстыЗапроса, Регистры, ДокументОбъект)
	
	#Область НаправленияДеятельности
	
	ИмяРегистра = "ВременнаяТаблицаНаправленияДеятельности";
	
	ТекстЗапросаНаправленияДеятельности = 
		"ВЫБРАТЬ
		|	Таблица.ОбъектРасчетов КАК ОбъектРасчетов
		|ИЗ
		|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК Таблица";
		
	ТекстЗапросаНаправленияДеятельности = ВзаиморасчетыСервер.ПолучитьТаблицуНаправленийДеятельности(ТекстЗапросаНаправленияДеятельности);

	ТекстыЗапроса.Добавить(ТекстЗапросаНаправленияДеятельности, ИмяРегистра);
	
	#КонецОбласти
	
	#Область РасчетыСКлиентами
	
	ТекстЗапросаКлиенты = "";
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию) 
		И (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
			ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
			ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате) 
		И ДокументОбъект.КонтролироватьОплатуПоОбъектамРасчетов Тогда
		
		ТекстЗапросаКлиенты = "
			|ВЫБРАТЬ
			|	Таблица.Ссылка                                                КАК Ссылка,
			|	ВЫБОР КОГДА ДанныеДокументаШапка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
			|		КОГДА &ЕстьПодарочныйСертификат = ИСТИНА
			|			ТОГДА &Партнер
			|		ИНАЧЕ Таблица.Партнер
			|	КОНЕЦ КАК Партнер,
			|	Таблица.ОбъектРасчетов                                        КАК ОбъектРасчетов,
			|	Таблица.ВалютаВзаиморасчетов                                  КАК ВалютаВзаиморасчетов,
			|	Таблица.СуммаВзаиморасчетов                                   КАК Оплачивается,
			|	Таблица.СтатьяДвиженияДенежныхСредств                         КАК СтатьяДвиженияДенежныхСредств,
			|	
			|	ДанныеДокументаШапка.Номер                                    КАК НомерРегистратора,
			|	ДанныеДокументаШапка.Дата                                     КАК ДатаРегистратора,
			|	ДанныеДокументаШапка.ХозяйственнаяОперация                    КАК ХозяйственнаяОперация,
			|	ДанныеДокументаШапка.ФормаОплатыЗаявки                        КАК ФормаОплаты,
			|	ДанныеДокументаШапка.Валюта                                   КАК ВалютаДокумента
			|ИЗ
			|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК Таблица
			|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка
			|		ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
			|";
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПроведениеЗаявкиНаВозвратОплатыКлиенту(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаКлиенты);
	
	#КонецОбласти
	
	#Область РасчетыСПоставщиками
	
	ТекстЗапросаПоставщики = "";
	
	Если (ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			ИЛИ ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне) 
		И (ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована
			ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована
			ИЛИ ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате)
		И ДокументОбъект.КонтролироватьОплатуПоОбъектамРасчетов Тогда
				
	ТекстЗапросаПоставщики = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                                 КАК Ссылка,
		|	ВЫБОР КОГДА ДанныеДокументаШапка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
		|		КОГДА &ЕстьПодарочныйСертификат = ИСТИНА
		|			ТОГДА &Партнер
		|		ИНАЧЕ Таблица.Партнер
		|	КОНЕЦ КАК Партнер,
		|	
		|	Таблица.ВалютаВзаиморасчетов                                   КАК ВалютаВзаиморасчетов,
		|	Таблица.СуммаВзаиморасчетов                                    КАК УвеличениеОплачивается,
		|	Таблица.ОбъектРасчетов                                         КАК ОбъектРасчетов,
		|	Таблица.СтатьяДвиженияДенежныхСредств                          КАК СтатьяДвиженияДенежныхСредств,
		|	
		|	ДанныеДокументаШапка.Номер                                     КАК НомерРегистратора,
		|	ДанныеДокументаШапка.Дата                                      КАК ДатаРегистратора,
		|	ДанныеДокументаШапка.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
		|	ДанныеДокументаШапка.ФормаОплатыЗаявки                         КАК ФормаОплаты,
		|	ДанныеДокументаШапка.Валюта                                    КАК ВалютаДокумента
		|	
		|ИЗ
		|	ДанныеДокументаТаблицаРасшифровкаПлатежа КАК Таблица
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка
		|		ПО Таблица.Ссылка = ДанныеДокументаШапка.Ссылка
		|ГДЕ
		|	Таблица.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
		|";
	КонецЕсли;
	
	ВзаиморасчетыСервер.ПроведениеЗаявкиНаОплатуПоставщику(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаПоставщики);
	
	#КонецОбласти
	
КонецПроцедуры

Функция ЗапросЗакрытияДенежныеСредстваКВыплате()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеРегистра.БанковскийСчетКасса                  КАК БанковскийСчетКасса,
	|	ДанныеРегистра.Получатель                           КАК Получатель,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	-ДанныеРегистра.СуммаОстаток                        КАК Сумма,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(, ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)) КАК ДанныеРегистра
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияРасчетыСПоставщиками()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов                       КАК ОбъектРасчетов,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	СУММА(ВЫБОР ДанныеРегистра.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДанныеРегистра.Оплачивается
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Оплачивается
	|	КОНЕЦ) КАК Оплачивается,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР ДанныеРегистра.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДанныеРегистра.Оплачивается
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Оплачивается
	|	КОНЕЦ) <> 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияРасчетыСКлиентами()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов                       КАК ОбъектРасчетов,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	СУММА(ВЫБОР ДанныеРегистра.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДанныеРегистра.Оплачивается
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Оплачивается
	|	КОНЕЦ) КАК Оплачивается,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|	
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР ДанныеРегистра.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДанныеРегистра.Оплачивается
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Оплачивается
	|	КОНЕЦ) <> 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияРасчетыПоФинансовымИнструментам()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам            КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор                              КАК Договор,
	|	ДанныеРегистра.ТипСуммы                             КАК ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент                    КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	СУММА(ВЫБОР ДанныеРегистра.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДанныеРегистра.Оплачивается
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Оплачивается
	|	КОНЕЦ) КАК Оплачивается,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР ДанныеРегистра.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
	|			-ДанныеРегистра.Оплачивается
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
	|			ДанныеРегистра.Оплачивается
	|	КОНЕЦ) <> 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияДвиженияДенежныхСредств()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	МИНИМУМ(ДанныеРегистра.Период)                      КАК ПериодИсходный,
	|	ДанныеРегистра.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	ДанныеРегистра.Подразделение                        КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств        КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	ДанныеРегистра.КорДенежныеСредства                  КАК КорДенежныеСредства,
	|	ДанныеРегистра.КорТипДенежныхСредств                КАК КорТипДенежныхСредств,
	|	ДанныеРегистра.КорНаправлениеДеятельности           КАК КорНаправлениеДеятельности,
	|	СУММА(ДанныеРегистра.СуммаВВалюте)
	|	 - СУММА(ДанныеРегистра.СуммаКВыплатеВРамкахЛимита) КАК СуммаКВыплатеВРамкахЛимита,
	|	0                                                   КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.КорДенежныеСредства,
	|	ДанныеРегистра.КорТипДенежныхСредств,
	|	ДанныеРегистра.КорНаправлениеДеятельности,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.СуммаВВалюте) - СУММА(ДанныеРегистра.СуммаКВыплатеВРамкахЛимита) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	МИНИМУМ(ДанныеРегистра.Период)                      КАК ПериодИсходный,
	|	ДанныеРегистра.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	ДанныеРегистра.Подразделение                        КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств        КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	ДанныеРегистра.КорДенежныеСредства                  КАК КорДенежныеСредства,
	|	ДанныеРегистра.КорТипДенежныхСредств                КАК КорТипДенежныхСредств,
	|	ДанныеРегистра.КорНаправлениеДеятельности           КАК КорНаправлениеДеятельности,
	|	0                                                   КАК СуммаКВыплатеВРамкахЛимита,
	|	СУММА(ДанныеРегистра.СуммаВВалюте)
	|	 - СУММА(ДанныеРегистра.СуммаКВыплатеСверхЛимита)   КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныхСредств КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельности,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.КорДенежныеСредства,
	|	ДанныеРегистра.КорТипДенежныхСредств,
	|	ДанныеРегистра.КорНаправлениеДеятельности,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.СуммаВВалюте) - СУММА(ДанныеРегистра.СуммаКВыплатеСверхЛимита) < 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияДвиженияДенежныеСредстваДоходыРасходы()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	МИНИМУМ(ДанныеРегистра.Период)                      КАК ПериодИсходный,
	|	ДанныеРегистра.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	ДанныеРегистра.Подразделение                        КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС            КАК НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ПодразделениеДоходовРасходов         КАК ПодразделениеДоходовРасходов,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств        КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи        КАК НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов                КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов                     КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов                    КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов             КАК АналитикаАктивовПассивов,
	|	СУММА(ДанныеРегистра.СуммаВВалюте)
	|	 - СУММА(ДанныеРегистра.СуммаКВыплатеВРамкахЛимита) КАК СуммаКВыплатеВРамкахЛимита,
	|	0                                                   КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ПодразделениеДоходовРасходов,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.СуммаВВалюте) - СУММА(ДанныеРегистра.СуммаКВыплатеВРамкахЛимита) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	МИНИМУМ(ДанныеРегистра.Период)                      КАК ПериодИсходный,
	|	ДанныеРегистра.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	ДанныеРегистра.Подразделение                        КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС            КАК НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ПодразделениеДоходовРасходов         КАК ПодразделениеДоходовРасходов,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств        КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта                               КАК Валюта,
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи        КАК НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов                КАК СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов                     КАК АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов                    КАК АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов             КАК АналитикаАктивовПассивов,
	|	0                                                   КАК СуммаКВыплатеВРамкахЛимита,
	|	СУММА(ДанныеРегистра.СуммаВВалюте) - СУММА(ДанныеРегистра.СуммаКВыплатеСверхЛимита) КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваДоходыРасходы КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС,
	|	ДанныеРегистра.ПодразделениеДоходовРасходов,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.Валюта,
	|	ДанныеРегистра.НаправлениеДеятельностиСтатьи,
	|	ДанныеРегистра.СтатьяДоходовРасходов,
	|	ДанныеРегистра.АналитикаДоходов,
	|	ДанныеРегистра.АналитикаРасходов,
	|	ДанныеРегистра.АналитикаАктивовПассивов,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.СуммаВВалюте) - СУММА(ДанныеРегистра.СуммаКВыплатеСверхЛимита) < 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияДвиженияДенежныеСредстваКонтрагент()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	МИНИМУМ(ДанныеРегистра.Период)                      КАК ПериодИсходный,
	|	ДанныеРегистра.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	ДанныеРегистра.Подразделение                        КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС            КАК НаправлениеДеятельностиДС,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств        КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа                        КАК ВалютаПлатежа,
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента   КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер                              КАК Партнер,
	|	ДанныеРегистра.Контрагент                           КАК Контрагент,
	|	ДанныеРегистра.Договор                              КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов                       КАК ОбъектРасчетов,
	|	СУММА(ДанныеРегистра.СуммаОплатыВВалютеПлатежа)
	|	 - СУММА(ДанныеРегистра.СуммаКВыплатеВРамкахЛимита) КАК СуммаКВыплатеВРамкахЛимита,
	|	0                                                   КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ОбъектРасчетов
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.СуммаОплатыВВалютеПлатежа) - СУММА(ДанныеРегистра.СуммаКВыплатеВРамкахЛимита) < 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                             КАК Период,
	|	МИНИМУМ(ДанныеРегистра.Период)                      КАК ПериодИсходный,
	|	ДанныеРегистра.ХозяйственнаяОперация                КАК ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация                          КАК Организация,
	|	ДанныеРегистра.Подразделение                        КАК Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС            КАК НаправлениеДеятельностиДС,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств        КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа                        КАК ВалютаПлатежа,
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента   КАК НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер                              КАК Партнер,
	|	ДанныеРегистра.Контрагент                           КАК Контрагент,
	|	ДанныеРегистра.Договор                              КАК Договор,
	|	ДанныеРегистра.ОбъектРасчетов                       КАК ОбъектРасчетов,
	|	0                                                   КАК СуммаКВыплатеВРамкахЛимита,
	|	СУММА(ДанныеРегистра.СуммаОплатыВВалютеПлатежа)
	|	 - СУММА(ДанныеРегистра.СуммаКВыплатеСверхЛимита)   КАК СуммаКВыплатеСверхЛимита,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств  КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                              КАК Сторно
	|ИЗ
	|	РегистрНакопления.ДвиженияДенежныеСредстваКонтрагент КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.ХозяйственнаяОперация,
	|	ДанныеРегистра.Организация,
	|	ДанныеРегистра.Подразделение,
	|	ДанныеРегистра.НаправлениеДеятельностиДС,
	|	ДанныеРегистра.СтатьяДвиженияДенежныхСредств,
	|	ДанныеРегистра.ВалютаПлатежа,
	|	ДанныеРегистра.ЗаявкаНаРасходованиеДенежныхСредств,
	|	ДанныеРегистра.НаправлениеДеятельностиКонтрагента,
	|	ДанныеРегистра.Партнер,
	|	ДанныеРегистра.Контрагент,
	|	ДанныеРегистра.Договор,
	|	ДанныеРегистра.ОбъектРасчетов
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.СуммаОплатыВВалютеПлатежа) - СУММА(ДанныеРегистра.СуммаКВыплатеСверхЛимита) < 0
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗакрытияЛимитыРасходаДенежныхСредств()
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	СправочникВалюты.Ссылка КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента,
	|	Справочник.Валюты КАК СправочникВалюты
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	СправочникВалюты.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	СправочникВалюты.Ссылка КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация
	|ИЗ
	|	Документ.ЗаявкаНаКомандировку КАК ДанныеДокумента,
	|	Справочник.Валюты КАК СправочникВалюты
	|ГДЕ
	|	ДанныеДокумента.Ссылка В (&Заявка)
	|СГРУППИРОВАТЬ ПО
	|	СправочникВалюты.Ссылка,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	ВалютаВзаиморасчетов,
	|	Дата,
	|	Организация
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, "ТаблицаПериодов");
	
	ФинансовыеИнструменты.ТекстЗапросаВтКоэффициентыПересчетаВалют(ТекстыЗапроса, "ВтКоэффициентыПересчетаВалют", Истина);
	
	МассивТекстовЗапросов = Новый Массив;
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстовЗапросов.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		МассивТекстовЗапросов.Добавить(ТекстЗапроса.Значение + ОбщегоНазначения.РазделительПакетаЗапросов());
	КонецЦикла;
	ТекстЗапроса = СтрСоединить(МассивТекстовЗапросов, Символы.ПС);
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеДвижений.ПериодИсходный, МЕСЯЦ) КАК Период,
	|	ДанныеДвижений.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
	|			ТОГДА ДанныеДвижений.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
	|			ТОГДА ДанныеДвижений.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ДанныеДвижений.СуммаКВыплатеВРамкахЛимита * КурсыПересчетаВВалютуУпрУчета.КоэффициентПересчетаУпр КАК РасходВПределахЛимита,
	|	ДанныеДвижений.СуммаКВыплатеСверхЛимита * КурсыПересчетаВВалютуУпрУчета.КоэффициентПересчетаУпр КАК РасходСверхЛимита,
	|	ДанныеДвижений.ЗаявкаНаРасходованиеДенежныхСредств      КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                                  КАК Сторно
	|ИЗ
	|	&ЗапросЗакрытияДвиженияДенежныхСредств КАК ДанныеДвижений
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтКоэффициентыПересчетаВалют КАК КурсыПересчетаВВалютуУпрУчета
	|	ПО
	|		КурсыПересчетаВВалютуУпрУчета.ВалютаВзаиморасчетов = ДанныеДвижений.Валюта
	|		И КурсыПересчетаВВалютуУпрУчета.Дата = ДанныеДвижений.ЗаявкаНаРасходованиеДенежныхСредств.Дата
	|		И КурсыПересчетаВВалютуУпрУчета.Организация = ДанныеДвижений.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеДвижений.ПериодИсходный, МЕСЯЦ) КАК Период,
	|	ДанныеДвижений.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
	|			ТОГДА ДанныеДвижений.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
	|			ТОГДА ДанныеДвижений.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ДанныеДвижений.СуммаКВыплатеВРамкахЛимита * КурсыПересчетаВВалютуУпрУчета.КоэффициентПересчетаУпр КАК РасходВПределахЛимита,
	|	ДанныеДвижений.СуммаКВыплатеСверхЛимита * КурсыПересчетаВВалютуУпрУчета.КоэффициентПересчетаУпр КАК РасходСверхЛимита,
	|	ДанныеДвижений.ЗаявкаНаРасходованиеДенежныхСредств      КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                                  КАК Сторно
	|ИЗ
	|	&ЗапросЗакрытияДвиженияДенежныеСредстваДоходыРасходы КАК ДанныеДвижений
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтКоэффициентыПересчетаВалют КАК КурсыПересчетаВВалютуУпрУчета
	|	ПО
	|		КурсыПересчетаВВалютуУпрУчета.ВалютаВзаиморасчетов = ДанныеДвижений.Валюта
	|		И КурсыПересчетаВВалютуУпрУчета.Дата = ДанныеДвижений.ЗаявкаНаРасходованиеДенежныхСредств.Дата
	|		И КурсыПересчетаВВалютуУпрУчета.Организация = ДанныеДвижений.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеДвижений.ПериодИсходный, МЕСЯЦ) КАК Период,
	|	ДанныеДвижений.СтатьяДвиженияДенежныхСредств   КАК СтатьяДвиженияДенежныхСредств,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоОрганизациям
	|			ТОГДА ДанныеДвижений.Организация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА &ИспользоватьЛимитыРасходаПоПодразделениям
	|			ТОГДА ДанныеДвижений.Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ КАК Подразделение,
	|	ДанныеДвижений.СуммаКВыплатеВРамкахЛимита * КурсыПересчетаВВалютуУпрУчета.КоэффициентПересчетаУпр КАК РасходВПределахЛимита,
	|	ДанныеДвижений.СуммаКВыплатеСверхЛимита * КурсыПересчетаВВалютуУпрУчета.КоэффициентПересчетаУпр КАК РасходСверхЛимита,
	|	ДанныеДвижений.ЗаявкаНаРасходованиеДенежныхСредств      КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ИСТИНА                                                  КАК Сторно
	|ИЗ
	|	&ЗапросЗакрытияДвиженияДенежныеСредстваКонтрагент КАК ДанныеДвижений
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтКоэффициентыПересчетаВалют КАК КурсыПересчетаВВалютуУпрУчета
	|	ПО
	|		КурсыПересчетаВВалютуУпрУчета.ВалютаВзаиморасчетов = ДанныеДвижений.ВалютаПлатежа
	|		И КурсыПересчетаВВалютуУпрУчета.Дата = ДанныеДвижений.ЗаявкаНаРасходованиеДенежныхСредств.Дата
	|		И КурсыПересчетаВВалютуУпрУчета.Организация = ДанныеДвижений.Организация
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ЗапросЗакрытияДвиженияДенежныхСредств", "(" + ЗапросЗакрытияДвиженияДенежныхСредств() + ")");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ЗапросЗакрытияДвиженияДенежныеСредстваДоходыРасходы", "(" + ЗапросЗакрытияДвиженияДенежныеСредстваДоходыРасходы() + ")");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ЗапросЗакрытияДвиженияДенежныеСредстваКонтрагент", "(" + ЗапросЗакрытияДвиженияДенежныеСредстваКонтрагент() + ")");
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "ЗаявкаНаРасходованиеДенежныхСредств" дополнительные проверки отсутствуют
	
КонецФункции

Функция СтатьяДвиженияДенежныхСредствДокумента(ДанныеДокумента)
	
	Если ЗначениеЗаполнено(ДанныеДокумента.СтатьяДвиженияДенежныхСредств) Тогда
		СтатьяДвиженияДенежныхСредств = ДанныеДокумента.СтатьяДвиженияДенежныхСредств;
	Иначе
		СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(
			ДанныеДокумента.ХозяйственнаяОперация, ДанныеДокумента.Валюта);
	КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;
	
КонецФункции

// Операции взаиморасчетов.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ХозяйственныеОперации - Операции взаиморасчетов
Функция ОперацииВзаиморасчетов() Экспорт
	ОперацииВзаиморасчетов = Новый Массив;
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ОплатаПоставщику);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеТаможне);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту);
	ОперацииВзаиморасчетов.Добавить(Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	Возврат ОперацииВзаиморасчетов;
КонецФункции

#КонецОбласти


#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Параметры:
//    ТекущиеДела - ТаблицаЗначений - ТекущиеДелаСлужебный.НоваяТаблицаТекущихДел().
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ЗаявкаНаРасходованиеДенежныхСредств.Форма.ФормаСпискаЗаявокКСогласованию";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств))
		И (ПравоДоступа("Изменение", Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств)
			ИЛИ ПраваПользователяПовтИсп.СогласованиеЗаявокНаРасходованиеДенежныхСредств())
		И ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована)
	|				ТОГДА ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ЗаявкиНаОплатуКСогласованию,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЗаявкаНаРасходованиеДенежныхСредств.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована)
	|					И ЗаявкаНаРасходованиеДенежныхСредств.ДатаПлатежа < НАЧАЛОПЕРИОДА(&ДатаАктуальности, ДЕНЬ)
	|				ТОГДА ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ЗаявкиНаОплатуКСогласованиюПросрочено
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Проведен";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	// ЗаявкиНаОплату
	ДелоРодитель = ТекущиеДела.Добавить();
	ДелоРодитель.Идентификатор  = "ЗаявкиНаОплату";
	ДелоРодитель.Представление  = НСтр("ru = 'Заявки на оплату'");
	ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
	
	// ЗаявкиНаОплатуКСогласованию
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	ПараметрыОтбора.Вставить("ДатаОплаты", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Приоритет", Справочники.Приоритеты.ПустаяСсылка());
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаявкиНаОплатуКСогласованию";
	Дело.ЕстьДела       = Результат.ЗаявкиНаОплатуКСогласованию > 0;
	Дело.Представление  = НСтр("ru = 'Заявки к согласованию'");
	Дело.Количество     = Результат.ЗаявкиНаОплатуКСогласованию;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаявкиНаОплату";
	
	// ЗаявкиНаОплатуКСогласованиюПросрочено
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована);
	ПараметрыОтбора.Вставить("ДатаОплаты", НачалоДня(ОбщиеПараметрыЗапросов.ТекущаяДата - 86400));
	ПараметрыОтбора.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Приоритет", Справочники.Приоритеты.ПустаяСсылка());
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ЗаявкиНаОплатуКСогласованиюПросрочено";
	Дело.ЕстьДела       = Результат.ЗаявкиНаОплатуКСогласованиюПросрочено > 0;
	Дело.Представление  = НСтр("ru = 'Согласование просрочено'");
	Дело.Количество     = Результат.ЗаявкиНаОплатуКСогласованиюПросрочено;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ЗаявкиНаОплату";
	
	Если Результат.ЗаявкиНаОплатуКСогласованию > 0
		Или Результат.ЗаявкиНаОплатуКСогласованиюПросрочено > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы
//
// Параметры:
//  (входные)
//    МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//    ПараметрыПечати - Структура - дополнительные настройки печати;
//  (выходные)
//   КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы.
//   ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                             представление - имя области в которой был выведен объект;
//   ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	ЗаявкаНаРасходованиеДенежныхСредствЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e5bdd7c-01c7-4179-a14c-434aca67b68f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Заявка на расходование денежных средств"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- очистка заявок от ""Пустых"" объектов расчетов и перезаполнение флага ""Контролировать оплату по объектам расчетов"";'"));
	
	//++ Локализация
	СписокОписаний.Добавить(НСтр("ru = '- замена операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"" с признаком ""Оплата самозанятому"";'"));
	//-- Локализация
	
	СписокОписаний.Добавить(НСтр("ru = '- заполнение реквизита ""налог"" по данным реквизита  ""Налог (не используется)"";'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с типом перечисление типы налогов на справочник виды налогов и взносов';"));

	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|//Очистка от ""Пустых"" объектов расчетов.
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРасшифровки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ДанныеРасшифровки
	|ГДЕ
	|	ДанныеРасшифровки.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|	И ДанныеРасшифровки.ОбъектРасчетов.Объект = Неопределено
	|
	//++ Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УдалитьОплатаСамозанятому)
	//-- Локализация
	|
	|
	|ОБЪЕДИНИТЬ
	|
	|//Заполнение реквизита ТипНалога
	|ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	(ЗаявкаНаРасходованиеДенежныхСредств.УдалитьТипНалога <> ЗНАЧЕНИЕ(Перечисление.УдалитьТипыНалогов.ПустаяСсылка)
	|	И ЗаявкаНаРасходованиеДенежныхСредств.ТипНалога = ЗНАЧЕНИЕ(Справочник.ВидыНалоговВзносов.ПустаяСсылка))
	|	ИЛИ (ЗаявкаНаРасходованиеДенежныхСредств.АналитикаАктивовПассивов ССЫЛКА Перечисление.УдалитьТипыНалогов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.АналитикаАктивовПассивов ССЫЛКА Перечисление.УдалитьТипыНалогов
	|
	|";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать документы ""Заявка на расходование денежных средств"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- очистка заявок от ""Пустых"" объектов расчетов и перезаполнение флага ""Контролировать оплату по объектам расчетов"";'"));
	
	//++ Локализация
	СписокОписаний.Добавить(НСтр("ru = '- замена операции ""Оплата самозанятому"" на операцию ""Оплата поставщику"" с признаком ""Оплата самозанятому"";'"));
	//-- Локализация
	
	СписокОписаний.Добавить(НСтр("ru = '- заполнение реквизита ""Налог"" по данным реквизита  ""Налог (не используется)"";'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с типом перечисление типы налогов на справочник виды налогов и взносов';"));

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ДанныеДокумента
		|		ПО ТаблицаДокументов.Ссылка = ДанныеДокумента.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Документ = Запрос.Выполнить().Выбрать();
	
	Пока Документ.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Документ.Ссылка, Документ.ВерсияДанных, Параметры.Очередь); // ДокументОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда

				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "УдалитьТипНалога", "ТипНалога");
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "АналитикаАктивовПассивов");
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "РасшифровкаПлатежа.АналитикаАктивовПассивов");
				
				Если ДокументОбъект.Модифицированность() Тогда
					ОбъектИзменен = Истина;
				КонецЕсли;
				
				//Очистка от "Пустых" объектов расчетов
				ОбъектыРасчетов = ДокументОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ОбъектРасчетов");
				ОбъектыОбъектовРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОбъектыРасчетов,"Объект");
				Для Каждого Стр Из ДокументОбъект.РасшифровкаПлатежа Цикл
					Если ЗначениеЗаполнено(Стр.ОбъектРасчетов) И НЕ ЗначениеЗаполнено(ОбъектыОбъектовРасчетов[Стр.ОбъектРасчетов]) Тогда
						Стр.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка();
						ДокументОбъект.КонтролироватьОплатуПоОбъектамРасчетов = Ложь;
						ОбъектИзменен = Истина;
					КонецЕсли;
				КонецЦикла;
				
				//++ Локализация
				Если ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.УдалитьОплатаСамозанятому Тогда
					
					ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
					ДокументОбъект.ОперацияССамозанятым = Истина;
					ОбъектИзменен = Истина;
					
				КонецЕсли;
				//-- Локализация
					
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Документ.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		СписокОписаний.Добавить(НСтр("ru = 'Всего пропущено: %1'"));
		ТекстСообщения = СтрШаблон(СтрСоединить(СписокОписаний, Символы.ПС), ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана порция заявок на расходование ДС: %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, , ,
			ТекстСообщения);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
