#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Панель1СМаркировка

// Возвращает текст запроса для получения общего количества документов в работе
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ() Экспорт
	
	ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ = "";
	ИнтеграцияГИСМПереопределяемый.ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ(ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ);
	Возврат ТекстЗапросаЗаявкиНаВыпускКиЗГИСМ;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите() Экспорт
	
	ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите = "";
	ИнтеграцияГИСМПереопределяемый.ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите(ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите);
	Возврат ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОформите;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|ПО
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = ЗаявкаНаВыпускКиЗГИСМ.Ссылка
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыЗаявокНаВыпускКиЗГИСМ.ДальнейшееДействие В
	|		(ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПолучитеСчетНаОплату),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОплатитеСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПодтвердитеПолучение),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ИсправьтеНекорректныеРеквизиты),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.Аннулируйте))
	|	И (ЗаявкаНаВыпускКиЗГИСМ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (ЗаявкаНаВыпускКиЗГИСМ.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания.
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаЗаявкиНаВыпускКиЗГИСМОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыЗаявокНаВыпускКиЗГИСМ.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК СтатусыЗаявокНаВыпускКиЗГИСМ
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|ПО
	|	СтатусыЗаявокНаВыпускКиЗГИСМ.ТекущаяЗаявкаНаВыпускКиЗ = ЗаявкаНаВыпускКиЗГИСМ.Ссылка
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка ЕСТЬ НЕ NULL
	|	И СтатусыЗаявокНаВыпускКиЗГИСМ.ДальнейшееДействие В
	|	(	ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеФормированиеСчетаНаОплату),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПодтверждениеПолучения),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеУтверждениеФНС),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПоступлениеТоваров),
	|		ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеУведомлениеОВыпускеКиЗ))
	|	И (ЗаявкаНаВыпускКиЗГИСМ.Организация = &Организация
	|		ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|	И (ЗаявкаНаВыпускКиЗГИСМ.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеГИСМ

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЗаявокНаВыпускКиЗГИСМ - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	НовыйСтатус        = Неопределено;
	ДальнейшееДействие = Неопределено;
	
	ИспользоватьАвтоматическийОбмен = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюОтправкуПолучениеДанныхГИСМ");
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных Тогда
		
		НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.КПередаче;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения Тогда
		
		НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбрабатываетсяПоступление;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки Тогда
		
		НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.КЗакрытию;
		Если ИспользоватьАвтоматическийОбмен Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПередачуДанныхРегламентнымЗаданием;
		Иначе
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ВыполнитеОбмен;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбновитьСтатус(
		ДокументСсылка,
		НовыйСтатус,
		ДальнейшееДействие);
	
	Если Операция <> Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения Тогда
		НовыйСтатус = НовыйСтатусПослеОбновления;
	КонецЕсли;
	
	Возврат НовыйСтатус;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийГИСМ - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЗаявокНаВыпускКиЗГИСМ - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	ОбновитьСтатус         = Истина;
	НовыйСтатус            = Неопределено;
	ДальнейшееДействие     = Неопределено;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Передана;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ПринятаВОбработкуГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеФормированиеСчетаНаОплату;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.НаМодерации Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.НаУтвержденииФНС;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеУтверждениеФНС;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.ОтклоненаГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ПередайтеДанные;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтвержденияПолучениеКвитанции Тогда
		
		ОбновитьСтатус = Ложь;
		НовыйСтатус = ТекущийСтатус(ДокументСсылка);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.КЗакрытиюПередано;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ОжидайтеПолучениеКвитанцииОФиксации;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.КЗакрытиюОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку;
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявкиПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.Закрыта;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.НеТребуется;
			
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Отклонено
			ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Ошибка Тогда
			
			НовыйСтатус = Перечисления.СтатусыЗаявокНаВыпускКиЗГИСМ.КЗакрытиюОтклоненоГИСМ;
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюГИСМ.ЗакройтеЗаявку;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НовыйСтатус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбновитьСтатус Тогда
		НовыйСтатус = РегистрыСведений.СтатусыЗаявокНаВыпускКиЗГИСМ.ОбновитьСтатус(
			ДокументСсылка,
			НовыйСтатус,
			ДальнейшееДействие);
	КонецЕсли;
	
	Возврат НовыйСтатус;
	
КонецФункции

// Обновить номер ГИСМ в документе
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ - Документ-объект
//  НомерГИСМ - Число - Новый номер ГИСМ.
//
Процедура ОбновитьНомерГИСМ(ДокументОбъект, НомерГИСМ) Экспорт
	
	ДокументОбъект.НомерГИСМ = НомерГИСМ;
	
КонецПроцедуры

// Обновить состояние подтверждения
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаявкаНаВыпускКиЗГИСМ - Документ-объект
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ
//  Сообщение - СправочникСсылка.ГИСМПрисоединенныеФайлы - Полученное сообщение-подтверждение из ГИСМ
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийГИСМ - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение- Новые состояния подтверждения.
//
Функция ОбновитьСостояниеПодтверждения(ДокументОбъект, Операция, Сообщение, СтатусОбработки) Экспорт
	
	Состояния = Новый Соответствие;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.ПодготовленоКПередаче Тогда
			НовоеСостояние = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ПодготовленоКПередаче;
		ИначеЕсли СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			НовоеСостояние = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.Передано;
		Иначе
			НовоеСостояние = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ;
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтвержденияПолучениеКвитанции Тогда
		
		Если СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийГИСМ.Принято Тогда
			НовоеСостояние = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ПринятоГИСМ;
		Иначе
			НовоеСостояние = Перечисления.СостоянияОтправкиПодтвержденияГИСМ.ОтклоненоГИСМ;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтвержденияПолучениеКвитанции Тогда
		СообщениеПередачаПодтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сообщение, "СообщениеОснование");
		СообщениеПередачаПодтверждения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеПередачаПодтверждения, "СообщениеОснование");
	Иначе
		СообщениеПередачаПодтверждения = Сообщение;
	КонецЕсли;
	
	КонвертSOAP = ИнтеграцияГИСМВызовСервера.КонвертSOAPИзПротокола(СообщениеПередачаПодтверждения);
	
	ТекстСообщенияXML = ИнтеграцияГИСМВызовСервера.ТекстВходящегоСообщенияXML(КонвертSOAP);
	
	ИмяПакета = "query";
	ПервичныеДанные = ИнтеграцияГИСМВызовСервера.ПрочитатьПервичныеДанныеВходящегоСообщенияXML(ТекстСообщенияXML);
	
	Попытка
		
		ОбъектXDTO = ИнтеграцияГИСМ.ОбъектXDTOПоТекстуСообщенияXML(ПервичныеДанные.ТекстСообщенияXML, ИмяПакета, ПервичныеДанные.Версия);
		
	Исключение
		
		Если ПервичныеДанные = Неопределено Тогда
			
			ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
		Иначе
			
			ОбъектXDTO = ИнтеграцияГИСМВызовСервера.ПреобразоватьПроизвольныйОбъектXDTOВОбъектXDTO(
				ПервичныеДанные.ОбъектXDTO,
				ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяПакета, ПервичныеДанные.Версия),
				ПервичныеДанные.Версия);
			
		КонецЕсли;
		
	КонецПопытки;
	
	Объект = РаботаСXMLИС.ОбъектXDTOВСтруктуру(ОбъектXDTO);
	
	Если Объект.commit_signs.commits.sign_num.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Внутренняя ошибка'");
	КонецЕсли;
	
	Для Каждого НомерКиЗ Из Объект.commit_signs.commits.sign_num Цикл
		
		СтрокаТЧ = ДокументОбъект.ВыпущенныеКиЗ.Найти(НомерКиЗ, "НомерКиЗ");
		СтрокаТЧ.СостояниеПодтверждения = НовоеСостояние;
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ДокументОбъект.ВыпущенныеКиЗ Цикл
		
		Количество = Состояния.Получить(СтрокаТЧ.СостояниеПодтверждения);
		Если Количество = Неопределено Тогда
			Количество = 0;
		КонецЕсли;
		
		Состояния.Вставить(СтрокаТЧ.СостояниеПодтверждения, Количество + 1);
		
	КонецЦикла;
	
	Возврат Состояния;
	
КонецФункции

#КонецОбласти

#Область СообщенияГИСМ

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ОперацииОбменаГИСМ - Операция ГИСМ.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных
		Или Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ Тогда
		
		Возврат ЗаявкаНаВыпускКиЗXML(ДокументСсылка);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхПолучениеКвитанции Тогда
		
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанных);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗПолучениеКвитанции Тогда
		
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения Тогда
		
		Возврат ПодтверждениеПоступленияТоваровПоЗаявкеНаВыпускКиЗXML(ДокументСсылка);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтвержденияПолучениеКвитанции Тогда
		
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения);
		
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки Тогда
		
		Возврат ЗакрытиеЗаявкиНаВыпускКиЗXML(ДокументСсылка);
	ИначеЕсли Операция = Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявкиПолучениеКвитанции Тогда
		
		Возврат ИнтеграцияГИСМВызовСервера.ЗапросКвитанцииОФиксацииПоСсылкеXML(ДокументСсылка, Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Формирует текст запроса ограничения доступа для RLS формата БСП 3.0
//
// Параметры:
//   Ограничение - (См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа).
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	ИнтеграцияГИСМПереопределяемый.ПриЗаполненииОграниченияДоступа(Ограничение,
		ОбщегоНазначения.ИмяТаблицыПоСсылке(ПустаяСсылка()));

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияГИСМ

Функция ЗаявкаНаВыпускКиЗXML(ДокументСсылка)
	
	Если ИнтеграцияГИСМ.ИспользоватьВозможностиВерсии("2.41") Тогда
		Возврат ЗаявкаНаВыпускКиЗXML2_41(ДокументСсылка);
	Иначе
		Возврат ЗаявкаНаВыпускКиЗXML2_40(ДокументСсылка);
	КонецЕсли;
	
КонецФункции

Функция ПодтверждениеПоступленияТоваровПоЗаявкеНаВыпускКиЗXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Версия = ИнтеграцияГИСМ.ВерсииСхемОбмена().Клиент;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаВыпускКиЗ.Дата          КАК Дата,
	|	ЗаявкаНаВыпускКиЗ.НомерГИСМ     КАК НомерГИСМ,
	|	ЗаявкаНаВыпускКиЗ.Основание     КАК Основание,
	|	ЗаявкаНаВыпускКиЗ.Организация   КАК Организация,
	|	ЗаявкаНаВыпускКиЗ.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗ
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыпущенныеКиЗ.НомерКиЗ      КАК НомерКиЗ,
	|	ВыпущенныеКиЗ.ДокументПоступления.Ссылка                  КАК ДокументПоступления,
	|	ВыпущенныеКиЗ.ДокументПоступления.Дата                    КАК ДатаДокументаПоступления,
	|	ВыпущенныеКиЗ.ДокументПоступления.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	ВыпущенныеКиЗ.ДокументПоступления.ДатаВходящегоДокумента  КАК ДатаВходящегоДокумента
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ВыпущенныеКиЗ КАК ВыпущенныеКиЗ
	|ГДЕ
	|	  ВыпущенныеКиЗ.Ссылка = &Ссылка
	|	И ВыпущенныеКиЗ.СостояниеПодтверждения = ЗНАЧЕНИЕ(Перечисление.СостоянияОтправкиПодтвержденияГИСМ.КПередаче)
	|ИТОГИ
	|	МАКСИМУМ(ДатаДокументаПоступления)
	|ПО
	|	ДокументПоступления");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.ВыполнитьПакет();
	Шапка                          = Результат[0].Выбрать();
	ВыборкаПоДокументамПоступления = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не Шапка.Следующий()
		ИЛИ ВыборкаПоДокументамПоступления.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	ИмяТипа   = "query";
	ИмяПакета = "commit_signs";
	
	Пока ВыборкаПоДокументамПоступления.Следующий() Цикл
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения, ДокументСсылка);
		
		ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, Версия);
		
		ПодтверждениеПоступления = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета, Версия);
		ПодтверждениеПоступления.action_id     = ПодтверждениеПоступления.action_id;
		
		Попытка
			ПодтверждениеПоступления.sender_gln = РеквизитыОрганизации.GLN;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
		КонецПопытки;
		
		Если Шапка.НомерГИСМ <> 0 Тогда
			ПодтверждениеПоступления.emit_order_id = Шапка.НомерГИСМ;
		Иначе
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Не заполнен номер ГИСМ документа %1.'"), ДокументСсылка));
		КонецЕсли;
		
		ХранилищеВременныхДат = Новый Соответствие;
		ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
			ПодтверждениеПоступления,
			"commit_date",
			ВыборкаПоДокументамПоступления.ДатаДокументаПоступления,
			ХранилищеВременныхДат);
		
		Попытка
			ПодтверждениеПоступления.commit_doc_num = ВыборкаПоДокументамПоступления.НомерВходящегоДокумента;
		Исключение
			СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе %1 не заполнен номер входящего документа.'"), ВыборкаПоДокументамПоступления.ДокументПоступления);
		КонецПопытки;
		
		Попытка
			ПодтверждениеПоступления.commit_doc_date = ВыборкаПоДокументамПоступления.ДатаВходящегоДокумента;
		Исключение
			СообщениеXML.ТекстОшибки = СтрШаблон(НСтр("ru = 'В документе %1 не заполнена дата входящего документа.'"), , ВыборкаПоДокументамПоступления.ДокументПоступления);
		КонецПопытки;
		
		ПодтверждениеПоступления.commits = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ПодтверждениеПоступления, "commits", Версия);
		
		Выборка = ВыборкаПоДокументамПоступления.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ПодтверждениеПоступления.commits.sign_num.Добавить(Выборка.НомерКиЗ);
			
		КонецЦикла;
		
		ПередачаДанных.version    = ПередачаДанных.version;
		ПередачаДанных[ИмяПакета] = ПодтверждениеПоступления;
		
		ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, Версия);
		ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
		СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
		
		СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
		СообщениеXML.Организация  = Шапка.Организация;
		СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаПодтверждения;
		СообщениеXML.Документ     = ДокументСсылка;
		СообщениеXML.Основание    = Шапка.Основание;
		СообщениеXML.Версия       = 0;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗакрытиеЗаявкиНаВыпускКиЗXML(ДокументСсылка)
	
	Версия = ИнтеграцияГИСМ.ВерсииСхемОбмена().Клиент;
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаВыпускКиЗГИСМ.Основание     КАК Основание,
	|	ЗаявкаНаВыпускКиЗГИСМ.Организация   КАК Организация,
	|	ЗаявкаНаВыпускКиЗГИСМ.Подразделение КАК Подразделение,
	|	ЗаявкаНаВыпускКиЗГИСМ.НомерГИСМ     КАК НомерГИСМ
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Шапка = Результат.Выбрать();
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	ИмяТипа   = "query";
	ИмяПакета = "commit_order";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, Версия);
	
	ЗакрытиеЗаявкиНаВыпускКиЗ = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета, Версия);
	ЗакрытиеЗаявкиНаВыпускКиЗ.action_id     = ЗакрытиеЗаявкиНаВыпускКиЗ.action_id;
	
	Попытка
		ЗакрытиеЗаявкиНаВыпускКиЗ.sender_gln = РеквизитыОрганизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
	КонецПопытки;
	
	Если Шапка.НомерГИСМ <> 0 Тогда
		ЗакрытиеЗаявкиНаВыпускКиЗ.emit_order_id = Шапка.НомерГИСМ;
	Иначе
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(НСтр("ru = 'Не заполнен номер ГИСМ документа %1.'"), ДокументСсылка));
	КонецЕсли;
	
	ХранилищеВременныхДат = Новый Соответствие;
	ИнтеграцияГИСМ.УстановитьДатуСЧасовымПоясом(
		ЗакрытиеЗаявкиНаВыпускКиЗ,
		"close_date",
		ТекущаяДатаСеанса(),
		ХранилищеВременныхДат);
	
	ПередачаДанных.version    = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ЗакрытиеЗаявкиНаВыпускКиЗ;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, Версия);
	ТекстСообщенияXML = ИнтеграцияГИСМ.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки, ДокументСсылка);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаЗакрытияЗаявки;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Основание    = Шапка.Основание;
	СообщениеXML.Версия       = 0;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#Область Версия2_40

Функция ЗаявкаНаВыпускКиЗXML2_40(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Версия = "2.40";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаВыпускКиЗГИСМ.Номер                        КАК Номер,
	|	ЗаявкаНаВыпускКиЗГИСМ.Дата                         КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ЗаявкаНаВыпускКиЗГИСМ.Основание       КАК Основание,
	|	ЗаявкаНаВыпускКиЗГИСМ.Организация     КАК Организация,
	|	ЗаявкаНаВыпускКиЗГИСМ.Подразделение   КАК Подразделение,
	|	ЗаявкаНаВыпускКиЗГИСМ.Контрагент      КАК Эмитент,
	|	ЗаявкаНаВыпускКиЗГИСМ.GLNКонтрагента  КАК ЭмитентGLN,
	|	ЗаявкаНаВыпускКиЗГИСМ.НомерДоговора   КАК НомерДоговора,
	|	ЗаявкаНаВыпускКиЗГИСМ.ДатаДоговора    КАК ДатаДоговора,
	|	ЗаявкаНаВыпускКиЗГИСМ.АдресДоставки   КАК АдресДоставки,
	|	ЗаявкаНаВыпускКиЗГИСМ.СпособПолучения КАК СпособПолучения
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ,
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ЗаявкаНаВыпускКиЗГИСМ.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказанныеКиЗ.Ссылка.ДляМаркировкиОстатков             КАК ДляМаркировкиОстатков,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМРазмер               КАК РазмерКиЗ,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМСпособВыпускаВОборот КАК СпособВыпускаВОборот,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМВид                  КАК ВидКиЗ,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМGTIN                 КАК GTIN,
	|	ЗаказанныеКиЗ.Характеристика.КиЗГИСМGTIN               КАК GTINХарактеристики,
	|	СУММА(ЗаказанныеКиЗ.Количество)                        КАК Количество
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ЗаказанныеКиЗ КАК ЗаказанныеКиЗ
	|ГДЕ
	|	ЗаказанныеКиЗ.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ЗаказанныеКиЗ.Ссылка.ДляМаркировкиОстатков,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМРазмер,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМСпособВыпускаВОборот,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМВид,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМGTIN,
	|	ЗаказанныеКиЗ.Характеристика.КиЗГИСМGTIN
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка         = РезультатЗапроса[1].Выбрать();
	ЗаказанныеКиЗ = РезультатЗапроса[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или ЗаказанныеКиЗ.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ, ДокументСсылка, НомерВерсии);
	
	ИмяТипа = "query";
	ИмяПакета = "emit_order";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, Версия);
	
	ЗаявкаНаВыпускКиЗ = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета, Версия);
	ЗаявкаНаВыпускКиЗ.action_id = ЗаявкаНаВыпускКиЗ.action_id;
	
	Попытка
		ЗаявкаНаВыпускКиЗ.sender_gln = РеквизитыОрганизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
	КонецПопытки;
	
	Попытка
		ЗаявкаНаВыпускКиЗ.receiver_gln = Шапка.ЭмитентGLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNПартнера(СообщениеXML, Шапка.ЭмитентGLN, Шапка.Эмитент);
	КонецПопытки;
	
	// Номер и дата договора
	Попытка
		ЗаявкаНаВыпускКиЗ.contract_number = Шапка.НомерДоговора;
	Исключение
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнен номер договора с эмитентом.'");
	КонецПопытки;
	
	Попытка
		ЗаявкаНаВыпускКиЗ.contract_date = Шапка.ДатаДоговора;
	Исключение
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнена дата договора с эмитентом.'");
	КонецПопытки;
	
	ЗаявкаНаВыпускКиЗ.sign_receipt_type = ИнтеграцияГИСМ.СпособПолученияИзготовленныхКиЗ(Шапка.СпособПолучения);
	
	Если Шапка.СпособПолучения = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ЧерезМногофункциональныйЦентр
		Или Шапка.СпособПолучения = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ДоставкаЭмитентомДоУказанногоМеста Тогда
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Шапка.АдресДоставки);
		
		Помещения = Новый Массив;
		Для Каждого СтрокаТЧ Из СведенияОбАдресе.Помещения Цикл
			Помещения.Добавить(СтрокаТЧ.ТипПомещения + " " + СтрокаТЧ.Номер);
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура("КодыАдреса", Истина);
		РезультатПолученияИдентификаторовАдреса = РаботаСАдресами.СведенияОбАдресе(Шапка.АдресДоставки, ДополнительныеПараметры);
		Если РезультатПолученияИдентификаторовАдреса.РезультатПроверкиАдреса = "Успех" ИЛИ РезультатПолученияИдентификаторовАдреса.РезультатПроверкиАдреса = "" Тогда
			
			ЗаявкаНаВыпускКиЗ.sign_receipt_point = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "sign_receipt_point", Версия);
			ЗаявкаНаВыпускКиЗ.sign_receipt_point.aoguid = Строка(РезультатПолученияИдентификаторовАдреса.ИдентификаторАдресногоОбъекта);
			ЗаявкаНаВыпускКиЗ.sign_receipt_point.houseguid = Строка(РезультатПолученияИдентификаторовАдреса.ИдентификаторДома);
			
			Если Помещения.Количество() > 0 Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point.flat = СтрСоединить(Помещения, " ");
			КонецЕсли;
			
		Иначе
			
			ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "sign_receipt_point_kladr", Версия);
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.КодСтраны) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.country_code = СведенияОбАдресе.КодСтраны;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Индекс) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.index = СведенияОбАдресе.Индекс;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.КодРегиона) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.region_code = СведенияОбАдресе.КодРегиона;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Район) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.area = СведенияОбАдресе.Район;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.city = СведенияОбАдресе.Город;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.place = СведенияОбАдресе.НаселенныйПункт;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Улица) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.street = СведенияОбАдресе.Улица;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Здание) И ЗначениеЗаполнено(СведенияОбАдресе.Здание.Номер) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.house = СведенияОбАдресе.Здание.ТипЗдания + " " + СведенияОбАдресе.Здание.Номер;
			КонецЕсли;
			
			Корпуса = Новый Массив;
			Для Каждого СтрокаТЧ Из СведенияОбАдресе.Корпуса Цикл
				Если Не СтрокаТЧ.ТипКорпуса = "Литера" Тогда
					Корпуса.Добавить(СтрокаТЧ.ТипКорпуса + " " + СтрокаТЧ.Номер);
				КонецЕсли;
			КонецЦикла;
			Если Корпуса.Количество() > 0 Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.corpus = СтрСоединить(Корпуса, " ");
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из СведенияОбАдресе.Корпуса Цикл
				Если СтрокаТЧ.ТипКорпуса = "Литера" Тогда
					НомерЛитеры = СтрокаТЧ.Номер;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(НомерЛитеры) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.litera = НомерЛитеры;
			КонецЕсли;
			
			Если Помещения.Количество() > 0 Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.flat = СтрСоединить(Помещения, " ");
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаявкаНаВыпускКиЗ.emit_order_no   = Шапка.Номер;
	ЗаявкаНаВыпускКиЗ.emit_order_ver  = НомерВерсии;
	ЗаявкаНаВыпускКиЗ.emit_order_date = Шапка.Дата;
	
	Для Каждого СтрокаТЧ Из ЗаказанныеКиЗ Цикл
		
		ЕстьGTIN = ЗначениеЗаполнено(СтрокаТЧ.GTIN) Или ЗначениеЗаполнено(СтрокаТЧ.GTINХарактеристики);
		
		Если Не ЕстьGTIN Тогда
			
			Если ЗаявкаНаВыпускКиЗ.order_details = Неопределено Тогда
				ЗаявкаНаВыпускКиЗ.order_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "order_details", Версия);
			КонецЕсли;
			
			НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ.order_details, "detail", Версия);
			НоваяСтрока.tnved_code        = "4303";
			НоваяСтрока.sign_type         = ИнтеграцияГИСМ.ВидКиЗ(СтрокаТЧ.ВидКиЗ);
			НоваяСтрока.origin_id         = ИнтеграцияГИСМ.СпособВыпускаВОборот(СтрокаТЧ.СпособВыпускаВОборот);
			НоваяСтрока.sign_initial_type = ИнтеграцияГИСМ.СпособВводаТовараВОбращение(СтрокаТЧ.ДляМаркировкиОстатков);
			НоваяСтрока.sign_size_type    = ИнтеграцияГИСМ.РазмерКиЗ(СтрокаТЧ.РазмерКиЗ);
			НоваяСтрока.sign_count        = СтрокаТЧ.Количество;
			
			ЗаявкаНаВыпускКиЗ.order_details.detail.Добавить(НоваяСтрока);
			
		ИначеЕсли ЕстьGTIN Тогда
			
			Если ЗаявкаНаВыпускКиЗ.order_with_unify_details = Неопределено Тогда
				ЗаявкаНаВыпускКиЗ.order_with_unify_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "order_with_unify_details", Версия);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.GTINХарактеристики) Тогда
				GTIN = СтрокаТЧ.GTINХарактеристики;
			Иначе
				GTIN = СтрокаТЧ.GTIN;
			КонецЕсли;
			
			НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ.order_with_unify_details, "detail", Версия);
			НоваяСтрока.tnved_code        = "4303";
			НоваяСтрока.sign_type         = ИнтеграцияГИСМ.ВидКиЗ(СтрокаТЧ.ВидКиЗ);
			НоваяСтрока.origin_id         = ИнтеграцияГИСМ.СпособВыпускаВОборот(СтрокаТЧ.СпособВыпускаВОборот);
			НоваяСтрока.sign_initial_type = ИнтеграцияГИСМ.СпособВводаТовараВОбращение(СтрокаТЧ.ДляМаркировкиОстатков);
			НоваяСтрока.sign_size_type    = ИнтеграцияГИСМ.РазмерКиЗ(СтрокаТЧ.РазмерКиЗ);
			НоваяСтрока.gcp               = Лев(GTIN, 7);
			НоваяСтрока.sign_gtin         = GTIN;
			НоваяСтрока.sign_count        = СтрокаТЧ.Количество;
			
			ЗаявкаНаВыпускКиЗ.order_with_unify_details.detail.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПередачаДанных.version = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ЗаявкаНаВыпускКиЗ;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, Версия);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Основание    = Шапка.Основание;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область Версия2_41

Функция ЗаявкаНаВыпускКиЗXML2_41(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Версия = ИнтеграцияГИСМ.ВерсииСхемОбмена().Клиент;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла КАК Ссылка,
	|	КОЛИЧЕСТВО(ГИСМПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	Справочник.ГИСМПрисоединенныеФайлы КАК ГИСМПрисоединенныеФайлы
	|ГДЕ
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла = &Ссылка
	|	И ГИСМПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ОперацииОбменаГИСМ.ПередачаДанных)
	|	И ГИСМПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыСообщенийГИСМ.Исходящее)
	|СГРУППИРОВАТЬ ПО
	|	ГИСМПрисоединенныеФайлы.ВладелецФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаВыпускКиЗГИСМ.Номер                        КАК Номер,
	|	ЗаявкаНаВыпускКиЗГИСМ.Дата                         КАК Дата,
	|	ЕСТЬNULL(ВременнаяТаблица.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ЗаявкаНаВыпускКиЗГИСМ.Основание       КАК Основание,
	|	ЗаявкаНаВыпускКиЗГИСМ.Организация     КАК Организация,
	|	ЗаявкаНаВыпускКиЗГИСМ.Подразделение   КАК Подразделение,
	|	ЗаявкаНаВыпускКиЗГИСМ.Контрагент      КАК Эмитент,
	|	ЗаявкаНаВыпускКиЗГИСМ.GLNКонтрагента  КАК ЭмитентGLN,
	|	ЗаявкаНаВыпускКиЗГИСМ.НомерДоговора   КАК НомерДоговора,
	|	ЗаявкаНаВыпускКиЗГИСМ.ДатаДоговора    КАК ДатаДоговора,
	|	ЗаявкаНаВыпускКиЗГИСМ.АдресДоставки   КАК АдресДоставки,
	|	ЗаявкаНаВыпускКиЗГИСМ.СпособПолучения КАК СпособПолучения
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ КАК ЗаявкаНаВыпускКиЗГИСМ,
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблица КАК ВременнаяТаблица
	|		ПО ЗаявкаНаВыпускКиЗГИСМ.Ссылка = ВременнаяТаблица.Ссылка
	|ГДЕ
	|	ЗаявкаНаВыпускКиЗГИСМ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказанныеКиЗ.Ссылка.ДляМаркировкиОстатков             КАК ДляМаркировкиОстатков,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМРазмер               КАК РазмерКиЗ,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМСпособВыпускаВОборот КАК СпособВыпускаВОборот,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМВид                  КАК ВидКиЗ,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМGTIN                 КАК GTIN,
	|	ЗаказанныеКиЗ.Характеристика.КиЗГИСМGTIN               КАК GTINХарактеристики,
	|	СУММА(ЗаказанныеКиЗ.Количество)                        КАК Количество
	|ИЗ
	|	Документ.ЗаявкаНаВыпускКиЗГИСМ.ЗаказанныеКиЗ КАК ЗаказанныеКиЗ
	|ГДЕ
	|	ЗаказанныеКиЗ.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ЗаказанныеКиЗ.Ссылка.ДляМаркировкиОстатков,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМРазмер,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМСпособВыпускаВОборот,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМВид,
	|	ЗаказанныеКиЗ.Номенклатура.КиЗГИСМGTIN,
	|	ЗаказанныеКиЗ.Характеристика.КиЗГИСМGTIN
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	Шапка         = РезультатЗапроса[1].Выбрать();
	ЗаказанныеКиЗ = РезультатЗапроса[2].Выгрузить();
	Если Не Шапка.Следующий()
		Или ЗаказанныеКиЗ.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
			Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ, ДокументСсылка);
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	РеквизитыОрганизации = ИнтеграцияГИСМВызовСервера.ИННКППGLNОрганизации(Шапка.Организация, Шапка.Подразделение);
	
	СообщениеXML = ИнтеграцияГИСМКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Описание = ИнтеграцияГИСМ.ОписаниеОперацииПередачиДанных(
		Перечисления.ОперацииОбменаГИСМ.ПередачаДанныхЗаявкаНаВыпускКиЗ, ДокументСсылка, НомерВерсии);
	
	ИмяТипа = "query";
	ИмяПакета = "emit_order";
	
	ПередачаДанных = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(Неопределено, ИмяТипа, Версия);
	
	ЗаявкаНаВыпускКиЗ = ИнтеграцияГИСМ.ОбъектXDTO(ИмяПакета, Версия);
	ЗаявкаНаВыпускКиЗ.action_id = ЗаявкаНаВыпускКиЗ.action_id;
	
	Попытка
		ЗаявкаНаВыпускКиЗ.sender_gln = РеквизитыОрганизации.GLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNОрганизации(СообщениеXML, РеквизитыОрганизации.GLN, Шапка);
	КонецПопытки;
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.КПП) Тогда
		Попытка
			ЗаявкаНаВыпускКиЗ.sender_kpp = РеквизитыОрганизации.КПП;
		Исключение
			ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиУказанНеКорректныйКППОрганизации(СообщениеXML, РеквизитыОрганизации.КПП, Шапка.Организация);
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		ЗаявкаНаВыпускКиЗ.receiver_gln = Шапка.ЭмитентGLN;
	Исключение
		ИнтеграцияГИСМКлиентСервер.ДобавитьТекстОшибкиНеЗаполненGLNПартнера(СообщениеXML, Шапка.ЭмитентGLN, Шапка.Эмитент);
	КонецПопытки;
	
	// Номер и дата договора
	Попытка
		ЗаявкаНаВыпускКиЗ.contract_number = Шапка.НомерДоговора;
	Исключение
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнен номер договора с эмитентом.'");
	КонецПопытки;
	
	Попытка
		ЗаявкаНаВыпускКиЗ.contract_date = Шапка.ДатаДоговора;
	Исключение
		СообщениеXML.ТекстОшибки = НСтр("ru = 'Не заполнена дата договора с эмитентом.'");
	КонецПопытки;
	
	ЗаявкаНаВыпускКиЗ.sign_receipt_type = ИнтеграцияГИСМ.СпособПолученияИзготовленныхКиЗ(Шапка.СпособПолучения);
	
	Если Шапка.СпособПолучения = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ЧерезМногофункциональныйЦентр
		Или Шапка.СпособПолучения = Перечисления.СпособыПолученияИзготовленныхКИЗГИСМ.ДоставкаЭмитентомДоУказанногоМеста Тогда
		
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(Шапка.АдресДоставки);
		
		Помещения = Новый Массив;
		Для Каждого СтрокаТЧ Из СведенияОбАдресе.Помещения Цикл
			Помещения.Добавить(СтрокаТЧ.ТипПомещения + " " + СтрокаТЧ.Номер);
		КонецЦикла;
		
		ДополнительныеПараметры = Новый Структура("КодыАдреса", Истина);
		РезультатПолученияИдентификаторовАдреса = РаботаСАдресами.СведенияОбАдресе(Шапка.АдресДоставки, ДополнительныеПараметры);
		Если (РезультатПолученияИдентификаторовАдреса.РезультатПроверкиАдреса = "Успех" ИЛИ РезультатПолученияИдентификаторовАдреса.РезультатПроверкиАдреса = "")
			И ЗначениеЗаполнено(Строка(РезультатПолученияИдентификаторовАдреса.ИдентификаторАдресногоОбъекта))
			И ЗначениеЗаполнено(Строка(РезультатПолученияИдентификаторовАдреса.ИдентификаторДома)) Тогда
			
			ЗаявкаНаВыпускКиЗ.sign_receipt_point = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "sign_receipt_point", Версия);
			ЗаявкаНаВыпускКиЗ.sign_receipt_point.aoguid    = Строка(РезультатПолученияИдентификаторовАдреса.ИдентификаторАдресногоОбъекта);
			ЗаявкаНаВыпускКиЗ.sign_receipt_point.houseguid = Строка(РезультатПолученияИдентификаторовАдреса.ИдентификаторДома);
			
			Если Помещения.Количество() > 0 Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point.flat = СтрСоединить(Помещения, " ");
			КонецЕсли;
			
		Иначе
			
			ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "sign_receipt_point_kladr", Версия);
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.КодСтраны) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.country_code = СведенияОбАдресе.КодСтраны;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Индекс) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.index = СведенияОбАдресе.Индекс;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.КодРегиона) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.region_code = СведенияОбАдресе.КодРегиона;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Район) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.area = СведенияОбАдресе.Район;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Город) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.city = СведенияОбАдресе.Город;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.НаселенныйПункт) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.place = СведенияОбАдресе.НаселенныйПункт;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Улица) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.street = СведенияОбАдресе.Улица;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СведенияОбАдресе.Здание) И ЗначениеЗаполнено(СведенияОбАдресе.Здание.Номер) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.house = СведенияОбАдресе.Здание.ТипЗдания + " " + СведенияОбАдресе.Здание.Номер;
			КонецЕсли;
			
			Корпуса = Новый Массив;
			Для Каждого СтрокаТЧ Из СведенияОбАдресе.Корпуса Цикл
				Если Не СтрокаТЧ.ТипКорпуса = "Литера" Тогда
					Корпуса.Добавить(СтрокаТЧ.ТипКорпуса + " " + СтрокаТЧ.Номер);
				КонецЕсли;
			КонецЦикла;
			Если Корпуса.Количество() > 0 Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.corpus = СтрСоединить(Корпуса, " ");
			КонецЕсли;
			
			Для Каждого СтрокаТЧ Из СведенияОбАдресе.Корпуса Цикл
				Если СтрокаТЧ.ТипКорпуса = "Литера" Тогда
					НомерЛитеры = СтрокаТЧ.Номер;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(НомерЛитеры) Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.litera = НомерЛитеры;
			КонецЕсли;
			
			Если Помещения.Количество() > 0 Тогда
				ЗаявкаНаВыпускКиЗ.sign_receipt_point_kladr.flat = СтрСоединить(Помещения, " ");
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаявкаНаВыпускКиЗ.emit_order_no   = Шапка.Номер;
	ЗаявкаНаВыпускКиЗ.emit_order_ver  = НомерВерсии;
	ЗаявкаНаВыпускКиЗ.emit_order_date = Шапка.Дата;
	
	Для Каждого СтрокаТЧ Из ЗаказанныеКиЗ Цикл
		
		ЕстьGTIN = ЗначениеЗаполнено(СтрокаТЧ.GTIN) Или ЗначениеЗаполнено(СтрокаТЧ.GTINХарактеристики);
		
		Если Не ЕстьGTIN Тогда
			
			Если ЗаявкаНаВыпускКиЗ.order_details = Неопределено Тогда
				ЗаявкаНаВыпускКиЗ.order_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "order_details", Версия);
			КонецЕсли;
			
			НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ.order_details, "detail", Версия);
			НоваяСтрока.tnved_code        = "4303";
			НоваяСтрока.sign_type         = ИнтеграцияГИСМ.ВидКиЗ(СтрокаТЧ.ВидКиЗ);
			НоваяСтрока.origin_id         = ИнтеграцияГИСМ.СпособВыпускаВОборот(СтрокаТЧ.СпособВыпускаВОборот);
			НоваяСтрока.sign_initial_type = ИнтеграцияГИСМ.СпособВводаТовараВОбращение(СтрокаТЧ.ДляМаркировкиОстатков);
			НоваяСтрока.sign_size_type    = ИнтеграцияГИСМ.РазмерКиЗ(СтрокаТЧ.РазмерКиЗ);
			НоваяСтрока.sign_count        = СтрокаТЧ.Количество;
			
			ЗаявкаНаВыпускКиЗ.order_details.detail.Добавить(НоваяСтрока);
			
		ИначеЕсли ЕстьGTIN Тогда
			
			Если ЗаявкаНаВыпускКиЗ.order_with_unify_details = Неопределено Тогда
				ЗаявкаНаВыпускКиЗ.order_with_unify_details = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ, "order_with_unify_details", Версия);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.GTINХарактеристики) Тогда
				GTIN = СтрокаТЧ.GTINХарактеристики;
			Иначе
				GTIN = СтрокаТЧ.GTIN;
			КонецЕсли;
			
			НоваяСтрока = ИнтеграцияГИСМ.ОбъектXDTOПоИмениСвойства(ЗаявкаНаВыпускКиЗ.order_with_unify_details, "detail", Версия);
			НоваяСтрока.tnved_code        = "4303";
			НоваяСтрока.sign_type         = ИнтеграцияГИСМ.ВидКиЗ(СтрокаТЧ.ВидКиЗ);
			НоваяСтрока.origin_id         = ИнтеграцияГИСМ.СпособВыпускаВОборот(СтрокаТЧ.СпособВыпускаВОборот);
			НоваяСтрока.sign_initial_type = ИнтеграцияГИСМ.СпособВводаТовараВОбращение(СтрокаТЧ.ДляМаркировкиОстатков);
			НоваяСтрока.sign_size_type    = ИнтеграцияГИСМ.РазмерКиЗ(СтрокаТЧ.РазмерКиЗ);
			НоваяСтрока.gcp               = Лев(GTIN, 7);
			НоваяСтрока.sign_gtin         = GTIN;
			НоваяСтрока.sign_count        = СтрокаТЧ.Количество;
			
			ЗаявкаНаВыпускКиЗ.order_with_unify_details.detail.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПередачаДанных.version = ПередачаДанных.version;
	ПередачаДанных[ИмяПакета] = ЗаявкаНаВыпускКиЗ;
	
	ТекстСообщенияXML = ИнтеграцияГИСМ.ОбъектXDTOВXML(ПередачаДанных, ИмяТипа, Версия);
	
	СообщениеXML.ТекстСообщенияXML  = ТекстСообщенияXML;
	СообщениеXML.КонвертSOAP = ИнтеграцияГИСМВызовСервера.ПоместитьТекстСообщенияXMLВКонвертSOAP(ТекстСообщенияXML);
	
	СообщениеXML.ТипСообщения = Перечисления.ТипыСообщенийГИСМ.Исходящее;
	СообщениеXML.Организация  = Шапка.Организация;
	СообщениеXML.Операция     = Перечисления.ОперацииОбменаГИСМ.ПередачаДанных;
	СообщениеXML.Документ     = ДокументСсылка;
	СообщениеXML.Основание    = Шапка.Основание;
	СообщениеXML.Версия       = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ТекущийСтатус(ДокументСсылка)
	
	Статус = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Таблица.СтатусЗаявкиНаВыпускКиЗ КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыЗаявокНаВыпускКиЗГИСМ КАК Таблица
	|ГДЕ
	|	Таблица.ТекущаяЗаявкаНаВыпускКиЗ = &ДокументСсылка
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Статус = Выборка.Статус;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#Область СозданиеНаОсновании

// Добавляет команду создания документа "Заявка на выпуск КиЗ для маркировки".
// 
// Параметры:
//  КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
// См. описание1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
// 
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗаявкаНаВыпускКиЗГИСМ) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ЗаявкаНаВыпускКиЗГИСМ.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ИнтеграцияИС.ПредставлениеОбъекта(Метаданные.Документы.ЗаявкаНаВыпускКиЗГИСМ);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ВестиУчетМаркировкиПродукцииВГИСМ";
		КомандаСоздатьНаОсновании.ВидимостьВФормах          = "ФормаСпискаДокументов, ФормаСписка";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	Возврат;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли