#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИСформированыАТК);
		Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтверждено);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП- Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи);
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично);
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетСтатусНеопределен);
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  СтруктураПараметров - Неопределено, Структура - Структура параметров
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП -- Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтруктураПараметров.ОбъектРасчета,
				"ВидПродукции, Операция, ОперацияНанесения, ВариантЗаполненияДекларации, ВариантВыполненияАгрегации");
		Иначе
			Реквизиты = СтруктураПараметров;
		КонецЕсли;
		
		Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.Агрегация Тогда
			
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию;
			
		ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ Тогда
			
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление;
			
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Реквизиты.Операция) <> Неопределено Тогда
			
			Если Реквизиты.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
				Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ;
			Иначе
				Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет;
			КонецЕсли;
			
		ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС 
			И Реквизиты.Свойство("ВариантЗаполненияДекларации") Тогда
			
			Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
				Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК;
			ИначеЕсли Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок
				И Реквизиты.ВариантВыполненияАгрегации <> Перечисления.ВариантыВыполненияАгрегацииИСМП.НеТребуется Тогда
				Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию;
			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ВариантВыполненияАгрегации)
			И Реквизиты.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот Тогда
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.АТК
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТККПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента
		Или (Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки
			И ДополнительныеПараметры <> Неопределено
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры, "ОтчетПереданВСУЗ", Ложь)) Тогда
		
		// Служебные сообщения для контроля статуса обработки отчетов
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена,
			СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ
		Или Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.ВводВОборот Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияУдаление
		Или Операция = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.АТКУдаление
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКСоздание
		Или Операция = Перечисления.ВидыОперацийИСМП.АТКИзменение
		Или Операция = Перечисления.ВидыОперацийИСМП.АТК Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ 
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки
		Или Операция = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента
		Или Операция = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
		Если Операция = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		КонецЕсли;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОперацииВводаВОборот = Новый Массив;
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборот);
	ОперацииВводаВОборот.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса);
	
	ОперацииАгрегации = Новый Массив;
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента);
	ОперацииАгрегации.Добавить(Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса);
	
	ОперацииФормированияАТК = Новый Массив;
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТК);
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТКСоздание);
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТКИзменение);
	ОперацииФормированияАТК.Добавить(Перечисления.ВидыОперацийИСМП.АТКУдаление);
	
	ОперацииНанесенияКМ = Новый Массив;
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.КвитанцияДокумента);
	ОперацииНанесенияКМ.Добавить(Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ);
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииВводаВОборот.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		СтатусПринят = Неопределено;
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
				И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1
			Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь)
				И ДополнительныеПараметры.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена  Тогда
			
			ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			// По данным протокола возможны варианты в одной версии сообщений:
			// - разные статусы, включая "успешно" - общий статус "обработан частично".
			// - разные статусы, все с ошибками - общий статус "ошибка". 
			// - флаг "обработан частично", т.к. передача данных с исправлениями: 
			//   -- И последняя версия сообщений обработана успешно - общий статус "успешно".
			//   -- И последняя версия сообщений обработана с ошибкой - общий статус "обработан частично".
			
			Если ДополнительныеПараметры.ПакетСтатусовОбработкиОперации[Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена] <> Неопределено
				Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь)
					И ДополнительныеПараметры.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично;
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ДокументСсылка,
					"Операция, ВариантЗаполненияДекларации");
				ДляОперацииДоступенРежимИсправленияОшибок = Не (Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
					И Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК);
					
				Если ДляОперацииДоступенРежимИсправленияОшибок Тогда
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
				КонецЕсли;
				
			Иначе
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			КонецЕсли;
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
				ДокументСсылка,
				ДополнительныеПараметры.СтатусОбработки,
				Статусы);
				
			Возврат ПараметрыОбновления;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			СтатусПринят = ДополнительныеПараметры.Статус;
		Иначе
			СтатусПринят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот;
			Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено
				И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "КодыАгрегированы", Ложь) Тогда
				СтатусПринят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Принят = СтатусПринят;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		ДляОперацииДоступенРежимИсправленияОшибок = Ложь;
		
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ЕстьЗависимыеСообщения", Ложь) Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			ИначеЕсли Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично Тогда
				// Для АТК режим исправления ошибок недоступен
				ДляОперацииДоступенРежимИсправленияОшибок = Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "КодыАТКСформированы", Ложь);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		Иначе
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, ОперацияНанесения,
				|ВариантЗаполненияДекларации, ОтчетПроизводственнойЛинии, ВариантВыполненияАгрегации");
			
			Если Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично Тогда
				// Для АТК режим исправления ошибок недоступен
				ДляОперацииДоступенРежимИсправленияОшибок = Не (Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
					И Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК);
			ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
				Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
				ИначеЕсли ЕстьКодыАгрегатов(ДокументСсылка, Реквизиты) Тогда
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
				КонецЕсли;
			
			ИначеЕсли ЕстьКодыАгрегатов(ДокументСсылка, Реквизиты)
				И Не ЗначениеЗаполнено(Реквизиты.ВариантВыполненияАгрегации) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
			
		КонецЕсли;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		Если Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично Тогда
			Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично;
			Если ДляОперацииДоступенРежимИсправленияОшибок Тогда
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
			КонецЕсли;
		Иначе
			Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи;
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ПовторнаяОтправка", Ложь) Тогда
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
			Иначе
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеПараметры, "ОшибкаПриСозданииШтрихкодовУпаковок", Ложь) Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СоздайтеШтрихкодыУпаковок);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииНанесенияКМ.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
			И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1 Тогда
			
			ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			
			ЕстьИдентификаторыОтчетовДляЗапросаКвитанции = Ложь;
			Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
				Результат = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументуДляЗапросаКвитанции(ДокументСсылка);
				ЕстьИдентификаторыОтчетовДляЗапросаКвитанции = Результат.ИдентификаторыЗаявки.Количество() > 0;
			КонецЕсли;

			Если ДополнительныеПараметры.ПакетСтатусовОбработкиОперации[Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена] <> Неопределено
				Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь) Тогда
				
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями);
				Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
				КонецЕсли;
				
			Иначе
				
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
				Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ);
				Иначе
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
					Если ЕстьИдентификаторыОтчетовДляЗапросаКвитанции Тогда
						Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
					КонецЕсли;
				КонецЕсли;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
				
			КонецЕсли;
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
				ДокументСсылка,
				ДополнительныеПараметры.СтатусОбработки,
				Статусы);

			Возврат ПараметрыОбновления;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь) Тогда
			
			// Если версия последнего сообщения обработана успешно, то коды нанесены полностью.
			Если ДополнительныеПараметры.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями);
				Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
				КонецЕсли;
				
				ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
					ДокументСсылка,
					ДополнительныеПараметры.СтатусОбработки,
					Статусы);
				
				Возврат ПараметрыОбновления;
				
			ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента Тогда
				// При передаче отчета в СУЗ, могут быть пакеты с ошибкой, по которым не получен ИдентификаторЗаявки.
				// Такие пакеты не обрабатываются в операции ЗапросКвитанции.
				Результат = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументуДляЗапросаКвитанции(ДокументСсылка);
				Если Результат.ЕстьПакетыКодовОшибками Тогда
					ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
					Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями);
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
					
					ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
						ДокументСсылка,
						ДополнительныеПараметры.СтатусОбработки,
						Статусы);
					
					Возврат ПараметрыОбновления;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
			Статусы.Принят = ДополнительныеПараметры.Статус;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены;
		КонецЕсли;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено
				И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "ЕстьЗависимыеСообщения", Ложь) Тогда
			ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			
		ИначеЕсли ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяФормированиеАТК", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяВводВОборот", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяАгрегация", Ложь) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
			
		Иначе
			
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, ОперацияНанесения,
				|ВариантЗаполненияДекларации, ОтчетПроизводственнойЛинии, ВариантВыполненияАгрегации");
			
			Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
				Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
				ИначеЕсли Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
				Иначе
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
				КонецЕсли;
			ИначеЕсли ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
				Если Реквизиты.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот Тогда
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
				Иначе
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
				КонецЕсли;
			ИначеЕсли ЕстьКодыАгрегатов(ДокументСсылка, Реквизиты)
				И Не ЗначениеЗаполнено(Реквизиты.ВариантВыполненияАгрегации) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
			КонецЕсли;
		КонецЕсли;
		
		Если Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично
			Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры.ПараметрыЗапроса, "ПовторнаяОтправка", Ложь) Тогда
			Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями);
			Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
			КонецЕсли;
		Иначе
			Если ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.СтатусНеопределен Тогда
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетСтатусНеопределен;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
			Иначе
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи;
				Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ);
				Иначе
					Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
					Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ Тогда
						Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
					КонецЕсли;
				КонецЕсли;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеПараметры, "ОшибкаПриСозданииШтрихкодовУпаковок", Ложь) Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СоздайтеШтрихкодыУпаковок);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииАгрегации.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Если ДополнительныеПараметры.ПараметрыЗапроса = Неопределено Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ДокументСсылка,
				"ВидПродукции, Операция, ВариантЗаполненияДекларации, ОтчетПроизводственнойЛинии,
				|ВариантВыполненияАгрегации, ОперацияНанесенияТолькоДляНаборов");
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
			И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1 Тогда
			
			ЕстьОшибки = Ложь;
			ЕстьУспешно = Ложь;
			Для Каждого КлючИЗначение Из ДополнительныеПараметры.ПакетСтатусовОбработкиОперации Цикл
				Если КлючИЗначение.Ключ = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
					ЕстьУспешно = Истина;
				Иначе
					ЕстьОшибки = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЕстьОшибки И ЕстьУспешно Тогда
				Статусы.Принят          = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично;
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			ИначеЕсли Не ЕстьОшибки Тогда
				Если ОперацииАгрегации.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
				ИначеЕсли ОперацииНанесенияКМ.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
				ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
					Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
						Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
					Иначе
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
					КонецЕсли;
				ИначеЕсли ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
				Иначе
					ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
				КонецЕсли;
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЕстьЗависимыеСообщения", Ложь)
			Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса Тогда
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ФормированиеАТК", Ложь) Тогда
				Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается;
			Иначе
				Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается;
			КонецЕсли;
			Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			Если ДополнительныеПараметры.ОперацияКвитанции <> Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ДополнительныеПараметры.Статус) Тогда
				Статусы.Принят = ДополнительныеПараметры.Статус;
				Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры.ПараметрыЗапроса, "ТребуетсяВводВОборот", Ложь) Тогда
					Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
				КонецЕсли;
			Иначе
				Если Реквизиты = Неопределено Тогда
					Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						ДокументСсылка,
						"ВидПродукции, Операция, ВариантЗаполненияДекларации, ОтчетПроизводственнойЛинии,
						|ВариантВыполненияАгрегации, ОперацияНанесенияТолькоДляНаборов");
				КонецЕсли;
				Если ОперацииАгрегации.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
				ИначеЕсли ОперацииНанесенияКМ.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныИАгрегированы;
				ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
					Если Реквизиты.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
						Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
					Иначе
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
					КонецЕсли;
				ИначеЕсли ОперацииВводаВОборот.Найти(Реквизиты.Операция) <> Неопределено Тогда
					Если Реквизиты.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот
						И Не Реквизиты.ОперацияНанесенияТолькоДляНаборов Тогда
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы;
						Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
					Иначе
						Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы;
					КонецЕсли;
				Иначе
					ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи;
		
		Если ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			АгрегацияВыполненаЧерезСУЗ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "АгрегацияВыполненаЧерезСУЗ", Ложь);
		Иначе
			АгрегацияВыполненаЧерезСУЗ = ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ(Реквизиты.ВидПродукции)
				И ОперацииАгрегации.Найти(Реквизиты.Операция) = Неопределено;
		КонецЕсли;
		
		Если АгрегацияВыполненаЧерезСУЗ Тогда // После передачи отчета о нанесении
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями);
		Иначе // Выполнена независимо или через ИС МП
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
		КонецЕсли;
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			ДополнительныеПараметры, "ОшибкаПриСозданииШтрихкодовУпаковок", Ложь) Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.СоздайтеШтрихкодыУпаковок);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ОперацииФормированияАТК.Найти(ДополнительныеПараметры.ОперацияКвитанции) <> Неопределено Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
					ДополнительныеПараметры, "ЕстьЗависимыеСообщения", Ложь) Тогда
			Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается;
			Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
			Если ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена
				Или ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОбрабатывается;
			КонецЕсли;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы;
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			
		КонецЕсли;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли  Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И (ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса) Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтверждено;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		Если ДополнительныеПараметры.Свойство("ПакетСтатусовОбработкиОперации")
			И ДополнительныеПараметры.ПакетСтатусовОбработкиОперации.Количество() > 1 Тогда
			
			Если ДополнительныеПараметры.ПакетСтатусовОбработкиОперации[Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена] <> Неопределено
				Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь) Тогда
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями);
			Иначе
				ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
				Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи;
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление);
				Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			КонецЕсли;
			
		ИначеЕсли ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбработанЧастично", Ложь)
			// Если версия последнего сообщения обработана успешно, то коды нанесены полностью.
			И ДополнительныеПараметры.СтатусОбработки <> Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
			ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОтклонена;
			Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями);
			
		ИначеЕсли ДополнительныеПараметры.Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично
			Или ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "ПовторнаяОтправка", Ложь) Тогда
			Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями);
		Иначе
			Статусы.Ошибка = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - признак необходимости получения всех возможных операций
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ВидПродукции, Операция, ОперацияНанесения");
	
	ЭтоМех = Реквизиты.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	
	ОтчетыОбИспользовании = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(, ЭтоМех);
	ОтчетыОбИспользовании.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	
	Если ЛинейныйСписок И ЭтоМех Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ);
		
	КонецЕсли;
	
	Если ЛинейныйСписок
		Или (ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Реквизиты.ВидПродукции)
			И (ОтчетыОбИспользовании.Найти(Реквизиты.Операция) <> Неопределено
				Или ЗначениеЗаполнено(Реквизиты.ОперацияНанесения))) Тогда
		
		Если ЭтоМех Тогда
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ);
		Иначе
			ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
			ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
			
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 101,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПроизводственнуюЛинию);
			
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 102,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПередачеКМНаПринтер);
			
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 103,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПечатиКМ);
			
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 104,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.УдалитьОтчетОПотереРаспечатанныхКМ);
			
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 105,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.ОтчетОВерификацииНанесенныхКМ);
			
			ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 106,
				Исходящий,
				Перечисления.ВидыОперацийИСМП.КвитанцияДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЛинейныйСписок
		Или Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТК);
			ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТКСоздание);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТКИзменение);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АТКУдаление);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.Агрегация);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияСозданиеНабора);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
			Исходящий,
		Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
			
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 33,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 34,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 35,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 36,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 37,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 38,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		
	КонецЕсли;
	
	Если ЛинейныйСписок
		И ОтчетыОбИспользовании.Найти(Реквизиты.Операция) = Неопределено
		И ЭтоМех Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
			
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 33,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
			
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 34,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
			
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 35,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех);
		
	КонецЕсли;
	
	Если ЛинейныйСписок
		Или (ОтчетыОбИспользовании.Найти(Реквизиты.Операция) = Неопределено
		И Реквизиты.Операция <> Перечисления.ВидыОперацийИСМП.Агрегация
		И Реквизиты.Операция <> Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		И Не ЭтоМех) Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборот);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 33,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 34,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 35,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 36,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 37,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 38,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		
	КонецЕсли;
	
	Если Не ЭтоМех Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 4,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.Агрегация);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 41,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияСоздание);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 42,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияИзменениеРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 421,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияИзменение);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 43,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияУдаление);
			
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 5,
			Исходящий,
			Перечисления.ВидыОперацийИСМП.АгрегацияПроверкаСтатусаОбработкиДокумента);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиМаркировкиТоваровИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	// Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями Тогда

		Возврат ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда

		Возврат ОтчетОНанесенииJSON(ДокументСсылка, ДополнительныеПараметры);

	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями Тогда
		
		Возврат ОтчетОНанесенииJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию Тогда
		
		Возврат КвитанцияДокументаJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию Тогда
		
		Возврат АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями Тогда
		
		Возврат АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК Тогда
		
		Возврат ФормированиеАТКJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление Тогда
		
		Возврат ПриемкаКИЗJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями Тогда
		
		Возврат ПриемкаКИЗJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли  ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ Тогда
		
		Возврат ИндивидуализацияКИЗJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для ввода КМ в оборот
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ВводВОборотJSON(ДокументСсылка, ДополнительныеПараметры, Повторно = Ложь)
	
	СообщенияJSON = Новый Массив;

	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(ТекстЗапросаВерсииВводВОборот());
	СписокЗапросов.Добавить(ТекстЗапросаШапка(), "Шапка");
	
	ТекстЗапросаТовары = ТекстЗапросаТовары();
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");
	
	СписокЗапросов.Добавить(ТекстЗапросаДанныеОтчетаПроизводственнойЛинии(), "ДанныеОтчетаПроизводственнойЛинии");
	СписокЗапросов.Добавить(ТекстЗапросаДанныеРегистра(), "ДанныеРегистра");
	СписокЗапросов.Добавить(ТекстЗапросаШтрихкодыУпаковок(), "ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                                 ДокументСсылка);
	Запрос.УстановитьПараметр("ИдентификаторПроисхожденияВЕТИССтрокой", "");
	Запрос.УстановитьПараметр("Повторно",                               Повторно);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"];
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"];
	
	Если Не Шапка.Следующий()
		Или Товары.Пустой() И ДанныеОтчета.Пустой() И Не Повторно Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ОтчетыОбИспользовании = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	ОтчетыОбИспользовании.Добавить(Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииКодовМаркировки);
	
	Если Не (ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(Шапка.ВидПродукции, Ложь, Истина)
		И ОтчетыОбИспользовании.Найти(Шапка.Операция) = Неопределено) Тогда

		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);

		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Неизвестный вид продукции для маркировки товаров: ""%1"".'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;

	КонецЕсли;

	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат ВводВОборотОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно);
	Иначе
		Возврат ВводВОборотШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно);
	КонецЕсли;
	
КонецФункции

Функция ВводВОборотШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно)

	СообщенияJSON = Новый Массив;

	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();

	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Документ;

	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		
		КодыАгрегированы     = Ложь;
		КодыАТКСформированы  = Ложь;
		
		Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			КодыАгрегированы = Истина;
			ТребуетсяАгрегация = Ложь;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
			КодыАТКСформированы = Истина;
			ТребуетсяАгрегация = ЕстьКодыАгрегатов(ДокументСсылка, Шапка);
		Иначе
			ТребуетсяАгрегация = ЕстьКодыАгрегатов(ДокументСсылка, Шапка);
		КонецЕсли;
		
	Иначе
		
		ЕстьКодыАгрегатов  = ЕстьКодыАгрегатов(ДокументСсылка, Шапка);
		ТребуетсяАгрегация = ЕстьКодыАгрегатов И Не ЗначениеЗаполнено(Шапка.ВариантВыполненияАгрегации);
		КодыАгрегированы   = ЕстьКодыАгрегатов И Не ТребуетсяАгрегация;
		
	КонецЕсли;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
	
	РеквизитыОрганизации = ИнтеграцияИС.ИННКППGLNОрганизации(Шапка.Организация, Шапка.ПроизводственныйОбъект);
	
#Область ПовторнаяОтправка
	
	ШтрихкодыУпаковокКПовторнойПередаче = Неопределено;
	ПовторнаяОтправкаНеТребуется = Ложь;
	
	Если Повторно Тогда
		
		ШтрихкодыУпаковокКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьКодыКПовторнойПередаче(ДокументСсылка);
		Если ШтрихкодыУпаковокКПовторнойПередаче = Неопределено Тогда
			КодыМаркировкиКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(ДокументСсылка);
			ШтрихкодыУпаковокКПовторнойПередаче = Новый Соответствие;
			Для Каждого ЭлементДанных Из ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировкиКПовторнойПередаче) Цикл
				ШтрихкодыУпаковокКПовторнойПередаче.Вставить(ЭлементДанных.Ссылка, Истина);
			КонецЦикла;
		КонецЕсли;
		ПовторнаяОтправкаНеТребуется = ШтрихкодыУпаковокКПовторнойПередаче.Количество() = 0;
		
	КонецЕсли;
	
#КонецОбласти

#Область ПодготовкаАбстрактнойОперации
	
	Если Повторно И ПовторнаяОтправкаНеТребуется
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",           ТребуетсяАгрегация);
		ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   Ложь);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", ПовторнаяОтправкаНеТребуется);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",            Шапка.Операция);
		ПараметрыЗапроса.Вставить("КодыАгрегированы",             КодыАгрегированы);
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
			
			Если Не ПовторнаяОтправкаНеТребуется Тогда
				ПроверитьЗаполнениеДанныхДекларации(СообщениеJSON, Шапка);
				ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
			КонецЕсли;
			
			АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборот;
			
			ПараметрыЗапроса.Вставить("КодыАТКСформированы", КодыАТКСформированы);
			ПараметрыЗапроса.Вставить("ОрганизацияИНН",      РеквизитыОрганизации.ИНН);
			ПараметрыЗапроса.Вставить("ОрганизацияКПП",      РеквизитыОрганизации.КПП);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправка",   Повторно);
			ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
			ПараметрыЗапроса.Вставить("ШтрихкодыУпаковокКПовторнойПередаче",        ШтрихкодыУпаковокКПовторнойПередаче);
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
		Иначе
			АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса;
		КонецЕсли;
		
		Если ПовторнаяОтправкаНеТребуется Тогда
			СообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		КонецЕсли;
		
		СообщениеJSON.Операция         = АбстрактнаяОперация;
		СообщениеJSON.Идентификатор    = СокрЛП(Новый УникальныйИдентификатор());
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
	
	КонецЕсли;
	
#КонецОбласти

#Область РазборКодовМаркировки

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);

	Настройки = Новый Структура("СсылкаНаОбъект", ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);

	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);

#КонецОбласти
	
	Если Повторно Тогда
		Фильтр = ШтрихкодыУпаковокКПовторнойПередаче;
	Иначе
		Фильтр = Неопределено;
	КонецЕсли;
	
	Если КодыАгрегированы Тогда
		ИсточникДанных = РезультатПоиска.ДеревоУпаковок.Строки;
	Иначе
		ИсточникДанных = РезультатПоиска.МаркированныеТовары;
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
	Параметры.Вставить("ИсточникДанных",       ИсточникДанных);
	Параметры.Вставить("ТребуетсяАгрегация",   ТребуетсяАгрегация);
	Параметры.Вставить("ПовторнаяОтправка",    Повторно);
	Параметры.Вставить("Фильтр",               Фильтр);
	Параметры.Вставить("ДокументСсылка",       ДокументСсылка);
	Параметры.Вставить("НомерВерсии",          НомерВерсии);
	Параметры.Вставить("КодыАгрегированы",     КодыАгрегированы);
	
	Параметры.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
	Параметры.Вставить("СоздаватьШтрихкодыУпаковок",                 Ложь);

	Возврат СообщенияJSONВводВОборот(Шапка, Товары, СообщениеJSON, Параметры);

КонецФункции

Функция ВводВОборотОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно)

	СообщенияJSON = Новый Массив;

	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	//@skip-warning
	ИспользуетсяРегистрДляХраненияДанныхОтчета = Не РезультатЗапроса["ДанныеРегистра"].Пустой();

	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Документ;

	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		
		КодыАгрегированы     = Ложь;
		КодыАТКСформированы  = Ложь;
		
		Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			КодыАгрегированы = Истина;
			ТребуетсяАгрегация = Ложь;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
			КодыАТКСформированы = Истина;
			ТребуетсяАгрегация = ЕстьКодыАгрегатов(ДокументСсылка, Шапка);
		Иначе
			ТребуетсяАгрегация = ЕстьКодыАгрегатов(ДокументСсылка, Шапка);
		КонецЕсли;
		
	Иначе
		
		ЕстьКодыАгрегатов  = ЕстьКодыАгрегатов(ДокументСсылка, Шапка);
		ТребуетсяАгрегация = ЕстьКодыАгрегатов И Не ЗначениеЗаполнено(Шапка.ВариантВыполненияАгрегации);
		КодыАгрегированы   = ЕстьКодыАгрегатов И Не ТребуетсяАгрегация;
		
	КонецЕсли;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);

	СоздаватьШтрихкодыУпаковок = Шапка.СоздаватьШтрихкодыУпаковок И Не ТребуетсяАгрегация;
	ЭтоИмпортСФТС              = Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
	РеквизитыОрганизации       = ИнтеграцияИС.ИННКППGLNОрганизации(Шапка.Организация, Шапка.ПроизводственныйОбъект);
	
#Область ПовторнаяОтправка
	
	Если Повторно И ДанныеОтчета.Количество() = 0 Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",           ТребуетсяАгрегация);
		ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   СоздаватьШтрихкодыУпаковок);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",            Шапка.Операция);
		ПараметрыЗапроса.Вставить("КодыАгрегированы",             КодыАгрегированы);
		ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
			
			АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборот;
			
			ПараметрыЗапроса.Вставить("КодыАТКСформированы", КодыАТКСформированы);
			ПараметрыЗапроса.Вставить("ОрганизацияИНН",      РеквизитыОрганизации.ИНН);
			ПараметрыЗапроса.Вставить("ОрганизацияКПП",      РеквизитыОрганизации.КПП);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправка",   Повторно);
			ПараметрыЗапроса.Вставить("ШтрихкодыУпаковокКПовторнойПередаче", Неопределено);
			
			СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
				АбстрактнаяОперация, ДокументСсылка, НомерВерсии);
			
		Иначе
			АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса;
		КонецЕсли;
		
		СообщениеJSON.Операция            = АбстрактнаяОперация;
		СообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		СообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
		СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
#КонецОбласти
	
#Область РазборКодовМаркировки
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	КешДанныхРазбора = Новый Соответствие;
	
	ПараметрыРазбора = Новый Структура;
	// Если флаг стоит, то из пула полные коды брать нельзя.
	ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
	ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
	
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	
	// Ввод в оборот
	ОперацияНанесенияВыполненаНезависимо = Не ЗначениеЗаполнено(Шапка.ОперацияНанесения);
	
	КодыМаркировкиНормализованы = Истина;
	
	Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
		Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
			КодыМаркировкиНормализованы = Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы", КодыМаркировкиНормализованы);
	
	Если КодыМаркировкиНормализованы И Повторно Тогда
		
		ДанныеОтчета.Колонки.ЗначениеШтрихкодаКПередаче.Имя = "НормализованноеЗначениеШтрихкодаКПередаче";
		ДанныеОтчета.Колонки.ЗначениеШтрихкодаУпаковкиКПередаче.Имя = "НормализованноеЗначениеШтрихкодаУпаковкиКПередаче";
		
	КонецЕсли;
	
	// Если ввод в оборот выполняется после передачи отчета о нанесении, то нормализованные коды уже сохранены в данных документа.
	// Разбор требуется выполнять для ввода в оборот отдельной операцией,
	// или для документов, в которых до обновления не были заполнены Нормализованные коды
	
	РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
		ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
	
	ЕстьОшибки = РезультатОбработкиДанныхОтчета.ЕстьОшибки;
	Если ЕстьОшибки Тогда
		СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
	КонецЕсли;
	
	Если ОперацияНанесенияВыполненаНезависимо Или Не КодыМаркировкиНормализованы Тогда
		
		РезультатСохраненияДанныхОтчета = СохранитьОбработанныеДанныеОтчета(
			ДокументСсылка,
			ДанныеОтчета,
			Не Повторно,
			ИспользуетсяРегистрДляХраненияДанныхОтчета,
			Шапка.Организация);
		
		Если РезультатСохраненияДанныхОтчета.ЕстьОшибки Тогда
			СообщитьОбОшибкеПриСохраненииДанныхОтчета(СообщениеJSON, РезультатСохраненияДанныхОтчета.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если КодыАгрегированы Тогда
		ИсточникДанных = Новый Массив;
	Иначе
		ИсточникДанных = Новый ТаблицаЗначений;
		ИсточникДанных.Колонки.Добавить("Штрихкод",    Новый ОписаниеТипов("Строка"));
		ИсточникДанных.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
		ИсточникДанных.Колонки.Добавить("КодДляПередачиИСМП", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
		
		ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
		
		Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
			
			Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
				Продолжить;
			КонецЕсли;
			
			НормализованныйКодМаркировки = ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки];
			
			Если СтрокаДанных.ЕстьОшибки
				Или Не ЗначениеЗаполнено(НормализованныйКодМаркировки) Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки.'");
			КонецЕсли;
			
			Если Повторно И Не ИсходнаяСтрока[ИменаКолонок.КодМаркировки + "КПередаче"] Тогда
				Продолжить; // Не передавать код
			КонецЕсли;
			
			ВидУпаковки = СтрокаДанных[ИменаКолонок.ВидУпаковки];
			GTIN        = СтрокаДанных[ИменаКолонок.GTIN];
			
			Если Не ЗначениеЗаполнено(ВидУпаковки) Тогда
				ИнтеграцияИСМПСлужебный.ПодготовитьДанныеКОпределениюВидаУпаковки(
					НормализованныйКодМаркировки, GTIN, ДополнительныеПараметры);
				Продолжить;
			КонецЕсли;
			
			Если ЭтоИмпортСФТС Тогда
				// Для операции Импорт с ФТС выполняется только проверка заполнения вида упаковки по данным отчета.
				// Формирование сообщений в абстрактной операции.
				Продолжить;
			КонецЕсли;
			
			Если КешДанныхРазбора[НормализованныйКодМаркировки] = Неопределено Тогда
				
				Если КодыАгрегированы Тогда
					
					КешДанныхРазбора.Вставить(
						ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки],
						Новый Структура("ВидУпаковки, ТипШтрихкода, EAN, GTIN, КоличествоВложенныхЕдиниц, ДанныеРазбора, КодДляПередачиИСМП",
							СтрокаДанных[ИменаКолонок.ВидУпаковки],
							СтрокаДанных[ИменаКолонок.ТипШтрихкода],
							СтрокаДанных[ИменаКолонок.EAN],
							СтрокаДанных[ИменаКолонок.GTIN],
							СтрокаДанных[ИменаКолонок.КоличествоВложенныхЕдиниц],
							СтрокаДанных[ИменаКолонок.ДанныеРазбора],
							СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП]));
					
				ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
					
					КешДанныхРазбора.Вставить(НормализованныйКодМаркировки, Истина);
					СтрокаДанныхДляВводаВОборот = ИсточникДанных.Добавить();
					СтрокаДанныхДляВводаВОборот.Штрихкод    = НормализованныйКодМаркировки;
					СтрокаДанныхДляВводаВОборот.ВидУпаковки = ВидУпаковки;
					СтрокаДанныхДляВводаВОборот.КодДляПередачиИСМП = СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП];
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КодыАгрегированы Тогда
				
			ИсточникДанных.Добавить(
				Новый Структура(
					"Штрихкод, ШтрихкодУпаковки",
					ИсходнаяСтрока.НормализованноеЗначениеШтрихкода, ИсходнаяСтрока.НормализованноеЗначениеШтрихкодаУпаковки));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено Тогда
		
		СообщениеJSON.ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
		СообщениеJSON.Операция         = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
#КонецОбласти

#Область ВводВОборотИмпортСФТС
	
	Если ЭтоИмпортСФТС Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",  ТребуетсяАгрегация);
		ПараметрыЗапроса.Вставить("КодыАгрегированы",    КодыАгрегированы);
		ПараметрыЗапроса.Вставить("КодыАТКСформированы", КодыАТКСформированы);
		ПараметрыЗапроса.Вставить("ОрганизацияИНН",      РеквизитыОрганизации.ИНН);
		ПараметрыЗапроса.Вставить("ОрганизацияКПП",      РеквизитыОрганизации.КПП);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",   Шапка.Операция);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправка",   Повторно);
		ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",                 СоздаватьШтрихкодыУпаковок);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборот;
		АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, АбстрактнаяОперация, НомерВерсии);
		
		АбстрактноеСообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.Идентификатор    = СокрЛП(Новый УникальныйИдентификатор());
		
		Если Не Повторно Тогда
			ПроверитьЗаполнениеДанныхДекларации(АбстрактноеСообщениеJSON, Шапка);
			ПроверитьЗаполнениеИНН(АбстрактноеСообщениеJSON, РеквизитыОрганизации, Шапка);
		КонецЕсли;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
#КонецОбласти
	
	// Заполнение дерева для ввода в оборот по кодам агрегатов.
	Если КодыАгрегированы Тогда
		
		РезультатОбработки = ИнтеграцияИСМПСлужебный.ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии(
			Шапка, ИсточникДанных, КешДанныхРазбора);
		Если ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки) Тогда
			ВызватьИсключение  РезультатОбработки.ТекстОшибки;
		КонецЕсли;
		
		ИсточникДанных = РезультатОбработки.ДеревоУпаковок.Строки;
		
	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
	Параметры.Вставить("ИсточникДанных",       ИсточникДанных);
	Параметры.Вставить("ТребуетсяАгрегация",   ТребуетсяАгрегация);
	Параметры.Вставить("ПовторнаяОтправка",    Повторно);
	Параметры.Вставить("Фильтр",               Неопределено);
	Параметры.Вставить("ДокументСсылка",       ДокументСсылка);
	Параметры.Вставить("НомерВерсии",          НомерВерсии);
	Параметры.Вставить("КодыАгрегированы",     КодыАгрегированы);
	
	Параметры.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
	Параметры.Вставить("СоздаватьШтрихкодыУпаковок",                 СоздаватьШтрихкодыУпаковок);

	Возврат СообщенияJSONВводВОборот(Шапка, Шапка, СообщениеJSON, Параметры);

КонецФункции

// Формирует JSON сообщения для отчета о нанесении
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ОтчетОНанесенииJSON(ДокументСсылка, ДополнительныеПараметры, Повторно = Ложь)

	СообщенияJSON = Новый Массив;

	СписокЗапросов = Новый СписокЗначений;

	СписокЗапросов.Добавить(ТекстЗапросаВерсииОтчетОНанесении());
	СписокЗапросов.Добавить(ТекстЗапросаШапка(), "Шапка");

	ТекстЗапросаТовары = ТекстЗапросаТовары();
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");

	СписокЗапросов.Добавить(ТекстЗапросаДанныеОтчетаПроизводственнойЛинии(), "ДанныеОтчетаПроизводственнойЛинии");
	СписокЗапросов.Добавить(ТекстЗапросаДанныеРегистра(), "ДанныеРегистра");
	СписокЗапросов.Добавить(ТекстЗапросаШтрихкодыУпаковок(), "ШтрихкодыУпаковок");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                                 ДокументСсылка);
	Запрос.УстановитьПараметр("ОперацииНанесенияКодовМаркировки",       ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки());
	Запрос.УстановитьПараметр("ИдентификаторПроисхожденияВЕТИССтрокой", "");
	Запрос.УстановитьПараметр("Повторно",                               Повторно);

	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);

	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"];
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"];

	Если Не Шапка.Следующий()
		Или Товары.Пустой() И ДанныеОтчета.Пустой() И Не Повторно Тогда

		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);

		Возврат СообщенияJSON;

	КонецЕсли;

	Если Не ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Шапка.ВидПродукции) Тогда

		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Неизвестный вид продукции для маркировки товаров: ""%1"".'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;

	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции) Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		
		РеквизитыОрганизации       = ИнтеграцияИС.ИННКППGLNОрганизации(Шапка.Организация, Шапка.ПроизводственныйОбъект);
		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
		
		Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат ОтчетОНанесенииОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно);
	Иначе
		Возврат ОтчетОНанесенииШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно);
	КонецЕсли;

КонецФункции

Функция ОтчетОНанесенииШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно)
	
	СообщенияJSON = Новый Массив;
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Документ;
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
	
	ЭтоПродукцияМОТП      = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	ЭтоМолочнаяПродукция  = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции);
	ЭтоПиво               = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	ЭтоБАПиво             = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
	ЭтоКреслаКоляски      = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия;
	ЭтоТитановаяПродукция = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция;
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Шапка.ВидПродукции);
	РазбиватьПоСрокамГодности       = ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Шапка.ВидПродукции);
	
	ЭтоИмпортСФТС = Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
	ЭтоОперацияНанесения = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Шапка.Операция).ЭтоОперацияНанесения;
	
	АгрегацияПередВводомВОборот = Шапка.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
	ЕстьКодыАгрегатов = ЕстьКодыАгрегатов(Шапка.Ссылка, Шапка);
	ТребуетсяАгрегация = ЕстьКодыАгрегатов
		И (АгрегацияПередВводомВОборот
		   Или ЭтоОперацияНанесения
		   Или (ЭтоИмпортСФТС И Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок));
	ТребуетсяФормированиеАТК = Ложь;
	
	Если ЭтоИмпортСФТС Тогда
		Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки Тогда
			ТребуетсяВводВОборот = Истина;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
			ТребуетсяВводВОборот     = Ложь;
			ТребуетсяФормированиеАТК = Истина;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			ТребуетсяВводВОборот = Ложь;
		КонецЕсли;
	Иначе
		ТребуетсяВводВОборот = ТребуетсяВводВОборот(Шапка) И Не ТребуетсяАгрегация;
	КонецЕсли;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
	
	РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
		СообщенияJSON, СообщениеJSON, ДокументСсылка, ДополнительныеПараметры);
	Если Не РезультатОпределенияСУЗ.Успешно Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
#Область ПовторнаяОтправка

	Если Повторно Тогда

		ШтрихкодыУпаковокКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьКодыКПовторнойПередаче(ДокументСсылка);
		Если ШтрихкодыУпаковокКПовторнойПередаче = Неопределено Тогда
			КодыМаркировкиКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(ДокументСсылка);
			ШтрихкодыУпаковокКПовторнойПередаче = Новый Соответствие;
			Для Каждого ЭлементДанных Из ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировкиКПовторнойПередаче) Цикл
				ШтрихкодыУпаковокКПовторнойПередаче.Вставить(ЭлементДанных.Ссылка, Истина);
			КонецЦикла;
		КонецЕсли;
		
		Если ШтрихкодыУпаковокКПовторнойПередаче.Количество() = 0 Тогда
			
			СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
			
			СообщениеJSON.СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = ДокументСсылка.ПроизводственныйОбъект;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			
			ОперацияДокумента = ?(ЗначениеЗаполнено(Шапка.ОперацияНанесения), Шапка.ОперацияНанесения, Шапка.Операция);
			
			СообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
			СообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",           ТребуетсяАгрегация);
			ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   Ложь);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
			ПараметрыЗапроса.Вставить("ОперацияДокумента",            ОперацияДокумента);
			ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",         ТребуетсяВводВОборот);
			ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
			ПараметрыЗапроса.Вставить("ТребуетсяФормированиеАТК",     ТребуетсяФормированиеАТК);
			
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			СообщенияJSON.Добавить(СообщениеJSON);
			
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
	КонецЕсли;

#КонецОбласти

#Область РазборКодовМаркировки
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	Настройки = Новый Структура("СсылкаНаОбъект", ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);
	
	Если ЭтоПиво Или ЭтоБАПиво Тогда
		НоменклатураДокумента = РезультатПоиска.МаркированныеТовары.ВыгрузитьКолонку("Номенклатура");
		Если ЭтоПиво Тогда
			// Настройки ЕГАИС
			ОбъемАлкогольнойПродукции = ИнтеграцияИСМП.ОбъемМаркируемойПродукцииВЛитрах(НоменклатураДокумента);
		КонецЕсли;
		// Настройки ИС МП
		ДанныеПродукции = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок(НоменклатураДокумента);
	КонецЕсли;
	
	ПолныеКодыМаркировки = ИнициализироватьПолныеКодыМаркировки();
	КодыМаркировки       = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(РазбиватьПоСрокамГодности);
	
	СоответствиеБлоковИНаборов = Новый Соответствие;
	
	Если ЭтоТитановаяПродукция Или ЭтоПиво Тогда
		СоответствиеGTIN = Новый Соответствие;
	КонецЕсли;
	
	ЕстьНаборы            = Ложь;
	ЕстьГрупповыеУпаковки = Ложь;
	Для Каждого СтрокаТЧМаркированныеТовары Из РезультатПоиска.МаркированныеТовары Цикл
		
		Если СтрокаТЧМаркированныеТовары.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРодитель = СтрокаТЧМаркированныеТовары.СтрокаДерева.Родитель;
		
		// передавать вложения КИН + КИГУ
		ТребуетсяПередатьКодМаркировки              = Не Шапка.ОперацияНанесенияТолькоДляНаборов;
		ТребуетсяПередатьКодНабораГрупповойУпаковки = (СтрокаРодитель <> Неопределено);
		
		Если Повторно Тогда
			ТребуетсяПередатьКодМаркировки = ШтрихкодыУпаковокКПовторнойПередаче[СтрокаТЧМаркированныеТовары.ШтрихкодУпаковки] <> Неопределено
				И Не Шапка.ОперацияНанесенияТолькоДляНаборов;
			
			ТребуетсяПередатьКодНабораГрупповойУпаковки = (СтрокаРодитель <> Неопределено
				И ШтрихкодыУпаковокКПовторнойПередаче[СтрокаРодитель.ШтрихкодУпаковки] <> Неопределено);
		КонецЕсли;
		
		Если ТребуетсяПередатьКодМаркировки Тогда
			
			Если ЭтоПиво Или ЭтоБАПиво Тогда
				
				Если ЭтоПиво Тогда
					ОбъемЕГАИС = ОбъемАлкогольнойПродукции[СтрокаТЧМаркированныеТовары.Номенклатура];
					Если ОбъемЕГАИС = Неопределено Тогда
						ОбъемЕГАИС = 0;
					КонецЕсли;
				Иначе
					ОбъемЕГАИС = 0;
				КонецЕсли;
				
				Если ОбъемЕГАИС = 0 Тогда
					Объем = ИнтеграцияИСКлиентСервер.ПолучитьДанныеУпаковки(
						ДанныеПродукции, СтрокаТЧМаркированныеТовары.Номенклатура).Объем;
				КонецЕсли;
				
				// Объем заполнен в подсистеме ЕГАИС
				Если ОбъемЕГАИС <> 0 Тогда
					СтрокаТЧМаркированныеТовары.ТребуетВзвешивания = Истина;
					СтрокаТЧМаркированныеТовары.Количество = СтрокаТЧМаркированныеТовары.Количество * ОбъемЕГАИС;
				// Если требует взвешивания, объем нужно перевести в литры
				ИначеЕсли СтрокаТЧМаркированныеТовары.ТребуетВзвешивания Тогда
					СтрокаТЧМаркированныеТовары.Количество = СтрокаТЧМаркированныеТовары.Количество * Объем;
				// Если объем указан, тогда переведем количество в литры
				ИначеЕсли Объем <> 0 Тогда
					СтрокаТЧМаркированныеТовары.ТребуетВзвешивания = Истина;
					СтрокаТЧМаркированныеТовары.Количество = СтрокаТЧМаркированныеТовары.Количество * Объем;
				КонецЕсли;
				
			КонецЕсли;
			
			ДобавитьКодКПолучению(
				ПолныеКодыМаркировки,
				СтрокаТЧМаркированныеТовары.Штрихкод,
				РазбиватьПоСрокамГодности,
				СтрокаТЧМаркированныеТовары,,,
				СтрокаТЧМаркированныеТовары.ВидУпаковки);
			
			ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
				СтрокаТЧМаркированныеТовары, КодыМаркировки, РазбиватьПоСрокамГодности);
			
		КонецЕсли;
		
		Если ТребуетсяПередатьКодНабораГрупповойУпаковки Тогда
			
			Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ЕстьГрупповыеУпаковки = Истина;
			ИначеЕсли СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				ЕстьНаборы = Истина;
			КонецЕсли;
			
			Если СоответствиеБлоковИНаборов[СтрокаРодитель.Штрихкод] = Неопределено Тогда
				
				СоответствиеБлоковИНаборов.Вставить(СтрокаРодитель.Штрихкод, Истина);
				
				Если СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
					Или СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
					
					ДобавитьКодКПолучению(
						ПолныеКодыМаркировки,
						СтрокаРодитель.Штрихкод,
						РазбиватьПоСрокамГодности,
						СтрокаРодитель,,,
						СтрокаРодитель.ВидУпаковки);
					
					ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
						СтрокаРодитель, КодыМаркировки, РазбиватьПоСрокамГодности);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ЭтоТитановаяПродукция Или ЭтоПиво)
			И СоответствиеGTIN[СтрокаТЧМаркированныеТовары.GTIN] = Неопределено Тогда
			ДанныеGTIN = Новый Структура;
			ДанныеGTIN.Вставить("Номенклатура", СтрокаТЧМаркированныеТовары.Номенклатура);
			ДанныеGTIN.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
			СоответствиеGTIN.Вставить(СтрокаТЧМаркированныеТовары.GTIN, ДанныеGTIN);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Повторно
		И Не ЭтоПродукцияМОТП
		И Не ЭтоИмпортСФТС
		И Не ЭтоОперацияНанесения Тогда
		
		ВариантВыполненияАгрегации = ВариантВыполненияАгрегации(Шапка, ЕстьНаборы, ЕстьГрупповыеУпаковки);
		Если ВариантВыполненияАгрегации = Неопределено Тогда
			СообщитьОНеподдерживаемомСоставеОтчета(СообщениеJSON);
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ВариантВыполненияАгрегации <> Шапка.ВариантВыполненияАгрегации Тогда 
			
			Результат = СохранитьВариантВыполненияАгрегации(ДокументСсылка, ВариантВыполненияАгрегации, Шапка.Организация);
			Если Результат.ЕстьОшибки Тогда
				СообщитьОбОшибкеПриСохраненииДанныхОтчета(СообщениеJSON, Результат.ТекстОшибки);
				СообщенияJSON.Добавить(СообщениеJSON);
				Возврат СообщенияJSON;
			КонецЕсли;
			ТребуетсяАгрегация = ЕстьКодыАгрегатов
				И ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
			ТребуетсяВводВОборот = ТребуетсяВводВОборот(Шапка) И Не ТребуетсяАгрегация;
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти
	
	Если ЭтоПиво Тогда
		ПроверитьЗаполнениеДатыПроизводства(Шапка.ДатаПроизводства, СообщениеJSON);
		Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторАдреса = ИдентификаторАдреса(Шапка.ВидПродукции, РезультатОпределенияСУЗ, СообщениеJSON);
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
		КодыМаркировки, "ПолныйКодМаркировки, GTIN", РазбиватьПоСрокамГодности И Не Шапка.ОтчетПроизводственнойЛинии);
	ПолныеКодыМаркировки.Индексы.Добавить("КодМаркировки");
	ЗаполнитьПолныеКодыМаркировки(ПолныеКодыМаркировки, РезультатПоискаВПуле);
	
	Если ЭтоКреслаКоляски Тогда
		
		ПроверитьЗаполнениеЗаводскогоСерийногоНомера(Шапка, ПолныеКодыМаркировки, СообщениеJSON);
		Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппыКодов = Новый Массив;
	Если Не ПроверитьИРазбитьНаГруппыПолныеКодыМаркировки(СообщенияJSON, СообщениеJSON, ГруппыКодов, ПолныеКодыМаркировки) Тогда
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Шапка.ВидПродукции, Ложь) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy";
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			ГоденДоСтрокой = Формат(Шапка.СрокГодности, ФорматДаты);
			Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
				ДанныеСообщения.Вставить("ГоденДо", ГоденДоСтрокой);
			КонецЦикла;
		Иначе
			Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
				ГоденДоСтрокой = Формат(ДанныеСообщения.КлючГоденДо, ФорматДаты);
				ДанныеСообщения.Вставить("ГоденДо", ГоденДоСтрокой);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоМолочнаяПродукция Или ЭтоПродукцияПодконтрольнаяВЕТИС Тогда

		ИдентификаторыВЕТИС = Новый Массив;
		ИдентификаторыВЕТИС = РезультатПоискаВПуле.ВыгрузитьКолонку("ИдентификаторПроисхожденияВЕТИС");
		ДанныеПоИдентификаторам = ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(ИдентификаторыВЕТИС);

		Для Каждого ДанныеСообщения Из ГруппыКодов Цикл

			Если ДанныеСообщения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				Продолжить;
			КонецЕсли;

			ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(ДанныеСообщения.КлючИдентификаторПроисхожденияВЕТИС);
			ИмяПараметраГоденДо = "expDate";
			ФорматДаты          = "ДФ=yyMMdd";
			Если ДанныеПоИдентификатору <> Неопределено
				И ДанныеПоИдентификатору.СкоропортящаясяПродукция Тогда
				ИмяПараметраГоденДо = "expDate72";
				ФорматДаты          = "ДФ=yyMMddHHmm";
			КонецЕсли;
			ГоденДоСтрокой = Формат(ДанныеСообщения.КлючГоденДо, ФорматДаты);
			ДанныеСообщения.Вставить("ПараметрГоденДо", ИмяПараметраГоденДо);
			ДанныеСообщения.Вставить("ГоденДо",         ГоденДоСтрокой);

		КонецЦикла;

	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ГруппыКодов",          ГруппыКодов);
	Параметры.Вставить("ТребуетсяАгрегация",   ТребуетсяАгрегация);
	Параметры.Вставить("Повторно",             Повторно);
	Параметры.Вставить("ДокументСсылка",       ДокументСсылка);
	Параметры.Вставить("НомерВерсии",          НомерВерсии);
	Параметры.Вставить("ТребуетсяВводВОборот", ТребуетсяВводВОборот);
	Параметры.Вставить("ИдентификаторАдреса",  ИдентификаторАдреса);
	
	Параметры.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
	Параметры.Вставить("СоздаватьШтрихкодыУпаковок",                 Ложь);
	Параметры.Вставить("СтанцияУправленияЗаказами",                  РезультатОпределенияСУЗ.СтанцияУправленияЗаказами);
	Параметры.Вставить("ФорматОбмена",                               РезультатОпределенияСУЗ.НастройкаОбмена.ФорматОбмена);
	Параметры.Вставить("ТребуетсяФормированиеАТК",                   ТребуетсяФормированиеАТК);
	
	
	Если ЭтоТитановаяПродукция Или ЭтоПиво Тогда
		Товары = РезультатЗапроса["Товары"].Выгрузить();
		Для Каждого КлючИЗначение Из СоответствиеGTIN Цикл
			НайденныеСтроки = Товары.НайтиСтроки(КлючИЗначение.Значение);
			Если ЭтоТитановаяПродукция Тогда
				ДанныеСертификации = Новый Структура;
				ДанныеСертификации.Вставить("Номер", "");
				ДанныеСертификации.Вставить("Дата",  "");
				ДанныеСертификации.Вставить("Выдан", "");
				Если НайденныеСтроки.Количество() > 0 Тогда
					ДанныеСертификации.Номер = НайденныеСтроки[0].НомерПаспортаСоответствия;
					ДанныеСертификации.Дата  = Формат(НайденныеСтроки[0].ДатаПаспортаСоответствия, "ДФ=yyyy-MM-dd");
					ДанныеСертификации.Выдан = НайденныеСтроки[0].КемВыданПаспортСоответствия;
				КонецЕсли;
				КлючИЗначение.Значение.Вставить("ДанныеСертификации", ДанныеСертификации);
			ИначеЕсли ЭтоПиво Тогда
				РеквизитовНанесенияНаПиво = Новый Структура;
				РеквизитовНанесенияНаПиво.Вставить("НомерПервичногоДокумента",  "");
				РеквизитовНанесенияНаПиво.Вставить("ДатаПервичногоДокумента",   "");
				РеквизитовНанесенияНаПиво.Вставить("СодержаниеЭтиловогоСпирта", "");
				Если НайденныеСтроки.Количество() > 0 Тогда
					РеквизитовНанесенияНаПиво.НомерПервичногоДокумента  = НайденныеСтроки[0].НомерПервичногоДокумента;
					РеквизитовНанесенияНаПиво.ДатаПервичногоДокумента   = Формат(НайденныеСтроки[0].ДатаПервичногоДокумента, "ДФ=yyyy-MM-dd");
					РеквизитовНанесенияНаПиво.СодержаниеЭтиловогоСпирта = Формат(НайденныеСтроки[0].СодержаниеЭтиловогоСпирта, "ЧРД=.;");
				КонецЕсли;
				КлючИЗначение.Значение.Вставить("РеквизитовНанесенияНаПиво", РеквизитовНанесенияНаПиво);
			КонецЕсли;
		КонецЦикла;
		Параметры.Вставить("СоответствиеGTIN", СоответствиеGTIN);
	КонецЕсли;
	
	Возврат СообщенияJSONОтчетОНанесении(Шапка, Параметры);

КонецФункции

Функция ОтчетОНанесенииОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно)

	СообщенияJSON = Новый Массив;

	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();

	//@skip-warning
	ИспользуетсяРегистрДляХраненияДанныхОтчета = Не РезультатЗапроса["ДанныеРегистра"].Пустой();

	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Документ;
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
	
	РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
		СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
	Если Не РезультатОпределенияСУЗ.Успешно Тогда
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ЭтоПродукцияМОТП      = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	ЭтоМолочнаяПродукция  = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции);
	ЭтоПиво               = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	ЭтоБАПиво             = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
	ЭтоКреслаКоляски      = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия;
	ЭтоТитановаяПродукция = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция;
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Шапка.ВидПродукции);
	РазбиватьПоСрокамГодности       = ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Шапка.ВидПродукции);
	
	ЭтоИмпортСФТС = Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
	ЭтоОперацияНанесения = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Шапка.Операция).ЭтоОперацияНанесения;
	
	АгрегацияПередВводомВОборот = Шапка.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
	ЕстьКодыАгрегатов = ЕстьКодыАгрегатов(Шапка.Ссылка, Шапка);
	ТребуетсяАгрегация = ЕстьКодыАгрегатов
		И (АгрегацияПередВводомВОборот
		   Или ЭтоОперацияНанесения
		   Или (ЭтоИмпортСФТС И Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок));
	ТребуетсяФормированиеАТК = Ложь;
	
	Если ЭтоИмпортСФТС Тогда
		Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки Тогда
			ТребуетсяВводВОборот = Истина;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
			ТребуетсяВводВОборот = Ложь;
			ТребуетсяФормированиеАТК = Истина;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			ТребуетсяВводВОборот = Ложь;
		КонецЕсли;
	Иначе
		ТребуетсяВводВОборот = ТребуетсяВводВОборот(Шапка) И Не ТребуетсяАгрегация;
	КонецЕсли;
	
	СоздаватьШтрихкодыУпаковок = Шапка.СоздаватьШтрихкодыУпаковок
		И Не ТребуетсяАгрегация
		И Не ТребуетсяВводВОборот
		И Не ТребуетсяФормированиеАТК;

#Область ПовторнаяОтправка
	
	Если Повторно Тогда
		
		Если ДанныеОтчета.Количество() = 0 Тогда
			
			СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
			
			СообщениеJSON.СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = ДокументСсылка.ПроизводственныйОбъект;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			
			ОперацияДокумента = ?(ЗначениеЗаполнено(Шапка.ОперацияНанесения), Шапка.ОперацияНанесения, Шапка.Операция);
			
			СообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
			СообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",           ТребуетсяАгрегация);
			ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   СоздаватьШтрихкодыУпаковок);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
			ПараметрыЗапроса.Вставить("ОперацияДокумента",            ОперацияДокумента);
			ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",         ТребуетсяВводВОборот);
			ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
			ПараметрыЗапроса.Вставить("ТребуетсяФормированиеАТК",     ТребуетсяФормированиеАТК);
			
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
	КонецЕсли;
	
#КонецОбласти

#Область РазборКодовМаркировки

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	ПараметрыРазбора = Новый Структура;
	//Если флаг стоит, то из пула полные коды брать нельзя.
	ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
	ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
	
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	
	РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
		ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
	
	// 1. Заполнение таблицы КодыМаркировки для поиска в пуле + кеш.
	
	ЕстьОшибки = РезультатОбработкиДанныхОтчета.ЕстьОшибки;
	
	Если ЕстьОшибки Тогда
		
		РезультатСохраненияДанныхОтчета = СохранитьОбработанныеДанныеОтчета(
			ДокументСсылка,
			ДанныеОтчета,
			Не Повторно,
			ИспользуетсяРегистрДляХраненияДанныхОтчета,
			Шапка.Организация);
		
		Если РезультатСохраненияДанныхОтчета.ЕстьОшибки Тогда
			СообщитьОбОшибкеПриСохраненииДанныхОтчета(СообщениеJSON, РезультатСохраненияДанныхОтчета.ТекстОшибки);
		КонецЕсли;
		
		СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ПолныеКодыМаркировки = ИнициализироватьПолныеКодыМаркировки();
	КодыМаркировки       = ШтрихкодированиеИСМП.НоваяТаблицаПоискаКодаМаркировкиВПуле(РазбиватьПоСрокамГодности);
	
	КешДанныхРазбора       = Новый Соответствие;
	КешКодовДляПоискаВПуле = Новый Соответствие;
	
	ВидыУпаковокДляПередачиОтчетаОНанесении = ШтрихкодированиеИСКлиентСервер.ВидыУпаковокДляПередачиОтчетаОНанесении();
	
	ЕстьНаборы            = Ложь;
	ЕстьГрупповыеУпаковки = Ложь;
	
	Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
		
		ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
		
		Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
			
			Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
				Продолжить;
			КонецЕсли;
			
			НормализованныйКодМаркировки = ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки];
			
			Если СтрокаДанных.ЕстьОшибки
				Или Не ЗначениеЗаполнено(НормализованныйКодМаркировки) Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки.'");
			КонецЕсли;
			
			Если Повторно И Не ИсходнаяСтрока[ИменаКолонок.КодМаркировки + "КПередаче"] Тогда
				Продолжить; // Не передавать код
			КонецЕсли;
			
			ВидУпаковки                  = СтрокаДанных[ИменаКолонок.ВидУпаковки];
			GTIN                         = СтрокаДанных[ИменаКолонок.GTIN];
			ПолныйКодМаркировки          = СтрокаДанных[ИменаКолонок.ПолныйКодМаркировки];
			
			Если Не ЗначениеЗаполнено(ВидУпаковки) Тогда
				ИнтеграцияИСМПСлужебный.ПодготовитьДанныеКОпределениюВидаУпаковки(
					НормализованныйКодМаркировки, GTIN, ДополнительныеПараметры);
				Продолжить;
			ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ЕстьГрупповыеУпаковки = Истина;
			ИначеЕсли ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				ЕстьНаборы = Истина;
			КонецЕсли;
			
			Если ВидыУпаковокДляПередачиОтчетаОНанесении.Получить(ВидУпаковки) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Шапка.ОперацияНанесенияТолькоДляНаборов
				И Не (ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				      Или ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
				Продолжить;
			КонецЕсли;
			
			Если КешДанныхРазбора[НормализованныйКодМаркировки] = Неопределено Тогда
				
				КешДанныхРазбора.Вставить(НормализованныйКодМаркировки, Истина);
				
				Если ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
					
					ДобавитьКодКПолучению(
						ПолныеКодыМаркировки,
						НормализованныйКодМаркировки,,,
						ПолныйКодМаркировки,
						СтрокаДанных[ИменаКолонок.GTIN],
						ВидУпаковки);
					
				ИначеЕсли Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
					
					// Искать полный код в пуле
					ШтрихкодированиеИСМП.ДобавитьКодМаркировкиВТаблицуДляПоискаВПуле(
						НормализованныйКодМаркировки, КодыМаркировки);
					
					СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[НормализованныйКодМаркировки];
					Если СтрокиТаблицыДляОбработки = Неопределено Тогда
						СтрокиТаблицыДляОбработки = Новый Массив;
						КешКодовДляПоискаВПуле.Вставить(НормализованныйКодМаркировки, СтрокиТаблицыДляОбработки);
					КонецЕсли;
					
					СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
					
				Иначе
					ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки, ЕстьОшибки);
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(ПолныйКодМаркировки) Тогда
				
				Если Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки Тогда
					
					СтрокиТаблицыДляОбработки = КешКодовДляПоискаВПуле[НормализованныйКодМаркировки];
					Если СтрокиТаблицыДляОбработки = Неопределено Тогда
						СтрокиТаблицыДляОбработки = Новый Массив;
						КешКодовДляПоискаВПуле.Вставить(НормализованныйКодМаркировки, СтрокиТаблицыДляОбработки);
					КонецЕсли;
					
					СтрокиТаблицыДляОбработки.Добавить(ИсходнаяСтрока);
					
				Иначе
					ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИменаКолонок.КодМаркировки, ЕстьОшибки);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено Тогда
		
		СообщениеJSON.ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
		СообщениеJSON.Операция         = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений;
		СообщениеJSON.Назначение       = Перечисления.НазначениеСообщенийИСМП.ИСМП; // Для запроса вида упаковок требуется авторизация в ГИС МТ
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ТребуетсяОбновитьВариантВыполненияАгрегации = Ложь;
	
	Если Не Повторно
		И Не ЭтоПродукцияМОТП
		И Не ЭтоИмпортСФТС
		И Не ЭтоОперацияНанесения Тогда
		
		ВариантВыполненияАгрегации = ВариантВыполненияАгрегации(Шапка, ЕстьНаборы, ЕстьГрупповыеУпаковки);
		Если ВариантВыполненияАгрегации = Неопределено Тогда
			СообщитьОНеподдерживаемомСоставеОтчета(СообщениеJSON);
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Если ВариантВыполненияАгрегации <> Шапка.ВариантВыполненияАгрегации Тогда 
			
			ТребуетсяОбновитьВариантВыполненияАгрегации = Истина;
			ТребуетсяАгрегация = ЕстьКодыАгрегатов
				И ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
			ТребуетсяВводВОборот = ТребуетсяВводВОборот(Шапка) И Не ТребуетсяАгрегация;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 2. Поиск.
	Если Не (ЕстьОшибки Или ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки) Тогда
		
		РезультатПоискаВПуле = ШтрихкодированиеИСМП.РезультатПоискаВПулеКодовМаркировки(
			КодыМаркировки, "ПолныйКодМаркировки, GTIN, Шаблон");
		РезультатПоискаВПуле.Индексы.Добавить("КодМаркировки");
		
		СоответствиеШаблоновВидуУпаковки = Новый Соответствие;
		Для Каждого Шаблон Из ИнтеграцияИСМПКлиентСервер.ШаблоныНаборов() Цикл
			СоответствиеШаблоновВидуУпаковки.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Набор);
		КонецЦикла;
		Для Каждого Шаблон Из ИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок() Цикл
			СоответствиеШаблоновВидуУпаковки.Вставить(Шаблон, Перечисления.ВидыУпаковокИС.Групповая);
		КонецЦикла;
		
		// 3. Обход результатов поиска.
		Для Каждого КлючИЗначение Из КешКодовДляПоискаВПуле Цикл
			
			КодМаркировки = КлючИЗначение.Ключ;
			ИсходныеСтроки = КлючИЗначение.Значение;
			СтрокаПулаКодовМаркировки = РезультатПоискаВПуле.Найти(КодМаркировки, "КодМаркировки");
			
			Если СтрокаПулаКодовМаркировки = Неопределено Тогда
				
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Не найден полный код маркировки для %1'"),
					КодМаркировки);
				
				Для Каждого ИсходнаяСтрока Из ИсходныеСтроки Цикл
					
					Если КодМаркировки = ИсходнаяСтрока.НормализованноеЗначениеШтрихкода Тогда
						ИмяКолонкиТекстОшибки = "ТекстОшибкиЗначениеШтрихкода";
					Иначе
						ИмяКолонкиТекстОшибки = "ТекстОшибкиЗначениеШтрихкодаУпаковки";
					КонецЕсли;
					ИсходнаяСтрока[ИмяКолонкиТекстОшибки] = ?(
						ЗначениеЗаполнено(ИсходнаяСтрока[ИмяКолонкиТекстОшибки]),
						ИсходнаяСтрока[ИмяКолонкиТекстОшибки] + Символы.ПС + ТекстОшибки,
						ТекстОшибки);
					
				КонецЦикла;
				
				ЕстьОшибки = Истина;
			Иначе
				
				ВидУпаковки = СоответствиеШаблоновВидуУпаковки[СтрокаПулаКодовМаркировки.Шаблон];
				Если ВидУпаковки = Неопределено Тогда
					ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
				КонецЕсли;
				
				ДобавитьКодКПолучению(
					ПолныеКодыМаркировки,
					КодМаркировки,,,
					СтрокаПулаКодовМаркировки.ПолныйКодМаркировки,
					СтрокаПулаКодовМаркировки.GTIN,
					ВидУпаковки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// 4. Сохранение в документ.
	Если Не Повторно Или ЕстьОшибки Или ТребуетсяОбновитьВариантВыполненияАгрегации Тогда
		
		РезультатСохраненияДанныхОтчета = СохранитьОбработанныеДанныеОтчета(
			ДокументСсылка,
			ДанныеОтчета,
			Не Повторно,
			ИспользуетсяРегистрДляХраненияДанныхОтчета,
			Шапка.Организация,
			ВариантВыполненияАгрегации);
		
		Если РезультатСохраненияДанныхОтчета.ЕстьОшибки Тогда
			СообщитьОбОшибкеПриСохраненииДанныхОтчета(СообщениеJSON, РезультатСохраненияДанныхОтчета.ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьОшибки Тогда
		СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
#КонецОбласти
	
	Если ЭтоПиво Или ЭтоБАПиво Тогда
		
		Если ЭтоПиво Тогда
			ПроверитьЗаполнениеДатыПроизводства(Шапка.ДатаПроизводства, СообщениеJSON);
			Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
				СообщенияJSON.Добавить(СообщениеJSON);
				Возврат СообщенияJSON;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.Номенклатура) Тогда
			Если ЭтоПиво Тогда
				ОбъемАлкогольнойПродукции = ИнтеграцияИСМП.ОбъемМаркируемойПродукцииВЛитрах(Шапка.Номенклатура);
				Объем = ОбъемАлкогольнойПродукции[Шапка.Номенклатура];
				Если Объем = Неопределено Тогда
					Объем = 0;
				КонецЕсли;
			Иначе
				Объем = 0;
			КонецЕсли;
			
			Если Объем = 0 Тогда
				НоменклатураДокумента = Новый Массив;
				НоменклатураДокумента.Добавить(Шапка.Номенклатура);
				ДанныеПродукции = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок(НоменклатураДокумента);
				Объем = ИнтеграцияИСКлиентСервер.ПолучитьДанныеУпаковки(
					ДанныеПродукции, Шапка.Номенклатура).Объем;
			КонецЕсли;
			
			Если Объем <> 0 Тогда
				ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Шапка.Номенклатура);
				ОписаниеНоменклатуры = ОписанияНоменклатуры[Шапка.Номенклатура];
				Если ОписаниеНоменклатуры <> Неопределено
					И ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке > 0 Тогда
					Объем = Объем * ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
				КонецЕсли;
				Для Каждого Строка Из ПолныеКодыМаркировки Цикл
					Если Строка.Количество = 0 Тогда
						Строка.Количество = Объем;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоКреслаКоляски Тогда
		
		ПроверитьЗаполнениеЗаводскогоСерийногоНомера(Шапка, ПолныеКодыМаркировки, СообщениеJSON);
		Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
			СообщенияJSON.Добавить(СообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторАдреса = ИдентификаторАдреса(Шапка.ВидПродукции, РезультатОпределенияСУЗ, СообщениеJSON);
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ГруппыКодов = Новый Массив;
	Если Не ПроверитьИРазбитьНаГруппыПолныеКодыМаркировки(СообщенияJSON, СообщениеJSON, ГруппыКодов, ПолныеКодыМаркировки) Тогда
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Шапка.ВидПродукции, Ложь) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy";
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			ГоденДоСтрокой = Формат(Шапка.СрокГодности, ФорматДаты);
			Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
				ДанныеСообщения.Вставить("ГоденДо", ГоденДоСтрокой);
			КонецЦикла;
		Иначе
			Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
				ГоденДоСтрокой = Формат(ДанныеСообщения.КлючГоденДо, ФорматДаты);
				ДанныеСообщения.Вставить("ГоденДо", ГоденДоСтрокой);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоМолочнаяПродукция Или ЭтоПродукцияПодконтрольнаяВЕТИС Тогда

		Если Шапка.СкоропортящаясяПродукция Тогда
			ИмяПараметраГоденДо = "expDate72";
			ФорматДаты          = "ДФ=yyMMddHHmm";
		Иначе
			ИмяПараметраГоденДо = "expDate";
			ФорматДаты          = "ДФ=yyMMdd";
		КонецЕсли;
		ГоденДоСтрокой = Формат(Шапка.СрокГодности, ФорматДаты);
		Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
			Если ДанныеСообщения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				Продолжить;
			КонецЕсли;
			ДанныеСообщения.Вставить("ПараметрГоденДо", ИмяПараметраГоденДо);
			ДанныеСообщения.Вставить("ГоденДо",         ГоденДоСтрокой);
		КонецЦикла;

	КонецЕсли;
	
	Параметры = Новый Структура;
	Параметры.Вставить("ГруппыКодов",         ГруппыКодов);
	Параметры.Вставить("Повторно",            Повторно);
	Параметры.Вставить("ДокументСсылка",      ДокументСсылка);
	Параметры.Вставить("НомерВерсии",         НомерВерсии);
	Параметры.Вставить("ИдентификаторАдреса", ИдентификаторАдреса);
	
	Параметры.Вставить("ТребуетсяВводВОборот",     ТребуетсяВводВОборот);
	Параметры.Вставить("ТребуетсяАгрегация",       ТребуетсяАгрегация);
	Параметры.Вставить("ТребуетсяФормированиеАТК", ТребуетсяФормированиеАТК);

	Параметры.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
	Параметры.Вставить("СоздаватьШтрихкодыУпаковок",                 СоздаватьШтрихкодыУпаковок);
	Параметры.Вставить("СтанцияУправленияЗаказами",                  РезультатОпределенияСУЗ.СтанцияУправленияЗаказами);
	Параметры.Вставить("ФорматОбмена",                               РезультатОпределенияСУЗ.НастройкаОбмена.ФорматОбмена);
	
	Если ЭтоТитановаяПродукция Или ЭтоПиво Тогда
		СоответствиеGTIN = Новый Соответствие;
		Для Каждого ДанныеКодов Из ГруппыКодов Цикл
			Если СоответствиеGTIN[ДанныеКодов.GTIN] = Неопределено Тогда
				ДанныеGTIN = Новый Структура;
				ДанныеGTIN.Вставить("Номенклатура",   Неопределено);
				ДанныеGTIN.Вставить("Характеристика", Неопределено);
				Если ЭтоТитановаяПродукция Тогда
					ДанныеGTIN.Вставить("ДанныеСертификации", Новый Структура);
					ДанныеGTIN.ДанныеСертификации.Вставить("Номер", Шапка.НомерПаспортаСоответствия);
					ДанныеGTIN.ДанныеСертификации.Вставить("Дата",  Формат(Шапка.ДатаПаспортаСоответствия, "ДФ=yyyy-MM-dd"));
					ДанныеGTIN.ДанныеСертификации.Вставить("Выдан", Шапка.КемВыданПаспортСоответствия);
				ИначеЕсли ЭтоПиво Тогда
					ДанныеGTIN.Вставить("РеквизитовНанесенияНаПиво", Новый Структура);
					ДанныеGTIN.РеквизитовНанесенияНаПиво.Вставить("НомерПервичногоДокумента",  Шапка.НомерПервичногоДокумента);
					ДанныеGTIN.РеквизитовНанесенияНаПиво.Вставить("ДатаПервичногоДокумента",   Формат(Шапка.ДатаПервичногоДокумента, "ДФ=yyyy-MM-dd"));
					ДанныеGTIN.РеквизитовНанесенияНаПиво.Вставить("СодержаниеЭтиловогоСпирта", Формат(Шапка.СодержаниеЭтиловогоСпирта, "ЧРД=.;"));
				КонецЕсли;
				СоответствиеGTIN.Вставить(ДанныеКодов.GTIN, ДанныеGTIN);
			КонецЕсли;
		КонецЦикла;
		Параметры.Вставить("СоответствиеGTIN", СоответствиеGTIN);
	КонецЕсли;

	Возврат СообщенияJSONОтчетОНанесении(Шапка, Параметры);
	
КонецФункции

// Формирует JSON сообщения для агрегации КМ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АгрегацияJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено, Повторно = Ложь)
	
	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                       КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0))  КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.Агрегация)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ОперацияНанесения КАК ОперацияНанесения,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	// Табачная продукция
	|	Шапка.ИдентификаторПроизводственногоЗаказа КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии   КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ОтчетПроизводственнойЛинии           КАК ОтчетПроизводственнойЛинии,
	|	Шапка.ПроизводственныйОбъект               КАК ПроизводственныйОбъект,
	|	Шапка.ПроверятьСоставУпаковокПоДаннымИСМП  КАК ПроверятьСоставУпаковокПоДаннымИСМП,
	|	Шапка.СоздаватьШтрихкодыУпаковок           КАК СоздаватьШтрихкодыУпаковок,
	|	Шапка.ВариантВыполненияАгрегации           КАК ВариантВыполненияАгрегации,
	|	
	|	Шапка.ОперацияНанесенияТолькоДляНаборов    КАК ОперацияНанесенияТолькоДляНаборов,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.ВариантЗаполненияДекларации КАК ВариантЗаполненияДекларации
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|	ДанныеОтчета.НомерСтроки               КАК КлючЗаписи,
	|	
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
	|	
	|	ДанныеОтчета.Ссылка КАК Документ
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|	И ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.ЗначениеШтрихкода,
	|	ДанныеРегистра.ЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.ФорматBase64,
	|	ДанныеРегистра.КлючЗаписи,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.Документ
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|	И ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючЗаписи
	|",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|",
	"ДанныеРегистра");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Повторно", Повторно);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;

	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат АгрегацияОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно);
	Иначе
		Возврат АгрегацияШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно);
	КонецЕсли;

КонецФункции

Функция ВариантПередачиАгрегации(Шапка, ТребуетсяПередачаАгрегацииЧерезTrueAPI = Ложь, ТребуетсяПередачаАгрегацииЧерезСУЗ = Ложь)

	ВариантПередачиАгрегации = "ЧерезTrueAPI"; // ЧерезСУЗ или ЧерезTrueAPI
	Если ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ(Шапка.ВидПродукции) Тогда
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
			И (ЗначениеЗаполнено(Шапка.ОперацияНанесения)
				Или Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки) Тогда
			// Не выполнять контроль родительских упаковок, если:
			// 1. агрегация и нанесение в одном документе.
			// 2. коды АТК не создавались.
			ВариантПередачиАгрегации = "ЧерезСУЗ";
		ИначеЕсли Шапка.Операция <> Перечисления.ВидыОперацийИСМП.Агрегация
			И Шапка.Операция <> Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
			ВариантПередачиАгрегации = "ЧерезСУЗ";
		КонецЕсли;
	КонецЕсли;

	Если ТребуетсяПередачаАгрегацииЧерезTrueAPI И Не ТребуетсяПередачаАгрегацииЧерезСУЗ Тогда
		ВариантПередачиАгрегации = "ЧерезTrueAPI";
	ИначеЕсли Не ТребуетсяПередачаАгрегацииЧерезTrueAPI И ТребуетсяПередачаАгрегацииЧерезСУЗ Тогда
		ВариантПередачиАгрегации = "ЧерезСУЗ";
	ИначеЕсли ТребуетсяПередачаАгрегацииЧерезTrueAPI И ТребуетсяПередачаАгрегацииЧерезСУЗ Тогда
		ВариантПередачиАгрегации = Неопределено;
	КонецЕсли;

	Возврат ВариантПередачиАгрегации;

КонецФункции

Функция ВариантВыполненияАгрегации(Шапка, ЕстьНаборы, ЕстьГрупповыеУпаковки)
	
	ВариантВыполненияАгрегации = Шапка.ВариантВыполненияАгрегации;
	
	Если ЕстьГрупповыеУпаковки И Не ЕстьНаборы Тогда
		ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
	ИначеЕсли ЕстьНаборы И Не ЕстьГрупповыеУпаковки Тогда
		ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
	ИначеЕсли ЕстьНаборы И ЕстьГрупповыеУпаковки Тогда
		ВариантВыполненияАгрегации = Неопределено;
	КонецЕсли;
	
	Возврат ВариантВыполненияАгрегации;
	
КонецФункции

// Формирует JSON сообщения для агрегации КМ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АгрегацияШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно)

	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;

	СообщенияJSON = Новый Массив;

	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();

	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();

	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	Если Повторно Тогда
		
		ШтрихкодыУпаковокКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьКодыКПовторнойПередаче(Шапка.Документ);
		Если ШтрихкодыУпаковокКПовторнойПередаче = Неопределено Тогда
			КодыМаркировкиКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(Шапка.Документ);
			ШтрихкодыУпаковокКПовторнойПередаче = Новый Соответствие;
			Для Каждого ЭлементДанных Из ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировкиКПовторнойПередаче) Цикл
				ШтрихкодыУпаковокКПовторнойПередаче.Вставить(ЭлементДанных.Ссылка, Истина);
			КонецЦикла;
		КонецЕсли;
		ПовторнаяОтправкаНеТребуется = ШтрихкодыУпаковокКПовторнойПередаче.Количество() = 0;
		
	КонецЕсли;
	
	ТребуетсяВводВОборот = Ложь;
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		И Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок
		Или Шапка.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот
			И ТребуетсяВводВОборот(Шапка)
			И Не Шапка.ОперацияНанесенияТолькоДляНаборов Тогда
		ТребуетсяВводВОборот = Истина;
	КонецЕсли;

	ВариантПередачиАгрегации = ВариантПередачиАгрегации(Шапка);
	ТребуетсяПередачаАгрегацииЧерезTrueAPI = Ложь;
	ТребуетсяПередачаАгрегацииЧерезСУЗ     = Ложь;
	
	Если Повторно И ПовторнаяОтправкаНеТребуется
		И ВариантПередачиАгрегации = "ЧерезСУЗ" Тогда
		// Повторная отправка не требуется. Обработать абстрактное сообщение для расчета статуса.
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказамиУпрощенно(
			СообщенияJSON, Операция, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОперацияДокумента",            Шапка.Операция);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправка",            Истина);
		ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   Ложь);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
		ПараметрыЗапроса.Вставить("АгрегацияВыполненаЧерезСУЗ",                 Истина);
		ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",                       ТребуетсяВводВОборот);
		ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, АбстрактнаяОперация, НомерВерсии);
		
		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
	ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
	
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если ВариантПередачиАгрегации = "ЧерезСУЗ" Тогда
		
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(Шапка.Документ);
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки, Неопределено, Шапка.ВидПродукции);

		ЗаполнитьСведенияПоШтрихкодамEAN = Ложь;
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПоддерживаетАгрегациюКодовМаркировкиЧерезСУЗ(Шапка.ВидПродукции) Тогда

			// В отчете об агрегации для табачной продукции необходимо передавать емкость упаковки по данным GTIN
			// Как правило емкость блока - 10 пачек,
			// Емкость короба - 50 блоков.
			// Данные о емкости хранятся в учетной системе в виде коэффициентов упаковок (если реализовано)
			// и в служебном регистре сведений ОписаниеGTINИС

			// В отчете об агрегации для молочной продукции необходимо использовать сведения о емкости упаковки по данным GTIN
			// Данные о емкости хранятся в учетной системе в виде коэффициентов упаковок (если реализовано)
			// и в служебном регистре сведений ОписаниеGTINИС.
			// В случае частичного заполнения агрегата в полях «aggregationUnitCapacity»
			// и «aggregatedItemsCount» необходимо передавать значение 1.

			ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
			ЗаполнитьСведенияПоШтрихкодамEAN                   = Истина;

		КонецЕсли;

		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования, ЗаполнитьСведенияПоШтрихкодамEAN, Истина);
		
		ТекущийУровеньИерархии = 0;
		Для Каждого СтрокаДанных Из РезультатПоиска.МаркированныеТовары Цикл 
			СтрокаРодитель = СтрокаДанных.СтрокаДерева.Родитель;
			Если СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор
				Или (СтрокаРодитель <> Неопределено
					И СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор) Тогда
				ТребуетсяПередачаАгрегацииЧерезTrueAPI = Истина;
			ИначеЕсли СтрокаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
				Или (СтрокаРодитель <> Неопределено
					И СтрокаРодитель.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
				ТребуетсяПередачаАгрегацииЧерезСУЗ = Истина;
			КонецЕсли;
			ТекущийУровеньИерархии = Макс(ТекущийУровеньИерархии, СтрокаДанных.СтрокаДерева.Уровень());
		КонецЦикла;
		
		Если ТекущийУровеньИерархии > МаксимальныйУровеньИерархииПриАгрегацииЧерезСУЗ() Тогда
			ТребуетсяПередачаАгрегацииЧерезTrueAPI = Истина;
		КонецЕсли;
		
		ВариантПередачиАгрегации = ВариантПередачиАгрегации(
			Шапка,
			ТребуетсяПередачаАгрегацииЧерезTrueAPI, ТребуетсяПередачаАгрегацииЧерезСУЗ);
		
	КонецЕсли;
	
	Если ВариантПередачиАгрегации = "ЧерезTrueAPI" Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОрганизацияИНН",                      РеквизитыОрганизации.ИНН);
		ПараметрыЗапроса.Вставить("ПроверятьСоставУпаковокПоДаннымИСМП", Шапка.ПроверятьСоставУпаковокПоДаннымИСМП);
		ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",                ТребуетсяВводВОборот);
		ПараметрыЗапроса.Вставить("АгрегацияВыполненаЧерезСУЗ",          Ложь);
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли ВариантПередачиАгрегации = "ЧерезСУЗ" Тогда
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказамиУпрощенно(
			СообщенияJSON, Операция, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
		Параметры.Вставить("НомерВерсии",          НомерВерсии);
		Параметры.Вставить("Фильтр",               ШтрихкодыУпаковокКПовторнойПередаче);
		Параметры.Вставить("ДеревоУпаковок",       РезультатПоиска.ДеревоУпаковок);
		Параметры.Вставить("ТребуетсяВводВОборот", ТребуетсяВводВОборот);
		Параметры.Вставить("Повторно",             Повторно);
		Параметры.Вставить("Операция",             Операция);
		Параметры.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
		Параметры.Вставить("СоздаватьШтрихкодыУпаковок",                 Ложь);
		Параметры.Вставить("СтанцияУправленияЗаказами",                  РезультатОпределенияСУЗ.СтанцияУправленияЗаказами);
		Параметры.Вставить("ФорматОбмена",                               РезультатОпределенияСУЗ.НастройкаОбмена.ФорматОбмена);
		
		Возврат СообщенияJSONАгрегацияЧерезСУЗ(Шапка, Параметры) ;
		
	Иначе // В документе есть и наборы и групповые упаковки
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
		СообщитьОНеподдерживаемомСоставеОтчета(СообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для агрегации КМ
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АгрегацияОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, Повторно)

	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;

	СообщенияJSON = Новый Массив;

	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();

	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	//@skip-warning
	ИспользуетсяРегистрДляХраненияДанныхОтчета = Не РезультатЗапроса["ДанныеРегистра"].Пустой();

	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;

	ТребуетсяВводВОборот = Ложь;
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС
		И Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок
		Или Шапка.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот
			И ТребуетсяВводВОборот(Шапка)
			И Не Шапка.ОперацияНанесенияТолькоДляНаборов Тогда
		ТребуетсяВводВОборот = Истина;
	КонецЕсли;
		
	ВариантПередачиАгрегации = ВариантПередачиАгрегации(Шапка);
	ТребуетсяПередачаАгрегацииЧерезTrueAPI = Ложь;
	ТребуетсяПередачаАгрегацииЧерезСУЗ     = Ложь;
	
	СоздаватьШтрихкодыУпаковок = Шапка.СоздаватьШтрихкодыУпаковок И Не ТребуетсяВводВОборот;
	
	// Повторная отправка не требуется. Обработать абстрактное сообщение для расчета статуса.
	Если Повторно
		И ВариантПередачиАгрегации = "ЧерезСУЗ"
		И ДанныеОтчета.Количество() = 0 Тогда
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказамиУпрощенно(
			СообщенияJSON, Операция, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОперацияДокумента",            Шапка.Операция);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправка",            Истина);
		ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   СоздаватьШтрихкодыУпаковок);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
		ПараметрыЗапроса.Вставить("АгрегацияВыполненаЧерезСУЗ",                 Истина);
		ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",                       ТребуетсяВводВОборот);
		ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		
		АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса;
		
		АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, АбстрактнаяОперация, НомерВерсии);

		АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
		АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
		АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		АбстрактноеСообщениеJSON.Назначение = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		АбстрактноеСообщениеJSON.Описание   = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			АбстрактнаяОперация, Шапка.Документ, НомерВерсии);

		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);

		Возврат СообщенияJSON;

	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
	ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
	
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если ВариантПередачиАгрегации = "ЧерезСУЗ" Тогда
		
		ДанныеШапки           = ШтрихкодированиеИС.ПолучитьСтруктуруРеквизитовДокумента(Шапка.Документ);
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ДанныеШапки, Неопределено, Шапка.ВидПродукции);
		
		ДеревоУпаковок = ШтрихкодированиеИС.ИнициализироватьДеревоУпаковок();
		
#Область ДеревоУпаковокПоДаннымОтчетаПроизводственнойЛинии
	
		СоответствиеСтрокДереваУпаковок = Новый Соответствие;
		КешДанныхРазбора                = Новый Соответствие;
		ЭтоПродукцияМОТП                = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);

		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
		
		НастройкиРазбораКодаМаркировки = Новый Структура;
		НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
		НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(Шапка.ВидПродукции));
		НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);
		
		Штрихкоды = Новый Массив;
		Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
			Штрихкоды.Добавить(
				Новый Структура(
					"Штрихкод, ШтрихкодУпаковки",
					СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкода, СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки));
		КонецЦикла;
		
		УровеньИерархии = 0;
		
		ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(Штрихкоды);
		
		Для Каждого СтрокаДанныхОтчета Из Штрихкоды Цикл
			
			ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
				СтрокаДанныхОтчета.Штрихкод, Шапка.ВидПродукции, КешДанныхРазбора,
				НастройкиРазбораКодаМаркировки);
			
			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
			Если ДанныеРазбораИПримечание = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Внутренняя ошибка разбора кодов маркировки'");
			КонецЕсли;
			
			УровеньИерархии = Макс(УровеньИерархии, СтрокаДанныхОтчета.Уровень);
			
			GTIN = Неопределено;
			Если ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода <> Неопределено
				И ЗначениеЗаполнено(ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода.ТекстОшибки) Тогда
				
				СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
				СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				Возврат СообщенияJSON;
				
			ИначеЕсли Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки)
				И ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.Свойство("GTIN", GTIN) Тогда
				ИнтеграцияИСМПСлужебный.ПодготовитьДанныеКОпределениюВидаУпаковки(
					СтрокаДанныхОтчета.Штрихкод, GTIN, ДополнительныеПараметры);
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ШтрихкодУпаковки) Тогда
				
				ДанныеРазбораШтрихкодаУпаковки = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
					СтрокаДанныхОтчета.ШтрихкодУпаковки, Шапка.ВидПродукции, КешДанныхРазбора,
					НастройкиРазбораКодаМаркировки);
				
				Если ДанныеРазбораШтрихкодаУпаковки <> Неопределено
					И ЗначениеЗаполнено(ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод) Тогда
					СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[ДанныеРазбораШтрихкодаУпаковки.НормализованныйШтрихкод];
					Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
						СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
					КонецЕсли;
				Иначе
					СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				КонецЕсли;
				
			Иначе
				
				СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
				
			КонецЕсли;
			
			СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
			
			ДанныеРазбораИПримечание = КешДанныхРазбора[СтрокаДанныхОтчета.Штрихкод];
			ДанныеРазбора = ДанныеРазбораИПримечание.ДанныеРазбора;
			
			// Заполнение GTIN и EAN
			Если ДанныеРазбора.СоставКодаМаркировки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(СтрокаДерева, ДанныеРазбора.СоставКодаМаркировки);
			КонецЕсли;
			
			СтрокаДерева.Штрихкод             = ДанныеРазбора.НормализованныйКодМаркировки;
			СтрокаДерева.ТипШтрихкода         = ДанныеРазбора.ТипШтрихкода;
			СтрокаДерева.ВидУпаковки          = ДанныеРазбораШтрихкода.ВидУпаковки;
			СтрокаДерева.СоставКодаМаркировки = ДанныеРазбора.СоставКодаМаркировки;
			СтрокаДерева.ВидПродукции         = Шапка.ВидПродукции;
			СтрокаДерева.ДанныеРазбора        = ДанныеРазбора;
			
			Если ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар;
			ИначеЕсли ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			ИначеЕсли ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
				И ЗначениеЗаполнено(СтрокаДерева.GTIN) Тогда
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			Иначе
				СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка;
			КонецЕсли;
			
			СтрокаДерева.НормализованныйШтрихкод = ДанныеРазбора.НормализованныйКодМаркировки;
			
			ШтрихкодированиеОбщегоНазначенияМОТП.РассчитатьХэшСуммуНормализации(
				СтрокаДерева,
				СтрокаДерева.ДанныеРазбора);
			
			СоответствиеСтрокДереваУпаковок.Вставить(ДанныеРазбораШтрихкода.НормализованныйШтрихкод, СтрокаДерева);
			
			Если ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
				ТребуетсяПередачаАгрегацииЧерезTrueAPI = Истина;
			ИначеЕсли ДанныеРазбораШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
				ТребуетсяПередачаАгрегацииЧерезСУЗ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
#КонецОбласти
		
		Если ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено Тогда
			
			// Для запроса вида упаковок требуется авторизация в ГИС МТ
			СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
			СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений;
			СообщениеJSON.ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
			СообщениеJSON.ВидПродукции     = Неопределено;
			СообщенияJSON.Добавить(СообщениеJSON);
			
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
		Если УровеньИерархии > МаксимальныйУровеньИерархииПриАгрегацииЧерезСУЗ() Тогда
			ТребуетсяПередачаАгрегацииЧерезTrueAPI = Истина;
		КонецЕсли;
		
		ВариантПередачиАгрегации = ВариантПередачиАгрегации(
			Шапка,
			ТребуетсяПередачаАгрегацииЧерезTrueAPI, ТребуетсяПередачаАгрегацииЧерезСУЗ);
		
	КонецЕсли;
	
	Если ВариантПередачиАгрегации = "ЧерезTrueAPI" Тогда
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОрганизацияИНН",                             РеквизитыОрганизации.ИНН);
		ПараметрыЗапроса.Вставить("ПроверятьСоставУпаковокПоДаннымИСМП",        Шапка.ПроверятьСоставУпаковокПоДаннымИСМП);
		ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",                       ТребуетсяВводВОборот);
		ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",                 СоздаватьШтрихкодыУпаковок);
		ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		ПараметрыЗапроса.Вставить("АгрегацияВыполненаЧерезСУЗ",                 Ложь);
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	ИначеЕсли ВариантПередачиАгрегации = "ЧерезСУЗ" Тогда
		
		РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказамиУпрощенно(
			СообщенияJSON, Операция, Шапка, ДополнительныеПараметры);
		Если Не РезультатОпределенияСУЗ.Успешно Тогда
			Возврат СообщенияJSON;
		КонецЕсли;
		
		ДанныеПоШтрихкодам = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияДанныхПоШтрихкодам(Ложь);
		
		ПараметрыДополненияТаблицыДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыДополненияТаблицыДанныеКодовМаркировки(
			ДанныеПоШтрихкодам, ДеревоУпаковок);
		ПараметрыДополненияТаблицыДанныеКодовМаркировки.ЗаполнятьСтрокуДерева = Истина;
		
		ДанныеПоШтрихкодам.ДанныеКодовМаркировки.Индексы.Добавить("НормализованныйШтрихкод");
		
		ДобавленныеСтроки  = Новый Массив;
		ШтрихкодированиеИС.ДополнитьТаблицуДанныеКодовМаркировкиПоСтрокамДереваУпаковок(
			ДанныеПоШтрихкодам, ДеревоУпаковок, ДобавленныеСтроки, ПараметрыСканирования);
		
		ШтрихкодированиеИС.ЗаполнитьКоэффициентыВложенностиУпаковокПоШтрихкодамEAN(ДанныеПоШтрихкодам, ПараметрыСканирования, ДобавленныеСтроки);
		ШтрихкодированиеИСМПСлужебный.ЗаполнитьСтрокиТаблицыДанныхПоГрупповымУпаковкам(ДобавленныеСтроки, ПараметрыСканирования, Ложь);
		
		Если ЭтоПродукцияМОТП Тогда
			ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииМОТПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();
		Иначе
			ДопустимыеВложенияАгрегатовПоВидамПродукции = ПроверкаИПодборПродукцииИСМПКлиентСервер.ДопустимыеВложенияАгрегатовПоВидамПродукции();
		КонецЕсли;
		ПараметрыПроверки = ИнтеграцияИСМПСлужебный.ИнициализироватьПараметрыПроверкиАгрегатов();
		ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов       = ДопустимыеВложенияАгрегатовПоВидамПродукции.Получить(Шапка.ВидПродукции);
		ПараметрыПроверки.КонтролироватьСоставГрупповойУпаковки    = Истина;
		ПараметрыПроверки.КонтролироватьДопустимуюИерархиюУпаковок = Истина;
		
		Если ПараметрыПроверки.ПараметрыПроверкиИерархииАгрегатов <> Неопределено Тогда
			РезультатПроверки = ПроверитьИерархиюДереваУпаковок(ДеревоУпаковок, ПараметрыПроверки);
			Если РезультатПроверки.ЕстьОшибки Тогда
				
				СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(НСтр("ru = 'Некорректный формат данных отчета производственной линии:
					                      |%1,'"), РезультатПроверки.ТекстОшибки));
				СообщенияJSON.Добавить(СообщениеJSON);
				
				Возврат СообщенияJSON;
				
			КонецЕсли;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("РеквизитыОрганизации", РеквизитыОрганизации);
		Параметры.Вставить("НомерВерсии",          НомерВерсии);
		Параметры.Вставить("Фильтр",               Неопределено);
		Параметры.Вставить("ДеревоУпаковок",       ДеревоУпаковок);
		Параметры.Вставить("ТребуетсяВводВОборот", ТребуетсяВводВОборот);
		Параметры.Вставить("Повторно",             Повторно);
		Параметры.Вставить("Операция",             Операция);
		Параметры.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
		Параметры.Вставить("СоздаватьШтрихкодыУпаковок",                 СоздаватьШтрихкодыУпаковок);
		Параметры.Вставить("СтанцияУправленияЗаказами",                  РезультатОпределенияСУЗ.СтанцияУправленияЗаказами);
		Параметры.Вставить("ФорматОбмена",                               РезультатОпределенияСУЗ.НастройкаОбмена.ФорматОбмена);
		
		Возврат СообщенияJSONАгрегацияЧерезСУЗ(Шапка, Параметры);
		
	Иначе // В документе есть и наборы и групповые упаковки
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
		СообщитьОНеподдерживаемомСоставеОтчета(СообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
	
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для формирования АТК
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ФормированиеАТКJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.Агрегация;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.АТК)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ОперацияНанесения КАК ОперацияНанесения,
	|
	|	Шапка.ОперацияНанесенияТолькоДляНаборов КАК ОперацияНанесенияТолькоДляНаборов,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ОтчетПроизводственнойЛинии КАК ОтчетПроизводственнойЛинии,
	|	Шапка.ВариантВыполненияАгрегации КАК ВариантВыполненияАгрегации,
	|	Шапка.ПроизводственныйОбъект     КАК ПроизводственныйОбъект,
	|
	|	Шапка.Номенклатура   КАК Номенклатура,
	|	Шапка.Характеристика КАК Характеристика,
	|	Шапка.Серия          КАК Серия,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.НомерСтроки КАК КлючЗаписи,
	|	ДанныеОтчета.Ссылка      КАК Документ
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.ЗначениеШтрихкода,
	|	ДанныеРегистра.ЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.ФорматBase64,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.КлючЗаписи,
	|	ДанныеРегистра.Документ
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки",
	"ДанныеОтчетаПроизводственнойЛинии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|",
	"ДанныеРегистра");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДанныеОтчета      = РезультатЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
	//@skip-warning
	ИспользуетсяРегистрДляХраненияДанныхОтчета = Не РезультатЗапроса["ДанныеРегистра"].Пустой();
	
	Если Не Шапка.Следующий()
		Или (ШтрихкодыУпаковок.Количество() = 0 И ДанныеОтчета.Количество() = 0) Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии          = Шапка.ПоследнийНомерВерсии + 1;
	РеквизитыОрганизации = ИнтеграцияИС.ИННКППGLNОрганизации(Шапка.Организация, Шапка.ПроизводственныйОбъект);
	Операция             = Перечисления.ВидыОперацийИСМП.АТК;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	// Проверка вида упаковок по отчету производственной линии
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		
		КодыМаркировкиНормализованы = Истина;
		
		Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
			Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
				КодыМаркировкиНормализованы = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
		
		ПараметрыРазбора = Новый Структура;
		//Если флаг стоит, то из пула полные коды брать нельзя.
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы",            КодыМаркировкиНормализованы);
		
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
		ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
		
		РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
			ДанныеОтчета, Шапка.ВидПродукции, ПараметрыРазбора);
		
		// 1. Заполнение таблицы КодыМаркировки для поиска в пуле + кеш.
		
		Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Или Не КодыМаркировкиНормализованы Тогда
			
			РезультатСохраненияДанныхОтчета = СохранитьОбработанныеДанныеОтчета(
				ДокументСсылка,
				ДанныеОтчета,
				Истина,
				ИспользуетсяРегистрДляХраненияДанныхОтчета,
				Шапка.Организация);
			
			Если РезультатСохраненияДанныхОтчета.ЕстьОшибки Тогда
				СообщитьОбОшибкеПриСохраненииДанныхОтчета(СообщениеJSON, РезультатСохраненияДанныхОтчета.ТекстОшибки);
			КонецЕсли;
			
			Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Тогда
				СообщитьОНеправильномФорматеОтчета(СообщениеJSON);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
				СообщенияJSON.Добавить(СообщениеJSON);
				Возврат СообщенияJSON;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			
			Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
			
				Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
					Продолжить;
				КонецЕсли;
				
				НормализованныйКодМаркировки = ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки];
				ВидУпаковки                  = СтрокаДанных[ИменаКолонок.ВидУпаковки];
				GTIN                         = СтрокаДанных[ИменаКолонок.GTIN];
				
				Если Не ЗначениеЗаполнено(ВидУпаковки) Тогда
					ИнтеграцияИСМПСлужебный.ПодготовитьДанныеКОпределениюВидаУпаковки(
						НормализованныйКодМаркировки, GTIN, ДополнительныеПараметры);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.ПараметрыОбмена.КОпределениюВидаУпаковки <> Неопределено Тогда
		
		СообщениеJSON.ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
		СообщениеJSON.Операция         = Перечисления.ВидыОперацийИСМП.ПовторноеФормированиеСообщений;
		
	Иначе
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ОрганизацияИНН", РеквизитыОрганизации.ИНН);
		ПараметрыЗапроса.Вставить("ФормированиеАТК", Истина);
		ПараметрыЗапроса.Вставить("ОтчетПроизводственнойЛинии", Шапка.ОтчетПроизводственнойЛинии);
		ПараметрыЗапроса.Вставить("РезультатФормированияАТК",   Новый Массив);
		
		ДанныеНоменклатурыАТК = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(ДанныеНоменклатурыАТК, Шапка);
		ПараметрыЗапроса.Вставить("ДанныеНоменклатурыАТК", ДанныеНоменклатурыАТК);
		
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		
	КонецЕсли;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции


// Формирует JSON сообщения для индивидуализации КИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ИндивидуализацияКИЗJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.ИндивидуализацияКИЗ;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0))  КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ОперацияНанесения КАК ОперацияНанесения,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                   КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Номенклатура   КАК Номенклатура,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Характеристика КАК Характеристика,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Серия          КАК Серия,
	|
	|	ДанныеRFIDИСМП.RFIDEPC КАК EPC,
	|	ДанныеRFIDИСМП.EPCGTIN КАК GTIN
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеRFIDИСМП КАК ДанныеRFIDИСМП
	|		ПО ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода = ДанныеRFIDИСМП.ЗначениеШтрихкода
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"];
	//@skip-warning
	
	Если Не Шапка.Следующий() Или ШтрихкодыУпаковок.Пустой() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
	
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ДанныеКодов    = Новый Массив;
	ИсходныеДанные = ШтрихкодыУпаковок.Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ИсходныеДанные Цикл
		
		ДанныеСтроки = Новый Структура;
		ДанныеСтроки.Вставить("cis_code", СтрокаТаблицы.ЗначениеШтрихкода);
		Попытка
			ДанныеСтроки.Вставить("sgtin", МенеджерОборудованияКлиентСервер.ПреобразоватьHEXВБинарнуюСтроку(СтрокаТаблицы.EPC));
		Исключение
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(НСтр("ru = 'Для номенклатуры %1 указан некорректный EPC ""%2"".'"),
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика),
					СтрокаТаблицы.EPC));
		КонецПопытки;
		ДанныеСтроки.Вставить("gtin", СтрокаТаблицы.gtin);
		
		ДанныеКодов.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participant_inn",        РеквизитыОрганизации.ИНН);
	ТелоЗапроса.Вставить("individualization_date", Формат(Шапка.Дата,"ДФ=yyyy-MM-dd"));
	ТелоЗапроса.Вставить("products_list",          ДанныеКодов);
	
	ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТребуетсяПодписание = Истина;
	СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для подтверждения поступления КИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПриемкаКИЗJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено, Повторно = Ложь)
	
	Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция     КАК Операция,
	|	Шапка.ВидПродукции КАК ВидПродукции,
	|
	|	Шапка.ПроизводственныйОбъект     КАК ПроизводственныйОбъект,
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ДатаПервичногоДокумента    КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента   КАК НомерПервичногоДокумента,
	|	Шапка.GLNОрганизации             КАК GLNОрганизации,
	|	Шапка.Ссылка                     КАК Ссылка
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
	|	ПулКодовМаркировкиСУЗ.ИдентификаторЗаказаСУЗ КАК ИдентификаторЗаказаСУЗ
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
	|		ПО ШтрихкодыУпаковок.ШтрихкодУпаковки.ЗначениеШтрихкода = ПулКодовМаркировкиСУЗ.КодМаркировки
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|ИТОГИ ПО
	|	ИдентификаторЗаказаСУЗ",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"];
	//@skip-warning
	
	Если Не Шапка.Следующий() Или ШтрихкодыУпаковок.Пустой() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса;
	
	СообщениеJSON      = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, АбстрактнаяОперация, НомерВерсии);
	
	РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
		СообщенияJSON, СообщениеJSON, Шапка, ДополнительныеПараметры);
	Если Не РезультатОпределенияСУЗ.Успешно Тогда
		Возврат СообщенияJSON;
	КонецЕсли;
	
	СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
	
	ШтрихкодыУпаковокКПовторнойПередаче = Неопределено;
	
	Если Повторно Тогда
		
		ШтрихкодыУпаковокКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьКодыКПовторнойПередаче(ДокументСсылка);
		Если ШтрихкодыУпаковокКПовторнойПередаче = Неопределено Тогда
			КодыМаркировкиКПовторнойПередаче = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументу(ДокументСсылка);
			ШтрихкодыУпаковокКПовторнойПередаче = Новый Соответствие;
			Для Каждого ЭлементДанных Из ШтрихкодированиеИС.ШтрихкодыУпаковок(КодыМаркировкиКПовторнойПередаче) Цикл
				ШтрихкодыУпаковокКПовторнойПередаче.Вставить(ЭлементДанных.Ссылка, Истина);
			КонецЦикла;
		КонецЕсли;
		
		Если ШтрихкодыУпаковокКПовторнойПередаче.Количество() = 0 Тогда
			
			СообщениеJSON.Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗРасчетСтатуса;
			
			СообщениеJSON.СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			
			СообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
			СообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",   Ложь);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправкаНеТребуется", Истина);
			ПараметрыЗапроса.Вставить("ОперацияДокумента",            Шапка.Операция);
			
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			СообщенияJSON.Добавить(СообщениеJSON);
			
			Возврат СообщенияJSON;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ОперацияДокумента",  Шапка.Операция);
	ПараметрыЗапроса.Вставить("ПовторнаяОтправка",  Повторно);
	ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);
	
	ИдентификаторАбстрактногоСообщения = СокрЛП(Новый УникальныйИдентификатор());
	
	СообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
	СообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	СообщениеJSON.Идентификатор             = ИдентификаторАбстрактногоСообщения;
	СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
	СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;

	СообщенияJSON.Добавить(СообщениеJSON);
	
	КоличествоКодовВДокументе = ИнтеграцияИСМПСлужебный.КоличествоКодовВСообщенииПодтверждениеПоступленияКИЗ();
	
	ВыборкаПоИдентификаторамЗаказаСУЗ = ШтрихкодыУпаковок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИдентификаторамЗаказаСУЗ.Следующий() Цикл
		
		ГруппыКодов   = Новый Массив;
		ТекущаяГруппа = Неопределено;
		
		КоличествоВТекущейГруппе = 0;
		
		ВыборкаДетальныеЗаписи = ВыборкаПоИдентификаторамЗаказаСУЗ.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ШтрихкодыУпаковокКПовторнойПередаче <> Неопределено
				И ШтрихкодыУпаковокКПовторнойПередаче[ВыборкаДетальныеЗаписи.ШтрихкодУпаковки] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоВТекущейГруппе = КоличествоКодовВДокументе Или ТекущаяГруппа = Неопределено Тогда
			
				ТекущаяГруппа = Новый Массив;
				ТекущаяГруппаНормализованныхКодов = Новый Массив;
				
				ОписаниеПакета = Новый Структура;
				ОписаниеПакета.Вставить("ГруппаКодов",                         ТекущаяГруппа);
				ОписаниеПакета.Вставить("ГруппаНормализованныхКодов",          ТекущаяГруппаНормализованныхКодов);
				
				ГруппыКодов.Добавить(ОписаниеПакета);
				КоличествоВТекущейГруппе = 0;
			
			КонецЕсли;
			
			ТекущаяГруппа.Добавить(Новый Структура("number", ВыборкаДетальныеЗаписи.ЗначениеШтрихкода));
			ТекущаяГруппаНормализованныхКодов.Добавить(ВыборкаДетальныеЗаписи.ЗначениеШтрихкода);
			
			КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + 1;
			
		КонецЦикла;
		
		Если ГруппыКодов.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ДанныеСообщения Из ГруппыКодов Цикл
			
			ТелоЗапроса = Новый Структура;
			ТелоЗапроса.Вставить("orderId",         ВыборкаПоИдентификаторамЗаказаСУЗ.ИдентификаторЗаказаСУЗ);
			ТелоЗапроса.Вставить("senderGln",       Шапка.GLNОрганизации);
			ТелоЗапроса.Вставить("commitDocNumber", Шапка.НомерПервичногоДокумента);
			ТелоЗапроса.Вставить("commitDocDate",   Формат(Шапка.ДатаПервичногоДокумента,"ДФ=yyyy-MM-dd"));
			ТелоЗапроса.Вставить("commitDateTime",  ИнтеграцияИС.ДатаСЧасовымПоясом(Шапка.Дата, ЧасовойПоясСеанса()));
			
			ТелоЗапроса.Вставить("codes", ДанныеСообщения.ГруппаКодов);
			
			ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
			
			СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
			
			СообщениеJSON.ТребуетсяПодписание = Ложь;
			СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
			
			СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
			СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
			СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
			СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
			
			ПараметрыЗапроса = Новый Структура;
			ПараметрыЗапроса.Вставить("ДанныеСообщения",                       ДанныеСообщения.ГруппаНормализованныхКодов);
			ПараметрыЗапроса.Вставить("ПовторнаяОтправка",                     Повторно);
			ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);
			
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			СообщениеJSON.ЗагружатьДо      = ИдентификаторАбстрактногоСообщения;
			
			СообщенияJSON.Добавить(СообщениеJSON);
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для подтверждения поступления КИЗ.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.МаркировкаТоваровИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция КвитанцияДокументаJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	ОперацияИСМП = Перечисления.ВидыОперацийИСМП.КвитанцияДокумента;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(ТекстЗапросаВерсииКвитанцияДокумента());
	СписокЗапросов.Добавить(ТекстЗапросаШапка(), "Шапка");
	СписокЗапросов.Добавить(ТекстЗапросаДанныеРегистра(), "ДанныеРегистра");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                                 ДокументСсылка);
	Запрос.УстановитьПараметр("ОперацииНанесенияКодовМаркировки",       ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки());
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			ОперацияИСМП, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	Если Не ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Шапка.ВидПродукции) Тогда
		
		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Неизвестный вид продукции для маркировки товаров: ""%1"".'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	Результат = РегистрыСведений.ПакетыКодовМаркировкиИСМП.ПолучитьДанныеПоДокументуДляЗапросаКвитанции(ДокументСсылка);
	Если Результат.ИдентификаторыЗаявки.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			ОперацияИСМП, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Не найдено отчетов о нанесении кодов, обработанных с ошибкой,
		                                       |по которым требуется получить квитанцию.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ОперацияНанесения = ?(ЗначениеЗаполнено(Шапка.ОперацияНанесения), Шапка.ОперацияНанесения, Шапка.Операция);
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, ОперацияИСМП, НомерВерсии);
	
	РезультатОпределенияСУЗ = ИнтеграцияИСМПСлужебный.ОпределитьСтанциюУправленияЗаказами(
		СообщенияJSON, СообщениеJSON, ДокументСсылка, ДополнительныеПараметры);
	Если Не РезультатОпределенияСУЗ.Успешно Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ЭтоИмпортСФТС = Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС;
	ЭтоОперацияНанесения = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Шапка.Операция).ЭтоОперацияНанесения;
	
	АгрегацияПередВводомВОборот = Шапка.ВариантВыполненияАгрегации = Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот;
	ЕстьКодыАгрегатов = ЕстьКодыАгрегатов(Шапка.Ссылка, Шапка);
	ТребуетсяАгрегация = ЕстьКодыАгрегатов
		И (АгрегацияПередВводомВОборот
		   Или ЭтоОперацияНанесения
		   Или (ЭтоИмпортСФТС И Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок));
	ТребуетсяФормированиеАТК = Ложь;
	
	Если ЭтоИмпортСФТС Тогда
		Если Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки Тогда
			ТребуетсяВводВОборот = Истина;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.АТК Тогда
			ТребуетсяВводВОборот     = Ложь;
			ТребуетсяФормированиеАТК = Истина;
		ИначеЕсли Шапка.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
			ТребуетсяВводВОборот = Ложь;
		КонецЕсли;
	Иначе
		ТребуетсяВводВОборот = ТребуетсяВводВОборот(Шапка) И Не ТребуетсяАгрегация;
	КонецЕсли;
	
	//@skip-warning
	ИспользуетсяРегистрДляХраненияДанныхОтчета = Не РезультатЗапроса["ДанныеРегистра"].Пустой();
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		СоздаватьШтрихкодыУпаковок = Шапка.СоздаватьШтрихкодыУпаковок
			И Не ТребуетсяАгрегация
			И Не ТребуетсяВводВОборот
			И Не ТребуетсяФормированиеАТК;
	Иначе
		СоздаватьШтрихкодыУпаковок = Ложь;
	КонецЕсли;
	
	ПовторнаяОтправка = ДополнительныеПараметры.ПараметрыОбработкиДокумента.Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично;
	
	АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса,
		НомерВерсии);
	
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
	АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
	АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",         ТребуетсяАгрегация);
	ПараметрыЗапроса.Вставить("ОперацияДокумента",          ОперацияИСМП);
	ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",       ТребуетсяВводВОборот);
	ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок", СоздаватьШтрихкодыУпаковок);
	ПараметрыЗапроса.Вставить("ПовторнаяОтправка",          ПовторнаяОтправка);
	ПараметрыЗапроса.Вставить("ТребуетсяФормированиеАТК",   ТребуетсяФормированиеАТК);
	ПараметрыЗапроса.Вставить("ОтчетПроизводственнойЛинии", Шапка.ОтчетПроизводственнойЛинии);
	ПараметрыЗапроса.Вставить("ЕстьПакетыКодовОшибками",    Результат.ЕстьПакетыКодовОшибками);
	ПараметрыЗапроса.Вставить("ПовторныйЗапросКвитанции",   Истина);
	ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);

	АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	ДопустимыеНачальныеСтатусы    = ШтрихкодированиеИСМП.ДопустимыеНачальныеСтатусыОтчетОНанесении(Шапка.ВидПродукции);
	ОжидаемыеСтатусы = ШтрихкодированиеИСМП.ОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Шапка.ВидПродукции);
	
	Для Каждого КлючИЗначение Из Результат.ИдентификаторыЗаявки Цикл
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, ОперацияИСМП, НомерВерсии);
		
		СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
		СообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
		СообщениеJSON.ИдентификаторЗаявки = КлючИЗначение.Ключ;
		
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = Перечисления.ВерсииФорматаОбменаСУЗ.V2;
		СообщениеJSON.СтанцияУправленияЗаказами = РезультатОпределенияСУЗ.СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);
		ПараметрыЗапроса.Вставить("ОтчетПроизводственнойЛинии",            Шапка.ОтчетПроизводственнойЛинии);
		ПараметрыЗапроса.Вставить("ПовторныйЗапросКвитанции",              Истина);
		ПараметрыЗапроса.Вставить("ИдентификаторЗаявки",                   КлючИЗначение.Ключ);
		ПараметрыЗапроса.Вставить("ОперацияДокумента",                     ОперацияНанесения);
		
		ПараметрыЗапроса.Вставить(
			"ДопустимыеНачальныеСтатусыКодовОтчетОНанесении", ДопустимыеНачальныеСтатусы);
		ПараметрыЗапроса.Вставить(
			"ОжидаемыеСтатусыКодовПослеПередачиОтчетаОНанесении", ОжидаемыеСтатусы);
		ПараметрыЗапроса.Вставить(
			"КодыМаркировкиДляКонтроляСтатусов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(КлючИЗначение.Значение));
		ПараметрыЗапроса.Вставить("ЗапрашиватьСтатусыКодовПослеОжиданияКвитанции", Истина);
		
		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

Процедура ЗаполнениеДанныхОбАгрегацииВСУЗ(СтрокаДерева, ГруппыКодов, ВидПродукции, ПараметрыНормализацииКМ, КоличествоКодовВДокументе, ПараметрыОбработки = Неопределено)
	
	Фильтр = Неопределено;
	
	Если ТипЗнч(СтрокаДерева) <> Тип("ДеревоЗначений") Тогда
		КодМаркировкиУпаковки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
			СтрокаДерева, ВидПродукции, ПараметрыНормализацииКМ);
		ШтирхкодУпаковки = СтрокаДерева.Штрихкод;
	Иначе
		
		КодМаркировкиУпаковки = Неопределено;
		
		Фильтр = ПараметрыОбработки;
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("КоличествоВТекущейГруппе", 0);
		ПараметрыОбработки.Вставить("ТекущийПакетКодов",        Новый Массив);
		ПараметрыОбработки.Вставить("КодыУпаковокКАгрегации",   Новый Массив);
		
		КоличествоВТекущейГруппе = 0;
		ПакетКодовВерхнегоУровня = Новый Массив;
		КодыУпаковокКАгрегации   = Новый Массив;
		
		ОписаниеПакета = Новый Структура;
		ОписаниеПакета.Вставить("ГруппаКодов",            Новый Массив);
		ОписаниеПакета.Вставить("КодыУпаковокКАгрегации", Новый Массив);
		
	КонецЕсли;
	
	Если СтрокаДерева.Строки.Количество() > 0 Тогда
		
		Если КодМаркировкиУпаковки <> Неопределено Тогда
			ВложенныеКоды = Новый Массив;
		КонецЕсли;
		
		КоэффициентВложенныхЕдиниц = Неопределено;
		Для Каждого СтрокаДереваВложенная Из СтрокаДерева.Строки Цикл
			
			Если Фильтр <> Неопределено
				И Фильтр[СтрокаДереваВложенная.ШтрихкодУпаковки] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоэффициентВложенныхЕдиниц = Неопределено Тогда
				КоэффициентВложенныхЕдиниц = СтрокаДереваВложенная.Коэффициент;
			ИначеЕсли КоэффициентВложенныхЕдиниц <> СтрокаДереваВложенная.Коэффициент Тогда
				// В упаковке содержится разная продукция
				КоэффициентВложенныхЕдиниц = 0;
			КонецЕсли;
			
			Если КодМаркировкиУпаковки <> Неопределено Тогда
				КодМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаДереваВложенная, ВидПродукции, ПараметрыНормализацииКМ);
				ВложенныеКоды.Добавить(КодМаркировки);
			КонецЕсли;
			
			Если СтрокаДереваВложенная.Строки.Количество() > 0 Тогда
				ЗаполнениеДанныхОбАгрегацииВСУЗ(
					СтрокаДереваВложенная,
					ОписаниеПакета,
					ВидПродукции,
					ПараметрыНормализацииКМ,
					КоличествоКодовВДокументе,
					ПараметрыОбработки);
			КонецЕсли;
			
			Если КодМаркировкиУпаковки = Неопределено И ПараметрыОбработки.КоличествоВТекущейГруппе > 0 Тогда
				Если КоличествоВТекущейГруппе + ПараметрыОбработки.КоличествоВТекущейГруппе > КоличествоКодовВДокументе Тогда
					Если ПакетКодовВерхнегоУровня.Количество() Тогда 
						
						ОписаниеПакета = Новый Структура;
						ОписаниеПакета.Вставить("ГруппаКодов",            ПакетКодовВерхнегоУровня);
						ОписаниеПакета.Вставить("КодыУпаковокКАгрегации", КодыУпаковокКАгрегации);
						
						ГруппыКодов.Добавить(ОписаниеПакета);
						ПакетКодовВерхнегоУровня = Новый Массив;
						КодыУпаковокКАгрегации = Новый Массив;
						
					КонецЕсли;
					КоличествоВТекущейГруппе = 0;
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПакетКодовВерхнегоУровня, ПараметрыОбработки.ТекущийПакетКодов);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КодыУпаковокКАгрегации, ПараметрыОбработки.КодыУпаковокКАгрегации);
				КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + ПараметрыОбработки.КоличествоВТекущейГруппе;
				ПараметрыОбработки.ТекущийПакетКодов = Новый Массив;
				ПараметрыОбработки.КодыУпаковокКАгрегации = Новый Массив;
				ПараметрыОбработки.КоличествоВТекущейГруппе = 0;
			КонецЕсли;
		КонецЦикла;
		
		Если КодМаркировкиУпаковки = Неопределено И ПакетКодовВерхнегоУровня.Количество() Тогда
			ОписаниеПакета = Новый Структура;
			ОписаниеПакета.Вставить("ГруппаКодов",            ПакетКодовВерхнегоУровня);
			ОписаниеПакета.Вставить("КодыУпаковокКАгрегации", КодыУпаковокКАгрегации);
			ГруппыКодов.Добавить(ОписаниеПакета);
		КонецЕсли;
		
		Если КодМаркировкиУпаковки <> Неопределено
			И ВложенныеКоды.Количество() > 0 Тогда
			
			ЕмкостьУпаковки = 0;
			Если ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
				
				ФактическоеКоличествоПотребительскихУпаковок = ВложенныеКоды.Количество();
				Если КоэффициентВложенныхЕдиниц <> Неопределено
					И КоэффициентВложенныхЕдиниц > 1 Тогда
					ЕмкостьУпаковки = СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок / КоэффициентВложенныхЕдиниц;
				ИначеЕсли КоэффициентВложенныхЕдиниц = 1 И СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок > 0 Тогда
					ЕмкостьУпаковки = СтрокаДерева.ПлановоеКоличествоПотребительскихУпаковок;
				Иначе
					ЕмкостьУпаковки = ФактическоеКоличествоПотребительскихУпаковок;
				КонецЕсли;
				Если ЕмкостьУпаковки = 0 Тогда
					ЕмкостьУпаковки = ФактическоеКоличествоПотребительскихУпаковок;
				КонецЕсли;
				
			Иначе
				ФактическоеКоличествоПотребительскихУпаковок = ВложенныеКоды.Количество();
			КонецЕсли;
			
			Если ЕмкостьУпаковки < ФактическоеКоличествоПотребительскихУпаковок Тогда
				ЕмкостьУпаковки = ФактическоеКоличествоПотребительскихУпаковок;
			КонецЕсли;
			
			ПараметрыОбработки.КоличествоВТекущейГруппе = ПараметрыОбработки.КоличествоВТекущейГруппе + ФактическоеКоличествоПотребительскихУпаковок;
			
			ДанныеОбАгрегации = Новый Структура;
			// На линии находится счетчик пачек и сканер, отсканированы могут быть не все пачки блока.
			// Поле заполняется емкостью упаковки, если количество sntins отличается от aggregatedItemsCount - расчитывается количество
			// серых пачек внутри агрегата в методах true-api
			ДанныеОбАгрегации.Вставить("aggregatedItemsCount",    ЕмкостьУпаковки);
			ДанныеОбАгрегации.Вставить("aggregationType",         "AGGREGATION");
			ДанныеОбАгрегации.Вставить("aggregationUnitCapacity", ЕмкостьУпаковки);
			ДанныеОбАгрегации.Вставить("sntins",                  ВложенныеКоды);
			ДанныеОбАгрегации.Вставить("unitSerialNumber",        КодМаркировкиУпаковки);
			
			ПараметрыОбработки.ТекущийПакетКодов.Добавить(ДанныеОбАгрегации);
			ПараметрыОбработки.КодыУпаковокКАгрегации.Добавить(ШтирхкодУпаковки);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьИерархиюДереваУпаковок(ДеревоУпаковок, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("ТекстОшибки", "");
	
	МассивОшибок = Новый Массив;
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		РезультатПроверки = ПроверитьИерархиюУпаковки(СтрокаДерева, ПараметрыПроверки);
		Если РезультатПроверки.ЕстьОшибки Тогда
			Результат.ЕстьОшибки = Истина;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОшибок, РезультатПроверки.НайденныеОшибки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Результат.ЕстьОшибки Тогда
		Результат.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПроверитьИерархиюУпаковки(СтрокаДерева, ПараметрыПроверки)
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("НайденныеОшибки", Новый Массив);
	
	ПараметрыПроверкиВложенныхСтрок = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыПроверки);
	
	Для Каждого ПодчиненнаяСтрокаДерева Из СтрокаДерева.Строки Цикл
		
		ТекстОшибки = ИнтеграцияИСМПСлужебный.ВыполнитьКонтрольДопустимойИерархииУпаковки(СтрокаДерева, ПодчиненнаяСтрокаДерева, ПараметрыПроверкиВложенныхСтрок);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Результат.НайденныеОшибки.Добавить(ТекстОшибки);
		КонецЕсли;
		
		Если ПодчиненнаяСтрокаДерева.Строки.Количество() Тогда
			РезультатПроверки = ПроверитьИерархиюУпаковки(ПодчиненнаяСтрокаДерева, ПараметрыПроверки);
			Если РезультатПроверки.ЕстьОшибки Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат.НайденныеОшибки, РезультатПроверки.НайденныеОшибки);
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если Результат.НайденныеОшибки.Количество() Тогда
		Результат.ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Структура - параметры указания серий См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - Структура - параметры указания серий
//    См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.МаркировкаТоваровИСМП, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Результат, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды);
	Иначе
		
		ПараметрыЗаполнения = ПараметрыЗаполнения();
		
		Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
			
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения);
			
		КонецЕсли;
		
		Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
		Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(РезультатОбработки, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды)
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
КонецПроцедуры

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	Результат.Вставить("ШтрихкодУточнения");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, УпаковкаУточнения = Неопределено)
	
	ЭтоМолочнаяПродукция = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.Объект.ВидПродукции);
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Форма.Объект.ВидПродукции);
	ДополнительныеПоля = Новый Структура("ИдентификаторПроисхожденияВЕТИС,ГоденДо");
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено 
			И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если ЭтоМолочнаяПродукция Или ЭтоПродукцияПодконтрольнаяВЕТИС Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПоля, СтрокаДерева);
		
			Если УпаковкаУточнения = Неопределено
				И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки)
				И (ЗначениеЗаполнено(ДополнительныеПоля.ИдентификаторПроисхожденияВЕТИС)
					Или ЗначениеЗаполнено(ДополнительныеПоля.ГоденДо)) Тогда
				УпаковкаУточненияСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
			Иначе
				УпаковкаУточненияСтрокиДерева = УпаковкаУточнения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ПараметрыЗаполнения.ШтрихкодУточнения = УпаковкаУточненияСтрокиДерева;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыЗаполнения);
			
		Иначе
			
			ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева, УпаковкаУточненияСтрокиДерева);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения)
	
	ИсточникДанных = Форма.Объект;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	ВидПродукции = Форма.Объект.ВидПродукции;
	Операция = Форма.Объект.Операция;
	ТребуетсяСрокГодности = ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения)
		Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Операция)<>Неопределено;
	
	СпецификаОбработки = "";
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		СпецификаОбработки = СпецификаОбработки + ",КоличествоКодов";
	КонецЕсли;
	Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(ВидПродукции) Тогда
		СпецификаОбработки = СпецификаОбработки + ",ДоступныКодыМаркировкиОстатков";
	КонецЕсли;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ВидПродукции)
		И ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция).ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС Тогда
		СпецификаОбработки = СпецификаОбработки + ",ВЕТИС";
	КонецЕсли;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции) И ТребуетсяСрокГодности Тогда
		СпецификаОбработки = СпецификаОбработки + ",СрокГодности";
	КонецЕсли;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	
	Если ПараметрыЗаполнения.РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = ПараметрыЗаполнения.РодительскийШтрихкод;
	КонецЕсли;
	
	Если ОбновляемаяСтрока.Свойство("ШтрихкодОднороднойУпаковки") Тогда
		ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки = ?(ПараметрыЗаполнения.ШтрихкодУточнения = Неопределено, 
			ДанныеШтрихкода.ШтрихкодУпаковки, ПараметрыЗаполнения.ШтрихкодУточнения);
	КонецЕсли;
	
	ТребуетсяРаспределениеСНезаполненныхСтрок = Ложь;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ Тогда
		
		СтрокаПредставленияОбработана = Ложь;
		Если ЗначениеЗаполнено(ДанныеШтрихкода.GTIN) Тогда
			СтрокиПредставления = Форма.ПредставлениеКИЗ.НайтиСтроки(Новый Структура("GTIN", ДанныеШтрихкода.GTIN));
		ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкода.ПредставлениеНоменклатуры) Тогда
			СтрокиПредставления = Форма.ПредставлениеКИЗ.НайтиСтроки(Новый Структура("Представление", ДанныеШтрихкода.ПредставлениеНоменклатуры));
		КонецЕсли;
		
		Если СтрокиПредставления <> Неопределено
			И СтрокиПредставления.Количество() Тогда
			СтрокиПредставления[0].Количество = СтрокиПредставления[0].Количество + 1;
			СтрокаПредставленияОбработана = Истина;
		КонецЕсли;
		
		Если Не СтрокаПредставленияОбработана Тогда
			
			ТаблицаШтрихкоды = Новый ТаблицаЗначений();
			ТаблицаШтрихкоды.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
			ТаблицаШтрихкоды.Добавить().ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
			ПредставлениеКИЗ = РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаполнитьТаблицуПредставленийКИЗ(ТаблицаШтрихкоды);
			
			СтрокиПредставления = Форма.ПредставлениеКИЗ.НайтиСтроки(Новый Структура("Представление", ПредставлениеКИЗ[0].Представление));
			Если СтрокиПредставления.Количество() Тогда
				СтрокиПредставления[0].Количество = СтрокиПредставления[0].Количество + 1;
			Иначе
				ЗаполнитьЗначенияСвойств(Форма.ПредставлениеКИЗ.Добавить(), ПредставлениеКИЗ[0]);
				Форма.КоличествоСтрокПредставлениеКИЗ = Форма.КоличествоСтрокПредставлениеКИЗ + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(
			Истина,
			Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура),
			Истина);
		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОбновляемаяСтрока);
		
		НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
		ТребуетсяРаспределениеСНезаполненныхСтрок = Истина;
		
		Если НайденныеСтрокиТовары.Количество() > 0 Тогда
			
			СтрокаТовары = НайденныеСтрокиТовары[0];
			//поле Количество
			КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
			
			ВсегоПоПараметрамПоиска = 0;
			Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
				ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
			КонецЦикла;
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
			Если КоличествоМаркируемойПродукции > 0 Тогда
				
				СтрокаТовары.Количество = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
				
				ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
				Если ДобавленныеСтроки = Неопределено Тогда
					ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
				Иначе
					СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
				КонецЕсли;
				
				ОбновляемаяСтрока.Количество = КоличествоМаркируемойПродукции;
				
			Иначе
				
				ТребуетсяРаспределениеСНезаполненныхСтрок = Ложь;
				
			КонецЕсли;
			
			Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
				//поле Количество потребительских кодов маркировки
				КоличествоМаркируемойПродукции = ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;
				
				ВсегоПоПараметрамПоиска = 0;
				Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
					ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.КоличествоПотребительскихУпаковок;
				КонецЦикла;
				
				ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, "КоличествоПотребительскихУпаковок");
				
				Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
					КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
				КонецЕсли;
				
				Если КоличествоМаркируемойПродукции > 0 Тогда
					
					СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + КоличествоМаркируемойПродукции;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТовары = ИсточникДанных.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
			СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
			
			ПараметрыЗаполнения.ДобавленныеСтроки.Добавить(СтрокаТовары);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		Если ТребуетсяРаспределениеСНезаполненныхСтрок Тогда
			ИзмененныеСтроки = ПроверкаИПодборПродукцииИС.РаспределитьНаНезаполненныеСтроки(Форма, ОбновляемаяСтрока);
			Для Каждого СтрокаТовары Из ИзмененныеСтроки Цикл
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
		
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			ИсточникДанных.Товары, ИсточникДанных.Организация, ИсточникДанных.ВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для заполнения таблицы ДанныеОтчетаПроизводственнойЛинии при удалении строк
// с учетом выбранного режима.
// Сохраняет полученный результат (структуру) в переданный адрес временного хранилища.
// 
// Параметры:
//	 ПараметрыЗаполнения - Структура - структура, содержащая следующие ключи:
//		ДанныеОтчета - ТаблицаЗначений - Данные объекта ДанныеОтчетаПроизводственнойЛинии;
//		РежимОбработки - ПеречислениеСсылка.ВариантыИсправленияОшибокОтчетПроизодственнойЛинииИС - вариант удаления строк в дереве упаковок.
//		ВыделенныеСтроки - Массив - данные выделенных строк отчета (структура "Штрихкод, ШтрихкодУпаковки").
//	 АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения.
Процедура ПодготовитьДанныеЗаполненияОтчетПроизводственноЛинии(ПараметрыЗаполнения, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.МаркировкаТоваровИСМП.ПодготовитьДанныеЗаполненияОтчетПроизводственноЛинии");
	
	РежимОбработки = ПараметрыЗаполнения.РежимОбработки;
	ВыделенныеСтроки = ПараметрыЗаполнения.ВыделенныеСтроки;
	
	ДанныеОтчетаПроизводственнойЛинии = ПараметрыЗаполнения.ДанныеОтчета;
	ДеревоУпаковок = ДеревоПоДаннымОтчетаПроизводственнойЛинии(ДанныеОтчетаПроизводственнойЛинии);
	
	МассивСтрокУдалить = Новый Массив;
	
	УпаковкиРазагрегировать = Новый Массив;
	УпаковкиУдалить         = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(ВыделеннаяСтрока.ШтрихкодУпаковки) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиДерева = ДеревоУпаковок.Строки.НайтиСтроки(Новый Структура("Штрихкод, ШтрихкодУпаковки",ВыделеннаяСтрока.Штрихкод, ВыделеннаяСтрока.ШтрихкодУпаковки), Истина);
		
		Для Каждого НайденнаяСтрока Из СтрокиДерева Цикл
			
			УпаковкиУдалить.Добавить(НайденнаяСтрока.Родитель);
			ТекущийРодитель = НайденнаяСтрока.Родитель;
			
			Пока ТекущийРодитель <> Неопределено Цикл
				Если УпаковкиРазагрегировать.Найти(ТекущийРодитель) = Неопределено Тогда
					УпаковкиРазагрегировать.Добавить(ТекущийРодитель);
					ТекущийРодитель = ТекущийРодитель.Родитель;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	УдалитьВложенныеСтроки = Ложь;
	Если РежимОбработки = Перечисления.ВариантыИсправленияОшибокОтчетПроизодственнойЛинииИС.РасформироватьАгрегат Тогда
		УдалитьВложенныеСтроки = Ложь;
	ИначеЕсли  РежимОбработки = Перечисления.ВариантыИсправленияОшибокОтчетПроизодственнойЛинииИС.УдалятьАгрегат Тогда
		УдалитьВложенныеСтроки = Истина;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из УпаковкиУдалить Цикл
		Если СтрокаДерева.Обработано Тогда
			Продолжить;
		КонецЕсли;
		УдалитьВложенныеУпаковки(СтрокаДерева.Строки, МассивСтрокУдалить, УдалитьВложенныеСтроки);
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из УпаковкиРазагрегировать Цикл
		Если СтрокаДерева.Обработано Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ВложеннаяСтрока Из СтрокаДерева.Строки Цикл
			Если ВложеннаяСтрока.Обработано Тогда
				Продолжить;
			КонецЕсли;
			Если ВложеннаяСтрока.Строки.Количество() > 0 Тогда
				МассивСтрокУдалить.Добавить(ВложеннаяСтрока.СтрокаДанныхОтчета);
			Иначе
				ВложеннаяСтрока.СтрокаДанныхОтчета.ЗначениеШтрихкодаУпаковки = "";
				ВложеннаяСтрока.СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаОтчета Из МассивСтрокУдалить Цикл
		ДанныеОтчетаПроизводственнойЛинии.Удалить(СтрокаОтчета);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеОтчетаПроизводственнойЛинии, АдресРезультата);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ДанныеОтчетаПроизводственнойЛинии.Количество());
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ПроверкаИПодборМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	Если ДокументОбъект.Операция <> Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ Тогда
		
		ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
		ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
		
		СтруктураДействийИзмененныхСтрок = Новый Структура;
		СтруктураДействийИзмененныхСтрок.Вставить("ПересчитатьКоличествоУпаковок");
		СтруктураДействийИзмененныхСтрок.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
		
		СтруктураДействийДобавленныхСтрок = ОбщегоНазначения.СкопироватьРекурсивно(СтруктураДействийИзмененныхСтрок, Ложь);
		//@skip-warning
		СтруктураДействийДобавленныхСтрок.Вставить("ЗаполнитьКодТНВЭД");
		
		СпецификаОперацииНанесения = ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ДокументОбъект.ВидПродукции);
		
		ДобавленныеСтроки       = Новый Массив;
		МассивОбработанныхСтрок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
			
			Если СтрокаТаблицы.КоличествоПодобрано = 0
				И СтрокаТаблицы.КоличествоПотребительскихУпаковок = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
				СтрокаТаблицы.GTIN = Неопределено;
			КонецЕсли;
			
			ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Истина, СпецификаОперацииНанесения);
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
			
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				СтрокаТовары = ДокументОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
				Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					СтрокаТовары.GTIN = Неопределено;
				КонецЕсли;
				ДобавленныеСтроки.Добавить(СтрокаТовары);
			Иначе
				СтрокаТовары = НайденныеСтроки[0];
			КонецЕсли;
			
			Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
				СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
				СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТаблицы.КоличествоПотребительскихУпаковок;
				МассивОбработанныхСтрок.Добавить(СтрокаТовары);
			Иначе
				СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
				СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + СтрокаТаблицы.КоличествоПотребительскихУпаковок;
			КонецЕсли;
			
			ОбработатьСтрокуТабличнойЧасти(
				СтрокаТовары, ДокументОбъект,
				?(НайденныеСтроки.Количество(), СтруктураДействийИзмененныхСтрок, СтруктураДействийДобавленныхСтрок));
			
		КонецЦикла;
		
		// Удаление лишних строк документа.
		ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
		Пока ИндексТабЧастиТовары >= 0 Цикл
			
			СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
			Если (СтрокаТовары.Количество = 0 И СтрокаТовары.КоличествоПотребительскихУпаковок = 0)
				Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
				
				ДокументОбъект.Товары.Удалить(СтрокаТовары);
				
			КонецЕсли;
			
			ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
		КонецЦикла;
		
		Если ДобавленныеСтроки.Количество() Тогда
			
			ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(ДокументОбъект.Операция);
			Если ОперацииМаркировки.ЭтоВводВОборот Тогда
				
				ВременнаяТаблица = ДокументОбъект.Товары.Выгрузить(ДобавленныеСтроки);
				
				Если ВременнаяТаблица.Количество() Тогда

					ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамМаркировкиТоваровИСМП(
						ВременнаяТаблица, ДокументОбъект);

					СписокНоменклатуры = Новый Массив;
					СтрокиКЗаполнениюСертификации = Новый Массив;

					Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
						ДанныеЗаполненияСертификации = ВременнаяТаблица.Найти(ДобавленнаяСтрока.Номенклатура, "Номенклатура");
						Если ДанныеЗаполненияСертификации <> Неопределено
							И (ЗначениеЗаполнено(ДанныеЗаполненияСертификации.ВидДокументаСертификации)
								Или ЗначениеЗаполнено(ДанныеЗаполненияСертификации.КемВыданПаспортСоответствия)) Тогда
							ЗаполнитьЗначенияСвойств(
								ДобавленнаяСтрока,
								ДанныеЗаполненияСертификации,
								"ВидДокументаСертификации, НомерДокументаСертификации, ДатаДокументаСертификации, НомерСкважины,
								|КемВыданПаспортСоответствия, НомерПаспортаСоответствия, ДатаПаспортаСоответствия,
								|НомерЛицензииНаПользованиеНедрами, ДатаЛицензииНаПользованиеНедрами");
						Иначе
							СписокНоменклатуры.Добавить(ДобавленнаяСтрока.Номенклатура);
							СтрокиКЗаполнениюСертификации.Добавить(ДобавленнаяСтрока);
						КонецЕсли;
					КонецЦикла;
					
					Если СписокНоменклатуры.Количество() > 0 Тогда
						
						СертификатыНоменклатуры = ИнтеграцияИСМПВызовСервера.ИнформацияСертификатовНоменклатуры(СписокНоменклатуры);
						
						Если СертификатыНоменклатуры.Количество() > 0 Тогда
							
							Для Каждого ДобавленнаяСтрока Из СтрокиКЗаполнениюСертификации Цикл
								
								ДанныеСертификации = ДанныеСертификацииПоНоменклатуре(
									СертификатыНоменклатуры, ДобавленнаяСтрока.Номенклатура);
								
								Если ДанныеСертификации = Неопределено Тогда
									Продолжить;
								КонецЕсли;
								
								ДобавленнаяСтрока.ВидДокументаСертификации     = ДанныеСертификации.ВидСертификации; 
								ДобавленнаяСтрока.НомерДокументаСертификации   = ДанныеСертификации.НомерСертификации;
								ДобавленнаяСтрока.ДатаДокументаСертификации    = ДанныеСертификации.ДатаСертификации;
								
							КонецЦикла;
							
						КонецЕсли;
						
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураДействий)
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество,
	|	Товары.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	Товары.ИдентификаторПроисхожденияВЕТИС   КАК ИдентификаторПроисхожденияВЕТИС,
	|	&СкоропортящаясяПродукция                КАК СкоропортящаясяПродукция,
	|	Товары.СрокГодности КАК ГоденДо,
	|	Товары.GTIN         КАК GTIN
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(Запрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкоропортящаясяПродукция", "ЛОЖЬ");
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриМаркировкеТоваровИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
	КомандаОтчет = Отчеты.КодыМаркировкиДляДекларацииИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.МаркировкаТоваровИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Сертификация

// Получает данные сертификации по номенклатуре
// 
// Параметры:
//  СертификатыНоменклатуры - См. ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры.СертификатыНоменклатуры
//  Номенклатура - ОпределяемыйТип.Номенклатура - Номенклатура отбора
//
// Возвращаемое значение:
//  Неопределено,
//  Массив из Структура:
//   ВидСертификации - ПеречислениеСсылка.ВидыДокументовОбязательнойСертификацииИС - вид сертификации.
//   НомерСертификации - Строка - Идентификационный номер сертификата.
//   ДатаСертификации - Дата - Дата начала действия.
//   СрокДействия - Дата - Дата окончания срока действия.
//   Бессрочный - Булево - истина, если сертификат бессрочный.
Функция ДанныеСертификацииПоНоменклатуре(СертификатыНоменклатуры, Номенклатура) Экспорт
	
	ДанныеСертификации = Неопределено;
	
	Сертификаты = СертификатыНоменклатуры.Получить(Номенклатура);
	Если Сертификаты <> Неопределено Тогда
		Для Каждого СертификатНоменклатуры Из Сертификаты Цикл
			Если ЗначениеЗаполнено(СертификатНоменклатуры.ВидСертификации) Тогда
				ДанныеСертификации = СертификатНоменклатуры;	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеСертификации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СохранитьОбработанныеДанныеОтчета(ДокументСсылка, ДанныеОтчета, ПолныеДанныеОтчета = Истина,
	ДанныеОтчетаХранятсяВРегистре, Организация, ВариантВыполненияАгрегации = Неопределено) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ЕстьОшибки",  Ложь);
	
	Если ДанныеОтчетаХранятсяВРегистре Тогда
		
		Блокировка                = Новый БлокировкаДанных();
		ЭлементБлокировки         = Блокировка.Добавить("РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП");
		ЭлементБлокировки.Режим   = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Документ", ДокументСсылка);
		
		Если ВариантВыполненияАгрегации <> Неопределено Тогда
			БлокировкаДокумент      = Новый БлокировкаДанных();
			ЭлементБлокировки       = БлокировкаДокумент.Добавить("Документ.МаркировкаТоваровИСМП");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		КонецЕсли;
		
	Иначе
		
		Блокировка              = Новый БлокировкаДанных();
		ЭлементБлокировки       = Блокировка.Добавить("Документ.МаркировкаТоваровИСМП");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		
	КонецЕсли;
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка.Заблокировать();
		
		Если ДанныеОтчетаХранятсяВРегистре Тогда
			
			РегистрыСведений.ДанныеОтчетаПроизводственнойЛинииИСМП.СохранитьДанныеОтчетаПроизводственнойЛинииПоДокументу(ДокументСсылка, ДанныеОтчета, ПолныеДанныеОтчета);
			Если ВариантВыполненияАгрегации <> Неопределено Тогда
				БлокировкаДокумент.Заблокировать();
				ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.ВариантВыполненияАгрегации = ВариантВыполненияАгрегации;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		Иначе
			
			ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
			Если ВариантВыполненияАгрегации <> Неопределено Тогда
				ДокументОбъект.ВариантВыполненияАгрегации = ВариантВыполненияАгрегации;
			КонецЕсли;
			ЗагрузитьДанныеОтчетаПроизводственнойЛинии(ДокументОбъект, ДанныеОтчета, ПолныеДанныеОтчета);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При сохранении нормализованных кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ДокументСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Организация,
			"");
		
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При сохранении нормализованных кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3'"),
			ДокументСсылка,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			Организация);
		
		ОбъектМетаданных = ДокументСсылка.Метаданные();
		
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: запись данных отчета производственной линии ИС МП'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных,,
			ТекстОшибкиЖурналРегистрации);
		
		Результат.ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьДанныеОтчетаПроизводственнойЛинии(ДокументОбъект, ДанныеОтчета, ПолныеДанныеОтчета) Экспорт
	
	Если ПолныеДанныеОтчета Тогда
		
		ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеОтчета);
		
	Иначе
		
		СтруктураПоиска = Новый Структура("ЗначениеШтрихкода, ЗначениеШтрихкодаУпаковки");
		Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибкиЗначениеШтрихкода)
				Или ЗначениеЗаполнено(СтрокаДанных.ТекстОшибкиЗначениеШтрихкодаУпаковки) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
				НайденныеСтрокиДокумента = ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтрокиДокумента <> Неопределено Тогда
					Для Каждого СтрокаДокумента Из НайденныеСтрокиДокумента Цикл
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанных);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СохранитьВариантВыполненияАгрегации(ДокументСсылка, ВариантВыполненияАгрегации, Организация)
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ЕстьОшибки",  Ложь);
	
	Блокировка              = Новый БлокировкаДанных();
	ЭлементБлокировки       = Блокировка.Добавить("Документ.МаркировкаТоваровИСМП");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка.Заблокировать();
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.ВариантВыполненияАгрегации = ВариантВыполненияАгрегации;
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При сохранении варианта выполнения агрегации в документе %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3
			           |Текст JSON:
			           |%4'"),
			ДокументСсылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			Организация,
			"");
		
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При сохранении варианта выполнения агрегации в документе %1 возникла ошибка:
			           |Текст ошибки: %2
			           |Организация: %3'"),
			ДокументСсылка,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
			Организация);
		
		ОбъектМетаданных = ДокументСсылка.Метаданные();
		
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: сохранение варианта выполнения агрегации ИС МП по данным документа'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных,,
			ТекстОшибкиЖурналРегистрации);
		
		Результат.ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ЕстьКодыАгрегатов(ДокументСсылка, Реквизиты)

	Если Реквизиты.ОтчетПроизводственнойЛинии Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДанныеДокумента.НормализованноеЗначениеШтрихкодаУпаковки
			|ИЗ
			|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &Ссылка
			|	И (ДанныеДокумента.НормализованноеЗначениеШтрихкодаУпаковки <> """"
			|	Или ДанныеДокумента.ЗначениеШтрихкодаУпаковки <> """")
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки
			|ИЗ
			|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
			|ГДЕ
			|	ДанныеРегистра.Документ = &Ссылка
			|	И (ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки <> """"
			|	Или ДанныеРегистра.ЗначениеШтрихкодаУпаковки <> """")");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ЕстьКодыАгрегатов = Не Запрос.Выполнить().Пустой();
		
	Иначе
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Штрихкод КАК Штрихкод
			|ИЗ
			|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров.ВложенныеШтрихкоды КАК ШтрихкодыУпаковокТоваровВложенныеШтрихкоды
			|		ПО (ШтрихкодыУпаковокТоваровВложенныеШтрихкоды.Ссылка = ШтрихкодыУпаковок.ШтрихкодУпаковки)
			|			И (ШтрихкодыУпаковок.Ссылка = &Ссылка)");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		ЕстьКодыАгрегатов = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
	Возврат ЕстьКодыАгрегатов;
	
КонецФункции

Функция ИнициализироватьДеревоУпаковок()
	
	ДеревоУпаковок = Новый ДеревоЗначений;
	ДеревоУпаковок.Колонки.Добавить("ШтрихкодУпаковки",   Неопределено);
	ДеревоУпаковок.Колонки.Добавить("Штрихкод",           Неопределено);
	ДеревоУпаковок.Колонки.Добавить("ЕстьОшибки",         Новый ОписаниеТипов("Булево"));
	ДеревоУпаковок.Колонки.Добавить("СтрокаДанныхОтчета", Неопределено);
	ДеревоУпаковок.Колонки.Добавить("Обработано",         Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Функция ДеревоПоДаннымОтчетаПроизводственнойЛинии(ДанныеОтчета)
	
	ДеревоУпаковок = ИнициализироватьДеревоУпаковок();
	
	СоответствиеСтрокДереваУпаковок = Новый Соответствие;
	ИсточникДанных                  = Новый Массив;
	
	Для Каждого СтрокаДанныхОтчета Из ДанныеОтчета Цикл
		ИсточникДанных.Добавить(
			Новый Структура(
				"Штрихкод, ШтрихкодУпаковки, СтрокаДанныхОтчета",
				СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкода, СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки, СтрокаДанныхОтчета));
	КонецЦикла;
	
	ГрупповаяОбработкаШтрихкодовИС.ДополнитьУпорядочитьДанныеТСД(ИсточникДанных);
	
	Для Каждого СтрокаДанных Из ИсточникДанных Цикл
		
		Если ЗначениеЗаполнено(СтрокаДанных.ШтрихкодУпаковки) Тогда
			СтрокаДереваВерхнегоУровня = СоответствиеСтрокДереваУпаковок[СтрокаДанных.ШтрихкодУпаковки];
			Если СтрокаДереваВерхнегоУровня = Неопределено Тогда
				СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
			КонецЕсли;
		Иначе
			СтрокаДереваВерхнегоУровня = ДеревоУпаковок;
		КонецЕсли;
		
		СтрокаДерева = СтрокаДереваВерхнегоУровня.Строки.Добавить();
		СтрокаДерева.Штрихкод = СтрокаДанных.Штрихкод;
		СтрокаДерева.ШтрихкодУпаковки = СтрокаДанных.ШтрихкодУпаковки;
		СтрокаДерева.СтрокаДанныхОтчета = СтрокаДанных.СтрокаДанныхОтчета;
		СоответствиеСтрокДереваУпаковок.Вставить(СтрокаДанных.Штрихкод, СтрокаДерева);
		
		Если ЗначениеЗаполнено(СтрокаДанных.СтрокаДанныхОтчета) Тогда
			СтрокаДерева.ЕстьОшибки = ЗначениеЗаполнено(СтрокаДанных.СтрокаДанныхОтчета.ТекстОшибкиЗначениеШтрихкода);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДеревоУпаковок;
	
КонецФункции

Процедура УдалитьВложенныеУпаковки(СтрокиДерева, МассивСтрок, УдалятьВложенные)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Обработано Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.ЕстьОшибки Или УдалятьВложенные Тогда
			Если СтрокаДерева.Строки.Количество() > 0 Тогда
				УдалитьВложенныеУпаковки(СтрокаДерева.Строки, МассивСтрок, Истина);
			КонецЕсли;
			МассивСтрок.Добавить(СтрокаДерева.СтрокаДанныхОтчета);
			СтрокаДерева.Обработано = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьШтрихкодыУпаковокПоДаннымДокумента(Параметры, АдресРезультата) Экспорт
	
	ДанныеДереваУпаковок = ИнтеграцияИСМПСлужебный.ПодготовитьДеревоУпаковокВерхнегоУровняПоДокументу(Параметры.Документ);
	
	Если ЗначениеЗаполнено(ДанныеДереваУпаковок.ТекстОшибки) Тогда
		ВызватьИсключение(ДанныеДереваУпаковок.ТекстОшибки);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковокПоДаннымДерева(
			ДанныеДереваУпаковок.ДеревоУпаковок,
			ДанныеДереваУпаковок.ПараметрыСканирования);
			
		ПараметрыОбновленияСтатуса = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса();
		ТекущееСостояние = РегистрыСведений.СтатусыДокументовИСМП.ТекущееСостояние(Параметры.Документ);
		Статус = ТекущееСостояние.Статус;
		Если ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены Тогда
			ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
		ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборот Тогда
			ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса;
		ИначеЕсли ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотИАгрегированы
			Или ТекущееСостояние.Статус = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы Тогда
			ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса;
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса.Статус            = Статус;
		ПараметрыОбновленияСтатуса.СтатусОбработки   = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена;
		ПараметрыОбновленияСтатуса.ОперацияКвитанции = ОперацияКвитанции;
		ПараметрыОбновленияСтатуса.ПротоколОбмена    = Неопределено;
		ПараметрыОбновленияСтатуса.ПараметрыЗапроса  = Неопределено;
		
		НовыйСтатус = ОбновитьСтатусПослеПолученияДанных(
			Параметры.Документ,
			Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента,
			ПараметрыОбновленияСтатуса);
			
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПодробноеПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ИмяСобытияЖурналРегистрации = НСтр(
			"ru = 'ГосИС: Запись штрихкодов упаковок верхнего уровня'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки);
		ВызватьИсключение ПодробноеПредставлениеОшибки;
	КонецПопытки;
	
	РезультатСозданияШтрихкодов = Истина;
	ПоместитьВоВременноеХранилище(РезультатСозданияШтрихкодов, АдресРезультата);
	
КонецПроцедуры

Функция КоличествоКодовДляКонтроляСтатусов(КоличествоКодовВСообщении)
	
	Результат = Мин(Макс(Окр(КоличествоКодовВСообщении/100, 0, РежимОкругления.Окр15как20),1), 10);
	Возврат Результат;
	
КонецФункции

#Область Сообщения

#Область ПроверкиСообщений

Процедура ПроверитьЗаполнениеДатыПроизводства(ДатаПроизводства, СообщениеJSON)
	Если Не ЗначениеЗаполнено(ДатаПроизводства) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Дата производства""'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхДекларации(СообщениеJSON, Шапка)
	Если Не ЗначениеЗаполнено(Шапка.РегистрационныйНомерДекларации) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Регистрационный номер декларации""'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Шапка.ДатаДекларации) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Дата декларации""'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеДанныхТаможенногоОргана(СообщениеJSON, Шапка)
	Если Не ЗначениеЗаполнено(Шапка.ПринятоеРешение) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Решение таможенного органа""'"));
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Шапка.КодТаможенногоОргана) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Код таможенного органа""'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка)
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеНалоговогоНомера(СообщениеJSON, СведенияОКонтрагенте, Шапка)
	Если Не ЗначениеЗаполнено(СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""Налоговый номер в стране регистрации"".
						   |Контрагент: %1'"), Шапка.Контрагент));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКодаТНВЭДШапки(СообщениеJSON, Шапка)
	Если Не Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Шапка.КодТНВЭД) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""ТН ВЭД""'"));
	ИначеЕсли СтрДлина(Шапка.КодТНВЭД) <> 10 Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Длина кода ТН ВЭД должна составлять 10 цифр.'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеКодаТНВЭДНоменклатуры(СообщениеJSON, КодТНВЭД, Номенклатура)
	Если Не ЗначениеЗаполнено(КодТНВЭД) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ТН ВЭД"" для номенклатуры %1.'"), Номенклатура));
	ИначеЕсли СтрДлина(КодТНВЭД) <> 10 Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'Длина кода ТН ВЭД должна составлять 10 цифр.'"));
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьЗаполнениеЗаводскогоСерийногоНомера(Шапка, ПолныеКодыМаркировки, СообщениеJSON)
	
	Если Не ЗначениеЗаполнено(Шапка.НомерПартии)
		И Не ЗначениеЗаполнено(Шапка.НомерСерии)
		И Не ЗаводскойСерийныйНомерЗаполнен(ПолныеКодыМаркировки) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			НСтр("ru = 'В отчёте о нанесении обязательно должна быть указана информация по номеру серии или номеру партии
			           |или заводскому серийному номеру в структуре кода маркировки.'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНезаполненномИдентификатореВЕТИС(СообщениеJSON)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(НСтр("ru = 'Не заполнено поле ""%1"".'"), ИнтеграцияИСМПВЕТИСКлиентСервер.ИмяИдентификатораПроисхожденияВЕТИС()));
КонецПроцедуры

Процедура СообщитьОбОшибкеРазбораКода(СообщениеJSON, ПримечаниеКРезультатуРазбора, СтрокаТЧМаркированныеТовары)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(
			НСтр("ru = 'Не удалось разобрать код маркировки %1:
				       |%2'"),
				СтрокаТЧМаркированныеТовары.Штрихкод,
				ПримечаниеКРезультатуРазбора.ТекстОшибки));
КонецПроцедуры

Процедура СообщитьОНеизвестнойОперации(СообщениеJSON, Шапка)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(НСтр("ru = 'Неизвестная операция ввода в оборот: ""%1"".'"), Шапка.Операция));
КонецПроцедуры

Процедура СообщитьОНеправильномФорматеОтчета(СообщениеJSON)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		НСтр("ru = 'Некорректный формат данных отчета производственной линии'"));
КонецПроцедуры

Процедура СообщитьОНеподдерживаемомСоставеОтчета(СообщениеJSON)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		НСтр("ru = 'В документе найдены и коды маркировки наборов и коды маркировки групповых упаковок.
		           |Требуется отдельно отправлять документы для наборов и отдельно - для групповых упаковок.'"));
КонецПроцедуры

Процедура СообщитьОбОшибкеПриСохраненииДанныхОтчета(СообщениеJSON, ТекстОшибки)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		ТекстОшибки);
КонецПроцедуры

Процедура ДобавитьТекстОшибкиНеНайденПолныйКод(ИсходнаяСтрока, ИмяКолонки, ЕстьОшибки)
	
	ТекстОшибки = СтрШаблон(
		НСтр("ru = 'Не найден полный код маркировки для %1'"), 
		ИсходнаяСтрока[ИмяКолонки]);

	ИмяКолонкиТекстОшибки = "ТекстОшибки" + ИмяКолонки;

	ИсходнаяСтрока[ИмяКолонкиТекстОшибки] = ?(ЗначениеЗаполнено(ИсходнаяСтрока[ИмяКолонкиТекстОшибки]),
		ИсходнаяСтрока[ИмяКолонкиТекстОшибки] + Символы.ПС + ТекстОшибки,
		ТекстОшибки);

	ЕстьОшибки = Истина;

КонецПроцедуры

#КонецОбласти

Функция ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии = 1)
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ВидПродукции      = Шапка.ВидПродукции;
	СообщениеJSON.Операция          = Операция;
	СообщениеJSON.Версия            = НомерВерсии;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.ТребуетсяПодписание       = Ложь;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	Возврат СообщениеJSON;
	
КонецФункции

#Область ЗаполнениеСведенийПоШтрихкодамУпаковок

Процедура ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
	СообщениеJSON, ГруппыКодов, ИсточникДанных, СведенияОТоварах, ВидПродукции, Настройки = Неопределено)
	
	Если Настройки = Неопределено Тогда
		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
	КонецЕсли;
	
	Фильтр = Неопределено;
	Если Настройки.УровеньВложенностиУпаковок = 1 Тогда
		ТекущаяГруппа = Новый Массив;
		ГруппаНормализованныхКодов = Новый Массив;
		
		КоличествоКодовВПакете = 0;
		ОписаниеПакета = Новый Структура;
		ОписаниеПакета.Вставить("ГруппаКодов",                ТекущаяГруппа);
		ОписаниеПакета.Вставить("ГруппаНормализованныхКодов", ГруппаНормализованныхКодов);
		
		Настройки.Вставить("КоличествоВТекущейГруппе", 0);
		Настройки.Вставить("ТекущаяГруппаНормализованныхКодов", Новый Массив);
		
		Фильтр = Настройки.Фильтр;
	Иначе
		ТекущаяГруппа = ГруппыКодов;
	КонецЕсли;
	
	Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
		
		Если Фильтр <> Неопределено
			И Фильтр[СтрокаИсточникаДанных.ШтрихкодУпаковки] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Наборы и групповые упаковки вводятся в оборот при агрегации
		Если Не Настройки.ЗаполнятьВложенныеКоды
			И СтрокаИсточникаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		Если Настройки.ОтчетПроизводственнойЛинии Тогда
			СтрокаТЧ = ЗаполнитьДанныеСтрокиВводВОборотПоДаннымОтчета(
				СтрокаИсточникаДанных,
				СведенияОТоварах,
				Настройки);
		Иначе
			СтрокаТЧ = ЗаполнитьДанныеСтрокиВводВОборот(
				СообщениеJSON,
				ВидПродукции,
				СтрокаИсточникаДанных,
				СведенияОТоварах,
				Настройки);
		КонецЕсли;
		
		Настройки.КоличествоВТекущейГруппе = Настройки.КоличествоВТекущейГруппе + 1;
		
		Если Настройки.УровеньВложенностиУпаковок = 1
			Или Настройки.ЗаполнятьВложенныеКоды
			И СтрокаИсточникаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Настройки.ТекущаяГруппаНормализованныхКодов.Добавить(СтрокаИсточникаДанных.Штрихкод);
		КонецЕсли;
		
		Если Настройки.ЗаполнятьВложенныеКоды И СтрокаИсточникаДанных.Строки.Количество() Тогда
			
			НастройкиВложенныхУпаковок = ОбщегоНазначения.СкопироватьРекурсивно(Настройки);
			НастройкиВложенныхУпаковок.УровеньВложенностиУпаковок        = Настройки.УровеньВложенностиУпаковок + 1;
			
			ОчиститьСлужебныеСвойстваНастроекЗаполненияСведенийОТоварахПриВводеВОборот(НастройкиВложенныхУпаковок);
			
			ВложенныеКоды = Новый Массив;
			
			ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(СообщениеJSON, ВложенныеКоды, СтрокаИсточникаДанных.Строки, СведенияОТоварах, ВидПродукции, НастройкиВложенныхУпаковок);
			
			СтрокаТЧ.Вставить("children", ВложенныеКоды);
			Если Настройки.УказыватьСуммы
				И (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
					Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках) Тогда
				
				Настройки.КоличествоВТекущейГруппе = Настройки.КоличествоВТекущейГруппе + НастройкиВложенныхУпаковок.КоличествоВТекущейГруппе;
				Настройки.cost      = Настройки.cost      + НастройкиВложенныхУпаковок.cost;
				Настройки.vat_value = Настройки.vat_value + НастройкиВложенныхУпаковок.vat_value;
				Настройки.excise    = Настройки.excise    + НастройкиВложенныхУпаковок.excise;
				
				СтрокаТЧ.Вставить("cost",      НастройкиВложенныхУпаковок.cost);
				СтрокаТЧ.Вставить("vat_value", НастройкиВложенныхУпаковок.vat_value);
				СтрокаТЧ.Вставить("excise",    НастройкиВложенныхУпаковок.excise);
				
				СтрокаТЧ.Вставить("certificate_document_data", Новый Массив);
				
				Для Каждого ЭлементКоллекции Из НастройкиВложенныхУпаковок.ДанныеСертификации Цикл
					СтрокаТЧ.certificate_document_data.Добавить(ЭлементКоллекции.Значение);
					Настройки.ДанныеСертификации.Вставить(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
				КонецЦикла;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Настройки.ТекущаяГруппаНормализованныхКодов, НастройкиВложенныхУпаковок.ТекущаяГруппаНормализованныхКодов);
			
		КонецЕсли;
		
		Если Настройки.УровеньВложенностиУпаковок = 1 Тогда
			
			Если КоличествоКодовВПакете > 0
				И КоличествоКодовВПакете + Настройки.КоличествоВТекущейГруппе > Настройки.КоличествоКодовВСообщении Тогда
				
				ГруппыКодов.Добавить(ОписаниеПакета);
				
				ТекущаяГруппа              = Новый Массив;
				ГруппаНормализованныхКодов = Новый Массив;
				
				ОписаниеПакета = Новый Структура;
				ОписаниеПакета.Вставить("ГруппаКодов",                ТекущаяГруппа);
				ОписаниеПакета.Вставить("ГруппаНормализованныхКодов", ГруппаНормализованныхКодов);
				
				КоличествоКодовВПакете = 0;
				
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ГруппаНормализованныхКодов, Настройки.ТекущаяГруппаНормализованныхКодов);
			КоличествоКодовВПакете = КоличествоКодовВПакете + Настройки.КоличествоВТекущейГруппе;
			
			ОчиститьСлужебныеСвойстваНастроекЗаполненияСведенийОТоварахПриВводеВОборот(Настройки);
			
		КонецЕсли;
		
		ТекущаяГруппа.Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
	Если Настройки.УровеньВложенностиУпаковок = 1 И ТекущаяГруппа.Количество() Тогда
		ГруппыКодов.Добавить(ОписаниеПакета);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьДанныеСтрокиВводВОборот(СообщениеJSON, ВидПродукции, СтрокаИсточникаДанных, ИсточникДанныхТовары, Настройки)
	
	ПараметрыНормализацииПрочее = Настройки.ПараметрыНормализацииПрочее;
	
	Если СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ИмяРеквизитаКодМаркировки = Настройки.ИмяРеквизитаКодУпаковки;
	Иначе
		ИмяРеквизитаКодМаркировки = Настройки.ИмяРеквизитаКодМаркировки;
	КонецЕсли;
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ВидПродукции);
	
	СтрокаТЧ = Новый Структура;
	
	Если Настройки.ЭтоМех Тогда
		
		СтрокаТЧ.Вставить(
			ИмяРеквизитаКодМаркировки,
			СтрокаИсточникаДанных.Штрихкод);
		
	Иначе
		
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
			СтрокаИсточникаДанных.Штрихкод, ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
		
		СтрокаТЧ.Вставить(
			ИмяРеквизитаКодМаркировки,
			ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
		
	КонецЕсли;
	
	Если СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
		Или Настройки.ПроверятьИУказыватьКодТНВЭД И СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		
		ТребуетсяНоменклатура = Настройки.ПроверятьИУказыватьКодТНВЭД
			Или Настройки.УказыватьСертификацию
			Или Настройки.УказыватьИнформациюОТоваре
			Или Настройки.УказыватьСуммы;
		
		ЭтоМаркировкаОстатков = Настройки.ЭтоМаркировкаОстатков;
		
		Если ТребуетсяНоменклатура Или ЭтоМаркировкаОстатков Тогда
			
			Отбор = Новый Структура;
			Если ТребуетсяНоменклатура Тогда
				
				Отбор.Вставить("Номенклатура",   СтрокаИсточникаДанных.Номенклатура);
				Отбор.Вставить("Характеристика", СтрокаИсточникаДанных.Характеристика);
				Отбор.Вставить("Серия",          СтрокаИсточникаДанных.Серия);
				
				Если ЭтоПродукцияПодконтрольнаяВЕТИС Тогда
					Отбор.Вставить("ИдентификаторПроисхожденияВЕТИС", СтрокаИсточникаДанных.ИдентификаторПроисхожденияВЕТИС);
				ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции) Тогда   
					Отбор.Вставить("СрокГодности", СтрокаИсточникаДанных.ГоденДо);
				КонецЕсли;
				
			ИначеЕсли ЭтоМаркировкаОстатков Тогда
				
				Если ЗначениеЗаполнено(СтрокаИсточникаДанных.Номенклатура) Тогда
					
					Отбор.Вставить("Номенклатура",   СтрокаИсточникаДанных.Номенклатура);
					Отбор.Вставить("Характеристика", СтрокаИсточникаДанных.Характеристика);
					Отбор.Вставить("Серия",          СтрокаИсточникаДанных.Серия);
					
				Иначе
					ПримечаниеКРезультатуРазбора = Неопределено;
					ДанныеКодаМаркировки         = РазборКодаМаркировкиИССлужебный.РазобратьКодМаркировки(
						СтрокаИсточникаДанных.Штрихкод, ВидПродукции, ПримечаниеКРезультатуРазбора);
					
					Если ДанныеКодаМаркировки = Неопределено Тогда
						СообщитьОбОшибкеРазбораКода(СообщениеJSON, ПримечаниеКРезультатуРазбора, СтрокаИсточникаДанных);
						Возврат СтрокаТЧ;
					Иначе
						Отбор.Вставить("GTIN", ДанныеКодаМаркировки.СоставКодаМаркировки.GTIN);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			НайденныеСтроки = ИсточникДанныхТовары.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				Если ТребуетсяНоменклатура Или ЭтоМаркировкаОстатков И ЗначениеЗаполнено(СтрокаИсточникаДанных.Номенклатура) Тогда
					ИнтеграцияИСМП.СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, Отбор);
				Иначе
					ИнтеграцияИСМП.СообщитьОбОтсутствующемGTIN(СообщениеJSON, Отбор);
				КонецЕсли;
				
				Возврат СтрокаТЧ;
				
			ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
				
				Если ТребуетсяНоменклатура Или ЭтоМаркировкаОстатков И ЗначениеЗаполнено(СтрокаИсточникаДанных.Номенклатура) Тогда
					ИнтеграцияИСМП.СообщитьОДубляхНоменклатуры(СообщениеJSON, Отбор);
				Иначе
					ИнтеграцияИСМП.СообщитьОДубляхGTIN(СообщениеJSON, Отбор);
				КонецЕсли;
				
				Возврат СтрокаТЧ;
				
			КонецЕсли;
			
			СтрокаТЧТовары = НайденныеСтроки[0];
			
		КонецЕсли;
		
		Если Настройки.УказыватьТипУпаковки Тогда
			Если Настройки.ЭтоМех Тогда
				СтрокаТЧ.Вставить("pack_type", "UNIT");
			Иначе
				СтрокаТЧ.Вставить("packType", "UNIT");
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.ПроверятьИУказыватьКодТНВЭД Тогда
			КодТНВЭД = СокрЛП(СтрокаТЧТовары.КодТНВЭД);
			ПроверитьЗаполнениеКодаТНВЭДНоменклатуры(СообщениеJSON, КодТНВЭД, Отбор.Номенклатура);
			СтрокаТЧ.Вставить("tnved_code", КодТНВЭД);
			
			// Для ТГ Мех обязательный при значении параметра "tnved_code" ("Код ТН ВЭД") равном "4303109080" ("Прочие предметы одежды").
			// Строго не заполнен, если параметр "tnved_code" ("Код ТН ВЭД") не равен "4303109080".
			Если Настройки.УказыватьВидМехаПоКодуТНВЭД И КодТНВЭД = Настройки.КодТНВЭДПрочиеПредметыОдеждыИСМП Тогда
				СтрокаТЧ.Вставить("fur_kind", СтрокаТЧТовары.ВидМеха);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			Если Не ЭтоМаркировкаОстатков И Настройки.УказыватьСертификацию
				И ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
				
				СтрокаТЧ.Вставить("certificate_document_data", Новый Массив);
				
				ДанныеСертификации = Новый Структура;
				ДанныеСертификации.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
				ДанныеСертификации.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
				ДанныеСертификации.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
				
				Если Настройки.ДоступноУказаниеНомерСкважины
					И ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
					ДанныеСертификации.Вставить("well_number", СтрокаТЧТовары.НомерСкважины);
				КонецЕсли;
				
				СтрокаТЧ.certificate_document_data.Добавить(ДанныеСертификации);
				
				Если Настройки.УказыватьСуммы
					И (ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
						Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках) Тогда
					МассивСтрок = Новый Массив;
					Для Каждого КлючИЗначение Из ДанныеСертификации Цикл
						МассивСтрок.Добавить(КлючИЗначение.Значение);
					КонецЦикла;
					ХэшДанныхСертификации = ОбщегоНазначенияИС.ХэшСуммаСтроки(СтрСоединить(МассивСтрок));
					Настройки.ДанныеСертификации.Вставить(ХэшДанныхСертификации, ДанныеСертификации);
				КонецЕсли;
				
			КонецЕсли;
			
			// Лицензии на недра.
			Если Настройки.УказыватьЛицензии
				И ЗначениеЗаполнено(СтрокаТЧТовары.НомерЛицензииНаПользованиеНедрами) Тогда
				СтрокаТЧ.Вставить("licences", Новый Массив);
				ДанныеЛицензии = Новый Структура;
				ДанныеЛицензии.Вставить("licence_number", СтрокаТЧТовары.НомерЛицензииНаПользованиеНедрами);
				ДанныеЛицензии.Вставить("licence_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаЛицензииНаПользованиеНедрами));
				СтрокаТЧ.licences.Добавить(ДанныеЛицензии);
			КонецЕсли;
			
			Если ЭтоМаркировкаОстатков Тогда
				
				// Таможенная декларация (необязательное)
				Если ЗначениеЗаполнено(СтрокаТЧТовары.РегистрационныйНомерДекларации) Тогда
					СтрокаТЧ.Вставить("declaration_number", СтрокаТЧТовары.РегистрационныйНомерДекларации);
					СтрокаТЧ.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДекларации));
				КонецЕсли;
				
				// Сертификация (необязательное)
				Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
					СтрокаТЧ.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
					СтрокаТЧ.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
					СтрокаТЧ.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
				КонецЕсли;
				
				// Страна (необязательное)
				Если ЗначениеЗаполнено(СтрокаТЧТовары.СтранаПроизводстваКод) Тогда
					СтрокаТЧ.Вставить("country", СтрокаТЧТовары.СтранаПроизводстваКод);
				КонецЕсли;
				
			КонецЕсли;
			
			// Информация о товаре
			Если Настройки.УказыватьИнформациюОТоваре Тогда
				
				Если ЗначениеЗаполнено(Настройки.ДатаПроизводства) Тогда
					СтрокаТЧ.Вставить("production_date", Настройки.ДатаПроизводства);
				КонецЕсли;
				ИнформацияОТоваре = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
					СтрокаИсточникаДанных.Номенклатура,
					СтрокаИсточникаДанных.Характеристика,,
					СтрокаИсточникаДанных.Серия);
				СтрокаТЧ.Вставить(Настройки.ИмяРеквизитаИнформацияОТоваре, ИнформацияОТоваре);
				
			КонецЕсли;
			
			Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС
				И ЭтоПродукцияПодконтрольнаяВЕТИС Тогда
				СтрокаТЧ.Вставить("vsd_number", СтрокаТЧТовары.ИдентификаторПроисхожденияВЕТИССтрокой);
			КонецЕсли;
			
			// Дата приемки от физических лиц
			// Отсутствует в отчете производственной линии
			Если Настройки.УказыватьДатуПриемки Тогда
				СтрокаТЧ.Вставить("product_receiving_date", Настройки.ДатаПриемки);
			КонецЕсли;
			
			// Отсутствуют в отчете производственной линии
			Если Настройки.УказыватьСуммы Тогда
				
				СтрокаТЧ.Вставить("cost",      СтрокаТЧТовары.Цена * 100);
				СтрокаТЧ.Вставить("vat_value", Окр((СтрокаТЧТовары.СуммаНДС * 100)/СтрокаТЧТовары.Количество));
				
				Если ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
					Или ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках Тогда
					
					СтрокаТЧ.Вставить("excise", Окр((СтрокаТЧТовары.СуммаАкциза * 100)/СтрокаТЧТовары.Количество));
					Настройки.cost      = Настройки.cost + СтрокаТЧ.cost;
					Настройки.vat_value = Настройки.vat_value + СтрокаТЧ.vat_value;
					Настройки.excise    = Настройки.excise + СтрокаТЧ.excise;
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаТЧ;
	
КонецФункции

Функция ЗаполнитьДанныеСтрокиВводВОборотПоДаннымОтчета(СтрокаИсточникаДанных, СведенияОТоварах, Настройки)
	
	Если СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ИмяРеквизитаКодМаркировки = Настройки.ИмяРеквизитаКодУпаковки;
	Иначе
		ИмяРеквизитаКодМаркировки = Настройки.ИмяРеквизитаКодМаркировки;
	КонецЕсли;

	СтрокаТЧ = Новый Структура;
	СтрокаТЧ.Вставить(
		ИмяРеквизитаКодМаркировки,
		СтрокаИсточникаДанных.КодДляПередачиИСМП);
	
	Если Настройки.ПроверятьИУказыватьКодТНВЭД
		И (СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая
			Или СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская) Тогда
		СтрокаТЧ.Вставить("tnved_code", СведенияОТоварах.КодТНВЭД);
	КонецЕсли;
	
	Если СтрокаИсточникаДанных.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
		
		Если Настройки.УказыватьИдентификаторПроисхожденияВЕТИС
			И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(СведенияОТоварах.ВидПродукции) Тогда
			СтрокаТЧ.Вставить("vsd_number", СведенияОТоварах.ИдентификаторПроисхожденияВЕТИССтрокой);
		КонецЕсли;
		
		// Дата приемки от физических лиц
		Если Настройки.УказыватьДатуПриемки Тогда
			СтрокаТЧ.Вставить("product_receiving_date", Настройки.ДатаПриемки);
		КонецЕсли;
		
		// Сертификация
		Если Настройки.УказыватьСертификацию
			И ЗначениеЗаполнено(СведенияОТоварах.ВидДокументаСертификации) Тогда
			
			СтрокаТЧ.Вставить("certificate_document_data", Новый Массив);
			
			ДанныеСертификации = Новый Структура;
			ДанныеСертификации.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СведенияОТоварах.ВидДокументаСертификации));
			ДанныеСертификации.Вставить("certificate_number", СведенияОТоварах.НомерДокументаСертификации);
			ДанныеСертификации.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СведенияОТоварах.ДатаДокументаСертификации));
			Если Настройки.ДоступноУказаниеНомерСкважины
				И СведенияОТоварах.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода") Тогда
				ДанныеСертификации.Вставить("well_number",        СведенияОТоварах.НомерСкважины);
			КонецЕсли;
			
			СтрокаТЧ.certificate_document_data.Добавить(ДанныеСертификации);
			
		КонецЕсли;
		
		// Лицензии на недра.
		Если Настройки.УказыватьЛицензии
			И ЗначениеЗаполнено(СведенияОТоварах.НомерЛицензииНаПользованиеНедрами) Тогда
			СтрокаТЧ.Вставить("licences", Новый Массив);
			ДанныеЛицензии = Новый Структура;
			ДанныеЛицензии.Вставить("licence_number", СведенияОТоварах.НомерЛицензииНаПользованиеНедрами);
			ДанныеЛицензии.Вставить("licence_date",   ИнтеграцияИС.ДатаUTC(СведенияОТоварах.ДатаЛицензииНаПользованиеНедрами));
			СтрокаТЧ.licences.Добавить(ДанныеЛицензии);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаТЧ;
	
КонецФункции

Функция НастройкиДобавляемыхПолейСведенийОТоварах(ИмяРеквизитаТовары = "products", ИмяРеквизитаКодМаркировки = "uit_code", ИмяРеквизитаКодУпаковки = "uitu_code")
	
	Результат = Новый Структура;
	
	Результат.Вставить("ИмяРеквизитаТовары",        ИмяРеквизитаТовары);
	Результат.Вставить("ИмяРеквизитаКодМаркировки", ИмяРеквизитаКодМаркировки);
	Результат.Вставить("ИмяРеквизитаКодУпаковки",   ИмяРеквизитаКодУпаковки);
	
	Результат.Вставить("ПроверятьИУказыватьКодТНВЭД",   Истина);
	Результат.Вставить("УказыватьСертификацию",         Истина);
	Результат.Вставить("ДоступноУказаниеНомерСкважины", Ложь);
	Результат.Вставить("УказыватьЛицензии",             Ложь);
	
	Результат.Вставить("УказыватьИнформациюОТоваре",  Ложь);
	Результат.Вставить("ДатаПроизводства",            Неопределено);
	Результат.Вставить("ИмяРеквизитаИнформацияОТоваре", "productName");
	
	Результат.Вставить("УказыватьДатуПриемки", Ложь);
	Результат.Вставить("ДатаПриемки",          Неопределено);
	
	Результат.Вставить("УказыватьСуммы",       Ложь);
	
	Результат.Вставить("УказыватьИдентификаторПроисхожденияВЕТИС", Ложь);
	Результат.Вставить("УровеньВложенностиУпаковок", 1);
	
	Результат.Вставить("ЭтоМаркировкаОстатков", Ложь);
	
	Результат.Вставить("ЭтоМех",                           Ложь);
	Результат.Вставить("УказыватьВидМехаПоКодуТНВЭД",      Ложь);
	Результат.Вставить("КодТНВЭДПрочиеПредметыОдеждыИСМП", "");
	Результат.Вставить("УказыватьТипУпаковки",             Ложь);
	
	Результат.Вставить("ЗаполнятьВложенныеКоды",    Истина);
	Результат.Вставить("КоличествоКодовВСообщении", ИнтеграцияИСМПСлужебный.КоличествоКодовВСообщенииВводВОборот());
	Результат.Вставить("ОтчетПроизводственнойЛинии", Ложь);
	Результат.Вставить("Фильтр",                     Неопределено);
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	Результат.Вставить("ПользовательскиеПараметрыРазбораКодаМаркировки", ПользовательскиеПараметрыРазбораКодаМаркировки);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	Результат.Вставить("ПараметрыНормализацииПрочее", ПараметрыНормализацииПрочее);
	
	// ТАПИ, CROSSBORDER, ТГ Пиво:
	// "Если в документе указан КИТУ, то в параметре «cost» («Цена за единицу») стоимость указывается за весь КИТУ,
	//  при этом стоимость КИ, входящих в состав такого КИТУ, будет рассчитана как среднее арифметическое значение
	// (чтобы получить реальную стоимость КИ, в КИТУ должна содержаться одинаковая продукция)".
	Результат.Вставить("cost",      0);
	Результат.Вставить("vat_value", 0);
	Результат.Вставить("excise",    0);
	Результат.Вставить("ДанныеСертификации", Новый Соответствие);
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьСлужебныеСвойстваНастроекЗаполненияСведенийОТоварахПриВводеВОборот(Настройки)
	
	Настройки.КоличествоВТекущейГруппе          = 0;
	Настройки.ТекущаяГруппаНормализованныхКодов = Новый Массив;
	
	Настройки.cost      = 0;
	Настройки.vat_value = 0;
	Настройки.excise    = 0;
	
	Настройки.ДанныеСертификации = Новый Соответствие;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПолнымиКодамиМаркировки

Функция ПроверитьИРазбитьНаГруппыПолныеКодыМаркировки(СообщенияJSON, СообщениеJSON, ГруппыКодов,
	ПолныеКодыМаркировки)
	
	КоличествоКодовВДокументе = ИнтеграцияИСМПСлужебный.КоличествоКодовВСообщенииВводВОборот();
	
	ПолныеКодыМаркировки.Сортировать("ИдентификаторПроисхожденияВЕТИС, ГоденДо, GTIN, КодМаркировки");
	
	ТекущийИдентификаторПроисхожденияВЕТИС = Неопределено;
	ТекущийГоденДо                         = Неопределено;
	ТекущийGTIN                            = Неопределено;
	ТекущийВидУпаковки                     = Неопределено;
	
	ЭтоПиво         = СообщениеJSON.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или СообщениеJSON.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	ЭтоБАПиво       = СообщениеJSON.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
	ЭтоМорепродукты = СообщениеJSON.ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС;
	
	ЕстьОшибки = Ложь;
	РазделительGS = РазборКодаМаркировкиИССлужебныйКлиентСервер.РазделительGS();
	
	Для Каждого СтрокаКодМаркировки Из ПолныеКодыМаркировки Цикл
		
		Если ТекущийИдентификаторПроисхожденияВЕТИС <> СтрокаКодМаркировки.ИдентификаторПроисхожденияВЕТИС
			Или ТекущийГоденДо <> СтрокаКодМаркировки.ГоденДо
			Или ТекущийGTIN <> СтрокаКодМаркировки.GTIN
			Или ТекущийВидУпаковки <> СтрокаКодМаркировки.ВидУпаковки Тогда
			
			ТекущаяГруппа                     = Новый Массив;
			ТекущаяГруппаНормализованныхКодов = Новый Массив;
			
			КоличествоВТекущейГруппе = 0;
			
			ОписаниеПакета = Новый Структура;
			ОписаниеПакета.Вставить("ГруппаКодов",                         ТекущаяГруппа);
			ОписаниеПакета.Вставить("ГруппаНормализованныхКодов",          ТекущаяГруппаНормализованныхКодов);
			ОписаниеПакета.Вставить("КлючИдентификаторПроисхожденияВЕТИС", СтрокаКодМаркировки.ИдентификаторПроисхожденияВЕТИС);
			ОписаниеПакета.Вставить("КлючГоденДо",                         СтрокаКодМаркировки.ГоденДо);
			ОписаниеПакета.Вставить("GTIN",                                СтрокаКодМаркировки.GTIN);
			ОписаниеПакета.Вставить("ВидУпаковки",                         СтрокаКодМаркировки.ВидУпаковки);
			
			ГруппыКодов.Добавить(ОписаниеПакета);
			
		КонецЕсли;
		
		ТекущийИдентификаторПроисхожденияВЕТИС = СтрокаКодМаркировки.ИдентификаторПроисхожденияВЕТИС;
		ТекущийГоденДо                         = СтрокаКодМаркировки.ГоденДо;
		ТекущийGTIN                            = СтрокаКодМаркировки.GTIN;
		ТекущийВидУпаковки                     = СтрокаКодМаркировки.ВидУпаковки;
		
		Если Не ЗначениеЗаполнено(СтрокаКодМаркировки.ПолныйКодМаркировки) Тогда
			ЕстьОшибки = Истина;
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(НСтр("ru = 'Не найден полный код маркировки для кода %1.'"), СтрокаКодМаркировки.КодМаркировки));
		Иначе
			
			Если КоличествоВТекущейГруппе = КоличествоКодовВДокументе Тогда
				
				ТекущаяГруппа                     = Новый Массив;
				ТекущаяГруппаНормализованныхКодов = Новый Массив;
				
				КоличествоВТекущейГруппе = 0;
				
				ОписаниеПакета = Новый Структура;
				ОписаниеПакета.Вставить("ГруппаКодов",                         ТекущаяГруппа);
				ОписаниеПакета.Вставить("ГруппаНормализованныхКодов",          ТекущаяГруппаНормализованныхКодов);
				ОписаниеПакета.Вставить("КлючИдентификаторПроисхожденияВЕТИС", ТекущийИдентификаторПроисхожденияВЕТИС);
				ОписаниеПакета.Вставить("КлючГоденДо",                         ТекущийГоденДо);
				ОписаниеПакета.Вставить("GTIN",                                ТекущийGTIN);
				ОписаниеПакета.Вставить("ВидУпаковки",                         ТекущийВидУпаковки);
				
				ГруппыКодов.Добавить(ОписаниеПакета);
				
			КонецЕсли;
			
			ПолныйКодМаркировки = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаКодМаркировки.ПолныйКодМаркировки);
			
			Если ЗначениеЗаполнено(СтрокаКодМаркировки.Количество) Тогда
				Если Лев(Прав(ПолныйКодМаркировки, 6), 2) = "93" Тогда
					Если ЭтоПиво Или ЭтоБАПиво Тогда
						ПолныйКодМаркировки = ПолныйКодМаркировки + РазделительGS + РазборКодаМаркировкиИССлужебныйКлиентСервер.ОбъемКодаМаркировкиСтрокой(СтрокаКодМаркировки.Количество);
					Иначе
						ПолныйКодМаркировки = ПолныйКодМаркировки + РазделительGS + РазборКодаМаркировкиИССлужебныйКлиентСервер.ВесКодаМаркировкиСтрокой(СтрокаКодМаркировки.Количество);
					КонецЕсли;
				ИначеЕсли ЭтоМорепродукты И Лев(Прав(ПолныйКодМаркировки, 46), 2) = "92" Тогда
					ПолныйКодМаркировки = ПолныйКодМаркировки + РазделительGS + РазборКодаМаркировкиИССлужебныйКлиентСервер.ВесКодаМаркировкиСтрокой(СтрокаКодМаркировки.Количество);
				КонецЕсли;
			КонецЕсли;
			
			ТекущаяГруппа.Добавить(ПолныйКодМаркировки);
			ТекущаяГруппаНормализованныхКодов.Добавить(СтрокаКодМаркировки.КодМаркировки);
			КоличествоВТекущейГруппе = КоличествоВТекущейГруппе + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьОшибки Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

Функция ИнициализироватьПолныеКодыМаркировки()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ГоденДо",                          Новый ОписаниеТипов("Дата"));
	Результат.Колонки.Добавить("КодМаркировки",                    Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ПолныйКодМаркировки",              Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Количество",                       Новый ОписаниеТипов("Число"));
	Результат.Колонки.Добавить("GTIN",                             Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ВидУпаковки",                      Новый ОписаниеТипов("ПеречислениеСсылка.ВидыУпаковокИС"));
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьКодКПолучению(ПолныеКодыМаркировки, НормализованныйШтрихкод, РазбиватьПоСрокамГодности = Ложь,
	ДанныеШтрихкодовУпаковок = Неопределено, ПолныйКодМаркировки = Неопределено, GTIN = Неопределено, ВидУпаковки = Неопределено)
	
	ИдентификаторПроисхожденияВЕТИС = "";
	ГоденДо = "";
	Если РазбиватьПоСрокамГодности И ДанныеШтрихкодовУпаковок <> Неопределено Тогда
		ИдентификаторПроисхожденияВЕТИС = ДанныеШтрихкодовУпаковок.ИдентификаторПроисхожденияВЕТИС;
		Если ИдентификаторПроисхожденияВЕТИС = Неопределено Тогда
			ИдентификаторПроисхожденияВЕТИС = "";
		КонецЕсли;
		ГоденДо = ДанныеШтрихкодовУпаковок.ГоденДо;
	КонецЕсли;
	
	ДанныеСтроки = ПолныеКодыМаркировки.Добавить();
	ДанныеСтроки.ИдентификаторПроисхожденияВЕТИС = ИдентификаторПроисхожденияВЕТИС;
	ДанныеСтроки.ГоденДо                         = ГоденДо;
	ДанныеСтроки.КодМаркировки                   = НормализованныйШтрихкод;
	ДанныеСтроки.ПолныйКодМаркировки             = ПолныйКодМаркировки;
	ДанныеСтроки.GTIN                            = GTIN;
	ДанныеСтроки.ВидУпаковки                     = ВидУпаковки;
	
КонецПроцедуры

Процедура ЗаполнитьПолныеКодыМаркировки(ПолныеКодыМаркировки, РезультатПоискаВПуле)
	
	Для Каждого СтрокаТаблицы Из РезультатПоискаВПуле Цикл
		
		ДанныеСтроки = ПолныеКодыМаркировки.Найти(СтрокаТаблицы.КодМаркировки, "КодМаркировки");
		Если ДанныеСтроки <> Неопределено Тогда
			ДанныеСтроки.ПолныйКодМаркировки = СтрокаТаблицы.ПолныйКодМаркировки;
			ДанныеСтроки.Количество          = СтрокаТаблицы.Количество;
			ДанныеСтроки.GTIN                = СтрокаТаблицы.GTIN;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ТребуетсяВводВОборот(Шапка)
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ТекстыЗапросов

Функция ТекстЗапросаВерсииВводВОборот()

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВерсииОтчетОНанесении()

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка = &Ссылка
	|		И ВЫБОР
	|			КОГДА Шапка.ОперацияНанесения В (&ОперацииНанесенияКодовМаркировки)
	|				ТОГДА Шапка.ОперацияНанесения = ИСМППрисоединенныеФайлы.Операция
	|			ИНАЧЕ Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		КОНЕЦ
	|		И Шапка.Ссылка = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВерсииКвитанцияДокумента()

	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИСМППрисоединенныеФайлы.Документ КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИСМП.КвитанцияДокумента)
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаШапка()

	ТекстЗапроса = "ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Номер                          КАК Номер,
	|	Шапка.Дата                           КАК Дата,
	|	Шапка.ДокументОснование              КАК ДокументОснование,
	|	Шапка.Ссылка                         КАК Документ,
	|
	|	Шапка.Организация                    КАК Организация,
	|	Представление(Шапка.Организация)     КАК ОрганизацияПредставление,
	|
	|	Шапка.Контрагент                     КАК Контрагент,
	|	Представление(Шапка.Контрагент)      КАК КонтрагентПредставление,
	|
	|	Шапка.Ответственный                  КАК Ответственный,
	|	Представление(Шапка.Ответственный)   КАК ОтветственныйПредставление,
	|
	|	Шапка.ВидПродукции                      КАК ВидПродукции,
	|	Шапка.Операция                          КАК Операция,
	|	Шапка.ОперацияНанесения                 КАК ОперацияНанесения,
	|	Шапка.ОперацияНанесенияТолькоДляНаборов КАК ОперацияНанесенияТолькоДляНаборов,
	|	Шапка.ВариантЗаполненияДекларации       КАК ВариантЗаполненияДекларации,
	|	Шапка.ПроизводственныйОбъект            КАК ПроизводственныйОбъект,
	|	// Для обуви и одежды
	|	Шапка.ДатаПроизводства               КАК ДатаПроизводства,
	|	Шапка.ДатаДекларации                 КАК ДатаДекларации,
	|	Шапка.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Шапка.КодТаможенногоОргана           КАК КодТаможенногоОргана,
	|	Шапка.ПринятоеРешение                КАК ПринятоеРешение,
	|	Шапка.СтранаПроисхождения            КАК СтранаПроисхождения,
	|	Шапка.СтранаПроисхождения.Код        КАК СтранаЭкспортерКод,
	|	Шапка.ДатаИмпорта                    КАК ДатаИмпорта,
	|	Шапка.ДатаПервичногоДокумента        КАК ДатаПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента       КАК НомерПервичногоДокумента,
	|	// Для отчетов производственной линии
	|	Шапка.СоздаватьШтрихкодыУпаковок             КАК СоздаватьШтрихкодыУпаковок,
	|	Шапка.Номенклатура                           КАК Номенклатура,
	|	Шапка.Характеристика                         КАК Характеристика,
	|	Шапка.Серия                                  КАК Серия,
	|	Шапка.ИдентификаторПроизводственногоЗаказа   КАК ИдентификаторПроизводственногоЗаказа,
	|	Шапка.ИдентификаторПроизводственнойЛинии     КАК ИдентификаторПроизводственнойЛинии,
	|	Шапка.ОтчетПроизводственнойЛинии             КАК ОтчетПроизводственнойЛинии,
	|	Шапка.ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Шапка.СкоропортящаясяПродукция               КАК СкоропортящаясяПродукция,
	|	Шапка.СрокГодности                           КАК СрокГодности,
	|	Шапка.КодТНВЭД                               КАК КодТНВЭД,
	|	Шапка.ВидДокументаСертификации               КАК ВидДокументаСертификации,
	|	Шапка.НомерДокументаСертификации             КАК НомерДокументаСертификации,
	|	Шапка.ДатаДокументаСертификации              КАК ДатаДокументаСертификации,
	|	Шапка.КемВыданПаспортСоответствия            КАК КемВыданПаспортСоответствия,
	|	Шапка.НомерПаспортаСоответствия              КАК НомерПаспортаСоответствия,
	|	Шапка.ДатаПаспортаСоответствия               КАК ДатаПаспортаСоответствия,
	|	Шапка.НомерСкважины                          КАК НомерСкважины,
	|	Шапка.ВариантВыполненияАгрегации             КАК ВариантВыполненияАгрегации,
	|	Шапка.Ссылка                                 КАК Ссылка,
	|	Шапка.НомерЛицензииНаПользованиеНедрами      КАК НомерЛицензииНаПользованиеНедрами,
	|	Шапка.ДатаЛицензииНаПользованиеНедрами       КАК ДатаЛицензииНаПользованиеНедрами,
	|	Шапка.НомерПартии                            КАК НомерПартии,
	|	Шапка.НомерСерии                             КАК НомерСерии,
	|	Шапка.СодержаниеЭтиловогоСпирта              КАК СодержаниеЭтиловогоСпирта,
	|	Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС КАК ИдентификаторПроизводственнойПлощадкиВЕТИС
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаТовары()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.КодТНВЭД                               КАК КодТНВЭД,
	|	Товары.ДатаПроизводства                       КАК ДатаПроизводства,
	|	Товары.ВидДокументаСертификации               КАК ВидДокументаСертификации,
	|	Товары.НомерДокументаСертификации             КАК НомерДокументаСертификации,
	|	Товары.ДатаДокументаСертификации              КАК ДатаДокументаСертификации,
	|	Товары.КемВыданПаспортСоответствия            КАК КемВыданПаспортСоответствия,
	|	Товары.НомерПаспортаСоответствия              КАК НомерПаспортаСоответствия,
	|	Товары.ДатаПаспортаСоответствия               КАК ДатаПаспортаСоответствия,
	|	Товары.НомерСкважины                          КАК НомерСкважины,
	|	ЕСТЬNULL(Товары.СтранаПроизводства.Код, """") КАК СтранаПроизводстваКод,
	|	Товары.ДатаДекларации                         КАК ДатаДекларации,
	|	Товары.РегистрационныйНомерДекларации         КАК РегистрационныйНомерДекларации,
	|	Товары.Цена                                   КАК Цена,
	|	Товары.СуммаНДС                               КАК СуммаНДС,
	|	Товары.СуммаАкциза                            КАК СуммаАкциза,
	|	Товары.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС,
	|	&ИдентификаторПроисхожденияВЕТИССтрокой       КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Товары.СрокГодности                           КАК СрокГодности,
	|	Товары.ВидМеха.Код                            КАК ВидМеха,
	|	Товары.НомерЛицензииНаПользованиеНедрами      КАК НомерЛицензииНаПользованиеНедрами,
	|	Товары.ДатаЛицензииНаПользованиеНедрами       КАК ДатаЛицензииНаПользованиеНедрами,
	|	Товары.НомерПервичногоДокумента               КАК НомерПервичногоДокумента,
	|	Товары.ДатаПервичногоДокумента                КАК ДатаПервичногоДокумента,
	|	Товары.СодержаниеЭтиловогоСпирта              КАК СодержаниеЭтиловогоСпирта
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДанныеОтчетаПроизводственнойЛинии()

	ТекстЗапроса = "ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода         КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.ФорматBase64              КАК ФорматBase64,
	|
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода         КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеОтчета.НомерСтроки                              КАК КлючЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗначениеШтрихкодаКПередаче,
	|
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗначениеШтрихкодаУпаковкиКПередаче,
	|	ДанныеОтчета.Ссылка КАК Документ
	|
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|	И ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			Или ПОДСТРОКА(ДанныеОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеРегистра.ЗначениеШтрихкода,
	|	ДанныеРегистра.ЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.ФорматBase64,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкода,
	|	ДанныеРегистра.НормализованноеЗначениеШтрихкодаУпаковки,
	|	ДанныеРегистра.КлючЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|
	|	ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеРегистра.Документ
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|	И ВЫБОР
	|		КОГДА НЕ &Повторно
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкода, 1, 1) <> """"
	|			Или ПОДСТРОКА(ДанныеРегистра.ТекстОшибкиЗначениеШтрихкодаУпаковки, 1, 1) <> """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючЗаписи
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДанныеРегистра()

	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК ЕстьЗаписи
	|ИЗ
	|	РегистрСведений.ДанныеОтчетаПроизводственнойЛинииИСМП КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Документ = &Ссылка
	|";

	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаШтрихкодыУпаковок()

	ТекстЗапроса = "ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки                КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	ШтрихкодыУпаковок.СрокГодности                    КАК СрокГодности
	|ИЗ
	|	Документ.МаркировкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

Функция ПараметрыЗапросаВводВОборот(Шапка, ДополнительныеПараметры = Неопределено)

	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("ОперацияДокумента",          Шапка.Операция);
	ПараметрыЗапроса.Вставить("ДанныеСообщения",                       Неопределено);
	ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);
	
	ПараметрыЗапроса.Вставить("ТребуетсяАгрегация",         Ложь);
	ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок", Ложь);
	ПараметрыЗапроса.Вставить("ПовторнаяОтправка",          Ложь);
	ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", Ложь);
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыЗапроса, ДополнительныеПараметры);
	КонецЕсли;
	
	Возврат ПараметрыЗапроса;

КонецФункции

Функция СообщенияJSONВводВОборот(Шапка, СведенияОТоварах, СообщениеJSON, ДополнительныеПараметры)

	СообщенияJSON = Новый Массив;
	ГруппыКодов   = Новый Массив;

	ДатаПроизводства = ИнтеграцияИС.ДатаUTC(Шапка.ДатаПроизводства);
	ДатаДокумента = ИнтеграцияИС.ДатаUTC(Шапка.Дата);
	РеквизитыОрганизации        = ДополнительныеПараметры.РеквизитыОрганизации;
	КодыАгрегированы            = ДополнительныеПараметры.КодыАгрегированы;
	Фильтр                      = ДополнительныеПараметры.Фильтр;
	
	ЭтоМех = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	ЭтоУпакованнаяВода = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода;
	ЭтоПиво = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	ЭтоТитановаяПродукция = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция;
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Шапка.ВидПродукции);
	
#Область ТелоДокумента
	
	// Для операции возможна загрузка данных отчета производственной линии
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ Тогда

		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
		ПроверитьЗаполнениеКодаТНВЭДШапки(СообщениеJSON, Шапка);

		document_description = Новый Структура;
		document_description.Вставить("production_type", "OWN_PRODUCTION");
		document_description.Вставить("production_date", ДатаПроизводства);

		document_description.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
		document_description.Вставить("producer_inn",    РеквизитыОрганизации.ИНН);
		document_description.Вставить("owner_inn",       РеквизитыОрганизации.ИНН);

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("doc_type",             "Promotion_Inform_Selfmade");
		ТелоЗапроса.Вставить("document_description", document_description);
		ТелоЗапроса.Вставить("products",             Новый Массив);

		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
		Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
		Настройки.ДоступноУказаниеНомерСкважины            = Истина;
		Настройки.УказыватьЛицензии                        = ЭтоУпакованнаяВода;
		Настройки.ЗаполнятьВложенныеКоды                   = КодыАгрегированы;
		Настройки.ОтчетПроизводственнойЛинии               = Шапка.ОтчетПроизводственнойЛинии;
		Настройки.ЭтоМех                                   = ЭтоМех;
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			Если ЭтоПродукцияПодконтрольнаяВЕТИС
				И Не ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
				СообщитьОНеЗаполненномИдентификатореВЕТИС(СообщениеJSON);
			КонецЕсли;
		КонецЕсли;
		
	// Для операции возможна загрузка данных отчета производственной линии
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС Тогда

		ПроверитьЗаполнениеДанныхДекларации(СообщениеJSON, Шапка);
		ПроверитьЗаполнениеДанныхТаможенногоОргана(СообщениеJSON, Шапка);
		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
		ПроверитьЗаполнениеКодаТНВЭДШапки(СообщениеJSON, Шапка);

		document_description = Новый Структура;
		document_description.Вставить("participant_inn",    РеквизитыОрганизации.ИНН);
		document_description.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаДекларации));
		document_description.Вставить("declaration_number", Шапка.РегистрационныйНомерДекларации);
		document_description.Вставить("customs_code",       Шапка.КодТаможенногоОргана);
		document_description.Вставить("decision_code",      ИнтерфейсИСМПСлужебный.ПринятоеРешение(Шапка.ПринятоеРешение));

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("doc_type",             "GOODSIMPORT");
		ТелоЗапроса.Вставить("document_description", document_description);
		ТелоЗапроса.Вставить("products",             Новый Массив);

		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах();
		Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
		Настройки.ЗаполнятьВложенныеКоды                   = КодыАгрегированы;
		Настройки.ОтчетПроизводственнойЛинии               = Шапка.ОтчетПроизводственнойЛинии;
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			Если ЭтоПродукцияПодконтрольнаяВЕТИС
				И Не ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
				СообщитьОНеЗаполненномИдентификатореВЕТИС(СообщениеJSON);
			КонецЕсли;
		КонецЕсли;

	// Для операции возможна загрузка данных отчета производственной линии (молочная продукция)
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда

		РеквизитыКонтрагента = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Контрагент);

		ТелоЗапроса = Новый Структура;

		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору Тогда
			ТелоЗапроса.Вставить("producer_inn", РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("owner_inn",    РеквизитыКонтрагента.ИНН);
			ТелоЗапроса.Вставить("producer",     Истина);
			ТелоЗапроса.Вставить("owner",        Ложь);
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика Тогда
			ТелоЗапроса.Вставить("owner_inn",    РеквизитыОрганизации.ИНН);
			ТелоЗапроса.Вставить("producer_inn", РеквизитыКонтрагента.ИНН);
			ТелоЗапроса.Вставить("producer",     Ложь);
			ТелоЗапроса.Вставить("owner",        Истина);
		КонецЕсли;

		ТелоЗапроса.Вставить("products_list",    Новый Массив);
		ТелоЗапроса.Вставить("production_date",  ДатаПроизводства);
		ТелоЗапроса.Вставить("production_order", "CONTRACT_PRODUCTION");

		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "uit", "uitu");
		Настройки.УказыватьИнформациюОТоваре               = Истина;
		Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
		Настройки.ДатаПроизводства                         = ДатаПроизводства;
		Настройки.ДоступноУказаниеНомерСкважины            = Истина;
		Настройки.УказыватьЛицензии                        = ЭтоУпакованнаяВода;
		Настройки.ЗаполнятьВложенныеКоды                   = КодыАгрегированы;
		Настройки.ОтчетПроизводственнойЛинии               = Шапка.ОтчетПроизводственнойЛинии;
		Настройки.ЭтоМех                                   = ЭтоМех;
		
		Если Шапка.ОтчетПроизводственнойЛинии Тогда
			Если ЭтоПродукцияПодконтрольнаяВЕТИС
				И Не ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
				СообщитьОНеЗаполненномИдентификатореВЕТИС(СообщениеJSON);
			КонецЕсли;
		КонецЕсли;

	// Для операции возможна загрузка данных отчета производственной линии
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц Тогда

		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("participant_inn", РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("products_list",   Новый Массив);

		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "uit", "uitu");
		Настройки.ПроверятьИУказыватьКодТНВЭД  = Ложь;
		Настройки.УказыватьСертификацию        = Ложь;
		Настройки.УказыватьДатуПриемки         = Истина;
		Настройки.ДатаПриемки                  = ДатаДокумента;
		Настройки.ЗаполнятьВложенныеКоды       = КодыАгрегированы;
		Настройки.ОтчетПроизводственнойЛинии   = Шапка.ОтчетПроизводственнойЛинии;
		Настройки.ЭтоМех                       = ЭтоМех;
		
	// Загрузка данных отчета производственной линии недоступна
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда

		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "ki", "kitu");
		Настройки.ЭтоМаркировкаОстатков        = Истина;
		Настройки.ПроверятьИУказыватьКодТНВЭД  = Ложь;
		Настройки.УказыватьСертификацию        = Ложь;
		Настройки.ЗаполнятьВложенныеКоды       = КодыАгрегированы;
		Настройки.КоличествоКодовВСообщении    = ИнтеграцияИСМПСлужебный.КоличествоКодовВСообщенииВводВОборот(Истина);

		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("products_list",         Новый Массив);

	// Загрузка данных отчета производственной линии недоступна
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда

		СведенияОКонтрагенте = Новый Структура();
		СведенияОКонтрагенте.Вставить("НалоговыйНомерВСтранеРегистрации", "");
		СведенияОКонтрагенте.Вставить("Наименование",                     "");

		ИнтеграцияИСПереопределяемый.ЗаполнитьСведенияОбОрганизации(
			Шапка.Контрагент,
			СведенияОКонтрагенте);

		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
		ПроверитьЗаполнениеНалоговогоНомера(СообщениеJSON, СведенияОКонтрагенте, Шапка);

		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn",   РеквизитыОрганизации.ИНН);
		Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
			Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках
			Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво Тогда
			ТелоЗапроса.Вставить("trade_participant_kpp", РеквизитыОрганизации.КПП);
		КонецЕсли;
		ТелоЗапроса.Вставить("import_date",             ИнтеграцияИС.ДатаUTC(Шапка.ДатаИмпорта));
		ТелоЗапроса.Вставить("exporter_name",           СведенияОКонтрагенте.Наименование);
		ТелоЗапроса.Вставить("primary_document_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
		ТелоЗапроса.Вставить("primary_document_number", Шапка.НомерПервичногоДокумента);
		ТелоЗапроса.Вставить("country_oksm",            Шапка.СтранаЭкспортерКод);
		ТелоЗапроса.Вставить("sender_tax_number",       СведенияОКонтрагенте.НалоговыйНомерВСтранеРегистрации);
		ТелоЗапроса.Вставить("products_list",           Новый Массив);

		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "ki", "kitu");
		Настройки.УказыватьСуммы                           = Истина;
		Настройки.УказыватьИдентификаторПроисхожденияВЕТИС = Истина;
		Настройки.ЗаполнятьВложенныеКоды                   = КодыАгрегированы;
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех Тогда
			
		ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
		
		ТелоЗапроса = Новый Структура;
		ТелоЗапроса.Вставить("trade_participant_inn", РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("declaration_date",      Формат(Шапка.ДатаДекларации,"ДФ=yyyy-MM-dd"));
		ТелоЗапроса.Вставить("declaration_number",    Шапка.РегистрационныйНомерДекларации);
		ТелоЗапроса.Вставить("products_list",         Новый Массив);
		
		Настройки = НастройкиДобавляемыхПолейСведенийОТоварах("products_list", "cis");
		Настройки.УказыватьСертификацию         = Ложь;
		Настройки.УказыватьИнформациюОТоваре    = Истина;
		Настройки.УказыватьТипУпаковки          = Истина;
		Настройки.ЭтоМех                        = Истина;
		Настройки.УказыватьВидМехаПоКодуТНВЭД   = Истина;
		Настройки.ЗаполнятьВложенныеКоды        = Ложь;
		Настройки.ИмяРеквизитаИнформацияОТоваре = "goods_description";
		Настройки.КодТНВЭДПрочиеПредметыОдеждыИСМП = ИнтеграцияИСМПКлиентСервер.КодТНВЭДПрочиеПредметыОдеждыИСМП();
		
	Иначе
		СообщитьОНеизвестнойОперации(СообщениеJSON, Шапка);
	КонецЕсли;
	
	Если ЭтоТитановаяПродукция Тогда
		Настройки.УказыватьСертификацию = Ложь;
	КонецЕсли;
	
#КонецОбласти

	Если Не ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		
		Настройки.Фильтр = Фильтр;
		ЗаполнитьСведенияОТоварахПоШтрихкодамУпаковок(
			СообщениеJSON,
			ГруппыКодов,
			ДополнительныеПараметры.ИсточникДанных,
			СведенияОТоварах,
			Шапка.ВидПродукции,
			Настройки);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(СообщениеJSON.ТекстОшибки) Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;

	АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ВводВОборотРасчетСтатуса;

	АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДополнительныеПараметры.ДокументСсылка, АбстрактнаяОперация, ДополнительныеПараметры.НомерВерсии);

	ПараметрыЗапроса = ПараметрыЗапросаВводВОборот(Шапка, ДополнительныеПараметры);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.Идентификатор       = СокрЛП(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.ТребуетсяПодписание = Ложь;

	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);

	Для Каждого ДанныеСообщения Из ГруппыКодов Цикл

		ПараметрыЗапроса = ПараметрыЗапросаВводВОборот(Шапка, ДополнительныеПараметры);
		ПараметрыЗапроса.ДанныеСообщения = ДанныеСообщения.ГруппаНормализованныхКодов;

		ТелоЗапросаТекущейГруппы = ОбщегоНазначения.СкопироватьРекурсивно(ТелоЗапроса);
		ТелоЗапросаТекущейГруппы[Настройки.ИмяРеквизитаТовары] = ДанныеСообщения.ГруппаКодов;

		ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапросаТекущейГруппы, Истина);
		СообщениеJSON      = ЗаполнитьСообщениеJSON(Шапка, ДополнительныеПараметры.ДокументСсылка, Шапка.Операция, ДополнительныеПараметры.НомерВерсии);

		СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
		СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
		СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
		СообщениеJSON.ТребуетсяПодписание = Истина;

		СообщенияJSON.Добавить(СообщениеJSON);

	КонецЦикла;

	Возврат СообщенияJSON;

КонецФункции

Функция СообщенияJSONОтчетОНанесении(Шапка, ДополнительныеПараметры)
	
	СообщенияJSON = Новый Массив;
	
	ОперацияНанесения = ?(ЗначениеЗаполнено(Шапка.ОперацияНанесения), Шапка.ОперацияНанесения, Шапка.Операция);
	
	Если Не ИнтерфейсСУЗ.ПоддерживаетсяФорматОбменаПоВидуПродукции(ДополнительныеПараметры.ФорматОбмена, Шапка.ВидПродукции) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ    = ДополнительныеПараметры.ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			ОперацияНанесения, ДополнительныеПараметры.ДокументСсылка);
		СообщениеJSON.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По виду продукции %1 не поддерживается формат обмена с СУЗ ниже V3.
			|Перейдите в список СУЗ и установите формат обмена V3.'"),
			Шапка.ВидПродукции);
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ЭтоМолочнаяПродукция = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции);
	ЭтоПиво              = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Пиво
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках;
	ЭтоБАПиво            = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво;
	ЭтоСоковаяПродукция  = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.СоковаяПродукция
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки;
	ЭтоКреслаКоляски     = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
		Или Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия;
	ЭтоБАД               = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы;
	ЭтоМорепродуктыВЕТИС = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС;
	ЭтоВетеринарныеПрепараты = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты;
	ЭтоТитановаяПродукция    = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция;
	ЭтоПродукцияМОТП         = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	
	РеквизитыОрганизации = ИнтеграцияИС.ИННКППGLNОрганизации(Шапка.Организация, Шапка.ПроизводственныйОбъект);
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Шапка.ВидПродукции);
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииРасчетСтатуса;
	
	АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДополнительныеПараметры.ДокументСсылка, АбстрактнаяОперация, ДополнительныеПараметры.НомерВерсии);

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ТребуетсяАгрегация", ДополнительныеПараметры.ТребуетсяАгрегация);
	ПараметрыЗапроса.Вставить("ОперацияДокумента",  ОперацияНанесения);
	ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",       ДополнительныеПараметры.ТребуетсяВводВОборот);
	ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок", ДополнительныеПараметры.СоздаватьШтрихкодыУпаковок);
	ПараметрыЗапроса.Вставить("ПовторнаяОтправка",          ДополнительныеПараметры.Повторно);
	ПараметрыЗапроса.Вставить("ТребуетсяФормированиеАТК",   ДополнительныеПараметры.ТребуетсяФормированиеАТК);
	ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ДополнительныеПараметры.ИспользуетсяРегистрДляХраненияДанныхОтчета);
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = ДополнительныеПараметры.СтанцияУправленияЗаказами;
	АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
	АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;

	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);

	КонтрольнаяГруппаКодов = Новый Соответствие;

	Операция = Перечисления.ВидыОперацийИСМП.ОтчетОбИспользованииПроверкаСтатусаКодовМаркировки;

	СообщениеJSONКонтрольСтатусов = ЗаполнитьСообщениеJSON(Шапка, ДополнительныеПараметры.ДокументСсылка, Операция, ДополнительныеПараметры.НомерВерсии);
	СообщениеJSONКонтрольСтатусов.Идентификатор      = СокрЛП(Новый УникальныйИдентификатор());
	СообщениеJSONКонтрольСтатусов.ЗагружатьДо        = АбстрактноеСообщениеJSON.Идентификатор;
	СообщениеJSONКонтрольСтатусов.СообщениеОснование = АбстрактноеСообщениеJSON.Идентификатор;
	СообщенияJSON.Добавить(СообщениеJSONКонтрольСтатусов);

	ДопустимыеНачальныеСтатусыОтчетОНанесении = ШтрихкодированиеИСМП.ДопустимыеНачальныеСтатусыОтчетОНанесении(Шапка.ВидПродукции);

	Для Каждого ДанныеСообщения Из ДополнительныеПараметры.ГруппыКодов Цикл

		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДополнительныеПараметры.ДокументСсылка, ОперацияНанесения, ДополнительныеПараметры.НомерВерсии);

		ТелоЗапроса = Новый Структура;

		// Обязательные реквизиты
		ТелоЗапроса.Вставить("usageType", ИнтерфейсСУЗСлужебный.ВидОтчетаОбИспользованииКодовМаркировки(ОперацияНанесения));
		ТелоЗапроса.Вставить("sntins",    ДанныеСообщения.ГруппаКодов);
		// Необязательные реквизиты
		Если ЭтоПродукцияМОТП Тогда
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойЛинии) Тогда
				ТелоЗапроса.Вставить("productionLineId", Шапка.ИдентификаторПроизводственнойЛинии);
			КонецЕсли;
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId", Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
		КонецЕсли;

		Если ДанныеСообщения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			ТелоЗапроса.Вставить("cisType", "UNIT");
		ИначеЕсли ДанныеСообщения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
			ТелоЗапроса.Вставить("cisType", "GROUP");
		ИначеЕсли ДанныеСообщения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор Тогда
			ТелоЗапроса.Вставить("cisType", "SET");
		КонецЕсли;

		Если Не ЭтоМорепродуктыВЕТИС И Не ЭтоСоковаяПродукция
			Или ДанныеСообщения.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда 
			
			Если ДанныеСообщения.Свойство("ПараметрГоденДо")
				И (ЭтоМолочнаяПродукция Или ЭтоПродукцияПодконтрольнаяВЕТИС) Тогда
				ТелоЗапроса.Вставить(ДанныеСообщения.ПараметрГоденДо, ДанныеСообщения.ГоденДо);
			КонецЕсли;
			
			Если ИнтеграцияИСМПКлиентСервер.ДляВидаПродукцииИспользуетсяДатаПроизводства(Шапка.ВидПродукции)
				И ЗначениеЗаполнено(Шапка.ДатаПроизводства) Тогда
				ТелоЗапроса.Вставить("productionDate", Формат(Шапка.ДатаПроизводства,"ДФ=dd.MM.yyyy"));
			КонецЕсли;
			
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Шапка.ВидПродукции, Ложь)
				И ЗначениеЗаполнено(ДанныеСообщения.ГоденДо) Тогда
				ТелоЗапроса.Вставить("expirationDate", ДанныеСообщения.ГоденДо);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЭтоПиво Или ЭтоСоковаяПродукция Тогда
			ТелоЗапроса.Вставить("participantId", РеквизитыОрганизации.ИНН);
			Если ЗначениеЗаполнено(РеквизитыОрганизации.КПП) Тогда
				ТелоЗапроса.Вставить("kpp", РеквизитыОрганизации.КПП);
			КонецЕсли;
		ИначеЕсли (ЭтоПродукцияМОТП Или ЭтоБАПиво)
			И ЗначениеЗаполнено(РеквизитыОрганизации.КПП) Тогда
			ТелоЗапроса.Вставить("kpp", РеквизитыОрганизации.КПП);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторАдреса) Тогда
			ТелоЗапроса.Вставить("fiasId", ДополнительныеПараметры.ИдентификаторАдреса);
		КонецЕсли;
		
		Если ЭтоКреслаКоляски И ЗначениеЗаполнено(Шапка.НомерПартии) Тогда
				ТелоЗапроса.Вставить("batchNumber",  Шапка.НомерПартии);
		КонецЕсли;
		Если ЭтоКреслаКоляски Или ЭтоВетеринарныеПрепараты Тогда
			Если ЗначениеЗаполнено(Шапка.НомерСерии) Тогда
				ТелоЗапроса.Вставить("seriesNumber", Шапка.НомерСерии);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоБАД
			И ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС) Тогда
			ТелоЗапроса.Вставить("vetisGuid", Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС);
		КонецЕсли;
		
		Если ЭтоТитановаяПродукция Тогда
			ДанныеGTIN = ДополнительныеПараметры.СоответствиеGTIN[ДанныеСообщения.GTIN];
			Если ДанныеGTIN <> Неопределено Тогда
				ТелоЗапроса.Вставить("documentNumber", ДанныеGTIN.ДанныеСертификации.Номер);
				ТелоЗапроса.Вставить("documentDate",   ДанныеGTIN.ДанныеСертификации.Дата);
				ТелоЗапроса.Вставить("documentSource", ДанныеGTIN.ДанныеСертификации.Выдан);
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоПиво Тогда
			ДанныеGTIN = ДополнительныеПараметры.СоответствиеGTIN[ДанныеСообщения.GTIN];
			Если ДанныеGTIN <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДанныеGTIN.РеквизитовНанесенияНаПиво.НомерПервичногоДокумента)
					Или ЗначениеЗаполнено(ДанныеGTIN.РеквизитовНанесенияНаПиво.ДатаПервичногоДокумента) Тогда
					ТелоЗапроса.Вставить("documentNumber", ДанныеGTIN.РеквизитовНанесенияНаПиво.НомерПервичногоДокумента);
					ТелоЗапроса.Вставить("documentDate",   ДанныеGTIN.РеквизитовНанесенияНаПиво.ДатаПервичногоДокумента);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеGTIN.РеквизитовНанесенияНаПиво.СодержаниеЭтиловогоСпирта) Тогда
					ТелоЗапроса.Вставить("alcoholVolume",  ДанныеGTIN.РеквизитовНанесенияНаПиво.СодержаниеЭтиловогоСпирта);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ИнтерфейсСУЗ.ТелоЗапросаПоФорматуОбмена(ТелоЗапроса, ДополнительныеПараметры.ФорматОбмена, ОперацияНанесения, Шапка.ВидПродукции);

		ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);

		СообщениеJSON.ТекстСообщенияJSON = ТекстСообщенияJSON;
		СообщениеJSON.ЗагружатьДо        = АбстрактноеСообщениеJSON.Идентификатор;
		СообщениеJSON.ЗагружатьПосле     = СообщениеJSONКонтрольСтатусов.Идентификатор;
		СообщениеJSON.Идентификатор      = СокрЛП(Новый УникальныйИдентификатор());

		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = ДополнительныеПараметры.ФорматОбмена;
		СообщениеJSON.СтанцияУправленияЗаказами = ДополнительныеПараметры.СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		СообщениеJSON.ТребуетсяПодписание       = ДополнительныеПараметры.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3;

		КоличествоКодовДляКонтроляСтатусов = КоличествоКодовДляКонтроляСтатусов(ДанныеСообщения.ГруппаНормализованныхКодов.Количество());
		КодыМаркировки = Новый Массив;
		Для Счетчик = 0 По КоличествоКодовДляКонтроляСтатусов-1 Цикл
			КодыМаркировки.Добавить(ДанныеСообщения.ГруппаНормализованныхКодов[Счетчик]);
		КонецЦикла;
		КонтрольнаяГруппаКодов.Вставить(СообщениеJSON.Идентификатор, КодыМаркировки);

		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить(
			"ДопустимыеНачальныеСтатусыКодовОтчетОНанесении", ДопустимыеНачальныеСтатусыОтчетОНанесении);
		ПараметрыЗапроса.Вставить(
			"ОжидаемыеСтатусыКодовПослеПередачиОтчетаОНанесении",
			ШтрихкодированиеИСМП.ОжидаемыеСтатусыПослеПередачиОтчетаОНанесении(Шапка.ВидПродукции));
		ПараметрыЗапроса.Вставить("ДанныеСообщения",   ДанныеСообщения.ГруппаНормализованныхКодов);
		ПараметрыЗапроса.Вставить("ПовторнаяОтправка", ДополнительныеПараметры.Повторно);
		ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений", Истина);

		СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;

		СообщенияJSON.Добавить(СообщениеJSON);

	КонецЦикла;

	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("КодыМаркировкиДляКонтроляСтатусов",              КонтрольнаяГруппаКодов);
	ПараметрыЗапроса.Вставить("ДопустимыеНачальныеСтатусыКодовОтчетОНанесении", ДопустимыеНачальныеСтатусыОтчетОНанесении);
	ПараметрыЗапроса.Вставить("ОперацияДокумента",                              ОперацияНанесения);
	ПараметрыЗапроса.Вставить("ОтчетПроизводственнойЛинии",                     Шапка.ОтчетПроизводственнойЛинии);
	СообщениеJSONКонтрольСтатусов.ПараметрыЗапроса = ПараметрыЗапроса;

	Возврат СообщенияJSON;

КонецФункции

Функция СообщенияJSONАгрегацияЧерезСУЗ(Шапка, ДополнительныеПараметры)
	
	СообщенияJSON = Новый Массив;
	
	Если Не ИнтерфейсСУЗ.ПоддерживаетсяФорматОбменаПоВидуПродукции(ДополнительныеПараметры.ФорматОбмена, Шапка.ВидПродукции) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ    = Шапка.Документ;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, Шапка.Документ);
		СообщениеJSON.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'По виду продукции %1 не поддерживается формат обмена с СУЗ ниже V3.
			|Перейдите в список СУЗ и установите формат обмена V3.'"),
			Шапка.ВидПродукции);
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Шапка.Операция, ДополнительныеПараметры.НомерВерсии);
	
	Фильтр         = ДополнительныеПараметры.Фильтр;
	ДеревоУпаковок = ДополнительныеПараметры.ДеревоУпаковок;
	
	Повторно             = ДополнительныеПараметры.Повторно;
	ТребуетсяВводВОборот = ДополнительныеПараметры.ТребуетсяВводВОборот;
	НомерВерсии          = ДополнительныеПараметры.НомерВерсии;
	Операция             = ДополнительныеПараметры.Операция;
	СтанцияУправленияЗаказами = ДополнительныеПараметры.СтанцияУправленияЗаказами;
	РеквизитыОрганизации      = ДополнительныеПараметры.РеквизитыОрганизации;
	
	СоздаватьШтрихкодыУпаковок = ДополнительныеПараметры.СоздаватьШтрихкодыУпаковок;
	ИспользуетсяРегистрДляХраненияДанныхОтчета = ДополнительныеПараметры.ИспользуетсяРегистрДляХраненияДанныхОтчета;
	
	ПроверитьЗаполнениеИНН(СообщениеJSON, РеквизитыОрганизации, Шапка);
	
	ПараметрыНормализацииКМ = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииКМ.НачинаетсяСоСкобки       = Ложь;
	ПараметрыНормализацииКМ.ВключатьМРЦ              = Ложь;
	ПараметрыНормализацииКМ.ВключатьСрокГодности     = Истина;
	ПараметрыНормализацииКМ.ИмяСвойстваКодМаркировки = "Штрихкод";
	Если Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция Тогда
		ПараметрыНормализацииКМ.ДобавитьМРЦПоУмолчанию = Истина;
	КонецЕсли;
	
	ПакетКодов = Новый Массив;
	
	ЗаполнениеДанныхОбАгрегацииВСУЗ(
		ДеревоУпаковок,
		ПакетКодов,
		Шапка.ВидПродукции,
		ПараметрыНормализацииКМ,
		ИнтеграцияИСМПСлужебный.КоличествоКодовВСообщенииАгрегация(),
		Фильтр);
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ОперацияДокумента",                          Шапка.Операция);
	ПараметрыЗапроса.Вставить("СоздаватьШтрихкодыУпаковок",                 СоздаватьШтрихкодыУпаковок);
	ПараметрыЗапроса.Вставить("АгрегацияВыполненаЧерезСУЗ",                 Истина);
	ПараметрыЗапроса.Вставить("ПовторнаяОтправка",                          Повторно);
	ПараметрыЗапроса.Вставить("ТребуетсяВводВОборот",                       ТребуетсяВводВОборот);
	ПараметрыЗапроса.Вставить("ИспользуетсяРегистрДляХраненияДанныхОтчета", ИспользуетсяРегистрДляХраненияДанныхОтчета);
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийИСМП.АгрегацияРасчетСтатуса;
	
	АбстрактноеСообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки       = ИнтеграцияИСМПСлужебный.СтроковоеПредставлениеПустогоУникальногоИдентификатора();
	АбстрактноеСообщениеJSON.Идентификатор             = СокрЛП(Новый УникальныйИдентификатор());
	АбстрактноеСообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
	АбстрактноеСообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
	АбстрактноеСообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	ЭтоПродукцияМОТП = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Шапка.ВидПродукции);
	
	Для Каждого ДанныеОбАгрегации Из ПакетКодов Цикл
		
		ТелоЗапроса = Новый Структура;
		
		// Обязательные реквизиты
		ТелоЗапроса.Вставить("participantId",    РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("aggregationUnits", ДанныеОбАгрегации.ГруппаКодов);
		
		Если ЭтоПродукцияМОТП Тогда
			// Необязательные реквизиты
			ТелоЗапроса.Вставить("productionLineId",  Шапка.ИдентификаторПроизводственнойЛинии);
			Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственногоЗаказа) Тогда
				ТелоЗапроса.Вставить("productionOrderId",  Шапка.ИдентификаторПроизводственногоЗаказа);
			КонецЕсли;
		КонецЕсли;
		
		ИнтерфейсСУЗ.ТелоЗапросаПоФорматуОбмена(ТелоЗапроса, ДополнительныеПараметры.ФорматОбмена, Операция, Шапка.ВидПродукции);
		
		ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
		
		ПараметрыЗапроса = Новый Структура;
		ПараметрыЗапроса.Вставить("КонтролироватьСтатусДокументаАгрегацияИСМП", Истина);
		ПараметрыЗапроса.Вставить("ДанныеСообщения",                            ДанныеОбАгрегации.КодыУпаковокКАгрегации);
		ПараметрыЗапроса.Вставить("ИспользуетсяПакетнаяПередачаСообщений",      Истина);
		ПараметрыЗапроса.Вставить("АгрегацияВыполненаЧерезСУЗ",                 Истина);
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, Шапка.Документ, Операция, НомерВерсии);
		СообщениеJSON.ТекстСообщенияJSON        = ТекстСообщенияJSON;
		СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.СтанцияУправленияЗаказами;
		СообщениеJSON.ФорматОбмена              = ДополнительныеПараметры.ФорматОбмена;
		СообщениеJSON.СтанцияУправленияЗаказами = СтанцияУправленияЗаказами;
		СообщениеJSON.ПроизводственныйОбъект    = Шапка.ПроизводственныйОбъект;
		СообщениеJSON.ЗагружатьДо               = АбстрактноеСообщениеJSON.Идентификатор;
		СообщениеJSON.ПараметрыЗапроса          = ПараметрыЗапроса;
		СообщениеJSON.ТребуетсяПодписание       = ДополнительныеПараметры.ФорматОбмена = Перечисления.ВерсииФорматаОбменаСУЗ.V3;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция МаксимальныйУровеньИерархииПриАгрегацииЧерезСУЗ()
	Возврат 3;
КонецФункции

Функция ЗаводскойСерийныйНомерЗаполнен(ПолныеКодыМаркировки)
	
	Для Каждого СтрокаТЧ Из ПолныеКодыМаркировки Цикл
		Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(СтрокаТЧ.ПолныйКодМаркировки);
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЗаводскойСерийныйНомерИзШтрихкода(Штрихкод) = "" Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ИдентификаторАдреса(ВидПродукции, РезультатОпределенияСУЗ, СообщениеJSON)
	
	Если ИнтеграцияИСМПКлиентСервер.ДляВидаПродукцииИспользуетсяКодФИАС(ВидПродукции) Тогда
		ИдентификаторАдреса = РезультатОпределенияСУЗ.НастройкаОбмена.КодФИАС;
		Если Не ЗначениеЗаполнено(ИдентификаторАдреса)
			И Не ИнтеграцияИСМПКлиентСервер.ДляВидаПродукцииИспользуетсяКодФИАСБезОбязательногоЗаполнения(ВидПродукции) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнен код ФИАС для СУЗ %1'"),
					РезультатОпределенияСУЗ.СтанцияУправленияЗаказами));
		КонецЕсли;
	Иначе
		ИдентификаторАдреса = Неопределено;
	КонецЕсли;

	Возврат ИдентификаторАдреса;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
