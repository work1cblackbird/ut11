#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ИнтеграцияИСМП.ЗапрещеноИспользованиеОбъектаВИСМП(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеМаркировкаТоваровИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Серия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "Серия", "Характеристика");
		
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	// Режим отладки
	Элементы.СтраницаШтрихкодыУпаковок.Видимость = ОбщегоНазначения.РежимОтладки() И Пользователи.ЭтоПолноправныйПользователь();
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования, "Товары,ПредставлениеКИЗ");
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ИспользуетсяТСД = Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
			НастроитьЭлементыФормы(ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан()
		Или РедактированиеФормыНедоступно
		Или Не ПравоИзменения
		Или Объект.ОтчетПроизводственнойЛинии
		Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(
		ЭтотОбъект, Источник, Событие, Данные);
		
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеОбщегоНазначенияИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
	// Запись документа при смене операции / организации / вида продукции (с очисткой штрихкодов)
	Если Не Отказ Тогда
		
		Если СтатусПроверкиИПодбора <> ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(
			ТекущийОбъект.Ссылка, ТекущийОбъект.ВидПродукции) Тогда
			РегистрыСведений.СтатусыПроверкиИПодбораДокументовИС.ОчиститьРезультатыПроверкиДокумента(ТекущийОбъект.Ссылка);
		КонецЕсли;
		
		ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ЗаполнитьПредставлениеСертификацииЛицензииНаНедра();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	ЗаполнитьПредставлениеПервичногоДокумента();
	ЗаполнитьСлужебныеРеквизитыВЕТИСВКоллекции();
	ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии();
	
	Если Не РедактированиеФормыНедоступно Тогда
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	КонецЕсли;
	
	ПараметрыОбновленияСтатуса = Неопределено;

	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);

	РазблокироватьДанныеФормыДляРедактирования();
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();

	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ")
		И ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
		
	Иначе
		
		СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(
			ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
		
		Если Объект.ОтчетПроизводственнойЛинии И ИнтеграцияИСКлиент.ЭтоФормаУказанияСерий(ИсточникВыбора, ВыбранноеЗначение) Тогда

			Серия = ВыбранноеЗначение.Значение;
			Если ЗначениеЗаполнено(Объект.ДокументОснование) И ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект) Тогда
				СерияПриИзмененииСервер(Истина);
			КонецЕсли;

		ИначеЕсли ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
			
			Если Объект.ОтчетПроизводственнойЛинии Тогда
				
				Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
				КоличествоЗаписей = ВыбранноеЗначение.Количество();
				Если КоличествоЗаписей > ИнтеграцияИСМПСлужебныйКлиентСервер.МаксимальноеКоличествоЗаписейВТабличнойЧасти() Тогда
					ДанныеОтчетаЗагруженыВРегистр = Истина;
					КлючЗаписи = 1;
				КонецЕсли;

				Для Каждого ЭлементДанных Из ВыбранноеЗначение Цикл

					СтрокаТЧ = Объект.ДанныеОтчетаПроизводственнойЛинии.Добавить();
					СтрокаТЧ.ЗначениеШтрихкода         = ЭлементДанных.Штрихкод;
					СтрокаТЧ.ЗначениеШтрихкодаУпаковки = ЭлементДанных.ШтрихкодУпаковки;
					Если ЭлементДанных.Свойство("ФорматBase64") Тогда
						СтрокаТЧ.ФорматBase64 = ЭлементДанных.ФорматBase64;
					КонецЕсли;
					Если ДанныеОтчетаЗагруженыВРегистр Тогда
						СтрокаТЧ.КлючЗаписи = КлючЗаписи;
						КлючЗаписи = КлючЗаписи + 1;
					КонецЕсли;

				КонецЦикла;
				
				ОпределитьНоменклатуруОтчетаПроизводственнойЛинии(ВыбранноеЗначение);
				НастроитьВидимостьНомерСтрокиОтчетПроизводственнойЛинии(ЭтотОбъект);

			Иначе
				//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
				Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		Объект.Номенклатура   = Номенклатура;
		Объект.Характеристика = Характеристика;
		Объект.Серия          = Серия;
		Объект.КодТНВЭД       = КодТНВЭД;
		Объект.ИдентификаторПроисхожденияВЕТИССтрокой = ИдентификаторПроисхожденияВЕТИССтрокой;
		
		ДоступноУказаниеПроизводственнойПлощадки =
			Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы")
			И (ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено
				Или ЗначениеЗаполнено(Объект.ОперацияНанесения));
		Если Не ДоступноУказаниеПроизводственнойПлощадки Тогда
			ОчиститьДанныеПроизводственнойПлощадкиВЕТИС(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТребуетсяУказатьДанныеДекларации(ЭтотОбъект)
		И СтрДлина(Объект.КодТаможенногоОргана) <> 8 Тогда
		ТекстСообщения = Нстр("ru = 'Код таможенного органа должен состоять из 8 цифр'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.КодТаможенногоОргана", Отказ);
	КонецЕсли;
	
	Если ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(ЭтотОбъект) Тогда
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			Если Не ЗначениеЗаполнено(ПаспортСоответствия) Тогда
				ОбщегоНазначения.СообщитьПользователю(
					Нстр("ru = 'Поле ""Паспорт соответствия"" не заполнено'"),,,
					"ПаспортСоответствия", Отказ);
			КонецЕсли;
		Иначе
			Для Каждого Строка Из Объект.Товары Цикл
				Если Не ЗначениеЗаполнено(Строка.ПаспортСоответствия) Тогда
					ОбщегоНазначения.СообщитьПользователю(СтрШаблон(
							НСтр("ru = 'В строке %1 табличной части Товары не заполнено поле ""Паспорт соответствия""'"),
							Строка.НомерСтроки),,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Строка.НомерСтроки, "ПаспортСоответствия"),,
						Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("КодТНВЭД");
	МассивНепроверяемыхРеквизитов.Добавить("Сертификация");
	МассивНепроверяемыхРеквизитов.Добавить("ПаспортСоответствия");
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		
		Если Не Объект.СоздаватьШтрихкодыУпаковок И Не ЗначениеЗаполнено(Номенклатура) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		КонецЕсли;
		Если Не ХарактеристикиИспользуются Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		КонецЕсли;
		Если Не ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий) Тогда
			МассивНепроверяемыхРеквизитов.Добавить("Серия");
		КонецЕсли;
		
	Иначе
		
		МассивНепроверяемыхРеквизитов.Добавить("Номенклатура");
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДокументОснование = Неопределено;
	
	ОчиститьСписокВыбораЭлементовШапки();
	ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ОчисткаШтрихкодыУпаковок  = Ложь;
	ОчиститьДокументОснование = Ложь;
	ОчиститьТовары            = Ложь;

	ПроизводствоВнеЕАЭС = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС");
	МаркировкаОстатков = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков");
	Агрегация = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.Агрегация");
	ИмпортСФТС= ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС");
	ИмпортСФТСМех= ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех");
	ПодтверждениеПоступленияКИЗ = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ");
	НанесениеКодов = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки();
	
	ЭтоСменаПроизводствоВнеЕАЭС = (ПредыдущаяОперация = ПроизводствоВнеЕАЭС) <> (Объект.Операция = ПроизводствоВнеЕАЭС);
	ЭтоСменаМаркировкиОстатков  = (ПредыдущаяОперация = МаркировкаОстатков)  <> (Объект.Операция = МаркировкаОстатков);
	ЭтоСменаАгрегации           = (ПредыдущаяОперация = Агрегация)           <> (Объект.Операция = Агрегация);
	ЭтоСменаИмпортСФТС          = (ПредыдущаяОперация = ИмпортСФТС)          <> (Объект.Операция = ИмпортСФТС);
	ЭтоСменаИмпортСФТСМех       = (ПредыдущаяОперация = ИмпортСФТСМех)       <> (Объект.Операция = ИмпортСФТСМех);
	
	БылоНанесениеКодов = НанесениеКодов.Найти(ПредыдущаяОперация)<>Неопределено
		Или ЗначениеЗаполнено(Объект.ОперацияНанесения);
	СталоНанесениеКодов = НанесениеКодов.Найти(Объект.Операция) <> Неопределено
		Или ЗначениеЗаполнено(Объект.ОперацияНанесения);
	ЭтоСменаНанесениеКодов = БылоНанесениеКодов <> СталоНанесениеКодов;
	
	ЭтоСменаПодтверждениеПоступленияКИЗ = (ПредыдущаяОперация = ПодтверждениеПоступленияКИЗ) <> (Объект.Операция = ПодтверждениеПоступленияКИЗ);
	
	Если ЭтоСменаПроизводствоВнеЕАЭС
		Или ЭтоСменаМаркировкиОстатков
		Или ЭтоСменаАгрегации
		Или ЭтоСменаНанесениеКодов
		Или ЭтоСменаИмпортСФТС
		Или ЭтоСменаИмпортСФТСМех
		Или ЭтоСменаПодтверждениеПоступленияКИЗ Тогда
		ОчисткаШтрихкодыУпаковок = Истина;
	КонецЕсли;

	ОчиститьВариантВыполенияАгрегации = Ложь;
	Если ЭтоСменаАгрегации
		Или ЭтоСменаНанесениеКодов
		Или ЭтоСменаИмпортСФТС Тогда
		ОчиститьВариантВыполенияАгрегации = Истина;
	КонецЕсли;

	Если ЭтоСменаПодтверждениеПоступленияКИЗ Тогда
		ОчиститьТовары = Истина;
	КонецЕсли;

	ОчиститьТНВЭД = Ложь;
	Если Объект.Операция = ПроизводствоВнеЕАЭС Или Объект.Операция = МаркировкаОстатков Тогда
		ОчиститьТНВЭД = Истина;
	КонецЕсли;
	
	Если Объект.Операция <> МаркировкаОстатков Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.GTIN = "";
		КонецЦикла;
	КонецЕсли;
	
	ПроверитьТипИденификатораВетис = Ложь;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции) Тогда
		
		ПроверитьТипИденификатораВетис = Истина;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
			ПредыдущиеОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(ПредыдущаяОперация);
			
			Если ОперацииМаркировки.ЭтоИмпорт <> ПредыдущиеОперацииМаркировки.ЭтоИмпорт 
				Или ПредыдущиеОперацииМаркировки.ЭтоВводВОборот <> ОперацииМаркировки.ЭтоВводВОборот Тогда
				ОчиститьДокументОснование = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьТНВЭД",                  ОчиститьТНВЭД);
	Действия.Вставить("ОчиститьШтрихкодыУпаковок",      ОчисткаШтрихкодыУпаковок);
	Действия.Вставить("ЭтоСменаНанесениеКодов",         ЭтоСменаНанесениеКодов);
	Действия.Вставить("УстановитьСтатусПоУмолчанию",    ЭтоСменаИмпортСФТС);
	Действия.Вставить("ОчиститьВидМеха",                ЭтоСменаИмпортСФТСМех);
	Действия.Вставить("ОчиститьШтрихкодыАТК",           Ложь);
	Действия.Вставить("ОчиститьДокументОснование",      ОчиститьДокументОснование);
	Действия.Вставить("ПроверитьТипИденификатораВетис", ПроверитьТипИденификатораВетис);
	Действия.Вставить("СнятьФлагОтчетПроизводственнойЛинии",
		НанесениеКодов.Найти(Объект.Операция) <> Неопределено
		И Объект.ОтчетПроизводственнойЛинии
		И Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции));
	Действия.Вставить("ОчиститьВариантВыполенияАгрегации", ОчиститьВариантВыполенияАгрегации);
	Действия.Вставить("ИзменениеДальнейшегоДействия",
		ЭтоСменаНанесениеКодов
		Или ЭтоСменаАгрегации
		Или ЭтоСменаИмпортСФТС
		Или ЭтоСменаПодтверждениеПоступленияКИЗ);
	Действия.Вставить("ОчиститьТовары", ОчиститьТовары);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОперацииЗавершение", ЭтотОбъект, Действия);
	
	Если ОчисткаШтрихкодыУпаковок И Объект.ШтрихкодыУпаковок.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыУпаковок = Истина;
		Если ЭтоСменаИмпортСФТС И Объект.ШтрихкодыАТК.Количество() Тогда
			Действия.ОчиститьШтрихкодыАТК = Истина;
		КонецЕсли;
		ТекстВопроса = НСтр(
			"ru = 'При изменении вида операции табличная часть Штрихкоды упаковок будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	ИначеЕсли Действия.СнятьФлагОтчетПроизводственнойЛинии Тогда
		
		ТекстВопроса = НСтр(
			"ru = 'Для операции нанесения кодов маркировки Отчет производственной линии не используется. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	ИначеЕсли Действия.ОчиститьТовары И (Объект.Товары.Количество() Или ПредставлениеКИЗ.Количество()) Тогда

		ТекстВопроса = НСтр(
			"ru = 'При изменении вида операции табличная часть Товары упаковок будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет;
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;

	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФормированияАТКИСМППриИзменении(Элемент)
	
	Если Объект.ВариантФормированияАТКИСМП <> ПредыдущийВариантФормированияАТКИСМП Тогда
		ОчиститьШтрихкодыАТК = Ложь;
		
		Действия = Новый Структура;
		Действия.Вставить("ОчиститьШтрихкодыАТК", ОчиститьШтрихкодыАТК);
		Действия.Вставить("ПредыдущийВариантФормированияАТКИСМП", ПредыдущийВариантФормированияАТКИСМП);
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииВариантФормированияАТКЗавершение", ЭтотОбъект, Действия);
		
		Если Объект.ШтрихкодыАТК.Количество() Тогда
			
			Действия.ОчиститьШтрихкодыАТК = Истина;
			ТекстВопроса = НСтр(
				"ru = 'При изменении варианта формирования АТК табличная часть Штрихкоды упаковок АТК будет очищена. Продолжить?'");
			Кнопки = РежимДиалогаВопрос.ДаНет; 
			ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
			Возврат;
			
		КонецЕсли;
		
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюНажатие(Элемент)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеКИЗДекорацияОтсканироватьПроверитьМаркируемуюПродукциюНажатие(Элемент)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);

КонецПроцедуры

&НаКлиенте
Процедура ОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущаяОперация = Объект.Операция;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантФормированияАТКИСМПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущийВариантФормированияАТКИСМП = Объект.ВариантФормированияАТКИСМП;
	
КонецПроцедуры


&НаКлиенте
Процедура ВариантВыполненияАгрегацииПриИзменении(Элемент)

	ВариантВыполненияАгрегацииПриИзмененииНаСервере();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНанесенияПриИзменении(Элемент)
	
	ТребуетсяОчиститьКодыМаркировки = ЗначениеЗаполнено(Объект.ОперацияНанесения) <> ЗначениеЗаполнено(ПредыдущаяОперация);
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьШтрихкодыУпаковок", Ложь);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОперацииНанесенияЗавершение", ЭтотОбъект, Действия);
	
	Если ТребуетсяОчиститьКодыМаркировки И Объект.ШтрихкодыУпаковок.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыУпаковок = Истина;
		
		ТекстВопроса = НСтр(
			"ru = 'При изменении операции нанесения табличная часть Штрихкоды упаковок будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияНанесенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредыдущаяОперация = Объект.ОперацияНанесения;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияДекларацииПриИзменении(Элемент)
	
	ОчисткаШтрихкодовАТК = Ложь;
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьШтрихкодыАТК", ОчисткаШтрихкодовАТК);
	Действия.Вставить("ПредыдущийВариантЗаполненияДекларации", ПредыдущийВариантЗаполненияДекларации);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииВариантЗаполненияДекларацииЗавершение", ЭтотОбъект, Действия);
	
	ВариантЗаполненияДекларацииАТК = ПредопределенноеЗначение(
		"Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК");
	
	Если ПредыдущийВариантЗаполненияДекларации = ВариантЗаполненияДекларацииАТК Тогда
		ОчисткаШтрихкодовАТК = Истина;
	КонецЕсли;
	
	Если ОчисткаШтрихкодовАТК И Объект.ШтрихкодыАТК.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыАТК = Истина;
		ТекстВопроса = НСтр(
			"ru = 'При изменении варианта заполнения декларации табличная часть Штрихкоды упаковок АТК будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент, ПерезаполнитьПоОснованию = Ложь)

	ПриИзмененииВидПродукцииНаСервере(ПерезаполнитьПоОснованию);
	
	ОтключитьОтметкуНезаполненного();
	
	СобытияФормИСМПКлиент.ВидПродукцииПриИзменении(ЭтотОбъект, Элемент);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "Номенклатура");
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Объект.Товары.Количество() > 0 Или ПредставлениеКИЗ.Количество() > 0)
		И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции документ-основание, табличная часть Товары
		                        |и связанные с ней штрихкоды упаковок будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли Объект.ОтчетПроизводственнойЛинии И ВыбранноеЗначение <> Объект.ВидПродукции 
		И (Объект.ДанныеОтчетаПроизводственнойЛинии.Количество()
		   Или ЗначениеЗаполнено(Номенклатура)) Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции документ-основание, табличная часть ""Коды маркировки""
		                        |и связанные с ней реквизиты Отчета производственной линии будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацияПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
	
	Если Объект.Товары.Количество() > 0 Или ПредставлениеКИЗ.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации отсканированные коды маркировки будут очищены. Продолжить?'");
		
		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ВопросПриИзмененииОрганизацияПриЗавершении(КодВозвратаДиалога.Да, ВыбранноеЗначение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗ.Форма.ФормаВыбораПроизводственногоОбъекта",
		ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Маркировка товаров ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Маркировка товаров ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПроизводственнойЛинииПриИзменении(Элемент)
	
	ОчиститьТовары                            = Ложь;
	ОчиститьДанныеОтчетаПроизводственнойЛинии = Ложь;
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьТовары", ОчиститьТовары);
	Действия.Вставить("ОчиститьДанныеОтчетаПроизводственнойЛинии", ОчиститьДанныеОтчетаПроизводственнойЛинии);
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииОтчетПроизводственнойЛинииЗавершение", ЭтотОбъект, Действия);
	Если Объект.ОтчетПроизводственнойЛинии И Объект.Товары.Количество() Тогда
		Действия.ОчиститьТовары = Истина;
		ТекстВопроса = НСтр(
			"ru = 'При установке признака Отчет прозводственной линии табличная часть ""Товары"" будет очищена. Продолжить?'");
			Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
	ИначеЕсли Не Объект.ОтчетПроизводственнойЛинии И Объект.ДанныеОтчетаПроизводственнойЛинии.Количество() Тогда
		Действия.ОчиститьДанныеОтчетаПроизводственнойЛинии = Истина;
		ТекстВопроса = НСтр(
			"ru = 'При установке признака Отчет прозводственной линии табличная часть ""Коды маркировки"" будет очищена. Продолжить?'");
			Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетсяИндивидуализацияПриИзменении(Элемент)
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьШтрихкодыУпаковок", Ложь);
	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросПриИзмененииТребуетсяИндивидуализацияЗавершение", ЭтотОбъект, Действия);
	
	Если Объект.ШтрихкодыУпаковок.Количество() Тогда
		
		Действия.ОчиститьШтрихкодыУпаковок = Истина;
		
		ТекстВопроса = НСтр(
			"ru = 'При изменении операции нанесения табличная часть Штрихкоды упаковок будет очищена. Продолжить?'");
		Кнопки = РежимДиалогаВопрос.ДаНет; 
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, Кнопки);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещенияОЗавершении, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)

	НоменклатураПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения);
	ХарактеристикаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ЭтотОбъект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
	СерияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПараметрыУказанияСерий <> Неопределено Тогда
		ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект, ПараметрыУказанияСерий, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкоропортящаясяПродукцияПриИзменении(Элемент)
	
	УстановитьФорматСрокГодности(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ПараметрыОткрытия = ИнтеграцияИСМПВЕТИСКлиент.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ЭтотОбъект, "Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются");
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация                         = Объект.Организация;
	ПараметрыОткрытия.ОтчетПроизводственнойЛинии          = Истина;

	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ПараметрыОткрытия.ТребуетсяУказаниеСерии = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий);
	КонецЕсли;

	ИнтеграцияИСМПВЕТИСКлиент.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура СертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИспользоватьНомерСкважины = ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВариантУточненияДанных",    "Сертификация");
	ПараметрыОткрытия.Вставить("ВидСертификации",           Объект.ВидДокументаСертификации);
	ПараметрыОткрытия.Вставить("ДатаСертификации",          Объект.ДатаДокументаСертификации);
	ПараметрыОткрытия.Вставить("НомерСертификации",         Объект.НомерДокументаСертификации);
	ПараметрыОткрытия.Вставить("НомерСкважины",             Объект.НомерСкважины);
	ПараметрыОткрытия.Вставить("ВидПродукции",              Объект.ВидПродукции);
	ПараметрыОткрытия.Вставить("ИспользоватьНомерСкважины", ИспользоватьНомерСкважины);
	
	ДополнительныеПараметры = Новый Структура("ВариантУточненияДанных", ПараметрыОткрытия.ВариантУточненияДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПаспортСоответствияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВариантУточненияДанных", "ПаспортСоответствия");
	ПараметрыОткрытия.Вставить("КемВыдан",          Объект.КемВыданПаспортСоответствия);
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Объект.ДатаПаспортаСоответствия);
	ПараметрыОткрытия.Вставить("НомерСертификации", Объект.НомерПаспортаСоответствия);
	ПараметрыОткрытия.Вставить("ВидПродукции",      Объект.ВидПродукции);
	
	ДополнительныеПараметры = Новый Структура("ВариантУточненияДанных", ПараметрыОткрытия.ВариантУточненияДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛицензияНаПользованиеНедрамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НомерЛицензииНаПользованиеНедрами", Объект.НомерЛицензииНаПользованиеНедрами);
	ПараметрыОткрытия.Вставить("ДатаЛицензииНаПользованиеНедрами",  Объект.ДатаЛицензииНаПользованиеНедрами);
	ПараметрыОткрытия.Вставить("ВариантУточненияДанных", "Лицензия");
	
	ДополнительныеПараметры = Новый Структура("ВариантУточненияДанных", "Лицензия");
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСПриИзменении(Элемент)
	
	ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	
	ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроисхожденияВЕТИССтрокойПриИзменении(Элемент)
	
	ИдентификаторПроисхожденияВЕТИССтрокой = ИнтеграцияИСКлиентСервер.ПреобразоватьИдентификаторВСД(ИдентификаторПроисхожденияВЕТИССтрокой);
	
	Если ЗначениеЗаполнено(ИдентификаторПроисхожденияВЕТИССтрокой)
		И Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Указан некорректный идентификатор ВСД'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДПриИзменении(Элемент)
	
	Объект.КодТНВЭД = КодТНВЭД;
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ТекущаяСтрока",                           КодТНВЭД);
	ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
	ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
	ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
	ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
	
	ОткрытьФорму(
		"РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьШтрихкодыУпаковокПриИзменении(Элемент)
	
	ПриИзмененииСоздаватьШтрихкодыУпаковок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственнаяПлощадкаВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытияФормыВыбора = Новый Структура;
	
	ИнтеграцияИСМПВЕТИСКлиент.ПараметрыВыбораПроизводственнойПлощадкиВЕТИС(ЭтотОбъект, ПараметрыОткрытияФормыВыбора);
	
	ПараметрыОткрытияФормыВыбора.Вставить("ОповещениеВыбора",
		Новый ОписаниеОповещения("ВыборПроизводственнойПлощадкиВЕТИСЗавершение", ЭтотОбъект));
	
	ИнтеграцияИСМПВЕТИСКлиент.ОткрытьФормуВыбораПроизводственнойПлощадкиВЕТИС(ПараметрыОткрытияФормыВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственнаяПлощадкаВЕТИСПриИзменении(Элемент)
	ПриИзмененииПроизводственнойПлощадкиВЕТИС();
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственнаяПлощадкаВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	ПриИзмененииПроизводственнойПлощадкиВЕТИС();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПроизводственнойПлощадкиВЕТИСПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторПроизводственнойПлощадкиВЕТИС)
		И Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(Объект.ИдентификаторПроизводственнойПлощадкиВЕТИС) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Указан некорректный идентификатор производственной площадки ВетИС'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);

	ПараметрыОткрытия = ИнтеграцияИСМПВЕТИСКлиент.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ТекущиеДанные, "Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются");
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация                         = Объект.Организация;
	ПараметрыОткрытия.ТребуетсяУказаниеСерии = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(ТекущиеДанные.СтатусУказанияСерий);

	ИнтеграцияИСМПВЕТИСКлиент.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно
		Или Не ПравоИзменения
		Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(ЭтотОбъект) Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ДанныеКешаСтроки.Номенклатура = ТекущиеДанные.Номенклатура Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	Если ИспользуетсяПодсистемаВЕТИС И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС) Тогда
		
		НоменклатураСоответствуетСопоставленнойПродукции = НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС,
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.Характеристика,
			ТекущиеДанные.Серия);
		
		Если Не НоменклатураСоответствуетСопоставленнойПродукции Тогда
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Неопределено;
		Иначе
			ТекущиеДанные.СкоропортящаясяПродукция = ДанныеКешаСтроки.СкоропортящаясяПродукция;
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ТекущиеДанные.GTIN = "";
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеКешаСтроки, ТекущиеДанные);
	
	ТоварыНоменклатураПриИзмененииСервер(ТребуетсяОбновитьКэшУпаковок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ДанныеКешаСтроки, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	Если ИспользуетсяПодсистемаВЕТИС И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС) Тогда
		
		НоменклатураСоответствуетСопоставленнойПродукции = НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС,
			ТекущиеДанные.Номенклатура,
			ТекущиеДанные.Характеристика,
			ТекущиеДанные.Серия);
		
		Если Не НоменклатураСоответствуетСопоставленнойПродукции Тогда
			ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
	ЗаполнитьЗначенияСвойств(ДанныеКешаСтроки, ТекущиеДанные);
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПаспортСоответствияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок, "ПаспортСоответствия");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЛицензияНаПользованиеНедрамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок, "Лицензия");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСтавкиНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммы(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяДекларацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияТаможеннойДекларации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда
	
		ТекущиеДанные.ВидДокументаСертификации     = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации   = "";
		ТекущиеДанные.ДатаДокументаСертификации    = '00010101';
		ТекущиеДанные.НомерСкважины                = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации     = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации   = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации    = НайденныеСтроки[0].ДатаСертификации;
		ТекущиеДанные.НомерСкважины                = НайденныеСтроки[0].НомерСкважины;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПаспортСоответствияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ПаспортСоответствия) Тогда
		ТекущиеДанные.КемВыданПаспортСоответствия = "";
		ТекущиеДанные.НомерПаспортаСоответствия   = "";
		ТекущиеДанные.ДатаПаспортаСоответствия    = '00010101';
	Иначе
		ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.ПаспортСоответствия);
		НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ТекущиеДанные.КемВыданПаспортСоответствия = НайденныеСтроки[0].КемВыдан;
			ТекущиеДанные.НомерПаспортаСоответствия   = НайденныеСтроки[0].НомерСертификации;
			ТекущиеДанные.ДатаПаспортаСоответствия    = НайденныеСтроки[0].ДатаСертификации;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЛицензияНаПользованиеНедрамиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ЛицензияНаПользованиеНедрами) Тогда
		
		ТекущиеДанные.НомерЛицензииНаПользованиеНедрами = "";
		ТекущиеДанные.ДатаЛицензииНаПользованиеНедрами  = '00010101';
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.ЛицензияНаПользованиеНедрами);
	НайденныеСтроки = КэшЛицензийНаПользованиеНедрами.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.НомерЛицензииНаПользованиеНедрами = НайденныеСтроки[0].НомерЛицензииНаПользованиеНедрами;
		ТекущиеДанные.ДатаЛицензииНаПользованиеНедрами  = НайденныеСтроки[0].ДатаЛицензииНаПользованиеНедрами;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТаможеннаяДекларацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ТаможеннаяДекларация) Тогда
	
		ТекущиеДанные.РегистрационныйНомерДекларации = "";
		ТекущиеДанные.ДатаДекларации  = '00010101';

		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.ТаможеннаяДекларация);
	НайденныеСтроки = КешТаможеннойДекларации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.РегистрационныйНомерДекларации = НайденныеСтроки[0].РегистрационныйНомерДекларации;
		ТекущиеДанные.ДатаДекларации  = НайденныеСтроки[0].ДатаДекларации;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
			ЭтотОбъект,
			Объект.Товары,
			ТекущиеДанные,
			ДанныеКешаСтроки,
			Истина,
			КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
		Если ТребуетсяОбновитьКэшУпаковок Тогда
			ПрименитьКешШтрихкодовУпаковок();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПотребительскихУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект,
		Объект.Товары,
		ТекущиеДанные,
		ДанныеКешаСтроки,
		Истина,
		КлючСвязиСтатусаСтрок(ЭтотОбъект, ТекущиеДанные.Номенклатура));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИнициализироватьКэшСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ТекущаяСтрока",                           ТекущиеДанные.КодТНВЭД);
		ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
		ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
		ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
		ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
		
		ОткрытьФорму(
			"РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыПаспортСоответствия Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект,
			ИнтеграцияИСМПКлиент.НастройкиРаботыССертификацией("КэшСертификации", "ТоварыПаспортСоответствия"));
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыЛицензияНаПользованиеНедрами Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект,
			ИнтеграцияИСМПКлиент.НастройкиРаботыССертификацией("КэшЛицензийНаПользованиеНедрами", "ТоварыЛицензияНаПользованиеНедрами"));
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыСрокГодности Тогда
		ОпределитьФорматРедактированияСрокГодности();
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыТаможеннаяДекларация
		И Элементы.Товары.ТекущиеДанные <> Неопределено Тогда
		ОбновитьСписокВыбораТаможеннойДекларации(Элементы.Товары.ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСПриИзменении(Элемент)
	ЗаполнитьДанныеВЕТИС();
	ОпределитьФорматРедактированияСрокГодности();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьДанныеВЕТИС();
	ОпределитьФорматРедактированияСрокГодности();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(
		МассивGTINИзКэшаОписанияОстатков(Объект.Организация, Объект.ВидПродукции));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПервичныйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияПервичногоДокумента(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПервичныйДокументПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПервичныйДокумент) Тогда
		ТекущиеДанные.НомерПервичногоДокумента = "";
		ТекущиеДанные.ДатаПервичногоДокумента = Дата(1, 1, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПервичныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ВыбранноеЗначение);
		ТекущиеДанные.ПервичныйДокумент = ПредставлениеПервичногоДокумента(
			ТекущиеДанные.НомерПервичногоДокумента,
			ТекущиеДанные.ДатаПервичногоДокумента)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеОтчетаПроизводственнойЛинии

&НаКлиенте
Процедура ДанныеОтчетаПроизводственнойЛинииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОтчетаПроизводственнойЛинииПередУдалением(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	ВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИерархия = Ложь;
	СтрокиКОбработке = Новый Массив;
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаДанныхОтчета = Объект.ДанныеОтчетаПроизводственнойЛинии.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ЗначениеЗаполнено(СтрокаДанныхОтчета.ЗначениеШтрихкодаУпаковки)
			Или ЗначениеЗаполнено(СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки) Тогда
			ЕстьИерархия = Истина;
		КонецЕсли;
		
		Если СтрокаДанныхОтчета.ЕстьОшибки Тогда
			СтрокиКОбработке.Добавить(ВыделеннаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Истина;
	
	Если СтрокиКОбработке.Количество() Тогда
		
		ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", СтрокиКОбработке);
		Если ЕстьИерархия Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеИзмененияРежимУдаленияСтрокиОтчета", ЭтотОбъект, ДополнительныеПараметры);
			
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("РежимИсправления", РежимУдаленияСтрокиОтчета);
			
			ОткрытьФорму(
				"Документ.МаркировкаТоваровИСМП.Форма.РежимИсправленияОшибок",
				ПараметрыОткрытия,
				ЭтотОбъект,,,,
				ОписаниеОповещения,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПослеИзмененияРежимУдаленияСтрокиОтчета(
				ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибокОтчетПроизодственнойЛинииИС.УдалятьСтрокуОтчета"),
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не найдено строк к удалению: удалять можно только строки с ошибкой.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ДоступнаИерархия = Объект.ОтчетПроизводственнойЛинии;
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		ДоступнаИерархия,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьПодборМаркируемойПродукции(Команда)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЛицензии(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки, "Лицензия");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыТовары(Команда)
	
	ОповещениеЗакрытияФормыЗаполненияТовары = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнениеПараметровТовары", ЭтотОбъект, Элементы.Товары.ВыделенныеСтроки);
		
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.ФормаЗаполненияТовары",,
		ЭтотОбъект,,,,
		ОповещениеЗакрытияФормыЗаполненияТовары);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидМеха(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьВидМехаЗавершение", 
		ЭтотОбъект,
		Новый Структура("ИдентификаторыСтрок", Элементы.Товары.ВыделенныеСтроки));
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму("Справочник.ВидыМехаГИСМ.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПервичныйДокумент(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуРедактированияПервичногоДокумента(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.МаркировкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКоличествоПоДаннымОтчета(Команда)

	ЗаполнитьКоличествоПоДаннымОтчетаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКодовМаркировкиНемедленно(Команда)
	
	ОчиститьСообщения();
	
	УстановленОтборПоОшибке = ОтборСтрок = "СОшибками";
	ПроверитьСостояниеКодовМаркировкиНаКлиенте(Не УстановленОтборПоОшибке);
	
КонецПроцедуры

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП(ОбновитьСтатусПроверкиИПодбора = Истина)
	
	Если ОбновитьСтатусПроверкиИПодбора Тогда
		СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(
			Объект.Ссылка, Объект.ВидПродукции);
	КонецЕсли;
	
	СтатусИСМП = Документы.МаркировкаТоваровИСМП.СтатусПоУмолчанию();
	Реквизиты = Новый Структура(
		"ВидПродукции, Операция, ОперацияНанесения, ВариантЗаполненияДекларации, ВариантВыполненияАгрегации");
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	ДальнейшееДействие = Документы.МаркировкаТоваровИСМП.ДальнейшееДействиеПоУмолчанию(Реквизиты);
	Если ЗначениеЗаполнено(Объект.Ссылка)
		И ПараметрыОбновленияСтатуса = Неопределено Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Статусы.Статус КАК Статус,
			|	Статусы.ДальнейшееДействие1 КАК ДальнейшееДействие1,
			|	Статусы.ДальнейшееДействие2 КАК ДальнейшееДействие2,
			|	Статусы.ДальнейшееДействие3 КАК ДальнейшееДействие3
			|ИЗ
			|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
			|ГДЕ
			|	Статусы.Документ = &Документ");
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		
		ИсключаемыеДействия = ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия();
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
				ДальнейшееДействие = Новый Массив;
			Иначе
				ДальнейшееДействие = Новый Массив;
				Если ИсключаемыеДействия.Найти(Выборка.ДальнейшееДействие1) = Неопределено Тогда
					ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				КонецЕсли;
				Если ИсключаемыеДействия.Найти(Выборка.ДальнейшееДействие2) = Неопределено Тогда
					ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				КонецЕсли;
				Если ИсключаемыеДействия.Найти(Выборка.ДальнейшееДействие3) = Неопределено Тогда
					ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ПараметрыОбновленияСтатуса <> Неопределено Тогда
		
		СтатусИСМП = ПараметрыОбновленияСтатуса.НовыйСтатус;
		
		ДальнейшееДействие = Новый Массив;
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие1);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие2);
		ДальнейшееДействие.Добавить(ПараметрыОбновленияСтатуса.ДальнейшееДействие3);	
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию);
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РежимИсправленияОшибокПослеПередачиКодов = СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично
	                                  Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично
	                                  Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично
	                                  Или (СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи
	                                        И ЗначениеЗаполнено(Объект.ОперацияНанесения))
	                                  Или (СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи
	                                        И (Объект.Операция <> Перечисления.ВидыОперацийИСМП.Агрегация
	                                        Или Объект.ОтчетПроизводственнойЛинии))
	                                  Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПоступлениеКИЗПодтвержденоЧастично
	                                  Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетСтатусНеопределен;
	
	РедактированиеФормыНеДоступно = Не РежимИсправленияОшибокПослеПередачиКодов
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСостояниеКодовМаркировкиНаКлиенте(ВыполнитьПолнуюПроверку, ВызовПослеАвторизации = Ложь) Экспорт
	
	ТребуетсяОбновитьКлючСессии = ОбновитьСтатусыКодовМаркировкиНаСервере(ВыполнитьПолнуюПроверку);
	
	Если ТребуетсяОбновитьКлючСессии = Истина Тогда
		Если ВызовПослеАвторизации Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Иначе
			ПараметрыПроверки = Новый Структура;
			ПараметрыПроверки.Вставить("ВыполнитьПолнуюПроверку", ВыполнитьПолнуюПроверку);
			ЗапроситьКлючСессииНачало(ПараметрыПроверки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСтатусыКодовМаркировкиНаСервере(ВыполнитьПолнуюПроверку)
	
	ИменаКолонок = "НормализованноеЗначениеШтрихкода, НормализованноеЗначениеШтрихкодаУпаковки, ТекстОшибкиЗначениеШтрихкода, ТекстОшибкиЗначениеШтрихкодаУпаковки";
	Если ВыполнитьПолнуюПроверку Тогда
		ТаблицаПроверки = Объект.ДанныеОтчетаПроизводственнойЛинии.Выгрузить(, ИменаКолонок);
	Иначе
		СтруктураОтбораЕстьОшибки = Новый Структура("ЕстьОшибки", Истина);
		ТаблицаПроверки = Объект.ДанныеОтчетаПроизводственнойЛинии.Выгрузить(СтруктураОтбораЕстьОшибки, ИменаКолонок);
	КонецЕсли;
	
	Если ТаблицаПроверки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТаблицаПроверки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатЗапроса = ЗапроситьСтатусыКодовМаркировки(ТаблицаПроверки, Объект.Ссылка, Объект.ВидПродукции, Объект.Организация, ВыполнитьПолнуюПроверку);
	
	Если РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РезультатЗапроса.СтатусыКодовМаркировки = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(РезультатЗапроса.ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	СтатусыКодовМаркировки = РезультатЗапроса.СтатусыКодовМаркировки;
	
	Для Каждого СтрокаТаблицы Из Объект.ДанныеОтчетаПроизводственнойЛинии Цикл
		
		ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаТаблицы.НормализованноеЗначениеШтрихкода];
		Если ДанныеСтатуса <> Неопределено Тогда
			СтрокаТаблицы.Статус = ДанныеСтатуса.Статус;
			СтрокаТаблицы.ИННВладельца = ДанныеСтатуса.ИННВладельца;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки) Тогда
			ДанныеСтатуса = СтатусыКодовМаркировки[СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки];
			Если ДанныеСтатуса <> Неопределено Тогда
				СтрокаТаблицы.СтатусУпаковки = ДанныеСтатуса.Статус;
				СтрокаТаблицы.ИННВладельцаУпаковки = ДанныеСтатуса.ИННВладельца;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьЭлементовСтатусИННВладельца(Элементы, Истина);
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьЭлементовСтатусИННВладельца(Элементы, Видимость)
	Элементы.ДанныеОтчетаПроизводственнойЛинииСтатус.Видимость          = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииСтатусУпаковки.Видимость  = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииСтатус1.Видимость         = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииСтатусУпаковки1.Видимость = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииИННВладельца.Видимость          = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииИННВладельцаУпаковки.Видимость  = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииИННВладельца1.Видимость         = Видимость;
	Элементы.ДанныеОтчетаПроизводственнойЛинииИННВладельцаУпаковки1.Видимость = Видимость;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапроситьСтатусыКодовМаркировки(ТаблицаПроверки, Документ, ВидМаркируемойПродукции, Организация, ПолучитьСтатусыВсехКодов = Ложь)
	
	МассивСтрокКодов      = Новый Массив;
	СтрокиЗапроса         = Новый Соответствие;
	ДанныеКодовМаркировки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализацияТаблицыДанныхКодовМаркировки();
	
	КэшДанныхЗапроса = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из ТаблицаПроверки Цикл
		
		ЗапрашиватьСтатусВложенныхКодов = Ложь;
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки)
			И (ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибкиЗначениеШтрихкодаУпаковки)
				Или ПолучитьСтатусыВсехКодов) Тогда
			
			Если КэшДанныхЗапроса[СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки] = Неопределено Тогда
				
				СтруктураЗначения = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки, ВидМаркируемойПродукции);
				
				СтрокаКодаМаркировки = ДанныеКодовМаркировки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, СтруктураЗначения);
				
				МассивСтрокКодов.Добавить(СтрокаКодаМаркировки);
				СтрокиЗапроса.Вставить(СтрокаКодаМаркировки, СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки);
				
				КэшДанныхЗапроса[СтрокаТаблицы.НормализованноеЗначениеШтрихкодаУпаковки] = Истина;
			КонецЕсли;
			
			ЗапрашиватьСтатусВложенныхКодов = Истина;
			
		КонецЕсли;
		
		Если (ПолучитьСтатусыВсехКодов
				Или ЗапрашиватьСтатусВложенныхКодов
				Или ЗначениеЗаполнено(СтрокаТаблицы.ТекстОшибкиЗначениеШтрихкода))
			И КэшДанныхЗапроса[СтрокаТаблицы.НормализованноеЗначениеШтрихкода] = Неопределено Тогда
			
			СтруктураЗначения = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(СтрокаТаблицы.НормализованноеЗначениеШтрихкода, ВидМаркируемойПродукции);
			
			СтрокаКодаМаркировки = ДанныеКодовМаркировки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКодаМаркировки, СтруктураЗначения);
			
			МассивСтрокКодов.Добавить(СтрокаКодаМаркировки);
			СтрокиЗапроса.Вставить(СтрокаКодаМаркировки, СтрокаТаблицы.НормализованноеЗначениеШтрихкода);
			
			КэшДанныхЗапроса[СтрокаТаблицы.НормализованноеЗначениеШтрихкода] = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗапроса = ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(МассивСтрокКодов, Организация);
	
	СтатусыКодовМаркировки = Неопределено;
	Если РезультатЗапроса.СтатусыКодовМаркировки <> Неопределено Тогда
		СтатусыКодовМаркировки = Новый Соответствие;
		Для Каждого КлючИЗначение Из РезультатЗапроса.СтатусыКодовМаркировки Цикл
			ИсходнаяСтрока = СтрокиЗапроса.Получить(КлючИЗначение.Ключ);
			Если ИсходнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтатусыКодовМаркировки.Вставить(ИсходнаяСтрока, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("ТребуетсяОбновлениеКлючаСессии", РезультатЗапроса.ТребуетсяОбновлениеКлючаСессии);
	ВозвращаемоеЗначение.Вставить("СтатусыКодовМаркировки",         СтатусыКодовМаркировки);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",                    РезультатЗапроса.ТекстОшибки);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(ПараметрыПроверки)
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект, ПараметрыПроверки);
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		ПараметрыЗапроса = ОбщегоНазначенияИСМПКлиентСервер.ПараметрыЗапросаКлючаСессии(Объект.Организация);
	Иначе
		ПараметрыЗапроса = ИнтерфейсИСМПОбщегоНазначенияКлиентСервер.ПараметрыЗапросаКлючаСессии(Объект.Организация);
	КонецЕсли;
	
	ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
		ПараметрыЗапроса, 
		ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Объект.Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтказОтАвторизации Тогда
		Возврат;
	ИначеЕсли ОшибкаАвторизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	ИначеЕсли ДополнительныеПараметры.Свойство("КОпределениюВидаУпаковки") Тогда
		ЗаполнитьКоличествоПоДаннымОтчетаНаКлиенте(ДополнительныеПараметры.КОпределениюВидаУпаковки, Истина);
	Иначе
		ПроверитьСостояниеКодовМаркировкиНаКлиенте(ДополнительныеПараметры.ВыполнитьПолнуюПроверку, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанныеСИсправлениями" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанныеСИсправлениями");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПередатьОтчет" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьИндивидуализациюКИЗ" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеИндивидуализациюКИЗ");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПередатьОтчетСИсправлениями" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчетСИсправлениями");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки= "ЗапроситьКвитанцию" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКвитанцию");
		
		ПараметрыОбработкиДокументов.Вставить("Статус", СтатусИСМП);
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьАгрегацию" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегацию");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьАгрегациюСИсправлениями" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеАгрегациюСИсправлениями");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки= "ВыполнитьФормированиеАТК" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеФормированиеАТК");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки= "ПодтвердитеПоступление" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступление");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки= "ПодтвердитеПоступлениеСИсправлениями" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПодтвердитеПоступлениеСИсправлениями");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СоздатьШтрихкодыУпаковок" Тогда
		
		ДлительнаяОперация = СоздатьШтрихкодыУпаковок();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("СозданиеШтрихкодовУпаковокЗавершение", ЭтотОбъект);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Создание штрихкодов упаковок верхнего уровня.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	ПараметрыЗаполнения.ЗаполнитьСтавкуНДС = Элементы.ТоварыСтавкаНДС.Видимость;
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	
	Если ДобавленныеСтроки.Количество() Тогда
		
		СписокНоменклатуры = Новый Массив;
		Для Каждого СтрокаТовары Из ДобавленныеСтроки Цикл
			СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		КонецЦикла;
		
		ВременнаяТаблица = Объект.Товары.Выгрузить(ДобавленныеСтроки);
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамМаркировкиТоваровИСМП(
			ВременнаяТаблица, Объект);
		
		Если ВременнаяТаблица.Количество() Тогда
			ИнтеграцияИСМПКлиентСервер.ОбновитьКешСертификацииПоСтатистике(ЭтотОбъект, ВременнаяТаблица);
		КонецЕсли;
		
		ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
		ИнтеграцияИСМПКлиентСервер.ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(ЭтотОбъект, ДобавленныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "Характеристика", "ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "Серия", "СтатусУказанияСерий", "ТипНоменклатуры");
		
	// Коды отдельно от количества
	ИнтеграцияИСМП.УстановитьУсловноеОформлениеПолейКоличества(ЭтотОбъект);
	
	СписокОперацийБезНоменклатуры = Новый СписокЗначений();
	СписокОперацийБезНоменклатуры.ЗагрузитьЗначения(ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки());
	СписокОперацийБезНоменклатуры.Добавить(Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
	СписокОперацийБезНоменклатуры.Добавить(Перечисления.ВидыОперацийИСМП.Агрегация);
	
	// Молочная продукция
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.СкоропортящаясяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СкоропортящаясяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");
	
	// Молочная продукция скоропортящаяся
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.СкоропортящаясяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy HH:mm';");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.СкоропортящаясяПродукция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy HH:mm';");
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Операция.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийБезНоменклатуры;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыУпаковка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.Операция.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОперацийБезНоменклатуры;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеGTINОстатки"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоПотребительскихУпаковок.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеОтчетаПроизводственнойЛинииЗначениеШтрихкода.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеОтчетаПроизводственнойЛинииНормализованноеЗначениеШтрихкода.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ДанныеОтчетаПроизводственнойЛинии.ТекстОшибкиЗначениеШтрихкода");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеОтчетаПроизводственнойЛинииЗначениеШтрихкодаУпаковки.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДанныеОтчетаПроизводственнойЛинииНормализованноеЗначениеШтрихкодаУпаковки.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ДанныеОтчетаПроизводственнойЛинии.ТекстОшибкиЗначениеШтрихкодаУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	// Продукция из меха. Представление КИЗ.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПредставлениеКИЗGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПредставлениеКИЗ.GTIN");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	// Продукция из меха. Вид меха.
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВидМеха.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ВидПродукции");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех");
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияИСМПКлиентСервер.КодТНВЭДПрочиеПредметыОдеждыИСМП();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	ОтборСтрок      = "Все";
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеДокумента = Новый Структура("ВидПродукции, Операция, ОперацияНанесения");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Объект);
		Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
			ПоместитьВоВременноеХранилище(ДанныеДокумента, ДанныеДокументаАдрес);
		Иначе
			ДанныеДокументаАдрес = ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияИСМП.НастроитьВидимостьКолонкиКоличестваКодовМаркировки(ЭтотОбъект);
	
	ШтрихкодированиеОбщегоНазначенияИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.МаркировкаТоваровИСМП);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.МаркировкаТоваровИСМП);
	ИспользуетсяПодсистемаВЕТИС = ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС();
	
	ПодразделенияИспользуются = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	ЗаполнитьДанныеФормыПриСозданииНаСервере();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьПредставлениеТребуетсяИндивидуализация(ЭтотОбъект);
	
	ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект, Ложь);
	ЗаполнитьСлужебныеРеквизитыВЕТИСВКоллекции();
	
	ПараметрыОбновленияСтатуса = Неопределено;

	ОбновитьПредставленияНаФорме();
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "Номенклатура");
	ЗаполнитьДоступныеОперации();
	ЗаполнитьДоступныеВариантыЗаполненияДекларации(ЭтотОбъект);
	ЗаполнитьДоступныеВариантыВыполненияАгрегации();
	ЗаполнитьПредставлениеСертификацииЛицензииНаНедра();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	ЗаполнитьПредставлениеПервичногоДокумента();
	ПроизводственныйОбъектЗаполнитьСписокВыбора(ЭтотОбъект);
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	ЗаполнитьСписокВыбораПриСозданииНаСервере();
	ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии();
	
	ИнтеграцияИСМП.СоздатьКэшСертификацииЛицензии(ЭтотОбъект);
	СоздатьКэшТаможеннойДекларации();
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля Тогда
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		ПредыдущийВариантЗаполненияДекларации = Объект.ВариантЗаполненияДекларации;
	КонецЕсли;
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		ПроверкаИПодборПродукцииИС.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект,,
			"ИдентификаторПроисхожденияВЕТИС,СрокГодности,GTIN,КоличествоПотребительскихУпаковок");
		ПодключенаОбработкаКодовМаркировки = Истина;
	Иначе
		ПерезаполнитьДанныеФормы();
	КонецЕсли;
	
	ИнициализироватьКэшСтроки(ЭтотОбъект);
	
	Если Не РедактированиеФормыНедоступно Тогда
		Настройки = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
		Настройки.ВключаяКомплектующие = Истина;
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки,, КлючСвязиСтатусаСтрок(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроизводственныйОбъектЗаполнитьСписокВыбора(Форма, ПроверитьПроизводственныйОбъект = Ложь)
	
	Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Если ПроверитьПроизводственныйОбъект Тогда
			Форма.Объект.ПроизводственныйОбъект = Неопределено;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПроизводственныйОбъект Тогда
		ПроизводственныйОбъект = Форма.Объект.ПроизводственныйОбъект;
	Иначе
		ПроизводственныйОбъект = Неопределено;
	КонецЕсли;
	
	СписокВыбора = ПроизводственныйОбъектПолучитьСписокВыбора(Форма.Объект.Организация, ПроизводственныйОбъект);
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.Добавить(
			ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.СортироватьПоПредставлению();
	
	Если ПроверитьПроизводственныйОбъект
		И ПроизводственныйОбъект = Неопределено Тогда
		Форма.Объект.ПроизводственныйОбъект = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроизводственныйОбъектПолучитьСписокВыбора(Организация, ПроизводственныйОбъект)
	
	Возврат РегистрыСведений.НастройкиОбменаСУЗ.ПроизводственныйОбъектПолучитьСписокВыбора(Организация, ПроизводственныйОбъект);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьGLNОргранизацииПоСтатистике(ОчищатьПустое = Истина)
	
	Если Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
		Или Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.GLNОрганизации = Неопределено;
	Иначе
		ДанныеСтатистики = ЗаполнениеОбъектовПоСтатистикеИСМП.ДанныеЗаполненияМаркировкиТоваровИСМП(Объект.Организация);
		Объект.GLNОрганизации = ДанныеСтатистики.GLNОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Операция)
	
	Возврат Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотКонтрактноеПроизводствоЕАЭС")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС")
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы                   = Форма.Элементы;
	Операция                   = Форма.Объект.Операция;
	ОперацияНанесения          = Форма.Объект.ОперацияНанесения;
	ОтчетПроизводственнойЛинии = Форма.Объект.ОтчетПроизводственнойЛинии;
	ВидПродукции               = Форма.Объект.ВидПродукции;
	ПередаватьВДекларациюАТК   = Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК");
	
	ПроверятьСоставУпаковокПоДаннымИСМП = Форма.Объект.ПроверятьСоставУпаковокПоДаннымИСМП;
	
	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Операция);
	ЭтоПроизводствоРФ                           = ОперацииМаркировки.ЭтоПроизводствоРФ;
	ЭтоПроизводствоВнеЕАЭС                      = ОперацииМаркировки.ЭтоПроизводствоВнеЕАЭС;
	ЭтоПроизводствоПоДоговору                   = ОперацииМаркировки.ЭтоПроизводствоПоДоговору;
	ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика = ОперацииМаркировки.ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика;
	ЭтоПолучениеПродукцииОтФизическихЛиц        = ОперацииМаркировки.ЭтоПолучениеПродукцииОтФизическихЛиц;
	ЭтоМаркировкаОстатков                       = ОперацииМаркировки.ЭтоМаркировкаОстатков;
	ЭтоТрансграничнаяТорговля                   = ОперацииМаркировки.ЭтоТрансграничнаяТорговля;
	ЭтоАгрегация                                = ОперацииМаркировки.ЭтоАгрегация;
	ЭтоИмпортСФТС                               = ОперацииМаркировки.ЭтоИмпортСФТС;
	ЭтоВводВОборот                              = ОперацииМаркировки.ЭтоВводВОборот;
	ЭтоКонтрактноеПроизводство                  = ОперацииМаркировки.ЭтоКонтрактноеПроизводство;
	ЭтоПриемкаКИЗ                               = ОперацииМаркировки.ЭтоПриемкаКИЗ;
	
	ЭтоТабак                     = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак");
	ЭтоМолочнаяПродукция         = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(ВидПродукции);
	ЭтоПродукцияМОТП             = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции);
	ЭтоУпакованнаяВода           = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода");
	ЭтоПиво                      = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	ЭтоБАПиво                    = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво");
	ЭтоБАД                       = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы");
	ЭтоМех                       = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	ЭтоШины                      = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины");
	ЭтоКреслаКоляски             = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия");
	ЭтоМорепродукты              = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС");
	ЭтоВетеринарныеПрепараты     = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ВетеринарныеПрепараты");
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ВидПродукции);
	ЭтоПродукцияСоСрокамиГодности   = ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(ВидПродукции);
	ДляВидаПродукцииИспользуетсяДатаПроизводства = ИнтеграцияИСМПКлиентСервер.ДляВидаПродукцииИспользуетсяДатаПроизводства(ВидПродукции);
	
	ПроверятьСоставУпаковокПоДаннымИСМП = ПроверятьСоставУпаковокПоДаннымИСМП И ЭтоАгрегация И ЭтоПродукцияМОТП;
	
	ТребуетсяУказатьДанныеДекларации = ТребуетсяУказатьДанныеДекларации(Форма);
	Если ТребуетсяУказатьДанныеДекларации Тогда
		Элементы.РегистрационныйНомерДекларации.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДатаДекларации.АвтоОтметкаНезаполненного                 = Истина;
		Элементы.ПринятоеРешениеПолеВвода.АвтоОтметкаНезаполненного       = Истина;
		Элементы.КодТаможенногоОргана.АвтоОтметкаНезаполненного           = Истина;
	Иначе
		Элементы.РегистрационныйНомерДекларации.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДатаДекларации.АвтоОтметкаНезаполненного                 = Ложь;
		Элементы.ПринятоеРешениеПолеВвода.АвтоОтметкаНезаполненного       = Ложь;
		Элементы.КодТаможенногоОргана.АвтоОтметкаНезаполненного           = Ложь;
	КонецЕсли;
	
	Если ЭтоПродукцияПодконтрольнаяВЕТИС И Не Форма.ИспользуетсяПодсистемаВЕТИС Тогда
		ОтчетПроизводственнойЛинии = Истина;
	КонецЕсли;
	
	ВозможнаОперацияНанесения = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидПродукции);
	ЭтоОперацияНанесения =
		ОперацииМаркировки.ЭтоОперацияНанесения
		Или (ЭтоПродукцияПодконтрольнаяВЕТИС И Не Форма.ИспользуетсяПодсистемаВЕТИС);
	
	ПрисутствуетОперацияНанесения = ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения) Или ЭтоОперацияНанесения;
	ДоступнаОперацияНанесенияПоВидуОперацииИСМП = ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Операция);
	
	ДоступенОтчетПроизводственнойЛинии = ОпределитьДоступностьОтчетаПроизводственнойЛинии(
		ВидПродукции, ОперацииМаркировки, ОперацияНанесения);
	
	ОтчетПроизводственнойЛинии = ОтчетПроизводственнойЛинии И ДоступенОтчетПроизводственнойЛинии;
	
	УказаниеРеквизитовНанесенияНаПиво = ПрисутствуетОперацияНанесения И ЭтоПиво;
	
	Элементы.ОтчетПроизводственнойЛинии.Видимость       = ДоступенОтчетПроизводственнойЛинии;
	Форма.Объект.ОтчетПроизводственнойЛинии             = ОтчетПроизводственнойЛинии;
	Элементы.ОтчетПроизводственнойЛинии.ТолькоПросмотр  = Ложь;
	
	ВидПродукцииИспользуетНаборы            = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(ВидПродукции);
	ВидПродукцииИспользуетГрупповыеУпаковки = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(ВидПродукции);
	
	КомплектующиеМогутБытьНанесеныНезависимо = ВидПродукцииИспользуетНаборы Или ВидПродукцииИспользуетГрупповыеУпаковки И Не ЭтоТабак;
	Элементы.ОперацияНанесенияТолькоДляНаборов.Доступность = ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения);
	Элементы.ОперацияНанесенияТолькоДляНаборов.Видимость   = КомплектующиеМогутБытьНанесеныНезависимо И Не ЭтоИмпортСФТС;
	Элементы.ОперацияТолькоДляНаборов.Видимость            = КомплектующиеМогутБытьНанесеныНезависимо И ЭтоОперацияНанесения;

	Элементы.Номенклатура.АвтоОтметкаНезаполненного = ОтчетПроизводственнойЛинии И (ЭтоИмпортСФТС Или  Форма.Объект.СоздаватьШтрихкодыУпаковок);

	Элементы.ТоварыЗагрузитьДанныеИзТСД.Видимость     = Форма.ИспользуетсяТСД И Не ЭтоАгрегация;
	Элементы.ТоварыЗагрузитьИзВнешнегоФайла.Видимость = Не ЭтоАгрегация;
	
	Элементы.ДатаДекларации.Видимость                 = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.ДатаДекларацииЗаголовок.Видимость        = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	
	Элементы.РегистрационныйНомерДекларации.Видимость = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	// Для ТГ Продукция из натурального меха доступно заполнение документа только кодами маркировки.
	Элементы.ВариантЗаполненияДекларации.Видимость    = ЭтоИмпортСФТС И Не ЭтоМех;
	Элементы.ВариантФормированияАТКИСМП.Видимость     = ЭтоИмпортСФТС И Не ЭтоМех;
	Элементы.ВариантФормированияАТКИСМП.Доступность   = ЭтоИмпортСФТС И ПередаватьВДекларациюАТК И Не ЭтоМех;
	
	Элементы.КодТаможенногоОргана.Видимость           = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.КодТаможенногоОрганаЗаголовок.Видимость  = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	
	Элементы.ПринятоеРешение.Видимость                = ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС;
	Элементы.СтранаПроисхождения.Видимость            = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСтранаПроизводства.Видимость       = ЭтоМаркировкаОстатков;
	Элементы.ТоварыТаможеннаяДекларация.Видимость     = ЭтоМаркировкаОстатков;
	Элементы.ЗаполнитьПараметрыТовары.Видимость       = ЭтоМаркировкаОстатков;
	Элементы.ТоварыGTIN.Видимость                     = ЭтоМаркировкаОстатков Или ЭтоАгрегация Или (ЭтоОперацияНанесения И ЭтоТабак);
	Элементы.ДатаИмпорта.Видимость                    = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыЦена.Видимость                     = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСуммаНДС.Видимость                 = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСумма.Видимость                    = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСтавкаНДС.Видимость                = ЭтоТрансграничнаяТорговля Или ЭтоИмпортСФТС;
	Элементы.ТоварыСуммаСНДС.Видимость                = ЭтоТрансграничнаяТорговля;
	Элементы.ТоварыСуммаАкциза.Видимость              = ЭтоТрансграничнаяТорговля И ЭтоПиво;
	Элементы.ГруппаПервичныйДокумент.Видимость        = ЭтоТрансграничнаяТорговля Или ЭтоПриемкаКИЗ
		Или УказаниеРеквизитовНанесенияНаПиво И ОтчетПроизводственнойЛинии;
	Элементы.СодержаниеЭтиловогоСпирта.Видимость      = УказаниеРеквизитовНанесенияНаПиво И ОтчетПроизводственнойЛинии;
	Элементы.ТоварыКодТНВЭД.Видимость                 = ЭтоВводВОборот;
	
	Элементы.ТоварыСодержаниеЭтиловогоСпирта.Видимость = УказаниеРеквизитовНанесенияНаПиво И Не ОтчетПроизводственнойЛинии;
	Элементы.ТоварыПервичныйДокумент.Видимость         = УказаниеРеквизитовНанесенияНаПиво И Не ОтчетПроизводственнойЛинии;
	Элементы.ЗаполнитьПервичныйДокумент.Видимость      = УказаниеРеквизитовНанесенияНаПиво И Не ОтчетПроизводственнойЛинии;
	
	ОбязательноеУказаниеПервичногоДокумента = Не (УказаниеРеквизитовНанесенияНаПиво
		И Не ИнтеграцияИСМПКлиентСервер.ОбязательноеУказаниеПервичногоДокументаДляПиваВОтчетеОНанесении());
	Элементы.НомерПервичногоДокумента.АвтоотметкаНезаполненного = ОбязательноеУказаниеПервичногоДокумента;
	Элементы.ДатаПервичногоДокумента.АвтоотметкаНезаполненного  = ОбязательноеУказаниеПервичногоДокумента;
	Элементы.ТоварыПервичныйДокумент.АвтоотметкаНезаполненного  = ОбязательноеУказаниеПервичногоДокумента;
	
	ОбязательноеУказаниеСодержанияЭтиловогоСпирта = Не (УказаниеРеквизитовНанесенияНаПиво
		И Не ИнтеграцияИСМПКлиентСервер.ОбязательноеУказаниеСодержанияЭтиловогоСпиртаДляПиваВОтчетеОНанесении());
	Элементы.СодержаниеЭтиловогоСпирта.АвтоотметкаНезаполненного = ОбязательноеУказаниеСодержанияЭтиловогоСпирта;
	Элементы.ТоварыСодержаниеЭтиловогоСпирта.АвтоотметкаНезаполненного = ОбязательноеУказаниеСодержанияЭтиловогоСпирта;
	
	Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Видимость            = Ложь;
	Элементы.ТоварыСрокГодности.Видимость                               = Ложь;
	Элементы.ШтрихкодыУпаковокИдентификаторПроисхожденияВЕТИС.Видимость = Ложь;
	Элементы.ШтрихкодыУпаковокСрокГодности.Видимость                    = Ложь;
	Элементы.ИдентификаторПроизводственногоЗаказа.Видимость             = Ложь;
	Элементы.ИдентификаторПроизводственнойЛинии.Видимость               = Ложь;
	Элементы.ПроверятьСоставУпаковокПоДаннымИСМП.Видимость              = Ложь;
	
	Элементы.ТоварыВидМеха.Видимость    = ЭтоМех И ЭтоИмпортСФТС;
	Элементы.ЗаполнитьВидМеха.Видимость = ЭтоМех И ЭтоИмпортСФТС;
	
	ДоступноЗаполнениеЛицензий = (ЭтоПроизводствоРФ Или ЭтоКонтрактноеПроизводство) И ЭтоУпакованнаяВода;
	Элементы.ТоварыЛицензияНаПользованиеНедрами.Видимость = ДоступноЗаполнениеЛицензий;
	Элементы.ЗаполнитьЛицензии.Видимость                  = ДоступноЗаполнениеЛицензий;
	
	// Реквизиты отчета производственной линии
	Элементы.ИдентификаторПроисхожденияВЕТИССтрокой.Видимость = ЭтоВводВОборот И Не Форма.ИспользуетсяПодсистемаВЕТИС;
	Элементы.ИдентификаторПроисхожденияВЕТИС.Видимость        = ЭтоВводВОборот И Форма.ИспользуетсяПодсистемаВЕТИС;
	Элементы.КодТНВЭД.Видимость                               = ЭтоВводВОборот;
	Элементы.СрокГодности.Видимость                           = ПрисутствуетОперацияНанесения;
	Элементы.СкоропортящаясяПродукция.Видимость               = ПрисутствуетОперацияНанесения;
	
	Элементы.КодТНВЭД.АвтоОтметкаНезаполненного           = ЭтоВводВОборот;
	Элементы.ТоварыЦена.АвтоОтметкаНезаполненного         = ЭтоТрансграничнаяТорговля И ЭтоПиво;
	
	Если ЭтоПродукцияСоСрокамиГодности И ПрисутствуетОперацияНанесения Тогда
		
		УстановитьФорматСрокГодности(Форма);
		
		ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения = ИнтеграцияИСМПКлиентСервер.ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения(ВидПродукции);
		
		Элементы.СрокГодности.АвтоОтметкаНезаполненного = Не ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения;
		Элементы.ТоварыСрокГодности.АвтоОтметкаНезаполненного = Не ЭтоВидПродукцииСоСрокамиГодностиБезОбязательногоЗаполнения;
		
	КонецЕсли;
	
	УстановитьФорматДатыПроизводства(Форма, ПрисутствуетОперацияНанесения);
	
	Элементы.ДатаПроизводства.Видимость = ЭтоКонтрактноеПроизводство
		Или ЭтоПроизводствоРФ
		Или ЭтоИмпортСФТС И ЭтоМолочнаяПродукция
		Или ПрисутствуетОперацияНанесения И ДляВидаПродукцииИспользуетсяДатаПроизводства;
	
	Элементы.ДатаПроизводства.АвтоОтметкаНезаполненного =
		ДляВидаПродукцииИспользуетсяДатаПроизводства И ПрисутствуетОперацияНанесения И Не ЭтоМолочнаяПродукция
		Или Не (ЭтоШины Или ДляВидаПродукцииИспользуетсяДатаПроизводства)
			И (ЭтоПроизводствоРФ Или ЭтоКонтрактноеПроизводство)
			И (Не ЗначениеЗаполнено(ОперацияНанесения)
			   Или ЗначениеЗаполнено(ОперацияНанесения)
			       И СтатусыКодыМаркировкиНанесениеНеЗавершен().Найти(Форма.СтатусИСМП) = Неопределено)
		Или ТребуетсяУказатьДанныеДекларации И ЭтоИмпортСФТС И ЭтоМолочнаяПродукция;
	
	Элементы.НомерПартии.Видимость = ЭтоКреслаКоляски И ПрисутствуетОперацияНанесения;
	Элементы.НомерСерии.Видимость  = (ЭтоКреслаКоляски Или ЭтоВетеринарныеПрепараты) И ПрисутствуетОперацияНанесения;
	Элементы.НомерСерии.АвтоОтметкаНезаполненного = ЭтоВетеринарныеПрепараты И ПрисутствуетОперацияНанесения;
	
	Элементы.Контрагент.Видимость = (ЭтоКонтрактноеПроизводство Или ЭтоТрансграничнаяТорговля);
	Если ЭтоПроизводствоПоДоговору Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Владелец'");
	ИначеЕсли ЭтоПроизводствоПоДоговоруНаСторонеЗаказчика Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Производитель'");
	ИначеЕсли ЭтоТрансграничнаяТорговля Тогда
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Экспортер'");
	КонецЕсли;
	
	ПередаватьВДекларациюКодыУпаковок = 
		Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок");
	
	Элементы.ВариантВыполненияАгрегации.Видимость = Не (
		ЭтоАгрегация
		Или ЭтоПродукцияМОТП
		Или ЭтоМех
		Или ЭтоИмпортСФТС И Не ПередаватьВДекларациюКодыУпаковок
		Или ОперацииМаркировки.ЭтоОперацияНанесения
		Или ЗначениеЗаполнено(ОперацияНанесения));

	Элементы.ГруппаОперацияНанесения.Видимость = Ложь;
	
	ДоступноУказаниеПодразделения = Форма.ПодразделенияИспользуются И ЭтоПиво
		И (ЭтоОперацияНанесения Или ЭтоИмпортСФТС Или ОперацииМаркировки.ЭтоТрансграничнаяТорговля);
	
	Элементы.ПроизводственныйОбъект.Видимость = ЭтоОперацияНанесения И Не ЭтоМех
		Или ЭтоПриемкаКИЗ
		Или ДоступноУказаниеПодразделения
		Или Не ЭтоМех
		И Не ЭтоПродукцияМОТП
		И ВозможнаОперацияНанесения
		И ДоступнаОперацияНанесенияПоВидуОперацииИСМП
		И ЗначениеЗаполнено(ОперацияНанесения);
	
	Элементы.ГруппаПроизводственнаяПлощадкаВЕТИС.Видимость = ЭтоБАД И ПрисутствуетОперацияНанесения;
	Элементы.ИдентификаторПроизводственнойПлощадкиВЕТИС.Видимость = Не Форма.ИспользуетсяПодсистемаВЕТИС;
	Элементы.ПроизводственнаяПлощадкаВЕТИС.Видимость = Форма.ИспользуетсяПодсистемаВЕТИС;
	
	Элементы.GLNОрганизации.Видимость = ЭтоПриемкаКИЗ;
	
	Элементы.СтраницаТовары.Видимость                   = Не ОтчетПроизводственнойЛинии И Не ЭтоПриемкаКИЗ;
	Элементы.СтраницаПредставлениеКИЗ.Видимость         = ЭтоПриемкаКИЗ;
	Элементы.СтраницаОтчетПроизводственнойЛинии.Видимость = ОтчетПроизводственнойЛинии;
	
	Элементы.ТоварыСертификация.Видимость = ЭтоВводВОборот И Не ЭтоИмпортСФТС Или ЭтоМаркировкаОстатков;
	
	Элементы.Сертификация.Видимость                 = ОтчетПроизводственнойЛинии И (ЭтоВводВОборот И Не ЭтоИмпортСФТС Или ЭтоМаркировкаОстатков);
	Элементы.ЛицензияНаПользованиеНедрами.Видимость = ОтчетПроизводственнойЛинии И ДоступноЗаполнениеЛицензий;
	
	ИспользоватьПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(Форма);
	Элементы.ПаспортСоответствия.Видимость = ОтчетПроизводственнойЛинии И ИспользоватьПаспортСоответствия;
	Элементы.ТоварыПаспортСоответствия.Видимость = ИспользоватьПаспортСоответствия;
	Элементы.ТоварыПаспортСоответствия.АвтоОтметкаНезаполненного = ИспользоватьПаспортСоответствия;
	
	НастроитьВидимостьНомерСтрокиОтчетПроизводственнойЛинии(Форма);

	Если ЭтоУпакованнаяВода И (ЭтоПроизводствоРФ Или ЭтоКонтрактноеПроизводство) Тогда
		ИмяЗаголовкаСертификация = НСтр("ru = 'Сертификация, номер скважины'");
	Иначе
		ИмяЗаголовкаСертификация = НСтр("ru = 'Сертификация'");
	КонецЕсли;
	Элементы.ТоварыСертификация.Заголовок = ИмяЗаголовкаСертификация;
	Элементы.Сертификация.Заголовок = ИмяЗаголовкаСертификация;
	
	Элементы.ГруппаДанныеОтчетаПроизводственнойЛинии.Видимость = ОтчетПроизводственнойЛинии И Не ЭтоАгрегация И Не ЭтоПолучениеПродукцииОтФизическихЛиц;
	
	Элементы.ЗаполнитьКоличествоПоДаннымОтчета.Доступность = ЗначениеЗаполнено(Форма.Номенклатура);
	ОтображатьИсходныеЗначенияКодов = ОтчетПроизводственнойЛинии 
		И (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик")
		   Или СтатусыКодыМаркировкиНанесениеНеЗавершен().Найти(Форма.СтатусИСМП) <> Неопределено
		   Или ЭтоАгрегация И СтатусыКодыМаркировкиАгрегацияНеЗавершен().Найти(Форма.СтатусИСМП) <> Неопределено
		   Или Не ЗначениеЗаполнено(ОперацияНанесения)
		       И ((ЭтоИмпортСФТС
			  	   И Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК")
				       И СтатусыКодыМаркировкиФормированиеАТКНеЗавершен().Найти(Форма.СтатусИСМП) <> Неопределено
				   Или Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки")
				       И СтатусыКодыМаркировкиВводВОборотНеЗавершен().Найти(Форма.СтатусИСМП) <> Неопределено
				   Или Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок")
				       И СтатусыКодыМаркировкиАгрегацияНеЗавершен().Найти(Форма.СтатусИСМП) <> Неопределено)
				Или (Не ЭтоАгрегация И СтатусыКодыМаркировкиВводВОборотНеЗавершен().Найти(Форма.СтатусИСМП) <> Неопределено)));

	Элементы.ДанныеОтчетаПроизводственнойЛинииГруппаЗначениеШтрихкода.Видимость         = ОтображатьИсходныеЗначенияКодов;
	Элементы.ДанныеОтчетаПроизводственнойЛинииГруппаЗначениеШтрихкодаУпаковки.Видимость = ОтображатьИсходныеЗначенияКодов;
	
	Элементы.ДанныеОтчетаПроизводственнойЛинииФорматBase64.Видимость              = ОтображатьИсходныеЗначенияКодов;
	
	Элементы.ДанныеОтчетаПроизводственнойЛинииГруппаНормализованноеЗначениеШтрихкода.Видимость         = Не ОтображатьИсходныеЗначенияКодов;
	Элементы.ДанныеОтчетаПроизводственнойЛинииГруппаНормализованноеЗначениеШтрихкодаУпаковки.Видимость = Не ОтображатьИсходныеЗначенияКодов;
	
	УстановитьВидимостьЭлементовСтатусИННВладельца(Элементы, Ложь);
	
	Элементы.ГруппаМолочнаяПродукция.Видимость = ЭтоМолочнаяПродукция;
	Элементы.ГруппаСрокГодности.Видимость      = ЭтоПродукцияСоСрокамиГодности;
	Элементы.ГруппаВЕТИС.Видимость             = ЭтоПродукцияПодконтрольнаяВЕТИС;
	
	Форма.Объект.ПроверятьСоставУпаковокПоДаннымИСМП = ПроверятьСоставУпаковокПоДаннымИСМП;
	
	Если ЭтоПродукцияМОТП Тогда
		
		Элементы.ИдентификаторПроизводственногоЗаказа.Видимость = Истина;
		Элементы.ИдентификаторПроизводственнойЛинии.Видимость   = Истина;
		
		Элементы.ПроверятьСоставУпаковокПоДаннымИСМП.Видимость   = ЭтоАгрегация;
		Элементы.ПроверятьСоставУпаковокПоДаннымИСМП.Доступность = ЭтоАгрегация;
		
	ИначеЕсли ВозможнаОперацияНанесения Тогда
		
		Элементы.ГруппаОперацияНанесения.Видимость = ДоступнаОперацияНанесенияПоВидуОперацииИСМП;
		
		Элементы.ОперацияНанесения.Видимость                 = ДоступнаОперацияНанесенияПоВидуОперацииИСМП И Не ЭтоМех;
		Элементы.ОперацияНанесенияТолькоДляНаборов.Видимость = ДоступнаОперацияНанесенияПоВидуОперацииИСМП И Не ЭтоМех
			И КомплектующиеМогутБытьНанесеныНезависимо;
		Элементы.ТребуетсяИндивидуализация.Видимость         = ДоступнаОперацияНанесенияПоВидуОперацииИСМП И ЭтоМех;
		
		Если ЭтоПродукцияСоСрокамиГодности Тогда
			Элементы.ТоварыСрокГодности.Видимость            = ПрисутствуетОперацияНанесения;
			Элементы.ШтрихкодыУпаковокСрокГодности.Видимость = ПрисутствуетОперацияНанесения;
		КонецЕсли;
		
		Если ЭтоПродукцияПодконтрольнаяВЕТИС Тогда	
			Элементы.ОтчетПроизводственнойЛинии.ТолькоПросмотр = Не Форма.ИспользуетсяПодсистемаВЕТИС;
		КонецЕсли;

		Если ЭтоВводВОборот И ЭтоПродукцияПодконтрольнаяВЕТИС Тогда
			
			Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Видимость                 = Истина;
			Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.АвтоОтметкаНезаполненного = Истина;
			Элементы.ШтрихкодыУпаковокИдентификаторПроисхожденияВЕТИС.Видимость      = Истина;
			
			ЗаголовокКолонкиВЕТИС = ИнтеграцияИСМПВЕТИСКлиентСервер.ИмяИдентификатораПроисхожденияВЕТИС();
			Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Заголовок = ЗаголовокКолонкиВЕТИС;
			Элементы.ШтрихкодыУпаковокИдентификаторПроисхожденияВЕТИС.Заголовок = ЗаголовокКолонкиВЕТИС;
			Элементы.ИдентификаторПроисхожденияВЕТИС.Заголовок = ЗаголовокКолонкиВЕТИС;
			Элементы.ИдентификаторПроисхожденияВЕТИС.АвтоотметкаНезаполненного = Не ЗначениеЗаполнено(ОперацияНанесения)
				Или ЗначениеЗаполнено(ОперацияНанесения)
					И НЕ (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается")
					Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично"));
				
		КонецЕсли;
		
	Иначе
		
		Если ЭтоМаркировкаОстатков Или ЭтоПолучениеПродукцииОтФизическихЛиц Или ЭтоАгрегация Тогда
			Элементы.ТоварыКодТНВЭД.Видимость = Ложь;
		Иначе
			Элементы.ТоварыКодТНВЭД.Видимость = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОтборСтрок.Видимость = ОтчетПроизводственнойЛинии И Не Форма.РедактированиеФормыНеДоступно;
	
	ЗависимыеОтСтатусаИСМП = Новый Массив;
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаЛеваяКолонка");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаПраваяКолонкаНередактируемыеПослеОтправки");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаПраваяКолонкаНередактируемыеПослеОтправкиДополнительныеДанные");
	ЗависимыеОтСтатусаИСМП.Добавить("СоздаватьШтрихкодыУпаковок");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНастройкиСозданияШтрихкодовУпаковок");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаКоличество");
	ЗависимыеОтСтатусаИСМП.Добавить("ЗаполнитьКоличествоПоДаннымОтчета");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаМолочнаяПродукция");
	ЗависимыеОтСтатусаИСМП.Добавить("КодТНВЭД");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаФормированиеАТК");

	ДоступностьЭлементовДанныеДекларации = Ложь;
	Если ЭтоИмпортСФТС Тогда
		ДоступностьЭлементовДанныеДекларации = Форма.Объект.ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок")
			И Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик");
	КонецЕсли;

	ДоступноРедактированиеСертификации = Ложь;
	Если ЗначениеЗаполнено(ОперацияНанесения) Тогда
		
		ЗависимыеОтСтатусаИСМПОтчетОНанесении = Новый Массив;
		Если ЭтоПродукцияПодконтрольнаяВЕТИС И ОтчетПроизводственнойЛинии Тогда
			ЗависимыеОтСтатусаИСМПОтчетОНанесении.Добавить("ГруппаВЕТИС");
		КонецЕсли;
		
		Если ЭтоПроизводствоВнеЕАЭС Или ЭтоИмпортСФТС Тогда
			ЗависимыеОтСтатусаИСМПОтчетОНанесении.Добавить("ГруппаПраваяКолонкаДанныеДекларации");
		КонецЕсли;
		
		Если Не (ЭтоШины Или ЭтоБАД Или ЭтоПиво Или ЭтоБАПиво Или ЭтоМорепродукты) Тогда
			ЗависимыеОтСтатусаИСМПОтчетОНанесении.Добавить("ГруппаДанныеВводаВОборот");
		КонецЕсли;
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма,
			ЗависимыеОтСтатусаИСМПОтчетОНанесении,
			Не Форма.РедактированиеФормыНеДоступно И Не Форма.РежимИсправленияОшибокПослеПередачиКодов
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи")
			Или ДоступностьЭлементовДанныеДекларации);
			
		ДоступноРедактированиеСертификации = ЭтоВводВОборот
			И (Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесены")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично")
			Или Форма.СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи")); 
		
	ИначеЕсли ЭтоИмпортСФТС Тогда

		ЗависимыеОтСтатусаИмпортСФТС = Новый Массив;
		ЗависимыеОтСтатусаИмпортСФТС.Добавить("ГруппаПраваяКолонкаДанныеДекларации");
		ЗависимыеОтСтатусаИмпортСФТС.Добавить("ГруппаДанныеВводаВОборот");
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма,
			ЗависимыеОтСтатусаИмпортСФТС,
			Не Форма.РедактированиеФормыНеДоступно
			   И Не Форма.РежимИсправленияОшибокПослеПередачиКодов
			Или ДоступностьЭлементовДанныеДекларации);

	Иначе
		ЗависимыеОтСтатусаИСМП.Добавить("ГруппаВЕТИС");
		ЗависимыеОтСтатусаИСМП.Добавить("ГруппаПраваяКолонкаДанныеДекларации");
		ЗависимыеОтСтатусаИСМП.Добавить("ГруппаДанныеВводаВОборот");
	КонецЕсли;
	
	ЗависимыеОтСтатусаИСМП.Добавить("ОткрытьПодборПодменю"); 
	ЗависимыеОтСтатусаИСМП.Добавить("ЗаполнитьПараметрыТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("ЗаполнитьВидМеха");
	ЗависимыеОтСтатусаИСМП.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
	ЗависимыеОтСтатусаИСМП.Добавить("ТоварыГруппаПерезаполнитьПоОснованию");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаТорговоеОборудование");
	
	Если Не ДоступноРедактированиеСертификации Тогда
		ЗависимыеОтСтатусаИСМП.Добавить("ТоварыЗаполнитьДокументыСертификации");
		ЗависимыеОтСтатусаИСМП.Добавить("ЗаполнитьЛицензии");
	КонецЕсли;
	
	Если УказаниеРеквизитовНанесенияНаПиво Тогда
		ЗависимыеОтСтатусаИСМП.Добавить("ЗаполнитьПервичныйДокумент");
	КонецЕсли;
	
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыДанныеОтчета");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаТорговоеОборудованиеПредставлениеКИЗ");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаИСМП, Не Форма.РедактированиеФормыНеДоступно И Не Форма.РежимИсправленияОшибокПослеПередачиКодов);
	
	ЗависимыеОтСтатусаОбработанЧастичноИСМП = Новый Массив;
	ЗависимыеОтСтатусаОбработанЧастичноИСМП.Добавить("СтраницаОтчетПроизводственнойЛинии");
	Если ДоступноРедактированиеСертификации Тогда
		Исключения = Новый Массив;
		Исключения.Добавить(Элементы.ТоварыСертификация.Имя);
		Исключения.Добавить(Элементы.ТоварыЛицензияНаПользованиеНедрами.Имя);
		Исключения.Добавить(Элементы.ТоварыЗаполнитьДокументыСертификации.Имя);
		Исключения.Добавить(Элементы.ЗаполнитьЛицензии.Имя);
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма, Исключения, Истина);
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаТовары, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		Если Не Форма.РедактированиеФормыНеДоступно Тогда
			ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
				Элементы.ГруппаТовары, Не Форма.РежимИсправленияОшибокПослеПередачиКодов, Исключения);
		КонецЕсли;
	Иначе
		ЗависимыеОтСтатусаОбработанЧастичноИСМП.Добавить("СтраницаТовары");
	КонецЕсли;
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаОбработанЧастичноИСМП, Не Форма.РедактированиеФормыНеДоступно);
		
	Если Не Форма.РедактированиеФормыНеДоступно Тогда
		ЗависимыеОтДальнейшегоДействияИСМП = Новый Массив;
		ЗависимыеОтДальнейшегоДействияИСМП.Добавить("КоманднаяПанельОтчетПроизводственнойЛинии");
		ЗависимыеОтДальнейшегоДействияИСМП.Добавить("ДанныеОтчетаПроизводственнойЛинииНормализованноеЗначениеШтрихкода");
		ЗависимыеОтДальнейшегоДействияИСМП.Добавить("ДанныеОтчетаПроизводственнойЛинииНормализованноеЗначениеШтрихкодаУпаковки");
		ЗависимыеОтДальнейшегоДействияИСМП.Добавить("ДанныеОтчетаПроизводственнойЛинииТекстОшибки");
		Если Не ДоступноРедактированиеСертификации Тогда
			ЗависимыеОтДальнейшегоДействияИСМП.Добавить("ГруппаТовары");
		КонецЕсли;
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
			ЗависимыеОтДальнейшегоДействияИСМП, Не Форма.РежимИсправленияОшибокПослеПередачиКодов);
	КонецЕсли;
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ОткрытьПодборПодменю");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ЗаполнитьПараметрыТовары");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗагрузитьИзВнешнегоФайла");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыГруппаПерезаполнитьПоОснованию");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюУдалить");

	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаПроверкиИПодбора,
		Не (Форма.РедактированиеФормыНеДоступно Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма))
			И Не Форма.РежимИсправленияОшибокПослеПередачиКодов);
	
	Если Форма.РедактированиеФормыНеДоступно
		Или Не Форма.ПравоИзменения Тогда
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
		Элементы.ПредставлениеКИЗВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	ИначеЕсли Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Истина;
		Элементы.ПредставлениеКИЗВозобновитьПодборМаркируемойПродукции.Доступность = Истина;
	Иначе
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
		Элементы.ПредставлениеКИЗВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыСтатусПроверкиГосИС.Видимость = Не Форма.РедактированиеФормыНеДоступно;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НастройкиВыполненияПодключаемыхКомандИС") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)
	
	Если Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется")
		Или Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПредставленийGTINОстатки()
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ") Тогда
		ЗаполнитьТаблицуПредставленийНоменклатурыТоварыИзНатуральногоМеха();
	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков
		Или Объект.Операция = Перечисления.ВидыОперацийИСМП.Агрегация
		Или (Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак
		И ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено) Тогда
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			Объект.Товары, Объект.Организация, Объект.ВидПродукции);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредставленийНоменклатурыТоварыИзНатуральногоМеха()
	
	ПредставлениеКИЗ.Загрузить(РегистрыСведений.ПулКодовМаркировкиСУЗ.ЗаполнитьТаблицуПредставленийКИЗ(Объект.ШтрихкодыУпаковок.Выгрузить()));
	КоличествоСтрокПредставлениеКИЗ = ПредставлениеКИЗ.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивGTINИзКэшаОписанияОстатков(Организация, ВидПродукции)
	Возврат РегистрыСведений.КэшОписанияОстатковИСМП.МассивGTINОписанияОстатков(Организация, ВидПродукции);
КонецФункции

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ПрименитьКешШтрихкодовУпаковок();
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)
	
	Если Форма.ОтборСтрок = "СОшибками" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьОшибки", Истина);
		Форма.Элементы.ДанныеОтчетаПроизводственнойЛинии.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.ДанныеОтчетаПроизводственнойЛинии.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУпаковкиОтчетаПроизводственнойЛинии(ИдентификаторыСтрок)
	
	ИсточникДанных = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		СтрокаДанныхОтчета = Объект.ДанныеОтчетаПроизводственнойЛинии.НайтиПоИдентификатору(ИдентификаторСтроки);
		ИсточникДанных.Добавить(
			Новый Структура(
				"Штрихкод, ШтрихкодУпаковки",
				СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкода, СтрокаДанныхОтчета.НормализованноеЗначениеШтрихкодаУпаковки));
	КонецЦикла;
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ВыделенныеСтроки", ИсточникДанных);
	ПараметрыОбработки.Вставить("РежимОбработки", РежимУдаленияСтрокиОтчета);
	
	ДлительнаяОперация = ОбработатьУпаковкиНаСервере(ИсточникДанных, ПараметрыОбработки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеОбработкиОтчетаПроизводственнойЛинии", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьУпаковкиНаСервере(ВыделенныеСтроки, ПараметрыОбработки)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Обработка строк отчета производственной линии'");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВыделенныеСтроки", ПараметрыОбработки.ВыделенныеСтроки);
	ПараметрыЗаполнения.Вставить("РежимОбработки",   ПараметрыОбработки.РежимОбработки);
	ПараметрыЗаполнения.Вставить("Ссылка",           Объект.Ссылка);
	
	ДанныеОтчета = Объект.ДанныеОтчетаПроизводственнойЛинии.Выгрузить(
		,
		"ЗначениеШтрихкода, ЗначениеШтрихкодаУпаковки,
		|НормализованноеЗначениеШтрихкода, НормализованноеЗначениеШтрихкодаУпаковки,
		|ФорматBase64,
		|ТекстОшибкиЗначениеШтрихкода, ТекстОшибкиЗначениеШтрихкодаУпаковки");
	ПараметрыЗаполнения.Вставить("ДанныеОтчета", ДанныеОтчета);
	
	РезультатВыполнения = ДлительныеОперации.ВыполнитьВФоне(
		"Документы.МаркировкаТоваровИСМП.ПодготовитьДанныеЗаполненияОтчетПроизводственноЛинии",
		ПараметрыЗаполнения, ПараметрыВыполнения);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОбработанныеДанныеОтчета(АдресРезультата, ДополнительныеПараметры)
	
	ДанныеОтчета = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеОтчета);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии();
	Модифицированность = Истина;
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сертификация

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок, ВариантУточненияДанных = "Сертификация")
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидПродукции",           Объект.ВидПродукции);
	ПараметрыОткрытия.Вставить("ВариантУточненияДанных", ВариантУточненияДанных);
	
	Если ВариантУточненияДанных = "Сертификация" Тогда
		ПараметрыОткрытия.Вставить("ВидСертификации",   ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ДекларацияСоответствия"));
		ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
		ПараметрыОткрытия.Вставить("НомерСертификации", "");
		ПараметрыОткрытия.Вставить("НомерСкважины",     "");
		ПараметрыОткрытия.Вставить("ИспользоватьНомерСкважины", ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект));
	ИначеЕсли ВариантУточненияДанных = "Лицензия" Тогда
		ПараметрыОткрытия.Вставить("НомерЛицензии", "");
		ПараметрыОткрытия.Вставить("ДатаЛицензии",  Дата('00010101'));
	ИначеЕсли ВариантУточненияДанных = "ПаспортСоответствия" Тогда
		ПараметрыОткрытия.Вставить("КемВыдан",          "");
		ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
		ПараметрыОткрытия.Вставить("НомерСертификации", "");
	КонецЕсли;
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		
		Если ВариантУточненияДанных = "Сертификация" Тогда
			ПараметрыОткрытия.ВидСертификации   = ВыбраннаяСтрока.ВидДокументаСертификации;
			ПараметрыОткрытия.ДатаСертификации  = ВыбраннаяСтрока.ДатаДокументаСертификации;
			ПараметрыОткрытия.НомерСертификации = ВыбраннаяСтрока.НомерДокументаСертификации;
			ПараметрыОткрытия.НомерСкважины     = ВыбраннаяСтрока.НомерСкважины;
		ИначеЕсли ВариантУточненияДанных = "Лицензия" Тогда
			ПараметрыОткрытия.НомерЛицензии = ВыбраннаяСтрока.НомерЛицензииНаПользованиеНедрами;
			ПараметрыОткрытия.ДатаЛицензии  = ВыбраннаяСтрока.ДатаЛицензииНаПользованиеНедрами;
		ИначеЕсли ВариантУточненияДанных = "ПаспортСоответствия" Тогда
			ПараметрыОткрытия.КемВыдан          = ВыбраннаяСтрока.КемВыданПаспортСоответствия;
			ПараметрыОткрытия.ДатаСертификации  = ВыбраннаяСтрока.ДатаПаспортаСоответствия;
			ПараметрыОткрытия.НомерСертификации = ВыбраннаяСтрока.НомерПаспортаСоответствия;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок, ВариантУточненияДанных", ИдентификаторыСтрок, ВариантУточненияДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияТаможеннойДекларации(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",   НСтр("ru = 'Таможенная декларация'"));
	ПараметрыОткрытия.Вставить("ДлинаНомера", 50);
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		ПараметрыОткрытия.Вставить("Дата",  ВыбраннаяСтрока.ДатаДекларации);
		ПараметрыОткрытия.Вставить("Номер", ВыбраннаяСтрока.РегистрационныйНомерДекларации);
	Иначе
		ПараметрыОткрытия.Вставить("Дата",  Дата('00010101'));
		ПараметрыОткрытия.Вставить("Номер", "");
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеТаможеннойДекларацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.УточнениеДатаНомер",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеТаможеннойДекларации(РегистрационныйНомерДекларации, ДатаДекларации)
	
	ШаблонПредставление = НСтр("ru = '№%1 от %2'");
	
	Если ЗначениеЗаполнено(РегистрационныйНомерДекларации)
		И ЗначениеЗаполнено(ДатаДекларации) Тогда
		
		ПредставлениеРегистрации = СтрШаблон(
			ШаблонПредставление,
			РегистрационныйНомерДекларации,
			Формат(ДатаДекларации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеРегистрации;
	
КонецФункции

&НаСервере
Процедура СоздатьКэшТаможеннойДекларации()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшТаможеннойДекларацииКлиентСервер(
			ЭтотОбъект, СтрокаТовары.РегистрационныйНомерДекларации,
			СтрокаТовары.ДатаДекларации);
		
		СтрокаТовары.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			СтрокаТовары.РегистрационныйНомерДекларации,
			СтрокаТовары.ДатаДекларации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьРегистрациюДТВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораТаможеннойДекларации(Номенклатура)
	
	Элементы.ТоварыТаможеннаяДекларация.СписокВыбора.Очистить();
	Для Каждого СтрокаКэша Из КешТаможеннойДекларации Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаКэша.Номенклатура)
			Или Номенклатура = СтрокаКэша.Номенклатура Тогда
			Элементы.ТоварыТаможеннаяДекларация.СписокВыбора.Добавить(СтрокаКэша.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшТаможеннойДекларацииКлиентСервер(Форма, РегистрационныйНомерДекларации, ДатаДекларации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(РегистрационныйНомерДекларации)
		И Не ЗначениеЗаполнено(ДатаДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("РегистрационныйНомерДекларации, ДатаДекларации",
		РегистрационныйНомерДекларации, ДатаДекларации);
	
	НайденныеСтроки = Форма.КешТаможеннойДекларации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КешТаможеннойДекларации.Добавить();
		НоваяСтрока.РегистрационныйНомерДекларации = РегистрационныйНомерДекларации;
		НоваяСтрока.ДатаДекларации                 = ДатаДекларации;
		НоваяСтрока.Номенклатура                   = Номенклатура;
		НоваяСтрока.Представление                  = ПредставлениеТаможеннойДекларации(РегистрационныйНомерДекларации, ДатаДекларации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификацииЛицензииНаНедра()
	
	ИспользоватьПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(ЭтотОбъект);
	ИспользоватьНомерСкважины = ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект);
	
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		
		Если ЗначениеЗаполнено(Объект.ВидДокументаСертификации) Тогда
			
			Сертификация = ПредставлениеСертификации(Объект, ИспользоватьНомерСкважины);
			
		КонецЕсли;
		
		Если ИспользоватьПаспортСоответствия Тогда
			
			ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
			ДанныеЗаполненияСертификации.ДатаСертификации  = Объект.ДатаПаспортаСоответствия;
			ДанныеЗаполненияСертификации.НомерСертификации = Объект.НомерПаспортаСоответствия;
			ДанныеЗаполненияСертификации.КемВыдан          = Объект.КемВыданПаспортСоответствия;
			ПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.НомерЛицензииНаПользованиеНедрами) Тогда
			
			ДанныеЗаполненияЛицензииНаНедра = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияЛицензииНаНедра();
			ДанныеЗаполненияЛицензииНаНедра.НомерЛицензииНаПользованиеНедрами = Объект.НомерЛицензииНаПользованиеНедрами;
			ДанныеЗаполненияЛицензииНаНедра.ДатаЛицензииНаПользованиеНедрами  = Объект.ДатаЛицензииНаПользованиеНедрами;
			ЛицензияНаПользованиеНедрами = ПредставлениеЛицензии(Объект);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Строка Из Объект.Товары Цикл
			
			Строка.Сертификация = ПредставлениеСертификации(Строка, ИспользоватьНомерСкважины);
			Если ИспользоватьНомерСкважины Тогда
				Строка.ЛицензияНаПользованиеНедрами = ПредставлениеЛицензии(Строка);
			КонецЕсли;
			
			Если ИспользоватьПаспортСоответствия
				И ЗначениеЗаполнено(Строка.КемВыданПаспортСоответствия) Тогда
				
				ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
				ДанныеЗаполненияСертификации.ДатаСертификации  = Строка.ДатаПаспортаСоответствия;
				ДанныеЗаполненияСертификации.НомерСертификации = Строка.НомерПаспортаСоответствия;
				ДанныеЗаполненияСертификации.КемВыдан          = Строка.КемВыданПаспортСоответствия;
				Строка.ПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(ДанныеСтроки, ИспользоватьНомерСкважины)
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ВидДокументаСертификации) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
	ДанныеЗаполненияСертификации.ВидСертификации   = ДанныеСтроки.ВидДокументаСертификации;
	ДанныеЗаполненияСертификации.ДатаСертификации  = ДанныеСтроки.ДатаДокументаСертификации;
	ДанныеЗаполненияСертификации.НомерСертификации = ДанныеСтроки.НомерДокументаСертификации;
	ДанныеЗаполненияСертификации.НомерСкважины     = ДанныеСтроки.НомерСкважины;
	ДанныеЗаполненияСертификации.ИспользоватьНомерСкважины = ИспользоватьНомерСкважины;
	
	Возврат ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеЛицензии(ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.НомерЛицензииНаПользованиеНедрами) Тогда
		Возврат "";
	КонецЕсли;
	
	ДанныеЗаполненияЛицензииНаНедра = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияЛицензииНаНедра();
	ДанныеЗаполненияЛицензииНаНедра.НомерЛицензииНаПользованиеНедрами = ДанныеСтроки.НомерЛицензииНаПользованиеНедрами;
	ДанныеЗаполненияЛицензииНаНедра.ДатаЛицензииНаПользованиеНедрами  = ДанныеСтроки.ДатаЛицензииНаПользованиеНедрами;
	
	Возврат ИнтеграцияИСМПКлиентСервер.ПредставлениеЛицензииНаНедра(ДанныеЗаполненияЛицензииНаНедра);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеТаможеннойДекларации()
	 
	Если Не Объект.Операция = Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		Если Не ЗначениеЗаполнено(Строка.РегистрационныйНомерДекларации) Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			Строка.РегистрационныйНомерДекларации, Строка.ДатаДекларации);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыДанныеОтчетаПроизводственнойЛинии()
	
	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РежимУдаленияСтрокиОтчета) Тогда
		РежимУдаленияСтрокиОтчета = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибокОтчетПроизодственнойЛинииИС.РасформироватьАгрегат");
	КонецЕсли;
	
	ДанныеОтчетаЗагруженыВРегистр = Ложь;
	Если Не Объект.Ссылка.Пустая() Тогда

		Если Объект.ДанныеОтчетаПроизводственнойЛинии.Количество() Тогда

			Для Каждого СтрокаОтчета Из Объект.ДанныеОтчетаПроизводственнойЛинии Цикл
				СтрокаОтчета.ПредставлениеОшибки = СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода
					+ ?(ЗначениеЗаполнено(СтрокаОтчета.ТекстОшибкиЗначениеШтрихкода), Символы.ПС, "")
					+ СтрокаОтчета.ТекстОшибкиЗначениеШтрихкодаУпаковки;
				СтрокаОтчета.ЕстьОшибки = ЗначениеЗаполнено(СтрокаОтчета.ПредставлениеОшибки);
			КонецЦикла;

		Иначе

			ДанныеОтчетаЗагруженыВРегистр = ВосстановитьДанныеОтчетаИзРегистра();

		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьДанныеОтчетаИзРегистра()

	ДанныеРегистра = РегистрыСведений.ДанныеОтчетаПроизводственнойЛинииИСМП.ПолучитьДанныеПоДокументу(Объект.Ссылка, Истина);
	Если ДанныеРегистра.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Объект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеРегистра);
		Возврат Истина;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантУточненияДанных = ДополнительныеПараметры.ВариантУточненияДанных;
	
	Если ВариантУточненияДанных = "Лицензия" Тогда
		ДанныеЗаполнения = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияЛицензииНаНедра();
		ДанныеЗаполнения.НомерЛицензииНаПользованиеНедрами = РезультатВыбора.НомерЛицензии;
		ДанныеЗаполнения.ДатаЛицензииНаПользованиеНедрами  = РезультатВыбора.ДатаЛицензии;
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			
			ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения, "НомерЛицензииНаПользованиеНедрами, ДатаЛицензииНаПользованиеНедрами");
			ЛицензияНаПользованиеНедрами = ИнтеграцияИСМПКлиентСервер.ПредставлениеЛицензииНаНедра(ДанныеЗаполнения);
			
		Иначе
			
			ПредставлениеЛицензии = ИнтеграцияИСМПКлиентСервер.ПредставлениеЛицензииНаНедра(ДанныеЗаполнения);
			
			Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
				
				ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ДанныеЗаполнения, "НомерЛицензииНаПользованиеНедрами, ДатаЛицензииНаПользованиеНедрами");
				ДанныеСтроки.ЛицензияНаПользованиеНедрами = ПредставлениеЛицензии;
				ИнтеграцияИСМПКлиентСервер.ОбновитьКэшЛицензииНаПользованиеНедрами(ЭтотОбъект, ДанныеЗаполнения);
				
			КонецЦикла;
			
			
			НастройкиРаботыССертификацией = ИнтеграцияИСМПКлиент.НастройкиРаботыССертификацией(
				"КэшЛицензийНаПользованиеНедрами",
				"ТоварыЛицензияНаПользованиеНедрами");
			
			ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект, НастройкиРаботыССертификацией);
			
		КонецЕсли;
		
	ИначеЕсли ВариантУточненияДанных = "ПаспортСоответствия" Тогда
		
		ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполненияСертификации, РезультатВыбора);
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			
			Объект.КемВыданПаспортСоответствия = ДанныеЗаполненияСертификации.КемВыдан;
			Объект.НомерПаспортаСоответствия   = ДанныеЗаполненияСертификации.НомерСертификации;
			Объект.ДатаПаспортаСоответствия    = ДанныеЗаполненияСертификации.ДатаСертификации;
			
			ПаспортСоответствия = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
			
		Иначе
			
			ПредставлениеПаспортаСоответствия = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);	
			
			Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
				
				ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
				ДанныеСтроки.КемВыданПаспортСоответствия = ДанныеЗаполненияСертификации.КемВыдан;
				ДанныеСтроки.НомерПаспортаСоответствия   = ДанныеЗаполненияСертификации.НомерСертификации;
				ДанныеСтроки.ДатаПаспортаСоответствия    = ДанныеЗаполненияСертификации.ДатаСертификации;
				ДанныеСтроки.ПаспортСоответствия         = ПредставлениеПаспортаСоответствия;
				
				ИнтеграцияИСМПКлиентСервер.ОбновитьКэшСертификации(ЭтотОбъект, ДанныеЗаполненияСертификации, ДанныеСтроки.Номенклатура);
				
			КонецЦикла;
			
			ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект,
				ИнтеграцияИСМПКлиент.НастройкиРаботыССертификацией("КэшСертификации", "ТоварыПаспортСоответствия"));
			
		КонецЕсли;
		
	Иначе
		
		ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполненияСертификации, РезультатВыбора);
		ДанныеЗаполненияСертификации.ИспользоватьНомерСкважины = ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект);
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			
			Объект.ВидДокументаСертификации     = РезультатВыбора.ВидСертификации;
			Объект.НомерДокументаСертификации   = РезультатВыбора.НомерСертификации;
			Объект.ДатаДокументаСертификации    = РезультатВыбора.ДатаСертификации;
			Объект.НомерСкважины                = РезультатВыбора.НомерСкважины;
			
			Сертификация = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
			
		Иначе
			
			ПредставлениеСертификации = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);	
			
			Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
				
				ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
				ДанныеСтроки.ВидДокументаСертификации     = РезультатВыбора.ВидСертификации;
				ДанныеСтроки.НомерДокументаСертификации   = РезультатВыбора.НомерСертификации;
				ДанныеСтроки.ДатаДокументаСертификации    = РезультатВыбора.ДатаСертификации;
				ДанныеСтроки.НомерСкважины                = РезультатВыбора.НомерСкважины;
				ДанныеСтроки.Сертификация                 = ПредставлениеСертификации;
				
				ИнтеграцияИСМПКлиентСервер.ОбновитьКэшСертификации(ЭтотОбъект, ДанныеЗаполненияСертификации, ДанныеСтроки.Номенклатура);
				
			КонецЦикла;
			
			ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеТаможеннойДекларацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.РегистрационныйНомерДекларации = РезультатВыбора.Номер;
		ДанныеСтроки.ДатаДекларации  = РезультатВыбора.Дата;
		ДанныеСтроки.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
			ДанныеСтроки.РегистрационныйНомерДекларации,
			ДанныеСтроки.ДатаДекларации);
	КонецЦикла;
	
	ОбновитьКэшТаможеннойДекларацииКлиентСервер(
		ЭтотОбъект, ДанныеСтроки.РегистрационныйНомерДекларации, ДанныеСтроки.ДатаДекларации);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ОбновитьСписокВыбораТаможеннойДекларации(ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ПервичныйДокумент

&НаСервере
Процедура ЗаполнитьПредставлениеПервичногоДокумента()
	
	Для Каждого Строка Из Объект.Товары Цикл
		Строка.ПервичныйДокумент = ПредставлениеПервичногоДокумента(
			Строка.НомерПервичногоДокумента, Строка.ДатаПервичногоДокумента);
	КонецЦикла;
	
	ОбновитьСписокВыбораПервичногоДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияПервичногоДокумента(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок",   НСтр("ru = 'Первичный документ'"));
	ПараметрыОткрытия.Вставить("ДлинаНомера", 255);
	
	Если ИдентификаторыСтрок.Количество() = 1 Тогда
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
		ПараметрыОткрытия.Вставить("Номер", ВыбраннаяСтрока.НомерПервичногоДокумента);
		ПараметрыОткрытия.Вставить("Дата",  ВыбраннаяСтрока.ДатаПервичногоДокумента);
	Иначе
		ПараметрыОткрытия.Вставить("Номер", "");
		ПараметрыОткрытия.Вставить("Дата",  Дата('00010101'));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеПервичногоДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.МаркировкаТоваровИСМП.Форма.УточнениеДатаНомер",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПервичногоДокументаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.НомерПервичногоДокумента = РезультатВыбора.Номер;
		ДанныеСтроки.ДатаПервичногоДокумента  = РезультатВыбора.Дата;
		ДанныеСтроки.ПервичныйДокумент = ПредставлениеПервичногоДокумента(
			ДанныеСтроки.НомерПервичногоДокумента,
			ДанныеСтроки.ДатаПервичногоДокумента);
	КонецЦикла;
	
	ОбновитьСписокВыбораПервичногоДокумента(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПервичногоДокумента(НомерПервичногоДокумента, ДатаПервичногоДокумента)
	
	Результат = "";
	
	Если ЗначениеЗаполнено(НомерПервичногоДокумента)
		И ЗначениеЗаполнено(ДатаПервичногоДокумента) Тогда
		Результат = СтрШаблон(НСтр("ru = '№%1 от %2'"),
			НомерПервичногоДокумента,
			Формат(ДатаПервичногоДокумента, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСписокВыбораПервичногоДокумента(Форма)
	
	Элемент = Форма.Элементы.ТоварыПервичныйДокумент;
	Элемент.СписокВыбора.Очистить();
	
	МассивПредставлений = Новый Массив;
	
	Для Каждого Строка Из Форма.Объект.Товары Цикл
		Если ЗначениеЗаполнено(Строка.ПервичныйДокумент)
			И МассивПредставлений.Найти(Строка.ПервичныйДокумент) = Неопределено Тогда
			Значение = Новый Структура;
			Значение.Вставить("НомерПервичногоДокумента", Строка.НомерПервичногоДокумента);
			Значение.Вставить("ДатаПервичногоДокумента",  Строка.ДатаПервичногоДокумента);
			Элемент.СписокВыбора.Добавить(Значение, Строка.ПервичныйДокумент);
			МассивПредставлений.Добавить(Строка.ПервичныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеИСМПКлиент.ОбработатьСобытиеПотоковойПечати(ЭтотОбъект, ИсходныеДанные, ПараметрыСканирования);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьКодМаркировкиСервер(ИсходныеДанные, КэшированныеЗначения, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработатьКодМаркировкиСервер(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                         = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	Если ШтрихкодированиеИСКлиент.НачатьПолучениеВесаАвтоматически(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения = Неопределено
		Или Не РезультатВыполнения.Результат Тогда
		ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
		Возврат;
	КонецЕсли;
	
	КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.Количество = РезультатВыполнения.Вес;
	КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода.ТребуетсяОбновлениеШтрихкода = Истина;
	
	Если РезультатВыполнения.Вес = 0
		Или ВесПредыдущегоВзвешивания = 0
		Или РезультатВыполнения.Вес = ВесПредыдущегоВзвешивания
		Или ШтрихкодированиеИСМПКлиентСервер.ТребуетсяУточнениеДанных(КодМаркировкиДляУточнения) Тогда
		
		Если РезультатВыполнения.Вес <> 0 Тогда
			ВесПредыдущегоВзвешивания = РезультатВыполнения.Вес;
		КонецЕсли;
		ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
		
	Иначе
		
		ВесПредыдущегоВзвешивания = РезультатВыполнения.Вес;
		ДанныеШтрихкода = КодМаркировкиДляУточнения.РезультатОбработкиШтрихкода.ДанныеШтрихкода;
		
		КодМаркировкиДляУточнения = Неопределено;
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияОбработкиКодаМаркировки(), ДанныеШтрихкода);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ПослеОбработкиШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ДанныеВыбораПоМаркируемойПродукции<>Неопределено Тогда
			КлючиСвязи = Новый Структура(КлючСвязиСтатусаСтрок(ЭтотОбъект, ДанныеВыбораПоМаркируемойПродукции.Номенклатура));
			КлючиСвязи.Вставить("Номенклатура");
			КлючиСвязи.Вставить("Характеристика");
			КлючиСвязи.Вставить("Серия");
			ЗаполнитьЗначенияСвойств(КлючиСвязи, ДанныеВыбораПоМаркируемойПродукции);
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции) Тогда
				ДанныеВыбораПоМаркируемойПродукции.Свойство("ГоденДо", КлючиСвязи.СрокГодности);
			КонецЕсли;
			СтрокиТовар = Объект.Товары.НайтиСтроки(КлючиСвязи);
			Если СтрокиТовар.Количество() И СтрокиТовар[0].СтатусПроверкиГосИС = 1 Тогда
				ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ЭтотОбъект,,Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	Если РезультатОбработкиШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьДобавленныеИзмененныеСтроки(
		РезультатОбработкиШтрихкода.ДобавленныеСтроки, РезультатОбработкиШтрихкода.ИзмененныеСтроки, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавленныеИзмененныеСтроки(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения)
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ") Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект,,,КлючСвязиСтатусаСтрок(ЭтотОбъект));
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		ДобавленнаяСтрока.КоличествоУпаковок = 0;
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		СписокНоменклатуры.Добавить(ДобавленнаяСтрока.Номенклатура);
		
	КонецЦикла;
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		Если ИзмененнаяСтрока.Количество = 0 Тогда
			Объект.Товары.Удалить(ИзмененнаяСтрока);
		Иначе
			СобытияФормИСМППереопределяемый.ПриИзмененииКоличестваЕдиниц(
				ЭтотОбъект, ИзмененнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		КонецЕсли;
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество() Тогда
		
		ВременнаяТаблица = Объект.Товары.Выгрузить(ДобавленныеСтроки);
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамМаркировкиТоваровИСМП(
			ВременнаяТаблица, Объект);
		
		Если ВременнаяТаблица.Количество() Тогда
			ИнтеграцияИСМПКлиентСервер.ОбновитьКешСертификацииПоСтатистике(ЭтотОбъект, ВременнаяТаблица);
		КонецЕсли;
		
		ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
		ИнтеграцияИСМПКлиентСервер.ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(ЭтотОбъект, ДобавленныеСтроки);
		
	КонецЕсли;
	
	ЗаполнитьТаблицуПредставленийGTINОстатки();
	
КонецПроцедуры

//@skip-warning
&НаСервере
Функция Подключаемый_ВыполнитьДействие(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЭтотОбъект);
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

#КонецОбласти

#Область КэшСтроки

&НаСервере
Процедура ПрименитьКешШтрихкодовУпаковок()
	
	Если Не РедактированиеФормыНедоступно Тогда
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, , Истина, КлючСвязиСтатусаСтрок(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьКэшСтроки(Форма)
	
	Форма.ДанныеКешаСтроки = Новый Структура;
	Форма.ДанныеКешаСтроки.Вставить("Номенклатура");
	Форма.ДанныеКешаСтроки.Вставить("Характеристика");
	Форма.ДанныеКешаСтроки.Вставить("Серия");
	Форма.ДанныеКешаСтроки.Вставить("ИдентификаторПроисхожденияВЕТИС");
	Форма.ДанныеКешаСтроки.Вставить("СрокГодности");
	Форма.ДанныеКешаСтроки.Вставить("GTIN");
	Форма.ДанныеКешаСтроки.Вставить("СкоропортящаясяПродукция");
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПроверкиИПодбора

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыПроверкиПодбора()
	
	Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Истина;
	Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукцииПредставлениеКИЗ.Видимость = Истина;
	
	ТекстНадписи = "";
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить подбор и проверку маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			Элементы.ГруппаИнформацияОСканированииВДругойФормеПредставлениеКИЗ.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			Элементы.ГруппаИнформацияОСканированииВДругойФормеПредставлениеКИЗ.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи
		Или СтатусИСМП = Перечисления.СтатусыОбработкиМаркировкиТоваровИСМП.ПодтверждениеПоступленияКИЗОшибкаПередачи Тогда
		
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			Элементы.ГруппаИнформацияОСканированииВДругойФормеПредставлениеКИЗ.Видимость = Ложь;
			
		ИначеЕсли ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Подобрать и проверить маркированную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			Элементы.ГруппаИнформацияОСканированииВДругойФормеПредставлениеКИЗ.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
			Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукцииПредставлениеКИЗ.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
		Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукцииПредставлениеКИЗ.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		Элементы.ГруппаИнформацияОСканированииВДругойФормеПредставлениеКИЗ.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Заголовок = ТекстНадписи;
	Элементы.ПредставлениеКИЗДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Заголовок = ТекстНадписи;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь, ОбновитьСтатусПроверкиИПодбора = Истина)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП(ОбновитьСтатусПроверкиИПодбора);
		ОбновитьИнформациюОткрытияФормыПроверкиПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьНомерСтрокиОтчетПроизводственнойЛинии(Форма)

	Элементы = Форма.Элементы;
	Элементы.ДанныеОтчетаПроизводственнойЛинииНомерСтроки.Видимость = Не Форма.ДанныеОтчетаЗагруженыВРегистр;
	Элементы.ДанныеОтчетаПроизводственнойЛинииКлючЗаписи.Видимость  = Форма.ДанныеОтчетаЗагруженыВРегистр;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеВариантыЗаполненияДекларации(Форма)
	
	Объект = Форма.Объект;
	Если Объект.Операция <> ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Элементы.ВариантЗаполненияДекларации.СписокВыбора.Очистить();
	
	Элементы.ВариантЗаполненияДекларации.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК"), НСтр("ru = 'АТК'"));
	
	Элементы.ВариантЗаполненияДекларации.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки"), НСтр("ru = 'Коды маркировки'"));
	Элементы.ВариантЗаполненияДекларации.СписокВыбора.Добавить(
		ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок"), НСтр("ru = 'Упаковки'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВариантыВыполненияАгрегации()
	
	Элементы.ВариантВыполненияАгрегации.СписокВыбора.Очистить();
	
	Если Объект.Операция <> Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС Тогда
		Элементы.ВариантВыполненияАгрегации.СписокВыбора.Добавить(
			Перечисления.ВариантыВыполненияАгрегацииИСМП.ПустаяСсылка(),
			НСтр("ru = 'После ввода в оборот'"));
	КонецЕсли;
	
	Элементы.ВариантВыполненияАгрегации.СписокВыбора.Добавить(Перечисления.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот);
	Элементы.ВариантВыполненияАгрегации.СписокВыбора.Добавить(Перечисления.ВариантыВыполненияАгрегацииИСМП.НеТребуется);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	ДоступныОперацииНанесения                 = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Объект.ВидПродукции);
	ДоступноПолучениеПродукцииОтФизическихЛиц = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетПолучениеПродукцииОтФизическихЛиц(Объект.ВидПродукции);
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции);
	ЭтоОбувь = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь");
	ЭтоМех   = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	ЭтоПиво  = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	ЭтоТитановаяПродукция = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция");
	
	Элементы.Операция.СписокВыбора.Очистить();
	Элементы.ОперацияНанесения.СписокВыбора.Очистить();

	Если ДоступныОперацииНанесения
			И (ИспользуетсяПодсистемаВЕТИС Или Не ЭтоПродукцияПодконтрольнаяВЕТИС) Тогда
		
		Для Каждого ОперацияНанесения Из ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(Ложь, ЭтоМех) Цикл
			Элементы.Операция.СписокВыбора.Добавить(ОперацияНанесения);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не ЭтоМех И Не ЭтоТитановаяПродукция Тогда
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.Агрегация);
	КонецЕсли;
	
	Если ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(Объект.ВидПродукции, Ложь, Истина, Ложь) Тогда
		
		Если ВидыПродукцииОперацииПроизводствоВнеЕАЭС().Получить(Объект.ВидПродукции) <> Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС);
		КонецЕсли;
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФ);
		
		Если ВидыПродукцииОперацииИмпортСФТС().Получить(Объект.ВидПродукции) <> Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		ИначеЕсли ЭтоМех Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех);
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ);
		КонецЕсли;
		
		Если ДоступныОперацииНанесения Тогда
			
			Элементы.ОперацияНанесения.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ПустаяСсылка(),
				НСтр("ru = '<Выполнена независимо>'"));
			Для Каждого ОперацияНанесения Из ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(Ложь, ЭтоМех) Цикл
				Элементы.ОперацияНанесения.СписокВыбора.Добавить(ОперацияНанесения);
			КонецЦикла;
		
		КонецЕсли;
		
		ИспользуетсяПереработкаНаСтороне = Истина;
		ИнтеграцияИСМППереопределяемый.ИспользуетсяПереработкаНаСтороне(ИспользуетсяПереработкаНаСтороне);
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговору);
		
		Если ИспользуетсяПереработкаНаСтороне Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПроизводствоРФПоДоговоруНаСторонеЗаказчика);
		КонецЕсли;
		
		Если ДоступноПолучениеПродукцииОтФизическихЛиц Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотПолучениеПродукцииОтФизическихЛиц);
		КонецЕсли;
		
		// Недоступно для отчетов производственной линии: требует цены/суммы
		Если (ИспользуетсяПодсистемаВЕТИС Или Не ЭтоПродукцияПодконтрольнаяВЕТИС) И Не ЭтоМех И Не ЭтоТитановаяПродукция Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции) Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				Перечисления.ВидыОперацийИСМП.ВводВОборотМаркировкаОстатков);
		КонецЕсли;
		
	ИначеЕсли ЭтоПиво Тогда
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотИмпортСФТС);
		
		Элементы.Операция.СписокВыбора.Добавить(
			Перечисления.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля);
		
		Если ДоступныОперацииНанесения Тогда
			
			Элементы.ОперацияНанесения.СписокВыбора.Добавить(Перечисления.ВидыОперацийИСМП.ПустаяСсылка(),
				НСтр("ru = '<Выполнена независимо>'"));
			Для Каждого ОперацияНанесения Из ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(Ложь, ЭтоМех) Цикл
				Элементы.ОперацияНанесения.СписокВыбора.Добавить(ОперацияНанесения);
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ДанныеДокументаАдрес);
	Иначе
		ДанныеДокумента = Неопределено;
	КонецЕсли;
	
	Если ДанныеДокумента <> Неопределено
		И ДанныеДокумента.ВидПродукции = Объект.ВидПродукции Тогда
		
		Если ЗначениеЗаполнено(ДанныеДокумента.Операция)
			И Элементы.Операция.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.Операция) = Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				ДанныеДокумента.Операция);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеДокумента.ОперацияНанесения)
			И Элементы.ОперацияНанесения.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.ОперацияНанесения) = Неопределено Тогда
			Элементы.ОперацияНанесения.СписокВыбора.Добавить(
				ДанныеДокумента.ОперацияНанесения);
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ЭлементСписка Из Элементы.Операция.СписокВыбора Цикл
		ЭлементСписка.Представление = ИнтеграцияИСМПКлиентСервер.ПредставлениеВидаОперацииИСМП(ЭлементСписка.Значение);
	КонецЦикла;
	
	Элементы.Операция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьШапку = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ");
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Или ЗаполнитьШапку Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь, ЗаполнитьТовары, ЗаполнитьШапку);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормы()
	
	ЗаполнитьПредставлениеСертификацииЛицензииНаНедра();
	ЗаполнитьПредставлениеТаможеннойДекларации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина, ЗаполнитьТовары = Истина, ЗаполнитьШапку = Ложь)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер(ЗаполнитьТовары, ЗаполнитьШапку);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер(ЗаполнитьТовары = Истина, ЗаполнитьШапку = Ложь)
	
	Если ЗаполнитьТовары И Объект.Операция <> Перечисления.ВидыОперацийИСМП.ПодтверждениеПоступленияКИЗ Тогда
		
		ТекущийОбъект = РеквизитФормыВЗначение("Объект");
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтчетПроизводственнойЛинии", Истина);
		КонецЕсли;
		ТекущийОбъект.Заполнить(Объект.ДокументОснование);
		
		ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
		
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Если ЗаполнитьШапку Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование, "Дата,Номер");
		Объект.ДатаПервичногоДокумента  = Реквизиты.Дата;
		Объект.НомерПервичногоДокумента = Реквизиты.Номер;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПродукцииНаСервере(ПерезаполнитьПоОснованию)
	
	ИнтеграцияИСМП.НастроитьВидимостьКолонкиКоличестваКодовМаркировки(ЭтотОбъект);
	
	ЗаполнитьДоступныеОперации();
	Если Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
		Объект.Операция = Элементы.Операция.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	ЗаполнитьДоступныеВариантыЗаполненияДекларации(ЭтотОбъект);
	Если Элементы.ВариантЗаполненияДекларации.СписокВыбора.НайтиПоЗначению(Объект.ВариантЗаполненияДекларации) = Неопределено Тогда
		Объект.ВариантЗаполненияДекларации = Элементы.ВариантЗаполненияДекларации.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	ЗаполнитьДоступныеВариантыВыполненияАгрегации();
	Если Элементы.ВариантВыполненияАгрегации.СписокВыбора.НайтиПоЗначению(Объект.ВариантВыполненияАгрегации) = Неопределено Тогда
		Объект.ВариантВыполненияАгрегации = Элементы.ВариантВыполненияАгрегации.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	ОперацииНанесенияПоВидуПродукции = ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки(
		Ложь, Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
	
	Если ЗначениеЗаполнено(Объект.ОперацияНанесения)
		И (Не ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(Объект.ВидПродукции)
		Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено
		Или Не ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Объект.Операция)
		Или ОперацииНанесенияПоВидуПродукции.Найти(Объект.ОперацияНанесения) = Неопределено) Тогда
		Объект.ОперацияНанесения = Неопределено;
		Объект.ОперацияНанесенияТолькоДляНаборов = Ложь;
		ОбновитьПредставлениеТребуетсяИндивидуализация(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьДальнейшиеДействия();
	
	Если ПерезаполнитьПоОснованию И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПерезаполнитьПоОснованиюСервер();
	ИначеЕсли Объект.ОтчетПроизводственнойЛинии Тогда
		НоменклатураПриИзмененииСервер(Ложь);
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОбновитьПредставленияИКеши();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОперацииНанесенияЗавершение(РезультатВопроса, Действия) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОперацияНанесения = ПредыдущаяОперация;
		Возврат;
	КонецЕсли;
	
	Если Действия.ОчиститьШтрихкодыУпаковок Тогда
		Объект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	ТребуетсяОбновитьДальнейшиеДействия = ЗначениеЗаполнено(Объект.ОперацияНанесения) <> ЗначениеЗаполнено(ПредыдущаяОперация);
	Если ТребуетсяОбновитьДальнейшиеДействия Тогда
		
		ОперацияНанесенияПриИзмененииНаСервере();
		
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииТребуетсяИндивидуализацияЗавершение(РезультатВопроса, Действия) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТребуетсяИндивидуализация = Не ТребуетсяИндивидуализация;
		Возврат;
	КонецЕсли;
	
	Если Действия.ОчиститьШтрихкодыУпаковок Тогда
		Объект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	Если ТребуетсяИндивидуализация Тогда
		Объект.ОперацияНанесения = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ");
	Иначе
		Объект.ОперацияНанесения = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ПустаяСсылка");
	КонецЕсли;
	
	ОперацияНанесенияПриИзмененииНаСервере();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОперацииЗавершение(РезультатВопроса, Действия) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Операция = ПредыдущаяОперация;
		Возврат;
	КонецЕсли;
	
	Если Действия.ОчиститьШтрихкодыАТК Тогда
		Объект.ШтрихкодыАТК.Очистить();
		Объект.ХешСумма = "";
	КонецЕсли;
	
	ОбработатьИзменениеНаСервере = Ложь;
	Если Действия.ОчиститьШтрихкодыУпаковок Тогда
		Объект.ШтрихкодыУпаковок.Очистить();
		СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось");
		ОбработатьИзменениеНаСервере = Истина;
	КонецЕсли;

	Если Действия.ОчиститьТовары Тогда
		ПредставлениеКИЗ.Очистить();
		КоличествоСтрокПредставлениеКИЗ = 0;
		Объект.Товары.Очистить();
		ОбработатьИзменениеНаСервере = Истина;
	КонецЕсли;
	
	Если Действия.ОчиститьДокументОснование Тогда
		Объект.ДокументОснование = Неопределено;
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
			ОчиститьСписокВыбораЭлементовШапки();
		КонецЕсли;
		ОбработатьИзменениеНаСервере = Истина;
	ИначеЕсли Действия.ПроверитьТипИденификатораВетис Тогда
		ОбработатьИзменениеНаСервере = Истина;
	КонецЕсли;
	
	ЗаполнитьДоступныеВариантыЗаполненияДекларации(ЭтотОбъект);
	Если Элементы.ВариантЗаполненияДекларации.СписокВыбора.НайтиПоЗначению(Объект.ВариантЗаполненияДекларации) = Неопределено Тогда
		Объект.ВариантЗаполненияДекларации = Элементы.ВариантЗаполненияДекларации.СписокВыбора.Получить(0).Значение;
		ОбработатьИзменениеНаСервере = Истина;
		Действия.ИзменениеДальнейшегоДействия = Истина;
	КонецЕсли;
	
	ЗаполнитьДоступныеВариантыВыполненияАгрегации();
	Если Элементы.ВариантВыполненияАгрегации.СписокВыбора.НайтиПоЗначению(Объект.ВариантВыполненияАгрегации) = Неопределено Тогда
		Объект.ВариантВыполненияАгрегации = Элементы.ВариантВыполненияАгрегации.СписокВыбора.Получить(0).Значение;
		ОбработатьИзменениеНаСервере = Истина;
		Действия.ИзменениеДальнейшегоДействия = Истина;
	КонецЕсли;
	
	Если ОбработатьИзменениеНаСервере Тогда
		ОперацияПриИзмененииНаСервере(Действия);
	ИначеЕсли Действия.ОчиститьТНВЭД Или Действия.ОчиститьВидМеха Тогда
		ОчиститьНеиспользуемыеКолонкиТаблицыТовары(ЭтотОбъект, Действия);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ОперацияНанесения)
		И (ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция) <> Неопределено
		Или Не ДоступнаОперацияНанесенияПоВидуОперацииИСМП(Объект.Операция)) Тогда
		Объект.ОперацияНанесения = Неопределено;
		Объект.ОперацияНанесенияТолькоДляНаборов = Ложь;
		ОбновитьПредставлениеТребуетсяИндивидуализация(ЭтотОбъект);
	ИначеЕсли Действия.ЭтоСменаНанесениеКодов
		Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС") Тогда
		Объект.ОперацияНанесенияТолькоДляНаборов = Ложь;
		ОбновитьПредставлениеТребуетсяИндивидуализация(ЭтотОбъект);
	КонецЕсли;
	
	Если Действия.СнятьФлагОтчетПроизводственнойЛинии Тогда
		Объект.ОтчетПроизводственнойЛинии = Ложь;
		Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
	КонецЕсли;
	
	Если Действия.ОчиститьВариантВыполенияАгрегации Тогда
		Объект.ВариантВыполненияАгрегации = ПредопределенноеЗначение("Перечисление.ВариантыВыполненияАгрегацииИСМП.ПустаяСсылка");
	КонецЕсли;
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Истина, "СтранаПроисхожденияПолеВвода");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
		УстановитьПараметрыВыбораСтраныМира(ЭтотОбъект, Неопределено, "СтранаПроисхожденияПолеВвода");
	КонецЕсли;
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаСервере
Процедура ОперацияПриИзмененииНаСервере(Действия)
	
	ОчиститьНеиспользуемыеКолонкиТаблицыТовары(ЭтотОбъект, Действия);
	
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		ОбновитьИденификаторПримененияВЕТИССрокГодности();
	КонецЕсли;
	
	Если Действия.УстановитьСтатусПоУмолчанию Тогда
		СтатусИСМП = Документы.МаркировкаТоваровИСМП.СтатусПоУмолчанию();
	КонецЕсли;
	
	Если Действия.ИзменениеДальнейшегоДействия Тогда
		ОбновитьДальнейшиеДействия();
	КонецЕсли;
	
	ОбновитьПредставленияИКеши();
	
КонецПроцедуры

&НаСервере
Процедура ОперацияНанесенияПриИзмененииНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.ОперацияНанесения) Тогда
		Объект.ОперацияНанесенияТолькоДляНаборов = Ложь;
	КонецЕсли;

	ОчиститьНеиспользуемыеКолонкиТаблицыТовары(ЭтотОбъект);
	
	Если Объект.ОтчетПроизводственнойЛинии Тогда
		ОбновитьИденификаторПримененияВЕТИССрокГодности();
	КонецЕсли;
	
	ОбновитьДальнейшиеДействия();
	ОбновитьПредставленияИКеши();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИденификаторПримененияВЕТИССрокГодности()
	
	НужноЗначениеИдентификаторВЕТИС = Ложь;
	НужноЗначениеСрокГодности = Ложь;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции) Тогда
		
		ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
		НужноЗначениеИдентификаторВЕТИС = ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС
			И ИспользуетсяПодсистемаВЕТИС;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Объект.ВидПродукции) Тогда
		НужноЗначениеСрокГодности = ЗначениеЗаполнено(Объект.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция)<>Неопределено;
		
		Если Не НужноЗначениеИдентификаторВЕТИС Тогда
			Объект.ИдентификаторПроисхожденияВЕТИС = Неопределено;
		КонецЕсли;
		Если Не НужноЗначениеСрокГодности Тогда
			Объект.СрокГодности = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьНеиспользуемыеКолонкиТаблицыТовары(Форма, ПараметрыОбработки = Неопределено)
	
	Объект = Форма.Объект;
	
	Действия = Новый Структура;
	Действия.Вставить("ОчиститьТНВЭД", Ложь);
	Действия.Вставить("ОчиститьВидМеха", Ложь);
	
	Если ПараметрыОбработки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Действия, ПараметрыОбработки);
	КонецЕсли;
	
	НужноЗначениеИдентификаторВЕТИС = Ложь;
	НужноЗначениеСрокГодности = Ложь;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции) Тогда
		ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Объект.Операция);
		НужноЗначениеИдентификаторВЕТИС = ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Объект.ВидПродукции) Тогда
		НужноЗначениеСрокГодности = ЗначениеЗаполнено(Объект.ОперацияНанесения)
			Или ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Объект.Операция)<>Неопределено;
	КонецЕсли;
	
	Если Не (НужноЗначениеИдентификаторВЕТИС И НужноЗначениеСрокГодности)
		Или Действия.ОчиститьТНВЭД
		Или Действия.ОчиститьВидМеха Тогда
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			Если Не НужноЗначениеИдентификаторВЕТИС Тогда
				СтрокаТЧ.ИдентификаторПроисхожденияВЕТИС = Неопределено;
			КонецЕсли;
			Если Не НужноЗначениеСрокГодности Тогда
				СтрокаТЧ.СрокГодности = Неопределено;
			КонецЕсли;
			Если Действия.ОчиститьТНВЭД Тогда
				СтрокаТЧ.КодТНВЭД = "";
			КонецЕсли;
			Если Действия.ОчиститьВидМеха Тогда
				СтрокаТЧ.ВидМеха = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДальнейшиеДействия()
	
	Реквизиты = Новый Структура(
		"ВидПродукции, Операция, ОперацияНанесения, ВариантЗаполненияДекларации, ВариантВыполненияАгрегации");
	ЗаполнитьЗначенияСвойств(Реквизиты, Объект);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Документы.МаркировкаТоваровИСМП.ДальнейшееДействиеПоУмолчанию(Реквизиты));
	
	ПараметрыОбновленияСтатуса = РегистрыСведений.СтатусыДокументовИСМП.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
		СтатусИСМП,
		ДальнейшиеДействия);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Или РезультатВопроса = Истина Тогда
		
		Объект.ВидПродукции = НовыйВидПродукции;
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
			ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии();
			ОчиститьСписокВыбораЭлементовШапки();
			ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
		Иначе
			Объект.Товары.Очистить();
			Объект.ШтрихкодыУпаковок.Очистить();
			ПредставлениеКИЗ.Очистить();
			КоличествоСтрокПредставлениеКИЗ = 0;
		КонецЕсли;
		
		Объект.ДокументОснование = Неопределено;
		Объект.ВариантВыполненияАгрегации = ПредопределенноеЗначение("Перечисление.ВариантыВыполненияАгрегацииИСМП.ПустаяСсылка");
		СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось");
		ВидПродукцииПриИзменении(Элементы.ВидПродукции, РезультатВопроса = Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацияПриЗавершении(РезультатВопроса, НоваяОрганизация) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = НоваяОрганизация;
		ПриИзмененииОрганизации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации()
	
	Объект.ШтрихкодыУпаковок.Очистить();
	ПредставлениеКИЗ.Очистить();
	КоличествоСтрокПредставлениеКИЗ = 0;

	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.GTIN = "";
	КонецЦикла;
	
	ПроизводственныйОбъектЗаполнитьСписокВыбора(ЭтотОбъект, Истина);
	ЗаполнитьGLNОргранизацииПоСтатистике();
	ОчиститьДанныеПроизводственнойПлощадкиВЕТИС(ЭтотОбъект);
	
	СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.НеВыполнялось");
	ОбновитьПредставленияИКеши();

	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер(ЗаполнитьЗначения = Истина, ЗаполнитьКодТНВЭД = Истина)
	
	ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект, ЗаполнитьКодТНВЭД);
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		
		ЕстьИдентификаторВЕТИС = ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект);
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
			ЗаполнитьСписокВыбораЭлементовШапки(Ложь, ЕстьИдентификаторВЕТИС);
			
			Если ЕстьИдентификаторВЕТИС Тогда
				ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
			КонецЕсли;
			
		ИначеЕсли ЕстьИдентификаторВЕТИС И ЗначениеЗаполнено(Объект.ИдентификаторПроисхожденияВЕТИС) Тогда
			
			НоменклатураСоответствуетСопоставленнойПродукции = НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
				Объект.ИдентификаторПроисхожденияВЕТИС,
				Номенклатура,
				Характеристика,
				Серия);
			
			Если Не НоменклатураСоответствуетСопоставленнойПродукции Тогда
				Объект.ИдентификаторПроисхожденияВЕТИС = Неопределено;
			КонецЕсли;
			
			Элементы.Характеристика.СписокВыбора.Очистить();
			Элементы.Серия.СписокВыбора.Очистить();
			Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
			
		КонецЕсли;
		Элементы.ЗаполнитьКоличествоПоДаннымОтчета.Доступность = Истина;
		
	Иначе
		
		Элементы.ЗаполнитьКоличествоПоДаннымОтчета.Доступность = Ложь;
		
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(Номенклатура);
	
	СертификатыНоменклатуры = ИнтеграцияИСМПВызовСервера.ИнформацияСертификатовНоменклатуры(СписокНоменклатуры);
	Если СертификатыНоменклатуры.Количество() > 0 Тогда
		ДанныеСертификации = Документы.МаркировкаТоваровИСМП.ДанныеСертификацииПоНоменклатуре(
			СертификатыНоменклатуры, Номенклатура);
			
		Если ДанныеСертификации <> Неопределено Тогда
			
			Объект.ВидДокументаСертификации   = ДанныеСертификации.ВидСертификации; 
			Объект.НомерДокументаСертификации = ДанныеСертификации.НомерСертификации;
			Объект.ДатаДокументаСертификации  = ДанныеСертификации.ДатаСертификации;
			
			ИспользоватьНомерСкважины = ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект);
			Сертификация = ПредставлениеСертификации(Объект, ИспользоватьНомерСкважины);
			
		КонецЕсли;
	КонецЕсли;
	
	Объект.Номенклатура   = Номенклатура;
	Объект.Характеристика = Характеристика;
	Объект.Серия          = Серия;
	Объект.КодТНВЭД       = КодТНВЭД;
	Объект.ИдентификаторПроисхожденияВЕТИССтрокой = ИдентификаторПроисхожденияВЕТИССтрокой;
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
КонецПроцедуры

&НаСервере
Процедура ХарактеристикаПриИзмененииСервер(ЗаполнитьЗначения = Истина)
	
	ЕстьИдентификаторВЕТИС = ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект);
	НеобходимоУказатьСерию = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий);
	
	Если НеобходимоУказатьСерию Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
		ЗаполнитьСписокВыбораЭлементаФорма("Серия", СтруктураОтбора, ЗаполнитьЗначения);
	Иначе
		Элементы.Серия.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ЕстьИдентификаторВЕТИС
		И (НеобходимоУказатьСерию И ЗначениеЗаполнено(Серия)
		   Или Не НеобходимоУказатьСерию) Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия", Номенклатура, Характеристика,  Серия);
		ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС", СтруктураОтбора, ЗаполнитьЗначения);
		ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СерияПриИзмененииСервер(ЗаполнитьЗначения = Истина)
	
	ЕстьИдентификаторВЕТИС = ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект);
	
	Если ЕстьИдентификаторВЕТИС Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия", Номенклатура, Характеристика, Серия);
		ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС", СтруктураОтбора, ЗаполнитьЗначения);
		
		ПриИзмененииИдентификаторПроисхожденияВЕТИС(ЭтотОбъект);
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВариантЗаполненияДекларацииЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ВариантЗаполненияДекларации = Параметры.ПредыдущийВариантЗаполненияДекларации;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОчиститьШтрихкодыАТК Тогда
		Объект.ШтрихкодыАТК.Очистить();
		Объект.ХешСумма = "";
	КонецЕсли;
	
	ПредыдущийВариантЗаполненияДекларации = Объект.ВариантЗаполненияДекларации;
	ВариантЗаполненияДекларацииПриИзмененииНаСервере();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВариантФормированияАТКЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ВариантФормированияАТКИСМП = Параметры.ПредыдущийВариантФормированияАТКИСМП;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОчиститьШтрихкодыАТК Тогда
		Объект.ШтрихкодыАТК.Очистить();
		Объект.ХешСумма = "";
		ВариантЗаполненияДекларацииПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВариантЗаполненияДекларацииПриИзмененииНаСервере()
	
	Если Объект.ВариантЗаполненияДекларации = Перечисления.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок Тогда
		ЗаполнитьДоступныеВариантыВыполненияАгрегации();
		Если Элементы.ВариантВыполненияАгрегации.СписокВыбора.НайтиПоЗначению(Объект.ВариантВыполненияАгрегации) = Неопределено Тогда
			Объект.ВариантВыполненияАгрегации = Элементы.ВариантВыполненияАгрегации.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
	КонецЕсли;
	
	СтатусИСМП = Документы.МаркировкаТоваровИСМП.СтатусПоУмолчанию();
	ОбновитьДальнейшиеДействия();
	ОбновитьПредставленияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОтчетПроизводственнойЛинииЗавершение(РезультатВопроса, Параметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ОтчетПроизводственнойЛинии = Не Объект.ОтчетПроизводственнойЛинии;
		Возврат;
	КонецЕсли;
	
	Если Параметры.ОчиститьТовары Тогда
		Если Объект.Товары.Количество() = 1 Тогда
			ЗаполнитьПоСтрокеДанныеОтчетаПроизводственнойЛинииТовары();
		КонецЕсли;
		Объект.Товары.Очистить();
		Объект.ШтрихкодыУпаковок.Очистить();
	КонецЕсли;
	
	Если Параметры.ОчиститьДанныеОтчетаПроизводственнойЛинии Тогда
		Объект.ДанныеОтчетаПроизводственнойЛинии.Очистить();
	КонецЕсли;
	
	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			ЗаполнитьПоСтрокеДанныеОтчетаПроизводственнойЛинииТовары(Истина);
		КонецЕсли;
		ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии();
		Объект.СоздаватьШтрихкодыУпаковок = Ложь;
		Объект.Количество = 0;
		ОчиститьРеквизитыНастройкиСозданияШтрихкодовУпаковок();
		ОчиститьСписокВыбораЭлементовШапки();
		ПриИзмененииСоздаватьШтрихкодыУпаковок();
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	
	ОтборСтрок      = "Все";
	УстановитьОтборСтрок(ЭтотОбъект);
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСтрокеДанныеОтчетаПроизводственнойЛинииТовары(ОтчетПроизводстеннойЛинииВСтроку = Ложь)
	
	ИспользоватьНомерСкважины = ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект);
	
	ПоляИсключения = "ДатаДекларации, РегистрационныйНомерДекларации";
	Если ОтчетПроизводстеннойЛинииВСтроку Тогда
		
		Если ЗначениеЗаполнено(Объект.Номенклатура) Тогда
			
			СтрокаТовары = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, Объект,, ПоляИсключения);
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ЭтотОбъект);
			СтрокаТовары.КоличествоУпаковок = КоличествоУпаковокПоДаннымОтчетаПроизводственнойЛинии(
				Объект.Номенклатура, Объект.Количество);
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоУпаковок;
			
			СтрокаТовары.Сертификация = ПредставлениеСертификации(СтрокаТовары, ИспользоватьНомерСкважины);
			Если ИспользоватьНомерСкважины Тогда
				СтрокаТовары.ЛицензияНаПользованиеНедрами = ПредставлениеЛицензии(СтрокаТовары);
			КонецЕсли;
			
			ИдентификаторСтроки = СтрокаТовары.ПолучитьИдентификатор();
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
			
			ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
				ЭтотОбъект,
				Объект.Товары,
				СтрокаТовары,
				ДанныеКешаСтроки,
				Истина,
				КлючСвязиСтатусаСтрок(ЭтотОбъект, СтрокаТовары.Номенклатура));
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = Объект.Товары[0];
		
		ЗаполнитьЗначенияСвойств(Объект, СтрокаТовары,, ПоляИсключения);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаТовары);
		
		Сертификация = ПредставлениеСертификации(СтрокаТовары, ИспользоватьНомерСкважины);
		Если ИспользоватьНомерСкважины Тогда
			ЛицензияНаПользованиеНедрами = ПредставлениеЛицензии(СтрокаТовары);
		КонецЕсли;
		
		УстановитьФорматСрокГодности(ЭтотОбъект);
		ПрименитьУсловноеОформлениеХарактеристикаСерия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоУпаковокПоДаннымОтчетаПроизводственнойЛинии(Номенклатура, КоличествоПоДокументу)
	
	ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура);
	ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(Номенклатура);
	
	Если ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке = 0 Тогда
		КоличествоПотребительскихУпаковок = КоличествоПоДокументу;
	Иначе
		КоличествоПотребительскихУпаковок = КоличествоПоДокументу / ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;
	КонецЕсли;
	
	Возврат КоличествоПотребительскихУпаковок;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКоличествоПоДаннымОтчетаНаКлиенте(КОпределениюВидаУпаковки = Неопределено, ВызовПослеАвторизации = Ложь)

	РезультатОбработки = ЗаполнитьКоличествоПоДаннымОтчетаНаСервере(КОпределениюВидаУпаковки);

	Если ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(РезультатОбработки.ТекстОшибки);
	ИначеЕсли РезультатОбработки.ТребуетсяОбновлениеКлючаСессии Тогда
		Если ВызовПослеАвторизации Тогда
			ТекстОшибки = НСтр("ru = 'Не удалось выполнить авторизацию.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("КОпределениюВидаУпаковки", КОпределениюВидаУпаковки);
			ЗапроситьКлючСессииНачало(ДополнительныеПараметры);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(РезультатОбработки.АдресУточнениеКоэффициентовУпаковок) Тогда
		ОткрытьФормуНастройкиВидовУпаковокПоGTIN(РезультатОбработки.АдресУточнениеКоэффициентовУпаковок);
	Иначе
		Объект.Количество = РезультатОбработки.КоличествоПоДокументу;
		Модифицированность = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьКоличествоПоДаннымОтчетаНаСервере(КОпределениюВидаУпаковки = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("КоличествоПоДокументу",               0);
	Результат.Вставить("ТекстОшибки",                         "");
	Результат.Вставить("КОпределениюВидаУпаковки",            Неопределено);
	Результат.Вставить("ТребуетсяОпределитьВидУпаковки",      Ложь);
	Результат.Вставить("ТребуетсяОбновлениеКлючаСессии",      Ложь);
	Результат.Вставить("АдресУточнениеКоэффициентовУпаковок", Неопределено);

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЭтотОбъект);
	ПараметрыСканирования.КонтрольУникальностиКодовМаркировки = Ложь;

	// Не требуются лишние запросы данных
	ПараметрыСканирования.ЭтоПроверкаКодовМаркировкиИСМП = Ложь;
	ПараметрыСканирования.ТребуетсяЧастичноеВыбытие      = Ложь;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		ПараметрыСканирования.ВариантПолученияМРЦ                                                = "Вычисление";
		ПараметрыСканирования.ДопустимыПроверкиСеройЗоныМОТП                                     = Ложь;
		ПараметрыСканирования.ПроверятьПотребительскиеУпаковкиНаВхождениеВСеруюЗонуМОТП          = Ложь;
		ПараметрыСканирования.ПроверятьЛогистическиеИГрупповыеУпаковкиНаСодержаниеСерыхКодовМОТП = Ложь;
	КонецЕсли;

	Если КОпределениюВидаУпаковки = Неопределено Тогда

		РезультатОбработки = КоличествоПоДаннымОтчетаПроизводственнойЛинии(ПараметрыСканирования);
		Если ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки) Тогда
			Результат.ТекстОшибки = РезультатОбработки.ТекстОшибки;
			Возврат Результат;
		КонецЕсли;

		КОпределениюВидаУпаковки = РезультатОбработки.КОпределениюВидаУпаковки;

	КонецЕсли;

	Если КОпределениюВидаУпаковки.GTIN.Количество() Тогда

		РезультатОпределенияВидаУпаковки = ОбработатьДанныеКОпределениюВидаУпаковки(КОпределениюВидаУпаковки);

		Если РезультатОпределенияВидаУпаковки.УточнениеДанныхНеТребуется Тогда

			// Описание GTIN заполнено в регистре по данным сервиса, нужно пересчитать количество.
			РезультатОбработки = КоличествоПоДаннымОтчетаПроизводственнойЛинии(ПараметрыСканирования);
			Если ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки) Тогда
				Результат.ТекстОшибки = РезультатОбработки.ТекстОшибки;
				Возврат Результат;
			КонецЕсли;

		Иначе

			ЗаполнитьЗначенияСвойств(Результат, РезультатОпределенияВидаУпаковки);
			Если РезультатОпределенияВидаУпаковки.ТребуетсяОбновлениеКлючаСессии Тогда
				Результат.КОпределениюВидаУпаковки = КОпределениюВидаУпаковки;
			КонецЕсли;
			Возврат Результат;

		КонецЕсли;

	КонецЕсли;

	ОписанияНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Номенклатура);
	ОписаниеНоменклатуры = ОписанияНоменклатуры.Получить(Номенклатура);

	Результат.КоличествоПоДокументу = РезультатОбработки.КоличествоПотребительскихУпаковок * ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке;

	Возврат Результат;

КонецФункции

&НаСервере
Функция КоличествоПоДаннымОтчетаПроизводственнойЛинии(ПараметрыСканирования)

	Результат = Новый Структура;
	Результат.Вставить("КоличествоПотребительскихУпаковок", 0);
	Результат.Вставить("КОпределениюВидаУпаковки",          Неопределено);
	Результат.Вставить("ТекстОшибки",                       "");
	
	// В данных отчета произодственной линии полная информация о вложенных потребительских упаковках
	ДанныеОтчета = Объект.ДанныеОтчетаПроизводственнойЛинии.Выгрузить(, "ЗначениеШтрихкода, ФорматBase64");

	ДанныеОтчета.Колонки.Добавить("ЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("НормализованноеЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("НормализованноеЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
	
	ВидПродукции = Объект.ВидПродукции;
	
	ПараметрыРазбора = Новый Структура;
	//Если флаг стоит, то из пула полные коды брать нельзя.
	ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
	ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        Ложь);
	
	РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
		ДанныеОтчета, ВидПродукции, ПараметрыРазбора);
	
	Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Некорректный формат данных отчета производственной линии'");
		Возврат Результат;
	КонецЕсли;
	
	КоличествоПотребительскихУпаковок = 0;
	
	КОпределениюВидаУпаковки = Новый Структура;
	КОпределениюВидаУпаковки.Вставить("GTIN",                  Новый Соответствие);
	КОпределениюВидаУпаковки.Вставить("ПараметрыСканирования", ПараметрыСканирования);

	Для Каждого СтрокаДанных Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
		
		Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
			
			ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
			Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидУпаковки = СтрокаДанных[ИменаКолонок.ВидУпаковки];
			GTIN        = СтрокаДанных[ИменаКолонок.GTIN];
			Если Не ЗначениеЗаполнено(ВидУпаковки) Тогда
				КОпределениюВидаУпаковки.GTIN.Вставить(GTIN, ИсходнаяСтрока[ИменаКолонок.НормализованныйКодМаркировки]);
				Продолжить;
			КонецЕсли;

			Если ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
				КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок + 1;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Результат.КОпределениюВидаУпаковки = КОпределениюВидаУпаковки;
	Результат.КоличествоПотребительскихУпаковок = КоличествоПотребительскихУпаковок;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиВидовУпаковокПоGTIN(АдресУточнениеКоэффициентовУпаковок)

	ОписаниеОповещения = Новый ОписаниеОповещения("УточнениеКоэффициентовУпаковокЗавершение", ЭтотОбъект);

	ПараметрыОткрытия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
	ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = АдресУточнениеКоэффициентовУпаковок;

	ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура УточнениеКоэффициентовУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьКоличествоПоДаннымОтчетаНаКлиенте();

КонецПроцедуры

&НаСервере
Функция ОбработатьДанныеКОпределениюВидаУпаковки(КОпределениюВидаУпаковки)

	Возврат ГрупповаяОбработкаШтрихкодовИС.ОбработатьДанныеКОпределениюВидаУпаковки(КОпределениюВидаУпаковки);

КонецФункции

&НаСервере
Процедура ОбновитьПредставленияИКеши()
	
	ОбновитьПредставленияНаФорме(, Ложь);
	ОбновлениеКешей();
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеКешей()
	
	Если Не РедактированиеФормыНедоступно Тогда
		Настройки = ПроверкаИПодборПродукцииИС.НастройкиИсточникаКешаШтрихкодовУпаковок(Истина);
		Настройки.ВключаяКомплектующие = Истина;
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, Настройки,, КлючСвязиСтатусаСтрок(ЭтотОбъект));
	КонецЕсли;
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнформацияТаможеннойДекларацииНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗаполнениеПараметровТовары(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСписка Из ДополнительныеПараметры Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаСписка);
		
		ЗаполнениеТаможеннойДекларации = Ложь;
		
		Для Каждого КлючИЗначение Из Результат Цикл
			СтрокаТовары[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			Если КлючИЗначение.Ключ = "РегистрационныйНомерДекларации" Тогда
				ЗаполнениеТаможеннойДекларации = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗаполнениеТаможеннойДекларации Тогда
			СтрокаТовары.ТаможеннаяДекларация = ПредставлениеТаможеннойДекларации(
				СтрокаТовары.РегистрационныйНомерДекларации,
				СтрокаТовары.ДатаДекларации);
				
			ОбновитьКэшТаможеннойДекларацииКлиентСервер(
					ЭтотОбъект,
					СтрокаТовары.РегистрационныйНомерДекларации,
					СтрокаТовары.ДатаДекларации,
					СтрокаТовары.Номенклатура);
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияРежимУдаленияСтрокиОтчета(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат)
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РежимУдаленияСтрокиОтчета = Результат;
	
	Если Результат = ПредопределенноеЗначение("Перечисление.ВариантыИсправленияОшибокОтчетПроизодственнойЛинииИС.УдалятьСтрокуОтчета") Тогда
		
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
			МассивСтрокКУдалению.Добавить(Объект.ДанныеОтчетаПроизводственнойЛинии.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
		Для Каждого СтрокаУдалить Из МассивСтрокКУдалению Цикл
			Объект.ДанныеОтчетаПроизводственнойЛинии.Удалить(СтрокаУдалить);
		КонецЦикла;
		
		Модифицированность = Истина;
		
	Иначе
		
		ОчиститьСообщения();
		ОбработатьУпаковкиОтчетаПроизводственнойЛинии(ДополнительныеПараметры.ИдентификаторыСтрок);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиОтчетаПроизводственнойЛинии(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при удалении строк отчета производственной линии:'") + Символы.ПС + Результат.КраткоеПредставлениеОшибки;
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьОбработанныеДанныеОтчета(Результат.АдресРезультата, ДополнительныеПараметры);
	
КонецПроцедуры

#Область РаботаСТСД

#Область Загрузка

&НаКлиенте
Процедура ОпределитьНоменклатуруОтчетаПроизводственнойЛинии(Штрихкоды)
	
	Если Штрихкоды.Количество() Тогда
		
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
		ОбработатьПолученныеШтрихкодыНаСервере(Штрихкоды, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеШтрихкодыНаСервере(ШтрихКоды, ПараметрыСканирования)
	
	КешДанныхРазбора                = Новый Соответствие;
	НастройкиРазбораКодаМаркировки  = РазборКодаМаркировкиИССлужебный.НастройкиРазбораКодаМаркировки(Объект.ВидПродукции);
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	НастройкиРазбораКодаМаркировки = Новый Структура;
	НастройкиРазбораКодаМаркировки.Вставить("Кеш",              РазборКодаМаркировкиИССлужебныйКлиентСервер.ИнициализироватьНастройкиИспользующиеРезультатыПредыдущихРазборов());
	НастройкиРазбораКодаМаркировки.Вставить("Общие",            РазборКодаМаркировкиИССлужебныйПовтИсп.НастройкиРазбораКодаМаркировки());
	НастройкиРазбораКодаМаркировки.Вставить("Пользовательские", ПользовательскиеПараметрыРазбораКодаМаркировки);

	Для Каждого ДанныеШтрихкода Из ШтрихКоды Цикл
		
		Если ДанныеШтрихкода.ФорматBase64 Тогда
			Штрихкод = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.Base64ВШтрихкод(ДанныеШтрихкода.Штрихкод);
		Иначе
			Штрихкод = ДанныеШтрихкода.Штрихкод;
		КонецЕсли;
		
		ДанныеРазбораШтрихкода = ГрупповаяОбработкаШтрихкодовИС.ВидУпаковкиИПредставлениеШтрихкодаУпрощенныйРазбор(
			Штрихкод, Объект.ВидПродукции, КешДанныхРазбора,
			НастройкиРазбораКодаМаркировки);
		
		ДанныеРазбораИПримечание = КешДанныхРазбора[Штрихкод];
		Если ДанныеРазбораИПримечание = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеРазбораИПримечание.ДанныеРазбора = Неопределено
			Или Не ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.Свойство("EAN")
			Или Не ЗначениеЗаполнено(ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.EAN) Тогда
			Продолжить;
		КонецЕсли;
		
		ВозможнаГрупповаяУпаковка = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ВозможнаГрупповаяУпаковкаИлиНабор(
			ДанныеРазбораШтрихкода.ВидУпаковки,
			ДанныеРазбораИПримечание.ДанныеРазбора);
		
		Если (Не ЗначениеЗаполнено(ДанныеРазбораШтрихкода.ВидУпаковки) И Не ВозможнаГрупповаяУпаковка)
			Или (ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода <> Неопределено
			     И ЗначениеЗаполнено(ДанныеРазбораИПримечание.ПримечаниеКРазборуШтрихкода.ТекстОшибки)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		EAN = ДанныеРазбораИПримечание.ДанныеРазбора.СоставКодаМаркировки.EAN;
		
		Если Не ЗначениеЗаполнено(EAN) Тогда
			Продолжить;
		КонецЕсли;
		
		ШтрихкодыEAN = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(EAN);
		ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN, ПараметрыСканирования);
		
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Номенклатура", Номенклатура);
			НайденныеСтрокиНоменклатура = ИнформацияПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиНоменклатура.Количество() > 0 Тогда
				
				Если ЗначениеЗаполнено(Характеристика) Тогда
					
					СтруктураПоиска.Вставить("Характеристика", Характеристика);
					НайденныеСтрокиНоменклатураХарактеристика = ИнформацияПоШтрихкодамEAN.НайтиСтроки(СтруктураПоиска);
					
					Если НайденныеСтрокиНоменклатураХарактеристика.Количество() = 0 Тогда
						ЗаполнитьЗначенияСвойств(ЭтотОбъект, НайденныеСтрокиНоменклатура[0],"Характеристика");
						ХарактеристикаПриИзмененииСервер(Ложь);
					КонецЕсли;
					
				ИначеЕсли ЗначениеЗаполнено(НайденныеСтрокиНоменклатура[0].Характеристика) Тогда
					
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, НайденныеСтрокиНоменклатура[0],"Характеристика");
					ХарактеристикаПриИзмененииСервер(Ложь);
					
				КонецЕсли;
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокиПоВидуПродукции = ИнформацияПоШтрихкодамEAN.НайтиСтроки(Новый Структура("ВидПродукции", Объект.ВидПродукции));
		
		Если СтрокиПоВидуПродукции.Количество() = 1 Тогда
			
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокиПоВидуПродукции[0],"Номенклатура, Характеристика, Серия");
			НоменклатураПриИзмененииСервер(Ложь);
			
		ИначеЕсли ИнформацияПоШтрихкодамEAN.Количество() > 0 Тогда
			
			Если СтрокиПоВидуПродукции.Количество() = 0 Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru='Ошибка при определении номенклатуры по данным загружаемых штрихкодов:
						     |Вид продукции штрихкода: %1.
						     |Ожидаемые виды продукции: %2.'"),
					ИнформацияПоШтрихкодамEAN[0].ВидПродукции,
					Объект.ВидПродукции);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.ВидПродукции", Истина);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Номенклатура) Тогда
				Номенклатура   = Неопределено;
				Характеристика = Неопределено;
				Серия          = Неопределено;
				НоменклатураПриИзмененииСервер(Ложь, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	
	ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			
			ЗагрузкаДанныхТСД = Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок) Тогда
		ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		ЗагрузкаДанныхТСД = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		ЗагрузкаДанныхТСД = Неопределено;
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяУточнениеДанных Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУточненияДанныхТСД", ЭтотОбъект);
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОткрытьФормуУточненияДанныхТСД(ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	ЗагрузкаДанныхТСД = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЗагрузкаШтрихкодовПрервана(ЗагрузкаДанныхТСД) Тогда
		Возврат;
	КонецЕсли;
	
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУточненияДанныхТСД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения);
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения)
	
	ГрупповаяОбработкаШтрихкодовИС.ОбработатьШтрихкоды(ЭтотОбъект, ЗагрузкаДанныхТСД);
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения)
	
	Модифицированность = Истина;
	ОбработатьДобавленныеИзмененныеСтроки(ЗагрузкаДанныхТСД.ДобавленныеСтроки, ЗагрузкаДанныхТСД.ИзмененныеСтроки, КэшированныеЗначения);
	ЗагрузкаДанныхТСД.ДобавленныеСтроки = Новый Массив;
	ЗагрузкаДанныхТСД.ИзмененныеСтроки  = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьРегистрациюДТВКэш(Форма, СписокНоменклатуры)
	
	ТаможеннаяДекларация = ИнформацияТаможеннойДекларацииНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из ТаможеннаяДекларация Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Регистрация Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшТаможеннойДекларацииКлиентСервер(
				Форма, Регистрация.РегистрационныйНомерДекларации, Регистрация.ДатаДекларации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает параметры выбора страны мира.
//
//Параметры:
//   Форма                     - ФормаКлиентскогоПриложения - форма, в которой нужно установить параметры выбора.
//   ТолькоСтраныУчастникиЕАЭС - Неопределено, Булево - Признак страны-участника ЕАЭС.
//   ИмяПоляВвода              - Строка - имя поля ввода номенклатуры.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСтраныМира(Форма, ТолькоСтраныУчастникиЕАЭС = Неопределено, ИмяПоляВвода = "Страна")
	
	ПараметрыВыбора = Новый Массив;
	
	Если ТолькоСтраныУчастникиЕАЭС <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчастникЕАЭС", ТолькоСтраныУчастникиЕАЭС));
	КонецЕсли;
	
	Форма.Элементы[ИмяПоляВвода].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючСвязиСтатусаСтрок(Форма, Номенклатура = Неопределено)
	
	МассивКлючейСвязи = Новый Массив;
	
	Если ИнтеграцияИСМПКлиентСервер.ОперацииНанесенияКодовМаркировки().Найти(Форма.Объект.Операция) <> Неопределено
		Или ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения) Тогда
		
		Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Форма.Объект.ВидПродукции) Тогда
			МассивКлючейСвязи.Добавить("ИдентификаторПроисхожденияВЕТИС");
			МассивКлючейСвязи.Добавить("СрокГодности");
		ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Форма.Объект.ВидПродукции) Тогда
			МассивКлючейСвязи.Добавить("СрокГодности");
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		МассивКлючейСвязи.Добавить("GTIN");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивКлючейСвязи, ",");
	
КонецФункции

&НаКлиенте
Процедура ОпределитьФорматРедактированияСрокГодности()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Объект.ВидПродукции) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy;";
		Если ТекущиеДанные.СкоропортящаясяПродукция Тогда
			ФорматДаты = "ДФ='dd.MM.yyyy HH:mm';";
		КонецЕсли;
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Объект.ВидПродукции, Ложь) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy;";
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
	Иначе
		ТекущиеДанные.СрокГодности = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматСрокГодности(Форма)

	Если ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.Объект.ВидПродукции) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy;";

		Если Форма.Объект.СкоропортящаясяПродукция Тогда
			ФорматДаты = "ДФ='dd.MM.yyyy HH:mm';";
		Иначе
			Форма.Объект.СрокГодности = НачалоДня(Форма.Объект.СрокГодности);
		КонецЕсли;

		Форма.Элементы.СрокГодности.Формат               = ФорматДаты;
		Форма.Элементы.СрокГодности.ФорматРедактирования = ФорматДаты;
	ИначеЕсли ОбщегоНазначенияИСКлиентСервер.ЭтоВидПродукцииСоСрокамиГодности(Форма.Объект.ВидПродукции, Ложь) Тогда
		ФорматДаты = "ДФ=dd.MM.yyyy;";
		Форма.Элементы.СрокГодности.Формат               = ФорматДаты;
		Форма.Элементы.СрокГодности.ФорматРедактирования = ФорматДаты;
	Иначе
		Форма.Объект.СрокГодности = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьФорматДатыПроизводства(Форма, ПрисутствуетОперацияНанесения)
	
	ФорматДатыПроизводства = "ДФ=dd.MM.yyyy;";
	
	Форма.Элементы.ДатаПроизводства.Формат               = ФорматДатыПроизводства;
	Форма.Элементы.ДатаПроизводства.ФорматРедактирования = ФорматДатыПроизводства;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВЕТИС()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВЕТИСПоСтроке(ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеВЕТИСПоСтроке(Форма, ДобавленныеСтроки)
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Форма.Объект.ВидПродукции)
		Или Не ЗначениеЗаполнено(Форма.Объект.ОперацияНанесения) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыВЕТИС = Новый Массив;
	Для Каждого СтрокаДанныхЗаполнения Из ДобавленныеСтроки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанныхЗаполнения.ИдентификаторПроисхожденияВЕТИС) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыВЕТИС.Добавить(СтрокаДанныхЗаполнения.ИдентификаторПроисхожденияВЕТИС);
	КонецЦикла;
	
	ДанныеВЕТИС = ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторыВЕТИС);
	
	Для Каждого ТекущиеДанные Из ДобавленныеСтроки Цикл
		
		СрокГодности    = '00010101';
		СкоропортящаясяПродукция = Ложь;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС) Тогда
			СрокГодности    = ДанныеВЕТИС[ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС].СрокГодности;
			СкоропортящаясяПродукция = ДанныеВЕТИС[ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС].СкоропортящаясяПродукция;
		КонецЕсли;
		
		ТекущиеДанные.СрокГодности = СрокГодности;
		ТекущиеДанные.СкоропортящаясяПродукция = СкоропортящаясяПродукция;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииИдентификаторПроисхожденияВЕТИС(Форма)
	
	ЗаполнитьДанныеВЕТИСШапка(Форма);
	УстановитьФорматСрокГодности(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеВЕТИСШапка(Форма)
	
	Объект = Форма.Объект;

	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции) Тогда
		Возврат;
	КонецЕсли;
	
	СрокГодности    = '00010101';
	СкоропортящаясяПродукция = Ложь;
	Идентификатор   = "";
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторПроисхожденияВЕТИС) Тогда
		
		ДанныеВЕТИС = ДанныеИдентификаторовПроисхожденияВЕТИС(Объект.ИдентификаторПроисхожденияВЕТИС);
		
		СрокГодности    = ДанныеВЕТИС[Объект.ИдентификаторПроисхожденияВЕТИС].СрокГодности;
		СкоропортящаясяПродукция = ДанныеВЕТИС[Объект.ИдентификаторПроисхожденияВЕТИС].СкоропортящаясяПродукция;
		Идентификатор   = ДанныеВЕТИС[Объект.ИдентификаторПроисхожденияВЕТИС].Идентификатор;
		
	КонецЕсли;
	
	Объект.СрокГодности             = СрокГодности;
	Объект.СкоропортящаясяПродукция = СкоропортящаясяПродукция;
	
	Форма.ИдентификаторПроисхожденияВЕТИССтрокой = Идентификатор;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеИдентификаторовПроисхожденияВЕТИС(ИдентификаторыПроисхождения)
	Возврат ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(ИдентификаторыПроисхождения);
КонецФункции

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыВЕТИСВКоллекции()
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции)
		Или Не ЗначениеЗаполнено(Объект.ОперацияНанесения) Тогда
		Возврат;
	КонецЕсли;
	
	Идентификаторы = Объект.Товары.Выгрузить(, "ИдентификаторПроисхожденияВЕТИС").ВыгрузитьКолонку("ИдентификаторПроисхожденияВЕТИС");
	ДанныеПоИдентификаторам = ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(Идентификаторы);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(СтрокаТовары.ИдентификаторПроисхожденияВЕТИС);
		Если ДанныеПоИдентификатору <> Неопределено Тогда
			СтрокаТовары.СкоропортящаясяПродукция = ДанныеПоИдентификатору.СкоропортящаясяПродукция;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИспользуетсяУказаниеИдентификатораВЕТИС(Форма)
	
	ИспользуетсяУказаниеИдентификатораВЕТИС = Ложь;
	ОперацииМаркировки = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииМаркировки(Форма.Объект.Операция);
	Если Форма.ИспользуетсяПодсистемаВЕТИС
		И ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Форма.Объект.ВидПродукции)
		И ОперацииМаркировки.ТребуетсяЗаполнениеИдентификаторовПримененияВЕТИС Тогда
		ИспользуетсяУказаниеИдентификатораВЕТИС = Истина;
	КонецЕсли;
	
	Возврат ИспользуетсяУказаниеИдентификатораВЕТИС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуДанныхДокументаОснования()
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(ЭтотОбъект);
	ТаблицаДанныхДокументаОснования = ШтрихкодированиеИС.ИнициализицияТаблицыДанныхДокумента(ПараметрыСканирования);
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Объект.ВидПродукции);
	
	ЗаполнятьДанныеВЕТИС = ИспользуетсяПодсистемаВЕТИС И ЭтоПродукцияПодконтрольнаяВЕТИС;
	ДанныеСформированы = Ложь;
	Если ЗаполнятьДанныеВЕТИС Тогда
		
		ИнтеграцияИСМПВЕТИС.СформироватьДанныеДокументаОснования(
			ТаблицаДанныхДокументаОснования, Объект.ДокументОснование, ДанныеСформированы);
		
		Если ЭтоПродукцияПодконтрольнаяВЕТИС И ТаблицаДанныхДокументаОснования.Колонки.Найти("ДанныеИдентификатораПроисхожденияВЕТИС") <> Неопределено Тогда
			
			ТаблицаДанныхДокументаОснования.Колонки.Добавить("ИдентификаторПроисхожденияВЕТИС", Метаданные.ОпределяемыеТипы.ИдентификаторПроисхожденияВЕТИС.Тип);
			Для Каждого СтрокаОснования Из ТаблицаДанныхДокументаОснования Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОснования, СтрокаОснования.ДанныеИдентификатораПроисхожденияВЕТИС);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		ИнтеграцияИСМППереопределяемый.СформироватьТаблицуМаркируемойПродукцииДокумента(Объект.ДокументОснование,
			ТаблицаДанныхДокументаОснования, Объект.ВидПродукции);
	КонецЕсли;
	
	ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура");
	ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика");
	ТаблицаДанныхДокументаОснования.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	
	Если ЭтоАдресВременногоХранилища(ДанныеТаблицаПродукцииОснование) Тогда
		ПоместитьВоВременноеХранилище(ТаблицаДанныхДокументаОснования, ДанныеТаблицаПродукцииОснование);
	Иначе
		ДанныеТаблицаПродукцииОснование = ПоместитьВоВременноеХранилище(ТаблицаДанныхДокументаОснования, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИдентификатораПроисхожденияВЕТИСЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Объект.ОтчетПроизводственнойЛинии Тогда

		Объект.ИдентификаторПроисхожденияВЕТИС = Результат;
		ЗаполнитьДанныеВЕТИСШапка(ЭтотОбъект);
		УстановитьФорматСрокГодности(ЭтотОбъект);

	Иначе

		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Результат;
		ЗаполнитьДанныеВЕТИС();
		ОпределитьФорматРедактированияСрокГодности();

	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(ИдентификаторПроисхожденияВЕТИС, Номенклатура, Характеристика, Серия)

	ДанныеСопоставления = Новый Структура;
	ДанныеСопоставления.Вставить("Номенклатура", Номенклатура);
	ДанныеСопоставления.Вставить("Характеристика", Характеристика);
	ДанныеСопоставления.Вставить("Серия", Серия);

	Возврат ИнтеграцияИСМПВЕТИС.НоменклатураСоответствуетСопоставленнойПродукцииВЕТИСПоИдентификаторуПроисхождения(
		ИдентификаторПроисхожденияВЕТИС,
		ДанныеСопоставления);

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыКодыМаркировкиВводВОборотНеЗавершен()
	
	СтатусыКодыМаркировки = Новый Массив;
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотКПередаче"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОбрабатывается"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ВводВОборотОшибкаПередачи"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиВведеныВОборотЧастично"));

	Возврат СтатусыКодыМаркировки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыКодыМаркировкиНанесениеНеЗавершен()
	
	СтатусыКодыМаркировки = Новый Массив;
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетКПередаче"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОбрабатывается"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетОшибкаПередачи"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиНанесеныЧастично"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ОтчетСтатусНеопределен"));
	
	Возврат СтатусыКодыМаркировки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыКодыМаркировкиАгрегацияНеЗавершен()

	СтатусыКодыМаркировки = Новый Массив;
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияКПередаче"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОбрабатывается"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.АгрегацияОшибкаПередачи"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированыЧастично"));

	Возврат СтатусыКодыМаркировки;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыКодыМаркировкиФормированиеАТКНеЗавершен()

	СтатусыКодыМаркировки = Новый Массив;
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТККПередаче"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОбрабатывается"));
	СтатусыКодыМаркировки.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.ФормированиеАТКОшибкаПередачи"));

	Возврат СтатусыКодыМаркировки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяУказатьДанныеДекларации(Форма)
	
	ВариантЗаполненияДекларации = Форма.Объект.ВариантЗаполненияДекларации;
	Операция                    = Форма.Объект.Операция;
	ОперацияНанесения           = Форма.Объект.ОперацияНанесения;
	СтатусИСМП                  = Форма.СтатусИСМП;
	ВариантВыполненияАгрегации  = Форма.Объект.ВариантВыполненияАгрегации;
	
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотПроизводствоВнеЕАЭС")
		И ((ВариантВыполненияАгрегации <> ПредопределенноеЗначение("Перечисление.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот")
		    И (Не ЗначениеЗаполнено(ОперацияНанесения)
		       Или ЗначениеЗаполнено(ОперацияНанесения)
		           И СтатусыКодыМаркировкиНанесениеНеЗавершен().Найти(СтатусИСМП) = Неопределено))
		    Или (ВариантВыполненияАгрегации = ПредопределенноеЗначение("Перечисление.ВариантыВыполненияАгрегацииИСМП.ПередВводомВОборот")
		         И СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы")))
		
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТСМех")
		
		Или Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС")
		    И ((ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.АТК")
		        И СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыАТКСформированы")
		        Или ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыУпаковок") 
		        И (СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.КодыМаркировкиАгрегированы")
		           Или ВариантВыполненияАгрегации = ПредопределенноеЗначение("Перечисление.ВариантыВыполненияАгрегацииИСМП.НеТребуется"))
		        Или ВариантЗаполненияДекларации = ПредопределенноеЗначение("Перечисление.ВариантыЗаполненияДекларацииИСМП.КодыМаркировки")
		        И (ЗначениеЗаполнено(ОперацияНанесения)
					И СтатусыКодыМаркировкиНанесениеНеЗавершен().Найти(Форма.СтатусИСМП) = Неопределено
				    Или Не ЗначениеЗаполнено(ОперацияНанесения) 
				    И СтатусИСМП = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиМаркировкиТоваровИСМП.Черновик")))) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#Область ЗаполнениеСлужебныхРеквизитовСоздаватьШтрихкодыУпаковок

&НаСервере
Процедура ЗаполнитьДанныеФормыПриСозданииНаСервере()
	
	Если Не Объект.ОтчетПроизводственнойЛинии Тогда
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьТаблицуДанныхДокументаОснования();
	Иначе
		ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект, "Номенклатура, Характеристика, Серия, КодТНВЭД, ИдентификаторПроисхожденияВЕТИССтрокой");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораПриСозданииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Если Объект.ОтчетПроизводственнойЛинии Тогда
			
			ЗаполнитьСписокВыбораЭлементовШапки(Истина, ИспользуетсяУказаниеИдентификатораВЕТИС(ЭтотОбъект));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьУсловноеОформлениеХарактеристикаСерия(СписокРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(СписокРеквизитов) Тогда
		СписокРеквизитов = "Характеристика, Серия";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Для Каждого СвойствоСтруктуры Из СтруктураРеквизитов Цикл
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, СвойствоСтруктуры.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры(ЗаполнитьКодТНВЭД)
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Номенклатура");
	СтруктураЗаполнения.Вставить("Характеристика");
	СтруктураЗаполнения.Вставить("Серия");
	СтруктураЗаполнения.Вставить("ХарактеристикиИспользуются");
	СтруктураЗаполнения.Вставить("ТипНоменклатуры");
	СтруктураЗаполнения.Вставить("СтатусУказанияСерий");
	
	Если ЗаполнитьКодТНВЭД Тогда
		СтруктураЗаполнения.Вставить("КодТНВЭД");
	КонецЕсли;
	
	Возврат СтруктураЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьСлужебныеРеквизитыНоменклатуры(Форма, ЗаполнитьКодТНВЭД)
	
	СтруктураЗаполнения = ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры(ЗаполнитьКодТНВЭД);
	ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Форма);
	СобытияФормИСПереопределяемый.ПриИзмененииНоменклатуры(Форма, СтруктураЗаполнения,, Форма.ПараметрыУказанияСерий);
	ЗаполнитьЗначенияСвойств(Форма, СтруктураЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементаФорма(ИмяЭлемента, СтруктураОтбора = Неопределено, ЗаполнитьЗначения = Истина)
	
	Если ЭтоАдресВременногоХранилища(ДанныеТаблицаПродукцииОснование) Тогда
		ТоварыДокументаОснования = ПолучитьИзВременногоХранилища(ДанныеТаблицаПродукцииОснование);
	Иначе
		ТоварыДокументаОснования = Неопределено;
	КонецЕсли;
	
	Если ТоварыДокументаОснования = Неопределено Или ТоварыДокументаОснования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Элемент = Элементы[ИмяЭлемента];
	Элемент.СписокВыбора.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	&ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС
	|ПОМЕСТИТЬ ДанныеОснования
	|ИЗ
	|	&ДанныеОснования КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	%ТекстЗапросаПолей
	|ИЗ
	|	ДанныеОснования КАК ДанныеОснования
	|ГДЕ
	|	%ТекстУсловияОтбора
	|";
	
	Если ТоварыДокументаОснования.Колонки.Найти("ИдентификаторПроисхожденияВЕТИС") <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторПроисхожденияВЕТИС", "Т.ИдентификаторПроисхожденияВЕТИС");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИдентификаторПроисхожденияВЕТИС",  """""");
	КонецЕсли;
	
	ТекстЗапросаПолей = "";
	ТекстЗапросаПолей = ТекстЗапросаПолей + "ДанныеОснования." + ИмяЭлемента + " КАК " + ИмяЭлемента;

	ТекстУсловияОтбора = "ИСТИНА";
	Если СтруктураОтбора <> Неопределено Тогда
		
		Для Каждого ЭлементОтбора Из СтруктураОтбора Цикл

			ТекстУсловияОтбора = ТекстУсловияОтбора +" И " + ЭлементОтбора.Ключ + " = " + "&" +ЭлементОтбора.Ключ;
			Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);

		КонецЦикла;

	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстЗапросаПолей", ТекстЗапросаПолей);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстУсловияОтбора", ТекстУсловияОтбора);

	Запрос.УстановитьПараметр("ДанныеОснования", ТоварыДокументаОснования);
	СгруппированнаяТаблица = Запрос.Выполнить().Выгрузить();
	Если СгруппированнаяТаблица.Количество() > 5 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаЗаполнения Из СгруппированнаяТаблица Цикл
		Если ЗначениеЗаполнено(СтрокаЗаполнения[ИмяЭлемента]) Тогда
			Элемент.СписокВыбора.Добавить(СтрокаЗаполнения[ИмяЭлемента]);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнитьЗначения Тогда
		
		Если СгруппированнаяТаблица.Количество() = 1 Тогда
			Если ИмяЭлемента = "ИдентификаторПроисхожденияВЕТИС" Тогда
				Объект[ИмяЭлемента] = СгруппированнаяТаблица[0][ИмяЭлемента];
			Иначе
				ЭтотОбъект[ИмяЭлемента] = СгруппированнаяТаблица[0][ИмяЭлемента];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораЭлементовШапки(Инициалзиация, ЕстьИдентификаторВЕТИС)
	
	Если Инициалзиация Тогда
		ЗаполнитьСписокВыбораЭлементаФорма("Номенклатура",, Ложь);
	КонецЕсли;
	
	Если ХарактеристикиИспользуются Тогда
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		ЗаполнитьСписокВыбораЭлементаФорма("Характеристика", СтруктураОтбора, Не Инициалзиация);
	Иначе
		Элементы.Характеристика.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий) 
		И (ХарактеристикиИспользуются И ЗначениеЗаполнено(Характеристика)
		   Или Не ХарактеристикиИспользуются) Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика", Номенклатура, Характеристика);
		ЗаполнитьСписокВыбораЭлементаФорма("Серия", СтруктураОтбора, Не Инициалзиация);
	Иначе
		Элементы.Серия.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если ЕстьИдентификаторВЕТИС Тогда
		СтруктураОтбора = Новый Структура("Номенклатура, Характеристика, Серия", Номенклатура, Характеристика, Серия);
		ЗаполнитьСписокВыбораЭлементаФорма("ИдентификаторПроисхожденияВЕТИС", СтруктураОтбора, Не Инициалзиация);
	Иначе
		Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыШапкиОтчетПроизводственнойЛинии()
	
	ОчиститьРеквизитыНастройкиСозданияШтрихкодовУпаковок();
	
	КодТНВЭД                               = Неопределено;
	ИдентификаторПроисхожденияВЕТИССтрокой = "";
	
	Объект.ИдентификаторПроисхожденияВЕТИС = Неопределено;
	Объект.СрокГодности                    = Неопределено;
	Объект.СкоропортящаясяПродукция        = Ложь;
	
	Объект.ВидДокументаСертификации        = Неопределено;
	Объект.НомерДокументаСертификации      = "";
	Объект.ДатаДокументаСертификации       = Неопределено;
	Объект.НомерСкважины                   = "";
	
	Объект.КемВыданПаспортСоответствия     = "";
	Объект.НомерПаспортаСоответствия       = "";
	Объект.ДатаПаспортаСоответствия        = Неопределено;
	
	Объект.НомерЛицензииНаПользованиеНедрами = "";
	Объект.ДатаЛицензииНаПользованиеНедрами  = "";
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРеквизитыНастройкиСозданияШтрихкодовУпаковок()
	
	Номенклатура   = Неопределено;
	Характеристика = Неопределено;
	Серия          = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСписокВыбораЭлементовШапки()
	
	Элементы.Номенклатура.СписокВыбора.Очистить();
	Элементы.Характеристика.СписокВыбора.Очистить();
	Элементы.Серия.СписокВыбора.Очистить();
	Элементы.ИдентификаторПроисхожденияВЕТИС.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеТаблицаПродукцииОснование(ДанныеТаблицаПродукцииОснование)
	
	Если ЭтоАдресВременногоХранилища(ДанныеТаблицаПродукцииОснование) Тогда
		УдалитьИзВременногоХранилища(ДанныеТаблицаПродукцииОснование);
		ДанныеТаблицаПродукцииОснование = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция СоздатьШтрихкодыУпаковок()
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Документ", Объект.Ссылка);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание штрихкодов упаковок верхнего уровня.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ИнтеграцияИСПереопределяемый.НастроитьДлительнуюОперацию(ПараметрыПроцедуры, ПараметрыВыполнения);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Документы.МаркировкаТоваровИСМП.СоздатьШтрихкодыУпаковокПоДаннымДокумента",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура СозданиеШтрихкодовУпаковокЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда // отменено пользователем
		Закрыть();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеТребуетсяИндивидуализация(Форма)
	Форма.ТребуетсяИндивидуализация = Форма.Объект.ОперацияНанесения = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ИндивидуализацияКИЗ");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидМехаЗавершение(ВидМеха, ДополнительныеПараметры) Экспорт
	
	Если ВидМеха = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВидМехаНаСервере(ВидМеха, ДополнительныеПараметры.ИдентификаторыСтрок);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидМехаНаСервере(ВидМеха, ИдентификаторыСтрок)
	
	КодТНВЭД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидМеха, "КодТНВЭД");
	
	Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ДанныеСтроки.КодТНВЭД = КодТНВЭД Тогда
			ДанныеСтроки.ВидМеха = ВидМеха;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВариантВыполненияАгрегацииПриИзмененииНаСервере()

	ОбновитьДальнейшиеДействия();
	ОбновитьПредставленияНаФорме();

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииСервер(ТребуетсяОбновитьКэшУпаковок)
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		
		ВременнаяТаблица = Объект.Товары.Выгрузить(Новый Структура("НомерСтроки", ДанныеСтроки.НомерСтроки));
		
		Если ВременнаяТаблица.Количество() Тогда
			Если ЗначениеЗаполнено(ВременнаяТаблица[0].ВидДокументаСертификации) Тогда
				ВременнаяТаблица[0].ВидДокументаСертификации     = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
				ВременнаяТаблица[0].НомерДокументаСертификации   = "";
				ВременнаяТаблица[0].ДатаДокументаСертификации    = Дата('00010101');
				ВременнаяТаблица[0].НомерСкважины                = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВременнаяТаблица[0].КемВыданПаспортСоответствия) Тогда
				ВременнаяТаблица[0].КемВыданПаспортСоответствия = "";
				ВременнаяТаблица[0].НомерПаспортаСоответствия   = "";
				ВременнаяТаблица[0].ДатаПаспортаСоответствия    = Дата('00010101');
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВременнаяТаблица[0].НомерЛицензииНаПользованиеНедрами) Тогда
				ВременнаяТаблица[0].НомерЛицензииНаПользованиеНедрами = "";
				ВременнаяТаблица[0].ДатаЛицензииНаПользованиеНедрами  = Дата('00010101');
			КонецЕсли;
			
			ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамМаркировкиТоваровИСМП(
				ВременнаяТаблица, Объект);
			
			ПоляЗаполнения = Новый Массив;
			
			ПоляЗаполнения.Добавить("ВидДокументаСертификации");
			ПоляЗаполнения.Добавить("НомерДокументаСертификации");
			ПоляЗаполнения.Добавить("ДатаДокументаСертификации");
			
			Если ИнтеграцияИСМПКлиентСервер.ИспользоватьПаспортСоответствия(ЭтотОбъект) Тогда
				ПоляЗаполнения.Добавить("КемВыданПаспортСоответствия");
				ПоляЗаполнения.Добавить("НомерПаспортаСоответствия");
				ПоляЗаполнения.Добавить("ДатаПаспортаСоответствия");
			КонецЕсли;
			
			Если ИнтеграцияИСМПКлиентСервер.ИспользоватьНомерСкважины(ЭтотОбъект) Тогда
				ПоляЗаполнения.Добавить("НомерСкважины");
				ПоляЗаполнения.Добавить("НомерЛицензииНаПользованиеНедрами");
				ПоляЗаполнения.Добавить("ДатаЛицензииНаПользованиеНедрами");
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВременнаяТаблица[0], СтрСоединить(ПоляЗаполнения, ","));
			ИнтеграцияИСМПКлиентСервер.ОбновитьКешСертификацииПоСтатистике(ЭтотОбъект, ВременнаяТаблица);
		КонецЕсли;
		
		СписокНоменклатуры = Новый Массив;
		СписокНоменклатуры.Добавить(ДанныеСтроки.Номенклатура);
		
		ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
		ИнтеграцияИСМПКлиентСервер.ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(ЭтотОбъект, ТекущаяСтрока);
		
	КонецЕсли;
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ПриИзмененииСоздаватьШтрихкодыУпаковок()
	
	ЭтоИмпортСФТС = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВводВОборотИмпортСФТС");
	ЗаполнятьНоменклатуру =
		Объект.ОтчетПроизводственнойЛинии
		И (Объект.СоздаватьШтрихкодыУпаковок
		Или ЭтоИмпортСФТС);

	Если Не ЗаполнятьНоменклатуру Тогда
		
		Элементы.Номенклатура.АвтоОтметкаНезаполненного   = Ложь;
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
		НоменклатураПриИзмененииСервер(Ложь, Ложь);
		ОтключитьОтметкуНезаполненного();
		
	Иначе
		
		Элементы.Номенклатура.АвтоОтметкаНезаполненного = Истина;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ЗаполнитьСписокВыбораЭлементаФорма("Номенклатура");
			Если ЗначениеЗаполнено("Номенклатура") Тогда
				НоменклатураПриИзмененииСервер();
			Иначе
				НоменклатураПриИзмененииСервер(, Ложь);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьДоступностьОтчетаПроизводственнойЛинии(ВидПродукции, ОперацииМаркировки, ОперацияНанесения)
	
	ЭтоПродукцияМОТП          = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(ВидПродукции);
	ЭтоПиво                   = ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво")
		Или ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках");
	ВозможнаОперацияНанесения = ИнтеграцияИСКлиентСервер.ВидПродукцииИспользуетОтчетыОНанесенииКодовМаркировки(ВидПродукции);
	
	Если ЭтоПродукцияМОТП Или (ЭтоПиво И Не ОперацииМаркировки.ЭтоТрансграничнаяТорговля) Тогда
		Возврат Истина;
	ИначеЕсли ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		Возврат Ложь;
	ИначеЕсли ОперацииМаркировки.ЭтоТрансграничнаяТорговля Или ОперацииМаркировки.ЭтоМаркировкаОстатков
		Или ОперацииМаркировки.ЭтоОперацияНанесения Тогда
		Возврат Ложь;
	ИначеЕсли ОперацииМаркировки.ЭтоВводВОборот И ВозможнаОперацияНанесения И Не ЗначениеЗаполнено(ОперацияНанесения) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеПроизводственнойПлощадкиВЕТИС(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ИдентификаторПроизводственнойПлощадкиВЕТИС)
		Или ЗначениеЗаполнено(Форма.Объект.ПроизводственнаяПлощадкаВЕТИС) Тогда
		Форма.Объект.ИдентификаторПроизводственнойПлощадкиВЕТИС = Неопределено;
		Форма.Объект.ПроизводственнаяПлощадкаВЕТИС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроизводственнойПлощадкиВЕТИСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ПроизводственнаяПлощадкаВЕТИС = Результат;
	
	ПриИзмененииПроизводственнойПлощадкиВЕТИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПроизводственнойПлощадкиВЕТИС()
	
	Если ЗначениеЗаполнено(Объект.ПроизводственнаяПлощадкаВЕТИС) Тогда
		Объект.ИдентификаторПроизводственнойПлощадкиВЕТИС = ИдентификаторПроизводственнойПлощадкиВЕТИС(Объект.ПроизводственнаяПлощадкаВЕТИС);
	Иначе
		Объект.ИдентификаторПроизводственнойПлощадкиВЕТИС = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИдентификаторПроизводственнойПлощадкиВЕТИС(ПроизводственнаяПлощадкаВЕТИС)
	Возврат ИнтеграцияИСМПВЕТИС.ИдентификаторПроизводственнойПлощадкиВЕТИС(ПроизводственнаяПлощадкаВЕТИС);
КонецФункции

&НаСервереБезКонтекста
Функция ВидыПродукцииОперацииИмпортСФТС()
	
	Результат = Новый Соответствие;
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Духи, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Обувь, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Фотоаппараты, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Шины, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.УпакованнаяВода, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Велосипеды, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Пиво, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ПивоВПотребительскихУпаковках, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Антисептики, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.КреслаКоляски, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МедицинскиеИзделия, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.СоковаяПродукция, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.БАДы, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.РастительныеМасла, Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыПродукцииОперацииПроизводствоВнеЕАЭС()
	
	Результат = Новый Соответствие;
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Антисептики, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.БезалкогольноеПиво, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.БАДы, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.Велосипеды, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.КреслаКоляски, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МедицинскиеИзделия, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС, Истина); // ЛК
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, Истина); // ЛК
	Результат.Вставить(Перечисления.ВидыПродукцииИС.МорепродуктыПодконтрольныеВЕТИС, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.СоковаяПродукция, Истина);
	Результат.Вставить(Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки, Истина);
	
	Если ИнтеграцияИСКлиентСервер.КормаДляЖивотныхПодконтрольныеВЕТИСИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхПодконтрольныеВЕТИС, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.КормаДляЖивотныхБезВЕТИСИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.КормаДляЖивотныхБезВЕТИС, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.МясоПодконтрольноеВЕТИСИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.МясоПодконтрольноеВЕТИС, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ВетеринарныеПрепаратыИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ВетеринарныеПрепараты, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ИгрыИИгрушкиДляДетейИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ИгрыИИгрушкиДляДетей, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.РадиоэлектроннаяПродукцияИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.РадиоэлектроннаяПродукция, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ТитановаяМеталлопродукцияИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ТитановаяМеталлопродукция, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.КонсервированнаяПродукцияПодконтрольнаяВЕТИСИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияПодконтрольнаяВЕТИС, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.КонсервированнаяПродукцияБезВЕТИСИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.КонсервированнаяПродукцияБезВЕТИС, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.РастительныеМаслаИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.РастительныеМасла, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ОптоволокноИОптоволоконнаяПродукцияИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ОптоволокноИОптоволоконнаяПродукция, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ПарфюмерныеИКосметическиеСредстваИБытоваяХимияИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ПарфюмерныеИКосметическиеСредстваИБытоваяХимия, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ПечатнаяПродукцияИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ПечатнаяПродукция, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.СтроительныеМатериалыИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.СтроительныеМатериалы, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ОтопительныеПриборыИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ОтопительныеПриборы, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.БакалеяИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.Бакалея, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.АлкогольнаяПродукцияДо9ПроцентовИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.АлкогольнаяПродукцияДо9Процентов, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ТелефоныИНоутбукиИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ТелефоныИНоутбуки, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.ПиротехническиеИзделияИСредстваПожарнойБезопасностиИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.ПиротехническиеИзделияИСредстваПожарнойБезопасности, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.КабельнаяПродукцияИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.КабельнаяПродукция, Истина);
	ИначеЕсли ИнтеграцияИСКлиентСервер.МоторныеМаслаИспользуетПроизводствоВнеЕАЭС() Тогда
		Результат.Вставить(Перечисления.ВидыПродукцииИС.МоторныеМасла, Истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
