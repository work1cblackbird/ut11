#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем КэшированныеЗначенияПоОрганизации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеФормированиеПартииИзДругихПартийЗЕРНО.Тип;
	
	ЗаполнитьДоступныеВидыПродукции();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Серия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "Серия", "Характеристика");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
		Отбор = Новый Структура("Партия", ВыбранноеЗначение.Партия);
		НайденныеСтроки = Объект.Партии.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Партии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			ОбновитьДанные(
				ВыбранноеЗначение,
				Новый Структура("ИмяПоля, ИдентификаторСтроки", "ПартииПартия", НоваяСтрока.ПолучитьИдентификатор()));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий, ЭтотОбъект);
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
		ЗаполнитьЗначенияСвойств(Объект, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("Серия");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанные(Объект.Организация, Новый Структура("ИмяПоля", "Организация"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьПодсказкуВводаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ОбновитьДанные(Объект.ВидПродукции, Новый Структура("ИмяПоля", "ВидПродукции"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (ЗначениеЗаполнено(ОКПД2) Или ЗначениеЗаполнено(Номенклатура))
		И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции подобранные партии
		                          |и потребительские свойства будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Операция");
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПартииПриИзменении(Элемент)
	
	ОбновитьДанные(Объект.НазначениеПартии, Новый Структура("ИмяПоля", "НазначениеПартии"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьПартиюНаХранениеПриИзменении(Элемент)
	
	Элементы.ВладелецПартииСтрокой.Видимость = Объект.ПоставитьПартиюНаХранение;
	Элементы.ПодразделениеВладельцаПартии.Видимость = ПодразделенияИспользуются
		И Объект.ПоставитьПартиюНаХранение И ТипВладельцаПартии = 0;
	
	Если Не Объект.ПоставитьПартиюНаХранение Тогда
		Объект.ВладелецПартии = Неопределено;
		ВладелецПартииСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтранаНазначенияПриИзменении(Элемент)
	
	ОбновитьДанные(Объект.НазначениеПартии, Новый Структура("ИмяПоля", "СтранаНазначения"));
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ОбновитьДанные(Номенклатура, Новый Структура("ИмяПоля", "Номенклатура"));
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОКПД2Представление) Тогда
		ОКПД2 = "";
	КонецЕсли;
	ОбновитьДанные(ОКПД2, Новый Структура("ИмяПоля", "ОКПД2"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеПартии = Новый Структура;
	ДанныеПартии.Вставить("ОКПД2", ОКПД2);
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораОКПД2(ЭтотОбъект, ДанныеПартии, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОКПД2 = ВыбранноеЗначение.Код;
	ОКПД2Представление = ВыбранноеЗначение.Представление;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.ОКПД2ОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ОКПД2АвтоПодбор(
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеПартии = Новый Структура;
	ДанныеПартии.Вставить("ОКПД2", ОКПД2);
	ДанныеПартии.Вставить("КодТНВЭД", КодТНВЭД);
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораТНВЭД(ЭтотОбъект, ДанныеПартии, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.КодТНВЭДАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.КодТНВЭДОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, Объект, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЗЕРНОПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЗЕРНО();
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МестоположениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Массив;
	ДополнительныеПоля.Добавить("СкладКонтрагент");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДополнительныеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Соответствие;
	ДополнительныеПоля.Вставить("СкладКонтрагент", "ВладелецАдреса");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительныеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "СкладКонтрагентЗЕРНО",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаПриИзменении(Элемент)
	Объект.МестоположениеКлючАдреса = Неопределено;
	Объект.СкладКонтрагент          = Неопределено;
	МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.МестоположениеКлючАдреса) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", Объект.МестоположениеКлючАдреса);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Ссылка", Объект.МестоположениеКлючАдреса);
	
	ОткрытьФорму("Справочник.КлючиАдресовЗЕРНО.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("МестоположениеКлючАдресаОкончаниеРедактирования", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Данные = ВыбранноеЗначение;
	Иначе
		Данные = Новый Структура;
		Данные.Вставить("Адрес", ВыбранноеЗначение);
		Данные.Вставить("ВладелецАдреса", Неопределено);
	КонецЕсли;
	
	ОператорыАдреса = ОператорыАдреса(Данные.Адрес);
	Если Не ЗначениеЗаполнено(Данные.ВладелецАдреса)
		И ОператорыАдреса.Количество() = 1 Тогда
		Данные.ВладелецАдреса = ОператорыАдреса[0].Значение;
	КонецЕсли;
	
	Объект.МестоположениеКлючАдреса = Данные.Адрес;
	Объект.СкладКонтрагент = Данные.ВладелецАдреса;
	МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Текст) Тогда
		ТекстДляАвтоПодбора = СокрЛП(Элемент.ТекстРедактирования);
	Иначе
		ТекстДляАвтоПодбора = СокрЛП(Текст);
	КонецЕсли;
	
	Если СтрДлина(ТекстДляАвтоПодбора) >= 1 Тогда
		Если ЗначениеЗаполнено(Объект.ВладелецПартии) Тогда
			Владелец = Объект.ВладелецПартии;
			Подразделение = Объект.ПодразделениеВладельцаПартии;
		Иначе
			Владелец = Объект.Организация;
			Подразделение = Объект.Подразделение;
		КонецЕсли;
		
		КлючВладельца = Новый Структура;
		КлючВладельца.Вставить("Организация", Владелец);
		КлючВладельца.Вставить("Подразделение", Подразделение);
		
		ДанныеВыбора = МестоположениеКлючАдресаСписокАвтоподбора(
			ТекстДляАвтоПодбора, КлючВладельца, КэшированныеЗначенияПоОрганизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	
	ОткрытьФорму("Справочник.КлючиАдресовЗЕРНО.Форма.ФормаВыбораПоОстаткам", ПараметрыОткрытия, Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Объект.СкладКонтрагент) Тогда
		
		ПоказатьЗначение(,Объект.СкладКонтрагент);
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.МестоположениеКлючАдреса) Тогда
		
		Возврат;
		
	ИначеЕсли ОператорыАдреса.Количество() = 0 Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Ключ", Объект.МестоположениеКлючАдреса);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Ссылка", Объект.МестоположениеКлючАдреса);
		
		ОткрытьФорму("Справочник.КлючиАдресовЗЕРНО.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("МестоположениеКлючАдресаОкончаниеРедактирования", ЭтотОбъект, ДополнительныеПараметры),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПоказатьВыборИзСписка(
			Новый ОписаниеОповещения("МестоположениеКлючАдресаОкончаниеВыбораИзСписка", ЭтотОбъект),
			ОператорыАдреса,
			Элемент,
			ОператорыАдреса[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗЕРНОПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий из других партий ЗЕРНО"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий из других партий ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартии

&НаКлиенте
Процедура ПартииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормЗЕРНОКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПослеУдаления(Элемент)
	ПересчитатьИтоговоеКоличествоЗЕРНО();
КонецПроцедуры

&НаКлиенте
Процедура ПартииПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.РеестрПартийЗЕРНО") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
		ТекущиеДанные.Партия = ВыбранноеЗначение.Партия;
		ТекущиеДанные.КоличествоЗЕРНО = ВыбранноеЗначение.КоличествоЗЕРНО;
		
		ОбновитьДанные(ВыбранноеЗначение,
			Новый Структура("ИмяПоля, ИдентификаторСтроки", "ПартииПартия", Элементы.Партии.ТекущаяСтрока));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПартияПриИзменении(Элемент)
	
	ВыбраннаяПартия = Элементы.Партии.ТекущиеДанные.Партия;
	ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "ПартииПартияИзменение", Элементы.Партии.ТекущаяСтрока);
	ОбновитьДанные(ВыбраннаяПартия, ПараметрыОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииПартияОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Партии.ТекущиеДанные.НомерПартии = "";
	Элементы.Партии.ТекущиеДанные.КоличествоЗЕРНО = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартииКоличествоЗЕРНОПриИзменении(Элемент)
	ПересчитатьИтоговоеКоличествоЗЕРНО();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПотребительскиеСвойства

&НаКлиенте
Процедура ПотребительскиеСвойстваПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПотребительскиеСвойства.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПотребительскиеСвойстваЗначение Тогда
		ТекущиеДанные = Элементы.ПотребительскиеСвойства.ТекущиеДанные;
		ИнтеграцияЗЕРНОКлиент.НастроитьТипЗначенияПотребительскогоСвойства(
			ЭтотОбъект,
			Элемент.ТекущийЭлемент,
			ТекущиеДанные.ПотребительскоеСвойство,
			ТекущиеДанные.Значение,
			ОКПД2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийИзДругихПартийЗЕРНО.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийИзДругихПартийЗЕРНО.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийИзДругихПартийЗЕРНО.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПартии(Команда)
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияЗЕРНОКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПартии(Команда)
	
	ОчиститьСообщения();
	
	Если Не (СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована")
		Или СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи")) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование партии невозможно'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ВопросАннулированиеПартииЗавершение",
			ЭтотОбъект,
			Объект.Партия);
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партии из партий ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СтрокиТекстаВопроса = Новый Массив();
		
		СтрокиТекстаВопроса.Добавить(
			СтрШаблон(НСтр("ru = 'Аннулировать сформированную партию %1 ?'"), Объект.Партия));
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ПодтверждениеАннулированияПартииЗавершение",
			ЭтотОбъект,
			Объект.Партия);
		
		ТекстВопроса = СтрСоединить(СтрокиТекстаВопроса, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСвойства(Команда)
	
	ТекущиеДанные = Элементы.Партии.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьПотребительскиеСвойстваПартииНаСервере(ТекущиеДанные.ПолучитьИдентификатор());
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСвойстваПартии;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПартиям(Команда)
	
	ПересчитатьИтоговоеКоличествоЗЕРНО();
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ВыборОснования

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию()
	
	ОчиститьСообщения();
	
	ПерезаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "Характеристика", "ХарактеристикиИспользуются"); 
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "Серия", "СтатусУказанияСерий", "ТипНоменклатуры");
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(
		ЭтотОбъект, "Количество", "Номенклатура");
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойства(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойстваДиапазон(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьУсловноеОформлениеХарактеристикаСерия(СписокРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(СписокРеквизитов) Тогда
		СписокРеквизитов = "Характеристика, Серия";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Для Каждого СвойствоСтруктуры Из СтруктураРеквизитов Цикл
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, СвойствоСтруктуры.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнтеграцияЗЕРНО.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ЦветГиперссылки                = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаТребуетВниманияГосИС = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ФормированиеПартийИзДругихПартийЗЕРНО);
	
	ЕдиницаИзмеренияКилограмм = ИнтеграцияИСКлиентСерверПовтИсп.ЕдиницаИзмеренияКилограмм();
	
	ПодразделенияИспользуются = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "Номенклатура");
	
	ЗаполнитьДоступныеОперации(ЭтотОбъект);
	ЗаполнитьДоступныеЦелиИспользования(ЭтотОбъект);
	ЗаполнитьНазначениеПартии(ЭтотОбъект);
	ЗаполнитьГодУрожая(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	// Использовать реквизиты формы для работы с условным оформлением.
	ИнициализироватьСлужебныеРеквизиты();
	
	ТипВладельцаПартии = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.ВладелецПартии);
	ТипТоваропроизводителя = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.Товаропроизводитель);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	ОбновитьПодсказкуВводаВладелецПартииТоваропроизводитель(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
	ОператорыАдреса = ОператорыАдреса(Объект.МестоположениеКлючАдреса);
	МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеОперации(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Операция.СписокВыбора.Очистить();
	Элементы.Операция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий"));
	Элементы.Операция.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ"));
	
	Элементы.Операция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеЦелиИспользования(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ЦельИспользования.СписокВыбора.Очистить();
	Элементы.ЦельИспользования.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ЦельИспользованияПартииКормовые"));
	Элементы.ЦельИспользования.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ЦельИспользованияПартииПищевые"));
	Элементы.ЦельИспользования.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНазначениеПартии(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.НазначениеПартии.СписокВыбора.Очистить();
	Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ"));
	Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииПереработка"));
	Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииХранениеОбработка"));
	
	Элементы.НазначениеПартии.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьГодУрожая(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГодУрожая.СписокВыбора.Очистить();
	ТекущийГод = Год(ТекущаяДатаСеанса());
	Для ЗначениеВыбора = ТекущийГод - 12 По ТекущийГод Цикл
		Элементы.ГодУрожая.СписокВыбора.Добавить(ЗначениеВыбора, Формат(ЗначениеВыбора, "ЧЦ=4; ЧГ=;"));
	КонецЦикла;
	
	Элементы.ГодУрожая.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСлужебныхРеквизитыФормыДляСинхронизации()
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("Серия");
	Результат.Добавить("ОКПД2");
	Результат.Добавить("КодТНВЭД");
	Результат.Добавить("СтатусУказанияСерий");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСлужебныеРеквизитыФормы(Форма)
	
	Форма.Номенклатура               = Неопределено;
	Форма.Характеристика             = Неопределено;
	Форма.Серия                      = Неопределено;
	Форма.СтатусУказанияСерий        = 0;
	Форма.ХарактеристикиИспользуются = Ложь;
	Форма.ТипНоменклатуры            = Неопределено;
	
	Форма.ОКПД2              = "";
	Форма.ОКПД2Представление = "";
	Форма.КодТНВЭД           = "";
	Форма.ЕдиницаИзмерения   = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	Объект.СкладКонтрагент = Неопределено;
	Объект.Местоположение = "";
	Объект.МестоположениеСтрокой = "";
	Объект.Количество      = 0;
	Объект.КоличествоЗЕРНО = 0;
	Объект.ПотребительскиеСвойства.Очистить();
	Объект.Партии.Очистить();
	
	Объект.Товаропроизводитель = Неопределено;
	Форма.ТоваропроизводительСтрокой = "";
	Объект.СрокГодности = Дата(1,1,1);
	Объект.ДатаИзготовления = Дата(1,1,1);
	Объект.ВладелецПартии = Неопределено;
	Форма.ВладелецПартииСтрокой = "";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВидПродукции") Или Инициализация Тогда
		
		СтруктураРеквизитов.Вставить("Операция");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Операция")
		Или Инициализация Тогда
		
		ЭтоФормированиеПартииБумажныйСДИЗ = Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ");
		
		ЭтоЗерно = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно");
		
		Элементы.ГодУрожая.Видимость             = ЭтоЗерно;
		
		Элементы.ГруппаВладелецПартии.Видимость      = ЭтоЗерно;
		Элементы.ВладелецПартииСтрокой.Видимость     = Объект.ПоставитьПартиюНаХранение;
		Элементы.ГруппаТоваропроизводитель.Видимость = Не ЭтоЗерно;
		
		Элементы.ГруппаДатаСрокГодности.Видимость = Не ЭтоЗерно;
		
		Элементы.ПартииПодменюЗаполнить.Видимость = Не ЭтоФормированиеПартииБумажныйСДИЗ;
		Элементы.ПартииПартия.Видимость           = Не ЭтоФормированиеПартииБумажныйСДИЗ;
		Элементы.СкопироватьСвойства.Видимость    = Не ЭтоФормированиеПартииБумажныйСДИЗ;
		Элементы.ПартииНомерПартии.Видимость      = ЭтоФормированиеПартииБумажныйСДИЗ;
		
		Элементы.ГруппаМестоположениеКлючАдреса.Видимость = Не ЭтоФормированиеПартииБумажныйСДИЗ;
		Элементы.ГруппаМестоположение.Видимость           = ЭтоФормированиеПартииБумажныйСДИЗ;
		
		СтруктураРеквизитов.Вставить("НазначениеПартии");
		СтруктураРеквизитов.Вставить("Подразделение");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение") Или Инициализация Тогда
		
		ЭтоЗерно = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно");
		
		Элементы.Подразделение.Видимость                    = Форма.ПодразделенияИспользуются;
		Элементы.ПодразделениеВладельцаПартии.Видимость     = Форма.ПодразделенияИспользуются 
			И Объект.ПоставитьПартиюНаХранение И Форма.ТипВладельцаПартии = 0;
		Элементы.ПодразделениеТоваропроизводителя.Видимость = Форма.ПодразделенияИспользуются
			И Не ЭтоЗерно И Форма.ТипТоваропроизводителя = 0;
		
		ОбновитьПодсказкуВводаПодразделения(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазначениеПартии")
		Или Инициализация Тогда
		
		ЭтоВывозСТерриторииРФ = Объект.НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ");
		Элементы.СтранаНазначения.Видимость = ЭтоВывозСТерриторииРФ;
		Элементы.КодТНВЭД.Видимость         = ЭтоВывозСТерриторииРФ;
		
		СтруктураРеквизитов.Вставить("ОКПД2");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Номенклатура")
		Или Инициализация Тогда
		
		НоменклатураЗаполнена = ЗначениеЗаполнено(Форма.Номенклатура);
		Элементы.Количество.АвтоОтметкаНезаполненного = НоменклатураЗаполнена;
		Элементы.Количество.ТолькоПросмотр            = Не НоменклатураЗаполнена;
		
		СтруктураРеквизитов.Вставить("ОКПД2");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОКПД2")
		Или Инициализация Тогда
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			Элементы.КодТНВЭД.Доступность = ЗначениеЗаполнено(Форма.ОКПД2);
			
			Если ЗначениеЗаполнено(Форма.ОКПД2) Тогда
				ИнтеграцияЗЕРНОКлиентСервер.ОбновитьСписокВыбораКодаТНВЭД(Форма, Форма.ОКПД2, "КодТНВЭД", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СтатусЗЕРНО") Тогда
		
		РедактированиеФормыНеДоступно = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи");
		
		Форма.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
		
		Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
		Элементы.СтраницаПартии.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
		Элементы.СтраницаСвойстваПартии.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
		Элементы.КоманднаяПанельПартии.Доступность = Не Форма.РедактированиеФормыНеДоступно;
		
		Элементы.АннулироватьПартии.Видимость =
			Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована")
			Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи")
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ОбновитьСтатусЗЕРНО") Тогда
		
		УстановитьПараметрыОбновленияСтатуса = Форма.Модифицированность И НЕ Инициализация;
		ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	КомментарийМестоположение = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(
		Объект.Местоположение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеАдресаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусЗЕРНО(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросАннулированиеПартииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ПодтверждениеАннулированияПартииЗавершение(РезультатВопроса, Объект.Партия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеАннулированияПартииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.Организация        = Объект.Организация;
	ПараметрыПередачи.Подразделение      = Объект.Подразделение;
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию");
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка        = Объект.Ссылка;
		ПараметрыПередачи.Организация   = Объект.Организация;
		ПараметрыПередачи.Подразделение = Объект.Подразделение;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса = Ложь)
	
	Объект   = Форма.Объект;
	
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(Объект);
	
	Форма.СтатусЗЕРНО = ПараметрыСтатуса.СтатусЗЕРНО;
	Форма.СтатусЗЕРНОПредставление = ПараметрыСтатуса.СтатусЗЕРНОПредставление;
	Форма.РедактированиеФормыНеДоступно = ПараметрыСтатуса.РедактированиеФормыНеДоступно;
	
	НастроитьЗависимыеЭлементыФормы(Форма, "СтатусЗЕРНО");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЗЕРНО");
	Результат.Вставить("СтатусЗЕРНОПредставление");
	Результат.Вставить("РедактированиеФормыНеДоступно", Ложь);
	
	Ссылка = ДокументОбъект.Ссылка;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	СтатусЗЕРНО        = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
		|ГДЕ
		|	Статусы.ОбъектСинхронизации = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЗЕРНО.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусЗЕРНО = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеПередачуДанных);
	
	СтатусЗЕРНОПредставление = ИнтеграцияЗЕРНО.ПредставлениеСтатуса(СтатусЗЕРНО, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусЗЕРНО <> Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
	
	Результат.СтатусЗЕРНО                   = СтатусЗЕРНО;
	Результат.СтатусЗЕРНОПредставление      = СтатусЗЕРНОПредставление;
	Результат.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизиты()
	
	ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект);
	
	СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект, СтрСоединить(СлужебныеРеквизиты, ","));
	
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		
		ТаблицаОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(ОКПД2);
		
		ДанныеОКПД2 = ТаблицаОКПД2.Найти(ОКПД2);
		Если ДанныеОКПД2 <> Неопределено Тогда
			ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
				ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
		КонецЕсли;
		
		ИнициализироватьТип = Объект.Ссылка.Пустая() Или Модифицированность;
		ИнтеграцияЗЕРНО.ИнициализироватьСлужебныеРеквизитыПотребительскихСвойств(ЭтотОбъект, ОКПД2, ИнициализироватьТип);
		ИнтеграцияЗЕРНО.ИнициализироватьКэшВидовСельхозКультур(ЭтотОбъект, ОКПД2);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партия) Тогда
		ПредставлениеПартия = Новый ФорматированнаяСтрока(
			Строка(Объект.Партия),,,, ПолучитьНавигационнуюСсылку(Объект.Партия));
	Иначе
		ПредставлениеПартия = Новый ФорматированнаяСтрока(
			НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(ИмяЦвета = "ЦветОсобогоТекста")
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля[ИмяЦвета];
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦвета);
	#КонецЕсли
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#Область ПотребительскиеСвойства

&НаСервере
Процедура СкопироватьПотребительскиеСвойстваПартииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Партии.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИнтеграцияЗЕРНО.СкопироватьПотребительскиеСвойстваПартии(ТекущиеДанные.Партия, Объект.ПотребительскиеСвойства, КэшПотребительскихСвойств);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбработкаРезультатаПодбораПартийНаСервере(Партия, ИдентификаторСтроки, ПараметрыОбработки)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Партия", Партия);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Остатки.Партия КАК Партия,
	|	МАКСИМУМ(Остатки.КоличествоЗЕРНООстаток - Остатки.ВОбработкеЗЕРНООстаток) КАК ДоступныйОстаток,
	|	РеестрПартийЗЕРНО.Идентификатор КАК НомерПартии,
	|
	|	РеестрПартийЗЕРНО.НазначениеПартии  КАК НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	РеестрПартийЗЕРНО.ГодУрожая         КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.ДатаИзготовления  КАК ДатаИзготовления,
	|	РеестрПартийЗЕРНО.Местоположение    КАК МестоположениеКлючАдреса,
	|
	|	РеестрПартийЗЕРНО.ОКПД2                                      КАК ОКПД2,
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторНСИЗЕРНО.Наименование, """")) КАК ОКПД2Представление,
	|	РеестрПартийЗЕРНО.КодТНВЭД                                   КАК КодТНВЭД,
	|
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Номенклатура, НЕОПРЕДЕЛЕНО))     КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Характеристика, НЕОПРЕДЕЛЕНО))   КАК Характеристика,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Серия, НЕОПРЕДЕЛЕНО))            КАК Серия
	|
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В (&Партия)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Остатки.Партия = РеестрПартийЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|		ПО РеестрПартийЗЕРНО.ОКПД2 = КлассификаторНСИЗЕРНО.Идентификатор
	|		И КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО СоответствиеПартийЗЕРНО.Партия = РеестрПартийЗЕРНО.Ссылка
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Партия,
	|	РеестрПартийЗЕРНО.Идентификатор,
	|	РеестрПартийЗЕРНО.НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования,
	|	РеестрПартийЗЕРНО.ГодУрожая,
	|	РеестрПартийЗЕРНО.ДатаИзготовления,
	|	РеестрПартийЗЕРНО.Местоположение,
	|	РеестрПартийЗЕРНО.ОКПД2,
	|	РеестрПартийЗЕРНО.КодТНВЭД";
	
	ТаблицаПодобранныхПартий = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПартии Из ТаблицаПодобранныхПартий Цикл
		
		Если ПараметрыОбработки.ЗаполнитьОстатки Тогда
			СтрокаТабличнойЧасти = Объект.Партии.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТабличнойЧасти.КоличествоЗЕРНО = СтрокаПартии.ДоступныйОстаток;
		КонецЕсли;
		
		Если ПараметрыОбработки.ЗаполнитьОКПД2 Тогда
			
			ЗаполнитьЗначенияСвойств(Объект, СтрокаПартии, "ОКПД2, КодТНВЭД, Номенклатура, Характеристика, Серия");
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтрокаПартии, "ОКПД2, ОКПД2Представление, КодТНВЭД, Номенклатура, Характеристика, Серия");
			
			РеквизитыШапки = Новый Массив;
			РеквизитыШапки.Добавить("ГодУрожая");
			РеквизитыШапки.Добавить("НазначениеПартии");
			РеквизитыШапки.Добавить("ЦельИспользования");
			
			Для Каждого ИмяРеквизита Из РеквизитыШапки Цикл
				Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
					Объект[ИмяРеквизита] = СтрокаПартии[ИмяРеквизита];
				КонецЕсли;
			КонецЦикла;
		
		КонецЕсли;
		
		Если ПараметрыОбработки.ЗаполнитьМестоположение Тогда
			Объект.МестоположениеКлючАдреса = СтрокаПартии.МестоположениеКлючАдреса;
		КонецЕсли;
		
		Если ПараметрыОбработки.ЗаполнитьДатуИзготовления Тогда
			Объект.ДатаИзготовления = СтрокаПартии.ДатаИзготовления;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИзменениеДанных

&НаКлиенте
Функция СтруктураРеквизитовИзменяемыхНаСервере()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ПартииПартия");
	СтруктураВозврата.Вставить("ПартииПартияИзменение");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	ИмяОбновляемогоПоля = ДополнительныеПараметры.ИмяПоля;
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолейДляНастройки = Новый Массив;
	
	Если ИмяОбновляемогоПоля = "Номенклатура" Тогда
		
		ТекущийОКПД2 = ОКПД2;
		
		СобытияФормЗЕРНОКлиент.ПриИзмененииНоменклатурыВШапке(
			ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		Если ТекущийОКПД2 <> ОКПД2 Тогда
			ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ДополнительныеПараметры);
		КонецЕсли;
		
		СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
		ЗаполнитьЗначенияСвойств(Объект, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
		
		Модифицированность = Истина;
		ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление");
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ОКПД2" Тогда
		
		ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ДополнительныеПараметры);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "Организация" Тогда
		
		ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление", Истина);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ВидПродукции" Тогда
		
		ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "Номенклатура");
		
		ОчиститьРеквизитыОбъекта(ЭтотОбъект);
		ОчиститьСлужебныеРеквизитыФормы(ЭтотОбъект);
		СобытияФормЗЕРНОКлиент.ПриИзмененииНоменклатурыВШапке(
			ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
		ЗаполнитьЗначенияСвойств(Объект, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
		
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление");
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "НазначениеПартии" Тогда
		
		Если Объект.НазначениеПартии <> ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ") Тогда
			Объект.СтранаНазначения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Истина);
		Иначе
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
		КонецЕсли;
		
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(ОКПД2, КодТНВЭД, ЭтотОбъект);
			Если НайденноеЗначениеТНВЭД = Неопределено Тогда
				ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
			Иначе
				КодТНВЭД = НайденноеЗначениеТНВЭД;
			КонецЕсли;
			
		Иначе
			
			КодТНВЭД = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СтранаНазначения" Тогда
		
		Если ЗначениеЗаполнено(Объект.СтранаНазначения) Тогда
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Истина);
		Иначе
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
			МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПотребительскиеСвойства = Ложь;
	ОбновитьКэшВидовСельхозКультур  = Ложь;
	
	Если СтруктураРеквизитовИзменяемыхНаСервере().Свойство(ИмяОбновляемогоПоля)
		Или ДополнительныеПараметры.Свойство("ОбновитьПотребительскиеСвойства", ОбновитьПотребительскиеСвойства) И ОбновитьПотребительскиеСвойства
		Или ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур) И ОбновитьКэшВидовСельхозКультур
		Или ДополнительныеПараметры.Свойство("ПрименитьУсловноеОформление") Тогда
		ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если МассивПолейДляНастройки.Количество() Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СтрСоединить(МассивПолейДляНастройки, ","));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения)
	
	ИмяОбновляемогоПоля = ДополнительныеПараметры.ИмяПоля;
	
	Если ИмяОбновляемогоПоля = "ПартииПартия"
		Или ИмяОбновляемогоПоля = "ПартииПартияИзменение" Тогда
		
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("ЗаполнитьОКПД2", Ложь);
		ПараметрыОбработки.Вставить("ЗаполнитьОстатки", ИмяОбновляемогоПоля = "ПартииПартияИзменение");
		ПараметрыОбработки.Вставить("ЗаполнитьМестоположение", Не ЗначениеЗаполнено(Объект.МестоположениеКлючАдреса));
		ПараметрыОбработки.Вставить(
			"ЗаполнитьДатуИзготовления",
			Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна
				И Не ЗначениеЗаполнено(Объект.ДатаИзготовления));
		
		ЗаполнитьПотребительскиеСвойства = Ложь;
		ОбновитьКэшВидовСельхозКультур   = Ложь;
		
		Если Не ЗначениеЗаполнено(ОКПД2) Тогда
			
			ЗаполнитьПотребительскиеСвойства = Истина;
			
			Если ТипЗнч(Результат) = Тип("Структура") Тогда
			
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
				ЗаполнитьЗначенияСвойств(Объект, Результат, ,"КоличествоЗЕРНО, Операция, Партия");
				Если Результат.Свойство("Номенклатура") Тогда
					ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект);
					ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(Объект);
					ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление", Истина);
				КонецЕсли;
				
				Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ОКПД2", ОКПД2);
					ОбновитьКэшВидовСельхозКультур = КэшВидовСельхозКультур.НайтиСтроки(ПараметрыОтбора).Количество() = 0;
				КонецЕсли;
				
			Иначе
				
				ПараметрыОбработки.ЗаполнитьОКПД2 = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущаяНоменклатура = Объект.Номенклатура;
		
		Если ПараметрыОбработки.ЗаполнитьОКПД2 Или ПараметрыОбработки.ЗаполнитьОстатки
			Или ПараметрыОбработки.ЗаполнитьМестоположение Или ПараметрыОбработки.ЗаполнитьДатуИзготовления Тогда
			
			Если ТипЗнч(Результат) = Тип("Структура") Тогда
				Партия = Результат.Партия;
			Иначе
				Партия = Результат;
			КонецЕсли;
			
			ОбработкаРезультатаПодбораПартийНаСервере(Партия, ДополнительныеПараметры.ИдентификаторСтроки, ПараметрыОбработки);
			
			Если ПараметрыОбработки.ЗаполнитьМестоположение Тогда
				ОператорыАдреса        = ОператорыАдреса(Объект.МестоположениеКлючАдреса);
				Объект.СкладКонтрагент = Неопределено;
				Если ОператорыАдреса.Количество() Тогда
					Если ОператорыАдреса.Количество() = 1 Тогда
						Объект.СкладКонтрагент = ОператорыАдреса[0].Значение;
					КонецЕсли;
				КонецЕсли;
				МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект);
			КонецЕсли;
			
			Если ПараметрыОбработки.ЗаполнитьОКПД2 Тогда
				
				Если ТекущаяНоменклатура <> Объект.Номенклатура Тогда
					ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект);
					ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(Объект);
					ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление", Истина);
				КонецЕсли;
				
				Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("ОКПД2", ОКПД2);
					ОбновитьКэшВидовСельхозКультур = КэшВидовСельхозКультур.НайтиСтроки(ПараметрыОтбора).Количество() = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.КоличествоЗЕРНО = Объект.Партии.Итог("КоличествоЗЕРНО");
		СтруктураЗаполнения = ИнтеграцияЗЕРНОКлиентСервер.ИнициализироватьСтруктуруЗаполненияСлужебныхРеквизитовНоменклатуры();
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Объект);
		ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(СтруктураЗаполнения);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения, "Количество");
		
		Если ЗаполнитьПотребительскиеСвойства Тогда
			
			Объект.ПотребительскиеСвойства.Очистить();
			СвойстваЗаполненыПоДаннымКэша = ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьПотребительскиеСвойстваПоДаннымКеша(
				ЭтотОбъект, ОКПД2);
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Не СвойстваЗаполненыПоДаннымКэша);
			ДополнительныеПараметры.Вставить("СкопироватьЗначенияСвойствПартии", Истина);
			
		Иначе
			СкопироватьЗначенияСвойствПартии = Объект.Партии.Количество() = 1;
			Если СкопироватьЗначенияСвойствПартии Тогда
				Для Каждого СтрокаПотребительскогоСвойства Из Объект.ПотребительскиеСвойства Цикл
					Если ЗначениеЗаполнено(СтрокаПотребительскогоСвойства.Значение) Тогда
						СкопироватьЗначенияСвойствПартии = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ДополнительныеПараметры.Вставить("СкопироватьЗначенияСвойствПартии", СкопироватьЗначенияСвойствПартии);
			
		КонецЕсли;
		
		ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПрименитьУсловноеОформление") Тогда
		Если ИмяОбновляемогоПоля = "Организация" Тогда
			ОбновитьПодсказкуВводаВладелецПартииТоваропроизводитель(ЭтотОбъект);
		ИначеЕсли ИмяОбновляемогоПоля = "ВидПродукции" Тогда
			ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект);
			ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(Объект);
			ОпределитьТипОрганизацияКонтрагент(ТипВладельцаПартии,     Объект.ВладелецПартии);
			ОпределитьТипОрганизацияКонтрагент(ТипТоваропроизводителя, Объект.Товаропроизводитель);
			ПрименитьУсловноеОформлениеХарактеристикаСерия();
		Иначе
			ПрименитьУсловноеОформлениеХарактеристикаСерия();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьКэшВидовСельхозКультур = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур)
		И ОбновитьКэшВидовСельхозКультур Тогда
		
		ТаблицаОКПД2ТНВЭД = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(ОКПД2);
		ИнтеграцияЗЕРНО.ОбновитьКэшВидовСельхозКультур(ЭтотОбъект, ТаблицаОКПД2ТНВЭД);
		ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(КодТНВЭД, ОКПД2, ТаблицаОКПД2ТНВЭД);
		
	КонецЕсли;
	
	ОбновитьПотребительскиеСвойства = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьПотребительскиеСвойства", ОбновитьПотребительскиеСвойства)
		И ОбновитьПотребительскиеСвойства Тогда
		
		Если ИмяОбновляемогоПоля = "Операция" Или ИмяОбновляемогоПоля = "НазначениеПартии"
			Или ИмяОбновляемогоПоля = "СтранаНазначения" Тогда
			КэшПотребительскихСвойств.Очистить();
		КонецЕсли;
		
		Объект.ПотребительскиеСвойства.Очистить();
		ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
			ОКПД2, Объект.НазначениеПартии, , Объект.СтранаНазначения);
		Если ПотребительскиеСвойства <> Неопределено Тогда
			
			ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, ОКПД2);
			Для Каждого СтрокаПотребительскогоСвойства Из ПотребительскиеСвойства Цикл
				
				НоваяСтрока = Объект.ПотребительскиеСвойства.Добавить();
				ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьСтрокуПотребительскогоСвойства(ЭтотОбъект, НоваяСтрока, СтрокаПотребительскогоСвойства);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("СкопироватьЗначенияСвойствПартии") 
		И ДополнительныеПараметры.СкопироватьЗначенияСвойствПартии Тогда
		
		СкопироватьПотребительскиеСвойстваПартииНаСервере(ДополнительныеПараметры.ИдентификаторСтроки);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	МассивПолейДляНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбновляемогоПоля);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СтрСоединить(МассивПолейДляНастройки, ","));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ДополнительныеПараметры)
	
	Объект.ПотребительскиеСвойства.Очистить();
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		
		СвойстваЗаполненыПоДаннымКэша = ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьПотребительскиеСвойстваПоДаннымКеша(ЭтотОбъект, ОКПД2);
		ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Не СвойстваЗаполненыПоДаннымКэша);
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(ОКПД2, КодТНВЭД, ЭтотОбъект);
			Если НайденноеЗначениеТНВЭД = Неопределено Тогда
				ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
			Иначе
				КодТНВЭД = НайденноеЗначениеТНВЭД;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ОКПД2Представление = "";
		КодТНВЭД           = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		
		ОбновитьДанные(Объект.ВидПродукции, Новый Структура("ИмяПоля", "ВидПродукции"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыПродукции()
	
	ВидыПродукции = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	
	Элементы.ВидПродукции.СписокВыбора.Очистить();
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Элементы.ВидПродукции.СписокВыбора.Добавить(ВидПродукции, Строка(ВидПродукции));
	КонецЦикла;
	Элементы.ВидПродукции.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипОрганизацияКонтрагент(ТипВладельца, ОрганизацияКонтрагент)
	
	ТипВладельца = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(ОрганизацияКонтрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуВводаВладелецПартииТоваропроизводитель(Форма)
	
	ПредставлениеОрганизации = Строка(Форма.Объект.Организация);
	Форма.Элементы.ВладелецПартииСтрокой.ПодсказкаВвода = ПредставлениеОрганизации;
	Форма.Элементы.ТоваропроизводительСтрокой.ПодсказкаВвода = ПредставлениеОрганизации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуВводаПодразделения(Форма)
	
	Если Форма.ПодразделенияИспользуются Тогда
		
		ПредставлениеПодразделения = Строка(Форма.Объект.Подразделение);
		Если ЗначениеЗаполнено(Форма.Объект.ВладелецПартии) Тогда
			Форма.Элементы.ПодразделениеВладельцаПартии.ПодсказкаВвода = "";
		Иначе
			Форма.Элементы.ПодразделениеВладельцаПартии.ПодсказкаВвода = ПредставлениеПодразделения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Объект.Товаропроизводитель) Тогда
			Форма.Элементы.ПодразделениеТоваропроизводителя.ПодсказкаВвода = "";
		Иначе
			Форма.Элементы.ПодразделениеТоваропроизводителя.ПодсказкаВвода = ПредставлениеПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЗЕРНО()
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, Объект, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтоговоеКоличествоЗЕРНО()
	Объект.КоличествоЗЕРНО = Объект.Партии.Итог("КоличествоЗЕРНО");
	ПриИзмененииКоличествоЗЕРНО();
КонецПроцедуры

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "ВладелецПартииСтрокой,ТоваропроизводительСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПолеСоставногоТипа(Элемент)
	
	Если Элемент.Имя = "ВладелецПартииСтрокой"  Тогда
		ОпределитьТипОрганизацияКонтрагент(ТипВладельцаПартии, Объект.ВладелецПартии);
	ИначеЕсли Элемент.Имя = "ТоваропроизводительСтрокой" Тогда
		ОпределитьТипОрганизацияКонтрагент(ТипТоваропроизводителя, Объект.Товаропроизводитель);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	Если Результат <> Неопределено Тогда
		Элемент = ДополнительныеПараметры.Элемент;
		ПриИзмененииПолеСоставногоТипа(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область МестоположениеКлючАдреса

&НаКлиентеНаСервереБезКонтекста
Процедура МестоположениеКлючАдресаОбновитьНадпись(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.СкладКонтрагент) Тогда
		Форма.МестоположениеНадпись = Строка(Форма.Объект.СкладКонтрагент);
		Форма.Элементы.Местоположение.ЦветТекста = Форма.ЦветГиперссылки;
	ИначеЕсли Не ЗначениеЗаполнено(Форма.Объект.МестоположениеКлючАдреса) Тогда
		Форма.ОператорыАдреса.Очистить();
		Форма.МестоположениеНадпись = "";
	ИначеЕсли Форма.ОператорыАдреса.Количество() = 0 Тогда
		Форма.МестоположениеНадпись = НСтр("ru = '<не сопоставлен>'");
		Форма.Элементы.МестоположениеНадпись.ЦветТекста = Форма.ЦветГиперссылки;
	ИначеЕсли Форма.ОператорыАдреса.Количество() = 1 Тогда
		Форма.МестоположениеНадпись = СтрШаблон(НСтр("ru = '%1 <не сопоставлен>'"),
			 Форма.ОператорыАдреса[0].Представление);
		Форма.Элементы.МестоположениеНадпись.ЦветТекста = Форма.ЦветТекстаТребуетВниманияГосИС;
	Иначе
		Форма.МестоположениеНадпись = СтрШаблон(НСтр("ru = '%1 ( + еще %2 )'"),
			 Форма.ОператорыАдреса[0].Представление,
			 Форма.ОператорыАдреса.Количество() - 1);
		Форма.Элементы.МестоположениеНадпись.ЦветТекста = Форма.ЦветТекстаТребуетВниманияГосИС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаОкончаниеРедактирования(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Ссылка") Тогда
		
		ОператорыАдреса = ОператорыАдреса(ДополнительныеПараметры.Ссылка);
		Если ЗначениеЗаполнено(Объект.СкладКонтрагент) Тогда
			Если ОператорыАдреса.НайтиПоЗначению(Объект.СкладКонтрагент) = Неопределено Тогда
				Если ОператорыАдреса.Количество() = 1 Тогда
					Объект.СкладКонтрагент = ОператорыАдреса[0].Значение;
				Иначе
					Объект.СкладКонтрагент = Неопределено;
				КонецЕсли;
				МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект);
				Модифицированность = Истина;
			КонецЕсли;
		ИначеЕсли ОператорыАдреса.Количество() = 1 Тогда
			Объект.СкладКонтрагент = ОператорыАдреса[0].Значение;
			МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект); 
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеКлючАдресаОкончаниеВыбораИзСписка(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СкладКонтрагент = Результат.Значение;
	МестоположениеКлючАдресаОбновитьНадпись(ЭтотОбъект); 
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОператорыАдреса(Адрес)
	
	Возврат ИнтеграцияЗЕРНО.ОператорыАдреса(Адрес);
	
КонецФункции

&НаСервереБезКонтекста
Функция МестоположениеКлючАдресаСписокАвтоподбора(ТекстДляАвтоПодбора, КлючВладельца, КэшированныеЗначенияПоОрганизации)
	
	СписокАвтоподбора = Новый СписокЗначений;
	
	Если Не ЗначениеЗаполнено(КлючВладельца.Организация) Тогда
		Возврат СписокАвтоподбора;
	КонецЕсли;
	
	ОписаниеТипов = Метаданные.ОпределяемыеТипы.СкладКонтрагентЗЕРНО.Тип;
	
	Если ТипЗнч(КэшированныеЗначенияПоОрганизации) <> Тип("Соответствие") Тогда
		КэшированныеЗначенияПоОрганизации = Новый Соответствие;
	КонецЕсли;
	
	ПоляКлюча = Новый Массив;
	ПоляКлюча.Добавить("Организация");
	ПоляКлюча.Добавить("Подразделение");
	ХешСуммаКлючаВладельца = ИнтеграцияЗЕРНОСлужебный.СоставнойКлючОбъекта(
		КлючВладельца, ПоляКлюча);
	
	ВладелецПартии = КэшированныеЗначенияПоОрганизации[ХешСуммаКлючаВладельца];
	Если ВладелецПартии = Неопределено Тогда
		ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов, КлючВладельца.Организация, КлючВладельца.Подразделение);
		ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
		КэшированныеЗначенияПоОрганизации.Вставить(ХешСуммаКлючаВладельца, ВладелецПартии);
	КонецЕсли;
	
	ТекстЗапроса = СтрШаблон(
	"%1
	|;
	|%2",
	СобытияФормИС.ТекстЗапросаСпискаАвтоподбораПоляСоставногоТипа(ОписаниеТипов, Истина, "ТаблицаСкладКонтрагент"),
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Остатки.Партия.Местоположение КАК Местоположение
	|ПОМЕСТИТЬ Остатки
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия.ВладелецПартии В (&ВладелецПартии)) КАК Остатки
	|ГДЕ
	|	Остатки.КоличествоЗЕРНООстаток - Остатки.ВОбработкеЗЕРНООстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 10
	|	Таблица.Ссылка КАК Адрес,
	|	Таблица.Представление КАК ПредставлениеАдреса,
	|	Таблица.СкладКонтрагент КАК ВладелецАдреса,
	|	ПРЕДСТАВЛЕНИЕ(Таблица.СкладКонтрагент) КАК ПредставлениеВладельцаАдреса
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 10
	|		Адреса.Ссылка КАК Ссылка,
	|		Адреса.Идентификатор КАК Представление,
	|		АдресаОператорыАдреса.СкладКонтрагент КАК СкладКонтрагент
	|	ИЗ
	|		Справочник.КлючиАдресовЗЕРНО КАК Адреса
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|			ПО Адреса.Ссылка = Остатки.Местоположение
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАдресовЗЕРНО.ОператорыАдреса КАК АдресаОператорыАдреса
	|			ПО Адреса.Ссылка = АдресаОператорыАдреса.Ссылка
	|	ГДЕ
	|		Адреса.Идентификатор ПОДОБНО &СтрокаПоиска
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 10
	|		Адреса.Ссылка,
	|		Адреса.Идентификатор,
	|		АдресаОператорыАдреса.СкладКонтрагент
	|	ИЗ
	|		Справочник.КлючиАдресовЗЕРНО КАК Адреса
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|			ПО Адреса.Ссылка = Остатки.Местоположение
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАдресовЗЕРНО.ОператорыАдреса КАК АдресаОператорыАдреса
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСкладКонтрагент КАК ТаблицаСкладКонтрагент
	|				ПО АдресаОператорыАдреса.СкладКонтрагент = ТаблицаСкладКонтрагент.Ссылка
	|			ПО Адреса.Ссылка = АдресаОператорыАдреса.Ссылка
	|
	|	УПОРЯДОЧИТЬ ПО
	|		Представление) КАК Таблица
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПредставлениеАдреса");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%"+ТекстДляАвтоПодбора+"%");
	Запрос.УстановитьПараметр("ВладелецПартии", ВладелецПартии);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОписаниеМетаданных = СобытияФормИС.ОписаниеМетаданныхПоОписаниюТипов(ОписаниеТипов);
	ЦветТекстаТребуетВнимания   = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;
	ЦветТекстаНеТребуетВнимания = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	ПодстрокаПоиска = НРег(ТекстДляАвтоПодбора);
	
	Пока Выборка.Следующий() Цикл
		
		Данные = Новый Структура;
		Данные.Вставить("Адрес",               Выборка.Адрес);
		Данные.Вставить("ПредставлениеАдреса", Выборка.ПредставлениеАдреса);
		Данные.Вставить("ВладелецАдреса",      Выборка.ВладелецАдреса);

		Если Не ЗначениеЗаполнено(Выборка.ВладелецАдреса) Тогда
			Данные.Вставить("ПредставлениеВладельцаАдреса", НСтр("ru = '<не сопоставлен>'"));
		ИначеЕсли Не ЗначениеЗаполнено(Выборка.ПредставлениеВладельцаАдреса) Тогда
			Данные.Вставить("ПредставлениеВладельцаАдреса", НСтр("ru = '<...>'"));
		Иначе
			Данные.Вставить("ПредставлениеВладельцаАдреса", Выборка.ПредставлениеВладельцаАдреса);
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		
		Если Не ЗначениеЗаполнено(Данные.ПредставлениеАдреса) Тогда
			НайденПоАдресу = Ложь;
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = '<адрес не указан>'"),,
				ЦветТекстаНеТребуетВнимания));
		ИначеЕсли ПодстрокаПоиска = "" Тогда
			НайденПоАдресу = Истина;
			МассивСтрок.Добавить(Данные.ПредставлениеАдреса);
		Иначе
			Массив = Новый Массив;
			НайденПоАдресу = СобытияФормИС.ФорматироватьСтрокуДляСпискаВыбора(Данные.ПредставлениеАдреса, ПодстрокаПоиска, Массив);
			Если НайденПоАдресу Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтрок, Массив);	
			Иначе
				МассивСтрок.Добавить(
					Новый ФорматированнаяСтрока(Данные.ПредставлениеАдреса,, ЦветТекстаНеТребуетВнимания));
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Данные.ВладелецАдреса) Тогда
			ДанныеОписания = ОписаниеМетаданных.Получить(ТипЗнч(Данные.ВладелецАдреса));
		Иначе
			ДанныеОписания = Неопределено;
		КонецЕсли;
		
		Если ДанныеОписания = Неопределено Тогда
			ПредставлениеТипа = "";
		ИначеЕсли Не ПустаяСтрока(ДанныеОписания.ПредставлениеОбъекта) Тогда
			ПредставлениеТипа = ДанныеОписания.ПредставлениеОбъекта;
		Иначе
			ПредставлениеТипа = ДанныеОписания.Представление;
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеТипа) Тогда
			ПредставлениеТипа = НСтр("ru = 'Владелец адреса'");
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Данные.ВладелецАдреса) Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
				СтрШаблон(" %1: %2", ПредставлениеТипа, Данные.ПредставлениеВладельцаАдреса),,
				ЦветТекстаТребуетВнимания));
		ИначеЕсли НайденПоАдресу Тогда
			МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(
				СтрШаблон(" %1: %2", ПредставлениеТипа, Данные.ПредставлениеВладельцаАдреса),,
				ЦветТекстаНеТребуетВнимания));
		Иначе
			МассивСтрок.Добавить(СтрШаблон(" %1: ", ПредставлениеТипа));
			СобытияФормИС.ФорматироватьСтрокуДляСпискаВыбора(Данные.ПредставлениеВладельцаАдреса, ПодстрокаПоиска, МассивСтрок);
		КонецЕсли;
		
		СписокАвтоподбора.Добавить(Данные, Новый ФорматированнаяСтрока(МассивСтрок));
		
	КонецЦикла;
	
	Возврат СписокАвтоподбора;
	
КонецФункции

#Область ВыборПартии

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы)
	
	ПараметрыФормы.ВидПродукции = Объект.ВидПродукции;
	Если ЗначениеЗаполнено(Объект.ВладелецПартии) Тогда
		ПараметрыФормы.ОрганизацияВладелецПартии = Объект.ВладелецПартии;
		ПараметрыФормы.ПодразделениеВладелецПартии = Объект.ПодразделениеВладельцаПартии;
	Иначе
		ПараметрыФормы.ОрганизацияВладелецПартии = Объект.Организация;
		ПараметрыФормы.ПодразделениеВладелецПартии = Объект.Подразделение;
	КонецЕсли;
	ПараметрыФормы.Местоположение = Объект.МестоположениеКлючАдреса;
	ПараметрыФормы.Грузоотправитель = Объект.СкладКонтрагент;
	Если ЗначениеЗаполнено(Объект.ВладелецПартии) Тогда
		ПараметрыФормы.ОрганизацияЭлеватор = Объект.Организация;
	Иначе
		ПараметрыФормы.ОрганизацияЭлеватор = ПредопределенноеЗначение("Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы)
	
	Если Не ЗначениеЗаполнено(Объект.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы.ОКПД2 = Объект.ОКПД2;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти