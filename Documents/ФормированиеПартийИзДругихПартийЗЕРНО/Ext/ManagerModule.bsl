#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО- Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована);
		Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована);
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартииСформированыЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  см. ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций.
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		
		РегистрыНакопления.ОстаткиПартийЗЕРНО.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		
		Возврат ФормированиеПартииЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		
		Возврат АннулированиеПартииЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("ТребуетРезервированияПартии", Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ТребуетРезервированияПартии());
	Запрос.УстановитьПараметр("ТребуетСписанияПартии", Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ТребуетСписанияПартии());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетСписанияПартии)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетСписанияПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗЕРНО,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетРезервированияПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО.Партии КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (&СтатусОбработки В (&ТребуетСписанияПартии)
	|		ИЛИ &СтатусОбработки В (&ТребуетРезервированияПартии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	Шапка.Партия,
	|	Шапка.КоличествоЗЕРНО,
	|	0
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Шапка.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И &СтатусОбработки В (&ТребуетСписанияПартии)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

Функция ПартииКоторыеНельзяОбъединить(ДобавляемыеЗаписиЖурнала, ЭталонныеЗаписиЖурнала = Неопределено) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗаписьИсточник.Ссылка)                         КАК КоличествоСтрок,
	|	ЗаписьИсточник.ВладелецПартии                                       КАК ВладелецПартии,
	|	ЗаписьИсточник.Местоположение                                       КАК Местоположение,
	|	ЗаписьИсточник.ОКПД2                                                КАК ОКПД2,
	|	ЗаписьИсточник.КодТНВЭД                                             КАК КодТНВЭД,
	|	ЗаписьИсточник.Элеватор                                             КАК Элеватор
	|ПОМЕСТИТЬ ЗаписьПолучатель
	|ИЗ
	|	Справочник.РеестрПартийЗЕРНО КАК ЗаписьИсточник
	|ГДЕ
	|	ЗаписьИсточник.Ссылка В(&ЭталонныеЗаписиЖурнала)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаписьИсточник.ВладелецПартии,
	|	ЗаписьИсточник.Местоположение,
	|	ЗаписьИсточник.ОКПД2,
	|	ЗаписьИсточник.КодТНВЭД,
	|	ЗаписьИсточник.Элеватор
	|УПОРЯДОЧИТЬ ПО
	|	КоличествоСтрок УБЫВ,
	|	ОКПД2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписьИсточник.Ссылка                                                   КАК Ссылка,
	|	ЗаписьИсточник.Представление                                            КАК СсылкаПредставление,
	|	ЗаписьИсточник.ВладелецПартии                                           КАК Источник_ВладелецПартии,
	|	ЗаписьИсточник.ВладелецПартии.Представление                             КАК Источник_ВладелецПартииПредставление,
	|	ЗаписьИсточник.Элеватор                                                 КАК Источник_Элеватор,
	|	ЗаписьИсточник.Местоположение                                           КАК Источник_Местоположение,
	|	ЗаписьИсточник.Местоположение.Представление                             КАК Источник_МестоположениеПредставление,
	|	ЗаписьИсточник.ОКПД2                                                    КАК Источник_ОКПД2,
	|	ЕСТЬNULL(ОстаткиПартийЗЕРНО.КоличествоЗЕРНООстаток, 0) = 0              КАК Источник_НетОстатка,
	|
	|	ЗаписьПолучатель.ВладелецПартии                                         КАК Получатель_ВладелецПартии,
	|	ЗаписьПолучатель.ВладелецПартии.Представление                           КАК Получатель_ВладелецПартииПредставление,
	|	ЗаписьПолучатель.Элеватор                                               КАК Получатель_Элеватор,
	|	ЗаписьПолучатель.Местоположение                                         КАК Получатель_Местоположение,
	|	ЗаписьПолучатель.Местоположение.Представление                           КАК Получатель_МестоположениеПредставление,
	|	ЗаписьПолучатель.ОКПД2                                                  КАК Получатель_ОКПД2
	|ИЗ
	|	Справочник.РеестрПартийЗЕРНО КАК ЗаписьИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаписьПолучатель КАК ЗаписьПолучатель
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНОИсточник
	|		ПО КлючиПартийЗЕРНОИсточник.Партия = ЗаписьИсточник.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В (&ДобавляемыеЗаписиЖурнала)) КАК ОстаткиПартийЗЕРНО
	|		ПО ОстаткиПартийЗЕРНО.Партия = ЗаписьИсточник.Ссылка
	|ГДЕ
	|	ЗаписьИсточник.Ссылка В(&ДобавляемыеЗаписиЖурнала)
	|	И (ЗаписьИсточник.ВладелецПартии <> ЗаписьПолучатель.ВладелецПартии
	|		ИЛИ ЗаписьИсточник.Местоположение <> ЗаписьПолучатель.Местоположение
	|		ИЛИ ЗаписьИсточник.ОКПД2 <> ЗаписьПолучатель.ОКПД2
	|		ИЛИ ЗаписьИсточник.Элеватор <> ЗаписьПолучатель.Элеватор
	|		ИЛИ ЕСТЬNULL(ОстаткиПартийЗЕРНО.КоличествоЗЕРНООстаток, 0) = 0
	|	)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДобавляемыеЗаписиЖурнала",  ДобавляемыеЗаписиЖурнала);
	Запрос.УстановитьПараметр("ЭталонныеЗаписиЖурнала",    ?(ЭталонныеЗаписиЖурнала <> Неопределено,
	                                                         ЭталонныеЗаписиЖурнала,
	                                                         ДобавляемыеЗаписиЖурнала));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Возврат Выборка;
	
КонецФункции

Функция ПричиныПоКоторымНельзяОбъединитьПартии(Выборка, ЗаголовокПричин = Неопределено) Экспорт

	Если Выборка.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СписокСтрок = Новый Массив;
	
	Если ЗаголовокПричин <> Неопределено Тогда
		СписокСтрок.Добавить(ЗаголовокПричин);
	Иначе	
		СписокСтрок.Добавить(НСтр("ru = 'Невозможно объединить партии по причинам:'"));
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Источник_ВладелецПартии <> Выборка.Получатель_ВладелецПартии Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи разных организаций'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Источник_Местоположение <> Выборка.Получатель_МестоПоложение Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи с различным местоположением'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
			
		Если Выборка.Источник_ОКПД2 <> Выборка.Получатель_ОКПД2 Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять разную продукцию'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Источник_НетОстатка Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи, для которых нет остатка'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.Источник_Элеватор <> Выборка.Получатель_Элеватор Тогда
			
			ТекстОшибки = НСтр("ru = '- нельзя объединять записи с разными элеваторами'");
			Если СписокСтрок.Найти(ТекстОшибки) = Неопределено Тогда
				СписокСтрок.Добавить(ТекстОшибки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Выборка.Сбросить();
	
	ТекстОшибки = СтрСоединить(СписокСтрок, Символы.ПС);
	
	Возврат ТекстОшибки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует JSON сообщения для формирования партий.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Документ Формирование партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция ФормированиеПартииЗЕРНО(ДокументСсылка, ДополнительныеПараметры) Экспорт
	
	СообщенияXML    = Новый Массив();
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	СписокЗапросов  = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеПартийИзДругихПартийЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ПрисоединенныеФайлыЗЕРНО.Операция
	|		 И Шапка.Ссылка   = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.ГодУрожая         КАК ГодУрожая,
	|
	|	Шапка.ОКПД2    КАК ОКПД2,
	|	Шапка.КодТНВЭД КАК КодТНВЭД,
	|
	|	Шапка.НазначениеПартии  КАК НазначениеПартии,
	|	ЕСТЬNULL(Шапка.НазначениеПартии.Идентификатор, """") КАК НазначениеПартииИдентификатор,
	|	Шапка.ЦельИспользования КАК ЦельИспользования,
	|	ЕСТЬNULL(Шапка.ЦельИспользования.Идентификатор, """") КАК ЦельИспользованияИдентификатор,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.ПоставитьПартиюНаХранение     КАК ПоставитьПартиюНаХранение,
	|	Шапка.ВладелецПартии                КАК ВладелецПартии,
	|	Представление(Шапка.ВладелецПартии) КАК ВладелецПартииПредставление,
	|	Шапка.ПодразделениеВладельцаПартии  КАК ПодразделениеВладельцаПартии,
	|
	|	Шапка.Товаропроизводитель                КАК Товаропроизводитель,
	|	Представление(Шапка.Товаропроизводитель) КАК ТоваропроизводительПредставление,
	|	Шапка.ПодразделениеТоваропроизводителя   КАК ПодразделениеТоваропроизводителя,
	|	Шапка.СтранаНазначения                           КАК СтранаНазначения,
	|	ЕСТЬNULL(Шапка.СтранаНазначения.КодАльфа3, """") КАК СтранаНазначенияКодАльфа3,
	|	
	|	Шапка.МестоположениеКлючАдреса                                     КАК МестоположениеКлючАдреса,
	|	ЕСТЬNULL(Шапка.МестоположениеКлючАдреса.Идентификатор, """")       КАК МестоположениеКлючАдресаСтрокой,
	||	ЕСТЬNULL(Шапка.МестоположениеКлючАдреса.ИдентификаторАдреса, """") КАК ИдентификаторАдреса,
	||	ЕСТЬNULL(Шапка.МестоположениеКлючАдреса.ОКТМО, """")               КАК ОКТМО,
	|	ЕСТЬNULL(Шапка.МестоположениеКлючАдреса.Индекс, """")              КАК Индекс,
	|	Шапка.МестоположениеКлючАдреса.ОператорыАдреса.(
	|		СкладКонтрагент)        КАК ОператорыАдреса,
	|	Шапка.СкладКонтрагент       КАК СкладКонтрагент,
	|	Шапка.Местоположение        КАК Местоположение,
	|	Шапка.МестоположениеСтрокой КАК МестоположениеСтрокой,
	|	Шапка.ДатаИзготовления      КАК ДатаИзготовления,
	|	Шапка.СрокГодности          КАК СрокГодности,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Партии.Партия          КАК Партия,
	|	ВЫБОР
	|		КОГДА Партии.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий) ТОГДА
	|			ЕСТЬNULL(РеестрПартийЗЕРНО.Идентификатор, """")
	|		ИНАЧЕ Партии.НомерПартии 
	|	КОНЕЦ КАК НомерПартии,
	|	Партии.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО.Партии КАК Партии
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Партии.Ссылка.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий)
	|			И Партии.Партия = РеестрПартийЗЕРНО.Ссылка
	|ГДЕ
	|	Партии.Ссылка = &Ссылка
	|",
	"Партии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПотребительскиеСвойства.ПотребительскоеСвойство    КАК ПотребительскоеСвойство,
	|	ПотребительскиеСвойства.Значение                   КАК Значение,
	|
	|	ЕСТЬNULL(ПотребительскиеСвойства.ПотребительскоеСвойство.Идентификатор, """") КАК ПотребительскоеСвойствоИдентификатор
	|
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО.ПотребительскиеСвойства КАК ПотребительскиеСвойства
	|ГДЕ
	|	ПотребительскиеСвойства.Ссылка = &Ссылка
	|",
	"ПотребительскиеСвойства");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Партии            = РезультатЗапроса["Партии"].Выгрузить();
	//@skip-warning
	ПотребительскиеСвойства = РезультатЗапроса["ПотребительскиеСвойства"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Партии.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ВидПродукции = Шапка.ВидПродукции;
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
	
	ЭтоЗерно = ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно;
	
	ЭтоСХТП         = ЭтоЗерно И Не Шапка.ПоставитьПартиюНаХранение;
	ЭтоЭлеватор     = ЭтоЗерно И Шапка.ПоставитьПартиюНаХранение;
	ЭтоПереработчик = ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
	
	Если ЭтоСХТП Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateLot";
		СообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Зерно);
	ИначеЕсли ЭтоЭлеватор Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateLotOnElevator";
		СообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.Зерно);
	ИначеЕсли ЭтоПереработчик Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpb";
		СообщениеXML.ПараметрыЗапроса.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна);
	Иначе
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			НСтр("ru = 'Не удалось определить раздел учета для документа.'"));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ФормированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	
	Если ЭтоПереработчик Тогда
		
		Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
			// CreateGpbFromAnotherType
			ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GpbFromAnother", ФормированиеПартииXDTO);
			// ParentGpbType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииПродуктовПереработкиXDTO(Партии, ЭлементПартииXDTO, ПространствоИмен, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "GpbFromAnother", ЭлементПартииXDTO, СообщениеXML);
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
			// CreateGpbFromResiduesType
			ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GpbFromPaperSDIZ", ФормированиеПартииXDTO);
			// ParentGpbType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииПродуктовПереработкиXDTO(Партии, ЭлементПартииXDTO, ПространствоИмен, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "GpbFromPaperSDIZ", ЭлементПартииXDTO, СообщениеXML);
			
		Иначе
			
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
			
		КонецЕсли;
		
		//GrainProductType
		ВидКультурыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Product", ФормированиеПартииXDTO);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", Шапка.ОКПД2, СообщениеXML);
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Шапка.НазначениеПартии) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", Шапка.КодТНВЭД, СообщениеXML);
		КонецЕсли;
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Product", ВидКультурыXDTO, СообщениеXML);
		
		//LotsTargetCodeType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", Шапка.ЦельИспользованияИдентификатор, СообщениеXML);
		//LotsPurposeCodeType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", Шапка.НазначениеПартииИдентификатор, СообщениеXML);
		
		ЗаполнитьМестоположение(ФормированиеПартииXDTO, Шапка, СообщениеXML, ПараметрыОбмена);
		
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		
		Если ЗначениеЗаполнено(Шапка.Товаропроизводитель) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.Товаропроизводитель, Шапка.ПодразделениеТоваропроизводителя);
		КонецЕсли;
		
		ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
		
		Если ЗначениеЗаполнено(Шапка.Товаропроизводитель) Тогда
			ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Шапка.Товаропроизводитель, Шапка.ПодразделениеТоваропроизводителя);
			ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Производитель %1'"), Шапка.ТоваропроизводительПредставление);
		Иначе
			ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
			ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
		КонецЕсли;
		
		ПроизводительXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ИсточникДанных,
			СообщениеXML,
			ПараметрыОбмена,
			ПредставлениеИсточника);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ФормированиеПартииXDTO, "Manufacturer", ПроизводительXDTO, СообщениеXML);
		
		//ListValueQualityIndicatorType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваXDTO(
			ПотребительскиеСвойства,
			"",
			ФормированиеПартииXDTO,
			ПространствоИмен,
			СообщениеXML);
		
		Если Шапка.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
			СтранаXDTO = ИнтеграцияЗЕРНОСлужебный.СтранаXDTO(Шапка.СтранаНазначенияКодАльфа3, СообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "CountryDestination", СтранаXDTO, СообщениеXML);
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ФормированиеПартииXDTO, "createDate", Формат(Шапка.ДатаИзготовления, "ДФ=yyyy-MM-dd;"), СообщениеXML);
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			ФормированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		ПараметрыПреобразования = ИнтеграцияЗЕРНОСлужебный.ПараметрыПреобразования(ДополнительныеПараметры.ПараметрыОбмена.ПараметрыОптимизации);
		СообщениеXML.ПараметрыЗапроса.Вставить(
			"СтруктураСообщения",
			ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ФормированиеПартииXDTO, ПараметрыПреобразования, Новый Массив));
		
		ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		
		ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ИсточникДанных,
			СообщениеXML,
			ПараметрыОбмена,
			СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
		СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
			"Owner",
			ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ВладелецПартииXDTO, ПараметрыПреобразования, Новый Массив));
		
	Иначе // Зерно
		
		Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий Тогда
			
			ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromAnother", ФормированиеПартииXDTO);
			// ParentLotType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииXDTO(Партии, ЭлементПартииXDTO, ПространствоИмен, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromAnother", ЭлементПартииXDTO, СообщениеXML);
			
		ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
			
			ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromPaperSDIZ", ФормированиеПартииXDTO);
			// ParentLotType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПредшествующиеПартииXDTO(Партии, ЭлементПартииXDTO, ПространствоИмен, СообщениеXML);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromPaperSDIZ", ЭлементПартииXDTO, СообщениеXML);
			
		Иначе
			
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML,
				СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
			
		КонецЕсли;
		
		//GrainProductType
		ВидКультурыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Crop", ФормированиеПартииXDTO);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", Шапка.ОКПД2, СообщениеXML);
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Шапка.НазначениеПартии) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", Шапка.КодТНВЭД, СообщениеXML);
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Crop", ВидКультурыXDTO, СообщениеXML);
		
		//LotsTargetCodeType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", Шапка.ЦельИспользованияИдентификатор, СообщениеXML);
		//LotsPurposeCodeType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", Шапка.НазначениеПартииИдентификатор, СообщениеXML);
		//HarvestYear
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "HarvestYear", Шапка.ГодУрожая, СообщениеXML);
		
		ЗаполнитьМестоположение(ФормированиеПартииXDTO, Шапка, СообщениеXML, ПараметрыОбмена);
		
		//ListValueQualityIndicatorType
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваXDTO(
			ПотребительскиеСвойства,
			"",
			ФормированиеПартииXDTO,
			ПространствоИмен,
			СообщениеXML);
		
		Если Шапка.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
			СтранаXDTO = ИнтеграцияЗЕРНОСлужебный.СтранаXDTO(Шапка.СтранаНазначенияКодАльфа3, СообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "CountryDestination", СтранаXDTO, СообщениеXML);
		КонецЕсли;
		
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		
		Если ЭтоЭлеватор И ЗначениеЗаполнено(Шапка.ВладелецПартии) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.ВладелецПартии, Шапка.ПодразделениеВладельцаПартии);
		КонецЕсли;
		
		ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
		
		Если ЭтоЭлеватор Тогда
			
			Если ЗначениеЗаполнено(Шапка.ВладелецПартии) Тогда
				ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Шапка.ВладелецПартии, Шапка.ПодразделениеВладельцаПартии);
				ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Владелец партии %1'"), Шапка.ВладелецПартииПредставление);
			Иначе
				ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
				ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
			КонецЕсли;
			
			ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
				ИсточникДанных,
				СообщениеXML,
				ПараметрыОбмена,
				ПредставлениеИсточника);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Owner", ВладелецПартииXDTO, СообщениеXML);
			
		КонецЕсли;
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(ФормированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса);
		
		ПараметрыПреобразования = ИнтеграцияЗЕРНОСлужебный.ПараметрыПреобразования(ПараметрыОбмена.ПараметрыОптимизации);
		СообщениеXML.ПараметрыЗапроса.Вставить(
			"СтруктураСообщения",
			ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ФормированиеПартииXDTO, ПараметрыПреобразования, Новый Массив));
		
		Если Не ЭтоЭлеватор Тогда
			
			ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
			
			ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
				ИсточникДанных,
				СообщениеXML,
				ПараметрыОбмена,
				СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
			
		КонецЕсли;
		
		СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
			"Owner",
			ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ВладелецПартииXDTO, ПараметрыПреобразования, Новый Массив));
		
	КонецЕсли;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для аннулирования партии
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийИзДругихПартийЗЕРНО - Документ Формирование партии из других партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция АннулированиеПартииЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеПартийИзДругихПартийЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Шапка.ВидПродукции               КАК ВидПродукции,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	РеестрПартийЗЕРНО.Идентификатор  КАК НомерПартии,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.ФормированиеПартийИзДругихПартийЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Шапка.Партия = РеестрПартийЗЕРНО.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции = Шапка.ВидПродукции;
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledGpb";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledLot";
	КонецЕсли;
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
	СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", Шапка.НомерПартии);
	
	АннулированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(АннулированиеПартииXDTO, ИмяПоляНомерПартии, Шапка.НомерПартии, СообщениеXML);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		АннулированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ДополнительныеПараметры.ПараметрыОбмена);
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	ВидПродукции = ЭлементОчереди.ВидПродукции;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзДругихПартий
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		СтруктураСообщения = РеквизитыИсходящегоСообщения.ПараметрыЗапроса.СтруктураСообщения;
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ФормированиеПартийИзДругихПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			ПараметрыЗагрузкиПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыЗагрузкиПартии();
			ПараметрыЗагрузкиПартии.Организация     = ЭлементОчереди.Организация;
			ПараметрыЗагрузкиПартии.Подразделение   = ЭлементОчереди.Подразделение;
			ПараметрыЗагрузкиПартии.ВидПродукции    = ВидПродукции;
			ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				Если Не СтрокаДанных.Свойство("StoragePlace") Или СтрокаДанных.StoragePlace = Неопределено Тогда
					СтрокаДанных.Вставить("StoragePlace", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСообщения.StoragePlace));
				КонецЕсли;
				
				Если Не СтрокаДанных.Свойство("Owner") Или СтрокаДанных.Owner = Неопределено Тогда
					СтрокаДанных.Вставить("Owner", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСообщения.Owner));
				КонецЕсли;
				
				ПартияЗерна = Справочники.РеестрПартийЗЕРНО.ЗагрузитьПартиюЗерна(
					СтрокаДанных,
					ПараметрыЗагрузкиПартии);
				
				ИзмененныеОбъекты.Добавить(ПартияЗерна);
				ДокументОбъект.Партия = ПартияЗерна;
				
			КонецЦикла;
			
			ДокументОбъект.Записать();
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		НомерПартии = ПараметрыЗапроса.НомерПартии;
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
				НомерПартии, ЭлементОчереди.Организация, ЭлементОчереди.Подразделение, ЭлементОчереди.ВидПродукции, ПараметрыОбмена);
			
			ПартияОбъект = Партия.ПолучитьОбъект();
			ПартияОбъект.Заблокировать();
			
			ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
			
			ПартияОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМестоположение(ОбъектXDTOРодитель, ДанныеДокумента, СообщениеXML, ПараметрыОбмена)
	
	Если ДанныеДокумента.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииНаОсновеБумажногоСДИЗ Тогда
		//AddressRFType
		МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(
			ДанныеДокумента.Местоположение, ДанныеДокумента.МестоположениеСтрокой, СообщениеXML, ПараметрыОбмена);
	Иначе
		ДанныеДополненияАдресаКлючаАдресов = ИнтеграцияЗЕРНОСлужебный.ИдентификаторыАдресногоОбъекта();
		Если ЗначениеЗаполнено(ДанныеДокумента.СкладКонтрагент) Тогда
			ДанныеДополненияАдресаКлючаАдресов = ИнтеграцияЗЕРНОСлужебный.ДанныеДополненияАдресаРФППоОператоруАдреса(ДанныеДокумента.СкладКонтрагент);
		КонецЕсли;
		
		Если ТипЗнч(ДанныеДокумента.ОператорыАдреса) = Тип("ТаблицаЗначений") Тогда 
			ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = ДанныеДокумента.ОператорыАдреса.ВыгрузитьКолонку("СкладКонтрагент");
		ИначеЕсли ТипЗнч(ДанныеДокумента.ОператорыАдреса) = Тип("РезультатЗапроса") Тогда
			ДанныеДополненияАдресаКлючаАдресов.ОператорыАдреса = ДанныеДокумента.ОператорыАдреса.Выгрузить().ВыгрузитьКолонку("СкладКонтрагент");
		КонецЕсли;
		
		ДанныеКлючаАдреса = ИнтеграцияЗЕРНОСлужебный.ДанныеКлючаАдреса();
		ДанныеКлючаАдреса.АдресСтрокой        = ДанныеДокумента.МестоположениеКлючАдресаСтрокой;
		ДанныеКлючаАдреса.Индекс              = ДанныеДокумента.Индекс;
		ДанныеКлючаАдреса.ИдентификаторАдреса = ДанныеДокумента.ИдентификаторАдреса;
		ДанныеКлючаАдреса.ОКТМО               = ДанныеДокумента.ОКТМО;
		МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФПоКлючуАдресовXDTO(
			ДанныеКлючаАдреса,
			СообщениеXML,
			ПараметрыОбмена,,
			ДанныеДополненияАдресаКлючаАдресов);
	КонецЕсли;
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ОбъектXDTOРодитель, "StoragePlace", МестоположениеXDTO, СообщениеXML);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли