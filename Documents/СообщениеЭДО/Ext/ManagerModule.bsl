#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
		"РазрешитьЧтение
		|ГДЕ
		|	ЧтениеОбъектаРазрешено(ЭлектронныйДокумент)
		|;
		|РазрешитьИзменениеЕслиРазрешеноЧтение
		|ГДЕ
		|	ИзменениеОбъектаРазрешено(ЭлектронныйДокумент)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("ТипЭлементаРегламента");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Представление = СтрШаблон(НСтр("ru = '%1 %2 от %3'"), Данные.ТипЭлементаРегламента, Данные.Номер, Данные.Дата);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает проштампованный файл.
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  ПроверятьДоступностьВыводаПДФ_А3 - Булево - Проверять версию платформы для работы с просмотром файлов формата
//                                     PDF/A3. Требуется для того, чтобы не получать ошибку обновления динамического
//                                     списка. Следует передавать Истина, если проверка требуется.
//  ЭтоМассовоеШтампирование - Булево - признак, показывающий, что файл запрошен в рамках массового штампирования.
// 
// Возвращаемое значение:
//  Структура - Структура результата получения проштампованного файла:
//  * ПредставлениеДокумента - ДвоичныеДанные - Данные проштампованного файла.
//                           - Неопределено - Если файл не удалось получить.
//  * Успех                  - Булево - Истина, если удалось получить двоичные данные, иначе - Ложь.
//  * ТекстОшибки            - Строка - Текст ошибки.
//
Функция ПроштампованныйФайл(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3 = Ложь, ЭтоМассовоеШтампирование = Ложь) Экспорт
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Успех", Ложь);
	СтруктураВозврата.Вставить("ПредставлениеДокумента", Неопределено);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	
	ОсновнойФайл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеЭДО, "ОсновнойФайл");
	РасширениеОсновногоФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОсновнойФайл, "Расширение");
	ЭтоPDF = РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(РасширениеОсновногоФайла);
		
	Если ЭтоPDF И ПроверятьДоступностьВыводаПДФ_А3 И Не ДоступенВыводФайлаФорматаПДФ_А3() Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	// Ограничиваем массовое штампирование для снижения нагрузки на сервис в рамках пилотного проекта.
	Если Не ЭтоМассовоеШтампирование И НастройкиЭДО.ИспользуетсяСервис1СШтамп() Тогда
		Если Не Интеграция1СШтампСлужебныйКлиентСервер.РасширениеОсновногоФайлаПоддерживается(РасширениеОсновногоФайла) Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		КартинкаШтампа = ЭлектронныеДокументыЭДО.ДанныеШтампаЭППоДаннымСообщенияЭДО(СообщениеЭДО);
		Если КартинкаШтампа.Вид = ВидКартинки.Пустая Тогда
			Если ЭтоPDF Тогда
				СтруктураВозврата.ПредставлениеДокумента = РаботаСФайлами.ДвоичныеДанныеФайла(ОсновнойФайл);
				СтруктураВозврата.Успех = ТипЗнч(СтруктураВозврата.ПредставлениеДокумента) = Тип("ДвоичныеДанные");
			КонецЕсли;
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ПараметрыДобавленияШтампов = Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент();
		ПараметрыДобавленияШтампов.ПараметрыДокумента.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ОсновнойФайл);
		ПараметрыДобавленияШтампов.ПараметрыДокумента.Расширение = РасширениеОсновногоФайла;
		
		ПараметрыШтампа = Интеграция1СШтампКлиентСервер.НовыеПараметрыШтампа();
		ПараметрыШтампа.ПараметрыШтампа.ДвоичныеДанные = КартинкаШтампа.ПолучитьДвоичныеДанные();
		ПараметрыШтампа.ПараметрыШтампа.Расширение = "png";
		ПараметрыШтампа.ПравилаРасположения.ПравилоРасположения = 
			Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПоследнейСтранице();
		ПараметрыШтампа.КоэффициентИзмененияРазмера = 0.12;
		ПараметрыШтампа.ОтступОтГраниц = 30;
		
		ПараметрыДобавленияШтампов.ПараметрыШтампов.Добавить(ПараметрыШтампа);
		
		ТаймаутОжидания = 38;
		
		РезультатШтампования = Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент(ПараметрыДобавленияШтампов, ТаймаутОжидания);
		
		Если Не РезультатШтампования.ЕстьОшибки Тогда
			СтруктураВозврата.ПредставлениеДокумента = РезультатШтампования.ДвоичныеДанные;
			СтруктураВозврата.Успех = ТипЗнч(СтруктураВозврата.ПредставлениеДокумента) = Тип("ДвоичныеДанные");
		ИначеЕсли ЭтоPDF Тогда
			СтруктураВозврата.ПредставлениеДокумента =
				ПолучитьПроштампованныйФайлБезИспользованияСервисов(ОсновнойФайл, СообщениеЭДО);
			СтруктураВозврата.Успех = ТипЗнч(СтруктураВозврата.ПредставлениеДокумента) = Тип("ДвоичныеДанные");
		Иначе
			СтруктураВозврата.ТекстОшибки = РезультатШтампования.ИнформацияОбОшибках.ТекстОшибки;
			ПодсистемаРегистрацииОшибок = ОбщегоНазначенияБЭДКлиентСервер.ПодсистемыБЭД().ОбменСКонтрагентами;
			Шаблон = НСтр(
				"ru = 'Не удалось подготовить представление документа с помощью сервиса 1С:Штамп по причине: 
				|%1'");
			ТекстСообщения = СтрШаблон(Шаблон, СтруктураВозврата.ТекстОшибки);
			ПараметрыЗаписиВЖурналРегистрации = ОбщегоНазначенияБЭД.НовыеПараметрыЗаписиВЖурналРегистрации();
			ПараметрыЗаписиВЖурналРегистрации.Данные = "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента";
			ОбщегоНазначенияБЭД.ЗаписатьВЖурналРегистрации(ТекстСообщения, ПодсистемаРегистрацииОшибок,
				УровеньЖурналаРегистрации.Ошибка, ПараметрыЗаписиВЖурналРегистрации);
		КонецЕсли;
	Иначе
		Если ЭтоPDF Тогда
			СтруктураВозврата.ПредставлениеДокумента =
				ПолучитьПроштампованныйФайлБезИспользованияСервисов(ОсновнойФайл, СообщениеЭДО);
			СтруктураВозврата.Успех = ТипЗнч(СтруктураВозврата.ПредставлениеДокумента) = Тип("ДвоичныеДанные");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Определяет, можно ли использовать предварительный просмотр в pdf для сообщения ЭДО
//
// Параметры:
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  ПроверятьДоступностьВыводаПДФ_А3 - Булево - Проверять версию платформы для работы с просмотром файлов формата
//                                     PDF/A3. Требуется для того, чтобы не получать ошибку обновления динамического
//                                     списка. Следует передавать Истина, если проверка требуется.
// 
// Возвращаемое значение:
//  Булево - можно ли использовать предварительный просмотр в pdf.
//
Функция ИспользоватьПросмотрPDF(СообщениеЭДО, ПроверятьДоступностьВыводаПДФ_А3 = Ложь) Экспорт
	
	Если СообщениеЭДО = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр, если отключена константа.
	Если Не НастройкиЭДО.ИспользуетсяПросмотрPDFДокументов() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр для помеченных на удаление.
	РеквизитыОсновногоФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СообщениеЭДО,
		"ОсновнойФайл.Расширение, ЭлектронныйДокумент.ПометкаУдаления, ОсновнойФайл.ПодписанЭП");
	Если РеквизитыОсновногоФайла.ЭлектронныйДокументПометкаУдаления Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр для PDF с вероятностью ошибки платформы.
	ЭтоPDF = РаботаСФайламиБЭДКлиентСервер.ЭтоРасширениеФайлаPDF(РеквизитыОсновногоФайла.ОсновнойФайлРасширение);
	Если ЭтоPDF И ПроверятьДоступностьВыводаПДФ_А3 И Не ДоступенВыводФайлаФорматаПДФ_А3() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Не используем просмотр для файлов кроме PDF, если подписи отсутствуют.
	Если Не ЭтоPDF И Не РеквизитыОсновногоФайла.ОсновнойФайлПодписанЭП Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Используем просмотр только для форматов, которые умеем визуализировать с помощью платформы или сервиса 1С:Штамп.
	РасширениеОсновногоФайлаПоддерживается = 
		Интеграция1СШтампСлужебныйКлиентСервер.РасширениеОсновногоФайлаПоддерживается(НРег(РеквизитыОсновногоФайла.ОсновнойФайлРасширение));
	Если ЭтоPDF ИЛИ (НастройкиЭДО.ИспользуетсяСервис1СШтамп() И РасширениеОсновногоФайлаПоддерживается) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Проверяет отсутствие ошибок при выводе файла формата PDF/A3 из-за платформы
// 
// Возвращаемое значение:
//  Булево - Истина, если функционал доступен.
//
Функция ДоступенВыводФайлаФорматаПДФ_А3()
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	Возврат ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияПлатформы, "8.3.22.1000") > 0;
	
КонецФункции

// Функция получает проштампованную версию файла. Работает только с файлами формата pdf.
// Параметры:
//  Файл - СправочникСсылка.СообщениеЭДОПрисоединенныеФайлы
//  СообщениеЭДО - ДокументСсылка.СообщениеЭДО
//  
// Возвращаемое значение:
//  Строка - Адрес временного хранилища с проштампованным файлом.
//
Функция ПолучитьПроштампованныйФайлБезИспользованияСервисов(Файл, СообщениеЭДО)
	ДвоичныеДанныеФайлаPDF = РаботаСФайлами.ДвоичныеДанныеФайла(Файл);
	ШтампЭП = ЭлектронныеДокументыЭДО.ДанныеШтампаЭППоДаннымСообщенияЭДО(СообщениеЭДО);
	ДвоичныеДанныеПроштампованногоФайла = РаботаСФайламиБЭД.ДобавитьШтампЭПВФайлPDF(ДвоичныеДанныеФайлаPDF, ШтампЭП, Неопределено, Ложь);
	Возврат ДвоичныеДанныеПроштампованногоФайла;
КонецФункции

#КонецОбласти

#КонецЕсли