#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.ОстаткиПартийЗагружены);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  СтруктураПараметров - Произвольный - Структура параметров
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО -- Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.КПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса Тогда
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  Неопределено - не требуется,
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Обрабатывается;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Обрабатывается;
		СтатусыБазовыйПроцесс.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Неопределено - не требуется,
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Обрабатывается;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
			
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ЗапросОстатковПартийЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ЗапросОстатковПартийЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ЗапросОстатковПартийЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
// 
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ЗапросОстатковПартийЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	ВидПродукции                 = ЭлементОчереди.ВидПродукции;
	Операция                     = ЭлементОчереди.Операция;
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.Ошибка;
		
		ВсеСтраницыПолучены = Истина;
		Для Каждого КлючИЗначение Из ПараметрыЗапроса.ДанныеПартийПоСтатусам Цикл
			Если Не КлючИЗначение.Значение.ВсеСтраницыПолучены Тогда
				ВсеСтраницыПолучены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеСтраницыПолучены Тогда
			
			Попытка
				
				УстановитьПривилегированныйРежим(Истина);
				
				Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
					ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ЗапросОстатковПартийЗЕРНО.ПолноеИмя());
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
					Блокировка.Заблокировать();
				Иначе
					ДокументОбъект = СоздатьДокумент();
					ДокументОбъект.Дата = ТекущаяДатаСеанса();
					ДокументОбъект.Операция     = Перечисления.ВидыОперацийЗЕРНО.ЗагрузкаОстатковПартий;
					ДокументОбъект.Организация  = ЭлементОчереди.Организация;
					ДокументОбъект.ВидПродукции = ВидПродукции;
					ДокументОбъект.Комментарий  = НСтр("ru = 'Документ создан автоматически регламентным заданием загрузки остатков партий.'");
				КонецЕсли;
				
				ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
				
				ОстаткиПоДаннымЗЕРНО = ДокументОбъект.ОстаткиПоДаннымЗЕРНО.Выгрузить();
				
				Для Каждого КлючИЗначение Из ПараметрыЗапроса.ДанныеПартийПоСтатусам Цикл
					
					Для Каждого СтрокаДанных Из КлючИЗначение.Значение.ДанныеПартий Цикл
						
						НоваяСтрока = ОстаткиПоДаннымЗЕРНО.Добавить();
						НоваяСтрока.Партия          = СтрокаДанных.Партия;
						НоваяСтрока.КоличествоЗЕРНО = СтрокаДанных.Количество;
						
					КонецЦикла;
					
				КонецЦикла;
				
				ЗаполнитьСопоставленныеРанееПартии(ОстаткиПоДаннымЗЕРНО);
				ДокументОбъект.ОстаткиПоДаннымЗЕРНО.Загрузить(ОстаткиПоДаннымЗЕРНО);
				
				Если ДокументОбъект.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗагрузкаОстатковПартий Тогда
					ДокументОбъект.ЗаполнитьПоРасхождениям();
					Если ДокументОбъект.КорректировкаОстатков.Количество() = 0 Тогда
						ДокументОбъект = Неопределено;
						Возврат;
					Иначе
						
						Блокировка = Новый БлокировкаДанных;
						ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ОстаткиПартийЗЕРНО");
						ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
						ЭлементБлокировки.ИсточникДанных = ДокументОбъект.КорректировкаОстатков;
						ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Партия", "Партия");
						Блокировка.Заблокировать();
						
						Запрос = Новый Запрос;
						Запрос.УстановитьПараметр("Дата",   МестноеВремя(ЭлементОчереди.ДатаСоздания));
						Запрос.УстановитьПараметр("Партии", ДокументОбъект.КорректировкаОстатков.ВыгрузитьКолонку("Партия"));
						Запрос.Текст =
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	ОстаткиПартий.Регистратор
						|ИЗ
						|	РегистрНакопления.ОстаткиПартийЗЕРНО КАК ОстаткиПартий
						|ГДЕ
						|	ОстаткиПартий.Период >= &Дата
						|	И ОстаткиПартий.Партия В (&Партии)";
						
						Если Не Запрос.Выполнить().Пустой() Тогда
							ДокументОбъект = Неопределено;
							Возврат;
						КонецЕсли;
						
						ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
						ЭлементОчереди.СсылкаНаОбъект = ДокументОбъект.Ссылка;
						
					КонецЕсли;
				Иначе
					ДокументОбъект.Записать();
				КонецЕсли;
				
				Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийЗЕРНО.ОстаткиПартийЗагружены;
				
				Справочники.РеестрПартийЗЕРНО.ЗаписатьСоответствиеПартийНоменклатуреПоРодительскимПартиям(
					ОстаткиПоДаннымЗЕРНО.ВыгрузитьКолонку("Партия"));
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
		
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭлементОчереди.СсылкаНаОбъект) Тогда
			
			ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
				ЭлементОчереди.СсылкаНаОбъект,
				Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
				Статусы);
			
			РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
				ЭлементОчереди.СсылкаНаОбъект,
				ПараметрыОбновления);
			
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
			
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ЗагрузкаОстатковПартий Тогда
		
		ДанныеДляОбработки         = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные.Record);
		ЭтоЗагрузкаСвязаннойПартии = ЗначениеЗаполнено(ПараметрыЗапроса.НомерПартии);
		
		ЭлементОчередиОснование               = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		ПараметрыЗапросаОснования             = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
		
		ДанныеПартийПоСтатусам = ПараметрыЗапросаОснования.ДанныеПартийПоСтатусам[ПараметрыЗапроса.ЗапрашиваемыйСтатус];
		
		ПараметрыЗагрузкиПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыЗагрузкиПартии();
		ПараметрыЗагрузкиПартии.Организация     = ЭлементОчереди.Организация;
		ПараметрыЗагрузкиПартии.Подразделение   = ЭлементОчереди.Подразделение;
		ПараметрыЗагрузкиПартии.ВидПродукции    = ВидПродукции;
		ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
		
		ПараметрыЗагрузкиПартии.ПараметрыПолучения.ДобавлятьКЗагрузке = Ложь;
		
		Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл

			ПартияЗерна = Справочники.РеестрПартийЗЕРНО.ЗагрузитьПартиюЗерна(
				СтрокаДанных,
				ПараметрыЗагрузкиПартии);

			Если Не ЗначениеЗаполнено(ПартияЗерна) Тогда
				Продолжить;
			КонецЕсли;
			ИзмененныеОбъекты.Добавить(ПартияЗерна);
			
			Если Не ЭтоЗагрузкаСвязаннойПартии Тогда
				СтрокаДанныхПартии = Новый Структура("Партия, Количество");
				СтрокаДанныхПартии.Партия     = ПартияЗерна;
				СтрокаДанныхПартии.Количество = СтрокаДанных.amountAvailable;
				ДанныеПартийПоСтатусам.ДанныеПартий.Добавить(СтрокаДанныхПартии);
			КонецЕсли;
			
		КонецЦикла;
		
		ДозаполнениеРеквизитовКлючейОрганизацийАдреса(ПараметрыЗагрузкиПартии, ПараметрыОбмена);
		
		Если ПараметрыЗагрузкиПартии.ПараметрыПолучения.Свойство("НовыеОбъекты") Тогда
			Для Каждого КлючИЗначение Из ПараметрыЗагрузкиПартии.ПараметрыПолучения.НовыеОбъекты Цикл
				Если Не КлючИЗначение.Значение Тогда
					Продолжить;
				КонецЕсли;
				ПараметрыЗапросаОснования.СозданныеПартии.Добавить(КлючИЗначение.Ключ);
			КонецЦикла;
		КонецЕсли;
		
		ВсеСтраницыВсехСтатусовПолучены = Истина;
		Если Не ЭтоЗагрузкаСвязаннойПартии Тогда
			
			Если ПолученныеДанные.hasMore Тогда
			
				СообщенияXML = Новый Массив;
				
				НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
				НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
				
				СообщениеXML = СообщенияЗагрузкиПартий(НовыеПараметрыФормирования, ПараметрыОбмена);
				СообщениеXML.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, РеквизитыИсходящегоСообщения);
				СообщенияXML.Добавить(СообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена);
			
			Иначе
				
				ДанныеПартийПоСтатусам.ВсеСтраницыПолучены = Истина;
				
			КонецЕсли;
			
			Для Каждого КлючИЗначение Из ПараметрыЗапросаОснования.ДанныеПартийПоСтатусам Цикл
				Если Не КлючИЗначение.Значение.ВсеСтраницыПолучены Тогда
					ВсеСтраницыВсехСтатусовПолучены = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВсеСтраницыВсехСтатусовПолучены И ПараметрыЗапросаОснования.СозданныеПартии.Количество() Тогда
			
			ПатрииТребующиеЗагрузки = ПатрииТребующиеЗагрузки(ПараметрыЗапросаОснования.СозданныеПартии);
			ПараметрыЗапросаОснования.СозданныеПартии.Очистить();
			
			СообщенияXML = Новый Массив;
			
			Для Каждого СтрокаТаблицы Из ПатрииТребующиеЗагрузки Цикл
				
				ПараметрыФормирования = ПараметрыФормированияСообщенияXML();
				ПараметрыФормирования.Организация    = ПараметрыЗапроса.Организация;
				ПараметрыФормирования.Подразделение  = ПараметрыЗапроса.Подразделение;
				ПараметрыФормирования.НомерПартии    = СтрокаТаблицы.Идентификатор;
				ПараметрыФормирования.Операция       = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий;
				ПараметрыФормирования.СсылкаНаОбъект = ПараметрыЗапроса.СсылкаНаОбъект;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ВидПродукции) Тогда
					ПараметрыФормирования.ВидПродукции = СтрокаТаблицы.ВидПродукции;
				Иначе
					ПараметрыФормирования.ВидПродукции = ПараметрыЗапроса.ВидПродукции;
				КонецЕсли;
				
				СообщениеXML = СообщенияЗагрузкиПартий(ПараметрыФормирования, ПараметрыОбмена);
				СообщениеXML.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
				ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, РеквизитыИсходящегоСообщения);
				СообщенияXML.Добавить(СообщениеXML);
				
			КонецЦикла;
			
			ИнтеграцияЗЕРНОСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияXML, ПараметрыОбмена);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСопоставленныеРанееПартии(ОстаткиПоДаннымЗЕРНО)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОстаткиПоДаннымЗЕРНО", ОстаткиПоДаннымЗЕРНО);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Партия КАК Партия,
	|	Т.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ОстаткиПоДаннымЗЕРНО
	|ИЗ
	|	&ОстаткиПоДаннымЗЕРНО КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоДаннымЗЕРНО.Партия КАК Партия,
	|	ОстаткиПоДаннымЗЕРНО.КоличествоЗЕРНО КАК КоличествоЗЕРНО,
	|	МАКСИМУМ(Соответствие.Номенклатура) КАК Номенклатура,
	|	МАКСИМУМ(Соответствие.Характеристика) КАК Характеристика,
	|	МАКСИМУМ(Соответствие.Серия) КАК Серия
	|ПОМЕСТИТЬ СопоставленныеДанныеБезСтатусовУказанияСерий
	|ИЗ
	|	ОстаткиПоДаннымЗЕРНО КАК ОстаткиПоДаннымЗЕРНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК Соответствие
	|		ПО Соответствие.Партия = ОстаткиПоДаннымЗЕРНО.Партия
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоДаннымЗЕРНО.Партия,
	|	ОстаткиПоДаннымЗЕРНО.КоличествоЗЕРНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Партия,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.КоличествоЗЕРНО,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Номенклатура,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Характеристика,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Серия,
	|	МАКСИМУМ(СоответствиеПартийЗЕРНО.СтатусУказанияСерий) КАК СтатусУказанияСерий,
	|	0 КАК Количество
	|ИЗ
	|	СопоставленныеДанныеБезСтатусовУказанияСерий КАК СопоставленныеДанныеБезСтатусовУказанияСерий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО СопоставленныеДанныеБезСтатусовУказанияСерий.Номенклатура = СоответствиеПартийЗЕРНО.Номенклатура
	|		И СопоставленныеДанныеБезСтатусовУказанияСерий.Характеристика = СоответствиеПартийЗЕРНО.Характеристика
	|		И СопоставленныеДанныеБезСтатусовУказанияСерий.Серия = СоответствиеПартийЗЕРНО.Серия
	|		И СопоставленныеДанныеБезСтатусовУказанияСерий.Партия = СоответствиеПартийЗЕРНО.Партия
	|СГРУППИРОВАТЬ ПО
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Партия,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.КоличествоЗЕРНО,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Номенклатура,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Характеристика,
	|	СопоставленныеДанныеБезСтатусовУказанияСерий.Серия";
	ОстаткиПоДаннымЗЕРНО = Запрос.Выполнить().Выгрузить();

	ПозицииДляПересчетаКоличества = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОстаткиПоДаннымЗЕРНО Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ПозицииДляПересчетаКоличества.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(ПозицииДляПересчетаКоличества);

КонецПроцедуры

Процедура ДозаполнениеРеквизитовКлючейОрганизацийАдреса(ПараметрыЗагрузкиПартии, ПараметрыОбмена)
	
	ЕстьКлючиАдресов           = Ложь;
	ЕстьКлючиОрганизаций       = Ложь;
	
	ТаблицаСсылкСсылокКлючейОрганизаций = Новый ТаблицаЗначений();
	ТаблицаСсылкСсылокКлючейОрганизаций.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО"));
	
	ТаблицаСсылкСсылокКлючейАдресов = Новый ТаблицаЗначений();
	ТаблицаСсылкСсылокКлючейАдресов.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.КлючиАдресовЗЕРНО"));
		
	Для Каждого КлючИЗначение Из ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций Цикл
		
		ЭлементДанных    = КлючИЗначение.Значение;
		ДанныеПоСвойству = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ДанныеОрганизацииПоЗаполенномуСвойству(ЭлементДанных, ПараметрыОбмена);
		
		ЗначенияПолей = Новый Структура();
		Если ДанныеПоСвойству.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ЮридическоеЛицо
			Или ДанныеПоСвойству.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИндивидуальныйПредприниматель
			Или ДанныеПоСвойству.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.Самозанятый Тогда
			
			Если ДанныеПоСвойству.Данные.Address <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.Address) Тогда
					ЗначенияПолей.Вставить("ЮридическийАдрес", ДанныеПоСвойству.Данные.Address.Address);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.PostalCode) Тогда
					ЗначенияПолей.Вставить("Индекс", ДанныеПоСвойству.Данные.Address.PostalCode);
				КонецЕсли;
				Если ДанныеПоСвойству.Данные.Address.Свойство("OBJECTGUID")
					И ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.OBJECTGUID) Тогда
					ЗначенияПолей.Вставить("ИдентификаторАдреса", ДанныеПоСвойству.Данные.Address.OBJECTGUID);
				КонецЕсли;
				Если ДанныеПоСвойству.Данные.Address.Свойство("OKTMO")
					И ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.OKTMO) Тогда
					ЗначенияПолей.Вставить("ОКТМО", ДанныеПоСвойству.Данные.Address.OKTMO);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ДанныеПоСвойству.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизация Тогда
			КодАльфа3 = ИнтеграцияЗЕРНОСлужебный.КодАльфа3ПоСтранеXDTO(ДанныеПоСвойству.Данные);
			Если ЗначениеЗаполнено(КодАльфа3) Тогда
				ЗначенияПолей.Вставить("КодАльфа3", КодАльфа3);
			КонецЕсли;
			Если ДанныеПоСвойству.Данные.Address <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.Address) Тогда
					ЗначенияПолей.Вставить("ЮридическийАдрес", ДанныеПоСвойству.Данные.Address.Address);
				КонецЕсли;
				Если ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.PostalCode) Тогда
					ЗначенияПолей.Вставить("Индекс", ДанныеПоСвойству.Данные.Address.PostalCode);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ДанныеПоСвойству.ТипОрганизации = Перечисления.ТипыОрганизацийЗЕРНО.ИностраннаяОрганизацияБезРегистрацииВРФ Тогда
			КодАльфа3 = ИнтеграцияЗЕРНОСлужебный.КодАльфа3ПоСтранеXDTO(ДанныеПоСвойству.Данные);
			Если ЗначениеЗаполнено(КодАльфа3) Тогда
				ЗначенияПолей.Вставить("КодАльфа3", КодАльфа3);
			КонецЕсли;
			Если ДанныеПоСвойству.Данные.Address <> Неопределено
				И ЗначениеЗаполнено(ДанныеПоСвойству.Данные.Address.Address) Тогда
				ЗначенияПолей.Вставить("ЮридическийАдрес", ДанныеПоСвойству.Данные.Address.Address);
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций[КлючИЗначение.Ключ] = ЗначенияПолей;
		Если ЗначенияПолей.Количество() Тогда
			НоваяСтрока = ТаблицаСсылкСсылокКлючейОрганизаций.Добавить();
			НоваяСтрока.Ссылка   = КлючИЗначение.Ключ;
			ЕстьКлючиОрганизаций = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейАдресов Цикл
		
		ЭлементДанных = КлючИЗначение.Значение;
		ЗначенияПолей = Новый Структура();
		
		Если ЭлементДанных.Свойство("OBJECTGUID")
			И ЗначениеЗаполнено(ЭлементДанных.OBJECTGUID) Тогда
			ЗначенияПолей.Вставить("ИдентификаторАдреса", ЭлементДанных.OBJECTGUID);
		КонецЕсли;
		Если ЭлементДанных.Свойство("OKTMO")
			И ЗначениеЗаполнено(ЭлементДанных.OKTMO) Тогда
			ЗначенияПолей.Вставить("ОКТМО", ЭлементДанных.OKTMO);
		КонецЕсли;
		
		ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейАдресов[КлючИЗначение.Ключ] = ЗначенияПолей;
		Если ЗначенияПолей.Количество() Тогда
			НоваяСтрока = ТаблицаСсылкСсылокКлючейАдресов.Добавить();
			НоваяСтрока.Ссылка = КлючИЗначение.Ключ;
			ЕстьКлючиАдресов   = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаСсылкСсылокКлючейОрганизаций.Количество() = 0 И ТаблицаСсылкСсылокКлючейАдресов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	КлючиРеквизитовОрганизацийЗЕРНО.Ссылка                       КАК Ссылка,
		|	""ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций"" КАК ИмяИсточника
		|ИЗ
		|	Справочник.КлючиРеквизитовОрганизацийЗЕРНО КАК КлючиРеквизитовОрганизацийЗЕРНО
		|ГДЕ
		|	КлючиРеквизитовОрганизацийЗЕРНО.Ссылка В (&КлючОрганизаций)
		|	И КлючиРеквизитовОрганизацийЗЕРНО.ЮридическийАдрес = """"
		|	И КлючиРеквизитовОрганизацийЗЕРНО.Индекс = """"
		|	И КлючиРеквизитовОрганизацийЗЕРНО.КодАльфа3 = """"
		|	И (КлючиРеквизитовОрганизацийЗЕРНО.ОКТМО = """" ИЛИ КлючиРеквизитовОрганизацийЗЕРНО.ИдентификаторАдреса = """")
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КлючиАдресовЗЕРНО.Ссылка,
		|	""ПроверитьЗаполнениеРеквизитовКлючейАдресов""
		|ИЗ
		|	Справочник.КлючиАдресовЗЕРНО КАК КлючиАдресовЗЕРНО
		|ГДЕ
		|	КлючиАдресовЗЕРНО.Ссылка В (&КлючАдресов)
		|	И (КлючиАдресовЗЕРНО.ОКТМО = """" ИЛИ КлючиАдресовЗЕРНО.ИдентификаторАдреса = """")
		|";
	
	Запрос.УстановитьПараметр("КлючОрганизаций", ТаблицаСсылкСсылокКлючейОрганизаций.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("КлючАдресов",     ТаблицаСсылкСсылокКлючейАдресов.ВыгрузитьКолонку("Ссылка"));
	
	Блокировка = Новый БлокировкаДанных();
	
	Если ЕстьКлючиОрганизаций Тогда
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.ИсточникДанных = ТаблицаСсылкСсылокКлючейОрганизаций;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Если ЕстьКлючиАдресов Тогда
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.КлючиАдресовЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.ИсточникДанных = ТаблицаСсылкСсылокКлючейАдресов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
	КонецЕсли;
	
	Попытка
		
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СправочникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ИмяИсточника = ВыборкаДетальныеЗаписи.ИмяИсточника;
			ЗаполнитьЗначенияСвойств(
				СправочникОбъект,
				ПараметрыЗагрузкиПартии[ИмяИсточника][ВыборкаДетальныеЗаписи.Ссылка]);
			СправочникОбъект.Записать();
		КонецЦикла;
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейРеквизитовОрганизаций.Очистить();
	ПараметрыЗагрузкиПартии.ПроверитьЗаполнениеРеквизитовКлючейАдресов.Очистить();
	
КонецПроцедуры

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ЗапросОстатковПартийЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		Возврат СообщениеЗагрузкиПартий(СсылкаНаОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Сообщение загрузки партий
//
// Параметры:
//  ДокументСсылка          - ДокументСсылка.ЗапросОстатковПартийЗЕРНО   - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеЗагрузкиПартий(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML   = Новый Массив();
	
	Если ДополнительныеПараметры.ПараметрыОбработкиДокумента.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗагрузкаОстатковПартий Тогда
		
		ВладелецПартии = Неопределено; 
		ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса.Свойство("ВладелецПартии", ВладелецПартии);
		
		Шапка = Новый Структура;
		Шапка.Вставить("ПоследнийНомерВерсии", 0);
		Шапка.Вставить("ВидПродукции",         ДополнительныеПараметры.ПараметрыОбработкиДокумента.ВидПродукции);
		Шапка.Вставить("ВладелецПартии",       Неопределено);
		Шапка.Вставить("Операция",             ДополнительныеПараметры.ПараметрыОбработкиДокумента.Операция);
		Шапка.Вставить("Элеватор",             Неопределено);
		Шапка.Вставить("Организация",          ДополнительныеПараметры.ПараметрыОбработкиДокумента.Организация);
		Шапка.Вставить("Подразделение",        ДополнительныеПараметры.ПараметрыОбработкиДокумента.Подразделение);
		Шапка.Вставить("Ссылка",               ДокументСсылка);
		
	Иначе
		
		СписокЗапросов = Новый СписокЗначений;
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
		|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросОстатковПартийЗЕРНО КАК Шапка
		|		ПО Шапка.Ссылка   = &Ссылка
		|		 И Шапка.Ссылка   = ПрисоединенныеФайлыЗЕРНО.Документ
		|ГДЕ
		|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ПрисоединенныеФайлыЗЕРНО.Документ
		|");
		
		СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	Шапка.Номер                              КАК Номер,
		|	Шапка.Дата                               КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
		|	
		|	Шапка.ВидПродукции   КАК ВидПродукции,
		|	Шапка.ВладелецПартии КАК ВладелецПартии,
		|	Шапка.Операция       КАК Операция,
		|	Шапка.Элеватор       КАК Элеватор,
		|
		|	Шапка.Организация                  КАК Организация,
		|	Шапка.Подразделение                КАК Подразделение,
		|	Представление(Шапка.Организация)   КАК ОрганизацияПредставление,
		|	Шапка.ПодразделениеВладельцаПартии КАК ПодразделениеВладельцаПартии,
		|	Шапка.ПодразделениеЭлеватора       КАК ПодразделениеЭлеватора,
		|
		|	Шапка.Ссылка КАК Ссылка
		|
		|ИЗ
		|	Документ.ЗапросОстатковПартийЗЕРНО КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка",
		"Шапка");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
		
		//@skip-warning
		Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
		Если Не Шапка.Следующий() Тогда
			
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
			СообщениеXML.Операция               = Шапка.Операция;
			СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
			СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
			
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВидПродукции = Шапка.ВидПродукции;
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
	
	Если ЗначениеЗаполнено(Шапка.ВладелецПартии) Тогда
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов,
			Шапка.ВладелецПартии,
			Шапка.ПодразделениеВладельцаПартии);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.Элеватор) Тогда
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов,
			Шапка.Элеватор,
			Шапка.ПодразделениеЭлеватора);
	КонецЕсли;
	
	ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
	
	ЗапрашиваемыеСтатусы = Новый Массив();
	ЗапрашиваемыеСтатусы.Добавить(Перечисления.СтатусыПартийЗЕРНО.Подписано);
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ПараметрыФормирования = ПараметрыФормированияСообщенияXML();
	ПараметрыФормирования.ВидПродукции         = ВидПродукции;
	ПараметрыФормирования.НомерВерсии          = НомерВерсии;
	ПараметрыФормирования.Операция             = Шапка.Операция;
	ПараметрыФормирования.Организация          = Шапка.Организация;
	ПараметрыФормирования.Подразделение        = Шапка.Подразделение;
	ПараметрыФормирования.СсылкаНаОбъект       = ДокументСсылка;
	ПараметрыФормирования.Вставить("ДанныеПартийПоСтатусам", Новый Соответствие());
	
	Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартий
		Или Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗагрузкаОстатковПартий Тогда
	
		РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		
		ПараметрыФормирования.ВладелецПартии               = Шапка.Организация;
		ПараметрыФормирования.РеквизитыВладельцаПартии     = РеквизитыОрганизацииКонтрагента;
		ПараметрыФормирования.ПодразделениеВладельцаПартии = Шапка.Подразделение;
		
		Если ЗначениеЗаполнено(Шапка.Элеватор) Тогда
			
			РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Шапка.Элеватор, Шапка.ПодразделениеЭлеватора);
			
			ПараметрыФормирования.Элеватор           = Шапка.Элеватор;
			ПараметрыФормирования.РеквизитыЭлеватора = РеквизитыОрганизацииКонтрагента;
			
		КонецЕсли;
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ЗапросПартийНаХранении Тогда
		
		РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
			ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
			
		ПараметрыФормирования.Элеватор           = Шапка.Организация;
		ПараметрыФормирования.РеквизитыЭлеватора = РеквизитыОрганизацииКонтрагента;
		
		Если ЗначениеЗаполнено(Шапка.ВладелецПартии) Тогда
			
			РеквизитыОрганизацииКонтрагента = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Шапка.ВладелецПартии, Шапка.ПодразделениеВладельцаПартии);
			
			ПараметрыФормирования.ВладелецПартии               = Шапка.ВладелецПартии;
			ПараметрыФормирования.РеквизитыВладельцаПартии     = РеквизитыОрганизацииКонтрагента;
			ПараметрыФормирования.ПодразделениеВладельцаПартии = Шапка.ПодразделениеВладельцаПартии;
			
		КонецЕсли;
		
	КонецЕсли;
	
	АбстрактноеСообщениеXML.ПараметрыЗапроса = ПараметрыФормирования;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Для Каждого ЗапрашиваемыйСтатус Из ЗапрашиваемыеСтатусы Цикл
		
		ДанныеПартийПоСтатусу = Новый Структура();
		ДанныеПартийПоСтатусу.Вставить("ДанныеПартий",        Новый Массив());
		ДанныеПартийПоСтатусу.Вставить("ВсеСтраницыПолучены", Ложь);
		ПараметрыФормирования.ДанныеПартийПоСтатусам.Вставить(ЗапрашиваемыйСтатус, ДанныеПартийПоСтатусу);
		
		НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормирования);
		НовыеПараметрыФормирования.ЗапрашиваемыйСтатус = ЗапрашиваемыйСтатус;
		НовыеПараметрыФормирования.ДанныеПартийПоСтатусам = Неопределено;
		
		СообщениеXML = СообщенияЗагрузкиПартий(
			НовыеПараметрыФормирования, ДополнительныеПараметры.ПараметрыОбмена);
		СообщениеXML.ЗагружатьДо = АбстрактноеСообщениеXML.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ПараметрыФормированияСообщенияXML()
	
	ВозвращаемоеЗначение = ИнтеграцияЗЕРНОСлужебный.ПараметрыФормированияСообщенияXML();
	
	ВозвращаемоеЗначение.Вставить("СсылкаНаОбъект");
	ВозвращаемоеЗначение.Вставить("ЗапрашиваемыйСтатус");
	ВозвращаемоеЗначение.Вставить("Элеватор");
	ВозвращаемоеЗначение.Вставить("ПодразделениеЭлеватора");
	ВозвращаемоеЗначение.Вставить("ВладелецПартии");
	ВозвращаемоеЗначение.Вставить("ПодразделениеВладельцаПартии");
	ВозвращаемоеЗначение.Вставить("РеквизитыЭлеватора");
	ВозвращаемоеЗначение.Вставить("РеквизитыВладельцаПартии");
	ВозвращаемоеЗначение.Вставить("СозданныеПартии", Новый Массив());
	ВозвращаемоеЗначение.Вставить("НомерПартии");
	
	ВозвращаемоеЗначение.КоличествоНаСтранице = ИнтеграцияЗЕРНО.ПараметрыОптимизации().КоличествоЭлементовСтраницыОтвета;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СообщенияЗагрузкиПартий(ПараметрыФормирования, ПараметрыОбмена)
	
	Если ПараметрыФормирования.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListGpb";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestGetListLot";
	КонецЕсли;
	
	ЗапросПартийXDTO  = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
	СообщениеXML.Операция            = ПараметрыФормирования.Операция;
	СообщениеXML.ВидПродукции        = ПараметрыФормирования.ВидПродукции;
	СообщениеXML.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.Версия              = ПараметрыФормирования.НомерВерсии;
	
	СообщениеXML.ПараметрыЗапроса = ПараметрыФормирования;
	СообщениеXML.Организация      = ПараметрыФормирования.Организация;
	СообщениеXML.Подразделение    = ПараметрыФормирования.Подразделение;
	СообщениеXML.СсылкаНаОбъект   = ПараметрыФормирования.СсылкаНаОбъект;
	
	ДанныеОписания = Новый Массив();
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ЗапрашиваемыйСтатус) Тогда
		
		СтатусПартииЗерна = ИнтеграцияЗЕРНОСлужебный.СтатусПартииЗерна(ПараметрыФормирования.ЗапрашиваемыйСтатус);
		СообщениеXML.ИдентификаторСтроки = СтатусПартииЗерна;
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "status", СтатусПартииЗерна, СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '(статус: %1)'"), ПараметрыФормирования.ЗапрашиваемыйСтатус));
		
	КонецЕсли;
	
	Если ПараметрыФормирования.РеквизитыВладельцаПартии <> Неопределено Тогда
		ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ПараметрыФормирования.РеквизитыВладельцаПартии,
			СообщениеXML,
			ПараметрыОбмена,
			СтрШаблон(НСтр("ru = 'Владелец партии %1'"), Строка(ПараметрыФормирования.ВладелецПартии)));
		Если ВладелецПартииXDTO <> Неопределено Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "Owner", ВладелецПартииXDTO, СообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыФормирования.РеквизитыЭлеватора <> Неопределено Тогда
		ЭлеваторXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
			ПараметрыФормирования.РеквизитыЭлеватора,
			СообщениеXML,
			ПараметрыОбмена,
			СтрШаблон(НСтр("ru = 'Элеватор %1'"), Строка(ПараметрыФормирования.Элеватор)));
		Если ЭлеваторXDTO <> Неопределено Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЗапросПартийXDTO, "Repository", ЭлеваторXDTO, СообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.НомерПартии) Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ЗапросПартийXDTO,
			ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ПараметрыФормирования.ВидПродукции),
			СокрЛП(ПараметрыФормирования.НомерПартии),
			СообщениеXML);
		ДанныеОписания.Добавить(СтрШаблон(НСтр("ru = '№ %1'"), ПараметрыФормирования.НомерПартии));
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьДанныеПостраничногоПросмотра(
		ЗапросПартийXDTO,
		СообщениеXML,
		ПараметрыФормирования.НомерСтраницы,
		ПараметрыФормирования.КоличествоНаСтранице);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ЗапросПартийXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	СообщениеXML.ДополнительноеОписание = СтрСоединить(ДанныеОписания, " ");
	
	Возврат СообщениеXML;
	
КонецФункции

Функция ПатрииТребующиеЗагрузки(МассивПартий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РеестрПартийЗЕРНО.Ссылка           КАК Ссылка,
		|	РеестрПартийЗЕРНО.Идентификатор    КАК Идентификатор,
		|	КлассификаторНСИЗЕРНО.ВидПродукции КАК ВидПродукции
		|ИЗ
		|	Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
		|		ПО РеестрПартийЗЕРНО.ОКПД2 = КлассификаторНСИЗЕРНО.Идентификатор
		|		И РеестрПартийЗЕРНО.ОКПД2 <> """"
		|		И КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)
		|ГДЕ
		|	РеестрПартийЗЕРНО.Ссылка В (&МассивПартий)
		|	И РеестрПартийЗЕРНО.ИдентификаторФГИС = """"";
	
	Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
	
	УстановитьПривилегированныйРежим(Истина);
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПартий;
	
КонецФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ЗапросОстатковПартийЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО           КАК КоличествоЗЕРНО,
	|	ТаблицаТовары.ВОбработкеЗЕРНО           КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Документ.ЗапросОстатковПартийЗЕРНО.КорректировкаОстатков КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
