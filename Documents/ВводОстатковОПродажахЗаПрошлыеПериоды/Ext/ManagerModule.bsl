#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает параметры выбора статей и аналитик.
// 
// Возвращаемое значение:
//  Структура - Параметры выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
//
Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	ПараметрыВыбораСтатейИАналитик = Новый Массив;
	
	#Область ФинансовыйРезультатРасходы
	
	// СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным           = "Объект.ФинансовыйРезультатРасходы";
	ПараметрыВыбора.Статья                = "СтатьяРасходов";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	ПараметрыВыбора.ВыборСтатьиРасходов   = Ложь;
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ФинансовыйРезультатРасходыСтатьяРасходов");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	#КонецОбласти
	
	#Область ФинансовыйРезультатДоходы
	
	// СтатьяДоходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным           = "Объект.ФинансовыйРезультатДоходы";
	ПараметрыВыбора.Статья                = "СтатьяДоходов";
	ПараметрыВыбора.ДоступностьПоОперации = Неопределено;
	ПараметрыВыбора.ВыборСтатьиРасходов   = Ложь;
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("ФинансовыйРезультатДоходыСтатьяДоходов");
	
	ПараметрыВыбораСтатейИАналитик.Добавить(ПараметрыВыбора);
	
	#КонецОбласти
	
	Возврат ПараметрыВыбораСтатейИАналитик;
	
КонецФункции

Функция ПолучениеФормыВводаОстатковОПродажахЗаПрошлыеПериоды(ХозяйственнаяОперация) Экспорт
	
	СоответствиеТиповОперацийФормам = Новый Соответствие;
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПодарочныхСертификатов"),
		"ФормаПодарочныеСертификаты");
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковФинансовогоРезультатаЗаПрошлыеПериоды"),
		"ФормаФинансовыйРезультат");
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды"),
		"ФормаОптовыеПродажи");
		
	СоответствиеТиповОперацийФормам.Вставить(
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды"),
		"ФормаРозничныеПродажи");
	
	Возврат СоответствиеТиповОперацийФормам[ХозяйственнаяОперация];
	
КонецФункции

#Область Проведение

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВводОстатковОПродажахЗаПрошлыеПериоды") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаФинансовыеРезультаты(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ВводОстатковЛокализация.ВводОстатковОПродажахЗаПрошлыеПериодыДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ФинансовыйРезультат");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("ПодарочныеСертификаты");
	
	ВводОстатковЛокализация.ВводОстатковОПродажахЗаПрошлыеПериодыЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Обработки.СправочноеРазмещениеНоменклатуры.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ВводОстатковЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВводОстатковЛокализация.ВводОстатковОПродажахЗаПрошлыеПериодыДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

#КонецОбласти


#Область ДляВызоваИзДругихПодсистем

// Добавляет команду создания документа на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//	КомандаФормы - добавляемая команда.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды);
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И( ЗначениеРазрешено(Склад)
	|	ИЛИ Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ЗаполнениеПоДаннымОперативногоУчета

// Возвращает таблицу значения для заполнения документа ввода остатков данными, полученными по данным оперативного учета.
// 
// Параметры:
// 	Дата - Дата - Дата, на которую формируются остатки.
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой выбираются остатки
// 	Организации - Массив - Массив, содержащий элементы типа СправочникСсылка.Организации, для которых выбираются остатки.
// 	ДополнительныйОтбор - Структура - Структура, содержащая ключ и значение дополнительного отбора.
// 	ПараметрыЗаполненияОстатков - Структура - Структура, содержащая дополнительные параметры необходимые, для заполнения остатков.
// Возвращаемое значение:
// 	ТаблицаЗначений, Неопределено - Если для данной хозяйственной операции есть данные, для нее возвращается таблица значений с значениями заполнения.
//
Функция ОстаткиПоТипуОперации(Дата, ХозяйственнаяОперация, Организации, ДополнительныйОтбор = Неопределено, ПараметрыЗаполненияОстатков = Неопределено) Экспорт
	Возврат Неопределено;	
КонецФункции

// Возвращает массив в котором содержатся имена полей при изменении которых, необходимо генерировать новый документ ввода остатков.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция, для которой определяются ключевые поля.
// Возвращаемое значение:
// 	Массив - Массив содержащий имена полей.
//
Функция КлючевыеПоляРеглУчетаПоТипуОперации(ХозяйственнаяОперация) Экспорт
	
	МассивКлючевыхПолей = Новый Массив;
	Возврат МассивКлючевыхПолей;
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)

	ВыбраннаяОперация = Неопределено;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		ВыбраннаяОперация = Параметры.Ключ.ХозяйственнаяОперация;
		
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") Тогда
		
		Параметры.ЗначенияЗаполнения.Свойство("ХозяйственнаяОперация", ВыбраннаяОперация);
		
	ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
		
		ВыбраннаяОперация = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования,"ХозяйственнаяОперация");
		
	ИначеЕсли Параметры.Свойство("ОтборПоТипамОпераций") И Параметры.ОтборПоТипамОпераций.Количество() = 1 Тогда
		
		ВыбраннаяОперация = Параметры.ОтборПоТипамОпераций[0].Значение;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ХозяйственнаяОперация", ВыбраннаяОперация);
		
		Параметры.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		Если Параметры.Свойство("Организация") Тогда
			ЗначенияЗаполнения.Вставить("Организация", Параметры.Организация);
		КонецЕсли;
		
		Если Параметры.Свойство("ОтражатьВОперативномУчете") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВОперативномУчете", Параметры.ОтражатьВОперативномУчете);
		КонецЕсли;
		
		Если Параметры.Свойство("ОтражатьВБУиНУ") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВБУиНУ", Параметры.ОтражатьВБУиНУ);
		КонецЕсли;
		
		Если Параметры.Свойство("ОтражатьВУУ") Тогда
			ЗначенияЗаполнения.Вставить("ОтражатьВУУ", Параметры.ОтражатьВУУ);
		КонецЕсли;
		
	КонецЕсли;

	Если ЗначениеЗаполнено(ВыбраннаяОперация) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ВыбраннаяФорма = ВводОстатковВызовСервера.ПолучениеФормыВводаОстатковОПродажахЗаПрошлыеПериоды(ВыбраннаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Данные,
		Данные.Номер,
		Данные.Дата,
		Данные.ХозяйственнаяОперация);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Период,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Подразделение КАК Подразделение,
		|	ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров КАК ВариантОбособленногоУчетаТоваров,
		|	ДанныеДокумента.Склад КАК Склад,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ДанныеДокумента.Партнер КАК Партнер,
		|	ДанныеДокумента.Контрагент КАК Контрагент,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДокумента.СоглашениеСКлиентом КАК СоглашениеСКлиентом,
		|	ДанныеДокумента.Партнер КАК Поставщик,
		|	ДанныеДокумента.Менеджер КАК Менеджер,
		|	ДанныеДокумента.Автор КАК Автор,
		|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	ДанныеДокумента.ОтражатьВОперативномУчете КАК ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ КАК ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ КАК ОтражатьВУУ,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)) КАК Комментарий,
		|	ДанныеДокумента.Ответственный КАК Ответственный,
		|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеДокумента.Проведен КАК Проведен,
		|	СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатРасходы.СуммаРасходов, 0)
		|		+ ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатДоходы.СуммаДоходов, 0) 
		|		+ ЕСТЬNULL(ДанныеТабличнойЧастиПодарочныеСертификаты.СуммаВВалютеСертификата, 0)
		|		+ ЕСТЬNULL(ДанныеТабличнойЧастиОптовыеПродажи.Сумма, 0) 
		|		+ ЕСТЬNULL(ДанныеТабличнойЧастиРозничныеПродажи.Сумма, 0)) КАК СуммаДокумента
		|ИЗ
		|	Документ.ВводОстатковОПродажахЗаПрошлыеПериоды КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ОптовыеПродажи КАК ДанныеТабличнойЧастиОптовыеПродажи
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиОптовыеПродажи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.РозничныеПродажи КАК ДанныеТабличнойЧастиРозничныеПродажи
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРозничныеПродажи.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ПодарочныеСертификаты КАК ДанныеТабличнойЧастиПодарочныеСертификаты
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиПодарочныеСертификаты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатРасходы КАК ДанныеТабличнойЧастиФинансовыйРезультатРасходы
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиФинансовыйРезультатРасходы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатДоходы КАК ДанныеТабличнойЧастиФинансовыйРезультатДоходы
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиФинансовыйРезультатДоходы.Ссылка
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Номер,
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Подразделение,
		|	ДанныеДокумента.Склад,
		|	ДанныеДокумента.Валюта,
		|	ДанныеДокумента.ХозяйственнаяОперация,
		|	ДанныеДокумента.НалогообложениеНДС,
		|	ДанныеДокумента.Контрагент,
		|	ДанныеДокумента.Договор,
		|	ДанныеДокумента.СоглашениеСКлиентом,
		|	ДанныеДокумента.Партнер,
		|	ДанныеДокумента.Менеджер,
		|	ДанныеДокумента.Автор,
		|	ДанныеДокумента.ЦенаВключаетНДС,
		|	ДанныеДокумента.НаправлениеДеятельности,
		|	ДанныеДокумента.ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)),
		|	ДанныеДокумента.Ответственный,
		|	ДанныеДокумента.ПометкаУдаления,
		|	ДанныеДокумента.Проведен";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                         Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                          Реквизиты.Номер);
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("Подразделение",                  Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",          Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Партнер",                        Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Контрагент",                     Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Договор",                        Реквизиты.Договор);
	Запрос.УстановитьПараметр("СоглашениеСКлиентом",            Реквизиты.СоглашениеСКлиентом);
	Запрос.УстановитьПараметр("НалогообложениеНДС",             Реквизиты.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Менеджер",                       Реквизиты.Менеджер);
	Запрос.УстановитьПараметр("Автор",                          Реквизиты.Автор);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ЦенаВключаетНДС",                Реквизиты.ЦенаВключаетНДС);
	Запрос.УстановитьПараметр("НаправлениеДеятельности",        Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтражатьВОперативномУчете",      Реквизиты.ОтражатьВОперативномУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУиНУ",                 Реквизиты.ОтражатьВБУиНУ);
	Запрос.УстановитьПараметр("ОтражатьВУУ",                    Реквизиты.ОтражатьВУУ);
	Запрос.УстановитьПараметр("ПустоеНазначение",               Справочники.Назначения.ПустаяСсылка());
	Запрос.УстановитьПараметр("Склад" ,                         Реквизиты.Склад);
	Запрос.УстановитьПараметр("Комментарий" ,                   Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Ответственный",                  Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Проведен",                       Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",                Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("СуммаДокумента",                 Реквизиты.СуммаДокумента);
	Запрос.УстановитьПараметр("Валюта",                         Реквизиты.Валюта);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ." + Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды.Имя));

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос("
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Ключи.Номенклатура         КАК Номенклатура,
	|	Ключи.Характеристика       КАК Характеристика,
	|	&ПустоеНазначение          КАК Назначение,
	|	Ключи.Серия                КАК Серия,
	|	Ключи.Склад                КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Продажи.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|		Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение                                 КАК Назначение,
	|		Продажи.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|		Продажи.АналитикаУчетаНоменклатуры.МестоХранения  КАК Склад
	|	ИЗ
	|		Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ОптовыеПродажи КАК Продажи
	|	ГДЕ
	|		НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И Продажи.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Продажи.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|		Продажи.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		&ПустоеНазначение                                 КАК Назначение,
	|		Продажи.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|		Продажи.АналитикаУчетаНоменклатуры.МестоХранения  КАК Склад
	|	ИЗ
	|		Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.РозничныеПродажи КАК Продажи
	|	ГДЕ
	|		НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|		И Продажи.Ссылка = &Ссылка
	|	) КАК Ключи
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|	ПО Ключи.Номенклатура = Аналитика.Номенклатура
	|		И Ключи.Характеристика = Аналитика.Характеристика
	|		И Ключи.Серия = Аналитика.Серия
	|		И Ключи.Склад = Аналитика.МестоХранения
	|		И &ПустоеНазначение = Аналитика.Назначение
	|ГДЕ
	|	Аналитика.КлючАналитики ЕСТЬ NULL
	|	И &ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковОптовыхПродажЗаПрошлыеПериоды),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковРозничныхПродажЗаПрошлыеПериоды)
	|		)	
	|");
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                                     Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение",                           Запрос.Параметры.ПустоеНазначение);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	ЗапросАналитик.УстановитьПараметр("ХозяйственнаяОперация",                      Запрос.Параметры.ХозяйственнаяОперация);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаФинансовыеРезультаты(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ФинансовыеРезультаты";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДоходы.ДатаОтражения           КАК Период,
	|	&Организация                          КАК Организация,
	|	&Подразделение                        КАК Подразделение,
	|	ТаблицаДоходы.СтатьяДоходов           КАК СтатьяДоходов,
	|	НЕОПРЕДЕЛЕНО                          КАК СтатьяРасходов,
	|	ТаблицаДоходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаДоходы.СуммаДоходов            КАК Доходы,
	|	0                                     КАК Расходы
	|	
	|ИЗ
	|	Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатДоходы КАК ТаблицаДоходы
	|
	|ГДЕ
	|	ТаблицаДоходы.Ссылка = &Ссылка
	|
 	|ОБЪЕДИНИТЬ ВСЕ
 	|
	|ВЫБРАТЬ
	|	ТаблицаРасходы.ДатаОтражения           КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО                           КАК СтатьяДоходов,
	|	ТаблицаРасходы.СтатьяРасходов          КАК СтатьяРасходов,
	|	ТаблицаРасходы.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	0                                      КАК Доходы,
	|	ТаблицаРасходы.СуммаРасходов           КАК Расходы
	|	
	|ИЗ
	|	Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатРасходы КАК ТаблицаРасходы
	|
	|ГДЕ
	|	ТаблицаРасходы.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Подразделение,
	|	НаправлениеДеятельности,
	|	СтатьяДоходов,
	|	СтатьяРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

	Возврат ТекстЗапроса;

КонецФункции

Процедура УстановитьПараметрАналитикаУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("АналитикаУчетаПоПартнерам") Тогда
		Возврат;
	КонецЕсли;
	
	АналитикаУчетаПоПартнерам = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(Запрос.Параметры);
	
	Запрос.УстановитьПараметр("АналитикаУчетаПоПартнерам", АналитикаУчетаПоПартнерам);

КонецПроцедуры

Функция ТекстЗапросаТаблицаВыручкаИСебестоимостьПродаж(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ВыручкаИСебестоимостьПродаж";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	УстановитьПараметрАналитикаУчетаПоПартнерам(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                      КАК НомерСтроки,
	|	ТаблицаТовары.ДатаОтражения                                    КАК Период,
	|	&Подразделение                                                 КАК Подразделение,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|		ТОГДА ТаблицаТовары.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаСебестоимости.КлючАналитики
	|	КОНЕЦ                                                          КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                   КАК АналитикаУчетаНаборов,
	|	&АналитикаУчетаПоПартнерам                                     КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО                                                   КАК ЗаказКлиента,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ                                                          КАК ТипЗапасов,
	|	&Менеджер                                                      КАК Менеджер,
	|	ВЫБОР
	|		КОГДА НЕ (ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					ИЛИ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга))
	|			ТОГДА ТаблицаТовары.ВидЗапасов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                          КАК ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА ТаблицаТовары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КОНЕЦ) КАК РазделУчета,
	|	(ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка 
	|		ТОГДА &НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)								   КАК ВидДеятельностиНДС,
	|	&Склад                                                         КАК Склад,
	|	&Договор                                                       КАК Договор,
	|	&СоглашениеСКлиентом                                           КАК Соглашение,
	|	&ВалютаУправленческогоУчета                                    КАК ВалютаВзаиморасчетов,
	|	&ВалютаУправленческогоУчета                                    КАК ВалютаДокумента,
	|	&НалогообложениеНДС                                            КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту) КАК ХозяйственнаяОперация,
	|
	|	&НаправлениеДеятельности                                       КАК НаправлениеДеятельностиКонтрагента,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|		ТОГДА ТаблицаТовары.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                          КАК НаправлениеДеятельностиНоменклатуры,
	|
	|	НЕОПРЕДЕЛЕНО                                                   КАК ИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                   КАК ИсточникГФУРасчетов,
	|
	|	0                                                              КАК Стоимость,
	|	0                                                              КАК СтоимостьБезНДС,
	|	0                                                              КАК СтоимостьРегл,
	|	0                                                              КАК СуммаРучнойСкидки,
	|	0                                                              КАК СуммаАвтоматическойСкидки,
	|	0                                                              КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                              КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	0                                                              КАК СуммаВВалютеДокумента,
	|	0                                                              КАК СуммаБезНДСВВалютеДокумента,
	|	ТаблицаТовары.Количество                                       КАК Количество,
	|	ТаблицаТовары.Сумма                                            КАК СуммаВыручки,
	|	ТаблицаТовары.СуммаБезНДС                                      КАК СуммаВыручкиБезНДС,
	|	ТаблицаТовары.СуммаРегл                                        КАК СуммаВыручкиРегл,
	|	ТаблицаТовары.СуммаРегл + ТаблицаТовары.НДСРегл                КАК СуммаВыручкиСНДСРегл,
	|
	|	ТаблицаТовары.ИдентификаторСтроки                              КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.РеализацияКлиенту) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ОптовыеПродажи КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаСебестоимости
	|	ПО ТаблицаТовары.АналитикаУчетаНоменклатуры.Номенклатура = АналитикаСебестоимости.Номенклатура
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.Характеристика = АналитикаСебестоимости.Характеристика
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.Серия = АналитикаСебестоимости.Серия
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.МестоХранения = АналитикаСебестоимости.МестоХранения
	|		И &ПустоеНазначение = АналитикаСебестоимости.Назначение
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                       КАК НомерСтроки,
	|	ТаблицаТовары.ДатаОтражения                                     КАК Период,
	|	&Подразделение                                                  КАК Подразделение,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|		ТОГДА ТаблицаТовары.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ АналитикаСебестоимости.КлючАналитики
	|	КОНЕЦ                                                           КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                    КАК АналитикаУчетаНаборов,
	|	ТаблицаТовары.АналитикаУчетаПоПартнерам                         КАК АналитикаУчетаПоПартнерам,
	|	НЕОПРЕДЕЛЕНО                                                    КАК ЗаказКлиента,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ИЛИ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)
	|	КОНЕЦ                                                           КАК ТипЗапасов,
	|	&Менеджер                                                       КАК Менеджер,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|			И  НЕ (ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|					ИЛИ ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) ТОГДА
	|		ТаблицаТовары.ВидЗапасов
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                           КАК ВидЗапасов,
	|	(ВЫБОР
	|		КОГДА ТаблицаТовары.ВидЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыПринятыеНаКомиссию)
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		КОГДА ТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПустаяСсылка)
	|		КОГДА ЕСТЬNULL(ТаблицаТовары.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ПроизводственныеЗатраты)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаСкладах) КОНЕЦ) КАК РазделУчета,
	|	(ВЫБОР
	|		КОГДА &ПартионныйУчетВерсии22 И &ФИФОСкользящаяОценка ТОГДА &НалогообложениеНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)								    КАК ВидДеятельностиНДС,
	|	&Склад                                                          КАК Склад,
	|	&Договор                                                        КАК Договор,
	|	&СоглашениеСКлиентом                                            КАК Соглашение,
	|	&ВалютаУправленческогоУчета                                     КАК ВалютаВзаиморасчетов,
	|	&ВалютаУправленческогоУчета                                     КАК ВалютаДокумента,
	|	&НалогообложениеНДС                                             КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияВРозницу) КАК ХозяйственнаяОперация,
	|
	|	&НаправлениеДеятельности                                       КАК НаправлениеДеятельностиКонтрагента,
	|	ВЫБОР КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям 
	|		ТОГДА ТаблицаТовары.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                          КАК НаправлениеДеятельностиНоменклатуры,
	|
	|	НЕОПРЕДЕЛЕНО                                                    КАК ИсточникГФУНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                    КАК ИсточникГФУРасчетов,
	|
	|	0                                                               КАК Стоимость,
	|	0                                                               КАК СтоимостьБезНДС,
	|	0                                                               КАК СтоимостьРегл,
	|	0                                                               КАК СуммаРучнойСкидки,
	|	0                                                               КАК СуммаАвтоматическойСкидки,
	|	0                                                               КАК СуммаВВалютеВзаиморасчетов,
	|	0                                                               КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	0                                                               КАК СуммаВВалютеДокумента,
	|	0                                                               КАК СуммаБезНДСВВалютеДокумента,
	|	ТаблицаТовары.Количество                                        КАК Количество,
	|	ТаблицаТовары.Сумма                                             КАК СуммаВыручки,
	|	ТаблицаТовары.СуммаБезНДС                                       КАК СуммаВыручкиБезНДС,
	|	ТаблицаТовары.СуммаРегл                                         КАК СуммаВыручкиРегл,
	|	ТаблицаТовары.СуммаРегл + ТаблицаТовары.НДСРегл                 КАК СуммаВыручкиСНДСРегл,
	|
	|	ТаблицаТовары.ИдентификаторСтроки                              КАК ИдентификаторФинЗаписи,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.РеализацияВРозницу) КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.РозничныеПродажи КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаСебестоимости
	|	ПО ТаблицаТовары.АналитикаУчетаНоменклатуры.Номенклатура = АналитикаСебестоимости.Номенклатура
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.Характеристика = АналитикаСебестоимости.Характеристика
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.Серия = АналитикаСебестоимости.Серия
	|		И ТаблицаТовары.АналитикаУчетаНоменклатуры.МестоХранения = АналитикаСебестоимости.МестоХранения
	|		И &ПустоеНазначение = АналитикаСебестоимости.Назначение
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	&Период КАК ДатаДокументаИБ,
	|	&Ссылка КАК Ссылка,
	|	&Номер КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	&Ответственный КАК Ответственный,
	|	&Автор КАК Автор,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Дополнительно,
	|	&Комментарий КАК Комментарий,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПервичногоДокумента,
	|	ВЫБОР
	|		КОГДА &Валюта = ДанныеДокумента.Организация.ВалютаРегламентированногоУчета
	|			ТОГДА СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатРасходы.СуммаРасходов, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатДоходы.СуммаДоходов, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиПодарочныеСертификаты.СуммаРегл, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиОптовыеПродажи.СуммаРегл, 0) +
	|				ЕСТЬNULL(ДанныеТабличнойЧастиРозничныеПродажи.СуммаРегл, 0))
	|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатРасходы.СуммаРасходов, 0) +
	|			ЕСТЬNULL(ДанныеТабличнойЧастиФинансовыйРезультатДоходы.СуммаДоходов, 0) +
	|			ЕСТЬNULL(ДанныеТабличнойЧастиПодарочныеСертификаты.СуммаВВалютеСертификата, 0) +
	|			ЕСТЬNULL(ДанныеТабличнойЧастиОптовыеПродажи.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиРозничныеПродажи.Сумма, 0))
	|	КОНЕЦ КАК Сумма,
	|	&Валюта КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЛОЖЬ КАК СторноИсправление,
	|	НЕОПРЕДЕЛЕНО КАК СторнируемыйДокумент,
	|	НЕОПРЕДЕЛЕНО КАК ИсправляемыйДокумент,
	|	&Период КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.ВводОстатковОПродажахЗаПрошлыеПериоды КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ОптовыеПродажи КАК
	|			ДанныеТабличнойЧастиОптовыеПродажи
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиОптовыеПродажи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.РозничныеПродажи КАК
	|			ДанныеТабличнойЧастиРозничныеПродажи
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиРозничныеПродажи.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ПодарочныеСертификаты КАК
	|			ДанныеТабличнойЧастиПодарочныеСертификаты
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиПодарочныеСертификаты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатРасходы КАК
	|			ДанныеТабличнойЧастиФинансовыйРезультатРасходы
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиФинансовыйРезультатРасходы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковОПродажахЗаПрошлыеПериоды.ФинансовыйРезультатДоходы КАК
	|			ДанныеТабличнойЧастиФинансовыйРезультатДоходы
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиФинансовыйРезультатДоходы.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводОстатковОПродажахЗаПрошлыеПериоды";
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Истина);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ТекстЗапроса;
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВводОстатковЛокализация.ВводОстатковОПродажахЗаПрошлыеПериодыДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#КонецЕсли
