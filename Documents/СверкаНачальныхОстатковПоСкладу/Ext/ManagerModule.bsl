#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеТабличныхЧастейДокументаСверки

// Выполняет заполнение табличной части "Результаты сверки", переданного объекта.
//
//	Параметры:
//		Объект - ДокументОбъект.СверкаНачальныхОстатковПоСкладу - объект, табличную часть которого необходимо заполнить.
//
Процедура ЗаполнитьТаблицуРезультатов(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("КонецПериода",			КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("Организация",			Объект.Организация);
	Запрос.УстановитьПараметр("Склад",					Объект.Склад);
	Запрос.УстановитьПараметр("ИспользоватьНазначения",	Объект.ИспользоватьНазначения);
	Запрос.УстановитьПараметр("Таблица",				Объект.ДанныеВнешнейСистемы.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	Т.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	Т.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ВЫБОР КОГДА &ИспользоватьНазначения
	|		ТОГДА Т.АналитикаУчетаНоменклатуры.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.НомерГТД КАК НомерГТД,
	|	Т.КоличествоОстаток КАК Количество
	|ПОМЕСТИТЬ ВТОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И АналитикаУчетаНоменклатуры.МестоХранения = &Склад) КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	ВЫБОР КОГДА &ИспользоватьНазначения
	|		ТОГДА Т.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	Т.Упаковка КАК Упаковка,
	|	Т.ВнешнееКоличество КАК ВнешнееКоличество,
	|	Т.ВнешняяСтоимостьУпр КАК ВнешняяСтоимостьУпр,
	|	Т.ВнешняяСтоимостьРегл КАК ВнешняяСтоимостьРегл,
	|	Т.ВнешняяСтоимостьНУ КАК ВнешняяСтоимостьНУ,
	|	Т.ВнешняяСтоимостьПР КАК ВнешняяСтоимостьПР,
	|	Т.ВнешняяСтоимостьВР КАК ВнешняяСтоимостьВР
	|ПОМЕСТИТЬ ВТОстаткиВнешние
	|ИЗ
	|	&Таблица КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ВнешниеДанные КАК ВнешниеДанные,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.Назначение КАК Назначение,
	|	Т.Упаковка КАК Упаковка,
	|	Т.КоэффициентУпаковки КАК КоэффициентУпаковки,
	|	СУММА(Т.Количество) КАК Количество,
	|	СУММА(Т.СтоимостьУпр) КАК СтоимостьУпр,
	|	СУММА(Т.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(Т.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(Т.СтоимостьПР) КАК СтоимостьПР,
	|	СУММА(Т.СтоимостьВР) КАК СтоимостьВР,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.НомерГТД КАК НомерГТД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК ВнешниеДанные,
	|		Т.Номенклатура КАК Номенклатура,
	|		Т.Характеристика КАК Характеристика,
	|		Т.Серия КАК Серия,
	|		Т.Назначение КАК Назначение,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка) КАК Упаковка,
	|		ЕСТЬNULL(Упаковки.Числитель, 1) / ЕСТЬNULL(Упаковки.Знаменатель, 1) КАК КоэффициентУпаковки,
	|		ВЫРАЗИТЬ(Т.ВнешнееКоличество * ЕСТЬNULL(Упаковки.Числитель, 1) / ЕСТЬNULL(Упаковки.Знаменатель, 1) КАК ЧИСЛО (15, 3)) КАК Количество,
	|		Т.ВнешняяСтоимостьУпр КАК СтоимостьУпр,
	|		Т.ВнешняяСтоимостьРегл КАК СтоимостьРегл,
	|		Т.ВнешняяСтоимостьНУ КАК СтоимостьНУ,
	|		Т.ВнешняяСтоимостьПР КАК СтоимостьПР,
	|		Т.ВнешняяСтоимостьВР КАК СтоимостьВР,
	|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка) КАК АналитикаУчетаНоменклатуры,
	|		ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка) КАК ВидЗапасов,
	|		ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД
	|	ИЗ
	|		ВТОстаткиВнешние КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|			ПО Т.Упаковка = Упаковки.Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ,
	|		Т.Номенклатура,
	|		Т.Характеристика,
	|		Т.Серия,
	|		Т.Назначение,
	|		ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка),
	|		1,
	|		Т.Количество,
	|		0,
	|		0,
	|		0,
	|		0,
	|		0,
	|		Т.АналитикаУчетаНоменклатуры,
	|		Т.ВидЗапасов,
	|		Т.НомерГТД
	|	ИЗ
	|		ВТОстатки КАК Т) КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ВнешниеДанные,
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Серия,
	|	Т.Назначение,
	|	Т.Упаковка,
	|	Т.КоэффициентУпаковки,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД
	|
	|УПОРЯДОЧИТЬ ПО
	|	Т.Номенклатура,
	|	Т.Характеристика,
	|	Т.Серия,
	|	Т.Назначение,
	|	Т.ВнешниеДанные УБЫВ,
	|	Т.АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов,
	|	Т.НомерГТД";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПоляСопоставления = Новый Структура("Номенклатура, Характеристика, Серия, Назначение");
	ПоляРаспределения = Новый Структура("СтоимостьУпр, СтоимостьРегл, СтоимостьНУ, СтоимостьПР, СтоимостьВР");
	ПоляЦены 		  = Новый Структура("СтоимостьУпр, СтоимостьРегл, СтоимостьНУ, СтоимостьПР, СтоимостьВР, Количество");
	КоличествоОстаток = 0;
	
	Объект.РезультатыСверки.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Если ПоляСопоставления.Номенклатура <> Выборка.Номенклатура
		 ИЛИ ПоляСопоставления.Характеристика <> Выборка.Характеристика
		 ИЛИ ПоляСопоставления.Серия <> Выборка.Серия
		 ИЛИ ПоляСопоставления.Назначение <> Выборка.Назначение Тогда
			
			Если КоличествоОстаток <> 0 Тогда
				
				// Добавим нераспределенные остатки внешней системы в таблицу результатов.
				НоваяСтрока = Объект.РезультатыСверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоляСопоставления);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоляРаспределения);
				
				ЗаполнитьКоличестваВСтрокеТаблицыРезультатов(Объект, НоваяСтрока, КоличествоОстаток, 0);
				
			КонецЕсли;
			
			// Это новое распределение.
			ЗаполнитьЗначенияСвойств(ПоляСопоставления, Выборка);
			ЗаполнитьЗначенияСвойств(ПоляРаспределения, Выборка);
			ЗаполнитьЗначенияСвойств(ПоляЦены, 			Выборка);
			КоличествоОстаток = Выборка.Количество;
			
			Если НЕ Выборка.ВнешниеДанные Тогда
				
				// Добавим остатки товаров организаций (без остатков во внешней системе).
				НоваяСтрока = Объект.РезультатыСверки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				
				ЗаполнитьКоличестваВСтрокеТаблицыРезультатов(Объект, НоваяСтрока, 0, Выборка.Количество);
				
				ПоляСопоставления.Номенклатура = Неопределено; // следующая строка выборки не должна совпасть с этой строкой
				КоличествоОстаток = 0;
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если КоличествоОстаток = 0 Тогда
			
			// В остатках товаров организаций числится больше, чем во внешней системе.
			НоваяСтрока = Объект.РезультатыСверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Если Объект.КоличествоИзОУ Тогда
				
				// Заполним суммы по цене из внешней системы.
				Для Каждого КлючИЗначение Из ПоляРаспределения Цикл
					НоваяСтрока[КлючИЗначение.Ключ] = Окр(Выборка.Количество * ПоляЦены[КлючИЗначение.Ключ] / ПоляЦены.Количество, 2);
				КонецЦикла;
				
			КонецЕсли;
			
			ЗаполнитьКоличестваВСтрокеТаблицыРезультатов(Объект, НоваяСтрока, 0, Выборка.Количество);
			
		Иначе
			
			// Есть остаток и во внешней системе, и в товарах организаций.
			КоличествоСписания = Мин(КоличествоОстаток, Выборка.Количество);
			
			НоваяСтрока = Объект.РезультатыСверки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Для Каждого КлючИЗначение Из ПоляРаспределения Цикл
				
				СуммаСписания = Окр(ПоляРаспределения[КлючИЗначение.Ключ] * КоличествоСписания / КоличествоОстаток, 2);
				ПоляРаспределения[КлючИЗначение.Ключ] = ПоляРаспределения[КлючИЗначение.Ключ] - СуммаСписания;
				
				Если Объект.КоличествоИзОУ И КоличествоСписания <> Выборка.Количество Тогда
					// Если остаток товаров организаций больше, чем во внешней системе, то заполним суммы по цене из внешней системы.
					НоваяСтрока[КлючИЗначение.Ключ] = Окр(Выборка.Количество * ПоляЦены[КлючИЗначение.Ключ] / ПоляЦены.Количество, 2);
				Иначе
					НоваяСтрока[КлючИЗначение.Ключ] = СуммаСписания;
				КонецЕсли;
				
			КонецЦикла;
			
			ЗаполнитьКоличестваВСтрокеТаблицыРезультатов(Объект, НоваяСтрока, КоличествоСписания, Выборка.Количество);
			
			КоличествоОстаток = КоличествоОстаток - КоличествоСписания;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоОстаток <> 0 Тогда
		
		// Добавим нераспределенные остатки внешней системы в таблицу результатов.
		НоваяСтрока = Объект.РезультатыСверки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоляСопоставления);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПоляРаспределения);
		
		ЗаполнитьКоличестваВСтрокеТаблицыРезультатов(Объект, НоваяСтрока, КоличествоОстаток, 0);
		
	КонецЕсли;
	
	ЗаполнитьАналитикиУчетаНоменклатуры(Объект);
	ЗаполнитьВидыЗапасов(Объект);
	ЗаполнитьСтатусыУказанияСерий(Объект);
	
	ТаблицаРезультатов = Объект.РезультатыСверки.Выгрузить();
	ТаблицаРезультатов.Свернуть(
		"Номенклатура, Характеристика, Серия, СтатусУказанияСерий, Назначение, Упаковка, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД",
		"ВнешнееКоличество, КоличествоУпаковок, Количество, КоличествоУпаковокОтклонение, КоличествоОтклонение,
			|СтоимостьУпр, СтоимостьРегл, СтоимостьНУ, СтоимостьПР, СтоимостьВР");
	
	ТаблицаРезультатов.Сортировать(
		"Номенклатура, Характеристика, Серия, СтатусУказанияСерий, Назначение, Упаковка, АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД");
	
	Объект.РезультатыСверки.Загрузить(ТаблицаРезультатов);
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Ложь;
	
КонецПроцедуры

// Выполняет сопоставление идентификаторов внешней Системы ссылкам на внутренние объекты в табличной части "Данные внешней системы".
//
//	Параметры:
//		Объект - ДокументОбъект.СверкаНачальныхОстатковПоСкладу - объект, для которого необходимо выполнить сопоставление.
//
Процедура СопоставитьНоменклатуруВнешнейСистемы(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("ИспользоватьНазначения",	Объект.ИспользоватьНазначения);
	Запрос.УстановитьПараметр("Таблица",
		Объект.ДанныеВнешнейСистемы.Выгрузить(,
			"НомерСтроки, ВнешнийКод, ВнешнийАртикул, ВнешнееНаименование, ВнешняяЕдиницаИзмерения, ВнешнееНазначение, Номенклатура"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.ВнешнийКод КАК ВнешнийКод,
	|	Т.ВнешнийАртикул КАК ВнешнийАртикул,
	|	Т.ВнешнееНаименование КАК ВнешнееНаименование,
	|	Т.ВнешняяЕдиницаИзмерения КАК ВнешняяЕдиницаИзмерения,
	|	ВЫБОР КОГДА &ИспользоватьНазначения
	|		ТОГДА Т.ВнешнееНазначение
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВнешнееНазначение
	|ПОМЕСТИТЬ ВТТекущийДокумент
	|ИЗ
	|	&Таблица КАК Т
	|ГДЕ
	|	Т.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВнешнийКод,
	|	ВнешнийАртикул,
	|	ВнешнееНаименование,
	|	ВнешняяЕдиницаИзмерения,
	|	ВнешнееНазначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Т.ВнешнийКод КАК ВнешнийКод,
	|	Т.ВнешнийАртикул КАК ВнешнийАртикул,
	|	Т.ВнешнееНаименование КАК ВнешнееНаименование,
	|	Т.ВнешняяЕдиницаИзмерения КАК ВнешняяЕдиницаИзмерения,
	|	ВЫБОР КОГДА &ИспользоватьНазначения
	|		ТОГДА Т.ВнешнееНазначение
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ВнешнееНазначение,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	Т.Назначение КАК Назначение,
	|	Т.Упаковка КАК Упаковка,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ВТДругиеДокументы
	|ИЗ
	|	Документ.СверкаНачальныхОстатковПоСкладу.ДанныеВнешнейСистемы КАК Т
	|ГДЕ
	|	Т.Ссылка <> &Ссылка
	|	И Т.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВнешнийКод,
	|	ВнешнийАртикул,
	|	ВнешнееНаименование,
	|	ВнешняяЕдиницаИзмерения,
	|	ВнешнееНазначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийДокумент.НомерСтроки КАК НомерСтроки,
	|	ДругиеДокументы.Номенклатура КАК Номенклатура,
	|	ДругиеДокументы.Характеристика КАК Характеристика,
	|	ДругиеДокументы.Серия КАК Серия,
	|	ДругиеДокументы.Назначение КАК Назначение,
	|	ДругиеДокументы.Упаковка КАК Упаковка
	|ИЗ
	|	ВТТекущийДокумент КАК ТекущийДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДругиеДокументы КАК ДругиеДокументы
	|		ПО ТекущийДокумент.ВнешнийКод = ДругиеДокументы.ВнешнийКод
	|			И ТекущийДокумент.ВнешнийАртикул = ДругиеДокументы.ВнешнийАртикул
	|			И ТекущийДокумент.ВнешнееНаименование = ДругиеДокументы.ВнешнееНаименование
	|			И ТекущийДокумент.ВнешняяЕдиницаИзмерения = ДругиеДокументы.ВнешняяЕдиницаИзмерения
	|			И ТекущийДокумент.ВнешнееНазначение = ДругиеДокументы.ВнешнееНазначение
	|ГДЕ
	|	ДругиеДокументы.ВнешнийКод ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущийДокумент.НомерСтроки,
	|	ДругиеДокументы.Номенклатура,
	|	ДругиеДокументы.Характеристика,
	|	ДругиеДокументы.Серия,
	|	ДругиеДокументы.Назначение,
	|	ДругиеДокументы.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ДругиеДокументы.Количество, 0)) = 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.ДанныеВнешнейСистемы[Выборка.НомерСтроки - 1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПодчиненныхДокументов

// Возвращает признак успешного заполнения ввода начальных остатков товаров.
//
//	Параметры:
//		ЗаполняемыйДокумент - ДокументОбъект.ВводОстатков - объект, который необходимо заполнить.
//		ДанныеЗаполнения - Структура - Данные для заполнения документа.
//		ИнтерактивноеЗаполнение - Булево - признак интерактивности заполнения.
//
//	Возвращаемое значение:
//		Булево - признак успешного заполнения документа.
//
Функция ЗаполнитьВводОстатковТоваровНаОснованииСверки(ЗаполняемыйДокумент, ДанныеЗаполнения, ИнтерактивноеЗаполнение = Ложь) Экспорт
	Перем КэшированныеЗначения;
	
	Если Не (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументСверки")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = ДанныеДокументаСверки(ДанныеЗаполнения);
	
	// Заполним шапку документа.
	РезультатЗапросаДанныеШапки = РезультатЗапроса[0]; // РезультатЗапроса
	ДанныеШапки = РезультатЗапросаДанныеШапки.Выбрать();
	ДанныеШапки.Следующий();
	
	ВалютаРегламентированногоУчета       = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеШапки.Организация);
	ВалютаУправленческогоУчета           = Константы.ВалютаУправленческогоУчета.Получить();
	КоэффициентПересчетаИзВалютыУпрВРегл = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВалютаУправленческогоУчета, ВалютаРегламентированногоУчета, КонецМесяца(ДанныеШапки.Дата), ВалютаРегламентированногоУчета);
	КоэффициентПересчетаИзВалютыРеглВУпр = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(ВалютаРегламентированногоУчета, ВалютаУправленческогоУчета, КонецМесяца(ДанныеШапки.Дата), ВалютаРегламентированногоУчета);
	
	ЗаполнитьОбщиеРеквизитыШапкиПодчиненныхДокументов(ДанныеЗаполнения, ДанныеШапки, ЗаполняемыйДокумент);
	
	ЗаполняемыйДокумент.ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.ВводОстатковСобственныхТоваров;
	ЗаполняемыйДокумент.ОтражатьВОперативномУчете = Не ДанныеЗаполнения.ВводОстатковСебестоимости;
	ЗаполняемыйДокумент.ОтражатьСебестоимость     = ДанныеЗаполнения.ВводОстатковСебестоимости;
	ЗаполняемыйДокумент.ОтражатьВБУиНУ            = ДанныеЗаполнения.ВводОстатковСебестоимости;
	ЗаполняемыйДокумент.ОтражатьВУУ               = ДанныеЗаполнения.ВводОстатковСебестоимости;
	
	ЗаполняемыйДокумент.ЦенаВключаетНДС = ДанныеШапки.СуммаВключаетНДС;
	Если ДанныеШапки.СуммаВВалютеУпр Тогда
		ЗаполняемыйДокумент.Валюта = ВалютаУправленческогоУчета;
	Иначе
		ЗаполняемыйДокумент.Валюта = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	// Заполним табличную часть документа.
	ЗаполняемыйДокумент.Товары.Очистить();
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаполняемыйДокумент);
	
	РезультатЗапросаДанныеСверки = РезультатЗапроса[1]; // РезультатЗапроса
	ДанныеСверки = РезультатЗапросаДанныеСверки.Выбрать();
	
	Пока ДанныеСверки.Следующий() Цикл
		
		Если ДанныеЗаполнения.ВводОстатковСебестоимости Тогда
			
			Если ДанныеСверки.ВнешнееКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока = ЗаполняемыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСверки);
			
			ТекущаяСтрока.Количество = ДанныеСверки.ВнешнееКоличество;
			
			Если ДанныеШапки.КоличествоИзОУ И ДанныеСверки.Количество > ДанныеСверки.ВнешнееКоличество Тогда
				
				ТекущаяСтрока.Сумма 	= ДанныеСверки.Сумма * ДанныеСверки.ВнешнееКоличество / ДанныеСверки.Количество;
				ТекущаяСтрока.СуммаРегл = ДанныеСверки.СуммаРегл * ДанныеСверки.ВнешнееКоличество / ДанныеСверки.Количество;
				ТекущаяСтрока.СуммаПР 	= ДанныеСверки.СуммаПР * ДанныеСверки.ВнешнееКоличество / ДанныеСверки.Количество;
				ТекущаяСтрока.СуммаВР 	= ДанныеСверки.СуммаВР * ДанныеСверки.ВнешнееКоличество / ДанныеСверки.Количество;
				
			КонецЕсли;
			
			Если НЕ ДанныеШапки.СуммаВВалютеУпр Тогда
				ТекущаяСтрока.Сумма = Окр(ТекущаяСтрока.СуммаРегл * КоэффициентПересчетаИзВалютыРеглВУпр, 2, 1);
				ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
			КонецЕсли;
			
		Иначе
			
			Если ДанныеСверки.КоличествоОтклонение = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущаяСтрока = ЗаполняемыйДокумент.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСверки);
			
			ТекущаяСтрока.Количество  = ?(ДанныеШапки.КоличествоИзОУ, -1, 1) * ДанныеСверки.КоличествоОтклонение;
			ТекущаяСтрока.Сумма 	  = 0;
			ТекущаяСтрока.СуммаБезНДС = 0;
			ТекущаяСтрока.СуммаРегл   = 0;
			ТекущаяСтрока.СуммаПР 	  = 0;
			ТекущаяСтрока.СуммаВР 	  = 0;
			
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество;
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме");
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		СтруктураДействий = Новый Структура;
		Если НЕ ЗаполняемыйДокумент.ЦенаВключаетНДС Тогда
			ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма;
		Иначе
			СтруктураДействий.Вставить("ПересчитатьСуммуБезНДС", СтруктураПересчетаСуммы);
		КонецЕсли;
		
		Если ДанныеШапки.СуммаВВалютеУпр Тогда
			СтруктураДействий.Вставить("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл);
		КонецЕсли;
		СтруктураДействий.Вставить("ПересчитатьНДСРегл", СтруктураПересчетаСуммы);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(ЗаполняемыйДокумент, Документы.ВводОстатков));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаполняемыйДокумент, ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак успешного заполнения оприходования излишков товаров.
//
//	Параметры:
//		ЗаполняемыйДокумент - ДокументОбъект.ОприходованиеИзлишковТоваров - объект, который необходимо заполнить.
//		ДанныеЗаполнения - Структура - Данные для заполнения документа.
//		ИнтерактивноеЗаполнение - Булево - признак интерактивности заполнения.
//
//	Возвращаемое значение:
//		Булево - признак успешного заполнения документа.
//
Функция ЗаполнитьОприходованиеИзлишковТоваровНаОснованииСверки(ЗаполняемыйДокумент, ДанныеЗаполнения, ИнтерактивноеЗаполнение = Ложь) Экспорт
	
	Если НЕ (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументСверки")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = ДанныеДокументаСверки(ДанныеЗаполнения);
	
	// Заполним шапку документа.
	РезультатЗапросаДанныеШапки = РезультатЗапроса[0]; // РезультатЗапроса 
	ДанныеШапки = РезультатЗапросаДанныеШапки.Выбрать();
	ДанныеШапки.Следующий();
	
	ЗаполнитьОбщиеРеквизитыШапкиПодчиненныхДокументов(ДанныеЗаполнения, ДанныеШапки, ЗаполняемыйДокумент);
	
	Если ДанныеШапки.СуммаВВалютеУпр Тогда
		ЗаполняемыйДокумент.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ЗаполняемыйДокумент.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(ДанныеШапки.Организация);
	КонецЕсли;
	
	// Заполним табличную часть документа.
	ЗаполняемыйДокумент.Товары.Очистить();
	
	РезультатЗапросаДанныеСверки = РезультатЗапроса[1]; // РезультатЗапроса 
	ДанныеСверки = РезультатЗапросаДанныеСверки.Выбрать();
	Пока ДанныеСверки.Следующий() Цикл
		
		ДобавитьСтроку = Ложь;
		
		Если НЕ ДанныеШапки.КоличествоИзОУ Тогда
			Если ДанныеСверки.КоличествоОтклонение > 0 Тогда
				ДобавитьСтроку = НЕ ДанныеЗаполнения.ДокументСледующегоПериода;
			КонецЕсли;
		Иначе
			Если ДанныеСверки.КоличествоОтклонение > 0 Тогда
				ДобавитьСтроку = ДанныеЗаполнения.ДокументСледующегоПериода;
			ИначеЕсли ДанныеСверки.КоличествоОтклонение < 0 Тогда
				ДобавитьСтроку = НЕ ДанныеЗаполнения.ДокументСледующегоПериода;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДобавитьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = ЗаполняемыйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСверки);
		
		ТекущаяСтрока.Количество = Макс(ДанныеСверки.КоличествоОтклонение, -ДанныеСверки.КоличествоОтклонение);
		ТекущаяСтрока.Сумма 	 = Макс(ДанныеСверки.СуммаОтклонение, -ДанныеСверки.СуммаОтклонение);
		ТекущаяСтрока.Цена 		 = ТекущаяСтрока.Сумма / ТекущаяСтрока.Количество;
		
	КонецЦикла;
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(ЗаполняемыйДокумент, Документы.ОприходованиеИзлишковТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаполняемыйДокумент, ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак успешного заполнения списания недостач товаров.
//
//	Параметры:
//		ЗаполняемыйДокумент - ДокументОбъект.СписаниеНедостачТоваров - объект, который необходимо заполнить.
//		ДанныеЗаполнения - Структура - Данные для заполнения документа.
//		ИнтерактивноеЗаполнение - Булево - признак интерактивности заполнения.
//
//	Возвращаемое значение:
//		Булево - признак успешного заполнения документа.
//
Функция ЗаполнитьСписаниеНедостачТоваровНаОснованииСверки(ЗаполняемыйДокумент, ДанныеЗаполнения, ИнтерактивноеЗаполнение = Ложь) Экспорт
	
	Если НЕ (ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДокументСверки")) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатЗапроса = ДанныеДокументаСверки(ДанныеЗаполнения);
	
	// Заполним шапку документа.
	РезультатЗапросаДанныеШапки = РезультатЗапроса[0]; // РезультатЗапроса
	ДанныеШапки = РезультатЗапросаДанныеШапки.Выбрать();
	ДанныеШапки.Следующий();
	
	ЗаполнитьОбщиеРеквизитыШапкиПодчиненныхДокументов(ДанныеЗаполнения, ДанныеШапки, ЗаполняемыйДокумент);
	
	ЗаполняемыйДокумент.ВидыЗапасовУказаныВручную = Истина;
	
	// Заполним табличную часть документа.
	ЗаполняемыйДокумент.Товары.Очистить();
	ЗаполняемыйДокумент.ВидыЗапасов.Очистить();
	
	РезультатЗапросаДанныеСверки = РезультатЗапроса[1]; // РезультатЗапроса
	ДанныеСверки = РезультатЗапросаДанныеСверки.Выбрать();
	Пока ДанныеСверки.Следующий() Цикл
		
		ДобавитьСтроку = Ложь;
		
		Если НЕ ДанныеШапки.КоличествоИзОУ Тогда
			Если ДанныеСверки.КоличествоОтклонение < 0 Тогда
				ДобавитьСтроку = НЕ ДанныеЗаполнения.ДокументСледующегоПериода;
			КонецЕсли;
		Иначе
			Если ДанныеСверки.КоличествоОтклонение > 0 Тогда
				ДобавитьСтроку = НЕ ДанныеЗаполнения.ДокументСледующегоПериода;
			ИначеЕсли ДанныеСверки.КоличествоОтклонение < 0 Тогда
				ДобавитьСтроку = ДанныеЗаполнения.ДокументСледующегоПериода;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДобавитьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока = ЗаполняемыйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеСверки);
		
		ТекущаяСтрока.Количество = Макс(ДанныеСверки.КоличествоОтклонение, -ДанныеСверки.КоличествоОтклонение);
		
		ТекущаяСтрокаВидовЗапасов = ЗаполняемыйДокумент.ВидыЗапасов.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрокаВидовЗапасов, ДанныеСверки);
		
		ТекущаяСтрокаВидовЗапасов.Количество = ТекущаяСтрока.Количество;
		
	КонецЦикла;
	
	ЗаполняемыйДокумент.Товары.Свернуть("Номенклатура, Характеристика, Назначение, Серия, АналитикаУчетаНоменклатуры, СтатусУказанияСерий", "Количество");
	ЗаполняемыйДокумент.ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество");
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(
		НоменклатураСервер.ПараметрыУказанияСерий(ЗаполняемыйДокумент, Документы.СписаниеНедостачТоваров));
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ЗаполняемыйДокумент, ПараметрыУказанияСерий);
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	Возврат;	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица_ИмяРегистра - ТаблицаЗначений - таблица данных для отражения в регистр (вместо _ИмяРегистра подставляется имя самого регистра).
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.СверкаНачальныхОстатковПоСкладу") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СверкаНачальныхОстатковПоСкладуЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемыКоманды

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	Возврат;
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	СверкаНачальныхОстатковПоСкладуЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	СверкаНачальныхОстатковПоСкладуЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

#Область _ЗагрузкаИзФайлаВТЧ

// Устанавливает параметры загрузки.
//
// Параметры:
//   Параметры - Структура - параметры загрузки из файла.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
	ТипДанныхКолонки = Параметры.ТипДанныхКолонки;
	
	ТипДанныхКолонки.Вставить("ВнешнийКод",				 Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(11)));
	ТипДанныхКолонки.Вставить("ВнешнийАртикул",			 Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(50)));
	ТипДанныхКолонки.Вставить("ВнешнееНаименование",	 Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(255)));
	ТипДанныхКолонки.Вставить("ВнешняяЕдиницаИзмерения", Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(50)));
	ТипДанныхКолонки.Вставить("ВнешнееНазначение",		 Новый ОписаниеТипов("Строка",,	Новый КвалификаторыСтроки(255)));
	ТипДанныхКолонки.Вставить("ВнешнееКоличество",		 Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 3)));
	ТипДанныхКолонки.Вставить("ВнешняяСтоимостьУпр",	 Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 2)));
	ТипДанныхКолонки.Вставить("ВнешняяСтоимостьРегл",	 Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 2)));
	ТипДанныхКолонки.Вставить("ВнешняяСтоимостьНУ",	 	 Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 2)));
	ТипДанныхКолонки.Вставить("ВнешняяСтоимостьПР",	 	 Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 2)));
	ТипДанныхКолонки.Вставить("ВнешняяСтоимостьВР",	 	 Новый ОписаниеТипов("Число",,	Новый КвалификаторыЧисла(15, 2)));
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ДанныеВнешнейСистемы,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//	АдресЗагружаемыхДанных - Строка - адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - порядковый номер строки.
//     * _ОстальныеКолонки_ - Неопределено - остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//	СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов:
//     * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность.
//     * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность.
//	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части, в которую загружаются данные.
//	ДополнительныеПараметры - Структура - дополнительные параметры, переданные из формы-источнике.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Остатки				= ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	ЗагружаемыеДанные	= ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МассивВнешнийКод 			  = ЗагружаемыеДанные.ВыгрузитьКолонку("ВнешнийКод");
	МассивВнешнийАртикул 		  = ЗагружаемыеДанные.ВыгрузитьКолонку("ВнешнийАртикул");
	МассивВнешнееНаименование 	  = ЗагружаемыеДанные.ВыгрузитьКолонку("ВнешнееНаименование");
	МассивВнешняяЕдиницаИзмерения = ЗагружаемыеДанные.ВыгрузитьКолонку("ВнешняяЕдиницаИзмерения");
	МассивВнешнееНазначение 	  = ЗагружаемыеДанные.ВыгрузитьКолонку("ВнешнееНазначение");
	
	ЗагружаемыеДанные.Колонки.Удалить("ВнешнийКод");
	ЗагружаемыеДанные.Колонки.Удалить("ВнешнийАртикул");
	ЗагружаемыеДанные.Колонки.Удалить("ВнешнееНаименование");
	ЗагружаемыеДанные.Колонки.Удалить("ВнешняяЕдиницаИзмерения");
	ЗагружаемыеДанные.Колонки.Удалить("ВнешнееНазначение");
	
	ЗагружаемыеДанные.Колонки.Добавить("ВнешнийКод",		  	  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(11)));
	ЗагружаемыеДанные.Колонки.Добавить("ВнешнийАртикул", 		  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ЗагружаемыеДанные.Колонки.Добавить("ВнешнееНаименование", 	  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	ЗагружаемыеДанные.Колонки.Добавить("ВнешняяЕдиницаИзмерения", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(50)));
	ЗагружаемыеДанные.Колонки.Добавить("ВнешнееНазначение", 	  Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255)));
	
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивВнешнийКод, 			  "ВнешнийКод");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивВнешнийАртикул, 		  "ВнешнийАртикул");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивВнешнееНаименование, 	  "ВнешнееНаименование");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивВнешняяЕдиницаИзмерения, "ВнешняяЕдиницаИзмерения");
	ЗагружаемыеДанные.ЗагрузитьКолонку(МассивВнешнееНазначение, 	  "ВнешнееНазначение");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.ВнешнийКод				КАК ВнешнийКод,
	|	ЗагружаемыеДанные.ВнешнийАртикул			КАК ВнешнийАртикул,
	|	ЗагружаемыеДанные.ВнешнееНаименование		КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.ВнешняяЕдиницаИзмерения	КАК ВнешняяЕдиницаИзмерения,
	|	ЗагружаемыеДанные.ВнешнееНазначение			КАК ВнешнееНазначение,
	|	ЗагружаемыеДанные.ВнешнееКоличество			КАК ВнешнееКоличество,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьУпр		КАК ВнешняяСтоимостьУпр,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьРегл		КАК ВнешняяСтоимостьРегл,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьНУ		КАК ВнешняяСтоимостьНУ,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьПР		КАК ВнешняяСтоимостьПР,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьВР		КАК ВнешняяСтоимостьВР,
	|	ЗагружаемыеДанные.Идентификатор				КАК Идентификатор
	|ПОМЕСТИТЬ ЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Идентификатор						КАК Идентификатор,
	|	МАКСИМУМ(Товары.Номенклатура)				КАК Номенклатура,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Товары.Номенклатура)	КАК КоличествоНоменклатуры
	|ПОМЕСТИТЬ ВТДанныеНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор		КАК Идентификатор,
	|		Товары.Ссылка						КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО Товары.Код = ЗагружаемыеДанные.ВнешнийКод
	|
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнийКод <> """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор		КАК Идентификатор,
	|		Товары.Ссылка						КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО Товары.Артикул = ЗагружаемыеДанные.ВнешнийАртикул
	|
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнийАртикул <> """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор		КАК Идентификатор,
	|		Товары.Ссылка						КАК Номенклатура
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Товары
	|		ПО Товары.Наименование = ЗагружаемыеДанные.ВнешнееНаименование
	|
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешнееНаименование <> """"
	|	) КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор				КАК Идентификатор,
	|	МАКСИМУМ(СпрНазначения.Ссылка)				КАК Назначение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СпрНазначения.Ссылка)	КАК КоличествоНазначений
	|ПОМЕСТИТЬ ВтДанныеНазначений
	|ИЗ
	|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Назначения КАК СпрНазначения
	|	ПО СпрНазначения.Наименование = ЗагружаемыеДанные.ВнешнееНазначение
	|
	|ГДЕ
	|	ЗагружаемыеДанные.ВнешнееНазначение <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗагружаемыеДанные.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.Идентификатор					КАК Идентификатор,
	|	МАКСИМУМ(Упаковки.Упаковка)				КАК Упаковка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Упаковки.Упаковка)	КАК КоличествоУпаковки
	|ПОМЕСТИТЬ ВтДанныеУпаковок
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Упаковки.Ссылка					КАК Упаковка
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура
	|		И Упаковки.Наименование = ЗагружаемыеДанные.ВнешняяЕдиницаИзмерения
	|
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешняяЕдиницаИзмерения <> """"
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор	КАК Идентификатор,
	|		Упаковки.Ссылка					КАК Упаковка
	|	ИЗ
	|		ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеНоменклатуры КАК ДанныеНоменклатуры
	|		ПО ДанныеНоменклатуры.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
	|		ПО Упаковки.Владелец = ДанныеНоменклатуры.Номенклатура.НаборУпаковок
	|		И Упаковки.Наименование = ЗагружаемыеДанные.ВнешняяЕдиницаИзмерения
	|		
	|	ГДЕ
	|		ЗагружаемыеДанные.ВнешняяЕдиницаИзмерения <> """"
	|
	|	) КАК Упаковки
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор						КАК Идентификатор,
	|	ЗагружаемыеДанные.ВнешнийКод						КАК ВнешнийКод,
	|	ЗагружаемыеДанные.ВнешнийАртикул					КАК ВнешнийАртикул,
	|	ЗагружаемыеДанные.ВнешнееНаименование				КАК ВнешнееНаименование,
	|	ЗагружаемыеДанные.ВнешняяЕдиницаИзмерения			КАК ВнешняяЕдиницаИзмерения,
	|	ЗагружаемыеДанные.ВнешнееНазначение					КАК ВнешнееНазначение,
	|	ЗагружаемыеДанные.ВнешнееКоличество					КАК ВнешнееКоличество,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьУпр				КАК ВнешняяСтоимостьУпр,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьРегл				КАК ВнешняяСтоимостьРегл,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьНУ				КАК ВнешняяСтоимостьНУ,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьПР				КАК ВнешняяСтоимостьПР,
	|	ЗагружаемыеДанные.ВнешняяСтоимостьВР				КАК ВнешняяСтоимостьВР,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0) = 1
	|			ТОГДА Товары.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ												КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0) = 1
	|			ТОГДА ДанныеНазначений.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ												КАК Назначение,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0) = 1
	|			ТОГДА ДанныеУпаковок.Упаковка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|	КОНЕЦ												КАК Упаковка,
	|	ЕСТЬNULL(Товары.КоличествоНоменклатуры, 0)			КАК КоличествоНоменклатуры,
	|	ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0)	КАК КоличествоНазначений,
	|	ЕСТЬNULL(ДанныеУпаковок.КоличествоУпаковки, 0)		КАК КоличествоУпаковки
	|ИЗ
	|	ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеНоменклатуры КАК Товары
	|	ПО Товары.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНазначений КАК ДанныеНазначений
	|	ПО ДанныеНазначений.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеУпаковок КАК ДанныеУпаковок
	|	ПО ДанныеУпаковок.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Остатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.КоличествоНоменклатуры > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Номенклатура";
		КонецЕсли;
		
		Если Выборка.КоличествоНазначений > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Назначение";
		КонецЕсли;
		
		Если Выборка.КоличествоУпаковки > 1 Тогда
			ЗаписьОНеоднозначности					= СписокНеоднозначностей.Добавить();
			ЗаписьОНеоднозначности.Идентификатор	= Выборка.Идентификатор;
			ЗаписьОНеоднозначности.Колонка			= "Упаковка";
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Остатки, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//	ПолноеИмяТабличнойЧасти  - Строка - полное имя табличной части, в которую загружаются данные.
//	СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными
//	ИмяКолонки                - Строка - имя колонки, в который возникает неоднозначность
//	ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//	ДополнительныеПараметры   - Структура - дополнительные параметры, переданные из формы-источнике.
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт 
	
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "Номенклатура" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК СпрНоменклатура
		|ГДЕ
		|	(&ВнешнийКод <> """"
		|		И СпрНоменклатура.Код = &ВнешнийКод)
		|	ИЛИ (&ВнешнееНаименование <> """"
		|		И СпрНоменклатура.Наименование = &ВнешнееНаименование)
		|";
		
		Запрос.УстановитьПараметр("ВнешнийКод",			 ЗагружаемыеЗначенияСтрока.ВнешнийКод);
		Запрос.УстановитьПараметр("ВнешнееНаименование", ЗагружаемыеЗначенияСтрока.ВнешнееНаименование);
		
	ИначеЕсли ИмяКолонки = "Назначение" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СпрНазначения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК СпрНазначения
		|
		|ГДЕ
		|	&ВнешнееНазначение <> """"
		|	И СпрНазначения.Наименование = &ВнешнееНазначение
		|";
		
		Запрос.УстановитьПараметр("ВнешнееНазначение",	ЗагружаемыеЗначенияСтрока.ВнешнееНазначение);
		
	ИначеЕсли ИмяКолонки = "Упаковка" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Упаковки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК Упаковки
		|ГДЕ
		|	&ВнешняяЕдиницаИзмерения <> """"
		|	И Упаковки.Наименование = &ВнешняяЕдиницаИзмерения
		|";
		
		Запрос.УстановитьПараметр("ВнешняяЕдиницаИзмерения", ЗагружаемыеЗначенияСтрока.ВнешняяЕдиницаИзмерения);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ИменаРеквизитов = "Склад,Дата";
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект	 - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта 			  = "Документ.СверкаНачальныхОстатковПоСкладу";
	ПараметрыУказанияСерий.ИмяТЧТовары 					  = "ДанныеВнешнейСистемы";
	ПараметрыУказанияСерий.ИмяТЧСерии 	 				  = "ДанныеВнешнейСистемы";
	ПараметрыУказанияСерий.ИмяПоляКоличество 			  = "ВнешнееКоличество";	
	ПараметрыУказанияСерий.Дата 						  = Объект.Дата;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
	ПараметрыУказанияСерий.ЭтоНакладная 				  = Истина;            
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости 	  = Истина;
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ВводОстатков);
	
	Если СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, , Объект.Дата) Тогда 
			
		ПараметрыУказанияСерий.ИспользоватьАдресноеХранение = Истина;
		ПараметрыУказанияСерий.ПоляСвязи.Добавить("Упаковка");
		
	КонецЕсли;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.ВнешнееКоличество КАК Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата                     КАК Период,
	|	ДанныеДокумента.Номер                    КАК Номер,
	|	ДанныеДокумента.Организация 			 КАК Организация,
	|	ДанныеДокумента.Склад 					 КАК Склад,
	|	ДанныеДокумента.СуммаВВалютеУпр 		 КАК СуммаВВалютеУпр,
	|	ДанныеДокумента.СуммаВключаетНДС 		 КАК СуммаВключаетНДС,
	|	ДанныеДокумента.ИспользоватьНазначения 	 КАК ИспользоватьНазначения,
	|	ДанныеДокумента.КоличествоИзОУ 			 КАК КоличествоИзОУ,
	|	ДанныеДокумента.Ответственный            КАК Ответственный,
	|	ДанныеДокумента.Комментарий              КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления          КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен                 КАК Проведен
	|ИЗ
	|	Документ.СверкаНачальныхОстатковПоСкладу КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого ТекКолонка Из Реквизиты.Владелец().Колонки Цикл
		Запрос.УстановитьПараметр(ТекКолонка.Имя, Реквизиты[ТекКолонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.СверкаНачальныхОстатковПоСкладу"));
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПолейСвязанныхСНоменклатурой

Процедура ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий = Неопределено) Экспорт
	
	Если ПараметрыУказанияСерий = Неопределено Тогда
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СверкаНачальныхОстатковПоСкладу);
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
КонецПроцедуры

Процедура ЗаполнитьАналитикиУчетаНоменклатуры(Объект) Экспорт
	
	Если Объект.РезультатыСверки.Найти(Справочники.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка(), "АналитикаУчетаНоменклатуры") = Неопределено Тогда
		// Все аналитики учета номенклатуры заполнены.
		Возврат;
	КонецЕсли;
	
	Аналитики = Объект.РезультатыСверки.ВыгрузитьКолонку("АналитикаУчетаНоменклатуры");
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
		Перечисления.ХозяйственныеОперации.ОприходованиеТоваров,
		Объект.Склад,
		Неопределено,
		Неопределено);
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(Объект.РезультатыСверки, МестаУчета);
	
	Для НомерСтроки = 0 По Аналитики.Количество() - 1 Цикл
		
		Если ЗначениеЗаполнено(Аналитики[НомерСтроки]) Тогда
			// Заполнение аналитик могло подобрать дубль аналитики - вернем изначальную аналитику.
			Объект.РезультатыСверки[НомерСтроки].АналитикаУчетаНоменклатуры = Аналитики[НомерСтроки];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЗапасов(Объект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.ВидЗапасов КАК ВидЗапасов
	|ПОМЕСТИТЬ ВтИсходнаяТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.ВидЗапасов = ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	ИЛИ &ПерезаполнитьВидыЗапасов
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ТекущийВидЗапасов,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОприходованиеТоваров) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар) КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка) КАК Соглашение,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК ВладелецТовара,
	|	ЗНАЧЕНИЕ(Справочник.ВидыЦенПоставщиков.ПустаяСсылка) КАК ВидЦены
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ВтИсходнаяТаблицаТоваров КАК ТаблицаТоваров
	|;
	|///////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВтИсходнаяТаблицаТоваров";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект.РезультатыСверки.Выгрузить(, "НомерСтроки, Номенклатура, ВидЗапасов"));
	Запрос.УстановитьПараметр("Организация", 	Объект.Организация);
	Запрос.УстановитьПараметр("Проведен", 		Объект.Проведен);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(Объект, Запрос);
	
	Запрос.Выполнить();
	
	ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(Запрос.МенеджерВременныхТаблиц, Объект.РезультатыСверки);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеТаблицыРезультатов

Процедура ЗаполнитьКоличестваВСтрокеТаблицыРезультатов(Объект, НоваяСтрока, ВнешнееКоличество, УчетноеКоличество)
	
	НоваяСтрока.ВнешнееКоличество = ВнешнееКоличество;
	
	НоваяСтрока.КоличествоУпаковок = УчетноеКоличество;
	НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
	
	Если Объект.КоличествоИзОУ Тогда
		НоваяСтрока.КоличествоУпаковокОтклонение = УчетноеКоличество - ВнешнееКоличество;
	Иначе
		НоваяСтрока.КоличествоУпаковокОтклонение = ВнешнееКоличество - УчетноеКоличество;
	КонецЕсли;
	
	НоваяСтрока.КоличествоОтклонение = НоваяСтрока.КоличествоУпаковокОтклонение;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПодчиненныхДокументов

Функция ДанныеДокументаСверки(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Дата КАК Дата,
	|	Т.Организация КАК Организация,
	|	Т.Склад КАК Склад,
	|	Т.СуммаВВалютеУпр КАК СуммаВВалютеУпр,
	|	Т.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	Т.ИспользоватьНазначения КАК ИспользоватьНазначения,
	|	Т.КоличествоИзОУ КАК КоличествоИзОУ
	|ИЗ
	|	Документ.СверкаНачальныхОстатковПоСкладу КАК Т
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.Характеристика КАК Характеристика,
	|	Т.Серия КАК Серия,
	|	ВЫБОР КОГДА Шапка.ИспользоватьНазначения
	|		ТОГДА Т.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ КАК Назначение,
	|	Т.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	Т.ВидЗапасов КАК ВидЗапасов,
	|	Т.НомерГТД КАК НомерГТД,
	|	ЕСТЬNULL(СтавкиНДСНоменклатуры.СтавкаНДС, ЕСТЬNULL(ОсновныеСтавкиНДС.СтавкаНДС,
	|		ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка))) КАК СтавкаНДС,
	|	Т.Упаковка КАК Упаковка,
	|	ВЫБОР КОГДА Шапка.КоличествоИзОУ
	|		ТОГДА Т.КоличествоУпаковок
	|		ИНАЧЕ Т.ВнешнееКоличество
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ВЫБОР КОГДА Шапка.КоличествоИзОУ
	|		ТОГДА Т.Количество
	|		ИНАЧЕ Т.ВнешнееКоличество
	|	КОНЕЦ КАК Количество,
	|	Т.ВнешнееКоличество КАК ВнешнееКоличество,
	|	Т.КоличествоУпаковокОтклонение КАК КоличествоУпаковокОтклонение,
	|	Т.КоличествоОтклонение КАК КоличествоОтклонение,
	|	ВЫБОР КОГДА Шапка.СуммаВВалютеУпр
	|		ТОГДА Т.СтоимостьУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА Шапка.СуммаВВалютеУпр
	|		ТОГДА 0
	|		ИНАЧЕ Т.СтоимостьРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	Т.СтоимостьПР КАК СуммаПР,
	|	Т.СтоимостьВР КАК СуммаВР,
	|	ВЫРАЗИТЬ(Т.КоличествоОтклонение
	|		* ВЫБОР КОГДА Шапка.СуммаВВалютеУпр
	|			ТОГДА Т.СтоимостьУпр
	|			ИНАЧЕ Т.СтоимостьРегл
	|	  	КОНЕЦ
	|		/ ВЫБОР
	|			КОГДА Т.ВнешнееКоличество = 0
	|				ТОГДА Т.Количество
	|			КОГДА Т.Количество = 0
	|				ТОГДА Т.ВнешнееКоличество
	|			КОГДА Т.Количество > Т.ВнешнееКоличество
	|				ТОГДА Т.Количество
	|				ИНАЧЕ Т.ВнешнееКоличество
	|	  	КОНЕЦ
	|	  КАК ЧИСЛО(31,2)) КАК СуммаОтклонение
	|ИЗ
	|	Документ.СверкаНачальныхОстатковПоСкладу.РезультатыСверки КАК Т
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СверкаНачальныхОстатковПоСкладу КАК Шапка
	|	ПО Т.Ссылка = Шапка.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНДСНоменклатуры.СрезПоследних(&Период,
	|			Страна = &СтранаРегистрации ИЛИ Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)) КАК СтавкиНДСНоменклатуры
	|		ПО Т.Номенклатура = СтавкиНДСНоменклатуры.Номенклатура
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеСтавкиНДС.СрезПоследних(&Период, Страна = &СтранаРегистрации) КАК ОсновныеСтавкиНДС
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Т.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия,
	|	Назначение";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.ДокументСверки);
	Запрос.УстановитьПараметр("Период", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДокументСверки, "Дата"));
	Запрос.УстановитьПараметр("СтранаРегистрации", ЗначениеНастроекКлиентСерверПовтИсп.СтранаРегистрацииОрганизации(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.ДокументСверки, "Организация")));
		
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура ЗаполнитьОбщиеРеквизитыШапкиПодчиненныхДокументов(ДанныеЗаполнения, ДанныеШапки, ЗаполняемыйДокумент)
	
	ЗаполняемыйДокумент.Дата		= КонецМесяца(ДанныеШапки.Дата) + ?(ДанныеЗаполнения.ДокументСледующегоПериода, 1, 0);
	ЗаполняемыйДокумент.Организация = ДанныеШапки.Организация;
	ЗаполняемыйДокумент.Склад		= ДанныеШапки.Склад;
	ЗаполняемыйДокумент.Основание	= ДанныеЗаполнения.ДокументСверки;
	ЗаполняемыйДокумент.Комментарий	= СокрЛП(ДанныеЗаполнения.ДокументСверки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
