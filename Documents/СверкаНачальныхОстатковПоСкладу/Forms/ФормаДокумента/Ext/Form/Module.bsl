
#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	// Заполним реквизиты формы, связанные с реквизитами объекта.
	Если НЕ Объект.СуммаВВалютеУпр Тогда
		СпособУказанияСтоимости = 0;
	ИначеЕсли НЕ Объект.СуммаВключаетНДС Тогда
		СпособУказанияСтоимости = 1;
	Иначе
		СпособУказанияСтоимости = 2;
	КонецЕсли;
	
	Если Объект.КоличествоИзОУ Тогда
		ИсточникДанныхОКоличестве = 0;
	Иначе
		ИсточникДанныхОКоличестве = 1;
	КонецЕсли;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СверкаНачальныхОстатковПоСкладу);
	
	ЗаполнитьСлужебныеРеквизиты("ДанныеВнешнейСистемы");
	ЗаполнитьСлужебныеРеквизиты("РезультатыСверки");
	
	ОбновитьЭлементыФормы();
	ОбновитьТекстСформированныеДокументы();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик механизма "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьЗаголовокНомерГТД(Элементы, "РезультатыСверкиНомерГТД");
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(
		ЭтотОбъект,
		ТекущийОбъект,
		ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСлужебныеРеквизиты("ДанныеВнешнейСистемы");
	ЗаполнитьСлужебныеРеквизиты("РезультатыСверки");
	
	ЗаполнитьПараметрыУказанияСерий();
	УстановитьВидимостьЭлементовСерий();
	
	ОбновитьЭлементыФормы();
	ОбновитьТекстСформированныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если НоменклатураКлиент.ЭтоУказаниеСерий(ИсточникВыбора) Тогда
		ТекущиеДанные = Элементы.ДанныеВнешнейСистемы.ДанныеСтроки(ВыбранноеЗначение.ИдентификаторТекущейСтроки);
		НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтаФорма, ПараметрыУказанияСерий, ВыбранноеЗначение, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИсточникДанныхОКоличествеПриИзменении(Элемент)
	
	Если ИсточникДанныхОКоличестве = 0 Тогда
		Объект.КоличествоИзОУ = Истина;
	Иначе
		Объект.КоличествоИзОУ = Ложь;
	КонецЕсли;
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияСтоимостиПриИзменении(Элемент)
	
	Если СпособУказанияСтоимости = 0 Тогда
		
		Объект.СуммаВВалютеУпр  = Ложь;
		Объект.СуммаВключаетНДС = Ложь;
		
	ИначеЕсли СпособУказанияСтоимости = 1 Тогда
		
		Объект.СуммаВВалютеУпр  = Истина;
		Объект.СуммаВключаетНДС = Ложь;
		
	Иначе // 2
		
		Объект.СуммаВВалютеУпр  = Истина;
		Объект.СуммаВключаетНДС = Истина;
		
	КонецЕсли;
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНазначенияПриИзменении(Элемент)
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "e1cib") <> 0 Тогда
		// Стандартно будет открыта навигационная ссылка.
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("Команда", НавигационнаяСсылкаФорматированнойСтроки));
		
		ПоказатьВопрос(
			Оповещение,
			НСтр("ru = 'Необходимо сохранить документ для выполнения операции. Сохранить документ?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Возврат;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.СверкаНачальныхОстатковПоСкладу.Форма.ФормаДокумента.ВыполнитьДействиеНавигационнойСсылки");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ВыполнитьДействиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаСформированныеДокументы Тогда
		
		ОбновитьТекстСформированныеДокументы();
		
		// СтандартныеПодсистемы.Свойства
		Если НЕ ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
			
			СвойстваВыполнитьОтложеннуюИнициализацию();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
			
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеВнешнейСистемы

&НаКлиенте
Процедура ДанныеВнешнейСистемыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если (Поле = Элементы["ДанныеВнешнейСистемыСерия"]
	 ИЛИ Поле = Элементы["ДанныеВнешнейСистемыСтатусУказанияСерий"]) Тогда
		
		ТекущиеДанные = Элементы.ДанныеВнешнейСистемы.ТекущиеДанные;
		
		Если ТекущиеДанные.СтатусУказанияСерий > 0
		 И ТекущиеДанные.СтатусУказанияСерий <= 11 Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьПодборСерий(Поле.ТекстРедактирования);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ДанныеВнешнейСистемы, ЭтотОбъект);
	ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДанныеВнешнейСистемы.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элемент, КэшированныеЗначения, ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
			ПараметрыУказанияСерий,
			ТекущаяСтрокаИдентификатор,
			КэшированныеЗначения);
		
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
			Элемент,
			КэшированныеЗначения,
			ПараметрыУказанияСерий);
		
	КонецЕсли;
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыПриИзменении(Элемент)
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыПередУдалением(Элемент, Отказ)
	
	ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, Ложь);
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеВнешнейСистемы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущиеДанные, ЭтотОбъект, СтруктураДействий, ПараметрыУказанияСерий);
	ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, Объект.Склад, ПараметрыУказанияСерий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДанныеВнешнейСистемы.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить(
		"ХарактеристикаПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы", ЭтотОбъект.ИмяФормы));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыСерияПриИзменении(Элемент)
	
	ВыбранноеЗначение = НоменклатураКлиентСервер.ВыбраннаяСерия();
	
	ВыбранноеЗначение.Значение						= Элементы.ДанныеВнешнейСистемы.ТекущиеДанные.Серия;
	ВыбранноеЗначение.ИдентификаторТекущейСтроки	= Элементы.ДанныеВнешнейСистемы.ТекущиеДанные.ПолучитьИдентификатор();
	
	НоменклатураКлиент.ОбработатьУказаниеСерии(ЭтотОбъект, ПараметрыУказанияСерий, ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеВнешнейСистемыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, Элементы.ДанныеВнешнейСистемы.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыРезультатыСверки

&НаКлиенте
Процедура РезультатыСверкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ Поле.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РезультатыСверки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Сред(Поле.Имя, СтрДлина("РезультатыСверки") + 1);
	ЗначениеРеквизита = ТекущиеДанные[ИмяРеквизита];
	
	Если ТипЗнч(ЗначениеРеквизита) <> Тип("Булево")
	 И ТипЗнч(ЗначениеРеквизита) <> Тип("Дата")
	 И ТипЗнч(ЗначениеРеквизита) <> Тип("Число")
	 И ТипЗнч(ЗначениеРеквизита) <> Тип("Строка")
	 И ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		
		ПоказатьЗначение(, ЗначениеРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


#Область КомандыОбъекта

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СопоставитьНоменклатуру(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.СверкаНачальныхОстатковПоСкладу.Форма.ФормаДокумента.СопоставитьНоменклатуру");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	СопоставитьНоменклатуруНаСервере();
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезультаты(Команда)
	
	// СтандартныеПодсистемы.ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.СверкаНачальныхОстатковПоСкладу.Форма.ФормаДокумента.ЗаполнитьРезультаты");
	// Конец СтандартныеПодсистемы.ЗамерПроизводительности
	
	ЗаполнитьРезультатыНаСервере();
	
КонецПроцедуры

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда,
												НавигационнаяСсылка = Неопределено,
												СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Не Объект.ДанныеВнешнейСистемы.Количество() = 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ПоказатьФормуЗагрузкиИзФайла();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьФормуЗагрузкиИзФайла();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(
		Команда,
		ЭтотОбъект,
		Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СобытияФормы

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	// Заполним реквизиты формы, связанные с реквизитами объекта.
	Если НЕ Объект.СуммаВВалютеУпр Тогда
		СпособУказанияСтоимости = 0;
	ИначеЕсли НЕ Объект.СуммаВключаетНДС Тогда
		СпособУказанияСтоимости = 1;
	Иначе
		СпособУказанияСтоимости = 2;
	КонецЕсли;
	
	Если Объект.КоличествоИзОУ Тогда
		ИсточникДанныхОКоличестве = 0;
	Иначе
		ИсточникДанныхОКоличестве = 1;
	КонецЕсли;
	
	ЗаполнитьСлужебныеРеквизиты("ДанныеВнешнейСистемы");
	ЗаполнитьСлужебныеРеквизиты("РезультатыСверки");
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СверкаНачальныхОстатковПоСкладу);
	
	ЗаполнитьПараметрыУказанияСерий();
	ЗаполнитьСтатусыУказанияСерийСервер();
	УстановитьВидимостьЭлементовСерий();
	
	ОбновитьЭлементыФормы();
	ОбновитьТекстСформированныеДокументы();
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		"ДанныеВнешнейСистемыХарактеристика",
		"Объект.ДанныеВнешнейСистемы.ХарактеристикиИспользуются");
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект,
		"РезультатыСверкиХарактеристика",
		"Объект.РезультатыСверки.ХарактеристикиИспользуются");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"СерииВсегдаВТЧТовары",
		"ДанныеВнешнейСистемыСерия",
		"Объект.ДанныеВнешнейСистемы.СтатусУказанияСерий",
		"Объект.ДанныеВнешнейСистемы.ТипНоменклатуры");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеСтатусовУказанияСерий(
		ЭтотОбъект,
		Ложь,
		"ДанныеВнешнейСистемыСтатусУказанияСерий",
		"Объект.ДанныеВнешнейСистемы.СтатусУказанияСерий");
	
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения(Истина, Истина);
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "ДанныеВнешнейСистемыНоменклатураЕдиницаИзмерения";
	ПараметрыУсловногоОформления.ПутьКПолюУпаковка = "Объект.ДанныеВнешнейСистемы.Упаковка";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект, ПараметрыУсловногоОформления);
	
	ПараметрыУсловногоОформления = НоменклатураСервер.ПараметрыУстановкиУсловногоОформленияНомераГТД();
	ПараметрыУсловногоОформления.ИмяПоляВводаНомераГТД		= "РезультатыСверкиНомерГТД";
	ПараметрыУсловногоОформления.ПутьКПолюВедетсяУчетПоГТД	= "Объект.РезультатыСверки.ВедетсяУчетПоГТД";
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтотОбъект, ПараметрыУсловногоОформления);
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтотОбъект,
		"ДанныеВнешнейСистемыНазначение",
		"Объект.ДанныеВнешнейСистемы.ТипНоменклатуры");
	НоменклатураСервер.УстановитьУсловноеОформлениеНазначенияНоменклатуры(ЭтотОбъект,
		"РезультатыСверкиНазначение",
		"Объект.РезультатыСверки.ТипНоменклатуры");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыФормы()
	
	МетаДокумент = Метаданные.Документы.СверкаНачальныхОстатковПоСкладу;
	
	Если Объект.КоличествоИзОУ Тогда
		Элементы.РезультатыСверкиКоличествоУпаковок.Заголовок = НСтр("ru='Начальное количество'");
		Элементы.РезультатыСверкиВнешнееКоличество.Заголовок  = МетаДокумент.ТабличныеЧасти.РезультатыСверки.Реквизиты.ВнешнееКоличество.Синоним;
	Иначе
		Элементы.РезультатыСверкиВнешнееКоличество.Заголовок  = НСтр("ru='Начальное количество'");
		Элементы.РезультатыСверкиКоличествоУпаковок.Заголовок = МетаДокумент.ТабличныеЧасти.РезультатыСверки.Реквизиты.КоличествоУпаковок.Синоним;
	КонецЕсли;
	
	Элементы.ДанныеВнешнейСистемыВнешняяСтоимостьУпр.Видимость  = Объект.СуммаВВалютеУпр;
	Элементы.ДанныеВнешнейСистемыВнешняяСтоимостьРегл.Видимость = НЕ Объект.СуммаВВалютеУпр;
	Элементы.ДанныеВнешнейСистемыВнешняяСтоимостьНУ.Видимость   = НЕ Объект.СуммаВВалютеУпр;
	Элементы.ДанныеВнешнейСистемыВнешняяСтоимостьПР.Видимость   = НЕ Объект.СуммаВВалютеУпр;
	Элементы.ДанныеВнешнейСистемыВнешняяСтоимостьВР.Видимость   = НЕ Объект.СуммаВВалютеУпр;
	
	Элементы.РезультатыСверкиСтоимостьУпр.Видимость  = Объект.СуммаВВалютеУпр;
	Элементы.РезультатыСверкиСтоимостьРегл.Видимость = НЕ Объект.СуммаВВалютеУпр;
	Элементы.РезультатыСверкиСтоимостьНУ.Видимость   = НЕ Объект.СуммаВВалютеУпр;
	Элементы.РезультатыСверкиСтоимостьПР.Видимость   = НЕ Объект.СуммаВВалютеУпр;
	Элементы.РезультатыСверкиСтоимостьВР.Видимость   = НЕ Объект.СуммаВВалютеУпр;
	
	Элементы.ДанныеВнешнейСистемыВнешнееНазначение.Видимость = Объект.ИспользоватьНазначения;
	Элементы.ДанныеВнешнейСистемыНазначение.Видимость 		 = Объект.ИспользоватьНазначения;
	Элементы.РезультатыСверкиНазначение.Видимость 			 = Объект.ИспользоватьНазначения;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеРеквизитыТабличныхЧастей

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизиты(ИмяТЧ)
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипИзмеряемойВеличины",
		Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	
	Если ИмяТЧ = "РезультатыСверки" Тогда
		ПараметрыЗаполненияРеквизитов.Вставить(
			"ЗаполнитьПризнакВедетсяУчетПоГТД",
			Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект[ИмяТЧ], ПараметрыЗаполненияРеквизитов);
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы[ИмяТЧ]);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеТекстаСформированныеДокументы

&НаСервере
Процедура ОбновитьТекстСформированныеДокументы()
	
	Если НЕ Объект.Проведен Тогда
		ТекстДокументы = Новый ФорматированнаяСтрока(НСтр("ru='Для отражения результатов сверки в учете документ сверки должен быть проведен.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	
	Если Объект.ТребуетсяПерезаполнитьРезультаты Тогда
		СтруктураДокументы = Неопределено;
	Иначе
		СтруктураДокументы = ПроверитьНеобходимостьФормированияПодчиненныхДокументов();
	КонецЕсли;
	
	Если Объект.ТребуетсяПерезаполнитьРезультаты Тогда
		
		ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Необходимо обновить результаты сверки и сформировать (обновить) документы корректировки остатков'"),
			"ОбновитьРезультатыИСформироватьДокументы");
		
	ИначеЕсли НЕ СтруктураДокументы.ВводОстатковСебестоимости.ТребуетсяДокумент
	 И НЕ СтруктураДокументы.ВводОстатковКоличества.ТребуетсяДокумент
	 И НЕ СтруктураДокументы.ОприходованиеПосле.ТребуетсяДокумент
	 И НЕ СтруктураДокументы.СписаниеПосле.ТребуетсяДокумент Тогда
		
		ДобавитьТекстИнформацияСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Нет данных для формирования документов'"));
	
	// ВводОстатковСебестоимости
	ИначеЕсли (СтруктураДокументы.ВводОстатковСебестоимости.ТребуетсяДокумент И СтруктураДокументы.ВводОстатковСебестоимости.КоличествоДокументов = 0)
	 ИЛИ (НЕ СтруктураДокументы.ВводОстатковСебестоимости.ТребуетсяДокумент И СтруктураДокументы.ВводОстатковСебестоимости.КоличествоДокументов > 0)
	 // ВводОстатковКоличества
	 ИЛИ (СтруктураДокументы.ВводОстатковКоличества.ТребуетсяДокумент И СтруктураДокументы.ВводОстатковКоличества.КоличествоДокументов = 0)
	 ИЛИ (НЕ СтруктураДокументы.ВводОстатковКоличества.ТребуетсяДокумент И СтруктураДокументы.ВводОстатковКоличества.КоличествоДокументов <> 0)
	 // ОприходованиеПосле
	 ИЛИ (СтруктураДокументы.ОприходованиеПосле.ТребуетсяДокумент И СтруктураДокументы.ОприходованиеПосле.КоличествоДокументов = 0)
	 ИЛИ (НЕ СтруктураДокументы.ОприходованиеПосле.ТребуетсяДокумент И СтруктураДокументы.ОприходованиеПосле.КоличествоДокументов <> 0)
	 // СписаниеПосле
	 ИЛИ (СтруктураДокументы.СписаниеПосле.ТребуетсяДокумент И СтруктураДокументы.СписаниеПосле.КоличествоДокументов = 0)
	 ИЛИ (НЕ СтруктураДокументы.СписаниеПосле.ТребуетсяДокумент И СтруктураДокументы.СписаниеПосле.КоличествоДокументов <> 0) Тогда
		
		ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Необходимо сформировать (обновить) документы корректировки остатков'"),
			"ПакетноеФормированиеДокументов");
		
	Иначе
		
		ДобавитьЗаголовокТекстаСформированныеДокументы(МассивСтрок, НСтр("ru='Документ ввода остатков'"));
		
		Если НЕ СтруктураДокументы.ВводОстатковСебестоимости.ТребуетсяДокумент
		 И НЕ СтруктураДокументы.ВводОстатковКоличества.ТребуетсяДокумент Тогда
			
			ДобавитьТекстИнформацияСформированныеДокументы(
				МассивСтрок,
				НСтр("ru='Не требуются'"));
			
		Иначе
			
			ДобавитьРазделТекстаСформированныеДокументы(
				МассивСтрок,
				СтруктураДокументы,
				"ВводОстатковСебестоимости",
				НСтр("ru='документ ввода остатков по себестоимости'"),
				Истина);
			
			ДобавитьРазделТекстаСформированныеДокументы(
				МассивСтрок,
				СтруктураДокументы,
				"ВводОстатковКоличества",
				НСтр("ru='документ корректировки остатков по количеству'"));
			
		КонецЕсли;
		
		ДобавитьЗаголовокТекстаСформированныеДокументы(МассивСтрок, НСтр("ru='Документы оприходования излишков товаров'"));
		
	 	Если НЕ СтруктураДокументы.ОприходованиеПосле.ТребуетсяДокумент Тогда
			
			ДобавитьТекстИнформацияСформированныеДокументы(
				МассивСтрок,
				НСтр("ru='Не требуются'"));
			
	 	Иначе
			
			ДобавитьРазделТекстаСформированныеДокументы(
				МассивСтрок,
				СтруктураДокументы,
				"ОприходованиеПосле",
				НСтр("ru='документ оприходования'"));
			
	 	КонецЕсли;
		
		ДобавитьЗаголовокТекстаСформированныеДокументы(МассивСтрок, НСтр("ru='Документы списания недостач товаров'"));
		
	 	Если НЕ СтруктураДокументы.СписаниеПосле.ТребуетсяДокумент Тогда
			
			ДобавитьТекстИнформацияСформированныеДокументы(
				МассивСтрок,
				НСтр("ru='Не требуются'"));
			
	 	Иначе
			
			ДобавитьРазделТекстаСформированныеДокументы(
				МассивСтрок,
				СтруктураДокументы,
				"СписаниеПосле",
				НСтр("ru='документ списания'"));
			
		КонецЕсли;
		
		// Общие действия над документами.
		МассивСтрок.Добавить(Символы.ПС);
		
		ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Обновить список сформированных документов'"),
			"ОбновитьИнформацию");
		
		ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Перезаполнить все сформированные документы'"),
			"ПакетноеФормированиеДокументов");
			
	КонецЕсли;
	
	ТекстДокументы = Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНеобходимостьФормированияПодчиненныхДокументов()
	
	СтруктураДокументы = Новый Структура;
	СтруктураДокументы.Вставить("ВводОстатковСебестоимости", ОписаниеПодчиненногоДокумента());
	СтруктураДокументы.Вставить("ВводОстатковКоличества",    ОписаниеПодчиненногоДокумента());
	СтруктураДокументы.Вставить("ОприходованиеПосле", 		 ОписаниеПодчиненногоДокумента());
	СтруктураДокументы.Вставить("СписаниеПосле", 	  		 ОписаниеПодчиненногоДокумента());
	
	// Заполним свойство "ТребуетсяДокумент".
	СтруктураДокументы.ВводОстатковСебестоимости.ТребуетсяДокумент = (Объект.РезультатыСверки.Количество() > 0);
	
	Для Каждого ТекСтр Из Объект.РезультатыСверки Цикл
		
		Если ТекСтр.КоличествоОтклонение <> 0 Тогда
			СтруктураДокументы.ВводОстатковКоличества.ТребуетсяДокумент = Истина;
		КонецЕсли;
		
		Если Объект.КоличествоИзОУ Тогда
			
			Если ТекСтр.КоличествоОтклонение > 0 Тогда
				СтруктураДокументы.ОприходованиеПосле.ТребуетсяДокумент = Истина;
			ИначеЕсли ТекСтр.КоличествоОтклонение < 0 Тогда
				СтруктураДокументы.СписаниеПосле.ТребуетсяДокумент = Истина;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	""ВводОстатковСебестоимости"" КАК ТипДокумента,
	|	Т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводОстатковТоваров КАК Т
	|ГДЕ
	|	Т.Основание = &Ссылка
	|	И Т.Проведен
	|	И НЕ Т.ОтражатьВОперативномУчете
	|	И Т.ОтражатьСебестоимость
	|	И НАЧАЛОПЕРИОДА(Т.Дата, МЕСЯЦ) = &ПериодДо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ВводОстатковКоличества"",
	|	Т.Ссылка
	|ИЗ
	|	Документ.ВводОстатковТоваров КАК Т
	|ГДЕ
	|	Т.Основание = &Ссылка
	|	И Т.Проведен
	|	И Т.ОтражатьВОперативномУчете
	|	И НЕ Т.ОтражатьСебестоимость
	|	И НАЧАЛОПЕРИОДА(Т.Дата, МЕСЯЦ) = &ПериодДо
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ОприходованиеПосле"",
	|	Т.Ссылка
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК Т
	|ГДЕ
	|	Т.Основание = &Ссылка
	|	И Т.Проведен
	|	И НАЧАЛОПЕРИОДА(Т.Дата, МЕСЯЦ) = &ПериодПосле
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""СписаниеПосле"",
	|	Т.Ссылка
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК Т
	|ГДЕ
	|	Т.Основание = &Ссылка
	|	И Т.Проведен
	|	И НАЧАЛОПЕРИОДА(Т.Дата, МЕСЯЦ) = &ПериодПосле
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипДокумента,
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", 	 Объект.Ссылка);
	Запрос.УстановитьПараметр("ПериодДо", 	 НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ПериодПосле", КонецМесяца(Объект.Дата) + 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивДокументов = СтруктураДокументы[Выборка.ТипДокумента].МассивДокументов; // Массив
		МассивДокументов.Добавить(Выборка.Ссылка);
		СтруктураДокументы[Выборка.ТипДокумента].КоличествоДокументов = СтруктураДокументы[Выборка.ТипДокумента].КоличествоДокументов + 1;
	КонецЦикла;
	
	Возврат СтруктураДокументы;
	
КонецФункции

&НаСервере
Функция ОписаниеПодчиненногоДокумента()
	
	Описание = Новый Структура;
	Описание.Вставить("ТребуетсяДокумент", Ложь);
	Описание.Вставить("МассивДокументов", Новый Массив);
	Описание.Вставить("КоличествоДокументов", 0);
	
	Возврат Описание;
	
КонецФункции


&НаСервере
Процедура ДобавитьРазделТекстаСформированныеДокументы(МассивСтрок, СтруктураДокументы, ТипДокумента, ЗаголовокДокумента, ДобавлятьТекстНеТребуется = Ложь)
	
	Если НЕ СтруктураДокументы[ТипДокумента].ТребуетсяДокумент Тогда
		
		Если ДобавлятьТекстНеТребуется Тогда
			ДобавитьТекстНеТребуетсяСформированныеДокументы(МассивСтрок, ЗаголовокДокумента);
		КонецЕсли;
		
	ИначеЕсли СтруктураДокументы[ТипДокумента].КоличествоДокументов = 0 Тогда
		
		ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Создать'") + " " + ЗаголовокДокумента,
			"Создать" + ТипДокумента);
		
	ИначеЕсли СтруктураДокументы[ТипДокумента].КоличествоДокументов = 1 Тогда
		
		ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(
			МассивСтрок,
			СтруктураДокументы[ТипДокумента].МассивДокументов[0]);
		
	Иначе
		
		ДобавитьТекстОшибкиСформированныеДокументы(
			МассивСтрок,
			НСтр("ru='Ошибка: найдено несколько подчиненных документов'")
				+ " (" + СокрЛП(СтруктураДокументы[ТипДокумента].КоличествоДокументов) + ")");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаголовокТекстаСформированныеДокументы(МассивСтрок, Заголовок)
	
	Если МассивСтрок.Количество() > 0 Тогда
		МассивСтрок.Добавить(Символы.ПС);
	КонецЕсли;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(Заголовок + ":", Новый Шрифт(Элементы.ТекстДокументы.Шрифт,,, Истина)));
	МассивСтрок.Добавить(Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГиперссылкуДокументаТекстаСформированныеДокументы(МассивСтрок, Заголовок, Команда = Неопределено)
	
	Если Команда = Неопределено Тогда
		Команда = ПолучитьНавигационнуюСсылку(Заголовок);
	КонецЕсли;
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СокрЛП(Заголовок),,,, Команда));
	МассивСтрок.Добавить(Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстОшибкиСформированныеДокументы(МассивСтрок, Заголовок)
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СокрЛП(Заголовок),, WebЦвета.Красный));
	МассивСтрок.Добавить(Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстНеТребуетсяСформированныеДокументы(МассивСтрок, ЗаголовокДокумента)
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='Формировать'") + " " + ЗаголовокДокумента + " " + НСтр("ru='не требуется'")));
	МассивСтрок.Добавить(Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстИнформацияСформированныеДокументы(МассивСтрок, ТекстНадписи)
	
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстНадписи));
	МассивСтрок.Добавить(Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаГиперссылокТекстаСформированныеДокументы

&НаКлиенте
Процедура ОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			
			// СтандартныеПодсистемы.ЗамерПроизводительности
			ОценкаПроизводительностиКлиент.ЗамерВремени(
				"Документ.СверкаНачальныхОстатковПоСкладу.Форма.ФормаДокумента.ВыполнитьДействиеНавигационнойСсылки");
			// Конец СтандартныеПодсистемы.ЗамерПроизводительности
			
			ВыполнитьДействиеНавигационнойСсылки(ДополнительныеПараметры.Команда);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействиеНавигационнойСсылки(Команда)
	
	Если Команда = "ОбновитьИнформацию" Тогда
		ОбновитьТекстСформированныеДокументы();
		Возврат;
	КонецЕсли;
	
	Если Команда = "ОбновитьРезультатыИСформироватьДокументы" Тогда
		
		ЗаполнитьРезультатыНаСервере();
		
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьВсе = Команда = "ПакетноеФормированиеДокументов" ИЛИ Команда = "ОбновитьРезультатыИСформироватьДокументы";
	
	СтруктураДокументы = ПроверитьНеобходимостьФормированияПодчиненныхДокументов();
	
	СтараяНастройка = ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций;
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = Истина;
	
	Если Команда = "Создать" + "ВводОстатковСебестоимости" ИЛИ ОбновитьВсе Тогда
		СоздатьПодчиненныйДокумент(СтруктураДокументы, "ВводОстатковСебестоимости", Документы.ВводОстатковТоваров);
	КонецЕсли;
	
	Если Команда = "Создать" + "ВводОстатковКоличества" ИЛИ ОбновитьВсе Тогда
		СоздатьПодчиненныйДокумент(СтруктураДокументы, "ВводОстатковКоличества", Документы.ВводОстатковТоваров);
	КонецЕсли;
	
	Если Команда = "Создать" + "ОприходованиеПосле" ИЛИ ОбновитьВсе Тогда
		СоздатьПодчиненныйДокумент(СтруктураДокументы, "ОприходованиеПосле", Документы.ОприходованиеИзлишковТоваров);
	КонецЕсли;
	
	Если Команда = "Создать" + "СписаниеПосле" ИЛИ ОбновитьВсе Тогда
		СоздатьПодчиненныйДокумент(СтруктураДокументы, "СписаниеПосле", Документы.СписаниеНедостачТоваров);
	КонецЕсли;
	
	ПараметрыСеанса.ПроводитьБезКонтроляОстатковТоваровОрганизаций = СтараяНастройка;
	
	ОбновитьТекстСформированныеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПодчиненныйДокумент(СтруктураДокументы, ТипДокумента, МенеджерДокумента)
	
	СсылкаНаДокумент = Неопределено;
	
	Если НЕ СтруктураДокументы[ТипДокумента].ТребуетсяДокумент И СтруктураДокументы[ТипДокумента].КоличествоДокументов > 0 Тогда
		
		Для Индекс = 0 По СтруктураДокументы[ТипДокумента].КоличествоДокументов - 1 Цикл
			УдалитьПодчиненныйДокумент(СтруктураДокументы[ТипДокумента].МассивДокументов[Индекс]);
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли СтруктураДокументы[ТипДокумента].ТребуетсяДокумент Тогда
		
		Для Индекс = 1 По СтруктураДокументы[ТипДокумента].КоличествоДокументов - 1 Цикл
			УдалитьПодчиненныйДокумент(СтруктураДокументы[ТипДокумента].МассивДокументов[Индекс]);
		КонецЦикла;
		
		Если СтруктураДокументы[ТипДокумента].КоличествоДокументов > 0 Тогда
			СсылкаНаДокумент = СтруктураДокументы[ТипДокумента].МассивДокументов[0];
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ДокументСверки", 		   Объект.Ссылка);
	ДанныеЗаполнения.Вставить("ДокументСледующегоПериода", СтрЗаканчиваетсяНа(ТипДокумента, "После"));
	ДанныеЗаполнения.Вставить("ВводОстатковСебестоимости", ТипДокумента = "ВводОстатковСебестоимости");
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
		ПодчиненныйДокумент = МенеджерДокумента.СоздатьДокумент();
	Иначе
		ПодчиненныйДокумент = СсылкаНаДокумент.ПолучитьОбъект();
	КонецЕсли;
	
	ПодчиненныйДокумент.ПометкаУдаления = Ложь;
	ПодчиненныйДокумент.Заполнить(ДанныеЗаполнения);
	ПодчиненныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПодчиненныйДокумент(СсылкаНаДокумент)
	
	ПодчиненныйДокумент = СсылкаНаДокумент.ПолучитьОбъект();
	ПодчиненныйДокумент.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СерверныеОбработчикиКоманд

&НаСервере
Процедура СопоставитьНоменклатуруНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Документы.СверкаНачальныхОстатковПоСкладу.СопоставитьНоменклатуруВнешнейСистемы(ДокОбъект);
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты("ДанныеВнешнейСистемы");
	ЗаполнитьСлужебныеРеквизиты("РезультатыСверки");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыНаСервере()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Документы.СверкаНачальныхОстатковПоСкладу.ЗаполнитьТаблицуРезультатов(ДокОбъект);
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизиты("ДанныеВнешнейСистемы");
	ЗаполнитьСлужебныеРеквизиты("РезультатыСверки");
	
	ОбновитьЭлементыФормы();
	
КонецПроцедуры

#КонецОбласти

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	НуженСерверныйВызов =
		НоменклатураКлиент.ДляУказанияСерийНуженСерверныйВызов(
			ЭтотОбъект,
			ПараметрыУказанияСерий,
			Текст,
			ТекущиеДанные);
	
	Если НуженСерверныйВызов Тогда
		
		Если ТекущиеДанные = Неопределено Тогда
			ТекущиеДанныеИдентификатор = Элементы.ДанныеВнешнейСистемы.ТекущиеДанные.ПолучитьИдентификатор();
		Иначе
			ТекущиеДанныеИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонецЕсли;
		
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		ДополнительныеПараметры =
			Новый Структура(
				"ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий",
				ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПодборСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму(
			ПараметрыФормыУказанияСерий.ИмяФормы,
			ПараметрыФормыУказанияСерий,
			ЭтотОбъект,,,,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если РезультатЗакрытия <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(
			ДополнительныеПараметры.ПараметрыУказанияСерий,
			ДополнительныеПараметры.ПараметрыФормыУказанияСерий);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПараметрыФормыУказанияСерий(
		Объект,
		ПараметрыУказанияСерий,
		ТекущиеДанныеИдентификатор,
		ЭтотОбъект);
	
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(Знач ПараметрыУказанияСерий, Знач ПараметрыФормыУказанияСерий)
	
	СтруктураДействий = Неопределено;
	НоменклатураСервер.ОбработатьУказаниеСерий(
		Объект,
		ПараметрыУказанияСерий,
		ПараметрыФормыУказанияСерий,
		СтруктураДействий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыУказанияСерий()
	
	ПараметрыУказанияСерий =
		Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Документы.СверкаНачальныхОстатковПоСкладу));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	
	Элементы.ДанныеВнешнейСистемыСерия.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ДанныеВнешнейСистемыСтатусУказанияСерий.Видимость =
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент, КэшированныеЗначения, Копирование)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ПараметрыУказанияСерий,
		Копирование);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер(СтрокиТоваровДляОбработки = Неопределено,
											СтрокиСерийДляОбработки = Неопределено)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(
		Объект,
		ПараметрыУказанияСерий,
		СтрокиТоваровДляОбработки,
		СтрокиСерийДляОбработки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Знач ПараметрыУказанияСерий,
																			ТекущаяСтрокаИдентификатор,
																			КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(
		Объект,
		ПараметрыУказанияСерий,
		ТекущаяСтрокаИдентификатор,
		КэшированныеЗначения);
	
КонецПроцедуры

#КонецОбласти

#Область СтруктураДействий

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииНоменклатуры(ТекущаяСтрока, Форма, СтруктураДействий, ПараметрыУказанияСерий)

	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",
		Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый",
		Новый Структура("ИмяФормы", Форма.ИмяФормы));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипИзмеряемойВеличины",
		Новый Структура("Номенклатура", "ТипИзмеряемойВеличины"));
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус",
		Новый Структура("Склад, ПараметрыУказанияСерий", Форма.Объект.Склад, ПараметрыУказанияСерий));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПоСериям(СтруктураДействий, Склад, ПараметрыУказанияСерий)
	
	ПараметрыПроверкиСерий = Новый Структура("Склад, ПараметрыУказанияСерий", Склад, ПараметрыУказанияСерий);
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПараметрыПроверкиСерий);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#Область ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайла()
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СверкаНачальныхОстатковПоСкладу.ДанныеВнешнейСистемы";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка начальных остатков по складу из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьФормуЗагрузкиИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьФормуЗагрузкиИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	Объект.ДанныеВнешнейСистемы.Загрузить(ЗагруженныеДанные);
	
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	Объект.ТребуетсяПерезаполнитьРезультаты = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
