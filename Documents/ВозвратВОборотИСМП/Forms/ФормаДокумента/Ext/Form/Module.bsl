#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ИнтеграцияИСМП.ЗапрещеноИспользованиеОбъектаВИСМП(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеВозвратВОборотИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Ложь, Истина, Ложь);
	
	НастроитьДоступныеВидыПродукции(ДоступныеВидыПродукцииИС);
	
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(
		ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки"
		И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияОбновитьКэшМаркируемойПродукции(
		ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр = ЭтотОбъект Тогда
		
		ОбновитьКэшМаркируемойПродукции();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан()
		Или РедактированиеФормыНедоступно
		Или Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеОбщегоНазначенияИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьПредставленияНаФорме();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	ЗаполнитьПредставлениеСертификацииИПервичногоДокумента();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСМПКлиент.ОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Возврат в оборот ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Возврат в оборот ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент, ПерезаполнитьПоОснованию = Ложь)
	
	Если ПерезаполнитьПоОснованию Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидПродукции");
	
	СобытияФормИСМПКлиент.ВидПродукцииПриИзменении(ЭтотОбъект, Элемент);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацияПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	Если Объект.Операция = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи") Тогда
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.ВидДокументаСертификации   = Неопределено;
			СтрокаТовары.НомерДокументаСертификации = Неопределено;
			СтрокаТовары.ДатаДокументаСертификации  = Неопределено;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеПервичногоДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияДанныхПервичногоДокумента(ИдентификаторыСтрок);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда
	
		ТекущиеДанные.ВидДокументаСертификации   = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации = "";
		ТекущиеДанные.ДатаДокументаСертификации  = '00010101';

		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредставлениеПервичногоДокументаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ПредставлениеПервичногоДокумента) Тогда
	
		ТекущиеДанные.ВидПервичногоДокумента          = ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ПустаяСсылка");
		ТекущиеДанные.НомерПервичногоДокумента        = "";
		ТекущиеДанные.НаименованиеПервичногоДокумента = "";
		ТекущиеДанные.ДатаПервичногоДокумента         = Дата(1,1,1);
		ТекущиеДанные.Оплачен                         = Ложь;
		ТекущиеДанные.ПервичныйДокумент               = Неопределено;
		Возврат;
	КонецЕсли;
	
	СтрокаКэша = КэшПервичныхДокументов[Число(ТекущиеДанные.ПредставлениеПервичногоДокумента)];
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СтрокаКэша);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, Неопределено);
	
	ОбновитьКэшМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка, "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОбновитьКэшМаркируемойПродукции();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМаркаПриИзменении(Элемент)
	
	ТоварыМаркаПриИзмененииНаСервере(Элементы.Товары.ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВозвратВОборотИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ВозвратВОборотИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ВозвратВОборотИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПервичныеДокументы(Команда)
	
	ОткрытьФормуРедактированияДанныхПервичногоДокумента(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		Ложь,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКэшМаркируемойПродукции()
	
	ОбновитьКэшМаркируемойПродукцииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшМаркируемойПродукцииСервер()
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПредставлениеПервичногоДокумента.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеПервичногоДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	СписокОпераций = Новый СписокЗначений;
	СписокОпераций.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации);
	СписокОпераций.Добавить(Перечисления.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОпераций;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыПослеУдаленияСервер()

	ОбновитьКэшМаркируемойПродукцииСервер();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания() Экспорт
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр(
			"МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиВозвратаВОборотИСМП.Черновик
		И СтатусИСМП <> Перечисления.СтатусыОбработкиВозвратаВОборотИСМП.ОшибкаПередачи;
	
	Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = РедактированиеФормыНеДоступно;
	Элементы.СтраницаТовары.ТолькоПросмотр                                      = РедактированиеФормыНеДоступно;
	Элементы.ТоварыПодменюЗаполнить.Доступность                                 = Не РедактированиеФормыНеДоступно;
	Элементы.ПоискПоШтрихкоду.Доступность                                       = Не РедактированиеФормыНеДоступно;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыМаркаПриИзмененииНаСервере(ИдентификаторСтрокиТовары)
	
	ЭлементТабличнойЧасти = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтрокиТовары);
	
	Реквизиты = Новый Структура("Номенклатура,Характеристика,Серия");
	Если ЗначениеЗаполнено(ЭлементТабличнойЧасти.КодМаркировки) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементТабличнойЧасти.КодМаркировки, "Номенклатура,Характеристика,Серия");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭлементТабличнойЧасти, Реквизиты);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ШтрихкодированиеОбщегоНазначенияИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ВозвратВОборотИСМП);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ОбновитьПредставленияНаФорме();
	
	ЗаполнитьПредставлениеСертификацииИПервичногоДокумента();
	СоздатьКэшСертификацииСервер();
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ВозвратВОборотИСМП);
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		ПроверкаИПодборПродукцииИС.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект, Ложь);
		ПодключенаОбработкаКодовМаркировки = Истина;
	Иначе
		ПерезаполнитьДанныеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДоступныеВидыПродукции(ДоступныеВидыПродукцииИС)
	
	ВГраница = ДоступныеВидыПродукцииИС.ВГраница();
	Для Счетчик = 0 По ВГраница Цикл
		Индекс = ВГраница - Счетчик;
		Если Не ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитВозвратуВОборот(ДоступныеВидыПродукцииИС[Индекс]) Тогда
			ДоступныеВидыПродукцииИС.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Сертификация

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок)
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		МассивСтрок = ИдентификаторыСтрок;
	Иначе
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(ИдентификаторыСтрок);
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидСертификации",
		ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка"));
	ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
	ПараметрыОткрытия.Вставить("НомерСертификации", "");
	
	Если МассивСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(МассивСтрок[0]);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидСертификации",   ВыбраннаяСтрока.ВидДокументаСертификации);
		ПараметрыОткрытия.Вставить("ДатаСертификации",  ВыбраннаяСтрока.ДатаДокументаСертификации);
		ПараметрыОткрытия.Вставить("НомерСертификации", ВыбраннаяСтрока.НомерДокументаСертификации);
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", МассивСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации)
	
	ШаблонПредставлениеСертификата = "%1 №%2 от %3";
	
	ПредставлениеСертификата = "";
	Если ЗначениеЗаполнено(ВидСертификации)
		И ЗначениеЗаполнено(НомерСертификации)
		И ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		ПредставлениеСертификата = СтрШаблон(ШаблонПредставлениеСертификата,
			ВидСертификации, НомерСертификации, Формат(ДатаСертификации, "ДФ=dd.MM.yyyy"));
		
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

&НаСервере
Процедура СоздатьКэшСертификацииСервер()
	
	СписокНоменклатуры = Новый Массив;
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СтрокаТовары.Сертификация = ПредставлениеСертификации(СтрокаТовары.ВидДокументаСертификации,
			СтрокаТовары.НомерДокументаСертификации, СтрокаТовары.ДатаДокументаСертификации);
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
	КонецЦикла;
	
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКэшСертификацииКлиентСервер(Форма, ВидСертификации, НомерСертификации, ДатаСертификации, Номенклатура = Неопределено)
	
	Если Не ЗначениеЗаполнено(ВидСертификации)
		И Не ЗначениеЗаполнено(НомерСертификации)
		И Не ЗначениеЗаполнено(ДатаСертификации) Тогда
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ВидСертификации, НомерСертификации, ДатаСертификации",
		ВидСертификации, НомерСертификации, ДатаСертификации);
		
	НайденныеСтроки = Форма.КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		НоваяСтрока = Форма.КэшСертификации.Добавить();
		НоваяСтрока.ВидСертификации   = ВидСертификации;
		НоваяСтрока.НомерСертификации = НомерСертификации;
		НоваяСтрока.ДатаСертификации  = ДатаСертификации;
		НоваяСтрока.Представление     = ПредставлениеСертификации(ВидСертификации, НомерСертификации, ДатаСертификации);
		НоваяСтрока.Номенклатура      = Номенклатура;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификацииИПервичногоДокумента()
	
	ПервичныеДокументы = Новый Соответствие;
	
	КэшПервичныхДокументов.Очистить();
	Для Каждого Строка Из Объект.Товары Цикл
		
		Строка.Сертификация = ПредставлениеСертификации(
			Строка.ВидДокументаСертификации,
			Строка.НомерДокументаСертификации,
			Строка.ДатаДокументаСертификации);
		
		Строка.ПредставлениеПервичногоДокумента = ИнтеграцияИСМПКлиентСервер.ПредставлениеПервичногоДокумента(Строка);
		Если ПервичныеДокументы.Получить(Строка.ПредставлениеПервичногоДокумента) = Неопределено
			И ЗначениеЗаполнено(Строка.ПредставлениеПервичногоДокумента) Тогда
			ПервичныеДокументы.Вставить(Строка.ПредставлениеПервичногоДокумента, Истина);
			ЗаполнитьЗначенияСвойств(КэшПервичныхДокументов.Добавить(), Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ТоварыПредставлениеПервичногоДокумента.СписокВыбора.Очистить();
	Для Каждого ЭлементКэша Из КэшПервичныхДокументов Цикл
		Элементы.ТоварыПредставлениеПервичногоДокумента.СписокВыбора.Добавить(
			Формат(КэшПервичныхДокументов.Индекс(ЭлементКэша), "ЧРД=; ЧН=0; ЧГ=0;"), ЭлементКэша.ПредставлениеПервичногоДокумента);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДанныеСтроки.ВидДокументаСертификации   = РезультатВыбора.ВидСертификации;
		ДанныеСтроки.НомерДокументаСертификации = РезультатВыбора.НомерСертификации;
		ДанныеСтроки.ДатаДокументаСертификации  = РезультатВыбора.ДатаСертификации;
		ДанныеСтроки.Сертификация = ПредставлениеСертификации(РезультатВыбора.ВидСертификации,
			РезультатВыбора.НомерСертификации, РезультатВыбора.ДатаСертификации);
	КонецЦикла;
	
	ОбновитьКэшСертификацииКлиентСервер(ЭтотОбъект, ДанныеСтроки.ВидДокументаСертификации,
		ДанныеСтроки.НомерДокументаСертификации, ДанныеСтроки.ДатаДокументаСертификации);
	
	ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеПервичногоДокумента

&НаКлиенте
Процедура ОткрытьФормуРедактированияДанныхПервичногоДокумента(ИдентификаторыСтрок)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВозвратВОборотТовараПриобретавшегосяНеДляПродажи =
		Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ВозвратВОборотТовараПриобретавшегосяНеДляПродажи");
	
	ДоступныеВидыПервичныхДокументов = Новый СписокЗначений;
	ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.Прочее"));
	Если Не ВозвратВОборотТовараПриобретавшегосяНеДляПродажи Тогда
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.КассовыйЧек"));
		ДоступныеВидыПервичныхДокументов.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ТоварныйЧек"));
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидПервичногоДокумента",           ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.ПустаяСсылка"));
	ПараметрыОткрытия.Вставить("НаименованиеПервичногоДокумента",  "");
	ПараметрыОткрытия.Вставить("НомерПервичногоДокумента",         "");
	ПараметрыОткрытия.Вставить("ДатаПервичногоДокумента",          Дата(1,1,1));
	ПараметрыОткрытия.Вставить("ДоступныеВидыПервичныхДокументов", ДоступныеВидыПервичныхДокументов);
	ПараметрыОткрытия.Вставить("Организация",                      Объект.Организация);
	ПараметрыОткрытия.Вставить("ПервичныйДокумент",                Неопределено);
	Если Не ВозвратВОборотТовараПриобретавшегосяНеДляПродажи Тогда
		ПараметрыОткрытия.Вставить("Оплачен", Ложь);
	КонецЕсли;
	
	ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ВыбраннаяСтрока);
	
	Если ВозвратВОборотТовараПриобретавшегосяНеДляПродажи Тогда
		ПараметрыОткрытия.Вставить("ВидПервичногоДокумента", ПредопределенноеЗначение("Перечисление.ВидыПервичныхДокументовИСМП.Прочее"));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", ИдентификаторыСтрок);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеПервичногоДокументаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.ИнформацияОДокументеПродажи",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПервичногоДокументаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИдентификаторыСтрок = Неопределено Тогда
		Для Каждого ДанныеСтроки Из Объект.Товары Цикл
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, РезультатВыбора);
		КонецЦикла;
	Иначе
		Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, РезультатВыбора);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ПредставлениеПервичногоДокумента", РезультатВыбора.ПредставлениеПервичногоДокумента);
	НайденныеСтроки = КэшПервичныхДокументов.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		ЭлементКэша = КэшПервичныхДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементКэша, РезультатВыбора);
		Элементы.ТоварыПредставлениеПервичногоДокумента.СписокВыбора.Добавить(
			Формат(КэшПервичныхДокументов.Индекс(ЭлементКэша), "ЧРД=; ЧН=0; ЧГ=0;"), РезультатВыбора.ПредставлениеПервичногоДокумента);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, КэшированныеЗначения, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ПослеОбработкиШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ДанныеВыбораПоМаркируемойПродукции<>Неопределено Тогда
			КлючиСвязи = Новый Структура;
			КлючиСвязи.Вставить("Номенклатура");
			КлючиСвязи.Вставить("Характеристика");
			КлючиСвязи.Вставить("Серия");
			ЗаполнитьЗначенияСвойств(КлючиСвязи, ДанныеВыбораПоМаркируемойПродукции);
			СтрокиТовар = Объект.Товары.НайтиСтроки(КлючиСвязи);
			Если СтрокиТовар.Количество() И СтрокиТовар[0].СтатусПроверкиГосИС = 1 Тогда
				ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ЭтотОбъект,,Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода   = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                         = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования         = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода               = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Если РезультатОбработкиШтрихкода.ДополнительныеПараметры <> Неопределено
		И РезультатОбработкиШтрихкода.ТипУпаковки <> ПредопределенноеЗначение(
		"Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			
		РезультатОбработкиШтрихкода.Вставить("Номенклатура",             Неопределено);
		РезультатОбработкиШтрихкода.Вставить("Характеристика",           Неопределено);
		РезультатОбработкиШтрихкода.Вставить("ТребуетсяАвторизацияИСМП", Ложь);
		РезультатОбработкиШтрихкода.ИспользоватьОбработкуНаКлиенте       = Истина;
		РезультатОбработкиШтрихкода.ОткрытьФормуВводаКодаМаркировки      = Ложь;
		РезультатОбработкиШтрихкода.ОбработкаШтрихкодаБезМарки           = Истина;
		РезультатОбработкиШтрихкода.ДополнительныеПараметры.Свойство("Номенклатура",
			РезультатОбработкиШтрихкода.Номенклатура);
		РезультатОбработкиШтрихкода.ДополнительныеПараметры.Свойство("Характеристика",
			РезультатОбработкиШтрихкода.Характеристика);
		Для Каждого ВидПродукции Из РезультатОбработкиШтрихкода.ВидыПродукции Цикл
			РезультатОбработкиШтрихкода.Вставить("ВидПродукции", ВидПродукции);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	ИзмененныеСтроки  = РезультатОбработкиШтрихкода.ИзмененныеСтроки;
	ДобавленныеСтроки = РезультатОбработкиШтрихкода.ДобавленныеСтроки;
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, Неопределено, ПараметрыУказанияСерий);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных() Экспорт
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаШтрихкодов

&НаКлиенте
Процедура ОповещениеЗакрытиеФормыВводаКода(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьКэшМаркируемойПродукции();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Или ДополнительныеПараметры.ИдентификаторСтроки = Неопределено Тогда
		ТекущиеДанные = Объект.Товары.Добавить();
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	ТекущиеДанные.Сертификация = ПредставлениеСертификации(
			ТекущиеДанные.ВидДокументаСертификации,
			ТекущиеДанные.НомерДокументаСертификации,
			ТекущиеДанные.ДатаДокументаСертификации);
	
	СписокНоменклатуры = Новый Массив;
	СписокНоменклатуры.Добавить(ТекущиеДанные.Номенклатура);
	ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не (ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора)) Тогда
		Возврат
	КонецЕсли;
	
	Объект.ДокументОснование = ДанныеВыбора;
	Модифицированность       = Истина;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДанныеФормы()
	
	ЗаполнитьПредставлениеСертификацииИПервичногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения(
			"ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да
		Или РезультатВопроса = Истина Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		
		ВидПродукцииПриИзменении(Элементы.ВидПродукции, РезультатВопроса = Истина);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацияПриЗавершении(РезультатВопроса, НоваяОрганизация) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = НоваяОрганизация;
		Объект.Товары.Очистить();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Элементы.Операция.СписокВыбора.Очистить();
	Операции = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииВозвратаВОборотПоВидуПродукции(Объект.ВидПродукции);
	Для Каждого Операция Из Операции Цикл
		Элементы.Операция.СписокВыбора.Добавить(Операция.Значение, Операция.Представление);
	КонецЦикла;
	
	Элементы.ТоварыСертификация.Видимость = Объект.Операция = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриРозничнойРеализации")
		Или Объект.Операция = ПредопределенноеЗначение(
		"Перечисление.ВидыОперацийИСМП.ВозвратВОборотПриДистанционномСпособеПродажи");
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСертификатыНоменклатурыВКэш(Форма, СписокНоменклатуры)
	
	СертификатыНоменклатуры = ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры);
	
	Для Каждого КлючЗначение Из СертификатыНоменклатуры Цикл
		
		Номенклатура = КлючЗначение.Ключ;
		Для Каждого Сертификат Из КлючЗначение.Значение Цикл
			
			ОбновитьКэшСертификацииКлиентСервер(
				Форма, Сертификат.ВидСертификации, Сертификат.НомерСертификации, Сертификат.ДатаСертификации, Номенклатура);
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИнформацияСертификатовНоменклатурыСервер(СписокНоменклатуры)
	
	СертификатыНоменклатуры = Новый Соответствие;
	ИнтеграцияИСПереопределяемый.ПриЗаполненииСертификатовНоменклатуры(СписокНоменклатуры, СертификатыНоменклатуры);
	
	Возврат СертификатыНоменклатуры;
	
КонецФункции

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			Возврат;
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		ЗагрузкаДанныхТСД = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
			
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок) Тогда
		ПараметрыОткрытия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
		ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок;
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяУточнениеДанных Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУточненияДанныхТСД", ЭтотОбъект);
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОткрытьФормуУточненияДанныхТСД(ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	ЗагрузкаДанныхТСД = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования);
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЗагрузкаШтрихкодовПрервана(ЗагрузкаДанныхТСД) Тогда
		Возврат;
	КонецЕсли;
	
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУточненияДанныхТСД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения);
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения)
	
	ГрупповаяОбработкаШтрихкодовИС.ОбработатьШтрихкоды(ЭтотОбъект, ЗагрузкаДанныхТСД);
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения)
	
	Модифицированность = Истина;
	ПослеОбработкиШтрихкодовСервер(ЗагрузкаДанныхТСД, КэшированныеЗначения);
	ОбновитьКэшМаркируемойПродукцииСервер();
	ЗагрузкаДанныхТСД.ДобавленныеСтроки = Новый Массив;
	ЗагрузкаДанныхТСД.ИзмененныеСтроки  = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти