//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	РассчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасшифровкаСписаний

&НаКлиенте
Процедура РасшифровкаСписанийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийПослеУдаления(Элемент)
	
	Если Объект.РасшифровкаСписаний.Количество() = 0 Тогда
		
		Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
		
	КонецЕсли;
	
	РассчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийПартнерНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийПартнерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийДокументУсловияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийДокументУсловияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаСписанийСуммаПриИзменении(Элемент)
	
	РассчитатьИтоги(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоОстаткам(Команда)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	ВидПоля = "Поле";
	ВидСообщения = "Заполнение";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ИмяПоля = НСтр("ru = 'Организация'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(ВидПоля, ВидСообщения, ИмяПоля);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Организация",, Отказ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ИмяПоля = НСтр("ru = 'Контрагент'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(ВидПоля, ВидСообщения, ИмяПоля);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Контрагент",, Отказ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		
		ИмяПоля = НСтр("ru = 'Дата'");
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(ВидПоля, ВидСообщения, ИмяПоля);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект.Дата",, Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПодобратьНачисленныеРБ();
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Прочее

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоги(Форма)
	
	Объект = Форма.Объект;
	СуммаВсего = Объект.РасшифровкаСписаний.Итог("Сумма");
	Форма.СуммаВсего = СуммаВсего;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ПодборПоОстаткам

&НаКлиенте
Асинх Процедура ПодобратьНачисленныеРБ()
	
	ТребуетсяВопрос = Ложь;
	Если Объект.Проведен Тогда
		
		ТребуетсяВопрос = Истина;
		ТекстВопроса = НСтр("ru = 'Перед подбором начислений необходимо отменить проведение документа. Продолжить?'");
		
	КонецЕсли;
	
	Если ТребуетсяВопрос Тогда
		
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			Если Объект.Проведен Тогда
				Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПодобратьНачисленныеРБПродолжить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНачисленныеРБПродолжить()
	
	АдресТаблицыПодобранныхСтрок = АдресТаблицыПодобранныхСтрок();
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("АдресТаблицыПодобранныхСтрок", АдресТаблицыПодобранныхСтрок);
	ПараметрыПодбора.Вставить("РежимВыбора", Истина);
	ПараметрыПодбора.Вставить("ДатаАктуальности", Объект.Дата);
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	КонецЕсли;
	Оповещение = Новый ОписаниеОповещения("ПодобратьНачисленныеРБЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("РегистрНакопления.РетроБонусыКлиентов.Форма.ФормаПодбораПоОстаткам",
		ПараметрыПодбора, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаСервере
Функция АдресТаблицыПодобранныхСтрок()
	
	ТаблицаПодобранныхСтрок = Объект.РасшифровкаСписаний.Выгрузить();
	ТаблицаПодобранныхСтрок.Колонки.Добавить("ДокументВыбран", Новый ОписаниеТипов("Булево"));
	ТаблицаПодобранныхСтрок.Колонки.Добавить("Пометка", Новый ОписаниеТипов("Булево"));
	ТаблицаПодобранныхСтрок.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Для Каждого СтрокаТаблицы Из ТаблицаПодобранныхСтрок Цикл
		
		СтрокаТаблицы.ДокументВыбран = Истина;
		СтрокаТаблицы.Пометка = Истина;
		СтрокаТаблицы.Валюта = Объект.Валюта;
		
	КонецЦикла;
	АдресТаблицыПодобранныхСтрок = ПоместитьВоВременноеХранилище(ТаблицаПодобранныхСтрок, УникальныйИдентификатор);
	
	Возврат АдресТаблицыПодобранныхСтрок;
	
КонецФункции

// Параметры:
//  Результат - Неопределено, Строка - 
//  ДополнительныеПараметры - Произвольный -
//
&НаКлиенте
Процедура ПодобратьНачисленныеРБЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
	   И ЭтоАдресВременногоХранилища(Результат) Тогда
		
		ОбработкаПодбораДокументовНачислений(Результат);
		РассчитатьИтоги(ЭтотОбъект);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресВХранилище - Строка - Адрес в хранилище
//
&НаСервере
Процедура ОбработкаПодбораДокументовНачислений(Знач АдресВХранилище)
	
	ТаблицаОстатков = ТаблицаВыбранныхОстатков(АдресВХранилище);
	УдалитьИзВременногоХранилища(АдресВХранилище);
	Объект.РасшифровкаСписаний.Очистить();
	
	Если ТаблицаОстатков.Количество() > 0
	   И НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
		Объект.Валюта = ТаблицаОстатков[0].Валюта;
	КонецЕсли;
	
	Объект.РасшифровкаСписаний.Загрузить(ТаблицаОстатков);
	
	Если Объект.РасшифровкаСписаний.Количество() = 0 Тогда
		Объект.Валюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресВХранилище - Строка - Адрес в хранилище
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
//   * Партнер - СправочникСсылка.Партнеры
//   * НачалоДействия - Дата
//   * ОкончаниеДействия - Дата
//   * Сумма - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная
//   * Валюта - СправочникСсылка.Валюты
//
&НаСервере
Функция ТаблицаВыбранныхОстатков(АдресВХранилище)
	
	Возврат ПолучитьИзВременногоХранилища(АдресВХранилище);
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method - неявный вызов из УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти