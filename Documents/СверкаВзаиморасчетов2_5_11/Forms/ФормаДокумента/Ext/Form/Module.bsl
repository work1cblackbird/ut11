
#Область ОписаниеПеременных

&НаКлиенте
Перем ПредыдущиеЗначения;
&НаКлиенте
Перем КлючевыеРеквизиты;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ЭтоСверкаМеждуОрганизациями = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Объект.КонтактноеЛицо = ?(
			ЭтоСверкаМеждуОрганизациями, 
			Справочники.Пользователи.ПустаяСсылка(),
			Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	КонецЕсли;
	ЗаполнитьСписокВыбораТиповРасчета();
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	Документы.СверкаВзаиморасчетов2_5_11.ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор, УникальныйИдентификатор);
	Попытка
		ОбъектДокумента = РеквизитФормыВЗначение("Объект");
		НастройкиОтбора = ОбъектДокумента.НастройкиОтбора.Получить();
		Если НастройкиОтбора = Неопределено Тогда
			Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
				ХранилищеНастроек = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования,"НастройкиОтбора");
				НастройкиОтбора = ХранилищеНастроек.Получить();
			КонецЕсли;
		КонецЕсли;
	Исключение
		// Ничего не делаем. ПередЗаписью настройки отбора актуализируются.
	КонецПопытки;
	Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Документы.СверкаВзаиморасчетов2_5_11.ЗаполнитьОтборПартнераПоКонтрагенту(КомпоновщикОтбор.Настройки.Отбор);
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Элементы.ГруппаВалюта.Видимость = ИспользоватьНесколькоВалют;
	
	ПоказатьИтоговыеЗаписи = Истина;
	Элементы.ОтветственноеЛицо.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Элементы.ОтветственноеЛицо.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Элементы.ОтветственноеЛицоОрганизацииКонтрагента.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Элементы.ОтветственноеЛицоОрганизацииКонтрагента.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Элементы.ДекорацияОрганизация.Видимость = ИспользоватьНесколькоОрганизаций;
	Элементы.Контрагент.ВыбиратьТип = ИспользоватьНесколькоОрганизаций;
	Элементы.ЭтоСверкаМеждуОрганизациями.Видимость = ИспользоватьНесколькоОрганизаций;
	Элементы.ДекорацияКонтрагент.Видимость = НЕ ИспользоватьНесколькоОрганизаций;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	Партнер = ПартнерКонтрагента(Объект.Контрагент);
	ПоказатьИтоговыеЗаписи = Истина;
	ЭтоСверкаМеждуОрганизациями = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	ДокументЭДО = Неопределено;
	//++ Локализация
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДокументЭДО = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Объект.Ссылка);
	КонецЕсли;
	//-- Локализация
	ДокументУчаствуетВЭДО = ДокументЭДО <> Неопределено;
	УправлениеЭлементамиФормы();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения);
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);
	СтатусПриИзмененииКлиент();
	ПересчетИтогов = Ложь;
	ПоказатьИтоговыеЗаписиПриИзмененииКлиент(ПересчетИтогов);
	ИнициализироватьПредыдущиеЗначения();
	КлючевыеРеквизиты = "ТипРасчетов, Партнер, Договор, ОбъектРасчетов";
	УстановитьВидимостьКлючевыхПолейДетальныхЗаписей(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Если ТекущийЭлемент <> Неопределено Тогда
			Если ТекущийЭлемент.Имя = "КонтактноеЛицо" Тогда
				Объект.КонтактноеЛицо = ВыбранноеЗначение;
			ИначеЕсли ТекущийЭлемент.Имя = "ФИОРуководителяКонтрагента" Тогда
				Объект.ФИОРуководителяКонтрагента = Строка(ВыбранноеЗначение);
				ЗаполнитьДолжностьПоВыбранномуЗначению(ВыбранноеЗначение)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.НастройкиОтбора = Новый ХранилищеЗначения(КомпоновщикОтбор.ПолучитьНастройки());
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	Если НЕ ПоказатьИтоговыеЗаписи Тогда
		РассчитатьСуммовыеПоказателиИтоговыхЗаписейНаСервере();
	КонецЕсли;

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ДокументЭДО = Неопределено;
	//++ Локализация
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДокументЭДО = ИнтеграцияЭДО.ОсновнойЭлектронныйДокументОбъектаУчета(Объект.Ссылка);
	КонецЕсли;
	//-- Локализация
	ДокументУчаствуетВЭДО = ДокументЭДО <> Неопределено;

	УстановитьДоступностьЭлементовПоСтатусу();
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения);
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения);

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами	

	УстановитьОтборИтоговыхЗаписей();
	УстановитьОтборДетальныхЗаписей();
	УстановитьПоясняющуюНадписьСтатуса();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;  
	КлючевойРеквизитПриИзменении("Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоСверкаМеждуОрганизациямиПриИзменении(Элемент)
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПредыдущиеЗначения.ВнешнийКонтрагент = Объект.Контрагент;
	ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ПредыдущиеЗначения.КонтрагентНашаОрганизация = Объект.Контрагент;
	КонецЕсли;
	
	КлючевойРеквизитПриИзменении("ЭтоСверкаМеждуОрганизациями");
	
КонецПроцедуры

&НаКлиенте
Процедура СверкаВВалютеПриИзменении(Элемент)

	Элементы.Валюта.ТолькоПросмотр = НЕ Объект.СверкаВВалюте;
	Если НЕ Объект.СверкаВВалюте И Объект.Валюта <> ВалютаРеглУчета Тогда
		КлючевойРеквизитПриИзменении("СверкаВВалюте");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)

	КлючевойРеквизитПриИзменении("Валюта");

КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЭтоСверкаМеждуОрганизациями Тогда
		СтандартнаяОбработка = Ложь;
		ФИОРуководителяКонтактноеЛицоНачалоВыбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОРуководителяКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФИОРуководителяКонтактноеЛицоНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	КлючевойРеквизитПриИзменении("Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоПриИзменении(Элемент)
	
	ПоказатьГлавногоБухгалтера = Объект.ОтветственноеЛицо = ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	Элементы.ГлавныйБухгалтер.Видимость = ПоказатьГлавногоБухгалтера;
	Элементы.Руководитель.Видимость = НЕ Элементы.ГлавныйБухгалтер.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоОрганизацииКонтрагентаПриИзменении(Элемент)
	
	ПоказатьГлавногоБухгалтера = Объект.ОтветственноеЛицоОрганизацииКонтрагента = ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость = ПоказатьГлавногоБухгалтера;
	Элементы.РуководительОрганизацииКонтрагента.Видимость = НЕ Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияПриИзменении(Элемент)

	УстановитьВидимость();
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);

	Если НЕ ДокументУчаствуетВЭДО И Объект.ЕстьРасхождения Тогда
		Для каждого ИтоговаяЗапись Из Объект.ИтоговыеЗаписи Цикл
			Если НЕ ИтоговаяЗапись.ЕстьДанныеКонтрагента Тогда
				ИтоговаяЗапись.НачальноеСальдоДтКонтрагент = ИтоговаяЗапись.НачальноеСальдоДт;
				ИтоговаяЗапись.НачальноеСальдоКтКонтрагент = ИтоговаяЗапись.НачальноеСальдоКт;
				ИтоговаяЗапись.ОборотДтКонтрагент = ИтоговаяЗапись.ОборотДт;
				ИтоговаяЗапись.ОборотКтКонтрагент = ИтоговаяЗапись.ОборотКт;
				ИтоговаяЗапись.КонечноеСальдоДтКонтрагент = ИтоговаяЗапись.КонечноеСальдоДт;
				ИтоговаяЗапись.КонечноеСальдоКтКонтрагент = ИтоговаяЗапись.КонечноеСальдоКт;
				ИтоговаяЗапись.НомерДоговораКонтрагент = ИтоговаяЗапись.НомерДоговора;
				ИтоговаяЗапись.ДатаДоговораКонтрагент = ИтоговаяЗапись.ДатаДоговора;
				ИтоговаяЗапись.НаименованиеДоговораКонтрагент = ИтоговаяЗапись.НаименованиеДоговора;
				ИтоговаяЗапись.ЕстьДанныеКонтрагента = Истина;
			КонецЕсли;
		КонецЦикла;
		Для каждого ДетальнаяЗапись Из Объект.ДетальныеЗаписи Цикл
			Если Не ДетальнаяЗапись.ЕстьДанныеКонтрагента Тогда
				ДетальнаяЗапись.СуммаДебетКонтрагент = ДетальнаяЗапись.СуммаДебет;
				ДетальнаяЗапись.СуммаКредитКонтрагент = ДетальнаяЗапись.СуммаКредит;
				ДетальнаяЗапись.НомерДокументаКонтрагент = ДетальнаяЗапись.НомерДокумента;
				ДетальнаяЗапись.ДатаДокументаКонтрагент = ДетальнаяЗапись.ДатаДокумента;
				ДетальнаяЗапись.НаименованиеДокументаКонтрагент = ДетальнаяЗапись.НаименованиеДокумента;
				ДетальнаяЗапись.ЕстьДанныеКонтрагента = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения);
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения);

	ФильтрСопоставленияИтоговыеЗаписи = 0;
	УстановитьОтборИтоговыхЗаписей();
	ФильтрСопоставленияДетальныеЗаписи = 0;
	УстановитьОтборДетальныхЗаписей();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоясняющаяНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	УстановитьСтатусСверки(НавигационнаяСсылкаФорматированнойСтроки);
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РежимСверкиИтоговВзаиморасчетовПриИзменении(Элемент)

	КлючевойРеквизитПриИзменении("РежимСверкиИтоговВзаиморасчетов");

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРасчеты Тогда
		ПоказатьИтоговыеЗаписиПриИзмененииКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИтоговыеЗаписиПриИзменении(Элемент)
	
	ПоказатьИтоговыеЗаписиПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасчетыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтборРасчеты = -1;
	
	ПоказатьИнформациюПоОтборуРасчетов();
	УстановитьОтборДетальныхЗаписей();
	УстановитьВидимостьКомандОбъединенияСтрок();
	ВывестиКлючевыеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасчетыПриИзменении(Элемент)
	
	ПоказатьИнформациюПоОтборуРасчетов();
	УстановитьОтборДетальныхЗаписей();
	УстановитьВидимостьКомандОбъединенияСтрок();
	ВывестиКлючевыеПоля();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИтоговыеЗаписи

&НаКлиенте
Процедура ИтоговыеЗаписиОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),
			,
			"Организация",
			"Объект",
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект",
			Отказ);
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ТекущаяСтрока = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
	ТипРасчетов = ТекущаяСтрока.ТипРасчетов;
	Отбор = ОтборПоискаДоговора();
	Если ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором")
			ИЛИ ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором") Тогда
		ОткрытьФорму(
			"Справочник.ДоговорыКредитовИДепозитов.ФормаВыбора",
			Новый Структура("Отбор", Отбор),
			Элемент);
	Иначе
		ЗначенияОтбора = Новый Структура;
		ЗначенияОтбора.Вставить("ТипРасчетов", ТекущаяСтрока.ТипРасчетов);
		ЗначенияОтбора.Вставить("Организация", Объект.Организация);
		ЗначенияОтбора.Вставить("Контрагент",  Объект.Контрагент);
		ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , Ложь);

		Если ТипЗнч(ЗначенияОтбора.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
			ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
		Иначе
			ЗначенияОтбора.Вставить("Партнер", ТекущаяСтрока.Партнер);
		КонецЕсли;

		НастройкиВыбора = Новый Структура;
		НастройкиВыбора.Вставить("ВыборОснованияПлатежа", Ложь);
		НастройкиВыбора.Вставить("РедактируемыйДокумент", Объект.Ссылка);
		НастройкиВыбора.Вставить("Сумма", 0);
		НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
		НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", Истина);
		НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
		НастройкиВыбора.Вставить("ТекущаяСтрока", ТекущаяСтрока.ОбъектРасчетов);

		ОткрытьФорму("Справочник.ОбъектыРасчетов.ФормаВыбора", НастройкиВыбора, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные.ОбъектРасчетов = ВыбранноеЗначение.ОбъектРасчетов;
		ТекущиеДанные.Партнер = ВыбранноеЗначение.Партнер;
		ТекущиеДанные.Договор = ВыбранноеЗначение.Договор;
		ТекущиеДанные.Валюта = ВыбранноеЗначение.ВалютаВзаиморасчетов;
	Иначе
		ТекущиеДанные.ОбъектРасчетов = ВыбранноеЗначение;
		ТекущиеДанные.Договор = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Объект.РазбиватьПоТипамРасчетов И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипРасчетов) Тогда
		Элемент.ТекущиеДанные.ТипРасчетов = Объект.ТипРасчетов;
	ИначеЕсли Объект.РазбиватьПоДоговорам И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Договор) Тогда
		Элемент.ТекущиеДанные.Договор = Объект.Договор;
	ИначеЕсли Объект.РазбиватьПоПартнерам И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Партнер) Тогда
		Элемент.ТекущиеДанные.Партнер = Объект.Партнер;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПредыдущиеЗначения, Элемент.ТекущиеДанные, КлючевыеРеквизиты);

КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	// При использовании Асинх для процедуры самого события игнорируется Отказ = Истина и строки сразу удаляются
	УдалитьИтоговыеЗаписиАсинх();

КонецПроцедуры

&НаКлиенте
Асинх Процедура ИтоговыеЗаписиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если ОтменаРедактирования ИЛИ Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверка на дубли по текущим значениям ключевых реквизитов
	ПараметрыОтбора = Новый Структура(КлючевыеРеквизиты);
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Элемент.ТекущиеДанные, КлючевыеРеквизиты);
	НаборСтрок = Объект.ИтоговыеЗаписи.НайтиСтроки(ПараметрыОтбора);
	
	СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
	Если СверкаПоДоговорам Тогда
		ШаблонТекстаСообщения = НСтр("ru = 'Запись с такими значениями ключевых полей ""Тип расчетов"", ""Партнер"" и ""Договор"" уже существует (строка № %1). Значения ключевых полей должны отличаться.'");
	Иначе
		ШаблонТекстаСообщения = НСтр("ru = 'Запись с такими значениями ключевых полей ""Тип расчетов"", ""Партнер"", ""Договор"" и ""Объект расчетов"" уже существует (строка № %1). Значения ключевых полей должны отличаться.'");
	КонецЕсли;
	Для Каждого ИтоговаяЗапись Из НаборСтрок Цикл
		Если ИтоговаяЗапись <> Элемент.ТекущиеДанные Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонТекстаСообщения,
				ИтоговаяЗапись.НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ИтоговыеЗаписи[%1]",
					Формат(Объект.ИтоговыеЗаписи.Индекс(ИтоговаяЗапись), "ЧН=0; ЧГ=")),
				"Объект",
				Отказ);
		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	// Проверка наличия детальных записей по предыдущим значениям ключевых реквизитов
	Если НЕ ЗначениеЗаполнено(ПредыдущиеЗначения.ТипРасчетов) Тогда	// Новая или несопоставленная строка
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура(КлючевыеРеквизиты);
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ПредыдущиеЗначения, КлючевыеРеквизиты);

	ЕстьИзменения = Ложь;
	Для каждого КлючевойРеквизит Из ПараметрыОтбора Цикл
		Если Элемент.ТекущиеДанные[КлючевойРеквизит.Ключ] <> КлючевойРеквизит.Значение Тогда
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные[КлючевойРеквизит.Ключ])	// Предупреждение сравнения пустой ссылки и Неопределено в договоре
				ИЛИ ЗначениеЗаполнено(КлючевойРеквизит.Значение) Тогда
				ЕстьИзменения = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЕстьИзменения Тогда	// Ключевые поля не были изменены
		Возврат;
	КонецЕсли;

	НаборСтрок = Объект.ДетальныеЗаписи.НайтиСтроки(ПараметрыОтбора);
	Если НаборСтрок.Количество() = 0 Тогда	// Подчиненных детальных записей нет
		Возврат;
	КонецЕсли;

	// Или вернуть значения, или удалить детали.
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Были изменены значения ключевых полей.
		|Подчиненные детальные записи (%1) будут удалены.
		|Продолжить?'"),
		НаборСтрок.Количество());
		
	Ответ = Ждать ВопросАсинх(ТекстВопроса,
					РежимДиалогаВопрос.ДаНет,
					,
					КодВозвратаДиалога.Нет,
					НСтр("ru = 'Изменение ключевых полей'"));
	Если Ответ = КодВозвратаДиалога.Да Тогда // Удалить строки
		Для каждого ДетальнаяЗапись Из НаборСтрок Цикл
			Объект.ДетальныеЗаписи.Удалить(ДетальнаяЗапись);
		КонецЦикла;
	Иначе // Откатить значения полей
		ЗаполнитьЗначенияСвойств(Элементы.ИтоговыеЗаписи.ТекущиеДанные, ПредыдущиеЗначения, КлючевыеРеквизиты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда	// Удаление записи
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Договор) Тогда
		ТекущиеДанные.Договор = Неопределено;
	КонецЕсли;

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения, ТекущиеДанные);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиПослеУдаления(Элемент)
	
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиДоговорПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
	ТипРасчетов = ТекущаяСтрока.ТипРасчетов;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Договор)
		И (ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором")
			ИЛИ ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором")
			ИЛИ ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем")) Тогда
		ТекущаяСтрока.ОбъектРасчетов = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Договор) Тогда
		РеквизитыДоговора = РеквизитыДоговораСервер(ТекущаяСтрока.Договор);
		ТекущаяСтрока.НаименованиеДоговора = РеквизитыДоговора.НаименованиеДляПечати;
		ТекущаяСтрока.НомерДоговора = РеквизитыДоговора.Номер;
		ТекущаяСтрока.ДатаДоговора = РеквизитыДоговора.Дата;
	Иначе
		ТекущаяСтрока.НаименованиеДоговора = "";
		ТекущаяСтрока.НомерДоговора = "";
		ТекущаяСтрока.ДатаДоговора = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДоговорНачалоВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, ВыборДобавлением, СтандартнаяОбработка)
	
	ТипРасчетов = Элемент.Родитель.ТекущиеДанные.ТипРасчетов;
	Если ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором")
		ИЛИ ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором")
		ИЛИ ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем") Тогда
		Элементы.ИтоговыеЗаписи.ТекущиеДанные.ОбъектРасчетов = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиДоговорАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)

	ПараметрыПолученияДанных.Отбор = ОтборПоискаДоговора();

КонецПроцедуры

&НаКлиенте
Процедура ИтоговыеЗаписиДоговорОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)

	ПараметрыПолученияДанных.Отбор = ОтборПоискаДоговора();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДетальныеЗаписи

&НаКлиенте
Процедура ДетальныеЗаписиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если ОтборРасчеты = -1 Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru = 'Добавление строк возможно только при установленном отборе по итоговой записи.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	ЭтоНоваяСтрокаДетальныхЗаписей = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиПриАктивизацииСтроки(Элемент)

	Если ЭтоНоваяСтрокаДетальныхЗаписей И ОтборРасчеты <> Неопределено Тогда
		ИтоговаяЗапись = СтрокаИтоговойЗаписиПоОтборуРасчетов();
		Если ИтоговаяЗапись <> Неопределено И Элемент.ТекущиеДанные <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные, ИтоговаяЗапись, КлючевыеРеквизиты);
			Элемент.ТекущиеДанные.ВалютаДокумента = Объект.Валюта;
		КонецЕсли;
		ЭтоНоваяСтрокаДетальныхЗаписей = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено ИЛИ ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения, ТекущаяСтрока);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);
	УстановитьОтборДетальныхЗаписей();
	РассчитатьСуммовыеПоказателиИтоговыхЗаписейНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиПослеУдаления(Элемент)
	
	ИтоговаяЗапись = СтрокаИтоговойЗаписиПоОтборуРасчетов();
	Если ИтоговаяЗапись <> Неопределено Тогда
		ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения, ИтоговаяЗапись);
	КонецЕсли;
	
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетныйДокументПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.РасчетныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = Неопределено;
	Отбор = Новый Структура("РасчетныйДокумент", ТекущаяСтрока.РасчетныйДокумент);
	СтрокиДокумента = Объект.ДетальныеЗаписи.НайтиСтроки(Отбор);
	Если СтрокиДокумента.Количество() = 2 Тогда
		Для Каждого Строка Из СтрокиДокумента Цикл
			Если Строка.НомерСтроки = ТекущаяСтрока.НомерСтроки Тогда
				Продолжить;
			КонецЕсли;
			НайденнаяСтрока = Строка;
		КонецЦикла;
	ИначеЕсли СтрокиДокумента.Количество() > 2 Тогда
		ТекущаяСтрока.РасчетныйДокумент = Неопределено;
	КонецЕсли;

	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяСтрока.ЕстьДанныеКонтрагента = (НЕ НайденнаяСтрока.ЕстьДанныеКонтрагента) Тогда
		СтрокаКонтрагента = ТекущаяСтрока;
		СтрокаОрганизации = НайденнаяСтрока;
		СписокСвойств = "НомерДокументаКонтрагент, ДатаДокументаКонтрагент, НаименованиеДокументаКонтрагент,
		|СуммаДебетКонтрагент, СуммаКредитКонтрагент";
		ЗаполнитьЗначенияСвойств(СтрокаОрганизации, СтрокаКонтрагента, СписокСвойств);
		Объект.ДетальныеЗаписи.Удалить(Объект.ДетальныеЗаписи.Индекс(СтрокаКонтрагента));
	Иначе
		ТекущаяСтрока.РасчетныйДокумент = Неопределено;
	КонецЕсли;

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения, СтрокаОрганизации);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьПоОстаткамПоОтбору();
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйОтбор(Команда)
	
	ПараметрыОткрытия = ПараметрыФормыРасширенногоОтбора();
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("УстановитьРасширенныйОтборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СверкаВзаиморасчетов2_5_11.Форма.НастройкаОтборов",
				ПараметрыОткрытия,
				ЭтотОбъект,
				,
				,
				,
				ОбработчикЗакрытия,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"));
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущееЗначениеОтбора(Команда)
	
	СписокЗначенийОтбора = Элементы.ОтборРасчеты.СписокВыбора;
	Если СписокЗначенийОтбора.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементТекущегоОтбора = СписокЗначенийОтбора.НайтиПоЗначению(ОтборРасчеты);
	Если ЭлементТекущегоОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексЭлемента = СписокЗначенийОтбора.Индекс(ЭлементТекущегоОтбора);
	Если ИндексЭлемента > 0 Тогда
		ОтборРасчеты = СписокЗначенийОтбора.Получить(ИндексЭлемента - 1).Значение;
	КонецЕсли;
	
	ОтборРасчетыПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СледующееЗначениеОтбора(Команда)

	СписокЗначенийОтбора = Элементы.ОтборРасчеты.СписокВыбора;
	Если СписокЗначенийОтбора.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;

	ЭлементТекущегоОтбора = СписокЗначенийОтбора.НайтиПоЗначению(ОтборРасчеты);
	Если ЭлементТекущегоОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИндексЭлемента = СписокЗначенийОтбора.Индекс(ЭлементТекущегоОтбора);
	Если ИндексЭлемента < СписокЗначенийОтбора.Количество() - 1 Тогда
		ОтборРасчеты = СписокЗначенийОтбора.Получить(ИндексЭлемента + 1).Значение;
	КонецЕсли;
	
	ОтборРасчетыПриИзмененииКлиент();
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьСтрокиИтоговыеЗаписи(Команда)

	ОчиститьСообщения();

	ВыделенныеСтроки = Элементы.ИтоговыеЗаписи.ВыделенныеСтроки;

	ТекстСообщенияОбОшибке = НСтр("ru = 'Для объединения необходимо выделить две несопоставленные строки: с данными только одной стороны и с данными только второй стороны.'");
	Если ВыделенныеСтроки.Количество() <> 2 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, "Объект.ИтоговыеЗаписи", "Объект");
		Возврат;
	КонецЕсли;

	ПерваяСтрока = Объект.ИтоговыеЗаписи.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	ВтораяСтрока = Объект.ИтоговыеЗаписи.НайтиПоИдентификатору(ВыделенныеСтроки[1]);

	Если ПерваяСтрока.ТипРасхождений <> 1
		ИЛИ ВтораяСтрока.ТипРасхождений <> 1
		ИЛИ ПерваяСтрока.ЕстьДанныеКонтрагента = ВтораяСтрока.ЕстьДанныеКонтрагента
		ИЛИ ПерваяСтрока.ЕстьДанныеОрганизации = ВтораяСтрока.ЕстьДанныеОрганизации
		ИЛИ ПерваяСтрока.ЕстьДанныеКонтрагента = ПерваяСтрока.ЕстьДанныеОрганизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, "Объект.ИтоговыеЗаписи", "Объект");
		Возврат;
	КонецЕсли;

	Если ПерваяСтрока.ЕстьДанныеКонтрагента Тогда
		СтрокаКонтрагента = ПерваяСтрока;
		СтрокаОрганизации = ВтораяСтрока;
	Иначе
		СтрокаКонтрагента = ВтораяСтрока;
		СтрокаОрганизации = ПерваяСтрока;
	КонецЕсли;

	СписокСвойств = "НачальноеСальдоДтКонтрагент, НачальноеСальдоКтКонтрагент,
		|ОборотДтКонтрагент, ОборотКтКонтрагент, КонечноеСальдоДтКонтрагент, КонечноеСальдоКтКонтрагент,
		|НомерДоговораКонтрагент, ДатаДоговораКонтрагент, НаименованиеДоговораКонтрагент";
	ЗаполнитьЗначенияСвойств(СтрокаОрганизации, СтрокаКонтрагента, СписокСвойств);

	Объект.ИтоговыеЗаписи.Удалить(Объект.ИтоговыеЗаписи.Индекс(СтрокаКонтрагента));

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения, СтрокаОрганизации);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьСтрокиДетальныеЗаписи(Команда)

	ОчиститьСообщения();

	ВыделенныеСтроки = Элементы.ДетальныеЗаписи.ВыделенныеСтроки;

	ТекстСообщенияОбОшибке = НСтр("ru = 'Для объединения необходимо выделить две несопоставленные строки: с данными только одной стороны и с данными только второй стороны.'");
	Если ВыделенныеСтроки.Количество() <> 2 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, "Объект.ДетальныеЗаписи", "Объект");
		Возврат;
	КонецЕсли;

	ПерваяСтрока = Объект.ДетальныеЗаписи.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	ВтораяСтрока = Объект.ДетальныеЗаписи.НайтиПоИдентификатору(ВыделенныеСтроки[1]);

	Если ПерваяСтрока.ТипРасхождений <> 1
		ИЛИ ВтораяСтрока.ТипРасхождений <> 1
		ИЛИ ПерваяСтрока.ЕстьДанныеКонтрагента = ВтораяСтрока.ЕстьДанныеКонтрагента
		ИЛИ ПерваяСтрока.ЕстьДанныеОрганизации = ВтораяСтрока.ЕстьДанныеОрганизации
		ИЛИ ПерваяСтрока.ЕстьДанныеКонтрагента = ПерваяСтрока.ЕстьДанныеОрганизации Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, "Объект.ДетальныеЗаписи", "Объект");
		Возврат;
	КонецЕсли;

	Если ПерваяСтрока.ЕстьДанныеКонтрагента Тогда
		СтрокаКонтрагента = ПерваяСтрока;
		СтрокаОрганизации = ВтораяСтрока;
	Иначе
		СтрокаКонтрагента = ВтораяСтрока;
		СтрокаОрганизации = ПерваяСтрока;
	КонецЕсли;

	СписокСвойств = "НомерДокументаКонтрагент, ДатаДокументаКонтрагент, НаименованиеДокументаКонтрагент,
	|СуммаДебетКонтрагент, СуммаКредитКонтрагент";
	ЗаполнитьЗначенияСвойств(СтрокаОрганизации, СтрокаКонтрагента, СписокСвойств);

	Объект.ДетальныеЗаписи.Удалить(Объект.ДетальныеЗаписи.Индекс(СтрокаКонтрагента));

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения, СтрокаОрганизации);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РазъединитьСтрокуИтоговыеЗаписи(Команда)

	ОчиститьСообщения();

	ВыделенныеСтроки = Элементы.ИтоговыеЗаписи.ВыделенныеСтроки;
	СтрокаОрганизации = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
	Если ВыделенныеСтроки.Количество() <> 1
		Или НЕ СтрокаОрганизации.ЕстьДанныеОрганизации
		Или НЕ СтрокаОрганизации.ЕстьДанныеКонтрагента Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Для разделения необходимо выделить одну сопоставленную строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, "Объект.ИтоговыеЗаписи", "Объект");
		Возврат;
	КонецЕсли;

	ВыделеннаяСтрока = Объект.ИтоговыеЗаписи.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	ИндексВыделеннойСтроки = Объект.ИтоговыеЗаписи.Индекс(ВыделеннаяСтрока);
	СтрокаКонтрагента = Объект.ИтоговыеЗаписи.Вставить(ИндексВыделеннойСтроки);

	СписокСвойств = "НачальноеСальдоДтКонтрагент,НачальноеСальдоКтКонтрагент,ОборотДтКонтрагент,ОборотКтКонтрагент,КонечноеСальдоДтКонтрагент,КонечноеСальдоКтКонтрагент,НомерДоговораКонтрагент,ДатаДоговораКонтрагент,НаименованиеДоговораКонтрагент";
	ЗаполнитьЗначенияСвойств(СтрокаКонтрагента, СтрокаОрганизации, "Валюта," + СписокСвойств);

	ОбщегоНазначенияУТКлиентСервер.ОчиститьЗначенияСвойств(СтрокаОрганизации, СписокСвойств);

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения, СтрокаОрганизации);
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения, СтрокаКонтрагента);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура РазъединитьСтрокуДетальныеЗаписи(Команда)

	ОчиститьСообщения();

	ВыделенныеСтроки = Элементы.ДетальныеЗаписи.ВыделенныеСтроки;
	СтрокаОрганизации = Элементы.ДетальныеЗаписи.ТекущиеДанные;
	Если ВыделенныеСтроки.Количество() <> 1
		Или Не СтрокаОрганизации.ЕстьДанныеОрганизации
		Или Не СтрокаОрганизации.ЕстьДанныеКонтрагента Тогда
		ТекстСообщенияОбОшибке = НСтр("ru = 'Для разделения необходимо выделить одну сопоставленную строку.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщенияОбОшибке,, "Объект.ДетальныеЗаписи", "Объект");
		Возврат;
	КонецЕсли;

	ВыделеннаяСтрока = Объект.ДетальныеЗаписи.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
	ИндексВыделеннойСтроки = Объект.ДетальныеЗаписи.Индекс(ВыделеннаяСтрока);
	СтрокаКонтрагента = Объект.ДетальныеЗаписи.Вставить(ИндексВыделеннойСтроки);

	СвойстваВладельцаСтроки = "ТипРасчетов,Партнер,ОбъектРасчетов,Договор,";
	СписокСвойств = "НомерДокументаКонтрагент,ДатаДокументаКонтрагент,НаименованиеДокументаКонтрагент,СуммаДебетКонтрагент,СуммаКредитКонтрагент";
	ЗаполнитьЗначенияСвойств(СтрокаКонтрагента, СтрокаОрганизации, "ВалютаДокумента," + СвойстваВладельцаСтроки + СписокСвойств);

	ОбщегоНазначенияУТКлиентСервер.ОчиститьЗначенияСвойств(СтрокаОрганизации, СписокСвойств);

	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения, СтрокаОрганизации);
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения, СтрокаКонтрагента);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияВсе(Команда)

	Если ПоказатьИтоговыеЗаписи Тогда
		ФильтрСопоставленияИтоговыеЗаписи = 0;
		УстановитьОтборИтоговыхЗаписей();
	Иначе
		ФильтрСопоставленияДетальныеЗаписи = 0;
		УстановитьОтборДетальныхЗаписей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияНесопоставленные(Команда)

	Если ПоказатьИтоговыеЗаписи Тогда
		ФильтрСопоставленияИтоговыеЗаписи = 1;
		УстановитьОтборИтоговыхЗаписей();
	Иначе
		ФильтрСопоставленияДетальныеЗаписи = 1;
		УстановитьОтборДетальныхЗаписей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрСопоставленияРасхождения(Команда)

	Если ПоказатьИтоговыеЗаписи Тогда
		ФильтрСопоставленияИтоговыеЗаписи = 2;
		УстановитьОтборИтоговыхЗаписей();
	Иначе
		ФильтрСопоставленияДетальныеЗаписи = 2;
		УстановитьОтборДетальныхЗаписей();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФильтрДтКтВсе(Команда)

	ФильтрДтКт = 0;
	УстановитьОтборДетальныхЗаписей();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрДтКтДебет(Команда)

	ФильтрДтКт = 1;
	УстановитьОтборДетальныхЗаписей();

КонецПроцедуры

&НаКлиенте
Процедура ФильтрДтКтКредит(Команда)

	ФильтрДтКт = 2;
	УстановитьОтборДетальныхЗаписей();

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКлючевыеПоляДетальныхЗаписей(Команда)
	
	УстановитьВидимостьКлючевыхПолейДетальныхЗаписей(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьКлючевыеПоляДетальныхЗаписей(Команда)
	
	УстановитьВидимостьКлючевыхПолейДетальныхЗаписей(Ложь);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Партнер = ПартнерКонтрагента(Объект.Контрагент);
	
	Объект.РуководительОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	Объект.ГлавныйБухгалтерОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	Объект.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если НЕ ЭтоСверкаМеждуОрганизациями Тогда
			ДанныеДокумента = Документы.СверкаВзаиморасчетов2_5_11.РеквизитыПоследнегоДокумента(Объект.Контрагент);
			ЗаполнитьЗначенияСвойств(Объект,ДанныеДокумента,,"ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента, КонтактноеЛицо");
			
			Если НЕ ЗначениеЗаполнено(Объект.ФИОРуководителяКонтрагента)
					И НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителяКонтрагента) Тогда
			 	ЗаполнитьЗначенияСвойств(Объект, ДанныеДокумента, "ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо)
					ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо,"Владелец") <> Партнер Тогда
				Если ЗначениеЗаполнено(ДанныеДокумента.КонтактноеЛицо) Тогда
					Объект.КонтактноеЛицо = ДанныеДокумента.КонтактноеЛицо;
				Иначе
					Объект.КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Объект.Контрагент, Объект.Дата);
			Объект.РуководительОрганизацииКонтрагента = ОтветственныеЛица.РуководительСсылка;
			Объект.ГлавныйБухгалтерОрганизацииКонтрагента = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
			Объект.КонтактноеЛицо = Справочники.Пользователи.ПустаяСсылка();
			
		КонецЕсли;
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	Если ЭтоСверкаМеждуОрганизациями Тогда
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Объект.Контрагент, Объект.Дата);
			Объект.РуководительОрганизацииКонтрагента = ОтветственныеЛица.РуководительСсылка;
			Объект.ГлавныйБухгалтерОрганизацииКонтрагента = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
		КонецЕсли;
	Иначе
		Объект.РуководительОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
		Объект.ГлавныйБухгалтерОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КлючевойРеквизитПриИзмененииСервер(ДополнительныеПараметры)

	// отмена проведения
	Если ДополнительныеПараметры.НужноРаспровести Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
		РезультатЗаписи = Записать(ПараметрыЗаписи);
	Иначе
		РезультатЗаписи = Истина;
	КонецЕсли;
	
	Если НЕ РезультатЗаписи Тогда
		ОбщегоНазначения.СообщитьПользователю(НСтр("ru = 'Не удалось отменить проведение документа'"));
		ДополнительныеПараметры.НужноПерезаполнитьТЧ = Ложь;
		ДополнительныеПараметры.Отказ = Истина;
	КонецЕсли;

	// установка валюты при изменении связанных реквизитов
	Если ДополнительныеПараметры.Отказ = Ложь
		И (ДополнительныеПараметры.ИмяРеквизита = "Организация"
			ИЛИ (ДополнительныеПараметры.ИмяРеквизита = "СверкаВВалюте" И Объект.СверкаВВалюте = Ложь)) Тогда

		ВалютаРеглУчета = ЗначениеНастроекКлиентСерверПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		Объект.Валюта = ВалютаРеглУчета;
		Объект.СверкаВВалюте = Ложь;
		Элементы.Валюта.ТолькоПросмотр = НЕ Объект.СверкаВВалюте;

	КонецЕсли;
	
	Если ДополнительныеПараметры.ИмяРеквизита = "ЭтоСверкаМеждуОрганизациями" 
			И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.ИтоговыеЗаписи.Очистить();
		Объект.ДетальныеЗаписи.Очистить();
		ДополнительныеПараметры.НужноПерезаполнитьТЧ = Ложь;
	КонецЕсли;
	
	// проверка обязательных реквизитов
	Если ДополнительныеПараметры.НужноПерезаполнитьТЧ Тогда
		ШаблонОшибки = НСтр("ru = 'Поле ""%1"" не заполнено'");
		Отказ = Ложь;
		Для Каждого Элемент Из ДополнительныеПараметры.ПроверяемыеРеквизиты Цикл
			Если НЕ ЗначениеЗаполнено(Объект[Элемент.Ключ]) Тогда
				ТекстОшибки = СтрШаблон(ШаблонОшибки, Элемент.Значение);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, Элемент.Ключ, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			Объект.ИтоговыеЗаписи.Очистить();
			Объект.ДетальныеЗаписи.Очистить();
			ДополнительныеПараметры.НужноПерезаполнитьТЧ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// заполнение табличных частей
	Если ДополнительныеПараметры.НужноПерезаполнитьТЧ Тогда
		Объект.ИтоговыеЗаписи.Очистить();
		Объект.ДетальныеЗаписи.Очистить();
		ЗаполнитьПоОстаткамСервер();
	КонецЕсли; 
	
	Если ДополнительныеПараметры.Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	// вызываем стандартные серверные обработчики
	Если ДополнительныеПараметры.ИмяРеквизита = "Организация" Тогда 
		ОрганизацияПриИзмененииСервер();
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "Контрагент" Тогда 
		КонтрагентПриИзмененииСервер();
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "ЭтоСверкаМеждуОрганизациями" Тогда
		ЗаполнитьСписокВыбораТиповРасчета();
		Элементы.ГруппаДанныеОрганизацииКонтрагента.Видимость = ЭтоСверкаМеждуОрганизациями
			ИЛИ Строка(Объект.КонтактноеЛицо) <> Объект.ФИОРуководителяКонтрагента;
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "РежимСверкиИтоговВзаиморасчетов" Тогда
		УстановитьВидимостьОбъектаРасчетов();
	ИначеЕсли ДополнительныеПараметры.ИмяРеквизита = "Валюта" Тогда
		//
	КонецЕсли;
	
	ПриИзмененииКлючевыхРеквизитовСостояниеЭДО();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	Объект.РуководительОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	Объект.ГлавныйБухгалтерОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИтоговыеЗаписиПриИзмененииКлиент(ПересчетИтогов = Истина)
	
	ОчиститьСообщения();
	
	Если ПоказатьИтоговыеЗаписи Тогда	// Итоговые записи
		РассчитатьСуммовыеПоказателиИтоговыхЗаписейНаСервере();
		
		// Установка соответствующей строки итогов
		ИтоговаяЗапись = СтрокаИтоговойЗаписиПоДетальнойЗаписи();
		
		Если ИтоговаяЗапись <> Неопределено Тогда
			Элементы.ИтоговыеЗаписи.ТекущаяСтрока = ИтоговаяЗапись.ПолучитьИдентификатор();
		КонецЕсли;
		
		УстановитьОтборИтоговыхЗаписей();
	Иначе // Детальные записи
		
		ИтоговаяЗапись = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
		
		Если ИтоговаяЗапись = Неопределено Тогда
			ПоказатьИтоговыеЗаписи = Истина;
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Переход к детальным записям невозможен, т.к. не выбрана итоговая запись.'"), , "ПоказатьИтоговыеЗаписи");
			Возврат;
		КонецЕсли;
		
		// Отборы сбрасываются при переходе к детальным записям
		ФильтрСопоставленияДетальныеЗаписи = 0;
		ФильтрДтКт = 0;
		
		УстановитьСписокВыбораОтбораРасчетов();
		УстановитьСтрокуОтбораРасчетовПоИтоговойЗаписи();
		ПоказатьИнформациюПоОтборуРасчетов();
		УстановитьВидимостьКомандОбъединенияСтрок();
		ВывестиКлючевыеПоля();
		УстановитьОтборДетальныхЗаписей();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасчетыПриИзмененииКлиент()
	
	ПоказатьИнформациюПоОтборуРасчетов();
	УстановитьВидимостьКомандОбъединенияСтрок();
	ВывестиКлючевыеПоля();
	УстановитьОтборДетальныхЗаписей();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзмененииКлиент()
	
	УстановитьПоясняющуюНадписьСтатуса();
	УстановитьДоступностьЭлементовПоСтатусу();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент)
	Отказ = Ложь;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),
			,
			"Организация",
			"Объект",
			Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект",
			Отказ);
	КонецЕсли;
	Если НЕ Отказ Тогда
		Отбор = ОтборПоискаДоговора();
		ТипРасчетов = Элемент.Родитель.ТекущиеДанные.ТипРасчетов;
		Если ЭтоСверкаМеждуОрганизациями Тогда
			ОткрытьФорму(
				"Справочник.ДоговорыМеждуОрганизациями.ФормаВыбора",
				Новый Структура("Отбор", Отбор),
				Элемент);
		ИначеЕсли ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором")
				ИЛИ ТипРасчетов = ПредопределенноеЗначение("Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором") Тогда
			ОткрытьФорму(
				"Справочник.ДоговорыКредитовИДепозитов.ФормаВыбора",
				Новый Структура("Отбор", Отбор),
				Элемент);
		Иначе
			ОткрытьФорму(
				"Справочник.ДоговорыКонтрагентов.ФормаВыбора",
				Новый Структура("Отбор", Отбор),
				Элемент);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ОтборПоискаДоговора()
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Если ЭтоСверкаМеждуОрганизациями Тогда
		Отбор.Вставить("ОрганизацияПолучатель", Объект.Контрагент);
	Иначе
		Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Возврат Отбор;
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиНаименованиеДокумента");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиНомерДокумента");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиДатаДокумента");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаДебет");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаКредит");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаДокумента");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаДолг");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаАванс");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписи.ТипРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	
	ТипРасчетовФинИнструменты = Новый СписокЗначений;
	ТипРасчетовФинИнструменты.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
	ТипРасчетовФинИнструменты.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
	ТипРасчетовФинИнструменты.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем);
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаДолг");
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ДетальныеЗаписиСуммаАванс");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписи.ТипРасчетов");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ТипРасчетовФинИнструменты;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не заполняется>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	//
	
	УстановитьОформлениеПоясняющегоПоля("ИтоговыеЗаписи", "Организация");
	УстановитьОформлениеПоясняющегоПоля("ИтоговыеЗаписи", "Контрагент");
	УстановитьОформлениеПоясняющегоПоля("ДетальныеЗаписи", "Организация");
	УстановитьОформлениеПоясняющегоПоля("ДетальныеЗаписи", "Контрагент");

	//

	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "НомерДоговора");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "ДатаДоговора");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "НаименованиеДоговора");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "НачальноеСальдоДт");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "НачальноеСальдоКт");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "ОборотДт");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "ОборотКт");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "КонечноеСальдоДт");
	УстановитьОформлениеПоляПоказателя("ИтоговыеЗаписи", "КонечноеСальдоКт");

	//

	УстановитьОформлениеПоляПоказателя("ДетальныеЗаписи", "НомерДокумента");
	УстановитьОформлениеПоляПоказателя("ДетальныеЗаписи", "ДатаДокумента");
	УстановитьОформлениеПоляПоказателя("ДетальныеЗаписи", "НаименованиеДокумента");
	УстановитьОформлениеПоляПоказателя("ДетальныеЗаписи", "СуммаДебет");
	УстановитьОформлениеПоляПоказателя("ДетальныеЗаписи", "СуммаКредит");

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоясняющегоПоля(ТипЗаписей, ИмяПоля)

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы[ТипЗаписей + ИмяПоля].Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИмяПоляКомпоновкиДанных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.%1.%2", ТипЗаписей, ИмяПоля);
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,,Истина));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ИмяПоля + ":");

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеПоляПоказателя(ТипЗаписей, ИмяПоля)

	Элемент = УсловноеОформление.Элементы.Добавить();

	Постфикс = "Контрагент";

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТипЗаписей + ИмяПоля + Постфикс);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ИмяПоляКомпоновкиДанных = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Объект.%1.%2", ТипЗаписей, ИмяПоля);
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоляКомпоновкиДанных + Постфикс);

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ПросроченныеДанныеЦвет);

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу()
	
	ТолькоПросмотрЭлементов = (Объект.Статус = Перечисления.СтатусыСверокВзаиморасчетов2_5_11.СверенаБезРазногласий);
	
	МассивЭлементов = Новый Массив();
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("НачалоПериода");
	МассивЭлементов.Добавить("КонецПериода");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("ЕстьРасхождения");
	МассивЭлементов.Добавить("НастройкиФильтров");
	МассивЭлементов.Добавить("ФормаЗаполнить");
		
	// Группы элементов управления
	МассивЭлементов.Добавить("СтраницаОсновное");
	МассивЭлементов.Добавить("ЗаписиРасчеты");
	МассивЭлементов.Добавить("ИтоговыеЗаписиОбъединитьЗаписи");
	МассивЭлементов.Добавить("ИтоговыеЗаписиРазъединитьЗаписи");
	МассивЭлементов.Добавить("ДетальныеЗаписиОбъединитьЗаписи");
	МассивЭлементов.Добавить("ДетальныеЗаписиРазъединитьЗаписи");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив();
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("РасчетыКомандаЗаполнитьПоОстаткам");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ТолькоПросмотрЭлементов);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;

	Элементы.ШапкаДетальныеЗаписи.Видимость = НЕ ПоказатьИтоговыеЗаписи;
	Элементы.ШапкаДетальныеЗаписи.Доступность =
		НЕ ВзаиморасчетыКлиентСервер.ЕстьНесопоставленныеЗаписи(Объект.ИтоговыеЗаписи);

	Если ПоказатьИтоговыеЗаписи Тогда
		Элементы.ЗаписиРасчеты.ТекущаяСтраница = Элементы.СтраницаИтоговыеЗаписи;
	Иначе
		Элементы.ЗаписиРасчеты.ТекущаяСтраница = Элементы.СтраницаДетальныеЗаписи;
	КонецЕсли;

	Элементы.ГлавныйБухгалтер.Видимость = Объект.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
	Элементы.Руководитель.Видимость = НЕ Элементы.ГлавныйБухгалтер.Видимость;
	Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость = Объект.ОтветственноеЛицоОрганизацииКонтрагента = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
	Элементы.РуководительОрганизацииКонтрагента.Видимость = НЕ Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоказатьТипРасчетов", НЕ Объект.РазбиватьПоТипамРасчетов);
	СтруктураПараметров.Вставить("ПоказатьДоговор", НЕ Объект.РазбиватьПоДоговорам);
	
	Документы.СверкаВзаиморасчетов2_5_11.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		СтруктураПараметров, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);

	ВедетсяУчетПоДоговорам = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыМеждуОрганизациями")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов")
			И ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКредитовИДепозитов);

	Если НЕ ВедетсяУчетПоДоговорам Тогда
		Элементы.ИтоговыеЗаписиДоговор.Видимость = Ложь;
		Элементы.ДетальныеЗаписиДоговор.Видимость = Ложь;
	КонецЕсли;

	УстановитьВидимостьПартнера();
	УстановитьВидимостьРеквизитовКонтрагента();
	УстановитьВидимостьОбъектаРасчетов();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовКонтрагента()

	РеквизитыПоДаннымКонтрагента = Новый Массив;
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиСтороныСверки");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиНаименованиеДоговораКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиНомерДоговораКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиДатаДоговораКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиНачальноеСальдоДтКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиНачальноеСальдоКтКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиОборотДтКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиОборотКтКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиКонечноеСальдоДтКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиКонечноеСальдоКтКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиГруппаСторонаСверки");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиНаименованиеДокументаКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиНомерДокументаКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиДатаДокументаКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиСуммаДебетКонтрагент");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиСуммаКредитКонтрагент");

	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиГруппаОбъединить");
	РеквизитыПоДаннымКонтрагента.Добавить("ИтоговыеЗаписиРасчетыФильтрСопоставления");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиГруппаОбъединить");
	РеквизитыПоДаннымКонтрагента.Добавить("ДетальныеЗаписиГруппаФильтрСопоставления");

	Если Объект.ЕстьРасхождения Тогда
		ВидимыеРеквизиты = РеквизитыПоДаннымКонтрагента;
	Иначе
		ВидимыеРеквизиты = Новый Массив;
	КонецЕсли;

	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		РеквизитыПоДаннымКонтрагента,
		ВидимыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОбъектаРасчетов()
	
	СверкаПоОбъектамРасчетов = Объект.РежимСверкиИтоговВзаиморасчетов = Перечисления.РежимСверкиИтоговВзаиморасчетов.ПоОбъектамРасчетов;
	Элементы.ИтоговыеЗаписиОбъектРасчетов.Видимость = СверкаПоОбъектамРасчетов;
	Элементы.ДетальныеЗаписиОбъектРасчетов.Видимость = СверкаПоОбъектамРасчетов;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПартнера()
	
	СверкаПоОбъектамРасчетов = Объект.РежимСверкиИтоговВзаиморасчетов = Перечисления.РежимСверкиИтоговВзаиморасчетов.ПоОбъектамРасчетов;
	ПоказатьПартнераТЧ = СверкаПоОбъектамРасчетов И НЕ Объект.РазбиватьПоПартнерам;
	Элементы.ГруппаПартнер.Видимость = Объект.РазбиватьПоПартнерам;
	
	Элементы.ИтоговыеЗаписиПартнер.Видимость = ПоказатьПартнераТЧ;
	Элементы.ДетальныеЗаписиПартнер.Видимость = ПоказатьПартнераТЧ;
	Если НЕ Объект.РазбиватьПоПартнерам Тогда
		Для Каждого Запись Из Объект.ИтоговыеЗаписи Цикл
			Если ЗначениеЗаполнено(Запись.Партнер) Тогда
				Элементы.ИтоговыеЗаписиПартнер.Видимость = Истина;
				Элементы.ДетальныеЗаписиПартнер.Видимость = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Элементы.Валюта.ТолькоПросмотр = НЕ Объект.СверкаВВалюте;
	Элементы.ЕстьРасхождения.Доступность = НЕ ДокументУчаствуетВЭДО;
	УстановитьВидимость();
	УстановитьДоступностьЭлементовПоСтатусу();
	
	Элементы.ГруппаДанныеОрганизацииКонтрагента.Видимость = ЭтоСверкаМеждуОрганизациями;
	
	МассивПараметров = Новый Массив;
	Если ЭтоСверкаМеждуОрганизациями Тогда
		ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ТипДоговоры = Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями");
	Иначе
		ТипКонтрагент = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ДоговораСКонтрагентами = Новый Массив;
		ДоговораСКонтрагентами.Добавить("СправочникСсылка.ДоговорыКонтрагентов");
		ДоговораСКонтрагентами.Добавить("СправочникСсылка.ДоговорыКредитовИДепозитов");
		ДоговораСКонтрагентами.Добавить("СправочникСсылка.ДоговорыАренды");
		ТипДоговоры = Новый ОписаниеТипов(ДоговораСКонтрагентами);
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Партнер"));
	КонецЕсли;
	Элементы.Контрагент.ОграничениеТипа = ТипКонтрагент;
	Элементы.ИтоговыеЗаписиДоговор.ОграничениеТипа = ТипДоговоры;
	Элементы.ДетальныеЗаписиДоговор.ОграничениеТипа = ТипДоговоры;
	Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.НастройкиОтбора = Новый ХранилищеЗначения(КомпоновщикОтбор.ПолучитьНастройки());
	Документы.СверкаВзаиморасчетов2_5_11.ЗаполнитьДанныеПоРасчетам(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	Объект.ЕстьРасхождения = Ложь;
	УстановитьВидимостьРеквизитовКонтрагента();
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчеты;
	
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыИтоговыхЗаписей(Объект.ИтоговыеЗаписи, Объект.ЕстьРасхождения);
	ВзаиморасчетыКлиентСервер.РассчитатьРеквизитыФормыДетальныхЗаписей(Объект.ДетальныеЗаписи, Объект.ЕстьРасхождения);
	ВзаиморасчетыКлиентСервер.ОбновитьСостояниеСверкиВФорме(ЭтотОбъект);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПартнерКонтрагента(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Справочники.Партнеры.НашеПредприятие;
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФИОРуководителяКонтактноеЛицоНачалоВыбора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Отбор = Новый Структура("Владелец", Партнер);
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",
			Новый Структура("Отбор", Отбор),
			ЭтотОбъект);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолжностьПоВыбранномуЗначению(КонтактноеЛицо)
	Объект.ДолжностьРуководителяКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо,"ДолжностьПоВизитке");
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаСервере
Процедура УстановитьСписокВыбораОтбораРасчетов()

	СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
	Если СверкаПоДоговорам Тогда
		ПоляОтбора = "ТипРасчетов, Партнер, Договор";
	Иначе
		ПоляОтбора = "ОбъектРасчетов";
	КонецЕсли;

	СписокВыбора = Элементы.ОтборРасчеты.СписокВыбора;
	СписокВыбора.Очистить();

	Если НЕ ВзаиморасчетыКлиентСервер.ЕстьНесопоставленныеЗаписи(Объект.ИтоговыеЗаписи) Тогда
		ВсеЗначенияОтбора = Объект.ИтоговыеЗаписи.Выгрузить(, ПоляОтбора);
		ВсеЗначенияОтбора.Свернуть(ПоляОтбора);
		ЗначенияОтбораРасчетов.Загрузить(ВсеЗначенияОтбора);
		Если СверкаПоДоговорам Тогда
			// Подсчет количества договоров
			ВсеЗначенияОтбора.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
			ВсеЗначенияОтбора.ЗаполнитьЗначения(1, "Количество");
			ВсеЗначенияОтбора.Свернуть("Договор", "Количество");

			Договоры = ВсеЗначенияОтбора.ВыгрузитьКолонку("Договор");
			Результат = Договоры.Найти(Неопределено);
			Если Результат <> Неопределено Тогда
				Договоры.Удалить(Результат);
			КонецЕсли;
			НаименованияДоговоров = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Договоры, "Наименование");

			Для каждого СтрокаОбъектаОтбора Из ЗначенияОтбораРасчетов Цикл
				Если ЗначениеЗаполнено(СтрокаОбъектаОтбора.Договор) Тогда
					НаименованияДоговоров.Получить(СтрокаОбъектаОтбора.Договор);
					СтрокаОбъектаОтбора.Представление = НаименованияДоговоров[СтрокаОбъектаОтбора.Договор].Наименование;
				Иначе
					СтрокаОбъектаОтбора.Представление = НСтр("ru = 'Пустой договор'");
				КонецЕсли;

				Постфикс = "";
				СтрокаДоговора = ВсеЗначенияОтбора.Найти(СтрокаОбъектаОтбора.Договор, "Договор");
				Если СтрокаДоговора <> Неопределено И СтрокаДоговора.Количество > 1 Тогда
					Если СтрокаОбъектаОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом Тогда
						Постфикс = НСтр("ru = ' с клиентом'");
					ИначеЕсли СтрокаОбъектаОтбора.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
						Постфикс = НСтр("ru = ' с поставщиком'");
					КонецЕсли;
				КонецЕсли;
				СтрокаОбъектаОтбора.Представление = СтрокаОбъектаОтбора.Представление + Постфикс;
				Если Не ЗначениеЗаполнено(СтрокаОбъектаОтбора.Договор) Тогда
					СтрокаОбъектаОтбора.Представление = "<" + СтрокаОбъектаОтбора.Представление + ">";
				КонецЕсли;
				СписокВыбора.Добавить(СтрокаОбъектаОтбора.ПолучитьИдентификатор(), СтрокаОбъектаОтбора.Представление);
			КонецЦикла;	
		Иначе
			Для каждого СтрокаОбъектаОтбора Из ЗначенияОтбораРасчетов Цикл
				Если ЗначениеЗаполнено(СтрокаОбъектаОтбора[ПоляОтбора]) Тогда
					СтрокаОбъектаОтбора.Представление = СтрокаОбъектаОтбора[ПоляОтбора];
				Иначе
					СтрокаОбъектаОтбора.Представление = НСтр("ru = '<Без объекта расчета>'");
				КонецЕсли;
				СписокВыбора.Добавить(СтрокаОбъектаОтбора.ПолучитьИдентификатор(), СтрокаОбъектаОтбора.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	СписокВыбора.СортироватьПоПредставлению();
	СписокВыбора.Вставить(0, -1, НСтр("ru = '<Отбор не установлен>'"));

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРасширенногоОтбора()
	
	ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
	Если ОтборДоговорыБезОборотов = Неопределено Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов", Истина);
		ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
		ОтборДоговорыБезОборотов.Представление = НСтр("ru = 'Включать договора без оборотов в периоде'");
	КонецЕсли;
	
	Равно = ВидСравненияКомпоновкиДанных.Равно;
	ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Организация", Объект.Организация, Равно);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер", Партнер, Равно);
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент",,, Ложь);
		Иначе
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент", Объект.Контрагент, Равно);
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер",,, Ложь);
		КонецЕсли;
	Иначе
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Контрагент", Объект.Контрагент, Равно);
	КонецЕсли;
	Если Объект.РазбиватьПоТипамРасчетов Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ТипРасчетов", Объект.ТипРасчетов, Равно);
	КонецЕсли;
	Если Объект.РазбиватьПоПартнерам Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер", Объект.Партнер, Равно);
	КонецЕсли;
	Если Объект.РазбиватьПоДоговорам Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Договор", Объект.Договор, Равно);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
	ПараметрыОткрытия.Вставить("СкрыватьСлужебныеОтборы", Истина);
	ПараметрыОткрытия.Вставить("ЗаголовокКнопкиПоУмолчанию", НСтр("ru='Заполнить'"));
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРасширенныйОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборыНаСервере(Результат.НастройкиОтбора);
	ЗаполнитьПоОстаткамПоОтбору();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыНаСервере(Знач НастройкиОтбора)
	
	Модифицированность = НЕ КомпоновкаДанныхКлиентСервер.ИспользуемыеОтборыРавны(КомпоновщикОтбор.Настройки, НастройкиОтбора);
	
	КонтрагентДоИзменения = Объект.Контрагент;
	
	УстановитьРеквизитПоЗначениюОтбора("ТипРасчетов", НастройкиОтбора);
	УстановитьРеквизитПоЗначениюОтбора("Партнер", НастройкиОтбора);
	УстановитьРеквизитПоЗначениюОтбора("Договор", НастройкиОтбора);
	Если ИспользоватьНесколькоОрганизаций Тогда
		УстановитьРеквизитПоЗначениюОтбора("Организация", НастройкиОтбора);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтбора.Отбор,"Партнер",,ВидСравненияКомпоновкиДанных.Равно);
		Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
			Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ЭлементОтбора.ПравоеЗначение);
			Объект.Контрагент = Контрагент; 
		Иначе
			ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтбора.Отбор,"ОрганизацияКонтрагент",,ВидСравненияКомпоновкиДанных.Равно);
			Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
				Объект.Контрагент = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		УстановитьРеквизитПоЗначениюОтбора("Контрагент", НастройкиОтбора);
	КонецЕсли;
	
	КомпоновщикОтбор.ЗагрузитьНастройки(НастройкиОтбора);
	
	Если КонтрагентДоИзменения <> Объект.Контрагент Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитПоЗначениюОтбора(ИмяРеквизита, НастройкиОтбора)
	
	Объект[ИмяРеквизита] = Неопределено;
	Если ИмяРеквизита = "ТипРасчетов" Тогда
		Объект["РазбиватьПоТипамРасчетов"] = Ложь;
		
	ИначеЕсли ИмяРеквизита = "Партнер" Тогда
		Объект["РазбиватьПоПартнерам"] = Ложь;
		
	ИначеЕсли ИмяРеквизита = "Договор" Тогда
		Объект["РазбиватьПоДоговорам"] = Ложь;
		
	КонецЕсли;
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтбора.Отбор,ИмяРеквизита,,ВидСравненияКомпоновкиДанных.Равно);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ТипРасчетов" Тогда
		Объект["РазбиватьПоТипамРасчетов"] = ЭлементОтбора.Использование;
		
	ИначеЕсли ИмяРеквизита = "Партнер" Тогда
		Объект["РазбиватьПоПартнерам"] = ЭлементОтбора.Использование;
		
	ИначеЕсли ИмяРеквизита = "Договор" Тогда
		Объект["РазбиватьПоДоговорам"] = ЭлементОтбора.Использование;
		
	КонецЕсли;
		
	Если ЭлементОтбора.Использование Тогда
		Объект[ИмяРеквизита] = ЭлементОтбора.ПравоеЗначение;
	Иначе
		ЭлементОтбора.ПравоеЗначение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновлениеНеЗавершено()
	
	Возврат НЕ ВзаиморасчетыСервер.ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(Истина);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииКлючевыхРеквизитовСостояниеЭДО()
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ПараметрыПриИзменении = ОбменСКонтрагентами.ПараметрыПриИзмененииКлючевыхРеквизитовЭДО();
	
	ПараметрыПриИзменении.Форма                 = ЭтотОбъект;
	ПараметрыПриИзменении.ДокументСсылка        = Объект.Ссылка;
	ПараметрыПриИзменении.ДокументОбъект        = РеквизитФормыВЗначение("Объект");
	ПараметрыПриИзменении.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПриИзменении.ГруппаСостояниеЭДО    = Элементы.ГруппаСостояниеЭДО;
	
	ОбменСКонтрагентами.ПриИзмененииКлючевыхРеквизитовЭДО(ПараметрыПриИзменении);
	
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПредыдущиеЗначения()

	ПредыдущиеЗначения = Новый Структура();
	ПредыдущиеЗначения.Вставить("Организация", Объект.Организация);
	ПредыдущиеЗначения.Вставить("Контрагент", Объект.Контрагент);
	ПредыдущиеЗначения.Вставить("РежимСверкиИтоговВзаиморасчетов", Объект.РежимСверкиИтоговВзаиморасчетов);
	ПредыдущиеЗначения.Вставить("Валюта", Объект.Валюта);
	ПредыдущиеЗначения.Вставить("СверкаВВалюте", Объект.СверкаВВалюте);
	ПредыдущиеЗначения.Вставить("ЭтоСверкаМеждуОрганизациями", ЭтоСверкаМеждуОрганизациями);
	ПредыдущиеЗначения.Вставить("ТипРасчетов");
	ПредыдущиеЗначения.Вставить("Партнер");
	ПредыдущиеЗначения.Вставить("Договор");
	ПредыдущиеЗначения.Вставить("ОбъектРасчетов");
	ПредыдущиеЗначения.Вставить("ВнешнийКонтрагент");
	ПредыдущиеЗначения.Вставить("КонтрагентНашаОрганизация");
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПредыдущиеЗначения.ВнешнийКонтрагент = Объект.Контрагент;
	ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ПредыдущиеЗначения.КонтрагентНашаОрганизация = Объект.Контрагент;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораТиповРасчета()
	
	СписокВыбора = Элементы.ИтоговыеЗаписиТипРасчетов.СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Если НЕ ЭтоСверкаМеждуОрганизациями Тогда
		СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
		СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
		СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

&НаКлиенте
Асинх Процедура УстановитьСтатусСверки(ИмяСтатуса)

	Статус = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11." + ИмяСтатуса);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='У документа будет установлен статус ""%1"". Продолжить?'"),
		Статус);
	Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Статус = Статус;
		СтатусПриИзмененииКлиент();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммовыеПоказателиИтоговыхЗаписейНаСервере()

	СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = Перечисления.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам;

	КолонкиГруппировок = "ТипРасчетов, Партнер, Договор, ОбъектРасчетов";
	КолонкиСуммирования = "СуммаДебет, СуммаДебетКонтрагент, СуммаКредит, СуммаКредитКонтрагент";
	ДанныеДетальныхЗаписей = Объект.ДетальныеЗаписи.Выгрузить(, КолонкиГруппировок + ", " + КолонкиСуммирования);
	ДанныеДетальныхЗаписей.Свернуть(КолонкиГруппировок, КолонкиСуммирования);

	Для каждого ИтоговаяЗапись Из Объект.ИтоговыеЗаписи Цикл
		Если ИтоговаяЗапись.ЕстьДанныеОрганизации Тогда
			ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоДтКт(ИтоговаяЗапись, ДанныеДетальныхЗаписей, СверкаПоДоговорам);
			ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоДтКт(ИтоговаяЗапись, ДанныеДетальныхЗаписей, СверкаПоДоговорам, Истина);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборИтоговыхЗаписей()

	Элементы.ИтоговыеЗаписиВсе.Пометка = ФильтрСопоставленияИтоговыеЗаписи = 0;
	Элементы.ИтоговыеЗаписиНесопоставленные.Пометка = ФильтрСопоставленияИтоговыеЗаписи = 1;
	Элементы.ИтоговыеЗаписиРасхождения.Пометка = ФильтрСопоставленияИтоговыеЗаписи = 2;

	ПараметрыОтбора = Новый Структура();
	Если ФильтрСопоставленияИтоговыеЗаписи > 0 Тогда
		ПараметрыОтбора.Вставить("ТипРасхождений", ФильтрСопоставленияИтоговыеЗаписи);
	КонецЕсли;

	Если ПараметрыОтбора.Количество() Тогда
		Элементы.ИтоговыеЗаписи.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	Иначе
		Элементы.ИтоговыеЗаписи.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДетальныхЗаписей()

	Элементы.ДетальныеЗаписиВсе.Пометка = ФильтрСопоставленияДетальныеЗаписи = 0;
	Элементы.ДетальныеЗаписиНесопоставленные.Пометка = ФильтрСопоставленияДетальныеЗаписи = 1;
	Элементы.ДетальныеЗаписиРасхождения.Пометка = ФильтрСопоставленияДетальныеЗаписи = 2;

	ПараметрыОтбора = Новый Структура();
	Элементы.ПоказатьВсе.Пометка = ФильтрДтКт = 0;
	Элементы.ПоказатьДебет.Пометка = ФильтрДтКт = 1;
	Элементы.ПоказатьКредит.Пометка = ФильтрДтКт = 2;

	Если ФильтрСопоставленияДетальныеЗаписи > 0 Тогда
		ПараметрыОтбора.Вставить("ТипРасхождений", ФильтрСопоставленияДетальныеЗаписи);
	КонецЕсли;
	Если ФильтрДтКт = 1 Тогда
		ПараметрыОтбора.Вставить("ЕстьОборотДт", Истина);
	ИначеЕсли ФильтрДтКт = 2 Тогда
		ПараметрыОтбора.Вставить("ЕстьОборотКт", Истина);
	КонецЕсли;

	Если ОтборРасчеты <> -1
		И НЕ ВзаиморасчетыКлиентСервер.ЕстьНесопоставленныеЗаписи(Объект.ИтоговыеЗаписи) Тогда

		СтрокаОтбораРасчетов = ЗначенияОтбораРасчетов.НайтиПоИдентификатору(ОтборРасчеты);
		Если СтрокаОтбораРасчетов <> Неопределено Тогда
			СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
			Если СверкаПоДоговорам Тогда
				ПараметрыОтбора.Вставить("ТипРасчетов", СтрокаОтбораРасчетов.ТипРасчетов);
				ПараметрыОтбора.Вставить("Партнер", СтрокаОтбораРасчетов.Партнер);
				ПараметрыОтбора.Вставить("Договор", СтрокаОтбораРасчетов.Договор);
			Иначе
				ПараметрыОтбора.Вставить("ОбъектРасчетов", СтрокаОтбораРасчетов.ОбъектРасчетов);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ПараметрыОтбора.Количество() Тогда
		Элементы.ДетальныеЗаписи.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	Иначе
		Элементы.ДетальныеЗаписи.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СтрокаИтоговойЗаписиПоДетальнойЗаписи()

	СтрокаДетальнойЗаписи = Элементы.ДетальныеЗаписи.ТекущиеДанные;

	Если СтрокаДетальнойЗаписи = Неопределено
	Или НЕ СтрокаДетальнойЗаписи.ЕстьДанныеОрганизации Тогда
		Возврат Неопределено;
	КонецЕсли;

	Отбор = Новый Структура(КлючевыеРеквизиты);
	ЗаполнитьЗначенияСвойств(Отбор, СтрокаДетальнойЗаписи, КлючевыеРеквизиты);
	РезультатПоиска = Объект.ИтоговыеЗаписи.НайтиСтроки(Отбор);
	Если РезультатПоиска.Количество() = 1 Тогда
		Возврат РезультатПоиска[0];
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

&НаКлиенте
Процедура УстановитьСтрокуОтбораРасчетовПоИтоговойЗаписи()

	ИтоговаяЗапись = Элементы.ИтоговыеЗаписи.ТекущиеДанные;
	Если ИтоговаяЗапись = Неопределено ИЛИ НЕ ИтоговаяЗапись.ЕстьДанныеОрганизации Тогда
		ОтборРасчеты = -1;
		Возврат;
	КонецЕсли;

	Если ВзаиморасчетыКлиентСервер.ЕстьНесопоставленныеЗаписи(Объект.ИтоговыеЗаписи) Тогда
		ОтборРасчеты = -1;
		Возврат;
	КонецЕсли;

	СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
	Если СверкаПоДоговорам Тогда
		ПоляОтбора = "ТипРасчетов, Партнер, Договор";
	Иначе
		ПоляОтбора = "ОбъектРасчетов";
	КонецЕсли;

	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ИтоговаяЗапись, ПоляОтбора);
	Результат = ЗначенияОтбораРасчетов.НайтиСтроки(ПараметрыОтбора);
	Если Результат.Количество() = 1 Тогда
		ОтборРасчеты = Результат[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция СтрокаИтоговойЗаписиПоОтборуРасчетов()

	Если ОтборРасчеты = -1 Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтрокаОтбораРасчетов = ЗначенияОтбораРасчетов.НайтиПоИдентификатору(ОтборРасчеты);
	Если СтрокаОтбораРасчетов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
	Если СверкаПоДоговорам Тогда
		ПоляОтбора = "ТипРасчетов, Партнер, Договор";
	Иначе
		ПоляОтбора = "ОбъектРасчетов";
	КонецЕсли;

	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаОтбораРасчетов, ПоляОтбора);
	РезультатПоиска = Объект.ИтоговыеЗаписи.НайтиСтроки(ПараметрыОтбора);
	Если РезультатПоиска.Количество() = 1 Тогда
		Возврат РезультатПоиска[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура ПоказатьИнформациюПоОтборуРасчетов()

	ИтоговаяЗапись = СтрокаИтоговойЗаписиПоОтборуРасчетов();
	Если ИтоговаяЗапись = Неопределено ИЛИ НЕ ИтоговаяЗапись.ЕстьДанныеОрганизации Тогда
		ДеталиОтбора = "";
		Возврат;
	КонецЕсли;

	РеквизитыДеталей = Новый Массив;
	Если ЗначениеЗаполнено(ИтоговаяЗапись.ТипРасчетов) Тогда
		РеквизитыДеталей.Добавить(ИтоговаяЗапись.ТипРасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИтоговаяЗапись.Партнер) Тогда
		РеквизитыДеталей.Добавить(ИтоговаяЗапись.Партнер);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИтоговаяЗапись.Договор) Тогда
		РеквизитыДеталей.Добавить(ИтоговаяЗапись.Договор);
	КонецЕсли;

	Если РеквизитыДеталей.Количество() Тогда
		ДеталиОтбора = СтрСоединить(РеквизитыДеталей, ";");
	Иначе
		ДеталиОтбора = "";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоясняющуюНадписьСтатуса()

	ТекстНадписи = "";
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.НаСверке") Тогда
		ТекстНадписи = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр(
		"ru = 'Выполните сверку и установите статус ""<a href = ""%1"">Сверена без разногласий</a>"" или ""<a href = ""%2"">Сверена с разногласиями</a>"" или ""<a href = ""%3"">Отклонена</a>""'"),
		"СверенаБезРазногласий",
		"СверенаСРазногласиями",
		"Отклонена");
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыСверокВзаиморасчетов2_5_11.Создана") Тогда
		ТекстНадписи = СтроковыеФункцииКлиент.ФорматированнаяСтрока(НСтр(
		"ru = 'Отправьте акт сверки контрагенту и установите статус ""<a href = ""%1"">На сверке</a>""'"),
		"НаСверке");
	КонецЕсли;

	Элементы.ДекорацияПоясняющаяНадпись.Заголовок = ТекстНадписи;

КонецПроцедуры

&НаКлиенте
Асинх Процедура КлючевойРеквизитПриИзменении(ИмяРеквизита)
	
	ДополнительныеПараметры = ПараметрыПриИзмененииКлючевыхРеквизитов(ИмяРеквизита);
	Ответ = КодВозвратаДиалога.Да;
	Если НЕ ПустаяСтрока(ДополнительныеПараметры.ТекстВопроса) Тогда
		Ответ = Ждать ВопросАсинх(ДополнительныеПараметры.ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.НужноРаспровести = Ложь;
		ДополнительныеПараметры.НужноПерезаполнитьТЧ = Ложь;
		ДополнительныеПараметры.Отказ = Истина;
		Модифицированность = Ложь;
	Иначе
		Если ИмяРеквизита = "ЭтоСверкаМеждуОрганизациями" Тогда
			Если ЭтоСверкаМеждуОрганизациями Тогда
				Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
				Объект.Контрагент = ПредыдущиеЗначения.КонтрагентНашаОрганизация;
			Иначе
				Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
				Объект.Контрагент = ПредыдущиеЗначения.ВнешнийКонтрагент;
			КонецЕсли;
		КонецЕсли;
		КлючевойРеквизитПриИзмененииСервер(ДополнительныеПараметры);
	КонецЕсли;
	
	Если ДополнительныеПараметры.НужноПерезаполнитьТЧ Тогда
		ТекстСообщения = НСтр("ru = 'Табличная часть ""Взаиморасчеты"" заполнена.'");
		ПоказатьОповещениеПользователя(ТекстСообщения,,, БиблиотекаКартинок.Информация32);
		ПоказатьИтоговыеЗаписи = Истина;
		ПоказатьИтоговыеЗаписиПриИзмененииКлиент();
	КонецЕсли; 
	
	Если ДополнительныеПараметры.Отказ Тогда
		Если ИмяРеквизита = "ЭтоСверкаМеждуОрганизациями" Тогда
			ЭтоСверкаМеждуОрганизациями = ПредыдущиеЗначения[ИмяРеквизита];
		Иначе
			Объект[ИмяРеквизита] = ПредыдущиеЗначения[ИмяРеквизита];
		КонецЕсли;
		Элементы.Валюта.ТолькоПросмотр = НЕ Объект.СверкаВВалюте;
	Иначе
		Если ИмяРеквизита = "ЭтоСверкаМеждуОрганизациями" Тогда
			ПредыдущиеЗначения.Вставить(ИмяРеквизита, ЭтоСверкаМеждуОрганизациями);
		Иначе
			ПредыдущиеЗначения.Вставить(ИмяРеквизита, Объект[ИмяРеквизита]);
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ДополнительныеПараметры.НужноРаспровести Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами   
		ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыПриИзмененииКлючевыхРеквизитов(ИмяРеквизита)
	
	Если ИмяРеквизита = "ЭтоСверкаМеждуОрганизациями" Тогда
		ЗначениеРеквизита = ЭтаФорма[ИмяРеквизита];
	Иначе
		ЗначениеРеквизита = Объект[ИмяРеквизита];
	КонецЕсли;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	ДополнительныеПараметры.Вставить("ЗначениеРеквизита", ЗначениеРеквизита);

	НужноПерезаполнитьТЧ = ЗначениеЗаполнено(ЗначениеРеквизита) 
		И (ЗначениеЗаполнено(Объект.ИтоговыеЗаписи) ИЛИ ЗначениеЗаполнено(Объект.ДетальныеЗаписи));
	НужноРаспровести = НужноПерезаполнитьТЧ И Объект.Проведен И ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(ЗначениеРеквизита);
	ТекстВопроса = "";
	Если НужноРаспровести И НужноПерезаполнитьТЧ Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение табличной части ""Взаиморасчеты"" возможно только в непроведенном документе.
			|Табличная часть будет перезаполнена. Отменить проведение и перезаполнить?'");
	ИначеЕсли НужноРаспровести И НЕ НужноПерезаполнитьТЧ Тогда
		ТекстВопроса = НСтр("ru = 'Заполнение табличной части ""Взаиморасчеты"" возможно только в непроведенном документе. Отменить проведение?'");
	ИначеЕсли НЕ НужноРаспровести И НужноПерезаполнитьТЧ Тогда
		ТекстВопроса = НСтр("ru = 'Табличная часть ""Взаиморасчеты"" будет перезаполнена, продолжить?'");
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("НужноРаспровести", НужноРаспровести);
	ДополнительныеПараметры.Вставить("НужноПерезаполнитьТЧ", НужноПерезаполнитьТЧ);
	ДополнительныеПараметры.Вставить("ТекстВопроса", ТекстВопроса);
	ДополнительныеПараметры.Вставить("Отказ", Ложь);
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения);
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	ПроверяемыеРеквизиты = Новый Структура;
	Если ИспользоватьНесколькоОрганизаций Тогда
		ПроверяемыеРеквизиты.Вставить("Организация", НСтр("ru = 'Организация'"));
	КонецЕсли;
	ПроверяемыеРеквизиты.Вставить("Контрагент", НСтр("ru = 'Контрагент'"));
	ПроверяемыеРеквизиты.Вставить("Валюта", НСтр("ru = 'Валюта'"));
	ПроверяемыеРеквизиты.Вставить("КонецПериода", НСтр("ru = 'Конец периода'"));
	ДополнительныеПараметры.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизиты);
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоОстаткамПоОтбору()
	
	ОчиститьСообщения();
	Если ОбновлениеНеЗавершено() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заполнение документа недоступно, т.к. не завершено обновление системы.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть          = Объект.ИтоговыеЗаписи;
	ПараметрыПроверки.ЗаголовокТабличнойЧасти = НСтр("ru = 'Взаиморасчеты'");
	Если ИспользоватьНесколькоОрганизаций Тогда
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация",  НСтр("ru = 'Организация'"));
	КонецЕсли;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Контрагент",   НСтр("ru = 'Контрагент'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("КонецПериода", НСтр("ru = 'Конец периода'"));
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтотОбъект, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПоказатьИтоговыеЗаписи = Истина;
	УстановитьВидимость(); 
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.СверкаВзаиморасчетов2_5_11.Форма.ФормаДокумента.Заполнить");
	
	Объект.ИтоговыеЗаписи.Очистить();
	Объект.ДетальныеЗаписи.Очистить();
	ЗаполнитьПоОстаткамСервер();
	
	ТекстСообщения = НСтр("ru = 'Табличная часть ""Взаиморасчеты"" заполнена.'");
	ПоказатьОповещениеПользователя(ТекстСообщения,,, БиблиотекаКартинок.Информация32);
	
	УстановитьОтборИтоговыхЗаписей();
	УстановитьОтборДетальныхЗаписей();

КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандОбъединенияСтрок()
	
	Элементы.ДетальныеЗаписиОбъединитьЗаписи.Видимость = ОтборРасчеты = -1;
	Элементы.ДетальныеЗаписиРазъединитьЗаписи.Видимость = ОтборРасчеты = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиКлючевыеПоля()
	
	ПоказатьКлюч = ОтборРасчеты = -1 И Объект.ЕстьРасхождения;
	УстановитьВидимостьКлючевыхПолейДетальныхЗаписей(ПоказатьКлюч);
	
КонецПроцедуры

&НаСервере
Функция РеквизитыДоговораСервер(Договор)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор,"НаименованиеДляПечати,Номер,Дата");
	Возврат РеквизитыДоговора;
	
КонецФункции

&НаКлиенте
Асинх Процедура УдалитьИтоговыеЗаписиАсинх()
	
	ТекстВопроса = НСтр("ru = 'Подчиненные детальные записи будут удалены.
		|Продолжить?'");
	Ответ = Ждать ВопросАсинх(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
	Если СверкаПоДоговорам Тогда
		ПоляОтбора = "ТипРасчетов, Партнер, Договор";
	Иначе
		ПоляОтбора = "ОбъектРасчетов";
	КонецЕсли;
	
	ИдентификаторыСтрок = Элементы.ИтоговыеЗаписи.ВыделенныеСтроки;
	ВыделенныеСтроки = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыСтрок Цикл
		Запись = Объект.ИтоговыеЗаписи.НайтиПоИдентификатору(Идентификатор);
		Если Запись <> Неопределено Тогда
			ВыделенныеСтроки.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Запись Из ВыделенныеСтроки Цикл
			УдалитьПодчиненныеДетальныеЗаписи(Запись,ПоляОтбора);
			Объект.ИтоговыеЗаписи.Удалить(Запись);
		КонецЦикла;
		
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		УдалитьПодчиненныеДетальныеЗаписи(ВыделенныеСтроки[0],ПоляОтбора);
		Объект.ИтоговыеЗаписи.Удалить(ВыделенныеСтроки[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПодчиненныеДетальныеЗаписи(ЗаписьВладелец,ПоляОтбора)
	
	ПараметрыОтбора = Новый Структура(ПоляОтбора);
	ЗаполнитьЗначенияСвойств(ПараметрыОтбора, ЗаписьВладелец, ПоляОтбора);
	СтрокаВладелец = Объект.ИтоговыеЗаписи.НайтиСтроки(ПараметрыОтбора);
	Если СтрокаВладелец.Количество() = 1 Тогда
		ПодчиненныеСтроки = Объект.ДетальныеЗаписи.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Объект.ДетальныеЗаписи.Удалить(ПодчиненнаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКлючевыхПолейДетальныхЗаписей(Показать)
	
	Элементы.ДетальныеЗаписиТипРасчетов.Видимость = Ложь;
	Элементы.ДетальныеЗаписиДоговор.Видимость = Ложь;
	Элементы.ДетальныеЗаписиОбъектРасчетов.Видимость = Ложь;
	
	Если Показать Тогда
		СверкаПоДоговорам = Объект.РежимСверкиИтоговВзаиморасчетов = ПредопределенноеЗначение("Перечисление.РежимСверкиИтоговВзаиморасчетов.ПоДоговорам");
		Если СверкаПоДоговорам Тогда
			Элементы.ДетальныеЗаписиДоговор.Видимость = Показать;
			Элементы.ДетальныеЗаписиТипРасчетов.Видимость = Показать;
			Элементы.ДетальныеЗаписиПартнер.Видимость = Показать;
		Иначе
			Элементы.ДетальныеЗаписиОбъектРасчетов.Видимость = Показать;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
