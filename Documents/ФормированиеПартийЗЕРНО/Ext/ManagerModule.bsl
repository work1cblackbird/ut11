#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО- Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована);
	КонецЕсли;
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована);
	Статусы.Добавить(Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Неопределено - не требуется,
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ДокументСсылка);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  см. ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций.
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - см. ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса.
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		
		РегистрыНакопления.ОстаткиПартийЗЕРНО.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ФормированиеПартийЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
		
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		
		Возврат ФормированиеПартииЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		
		Возврат АннулированиеПартииЗЕРНО(СсылкаНаОбъект, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует соответствие массива доступных операций по виду продукции.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//  * Ключ - ПеречислениеСсылка.ВидыПродукцииИС.
//  * Значение - Массив из ПеречислениеСсылка.ВидыОперацийЗЕРНО.
Функция ДоступныеВидыОперацийПоВидуПродукцииИС() Экспорт

	ВидыОперацийЗерно = Новый Массив;
	ВидыОперацийЗерно.Добавить(Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая);
	ВидыОперацийЗерно.Добавить(Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт);
	ВидыОперацийЗерно.Добавить(Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга);
	
	ВидыОперацийППЗ = Новый Массив;
	ВидыОперацийППЗ.Добавить(Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков);
	ВидыОперацийППЗ.Добавить(Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт);
	
	ВидыОперацийПоВидуПродукцииИС = Новый Соответствие;
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.Зерно, ВидыОперацийЗерно);
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна, ВидыОперацийППЗ);
	
	Возврат ВидыОперацийПоВидуПродукцииИС;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ФормированиеПартийЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ФормированиеПартийЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ФормированиеПартийЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииЗЕРНО.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ФормированиеПартийЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата       КАК Период,
	|	ДанныеШапки.Ссылка     КАК Ссылка,
	|	СтатусДокумента.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусДокумента
	|		ПО СтатусДокумента.ОбъектСинхронизации = &Ссылка
	|		И СтатусДокумента.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО           КАК КоличествоЗЕРНО
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И &СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	ВидПродукции = ЭлементОчереди.ВидПродукции;
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса Тогда
		
		Если ПараметрыЗапроса.Свойство("ОбработанныеСтроки") Тогда
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ФормированиеПартийЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
			
			Попытка
				
				Блокировка.Заблокировать();
				ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
				
				Для Каждого КлючИЗначение Из ПараметрыЗапроса.ОбработанныеСтроки Цикл
					
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Идентификатор", КлючИЗначение.Ключ);
					
					СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаТаблицыТовары Из СтрокиДокумента Цикл
						СтрокаТаблицыТовары.Партия = КлючИЗначение.Значение;
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументОбъект.Записать();
				ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		
		Если ЗначениеЗаполнено(РезультирующийСтатусДокумента.ДальнейшееДействие) Тогда
			Статусы.ПринятДействия.Добавить(РезультирующийСтатусДокумента.ДальнейшееДействие);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая Тогда
		
		ДанныеДляОбработки = ИнтеграцияЗЕРНОСлужебный.МассивДанныхПоляXDTO(ПолученныеДанные);
		
		СтруктураСообщения = ПараметрыЗапроса.СтруктураСообщения;
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновитьСтатусМестаФормированияПартии = Ложь;
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга
			И ПараметрыЗапроса.Свойство("ИдентификаторМестаФормированияПартии")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ИдентификаторМестаФормированияПартии) Тогда
			ИмяТаблицы = Метаданные.Справочники.РеестрМестФормированияПартийЗЕРНО.ПолноеИмя();
			ЭлементБлокировки = Блокировка.Добавить(ИмяТаблицы);
			ЭлементБлокировки.УстановитьЗначение("Идентификатор", ПараметрыЗапроса.ИдентификаторМестаФормированияПартии);
			ОбновитьСтатусМестаФормированияПартии = Истина;
		КонецЕсли;
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			ПараметрыЗагрузкиПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыЗагрузкиПартии();
			ПараметрыЗагрузкиПартии.Организация     = ЭлементОчереди.Организация;
			ПараметрыЗагрузкиПартии.Подразделение   = ЭлементОчереди.Подразделение;
			ПараметрыЗагрузкиПартии.ВидПродукции    = ВидПродукции;
			ПараметрыЗагрузкиПартии.ПараметрыОбмена = ПараметрыОбмена;
			
			Для Каждого СтрокаДанных Из ДанныеДляОбработки Цикл
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("Идентификатор", РеквизитыИсходящегоСообщения.ИдентификаторСтроки);
				
				ЭтоЭлеватор = Ложь;
				ПараметрыЗапроса.Свойство("ЭтоЭлеватор", ЭтоЭлеватор);
				
				Если ЭтоЭлеватор Тогда
					
					Если Не СтрокаДанных.Свойство("Repository") Или СтрокаДанных.Repository = Неопределено Тогда
						СтрокаДанных.Вставить("Repository", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСообщения.Repository));
					КонецЕсли;
				КонецЕсли;
				
				Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
					Если Не СтрокаДанных.Свойство("Manufacturer") Или СтрокаДанных.Manufacturer = Неопределено Тогда
						СтрокаДанных.Вставить("Manufacturer", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСообщения.Manufacturer));
					КонецЕсли;
				КонецЕсли;
				
				Если Не СтрокаДанных.Свойство("StoragePlace") Или СтрокаДанных.StoragePlace = Неопределено Тогда
					СтрокаДанных.Вставить("StoragePlace", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСообщения.StoragePlace));
				ИначеЕсли Не ЗначениеЗаполнено(СтрокаДанных.StoragePlace.PostalCode)
					И ЗначениеЗаполнено(СтруктураСообщения.StoragePlace.PostalCode) Тогда
					СтрокаДанных.StoragePlace.PostalCode = СтруктураСообщения.StoragePlace.PostalCode;
				КонецЕсли;
				
				Справочники.КлючиАдресовЗЕРНО.КлючАдреса(
					СтрокаДанных.StoragePlace, ПараметрыОбмена, ПараметрыЗапроса.СкладКонтрагент);
				
				Если Не СтрокаДанных.Свойство("Owner") Или СтрокаДанных.Owner = Неопределено Тогда
					СтрокаДанных.Вставить("Owner", ОбщегоНазначения.СкопироватьРекурсивно(СтруктураСообщения.Owner));
				КонецЕсли;
				
				ПартияЗерна = Справочники.РеестрПартийЗЕРНО.ЗагрузитьПартиюЗерна(
					СтрокаДанных,
					ПараметрыЗагрузкиПартии);
				
				ИзмененныеОбъекты.Добавить(ПартияЗерна);
				
				Если ОбновитьСтатусМестаФормированияПартии Тогда
					
					ИсходнаяПартияОбъект = ПараметрыЗапроса.МестоФормированияПартии.ПолучитьОбъект();
					ИсходнаяПартияОбъект.Статус     = Перечисления.СтатусыМестФормированияПартийЗЕРНО.ИспользованоДляСозданияПартии;
					ИсходнаяПартияОбъект.Записать();
					ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.МестоФормированияПартии);
					
				КонецЕсли;
				
				ОбработанныеСтроки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, ПартияЗерна);
				
			КонецЦикла;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии Тогда
		
		НомерПартии = ПараметрыЗапроса.НомерПартии;
		
		Блокировка = Новый БлокировкаДанных();
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Идентификатор", НомерПартии);
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			Партия = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
				НомерПартии, ЭлементОчереди.Организация, ЭлементОчереди.Подразделение, ЭлементОчереди.ВидПродукции, ПараметрыОбмена);
			
			ПартияОбъект = Партия.ПолучитьОбъект();
			ПартияОбъект.Заблокировать();
			
			ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
			
			ПартияОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультирующийСтатусДокумента(ДокументСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Идентификатор                          КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
		|ИЗ
		|	Документ.ФормированиеПартийЗЕРНО.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО Товары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = Товары.Идентификатор
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьСформировано = Ложь;
	ЕстьАннулировано = Ложь;
	ЕстьОшибки       = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована Тогда
			ЕстьСформировано = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована Тогда
			ЕстьАннулировано = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОбрабатывается Тогда
			Результат.Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОбрабатывается;
			Результат.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных;
			Возврат Результат;
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДальнейшееДействие = Неопределено;
	
	Если ЕстьАннулировано И Не ЕстьСформировано Тогда
		Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована;
	ИначеЕсли ЕстьАннулировано И ЕстьСформировано
		Или ЕстьСформировано И ЕстьОшибки Тогда
		Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартииСформированыЧастично;
		Если Не ЕстьАннулировано Тогда
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		КонецЕсли;
	ИначеЕсли Не ЕстьАннулировано И ЕстьСформировано Тогда
		Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована;
	Иначе
		Статус = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
		Если Не ЕстьАннулировано Тогда
			ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Результат.Статус = Статус;
	Результат.ДальнейшееДействие = ДальнейшееДействие;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сообщения

// Формирует JSON сообщения для формирования партий.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Документ Формирование партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция ФормированиеПартииЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ           КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеПартийЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ПрисоединенныеФайлыЗЕРНО.Операция
	|		 И Шапка.Ссылка   = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.Операция          КАК Операция,
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.ГодУрожая         КАК ГодУрожая,
	|	Шапка.НазначениеПартии  КАК НазначениеПартии,
	|	ЕСТЬNULL(Шапка.НазначениеПартии.Идентификатор, """") КАК НазначениеПартииИдентификатор,
	|	Шапка.ЦельИспользования КАК ЦельИспользования,
	|	ЕСТЬNULL(Шапка.ЦельИспользования.Идентификатор, """") КАК ЦельИспользованияИдентификатор,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Подразделение КАК Подразделение,
	|
	|	Шапка.ПоставитьПартиюНаХранение     КАК ПоставитьПартиюНаХранение,
	|	Шапка.ВладелецПартии                КАК ВладелецПартии,
	|	Представление(Шапка.ВладелецПартии) КАК ВладелецПартииПредставление,
	|	Шапка.ПодразделениеВладельцаПартии  КАК ПодразделениеВладельцаПартии,
	|
	|	Шапка.Товаропроизводитель                КАК Товаропроизводитель,
	|	Представление(Шапка.Товаропроизводитель) КАК ТоваропроизводительПредставление,
	|	Шапка.ПодразделениеТоваропроизводителя   КАК ПодразделениеТоваропроизводителя,
	|	Шапка.СтранаНазначения                           КАК СтранаНазначения,
	|	ЕСТЬNULL(Шапка.СтранаНазначения.КодАльфа3, """") КАК СтранаНазначенияКодАльфа3,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор  КАК Идентификатор,
	|	Товары.КодТНВЭД       КАК КодТНВЭД,
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|
	|	Товары.КоличествоЗЕРНО       КАК КоличествоЗЕРНО,
	|	Товары.Местоположение        КАК Местоположение,
	|	Товары.МестоположениеСтрокой КАК МестоположениеСтрокой,
	|	Товары.СкладКонтрагент       КАК СкладКонтрагент,
	|	Товары.Происхождение         КАК Происхождение,
	|	Товары.ПроисхождениеСтрокой  КАК ПроисхождениеСтрокой,
	|
	|	Товары.РезультатИсследования                               КАК РезультатИсследования,
	|	ЕСТЬNULL(Товары.РезультатИсследования.Идентификатор, """") КАК НомерИсследования,
	|
	|	Товары.АктОтбораПроб                               КАК АктОтбораПроб,
	|	ЕСТЬNULL(Товары.АктОтбораПроб.Идентификатор, """") КАК ИдентификаторАктаОтбораПроб,
	|	ВЫБОР
	|		КОГДА Товары.РезультатИсследования <> &ПустойРезультатИсследования
	|			ТОГДА Товары.РезультатИсследования.МестоФормированияПартии
	|		КОГДА Товары.АктОтбораПроб <> &ПустойАктОтбораПроб
	|			ТОГДА Товары.АктОтбораПроб.МестоФормированияПартии
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Справочник.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка)
	|	КОНЕЦ КАК МестоФормированияПартии,
	|	ВЫБОР
	|		КОГДА Товары.РезультатИсследования <> &ПустойРезультатИсследования
	|			ТОГДА Товары.РезультатИсследования.МестоФормированияПартии.Идентификатор
	|		КОГДА Товары.АктОтбораПроб <> &ПустойАктОтбораПроб
	|			ТОГДА Товары.АктОтбораПроб.МестоФормированияПартии.Идентификатор
	|		ИНАЧЕ
	|			НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ИдентификаторМестаФормированияПартии,
	|
	|	Товары.ИдентификаторСведенийОСобранномУрожае КАК ИдентификаторСведенийОСобранномУрожае,
	|
	|	Товары.ДатаИзготовления КАК ДатаИзготовления,
	|	Товары.СрокГодности     КАК СрокГодности,
	|	Товары.ОКПД2            КАК ОКПД2
	|
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПотребительскиеСвойства.ПотребительскоеСвойство    КАК ПотребительскоеСвойство,
	|	ПотребительскиеСвойства.Значение                   КАК Значение,
	|	ПотребительскиеСвойства.ИдентификаторСтрокиТоваров КАК ИдентификаторСтрокиТоваров,
	|
	|	ЕСТЬNULL(ПотребительскиеСвойства.ПотребительскоеСвойство.Идентификатор, """") КАК ПотребительскоеСвойствоИдентификатор
	|
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО.ПотребительскиеСвойства КАК ПотребительскиеСвойства
	|ГДЕ
	|	ПотребительскиеСвойства.Ссылка = &Ссылка
	|",
	"ПотребительскиеСвойства");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойРезультатИсследования", Справочники.РезультатыИсследованийЗЕРНО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойАктОтбораПроб", Справочники.АктыОтбораПробЗЕРНО.ПустаяСсылка());
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Идентификатор");
	//@skip-warning
	ПотребительскиеСвойства = РезультатЗапроса["ПотребительскиеСвойства"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидыОперацийПоВидуПродукцииИС = ДоступныеВидыОперацийПоВидуПродукцииИС();
	ВидыОперацийПоВидуПродукции = ВидыОперацийПоВидуПродукцииИС.Получить(Шапка.ВидПродукции);
	
	Если ВидыОперацийПоВидуПродукции = Неопределено
		Или ВидыОперацийПоВидуПродукции.Найти(Шапка.Операция) = Неопределено Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, СтрШаблон(
			НСтр("ru = 'Формирование партии с видом операции ""%1"" не поддерживается.'"),
			Шапка.Операция));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	ЭтоСХТП         = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно И Не Шапка.ПоставитьПартиюНаХранение;
	ЭтоЭлеватор     = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно И Шапка.ПоставитьПартиюНаХранение;
	ЭтоПереработчик = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна;
	
	Если ЭтоСХТП Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateLot";
	ИначеЕсли ЭтоЭлеватор Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateLotOnElevator";
	ИначеЕсли ЭтоПереработчик Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpb";
	КонецЕсли;
	
	АбстрактнаяОперация = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, АбстрактнаяОперация, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	
	Если ЭтоПереработчик Тогда
		
		Для Каждого СтрокаПартии Из Товары Цикл
			
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
			СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
			СообщениеXML.ИдентификаторСтроки = СтрокаПартии.Идентификатор;
			ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
			
			ФормированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
			
			Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков Тогда
				
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GpbFromResidues", ФормированиеПартииXDTO);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементПартииXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "GpbFromResidues", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
				
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт Тогда
				
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "GpbFromImport", ФормированиеПартииXDTO);
				
				ПроисхождениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресXDTO(СтрокаПартии.Происхождение, АбстрактноеСообщениеXML, ПараметрыОбмена);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ЭлементПартииXDTO, "PlaceOfOrigin", ПроисхождениеXDTO, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ЭлементПартииXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ФормированиеПартииXDTO, "GpbFromImport", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
				
			Иначе
				
				ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
				СообщенияXML.Добавить(СообщениеXML);
				Возврат СообщенияXML;
				
			КонецЕсли;
			
			//GrainProductType
			ВидКультурыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Product", ФормированиеПартииXDTO);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", СтрокаПартии.ОКПД2, АбстрактноеСообщениеXML);
			Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Шапка.НазначениеПартии) Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", СтрокаПартии.КодТНВЭД, АбстрактноеСообщениеXML);
			КонецЕсли;
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Product", ВидКультурыXDTO, АбстрактноеСообщениеXML);
			
			//LotsTargetCodeType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", Шапка.ЦельИспользованияИдентификатор, АбстрактноеСообщениеXML);
			//LotsPurposeCodeType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", Шапка.НазначениеПартииИдентификатор, АбстрактноеСообщениеXML);
			
			//AddressRFType
			МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(СтрокаПартии.Местоположение, СтрокаПартии.МестоположениеСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "StoragePlace", МестоположениеXDTO, АбстрактноеСообщениеXML);
			
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
			
			Если ЗначениеЗаполнено(Шапка.Товаропроизводитель) Тогда
				ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
					ТаблицаИсточникиРеквизитов, Шапка.Товаропроизводитель, Шапка.ПодразделениеТоваропроизводителя);
			КонецЕсли;
			
			ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
			
			Если ЗначениеЗаполнено(Шапка.Товаропроизводитель) Тогда
				ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Шапка.Товаропроизводитель, Шапка.ПодразделениеТоваропроизводителя);
				ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Производитель %1'"), Шапка.ТоваропроизводительПредставление);
			Иначе
				ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
				ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
			КонецЕсли;
			
			ПроизводительXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
				ИсточникДанных,
				АбстрактноеСообщениеXML,
				ПараметрыОбмена,
				ПредставлениеИсточника);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Manufacturer", ПроизводительXDTO, АбстрактноеСообщениеXML);
			
			//ListValueQualityIndicatorType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваXDTO(
				ПотребительскиеСвойства,
				СтрокаПартии.Идентификатор,
				ФормированиеПартииXDTO,
				ПространствоИмен,
				АбстрактноеСообщениеXML);
			
			Если Шапка.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
				СтранаXDTO = ИнтеграцияЗЕРНОСлужебный.СтранаXDTO(Шапка.СтранаНазначенияКодАльфа3, АбстрактноеСообщениеXML, ПараметрыОбмена);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "CountryDestination", СтранаXDTO, АбстрактноеСообщениеXML);
			КонецЕсли;
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ФормированиеПартииXDTO, "createDate", Формат(СтрокаПартии.ДатаИзготовления, "ДФ=yyyy-MM-dd;"), АбстрактноеСообщениеXML);
			
			СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
				ФормированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
				ДополнительныеПараметры.ПараметрыОбмена);
			
			ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
				ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
			// Данные для сопоставления партии.
			ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
				ИсточникДанных,
				АбстрактноеСообщениеXML,
				ПараметрыОбмена,
				СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
			
			ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(СообщениеXML.ПараметрыЗапроса);
			
			ПараметрыПреобразования = ИнтеграцияЗЕРНОСлужебный.ПараметрыПреобразования(ДополнительныеПараметры.ПараметрыОбмена.ПараметрыОптимизации);
			СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
				"Owner",
				ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ВладелецПартииXDTO, ПараметрыПреобразования, Новый Массив));
			СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
				"StoragePlace",
				ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(МестоположениеXDTO, ПараметрыПреобразования, Новый Массив));
			СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
				"Manufacturer",
				ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ПроизводительXDTO, ПараметрыПреобразования, Новый Массив));
			
			СообщениеXML.ПараметрыЗапроса.СкладКонтрагент       = СтрокаПартии.СкладКонтрагент;
			СообщениеXML.ПараметрыЗапроса.МестоположениеСтрокой = МестоположениеXDTO.Address;
			СообщениеXML.ПараметрыЗапроса.Индекс                = МестоположениеXDTO.PostalCode;
			
			СообщенияXML.Добавить(СообщениеXML);
			
		КонецЦикла;
		
	Иначе
		
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
		
		Если ЗначениеЗаполнено(Шапка.ВладелецПартии) Тогда
			ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
				ТаблицаИсточникиРеквизитов, Шапка.ВладелецПартии, Шапка.ПодразделениеВладельцаПартии);
		КонецЕсли;
		
		ИнтеграцияЗЕРНОВызовСервера.РеквизитыОрганизацийКонтрагентов(ТаблицаИсточникиРеквизитов);
		
		Для Каждого СтрокаПартии Из Товары Цикл
			
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Шапка.Операция, НомерВерсии);
			СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
			СообщениеXML.ИдентификаторСтроки = СтрокаПартии.Идентификатор;
			ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
			
			ФормированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
			
			Если Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИзОстатков Тогда
				
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromResidues", ФормированиеПартииXDTO);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементПартииXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromResidues", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
				
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга Тогда
				
				Если ЗначениеЗаполнено(СтрокаПартии.НомерИсследования) Тогда
					
					ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromField", ФормированиеПартииXDTO);
					
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
						ЭлементПартииXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
						ЭлементПартииXDTO, "reserchNumber", СтрокаПартии.НомерИсследования, АбстрактноеСообщениеXML);
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
						ФормированиеПартииXDTO, "LotFromField", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
					
				Иначе
					
					ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromSamplesPicking", ФормированиеПартииXDTO);
					
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
						ЭлементПартииXDTO, "samplesPickingId", СтрокаПартии.ИдентификаторАктаОтбораПроб, АбстрактноеСообщениеXML);
					ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
						ФормированиеПартииXDTO, "LotFromSamplesPicking", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
					
				КонецЕсли;
				
				СообщениеXML.ПараметрыЗапроса.Вставить("МестоФормированияПартии", СтрокаПартии.МестоФормированияПартии);
				СообщениеXML.ПараметрыЗапроса.Вставить(
					"ИдентификаторМестаФормированияПартии", СтрокаПартии.ИдентификаторМестаФормированияПартии);
				
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт Тогда
				
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromImport", ФормированиеПартииXDTO);
				
				ПроисхождениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресXDTO(СтрокаПартии.Происхождение, АбстрактноеСообщениеXML, ПараметрыОбмена);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ЭлементПартииXDTO, "PlaceOfOrigin", ПроисхождениеXDTO, АбстрактноеСообщениеXML);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ЭлементПартииXDTO, "amount", СтрокаПартии.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromImport", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
				
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая Тогда
				
				ЭлементПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "LotFromHarvestedCrop", ФормированиеПартииXDTO);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
					ЭлементПартииXDTO, "harvestedCropId", СтрокаПартии.ИдентификаторСведенийОСобранномУрожае, АбстрактноеСообщениеXML);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "LotFromHarvestedCrop", ЭлементПартииXDTO, АбстрактноеСообщениеXML);
				
			Иначе
				
				ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
					СообщениеXML,
					СтрШаблон(НСтр("ru = 'Операция не поддерживается: %1.'"), Шапка.Операция));
				СообщенияXML.Добавить(СообщениеXML);
				Возврат СообщенияXML;
				
			КонецЕсли;
			
			//GrainProductType
			ВидКультурыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "Crop", ФормированиеПартииXDTO);
			
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "OKPD2", СтрокаПартии.ОКПД2, АбстрактноеСообщениеXML);
			Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Шапка.НазначениеПартии) Тогда
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ВидКультурыXDTO, "TNVED", СтрокаПартии.КодТНВЭД, АбстрактноеСообщениеXML);
			КонецЕсли;
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Crop", ВидКультурыXDTO, АбстрактноеСообщениеXML);
			
			//LotsTargetCodeType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Target", Шапка.ЦельИспользованияИдентификатор, АбстрактноеСообщениеXML);
			//LotsPurposeCodeType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Purpose", Шапка.НазначениеПартииИдентификатор, АбстрактноеСообщениеXML);
			//HarvestYear
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "HarvestYear", Шапка.ГодУрожая, АбстрактноеСообщениеXML);
			
			//AddressRFType
			МестоположениеXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(СтрокаПартии.Местоположение, СтрокаПартии.МестоположениеСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "StoragePlace", МестоположениеXDTO, АбстрактноеСообщениеXML);
			
			//ListValueQualityIndicatorType
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьПотребительскиеСвойстваXDTO(
				ПотребительскиеСвойства,
				СтрокаПартии.Идентификатор,
				ФормированиеПартииXDTO,
				ПространствоИмен,
				АбстрактноеСообщениеXML);
			
			Если Шапка.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ Тогда
				СтранаXDTO = ИнтеграцияЗЕРНОСлужебный.СтранаXDTO(Шапка.СтранаНазначенияКодАльфа3, АбстрактноеСообщениеXML, ПараметрыОбмена);
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "CountryDestination", СтранаXDTO, АбстрактноеСообщениеXML);
			КонецЕсли;
			
			Если ЭтоЭлеватор Тогда
				
				Если ЗначениеЗаполнено(Шапка.ВладелецПартии) Тогда
					ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
						ТаблицаИсточникиРеквизитов, Шапка.ВладелецПартии, Шапка.ПодразделениеВладельцаПартии);
					ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Владелец партии %1'"), Шапка.ВладелецПартииПредставление);
				Иначе
					ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
						ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
					ПредставлениеИсточника = СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление);
				КонецЕсли;
				
				//SubjectType
				ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
					ИсточникДанных,
					АбстрактноеСообщениеXML,
					ПараметрыОбмена,
					ПредставлениеИсточника);
				
				ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ФормированиеПартииXDTO, "Owner", ВладелецПартииXDTO, АбстрактноеСообщениеXML);
				
				ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
				
				ЭлеваторXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
					ИсточникДанных,
					АбстрактноеСообщениеXML,
					ПараметрыОбмена,
					СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
				
			Иначе
				
				ИсточникДанных = ИнтеграцияЗЕРНО.РеквизитыОрганизацииКонтрагента(
					ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
				
				ВладелецПартииXDTO = ИнтеграцияЗЕРНОСлужебный.ОрганизацияКонтрагентXDTO(
					ИсточникДанных,
					АбстрактноеСообщениеXML,
					ПараметрыОбмена,
					СтрШаблон(НСтр("ru = 'Организация %1'"), Шапка.ОрганизацияПредставление));
				
			КонецЕсли;
			
			СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(ФормированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса);
			
			ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(СообщениеXML.ПараметрыЗапроса);
			
			ПараметрыПреобразования = ИнтеграцияЗЕРНОСлужебный.ПараметрыПреобразования(ПараметрыОбмена.ПараметрыОптимизации);
			
			СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
				"Owner",
				ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ВладелецПартииXDTO, ПараметрыПреобразования, Новый Массив));
			СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
				"StoragePlace",
				ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(МестоположениеXDTO, ПараметрыПреобразования, Новый Массив));
			
			Если ЭтоЭлеватор Тогда
				СообщениеXML.ПараметрыЗапроса.ЭтоЭлеватор = Истина;
				СообщениеXML.ПараметрыЗапроса.СтруктураСообщения.Вставить(
					"Repository",
					ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВСтруктуру(ЭлеваторXDTO, ПараметрыПреобразования, Новый Массив));
			КонецЕсли;
			
			СообщениеXML.ПараметрыЗапроса.СкладКонтрагент       = СтрокаПартии.СкладКонтрагент;
			СообщениеXML.ПараметрыЗапроса.МестоположениеСтрокой = МестоположениеXDTO.Address;
			СообщениеXML.ПараметрыЗапроса.Индекс                = МестоположениеXDTO.PostalCode;
			
			СообщенияXML.Добавить(СообщениеXML);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

// Формирует JSON сообщения для аннулирования партии
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ФормированиеПартийЗЕРНО - Документ Формирование партии.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция АннулированиеПартииЗЕРНО(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML     = Новый Массив();
	СписокЗапросов   = Новый СписокЗначений;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.АннулированиеФормированияПартии;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыОбмена  = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ФормированиеПартийЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Шапка.ВидПродукции               КАК ВидПродукции,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Идентификатор            КАК ИдентификаторСтроки,
	|	РеестрПартийЗЕРНО.Идентификатор КАК НомерПартии
	|
	|ИЗ
	|	Документ.ФормированиеПартийЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Идентификатор В (&ИдентификаторСтроки)
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",            Операция);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ПараметрыЗапроса);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции      = Шапка.ВидПродукции;
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledGpb";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledLot";
	КонецЕсли;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
		СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии", СтрокаТовары.НомерПартии);
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		АннулированиеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(АннулированиеПартииXDTO, ИмяПоляНомерПартии, СтрокаТовары.НомерПартии, АбстрактноеСообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			АннулированиеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

Процедура ИнициализироватьСтруктуруПараметрыСообщенияДляСопоставленияПартии(ПараметрыЗапроса)
	
	ПараметрыЗапроса.Вставить("СкладКонтрагент");
	ПараметрыЗапроса.Вставить("МестоположениеСтрокой");
	ПараметрыЗапроса.Вставить("Индекс");
	ПараметрыЗапроса.Вставить("ЭтоЭлеватор", Ложь);
	
	ПараметрыЗапроса.Вставить("СтруктураСообщения", Новый Структура);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
