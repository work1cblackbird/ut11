#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеФормированиеПартииЗЕРНО.Тип;
	
	ЗаполнитьДоступныеВидыПродукции();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,,"ДокументОснование");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыБезРазбиенияХарактеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "ТоварыБезРазбиенияСерия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "ТоварыБезРазбиенияСерия", "Номенклатура");
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	Если ИнтеграцияИСКлиент.ЭтоФормаУказанияСерий(ИсточникВыбора, ВыбранноеЗначение) Тогда
		
		ОбновитьДанные(
			Элементы.Товары.ТекущиеДанные.Серия,
			Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыСерия", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
		
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если Не ЗначениеЗаполнено(Номенклатура)
		Или Не ХарактеристикиИспользуются Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	КонецЕсли;
	
	Если Не ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(СтатусУказанияСерий) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Серия");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "Организация", Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ОбновитьПодсказкуВводаПодразделения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ВидПродукции", Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ОбновитьДанные(
		Объект.ВидПродукции,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "Операция", Неопределено));
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПартииПриИзменении(Элемент)
	
	ОбновитьДанные(
		Объект.НазначениеПартии,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "НазначениеПартии", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьПартиюНаХранениеПриИзменении(Элемент)
	
	Элементы.ВладелецПартииСтрокой.Видимость = Объект.ПоставитьПартиюНаХранение;
	Элементы.ПодразделениеВладельцаПартии.Видимость = ПодразделенияИспользуются
		И Объект.ПоставитьПартиюНаХранение И ТипВладельцаПартии = 0;
	Если Не Объект.ПоставитьПартиюНаХранение Тогда
		Объект.ВладелецПартии = Неопределено;
		ВладелецПартииСтрокой = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВладелецПартииСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтранаНазначенияПриИзменении(Элемент)
	
	ОбновитьДанные(
		Объект.НазначениеПартии,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "СтранаНазначения", Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРасшифровкиПриИзменении(Элемент)
	ПриИзмененииПереключательРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпискомПереключательРасшифровкиПриИзменении(Элемент)
	ПриИзмененииПереключательРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Номенклатура,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "Номенклатура", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Характеристика,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "Характеристика", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Серия,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "Серия", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияОКПД2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКПД2Представление) Тогда
		ТекущиеДанные.ОКПД2 = "";
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.ОКПД2,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ОКПД2", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияОКПД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить(
		"ОтборОКПД2ПодлежащиеГосмониторингу",
		Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга"));
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораОКПД2(ЭтотОбъект, ТекущиеДанные, Элемент, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияОКПД2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОКПД2 = ВыбранноеЗначение.Код;
	ТекущиеДанные.ОКПД2Представление = ВыбранноеЗначение.Представление;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораТНВЭД(ЭтотОбъект, ТекущиеДанные, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияКодТНВЭДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиент.КодТНВЭДАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияКодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗерноКлиент.КодТНВЭДОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияКоличествоПриИзменении(Элемент)
	
	КоличествоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияКоличествоЗЕРНОПриИзменении(Элемент)
	
	КоличествоЗЕРНОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияМестоположениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияМестоположениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Массив;
	ДополнительныеПоля.Добавить("СкладКонтрагент");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДополнительныеПоля, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияМестоположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияМестоположениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Соответствие;
	ДополнительныеПоля.Вставить("СкладКонтрагент", "ВладелецАдреса");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительныеПоля, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияМестоположениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "СкладКонтрагентЗЕРНО",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияПроисхождениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент, "Товары.Происхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияПроисхождениеОчистка(Элемент, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, , "Товары.Происхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияПроисхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Товары.Происхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияПроисхождениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, , "Товары.Происхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияПроисхождениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "ЗемельныйУчастокИС",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияРезультатИсследованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРезультатИсследования(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияРезультатИсследованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.РезультатИсследования,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "РезультатИсследования", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияАктОтбораПробПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.АктОтбораПроб,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "АктОтбораПроб", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыБезРазбиенияАктОтбораПробНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуАктыОтбораПроб(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗЕРНОПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий ЗЕРНО"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПанельМестоположениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Соответствие;
	ДополнительныеПоля.Вставить("СкладКонтрагент", "ВладелецАдреса");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительныеПоля, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПанельМестоположениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "СкладКонтрагентЗЕРНО",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПанельМестоположениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПанельМестоположениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Массив;
	ДополнительныеПоля.Добавить("СкладКонтрагент");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДополнительныеПоля, "Товары.Местоположение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПанельМестоположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка, "Товары.Местоположение");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормЗЕРНОКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПереключательРасшифровки.Доступность = Объект.Товары.Количество() <= 1;
	Элементы.ТоварыСпискомПереключательРасшифровки.Доступность = Объект.Товары.Количество() <= 1;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ИдентификаторСтрокиТоваров", ТекущиеДанные.Идентификатор);
	
	Элементы.ПотребительскиеСвойства.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	Элементы.ПотребительскиеСвойстваПоСтроке.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Или Копирование Тогда
			Если Копирование Тогда
				НовыйИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				ИнтеграцияЗЕРНОКлиентСервер.СкопироватьДанныеТабличныхЧастейПоСтроке(
					ЭтотОбъект, ТекущиеДанные.Идентификатор, "ИдентификаторСтрокиТоваров", НовыйИдентификаторСтроки);
				ТекущиеДанные.Идентификатор = НовыйИдентификаторСтроки;
			Иначе
				ТекущиеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
		ОбновитьДанные("Добавление", Новый Структура("ИмяПоля", "Товары"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличныхЧастейПоСтроке(ЭтотОбъект, ТекущиеДанные.Идентификатор, "ИдентификаторСтрокиТоваров");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКодТНВЭД Тогда
		ИнтеграцияЗЕРНОКлиентСервер.ОбновитьСписокВыбораКодаТНВЭД(ЭтотОбъект, Элементы.Товары.ТекущиеДанные.ОКПД2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Номенклатура,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыНоменклатура", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Характеристика,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыХарактеристика", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.Серия,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыСерия", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить(
		"ОтборОКПД2ПодлежащиеГосмониторингу",
		Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга"));
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораОКПД2(ЭтотОбъект, ТекущиеДанные, Элемент, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ТекущиеДанные.ОКПД2Представление = "";
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.ОКПД2,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыОКПД2", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОКПД2 = ВыбранноеЗначение.Код;
	ТекущиеДанные.ОКПД2Представление = ВыбранноеЗначение.Представление;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Код;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораТНВЭД(ЭтотОбъект, ТекущиеДанные, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиент.КодТНВЭДАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗерноКлиент.КодТНВЭДОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры


&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	КоличествоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЗЕРНОПриИзменении(Элемент)
	
	КоличествоЗЕРНОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМестоположениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМестоположениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Массив;
	ДополнительныеПоля.Добавить("СкладКонтрагент");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДополнительныеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМестоположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМестоположениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Соответствие;
	ДополнительныеПоля.Вставить("СкладКонтрагент", "ВладелецАдреса");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительныеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыМестоположениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "СкладКонтрагентЗЕРНО",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроисхождениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроисхождениеОчистка(Элемент, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроисхождениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроисхождениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроисхождениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "ЗемельныйУчастокИС",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРезультатИсследованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРезультатИсследования(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРезультатИсследованияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.РезультатИсследования,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыРезультатИсследования", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАктОтбораПробНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуАктыОтбораПроб(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАктОтбораПробПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Товары.ТекущиеДанные.АктОтбораПроб,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ТоварыАктОтбораПроб", Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПотребительскиеСвойстваПоСтроке

&НаКлиенте
Процедура ПотребительскиеСвойстваПоСтрокеПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПотребительскиеСвойстваПоСтроке.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПотребительскиеСвойстваПоСтрокеЗначение Тогда
		ТекущиеДанные = Элементы.ПотребительскиеСвойстваПоСтроке.ТекущиеДанные;
		Отбор = Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторСтрокиТоваров);
		ТекущиеДанныеТовары = Объект.Товары.НайтиСтроки(Отбор);
		ИнтеграцияЗЕРНОКлиент.НастроитьТипЗначенияПотребительскогоСвойства(
			ЭтотОбъект,
			Элемент.ТекущийЭлемент,
			ТекущиеДанные.ПотребительскоеСвойство,
			ТекущиеДанные.Значение,
			ТекущиеДанныеТовары[0].ОКПД2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПотребительскиеСвойства

&НаКлиенте
Процедура ПотребительскиеСвойстваПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПотребительскиеСвойства.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПотребительскиеСвойстваЗначение Тогда
		ТекущиеДанные = Элементы.ПотребительскиеСвойства.ТекущиеДанные;
		Отбор = Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторСтрокиТоваров);
		ТекущиеДанныеТовары = Объект.Товары.НайтиСтроки(Отбор);
		ИнтеграцияЗЕРНОКлиент.НастроитьТипЗначенияПотребительскогоСвойства(
			ЭтотОбъект,
			Элемент.ТекущийЭлемент,
			ТекущиеДанные.ПотребительскоеСвойство,
			ТекущиеДанные.Значение,
			ТекущиеДанныеТовары[0].ОКПД2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийЗЕРНО.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийЗЕРНО.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийЗЕРНО.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Команда)
	
	ПанельДополнительныеСвойстваСвернута = Не ПанельДополнительныеСвойстваСвернута;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПанельДополнительныеСвойстваСвернута");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийЗЕРНО.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормЗЕРНОКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМестоположение(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ВыделенныеСтроки[0]);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МестоположениеСтрокой", ВыбраннаяСтрока.МестоположениеСтрокой);
	ПараметрыОткрытия.Вставить("Местоположение", ВыбраннаяСтрока.Местоположение);
	ПараметрыОткрытия.Вставить("СкладКонтрагент", ВыбраннаяСтрока.СкладКонтрагент);
	
	ПараметрыОткрытия.Вставить("Заголовок",               НСтр("ru = 'Укажите адрес объекта'"));
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок", Элементы.Товары.ВыделенныеСтроки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеМестоположенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.ЗаполнениеМестоположенияЗЕРНО",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроисхождение(Команда)
	
	ОткрытьФормуЗаполненияКонтактнойИнформации(Элементы.Товары.ВыделенныеСтроки, "Происхождение");
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияЗЕРНОКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПартии(Команда)
	
	ОчиститьСообщения();
	
	МассивСтрок = Новый Массив();
	
	Если ПереключательРасшифровки = 1 Тогда
		
		Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ПартиюМожноАннулировать(ДанныеСтроки) Тогда
				МассивСтрок.Добавить(ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ПартиюМожноАннулировать(ТекущиеДанные) Тогда
			МассивСтрок.Добавить(ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование партий по выделенным строкам невозможно'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ВопросАннулированиеПартииЗавершение",
			ЭтотОбъект,
			МассивСтрок);
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СтрокиТекстаВопроса = Новый Массив();
		
		Если МассивСтрок.Количество() = 1 Тогда
			СтрокиТекстаВопроса.Добавить(
				СтрШаблон(НСтр("ru = 'Аннулировать сформированную партию %1 ?'"), МассивСтрок[0].Партия));
		Иначе
			СтрокиТекстаВопроса.Добавить(НСтр("ru = 'Аннулировать сформированные партии?'"));
			Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
				СтрокиТекстаВопроса.Добавить(Строка(СтрокаТаблицы.Партия));
			КонецЦикла;
		КонецЕсли;
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ПодтверждениеАннулированияПартииЗавершение",
			ЭтотОбъект,
			МассивСтрок);
		
		ТекстВопроса = СтрСоединить(СтрокиТекстаВопроса, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСвойстваПартии(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	Если ЗначениеЗаполнено(Объект.ВладелецПартии) Тогда
		ПараметрыФормы.Вставить("ВладелецПартии", Объект.ВладелецПартии);
	Иначе
		ПараметрыФормы.Вставить("ВладелецПартии", Объект.Организация);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ПараметрыФормы.Вставить("ОКПД2", ТекущиеДанные.ОКПД2);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.Идентификатор);
	ОткрытьФорму("Справочник.РеестрПартийЗЕРНО.Форма.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборПартииЗавершение", ЭтотОбъект, ДополнительныеПараметры)
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "ТоварыБезРазбиенияХарактеристика", "ХарактеристикиИспользуются"); 
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "ТоварыБезРазбиенияСерия", "СтатусУказанияСерий", "ТипНоменклатуры");
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(
		ЭтотОбъект, "ТоварыБезРазбиенияКоличество");
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеОКПД2(ЭтотОбъект);
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойства(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойства(ЭтотОбъект, "ПотребительскиеСвойстваПоСтрокеЗначение");
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойстваДиапазон(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойстваДиапазон(ЭтотОбъект, "ПотребительскиеСвойстваПоСтрокеЗначение");
	
	Элементы.ТоварыСкладКонтрагент.ЦветТекста = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сформирована'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отсутствует>'"));
	
	// Автоотметка незаполненной для Госмониторинга
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыРезультатИсследования.Имя);
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАктОтбораПроб.Имя);
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Операция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга;
	
	ГруппаОтбораИли = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.АктОтбораПроб");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РезультатИсследования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Доступность актов для Госмониторинга
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАктОтбораПроб.Имя);
	
	ОтборЭлемента =  ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.РезультатИсследования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьУсловноеОформлениеХарактеристикаСерия(СписокРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(СписокРеквизитов) Тогда
		СписокРеквизитов = "ТоварыБезРазбиенияХарактеристика, ТоварыБезРазбиенияСерия, ТоварыБезРазбиенияКоличество";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Для Каждого СвойствоСтруктуры Из СтруктураРеквизитов Цикл
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, СвойствоСтруктуры.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнтеграцияЗЕРНО.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ФормированиеПартийЗЕРНО);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ФормированиеПартийЗЕРНО);
	
	ЕдиницаИзмеренияКилограмм = ИнтеграцияИСКлиентСерверПовтИсп.ЕдиницаИзмеренияКилограмм();
	
	ПодразделенияИспользуются = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеДокумента = Новый Структура("Операция, ВидПродукции");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Объект);
		Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
			ПоместитьВоВременноеХранилище(ДанныеДокумента, ДанныеДокументаАдрес);
		Иначе
			ДанныеДокументаАдрес = ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Товары.Количество() Тогда
		ИнициализироватьСлужебныеРеквизитыТоваров();
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "ТоварыБезРазбиенияНоменклатура");
	
	ЗаполнитьДоступныеОперации();
	ЗаполнитьДоступныеЦелиИспользования(ЭтотОбъект);
	ЗаполнитьНазначениеПартии(ЭтотОбъект);
	ЗаполнитьГодУрожая(ЭтотОбъект);
	
	ТипВладельцаПартии = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.ВладелецПартии);
	ТипТоваропроизводителя = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.Товаропроизводитель);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	ОбновитьПодсказкуВводаВладелецПартииТоваропроизводитель(ЭтотОбъект);
	ОбновитьПодсказкуВводаПодразделения(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	Элементы.Операция.СписокВыбора.Очистить();
	
	ВидыОперацийПоВидуПродукцииИС = Документы.ФормированиеПартийЗЕРНО.ДоступныеВидыОперацийПоВидуПродукцииИС();
	ВидыОперациПоВидуПродукции    = ВидыОперацийПоВидуПродукцииИС.Получить(Объект.ВидПродукции);
	Если ВидыОперациПоВидуПродукции <> Неопределено Тогда
		Для Каждого ВидОперации Из ВидыОперациПоВидуПродукции Цикл
			Элементы.Операция.СписокВыбора.Добавить(ВидОперации);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ДанныеДокументаАдрес);
	Иначе
		ДанныеДокумента = Неопределено;
	КонецЕсли;
	
	Если ДанныеДокумента <> Неопределено
		И ДанныеДокумента.ВидПродукции = Объект.ВидПродукции Тогда
		
		Если ЗначениеЗаполнено(ДанныеДокумента.Операция)
			И Элементы.Операция.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.Операция) = Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				ДанныеДокумента.Операция);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.Операция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеЦелиИспользования(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ЦельИспользования.СписокВыбора.Очистить();
	Элементы.ЦельИспользования.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ЦельИспользованияПартииКормовые"));
	Элементы.ЦельИспользования.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ЦельИспользованияПартииПищевые"));
	Элементы.ЦельИспользования.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНазначениеПартии(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.НазначениеПартии.СписокВыбора.Очистить();
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт") Тогда
		Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВвозНаТерриториюРФ"));
	Иначе
		Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ"));
		Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииПереработка"));
		Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииХранениеОбработка"));
	КонецЕсли;
	
	Элементы.НазначениеПартии.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьГодУрожая(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГодУрожая.СписокВыбора.Очистить();
	ТекущийГод = Год(ТекущаяДатаСеанса());
	Для ЗначениеВыбора = ТекущийГод - 12 По ТекущийГод Цикл
		Элементы.ГодУрожая.СписокВыбора.Добавить(ЗначениеВыбора, Формат(ЗначениеВыбора, "ЧЦ=4; ЧГ=;"));
	КонецЦикла;
	
	Элементы.ГодУрожая.СписокВыбора.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИдентификаторСтроки = Неопределено, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	ИнициализацияТоваровБезРазбиения = Ложь;
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		СтруктураРеквизитов.Вставить("Товары");
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПанельДополнительныеСвойстваСвернута")
		Или Инициализация Тогда
		
		Элементы.ГруппаТоварыСпискомПанель.Видимость = Не Форма.ПанельДополнительныеСвойстваСвернута;
		Элементы.ГруппаТоварыСпискомПанельСвернута.Видимость = Форма.ПанельДополнительныеСвойстваСвернута;
	
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Товары")
		Или Инициализация Тогда
		
		Если ИдентификаторСтроки = Неопределено Тогда
			Если Объект.Товары.Количество() = 0 Тогда
				НоваяСтрока = Объект.Товары.Добавить();
				НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);
				НоваяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
					НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
			КонецЕсли;
			ИдентификаторСтроки = Объект.Товары[0].ПолучитьИдентификатор();
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
			Элементы.Товары.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли;
		
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Объект.Товары.Количество() > 1 Тогда
			Форма.ПереключательРасшифровки = 1;
			СтруктураРеквизитов.Вставить("ПереключательРасшифровки");
		КонецЕсли;
		
		Элементы.ПереключательРасшифровки.Доступность = Объект.Товары.Количество() <= 1;
		Элементы.ТоварыСпискомПереключательРасшифровки.Доступность = Объект.Товары.Количество() <= 1;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТоваров", ТекущиеДанные.Идентификатор);
		
		Элементы.ПотребительскиеСвойства.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		Элементы.ПотребительскиеСвойстваПоСтроке.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПереключательРасшифровки")
		Или Инициализация Тогда
		
		ИнициализацияТоваровБезРазбиения = Инициализация Или Элементы.ТоварыСтраницы.ТекущаяСтраница <> Элементы.СтраницаТоварыБезРазбиения;
		Если Форма.ПереключательРасшифровки Тогда
			Элементы.ТоварыСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыСписком;
		Иначе
			Элементы.ТоварыСтраницы.ТекущаяСтраница = Элементы.СтраницаТоварыБезРазбиения;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ВидПродукции")
		Или Инициализация Тогда
		
		ИнициализацияТоваровБезРазбиения = Истина;
		СтруктураРеквизитов.Вставить("Операция");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Операция")
		Или Инициализация Тогда
		
		ЭтоПартииПереработчика = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
		
		ЭтоФормированиеПартииПоРезультатамГосмонтиринга =
			Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга");
		ЭтоСборУрожая =
			Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииПриСбореУрожая");
		ЭтоФормированиеПартииИмпорт =
			Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт");
		
		Элементы.ГодУрожая.Видимость = Не ЭтоПартииПереработчика;
		
		Элементы.ТоварыПроисхождение.Видимость             = ЭтоФормированиеПартииИмпорт;
		Элементы.ТоварыБезРазбиенияПроисхождение.Видимость = ЭтоФормированиеПартииИмпорт;
		Элементы.ЗаполнитьПроисхождение.Видимость          = ЭтоФормированиеПартииИмпорт;
		
		Элементы.ГруппаВладелецПартии.Видимость      = Не ЭтоПартииПереработчика;
		Элементы.ВладелецПартииСтрокой.Видимость     = Объект.ПоставитьПартиюНаХранение;
		Элементы.ГруппаТоваропроизводитель.Видимость = ЭтоПартииПереработчика;
		
		Элементы.ГруппаДатаСрокГодности.Видимость = ЭтоПартииПереработчика;
		Элементы.ТоварыДатаИзготовления.Видимость = ЭтоПартииПереработчика;
		Элементы.ТоварыСрокГодности.Видимость     = ЭтоПартииПереработчика;
		
		Элементы.ТоварыБезРазбиенияРезультатИсследования.Видимость = ЭтоФормированиеПартииПоРезультатамГосмонтиринга;
		Элементы.ТоварыРезультатИсследования.Видимость             = ЭтоФормированиеПартииПоРезультатамГосмонтиринга;
		Элементы.ТоварыБезРазбиенияАктОтбораПроб.Видимость = ЭтоФормированиеПартииПоРезультатамГосмонтиринга;
		Элементы.ТоварыАктОтбораПроб.Видимость             = ЭтоФормированиеПартииПоРезультатамГосмонтиринга;
		
		Элементы.ТоварыБезРазбиенияИдентификаторСведенийОСобранномУрожае.Видимость = ЭтоСборУрожая;
		Элементы.ТоварыИдентификаторСведенийОСобранномУрожае.Видимость             = ЭтоСборУрожая;
		
		ДокументОснованиеЗаполнен = ЗначениеЗаполнено(Объект.ДокументОснование);
		
		Элементы.ДокументОснование.АвтоОтметкаНезаполненного = ЭтоСборУрожая И Не ДокументОснованиеЗаполнен;
		
		Элементы.ТоварыБезРазбиенияИдентификаторСведенийОСобранномУрожае.Видимость = ЭтоСборУрожая;
		Элементы.ТоварыИдентификаторСведенийОСобранномУрожае.Видимость             = ЭтоСборУрожая;
		
		Исключения = Новый Массив;
		Исключения.Добавить("ТоварыСпискомГруппаОтборСтрок");
		Исключения.Добавить("ГруппаТоварыПотребительскиеСвойстваТаблица");
		Исключения.Добавить("ТоварыСпискомСвернутьПанель");
		Исключения.Добавить("ТоварыГруппаПерезаполнитьПоОснованию");
		Исключения.Добавить("ГруппаТоварыСпискомПанельСвернута");
		Исключения.Добавить("ТоварыУдалить");
		Исключения.Добавить("ТоварыНайти");
		Исключения.Добавить("ТоварыПоискПоТекущемуЗначению");
		Исключения.Добавить("ТоварыОтменитьПоиск");
		Исключения.Добавить("ТоварыПоискПереместить");
		Исключения.Добавить("ТоварыСортировка");
		Исключения.Добавить("ТоварыАннулироватьПартии");
		Исключения.Добавить("ТоварыКодТНВЭД");
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаТоварыСписком, Не ЭтоСборУрожая, Исключения);
		
		Исключения = Новый Массив;
		Исключения.Добавить("ГруппаПереключательРасшифровки");
		Исключения.Добавить("ГруппаТоварыБезРазбиенияСвязанныеТаблицы");
		Исключения.Добавить("АннулироватьПартии");
		Исключения.Добавить("ТоварыБезРазбиенияКодТНВЭД");
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(Элементы.СтраницаТоварыБезРазбиения, Не ЭтоСборУрожая, Исключения);
		
		СтруктураРеквизитов.Вставить("НазначениеПартии");
		СтруктураРеквизитов.Вставить("Подразделение");
		СтруктураРеквизитов.Вставить("РезультатИсследования");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение") Или Инициализация Тогда
		
		ЭтоПартииПереработчика = Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
		
		Элементы.Подразделение.Видимость                    = Форма.ПодразделенияИспользуются;
		Элементы.ПодразделениеВладельцаПартии.Видимость     = Форма.ПодразделенияИспользуются 
			И Объект.ПоставитьПартиюНаХранение И Форма.ТипВладельцаПартии = 0;
		Элементы.ПодразделениеТоваропроизводителя.Видимость = Форма.ПодразделенияИспользуются
			И ЭтоПартииПереработчика И Форма.ТипТоваропроизводителя = 0;
		
		ОбновитьПодсказкуВводаПодразделения(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазначениеПартии")
		Или Инициализация Тогда
		
		ЭтоВывозСТерриторииРФ = Объект.НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ");
		ЭтоВвозСТерриторииРФ = Объект.НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВвозНаТерриториюРФ");
		
		Элементы.СтранаНазначения.Видимость = ЭтоВывозСТерриторииРФ;
		Элементы.ТоварыБезРазбиенияКодТНВЭД.Видимость = ЭтоВывозСТерриторииРФ Или ЭтоВвозСТерриторииРФ;
		Элементы.ТоварыКодТНВЭД.Видимость             = ЭтоВывозСТерриторииРФ Или ЭтоВвозСТерриторииРФ;
		
	КонецЕсли;
	
	Если ИнициализацияТоваровБезРазбиения И ТекущиеДанные <> Неопределено Тогда
		СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
		ЗаполнитьЗначенияСвойств(Форма, ТекущиеДанные, СтрСоединить(СлужебныеРеквизиты, ","));
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			СтруктураРеквизитов.Вставить("ОКПД2");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И (СтруктураРеквизитов.Свойство("ТоварыНоменклатура")
			Или СтруктураРеквизитов.Свойство("Номенклатура")
			Или ИнициализацияТоваровБезРазбиения) Тогда
		
		НоменклатураЗаполнена = ЗначениеЗаполнено(ТекущиеДанные.Номенклатура);
		Элементы.ТоварыБезРазбиенияКоличество.АвтоОтметкаНезаполненного = НоменклатураЗаполнена;
		Элементы.ТоварыКоличество.АвтоОтметкаНезаполненного = НоменклатураЗаполнена;
		
		Элементы.ТоварыБезРазбиенияКоличество.ТолькоПросмотр = Не НоменклатураЗаполнена;
		СтруктураРеквизитов.Вставить("ОКПД2");
		
	КонецЕсли;
	
	Если (СтруктураРеквизитов.Свойство("ОКПД2") Или СтруктураРеквизитов.Свойство("ТоварыОКПД2"))
		 И ТекущиеДанные <> Неопределено Тогда
		
		Элементы.ПотребительскиеСвойстваПоСтрокеСкопироватьСвойстваПартии.Доступность = ЗначениеЗаполнено(ТекущиеДанные.ОКПД2);
		Элементы.ПотребительскиеСвойстваСкопироватьСвойстваПартии.Доступность = ЗначениеЗаполнено(ТекущиеДанные.ОКПД2);
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			Элементы.ТоварыБезРазбиенияКодТНВЭД.Доступность = ЗначениеЗаполнено(ТекущиеДанные.ОКПД2);
			Элементы.ТоварыКодТНВЭД.Доступность             = ЗначениеЗаполнено(ТекущиеДанные.ОКПД2);
			
			Если СтруктураРеквизитов.Свойство("ОКПД2") И ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
				ИнтеграцияЗЕРНОКлиентСервер.ОбновитьСписокВыбораКодаТНВЭД(Форма, ТекущиеДанные.ОКПД2, "ТоварыБезРазбиенияКодТНВЭД");
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("ОКПД2") Тогда
			СтруктураРеквизитов.Вставить("АктОтбораПроб");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено 
		И (СтруктураРеквизитов.Свойство("АктОтбораПроб")
		   Или СтруктураРеквизитов.Свойство("РезультатИсследования")
		   Или СтруктураРеквизитов.Свойство("ПереключательРасшифровки")
		   Или Инициализация) Тогда
		
		ЭтоФормированиеПартииПоРезультатамГосмонтиринга = 
			Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииПоРезультатамГосмониторинга");
		
		Элементы.ТоварыБезРазбиенияАктОтбораПроб.АвтоОтметкаНезаполненного = ЭтоФормированиеПартииПоРезультатамГосмонтиринга
			И Не ЗначениеЗаполнено(ТекущиеДанные.РезультатИсследования);
		Элементы.ТоварыБезРазбиенияРезультатИсследования.АвтоОтметкаНезаполненного = ЭтоФормированиеПартииПоРезультатамГосмонтиринга
			И Не ЗначениеЗаполнено(ТекущиеДанные.АктОтбораПроб);
		Элементы.ТоварыБезРазбиенияАктОтбораПроб.Доступность = Не ЗначениеЗаполнено(ТекущиеДанные.РезультатИсследования);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СтатусЗЕРНО") Тогда
		
		РедактированиеФормыНеДоступно = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи");
		
		Форма.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
	
		ЗависимыеОтСтатусаЗЕРНО = Новый Массив;
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыТовары");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("СтраницаТоварыСпискомТаблица");
		
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаТоварыБезРазбиенияСвязанныеТаблицы");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаНоменклатура");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаОКПД2ТНВЭД");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаКоличество");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаДатаСрокГодности");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаМестоположение");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ТоварыБезРазбиенияПроисхождение");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ТоварыБезРазбиенияРезультатИсследования");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ТоварыБезРазбиенияАктОтбораПроб");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ПотребительскиеСвойстваПоСтрокеСкопироватьСвойстваПартии");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ПотребительскиеСвойстваСкопироватьСвойстваПартии");
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
			ЗависимыеОтСтатусаЗЕРНО, Не Форма.РедактированиеФормыНеДоступно);
		
		ВидимостьСтатусаСтроки = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик")
		                         И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияАннулирована");
		
		ДоступностьКнопкиАннулирования = Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована")
		                                 Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартииСформированыЧастично");
		
		Элементы.ТоварыСтатусОбработки.Видимость = ВидимостьСтатусаСтроки И Объект.Товары.Количество() > 1;
		Элементы.ТоварыАннулироватьПартии.Доступность = ДоступностьКнопкиАннулирования;
		Элементы.АннулироватьПартии.Видимость = ДоступностьКнопкиАннулирования;
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ОбновитьСтатусЗЕРНО") Тогда
		
		УстановитьПараметрыОбновленияСтатуса = Форма.Модифицированность И НЕ Инициализация;
		ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСлужебныхРеквизитыФормыДляСинхронизации()
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("Серия");
	Результат.Добавить("СтатусУказанияСерий");
	Результат.Добавить("ХарактеристикиИспользуются");
	Результат.Добавить("ТипНоменклатуры");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСлужебныеРеквизитыФормы(Форма)
	
	Форма.Номенклатура = Неопределено;
	Форма.Характеристика = Неопределено;
	Форма.Серия = Неопределено;
	Форма.СтатусУказанияСерий = 0;
	Форма.ХарактеристикиИспользуются = Ложь;
	Форма.ТипНоменклатуры = Неопределено;
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры


&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "ВладелецПартииСтрокой,ТоваропроизводительСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПолеСоставногоТипа(Элемент)
	
	Если Элемент.Имя = "ВладелецПартииСтрокой"  Тогда
		ОпределитьТипОрганизацияКонтрагент(ТипВладельцаПартии, Объект.ВладелецПартии);
	ИначеЕсли Элемент.Имя = "ТоваропроизводительСтрокой" Тогда
		ОпределитьТипОрганизацияКонтрагент(ТипТоваропроизводителя, Объект.Товаропроизводитель);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	Если Результат <> Неопределено Тогда
		Элемент = ДополнительныеПараметры.Элемент;
		ПриИзмененииПолеСоставногоТипа(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		// Считываем данные из полей адреса в реквизиты для редактирования.
		СтрокаТовары.КомментарийМестоположение = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(
			СтрокаТовары.Местоположение);
		
		Если Объект.Операция = Перечисления.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт Тогда
			СтрокаТовары.КомментарийПроисхождение = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(
				СтрокаТовары.Происхождение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеАдресаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаполненияКонтактнойИнформации(ИдентификаторыСтрок, ВариантУточненияДанных)
	
	Если ИдентификаторыСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторыСтрок[0]);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКонтактнойИнформации);
	ПараметрыОткрытия.Вставить("Заголовок",               НСтр("ru = 'Укажите адрес объекта'"));
	ПараметрыОткрытия.Вставить("Значение",                ВыбраннаяСтрока[ВариантУточненияДанных]);
	ПараметрыОткрытия.Вставить("Представление",           ВыбраннаяСтрока[СтрШаблон("%1Строкой", ВариантУточненияДанных)]);
	ПараметрыОткрытия.Вставить("Комментарий",             ВыбраннаяСтрока[СтрШаблон("Комментарий%1", ВариантУточненияДанных)]);
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок, ВариантУточненияДанных", ИдентификаторыСтрок, ВариантУточненияДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнениеКонтактнойИнформацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаполнениеКонтактнойИнформацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента        = ДополнительныеПараметры.ВариантУточненияДанных;
	ИмяЭлементаСтрокой = СтрШаблон("%1Строкой", ИмяЭлемента);
	ИмяКомментария     = СтрШаблон("Комментарий%1", ИмяЭлемента);
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		ДанныеСтроки[ИмяЭлементаСтрокой] = РезультатВыбора.Представление;
		ДанныеСтроки[ИмяКомментария]     = РезультатВыбора.Комментарий;
		ДанныеСтроки[ИмяЭлемента]        = РезультатВыбора.КонтактнаяИнформация;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеМестоположенияЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, РезультатВыбора);
		
//		ДанныеСтроки.МестоположениеСтрокой     = РезультатВыбора.МестоположениеСтрокой;
//		ДанныеСтроки.КомментарийМестоположение = РезультатВыбора.КомментарийМестоположение;
//		ДанныеСтроки.Местоположение            = РезультатВыбора.Местоположение;
//		ДанныеСтроки.СкладКонтрагент           = РезультатВыбора.СкладКонтрагент;
		
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


#КонецОбласти

#Область ИзменениеДанных

&НаКлиенте
Функция СтруктураРеквизитовИзменяемыхНаСервере()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Номенклатура");
	СтруктураВозврата.Вставить("РезультатИсследования");
	СтруктураВозврата.Вставить("ТоварыРезультатИсследования");
	СтруктураВозврата.Вставить("ТоварыАктОтбораПроб");
	СтруктураВозврата.Вставить("АктОтбораПроб");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	ИмяОбновляемогоПоля = ДополнительныеПараметры.ИмяПоля;
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолейДляНастройки = Новый Массив;
	
	Если ИмяОбновляемогоПоля = "ТоварыНоменклатура" Или ИмяОбновляемогоПоля = "Номенклатура" Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ТекущийОКПД2 = ИзменяемаяСтрока.ОКПД2;
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		Если ТекущийОКПД2 <> ИзменяемаяСтрока.ОКПД2 Тогда
			ОКПД2ПриИзмененииНаКлиенте(ИзменяемаяСтрока.ОКПД2, ИзменяемаяСтрока, ДополнительныеПараметры);
		КонецЕсли;
		
		Если ИмяОбновляемогоПоля = "Номенклатура" Тогда
			СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИзменяемаяСтрока, СтрСоединить(СлужебныеРеквизиты, ","));
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыОКПД2" Или ИмяОбновляемогоПоля = "ОКПД2" Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		ОКПД2ПриИзмененииНаКлиенте(Результат, ИзменяемаяСтрока, ДополнительныеПараметры);
		Модифицированность = Истина;
		
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ТоварыХарактеристика" Или ИмяОбновляемогоПоля = "Характеристика" Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииХарактеристики(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения);
		
		Если ИмяОбновляемогоПоля = "Характеристика" Тогда
			СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИзменяемаяСтрока, СтрСоединить(СлужебныеРеквизиты, ","));
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если (ИмяОбновляемогоПоля = "ТоварыСерия" Или ИмяОбновляемогоПоля = "Серия")
		И ПараметрыУказанияСерий <> Неопределено Тогда
		
		ИзменяемаяСтрока = Элементы.Товары.ТекущиеДанные;
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииСерии(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		Если ИмяОбновляемогоПоля = "Серия" Или ПереключательРасшифровки = 0 Тогда
			СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ИзменяемаяСтрока, СтрСоединить(СлужебныеРеквизиты, ","));
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "Организация" Тогда
		
		ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление", Истина);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ВидПродукции" Тогда
		
		ПриИзмененииВидПродукции();
		
		ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление");
		
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "Операция" Тогда
		
		ЗаполнитьНазначениеПартии(ЭтотОбъект);
		ТекущееНазначениеПартии = Объект.НазначениеПартии;
		Если ЗначениеЗаполнено(Объект.НазначениеПартии)
			И Элементы.НазначениеПартии.СписокВыбора.НайтиПоЗначению(Объект.НазначениеПартии) = Неопределено Тогда
			Объект.НазначениеПартии = Элементы.НазначениеПартии.СписокВыбора.Получить(0).Значение;
		КонецЕсли;
		
		Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ФормированиеПартииИмпорт") Тогда
			Объект.ВладелецПартии = Неопределено;
			ВладелецПартииСтрокой = "";
			ТипВладельцаПартии = 0;
		Иначе
			ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление");
		КонецЕсли;
		
		БылоНазначениеЭкспорт = ТекущееНазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ");
		СталоНазначениеЭкспорт = Объект.НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ");
		
		Если БылоНазначениеЭкспорт И СталоНазначениеЭкспорт Тогда
			// Назначение "Импорт" приоритено при заполнении потребительских свойств.
			ОбновитьПотребительскиеСвойства = Ложь;
		Иначе
			// Обновить потребительские свойства по виду операции.
			ОбновитьПотребительскиеСвойства = Истина;
			Объект.СтранаНазначения = Неопределено;
		КонецЕсли;
		ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", ОбновитьПотребительскиеСвойства);
		
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ПереключательРасшифровки" Тогда
		Если Результат Тогда
			МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		Иначе
			ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление");
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "НазначениеПартии" Тогда
		
		ПриИзмененииНазначениеПартии();
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			МассивИдентификаторовСтрокКОбработке = Новый Массив;
			КодыОКПД2КОбработке = Новый Массив;
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(СтрокаТовары.ОКПД2, СтрокаТовары.КодТНВЭД, ЭтотОбъект);
				Если НайденноеЗначениеТНВЭД = Неопределено Тогда
					ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
					МассивИдентификаторовСтрокКОбработке.Добавить(СтрокаТовары.ПолучитьИдентификатор());
					КодыОКПД2КОбработке.Добавить(СтрокаТовары.ОКПД2);
				Иначе
					СтрокаТовары.КодТНВЭД = НайденноеЗначениеТНВЭД;
				КонецЕсли;
			КонецЦикла;
			
			Если МассивИдентификаторовСтрокКОбработке.Количество() Тогда
				ДополнительныеПараметры.Вставить("ИдентификаторыСтрок", МассивИдентификаторовСтрокКОбработке);
				ДополнительныеПараметры.Вставить("КодыОКПД2КОбработке", ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыОКПД2КОбработке));
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаТовары Из Объект.Товары Цикл
				СтрокаТовары.КодТНВЭД = "";
			КонецЦикла;
			
		КонецЕсли;
		
		Если Объект.НазначениеПартии <> ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ")
			Или Объект.НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ")
				И ЗначениеЗаполнено(Объект.СтранаНазначения) Тогда
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Истина);
		Иначе
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СтранаНазначения" Тогда
		
		Если ЗначениеЗаполнено(Объект.СтранаНазначения) Тогда
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Истина);
		Иначе
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
			МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПотребительскиеСвойства = Ложь;
	ОбновитьКэшВидовСельхозКультур  = Ложь;
	
	Если СтруктураРеквизитовИзменяемыхНаСервере().Свойство(ИмяОбновляемогоПоля)
		Или ДополнительныеПараметры.Свойство("ОбновитьПотребительскиеСвойства", ОбновитьПотребительскиеСвойства) И ОбновитьПотребительскиеСвойства
		Или ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур) И ОбновитьКэшВидовСельхозКультур
		Или ДополнительныеПараметры.Свойство("ПрименитьУсловноеОформление") Тогда
		ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, ДополнительныеПараметры.ИдентификаторСтроки, СтрСоединить(МассивПолейДляНастройки, ","));
	Иначе
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, СтрСоединить(МассивПолейДляНастройки, ","));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения)
	
	ИмяОбновляемогоПоля = ?(ТипЗнч(ДополнительныеПараметры) = Тип("Строка"), ДополнительныеПараметры, ДополнительныеПараметры.ИмяПоля);
	
	РезультатИсследованийПодобранПоАктуОтбораПроб = Ложь;
	Если ИмяОбновляемогоПоля = "АктОтбораПроб" Или ИмяОбновляемогоПоля = "ТоварыАктОтбораПроб" Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		Если ЗначениеЗаполнено(ТекущаяСтрока.АктОтбораПроб) Тогда
			
			ДанныеАктаОтбораПроб = ДанныеАктаОтбораПроб(ТекущаяСтрока.АктОтбораПроб);
			ТекущаяСтрока.РезультатИсследования = ДанныеАктаОтбораПроб.РезультатИсследования;
			
			ЗаполнитьОКПД2ПотребительскиеСвойства(ТекущаяСтрока, ДанныеАктаОтбораПроб);
			РезультатИсследованийПодобранПоАктуОтбораПроб = ЗначениеЗаполнено(ТекущаяСтрока.РезультатИсследования);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "РезультатИсследования" Или ИмяОбновляемогоПоля = "ТоварыРезультатИсследования"
		Или РезультатИсследованийПодобранПоАктуОтбораПроб Тогда
		
		ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		ДанныеРезультатовИсследования = ДанныеРезультатовИсследования(ТекущаяСтрока.РезультатИсследования);
		
		ЗаполнитьОКПД2ПотребительскиеСвойства(ТекущаяСтрока, ДанныеРезультатовИсследования);
		
		Если Не РезультатИсследованийПодобранПоАктуОтбораПроб Тогда
			ТекущаяСтрока.АктОтбораПроб = ДанныеРезультатовИсследования.АктОтбораПроб;
		КонецЕсли;
		ЗаполнитьЗначенияПотребительскихСвойствПродукцииПоДаннымИсточнка(ДанныеРезультатовИсследования.ПотребительскиеСвойства, ТекущаяСтрока.Идентификатор);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	ОбновитьКэшВидовСельхозКультур = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур)
		И ОбновитьКэшВидовСельхозКультур Тогда
		
		ЭтоОбработкаМассиваСтрок = ДополнительныеПараметры.Свойство("ИдентификаторыСтрок");
		
		Если ЭтоОбработкаМассиваСтрок Тогда
			КодыОКПД2 = ДополнительныеПараметры.КодыОКПД2КОбработке;
		Иначе
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
			КодыОКПД2 = ТекущаяСтрока.ОКПД2;
		КонецЕсли;
		
		ТаблицаОКПД2ТНВЭД = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(КодыОКПД2);
		ИнтеграцияЗЕРНО.ОбновитьКэшВидовСельхозКультур(ЭтотОбъект, ТаблицаОКПД2ТНВЭД);
		Если ЭтоОбработкаМассиваСтрок Тогда
			Отбор = Новый Структура("ОКПД2");
			Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
				ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если ЗначениеЗаполнено(ТекущаяСтрока.ОКПД2) Тогда
					Отбор.ОКПД2 = ТекущаяСтрока.ОКПД2;
					РезультатОтбораОКПД2ТНВЭД = ТаблицаОКПД2ТНВЭД.Скопировать(Отбор);
					ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(
						ТекущаяСтрока.КодТНВЭД, ТекущаяСтрока.ОКПД2, РезультатОтбораОКПД2ТНВЭД);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(ТекущаяСтрока.КодТНВЭД, ТекущаяСтрока.ОКПД2, ТаблицаОКПД2ТНВЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПотребительскиеСвойства = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьПотребительскиеСвойства", ОбновитьПотребительскиеСвойства)
		И ОбновитьПотребительскиеСвойства Тогда
		
		Если ИмяОбновляемогоПоля = "Операция" Или ИмяОбновляемогоПоля = "НазначениеПартии"
			Или ИмяОбновляемогоПоля = "СтранаНазначения" Тогда
			
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
			
			КодыОКПД2 = Объект.Товары.Выгрузить(, "ОКПД2").ВыгрузитьКолонку("ОКПД2");
			ПустойОКПД2 = КодыОКПД2.Найти("ОКПД2");
			Если ПустойОКПД2 <> Неопределено Тогда
				КодыОКПД2.Удалить(ПустойОКПД2);
			КонецЕсли;
			
			ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
				КодыОКПД2, Объект.НазначениеПартии, Объект.Операция, Объект.СтранаНазначения);
			Если ПотребительскиеСвойства <> Неопределено Тогда
				Отбор = Новый Структура("ОКПД2");
				ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, КодыОКПД2);
				Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
					Отбор.ОКПД2 = ТекущаяСтрока.ОКПД2;
					ПотребительскиеСвойстваТекущейСтроки = ПотребительскиеСвойства.НайтиСтроки(Отбор);
					ЗаполнитьПотребительскиеСвойстваПродукции(ЭтотОбъект, ТекущаяСтрока.Идентификатор, ПотребительскиеСвойстваТекущейСтроки);
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
			Если ЗначениеЗаполнено(ТекущаяСтрока.ОКПД2) Тогда
				ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
					ТекущаяСтрока.ОКПД2, Объект.НазначениеПартии, Объект.Операция, Объект.СтранаНазначения);
				Если ПотребительскиеСвойства <> Неопределено Тогда
					ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, ТекущаяСтрока.ОКПД2);
				КонецЕсли;
				ЗаполнитьПотребительскиеСвойстваПродукции(ЭтотОбъект, ТекущаяСтрока.Идентификатор, ПотребительскиеСвойства);
			Иначе
				ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличнойЧастиПоСтроке(
					ЭтотОбъект, ТекущаяСтрока.Идентификатор, "ИдентификаторСтрокиТоваров", "ПотребительскиеСвойства");
			КонецЕсли;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	МассивПолейДляНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбновляемогоПоля);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, СтрСоединить(МассивПолейДляНастройки, ","));
	
	Если ИмяОбновляемогоПоля = "Номенклатура" Или ДополнительныеПараметры.Свойство("ПрименитьУсловноеОформление") Тогда
		
		Если ИмяОбновляемогоПоля = "Организация" Тогда
			ОбновитьПодсказкуВводаВладелецПартииТоваропроизводитель(ЭтотОбъект);
		ИначеЕсли ИмяОбновляемогоПоля = "ВидПродукции" Тогда
			ОпределитьТипОрганизацияКонтрагент(ТипВладельцаПартии,     Объект.ВладелецПартии);
			ОпределитьТипОрганизацияКонтрагент(ТипТоваропроизводителя, Объект.Товаропроизводитель);
			ПрименитьУсловноеОформлениеХарактеристикаСерия();
		ИначеЕсли ИмяОбновляемогоПоля = "Операция" Тогда
			ОпределитьТипОрганизацияКонтрагент(ТипВладельцаПартии, Объект.ВладелецПартии);
			ПрименитьУсловноеОформлениеХарактеристикаСерия();
		Иначе
			ПрименитьУсловноеОформлениеХарактеристикаСерия();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриИзмененииПереключательРасшифровки()
	
	Если Не ПереключательРасшифровки И Объект.Товары.Количество() > 1 Тогда
		
		ОчиститьСообщения();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Переключение в режим без разбиения невозможно, если в таблице товаров введено более одной строки!'");
		Сообщение.Сообщить();
		
		ПереключательРасшифровки = Не ПереключательРасшифровки;
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьДанные(
		ПереключательРасшифровки,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "ПереключательРасшифровки", Элементы.Товары.ТекущаяСтрока));
		
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЗЕРНОПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию()
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусЗЕРНО(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПартиюМожноАннулировать(ДанныеСтроки)
	
	Если ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована")
		Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ВопросАннулированиеПартииЗавершение(РезультатВопроса, СтрокиДляАннулирования) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ПодтверждениеАннулированияПартииЗавершение(РезультатВопроса, СтрокиДляАннулирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеАннулированияПартииЗавершение(РезультатВопроса, СтрокиДляАннулирования) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.Организация        = Объект.Организация;
	ПараметрыПередачи.Подразделение      = Объект.Подразделение;
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию");
	
	ПараметрыПередачи.ПараметрыЗапроса = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиДляАннулирования Цикл
		ПараметрыПередачи.ПараметрыЗапроса.Добавить(СтрокаТаблицы.Идентификатор);
	КонецЦикла;
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка        = Объект.Ссылка;
		ПараметрыПередачи.Организация   = Объект.Организация;
		ПараметрыПередачи.Подразделение = Объект.Подразделение;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса = Ложь)
	
	Объект   = Форма.Объект;
	
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(Объект);
	
	Форма.СтатусЗЕРНО = ПараметрыСтатуса.СтатусЗЕРНО;
	Форма.СтатусЗЕРНОПредставление = ПараметрыСтатуса.СтатусЗЕРНОПредставление;
	Форма.РедактированиеФормыНеДоступно = ПараметрыСтатуса.РедактированиеФормыНеДоступно;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		ДанныеПоСтроке = ПараметрыСтатуса.СтатусыПоСтрокам[СтрокаТовары.Идентификатор];
		Если ДанныеПоСтроке = Неопределено Тогда
			СтрокаТовары.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик");
		Иначе
			СтрокаТовары.СтатусОбработки = ДанныеПоСтроке.СтатусЗЕРНО;
		КонецЕсли;
		
	КонецЦикла;
	
	НастроитьЗависимыеЭлементыФормы(Форма, Форма.Элементы.Товары.ТекущаяСтрока, "СтатусЗЕРНО");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЗЕРНО");
	Результат.Вставить("СтатусЗЕРНОПредставление");
	Результат.Вставить("РедактированиеФормыНеДоступно", Ложь);
	Результат.Вставить("СтатусыПоСтрокам", Новый Соответствие());
	
	Ссылка             = ДокументОбъект.Ссылка;
	МенеджерОбъекта    = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	СтатусЗЕРНО        = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	Статусы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
		|ГДЕ
		|	Статусы.ОбъектСинхронизации = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЗЕРНО.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторСтроки) Тогда
				
				ДанныеПоСтроке = Новый Структура;
				ДанныеПоСтроке.Вставить("СтатусЗЕРНО", Выборка.Статус);
				Результат.СтатусыПоСтрокам.Вставить(Выборка.ИдентификаторСтроки, ДанныеПоСтроке);
				
			Иначе
				
				СтатусЗЕРНО = Выборка.Статус;
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеПередачуДанных);
	
	СтатусЗЕРНОПредставление = ИнтеграцияЗЕРНО.ПредставлениеСтатуса(СтатусЗЕРНО, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусЗЕРНО <> Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
	
	Результат.СтатусЗЕРНО                   = СтатусЗЕРНО;
	Результат.СтатусЗЕРНОПредставление      = СтатусЗЕРНОПредставление;
	Результат.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыТоваров()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ТаблицаОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(Объект.Товары);
	
	КодыОКПД2 = Новый Массив;
	СоответствиеИдентификаторовСтрокОКПД2 = Новый Соответствие;
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ДанныеОКПД2 = ТаблицаОКПД2.Найти(ТекущаяСтрока.ОКПД2);
		Если ДанныеОКПД2 <> Неопределено Тогда
			ТекущаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
				ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				Строка(ТекущаяСтрока.Партия),,,, ПолучитьНавигационнуюСсылку(ТекущаяСтрока.Партия));
		Иначе
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.ОКПД2) Тогда
			КодыОКПД2.Добавить(ТекущаяСтрока.ОКПД2);
			СоответствиеИдентификаторовСтрокОКПД2[ТекущаяСтрока.Идентификатор] = ТекущаяСтрока.ОКПД2;
		КонецЕсли;
		
	КонецЦикла;
	
	КодыОКПД2 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыОКПД2);
	ИнтеграцияЗЕРНО.ИнициализироватьКэшВидовСельхозКультур(ЭтотОбъект, КодыОКПД2);
	
	ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
		КодыОКПД2, Объект.НазначениеПартии, Объект.Операция, Объект.СтранаНазначения);
	ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, КодыОКПД2);
	
	ИнициализироватьТип = Объект.Ссылка.Пустая() Или Модифицированность;
	
	ПараметрыОтбора = Новый Структура("ОКПД2, ПотребительскоеСвойство");
	Для Каждого СтрокаПотребительскогоСвойства Из Объект.ПотребительскиеСвойства Цикл
		
		ПараметрыОтбора.ОКПД2 = СоответствиеИдентификаторовСтрокОКПД2[СтрокаПотребительскогоСвойства.ИдентификаторСтрокиТоваров];
		ПараметрыОтбора.ПотребительскоеСвойство = СтрокаПотребительскогоСвойства.ПотребительскоеСвойство;
		
		НайденныеСтроки = ПотребительскиеСвойства.НайтиСтроки(ПараметрыОтбора);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			Если ИнициализироватьТип И СтрокаПотребительскогоСвойства.Значение = Неопределено Тогда
				ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьСтрокуПотребительскогоСвойства(ЭтотОбъект, СтрокаПотребительскогоСвойства, НайденнаяСтрока);
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаПотребительскогоСвойства,
					НайденнаяСтрока,
					"ПредставлениеДиапазона, ДиапазонС, ДиапазонПо");
				Если НайденнаяСтрока.ТипЗначения = ПредопределенноеЗначение("Перечисление.ТипыЗначенияПотребительскогоСвойстваЗЕРНО.Число") Тогда
					СтрокаПотребительскогоСвойства.ДиапазонИспользуется = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(ИмяЦвета = "ЦветОсобогоТекста")
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля[ИмяЦвета];
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦвета);
	#КонецЕсли
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияЗЕРНО.ПараметрыЗаполненияТабличнойЧастиТовары();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормЗЕРНОПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	КодыОКПД2 = Новый Массив;
	
	СтрокиКОбработке = Новый Массив;
	Отбор = Новый Структура("ОКПД2");
	Для Каждого СтрокаТовара Из ДобавленныеСтроки Цикл
		
		СтрокаТовара.Идентификатор = Новый УникальныйИдентификатор();
		Если ЗначениеЗаполнено(СтрокаТовара.ОКПД2) Тогда
			Отбор.ОКПД2 = СтрокаТовара.ОКПД2;
			ПотребительскиеСвойстваТекущейСтроки = КэшПотребительскихСвойств.НайтиСтроки(Отбор);
			Если ПотребительскиеСвойстваТекущейСтроки.Количество() Тогда
				ЗаполнитьПотребительскиеСвойстваПродукции(ЭтотОбъект, СтрокаТовара.Идентификатор, ПотребительскиеСвойстваТекущейСтроки);
			Иначе
				КодыОКПД2.Добавить(СтрокаТовара.ОКПД2);
				СтрокиКОбработке.Добавить(СтрокаТовара);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КодыОКПД2.Количество() Тогда
		КодыОКПД2 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыОКПД2);
		ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
			КодыОКПД2, Объект.НазначениеПартии, Объект.Операция, Объект.СтранаНазначения);
		Если ПотребительскиеСвойства <> Неопределено Тогда
			ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, КодыОКПД2);
		КонецЕсли;
	КонецЕсли;
	
	Если ПотребительскиеСвойства <> Неопределено Тогда
		Отбор = Новый Структура("ОКПД2");
		Для Каждого СтрокаТовара Из СтрокиКОбработке Цикл
			Отбор.ОКПД2 = СтрокаТовара.ОКПД2;
			ПотребительскиеСвойстваТекущейСтроки = ПотребительскиеСвойства.НайтиСтроки(Отбор);
			ЗаполнитьПотребительскиеСвойстваПродукции(ЭтотОбъект, СтрокаТовара.Идентификатор, ПотребительскиеСвойстваТекущейСтроки);
		КонецЦикла;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ТоварыНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ИзменяемаяСтрока, ДополнительныеПараметры)
	
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		
		СвойстваЗаполненыПоДаннымКэша = ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьПотребительскиеСвойстваПоДаннымКеша(
			ЭтотОбъект, ИзменяемаяСтрока.ОКПД2, ИзменяемаяСтрока.Идентификатор);
		ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Не СвойстваЗаполненыПоДаннымКэша);
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(ИзменяемаяСтрока.ОКПД2, ИзменяемаяСтрока.КодТНВЭД, ЭтотОбъект);
			Если НайденноеЗначениеТНВЭД = Неопределено Тогда
				ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
			Иначе
				ИзменяемаяСтрока.КодТНВЭД = НайденноеЗначениеТНВЭД;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ИзменяемаяСтрока.ОКПД2Представление = "";
		ИзменяемаяСтрока.КодТНВЭД           = "";
		ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличнойЧастиПоСтроке(
			ЭтотОбъект, ИзменяемаяСтрока.Идентификатор, "ИдентификаторСтрокиТоваров", "ПотребительскиеСвойства");
		ИзменяемаяСтрока.РезультатИсследования = Неопределено;
		ИзменяемаяСтрока.АктОтбораПроб         = Неопределено;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		Объект.ПотребительскиеСвойства.Очистить();
		
		Элементы.Товары.ТекущаяСтрока = Неопределено;
		ОчиститьСлужебныеРеквизитыФормы(ЭтотОбъект);
		
		Модифицированность = Истина;
		
		ОбновитьДанные(
			Объект.ВидПродукции,
			Новый Структура("ИмяПоля, ИдентификаторСтроки", "ВидПродукции", Неопределено));
		
		ОтключитьОтметкуНезаполненного();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииВидПродукции()
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции, "ТоварыБезРазбиенияНоменклатура");
	
	ЗаполнитьДоступныеОперации();
	Если ЗначениеЗаполнено(Объект.Операция)
		И Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
		Объект.Операция = Элементы.Операция.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	ЗаполнитьНазначениеПартии(ЭтотОбъект);
	Если ЗначениеЗаполнено(Объект.НазначениеПартии)
		И Элементы.НазначениеПартии.СписокВыбора.НайтиПоЗначению(Объект.НазначениеПартии) = Неопределено Тогда
		Объект.НазначениеПартии = Элементы.НазначениеПартии.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	Если Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно") Тогда
		Объект.Товаропроизводитель = Неопределено;
		ТоваропроизводительСтрокой = "";
		ТипТоваропроизводителя = 0;
	Иначе
		Объект.ВладелецПартии = Неопределено;
		ВладелецПартииСтрокой = "";
		ТипВладельцаПартии = 0;
	КонецЕсли;
	
	ПриИзмененииНазначениеПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНазначениеПартии()
	
	Если Объект.НазначениеПартии <> ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ") Тогда
		Объект.СтранаНазначения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	КонецЕсли;
	
	Если Не ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.КодТНВЭД = "";
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеВидыПродукции()
	
	ВидыПродукции = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	
	Элементы.ВидПродукции.СписокВыбора.Очистить();
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Элементы.ВидПродукции.СписокВыбора.Добавить(ВидПродукции, Строка(ВидПродукции));
	КонецЦикла;
	Элементы.ВидПродукции.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПотребительскиеСвойстваПродукции(Форма, Идентификатор, ПотребительскиеСвойстваПродукцииПоОКПД2)
	
	ИнтеграцияЗЕРНОКлиентСервер.ОчиститьДанныеТабличнойЧастиПоСтроке(Форма, Идентификатор, "ИдентификаторСтрокиТоваров", "ПотребительскиеСвойства");
	Если ПотребительскиеСвойстваПродукцииПоОКПД2 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ПотребительскиеСвойстваПродукцииПоОКПД2 Цикл
		НоваяСтрока = Форма.Объект.ПотребительскиеСвойства.Добавить();
		ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьСтрокуПотребительскогоСвойства(Форма, НоваяСтрока, Строка, Идентификатор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипОрганизацияКонтрагент(ТипВладельца, ОрганизацияКонтрагент)
	
	ТипВладельца = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(ОрганизацияКонтрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуВводаВладелецПартииТоваропроизводитель(Форма)
	
	ПредставлениеОрганизации = Строка(Форма.Объект.Организация);
	Форма.Элементы.ВладелецПартииСтрокой.ПодсказкаВвода = ПредставлениеОрганизации;
	Форма.Элементы.ТоваропроизводительСтрокой.ПодсказкаВвода = ПредставлениеОрганизации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуВводаПодразделения(Форма)
	
	Если Форма.ПодразделенияИспользуются Тогда
		
		ПредставлениеПодразделения = Строка(Форма.Объект.Подразделение);
		Если ЗначениеЗаполнено(Форма.Объект.ВладелецПартии) Тогда
			Форма.Элементы.ПодразделениеВладельцаПартии.ПодсказкаВвода = "";
		Иначе
			Форма.Элементы.ПодразделениеВладельцаПартии.ПодсказкаВвода = ПредставлениеПодразделения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Форма.Объект.Товаропроизводитель) Тогда
			Форма.Элементы.ПодразделениеТоваропроизводителя.ПодсказкаВвода = "";
		Иначе
			Форма.Элементы.ПодразделениеТоваропроизводителя.ПодсказкаВвода = ПредставлениеПодразделения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРезультатовИсследования(РезультатИсследования)
	
	ДанныеРезультатовИсследования = Новый Структура;
	ДанныеРезультатовИсследования.Вставить("ОКПД2", "");
	ДанныеРезультатовИсследования.Вставить("ОКПД2Представление", "");
	ДанныеРезультатовИсследования.Вставить("ПотребительскиеСвойства");
	ДанныеРезультатовИсследования.Вставить("АктОтбораПроб", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", РезультатИсследования);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РезультатыИсследованийЗЕРНО.ОКПД2 КАК ОКПД2,
	               |	ЕСТЬNULL(КлассификаторНСИЗЕРНО.Наименование, """") КАК Наименование,
	               |	РезультатыИсследованийЗЕРНО.АктОтбораПроб КАК АктОтбораПроб
	               |ИЗ
	               |	Справочник.РезультатыИсследованийЗЕРНО КАК РезультатыИсследованийЗЕРНО
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	               |		ПО (КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2))
	               |			И РезультатыИсследованийЗЕРНО.ОКПД2 = КлассификаторНСИЗЕРНО.Идентификатор
	               |ГДЕ
	               |	РезультатыИсследованийЗЕРНО.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РезультатыИсследованийЗЕРНОПотребительскиеСвойства.ПотребительскоеСвойство КАК ПотребительскоеСвойство,
	               |	РезультатыИсследованийЗЕРНОПотребительскиеСвойства.Значение КАК Значение
	               |ИЗ
	               |	Справочник.РезультатыИсследованийЗЕРНО.ПотребительскиеСвойства КАК РезультатыИсследованийЗЕРНОПотребительскиеСвойства
	               |ГДЕ
	               |	РезультатыИсследованийЗЕРНОПотребительскиеСвойства.Ссылка = &Ссылка";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаОКПД = Результат[0].Выбрать();
	Если ВыборкаОКПД.Следующий() Тогда
		ДанныеРезультатовИсследования.ОКПД2 = ВыборкаОКПД.ОКПД2;  
		ДанныеРезультатовИсследования.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
			ВыборкаОКПД.Наименование, ВыборкаОКПД.ОКПД2);
		Если ТипЗнч(ВыборкаОКПД.АктОтбораПроб) = Тип("СправочникСсылка.АктыОтбораПробЗЕРНО") Тогда
			ДанныеРезультатовИсследования.АктОтбораПроб = ВыборкаОКПД.АктОтбораПроб;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеРезультатовИсследования.ПотребительскиеСвойства = Результат[1].Выгрузить();
	
	Возврат ДанныеРезультатовИсследования;
	
КонецФункции

&НаСервере
Функция ДанныеАктаОтбораПроб(АктОтбораПроб)
	
	Результат = Новый Структура;
	Результат.Вставить("ОКПД2", "");
	Результат.Вставить("ОКПД2Представление", "");
	Результат.Вставить("РезультатИсследования", Неопределено);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АктОтбораПроб", АктОтбораПроб);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	РезультатыИсследованийЗЕРНО.Ссылка КАК РезультатИсследования
	|ИЗ
	|	Справочник.РезультатыИсследованийЗЕРНО КАК РезультатыИсследованийЗЕРНО
	|ГДЕ
	|	РезультатыИсследованийЗЕРНО.АктОтбораПроб = &АктОтбораПроб
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РезультатыИсследованийЗЕРНО.Ссылка КАК РезультатИсследования
	|ИЗ
	|	Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО КАК КлючиРеквизитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РезультатыИсследованийЗЕРНО КАК РезультатыИсследованийЗЕРНО
	|		ПО КлючиРеквизитов.Ссылка = РезультатыИсследованийЗЕРНО.АктОтбораПроб
	|		И КлючиРеквизитов.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументовЗЕРНО.АктОтбораПроб)
	|ГДЕ
	|	КлючиРеквизитов.Ссылка В
	|		(ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			Справочник.КлючиРеквизитовПервичныхДокументовЗЕРНО КАК Т
	|		ГДЕ
	|			Т.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыПервичныхДокументовЗЕРНО.АктОтбораПроб)
	|			И Т.Номер = ВЫРАЗИТЬ(&АктОтбораПроб КАК Справочник.АктыОтбораПробЗЕРНО).Номер
	|			И Т.Дата = ВЫРАЗИТЬ(&АктОтбораПроб КАК Справочник.АктыОтбораПробЗЕРНО).Дата)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктыОтбораПробЗЕРНО.ОКПД2 КАК ОКПД2,
	|	ЕСТЬNULL(КлассификаторНСИЗЕРНО.Наименование, """") КАК Наименование
	|ИЗ
	|	Справочник.АктыОтбораПробЗЕРНО КАК АктыОтбораПробЗЕРНО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИЗЕРНО
	|		ПО (КлассификаторНСИЗЕРНО.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2))
	|			И АктыОтбораПробЗЕРНО.ОКПД2 = КлассификаторНСИЗЕРНО.Идентификатор
	|ГДЕ
	|	АктыОтбораПробЗЕРНО.Ссылка = &АктОтбораПроб
	|";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаРезультатыИсследований = РезультатЗапроса[0].Выбрать();
	Если ВыборкаРезультатыИсследований.Следующий() Тогда
		Результат.РезультатИсследования = ВыборкаРезультатыИсследований.РезультатИсследования;
	КонецЕсли;
	
	ВыборкаОКПД = РезультатЗапроса[1].Выбрать();
	Если ВыборкаРезультатыИсследований.Следующий() Тогда
		Результат.ОКПД2 = ВыборкаОКПД.ОКПД2;
		Результат.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
			ВыборкаОКПД.Наименование, ВыборкаОКПД.ОКПД2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОКПД2ПотребительскиеСвойства(ТекущаяСтрока, ДанныеЗаполнения)
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ОКПД2) Тогда
		ТекущаяСтрока.ОКПД2              = ДанныеЗаполнения.ОКПД2; 
		ТекущаяСтрока.ОКПД2Представление = ДанныеЗаполнения.ОКПД2Представление;
		
		ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
			ТекущаяСтрока.ОКПД2, Объект.НазначениеПартии, Объект.Операция, Объект.СтранаНазначения);
		Если ПотребительскиеСвойства <> Неопределено Тогда
			ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, ТекущаяСтрока.ОКПД2);
		КонецЕсли;
		
		ЗаполнитьПотребительскиеСвойстваПродукции(ЭтотОбъект, ТекущаяСтрока.Идентификатор, ПотребительскиеСвойства);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗначенияПотребительскихСвойствПродукцииПоДаннымИсточнка(ИсточникДанных, ИдентификаторСтроки)
	
	Отбор = Новый Структура("ПотребительскоеСвойство, ИдентификаторСтрокиТоваров");
	Отбор.ИдентификаторСтрокиТоваров = ИдентификаторСтроки;
	
	Для Каждого СтрокаСвойства Из ИсточникДанных Цикл
		
		Отбор.ПотребительскоеСвойство = СтрокаСвойства.ПотребительскоеСвойство;
		НайденныеСтроки = Объект.ПотребительскиеСвойства.НайтиСтроки(Отбор);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Значение = СтрокаСвойства.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРезультатИсследования(Элемент)
	
	ПараметрыФормы = ПараметрыФормыРезультатыИсследованийАктыОтобораПроб();
	
	ОткрытьФорму("Справочник.РезультатыИсследованийЗЕРНО.Форма.ФормаВыбора",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыРезультатыИсследованийАктыОтобораПроб(ЭтоПодборАкта = Ложь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	Если ЗначениеЗаполнено(Объект.ВладелецПартии) Тогда
		ПараметрыФормы.Вставить("Товаропроизводитель", Объект.ВладелецПартии);
		Если ЗначениеЗаполнено(Объект.ПодразделениеВладельцаПартии) Тогда
			ПараметрыФормы.Вставить("Подразделение", Объект.ПодразделениеВладельцаПартии);
		КонецЕсли;
	Иначе
		ПараметрыФормы.Вставить("Товаропроизводитель", Объект.Организация);
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
		КонецЕсли;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ПараметрыФормы.Вставить("ОКПД2", ТекущиеДанные.ОКПД2);	
	КонецЕсли;
	
	Если ЭтоПодборАкта Тогда
		ПараметрыФормы.Вставить("Статус", ПредопределенноеЗначение("Перечисление.СтатусыАктовОтбораПробЗЕРНО.Подписан"));
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуАктыОтбораПроб(Элемент)
	
	ПараметрыФормы = ПараметрыФормыРезультатыИсследованийАктыОтобораПроб(Истина);
	
	ОткрытьФорму("Справочник.АктыОтбораПробЗЕРНО.Форма.ФормаВыбора",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

#Область СкопироватьПотребительскиеСвойства

&НаКлиенте
Процедура ВыборПартииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СкопироватьПотребительскиеСвойстваПартииНаСервере(Результат, ДополнительныеПараметры.ИдентификаторСтроки);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПотребительскиеСвойстваПартииНаСервере(Результат, ИдентификаторСтроки)
	
	СвойстваПартии = Справочники.РеестрПартийЗЕРНО.ПотребительскиеСвойстваПартии(Результат);
	ЗаполнитьЗначенияПотребительскихСвойствПродукцииПоДаннымИсточнка(СвойстваПартии, ИдентификаторСтроки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
