
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Ключ.Пустая() Тогда
		ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// Документ не предназначен для интерактивного ввода.
		ВызватьИсключение НСтр("ru = 'Документ не предназначен для интерактивного ввода.'");
	КонецЕсли;
	
	
	УстановитьУсловноеОформление();
	
	УстановитьЗаголовокФормы();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
			ОповеститьОПрочтении = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭД.КонтекстныеПодсказки_ПриСозданииНаСервере(ЭтотОбъект, 
		Элементы.ПанельКонтекстныхНовостей, 
		Элементы.ГруппаКонтекстныхПодсказок);
	
	СформироватьКонтекст();
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОжидатьФормированияПредставленияДокумента();
	
	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
		
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияСостоянияЭДО() Тогда
		
		ОбработатьОповещение = Истина;
		
		Если Параметр = Неопределено Тогда
			ОбновитьДанныеЭлектронногоДокументаНаСервере();
			ОжидатьФормированияПредставленияДокумента();
			Возврат;
		КонецЕсли;
		
		ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
		
		ДанныеПроверки = ИнтерфейсДокументовЭДОКлиент.НовыеДанныеПроверкиОповещения();
		ДанныеПроверки.Сообщение = ЭлементСхемы.Сообщение;
		ДанныеПроверки.ЭлектронныйДокумент = Объект.Ссылка;
		
		ИнтерфейсДокументовЭДОКлиент.ПриОбработкеОповещенияФормыПросмотраЭД(ДанныеПроверки, Параметр, ОбработатьОповещение);
		
		Если Не ОбработатьОповещение Тогда
			Возврат;
		КонецЕсли;		

		ОбновитьДанныеЭлектронногоДокументаНаСервере();
		ОжидатьФормированияПредставленияДокумента();
		
	ИначеЕсли ИмяСобытия = "ЭлектронныйДокументИсходящий_ПодборДокументаУчета" И Параметр = Объект.Ссылка Тогда
		
		ОбновитьДанныеЭлектронногоДокументаНаСервере();
		ОжидатьФормированияПредставленияДокумента();
		
	ИначеЕсли ИмяСобытия = "ВыборТекущегоДокументаПакета" И Источник = ИдентификаторПакета Тогда
		
		УстановитьТекущийДокументПакета(Параметр);
		ОжидатьФормированияПредставленияДокумента();
	
	ИначеЕсли ИмяСобытия = "ЗакрытьФормуДлительнойОперации" Тогда
		
		ИнтерфейсДокументовЭДОКлиентСервер.РазблокироватьЗаблокированныеЭлементыФормы(ЭтотОбъект, ЭтотОбъект.ЗаблокированныеЭлементыФормы);

	ИначеЕсли ИмяСобытия = МашиночитаемыеДоверенностиКлиент.ИмяСобытияИсправлениеОшибкиПроверкиПолномочий() Тогда
		
		Для Каждого ИсправленнаяОшибка Из Параметр Цикл
			Если ИсправленнаяОшибка.СсылкаНаОбъект = Объект.Ссылка Тогда
				ОбновитьСтраницуПодписей();
				ОжидатьФормированияПредставленияДокумента();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;	
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами.КонтекстныеПодсказкиБЭД	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ИзменениеВидаДокумента", Ложь) Тогда
		ЭлектронныеДокументыЭДО.ПриИзмененииВидаДокумента(ТекущийОбъект.Ссылка,
			ТекущийОбъект.ВидДокумента, Отказ);
	КонецЕсли;
	Если ИзмененаСопроводительнаяЗаписка Тогда
		ЭлементыСхемыРегламента = ОбщегоНазначенияБЭДКлиентСервер.ПолучитьВсеЭлементыДереваРекурсивно(
				СхемаРегламента);
		ИнтерфейсДокументовЭДО.ДобавитьОписанияСообщенийВПараметрыЗаписиЭлектронногоДокумента(ЭтотОбъект,
			ПараметрыЗаписи, ЭлементыСхемыРегламента);
		ЭлектронныеДокументыЭДО.ПриИзмененииСопроводительнойЗаписки(ПараметрыЗаписи.ОписанияСообщений, Отказ);
		ИзмененаСопроводительнаяЗаписка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредупреждениеНадписьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Сертификаты = Новый Массив;
	Для каждого СтрокаТаблицы Из Подписи Цикл
		Сертификаты.Добавить(СтрокаТаблицы.Отпечаток);
	КонецЦикла;
	
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	КонтекстДиагностики.ЗаголовокОперации = НСтр("ru = 'При проверке подписей'");
	
	ПараметрыОбработкиОшибок = ОбработкаНеисправностейБЭДКлиент.НовыеПараметрыОбработкиОшибок();
	ПараметрыОбработкиОшибок.ГруппаПредупреждения = Элементы.ГруппаПредупрежденияЭлектронныеПодписи;
	ПараметрыОбработкиОшибок.Отбор.Вставить("Сертификат", Сертификаты);
	КонтекстДиагностики.ОшибкиОбработаны = Ложь;
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики, ПараметрыОбработкиОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкиСопоставленияНоменклатурыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "Сопоставить" Тогда
	
		СтандартнаяОбработка = Ложь;
	
		ОткрытьСопоставлениеНоменклатуры();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НадписьОшибкаФормированияПредставленияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьЖурналРегистрации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОтборЖурналаРегистрации = Новый Структура;
		ОтборЖурналаРегистрации.Вставить("Данные", "ЭлектронныеДокументыЭДО.ПредставлениеДанныхДокумента");
		ЖурналРегистрацииКлиент.ОткрытьЖурналРегистрации(ОтборЖурналаРегистрации, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ИнтерфейсДокументовЭДОКлиент.ПросмотрЭлектронногоДокументаОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОсновногоДокументаПриИзменении(Элемент)
	ПриИзмененииВидаОсновногоДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СопроводительнаяЗапискаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	ИзмененаСопроводительнаяЗаписка = Истина;
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	ЭлементСхемы.ДополнительнаяИнформация = СопроводительнаяЗаписка;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПакета_ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	РезультатОбработки = СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(НавигационнаяСсылка);
	
	ОжидатьФормированияПредставленияДокумента();
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_ОбработкаНавигационнойСсылки(
		ЭтотОбъект, Элемент, НавигационнаяСсылка, СтандартнаяОбработка, РезультатОбработки);
	
	Если РаботаСПрочтениямиВызовСервера.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПакета_Нажатие(Элемент, СтандартнаяОбработка)
	
	ПакетыДокументовЭДОКлиент.ЭлементУправленияПакета_Нажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСхемаРегламента

&НаКлиенте
Процедура СхемаРегламентаПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("СхемаРегламентаПослеАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодписи

&НаКлиенте
Процедура ПодписиПриАктивизацииСтроки(Элемент)
	
	Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Видимость = Ложь;
	Если Элемент.ТекущиеДанные = Неопределено Или Не ЕстьПравоИзмененияМЧД Тогда
		Возврат;
	КонецЕсли;
		
	ЭтоВходящаяПодпись = Элемент.ТекущиеДанные.СвойстваПодписи.ВходящаяПодпись;
	ЭтоПодписьПоДоверенности = Элемент.ТекущиеДанные.ЭтоПодписьПоДоверенности;
	
	Если ЭтоВходящаяПодпись И ЭтоПодписьПоДоверенности Тогда
		
		РезультатПроверкиПоМЧД = Элемент.ТекущиеДанные.РезультатПроверкиПоМЧД;
		
		ПроверкаВыполненаВручную = 
			МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(
				РезультатПроверкиПоМЧД);
				
		ПроверкаПолномочийВыполненаБезОшибок = Ложь;
		ДоверенностьПроверенаУспешно = Ложь;
		Если ЗначениеЗаполнено(РезультатПроверкиПоМЧД.ПротоколПроверки) Тогда
			
			ПроверкаПолномочийВыполненаБезОшибок = 
				РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД.ПроверкаПолномочий.Успех;				
			
			ДоверенностьПроверенаУспешно = 
				МашиночитаемыеДоверенностиКлиентСервер.ДоверенностьПроверенаУспешно(
					РезультатПроверкиПоМЧД.ПротоколПроверки.ПроверкаМЧД);
		
		КонецЕсли;
		
 		ДоступнаКомандаРучнойПроверки = ПроверкаВыполненаВручную 
			Или Не (ДоверенностьПроверенаУспешно И ПроверкаПолномочийВыполненаБезОшибок); 		
		
		Если ДоступнаКомандаРучнойПроверки Тогда
			Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Видимость = ДоступнаКомандаРучнойПроверки;
			ОбновитьСостояниеКомандыРучнойПроверкиПодписи(РезультатПроверкиПоМЧД);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные <> Неопределено
		И Элемент.ТекущиеДанные.Сертификат <> Неопределено Тогда
		
		Если Поле = Элементы.ПодписиДоверенностьПредставление Тогда			
			РезультатПроверки  = Элемент.ТекущиеДанные.РезультатПроверкиПоМЧД;
			Если ЗначениеЗаполнено(РезультатПроверки) Тогда
				Если ЗначениеЗаполнено(РезультатПроверки.Доверенность) Тогда
					ПоказатьЗначение( , РезультатПроверки.Доверенность);
				КонецЕсли;
			КонецЕсли;			
		ИначеЕсли Поле = Элементы.ПодписиПодписьВернаПредставление Тогда 
									
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("СвойстваПодписи", Элемент.ТекущиеДанные.СвойстваПодписи); 
			ПараметрыФормы.Вставить("СвойстваДоверенности", Элемент.ТекущиеДанные.СвойстваДоверенности); 
			ПараметрыФормы.Вставить("РезультатПроверки", Элемент.ТекущиеДанные.РезультатПроверкиПоМЧД);
			
			ПараметрыОткрытия = ОбщегоНазначенияБЭДКлиент.НовыеПараметрыОткрытияФормы();

			Если Элемент.ТекущиеДанные.ЭтоПодписьПоДоверенности Тогда
				
				ПараметрыФормы.Вставить("ЭлектронныйДокумент", Объект.Ссылка);			
				ПараметрыФормы.Вставить("ПредставлениеДокумента", ТабличныйДокументИнформацияОтправителя);
				ПараметрыФормы.Вставить("ПодписанныйОбъект", Элемент.ТекущиеДанные.ПодписанныйОбъект);
				ПараметрыФормы.Вставить("СообщениеЭДО", Элемент.ТекущиеДанные.СообщениеЭДО);
				
				ПараметрыОбработкиПолномочий = Новый Структура("ДанныеСтроки", Элемент.ТекущиеДанные);
				ОповещениеОПроверке = Новый ОписаниеОповещения(
					"ОбработкаРезультатаПроверки", ЭтотОбъект, ПараметрыОбработкиПолномочий); 
				ПараметрыОткрытия.ОписаниеОповещенияОЗакрытии = ОповещениеОПроверке;
				
			КонецЕсли;			
						
			ПараметрыОткрытия.Владелец = ЭтотОбъект;
			ПараметрыОткрытия.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
			
			МашиночитаемыеДоверенностиКлиент.ОткрытьРезультатыПроверкиПодписи(ПараметрыФормы, ПараметрыОткрытия);
			
		Иначе		
			АдресДанныхСертификата = АдресДанныхСертификата(Элемент.ТекущиеДанные.НомерСтроки);
			
			Если АдресДанныхСертификата <> Неопределено Тогда
				ИнтеграцияБСПБЭДКлиент.ПоказатьСертификат(АдресДанныхСертификата);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПометкуУдаленияВопрос", ЭтотОбъект);
	ОбщегоНазначенияБЭДКлиент.ЗадатьВопросНаУстановкуПометкиУдаления(Объект.ПометкаУдаления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанные(Команда)
	Прочитать();
	ОжидатьФормированияПредставленияДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПанельРегламента(Команда)
	
	ОтключитьВыводСхемыРегламента = Не ОтключитьВыводСхемыРегламента;
	Элементы.ОтображатьСхемуРегламента.Пометка = Не ОтключитьВыводСхемыРегламента;
	Элементы.СхемаРегламента.Видимость = Не ОтключитьВыводСхемыРегламента;
	
	СохранитьНастройкиОтображения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОбластьКопияВерна(Команда)
	
	ОтключитьВыводКопияВерна = Не ОтключитьВыводКопияВерна;
	Элементы.ОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;	
	
	СохранитьНастройкиОтображения();
	ОбновитьПредставлениеЭлектронногоДокумента();
	ОжидатьФормированияПредставленияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительнуюИнформацию(Команда)
	
	ОтключитьВыводДопДанных = Не ОтключитьВыводДопДанных;
	Элементы.ОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	
	СохранитьНастройкиОтображения();
	ОбновитьПредставлениеЭлектронногоДокумента();
	ОжидатьФормированияПредставленияДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьБанковскиеРеквизиты(Команда)
	
	ВыводитьБанковскиеРеквизиты = Не ВыводитьБанковскиеРеквизиты;
	Элементы.ОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;

	СохранитьНастройкиОтображения();
	ОбновитьПредставлениеЭлектронногоДокумента();
	ОжидатьФормированияПредставленияДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЖурналСобытийЭДО(Команда)
	
	ЭлектронныеДокументыЭДОКлиент.ОткрытьЖурналДействийПоЭДО(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторПакета) И СостоянияПакетаОднородно Тогда
		ЭлектронныеДокументы = ПакетыДокументовЭДОВызовСервера.ДокументыПакета(ИдентификаторПакета);
	Иначе
		ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиент.ПеренаправитьЭлектронныеДокументы(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)

	ТекущиеДанные =  Элементы.Подписи.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		АдресДанныхСертификата = АдресДанныхСертификата(ТекущиеДанные.НомерСтроки);
	
		Если АдресДанныхСертификата <> Неопределено Тогда
			ИнтеграцияБСПБЭДКлиент.ПоказатьСертификат(АдресДанныхСертификата);
		КонецЕсли;
	
	Иначе
		ОчиститьСообщения();
		ТекстОшибки = НСтр("ru = 'Выберите сертификат в списке установленных подписей.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписи(Команда)
	
	ВыполнитьПроверкуПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодписьПоДоверенностиВручную(Команда)
	
	Если Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Пометка Тогда
		ВыполнитьПроверкуПодписей();
	Иначе
		ВыбраннаяПодпись = Элементы.Подписи.ТекущиеДанные; 
		
		ДанныеПодписи = ЭлектронныеДокументыЭДОКлиентСервер.НовыеДанныеПодписиСУчетомДоверенности();
		ЗаполнитьЗначенияСвойств(ДанныеПодписи, ВыбраннаяПодпись);
		
		ЗаписатьРезультатРучнойПроверкиПодписиНаСервере(ДанныеПодписи);
		ОжидатьФормированияПредставленияДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроизвольныйДокумент(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьНовыйПроизвольныйЭлектронныйДокументНаОсновании(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУчета(Команда)
	
	ПоказатьВыборСозданияДокументаУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета1(Команда)
	
	ПоказатьВыборПодбораДокументаУчета(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьДокументУчета2(Команда)
	
	ПоказатьВыборПодбораДокументаУчета(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета1(Команда)
	
	ОткрытьДокументУчета(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументУчета2(Команда)
	
	ОткрытьДокументУчета(2);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьДокументаУчета1(Команда)
	
	ПоказатьВопросОРазрывеСвязи(1);
	
КонецПроцедуры

&НаКлиенте
Процедура РазорватьСвязьДокументаУчета2(Команда)
	
	ПоказатьВопросОРазрывеСвязи(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВсеДокументыУчета(Команда)
	
	ПоказатьРасширенныйПодборДокументовУчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуЭДО(Команда)
	ОткрытьНастройкуОтраженияВУчете();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкуОтраженияВУчете()
	
	ПараметрыФормы = НастройкиЭДОКлиент.НовыеПараметрыФормыНастройкиОтраженияВУчете();
	ПараметрыФормы.ИдентификаторКонтрагента = Объект.ИдентификаторКонтрагента;
	ПараметрыФормы.ИдентификаторОрганизации = Объект.ИдентификаторОрганизации;
	ПараметрыФормы.Контрагент = Объект.Контрагент;
	ПараметрыФормы.Организация = Объект.Организация;
	
	НастройкиЭДОКлиент.ОткрытьНастройкуОтраженияВУчете(ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьНастройкаОтраженияВУчетеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапретитьСпрашиватьПроСохранениеНастроекУчета();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуЭлектронногоДокумента(Команда)
	ИнтерфейсДокументовЭДОКлиент.ОткрытьКарточкуЭлектронногоДокумента(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЭлектронныеДокументы(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для печати необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыВизуализации = ИнтерфейсДокументовЭДОВызовСервера.НовыеПараметрыВизуализацииДокумента();
	ПараметрыВизуализации.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
	ПараметрыВизуализации.ВыводитьДопДанные = Не ОтключитьВыводДопДанных;
	ПараметрыВизуализации.ВыводитьКопияВерна = Не ОтключитьВыводКопияВерна;
	
	ИнтерфейсДокументовЭДОКлиент.ОткрытьФормуПечатиЭлектронныхДокументов(Объект.Ссылка, ПараметрыВизуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПротоколОбмена(Команда)
	
	ИнтерфейсДокументовЭДОКлиент.ПоказатьПротоколОбмена(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыВФорматеPDF(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыВФорматеPDF(ЭлектронныеДокументы, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЭлектронныеДокументыДляФНС(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьЭлектронныеДокументыДляФНС(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДокументооборотЦеликом(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Для выгрузки необходимо сохранить электронный документ'"));
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка);
	ИнтерфейсДокументовЭДОКлиент.ВыгрузитьДокументооборотЦеликом(ЭлектронныеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКомментарийСостояния(Команда)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(КомментарийСостояния, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗаписку(Команда)
	
	ОчиститьСопроводительнуюЗаписку();
	
КонецПроцедуры

#Область ДействияПоЭДО

&НаКлиенте
Процедура ВыполнитьОтправкуПолучениеЭД(Элемент)
	
	Элементы.ОбновитьСостояниеЭД.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
		
	Оповещение = Новый ОписаниеОповещения("ОтправкаПолучениеЭДЗавершение", ЭтотОбъект);
	УчетныеЗаписиОбмена = Новый Массив;
	УчетныеЗаписиОбмена.Добавить(Объект.ИдентификаторОрганизации);
	ИнтерфейсДокументовЭДОКлиент.ОтправитьПолучитьДокументыЭДО(ЭтотОбъект, Оповещение, УчетныеЗаписиОбмена);

КонецПроцедуры

&НаКлиенте
Процедура Утвердить(Команда)

	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Утвердить"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьОтправить(Команда)
		
	НаборДействий = Новый Соответствие;	
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	
	Если СформироватьИзвещение Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.СформироватьИзвещение"));
	КонецЕсли;
	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	НаборДействий = Новый Соответствие;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	НаборДействий = Новый Соответствие;
	Если Объект.ОбменБезПодписи Тогда
		ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.СформироватьОтвет"));
	КонецЕсли;
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьАннулирование(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПринятьАннулирование"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьАннулирование(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
		
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
	
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ОтклонитьАннулирование"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины отклонения предложения об аннулировании'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Отклонить аннулирование'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для отклонения предложения об аннулировании документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Отклонить(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ОбъектыДействий = ИнтерфейсДокументовЭДОКлиентСервер.НовыеОбъектыДействийПоЭДО();
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, Новый Соответствие);
	ИнтерфейсДокументовЭДОКлиент.ОтклонитьОбъекты(ОбъектыДействий, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Аннулировать(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Аннулировать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Подписать"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ПодготовитьКОтправке"));
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.Отправить"));
		
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));	
		
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.Аннулировать"));
				
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины аннулирования документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Аннулировать'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для аннулирования документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	
	ДополнительныеПараметры = Новый Структура;
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ДополнительныеПараметры.Вставить("ПакетыДокументов", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторПакета));	
	Иначе
		ДополнительныеПараметры.Вставить("ЭлектронныеДокументы", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	КонецЕсли;
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	ДополнительныеПараметры.Вставить("ОсновноеДействие", ПредопределенноеЗначение(
			"Перечисление.ДействияПоЭДО.ЗакрытьПринудительно"));
	
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));	
			
	ДополнительныеПараметры.Вставить("НаборДействий", НаборДействий);
		
	Обработчик = Новый ОписаниеОповещения("ВыполнитьДействияПоЭДОПослеВводаСтроки", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);
	
	ДополнительныеПараметры = ОбщегоНазначенияБЭДКлиент.ПараметрыВводаСтроки();
	ДополнительныеПараметры.ЗаголовокФормы = НСтр("ru = 'Укажите причины принудительного закрытия документа'");
	ДополнительныеПараметры.НазваниеКнопкиПоУмолчанию = НСтр("ru = 'Закрыть принудительно'");
	ДополнительныеПараметры.Многострочность = Истина;
	ДополнительныеПараметры.Обязательность = Истина;
	ДополнительныеПараметры.КомментарийОбязательностиВвода =
		НСтр("ru = 'Для принудительного закрытия документа необходимо указать причину.'");
	ОбщегоНазначенияБЭДКлиент.ПоказатьВводСтрокиБЭД(Обработчик, ДополнительныеПараметры);	
		
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВАрхив(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьВАрхив"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьВРаботу(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ВернутьВРаботу"));
	
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПовторно(Команда)
	
	НаборДействий = Новый Соответствие;	
	ИнтерфейсДокументовЭДОКлиентСервер.ДобавитьДействие(НаборДействий, ПредопределенноеЗначение(
		"Перечисление.ДействияПоЭДО.ОтправитьПовторно"));
		
	ПакетнаяОбработка = СостоянияПакетаОднородно И СтрНайти(Команда.Имя, "Документ") = 0;
	ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтейнерДокумента(Команда)
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	Если ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда
		СинхронизацияЭДОКлиент.ОткрытьТранспортныйКонтейнерСообщения(ЭлементСхемы.Сообщение);
	Иначе
		Сообщение = НСтр("ru='Нет данных для открытия транспортного контейнера электронного документа.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Сообщение);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьСостояниеКомандыРучнойПроверкиПодписи(РезультатПроверкиПоМЧД)
	
	Элементы.ПроверкаДоверенностиВыполненаВручнуюКонтекст.Пометка = 
			МашиночитаемыеДоверенностиКлиентСервер.ПроверкаДоверенностиВыполненаВручную(РезультатПроверкиПоМЧД);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуПодписей()
	
	СообщениеЭДО = Неопределено;
	ЭлементСхемыИнформацияПолучателя = Неопределено;
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	Если ЭлементСхемы <> Неопределено Тогда
		СообщениеЭДО = ЭлементСхемы.Сообщение;
		ЭлементСхемыИнформацияПолучателя = ИнтерфейсДокументовЭДОКлиентСервер.НайтиЭлементСхемыИнформацияПолучателя(ЭлементСхемы);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПодписейДокумента", ЭтотОбъект);
	КонтекстДиагностики = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	
	Если ЗначениеЗаполнено(СообщениеЭДО) И ЭлементСхемыИнформацияПолучателя = Неопределено Тогда
		ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписиСообщения(Оповещение, СообщениеЭДО, КонтекстДиагностики);
	Иначе
		ЭлектронныеДокументыЭДОКлиент.ПроверитьПодписиДокумента(Оповещение, Объект.Ссылка, КонтекстДиагностики);
	КонецЕсли;
	
	ОформитьЗаголовокСпискаПодписей(Подписи, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьЗаголовокСпискаПодписей(Подписи, Объект)
	
	Если Подписи.НайтиСтроки(Новый Структура("ПодписьВерна", Ложь)).Количество() = 0 Тогда
		Объект.Элементы.СтраницаПодписиИСтатусы.Картинка = Новый Картинка;
	Иначе
		Объект.Элементы.СтраницаПодписиИСтатусы.Картинка = БиблиотекаКартинок.Предупреждение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ОбновитьСтраницуПодписей();
		ОбновитьПредставлениеЭлектронногоДокумента();
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуУдаленияВопрос(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = Неопределено
		Или Ответ.Значение <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьПометкуУдаления();
	ОжидатьФормированияПредставленияДокумента();
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО(), , ВладелецФормы);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаления()
	
	Объект.ПометкаУдаления = Не Объект.ПометкаУдаления;
	Записать();
	ПриСозданииЧтенииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтображения()
	
	ОтключитьВыводДопДанных = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьВыводДопДанных", Истина);	
	ОтключитьВыводКопияВерна = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьВыводКопияВерна", Истина);	
	ВыводитьБанковскиеРеквизиты = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ВыводитьБанковскиеРеквизиты", Ложь);	
	ОтключитьВыводСхемыРегламента = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить(ИмяФормы, 
		"ОтключитьВыводСхемыРегламента", Ложь);

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиОтображения()
	
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводДопДанных", ОтключитьВыводДопДанных);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводКопияВерна", ОтключитьВыводКопияВерна);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ВыводитьБанковскиеРеквизиты", ВыводитьБанковскиеРеквизиты);
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(ИмяФормы, 
		"ОтключитьВыводСхемыРегламента", ОтключитьВыводСхемыРегламента);

КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодписиПодписьВернаПредставление.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подписи.ПодписьВерна");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветОтрицательногоЧисла);   
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламента.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Ссылка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламентаСтатус.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭДО.Исходящий;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСообщенийЭДО.Отправлен;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭДО.Входящий;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.ТипЭлементаРегламента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСообщенийЭДО.Утвержден;
	
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Направление");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.НаправленияЭДО.Входящий;
	
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Статус");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыСообщенийЭДО.Получен;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Green);
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламентаНаименование.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СхемаРегламентаСтатус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.ТипЭлементаРегламента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СхемаРегламента.Доступность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ЖирныйШрифтБЭД,,,
		Истина, Ложь, Ложь, Ложь, ));
		
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЕстьПравоИзмененияМЧД = МашиночитаемыеДоверенности.ИмеетсяПравоИзмененияМЧД();
	
	ЕстьПравоВыполненияОбмена = СинхронизацияЭДО.ЕстьПравоВыполненияОбмена();
	
	ИспользуетсяОтложеннаяОтправка = НастройкиЭДО.ОтложеннаяОтправкаЭлектронныхДокументов();
	
	ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
	
	ПолучитьДанныеПакета();
	
	СформироватьПанельСоставаПакета();
	
	Если Параметры.Свойство("Сообщение") Тогда
		УстановитьИдентификаторТекущегоЭлемента(СхемаРегламента, Параметры.Сообщение);
	Иначе
		ИдентификаторТекущегоЭлемента = СхемаРегламента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();	
	КонецЕсли;	
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	РаспознатьДокумент(ЭлементСхемы);
		
	ЗаполнитьПодписи(ЭлементСхемы);
	
	ПроверитьВозможностьОтраженияВУчете();
	ПодготовитьОтражениеВУчете();
	
	ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	
	НастроитьОформлениеФормы(ЭлементСхемы);
	
	НастроитьЭлементыНастроекОтраженияВУчете();
	
	УстановитьВидимостьДоверенности();
	
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	
	УстановитьВидимостьКомандыПоказатьПротоколОбмена();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеТекущегоЭлектронногоДокумента()

	ДанныеЭлектронногоДокумента = ИнтерфейсДокументовЭДО.ДанныеФормыПросмотраЭлектронногоДокумента(Объект.Ссылка, Истина);
	
	ВыборкаСостоянияЭДО = ДанныеЭлектронногоДокумента.ВыборкаСостоянияЭДО;
	Если ВыборкаСостоянияЭДО.Следующий() Тогда
		СостояниеЭДО = ВыборкаСостоянияЭДО.Состояние;
	КонецЕсли;
	
	Если СхемаРегламента.ПолучитьЭлементы().Количество() Тогда
		СхемаРегламента.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	НастройкиСхемыРегламента = НастройкиСхемыРегламента();
	ИнтерфейсДокументовЭДО.ЗаполнитьСхемуРегламента(НастройкиСхемыРегламента,
		ДанныеЭлектронногоДокумента.ДанныеЭлементовСхемы, СхемаРегламента);
	
	Если Параметры.Свойство("Сообщение") Тогда
		ИдентификаторТекущегоЭлемента = ИнтерфейсДокументовЭДО.ИдентификаторЭлементаСхемыРегламента(
			СхемаРегламента, Параметры.Сообщение);
	КонецЕсли;
	
	ИнтерфейсДокументовЭДО.СоздатьРеквизитыИЭлементыДляПредставленияДокумента(
		ЭтотОбъект, ЭлементСхемыИнформацияОтправителя(ЭтотОбъект));	
	
	ИдентификаторПакета = ПакетыДокументовЭДО.ИдентификаторПакетаДокумента(Объект.Ссылка);
		
КонецПроцедуры

&НаСервере
Функция НастройкиСхемыРегламента()
	
	СообщениеОтправителя = РаспознатьСообщениеОтправителя(Объект.Ссылка, Объект.СпособОбмена, Объект.ТипРегламента);
	
	НастройкиСхемы = РегламентыЭДО.НовыеНастройкиСхемыРегламента();
	НастройкиСхемы.ТипРегламента = Объект.ТипРегламента;
	НастройкиСхемы.СпособОбмена = Объект.СпособОбмена;
	НастройкиСхемы.ТребуетсяИзвещение = Объект.ТребуетсяИзвещение;
	НастройкиСхемы.ТребуетсяПодтверждение = Объект.ТребуетсяПодтверждение;
	НастройкиСхемы.ЭтоВходящийЭДО = Истина;
	
	Если СообщениеОтправителя <> Неопределено Тогда
		СвойстваДокументовПоФорматам = Неопределено;
		Если СообщениеОтправителя.Свойство("СвойстваДокументовПоФорматам", СвойстваДокументовПоФорматам) Тогда
			ЗаполнитьЗначенияСвойств(НастройкиСхемы.СвойстваДокументовПоФорматам, СвойстваДокументовПоФорматам);
		КонецЕсли;
	КонецЕсли;
	
	Возврат НастройкиСхемы;
	
КонецФункции

&НаСервереБезКонтекста
Функция РаспознатьСообщениеОтправителя(ЭлектронныйДокумент, СпособОбмена, ТипРегламента)
	
 	Результат = Неопределено;
	
	Если ТипРегламента = Перечисления.ТипыРегламентовЭДО.АктОРасхождениях Тогда
	 	СообщениеОтправителя = ЭлектронныеДокументыЭДО.СообщениеОтправителя(ЭлектронныйДокумент);
	 	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС")
	 		И СпособОбмена = Перечисления.СпособыОбменаЭД.ЧерезСерверЕИС Тогда
	 		МодульЭлектронноеАктированиеЕИС = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИС");
	 		Результат =
	 			МодульЭлектронноеАктированиеЕИС.РаспознатьСообщение(СообщениеОтправителя); 		
	 	Иначе
	 		Результат = ЭлектронныеДокументыЭДО.РаспознатьСообщение(СообщениеОтправителя);
		КонецЕсли;
	КонецЕсли;	
 	
 	Возврат Результат;
 	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеПакета()
	
	КоличествоОтображаемыхДокументовПакета = 3;
	
	СоставПакета.ЗагрузитьЗначения(ПакетыДокументовЭДО.ДокументыПакета(ИдентификаторПакета));

	СостоянияДокументовПоЭДО = ПакетыДокументовЭДО.СостоянияДокументовПакета(ИдентификаторПакета);
	СостояниеПакета = ПакетыДокументовЭДО.СостояниеПакета(СостоянияДокументовПоЭДО); 
	СостоянияПакетаОднородно = ЗначениеЗаполнено(СостояниеПакета);	
	
	ТребуетсяОднородностьОтвета = СинхронизацияЭДО.ТребуетсяОднородностьОтвета(Объект.ИдентификаторКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПанельСоставаПакета()

	ПакетыДокументовЭДО.СформироватьПанельСоставаПакета(ЭтотОбъект, Элементы.ГруппаСоставПакета,
		КоличествоОтображаемыхДокументовПакета, Перечисления.НаправленияЭДО.Входящий);

	ПакетыДокументовЭДО.ЗаполнитьПанельСоставаПакета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РаспознатьДокумент(ЭлементСхемы)
	
	Если Объект.ПометкаУдаления Тогда
		Возврат;	
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ЭлектронноеАктированиеЕИС") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ЭлектронноеАктированиеЕИСПолучениеВходящих");
		МодульПодсистемы.ПриРаспознанииДокумента(ЭлементСхемы.ВидСообщения, ЭлементСхемы);
		Если ЭлементСхемы.Распознан = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульПодсистемы = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		МодульПодсистемы.ПриРаспознанииДокумента(ЭлементСхемы.ВидСообщения, ЭлементСхемы);
		Если ЭлементСхемы.Распознан = Истина Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементСхемы.Сообщение) Тогда 
		РезультатРаспознания = ЭлектронныеДокументыЭДО.РаспознатьСообщение(ЭлементСхемы.Сообщение);
		Если РезультатРаспознания <> Неопределено И РезультатРаспознания.ТипДокумента = "МашиночитаемаяДоверенность"
			И НЕ СтрЗаканчиваетсяНа(НРег(ЭлементСхемы.ИмяФайла), ".zip") Тогда
			РезультатРаспознания = Неопределено;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ВидДокумента.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ЭлектронныеДокументыЭДО.ЭтоПрикладнойВидДокумента(ЭлементСхемы.ВидСообщения)
		И ЭлементСхемы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы.РаспознаниеВыполнено = Истина;
	ЭлементСхемы.Распознан = ЗначениеЗаполнено(РезультатРаспознания);
	Если Не ЭлементСхемы.Распознан Тогда
		Элементы.ВидДокумента.СписокВыбора.ЗагрузитьЗначения(ЭлектронныеДокументыЭДО.ВидыДокументовДляПроизвольногоФормата());
		Элементы.ВидДокумента.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	ЭлементСхемы.ФормированиеПоОбъектуУчета = ЭлектронныеДокументыЭДО.ЭтоСтандартныйФормат(
		РезультатРаспознания.ИсходныйФормат);
	
	Если ЭлементСхемы.ТипЭлементаРегламента = Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда
		ЗаполнитьВидыДокументовДляИзменения(РезультатРаспознания);
	КонецЕсли;
	
	Элементы.ВидДокумента.Видимость = Элементы.ВидДокумента.СписокВыбора.Количество() > 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДокументовДляИзменения(РезультатРаспознания)
	
	СписокВыбора = Элементы.ВидДокумента.СписокВыбора;
	СписокВыбора.Очистить();
	
	ТипыДокументовДляОтражения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатРаспознания,
		"ДополнительныеТипыДокумента", Новый Массив);
	
	Если ТипыДокументовДляОтражения.Количество() > 1 Тогда
		Для Каждого ТипДокументаДляОтражения Из ТипыДокументовДляОтражения Цикл
			ТипДокументПоЗначениюСервиса = СинхронизацияЭДО.ТипДокументаПоЗначениюСервиса(ТипДокументаДляОтражения);
			СписокВыбора.Добавить(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(ТипДокументПоЗначениюСервиса));
		КонецЦикла;
		
		Если СписокВыбора.НайтиПоЗначению(Объект.ВидДокумента) = Неопределено Тогда
			СписокВыбора.Добавить(Объект.ВидДокумента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОформлениеФормы(ЭлементСхемы)
	
	ЗагрузитьНастройкиОтображения();
	
	УстановитьОформлениеНастроекФормы(ЭлементСхемы);
	
	НастроитьВидимостьИНаименованиеДействийПоСостояниюЭДО();
	
	НастроитьЭлементыОтраженияВУчете();
	
	Элементы.ГруппаДекорацииПометкиУдаления.Видимость = Объект.ПометкаУдаления;
	
	ИнтерфейсДокументовЭДО.НастроитьСопроводительнуюЗаписку(ЭтотОбъект, ЭлементСхемы);
	
	ОформитьЗаголовокСпискаПодписей(Подписи, ЭтотОбъект);
	
	ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы);
	
	СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(Объект.Ссылка);
	
	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		ШаблонПредставления = "%1 (%2)";
		СостояниеДокументаПодробное = ЭлектронныеДокументыЭДО.СостояниеДокументаПодробное(Объект.Ссылка);
		ПредставлениеСостояния = СтрШаблон(ШаблонПредставления, СостояниеДокументаПодробное.Значение,
			СостояниеДокументаПодробное.Комментарий);
	ИначеЕсли ЗначениеЗаполнено(СостояниеДокументаПодробное.Значение) Тогда		
		ПредставлениеСостояния = СостояниеДокументаПодробное.Значение;
	Иначе
		ПредставлениеСостояния = ЭлектронныеДокументыЭДО.НачальноеСостояниеДокумента();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеДокументаПодробное.Комментарий) Тогда
		КомментарийСостояния =  СостояниеДокументаПодробное.Комментарий;
		Элементы.ПоказатьКомментарийСостояния.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПричинаОтклонения.Видимость = ЗначениеЗаполнено(ПричинаОтклонения);
	Элементы.ВидДокумента.Видимость = Элементы.ВидДокумента.СписокВыбора.Количество() > 1;
	
	Если Не СостоянияПакетаОднородно И ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ОбщегоНазначенияБЭД.ПереместитьЭлемент(Элементы, 
			Элементы.ГруппаСостояние.Имя, ЭтотОбъект,
			Элементы.ГруппаДанныеДокументов.Имя);
	Иначе
		ОбщегоНазначенияБЭД.ПереместитьЭлемент(Элементы, 
			Элементы.ГруппаСостояние.Имя, 
			Элементы.ГруппаШапка.Имя,
			Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы)

	Если СостояниеЭДО = Перечисления.СостоянияДокументовЭДО.ТребуетсяПодписание Тогда
		ТекстКоличестваПодписей = МаршрутыПодписанияБЭД.ПредставлениеПрогрессаПодписания(
			ЭлементСхемы.Сообщение, Подписи.Количество())
	ИначеЕсли Подписи.Количество() > 0 Тогда
		ТекстКоличестваПодписей = "(" + Подписи.Количество() + ")";
	Иначе
		ТекстКоличестваПодписей = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстКоличестваПодписей) Тогда
		Элементы.СтраницаПодписиИСтатусы.Заголовок = СтрШаблон(НСтр("ru = 'Подписи %1'"), ТекстКоличестваПодписей);
	Иначе
		Элементы.СтраницаПодписиИСтатусы.Заголовок = НСтр("ru = 'Подписи'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьИНаименованиеДействийПоСостояниюЭДО()
	
	ЕстьПравоОбработкиДокументов = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();

	Элементы.СоздатьПроизвольныйДокумент.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.Перенаправить.Видимость = ЕстьПравоОбработкиДокументов;
	Элементы.ОбновитьСостояниеЭД.Видимость = ЕстьПравоОбработкиДокументов;

	ДействияНаЭтапеДляДокумента = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеЭДО, Объект);
	
	Если СостоянияПакетаОднородно И ЗначениеЗаполнено(Объект.Ссылка) И ЭтоПакет() Тогда
		ДействияНаЭтапе = ЭлектронныеДокументыЭДО.ДействияПоСостояниюДокумента(СостояниеПакета, Объект);
	Иначе
		ДействияНаЭтапе = ДействияНаЭтапеДляДокумента;
	КонецЕсли;
	
	Элементы.Подписать.Видимость = Ложь;
	Элементы.ПодписатьДокумент.Видимость = Ложь;
	Элементы.Отправить.Видимость = Ложь;
	Элементы.ОтправитьДокумент.Видимость = Ложь;
	Элементы.ПодписатьОтправить.Видимость = Ложь;
	Элементы.ПодписатьОтправитьДокумент.Видимость = Ложь;
		
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить) Тогда
		Элементы.ПодписатьОтправить.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.Подписать.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отправить)
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Элементы.Отправить.Видимость = Истина;
	КонецЕсли;
	
	Если ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать)
		И ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить)
		И Не ИспользуетсяОтложеннаяОтправка Тогда
		Элементы.ПодписатьОтправитьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Подписать) Тогда
		Элементы.ПодписатьДокумент.Видимость = Истина;
	ИначеЕсли ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.Отправить) 
		Или ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента, Перечисления.ДействияПоЭДО.ПодготовитьКОтправке) Тогда
		Элементы.ОтправитьДокумент.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Утвердить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Утвердить);
	Элементы.УтвердитьДокумент.Видимость = Элементы.Утвердить.Видимость;
	
	Элементы.ПринятьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
	Элементы.ПринятьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ПринятьАннулирование);
		
	Элементы.ОтклонитьАннулирование.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
	Элементы.ОтклонитьАннулированиеДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтклонитьАннулирование);
		
	Элементы.Отклонить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Отклонить);
	Элементы.ОтклонитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Отклонить);

	Элементы.Аннулировать.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.Аннулировать);
	Элементы.АннулироватьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.Аннулировать);

	Элементы.Завершить.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);
	Элементы.ЗавершитьДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ЗакрытьПринудительно);

	Элементы.ОтправитьВАрхив.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ОтправитьВАрхив);
	Элементы.ОтправитьВАрхивДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ОтправитьВАрхив);

	Элементы.ВернутьВРаботу.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.ВернутьВРаботу);
	Элементы.ВернутьВРаботуДокумент.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапеДляДокумента,
		Перечисления.ДействияПоЭДО.ВернутьВРаботу);

	Элементы.ОтправитьПовторно.Видимость = ЕстьДействиеПоЭДО(ДействияНаЭтапе,
		Перечисления.ДействияПоЭДО.ОтправитьПовторно);
	
	СформироватьИзвещение = ЕстьДействиеПоЭДО(ДействияНаЭтапе, Перечисления.ДействияПоЭДО.СформироватьИзвещение);

	ПакетСоставной = СоставПакета.Количество() > 1;
	
	Элементы.ДействияСДокументом.Видимость = ПакетСоставной И Не ТребуетсяОднородностьОтвета И СостоянияПакетаОднородно;

	Элементы.Утвердить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыУтвердить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Подписать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Отправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПодписатьОтправить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПодписатьИОтправить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ПринятьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыПринятьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтклонитьАннулирование.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонитьАннулирование(ПакетСоставной, СостоянияПакетаОднородно);		
	Элементы.Отклонить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтклонить(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Аннулировать.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыАннулировать(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ОтправитьВАрхив.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыОтправитьВАрхив(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.ВернутьВРаботу.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыВернутьВРаботу(ПакетСоставной, СостоянияПакетаОднородно);
	Элементы.Завершить.Заголовок = ИнтерфейсДокументовЭДО.ПредставлениеКомандыЗакрытьПринудительно(ПакетСоставной, СостоянияПакетаОднородно);

КонецПроцедуры

&НаСервере
Функция ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО)
	Возврат ИнтерфейсДокументовЭДО.ЕстьДействиеПоЭДО(ДоступныеДействия, ДействиеПоЭДО);
КонецФункции

&НаСервере
Функция ЭтоПакет()
	Возврат ЗначениеЗаполнено(ИдентификаторПакета);
КонецФункции 

&НаКлиенте
Процедура ВыполнитьДействияПоЭДО(НаборДействий, ПакетнаяОбработка)
	
	ПараметрыВыполненияДействийПоЭДО = ИнтерфейсДокументовЭДОКлиентСервер.НовыеПараметрыВыполненияДействийПоЭДО();
	ПараметрыВыполненияДействийПоЭДО.НаборДействий = НаборДействий;
	
	Если ПакетнаяОбработка И ЗначениеЗаполнено(ИдентификаторПакета) Тогда		
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ПакетыДокументов.Добавить(ИдентификаторПакета);
	Иначе
		ПараметрыВыполненияДействийПоЭДО.ОбъектыДействий.ЭлектронныеДокументы.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеУспешногоЗавершения",
		Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ЭтотОбъект, НаборДействий));
	ДополнительныеПараметры.Вставить("ПараметрыВыполненияДействийПоЭДО", ПараметрыВыполненияДействийПоЭДО);	
	
	Оповещение = Новый ОписаниеОповещения("ПослеВыполненияДействийПоЭДО", ИнтерфейсДокументовЭДОКлиент, ДополнительныеПараметры);

	ИнтерфейсДокументовЭДОКлиент.НачатьВыполнениеДействийПоЭДО(Оповещение, ПараметрыВыполненияДействийПоЭДО);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРезультатРучнойПроверкиПодписиНаСервере(ДанныеПодписи)
	МашиночитаемыеДоверенности.ЗаписатьРезультатРучнойПроверкиПодписи(ДанныеПодписи);
	ОбновитьСтраницуПодписей();
КонецПроцедуры

&НаСервере
Процедура СхемаРегламентаПослеАктивизацииСтрокиНаСервере()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	ЗаполнитьПодписи(ЭлементСхемы);
	
	УстановитьВидимостьДоверенности();
	
	ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы);
	
	ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	
	ИнтерфейсДокументовЭДО.НастроитьСопроводительнуюЗаписку(ЭтотОбъект, ЭлементСхемы);
	
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоверенности()  
	
	Если Подписи.НайтиСтроки(Новый Структура("ЭтоПодписьПоДоверенности", Истина)).Количество() = 0 Тогда
		Элементы.ПодписиДоверенностьПредставление.Видимость = Ложь;
	Иначе
		Элементы.ПодписиДоверенностьПредставление.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандыПоказатьПротоколОбмена()
	
	Видимость = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		ТипДокументаВида = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТипДокумента");
		Видимость = Обработки.ПротоколОбменаПоДокументуЭДО.ДоступноФормированиеПротоколаОбменаПоДокументу(ТипДокументаВида);
	КонецЕсли;
	Элементы.ПоказатьПротоколОбмена.Видимость = Видимость;
КонецПроцедуры

&НаСервере
Процедура ПоказатьПредставлениеДокумента(ЭлементСхемыРегламента)
	
	Элементы.ТекущийДокументPDF.Видимость = Ложь;
	// Если не отображаем "ТекущийДокументPDF", то на странице "СтраницаФайл" должен быть хотя бы один видимый элемент,
	//  чтобы страница корректно переключалась.
	Элементы.ДекорацияПустая.Видимость = Истина;
	
	РаспознатьДокумент(ЭлементСхемыРегламента);
	
	Если ТребуетсяВизуализацияВВидеPDF(ЭлементСхемыРегламента) Тогда
		
		ПроверятьДоступностьВыводаПДФ_А3 = Ложь;
		
		ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		ДанныеПроштамповки = ИнтерфейсДокументовЭДО.ПроштампованныйФайлPDF(ЭлементСхемыРегламента.Сообщение,
			УникальныйИдентификатор, ПроверятьДоступностьВыводаПДФ_А3);
		ФормированиеПредставления = ДанныеПроштамповки.ДлительнаяОперация;
		Если ДанныеПроштамповки.ИспользоватьПросмотрПроштампованногоФайла Тогда
			ОбновитьПредставлениеДокумента(ИдентификаторТекущегоЭлемента);
		Иначе
			УстановитьСтраницуПредставления(ЭлементСхемыРегламента);
		КонецЕсли;
		
		Возврат;
		
	Иначе
		
		Элементы.ГруппаРаботаСФайлом.Видимость = Ложь;
		ПараметрыВизуализацииДокумента = ИнтерфейсДокументовЭДО.НовыеПараметрыВизуализацииДокумента();
		ПараметрыВизуализацииДокумента.ВыводитьБанковскиеРеквизиты = ВыводитьБанковскиеРеквизиты;
		ПараметрыВизуализацииДокумента.ВыводитьДопДанные = Не ОтключитьВыводДопДанных;
		ПараметрыВизуализацииДокумента.ВыводитьКопияВерна = Не ОтключитьВыводКопияВерна;
	
		ФормированиеПредставления = ИнтерфейсДокументовЭДО.ЗапуститьФормированиеПредставленияДанныхДокумента(
			ЭлементСхемыРегламента, УникальныйИдентификатор, ПараметрыВизуализацииДокумента);
			
	КонецЕсли;
	
	ОбновитьПредставлениеДокумента(ИдентификаторТекущегоЭлемента);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТребуетсяВизуализацияВВидеPDF(ЭлементСхемыРегламента)
	
	Возврат (Не ЭлементСхемыРегламента.Распознан
		И ЭлементСхемыРегламента.ТипДокумента <> Перечисления.ТипыДокументовЭДО.Прикладной)
		ИЛИ (Не Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(ЭлементСхемыРегламента.ИмяФайла)
		И ЭлементСхемыРегламента.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент);
		
КонецФункции

&НаСервере
Процедура ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента)
	
	Элементы.ГруппаРаботаСФайлом.Видимость = Истина;
	ФормированиеПредставления = Неопределено;
	
	РедактированиеЗапрещено = ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Подписан
		ИЛИ ЭлементСхемыРегламента.Статус = Перечисления.СтатусыСообщенийЭДО.Отправлен;
	
	Если РедактированиеЗапрещено И ЭлементСхемыРегламента.ПредставлениеСформировано Тогда
		ИмяФайла = ЭлементСхемыРегламента.ИмяФайла;
		
		Элементы.НадписьИмяФайла.Гиперссылка = Истина;
		Элементы.НадписьИмяФайла.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
		Возврат;
	КонецЕсли;
	
	ЭлементСхемыРегламента.ИмяРеквизита = "Файл";
	ЭлементСхемыРегламента.ПредставлениеСформировано = Истина;
		
	ДанныеФайла = Новый Структура;
	Если ЗначениеЗаполнено(ЭлементСхемыРегламента.ПрисоединенныйФайл) Тогда
		ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
		ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
		ПараметрыДанныхФайла.ВызыватьИсключение = Ложь;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлементСхемыРегламента.ПрисоединенныйФайл, ПараметрыДанныхФайла);
		Если ДанныеФайла <> Неопределено Тогда
			ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
			Если Не ДанныеФайла.ПометкаУдаления И ДвоичныеДанныеФайла = Неопределено Тогда
				ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь; // Если данных нет, нечего формировать
			КонецЕсли;
		Иначе
			ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(ЭлементСхемыРегламента.АдресФайла) Тогда
		ДанныеФайла.Вставить("ИмяФайла", ЭлементСхемыРегламента.ИмяФайла);
		ДанныеФайла.Вставить("Расширение", ЭлементСхемыРегламента.РасширениеФайла);
		ДанныеФайла.Вставить("ФайлРедактируется", Ложь);
		ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь", Ложь);
	Иначе
		ИмяФайла = НСтр("ru = '<отсутствует>'");
		КартинкаФайла = 0;
		Элементы.НадписьИмяФайла.Гиперссылка = Ложь;
		Элементы.НадписьИмяФайла.ЦветТекста = WebЦвета.Кирпичный;
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ДанныеФайла.ИмяФайла;
	ЭлементСхемыРегламента.ИмяФайла = ИмяФайла;
	
	КартинкаФайла = РаботаСФайламиБЭДКлиентСервер.ИндексКартинкиПоРасширениюФайла(ДанныеФайла.Расширение);
	
	Элементы.НадписьИмяФайла.Гиперссылка = Истина;
	Элементы.НадписьИмяФайла.ЦветТекста = ЦветаСтиля.ЦветГиперссылкиБЭД;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеДокумента(ИдентификаторТекущегоЭлементаИзКонтекста)
	
	// Если идентификаторы не совпадают, значит визуализация неактуальна.
	Если ИдентификаторТекущегоЭлемента <> ИдентификаторТекущегоЭлементаИзКонтекста Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементСхемыРегламента = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
		
	Если ФормированиеПредставления = Неопределено
		ИЛИ ФормированиеПредставления.Статус = "Ошибка" Тогда
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого();
		ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаОшибка;
		
	ИначеЕсли ФормированиеПредставления.Статус = "Выполнено" Тогда

		ПодготовитьПредставлениеДокумента(ЭлементСхемыРегламента);
		УстановитьСтраницуПредставления(ЭлементСхемыРегламента);
		
	ИначеЕсли ФормированиеПредставления.Статус = "Выполняется" Тогда
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого();
		ПодготовитьПредставлениеОжидания(ЭлементСхемыРегламента);
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеДокумента(ЭлементСхемыРегламента)
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФормированиеПредставления.АдресРезультата);
	Если РезультатФормирования = Неопределено Тогда
		ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
		Возврат;
	ИначеЕсли РезультатФормирования.ПредставлениеДокумента = Неопределено Тогда
		
		Если ТребуетсяВизуализацияВВидеPDF(ЭлементСхемыРегламента) Тогда
			ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
			Если ЗначениеЗаполнено(РезультатФормирования.ТекстОшибки) Тогда
				ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
				ЭлементСхемыРегламента.ИмяРеквизита = "Ошибка";
			КонецЕсли;
		Иначе
			ПодготовитьПредставлениеФайла(ЭлементСхемыРегламента);
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЭлементСхемыРегламента.ТипЭлементаРегламента
		= Перечисления.ТипыЭлементовРегламентаЭДО.ИнформацияОтправителя Тогда

		ЭлементСхемыРегламента.ИмяРеквизита = Элементы.ТабличныйДокументИнформацияОтправителя.ПутьКДанным;

	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.ОбменСГИСЭПД") Тогда
		МодульОбменСГИСЭПД = ОбщегоНазначения.ОбщийМодуль("ОбменСГИСЭПД");
		Если МодульОбменСГИСЭПД.ЭтоТитулОтправителя(ЭлементСхемыРегламента.ТипЭлементаРегламента) Тогда
			ЭлементСхемыРегламента.ИмяРеквизита = Элементы.ТабличныйДокументИнформацияОтправителя.ПутьКДанным;	
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеДокумента = РезультатФормирования.ПредставлениеДокумента;
	
	Если ТипЗнч(ПредставлениеДокумента) = Тип("ДвоичныеДанные") Тогда
		
		Отказ = Ложь;
		
		Попытка
			ТекущийДокументPDF.Прочитать(ПредставлениеДокумента.ОткрытьПотокДляЧтения());
		Исключение
			Отказ = Истина;
			ИнтерфейсДокументовЭДО.ЗаписатьОшибкуВизуализацииPDFВЖурналРегистрации(ИнформацияОбОшибке());
		КонецПопытки;
		
		Если Отказ Тогда
			ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента);
		Иначе
			ЭлементСхемыРегламента.ИмяРеквизита = "Файл";
			Элементы.ТекущийДокументPDF.Видимость = Истина;
			Элементы.ДекорацияПустая.Видимость    = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ПредставлениеДокумента) = Тип("Строка") Тогда
		ЭлементСхемыРегламента.ИмяРеквизита = Элементы.HTMLДокументИнформацияОтправителя.ПутьКДанным;
		ЭлектронныеДокументыЭДО.ДополнитьСтрокуHTMLШтампамиПодписей(ПредставлениеДокумента, ЭлементСхемыРегламента.Сообщение);
		ЭтотОбъект[ЭлементСхемыРегламента.ИмяРеквизита] = ПредставлениеДокумента;
	Иначе
		ЭлектронныеДокументыЭДО.ДополнитьТабличныйДокументШтампамиПодписей(ПредставлениеДокумента, ЭлементСхемыРегламента.Сообщение);
		ЭтотОбъект[ЭлементСхемыРегламента.ИмяРеквизита] = ПредставлениеДокумента;
	КонецЕсли;
	
	ЭлементСхемыРегламента.ПредставлениеСформировано = Истина;
	ФормированиеПредставления = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеОшибки(ЭлементСхемыРегламента)
	ФормированиеПредставления = Неопределено;
	ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь;
	ЭлементСхемыРегламента.ИмяРеквизита = "Ошибка";
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПредставлениеОжидания(ЭлементСхемыРегламента)
	ЭлементСхемыРегламента.ПредставлениеСформировано = Ложь;
КонецПроцедуры

&НаСервере
Процедура УстановитьСтраницуПредставления(ЭлементСхемыРегламента)
	
	Если ЭлементСхемыРегламента.ИмяРеквизита = Элементы.HTMLДокументИнформацияОтправителя.ПутьКДанным Тогда
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого(Ложь);
		
	Иначе
		
		УстановитьВидимостьСтандартнойСтраницыСодержимого();
		Элементы.СтраницыПредставленийДокумента.ТекущаяСтраница = 
			Элементы["Страница" + ЭлементСхемыРегламента.ИмяРеквизита];
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтандартнойСтраницыСодержимого(Показывать = Истина)
	
	Элементы.СтраницаСодержимоеHTMLДокумент.Видимость = Не Показывать;
	Элементы.СтраницаСодержимое.Видимость = Показывать;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИдентификаторТекущегоЭлемента(ЭлементСхемыРодитель, Сообщение, Установлен = Ложь)
	
	Если Установлен Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияЭлементовСхемы = ЭлементСхемыРодитель.ПолучитьЭлементы();
	Если КоллекцияЭлементовСхемы.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Сообщение) Тогда
		ИдентификаторТекущегоЭлемента = КоллекцияЭлементовСхемы[0].ПолучитьИдентификатор();
		Установлен = Истина;
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементСхемы Из КоллекцияЭлементовСхемы Цикл
		Если ЭлементСхемы.Сообщение = Сообщение Тогда
			ИдентификаторТекущегоЭлемента = ЭлементСхемы.ПолучитьИдентификатор();
			Установлен = Истина;
		Иначе
			УстановитьИдентификаторТекущегоЭлемента(ЭлементСхемы, Сообщение, Установлен);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодписи(ЭлементСхемы)
	
	Если Подписи.Количество() Тогда
		Подписи.Очистить();
	КонецЕсли;
	
	Если Объект.ОбменБезПодписи
		ИЛИ Не ЗначениеЗаполнено(ЭлементСхемы.ПрисоединенныйФайл) Тогда
		Возврат;
	КонецЕсли;
	
	УстановленныеПодписи = ИнтерфейсДокументовЭДО.УстановленныеПодписи(ЭлементСхемы, Объект.ТипРегламента);
	Для Каждого СтрокаПодпись Из УстановленныеПодписи Цикл
		НоваяСтрока = Подписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодпись);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПодпись.СвойстваПодписи);
		НоваяСтрока.НомерСтроки = Подписи.Индекс(НоваяСтрока);
		НоваяСтрока.ВыводКартинки = ?(НоваяСтрока.ПодписьВерна, 0, 1);
	КонецЦикла;
	ИнтерфейсДокументовЭДО.ЗаполнитьПредставлениеСостоянияПодписей(Подписи);
	
	Элементы.ПодписиВыводКартинки.Видимость = Подписи.Итог("ВыводКартинки") = 1;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	СопроводительнаяЗаписка = ЭлементСхемы.ДополнительнаяИнформация;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если СоставПакета.Количество() > 1 Тогда
		Заголовок = ПакетыДокументовЭДО.ЗаголовокОтображенияПакетов(СоставПакета.Количество());
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПредставления = ЭлектронныеДокументыЭДО.НовыеСвойстваПредставленияДокумента();
	ПараметрыПредставления.ВидДокумента = Объект.ВидДокумента;
	ПараметрыПредставления.НомерДокумента = Объект.НомерДокумента;
	ПараметрыПредставления.ДатаДокумента = Объект.ДатаДокумента;
	
	Заголовок = ЭлектронныеДокументыЭДО.ПредставлениеДокументаПоСвойствам(ПараметрыПредставления, Объект.Ссылка.Пустая());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеНастроекФормы(ЭлементСхемы)
	
	Элементы.ОтображатьДополнительнуюИнформацию.Пометка = Не ОтключитьВыводДопДанных;
	Элементы.ОтображатьОбластьКопияВерна.Пометка = Не ОтключитьВыводКопияВерна;	
	
	Элементы.ОтображатьСхемуРегламента.Пометка = Не ОтключитьВыводСхемыРегламента;
	Элементы.СхемаРегламента.Видимость = Не ОтключитьВыводСхемыРегламента;
	
	ВыводитьПодсказкуПДФ_А3 = Ложь;
	ВыводитьКомандуВыгрузкиВФорматеPDF = Истина;
	
	Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.СчетНаОплату Тогда
		
		ВыводитьБанковскиеРеквизиты = Истина;
		Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Ложь;
	
	ИначеЕсли ЭлементСхемы.ФормированиеПоОбъектуУчета Тогда
		
		Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Истина;
		
		Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.ДоговорныйДокумент Тогда
			Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Ложь;
			Элементы.ОтображатьДополнительнуюИнформацию.Видимость = Ложь;
			Элементы.ОтображатьОбластьКопияВерна.Видимость = Ложь;
		КонецЕсли;
		
		ВыводитьПодсказкуПДФ_А3 = Обработки.ФорматДоговорныйДокумент101.ЭтоФайлФормата(ЭлементСхемы.ИмяФайла);
		ВыводитьКомандуВыгрузкиВФорматеPDF =
			Не Обработки.ФорматДоговорныйДокументИнформацияОтправителяЭДО.ЭтоФайлФормата(ЭлементСхемы.ИмяФайла);
	Иначе
		
		Элементы.ОтображатьБанковскиеРеквизиты.Видимость = Ложь;	
		Элементы.ОтображатьДополнительнуюИнформацию.Видимость = Ложь; 
		Элементы.ОтображатьОбластьКопияВерна.Видимость = Ложь;
		
	КонецЕсли;
	
	Элементы.ОтображатьБанковскиеРеквизиты.Пометка = ВыводитьБанковскиеРеквизиты;
	
	Если ВыводитьПодсказкуПДФ_А3 Тогда
		Элементы.НадписьПодсказкаДоговорныйДокументПДФ_А3.Заголовок = 
			Обработки.ФорматДоговорныйДокумент101.ТекстСправки();
	КонецЕсли;
	Элементы.ГруппаПодсказкаДоговорныйДокументПДФ_А3.Видимость = ВыводитьПодсказкуПДФ_А3;
	
	Элементы.ВыгрузитьЭлектронныеДокументыВФорматеPDF.Видимость = ВыводитьКомандуВыгрузкиВФорматеPDF;
	
КонецПроцедуры

&НаКлиенте
Процедура СхемаРегламентаПослеАктивизацииСтроки()
	
	ИдентификаторЭлементаСхемы = Элементы.СхемаРегламента.ТекущаяСтрока;
	Если ИдентификаторЭлементаСхемы <> Неопределено
		И ИдентификаторЭлементаСхемы <> ИдентификаторТекущегоЭлемента
		И Элементы.СхемаРегламента.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.СхемаРегламента.ТекущиеДанные.Сообщение)
		И Элементы.СхемаРегламента.ТекущиеДанные.Статус <>
			ПредопределенноеЗначение("Перечисление.СтатусыСообщенийЭДО.НеСформирован") Тогда
		
		ИдентификаторТекущегоЭлемента = ИдентификаторЭлементаСхемы;
		СхемаРегламентаПослеАктивизацииСтрокиНаСервере();
		ОжидатьФормированияПредставленияДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущийДокументПакета(Документ)
	ОбъектДокумента = Документ.ПолучитьОбъект();
	ЗначениеВДанныеФормы(ОбъектДокумента, Объект);
	ЭтотОбъект.Прочитать();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеЭлектронногоДокумента()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	ЭлементСхемы.ПредставлениеСформировано = Ложь;
		
	ПоказатьПредставлениеДокумента(ЭлементСхемы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОжидатьФормированияПредставленияДокумента()
	
	Если ФормированиеПредставления = Неопределено Или Не ФормированиеПредставления.Свойство("ИдентификаторЗадания") Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПоказатьПредставлениеДанныхДокументаПослеФормирования", ЭтотОбъект,
		Новый Структура("ИдентификаторТекущегоЭлемента", ИдентификаторТекущегоЭлемента));
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.Вставить("ВыводитьОкноОжидания", Ложь);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ФормированиеПредставления, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПредставлениеДанныхДокументаПослеФормирования(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено
		ИЛИ ФормированиеПредставленияОтменено Тогда
		ФормированиеПредставленияОтменено = Ложь;
		Возврат;
	КонецЕсли;
	
	ФормированиеПредставления = Результат;
	ОбновитьПредставлениеДокумента(Контекст.ИдентификаторТекущегоЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыполненияДействийПоЭДО(Результат, НаборДействий) Экспорт
	
	Если НаборДействий.Получить(ПредопределенноеЗначение("Перечисление.ДействияПоЭДО.ОтправитьВАрхив")) = Истина Тогда
		Закрыть();
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЭлектронногоДокументаНаСервере()
	
	ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
	
	ИдентификаторТекущегоЭлемента = СхемаРегламента.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	РаспознатьДокумент(ЭлементСхемы);
	
	ПолучитьДанныеПакета();
	
	ЗаполнитьПодписи(ЭлементСхемы);
	
	ЗаполнитьТекстСопроводительнойЗаписки(ЭлементСхемы);
	
	НастроитьОформлениеФормы(ЭлементСхемы);
	
	УстановитьВидимостьДоверенности();
	
	ОбновитьПредставлениеЭлектронногоДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправкаПолучениеЭДЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.ОбновитьСостояниеЭД.Картинка = БиблиотекаКартинок.Обновить;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиПодписейДокумента(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат.Успех) Тогда
		ОбновитьСтраницуПодписей();
		ОжидатьФормированияПредставленияДокумента();
	КонецЕсли;
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(Результат.КонтекстДиагностики);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭлементСхемыИнформацияОтправителя(Форма)
	Возврат Форма.СхемаРегламента.ПолучитьЭлементы()[0];
КонецФункции

&НаСервере
Функция АдресДанныхСертификата(НомерСтроки)
	
	ДвоичныеДанныеСертификата = Подписи[НомерСтроки].Сертификат.Получить();
	СсылкаНаХранилищеДанныхСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
	Возврат СсылкаНаХранилищеДанныхСертификата;
	
КонецФункции

&НаСервере
Процедура ЗапретитьСпрашиватьПроСохранениеНастроекУчета()
	
	Отказ = Ложь;
	
	КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
	КлючНастроек.ВидДокумента = Объект.ВидДокумента;
	КлючНастроек.ИдентификаторОтправителя = Объект.ИдентификаторКонтрагента;
	КлючНастроек.ИдентификаторПолучателя = Объект.ИдентификаторОрганизации;
	КлючНастроек.Отправитель = Объект.Контрагент; 
	КлючНастроек.Получатель = Объект.Организация;
	
	НастройкиЭДО.ЗаписатьНастройкуПолученияДокументов(КлючНастроек, Неопределено, Истина, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаНастройкиОтраженияВУчете.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаОсновногоДокумента()
	
	Если Не ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ИзменениеВидаДокумента", Истина);
	Записать(ПараметрыЗаписи);
	
	ЗаполнитьДанныеТекущегоЭлектронногоДокумента();
	ПодготовитьОтражениеВУчете();
	НастроитьЭлементыОтраженияВУчете();
	УстановитьВидимостьКомандыПоказатьПротоколОбмена();
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтраницуПодписей()
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	ЗаполнитьПодписи(ЭлементСхемы);
	УстановитьВидимостьДоверенности();
	ЗаполнитьЗаголовокСтраницыПодписей(ЭлементСхемы);
	
	ОбновитьПредставлениеЭлектронногоДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСопроводительнуюЗаписку()
	ИнтерфейсДокументовЭДО.ОчиститьСопроводительнуюЗаписку(ЭтотОбъект);
КонецПроцедуры

#Область ОтражениеВУчете

&НаСервере
Процедура ПодготовитьОтражениеВУчете()
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	СписокТиповДокументов.Очистить();
	СписокСоздания.Очистить();
	СписокПодбораОбщий.Очистить();
	
	Если ЭлементСхемы.ТипДокумента <> Перечисления.ТипыДокументовЭДО.Прикладной
		И Не ЭлементСхемы.Распознан
		Или ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прочее Тогда
		СписокТиповДокументов = ИнтеграцияЭДО.СписокОперацийВсехТиповДокумента();
	Иначе
		СписокТиповДокументов = ИнтеграцияЭДО.СписокОперацийВидаДокумента(Объект.ВидДокумента);
	КонецЕсли;  
	
	Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.МашиночитаемаяДоверенность Тогда
		МашиночитаемыеДоверенности.ОграничитьВариантыОтраженияВУчетеПоДаннымЭлектронногоДокумента(Объект.Ссылка, 
			СписокТиповДокументов);
	КонецЕсли;

	СписокТиповДокументовДоп = Новый СписокЗначений;
	
	Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД Тогда
			
		ДанныеЭлектронногоДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(Объект.Ссылка)[0];
		
		ДополнительныеВиды = ЭлектронныеДокументыЭДО.ДополнительныеВидыДокументовУПД(ДанныеЭлектронногоДокумента.ДанныеОсновногоФайла);
			
		Для каждого ДополнительныйВид Из ДополнительныеВиды Цикл
			
			ДополнительныйСписок = ИнтеграцияЭДО.СписокОперацийВидаДокумента(ДополнительныйВид);
			
			Для каждого Элемент Из ДополнительныйСписок Цикл
				Если СписокТиповДокументовДоп.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
					СписокТиповДокументовДоп.Добавить(Элемент.Значение, Элемент.Представление);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД Тогда	
		
		ДополнительныйСписок = ИнтеграцияЭДО.СписокОперацийВидаДокумента(ЭлектронныеДокументыЭДО.ВидДокументаПоТипу(
			Перечисления.ТипыДокументовЭДО.СоглашениеОбИзмененииСтоимости));
			
		Для каждого Элемент Из ДополнительныйСписок Цикл
			Если СписокТиповДокументовДоп.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
				СписокТиповДокументовДоп.Добавить(Элемент.Значение, Элемент.Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Элемент Из СписокТиповДокументовДоп Цикл
		Элемент.Значение = СокрЛП(Элемент.Значение);
		Элемент.Представление = СокрЛП(Элемент.Представление);
	КонецЦикла;
	Для Каждого Элемент Из СписокТиповДокументов Цикл
		Элемент.Значение = СокрЛП(Элемент.Значение);
		Элемент.Представление = СокрЛП(Элемент.Представление);
	КонецЦикла;
	
	СписокПодбораОбщий.Очистить();
	СписокПодбораОсновной.Очистить();
	СписокПодбораДоп.Очистить();
	
	Для Каждого ЭлементСпискаТипов Из СписокТиповДокументов Цикл
		СписокПодбораОбщий.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
		СписокПодбораОсновной.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
	КонецЦикла;
	Для Каждого ЭлементСпискаТипов Из СписокТиповДокументовДоп Цикл
		СписокПодбораОбщий.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
		СписокПодбораДоп.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,, БиблиотекаКартинок.ВыбратьЗначение);
	КонецЦикла;
	
	Для Каждого ЭлементСпискаТипов Из СписокТиповДокументов Цикл
		
		Если ЗначениеЗаполнено(СписокТиповДокументовДоп) Тогда
			
			Для каждого ТипДокументаДоп Из СписокТиповДокументовДоп Цикл
				
				ПредставлениеОбщее = ЭлементСпискаТипов.Представление + "; " + ТипДокументаДоп.Представление;
				ВсеЗначения = Новый Массив;
				ВсеЗначения.Добавить(ЭлементСпискаТипов.Значение);
				ВсеЗначения.Добавить(ТипДокументаДоп.Значение);
				СписокСоздания.Добавить(ВсеЗначения, ПредставлениеОбщее,, БиблиотекаКартинок.СоздатьЭлементСписка);
				
			КонецЦикла;
			
		Иначе
			
			СписокСоздания.Добавить(ЭлементСпискаТипов.Значение, ЭлементСпискаТипов.Представление,,БиблиотекаКартинок.СоздатьЭлементСписка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокСоздания.Количество() = 1 Тогда		
		ШаблонЗаголовка = НСтр("ru = 'создать ""%1""'");
		Элементы.КомандаСоздатьДокументУчета.Заголовок = СтрШаблон(ШаблонЗаголовка, СписокСоздания[0].Представление);
	Иначе			
		Элементы.КомандаСоздатьДокументУчета.Заголовок = НСтр("ru = 'создать...'");
	КонецЕсли;
	
	Если СписокПодбораОбщий.Количество() = 1 Тогда
		
		Элементы.КомандаПодобратьДокументУчета1.Заголовок = НСтр("ru = 'подобрать'");
		
	КонецЕсли;
	
	Если СоставПакета.Количество() > 0 Тогда
		ОбъектыКонтроля = СоставПакета.ВыгрузитьЗначения();
	Иначе
		ОбъектыКонтроля = Объект.Ссылка;
	КонецЕсли;
	
	ЕстьНоменклатураНаКонтроле = ЕстьНоменклатураКонтрагентовНаКонтроле(ОбъектыКонтроля);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОтражениеВУчете()
	
	ЕстьОсновнойДокумент = Ложь;
	
	Для Каждого Элемент Из СписокТиповДокументов Цикл
		Для Каждого СтрокаОснования Из Основания Цикл
			Если Элемент.Значение = СтрокаОснования.СпособОбработки Тогда
				ЕстьОсновнойДокумент = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыНастроекОтраженияВУчете()
	
	ВидимостьГруппыСохраненияНастроек = ЭтотОбъект.ЕстьВозможностьОтраженияВУчете
		И Не ЭтотОбъект.ОтраженВУчете;
		
	СпрашиватьПроСохранениеНастроекУчета = Ложь;
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	Если (ЭлементСхемы.Распознан 
		И ПараметрыДокумента <> Неопределено
		И ПараметрыДокумента.Свойство("ОтражениеВУчете"))
		Или ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда 
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
		КлючНастроек.ВидДокумента = Объект.ВидДокумента;
		КлючНастроек.ИдентификаторОтправителя = Объект.ИдентификаторКонтрагента;
		КлючНастроек.ИдентификаторПолучателя = Объект.ИдентификаторОрганизации;
		КлючНастроек.Отправитель = Объект.Контрагент; 
		КлючНастроек.Получатель = Объект.Организация;
		
		НастройкиОтраженияВУчете = НастройкиЭДО.НастройкиОтраженияВУчете(КлючНастроек);
		
		СпрашиватьПроСохранениеНастроекУчета = НастройкиОтраженияВУчете.ПредлагатьСохранятьНастройки;	
	КонецЕсли;
	
	Элементы.ГруппаНастройкиОтраженияВУчете.Видимость = ВидимостьГруппыСохраненияНастроек
		И СпрашиватьПроСохранениеНастроекУчета И Основания.Количество() = 0 И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
		
	Шаблон = НСтр("ru = 'Настройки отражения в учете будут сохранены для контрагента %1.'");
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрШаблон(Шаблон, Объект.Контрагент));
	МассивСтрок.Добавить(" ");
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Отменить'"),,,,"Отменить"));
	
	Элементы.НадписьНастройкаОтраженияВУчете.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
		
КонецПроцедуры

&НаСервере
Процедура НастроитьЭлементыОтраженияВУчете()
	
	Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Видимость = Ложь;
	
	Основания.Загрузить(ИнтеграцияЭДО.ОбъектыУчетаЭлектронныхДокументов(Объект.Ссылка));
	
	ПересчитатьОтражениеВУчете();
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	КоличествоДУ = Основания.Количество();
	
	ЭтоСЧФДОПУПД = (ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД);
	ЭтоКСЧФДИСУКД = (ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД);
	ИспользуетсяДополнительныйДокумент = ЭтоСЧФДОПУПД Или ЭтоКСЧФДИСУКД;
	
	ЕстьОдинДУ = (КоличествоДУ > 0);
	ЕстьДваДУ = (КоличествоДУ > 1);
	ЕстьМногоДУ = (КоличествоДУ > ?(ИспользуетсяДополнительныйДокумент, 2, 1));
	
	ЕстьПравоОбработкиДокумента = ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	Если ЕстьПравоОбработкиДокумента Тогда
		Элементы.ГруппаСоздатьДокументУчета.Видимость = Не ЕстьОдинДУ 
			И (ЭлементСхемы.ФормированиеПоОбъектуУчета
			Или ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной);
	ИначеЕсли ЕстьОдинДУ Тогда
		Элементы.ГруппаСоздатьДокументУчета.Видимость = Ложь;
	Иначе
		Элементы.ГруппаДокументыУчета.Видимость           = Ложь;
		Элементы.ГруппаОтражениеВУчете.Видимость          = Ложь;
		Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.КомандаПодобратьДокументУчета1.Видимость = Не ЕстьОдинДУ И ЕстьПравоОбработкиДокумента;
	Элементы.КомандаОткрытьДокументУчета1.Видимость = ЕстьОдинДУ;
	Элементы.КомандаРазорватьСвязьДокументаУчета1.Видимость = ЕстьОдинДУ И ЕстьПравоОбработкиДокумента;
	
	Элементы.КомандаПодобратьДокументУчета2.Видимость = ЕстьОдинДУ И Не ЕстьДваДУ
		И ИспользуетсяДополнительныйДокумент И ЕстьПравоОбработкиДокумента;
	Элементы.КомандаОткрытьДокументУчета2.Видимость = ЕстьДваДУ И ИспользуетсяДополнительныйДокумент;
	Элементы.КомандаРазорватьСвязьДокументаУчета2.Видимость = ЕстьДваДУ
		И ИспользуетсяДополнительныйДокумент И ЕстьПравоОбработкиДокумента;
	
	Если ЕстьОдинДУ Тогда
		Элементы.КомандаОткрытьДокументУчета1.Заголовок = Строка(Основания[0].ОбъектУчета);
	КонецЕсли;
	
	Если ЕстьДваДУ Тогда
		Элементы.КомандаОткрытьДокументУчета2.Заголовок = Строка(Основания[1].ОбъектУчета);
	КонецЕсли;
	
	Если ИспользуетсяДополнительныйДокумент Тогда
		
		ТекстВторогоДокумента =  НСтр("ru = 'подобрать...'");
		
		Если ЕстьОдинДУ Тогда
			
			Если ЕстьОсновнойДокумент И СписокПодбораДоп.Количество() = 1 Тогда
				
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'подобрать ""%1""'"), СписокПодбораДоп[0].Представление);
				
			ИначеЕсли Не ЕстьОсновнойДокумент И СписокПодбораОсновной.Количество() = 1 Тогда
				
				ТекстВторогоДокумента = СтрШаблон(НСтр("ru = 'подобрать ""%1""'"), СписокПодбораОсновной[0].Представление);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.КомандаПодобратьДокументУчета2.Заголовок = ТекстВторогоДокумента;
		
	КонецЕсли;
	
	Элементы.КомандаПоказатьВсеДокументыУчета.Видимость = ЕстьОдинДУ;
	Если ЕстьМногоДУ Тогда
		Элементы.КомандаПоказатьВсеДокументыУчета.Заголовок = СтрШаблон(НСтр("ru = 'Список документов (%1)'"), КоличествоДУ);
	Иначе
		Элементы.КомандаПоказатьВсеДокументыУчета.Заголовок = НСтр("ru = 'Еще...'");
	КонецЕсли;
	
	Если СоставПакета.Количество() > 1 Тогда
		ТекстПредметаСопоставления = НСтр("ru = 'В пакете документов имеется'"); 
	Иначе
		ТекстПредметаСопоставления = НСтр("ru = 'В электронном документе имеется'"); 
	КонецЕсли;
	
	ТекстСообщенияОСопоставлении = СтроковыеФункции.ФорматированнаяСтрока("%1 <a href = ""Сопоставить"">%2</a> %3",
		ТекстПредметаСопоставления, НСтр("ru = 'несопоставленная'"), НСтр("ru = 'номенклатура'"));

	Элементы.НадписьОшибкиСопоставленияНоменклатуры.Заголовок = ТекстСообщенияОСопоставлении;
	
	Элементы.НадписьДокументыУчета.Заголовок = ?(ЕстьДваДУ, НСтр("ru = 'Документы учета:'"), НСтр("ru = 'Документ учета:'"));
	
	Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Видимость = ЕстьНоменклатураНаКонтроле И ЭлектронныеДокументыЭДО.ЕстьПравоОбработкиДокументов();
	
	ПоддерживаетсяОтражениеВУчете = Истина;
	
	Если Основания.Количество() = 0 
		И (ЭлементСхемы.ФормированиеПоОбъектуУчета 
		Или ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной) Тогда
		
		ТипЭлектронногоДокумента = Неопределено;
		Если ПараметрыДокумента <> Неопределено
			И Не ПараметрыДокумента.Свойство("ОтражениеВУчете") Тогда
				
			ПоддерживаетсяОтражениеВУчете = Ложь;
			Элементы.НадписьНевозможноОтразитьВУчете.Заголовок = 
				НСтр("ru='Отражение в учете электронного документа не поддерживается для данного формата.'");
			
		Иначе
			
			Если ЭлементСхемы.ТипДокумента = Перечисления.ТипыДокументовЭДО.Прикладной Тогда
				ПрикладныеВиды = ЭлектронныеДокументыЭДО.ПрикладныеВидыДокументов();
				ПоддерживаетсяОтражениеВУчете = ПрикладныеВиды.Найти(Объект.ВидДокумента) <> Неопределено;
			Иначе
				Если ТипЭлектронногоДокумента = Неопределено Тогда
					ТипЭлектронногоДокумента = ЭлементСхемы.ТипДокумента;
				КонецЕсли;
				ПоддерживаетсяОтражениеВУчете = ИнтеграцияЭДО.ТипДокументаИспользуетсяПоНаправлению(ТипЭлектронногоДокумента,
					Перечисления.НаправленияЭДО.Входящий);
			КонецЕсли;
			
			Если Не ПоддерживаетсяОтражениеВУчете Тогда
				Шаблон = НСтр("ru='Отражение в учете электронного документа ""%1"" в текущей версии программы не поддерживается.'");
				Элементы.НадписьНевозможноОтразитьВУчете.Заголовок = СтрШаблон(Шаблон, ТипЭлектронногоДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = Не ПоддерживаетсяОтражениеВУчете;
		
	Иначе
		Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаОтражениеВУчете.Видимость = ПоддерживаетсяОтражениеВУчете И ЕстьВозможностьОтраженияВУчете;
	Элементы.КомандаПоказатьВсеДокументыУчета.Видимость = ПоддерживаетсяОтражениеВУчете И ЕстьВозможностьОтраженияВУчете
		И ЕстьПравоОбработкиДокумента;	
	Элементы.ГруппаНевозможноОтразитьВУчете.Видимость = (Не ПоддерживаетсяОтражениеВУчете ИЛИ Не ЕстьВозможностьОтраженияВУчете)
		 И ЕстьПравоОбработкиДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументыОснования(СсылкаНаДокумент, СпособОбработки = "", Удаление = Ложь)		
	
	СтрокиОснования = Основания.НайтиСтроки(Новый Структура("ОбъектУчета", СсылкаНаДокумент));
	
	Если Удаление Тогда
		ИнтеграцияЭДО.РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка, СсылкаНаДокумент);	
		Если ЗначениеЗаполнено(СтрокиОснования) Тогда	
			Основания.Удалить(СтрокиОснования[0]);
		КонецЕсли;
	Иначе
		ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка, СсылкаНаДокумент, СпособОбработки);
		НоваяСтрока = Основания.Добавить();
		НоваяСтрока.ОбъектУчета = СсылкаНаДокумент;
		НоваяСтрока.СпособОбработки = СпособОбработки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОтраженияВУчете(Знач СпособОбработки)
	
	Если Элементы.ГруппаНастройкиОтраженияВУчете.Видимость Тогда
		
		Отказ = Ложь;
		
		КлючНастроек = НастройкиЭДОКлиентСервер.НовыйКлючНастроекОтраженияВУчете();
		КлючНастроек.ВидДокумента = Объект.ВидДокумента;
		КлючНастроек.ИдентификаторОтправителя = Объект.ИдентификаторКонтрагента;
		КлючНастроек.ИдентификаторПолучателя = Объект.ИдентификаторОрганизации;
		КлючНастроек.Отправитель = Объект.Контрагент; 
		КлючНастроек.Получатель = Объект.Организация;
	
		НастройкиЭДО.ЗаписатьНастройкуПолученияДокументов(КлючНастроек, СпособОбработки, Истина, Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Элементы.ГруппаНастройкиОтраженияВУчете.Видимость = Ложь;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбОтраженииВУчете()
	
	Оповестить("ЭлектронныйДокументВходящий_ПодборДокументаУчета", Объект.Ссылка, ЭтотОбъект);
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРасширенныйПодборДокументовУчета()
	
	ОбработкаРасширенногоПодбора = Новый ОписаниеОповещения("ОбработатьРасширенныйПодборДокументовУчета", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЭлектронныйДокумент, ВидДокумента, ДокументРаспознан", Объект.Ссылка,
		Объект.ВидДокумента, ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).Распознан);
	ИнтерфейсДокументовЭДОКлиент.ОткрытьПодборОбъектовУчетаЭлектронногоДокумента(ПараметрыФормы, ОбработкаРасширенногоПодбора);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРасширенныйПодборДокументовУчета(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьРасширенныйПодборДокументовУчетаНаСервере();
	
	Если ЗначениеЗаполнено(Результат) Тогда
		ИнтерфейсДокументовЭДОКлиент.ПослеПодбораУчетногоДокумента(Объект.Ссылка, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРасширенныйПодборДокументовУчетаНаСервере()
	
	ЗначениеВРеквизитФормы(Объект.Ссылка.ПолучитьОбъект(), "Объект");
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСопоставлениеНоменклатуры()
	ДанныеДляОтраженияВУчете = ДанныеДляОтраженияВУчете();
	
	Если ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете) Тогда
		НаборНоменклатурыКонтрагентов = НоменклатураЭлектронногоДокументаБезСопоставления(ДанныеДляОтраженияВУчете);
	Иначе
		
		Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
			ОбъектыКонтроля = СоставПакета.ВыгрузитьЗначения();
		Иначе	
			ОбъектыКонтроля = Объект.Ссылка;
		КонецЕсли;
		
		НаборНоменклатурыКонтрагентов = НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(ОбъектыКонтроля);
		
	КонецЕсли;
	
	ОбработкаЗавершения = Новый ОписаниеОповещения("ЗавершитьСопоставлениеНоменклатуры", ЭтотОбъект);
	
	СопоставлениеНоменклатурыКонтрагентовКлиент.ОткрытьСопоставлениеНоменклатуры(НаборНоменклатурыКонтрагентов,, ОбработкаЗавершения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете)
	Возврат ИнтеграцияЭДО.ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете);
КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураЭлектронногоДокументаБезСопоставления(ДанныеДляОтраженияВУчете)
	Возврат ИнтеграцияЭДО.НоменклатураЭлектронногоДокументаБезСопоставления(ДанныеДляОтраженияВУчете);
КонецФункции

&НаСервереБезКонтекста
Функция ТребуетсяСопоставлениеНоменклатурыДляДокументаСОтключеннымКонтролем(ДанныеДляОтраженияВУчете)
	
	Возврат ОтключенКонтрольОтраженияВУчетеВНастройках(ДанныеДляОтраженияВУчете) 
		И НоменклатураЭлектронногоДокументаБезСопоставления(ДанныеДляОтраженияВУчете).Количество() > 0;
		
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьНоменклатураКонтрагентовНаКонтроле(ЭлектронныйДокумент)
	
	ОтборПоДокументу = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныйДокумент);
	НаКонтроле = ИнтеграцияЭДО.ЕстьНоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	
	Возврат НаКонтроле;
	
КонецФункции

&НаСервереБезКонтекста
Функция НоменклатураКонтрагентовНаКонтролеПоЭлектронномуДокументу(ЭлектронныйДокумент)
	
	ОтборПоДокументу = ИнтеграцияЭДО.ОтборНоменклатурыКонтрагентовНаКонтроле(ЭлектронныйДокумент);
	НаКонтроле = ИнтеграцияЭДО.НоменклатураКонтрагентовНаКонтроле(ОтборПоДокументу);
	
	Возврат НаКонтроле;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьСопоставлениеНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ЗавершитьСопоставлениеНоменклатурыНаСервере();
	
	Оповестить(ИнтерфейсДокументовЭДОКлиент.ИмяСобытияОбновленияТекущихДелЭДО());
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьСопоставлениеНоменклатурыНаСервере()
	
	Если ЗначениеЗаполнено(ИдентификаторПакета) Тогда
		ОбъектыКонтроля = СоставПакета.ВыгрузитьЗначения();
	Иначе	
		ОбъектыКонтроля = Объект.Ссылка;
	КонецЕсли;
	
	ЕстьНоменклатураНаКонтроле = ЕстьНоменклатураКонтрагентовНаКонтроле(ОбъектыКонтроля);
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Создание документа учета

&НаКлиенте
Процедура ПоказатьВыборСозданияДокументаУчета()
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборСозданияДокументаУчета", ЭтотОбъект);
	
	Если СписокСоздания.Количество() > 1 Тогда
		
		ПоказатьВыборИзМеню(ОбработкаВыбора, СписокСоздания, Элементы.КомандаСоздатьДокументУчета);
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, СписокСоздания[0]);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСозданияДокументаУчета(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	КонтекстОперации = ОбработкаНеисправностейБЭДКлиент.НовыйКонтекстДиагностики();
	СоздатьДокументыУчета(ВыбранноеЗначение.Значение, КонтекстОперации);
	
	ОповеститьОбОтраженииВУчете();
	
	ТипДокумента = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ТипДокумента;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьВыборСозданияДокументаУчетаЗавершение", ЭтотОбъект);
	ИнтеграцияЭДОСобытияКлиент.ПослеОтраженияВУчете(ОповещениеОЗавершении, ТипДокумента, Основания, КонтекстОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСозданияДокументаУчетаЗавершение(КонтекстДиагностики, ДополнительныеПараметры) Экспорт
	
	ОбработкаНеисправностейБЭДКлиент.ОбработатьОшибки(КонтекстДиагностики);
	
КонецПроцедуры

&НаСервере
Функция ДанныеДляОтраженияВУчете() 	
	
	ДанныеЭлектронногоДокумента = ЭлектронныеДокументыЭДО.ДанныеДокументовДляОтраженияВУчете(Объект.Ссылка)[0];
	
	Возврат ДанныеЭлектронногоДокумента;
	
КонецФункции  

&НаСервере
Процедура СоздатьДокументыУчета(Знач СпособОбработки, КонтекстОперации)
	
	ДанныеДляОтраженияВУчете = ДанныеДляОтраженияВУчете();
	
	Если Не ЗначениеЗаполнено(ДанныеДляОтраженияВУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТребуетсяСопоставлениеНоменклатурыДляДокументаСОтключеннымКонтролем(ДанныеДляОтраженияВУчете) Тогда
		
		Элементы.ГруппаОшибкиСопоставленияНоменклатуры.Видимость = Истина;
		ОписаниеОшибки = НСтр("ru = 'Для отражения в учете необходимо сопоставить номенклатуру.'");
		ОбщегоНазначения.СообщитьПользователю(ОписаниеОшибки);
		Возврат;
		
	КонецЕсли;
	
	ТипДокумента = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ТипДокумента;
	Если (ТипДокумента = Перечисления.ТипыДокументовЭДО.УПД
		ИЛИ ТипДокумента = Перечисления.ТипыДокументовЭДО.УКД)
		И СпособОбработки.Количество() = 2 Тогда
		СпособОбработки = Новый Структура("ПервичныйДокумент, СчетФактура", СпособОбработки[1], СпособОбработки[0]);
	КонецЕсли;
	
	ИнтеграцияЭДО.ОтразитьДанныеЭлектронногоДокументаСКонтролем(ДанныеДляОтраженияВУчете, СпособОбработки);

	ОбновитьНастройкиОтраженияВУчете(СпособОбработки);
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Подбор документа учета

&НаКлиенте
Процедура ПоказатьВыборПодбораДокументаУчета(НомерДокумента)
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборПодбораДокументаУчета", ЭтотОбъект);
	
	ТекущийСписокПодбора = СписокПодбораОбщий;
	Если НомерДокумента = 2 Тогда
		ТекущийСписокПодбора = ?(ЕстьОсновнойДокумент, СписокПодбораДоп, СписокПодбораОсновной);
	КонецЕсли;
	
	Если ТекущийСписокПодбора.Количество() > 1 Тогда
		
		Элемент = ?(НомерДокумента = 1, Элементы.КомандаПодобратьДокументУчета1, Элементы.КомандаПодобратьДокументУчета2);
		
		ПоказатьВыборИзМеню(ОбработкаВыбора, ТекущийСписокПодбора, Элемент);
		
	ИначеЕсли ТекущийСписокПодбора.Количество() = 1 Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаВыбора, ТекущийСписокПодбора[0]);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборПодбораДокументаУчета(Знач ВыбранноеЗначение, Знач ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СпособОбработки = ВыбранноеЗначение.Значение;
	НастройкиПодбора = НастройкиПодбораУчетногоДокумента(Объект.Ссылка, СпособОбработки);
	
	Если НастройкиПодбора <> Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура("СпособОбработки", СпособОбработки);
		ОбработкаВыбора = Новый ОписаниеОповещения("ОбработатьВыборДокументаУчета", ЭтотОбъект, ДополнительныеПараметры);
		ИнтерфейсДокументовЭДОКлиент.ПоказатьПодборУчетногоДокумента(НастройкиПодбора, ОбработкаВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборДокументаУчета(Знач ВыбранноеЗначение, Знач ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПерепривязатьЭлектронныйДокумент(ВыбранноеЗначение, ДополнительныеПараметры.СпособОбработки);
		ОповеститьОбОтраженииВУчете();
		ИнтерфейсДокументовЭДОКлиент.ПослеПодбораУчетногоДокумента(Объект.Ссылка, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерепривязатьЭлектронныйДокумент(Знач Основание, Знач СпособОбработки)
	
	ОбработатьДокументыОснования(Основание, СпособОбработки);
	Если ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).ФормированиеПоОбъектуУчета Тогда
		ИнтеграцияЭДО.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка, Основание, СпособОбработки);
	КонецЕсли;
	
	ОбновитьНастройкиОтраженияВУчете(СпособОбработки);
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиПодбораУчетногоДокумента(ЭлектронныйДокумент, СпособОбработки)
	
	Возврат ИнтерфейсДокументовЭДО.НастройкиПодбораУчетногоДокумента(ЭлектронныйДокумент, СпособОбработки);
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////
// Открытие документа учета

&НаКлиенте
Процедура ОткрытьДокументУчета(НомерДокумента)
	
	Если Основания.Количество() >= НомерДокумента Тогда
		
		ПоказатьЗначение(, Основания[НомерДокумента - 1].ОбъектУчета);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Разрыв связи с документом учета

&НаКлиенте
Процедура ПоказатьВопросОРазрывеСвязи(НомерДокумента)
	
	Если Основания.Количество() < НомерДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("НомерДокумента", НомерДокумента);
	ТекстВопроса = НСтр("ru = 'Связь между документами разорвется. Повторно связать документы возможно только в ручном режиме. Продолжить?'");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВопросОРазрывеСвязи", ЭтотОбъект, ДополнительныеПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВопросОРазрывеСвязи(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РазорватьСвязьСОснованием(ДополнительныеПараметры.НомерДокумента);
	
	ОповеститьОбОтраженииВУчете();
	
КонецПроцедуры

&НаСервере
Процедура РазорватьСвязьСОснованием(Знач НомерДокумента)
	
	Основание = Основания[НомерДокумента - 1].ОбъектУчета;
	
	ИнтеграцияЭДО.РазорватьСвязьЭлектронногоДокументаСОбъектомУчета(Объект.Ссылка, Основание);
	
	НастроитьЭлементыОтраженияВУчете();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////
// Управление отражением в учете

&НаСервере
Процедура ПроверитьВозможностьОтраженияВУчете()
	
	ЕстьВозможностьОтраженияВУчете = Истина;
	
	ЭлементСхемы = ЭлементСхемыИнформацияОтправителя(ЭтотОбъект);
	
	Если ЭлементСхемы = Неопределено И НРег(ЭлементСхемы.РасширениеФайла) <> "xml"  Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементСхемыИнформацияОтправителя(ЭтотОбъект).Распознан Тогда
		
		ПараметрыДокумента = ЭлектронныеДокументыЭДО.РаспознатьСообщение(ЭлементСхемы.Сообщение);
		ДанныеФайла = РаботаСФайламиБЭД.НовоеОписаниеФайла();
		ДанныеФайла.ИмяФайла = ЭлементСхемы.ИмяФайла;
		ДанныеФайла.ДвоичныеДанные = РаботаСФайлами.ДвоичныеДанныеФайла(ЭлементСхемы.ПрисоединенныйФайл);

		Описание = "";
		Если Не ИнтеграцияЭДО.ВозможноСозданиеУчетногоДокумента(ДанныеФайла, Описание, ЭлементСхемы.ТипДокумента) Тогда
			ЕстьВозможностьОтраженияВУчете = Ложь;
			Элементы.НадписьНевозможноОтразитьВУчете.Заголовок = Описание;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#Область КонтекстныеПодсказки

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостей_ЭлементУправленияНажатие(Элемент)
	
	КонтекстныеПодсказкиБЭДКлиент.ЭлементУправленияНажатие(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьКонтекст(КатегорииПересчета = Неопределено) 
	
	Если Не КонтекстныеПодсказкиБЭД.ФункционалКонтекстныхПодсказокДоступен() Тогда 
		Возврат;
	КонецЕсли;  

	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусДокументооборота();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеСостоянияВерсииЭД(СостояниеЭДО); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;  
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ВидЭлектронногоДокумента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		ОписаниеВидаДокумента = ЭлектронныеДокументыЭДО.ОписаниеВидаДокумента(Объект.ВидДокумента);
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ЗначениеВидаЭД(ОписаниеВидаДокумента.ТипДокумента); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли; 
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_ОператорАбонента();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.ОператорАбонента(Объект.ИдентификаторКонтрагента); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_КодОператораУчетнойЗаписиОрганизации();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.КодОператораУчетнойЗаписиОрганизации(Объект.Организация); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СуществуютНеверныеПодписиФайла();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.СуществуютНеверныеПодписиФайла(ЭлементСхемы.Сообщение); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;
	
	Категория = КонтекстныеПодсказкиБЭДКатегоризацияВызовСервера.Категория_СтатусОтраженияЭДВУчете();
	Если ЗначениеЗаполнено(Категория)  
			И ?(ЗначениеЗаполнено(КатегорииПересчета), КатегорииПересчета.Найти(Категория) <> Неопределено, Истина) Тогда 
		Значение = КонтекстныеПодсказкиБЭДКатегоризация.СтатусКонтроляОтраженияВУЧете(Объект.Ссылка); 
		КонтекстныеПодсказкиБЭДКлиентСервер.УстановитьЗначениеКатегорииКонтекстаФормы(ЭтаФорма, Категория, Значение);
	КонецЕсли;

	КонтекстныеПодсказкиБЭД.ОтобразитьАктуальныеДляКонтекстаНовости(ЭтотОбъект);
	
КонецПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные).
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";	
	КонтекстныеПодсказкиБЭДКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПанельКонтекстныхНовостейОбработкаНавигационнойСсылки(Элемент, ПараметрНавигационнаяСсылка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	КонтекстныеПодсказкиБЭДКлиент.ПанельКонтекстныхНовостей_ЭлементПанелиНовостейОбработкаНавигационнойСсылки(
		ЭтотОбъект,
		Элемент,
		ПараметрНавигационнаяСсылка,
		СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти  

#КонецОбласти

#Область РаботаСВложением

&НаКлиенте
Процедура ОткрытьФайлВложения(ДляРедактирования = Ложь)
	
	ЭлементСхемы = СхемаРегламента.НайтиПоИдентификатору(ИдентификаторТекущегоЭлемента);
	
	Если ЗначениеЗаполнено(ЭлементСхемы.ПрисоединенныйФайл) Тогда
		ИнтерфейсДокументовЭДОКлиент.ОткрытьФайл(ЭлементСхемы.ПрисоединенныйФайл, УникальныйИдентификатор, ДляРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьИмяФайлаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлВложения();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПакетом

&НаСервере
Функция СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(Знач НавигационнаяСсылка)
	
	Возврат ПакетыДокументовЭДО.СоставПакета_ОбработкаНавигационнойСсылкиНаСервере(ЭтотОбъект, НавигационнаяСсылка);
	
КонецФункции

#КонецОбласти

#КонецОбласти
