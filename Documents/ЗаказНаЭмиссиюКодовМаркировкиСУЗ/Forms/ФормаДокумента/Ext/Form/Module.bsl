#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ШаблонДоИзменения;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ИнтеграцияИСМП.ЗапрещеноИспользованиеОбъектаВИСМП(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеЗаказНаЭмиссиюКодовМаркировкиИСМП.Тип;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	ДоступныеВидыПродукцииИС = ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииИСМП(Истина);
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект, "ТоварыХарактеристика");

	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ИспользованиеСервисПровайдераЗапрещено
		И ПечатьКодовМаркировки = 1 Тогда
		
		Если Не ЗначениеЗаполнено(Объект.СервисПровайдер) Тогда
			ТекстСообщения = Нстр("ru = 'Поле ""Сервис-провайдер"" не заполнено'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,, "Объект.СервисПровайдер", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		// Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан()
		Или РедактированиеФормыНедоступно
		Или Не ПравоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ОбновитьПредставленияНаФорме();
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ЗаполнитьТаблицуПредставленийНоменклатуры();
	
	РазблокироватьДанныеФормыДляРедактирования();

	УстановитьПризнакНабораИГрупповойУпаковки(ЭтотОбъект, Объект.Товары);

	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаОбновитьПредставление(ЭтотОбъект);
	// Конец РаботаСПолямимСоставногоТипа
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.СервисПровайдер)
		И (ПечатьКодовМаркировки = 0 Или ИспользованиеСервисПровайдераЗапрещено) Тогда
		Объект.СервисПровайдер = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипОплатыКодовМаркировки)
		И Не ИнтеграцияИСМПКлиентСервер.ИспользуетсяТипОплатыКодовМаркировки(Объект.ВидПродукции, Объект.Организация) Тогда
		Объект.ТипОплатыКодовМаркировки = Неопределено;
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
		
		ЭтоПроведение = ПараметрыЗаписи.РежимЗаписи = ПредопределенноеЗначение(
			"РежимЗаписиДокумента.Проведение");
		
		Если ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности(ЭтотОбъект) Тогда
			ПолноеОписание = Неопределено;
		Иначе
			ПолноеОписание = ИнтеграцияИСКлиентСервер.ИспользованиеСпособаОписанияОстатков(Объект.ВидПродукции);
		КонецЕсли;
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			
			ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, СтрокаТовары);
				
			Если ЭтоПроведение
				И ПолноеОписание = Неопределено
				И СтрокаТовары.ПолноеОписаниеОстатков
				И Не ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
				СтрокаТовары.ПолноеОписаниеОстатков = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Заказ на эмиссию кодов маркировки"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Заказ на эмиссию кодов маркировки"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#Область ПроизводственныйОбъект

&НаКлиенте
Процедура ПроизводственныйОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("РегистрСведений.НастройкиОбменаСУЗ.Форма.ФормаВыбораПроизводственногоОбъекта",
		ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектПриИзменении(Элемент)
	
	ЗаполнитьАдресПроизводственногоОбъекта(ЭтотОбъект);
	
КонецПроцедуры

#Область ПроизводственныйОбъектАдрес

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны.
		Возврат;
	КонецЕсли;
	
	Объект.ПроизводственныйОбъектАдресСтрокой = ВыбранноеЗначение.Представление;
	КомментарийАдресаПроизводственногоОбъекта = ВыбранноеЗначение.Комментарий;
	Объект.ПроизводственныйОбъектАдрес        = ВыбранноеЗначение.КонтактнаяИнформация;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		Объект.ПроизводственныйОбъектАдресСтрокой = "";
		КомментарийАдресаПроизводственногоОбъекта = "";
		Объект.ПроизводственныйОбъектАдрес        = "";
		Возврат;
	КонецЕсли;
		
	// Формируем внутренние значения полей по тексту и параметрам формирования из
	// структуры ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.
	Объект.ПроизводственныйОбъектАдресСтрокой = Текст;
	Объект.ПроизводственныйОбъектАдрес = ЗначенияПолейКонтактнойИнформацииСервер(
		Текст, ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта, КомментарийАдресаПроизводственногоОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Если представление было изменено в поле и сразу нажата кнопка выбора, то необходимо 
	// привести данные в соответствие и сбросить внутренние поля для повторного разбора.
	Если Элемент.ТекстРедактирования <> Объект.ПроизводственныйОбъектАдресСтрокой Тогда
		Объект.ПроизводственныйОбъектАдресСтрокой = Элемент.ТекстРедактирования;
		Объект.ПроизводственныйОбъектАдрес = "";
	КонецЕсли;
	
	// Данные для редактирования
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта,
		Объект.ПроизводственныйОбъектАдрес,
		Объект.ПроизводственныйОбъектАдресСтрокой,
		КомментарийАдресаПроизводственногоОбъекта);
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Адрес объекта'");
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизводственныйОбъектАдресСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	// Сбрасываем как представления, так и внутренние значения полей.
	Объект.ПроизводственныйОбъектАдресСтрокой = "";
	КомментарийАдресаПроизводственногоОбъекта = "";
	Объект.ПроизводственныйОбъектАдрес        = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	ВидПродукцииПриИзмененииНаСервере(Ложь);
	
	ПроверитьОчиститьВладельцаGTIN(ЭтотОбъект);
	ПроверитьОчиститьСервисПровайдера(ЭтотОбъект);
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособВыпускаВОборотПриИзменении(Элемент)
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	Если Объект.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля") Тогда
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
	Иначе
		СобытияФормИСМПКлиентПереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
	КонецЕсли;
	
	Если ПредыдущийСпособВводаВОборот <> Объект.СпособВводаВОборот
		И Объект.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция") Тогда
		Если Не ЭтоМаркировкаОстатков
			И ПредыдущийСпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			ОчиститьGTIN();
			Объект.ВвезенПослеДатыОбязательнойМаркировки               = Ложь;
			Объект.ПриобретенПроизведенПослеДатыОбязательнойМаркировки = Ложь;
			Объект.БезУчетаНоменклатуры                                = Ложь;
		ИначеЕсли ЭтоМаркировкаОстатков
			И ПредыдущийСпособВводаВОборот <> ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков") Тогда
			Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
				ОчиститьGTIN();
			КонецЕсли;
			ПроверитьОчиститьШаблонКодаМаркировки();
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьОчиститьВладельцаGTIN(ЭтотОбъект);
	ПроверитьОчиститьСервисПровайдера(ЭтотОбъект);
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	ПредыдущийСпособВводаВОборот = Объект.СпособВводаВОборот;
	
КонецПроцедуры

&НаКлиенте
Процедура СервисПровайдерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекстОшибки = "";
	Если Не ПроверкаВыбранногоСервисПровайдера(ВыбранноеЗначение, Объект.ВидПродукции, Объект.СпособВводаВОборот, ТекстОшибки) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКодовМаркировкиПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0
		И Объект.ВидПродукции <> ВыбранноеЗначение Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары будет очищена. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		РежимДиалога = РежимДиалогаВопрос.ДаНет;
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			РежимДиалога = Новый СписокЗначений;
			РежимДиалога.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Очистить'"));
			РежимДиалога.Добавить(Истина, НСтр("ru = 'Перезаполнить'"));
			РежимДиалога.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Отмена'"));
		КонецЕсли;
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалога);
		
	ИначеЕсли ВыбранноеЗначение = Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура БезУчетаНоменклатурыПриИзменении(Элемент)
	
	Если Объект.БезУчетаНоменклатуры Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.ПолноеОписаниеОстатков = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПолученияПриИзменении(Элемент)
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	УстановитьОтборСтрок(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаборуГрупповойУпаковкеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НавигационнаяСсылкаФорматированнойСтроки = "ОтключитьОтборПоНаборуГрупповойУпаковке" Тогда
		Элементы.Товары.ОтборСтрок = Неопределено;
		Элементы.ОтборПоНаборуГрупповойУпаковке.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если РедактированиеФормыНедоступно
		Или Не ПравоИзменения
		Или (ТекущиеДанные.ЭтоНабор Или ТекущиеДанные.ЭтоГрупповаяУпаковка)
			И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца) Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)

	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСрокГодности Тогда
		ОпределитьФорматРедактированияСрокГодности();
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыШаблон Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено
			И (ИспользуютсяГрупповыеУпаковки Или ИспользуютсяНаборы) Тогда
			Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца)
				И ТекущиеДанные.ИдентификаторСтрокиВладельца <> ТекущиеДанные.ИдентификаторСтроки Тогда
				Режим = 0;
			Иначе
				Режим = 3;
			КонецЕсли;
			ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, Режим);
			Элементы.ТоварыШаблон.СписокВыбора.Очистить();
			Для Каждого ЭлементСпискаЗначений Из ДоступныеШаблоны Цикл
				Элементы.ТоварыШаблон.СписокВыбора.Добавить(
					ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если НоваяСтрока Или Копирование Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		Если Копирование И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца) Тогда
			ТекущиеДанные.ИдентификаторСтрокиВладельца = Неопределено;
			ТекущиеДанные.ЭтоГрупповаяУпаковка         = Ложь;
			ТекущиеДанные.ЭтоНабор                     = Ложь;
		КонецЕсли;
		ЗаполнитьТаблицуПредставленийНоменклатурыНаКлиенте();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если НоваяСтрока и ОтменаРедактирования Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца) Тогда
			МассивСтрок = Новый Массив;
			ДобавитьСтрокиПоВладельцу(ЭтотОбъект, МассивСтрок, ТекущиеДанные.ИдентификаторСтрокиВладельца);
			Для Каждого Строка Из МассивСтрок Цикл
				Объект.Товары.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)

	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;

	Если ВыделенныеСтроки.Количество() = Объект.Товары.Количество() Тогда
		Отказ = Истина;
		Объект.Товары.Очистить();
		Объект.СерийныеНомера.Очистить();
		Модифицированность = Истина;
		Возврат;
	КонецЕсли;

	Если ВыделенныеСтроки.Количество() > 1 Тогда

		ЕстьНаборы = Ложь;
		ЕстьГрупповыеУпаковки = Ложь;
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтрокиВладельца) Тогда
				Если ДанныеСтроки.ЭтоНабор Тогда
					ЕстьНаборы = Истина;
					Если Не ИспользуютсяГрупповыеУпаковки Или ЕстьГрупповыеУпаковки Тогда
						Прервать;
					КонецЕсли;
				ИначеЕсли ДанныеСтроки.ЭтоГрупповаяУпаковка Тогда
					ЕстьГрупповыеУпаковки = Истина;
					Если Не ИспользуютсяНаборы Или ЕстьНаборы Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		Если ЕстьНаборы Или ЕстьГрупповыеУпаковки Тогда

			Отказ = Истина;

			ЗаголовокВопроса = НСтр("ru = 'Удаление строк'");

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("УдалитьСтроку", НСтр("ru = 'Выделенные строки'"));
			Кнопки.Добавить("Отмена",        НСтр("ru = 'Отмена'"));

			Если ЕстьНаборы И ЕстьГрупповыеУпаковки Тогда
				ТекстВопроса = НСтр("ru = 'В выделенных строках содержатся наборы и групповые упаковки. Выберите режим удаления.'");
				Кнопки.Вставить(1, "УдалитьВсе", НСтр("ru = 'Наборы, групповые упаковки и их составляющие'"));
			ИначеЕсли ЕстьГрупповыеУпаковки Тогда
				ТекстВопроса = НСтр("ru = 'В выделенных строках содержатся групповые упаковки. Выберите режим удаления.'");
				Кнопки.Вставить(1, "УдалитьВсе", НСтр("ru = 'Групповые упаковки и их составляющие'"));
			ИначеЕсли ЕстьНаборы Тогда
				ТекстВопроса = НСтр("ru = 'В выделенных строках содержатся наборы. Выберите режим удаления.'");
				Кнопки.Вставить(1, "УдалитьВсе", НСтр("ru = 'Наборы и их составляющие'"));
			КонецЕсли;

		КонецЕсли;

	Иначе

		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделенныеСтроки[0]);
		Если (ИспользуютсяНаборы
			И ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныНабора))
			Или (ИспользуютсяГрупповыеУпаковки
			И ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки)) Тогда

			Если ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтрокиВладельца) Тогда

				Отказ = Истина;

				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("УдалитьВсе",    НСтр("ru = 'Удалить'"));
				Кнопки.Добавить("УдалитьСтроку", НСтр("ru = 'Не удалять'"));
				Кнопки.Добавить("Отмена",        НСтр("ru = 'Отмена'"));

				Если ДанныеСтроки.ЭтоГрупповаяУпаковка Тогда
					ЗаголовокВопроса = НСтр("ru = 'Удаление групповой упаковки'");
					ТекстВопроса = СтрШаблон(
						НСтр("ru = 'Удалить составляющие групповой упаковки %1?'"),
							Строка(ДанныеСтроки.Номенклатура));
				ИначеЕсли ДанныеСтроки.ЭтоНабор Тогда
					ЗаголовокВопроса = НСтр("ru = 'Удаление набора'");
					ТекстВопроса = СтрШаблон(
						НСтр("ru = 'Удалить составляющие набора %1?'"),
							Строка(ДанныеСтроки.Номенклатура));
				КонецЕсли;

			КонецЕсли;

		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтрокиВладельца) Тогда

			Отказ = Истина;

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("УдалитьСтроку", НСтр("ru = 'Удалить строку'"));
			Кнопки.Добавить("Отмена",        НСтр("ru = 'Отмена'"));

			СтрокаВладелец = ПолучитьСтрокуВладельца(ЭтотОбъект, ДанныеСтроки.ИдентификаторСтрокиВладельца);
			Если СтрокаВладелец = Неопределено Тогда
				НаименованиеТовараВладельца = "";
			Иначе
				НаименованиеТовараВладельца = Строка(СтрокаВладелец.Номенклатура);
			КонецЕсли;

			Если ДанныеСтроки.ЭтоГрупповаяУпаковка Тогда
				ЗаголовокВопроса = НСтр("ru = 'Удаление составляющей групповой упаковки'");
				ТекстВопроса = СтрШаблон(
					НСтр("ru = '%1 входит в состав групповой упаковки %2
						|При удалении строки, групповая упаковка будет расформирована.'"),
						Строка(ДанныеСтроки.Номенклатура),
						НаименованиеТовараВладельца);
				Кнопки.Вставить(0, "УдалитьВсе", НСтр("ru = 'Удалить всю упаковку'"));
			ИначеЕсли ДанныеСтроки.ЭтоНабор Тогда
				ЗаголовокВопроса = НСтр("ru = 'Удаление составляющей набора'");
				ТекстВопроса = СтрШаблон(
					НСтр("ru = '%1 входит в состав набора %2
						|При удалении строки, набор будет расформирован.'"),
						Строка(ДанныеСтроки.Номенклатура),
						НаименованиеТовараВладельца);
				Кнопки.Вставить(0, "УдалитьВсе", НСтр("ru = 'Удалить весь набор'"));
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если Отказ Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросУдалениеСтрокТоваровЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			Кнопки,,
			Кнопки[0].Значение,
			ЗаголовокВопроса);
	Иначе
		Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
			ОчиститьСерийныеНомераПоИдентификатору(ЭтотОбъект, ДанныеСтроки.ИдентификаторСтроки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);

	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОчисткаGTINПриИзмененииНоменклатуры(ТекущиеДанные);
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ТекущиеДанные.GTIN = "";
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦелевойПолПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыМодельПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыТоварныйЗнакПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
		ТекущиеДанные.GTIN = "";
	КонецЕсли;
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);
	
	Если ИспользуютсяГрупповыеУпаковки
		И ШаблонЕстьВСписке(ТекущиеДанные.Шаблон, ШаблоныГрупповойУпаковки)
		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца) Тогда

		СтрокиГрупповойУпаковки = Новый Массив;
		ДобавитьСтрокиПоВладельцу(ЭтотОбъект, СтрокиГрупповойУпаковки, ТекущиеДанные.ИдентификаторСтрокиВладельца);

		Для Каждого СтрокаГрупповойУпаковки Из СтрокиГрупповойУпаковки Цикл
			СтрокаГрупповойУпаковки.ТоварныйЗнак = ТекущиеДанные.ТоварныйЗнак;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНаименованиеПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыПолноеОписаниеОстатковПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ТекущиеДанные.ПолноеОписаниеОстатков Тогда
		Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(ТекущиеДанные.GTIN) Тогда
			
			ДанныеПоEAN = Новый Соответствие();
			ДанныеПоEAN.Вставить(
				ТекущиеДанные.GTIN,
				Новый Структура("Номенклатура,Характеристика,МаркируемаяПродукция"));
			
			ЗаполнитьДанныеПоEAN(ДанныеПоEAN);
			
			ТекущиеДанныеПоEAN = ДанныеПоEAN[ТекущиеДанные.GTIN];
			Если ТекущиеДанные.Номенклатура <> ТекущиеДанныеПоEAN.Номенклатура
				Или ТекущиеДанные.Характеристика <> ТекущиеДанныеПоEAN.Характеристика Тогда
				ТекущиеДанные.GTIN = "";
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Если Не РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(ТекущиеДанные.GTIN) Тогда
			ТекущиеДанные.GTIN = "";
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, ТекущиеДанные);
	ОбновитьДанныеФормыМаркировкаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособВводаВОборотПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
		Элементы.Товары.ТекущиеДанные.GTIN = "";
	КонецЕсли;
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВозрастнаяКатегорияПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элементы.Товары.ТекущиеДанные.GTIN = "";

	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если Не ТекущиеДанные.КоличествоУпаковок = Цел(ТекущиеДанные.КоличествоУпаковок) Тогда
		ТекущиеДанные.КоличествоУпаковок = Цел(ТекущиеДанные.КоличествоУпаковок);
	КонецЕсли;
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ТекущиеДанные);

	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца) Тогда
		Если ИспользуютсяНаборы
			И ШаблонЕстьВСписке(ТекущиеДанные.Шаблон, ШаблоныНабора) Тогда
			ПересчитатьКоличествоСоставляющихНабора(ТекущиеДанные.ПолучитьИдентификатор(), КэшированныеЗначения);
		ИначеЕсли ИспользуютсяГрупповыеУпаковки
			И ШаблонЕстьВСписке(ТекущиеДанные.Шаблон, ШаблоныГрупповойУпаковки) Тогда
			МассивСтрокБезПотребительскихУпаковок = ПересчитатьКоличествоСоставляющихГрупповойУпаковки(ЭтотОбъект, ТекущиеДанные);
			Если МассивСтрокБезПотребительскихУпаковок.Количество() > 0 Тогда
				ЗапроситьУточнениеКоэффициентовУпаковок(МассивСтрокБезПотребительскихУпаковок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпособФормированияСерийногоНомераПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если СпособФормированияСерийногоНомера = ТекущиеДанные.СпособФормированияСерийногоНомера Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическоеФормирование = ПредопределенноеЗначение(
		"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически");
	Если ТекущиеДанные.СпособФормированияСерийногоНомера = АвтоматическоеФормирование Тогда
		
		ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
		НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ПоказатьВопрос(
				ОписаниеОповещения,
				НСтр("ru = 'Все связанные серийные номера будут очищены. Продолжить?'"),
				РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ТекущиеДанные);
			
		КонецЕсли;
		
	Иначе
		
		ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда

		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ТекущаяСтрока",                           ТекущиеДанные.КодТНВЭД);
		ПараметрыФормы.Вставить("ВидПродукции",                            Объект.ВидПродукции);
		ПараметрыФормы.Вставить("Организация",                             Объект.Организация);
		ПараметрыФормы.Вставить("РежимВыбора",                             Истина);
		ПараметрыФормы.Вставить("ВозвращатьСсылкуНаЭлементКлассификатора", Ложь);
		
		ОткрытьФорму(
			"РегистрСведений.КодыТНВЭДИСМП.Форма.ФормаСписка", ПараметрыФормы, Элемент,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТНВЭДПриИзменении(Элемент)

	Если Элементы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоМаркировкаОстатков Тогда
		Элементы.Товары.ТекущиеДанные.GTIN = "";
	КонецЕсли;

	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элемент.Имя);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ШаблонДоИзменения = ТекущиеДанные.Шаблон;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыШаблонПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	Если ТекущиеДанные.Шаблон = ШаблонДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИспользуютсяГрупповыеУпаковки Или ИспользуютсяНаборы)
		И ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца)
		И Не ЗначениеЗаполнено(ТекущиеДанные.Шаблон)
		И ЗначениеЗаполнено(ШаблонДоИзменения) Тогда
		ТекущиеДанные.Шаблон = ШаблонДоИзменения;
		Возврат;
	КонецЕсли;

	Если ИспользуютсяГрупповыеУпаковки Или ИспользуютсяНаборы Тогда
		ОбработатьИзменениеШаблонаНабораИГрупповойУпаковки(ТекущиеДанные);
	Иначе
		ПриИзмененииШаблонаВТабличнойЧасти(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийGTINДляВыбора(ТекущаяСтрока));

	Элемент.СписокВыбора.Добавить("НастроитьГрупповыеУпаковкиИНаборы",
		Новый ФорматированнаяСтрока(
			НСтр("ru = 'Настроить'"),,,,
			"НастроитьГрупповыеУпаковкиИНаборы"));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ВыбранноеЗначение = "НастроитьГрупповыеУпаковкиИНаборы" Тогда
		СтандартнаяОбработка = Ложь;

		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(Элементы.Товары.ТекущиеДанные);
		ЗапроситьУточнениеКоэффициентовУпаковок(МассивСтрок);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINПриИзменении(Элемент)

	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);

	ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, ТекущиеДанные);
	ОбновитьДанныеФормыМаркировкаОстатков();
	ПроверитьОчиститьВладельцаGTIN(ЭтотОбъект, ТекущиеДанные);

	Если ИспользуютсяГрупповыеУпаковки
		И ШаблонЕстьВСписке(ТекущиеДанные.Шаблон, ШаблоныГрупповойУпаковки) Тогда
		МассивСтрокБезПотребительскихУпаковок = ПересчитатьКоличествоСоставляющихГрупповойУпаковки(ЭтотОбъект, ТекущиеДанные);
		Если МассивСтрокБезПотребительскихУпаковок.Количество() > 0 Тогда
			ЗапроситьУточнениеКоэффициентовУпаковок(МассивСтрокБезПотребительскихУпаковок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыВладелецGTINСтрокойПриИзменении(Элемент)
	
	ПолеСоставногоТипаПриИзменении(Элемент);
	
	ВладелецGTINПриИзменении(ЭтотОбъект, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВладелецGTINСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВладелецGTINСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("Ссылка") Тогда
		ВладелецGTINПриИзменении(ЭтотОбъект, Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВладелецGTINСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВладелецGTINСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидКИЗПриИзменении(Элемент)
	ЗаполнитьТаблицуПредставленийНоменклатурыНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРазмерКИЗПриИзменении(Элемент)
	ЗаполнитьТаблицуПредставленийНоменклатурыНаКлиенте();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьДоступныеGTIN(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьДоступныеGTINНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПередатьСведенияОТоварахВКаталогGS46(Команда)

	Товары = Новый Массив;
	Для Каждого СтрокаТовары Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Новый Структура("Номенклатура, Характеристика, GTIN, КодТНВЭД");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Объект.Товары.НайтиПоИдентификатору(СтрокаТовары));
		Товары.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	ОткрытьФорму(
		"Обработка.ПодготовкаСведенийВКаталогGS46.Форма.Форма",
		Новый Структура(
			"Товары, Организация",
			Товары, Объект.Организация),
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Включить1СНоменклатуру(Команда)
	
	ОткрытьФорму(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ПодготовкаСведенийОТоварахВНациональныйКаталог",,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("Включить1СНоменклатуруЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьПередатьСведенияОТоварахВНациональныйКаталог(Команда)
	
	Данные = Новый Массив;
	Для Каждого СтрокаТовары Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтрокиТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаТовары);
		Если ЗначениеЗаполнено(ДанныеСтрокиТовары.Номенклатура) Тогда
			Строка = Новый Структура("Номенклатура, Характеристика");
			ЗаполнитьЗначенияСвойств(Строка, ДанныеСтрокиТовары);
			Данные.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если Данные.Количество() = 0 Тогда
		ПоказатьПредупреждение(,
			НСтр("ru = 'В выделенных строках табличной части отсутствуют товары для передачи сведений в национальный каталог'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = РаботаСНоменклатуройКлиент.ПараметрыФормыПомощникВыгрузки();
	ПараметрыФормы.Организация = Объект.Организация;
	ПараметрыФормы.АдресТоваровВХранилище =
		ПоместитьДанныеДляПередачиСведенийОТоварахВНациональныйКаталог(Данные, УникальныйИдентификатор);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("АдресТоваровВХранилище", ПараметрыФормы.АдресТоваровВХранилище);
	
	РаботаСНоменклатуройКлиент.ОткрытьФормуПомощникВыгрузки(
		ПараметрыФормы,
		ЭтотОбъект,
		Новый ОписаниеОповещения("ПодготовитьПередатьСведенияОТоварахВНациональныйКаталогЗавершение", ЭтотОбъект, ПараметрыОповещения),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	СобытияФормИСМПКлиент.ОтрытьФормуПечатиКодовМаркировок(ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВиртуальнаяАгрегация(Команда)
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Документ", Объект.Ссылка);
	ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	ОткрытьФорму(
		"Обработка.ВиртуальнаяАгрегацияУпаковокИСМП.Форма",
		ПараметрыОткрытия,
		ЭтотОбъект, , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыОписанияОстатков(Команда)
	
	Если Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеЗакрытияФормыЗаполненияОстатков = Новый ОписаниеОповещения(
		"Подключаемый_ЗаполнениеПараметровОстатковЗавершение", ЭтотОбъект);
	
	ДоступныеЭлементы = Новый Структура;
	ДоступныеЭлементы.Вставить("ПолноеОписаниеОстатков", Элементы.ТоварыПолноеОписаниеОстатков.Видимость);
	ДоступныеЭлементы.Вставить("КодТНВЭД",               Элементы.ТоварыКодТНВЭД.Видимость);
	ДоступныеЭлементы.Вставить("ЦелевойПол",             Элементы.ТоварыЦелевойПол.Видимость);
	ДоступныеЭлементы.Вставить("ВозрастнаяКатегория",    Элементы.ТоварыВозрастнаяКатегория.Видимость);
	ДоступныеЭлементы.Вставить("Модель",                 Элементы.ТоварыМодель.Видимость);
	ДоступныеЭлементы.Вставить("СпособВводаВОборот",     Элементы.ТоварыСпособВводаВОборот.Видимость);
	ДоступныеЭлементы.Вставить("Наименование",           Элементы.ТоварыНаименование.Видимость);
	ДоступныеЭлементы.Вставить("ТоварныйЗнак",           Элементы.ТоварыТоварныйЗнак.Видимость);
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("ВидПродукции",      Объект.ВидПродукции);
	ПараметрыОткрытия.Вставить("ДоступныеЭлементы", ДоступныеЭлементы);
	ПараметрыОткрытия.Вставить("Организация",       Объект.Организация);
	
	ОткрытьФорму(
		"Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаЗаполненияТовары",
		ПараметрыОткрытия,
		ЭтотОбъект,,,,
		ОповещениеЗакрытияФормыЗаполненияОстатков);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерийныеНомера(Команда)
	ОткрытьФормуВыбораСерий();
КонецПроцедуры

&НаКлиенте
Процедура СброситьПризнакПечати(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru = 'Сбросить признак печати для всех кодов маркировки по заказу?'");
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросСбросаПризнакаПечатиПриЗавершении", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ДоступнаИерархия = Ложь;
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		ДоступнаИерархия,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(
			ЭтотОбъект, Истина)); // ДоступнаИерархия Истина - для упрощения заголовка
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьНаборыГрупповыеУпаковки(Команда)

	Если Элементы.Товары.ВыделенныеСтроки = 0 Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьПерезаполнениеНаборовИГрупповыхУпаковок(Элементы.Товары.ВыделенныеСтроки);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоНаборуГрупповойУпаковке(Команда)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтрокиВладельца) Тогда
		Если (ИспользуютсяНаборы
			И ШаблонЕстьВСписке(ТекущиеДанные.Шаблон, ШаблоныНабора))
			Или (ИспользуютсяГрупповыеУпаковки
			И ШаблонЕстьВСписке(ТекущиеДанные.Шаблон, ШаблоныГрупповойУпаковки)) Тогда
			СтруктураОтбора.Вставить("ИдентификаторСтрокиВладельца", ТекущиеДанные.ИдентификаторСтрокиВладельца);
			НаименованиеТовараВладельца = Строка(ТекущиеДанные.Номенклатура);
		Иначе
			СтруктураОтбора.Вставить("ИдентификаторСтрокиВладельца", ТекущиеДанные.ИдентификаторСтрокиВладельца);
			СтрокаВладелец = ПолучитьСтрокуВладельца(ЭтотОбъект, ТекущиеДанные.ИдентификаторСтрокиВладельца);
			Если СтрокаВладелец = Неопределено Тогда
				НаименованиеТовараВладельца = "";
			Иначе
				НаименованиеТовараВладельца = Строка(СтрокаВладелец.Номенклатура);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	Если ИспользуютсяГрупповыеУпаковки Тогда
		ТекстСообщения = НСтр("ru = 'Отключить отбор строк по групповой упаковке'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Отключить отбор строк по набору'");
	КонецЕсли;

	Если НаименованиеТовараВладельца <> "" Тогда
		ТекстСообщения = ТекстСообщения + ": ";
	КонецЕсли;

	ОтборПоНаборуГрупповойУпаковке = Новый ФорматированнаяСтрока(
		СтрШаблон("%1%2",
			ТекстСообщения,
			НаименованиеТовараВладельца),,
		ЦветГиперссылки,,
		"ОтключитьОтборПоНаборуГрупповойУпаковке");

	Элементы.ОтборПоНаборуГрупповойУпаковке.Видимость = Истина;
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);

КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	// Реквизит формы, контролирующий работу с адресом.
	// Используемые поля аналогичны полям справочника ВидыКонтактнойИнформации.
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта = Новый Структура;
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("АдресТолькоРоссийский",        Ложь);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформацииАдресаПроизводственногоОбъекта.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	Объект.ПроизводственныйОбъектАдресСтрокой = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(
		Объект.ПроизводственныйОбъектАдрес);
	КомментарийАдресаПроизводственногоОбъекта = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(
		Объект.ПроизводственныйОбъектАдрес);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, Знач ВидКонтактнойИнформации, Знач Комментарий = Неопределено)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(
		Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Объект.ДокументОснование = Неопределено;
	ОчиститьGTINВТоварах(ЭтотОбъект);
	ПроизводственныйОбъектЗаполнитьСписокВыбора(ЭтотОбъект, Истина);
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	ОбновитьДанныеФормыМаркировкаОстатковСервер();
	ЗаполнитьGLNОргранизацииПоСтатистике();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьGLNОргранизацииПоСтатистике(ОчищатьПустое = Истина)
	
	Если Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха
		Или Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.GLNОрганизации = Неопределено;
	Иначе
		ДанныеСтатистики = ЗаполнениеОбъектовПоСтатистикеИСМП.ДанныеЗаполненияЗаказаНаЭмиссиюКодовМаркировкиСУЗ(Объект.Организация);
		Объект.GLNОрганизации = ДанныеСтатистики.GLNОрганизации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьGTINВТоварах(Форма)
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		СтрокаТовары.GTIN = "";
		СтрокаТовары.ПолноеОписаниеОстатков = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючСвязиСтатусаСтрок(ВидПродукции = Неопределено, Номенклатура = Неопределено)
	
	МассивКлючейСвязи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		МассивКлючейСвязи.Добавить("GTIN");
	КонецЕсли;
	
	Возврат СтрСоединить(МассивКлючейСвязи, ", ");
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Функция МассивЗначенийGTINДляВыбора(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Табак Тогда
		ВключатьGTINНаОстатки = ЭтоМаркировкаОстатков;
	Иначе
		ВключатьGTINНаОстатки = ЭтоМаркировкаОстатков И Не ТекущиеДанные.ПолноеОписаниеОстатков;
	КонецЕсли;
	
	Возврат ИнтеграцияИСМП.МассивЗначенийGTINДляВыбора(ТекущиеДанные, Объект, ВключатьGTINНаОстатки);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКоличествоЭмитированоВТоварах()
	
	Если Не ОтобразитьКоличествоЭмитировано Тогда
		Возврат;
	КонецЕсли;
	
	НачалоGTIN           = ИнтеграцияИСМПСлужебныйКлиентСервер.НачалоGTINМаркировкиОстатков();
	ПустаяНоменклатура   = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ПустаяХарактеристика = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Номенклатура
		|	КОНЕЦ                                     КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Характеристика
		|	КОНЕЦ                                     КАК Характеристика,
		|	ПулКодовМаркировкиСУЗ.Шаблон              КАК Шаблон,
		|	ПулКодовМаркировкиСУЗ.GTIN                КАК GTIN,
		|	СУММА(1)                                  КАК Количество,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот  КАК СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.ВидКИЗ              КАК ВидКИЗ,
		|	ПулКодовМаркировкиСУЗ.РазмерКИЗ           КАК РазмерКИЗ,
		|	ПулКодовМаркировкиСУЗ.СрокГодности        КАК СрокГодности,
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена КАК МаксимальнаяРозничнаяЦена
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ КАК Шапка
		|			ПО ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = Шапка.Ссылка
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяНоменклатура
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА Шапка.БезУчетаНоменклатуры И ПОДСТРОКА(ПулКодовМаркировкиСУЗ.GTIN, 1, 3) = &НачалоGTIN
		|			ТОГДА &ПустаяХарактеристика
		|		ИНАЧЕ ПулКодовМаркировкиСУЗ.Характеристика
		|	КОНЕЦ,
		|	ПулКодовМаркировкиСУЗ.МаксимальнаяРозничнаяЦена,
		|	ПулКодовМаркировкиСУЗ.СпособВводаВОборот,
		|	ПулКодовМаркировкиСУЗ.ВидКИЗ,
		|	ПулКодовМаркировкиСУЗ.РазмерКИЗ,
		|	ПулКодовМаркировкиСУЗ.СрокГодности,
		|	ПулКодовМаркировкиСУЗ.Шаблон,
		|	ПулКодовМаркировкиСУЗ.GTIN";
	
	Запрос.УстановитьПараметр("Ссылка",               Объект.Ссылка);
	Запрос.УстановитьПараметр("НачалоGTIN",           НачалоGTIN);
	Запрос.УстановитьПараметр("ПустаяНоменклатура",   ПустаяНоменклатура);
	Запрос.УстановитьПараметр("ПустаяХарактеристика", ПустаяХарактеристика);
	
	ЭмитированныеКоды = Запрос.Выполнить().Выгрузить();
	ЭмитированныеКоды.Индексы.Добавить(
		"Номенклатура, Характеристика, Шаблон, GTIN, ВидКИЗ, РазмерКИЗ, МаксимальнаяРозничнаяЦена, СрокГодности, СпособВводаВОборот");
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		
		СтрокаТовары.КоличествоЭмитировано = 0;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Шаблон",                    СтрокаТовары.Шаблон);
		СтруктураПоиска.Вставить("GTIN",                      СтрокаТовары.GTIN);
		СтруктураПоиска.Вставить("МаксимальнаяРозничнаяЦена", СтрокаТовары.МаксимальнаяРозничнаяЦена);
		СтруктураПоиска.Вставить("СрокГодности",              СтрокаТовары.СрокГодности);
		СтруктураПоиска.Вставить("ВидКИЗ",                    СтрокаТовары.ВидКИЗ);
		СтруктураПоиска.Вставить("РазмерКИЗ",                 СтрокаТовары.РазмерКИЗ);
		Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков
			И Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция
			Или Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
			СтруктураПоиска.Вставить("СпособВводаВОборот", СтрокаТовары.СпособВводаВОборот);
		Иначе 
			СтруктураПоиска.Вставить("СпособВводаВОборот", Объект.СпособВводаВОборот);
		КонецЕсли;
		
		Если Объект.БезУчетаНоменклатуры И СтрНачинаетсяС(СтрокаТовары.GTIN, НачалоGTIN) Тогда
			СтруктураПоиска.Вставить("Номенклатура",   ПустаяНоменклатура);
			СтруктураПоиска.Вставить("Характеристика", ПустаяХарактеристика);
		Иначе
			СтруктураПоиска.Вставить("Номенклатура",   СтрокаТовары.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика", СтрокаТовары.Характеристика);
		КонецЕсли;
		
		ПоискСтрок = ЭмитированныеКоды.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрокаЭмитировано Из ПоискСтрок Цикл
			
			Если СтрокаТовары.Количество = СтрокаТовары.КоличествоЭмитировано Тогда
				Прервать;
			КонецЕсли;
			
			Если СтрокаЭмитировано.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЭмитировано.Количество < СтрокаТовары.Количество Тогда
				КоличествоПоСтроке = СтрокаЭмитировано.Количество;
			Иначе
				КоличествоПоСтроке = СтрокаТовары.Количество;
			КонецЕсли;
			
			СтрокаТовары.КоличествоЭмитировано = КоличествоПоСтроке;
			СтрокаЭмитировано.Количество       = СтрокаЭмитировано.Количество - КоличествоПоСтроке;
			
		КонецЦикла;
		
		СтрокаТовары.ЕстьОтличия = СтрокаТовары.КоличествоЭмитировано < СтрокаТовары.Количество;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроизводственныйОбъектЗаполнитьСписокВыбора(Форма, ПроверитьПроизводственныйОбъект = Ложь)
	
	Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Если ПроверитьПроизводственныйОбъект Тогда
			Форма.Объект.ПроизводственныйОбъект = Неопределено;
			ЗаполнитьАдресПроизводственногоОбъекта(Форма);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПроверитьПроизводственныйОбъект Тогда
		ПроизводственныйОбъект = Форма.Объект.ПроизводственныйОбъект;
	Иначе
		ПроизводственныйОбъект = Неопределено;
	КонецЕсли;
	
	СписокВыбора = ПроизводственныйОбъектПолучитьСписокВыбора(Форма.Объект.Организация, ПроизводственныйОбъект);
	
	Для Каждого ЭлементСписка Из СписокВыбора Цикл
		Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.Добавить(
			ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
	Форма.Элементы.ПроизводственныйОбъект.СписокВыбора.СортироватьПоПредставлению();
	
	Если ПроверитьПроизводственныйОбъект
		И ПроизводственныйОбъект = Неопределено Тогда
		Форма.Объект.ПроизводственныйОбъект = Неопределено;
		ЗаполнитьАдресПроизводственногоОбъекта(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроизводственныйОбъектПолучитьСписокВыбора(Организация, ПроизводственныйОбъект)
	
	Возврат РегистрыСведений.НастройкиОбменаСУЗ.ПроизводственныйОбъектПолучитьСписокВыбора(Организация, ПроизводственныйОбъект);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьАдресПроизводственногоОбъекта(Форма)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Объект.ПроизводственныйОбъект) Тогда
		Объект.ПроизводственныйОбъектАдрес        = "";
		Объект.ПроизводственныйОбъектАдресСтрокой = "";
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Объект,
		ПолучитьАдресПроизводственногоОбъекта(Объект.Организация, Объект.ПроизводственныйОбъект));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАдресПроизводственногоОбъекта(Организация, ПроизводственныйОбъект)
	
	Возврат РегистрыСведений.НастройкиОбменаСУЗ.ПолучитьАдресПроизводственногоОбъекта(Организация, ПроизводственныйОбъект);
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыНаСервере()
	
	ДоступностьСпособаВвода = Новый Соответствие();
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля,
		Ложь);
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков,
		ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитМаркировкеОстатков(Объект.ВидПродукции));
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.Перемаркировка,
		ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитПеремаркировке(Объект.ВидПродукции));
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.Комиссия,
		ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитПриемкеНаКомиссию(Объект.ВидПродукции));
	ДоступностьСпособаВвода.Вставить(
		Перечисления.СпособыВводаВОборотСУЗ.Импорт,
		ИнтеграцияИСКлиентСервер.ВидПродукцииПодлежитИмпорту(Объект.ВидПродукции));
	
	Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ДанныеДокументаАдрес);
	Иначе
		ДанныеДокумента = Неопределено;
	КонецЕсли;
	
	Если ДанныеДокумента <> Неопределено
		И ДанныеДокумента.ВидПродукции = Объект.ВидПродукции
		И ЗначениеЗаполнено(ДанныеДокумента.СпособВводаВОборот)
		И (ДоступностьСпособаВвода.Получить(ДанныеДокумента.СпособВводаВОборот) = Неопределено
		Или ДоступностьСпособаВвода.Получить(ДанныеДокумента.СпособВводаВОборот) = Ложь) Тогда
		ДоступностьСпособаВвода.Вставить(ДанныеДокумента.СпособВводаВОборот, Истина);
	КонецЕсли;
	
	Элементы.СброситьПризнакПечати.Видимость = ИнтеграцияИСМП.РазрешенаПовторнаяПечатьКодовМаркировки();
	
	Для Каждого КлючИЗначение Из ДоступностьСпособаВвода Цикл
		
		ЭлементВСпискеЗначений = Элементы.СпособВыпускаВОборот.СписокВыбора.НайтиПоЗначению(КлючИЗначение.Ключ);
		Если КлючИЗначение.Значение И ЭлементВСпискеЗначений = Неопределено Тогда
			Элементы.СпособВыпускаВОборот.СписокВыбора.Добавить(КлючИЗначение.Ключ);
		ИначеЕсли Не КлючИЗначение.Значение И ЭлементВСпискеЗначений <> Неопределено Тогда
			Элементы.СпособВыпускаВОборот.СписокВыбора.Удалить(ЭлементВСпискеЗначений);
			Если Элементы.СпособВыпускаВОборот.СписокВыбора.НайтиПоЗначению(Объект.СпособВводаВОборот) = Неопределено Тогда
				Объект.СпособВводаВОборот = Неопределено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции) Тогда
		Элементы.СпособВыпускаВОборот.АвтоОтметкаНезаполненного = Ложь;
		Элементы.СпособВыпускаВОборот.ПодсказкаВвода = НСтр("ru = 'Производство или импорт'");
	Иначе
		Элементы.СпособВыпускаВОборот.АвтоОтметкаНезаполненного = Истина;
		Элементы.СпособВыпускаВОборот.ПодсказкаВвода = "";
	КонецЕсли;
	
	ДатаОбязательнойМаркировки = ИнтеграцияИСМПКлиентСерверПовтИсп.ДатаОбязательнойМаркировкиПродукции(Объект.ВидПродукции);
	РеквизитыМетаданного       = Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Реквизиты;
	
	Элементы.ВвезенПослеДатыОбязательнойМаркировки.Заголовок = СтрШаблон(
		"%1 %2",
		РеквизитыМетаданного.ВвезенПослеДатыОбязательнойМаркировки.Синоним,
		Формат(ДатаОбязательнойМаркировки, "ДФ=dd.MM.yyyy;"));
		
	Элементы.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Заголовок = СтрШаблон(
		"%1 %2",
		РеквизитыМетаданного.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Синоним,
		Формат(ДатаОбязательнойМаркировки, "ДФ=dd.MM.yyyy;"));
	
	Элементы.БезУчетаНоменклатуры.Подсказка = НСтр(
		"ru = 'При упрощенном описании остатков (GTIN ""029..."") позволяет не указывать товарные позиции для заказа кодов маркировки.'");
	
	Элементы.ТоварыПолноеОписаниеОстатков.Формат               = НСтр("ru = 'БЛ=Упрощенное; БИ=Полное;'");
	Элементы.ТоварыПолноеОписаниеОстатков.ФорматРедактирования = Элементы.ТоварыПолноеОписаниеОстатков.Формат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФормыМаркировкаОстатков()
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьДанныеФормыМаркировкаОстатковСервер();
	Иначе
		ЗаполнитьТаблицуПредставленийНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗависимыеПризнакиФормы()
	
	СтатусПозволяетОтображатьЭмитировано = Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗКодыМаркировкиЭмитированыЧастично
		Или Статус = Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.СУЗПринятКОбработке;
	
	ОтобразитьКоличествоЭмитировано = Не Объект.Ссылка.Пустая() И СтатусПозволяетОтображатьЭмитировано
		И ВПулеЕстьКодыМаркировки(Объект.Ссылка);
	
	РасчетПризнакаПолногоОписанияОстатков(Объект.Товары);
	
КонецПроцедуры

&НаСервере
Процедура РасчетПризнакаПолногоОписанияОстатков(СтрокиДляОбработки, СброситьПолноеОписание = Истина, НовыеСтроки = Ложь)
	
	Если Не ЭтоМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НовыеСтроки
		И ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности(ЭтотОбъект) Тогда
		ПолноеОписание = Неопределено;
	Иначе
		ПолноеОписание = ИнтеграцияИСКлиентСервер.ИспользованиеСпособаОписанияОстатков(Объект.ВидПродукции);
	КонецЕсли;
	
	СтрокиПоGTIN = Новый Соответствие();
	ДанныеПоEAN  = Новый Соответствие();
	
	Для Каждого СтрокаТовары Из СтрокиДляОбработки Цикл
		
		Если ПолноеОписание = Неопределено Тогда
			Если ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
				Если РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(СтрокаТовары.GTIN) Тогда
					СтрокаТовары.ПолноеОписаниеОстатков = Ложь;
					Если ЗначениеЗаполнено(СтрокаТовары.ТоварныйЗнак)
						Или ЗначениеЗаполнено(СтрокаТовары.Наименование)
						Или ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) Тогда
						Продолжить;
					КонецЕсли;
					КоллекцияСтрок = СтрокиПоGTIN.Получить(СтрокаТовары.GTIN);
					ДанныеПоEAN.Вставить(
						СтрокаТовары.GTIN,
						Новый Структура(
							"Номенклатура,Характеристика,МаркируемаяПродукция",
							ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"),
							ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"),
							Истина));
					ШтрихкодEAN = РазборКодаМаркировкиИССлужебныйКлиентСервер.ШтрихкодEANИзGTIN(СтрокаТовары.GTIN);
					Если ШтрихкодEAN <>  СтрокаТовары.GTIN Тогда
						ДанныеПоEAN.Вставить(
							ШтрихкодEAN,
							Новый Структура(
								"Номенклатура,Характеристика,МаркируемаяПродукция",
								ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"),
								ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"),
								Истина));
					КонецЕсли;
					Если КоллекцияСтрок = Неопределено Тогда
						КоллекцияСтрок = Новый Массив();
						СтрокиПоGTIN.Вставить(СтрокаТовары.GTIN, КоллекцияСтрок);
					КонецЕсли;
					КоллекцияСтрок.Добавить(СтрокаТовары);
				Иначе
					СтрокаТовары.ПолноеОписаниеОстатков = Истина;
				КонецЕсли;
			ИначеЕсли СброситьПолноеОписание Тогда
				СтрокаТовары.ПолноеОписаниеОстатков = Ложь;
			КонецЕсли;
		Иначе
			СтрокаТовары.ПолноеОписаниеОстатков = ПолноеОписание;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиПоGTIN.Количество() Тогда
		
		ЗаполнитьДанныеПоEAN(ДанныеПоEAN);
			
		Для Каждого КлючИЗначение Из ДанныеПоEAN Цикл
			
			ЗначениеПоEAN = КлючИЗначение.Значение;
			Если Не ЗначениеЗаполнено(ЗначениеПоEAN.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			GTINДляПоиска       = ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.GTINПоШтрихкодуEAN(КлючИЗначение.Ключ);
			СтрокиДляЗаполнения = СтрокиПоGTIN.Получить(GTINДляПоиска);
			
			Если СтрокиДляЗаполнения = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого СтрокаТовары Из СтрокиДляЗаполнения Цикл
				Если СтрокаТовары.Номенклатура = ЗначениеПоEAN.Номенклатура
					И СтрокаТовары.Характеристика = ЗначениеПоEAN.Характеристика Тогда
					СтрокаТовары.ПолноеОписаниеОстатков = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеПоEAN(ДанныеПоEAN)
	
	КэшированныеЗначения = Неопределено;
	ШтрихкодированиеИСПереопределяемый.ЗаполнитьИнформациюПоШтрихкодам(
		ДанныеПоEAN,
		КэшированныеЗначения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВПулеЕстьКодыМаркировки(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПулКодовМаркировкиСУЗ.ХешСуммаКодаМаркировки
		|ИЗ
		|	РегистрСведений.ПулКодовМаркировкиСУЗ КАК ПулКодовМаркировкиСУЗ
		|ГДЕ
		|	ПулКодовМаркировкиСУЗ.ЗаказНаЭмиссию = &ЗаказНаЭмиссию";
	
	Запрос.УстановитьПараметр("ЗаказНаЭмиссию", Документ);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)

	Если Форма.ОтборСтрок = "НеПолучено" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("ЕстьОтличия", Истина);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчисткаGTINПриИзмененииНоменклатуры(ТекущиеДанные)
	
	Если Объект.БезУчетаНоменклатуры
		И РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(ТекущиеДанные.GTIN) Тогда
			Возврат;
	КонецЕсли;
	
	ТекущиеДанные.GTIN = "";
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	ОтборСтрок      = "Все";
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ);
	ПредыдущийСпособВводаВОборот = Объект.СпособВводаВОборот;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеДокумента = Новый Структура("ВидПродукции, СпособВводаВОборот");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Объект);
		Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
			ПоместитьВоВременноеХранилище(ДанныеДокумента, ДанныеДокументаАдрес);
		Иначе
			ДанныеДокументаАдрес = ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.СервисПровайдер) Тогда
		ПечатьКодовМаркировки = 1;
	КонецЕсли;
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	// Возможность передачи данных через файл excel отключена.
	// Необходимо использовать подсистему 1С:Номенклатура.
	ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВКаталогGS46 = Ложь;
	Если Не ОбщегоНазначения.ЭтоWindowsКлиент()
		Или ОбщегоНазначения.ЭтоВебКлиент()
		Или ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВКаталогGS46 = Ложь;
	КонецЕсли;
	
	Подсистема1СНоменклатураСуществует = ОбщегоНазначения.ПодсистемаСуществует("ЭлектронноеВзаимодействие.РаботаСНоменклатурой");
	Если Подсистема1СНоменклатураСуществует Тогда
		Включена1СНоменклатура = ИспользоватьСервисРаботаСНоменклатурой();
		ОтображатьКомандуВключить1СНоменклатуру                                        = Не Включена1СНоменклатура;
		ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВНациональныйКаталог =    Включена1СНоменклатура;
	Иначе
		ОтображатьКомандуВключить1СНоменклатуру                                        = Ложь;
		ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВНациональныйКаталог = Ложь;
	КонецЕсли;
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
	
	ОбновитьПредставленияНаФорме();
	
	ПроизводственныйОбъектЗаполнитьСписокВыбора(ЭтотОбъект);
	
	НастроитьЭлементыФормыНаСервере();
	
	ЗаполнитьТаблицуПредставленийНоменклатуры();
	
	ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	
	УстановитьПризнакНабораИГрупповойУпаковки(ЭтотОбъект, Объект.Товары);

	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		ПроверкаИПодборПродукцииИС.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект, Ложь, КлючСвязиСтатусаСтрок(Объект.ВидПродукции));
		ПодключенаОбработкаКодовМаркировки = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	ПараметрыЗаполнения.Вставить("ИспользуютсяУпаковки", Ложь);

	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		УстановитьПризнакНабораИГрупповойУпаковки(ЭтотОбъект, ДобавленныеСтроки);
		ОбработатьДобавленныеСтрокиТоваров(ДобавленныеСтроки);
		Если ЭтоМаркировкаОстатков Тогда
			ОбновитьДанныеФормыМаркировкаОстатковСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормыМаркировкаОстатковСервер()
	
	ОбновитьСтатусИСМП();
	ЗаполнитьТаблицуПредставленийНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПредставленийНоменклатурыНаКлиенте()
	
	Если ЭтоМаркировкаОстатков
		Или Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха") Тогда
		ЗаполнитьТаблицуПредставленийНоменклатуры();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредставленийНоменклатуры()
	
	Если ЭтоМаркировкаОстатков Тогда
		РегистрыСведений.КэшОписанияОстатковИСМП.ЗаполнитьТаблицуПредставленийGTINОстатки(
			Объект.Товары, Объект.Организация, Объект.ВидПродукции);
	ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		ЗаполнитьТаблицуПредставленийНоменклатурыТоварыИзНатуральногоМеха();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПредставленийНоменклатурыТоварыИзНатуральногоМеха()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
			СтрокаТовары.ПредставлениеGTINОстатки = "";
		Иначе
			СтрокаТовары.ПредставлениеGTINОстатки = ИнтеграцияИСМПКлиентСервер.ПредставлениеПустойНоменклатурыПоВидуПродукции(СтрокаТовары, Объект.ВидПродукции);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	Статус          = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета", Объект);
	
	ДопустимыеДействия = МенеджерОбъекта.ДопустимыеДействия(Объект);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр(
			"МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Статус = Выборка.Статус;
			
			ДопустимыеДействия = МенеджерОбъекта.ДопустимыеДействия(Объект);
			
			ДальнейшееДействие = Новый Массив;
			
			ДальнейшиеДействияРегистр = Новый Массив;
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшиеДействияРегистр.Добавить(Выборка.ДальнейшееДействие3);
			
			Для Каждого ДальнейшееДействиеРегиср Из ДальнейшиеДействияРегистр Цикл
				
				ДобавляемоеДействие = ДальнейшееДействиеРегиср;
				Если ДопустимыеДействия.Найти(ДобавляемоеДействие) = Неопределено Тогда
					Если ДобавляемоеДействие =
						Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки Тогда
						ДобавляемоеДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки;
					ИначеЕсли ДобавляемоеДействие =
						Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки Тогда
						ДобавляемоеДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки;
					КонецЕсли;
				КонецЕсли;
				
				Если ДальнейшееДействие.Найти(ДобавляемоеДействие) = Неопределено Тогда
					ДальнейшееДействие.Добавить(ДобавляемоеДействие);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(
		Статус,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = (Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.Черновик
		И Статус <> Перечисления.СтатусыОбработкиЗаказовНаЭмиссиюКодовМаркировкиИСМП.ИСМПGTINНаОстаткиПолучены
		И МенеджерОбъекта.СтатусыОшибок().Найти(Статус) = Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);

	// Тип оплаты кодов маркировки
	Элементы.ТипОплатыКодовМаркировки.ПодсказкаВвода = Строка(Перечисления.ТипыОплатыКодовМаркировкиСУЗ.ОплатаПоНанесению);

	// Реквизиты упрощенного описания остатков
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	УстановитьПоляУпрощенногоОписанияОстатков(ЭлементУсловногоОформления);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Отметка незаполненного при заполненном GTIN
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	УстановитьПоляУпрощенногоОписанияОстатков(ЭлементУсловногоОформления);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Товарный знак
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварныйЗнак.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварныйЗнак.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отсутствует>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Одежда ТНВЭД НЕ для возрастной категории
	КодТНВЭДДляВозврастнойКатегории = ИнтеграцияИСКлиентСервер.КодТНВЭДДляВозврастнойКатегории();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВозрастнаяКатегория.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеНачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = КодТНВЭДДляВозврастнойКатегории;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Одежда ТНВЭД для возрастной категории
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦелевойПол.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = КодТНВЭДДляВозврастнойКатегории;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Молочная продукция, Срок годности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке;

	СписокШаблонов = Новый СписокЗначений;
	СписокШаблонов.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС);
	СписокШаблонов.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС);
	ОтборЭлемента.ПравоеЗначение = СписокШаблонов;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Молочная продукция без указания сроков годности
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокШаблоновНеТребуется = Новый СписокЗначений;
	СписокШаблоновНеТребуется.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияБезУказанияСроковГодностиВЕТИС);
	СписокШаблоновНеТребуется.Добавить(Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияСерия6СимволовВЕТИС);
	ОтборЭлемента.ПравоеЗначение = СписокШаблоновНеТребуется;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	// Молочная продукция, Формат: ДФ=dd.MM.yyyy
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ=dd.MM.yyyy;");

	// Молочная продукция скоропортящаяся, Формат: ДФ=dd.MM.yyyy
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСрокГодности.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='dd.MM.yyyy HH:mm';");

	// GTIN
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ВидПродукции.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыПродукцииИС.НикотиносодержащаяПродукция;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<запросите GTIN на остатки или выберите существующий>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// GTIN
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите существующий GTIN>'"));
	
	// Номенклатура
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.СпособВыпускаВОборот.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеОписаниеОстатков.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.БезУчетаНоменклатуры.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеGTINОстатки"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	#Область ПредставлениеШаблонаКодаМаркировки
	
	ДоступныеШаблоны              = ИнтеграцияИСМПКлиентСервер.ПредставленияШаблоновКодаМаркировки();
	ШаблоныКомплектующихНаборов   = ИнтеграцияИСМПКлиентСервер.ШаблоныКомплектующихНаборов();
	ШаблоныИндивидуальныхУпаковок = ИнтеграцияИСМПКлиентСервер.ШаблоныИндивидуальныхУпаковокВСоставеГрупповых();
	Для Каждого ЭлементСписка Из ДоступныеШаблоны Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементСписка.Представление) Тогда
			Продолжить;
		КонецЕсли;
		
		ВходитВНабор             = ШаблоныКомплектующихНаборов.Найти(ЭлементСписка.Значение) <> Неопределено;
		ВходитВГрупповуюУпаковку = ШаблоныИндивидуальныхУпаковок.Найти(ЭлементСписка.Значение) <> Неопределено;

		Если ВходитВНабор Или ВходитВГрупповуюУпаковку Тогда

			Если ВходитВНабор Тогда

				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

				ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.Имя);

				ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
				ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;

				ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЭтоНабор.ПутьКДанным);
				ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;

				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон(
					НСтр("ru = '%1 (входит в набор)'"),
					ЭлементСписка.Представление));

			КонецЕсли;

			Если ВходитВГрупповуюУпаковку Тогда

				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

				ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.Имя);

				ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
				ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;

				ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЭтоГрупповаяУпаковка.ПутьКДанным);
				ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;

				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", СтрШаблон(
					НСтр("ru = '%1 (входит в групповую упаковку)'"),
					ЭлементСписка.Представление));

			КонецЕсли;

			// Не в составе набора или групповой упаковки
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.Имя);

			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;

			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтрокиВладельца.ПутьКДанным);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);

		Иначе

			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.Имя);

			ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
			ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = ЭлементСписка.Значение;

			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", ЭлементСписка.Представление);

		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти
	
	// Наименование
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура"));
	
	// Наименование
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Номенклатура
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// Набор
	СписокШаблоновНаборов = Новый СписокЗначений;
	СписокШаблоновНаборов.ЗагрузитьЗначения(ИнтеграцияИСМПКлиентСервер.ШаблоныНаборов());

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокШаблоновНаборов;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтрокиВладельца.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Групповая упаковка
	СписокШаблоновГрупповыхУпаковок = Новый СписокЗначений;
	СписокШаблоновГрупповыхУпаковок.ЗагрузитьЗначения(ИнтеграцияИСМПКлиентСервер.ШаблоныГрупповыхУпаковок());

	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокШаблоновГрупповыхУпаковок;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтрокиВладельца.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	ШаблоныГрупповыеИНаборы = ОбщегоНазначения.СкопироватьРекурсивно(СписокШаблоновГрупповыхУпаковок);
	Для Каждого ЭлементСписка Из СписокШаблоновНаборов Цикл
		ШаблоныГрупповыеИНаборы.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	// Набор и групповая упаковка: Характеристика
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ГруппаОтбора1 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыШаблон.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ШаблоныГрупповыеИНаборы;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтрокиВладельца.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ГруппаОтбора2 = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора2_1 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2_1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2_1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристикиИспользуются.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2_1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

	// Комплектующие набора и составляющие групповой упаковки
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыХарактеристика.Имя);

	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтрокиВладельца.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтрокиВладельца.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторСтроки.ПутьКДанным);

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Товары из натурального меха
	// Номенклатура
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ВидПродукции.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Товары.ПредставлениеGTINОстатки"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	// GTIN
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ВидПродукции.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатура.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// ВладелецGTIN
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВладелецGTINСтрокой.Имя);

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НачинаетсяС;
	ОтборЭлемента.ПравоеЗначение = "029";
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// СпособФормированияСерийногоНомера
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСпособФормированияСерийногоНомера.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВладелецGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоляУпрощенногоОписанияОстатков(ЭлементУсловногоОформления)
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТНВЭД.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыЦелевойПол.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыМодель.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТоварныйЗнак.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСпособВводаВОборот.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВозрастнаяКатегория.Имя);
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНаименование.Имя);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
		РассчитатьЗависимыеПризнакиФормы();
		ЗаполнитьКоличествоЭмитированоВТоварах();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьДоступностьЭлементовФормы(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ЗаполнитьФлагЭтоМаркировкаОстатков(Форма);
	
	ЭтоТрансграничнаяТорговля   = Объект.СпособВводаВОборот = ПредопределенноеЗначение(
		"Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля");
	ЭтоКомиссия                 = Объект.СпособВводаВОборот = ПредопределенноеЗначение(
		"Перечисление.СпособыВводаВОборотСУЗ.Комиссия");
	
	ЭтоШины                 = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.Шины");
	ЭтоДухи                 = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.Духи");
	ЭтоМолочнаяПродукция    = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС");
	ЭтоОбувь                = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.Обувь");
	ЭтоЛегкаяПромышленность = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность");
	ЭтоТабак                = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.Табак");
	ЭтоАльтернативныйТабак  = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.АльтернативныйТабак");
	ЭтоТабачнаяПродукция    = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции);
	ЭтоМех                  = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха");
	ЭтоАнтисептики          = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.Антисептики");
	ЭтоБАД                  = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.БАДы");
	ЭтоКреслаКоляски        = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.КреслаКоляски")
		Или Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации")
		Или Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.МедицинскиеИзделия");
	ЭтоВелосипеды           = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.Велосипеды");
	ЭтоТитановаяПродукция   = Объект.ВидПродукции = ПредопределенноеЗначение(
		"Перечисление.ВидыПродукцииИС.ТитановаяМеталлопродукция");
	
	ВидимостьАдреса = (ЭтоТабачнаяПродукция И Не Форма.ЭтоМаркировкаОстатков)
						Или ЭтоМех
							И Объект.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияИзготовленныхКИЗГИСМ.ДоставкаЭмитентомДоУказанногоМеста");
	
	Элементы.ТоварыМаксимальнаяРозничнаяЦена.Видимость             = ЭтоТабак;
	Элементы.ПроизводственныйОбъектИдентификатор.Видимость         = (ЭтоТабачнаяПродукция И Не Форма.ЭтоМаркировкаОстатков);
	Элементы.ИдентификаторПроизводственнойЛинии.Видимость          = (ЭтоТабачнаяПродукция И Не Форма.ЭтоМаркировкаОстатков);
	Элементы.ОжидаемаяДатаНачалаПроизводства.Видимость             = (ЭтоТабачнаяПродукция И Не Форма.ЭтоМаркировкаОстатков);
	Элементы.ПредставлениеАдресаПроизводственногоОбъекта.Видимость = ВидимостьАдреса;
	
	Форма.ИспользуютсяНаборы            = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетНаборы(Объект.ВидПродукции);
	Форма.ИспользуютсяГрупповыеУпаковки = ОбщегоНазначенияИСКлиентСервер.ВидПродукцииИспользуетГрупповыеУпаковки(Объект.ВидПродукции);
	Форма.ШаблоныГрупповойУпаковки      = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 4);
	Форма.ШаблоныНабора                 = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 5);
	Если Форма.ИспользуютсяНаборы И Форма.ИспользуютсяГрупповыеУпаковки Тогда
		Элементы.ПерезаполнитьНаборыГрупповыеУпаковки.Заголовок = НСтр("ru = 'Перезаполнить наборы / групповые упаковки'");
		Элементы.ТоварыУстановитьОтборПоНаборуГрупповойУпаковке.Заголовок =
			НСтр("ru = 'Установить отбор строк по набору / групповой упаковке'");
	ИначеЕсли Форма.ИспользуютсяНаборы Тогда
		Элементы.ПерезаполнитьНаборыГрупповыеУпаковки.Заголовок = НСтр("ru = 'Перезаполнить наборы'");
		Элементы.ТоварыУстановитьОтборПоНаборуГрупповойУпаковке.Заголовок =
			НСтр("ru = 'Установить отбор строк по набору'");
	ИначеЕсли Форма.ИспользуютсяГрупповыеУпаковки Тогда
		Элементы.ПерезаполнитьНаборыГрупповыеУпаковки.Заголовок = НСтр("ru = 'Перезаполнить групповые упаковки'");
		Элементы.ТоварыУстановитьОтборПоНаборуГрупповойУпаковке.Заголовок =
			НСтр("ru = 'Установить отбор строк по групповой упаковке'");
	КонецЕсли;
	Элементы.ПерезаполнитьНаборыГрупповыеУпаковки.Видимость =
		Форма.ИспользуютсяНаборы Или Форма.ИспользуютсяГрупповыеУпаковки;
	Элементы.ТоварыУстановитьОтборПоНаборуГрупповойУпаковке.Видимость =
		Форма.ИспользуютсяНаборы Или Форма.ИспользуютсяГрупповыеУпаковки;

	Форма.ИспользованиеСервисПровайдераЗапрещено =
		ЭтоТабачнаяПродукция Или ЭтоКомиссия Или ЭтоМех Или ЭтоТитановаяПродукция;
	Элементы.ГруппаСервисПровайдер.Видимость     =
		Не Форма.ИспользованиеСервисПровайдераЗапрещено;
	Элементы.СервисПровайдер.Доступность         =
		Форма.ПечатьКодовМаркировки = 1;
	
	ПодсказкаВвода = "";
	Если Не Форма.ИспользованиеСервисПровайдераЗапрещено
		И Форма.ПечатьКодовМаркировки = 1
		И Не ЗначениеЗаполнено(Объект.СервисПровайдер) Тогда
			
		Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
			ПодсказкаВвода = НСтр("ru = 'заполните поле ""Вид продукции""'");
		ИначеЕсли Не ЗначениеЗаполнено(Объект.СпособВводаВОборот) Тогда
			ПодсказкаВвода = НСтр("ru = 'заполните поле ""Способ ввода в оборот""'");
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ПодсказкаВвода <> Элементы.СервисПровайдер.ПодсказкаВвода Тогда
		
		Если ПодсказкаВвода <> "" Тогда
			Элементы.СервисПровайдер.ПодсказкаВвода = ПодсказкаВвода;
			Элементы.СервисПровайдер.ТолькоПросмотр = Истина;
		Иначе
			Элементы.СервисПровайдер.ПодсказкаВвода = "";
			Элементы.СервисПровайдер.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТоварыПодготовитьПередатьСведенияОТоварахВКаталогGS46.Видимость         =
		ЭтоОбувь И Форма.ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВКаталогGS46;
	Элементы.ТоварыПодготовитьПередатьСведенияОТоварахВНациональныйКаталог.Видимость =
		Форма.ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВНациональныйКаталог;
	Элементы.ТоварыВключить1СНоменклатуру.Видимость                                  =
		Форма.ОтображатьКомандуВключить1СНоменклатуру;
	
	ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности = ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности(Форма);
	
	Если (Форма.ЭтоМаркировкаОстатков И Не ЭтоЛегкаяПромышленность)
		Или ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности Тогда
		
		Если ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности Тогда
			ПолноеОписание = Неопределено;
		Иначе
			ПолноеОписание = ИнтеграцияИСКлиентСервер.ИспользованиеСпособаОписанияОстатков(Объект.ВидПродукции);
		КонецЕсли;
		
		ПараметрыОписанияОстатков =
			ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(Объект.ВидПродукции);
		
		Элементы.БезУчетаНоменклатуры.Видимость = Не ЭтоАльтернативныйТабак И Не ЭтоДухи
			И Не ЭтоАнтисептики И Не ЭтоБАД И Не ЭтоКреслаКоляски И Не ЭтоВелосипеды;
		
		БылДоступен = Объект.ВвезенПослеДатыОбязательнойМаркировки
			И (ЭтоДухи Или ЭтоШины Или ЭтоЛегкаяПромышленность Или ЭтоОбувь);
		СейчасДоступен = Не ЭтоТабачнаяПродукция
			И Не ЭтоАнтисептики И Не ЭтоБАД И Не ЭтоКреслаКоляски И Не ЭтоВелосипеды
			Или БылДоступен;
		Элементы.ВвезенПослеДатыОбязательнойМаркировки.Видимость = СейчасДоступен;
		
		БылДоступен = Объект.ПриобретенПроизведенПослеДатыОбязательнойМаркировки
			И (ЭтоДухи Или ЭтоШины Или ЭтоЛегкаяПромышленность Или ЭтоОбувь);
		СейчасДоступен = Не ЭтоТабачнаяПродукция
			И Не ЭтоАнтисептики И Не ЭтоБАД И Не ЭтоКреслаКоляски И Не ЭтоВелосипеды
			Или БылДоступен;
		Элементы.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Видимость = СейчасДоступен;
		
		Элементы.ЗаполнитьПараметрыОписанияОстатков.Видимость = (Не ПолноеОписание = Истина);
		
		Элементы.ТоварыПолноеОписаниеОстатков.Видимость = (ПолноеОписание = Неопределено);
		Элементы.ТоварыКодТНВЭД.Видимость               = (Не ПолноеОписание = Истина);
		Элементы.ТоварыЦелевойПол.Видимость             = ПараметрыОписанияОстатков.ИспользоватьЦелевойПол;
		Элементы.ТоварыВозрастнаяКатегория.Видимость    = ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию;
		Элементы.ТоварыМодель.Видимость                 = ПараметрыОписанияОстатков.ИспользоватьМодель;
		Элементы.ТоварыСпособВводаВОборот.Видимость     = ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот;
		Элементы.ТоварыНаименование.Видимость           = ПараметрыОписанияОстатков.ИспользоватьНаименование;
		Элементы.ТоварыТоварныйЗнак.Видимость           = (Не ПолноеОписание = Истина);
		
	Иначе
		
		Элементы.БезУчетаНоменклатуры.Видимость                                = Ложь;
		Элементы.ВвезенПослеДатыОбязательнойМаркировки.Видимость               = Ложь;
		Элементы.ПриобретенПроизведенПослеДатыОбязательнойМаркировки.Видимость = Ложь;
		Элементы.ЗаполнитьПараметрыОписанияОстатков.Видимость                  = Ложь;
		
		Элементы.ТоварыПолноеОписаниеОстатков.Видимость = Ложь;
		Элементы.ТоварыКодТНВЭД.Видимость               = ЭтоМех;
		Элементы.ТоварыЦелевойПол.Видимость             = Ложь;
		Элементы.ТоварыВозрастнаяКатегория.Видимость    = Ложь;
		Элементы.ТоварыМодель.Видимость                 = Ложь;
		Элементы.ТоварыСпособВводаВОборот.Видимость     = ЭтоМех;
		Элементы.ТоварыНаименование.Видимость           = Ложь;
		Элементы.ТоварыТоварныйЗнак.Видимость           = ЕстьЗаполненныеЗначенияТоварногоЗнака(Объект.Товары);
		
	КонецЕсли;
	
	Элементы.ТоварыШаблон.СписокВыбора.Очистить();
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 3);
	Для Каждого ЭлементСпискаЗначений Из ДоступныеШаблоны Цикл
		Элементы.ТоварыШаблон.СписокВыбора.Добавить(
			ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
	КонецЦикла;
	
	ЭтоУстаревшаяМолочнаяПродукция = Ложь;
	
	Если ЭтоМолочнаяПродукция Тогда
		Элементы.ТоварыШаблон.Заголовок = НСтр("ru = 'Шаблон КМ'");
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если СтрокаТовары.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.СкоропортящаясяМолочнаяПродукцияВЕТИС")
				Или СтрокаТовары.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.МолочнаяПродукцияПодконтрольнаяВЕТИС") Тогда
				ЭтоУстаревшаяМолочнаяПродукция = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоУстаревшаяМолочнаяПродукция Тогда
			Элементы.ТоварыСрокГодности.Видимость      = Истина;
			Элементы.ТоварыСрокГодности.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ТоварыСрокГодности.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ТоварыШаблон.Заголовок       = НСтр("ru = 'Вид упаковки'");
		Элементы.ТоварыСрокГодности.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыШаблон.Видимость = (Элементы.ТоварыШаблон.СписокВыбора.Количество() > 1 Или ЭтоУстаревшаяМолочнаяПродукция);
	
	ЗависимыеОтСтатусаОбработкиЗаказа = Новый Массив;
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ГруппаШапка");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("Товары");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыКоманднаяПанельЕще");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыГруппаПодменюЗаполнить");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("ТоварыУказатьСерийныеНомера");
	ЗависимыеОтСтатусаОбработкиЗаказа.Добавить("Ответственный");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаОбработкиЗаказа, Не Форма.РедактированиеФормыНеДоступно);
	
	Элементы.ТоварыКоличествоЭмитировано.Видимость = Форма.ОтобразитьКоличествоЭмитировано;
	Элементы.ОтборСтрок.Видимость                  = Форма.ОтобразитьКоличествоЭмитировано;
	Элементы.Контрагент.Видимость                  = ЭтоТрансграничнаяТорговля;

	ИспользуетсяТипОплатыКодовМаркировки = ИнтеграцияИСМПКлиентСервер.ИспользуетсяТипОплатыКодовМаркировки(Объект.ВидПродукции, Объект.Организация);
	Элементы.ТипОплатыКодовМаркировки.Видимость = ИспользуетсяТипОплатыКодовМаркировки;

	Если ИспользуетсяТипОплатыКодовМаркировки
		И Не ЗначениеЗаполнено(Объект.ТипОплатыКодовМаркировки) Тогда
		Объект.ТипОплатыКодовМаркировки = ПредопределенноеЗначение("Перечисление.ТипыОплатыКодовМаркировкиСУЗ.ОплатаПоНанесению");
	КонецЕсли;
	Элементы.GLNОрганизации.Видимость              = ЭтоМех;
	Элементы.ФормаВиртуальнаяАгрегация.Видимость   = (Не ЭтоМех);
	Элементы.ФормаПечать.Видимость                 = (Не ЭтоМех);
	Элементы.СброситьПризнакПечати.Видимость       = (Не ЭтоМех);
	Элементы.ТоварыУказатьСерийныеНомера.Видимость = (Не ЭтоМех);
	
	Элементы.ТоварыСпособФормированияСерийногоНомера.Видимость = (Не ЭтоМех);
	Элементы.ТоварыСтатусУказанияСерийногоНомера.Видимость     = (Не ЭтоМех);
	Элементы.СпособВыпускаВОборот.Видимость                    = (Не ЭтоМех);
	
	Элементы.ТоварыВидКИЗ.Видимость                            = ЭтоМех;
	Элементы.ТоварыРазмерКИЗ.Видимость                         = ЭтоМех;
	Элементы.СпособПолучения.Видимость                         = ЭтоМех;
	Элементы.НомерДоговораСОператором.Видимость                = ЭтоМех;
	Элементы.ДатаДоговораСОператором.Видимость                 = ЭтоМех;
	
	Элементы.ТоварыВладелецGTINСтрокой.Видимость = ИнтеграцияИСМПКлиентСервер.ИспользуетсяВладелецGTINВЗаказеНаЭмиссию(
		Форма.Объект.СпособВводаВОборот, Форма.Объект.ВидПродукции)
		И Не ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НастройкиВыполненияПодключаемыхКомандИС") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСопоставленияНеизвестныхШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ЗарегистрированныеШтрихкоды.Количество() > 0 Тогда
		ОбработатьШтрихкоды(Результат.ЗарегистрированныеШтрихкоды[0], КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДопустимыйФорматШтрихкода(ДанныеШтрихкодов)
	
	Если Не ДанныеШтрихкодов.Свойство("ФорматBase64") Или Не ДанныеШтрихкодов.ФорматBase64 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ДекодироватьШтрихкодДанныхBase64(ДанныеШтрихкодов);
	Если НайтиНедопустимыеСимволыXML(ДанныеШтрихкодов.Штрихкод) > 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов, КэшированныеЗначения, ТекстОшибки = "")
	
	Если Не ДопустимыйФорматШтрихкода(ДанныеШтрихкодов) Тогда
		ТекстОшибки = НСтр("ru = 'Недопустимый формат штрихкода'");
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	ПараметрыЗаполнения.ЗаполнитьGTIN     = (Не ЭтоМаркировкаОстатков);
	ПараметрыЗаполнения.ЗаполнитьКодТНВЭД = ЭтоМаркировкаОстатков;
	
	ДанныеДляОбработкиШтрихкодов = Неопределено;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Структура") Тогда
		ДанныеПоШтрихкодам = Новый Массив;
		ДанныеПоШтрихкодам.Добавить(ДанныеШтрихкодов);
	Иначе
		ДанныеПоШтрихкодам = ДанныеШтрихкодов;
	КонецЕсли;
	
	ШтрихкодированиеИСПереопределяемый.ПодготовитьДанныеДляОбработкиШтрихкодов(
		ЭтотОбъект, ДанныеПоШтрихкодам, ПараметрыЗаполнения, ДанныеДляОбработкиШтрихкодов);
	
	ШтрихкодированиеИСПереопределяемый.ОбработатьШтрихкоды(ЭтотОбъект, ДанныеДляОбработкиШтрихкодов, КэшированныеЗначения);
	
	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, НовыйВидПродукции) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да
		Или РезультатВопроса = Истина Тогда
		
		Объект.ВидПродукции = НовыйВидПродукции;
		Объект.Товары.Очистить();
		ВидПродукцииПриИзмененииНаСервере(РезультатВопроса = Истина);
		
		ЗаполнитьФлагЭтоМаркировкаОстатков(ЭтотОбъект);
		ПроверитьОчиститьСервисПровайдера(ЭтотОбъект);
		ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
		
		Если Элементы.Товары.ОтборСтрок <> Неопределено Тогда
			Элементы.Товары.ОтборСтрок = Неопределено;
			Элементы.ОтборПоНаборуГрупповойУпаковке.Видимость = Ложь;
		КонецЕсли;

		СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидПродукцииПриИзмененииНаСервере(ПерезаполнитьПоОснованию)
	
	Если ПерезаполнитьПоОснованию И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПерезаполнитьПоОснованиюСервер();
	КонецЕсли;
	НастроитьЭлементыФормыНаСервере();
	
	Если ЭтоМаркировкаОстатков
		И (ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияМОТП(Объект.ВидПродукции)
		Или Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Духи
		Или Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.Шины) Тогда
		Объект.ВвезенПослеДатыОбязательнойМаркировки               = Ложь;
		Объект.ПриобретенПроизведенПослеДатыОбязательнойМаркировки = Ложь;
		Если Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.Табак Тогда
			Объект.БезУчетаНоменклатуры = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		Объект.СпособВводаВОборот       = Неопределено;
		Объект.СервисПровайдер          = Неопределено;
		Объект.Контрагент               = Неопределено;
		Объект.ТипОплатыКодовМаркировки = Неопределено;
	КонецЕсли;
	
	Если Объект.СпособВводаВОборот = Перечисления.СпособыВводаВОборотСУЗ.МаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
	ЗаполнитьGLNОргранизацииПоСтатистике();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не (ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораСерий()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.СпособФормированияСерийногоНомера <> ПредопределенноеЗначение("Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
		ТекущиеДанные.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ТекущиеДанные.ИдентификаторСтроки);
	НайденныеСтроки = Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	СерийныеНомера = Новый Массив;
	Для Каждого Строка Из НайденныеСтроки Цикл
		СерийныеНомера.Добавить(Строка.СерийныйНомер);
	КонецЦикла;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СерийныеНомера",             СерийныеНомера);
	ПараметрыОткрытия.Вставить("Номенклатура",               ТекущиеДанные.Номенклатура);
	ПараметрыОткрытия.Вставить("Характеристика",             ТекущиеДанные.Характеристика);
	ПараметрыОткрытия.Вставить("Шаблон",                     ТекущиеДанные.Шаблон);
	ПараметрыОткрытия.Вставить("ТребуемоеКоличествоНомеров", ТекущиеДанные.Количество);
	ПараметрыОткрытия.Вставить("ВидПродукции",               Объект.ВидПродукции);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ТекущиеДанные", ТекущиеДанные);
	
	ОткрытьФорму("Документ.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.Форма.ФормаВыбораСерий", 
		ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ФормаВыбораСерийЗавершение", ЭтотОбъект, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОбУдаленииСвязанныхСерийныхНомеровЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ДополнительныеПараметры.ТекущиеДанные.СпособФормированияСерийногоНомера = СпособФормированияСерийногоНомера;
	Иначе
		ОчиститьСерийныеНомераПоИдентификатору(ЭтотОбъект, ДополнительныеПараметры.ТекущиеДанные.ИдентификаторСтроки);
		ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ДополнительныеПараметры.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыбораСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьСерийныеНомераПоИдентификатору(ЭтотОбъект, ДополнительныеПараметры.ТекущиеДанные.ИдентификаторСтроки);
	
	Для Каждого Элемент Из Результат Цикл
		
		НоваяСтрокаСерии = Объект.СерийныеНомера.Добавить();
		НоваяСтрокаСерии.СерийныйНомер       = Элемент;
		НоваяСтрокаСерии.ИдентификаторСтроки = ДополнительныеПараметры.ТекущиеДанные.ИдентификаторСтроки;
		
	КонецЦикла;
	
	ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ДополнительныеПараметры.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураХарактеристикаПриИзмененииСервер(
			ИмяЭлемента,
			КэшированныеЗначения = Неопределено,
			ИдентификаторСтроки = Неопределено)
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	Иначе
		ТекущаяСтрока = ИдентификаторСтроки;
	КонецЕсли;
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ХарактеристикиИспользуются Тогда
		НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И ЗначениеЗаполнено(ДанныеСтроки.Характеристика));
	Иначе
		НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
	ИзмененаНоменклатураХарактеристика = (ИмяЭлемента = "ТоварыНоменклатура" Или ИмяЭлемента = "ТоварыХарактеристика");
	ИзмененШаблон = ИмяЭлемента = "ТоварыШаблон";

	Если НоменклатураХарактеристикаУказана Тогда
		
		ДополнительныеПоля  = Новый Массив;
		ВыполнятьЗаполнение = Истина;
		ПолноеОписание      = Неопределено;
		
		Если Не ИзмененаНоменклатураХарактеристика Тогда
			Если ЭтоМаркировкаОстатков Тогда
				
				ДополнительныеПоля.Добавить("Шаблон");
				
				Если ДанныеСтроки.ПолноеОписаниеОстатков Тогда
					
					ПолноеОписание = Истина;

				Иначе
					
					ПараметрыОписанияОстатков = ИнтеграцияИСКлиентСервер.ИспользованиеПараметровОписанияОстатковПоВидуПродукции(
						Объект.ВидПродукции,
						ИнтеграцияИСКлиентСервер.КодТНВЭДДляПередачиВИСМП(ДанныеСтроки.КодТНВЭД, Объект.ВидПродукции));
					
					Если ПараметрыОписанияОстатков.ИспользоватьВозрастнуюКатегорию Тогда
						ДополнительныеПоля.Добавить("ВозрастнаяКатегория");
					КонецЕсли;
					Если ПараметрыОписанияОстатков.ИспользоватьМодель Тогда
						ДополнительныеПоля.Добавить("Модель");
					КонецЕсли;
					Если ПараметрыОписанияОстатков.ИспользоватьТоварныйЗнак
						И ЗначениеЗаполнено(ДанныеСтроки.ТоварныйЗнак) Тогда
						ДополнительныеПоля.Добавить("ТоварныйЗнак");
					КонецЕсли;
					Если ПараметрыОписанияОстатков.ИспользоватьСпособВводаВОборот Тогда
						ДополнительныеПоля.Добавить("СпособВводаВОборот");
					КонецЕсли;
					Если ПараметрыОписанияОстатков.ИспользоватьЦелевойПол Тогда
						ДополнительныеПоля.Добавить("ЦелевойПол");
					КонецЕсли;
					
				КонецЕсли;
				
				Для Каждого ИмяПоля Из ДополнительныеПоля Цикл
					Если Не ЗначениеЗаполнено(ДанныеСтроки[ИмяПоля]) Тогда
						ВыполнятьЗаполнение = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ИзмененШаблон Тогда

				Если ЗначениеЗаполнено(ДанныеСтроки.Шаблон) Тогда
					ДополнительныеПоля.Добавить("Шаблон");
				КонецЕсли;

			Иначе

				ВыполнятьЗаполнение = Ложь;

			КонецЕсли;
		КонецЕсли;
		
		СтрокиДляОбработки = Новый Массив;
		СтрокиДляОбработки.Добавить(ДанныеСтроки);

		Если ВыполнятьЗаполнение Тогда
			ОбработатьДобавленныеСтрокиТоваров(
				СтрокиДляОбработки, ДополнительныеПоля);
			Если ИзмененаНоменклатураХарактеристика Тогда
				Для Каждого ДобавленнаяСтрока Из СтрокиДляОбработки Цикл
					ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, ДобавленнаяСтрока);
				КонецЦикла;
			КонецЕсли;
			ПолноеОписание = Неопределено;
		КонецЕсли;

		РасчетПризнакаПолногоОписанияОстатков(СтрокиДляОбработки, ПолноеОписание <> Истина, Истина);
		ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, ДанныеСтроки);
		
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьДанныеФормыМаркировкаОстатковСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусУказанияСерийныхНомеров(Форма)
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		
		ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(Форма, СтрокаТовары);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(Форма, СтрокаТовары)
	
	Если Не ЗначениеЗаполнено(СтрокаТовары.СпособФормированияСерийногоНомера) Тогда
		СтрокаТовары.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
			"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически")
	КонецЕсли;
	
	Если СтрокаТовары.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
		"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически") Тогда
		СтрокаТовары.СтатусУказанияСерии = 2;
		Возврат
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки);
	НайденныеСтроки = Форма.Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = СтрокаТовары.Количество Тогда
		СтрокаТовары.СтатусУказанияСерии = 2;
	Иначе
		СтрокаТовары.СтатусУказанияСерии = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьСерийныеНомераПоИдентификатору(Форма, ИдентификаторСтроки)

	Если Не ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки);
	НайденныеСтроки = Форма.Объект.СерийныеНомера.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДляУдаления Из НайденныеСтроки Цикл
		
		Форма.Объект.СерийныеНомера.Удалить(СтрокаДляУдаления);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Ложь)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСбросаПризнакаПечатиПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СброситьПризнакПечатиКодовПоЗаказу(Объект.Ссылка);
		
		ТекстОповещения = СтрШаблон(НСтр("ru = 'Признак печати кодов маркировки по заказу %1 снят.'"), Объект.Ссылка);
		ТекстЗаголовка  = НСтр("ru = 'Снятие признака печати.'");
		
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СброситьПризнакПечатиКодовПоЗаказу(Документ)
	РегистрыСведений.ПулКодовМаркировкиСУЗ.СброситьПризнакПечатиПоЗаказу(Документ);
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	РазблокироватьДанныеФормыДляРедактирования();
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьКодыМаркировки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
			
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗапроситьGTINНаОстатки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);

		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ЗакройтеЗаказНаЭмиссию" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗакройтеЗаказНаЭмиссию");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);

		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитеПолучениеКодовМаркировки" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПолучениеКодовМаркировки");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);

		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Элементы.ТоварыКоличествоУпаковок.ФорматРедактирования = "ЧДЦ=0;";
	Элементы.ТоварыКоличествоУпаковок.Формат = "ЧДЦ=0;";
	
КонецПроцедуры

// Заполнить доступные GTIN.
// 
// Параметры:
//  РезультатАвторизации - Неопределено - ,
//                       - см. ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗавершенияОбработки - Результат авторизации.
//  ДополнительныеПараметры - Неопределено, Произвольный - Дополнительные параметры оповещения.
&НаКлиенте
Процедура ЗаполнитьДоступныеGTINНаКлиенте(РезультатАвторизации = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИнтерфейсИСМПОбщегоНазначенияКлиент.АвторизацияГИСМТВыполненаСОшибкой(РезультатАвторизации) Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновитьКлючСессии = ЗаполнитьДоступныеGTINНаСервере();
	
	Если ТребуетсяОбновитьКлючСессии
		И РезультатАвторизации = Неопределено Тогда
		
		ОповещениеПриАвторизации = Новый ОписаниеОповещения("ЗаполнитьДоступныеGTINНаКлиенте", ЭтотОбъект);
		
		ПараметрыАвторизации = ИнтерфейсИСМПОбщегоНазначенияКлиент.ПараметрыЗапросаДанных();
		ПараметрыАвторизации.Организация           = Объект.Организация;
		ПараметрыАвторизации.ОповещениеОЗавершении = ОповещениеПриАвторизации;
		ПараметрыАвторизации.Параметры             = Объект.ВидПродукции;
		
		ИнтерфейсИСМПОбщегоНазначенияКлиент.ВыполнитьАвторизациюГИСМТ(ПараметрыАвторизации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступныеGTINНаСервере()
	
	ТребуетсяОбновитьКлючСессии = Ложь;
	ДанныеДоступныхGTIN = Документы.ЗаказНаЭмиссиюКодовМаркировкиСУЗ.ДанныеДоступныхGTIN(Объект, Истина, Истина);
	
	Если ДанныеДоступныхGTIN.ТребуетсяОбновлениеКлючаСессии Тогда
		ТребуетсяОбновитьКлючСессии = Истина;
		Возврат ТребуетсяОбновитьКлючСессии;
	КонецЕсли;
	
	Если ДанныеДоступныхGTIN.ПроверяемыеGTIN.Количество() > 0 Тогда
		
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокумента.GTIN)
				Или (ЭтоМаркировкаОстатков И Не СтрокаДокумента.ПолноеОписаниеОстатков) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиТаблицы = ДанныеДоступныхGTIN.ТаблицаПроверки.НайтиСтроки(
				Новый Структура(
					"Номенклатура, Характеристика,Шаблон",
					СтрокаДокумента.Номенклатура,
					СтрокаДокумента.Характеристика,
					СтрокаДокумента.Шаблон));
			
			Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
				
				Если Не СтрокаТаблицы.ЕстьGTIN Тогда
					СтрокаДокумента.ТребуетсяГенерацияGTIN = Истина;
				ИначеЕсли СтрокаТаблицы.ДоступныеGTIN.Количество() И Не ЗначениеЗаполнено(СтрокаДокумента.GTIN) Тогда
					СтрокаДокумента.GTIN = СтрокаТаблицы.ДоступныеGTIN[0];
					ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(ЭтотОбъект, СтрокаДокумента);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДокумента.GTIN)
					И ДанныеДоступныхGTIN.ДанныеПродукцииПоШтрихкодуEAN.Получить(СтрокаДокумента.GTIN) = Неопределено Тогда
					СтрокаДокумента.ТребуетсяГенерацияGTIN = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЭтоМаркировкаОстатков Тогда
	
		РезультатЗаполнения = ИнтеграцияИСМПСлужебный.ЗаполнитьGTINМаркировкиОстатков(
			Объект.Товары, Объект.Организация, Объект.ВидПродукции);
		
		Если РезультатЗаполнения.ТребуетсяОбновлениеКлючаСессии Тогда
			ТребуетсяОбновитьКлючСессии = Истина;
		ИначеЕсли ЗначениеЗаполнено(РезультатЗаполнения.ТекстОшибки) Тогда
			ОбщегоНазначения.СообщитьПользователю(РезультатЗаполнения.ТекстОшибки);
		КонецЕсли;
		
		ОбновитьДанныеФормыМаркировкаОстатковСервер();
	
	ИначеЕсли Объект.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха Тогда
		ЗаполнитьТаблицуПредставленийНоменклатуры();
	КонецЕсли;
	
	Возврат ТребуетсяОбновитьКлючСессии;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьФорматРедактированияСрокГодности()

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ИспользоватьСрокГодности = Ложь;
	ФорматДаты = "";

	Если Не ИспользоватьСрокГодности И ЗначениеЗаполнено(ТекущиеДанные.СрокГодности) Тогда
		ТекущиеДанные.СрокГодности = Неопределено;
	КонецЕсли;

	Если Элементы.ТоварыСрокГодности.ФорматРедактирования <> ФорматДаты Тогда
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииШаблонаВТабличнойЧасти(ТекущиеДанные)

	ТекущиеДанные.GTIN = "";

	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элементы.ТоварыШаблон.Имя);

	ОпределитьФорматРедактированияСрокГодности();

КонецПроцедуры

&НаКлиенте
Процедура Включить1СНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьСервисРаботаСНоменклатурой() Тогда
		ОтображатьКомандуВключить1СНоменклатуру                                        = Ложь;
		ОтображатьКомандуТоварыПодготовитьПередатьСведенияОТоварахВНациональныйКаталог = Истина;
		ОбновитьВидимостьДоступностьЭлементовФормы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьСервисРаботаСНоменклатурой()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСервисРаботаСНоменклатурой");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПоместитьДанныеДляПередачиСведенийОТоварахВНациональныйКаталог(Данные, УникальныйИдентификатор)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Результат.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	Для Каждого Строка Из Данные Цикл
		СтрокаРезультата = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, Строка);
	КонецЦикла;
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьПередатьСведенияОТоварахВНациональныйКаталогЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("АдресТоваровВХранилище") Тогда
		УдалитьИзВременногоХранилища(ДополнительныеПараметры.АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоРасширеннаяМаркировкаОстатковЛегкойПромышленности(Форма)
	
	Если Форма.ЭтоМаркировкаОстатков
		И Форма.Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность")
		И Не Форма.Объект.Ссылка.Пустая() Тогда
		
		Если Форма.Объект.БезУчетаНоменклатуры
			Или Форма.Объект.ВвезенПослеДатыОбязательнойМаркировки
			Или Форма.Объект.ПриобретенПроизведенПослеДатыОбязательнойМаркировки Тогда
				Возврат Истина;
		КонецЕсли;
		
		Для Каждого Строка Из Форма.Объект.Товары Цикл
			Если ЗначениеЗаполнено(Строка.КодТНВЭД)
				Или ЗначениеЗаполнено(Строка.ЦелевойПол)
				Или ЗначениеЗаполнено(Строка.ВозрастнаяКатегория)
				Или ЗначениеЗаполнено(Строка.СпособВводаВОборот) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьЗаполненныеЗначенияТоварногоЗнака(Товары)
	
	Для Каждого Строка Из Товары Цикл
		Если ЗначениеЗаполнено(Строка.ТоварныйЗнак) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			Возврат;
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
			
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок) Тогда
		ПараметрыОткрытия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
		ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок;
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяУточнениеДанных Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУточненияДанныхТСД", ЭтотОбъект);
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОткрытьФормуУточненияДанныхТСД(ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	ЗагрузкаДанныхТСД = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(
		ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования, Ложь);
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЗагрузкаШтрихкодовПрервана(ЗагрузкаДанныхТСД) Тогда
		Возврат;
	КонецЕсли;
	
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУточненияДанныхТСД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения);
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения)
	
	ГрупповаяОбработкаШтрихкодовИС.ОбработатьШтрихкоды(ЭтотОбъект, ЗагрузкаДанныхТСД);
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения)
	
	Модифицированность = Истина;
	ПослеОбработкиШтрихкодовСервер(ЗагрузкаДанныхТСД, КэшированныеЗначения);
	ЗагрузкаДанныхТСД.ДобавленныеСтроки = Новый Массив;
	ЗагрузкаДанныхТСД.ИзмененныеСтроки  = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода(,,"");
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения)
	
	ИзмененныеСтроки  = РезультатОбработкиШтрихкода.ИзмененныеСтроки;
	ДобавленныеСтроки = РезультатОбработкиШтрихкода.ДобавленныеСтроки;
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавленныеСтрокиГрупповыхУпаковок = Новый Массив;

	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		
		Если Не ЗначениеЗаполнено(ДобавленнаяСтрока.ИдентификаторСтроки) Тогда
			ДобавленнаяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;

		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, Неопределено, Неопределено);
		
		Если ИспользуютсяГрупповыеУпаковки И ШаблонЕстьВСписке(ДобавленнаяСтрока.Шаблон, ШаблоныГрупповойУпаковки) Тогда
			ДобавленныеСтрокиГрупповыхУпаковок.Добавить(ДобавленнаяСтрока.ПолучитьИдентификатор());
		КонецЕсли;

	КонецЦикла;

	Если ДобавленныеСтрокиГрупповыхУпаковок.Количество() > 0 Тогда
		РезультатОбработкиШтрихкода.Вставить("ДобавленныеСтрокиГрупповыхУпаковок", ДобавленныеСтрокиГрупповыхУпаковок);
	КонецЕсли;

	ИзмененныеСтрокиГрупповыхУпаковок = Новый Массив;

	Для Каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект, ИзмененнаяСтрока, Неопределено, Неопределено);
		
		Если ЗначениеЗаполнено(ИзмененнаяСтрока.ИдентификаторСтрокиВладельца) Тогда
			Если ИспользуютсяНаборы
				И ШаблонЕстьВСписке(ИзмененнаяСтрока.Шаблон, ШаблоныНабора) Тогда
				ПересчитатьКоличествоСоставляющихНабора(ИзмененнаяСтрока, КэшированныеЗначения);
			ИначеЕсли ИспользуютсяГрупповыеУпаковки
				И ШаблонЕстьВСписке(ИзмененнаяСтрока.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				ИзмененныеСтрокиГрупповыхУпаковок.Добавить(ИзмененнаяСтрока);
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	Если ИзмененныеСтрокиГрупповыхУпаковок.Количество() > 0 Тогда
		ПересчитатьКоличествоСоставляющихГрупповойУпаковки(ЭтотОбъект, ИзмененныеСтрокиГрупповыхУпаковок);
	КонецЕсли;

	ОбновитьСтатусУказанияСерийныхНомеров(ЭтотОбъект);
	
	Если ЭтоМаркировкаОстатков Тогда
		ОбновитьСтатусИСМП();
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект,, Объект.ВидПродукции);
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ОбработатьДобавленныеГрупповыеУпаковки(РезультатОбработки);

	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область Остатки

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Если ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеGTINНаОстатки")
		Или ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗапроситеКодыМаркировки")
		Или ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеПолучениеКодовМаркировки")
		Или ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение(
			"Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ЗакройтеЗаказНаЭмиссию") Тогда
		Прочитать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗаполнениеПараметровОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	
	Для Каждого СтрокаСписка Из ВыделенныеСтроки Цикл
		
		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(СтрокаСписка);
		
		Для Каждого КлючИЗначение Из Результат Цикл
			СтрокаТовары[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		
		СтрокаТовары.GTIN = "";
		
		ТоварыНоменклатураХарактеристикаПриИзмененииСервер(Элементы.ЗаполнитьПараметрыОписанияОстатков.Имя,, СтрокаСписка);
		
	КонецЦикла;
	
	ОбновитьДанныеФормыМаркировкаОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьGTIN()
	ОчиститьGTINВТоварах(ЭтотОбъект);
	ОбновитьСтатусИСМП();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьОчиститьШаблонКодаМаркировки()
	
	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 0);
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ДоступныеШаблоны.НайтиПоЗначению(СтрокаТовары.Шаблон) = Неопределено Тогда
			Если ДоступныеШаблоны.Количество() > 0 Тогда
				СтрокаТовары.Шаблон = ДоступныеШаблоны[0].Значение;
			Иначе
				СтрокаТовары.Шаблон = ПредопределенноеЗначение("Перечисление.ШаблоныКодовМаркировкиСУЗ.ПустаяСсылка");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьФлагЭтоМаркировкаОстатков(Форма)
	
	Форма.ЭтоМаркировкаОстатков =
		Форма.Объект.СпособВводаВОборот = ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков")
		И Форма.Объект.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОчиститьРеквизитыУпрощенногоОписанияОстатков(Форма, ТекущиеДанные)
	
	Если Не Форма.ЭтоМаркировкаОстатков Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПолноеОписаниеОстатков Тогда
		ТекущиеДанные.КодТНВЭД            = Неопределено;
		ТекущиеДанные.Наименование        = Неопределено;
		ТекущиеДанные.ЦелевойПол          = Неопределено;
		ТекущиеДанные.СпособВводаВОборот  = Неопределено;
		ТекущиеДанные.Модель              = Неопределено;
		ТекущиеДанные.ТоварныйЗнак        = Неопределено;
		ТекущиеДанные.ВозрастнаяКатегория = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССервисПровайдером

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОчиститьСервисПровайдера(Форма)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.СервисПровайдер) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Или Не ЗначениеЗаполнено(Объект.СпособВводаВОборот) Тогда
		Объект.СервисПровайдер = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если Не ПроверкаВыбранногоСервисПровайдера(Объект.СервисПровайдер, Объект.ВидПродукции, Объект.СпособВводаВОборот) Тогда
		Объект.СервисПровайдер = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаВыбранногоСервисПровайдера(СервисПровайдер, ВидПродукции, СпособВводаВОборот, ТекстОшибки = Неопределено)
	
	Результат = Истина;
	МассивОшибок = Новый Массив;
	ФормироватьТекстОшибки = ТекстОшибки <> Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СервисПровайдер", СервисПровайдер);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СервисПровайдерыСУЗ.ВидСервисПровайдера,
	|	ВЫБОР
	|		КОГДА СервисПровайдерыСУЗ.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.Россия)
	|			ТОГДА СервисПровайдерыСУЗ.Страна
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
	|	КОНЕЦ КАК Страна
	|ИЗ
	|	Справочник.СервисПровайдерыСУЗ КАК СервисПровайдерыСУЗ
	|ГДЕ
	|	СервисПровайдерыСУЗ.Ссылка = &СервисПровайдер
	|;
	|
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СервисПровайдерыСУЗВидыПродукции.ВидПродукции КАК ВидПродукции
	|ИЗ
	|	Справочник.СервисПровайдерыСУЗ.ВидыПродукции КАК СервисПровайдерыСУЗВидыПродукции
	|ГДЕ
	|	СервисПровайдерыСУЗВидыПродукции.Ссылка = &СервисПровайдер
	|УПОРЯДОЧИТЬ ПО
	|	СервисПровайдерыСУЗВидыПродукции.НомерСтроки";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// проверим соответствие по способу ввода в оборот
	СоответствиеДоступныеСпособыВводаВОборот = ДоступныеСпособыВводаВОборотПоВидуСервисПровайдера();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Выборка.Следующий();
	
	ДоступныеСпособыВводаВОборот = СоответствиеДоступныеСпособыВводаВОборот[Выборка.ВидСервисПровайдера][Выборка.Страна];
	
	Если ДоступныеСпособыВводаВОборот.Найти(СпособВводаВОборот) = Неопределено Тогда
		
		Результат = Ложь;
		
		Если ФормироватьТекстОшибки Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = ' Недоступен способ ввода в оборот <%1>'"), СпособВводаВОборот);
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = ' доступные способы ввода в оборот:'");
			
			Для Каждого ДоступныйСпособВводаВоборот Из ДоступныеСпособыВводаВОборот Цикл
				ТекстСообщения = ТекстСообщения + Символы.ПС + "     " + ДоступныйСпособВводаВоборот;
			КонецЦикла;
			
			МассивОшибок.Добавить(ТекстСообщения);
			
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	// проверим соответствие по виду продукции
	ДоступныеВидыПродукции = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("ВидПродукции");
	
	Если ДоступныеВидыПродукции.Найти(ВидПродукции) = Неопределено Тогда
		
		Результат = Ложь;
		
		Если ФормироватьТекстОшибки Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = ' Недоступен вид продукции <%1>'"), ВидПродукции);
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = ' доступные виды продукции:'");
			
			Счетчик = 0;
			КоличествоВыводимыхСтрок = 3;
			КоличествоДоступныхВидовПродукции = ДоступныеВидыПродукции.Количество();
			
			Если КоличествоДоступныхВидовПродукции = КоличествоВыводимыхСтрок + 1 Тогда
				КоличествоВыводимыхСтрок = КоличествоВыводимыхСтрок + 1;
			КонецЕсли;
			
			Для Каждого ДоступныйВидПродукции Из ДоступныеВидыПродукции Цикл
				
				Если Счетчик = КоличествоВыводимыхСтрок Тогда
					ТекстСообщения = ТекстСообщения + Символы.ПС + 
						СтрШаблон(НСтр("ru = '     (+ еще %1) - можно просмотреть в карточке сервис-провайдера'"),
							КоличествоДоступныхВидовПродукции - Счетчик);
					Прервать;
				КонецЕсли;
				
				ТекстСообщения = ТекстСообщения + Символы.ПС + "     " + ДоступныйВидПродукции;
				
				Счетчик = Счетчик + 1;
				
			КонецЦикла;
			
			МассивОшибок.Добавить(ТекстСообщения);
			
		Иначе
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивОшибок.Количество() > 0 Тогда
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Выбор сервис-провайдера <%1> невозможен по причине:'"), СервисПровайдер);
		
		Для Каждого Ошибка Из МассивОшибок Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + Ошибка;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// Возвращает соответствие доступных способов ввода в оборот виду сервис-провайдера
//
// Возвращаемое значение:
//  Соответствие - виды сервис провайдеров с указанием доступных способов ввода в оборот:
//   * Ключ - ПеречислениеСсылка.ВидыСервисПровайдеровСУЗ.
//   * Значение - Соответствие:
//    ** Ключ - СправочникСсылка.СтраныМира.Россия
//            - СправочникСсылка.СтраныМира.ПустаяСсылка
//    ** Значение - Массив - ПеречислениеСсылка.СпособыВводаВОборотСУЗ.
//
&НаКлиентеНаСервереБезКонтекста
Функция ДоступныеСпособыВводаВОборотПоВидуСервисПровайдера()
	
	Результат = Новый Соответствие();
	
	Россия = ПредопределенноеЗначение("Справочник.СтраныМира.Россия");
	Прочее = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	
	Ключ = ПредопределенноеЗначение("Перечисление.ВидыСервисПровайдеровСУЗ.ЦЭМ");
	Значение = Новый Соответствие();
	Значение.Вставить(Россия, Новый Массив);
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков"));
	Значение.Вставить(Прочее, Новый Массив);
	Результат.Вставить(Ключ, Значение);
	
	Ключ = ПредопределенноеЗначение("Перечисление.ВидыСервисПровайдеровСУЗ.КонтрактноеПроизводство");
	Значение = Новый Соответствие();
	Значение.Вставить(Россия, Новый Массив);
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков"));
	Значение.Вставить(Прочее, Новый Массив);
	Значение[Прочее].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля"));
	Значение[Прочее].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков"));
	Результат.Вставить(Ключ, Значение);
	
	Ключ = ПредопределенноеЗначение("Перечисление.ВидыСервисПровайдеровСУЗ.ЛогистическийСклад");
	Значение = Новый Соответствие();
	Значение.Вставить(Россия, Новый Массив);
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Производство"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка"));
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков"));
	Значение.Вставить(Прочее, Новый Массив);
	Значение[Прочее].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Импорт"));
	Значение[Прочее].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.ТрансграничнаяТорговля"));
	Значение[Прочее].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.МаркировкаОстатков"));
	Результат.Вставить(Ключ, Значение);
	
	Ключ = ПредопределенноеЗначение("Перечисление.ВидыСервисПровайдеровСУЗ.КомиссионнаяПлощадка");
	Значение = Новый Соответствие();
	Значение.Вставить(Россия, Новый Массив);
	Значение[Россия].Добавить(ПредопределенноеЗначение("Перечисление.СпособыВводаВОборотСУЗ.Перемаркировка"));
	Значение.Вставить(Прочее, Новый Массив);
	Результат.Вставить(Ключ, Значение);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область НаборыИГрупповыеУпаковки

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонЕстьВСписке(Шаблон, СписокШаблонов)
	
	Возврат СписокШаблонов.НайтиПоЗначению(Шаблон) <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПризнакНабораИГрупповойУпаковки(Форма, МассивСтрок)

	Если Не Форма.ИспользуютсяНаборы И Не Форма.ИспользуютсяГрупповыеУпаковки Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторыСтрокВладельцев = Новый Соответствие;

	Для Каждого Строка Из МассивСтрок Цикл
		Если ЗначениеЗаполнено(Строка.ИдентификаторСтрокиВладельца) Тогда
			СтрокаВладелец = ИдентификаторыСтрокВладельцев[Строка.ИдентификаторСтрокиВладельца];
			Если СтрокаВладелец = Неопределено Тогда
				Если Строка.ИдентификаторСтрокиВладельца = Строка.ИдентификаторСтроки Тогда
					СтрокаВладелец = Строка;
				Иначе
					СтрокаВладелец = ПолучитьСтрокуВладельца(Форма, Строка.ИдентификаторСтрокиВладельца);
				КонецЕсли;
				Если ШаблонЕстьВСписке(СтрокаВладелец.Шаблон, Форма.ШаблоныНабора) Тогда
					СтрокаВладелец.ЭтоНабор = Истина;
				ИначеЕсли ШаблонЕстьВСписке(СтрокаВладелец.Шаблон, Форма.ШаблоныГрупповойУпаковки) Тогда
					СтрокаВладелец.ЭтоГрупповаяУпаковка = Истина;
				КонецЕсли;
				ИдентификаторыСтрокВладельцев.Вставить(СтрокаВладелец.ИдентификаторСтрокиВладельца, СтрокаВладелец);
			КонецЕсли;
			Если Строка <> СтрокаВладелец Тогда
				Строка.ЭтоГрупповаяУпаковка = СтрокаВладелец.ЭтоГрупповаяУпаковка;
				Строка.ЭтоНабор             = СтрокаВладелец.ЭтоНабор;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция НаборСодержитКомплектующие(ДанныеСтроки)

	ПоляДанных = "НомерСтроки,ИдентификаторСтроки,Номенклатура,Характеристика,GTIN,Упаковка,КоличествоУпаковок,Количество";
	СтрокаДанных = Новый Структура(ПоляДанных);

	ЗаполнитьЗначенияСвойств(СтрокаДанных, ДанныеСтроки);

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(СтрокаДанных);

	Возврат ВНаборахЕстьКомплектующие(МассивСтрок);

КонецФункции

&НаСервереБезКонтекста
Функция ВНаборахЕстьКомплектующие(МассивСтрок)

	Возврат ПолучитьКомплектующиеНаборов(МассивСтрок).Количество() > 0;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомплектующиеНаборов(МассивСтрок)

	Возврат ИнтеграцияИСМП.КомплектующиеНаборов(МассивСтрок);

КонецФункции

&НаСервере
Процедура ЗаполнитьСоставляющиеНаборов(МассивСтрок, КэшированныеЗначения, ДобавленныеСтроки)

	КомплектующиеНаборов = ПолучитьКомплектующиеНаборов(МассивСтрок);
	Если КомплектующиеНаборов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 0);
	Если ДоступныеШаблоны.Количество() = 1 Тогда
		ШаблонПотребительскойУпаковки = ДоступныеШаблоны[0].Значение;
	Иначе
		ШаблонПотребительскойУпаковки = Неопределено;
	КонецЕсли;

	ПараметрыУказанияСерий = Неопределено;
	НомерСтрокиНабора      = 0;
	НомерСтроки            = 0;
	Для Каждого КомплектующаяНабора Из КомплектующиеНаборов Цикл

		Если КомплектующаяНабора.НомерСтрокиНабора <> НомерСтрокиНабора Тогда
			НомерСтрокиНабора = КомплектующаяНабора.НомерСтрокиНабора;
			НомерСтроки       = НомерСтрокиНабора;
			ТекущаяСтрока = Объект.Товары[НомерСтроки - 1];
			ИдентификаторСтрокиВладельца = ТекущаяСтрока.ИдентификаторСтроки;
			ТекущаяСтрока.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
			ТекущаяСтрока.ЭтоНабор                     = Истина;
		КонецЕсли;

		ТекущаяСтрока = Объект.Товары.Вставить(НомерСтроки);
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, КомплектующаяНабора);
		ТекущаяСтрока.ИдентификаторСтрокиВладельца = ИдентификаторСтрокиВладельца;
		ТекущаяСтрока.ЭтоНабор = Истина;

		Если КомплектующаяНабора.Номенклатура = КомплектующаяНабора.НоменклатураНабора
			И КомплектующаяНабора.Характеристика = КомплектующаяНабора.ХарактеристикаНабора
			И ШаблонПотребительскойУпаковки <> Неопределено Тогда
			ТекущаяСтрока.Шаблон = ШаблонПотребительскойУпаковки;
		КонецЕсли;

		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);

		НомерСтроки = НомерСтроки + 1;

		ДобавленныеСтроки.Добавить(ТекущаяСтрока);

	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбработатьДобавленныеСтрокиТоваров(ДобавленныеСтроки, ДополнительныеПоляПоиска = "")

	ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамЗаказаНаЭмиссиюКодовМаркировкиСУЗ(
		ЭтотОбъект, ДобавленныеСтроки, ДополнительныеПоляПоиска);

	ЗаполнитьПустойGTINВСтроках(ДобавленныеСтроки);
	ПроверитьОчиститьВладельцаGTIN(ЭтотОбъект, ДобавленныеСтроки);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустойGTINВСтроках(МассивСтрок)

	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки",    ОбщегоНазначения.ОписаниеТипаЧисло(5));

	Для Каждого СтрокаТовары Из МассивСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.GTIN)
			И ЗначениеЗаполнено(СтрокаТовары.Шаблон)
			И (СтрокаТовары.ХарактеристикиИспользуются
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
			И ЗначениеЗаполнено(СтрокаТовары.Характеристика)
			Или Не СтрокаТовары.ХарактеристикиИспользуются
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура)) Тогда
			СтрокаТаблицы = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовары);
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивGTIN       = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;

	ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(ТаблицаНоменклатуры, МассивGTIN, СоответствиеGTIN, ЭтоМаркировкаОстатков);

	Если МассивGTIN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ОписаниеGTIN = РегистрыСведений.ОписаниеGTINИС.ПолучитьОписание(МассивGTIN);

	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл

		СтрокаТовары = Объект.Товары[СтрокаТаблицы.НомерСтроки - 1];

		МассивGTIN.Очистить();
		Для Каждого КлючИЗначение Из СоответствиеGTIN Цикл
			Если СтрокаТовары.Номенклатура = КлючИЗначение.Значение.Номенклатура
				И СтрокаТовары.Характеристика = КлючИЗначение.Значение.Характеристика Тогда
				МассивGTIN.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;

		Если МассивGTIN.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныГрупповойУпаковки) Тогда
			ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая;
		ИначеЕсли ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныНабора) Тогда
			ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор;
		Иначе
			ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская;
		КонецЕсли;

		МассивПодходящихGTIN = Новый Массив;

		Для Каждого GTIN Из МассивGTIN Цикл

			ДанныеОписания = ОписаниеGTIN[GTIN];
			Если ДанныеОписания = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			Если ДанныеОписания.ВидУпаковки = ВидУпаковки Тогда
				МассивПодходящихGTIN.Добавить(GTIN);
			КонецЕсли;

		КонецЦикла;

		Если МассивПодходящихGTIN.Количество() = 1 Тогда
			СтрокаТовары.GTIN = МассивПодходящихGTIN[0];
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПерезаполнениеНаборовИГрупповыхУпаковок(МассивСтрок)

	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивСтрокДляУдаления = Новый Массив;
	МассивСтрокДляПоиска   = Новый Массив;
	СтрокиДляОбработки     = Новый Массив;

	ЭтоСтрокиКоллекции = ТипЗнч(МассивСтрок[0]) = Тип("ДанныеФормыЭлементКоллекции");

	Для Каждого Строка Из МассивСтрок Цикл
		Если ЭтоСтрокиКоллекции Тогда
			СтрокаТовары = Строка;
		Иначе
			СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца)
			И МассивСтрокДляПоиска.Найти(СтрокаТовары.ИдентификаторСтрокиВладельца) = Неопределено
			Или ИспользуютсяНаборы И ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныНабора)
			Или ИспользуютсяГрупповыеУпаковки И ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныГрупповойУпаковки) Тогда

			Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца) Тогда
				МассивСтрокДляПоиска.Добавить(СтрокаТовары.ИдентификаторСтрокиВладельца);
				ДобавитьСтрокиПоВладельцу(ЭтотОбъект, МассивСтрокДляУдаления, СтрокаТовары.ИдентификаторСтрокиВладельца);
			КонецЕсли;

			Если ИспользуютсяНаборы И ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныНабора)
				Или ИспользуютсяГрупповыеУпаковки И ШаблонЕстьВСписке(СтрокаТовары.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				СтрокаТовары.ИдентификаторСтрокиВладельца = Неопределено;
				СтрокаТовары.ЭтоГрупповаяУпаковка         = Ложь;
				СтрокаТовары.ЭтоНабор                     = Ложь;
				Если СтрокиДляОбработки.Найти(СтрокаТовары) = Неопределено Тогда
					СтрокиДляОбработки.Добавить(СтрокаТовары);
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца) Тогда
				СтрокаВладелец = ПолучитьСтрокуВладельца(ЭтотОбъект, СтрокаТовары.ИдентификаторСтрокиВладельца);
				Если СтрокаВладелец <> Неопределено Тогда
					СтрокаВладелец.ИдентификаторСтрокиВладельца = Неопределено;
					СтрокаВладелец.ЭтоГрупповаяУпаковка         = Ложь;
					СтрокаВладелец.ЭтоНабор                     = Ложь;
					СтрокиДляОбработки.Добавить(СтрокаВладелец);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	Если СтрокиДляОбработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Строка Из МассивСтрокДляУдаления Цикл
		ОчиститьСерийныеНомераПоИдентификатору(ЭтотОбъект, Строка.ИдентификаторСтроки);
		Объект.Товары.Удалить(Строка);
	КонецЦикла;

	СтрокиДляОбработкиНаборы            = Новый Массив;
	СтрокиДляОбработкиГрупповыеУпаковки = Новый Массив;

	Для Каждого Строка Из СтрокиДляОбработки Цикл
		Если Не ЗначениеЗаполнено(Строка.ИдентификаторСтроки) Тогда
			Строка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
		КонецЕсли;
		Если ШаблонЕстьВСписке(Строка.Шаблон, ШаблоныНабора) Тогда
			СтрокиДляОбработкиНаборы.Добавить(Строка.ПолучитьИдентификатор());
		ИначеЕсли ШаблонЕстьВСписке(Строка.Шаблон, ШаблоныГрупповойУпаковки) Тогда
			СтрокиДляОбработкиГрупповыеУпаковки.Добавить(Строка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;

	Если СтрокиДляОбработкиНаборы.Количество() > 0 Тогда
		ПерезаполнитьНаборы(СтрокиДляОбработкиНаборы, КэшированныеЗначения);
	КонецЕсли;

	Если СтрокиДляОбработкиГрупповыеУпаковки.Количество() > 0 Тогда
		ДобавитьСоставляющиеГрупповойУпаковки(СтрокиДляОбработкиГрупповыеУпаковки);
		МассивСтрокБезПотребительскихУпаковок = ПересчитатьКоличествоСоставляющихГрупповойУпаковки(ЭтотОбъект,
			ПолучитьМассивСтрокПоИдентификаторам(СтрокиДляОбработкиГрупповыеУпаковки, Объект.Товары));
		Если МассивСтрокБезПотребительскихУпаковок.Количество() > 0 Тогда
			ЗапроситьУточнениеКоэффициентовУпаковок(МассивСтрокБезПотребительскихУпаковок);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьНаборы(МассивСтрок, КэшированныеЗначения)

	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(МассивСтрок[0]) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		МассивСтрокДляОбработки = МассивСтрок;
	Иначе
		МассивСтрокДляОбработки = ПолучитьМассивСтрокПоИдентификаторам(МассивСтрок, Объект.Товары);
	КонецЕсли;

	ДобавленныеСтроки = Новый Массив;

	ЗаполнитьСоставляющиеНаборов(МассивСтрокДляОбработки, КэшированныеЗначения, ДобавленныеСтроки);

	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ОбработатьДобавленныеСтрокиТоваров(ДобавленныеСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтрокПоИдентификаторам(МассивИдентификаторов, ТабличнаяЧасть)

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из МассивИдентификаторов Цикл
		МассивСтрок.Добавить(ТабличнаяЧасть.НайтиПоИдентификатору(Строка));
	КонецЦикла;

	Возврат МассивСтрок;

КонецФункции

&НаСервере
Процедура ПересчитатьКоличествоСоставляющихНабора(ВходящиеДанные, КэшированныеЗначения)

	Если ТипЗнч(ВходящиеДанные) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ТекущиеДанные = ВходящиеДанные;
	Иначе
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ВходящиеДанные);
	КонецЕсли;

	СтрокиНабора = Новый Массив;
	ДобавитьСтрокиПоВладельцу(ЭтотОбъект, СтрокиНабора, ТекущиеДанные.ИдентификаторСтрокиВладельца);

	Если СтрокиНабора.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ТекущиеДанные);
	КомплектующиеНабора = ПолучитьКомплектующиеНаборов(МассивСтрок);

	ПараметрыПоиска = Новый Структура("Номенклатура,Характеристика,Упаковка");

	Для Каждого СтрокаНабора Из СтрокиНабора Цикл

		ЗаполнитьЗначенияСвойств(ПараметрыПоиска, СтрокаНабора);
		НайденныеСтроки = КомплектующиеНабора.НайтиСтроки(ПараметрыПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаНабора.КоличествоУпаковок = 0;
		Иначе
			СтрокаНабора.КоличествоУпаковок = Цел(НайденныеСтроки[0].КоличествоУпаковок);
		КонецЕсли;

		СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(ЭтотОбъект, СтрокаНабора, КэшированныеЗначения);

		ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(ЭтотОбъект, СтрокаНабора);

	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПересчитатьКоличествоСоставляющихГрупповойУпаковки(Форма, ВходяшиеДанные)

	Если ТипЗнч(ВходяшиеДанные) = Тип("Массив") Тогда
		МассивСтрок = ВходяшиеДанные;
	Иначе
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ВходяшиеДанные);
	КонецЕсли;

	СтрокиДляОбработки = Новый Соответствие;
	МассивСтрокБезПотребительскихУпаковок = Новый Массив;

	Данные = Новый Соответствие;
	Для Каждого СтрокаТовары Из МассивСтрок Цикл

		Если СтрокаТовары.ХарактеристикиИспользуются Тогда
			НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
				И ЗначениеЗаполнено(СтрокаТовары.Характеристика));
		Иначе
			НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(СтрокаТовары.Номенклатура);
		КонецЕсли;

		Если Не НоменклатураХарактеристикаУказана
			Или Не ЗначениеЗаполнено(СтрокаТовары.GTIN) Тогда
			Продолжить;
		КонецЕсли;

		СтрокиГрупповойУпаковки = Новый Массив;
		ДобавитьСтрокиПоВладельцу(Форма, СтрокиГрупповойУпаковки, СтрокаТовары.ИдентификаторСтрокиВладельца);

		Если СтрокиГрупповойУпаковки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("Номенклатура",                      СтрокаТовары.Номенклатура);
		СтруктураДанных.Вставить("Характеристика",                    СтрокаТовары.Характеристика);
		СтруктураДанных.Вставить("КоличествоПотребительскихУпаковок", 1);

		Данные.Вставить(СтрокаТовары.GTIN, СтруктураДанных);

		СтрокиДляОбработки.Вставить(СтрокаТовары.ПолучитьИдентификатор(), СтрокиГрупповойУпаковки);

	КонецЦикла;

	Если СтрокиДляОбработки.Количество() = 0 Тогда
		Возврат МассивСтрокБезПотребительскихУпаковок;
	КонецЕсли;

	ПолучитьКоличествоПотребительскихУпаковокВГрупповойУпаковкеПоGTIN(Данные);

	Для Каждого КлючИЗначение Из СтрокиДляОбработки Цикл

		СтрокаТовары = Форма.Объект.Товары.НайтиПоИдентификатору(КлючИЗначение.Ключ);

		КоличествоПотребительскихУпаковок = Данные[СтрокаТовары.GTIN].КоличествоПотребительскихУпаковок;
		Если КоличествоПотребительскихУпаковок = 1 Тогда
			КоличествоПотребительскихУпаковок = 0;
		КонецЕсли;

		Для Каждого СтрокаГрупповойУпаковки Из КлючИЗначение.Значение Цикл
			СтрокаГрупповойУпаковки.Количество         = Цел(КоличествоПотребительскихУпаковок * СтрокаТовары.Количество);
			СтрокаГрупповойУпаковки.КоличествоУпаковок = Цел(КоличествоПотребительскихУпаковок * СтрокаТовары.КоличествоУпаковок);
		КонецЦикла;

		Если КоличествоПотребительскихУпаковок = 0 Тогда
			МассивСтрокБезПотребительскихУпаковок.Добавить(СтрокаТовары);
		КонецЕсли;

	КонецЦикла;

	Возврат МассивСтрокБезПотребительскихУпаковок;

КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеШаблонаНабораИГрупповойУпаковки(ДанныеСтроки)

	Если ДанныеСтроки.Шаблон <> ШаблонДоИзменения
		И ((ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки) Или ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныНабора))
			Или (ШаблонЕстьВСписке(ШаблонДоИзменения, ШаблоныГрупповойУпаковки) Или ШаблонЕстьВСписке(ШаблонДоИзменения, ШаблоныНабора))
			И ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтрокиВладельца)) Тогда

		Если ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки) И ШаблонЕстьВСписке(ШаблонДоИзменения, ШаблоныНабора)
			Или ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныНабора) И ШаблонЕстьВСписке(ШаблонДоИзменения, ШаблоныГрупповойУпаковки) Тогда

			Если Не ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтроки) Тогда
				ДанныеСтроки.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Перезаполнить",           НСтр("ru = 'Перезаполнить'"));
			Кнопки.Добавить("ОтменаПриПерезаполнении", НСтр("ru = 'Отмена'"));

			Если ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				ТекстВопроса = НСтр("ru = 'Перезаполнить составляющие набора, составляющими групповой упаковки'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Перезаполнить составляющие групповой упаковки, составляющими набора'");
			КонецЕсли;

			ТекстВопроса = СтрШаблон(НСтр("ru = '%1 %2?'"),
				ТекстВопроса, Строка(ДанныеСтроки.Номенклатура));

			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ДанныеСтроки);

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("МассивСтрок", МассивСтрок);

			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросДобавлениеСоставляющихНабораИГрупповойУпаковкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);


		ИначеЕсли ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки) Или ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныНабора) Тогда

			ПриИзмененииШаблонаВТабличнойЧасти(ДанныеСтроки);

			Если Не ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтроки) Тогда
				ДанныеСтроки.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			КонецЕсли;

			Если ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныНабора)
				И Не НаборСодержитКомплектующие(ДанныеСтроки) Тогда
				Возврат;
			КонецЕсли;

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Добавить", НСтр("ru = 'Добавить'"));
			Кнопки.Добавить("Отмена",   НСтр("ru = 'Не добавлять'"));

			Если ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				ТекстВопроса = НСтр("ru = 'Добавить составляющие групповой упаковки'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Добавить составляющие набора'");
			КонецЕсли;

			ТекстВопроса = СтрШаблон(НСтр("ru = '%1 %2?'"),
				ТекстВопроса, Строка(ДанныеСтроки.Номенклатура));

			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ДанныеСтроки);

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("МассивСтрок", МассивСтрок);

			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросДобавлениеСоставляющихНабораИГрупповойУпаковкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		Иначе

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("УдалитьСтроку", НСтр("ru = 'Удалить'"));
			Кнопки.Добавить("НеУдалять",     НСтр("ru = 'Не удалять'"));
			Кнопки.Добавить("Отмена",        НСтр("ru = 'Отмена'"));

			Если ШаблонЕстьВСписке(ДанныеСтроки.Шаблон, ШаблоныГрупповойУпаковки) Тогда
				ТекстВопроса = НСтр("ru = 'Удалить составляющие групповой упаковки'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Удалить составляющие набора'");
			КонецЕсли;

			ТекстВопроса = СтрШаблон(НСтр("ru = '%1 %2?'"),
				ТекстВопроса, Строка(ДанныеСтроки.Номенклатура));

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ДанныеСтроки", ДанныеСтроки);

			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ВопросИзменениеГрупповойУпаковкиНаПотребительскуюЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		КонецЕсли;

		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			Кнопки,,
			Кнопки[0].Значение,
			НСтр("ru = 'Изменение упаковки'"));

	Иначе

		ПриИзмененииШаблонаВТабличнойЧасти(ДанныеСтроки);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеГрупповойУпаковкиНаПотребительскуюЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;

	Если Результат = "Отмена" Тогда
		ДанныеСтроки.Шаблон = ШаблонДоИзменения;
		Возврат;
	КонецЕсли;

	ПриИзмененииШаблонаВТабличнойЧасти(ДанныеСтроки);

	ВыделенныеСтроки = Новый Массив;
	МассивСтрок      = Новый Массив;
	ДобавитьСтрокиПоВладельцу(ЭтотОбъект, МассивСтрок, ДанныеСтроки.ИдентификаторСтрокиВладельца);
	Для Каждого Строка Из МассивСтрок Цикл
		Строка.ИдентификаторСтрокиВладельца = Неопределено;
		Строка.ЭтоГрупповаяУпаковка         = Ложь;
		Строка.ЭтоНабор                     = Ложь;
		ВыделенныеСтроки.Добавить(Строка.ПолучитьИдентификатор());
	КонецЦикла;

	ДанныеСтроки.ИдентификаторСтрокиВладельца = Неопределено;
	ДанныеСтроки.ЭтоГрупповаяУпаковка         = Ложь;
	ДанныеСтроки.ЭтоНабор                     = Ложь;

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыделенныеСтроки", ВыделенныеСтроки);

	Если Результат = "НеУдалять" Тогда
		Возврат;
	КонецЕсли;

	ВопросУдалениеСтрокТоваровЗавершение(Результат, ДополнительныеПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавленныеГрупповыеУпаковки(РезультатОбработки)

	Если РезультатОбработки.Свойство("ДобавленныеСтрокиГрупповыхУпаковок")
		И РезультатОбработки.ДобавленныеСтрокиГрупповыхУпаковок.Количество() > 0 Тогда

		МассивСтрок = ПолучитьМассивСтрокПоИдентификаторам(
			РезультатОбработки.ДобавленныеСтрокиГрупповыхУпаковок, Объект.Товары);

		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("Добавить", НСтр("ru = 'Добавить'"));
		Кнопки.Добавить("Отмена",   НСтр("ru = 'Не добавлять'"));

		Если МассивСтрок.Количество() = 1 Тогда
			ТекстВопроса = СтрШаблон(
				НСтр("ru = 'Добавить составляющие групповой упаковки %1?'"),
					Строка(МассивСтрок[0].Номенклатура));
			ЗаголовокВопроса = НСтр("ru = 'Добавление групповой упаковки'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Добавить составляющие групповых упаковок?'");
			ЗаголовокВопроса = НСтр("ru = 'Добавление групповых упаковок'");
		КонецЕсли;

		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("МассивСтрок", МассивСтрок);

		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросДобавлениеСоставляющихНабораИГрупповойУпаковкиЗавершение", ЭтотОбъект, ДополнительныеПараметры);

		ПоказатьВопрос(
			ОписаниеОповещения,
			ТекстВопроса,
			Кнопки,,
			Кнопки[0].Значение,
			ЗаголовокВопроса);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВопросДобавлениеСоставляющихНабораИГрупповойУпаковкиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = "Отмена" Тогда
		Возврат;
	ИначеЕсли Результат = "ОтменаПриПерезаполнении" Тогда
		Если ДополнительныеПараметры.МассивСтрок.Количество() = 1 Тогда
			ДополнительныеПараметры.МассивСтрок[0].Шаблон = ШаблонДоИзменения;
		КонецЕсли;
		Возврат;
	ИначеЕсли Результат = "Перезаполнить"
		И ДополнительныеПараметры.МассивСтрок.Количество() = 1 Тогда
		ПриИзмененииШаблонаВТабличнойЧасти(ДополнительныеПараметры.МассивСтрок[0]);
	КонецЕсли;

	ВыполнитьПерезаполнениеНаборовИГрупповыхУпаковок(ДополнительныеПараметры.МассивСтрок);

КонецПроцедуры

&НаСервере
Процедура ДобавитьСоставляющиеГрупповойУпаковки(МассивСтрок)

	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДоступныеШаблоны = ИнтеграцияИСМПКлиентСервер.ШаблоныКодовПоВидуПродукции(Объект.ВидПродукции, 0);
	Если ДоступныеШаблоны.Количество() = 1 Тогда
		ШаблонПотребительскойУпаковки = ДоступныеШаблоны[0].Значение;
	Иначе
		ШаблонПотребительскойУпаковки = Неопределено;
	КонецЕсли;

	Для Каждого Строка из МассивСтрок Цикл

		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Строка);

		Если Не ЗначениеЗаполнено(ДанныеСтроки.ИдентификаторСтрокиВладельца) Тогда
			ДанныеСтроки.ИдентификаторСтрокиВладельца = ДанныеСтроки.ИдентификаторСтроки;
			ДанныеСтроки.ЭтоГрупповаяУпаковка         = Истина;
		КонецЕсли;

		НоваяСтрока = Объект.Товары.Вставить(ДанныеСтроки.НомерСтроки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,,
			"ИдентификаторСтроки,Шаблон,GTIN,КоличествоУпаковок,Количество");

		Если ШаблонПотребительскойУпаковки <> Неопределено Тогда
			НоваяСтрока.Шаблон = ШаблонПотребительскойУпаковки;
		КонецЕсли;

		ТоварыНоменклатураХарактеристикаПриИзмененииСервер(
			Элементы.ТоварыШаблон.Имя,,
			НоваяСтрока.ПолучитьИдентификатор());

	КонецЦикла;

	Элементы.Товары.ТекущаяСтрока = ДанныеСтроки.ПолучитьИдентификатор();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокиПоВладельцу(Форма, МассивСтрок, ИдентификаторСтрокиВладельца, ДобавлятьВладельца = Ложь)

	Если Не ЗначениеЗаполнено(ИдентификаторСтрокиВладельца) Тогда
		Возврат;
	КонецЕсли;

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторСтрокиВладельца", ИдентификаторСтрокиВладельца);

	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если Не ДобавлятьВладельца
			И НайденнаяСтрока.ИдентификаторСтроки = НайденнаяСтрока.ИдентификаторСтрокиВладельца Тогда
			Продолжить;
		КонецЕсли;
		МассивСтрок.Добавить(НайденнаяСтрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокуВладельца(Форма, ИдентификаторСтрокиВладельца)

	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиВладельца);

	НайденныеСтроки = Форма.Объект.Товары.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() = 1 Тогда
		Результат = НайденныеСтроки[0];
	Иначе
		Результат = Неопределено;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ВопросУдалениеСтрокТоваровЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = "Отмена" Тогда
		Возврат;
	КонецЕсли;

	МассивСтрокДляУдаления = Новый Массив;
	МассивСтрокДляПоиска   = Новый Массив;

	Для Каждого ВыделеннаяСтрока Из ДополнительныеПараметры.ВыделенныеСтроки Цикл

		СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);

		Если Результат = "УдалитьСтроку" Тогда

			МассивСтрокДляУдаления.Добавить(СтрокаТовары);

			Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца) Тогда
				МассивСтрок = Новый Массив;
				ДобавитьСтрокиПоВладельцу(ЭтотОбъект, МассивСтрок, СтрокаТовары.ИдентификаторСтрокиВладельца, Истина);
				Для Каждого Строка Из МассивСтрок Цикл
					Строка.ИдентификаторСтрокиВладельца = Неопределено;
					Строка.ЭтоГрупповаяУпаковка         = Ложь;
					Строка.ЭтоНабор                     = Ложь;
				КонецЦикла;
			КонецЕсли;

		ИначеЕсли Результат = "УдалитьВсе" Тогда

				Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиВладельца) Тогда
					Если МассивСтрокДляПоиска.Найти(СтрокаТовары.ИдентификаторСтрокиВладельца) = Неопределено Тогда
						МассивСтрокДляПоиска.Добавить(СтрокаТовары.ИдентификаторСтрокиВладельца);
						ДобавитьСтрокиПоВладельцу(ЭтотОбъект, МассивСтрокДляУдаления, СтрокаТовары.ИдентификаторСтрокиВладельца, Истина);
					КонецЕсли;
				Иначе
					МассивСтрокДляУдаления.Добавить(СтрокаТовары);
				КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Для Каждого Строка Из МассивСтрокДляУдаления Цикл
		ОчиститьСерийныеНомераПоИдентификатору(ЭтотОбъект, Строка.ИдентификаторСтроки);
		Объект.Товары.Удалить(Строка);
	КонецЦикла;

	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьУточнениеКоэффициентовУпаковок(МассивСтрок)

	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("МассивСтрок", МассивСтрок);

	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗапросКоличестваПотребительскихУпаковокВГрупповойУпаковкеЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	ДанныеПоискаGTIN = Новый Массив;
	Для Каждого Строка Из МассивСтрок Цикл
		СтрокаДанных = Новый Структура;
		СтрокаДанных.Вставить("Номенклатура",   Строка.Номенклатура);
		СтрокаДанных.Вставить("Характеристика", Строка.Характеристика);
		ДанныеПоискаGTIN.Добавить(СтрокаДанных);
	КонецЦикла;

	ПараметрыОткрытияФормы = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
	ПараметрыОткрытияФормы.ВидПродукции          = Объект.ВидПродукции;
	ПараметрыОткрытияФормы.УточнениеВидаУпаковки = Истина;
	ПараметрыОткрытияФормы.ДанныеПоискаGTIN      = ДанныеПоискаGTIN;

	ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытияФормы, ЭтотОбъект, ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ЗапросКоличестваПотребительскихУпаковокВГрупповойУпаковкеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> "УточненыКоэффициентыУпаковокИСМП" Тогда
		Возврат;
	КонецЕсли;

	ПересчитатьКоличествоСоставляющихГрупповойУпаковки(ЭтотОбъект, ДополнительныеПараметры.МассивСтрок);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьКоличествоПотребительскихУпаковокВГрупповойУпаковкеПоGTIN(Данные)

	ИнтеграцияИСМП.ЗаполнитьКоличествоПотребительскихУпаковокПоGTIN(Данные, Истина, Ложь);

КонецПроцедуры

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "ТоварыВладелецGTINСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
	Если Результат <> Неопределено
		И ДополнительныеПараметры.Элемент.Имя = "ТоварыВладелецGTINСтрокой" Тогда
		ВладелецGTINПриИзменении(ЭтотОбъект, Элементы.Товары.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ВладелецGTIN

&НаКлиентеНаСервереБезКонтекста
Процедура ВладелецGTINПриИзменении(Форма, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ВладелецGTIN) Тогда
		Если ДанныеСтроки.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
			"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Самостоятельно") Тогда
			ДанныеСтроки.СпособФормированияСерийногоНомера = ПредопределенноеЗначение(
				"Перечисление.СпособыФормированияСерийногоНомераСУЗ.Автоматически");
			ОчиститьСерийныеНомераПоИдентификатору(Форма, ДанныеСтроки.ИдентификаторСтроки);
			ОбновитьСтатусУказанияСерийныхНомеровПоСтроке(Форма, ДанныеСтроки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьОчиститьВладельцаGTIN(Форма, Данные = Неопределено)
	
	Если Данные = Неопределено Тогда
		Строки = Форма.Объект.Товары;
	ИначеЕсли ТипЗнч(Данные) = Тип("Массив") Тогда
		Строки = Данные;
	Иначе
		Строки = Новый Массив;
		Строки.Добавить(Данные);
	КонецЕсли;
	
	ИспользуетсяВладелецGTIN = ИнтеграцияИСМПКлиентСервер.ИспользуетсяВладелецGTINВЗаказеНаЭмиссию(
		Форма.Объект.СпособВводаВОборот, Форма.Объект.ВидПродукции);
	
	Для Каждого Строка Из Строки Цикл
		Если ЗначениеЗаполнено(Строка.ВладелецGTIN)
			И (Не ИспользуетсяВладелецGTIN Или Лев(Строка.GTIN, 3) = "029") Тогда
			Строка.ВладелецGTINСтрокой = "";
			Строка.ВладелецGTIN        = Неопределено;
			ВладелецGTINПриИзменении(Форма, Строка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти