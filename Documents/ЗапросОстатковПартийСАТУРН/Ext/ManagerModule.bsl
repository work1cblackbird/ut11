#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.ОстаткиПартийЗагружены);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//   СтруктураПараметров - Структура - Входящие данные.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбмене

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.КПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса Тогда
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//   * ДополнительныеПараметры - Неопределено, Структура - 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса Тогда
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиЗапросаОстатковПартийСАТУРН - Новый статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияСАТУРН.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияСАТУРНПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияСАТУРН.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСАТУРН

Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ЗапросОстатковПартийСАТУРН, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ЗапросОстатковПартийСАТУРН);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ЗапросОстатковПартийСАТУРН, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ЗапросОстатковПартийСАТУРН, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ЗапросОстатковПартийСАТУРН КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = &Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	ТаблицаТовары.Партия             КАК Партия,
	|	ТаблицаТовары.КоличествоСАТУРН         КАК КоличествоСАТУРН,
	|	ТаблицаТовары.ВОбработкеСАТУРН         КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.ЗапросОстатковПартийСАТУРН.КорректировкаОстатков КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|		И (ТаблицаТовары.КоличествоСАТУРН <> 0 ИЛИ ТаблицаТовары.ВОбработкеСАТУРН <> 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестаХраненияПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                            КАК Период,
	|	ТаблицаТовары.Партия         КАК Партия,
	|	ТаблицаДокумента.ОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	ТаблицаТовары.МестоХранения        КАК МестоХранения
	|ИЗ
	|	Документ.ЗапросОстатковПартийСАТУРН.КорректировкаОстатков КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗапросОстатковПартийСАТУРН КАК ТаблицаДокумента
	|		ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.МестоХранения <> ЗНАЧЕНИЕ(Справочник.МестаХраненияСАТУРН.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Сообщения

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.Ошибка;
		
		Если ПараметрыЗапроса.ВсеСтраницыПолучены Тогда
			
			Попытка
				
				УстановитьПривилегированныйРежим(Истина);
				
				ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
				
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ЗапросОстатковПартийСАТУРН.ПолноеИмя());
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
				Блокировка.Заблокировать();
				
				ОстаткиПоДаннымСАТУРН = ДокументОбъект.ОстаткиПоДаннымСАТУРН.Выгрузить();
				
				Для Каждого СтрокаДанных Из ПараметрыЗапроса.ЗагруженныеПартии Цикл
					
					НоваяСтрока = ОстаткиПоДаннымСАТУРН.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					НоваяСтрока.КоличествоОстатокСАТУРН = СтрокаДанных.КоличествоСАТУРН;
					
				КонецЦикла;
				
				ЗаполнитьПАТИСопоставленныеРанееПартии(ОстаткиПоДаннымСАТУРН);
				ДокументОбъект.ОстаткиПоДаннымСАТУРН.Загрузить(ОстаткиПоДаннымСАТУРН);
				
				ДокументОбъект.ОстаткиПоДаннымСАТУРН.Сортировать("ПАТ,Партия");
				
				ДокументОбъект.Записать();
				
				Статусы.Принят = Перечисления.СтатусыОбработкиЗапросаОстатковПартийСАТУРН.ОстаткиПартийЗагружены;
				
				Справочники.ПартииСАТУРН.ЗаписатьСоответствиеПартийНоменклатуреПоРодительскимПартиям(
					ОстаткиПоДаннымСАТУРН.ВыгрузитьКолонку("Партия"));
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		Иначе
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ЭлементОчереди.Документ,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
			ЭлементОчереди.Документ,
			ПараметрыОбновления);
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		ПараметрыЗапросаОснования             = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		КоличествоЭлементов = ВходящиеДанные.Количество();
		
		ПараметрыПолученияПартии = Справочники.ПартииСАТУРН.ПараметрыПолученияПартии();
		ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
		
		ОписаниеТипаИдентификатор     = ОбщегоНазначения.ОписаниеТипаЧисло(18, 0);
		ОписаниеТипаКоличествоСАТУРН  = Метаданные.ОпределяемыеТипы.КоличествоСАТУРН.Тип;
		ОшибкиПриЗагрузке = Новый Массив;
		
		Для Каждого ЭлементДанных Из ВходящиеДанные Цикл
			
			Если ОписаниеТипаИдентификатор.ПривестиЗначение(ЭлементДанных.ownerContractorId) <> ПараметрыЗапросаОснования.ОрганизацияСАТУРНИдентификатор Тогда
				Продолжить;
			КонецЕсли;
			
			ИдентификаторПартии = Формат(ЭлементДанных.batchId, "ЧГ=0;");
			
			КоличествоСАТУРН = ОписаниеТипаКоличествоСАТУРН.ПривестиЗначение(ЭлементДанных.quantity);
			Если КоличествоСАТУРН = 0 Тогда
				// если разрядность остатка САТУРН больше разрядности ИБ, то при загрузке количество ИБ может быть округлено до 0
				ОшибкиПриЗагрузке.Добавить(СтрШаблон(
					НСтр("ru = 'При загрузке пропущена строка партии с идентификатором ""%1"". Остаток по данным ФГИС ""Сатурн"" %2 не может быть загружен.'"),
					ИдентификаторПартии,
					ЭлементДанных.quantity));
				Продолжить;
			КонецЕсли;
			
			Партия = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(ПараметрыОбмена, Метаданные.Справочники.ПартииСАТУРН.ПолноеИмя(), ИдентификаторПартии);
			
			Если Не ЗначениеЗаполнено(Партия) Тогда
				
				ДанныеОбъекта = ИнтеграцияСАТУРНСлужебный.ДанныеОбъекта(
					ИдентификаторПартии,
					Метаданные.Справочники.ПартииСАТУРН, ПараметрыОбмена);
				
				Партия = Справочники.ПартииСАТУРН.ЗагрузитьОбъект(
					ДанныеОбъекта,
					ПараметрыОбмена,,,
					ЭлементОчереди.ОрганизацияСАТУРН,
					ПараметрыПолученияПартии);
				
				Если Не ЗначениеЗаполнено(Партия) Тогда
					Продолжить;
				КонецЕсли;
				ИзмененныеОбъекты.Добавить(Партия);
				
			КонецЕсли;
			
			СтрокаДанныхПартии = Новый Структура();
			СтрокаДанныхПартии.Вставить("Партия",           Партия);
			СтрокаДанныхПартии.Вставить("КоличествоСАТУРН", ЭлементДанных.quantity);
			СтрокаДанныхПартии.Вставить(
				"МестоХранения",
				Справочники.МестаХраненияСАТУРН.МестоХранения(
					Формат(ЭлементДанных.warehouseId, "ЧГ=0;"),
					ПараметрыОбмена,
					ЭлементОчереди.ОрганизацияСАТУРН));
			СтрокаДанныхПартии.Вставить(
				"ПАТ",
				Справочники.КлассификаторПАТСАТУРН.ПАТ(
					Формат(ЭлементДанных.patProductId, "ЧГ=0;"),
					ПараметрыОбмена,
					ЭлементОчереди.ОрганизацияСАТУРН));
			ПараметрыЗапросаОснования.ЗагруженныеПартии.Добавить(СтрокаДанныхПартии);
			
		КонецЦикла;
		
		Если ОшибкиПриЗагрузке.Количество() Тогда
			
			СтрокаРезультата = ИнтеграцияСАТУРНСлужебный.СтруктураИзменения(ЭлементОчереди);
			
			СтрокаРезультата.ОрганизацияСАТУРН = ЭлементОчереди.ОрганизацияСАТУРН;
			СтрокаРезультата.Сообщение         = ЭлементОчереди.Сообщение;
			СтрокаРезультата.ТекстОшибки       = СтрСоединить(ОшибкиПриЗагрузке, Символы.ПС);
			
			ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
			
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ПараметрыПолученияПартии.НовыеОбъекты Цикл
			Если Не КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыЗапросаОснования.СозданныеПартии.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		
		Если КоличествоЭлементов = 0 Тогда
			
			ПараметрыЗапросаОснования.ВсеСтраницыПолучены = Истина;
			
			СоздатьСообщенияЗагрузкиРодительскихПартий(
				ПараметрыЗапросаОснования, РеквизитыИсходящегоСообщения, ПараметрыОбмена, ЭлементОчереди);
			
		Иначе
			
			СообщенияJSON = Новый Массив;
		
			НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
			НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
			
			СообщениеJSON = СообщенияЗагрузкиПартий(НовыеПараметрыФормирования, ПараметрыОбмена, РеквизитыИсходящегоСообщения);
			СообщениеJSON.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
			ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, РеквизитыИсходящегоСообщения);
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
			ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		ПараметрыЗапросаОснования             = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		ПараметрыПолученияПартии = Справочники.ПартииСАТУРН.ПараметрыПолученияПартии();
		ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
		
		Для Каждого ЭлементДанных Из ВходящиеДанные Цикл
			
			ИдентификаторПартии = Формат(ЭлементДанных.id, "ЧГ=0;");
			
			ДанныеОбъекта = ИнтеграцияСАТУРНСлужебный.ДанныеОбъекта(
				ИдентификаторПартии,
				Метаданные.Справочники.ПартииСАТУРН, ПараметрыОбмена);
			
			Если ДанныеОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Партия = Справочники.ПартииСАТУРН.ЗагрузитьОбъект(
				ДанныеОбъекта,
				ПараметрыОбмена,,,
				ЭлементОчереди.ОрганизацияСАТУРН,
				ПараметрыПолученияПартии);
				
			ИзмененныеОбъекты.Добавить(Партия);
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ПараметрыПолученияПартии.НовыеОбъекты Цикл
			Если Не КлючИЗначение.Значение Тогда
				Продолжить;
			КонецЕсли;
			ПараметрыЗапросаОснования.СозданныеПартии.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		СоздатьСообщенияЗагрузкиРодительскихПартий(
			ПараметрыЗапросаОснования, РеквизитыИсходящегоСообщения, ПараметрыОбмена, ЭлементОчереди);
		
	КонецЕсли;
	
КонецПроцедуры

// Сообщение к передаче JSON.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
		
		Возврат ЗапросОстатковПартийJSON(ДокументСсылка, ДополнительныеПараметры);
	
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для акта инвентаризации.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЗапросОстатковПартийСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция ЗапросОстатковПартийJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗапросОстатковПартийСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Представление(Шапка.ОрганизацияСАТУРН)   КАК ОрганизацияСАТУРНПредставление,
	|	Шапка.ОрганизацияСАТУРН.Идентификатор    КАК ОрганизацияСАТУРНИдентификатор,
	|
	|	Шапка.МестоХранения                      КАК МестоХранения,
	|	ЕСТЬNULL(Шапка.МестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК МестоХраненияИдентификатор,
	|	Шапка.Комментарий                        КАК Комментарий
	|ИЗ
	|	Документ.ЗапросОстатковПартийСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	АбстрактноеСообщениеJSON.ОрганизацияСАТУРН = Шапка.ОрганизацияСАТУРН;
	АбстрактноеСообщениеJSON.Документ          = ДокументСсылка;
	АбстрактноеСообщениеJSON.Версия            = НомерВерсии;
	АбстрактноеСообщениеJSON.Операция          = Операция;
	АбстрактноеСообщениеJSON.Описание          = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(АбстрактноеСообщениеJSON.Операция, ДокументСсылка);
	
	ОписаниеТипаИдентификатор = ОбщегоНазначения.ОписаниеТипаЧисло(18, 0);
	ПараметрыФормирования = ПараметрыФормированияСообщенияJSON();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, АбстрактноеСообщениеJSON);
	ПараметрыФормирования.НомерСтраницы                  = 1;
	ПараметрыФормирования.МестоХраненияИдентификатор     = ОписаниеТипаИдентификатор.ПривестиЗначение(Шапка.МестоХраненияИдентификатор);
	ПараметрыФормирования.ОрганизацияСАТУРНИдентификатор = ОписаниеТипаИдентификатор.ПривестиЗначение(Шапка.ОрганизацияСАТУРНИдентификатор);
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = ПараметрыФормирования;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	СообщениеJSON = СообщенияЗагрузкиПартий(ПараметрыФормирования, ДополнительныеПараметры.ПараметрыОбмена, АбстрактноеСообщениеJSON);
	
	СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция СообщенияЗагрузкиПартий(ПараметрыФормирования, ПараметрыОбмена, РеквизитыИсходящегоСообщения)
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
	СообщениеJSON.Операция          = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий;
	СообщениеJSON.Описание          = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
	СообщениеJSON.НомерСтраницы     = ПараметрыФормирования.НомерСтраницы;
	СообщениеJSON.АргументыОперации = Новый Структура();
	СообщениеJSON.ПараметрыЗапроса  = ПараметрыФормирования;
	
	Если СообщениеJSON.НомерСтраницы = 1 Тогда
		НачалоПозиции = 0;
	Иначе
		НачалоПозиции = ПараметрыФормирования.КоличествоНаСтранице * (СообщениеJSON.НомерСтраницы - 1);
	КонецЕсли;
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(18, 0);
	АргументыОперации = СообщениеJSON.АргументыОперации;
	АргументыОперации.Вставить("pos",               НачалоПозиции);
	АргументыОперации.Вставить("size",              ПараметрыФормирования.КоличествоНаСтранице);
	АргументыОперации.Вставить("getFullCards",      1);
	АргументыОперации.Вставить("ownerContractorId", ОписаниеТипаЧисло.ПривестиЗначение(ПараметрыФормирования.ОрганизацияСАТУРНИдентификатор));
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.МестоХраненияИдентификатор) Тогда
		АргументыОперации.Вставить("warehouseId", ОписаниеТипаЧисло.ПривестиЗначение(ПараметрыФормирования.МестоХраненияИдентификатор));
	КонецЕсли;
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция ПараметрыФормированияСообщенияJSON()
	
	ВозвращаемоеЗначение = ИнтеграцияСАТУРНСлужебный.ПараметрыФормированияСообщенияJSON();
	
	ВозвращаемоеЗначение.Вставить("МестоХраненияИдентификатор");
	ВозвращаемоеЗначение.Вставить("ОрганизацияСАТУРНИдентификатор");
	ВозвращаемоеЗначение.Вставить("ЗагруженныеПартии",   Новый Массив());
	ВозвращаемоеЗначение.Вставить("ВсеСтраницыПолучены", Ложь);
	ВозвращаемоеЗначение.Вставить("НачалоПозиции",       0);
	ВозвращаемоеЗначение.Вставить("СозданныеПартии",     Новый Массив());
	
	ВозвращаемоеЗначение.КоличествоНаСтранице = ИнтеграцияСАТУРНСлужебный.ПараметрыОптимизации().КоличествоЭлементовСтраницыОтвета;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция ПатрииТребующиеЗагрузки(МассивПартий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииСАТУРН.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ПартииСАТУРН КАК ПартииСАТУРН
	|ГДЕ
	|	ПартииСАТУРН.Ссылка В (&МассивПартий)
	|	И ПартииСАТУРН.ТребуетсяЗагрузка";
	
	Запрос.УстановитьПараметр("МассивПартий", МассивПартий);
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Идентификатор");
	
КонецФункции

Процедура СоздатьСообщенияЗагрузкиРодительскихПартий(ПараметрыЗапросаОснования, РеквизитыИсходящегоСообщения, ПараметрыОбмена, ЭлементОчереди)
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартий Тогда
		ПроверяемыеПартии = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапросаОснования.СозданныеПартии);
		Для Каждого ЗагруженнаяПартия Из ПараметрыЗапросаОснования.ЗагруженныеПартии Цикл
			ПроверяемыеПартии.Добавить(ЗагруженнаяПартия.Партия);
		КонецЦикла;
	Иначе
		ПроверяемыеПартии = ПараметрыЗапросаОснования.СозданныеПартии;
	КонецЕсли;
	
	ПатрииТребующиеЗагрузки = ПатрииТребующиеЗагрузки(ПроверяемыеПартии);
	ПараметрыЗапросаОснования.СозданныеПартии.Очистить();
	
	Если ПатрииТребующиеЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаЧисло           = ОбщегоНазначения.ОписаниеТипаЧисло(18, 0);
	СообщенияJSON               = Новый Массив;
	ГруппыИдентификаторовПартий = Новый Массив;
	ГруппаИдентификаторовПартий = Новый Массив;
	Счетчик                     = 0;
	
	Для Каждого ИдентификаторПартии Из ПатрииТребующиеЗагрузки Цикл
		
		Если Счетчик >= ПараметрыЗапросаОснования.КоличествоНаСтранице Тогда
			ГруппыИдентификаторовПартий.Добавить(ГруппаИдентификаторовПартий);
			ГруппаИдентификаторовПартий = Новый Массив;
			Счетчик = 0;
		КонецЕсли;
		ГруппаИдентификаторовПартий.Добавить(ОписаниеТипаЧисло.ПривестиЗначение(ИдентификаторПартии));
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Если ГруппаИдентификаторовПартий.Количество() Тогда
		ГруппыИдентификаторовПартий.Добавить(ГруппаИдентификаторовПартий);
		ГруппаИдентификаторовПартий = Новый Массив;
	КонецЕсли;
	
	Для Каждого ГруппаИдентификаторовПартий Из ГруппыИдентификаторовПартий Цикл
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		СообщениеJSON.Операция          = Перечисления.ВидыОперацийСАТУРН.ЗапросОстатковПартийЗапросРодительскихПартий;
		СообщениеJSON.Описание          = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.АргументыОперации = Новый Структура;
		АргументыОперации = СообщениеJSON.АргументыОперации;
		АргументыОперации.Вставить("getFullCards", 1);
		
		Отборы = Новый Массив;
		Отбор = Новый Структура;
		Отбор.Вставить("column",    "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value",     ГруппаИдентификаторовПартий);
		Отборы.Добавить(Отбор);
		АргументыОперации.Вставить("filters", Отборы);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
	ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьПАТИСопоставленныеРанееПартии(ОстаткиПоДаннымСАТУРН)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ОстаткиПоДаннымСАТУРН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Партия                  КАК Партия,
	|	Таблица.МестоХранения           КАК МестоХранения,
	|	Таблица.Упаковка                КАК Упаковка,
	|	Таблица.ПАТ                     КАК ПАТ,
	|	Таблица.КоличествоОстатокСАТУРН КАК КоличествоОстатокСАТУРН
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	СоответствиеПоПартии.Партия,
	|	СоответствиеПоПартии.Порядок
	|ПОМЕСТИТЬ СоответствиеПоПартии 
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Соответствие.Партия,
	|		Соответствие.Порядок,
	|		Соответствие.Номенклатура,
	|		Соответствие.Характеристика,
	|		Соответствие.Серия
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Таблица.Партия,
	|			МИНИМУМ(Соответствие.Порядок) КАК Порядок
	|		ИЗ Таблица КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|				ПО Таблица.Партия = Соответствие.Партия
	|		СГРУППИРОВАТЬ ПО
	|			Таблица.Партия) КАК СоответствиеПорядок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|			ПО СоответствиеПорядок.Партия = Соответствие.Партия
	|			И СоответствиеПорядок.Порядок = Соответствие.Порядок) КАК СоответствиеПоПартии
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеПоПартии.Партия,
	|	СоответствиеПоПартии.Порядок
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) = 1
	|;
	|ВЫБРАТЬ
	|	СоответствиеПоПАТ.ПАТ,
	|	СоответствиеПоПАТ.Порядок
	|ПОМЕСТИТЬ СоответствиеПоПАТ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Соответствие.ПАТ,
	|		Соответствие.Порядок,
	|		Соответствие.Номенклатура,
	|		Соответствие.Характеристика,
	|		Соответствие.Серия
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Соответствие.ПАТ,
	|			МИНИМУМ(Соответствие.Порядок) КАК Порядок
	|		ИЗ Таблица КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииСАТУРН КАК Партии
	|				ПО Таблица.Партия = Партии.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|				ПО Партии.ПАТ = Соответствие.ПАТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПоПартии КАК СоответствиеПоПартии
	|				ПО Таблица.Партия = СоответствиеПоПартии.Партия
	|		ГДЕ
	|			СоответствиеПоПартии.Партия ЕСТЬ NULL
	|		СГРУППИРОВАТЬ ПО
	|			Соответствие.ПАТ) КАК СоответствиеПорядок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|			ПО СоответствиеПорядок.ПАТ = Соответствие.ПАТ
	|			И СоответствиеПорядок.Порядок = Соответствие.Порядок) КАК СоответствиеПоПАТ
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеПоПАТ.ПАТ,
	|	СоответствиеПоПАТ.Порядок
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) = 1
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Партия                     КАК Партия,
	|	Таблица.ПАТ                        КАК ПАТ,
	|	Партии.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличиныСАТУРН,
	|	Таблица.МестоХранения              КАК МестоХранения,
	|	Таблица.Упаковка                   КАК Упаковка,
	|	Таблица.КоличествоОстатокСАТУРН    КАК КоличествоОстатокСАТУРН,
	|	Соответствие.Номенклатура          КАК Номенклатура,
	|	Соответствие.Характеристика        КАК Характеристика,
	|	Соответствие.Серия                 КАК Серия,
	|	Соответствие.СтатусУказанияСерий   КАК СтатусУказанияСерий,
	|	0                                  КАК КоличествоУпаковок,
	|	0                                  КАК Количество,
	|	0                                  КАК КоличествоВУпаковкеСАТУРН
	|ИЗ Таблица КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииСАТУРН КАК Партии
	|		ПО Таблица.Партия = Партии.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПоПартии КАК СоответствиеПоПартии
	|		ПО Таблица.Партия = СоответствиеПоПартии.Партия
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПоПАТ КАК СоответствиеПоПАТ
	|		ПО
	|		ВЫБОР
	|			КОГДА СоответствиеПоПартии.Партия ЕСТЬ NULL
	|			ТОГДА Партии.ПАТ = СоответствиеПоПАТ.ПАТ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|		ПО
	|		ВЫБОР
	|			КОГДА НЕ СоответствиеПоПартии.Партия ЕСТЬ NULL
	|			ТОГДА СоответствиеПоПартии.Партия = Соответствие.Партия
	|				И СоответствиеПоПартии.Порядок = Соответствие.Порядок
	|			КОГДА НЕ СоответствиеПоПАТ.ПАТ ЕСТЬ NULL
	|			ТОГДА СоответствиеПоПАТ.ПАТ = Соответствие.ПАТ
	|				И СоответствиеПоПАТ.Порядок = Соответствие.Порядок
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	ОстаткиПоДаннымСАТУРН = Запрос.Выполнить().Выгрузить();
	
	ПозицииДляПересчетаКоличества = Новый Массив;
	Для Каждого СтрокаТаблицы Из ОстаткиПоДаннымСАТУРН Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ПозицииДляПересчетаКоличества.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если ПозицииДляПересчетаКоличества.Количество() > 0 Тогда
		
		ТипИзмеряемойВеличиныОбъем = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем;
		ТипИзмеряемойВеличиныВес   = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес;
		
		ИсточникДанныхКоэффициентВесОбъемУпаковок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПозицииДляПересчетаКоличества Цикл 
			СтруктураРасчета = Новый Структура("Номенклатура, Упаковка");
			ЗаполнитьЗначенияСвойств(СтруктураРасчета,СтрокаТаблицы);
			ИсточникДанныхКоэффициентВесОбъемУпаковок.Добавить(СтруктураРасчета);
		КонецЦикла;
		
		Данные = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок(ИсточникДанныхКоэффициентВесОбъемУпаковок);
		
		Для Каждого СтрокаТаблицы Из ПозицииДляПересчетаКоличества Цикл
			
			ДанныеУпаковки = ИнтеграцияИСКлиентСервер.ПолучитьДанныеУпаковки(
				Данные, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Упаковка);
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН) Тогда
				Если ДанныеУпаковки.ТипИзмеряемойВеличиныОбъем Тогда
					СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
				ИначеЕсли ДанныеУпаковки.ТипИзмеряемойВеличиныВес Тогда
					СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
				ИначеЕсли ДанныеУпаковки.Объем > 0 Тогда
					СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
				Иначе
					СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем Тогда
				СтрокаТаблицы.КоличествоВУпаковкеСАТУРН = ДанныеУпаковки.Объем;
			ИначеЕсли СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес Тогда
				СтрокаТаблицы.КоличествоВУпаковкеСАТУРН = ДанныеУпаковки.Вес;
			Иначе
				СтрокаТаблицы.КоличествоВУпаковкеСАТУРН = 0;
			КонецЕсли;
			
			Если СтрокаТаблицы.КоличествоВУпаковкеСАТУРН > 0 Тогда
				СтрокаТаблицы.КоличествоУпаковок = СтрокаТаблицы.КоличествоОстатокСАТУРН / СтрокаТаблицы.КоличествоВУпаковкеСАТУРН;
			Иначе
				СтрокаТаблицы.КоличествоУпаковок = 0;
			КонецЕсли;
			
			Если ДанныеУпаковки.Коэффициент = 0 Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоУпаковок;
			Иначе
				СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
