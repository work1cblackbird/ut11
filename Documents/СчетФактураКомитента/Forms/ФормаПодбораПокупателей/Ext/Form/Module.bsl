#Область ОписаниеПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Валюта = Параметры.Валюта;
	АдресВоВременномХранилище = Параметры.АдресВоВременномХранилище;
	
	ПолучитьСчетаФактурыКомитентаКРегистрации(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		ВыполняетсяЗакрытие = Истина;
		ТекстПредупреждения = НСтр("ru = 'Данные не были перенесены в счет-фактуру. После закрытия, сделанные Вами изменения сохранены не будут.'");
	КонецЕсли;
		
	Если НЕ ВыполняетсяЗакрытие И Модифицированность Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), НСтр("ru = 'Данные были изменены. Перенести изменения в документ?'"), РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент()
	
	ПеренестиВДокументВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьПометки(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПометки(Значение)
	
	Для каждого Строка Из СчетаФактурыКомитентаКРегистрации Цикл
		Строка.Пометка = Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СчетаФактурыКомитентаКРегистрации.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СчетаФактурыКомитентаКРегистрации.ПрисутствуетВДокументе");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Gray);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСчетаФактурыКомитентаКРегистрации(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Покупатели.Покупатель КАК Покупатель,
	|	Покупатели.СчетФактураВыданный КАК СчетФактураВыданный,
	|	Покупатели.Субкомиссионер КАК Субкомиссионер,
	|	Покупатели.СуммаСНДС КАК СуммаСНДС,
	|	Покупатели.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ Покупатели
	|ИЗ
	|	&Покупатели КАК Покупатели
	|ГДЕ
	|	Покупатели.СчетФактураВыданный <> &ПустойСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Покупатель КАК Покупатель,
	|	ВложенныйЗапрос.СчетФактураВыданный КАК СчетФактураВыданный,
	|	ВложенныйЗапрос.Субкомиссионер КАК Субкомиссионер,
	|	МАКСИМУМ(ВложенныйЗапрос.СуммаСНДС) КАК СуммаСНДС,
	|	МАКСИМУМ(ВложенныйЗапрос.СуммаНДС) КАК СуммаНДС,
	|	МАКСИМУМ(ВложенныйЗапрос.ПрисутствуетВДокументе) КАК ПрисутствуетВДокументе
	|ИЗ
	|	(ВЫБРАТЬ
	|		КРегистрации.Покупатель КАК Покупатель,
	|		КРегистрации.СчетФактураВыданный КАК СчетФактураВыданный,
	|		КРегистрации.Субкомиссионер КАК Субкомиссионер,
	|		КРегистрации.СуммаСНДС КАК СуммаСНДС,
	|		КРегистрации.СуммаНДС КАК СуммаНДС,
	|		ЛОЖЬ КАК ПрисутствуетВДокументе
	|	ИЗ
	|		РегистрСведений.СчетаФактурыКомитентовКРегистрации КАК КРегистрации
	|	ГДЕ
	|		КРегистрации.Организация = &Организация
	|		И КРегистрации.Комитент = &Комитент
	|		И КРегистрации.Дата = &Дата
	|		И КРегистрации.Валюта = &Валюта
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Покупатели.Покупатель,
	|		Покупатели.СчетФактураВыданный,
	|		Покупатели.Субкомиссионер,
	|		Покупатели.СуммаСНДС,
	|		Покупатели.СуммаНДС,
	|		ИСТИНА
	|	ИЗ
	|		Покупатели КАК Покупатели) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Покупатель,
	|	ВложенныйЗапрос.СчетФактураВыданный,
	|	ВложенныйЗапрос.Субкомиссионер";
	
	Запрос.УстановитьПараметр("Покупатели",        ПолучитьИзВременногоХранилища(Параметры.АдресВоВременномХранилище));
	Запрос.УстановитьПараметр("Организация",       Параметры.Организация);
	Запрос.УстановитьПараметр("Комитент",          Параметры.Комитент);
	Запрос.УстановитьПараметр("Дата",              Параметры.Дата);
	Запрос.УстановитьПараметр("Валюта",            Параметры.Валюта);
	Запрос.УстановитьПараметр("ПустойСчетФактура", Документы.СчетФактураВыданный.ПустаяСсылка());
	
	СчетаФактурыКомитентаКРегистрации.Загрузить(Запрос.Выполнить().Выгрузить())
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументВыполнить()
	
	// Снятие модифицированности, т.к. перед закрытием признак проверяется.
	Модифицированность = Ложь;
	Закрыть(ПоместитьВоВременноеХранилищеСервер());
	
КонецПроцедуры

&НаСервере
Функция ПоместитьВоВременноеХранилищеСервер()
	
	Возврат ПоместитьВоВременноеХранилище(
				СчетаФактурыКомитентаКРегистрации.Выгрузить(Новый Структура("Пометка", Истина)),
				АдресВоВременномХранилище);
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыполняетсяЗакрытие = Истина;
		Модифицированность = Ложь;
		ПеренестиВДокументВыполнить();
		
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		ВыполняетсяЗакрытие = Истина;
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Инициализация

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти