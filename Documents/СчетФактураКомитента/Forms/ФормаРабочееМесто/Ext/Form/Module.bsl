#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьЗначенияПоПараметрамФормы(Параметры);
	ОбновитьДанныеФормы();
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма,Элементы.СписокКоманднаяПанельГруппаГлобальныеКоманды);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПриСозданииНаСервере = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаСписка();
	ПараметрыПриСозданииНаСервере.Форма = ЭтотОбъект;
	ПараметрыПриСозданииНаСервере.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаСписка(ПараметрыПриСозданииНаСервере);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереСписокДокументов(Список);
	
	Если ПроверкаКонтрагентовВызовСервера.ИспользованиеПроверкиВозможно() Тогда
		Элементы.СодержитНекорректныхКонтрагентов.Видимость = Истина;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	МассивМенеджеровРасчетаСмТакжеВРаботе = Новый Массив();
	МассивМенеджеровРасчетаСмТакжеВРаботе.Добавить("Обработка.ЖурналДокументовНДС");
	СмТакжеВРаботе = ОбщегоНазначенияУТ.СформироватьГиперссылкуСмТакжеВРаботе(МассивМенеджеровРасчетаСмТакжеВРаботе, Неопределено);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.СписокДата.Имя);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма = ЭтотОбъект;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка = "Список";
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если ИмяСобытия = "Запись_СчетФактураКомитента" Тогда
		Элементы.КРегистрации.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомитентПриИзменении(Элемент)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура КРегистрацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Значение = Неопределено;
	
	Если Поле = Элементы.КРегистрацииКомитент Тогда
		Значение = Элемент.ТекущиеДанные.Комитент;
	ИначеЕсли Поле = Элементы.КРегистрацииПокупатель Тогда
		Значение = Элемент.ТекущиеДанные.Покупатель;
	ИначеЕсли Поле = Элементы.КРегистрацииСчетФактураВыданный Тогда
		Значение = Элемент.ТекущиеДанные.СчетФактураВыданный;
	КонецЕсли; 
	
	Если Значение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СмТакжеВРаботеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	// &ЗамерПроизводительности
	ИмяКлючевойОперации = СтрШаблон("Обработка.СчетФактураКомитента.Форма.ФормаРабочееМесто.СмТакже.%1",
									НавигационнаяСсылкаФорматированнойСтроки);
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ИмяКлючевойОперации);
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	СтруктураБыстрогоОтбора = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураБыстрогоОтбора.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Комитент) Тогда
		СтруктураБыстрогоОтбора.Вставить("Контрагент", Комитент);
	КонецЕсли;
	
	ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
	Период = Новый СтандартныйПериод;
	Период.ДатаНачала = НачалоПериода;
	Период.ДатаОкончания = КонецПериода;
	СтруктураБыстрогоОтбора.Вставить("Период", Период);
	СтруктураБыстрогоОтбора.Вставить("НачалоПериода", ?(ЗначениеЗаполнено(Период.ДатаНачала), Период.ДатаНачала, НачалоКвартала(ТекущаяДата)));
	ПараметрыФормы.Вставить("НачалоПериода", СтруктураБыстрогоОтбора.НачалоПериода);
	СтруктураБыстрогоОтбора.Вставить("КонецПериода", ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, КонецКвартала(ТекущаяДата)));
	ПараметрыФормы.Вставить("КонецПериода", СтруктураБыстрогоОтбора.КонецПериода);
	
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	ОткрытьФорму(НавигационнаяСсылкаФорматированнойСтроки, ПараметрыФормы,ЭтаФорма, ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода, КонецПериода", НачалоПериода, КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСчетФактуру(Команда)
	
	ОчиститьСообщения();
	Если Элементы.КРегистрации.ВыделенныеСтроки.Количество() = 0 Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Нет данных для регистрации счетов-фактур.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСчетаФактуры = ПолучитьЗначенияЗаполнения();
	
	Если ПараметрыСчетаФактуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ПараметрыСчетаФактуры);
	ОткрытьФорму("Документ.СчетФактураКомитента.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Функция ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.СчетФактураКомитента.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(Данные) Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ПолучитьСсылкуНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Элементы.Список.ТекущаяСтрока = МассивСсылок[0];
		ПоказатьЗначение(,МассивСсылок[0]);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаСервере
Функция ПолучитьЗначенияЗаполнения()

	МассивТиповСчетФактура = Новый Массив;
	МассивТиповСчетФактура.Добавить(Тип("ДокументСсылка.СчетФактураВыданный"));
	МассивТиповСчетФактура.Добавить(Тип("ДокументСсылка.СчетФактураКомиссионеру"));
	ТаблицаКРегистрации = Новый ТаблицаЗначений;
	ТаблицаКРегистрации.Колонки.Добавить("СчетФактураВыданный", Новый ОписаниеТипов(МассивТиповСчетФактура));
	ТаблицаКРегистрации.Колонки.Добавить("Комитент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	
	Для каждого Строка Из Элементы.КРегистрации.ВыделенныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаКРегистрации.Добавить(), Строка);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаКРегистрации", ТаблицаКРегистрации);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаКРегистрации.СчетФактураВыданный КАК СчетФактураВыданный,
		|	ТаблицаКРегистрации.Комитент КАК Комитент
		|ПОМЕСТИТЬ ТаблицаКРегистрации
		|ИЗ
		|	&ТаблицаКРегистрации КАК ТаблицаКРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный КАК СчетФактураВыданный,
		|	СчетаФактурыКомитентовКРегистрации.Комитент КАК Комитент,
		|	СчетаФактурыКомитентовКРегистрации.СуммаСНДС КАК СуммаСНДС,
		|	СчетаФактурыКомитентовКРегистрации.СуммаНДС КАК СуммаНДС,
		|	СчетаФактурыКомитентовКРегистрации.Валюта КАК Валюта,
		|	СчетаФактурыКомитентовКРегистрации.Организация КАК Организация,
		|	СчетаФактурыКомитентовКРегистрации.Дата КАК Дата,
		|	СчетаФактурыКомитентовКРегистрации.Покупатель КАК Покупатель,
		|	СчетаФактурыКомитентовКРегистрации.Субкомиссионер КАК Субкомиссионер,
		|	ВЫБОР
		|		КОГДА СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный ССЫЛКА Документ.СчетФактураВыданный
		|			ТОГДА ВЫРАЗИТЬ(СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный КАК Документ.СчетФактураВыданный).Исправление
		|		КОГДА СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный ССЫЛКА Документ.СчетФактураКомиссионеру
		|			ТОГДА ВЫРАЗИТЬ(СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный КАК Документ.СчетФактураКомиссионеру).Исправление
		|	КОНЕЦ КАК Исправление,
		|	ВЫБОР
		|		КОГДА СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный ССЫЛКА Документ.СчетФактураВыданный
		|			ТОГДА ВЫРАЗИТЬ(СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный КАК Документ.СчетФактураВыданный).СчетФактураОснование
		|		КОГДА СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный ССЫЛКА Документ.СчетФактураКомиссионеру
		|			ТОГДА ВЫРАЗИТЬ(СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный КАК Документ.СчетФактураКомиссионеру).СчетФактураОснование
		|	КОНЕЦ КАК СчетФактураОснование
		|ПОМЕСТИТЬ СчетаФактурыКРегистрации
		|ИЗ
		|	РегистрСведений.СчетаФактурыКомитентовКРегистрации КАК СчетаФактурыКомитентовКРегистрации
		|ГДЕ
		|	(СчетаФактурыКомитентовКРегистрации.СчетФактураВыданный, СчетаФактурыКомитентовКРегистрации.Комитент) В
		|			(ВЫБРАТЬ
		|				ТаблицаКРегистрации.СчетФактураВыданный КАК СчетФактураВыданный,
		|				ТаблицаКРегистрации.Комитент КАК Комитент
		|			ИЗ
		|				ТаблицаКРегистрации КАК ТаблицаКРегистрации)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПокупатели.Ссылка КАК СчетФактураКомитента,
		|	ТаблицаПокупатели.СчетФактураВыданный КАК СчетФактураВыданный
		|ПОМЕСТИТЬ ОснованияИсправительныхСчетовФактур
		|ИЗ
		|	Документ.СчетФактураКомитента.Покупатели КАК ТаблицаПокупатели
		|ГДЕ
		|	ТаблицаПокупатели.СчетФактураВыданный В
		|			(ВЫБРАТЬ
		|				СчетаФактурыКРегистрации.СчетФактураОснование КАК СчетФактураОснование
		|			ИЗ
		|				СчетаФактурыКРегистрации КАК СчетаФактурыКРегистрации
		|			ГДЕ
		|				СчетаФактурыКРегистрации.Исправление)
		|	И ТаблицаПокупатели.Ссылка.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПокупатели.СчетФактураВыданный,
		|	ТаблицаПокупатели.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИсходныеДокументы.СчетФактураВыданный КАК СчетФактураВыданный,
		|	Исправления.Ссылка.НомерИсправления КАК НомерИсправления
		|ПОМЕСТИТЬ ПослениеНомераИсправлений
		|ИЗ
		|	СчетаФактурыКРегистрации КАК ИсходныеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураКомитента.Покупатели КАК Исправления
		|		ПО ИсходныеДокументы.СчетФактураОснование = Исправления.СчетФактураВыданный.СчетФактураОснование
		|ГДЕ
		|	ИсходныеДокументы.Исправление
		|	И Исправления.Ссылка.Проведен
		|	И Исправления.Ссылка.Исправление
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерИсправления УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СчетаФактурыКРегистрации.СчетФактураВыданный КАК СчетФактураВыданный,
		|	СчетаФактурыКРегистрации.Комитент КАК Комитент,
		|	СчетаФактурыКРегистрации.СуммаСНДС КАК СуммаСНДС,
		|	СчетаФактурыКРегистрации.СуммаНДС КАК СуммаНДС,
		|	СчетаФактурыКРегистрации.Валюта КАК Валюта,
		|	СчетаФактурыКРегистрации.Организация КАК Организация,
		|	СчетаФактурыКРегистрации.Дата КАК Дата,
		|	СчетаФактурыКРегистрации.Покупатель КАК Покупатель,
		|	СчетаФактурыКРегистрации.Субкомиссионер КАК Субкомиссионер,
		|	СчетаФактурыКРегистрации.Исправление КАК Исправление,
		|	ЕСТЬNULL(ОснованияИсправительныхСчетовФактур.СчетФактураКомитента.Номер, НЕОПРЕДЕЛЕНО) КАК СчетФактураОснованиеНомер,
		|	ОснованияИсправительныхСчетовФактур.СчетФактураКомитента.Дата КАК СчетФактураОснованиеДата,
		|	ЕСТЬNULL(ПослениеНомераИсправлений.НомерИсправления, 0) КАК НомерИсправления
		|ИЗ
		|	СчетаФактурыКРегистрации КАК СчетаФактурыКРегистрации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияИсправительныхСчетовФактур КАК ОснованияИсправительныхСчетовФактур
		|		ПО СчетаФактурыКРегистрации.СчетФактураОснование = ОснованияИсправительныхСчетовФактур.СчетФактураВыданный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПослениеНомераИсправлений КАК ПослениеНомераИсправлений
		|		ПО СчетаФактурыКРегистрации.СчетФактураВыданный = ПослениеНомераИсправлений.СчетФактураВыданный";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ВозможноСоздатьСводный = Истина;
	ПараметрыСчетаФактуры  = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Исправление И Выборка.СчетФактураОснованиеНомер = Неопределено Тогда
			ШаблонОшибки = НСтр("ru = 'По документу %1 нельзя сформировать исправленную счет-фактуру, пока не сформирована исходная'");
			ТекстОшибки = СтрШаблон(ШаблонОшибки, Выборка.СчетФактураВыданный);
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
			Возврат Неопределено;
		КонецЕсли;
		
		Если Выборка.Исправление И Выборка.Количество() > 1 Тогда
			ВозможноСоздатьСводный = Ложь;
			Прервать;
		КонецЕсли;
		
		Если ПараметрыСчетаФактуры = Неопределено Тогда
			ПараметрыСчетаФактуры = Новый Структура;
			ПараметрыСчетаФактуры.Вставить("Организация",     Выборка.Организация);
			ПараметрыСчетаФактуры.Вставить("Комитент",        Выборка.Комитент);
			ПараметрыСчетаФактуры.Вставить("Дата",            Выборка.Дата);
			ПараметрыСчетаФактуры.Вставить("ДатаСоставления", Выборка.Дата);
			ПараметрыСчетаФактуры.Вставить("Валюта",          Выборка.Валюта);
			
			Если Выборка.Исправление Тогда
				ПараметрыСчетаФактуры.Вставить("Исправление",      Выборка.Исправление);
				ПараметрыСчетаФактуры.Вставить("ДатаСоставления",  Выборка.СчетФактураОснованиеДата);
				ПараметрыСчетаФактуры.Вставить("Номер",            Выборка.СчетФактураОснованиеНомер);
				ПараметрыСчетаФактуры.Вставить("ДатаИсправления",  Выборка.Дата);
				ПараметрыСчетаФактуры.Вставить("НомерИсправления",
					Формат(СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.НомерИсправления) + 1, "ЧЦ=10; ЧДЦ=0; ЧГ=0"));
			КонецЕсли;
			
			ДополнитьПараметрыСчетаФактурыДаннымиПокупателей(ПараметрыСчетаФактуры, Выборка);
		ИначеЕсли Выборка.Комитент <> ПараметрыСчетаФактуры.Комитент
				Или Выборка.Дата <> ПараметрыСчетаФактуры.ДатаСоставления
				Или Выборка.Валюта <> ПараметрыСчетаФактуры.Валюта Тогда
			ВозможноСоздатьСводный = Ложь;
			Прервать;
		Иначе
			ДополнитьПараметрыСчетаФактурыДаннымиПокупателей(ПараметрыСчетаФактуры, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ВозможноСоздатьСводный Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Для регистрации сводного счета-фактуры комитента параметры счетов-фактур в выбранных строках должны совпадать.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыСчетаФактуры;

КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьПараметрыСчетаФактурыДаннымиПокупателей(ПараметрыСчетаФактуры, ДанныеСтроки)
	
	Покупатели = Неопределено;
	Если ПараметрыСчетаФактуры.Свойство("Покупатели") Тогда
		Покупатели = ПараметрыСчетаФактуры.Покупатели;
	Иначе
		Покупатели = Новый Массив;
		ПараметрыСчетаФактуры.Вставить("Покупатели", Покупатели);
	КонецЕсли;
	
	ДанныеПокупателей = Новый Структура("Покупатель, СчетФактураВыданный, Субкомиссионер, СуммаСНДС, СуммаНДС");
	ЗаполнитьЗначенияСвойств(ДанныеПокупателей, ДанныеСтроки); 
	
	Покупатели.Добавить(ДанныеПокупателей);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеФормы()
	
	ЭлементыОрганизация = Новый Массив;
	ЭлементыОрганизация.Добавить("КРегистрацииОрганизация");
	ЭлементыОрганизация.Добавить("СписокОрганизация");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, ЭлементыОрганизация, "Видимость", НЕ ЗначениеЗаполнено(Организация));
	
	ДинамическиеСписки = Новый Массив;
	ДинамическиеСписки.Добавить("Список");
	ДинамическиеСписки.Добавить("КРегистрации");
	
	Для каждого Имя Из ДинамическиеСписки Цикл
		
		ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(ЭтаФорма[Имя]).Элементы;
		
		ГруппаОтбораПериода = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ЭлементыОтбора, "ГруппаОтбораПериода", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[Имя], 
			"Комитент", 
			Комитент, 
			ВидСравненияКомпоновкиДанных.Равно
			,
			,
			ЗначениеЗаполнено(Комитент));
			
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ЭтаФорма[Имя], 
			"Организация", 
			Организация, 
			ВидСравненияКомпоновкиДанных.Равно
			,
			,
			ЗначениеЗаполнено(Организация));
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбораПериода,
			"Дата", 
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно, 
			НачалоДня(НачалоПериода),
			,
			ЗначениеЗаполнено(НачалоПериода));
			
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			ГруппаОтбораПериода,
			"Дата", 
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, 
			КонецДня(КонецПериода),
			,
			ЗначениеЗаполнено(КонецПериода));
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатВыбора, "НачалоПериода, КонецПериода");
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Настройки["Организация"] = Организация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПоПараметрамФормы(Параметры)
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		СтруктураБыстрогоОтбора.Свойство("Организация", Организация);
		СтруктураБыстрогоОтбора.Свойство("НачалоПериода", НачалоПериода);
		СтруктураБыстрогоОтбора.Свойство("КонецПериода", КонецПериода);
	КонецЕсли;
	Если Параметры.Свойство("ОтображатьСтраницуКОформлению") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаКРегистрации;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
