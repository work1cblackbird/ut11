#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ДанныеУдаляемыхСтрок; // Для удаления акцизных марок

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДокумента = ИнтеграцияЕГАИС.ПредставлениеВалютыРегламентированногоУчета();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС());
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииПриЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	КонецЕсли;
	
	// Режим отладки
	РежимОтладки = ОбщегоНазначения.РежимОтладки()
	             И Пользователи.ЭтоПолноправныйПользователь();
	
	Элементы.СтраницаАкцизныеМарки.Видимость = РежимОтладки;
	Элементы.Идентификатор.Видимость         = РежимОтладки;
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Элементы.ДетализацияМинимальнойЦены.Видимость = Ложь;
	Если Не Объект.Ссылка.Пустая() И СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик Тогда
		ЗаполнитьМинимальныеЦеныВТоварах();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Не РедактированиеФормыНедоступно
		И Не ОграничениеРедактированияПоСтатусуПроверкиИПодбора Тогда
		СобытияФормИСКлиентПереопределяемый.ОбработкаОповещенияПодборНоменклатуры(
			Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект),
			ИмяСобытия, Параметр, Источник);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненОбменЕГАИС"
		И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	// Обновление гиперссылки на создание документа Возврат из регистра №2
	Если ИмяСобытия = "Запись_ВозвратИзРегистра2ЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеСостоянияЕГАИС"
		И Параметр.Основание = Объект.Ссылка Тогда
		
		СформироватьТекстДокументаЕГАИС();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ПредварительноеСохранениеРезультатовСканированияАлкогольнойПродукции"
		И ТипЗнч(Параметр) = Тип("ДокументСсылка.ТТНИсходящаяЕГАИС")
		И Объект.Ссылка = Параметр Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииПриЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	ОбновитьСтатусЕГАИС();
	СформироватьТекстДокументаЕГАИС();
	ОбновитьИнформациюОткрытияФормыСканирования();
	УправлениеДоступностьюЭлементовФормы(ЭтотОбъект);
	
	ИнтеграцияЕГАИС.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ОпределитьРасхожденияКоличествТоваров();
	
	ОбновитьПредставленияНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("Основание", Объект.ДокументОснование);
	Оповестить("Запись_ТТНИсходящаяЕГАИС", ПараметрыЗаписи, Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	// Конец ПодключаемоеОборудование
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СобытияФормИСКлиентПереопределяемый.ОбработкаВыбораПодборНоменклатуры(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект),
		ВыбранноеЗначение, ИсточникВыбора);
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора,ПараметрыЗаполнения);
	СобытияФормЕГАИСКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(
		Новый ОписаниеОповещения("Подключаемый_ОбработкаВыбораНоменклатуры", ЭтотОбъект), ВыбранноеЗначение, ИсточникВыбора);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеОбщегоНазначенияИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	
	ГрузоотправительПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	
	УстановитьОтборСтрок(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Товарно-транспортная накладная ЕГАИС (исходящая)"" не проведена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Товарно-транспортная накладная ЕГАИС (исходящая)"" была изменена. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбменДаннымиЕГАИСКлиент.ТекстДокументаЕГАИСОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АкцизныеМаркиЕГАИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеНакладныеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОформитьТранспортнуюНакладную" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание", Объект.Ссылка);
		
		ОткрытьФорму(
			"Документ.ТранспортнаяНакладнаяЕГАИС.Форма.ФормаДокумента", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыАлкогольнаяПродукция Тогда
		
		ЗаполнитьСписокВыбораАлкогольнойПродукции(ТекущиеДанные);
		
	КонецЕсли;
	
	СобытияФормЕГАИСКлиент.ОписаниеМинимальнойЦеныПодакцизныхТоваров(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторСтроки) Тогда
			ТекущиеДанные.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		ТекущиеДанные.КоличествоАкцизныхМарок = 0;
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущиеДанные);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.АлкогольнаяПродукция) Тогда
			ТекущиеДанные.НеупакованнаяПродукция = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	СобытияФормЕГАИСКлиент.УстановитьФорматРедактированияПоляКоличествоСУчетомУпаковок(ЭтотОбъект,
		ТекущиеДанные,
		"ТоварыКоличествоФакт",
		"ДоступноДробноеКоличество");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно
		Или ОграничениеРедактированияПоСтатусуПроверкиИПодбора Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	ДанныеУдаляемыхСтрок = Новый Структура;
	ДанныеУдаляемыхСтрок.Вставить("ИдентификаторыСтрок", Новый Массив);
	ДанныеУдаляемыхСтрок.Вставить("Справки2", Новый Массив);
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ИдентификаторСтроки) Тогда
			ДанныеУдаляемыхСтрок.ИдентификаторыСтрок.Добавить(СтрокаТЧ.ИдентификаторСтроки);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Справка2) Тогда
			ДанныеУдаляемыхСтрок.Справки2.Добавить(СтрокаТЧ.Справка2);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	Если ДанныеУдаляемыхСтрок <> Неопределено Тогда
		УдалитьАкцизныеМарки(ДанныеУдаляемыхСтрок);
	КонецЕсли;
	
	ДанныеУдаляемыхСтрок = Неопределено;
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СобытияФормЕГАИСКлиент.ПриИзмененииЦены(Элементы.Товары.ТекущиеДанные);
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СобытияФормЕГАИСКлиент.ПриИзмененииСуммы(Элементы.Товары.ТекущиеДанные);
	Объект.СуммаДокумента = Объект.Товары.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНоменклатуры(Идентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		ЭтотОбъект, ОбщегоНазначенияИСКлиентСервер.ВидыПродукцииЕГАИС(), СтандартнаяОбработка,,
		ИнтеграцияЕГАИСВызовСервера.РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(ТекущиеДанные.АлкогольнаяПродукция));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(
		ЭтотОбъект,
		ИнтеграцияЕГАИСВызовСервера.РеквизитыАлкогольнойПродукцииДляСозданияНоменклатуры(ТекущиеДанные.АлкогольнаяПродукция));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииХарактеристики(Идентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект, 
		Элементы.Товары.ТекущиеДанные,
		КэшированныеЗначения,
		ПараметрыЗаполнения)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.НачалоВыбораХарактеристики(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	СобытияФормЕГАИСКлиентПереопределяемый.ХарактеристикаСоздание(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииУпаковки(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
	ПриИзмененииУпаковки(Элементы.Товары.ТекущаяСтрока);
		
	СобытияФормЕГАИСКлиент.УстановитьФорматРедактированияПоляКоличествоСУчетомУпаковок(ЭтотОбъект,
		ТекущаяСтрока,
		"ТоварыКоличествоФакт",
		"ДоступноДробноеКоличество");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиентПереопределяемый.НачалоВыбораУпаковки(ЭтотОбъект, ТекущаяСтрока, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыАлкогольнаяПродукцияПриИзменении(Элемент)
	
	ПриИзмененииАлкогольнойПродукции(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	
	СобытияФормЕГАИСКлиент.УстановитьФорматРедактированияПоляКоличествоСУчетомУпаковок(ЭтотОбъект,
		Элементы.Товары.ТекущиеДанные,
		"ТоварыКоличествоФакт",
		"ДоступноДробноеКоличество");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ПриИзмененииКоличестваУпаковок(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2ПриИзменении(Элемент)
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Отбор.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСправка2ПокупателяПриИзменении(Элемент)
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если ОграничениеРедактированияПоСтатусуПроверкиИПодбора
		Или РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормЕГАИСКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТоварыАлкогольнаяПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СобытияФормЕГАИСКлиент.ОткрытьФормуВыбораАлкогольнойПродукции(
		Элемент,
		ИнтеграцияЕГАИСКлиент.РеквизитыНоменклатурыДляВыбораАлкогольнойПродукции(ТекущиеДанные.Номенклатура),
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.Записать");
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьСправки2(Команда)
	
	ВыполнитьКомандуПодобратьСправки2();
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияЕГАИСКлиент);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.Провести");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.ПровестиИЗакрыть");
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени( 
		"Документ.ТТНИсходящаяЕГАИС.ФормаДокумента.Команда.ОткрытьПодбор");
	
	СобытияФормЕГАИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	
	СобытияФормЕГАИСКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		Ложь,
		ИнтеграцияЕГАИСКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтсканироватьИПроверитьАлкогольнуюПродукцию(Команда)
		
		ТребуетсяВопрос = Ложь;
		
		Если Объект.Ссылка.Пустая() Тогда
			
			ТекстВопроса = НСтр("ru = 'Сканирование алкогольной продукции возможно только в записанной ""Товарно-транспортной накладной ЕГАИС (исходящая)"". Записать?'");
			ТребуетсяВопрос = Истина;
			
		ИначеЕсли Модифицированность Тогда
			
			ТекстПровестиЗаписать = ?(Объект.Проведен, НСтр("ru = 'Провести'"), НСтр("ru = 'Записать'"));
			
			ТекстВопроса = СтрШаблон(НСтр("ru = '""Товарно-транспортная накладная ЕГАИС (исходящая)"" был изменена. %1?'"), ТекстПровестиЗаписать);
			ТребуетсяВопрос = Истина;
			
		КонецЕсли;
		
		Если ТребуетсяВопрос Тогда
			
			ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВопросПриОткрытииФормыСканированияИПроверкиАлкогольнойПродукцииЗавершение", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ОткрытьФормуСканированияАлкогольнойПродукции();
			
		КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат(Команда)
	
	ОткрытьФормуСканированияАлкогольнойПродукцииВозврат();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Табличная часть будет перезаполнена. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Текст, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборСерийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормыУказанияСерий = ДополнительныеПараметры.ПараметрыФормыУказанияСерий;
	ЗначениеВозврата = Результат;
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий, КэшированныеЗначения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийНаСервере(ПараметрыФормыУказанияСерий, КэшированныеЗначения)
	
	ИнтеграцияИСПереопределяемый.ОбработатьУказаниеСерий(ЭтотОбъект, ПараметрыФормыУказанияСерий, КэшированныеЗначения);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	СобытияФормЕГАИС.УстановитьУсловноеОформлениеПоляКоличествоСУчетомУпаковок(ЭтотОбъект,
		"Объект.Товары.НеупакованнаяПродукция",
		"ТоварыКоличествоФакт,ТоварыКоличествоЕГАИС",
		"Объект.Товары.ДоступноДробноеКоличество");
	
	СобытияФормЕГАИС.УстановитьУсловноеОформлениеПоляЕдиницаИзмеренияЕГАИС(ЭтотОбъект);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАлкогольнаяПродукция.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.АлкогольнаяПродукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",                 Новый ПолеКомпоновкиДанных("Объект.Товары.СопоставлениеАлкогольнаяПродукция"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыАлкогольнаяПродукция.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Номенклатура");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	СобытияФормЕГАИС.УстановитьУсловноеОформлениеПоляЦена(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииПриЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ЗаполнитьОтборСтрок();
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	Элементы.СтраницаКомментарий.Картинка = ОбщегоНазначенияКлиентСервер.КартинкаКомментария(Объект.Комментарий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ОпределитьРасхожденияКоличествТоваров();
	
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	УстановитьВидимостьИнформацииОСканированииDataMatrix();
	
	ИнтеграцияЕГАИС.ЗаполнитьАлкогольнуюПродукцию(Объект.Товары);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ТТНИсходящаяЕГАИС);
	
КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаКлиенте
Процедура ЗаполнитьСписокВыбораАлкогольнойПродукции(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыАлкогольнаяПродукция.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	СписокВыбораНоменклатура.ЗагрузитьЗначения(ТекущаяСтрока.НоменклатураДляВыбора.ВыгрузитьЗначения());
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаВыбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.Номенклатура = Результат;
	
	Идентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	
	ПриИзмененииНоменклатуры(Идентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНоменклатуры(Идентификатор, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц        = Истина;
	ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ            = Истина;
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
	ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = Истина;
	ПараметрыЗаполнения.ЗаполнитьАртикул                   = Истина;
	ПараметрыЗаполнения.ЗаполнитьКод                       = Истина;
	
	СобытияФормЕГАИСПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХарактеристики(Идентификатор, КэшированныеЗначения)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СобытияФормЕГАИСПереопределяемый.ПриИзмененииХарактеристики(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииАлкогольнойПродукции(ИдентификаторСтроки)
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	ОбработатьСвязанныеРеквизитыПриИзмененииАлкогольнойПродукции(ИдентификаторСтроки);
	
	ИнтеграцияЕГАИСКлиентСервер.ОкруглитьКоличествоДляУпакованнойПродукцииСУчетомУпаковок(Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки),
		"НеупакованнаяПродукция",
		"Количество,КоличествоФакт",
		"ДоступноДробноеКоличество");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУпаковки(Идентификатор)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	
	АкцизныеМаркиЕГАИС.УстановитьДоступностьДробногоКоличестваВСтроке(ТекущаяСтрока, Истина);
	
	ИнтеграцияЕГАИСКлиентСервер.ОкруглитьКоличествоДляУпакованнойПродукцииСУчетомУпаковок(
		ТекущаяСтрока,
		"НеупакованнаяПродукция",
		"Количество,КоличествоФакт",
		"ДоступноДробноеКоличество");
	
	РассчитатьКоличествоЕГАИС(ТекущаяСтрока);
	
	АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьКоличествоЕГАИС(ТекущаяСтрока)
	
	ТекущаяСтрока.КоличествоЕГАИС = ТекущаяСтрока.Количество * ТекущаяСтрока.КоэффициентЕГАИС;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСвязанныеРеквизитыПриИзмененииАлкогольнойПродукции(ИдентификаторСтроки)
	
	ТекущаяСтрока = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ЗначениеЗаполнено(ТекущаяСтрока.Справка2) Тогда
		АлкогольнаяПродукцияСправки2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока.Справка2, "АлкогольнаяПродукция");
		Если АлкогольнаяПродукцияСправки2 <> ТекущаяСтрока.АлкогольнаяПродукция Тогда
			ТекущаяСтрока.Справка2 = Справочники.Справки2ЕГАИС.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваУпаковок(ТекущаяСтрока)
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьСумму            = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц = Истина;
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущаяСтрока, КэшированныеЗначения,
		ПараметрыЗаполнения);
	
	РассчитатьКоличествоЕГАИС(ТекущаяСтрока);
	
	АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(ТекущаяСтрока);
	
	ОпределитьРасхождениеКоличества();
	
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииНаСервере()
	
	СформироватьТекстДокументаЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьРасхождениеКоличества()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ТекущиеДанные.РасхождениеКоличества = (ТекущиеДанные.КоличествоУпаковок <> ТекущиеДанные.КоличествоФакт);
	
	Если НЕ ТекущиеДанные.РасхождениеКоличества И (ОтборСтрок = "ТолькоРасхождения") Тогда
		УстановитьОтборСтрок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРасхожденияКоличествТоваров()
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.РасхождениеКоличества = СтрокаТовары.КоличествоУпаковок <> СтрокаТовары.КоличествоФакт;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьСтатусЕГАИС()
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусЕГАИС = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	Если Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовЕГАИС КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ", Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЕГАИС.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусЕГАИС = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной);
	СтатусЕГАИСПредставление = ИнтеграцияЕГАИС.ПредставлениеСтатусаЕГАИС(
		СтатусЕГАИС,
		ДальнейшееДействие,
		ДопустимыеДействия);
	
	Элементы.ФормаАрхивироватьДокумент.Видимость = ЗначениеЗаполнено(Объект.Ссылка)
		И МенеджерОбъекта.КонечныеСтатусы(Ложь).Найти(СтатусЕГАИС) = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		РезультатыПроверкиЦен = РезультатыПроверкиМиниальныхЦен();
		
		Если РезультатыПроверкиЦен.ЕстьНарушения Тогда
			ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ПроверкаМинимальныхЦенЗавершение",
				ЭтотОбъект,
				Новый Структура("СписокНарушений", РезультатыПроверкиЦен.СписокНарушений));
				
			ТекстВопроса = НСтр("ru = 'Цены, указанные в документе, меньше установленных в Приказе Министерства финансов Российской Федерации №235н от 07 октября 2020 г.'");
			
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Передать данные'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, Кнопки);
			
		Иначе
			ПодготовитьКПередачеПослеПроверкиМинимальныхЦен();
			
		КонецЕсли;
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьАктОРасхождениях" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеАктОРасхождениях"),
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтАктаОРасхождениях" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтАктаОРасхождениях"),
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьЗапросНаОтменуПроведения" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПодтвердитеЗапросНаОтменуПроведения"),
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтЗапросаНаОтменуПроведения" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтЗапросаНаОтменуПроведения"),
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтказатьсяОтНакладной" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОткажитесьОтНакладной"),
			УникальныйИдентификатор);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		ОткрытьФорму("Справочник.ЕГАИСПрисоединенныеФайлы.Форма.ФормаОшибки", ПараметрыОткрытияФормы, ЭтотОбъект);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачу" Тогда
		
		ОбменДаннымиЕГАИСКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОбработкиОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаМинимальныхЦенЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПодготовитьКПередачеПослеПроверкиМинимальныхЦен();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		ИнтеграцияЕГАИСКлиентСервер.ЗаполнитьМинимальныеЦеныВТоварах(Объект.Товары, ДополнительныеПараметры.СписокНарушений);
		Элементы.ДетализацияМинимальнойЦены.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьКПередачеПослеПроверкиМинимальныхЦен()
	
	ОбменДаннымиЕГАИСКлиент.ПодготовитьКПередаче(
			Объект.Ссылка,
			ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные"),
			УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборСтрок

&НаСервере
Процедура ЗаполнитьОтборСтрок()
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	ОтборСтрокСписокВыбора.Очистить();
	ОтборСтрокСписокВыбора.Добавить("Все", НСтр("ru='Все товары'"));
	
	ДобавитьОтборСтрокТолькоРасхождения();
	
	ОтборСтрок = "Все";
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтборСтрокТолькоРасхождения(ИндексПозиции = Неопределено)
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	
	ЭлементТолькоРасхождения = ОтборСтрокСписокВыбора.НайтиПоЗначению("ТолькоРасхождения");
	
	Если ЭлементТолькоРасхождения = Неопределено Тогда
		Если ИндексПозиции = Неопределено Тогда
			ОтборСтрокСписокВыбора.Добавить("ТолькоРасхождения", НСтр("ru='Только расхождения'"));
		Иначе
			ОтборСтрокСписокВыбора.Вставить(ИндексПозиции, "ТолькоРасхождения", НСтр("ru='Только расхождения'"));
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УдалитьОтборСтрокТолькоРасхождения()
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	
	ЭлементТолькоРасхождения = ОтборСтрокСписокВыбора.НайтиПоЗначению("ТолькоРасхождения");
	
	Если ЭлементТолькоРасхождения <> Неопределено Тогда
		ОтборСтрокСписокВыбора.Удалить(ЭлементТолькоРасхождения);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция  ЕстьОтборСтрокТолькоРасхождения()
	
	ОтборСтрокСписокВыбора = Элементы.ОтборСтрок.СписокВыбора;
	
	Возврат ОтборСтрокСписокВыбора.НайтиПоЗначению("ТолькоРасхождения") <> Неопределено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборСтрок(Форма)
	
	Если Форма.ОтборСтрок = "ТолькоРасхождения" Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("РасхождениеКоличества", Истина);
		Форма.Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Форма.Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьОтбораСтрок()
	
	ОтборСтрокКоличествоБыло = Элементы.ОтборСтрок.СписокВыбора.Количество();
	
	Если Объект.ЕстьРасхождения Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("РасхождениеКоличества", Истина);
		
		КоличествоСтрокСРасхождением = Объект.Товары.НайтиСтроки(ПараметрыПоиска).Количество();
		
		Если КоличествоСтрокСРасхождением = 0 Тогда
			УдалитьОтборСтрокТолькоРасхождения();
		Иначе
			ДобавитьОтборСтрокТолькоРасхождения();
		КонецЕсли;
	Иначе
		УдалитьОтборСтрокТолькоРасхождения();
	КонецЕсли;
	
	ОтборСтрокКоличествоСтало = Элементы.ОтборСтрок.СписокВыбора.Количество();
	
	Если ОтборСтрокКоличествоБыло <> ОтборСтрокКоличествоСтало Тогда
		ОтборСтрок = "Все";
		УстановитьОтборСтрок(ЭтотОбъект);
	КонецЕсли;
	
	Элементы.ОтборСтрок.Видимость = (ОтборСтрокКоличествоСтало <> 1);

КонецПроцедуры

#КонецОбласти

#Область ПодборСправок2

// Подобрать справки 2 в табличной части Товары.
// 
// Возвращаемое значение:
//  Булево - Истина, если требуется задать пользователю вопрос о вводе на основании документа на возврат из регистра №2.
//
&НаСервере
Функция ПодобратьСправки2НаСервере()
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("СправкиЗаполнены", Ложь);
	ВозвращаемоеЗначение.Вставить("ЗадатьВопросОВводеНаОсновании", Ложь);
	
	СправкиЗаполнены = Документы.ТТНИсходящаяЕГАИС.ПодобратьСправки2(Объект);
	
	СформироватьТекстДокументаЕГАИС();
	
	Если СправкиЗаполнены Тогда
		
		ВозвращаемоеЗначение.СправкиЗаполнены              = СправкиЗаполнены;
		ВозвращаемоеЗначение.ЗадатьВопросОВводеНаОсновании = Ложь;
		
		Возврат ВозвращаемоеЗначение;
		
	Иначе
		
		СтруктураПересчетаСуммы = ИнтеграцияЕГАИСКлиентСервер.СтруктураПересчетаСуммы("КоличествоУпаковок");
		
		ПараметрыОтбора = Новый Структура("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
		ТоварыБезСерий = Объект.Товары.Выгрузить(ПараметрыОтбора);
		УдалосьЗаполнитьСправки = ИнтеграцияЕГАИС.ПодобратьСправки2ДляВозвратаИзРегистра2(
			ТоварыБезСерий,
			Объект.Грузоотправитель,
			Неопределено,
			СтруктураПересчетаСуммы);
		
		ЗадатьВопросОВводеНаОсновании = УдалосьЗаполнитьСправки
		                              И ИнтеграцияЕГАИС.ИспользоватьРегистр2(Объект.Грузоотправитель);
		
		ВозвращаемоеЗначение.СправкиЗаполнены              = СправкиЗаполнены;
		ВозвращаемоеЗначение.ЗадатьВопросОВводеНаОсновании = ЗадатьВопросОВводеНаОсновании;
		
		Возврат ВозвращаемоеЗначение;
		
	КонецЕсли;
	
КонецФункции

// Обработчик оповещения при закрытии формы ПредложениеНаВозвратИзРегистра2.
//
// Параметры:
//  Результат - Структура - Параметры, переданные из формы ПредложениеНаВозвратИзРегистра2.
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры.
//
&НаКлиенте
Процедура ПриЗакрытииФормыПредложениеНаВозвратИзРегистра2(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		
		ВыполнитьКомандуПодобратьСправки2();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуПодобратьСправки2()
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Грузоотправитель""'"),
			Объект.Ссылка, "Объект.Грузоотправитель");
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет данных для подбора справок 2'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,"Товары", "Объект");
		Возврат;
	КонецЕсли;
	
	РезультатЗаполнения = ПодобратьСправки2НаСервере();
	
	ИнтеграцияЕГАИСКлиент.СообщитьОЗавершенииЗаполненияСправок(РезультатЗаполнения.СправкиЗаполнены);
	
	Если РезультатЗаполнения.ЗадатьВопросОВводеНаОсновании Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыПредложениеНаВозвратИзРегистра2", ЭтотОбъект);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДокументОснование", Объект.Ссылка);
		
		ОткрытьФорму(
			"Документ.ТТНИсходящаяЕГАИС.Форма.ПредложениеНаВозвратИзРегистра2",
			ПараметрыОткрытия,
			ЭтотОбъект,,,,
			ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СканированиеАлкогольнойПродукции

&НаКлиенте
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СканированиеАлкогольнойПродукцииПослеЗакрытияНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытияНаСервере(АдресВременногоХранилища)
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСканированияАлкогольнойПродукции()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.ОткрытьФормуСканированияАлкогольнойПродукции");
	
	Параметрыоткрытия = ИнтеграцияЕГАИСКлиент.ПараметрыПроверкиИПодбораАлкогольнойПродукции(Объект.Грузоотправитель, Объект.Ссылка);
	ПараметрыОткрытия.КонтролироватьСканируемуюПродукциюПоДокументуОснованию = ЗначениеЗаполнено(Объект.ДокументОснование);
	ПараметрыОткрытия.РедактированиеФормыНедоступно                          = РедактированиеФормыНедоступно;
	
	Если Объект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется") Тогда
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки();
	ИначеЕсли Объект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		ПараметрыОткрытия.НачальныйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	Если РедактированиеФормыНедоступно Или Не ПравоИзменения Тогда
		ПараметрыОткрытия.РежимПросмотра = Истина;
		ПараметрыОткрытия.ПроверятьНеобходимостьПеремаркировки = Ложь;
	КонецЕсли;

	ОткрытьФорму(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииПослеЗакрытия", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыСканирования()
	
	Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Истина;
	Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Ложь;
	
	ТекстНадписи = "";
	
	Если Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить подбор и проверку алкогольной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты подбора алкогольной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли (СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик
	      Или СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи) Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Подобрать и проверить алкогольную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		ИначеЕсли Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты подбора алкогольной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли Объект.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты подбора алкогольной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Элементы.ГруппаСканированиеИПроверкаАлкогольнойПродукции.Видимость Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукцию.Заголовок = ТекстНадписи;
	КонецЕсли;
	
	Если Объект.СтатусПроверкиИПодбораАктРасхождений = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Истина;
		ТекстНадписи = НСтр("ru = 'Продолжить проверку расхождений'");
	ИначеЕсли Объект.СтатусПроверкиИПодбораАктРасхождений = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Истина;
		ТекстНадписи = НСтр("ru = 'Результат проверки расхождений'");
	ИначеЕсли (СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят) Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость = Истина;
		ТекстНадписи = НСтр("ru = 'Проверить акт расхождений'");
	КонецЕсли;
	
	Если Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Видимость Тогда
		Элементы.ОтсканироватьИПроверитьАлкогольнуюПродукциюВозврат.Заголовок = ТекстНадписи;
		Элементы.КомандыСканирования.Вид = ВидГруппыФормы.Подменю;
	Иначе 
		Элементы.КомандыСканирования.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриОткрытииФормыСканированияИПроверкиАлкогольнойПродукцииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ЗаписаноУспешно = Ложь;
	
	Если Объект.Проведен Тогда
		Если ПроверитьЗаполнение() Тогда
			ЗаписаноУспешно = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		КонецЕсли;
	Иначе
		ЗаписаноУспешно = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	КонецЕсли;

	Если ЗаписаноУспешно Тогда
		ОткрытьФормуСканированияАлкогольнойПродукции();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСканированияАлкогольнойПродукцииВозврат()
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ТТНИсходящаяЕГАИС.Форма.ФормаДокумента.ОткрытьФормуСканированияАлкогольнойПродукцииВозврат");
	
	ПараметрыОткрытия = ИнтеграцияЕГАИСКлиент.ПараметрыПроверкиИПодбораАлкогольнойПродукции(Объект.Грузоотправитель, Объект.Ссылка);	
	ПараметрыОткрытия.АдресДанныхПроверяемойАлкогольнойПродукции = АлкогольнаяПродукцияАктаРасхождений();
	ПараметрыОткрытия.РедактированиеФормыНедоступно = РедактированиеФормыНедоступно;
	ПараметрыОткрытия.РежимПодбораСуществующихУпаковок = Ложь;
	ПараметрыОткрытия.ПостфиксСохранения = "АктРасхождений";
	
	Если Объект.СтатусПроверкиИПодбораАктРасхождений = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется") Тогда
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки("АктРасхождений");
	ИначеЕсли Объект.СтатусПроверкиИПодбораАктРасхождений = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		ПараметрыОткрытия.АдресПредварительноСохраненныхРезультатовПроверки = АдресДанныхПроверки("АктРасхождений");
		ПараметрыОткрытия.НачальныйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	КонецЕсли;
	
	Если Не ПравоИзменения Тогда
		ПараметрыОткрытия.РежимПросмотра = Истина;
		ПараметрыОткрытия.ПроверятьНеобходимостьПеремаркировки = Ложь;
	КонецЕсли;
	
	ОткрытьФорму(
		"Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор",
		ПараметрыОткрытия, ЭтотОбъект, УникальныйИдентификатор,,,
		Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытия", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Функция АлкогольнаяПродукцияАктаРасхождений()
	Возврат АлкогольнаяПродукцияАктаРасхожденийСервер();
КонецФункции

&НаСервере
Процедура ОбновитьУдалитьСтроку(ДеревоУпаковок, Строка, УдалитьГруппы, НовыйРодитель, МаркированныеТовары)

	Если УдалитьГруппы.Найти(Строка) <> Неопределено Тогда
		НоваяСтрока = ДеревоУпаковок;
	ИначеЕсли Строка.Родитель = НовыйРодитель ИЛИ(Строка.Родитель = Неопределено И НовыйРодитель = ДеревоУпаковок) Тогда 
		Возврат;
	Иначе 
		НоваяСтрока = НовыйРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		СтрокаМаркированныйТовар = МаркированныеТовары.Найти(Строка.ШтрихкодУпаковки, "ШтрихкодУпаковки");
		Если СтрокаМаркированныйТовар <> Неопределено Тогда
			СтрокаМаркированныйТовар.СтрокаДерева = НоваяСтрока;
			СтрокаМаркированныйТовар.УпаковкаВерхнегоУровня = НоваяСтрока.Родитель;
			Если СтрокаМаркированныйТовар.УпаковкаВерхнегоУровня <> Неопределено Тогда
				Пока СтрокаМаркированныйТовар.УпаковкаВерхнегоУровня.Родитель <> Неопределено Цикл
					СтрокаМаркированныйТовар.УпаковкаВерхнегоУровня = СтрокаМаркированныйТовар.УпаковкаВерхнегоУровня.Родитель;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Для Каждого ПодчиненныйЭлемент Из Строка.Строки Цикл 
		ОбновитьУдалитьСтроку(ДеревоУпаковок, ПодчиненныйЭлемент, УдалитьГруппы, НоваяСтрока, МаркированныеТовары);
	КонецЦикла;
	Если Строка.Родитель = Неопределено Тогда
		ДеревоУпаковок.Строки.Удалить(Строка);
	Иначе 
		Строка.Родитель.Строки.Удалить(Строка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АлкогольнаяПродукцияАктаРасхожденийСервер()
	
	ДанныеПроверяемогоДокумента = Документы.ТТНИсходящаяЕГАИС.ШтрихкодыУпаковок(Объект.Ссылка, Ложь);
	МаркиОставить = Документы.ТТНИсходящаяЕГАИС.НеподтвержденныеАкцизныеМарки(Объект.Ссылка);
	ДанныеПроверяемогоДокумента.Вставить("ТаблицаАлкогольнойПродукцииКОпределениюСправок2", Новый Массив);
	
	МассивСтрокУдалить = Новый Массив;
	ГруппыКУдалению = Новый Массив;
	Для Каждого СтрокаТЧ Из ДанныеПроверяемогоДокумента.МаркированныеТовары Цикл
		Если МаркиОставить.Получить(СтрокаТЧ.Штрихкод)=Неопределено Тогда
			МассивСтрокУдалить.Добавить(СтрокаТЧ);
			Группа = СтрокаТЧ.СтрокаДерева.Родитель;
			Пока Группа<>Неопределено И ГруппыКУдалению.Найти(Группа) = Неопределено Цикл
				ГруппыКУдалению.Добавить(Группа);
				Группа = Группа.Родитель;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из МассивСтрокУдалить Цикл
		Группа = СтрокаТЧ.СтрокаДерева.Родитель;
		Если Группа = Неопределено Тогда
			ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки.Удалить(СтрокаТЧ.СтрокаДерева)
		Иначе
			Группа.Строки.Удалить(СтрокаТЧ.СтрокаДерева);
		КонецЕсли;
		ДанныеПроверяемогоДокумента.МаркированныеТовары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из ДанныеПроверяемогоДокумента.ДеревоУпаковок.Строки Цикл 
		ОбновитьУдалитьСтроку(
			ДанныеПроверяемогоДокумента.ДеревоУпаковок, 
			СтрокаДерева, 
			ГруппыКУдалению, 
			ДанныеПроверяемогоДокумента.ДеревоУпаковок,
			ДанныеПроверяемогоДокумента.МаркированныеТовары);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеПроверяемогоДокумента,УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция АдресДанныхПроверки(Постфикс = "")
	
	РедактируемыйОбъект = РеквизитФормыВЗначение("Объект");
	ДанныеХранилища = РедактируемыйОбъект["ДанныеПроверкиИПодбора"+Постфикс].Получить();
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеХранилища, УникальныйИдентификатор);

КонецФункции 

&НаКлиенте
Процедура СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытияНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура СканированиеАлкогольнойПродукцииАктаРасхожденийПослеЗакрытияНаСервере(АдресВременногоХранилища)
	
	Прочитать();
	
КонецПроцедуры

#КонецОбласти


#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода(,,"");
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования)
	
	Если Не РезультатОбработкиШтрихкода.ТребуетсяОбработкаШтрихкода Тогда
		
		ОбработатьСтрокиТЧ(
			РезультатОбработкиШтрихкода.ДобавленныеСтроки,
			РезультатОбработкиШтрихкода.ИзмененныеСтроки,
			КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных() Экспорт
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаТСД

&НаСервере
Процедура ОбработатьСтрокиТЧ(ДобавленныеСтроки, ИзмененныеСтроки, КэшированныеЗначения = Неопределено)
	
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		
		ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьСумму                   = Истина;
		ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц        = Истина;
		ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ            = Истина;
		ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию      = Истина;
		ПараметрыЗаполнения.ПроверитьСериюРассчитатьСтатус     = Истина;
		ПараметрыЗаполнения.ЗаполнитьАртикул                   = Истина;
		ПараметрыЗаполнения.ЗаполнитьКод                       = Истина;
		
		СобытияФормЕГАИСПереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, СтрокаТЧ, КэшированныеЗначения,
			ПараметрыЗаполнения, ПараметрыУказанияСерий);
		
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(СтрокаТЧ);
		
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ИзмененныеСтроки Цикл
		
		ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
		ПараметрыЗаполнения.ПересчитатьСумму              = Истина;
		ПараметрыЗаполнения.ПересчитатьКоличествоУпаковок = Истина;
		
		СобытияФормЕГАИСПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, СтрокаТЧ, КэшированныеЗначения,
			ПараметрыЗаполнения);
		
		АкцизныеМаркиКлиентСервер.ЗаполнитьИндексАкцизнойМарки(СтрокаТЧ);
		
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
		Элементы.Товары.ТекущаяСтрока = ДобавленныеСтроки[ДобавленныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	ИначеЕсли ИзмененныеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ИзмененныеСтроки[ИзмененныеСтроки.Количество() - 1].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьАкцизныеМарки(Данные)
	
	АкцизныеМаркиЕГАИС.УдалитьАкцизныеМаркиЧека(
		ЭтотОбъект,
		Данные.ИдентификаторыСтрок);
	
	АкцизныеМаркиЕГАИС.УдалитьАкцизныеМаркиПоСправкам2(
		ЭтотОбъект,
		Данные.Справки2);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Подбор

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, ПараметрыЗаполнения)
	
	СобытияФормЕГАИСПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ЗаполнитьИндексАкцизнойМарки = Истина;
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц  = Истина;
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормЕГАИСКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(ТаблицаТоваров, ДополнительныеПараметры) Экспорт
	
	Если ТаблицаТоваров.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	
	ЗагрузкаДанныхТСД = ОбработатьПолученныеДанныеТСДНаСервере(ТаблицаТоваров, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		
		Если ТипЗнч(ЗагрузкаДанныхТСД.ТекстОбщейОшибки) = Тип("ФорматированнаяСтрока") Тогда
			ПараметрыОткрытияФормы.ТекстОшибкиФорматированнаяСтрока = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		Иначе
			ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		
		Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		Иначе
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(
				ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Алкогольная"));
		КонецЕсли;
		
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		ЗагрузкаДанныхТСД = Неопределено;
		
		Возврат;
		
	КонецЕсли;
	
	ОбработатьПолученныеДанныеТСД();
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовленныеДанныеПартионнойПродукцииТСД()
	
	Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() = 0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
		
	ПараметрыЗаполнения = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоЕдиниц   = Истина;
	ПараметрыЗаполнения.МаркируемаяПродукцияВТЧ       = Истина;
	ПараметрыЗаполнения.ЗаполнитьАлкогольнуюПродукцию = Истина;
	
	СтруктураДействий = Неопределено;
	ШтрихкодированиеНоменклатурыЕГАИСКлиентПереопределяемый.ПодготовитьДанныеДляОбработкиТаблицыТоваровПолученнойИзТСД(
		ЭтотОбъект,
		ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция,
		КэшированныеЗначения,
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	Возврат СтруктураДействий;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД()
	
	Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
		
		ДанныеПартионнойПродукции = ПодготовленныеДанныеПартионнойПродукцииТСД();
		
		ОбработатьДанныеТСДНаСервере(ДанныеПартионнойПродукции, КэшированныеЗначения);
		
		Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
			
			ШтрихкодированиеИСКлиентПереопределяемый.ПослеОбработкиТаблицыТоваровПолученнойИзТСД(
				ЭтотОбъект,
				ДанныеПартионнойПродукции,
				КэшированныеЗначения);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.МаркируемаяАлкогольнаяПродукцияДопУказание.Количество() > 0 Тогда
		
		Подключаемый_ПослеОбработкиШтрихкодаТСД();
		
	Иначе
		
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДанныеТСДНаСервере(ДанныеПартионнойПродукции, КэшированныеЗначения)
	
	Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
		
		ШтрихкодированиеИСПереопределяемый.ОбработатьДанныеИзТСД(
			ЭтотОбъект, ДанныеПартионнойПродукции, КэшированныеЗначения);
		
		АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеОбработкиШтрихкодаТСД()
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	
	Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.МаркируемаяАлкогольнаяПродукцияДопУказание.Количество() Тогда
		
		ДанныеШтрихкода = ЗагрузкаДанныхТСД.МаркируемаяАлкогольнаяПродукцияДопУказание[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента].РезультатОбработки.ДанныеШтрихКода;
		
		ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
		
		РезультатОбработкиШтрихкода = РезультатОбработкиШтрихкодаДопУказаниеТСД(ДанныеШтрихКода, КэшированныеЗначения, ПараметрыСканирования);
		
		ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ДанныеШтрихкода, РезультатОбработкиШтрихкода, ПараметрыСканирования);
		
		ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
		
	Иначе
		
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		
		ЗагрузкаДанныхТСД = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, КэшированныеЗначения)
	
	ПараметрыПроверки = ИнтеграцияЕГАИС.ПараметрыПроверкиДанныхТСД(ЭтотОбъект, Объект.Грузоотправитель);
	
	Результат = ИнтеграцияЕГАИС.ОбработатьПолученныеДанныеТСД(ШтрихкодыТСД, ПараметрыПроверки);
	
	Если Результат.ЕстьОшибкиВДереве
		Или Результат.ОбщаяОшибка Тогда
		Возврат Результат;
	КонецЕсли;
	
	Модифицированность = Истина;
	ОбработатьСтрокиТЧ(Результат.ДобавленныеСтроки, Результат.ИзмененныеСтроки, КэшированныеЗначения);
	Результат.Удалить("ДобавленныеСтроки");
	Результат.Удалить("ИзмененныеСтроки");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РезультатОбработкиШтрихкодаДопУказаниеТСД(ДанныеШтрихКода, КэшированныеЗначения, ПараметрыСканирования)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.РезультатОбработкиШтрихкодаМаркируемойПродукции(
		ЭтотОбъект,
		ДанныеШтрихкода,
		ПараметрыСканирования);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

#КонецОбласти

#Область ДокументОснование

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора)
		И ДанныеВыбора <> Объект.ДокументОснование Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)Тогда
		Если ТипЗнч(ДополнительныеПараметры) <> Тип("Структура")
			Или ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
				ПерезаполнитьПоОснованиюСервер();
		Иначе
			НастроитьЭлементыФормы(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	АкцизныеМаркиЕГАИС.ЗаполнитьСлужебныеРеквизиты(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	КонецЕсли;
	
	ОбновитьСтатусЕГАИС();
	ОбновитьВидимостьОтбораСтрок();
	СформироватьТекстДокументаЕГАИС();
	ОбновитьИнформациюОткрытияФормыСканирования();
	УправлениеДоступностьюЭлементовФормы(ЭтотОбъект);
	УстановитьВидимостьКоличестваФакт();
	СформироватьСведенияОТранспортныхНакладных();
	
	Элементы.ТипДоставки.Видимость = ЗначениеЗаполнено(Объект.ИдентификаторЕГАИС) И ЗначениеЗаполнено(Объект.ТипДоставки);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТекстДокументаЕГАИС()
	
	ТекстДокументаЕГАИС = "";
	
	ИспользоватьРегистр2 = ИнтеграцияЕГАИС.ИспользоватьРегистр2(Объект.Грузоотправитель);
	
	ПараметрыОтбора = Новый Структура("Справка2", Справочники.Справки2ЕГАИС.ПустаяСсылка());
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыОтбора);
	
	Если Не (ИспользоватьРегистр2 И НайденныеСтроки.Количество() > 0) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СтатусыОформленияДокументовЕГАИС.Документ,
	|	СтатусыОформленияДокументовЕГАИС.СтатусОформления КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|ГДЕ
	|	СтатусыОформленияДокументовЕГАИС.Основание = &Основание
	|");
	
	Запрос.УстановитьПараметр("Основание", Объект.Ссылка);
	ДанныеПоСтатусам = Запрос.Выполнить().Выгрузить();
	
	СтатусыОформления = Новый Структура;
	Для Каждого СтрокаТЧ Из ДанныеПоСтатусам Цикл
		СтатусыОформления.Вставить(СтрокаТЧ.Документ.Метаданные().Имя, СтрокаТЧ.Статус);
	КонецЦикла;
	
	ДокументыПоОснованию = ИнтеграцияЕГАИСВызовСервера.ДокументыПоОснованию(Объект.Ссылка);
	Данные = ИнтеграцияЕГАИС.ДанныеДокументаЕГАИС(Метаданные.Документы.ВозвратИзРегистра2ЕГАИС, ДокументыПоОснованию, СтатусыОформления);
	
	Если Данные = Неопределено Тогда
		ТекстДокументаЕГАИС = Новый ФорматированнаяСтрока("");
	Иначе
		ТекстДокументаЕГАИС = Данные.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСведенияОТранспортныхНакладных()
	
	СоставСтроки = Новый Массив;
	
	Если Объект.ТоварВПутиПринадлежитГрузополучателю Тогда
		СоставСтроки.Добавить(
			Новый ФорматированнаяСтрока(
				НСтр("ru = 'Не требуется, транспортную накладную оформляет грузополучатель'")));
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументТранспортнаяНакладнаяЕГАИС.Ссылка                               КАК Ссылка,
		|	ДокументТранспортнаяНакладнаяЕГАИС.НомерТН                              КАК НомерТН,
		|	ДокументТранспортнаяНакладнаяЕГАИС.ДатаТН                               КАК ДатаТН,
		|	ДокументТранспортнаяНакладнаяЕГАИС.ТоварВПутиПринадлежитГрузополучателю КАК ТоварВПутиПринадлежитГрузополучателю,
		|	
		|	СтатусыДокументовЕГАИС.Статус              КАК СтатусЕГАИС,
		|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 КАК ДальнейшееДействиеЕГАИС1,
		|	СтатусыДокументовЕГАИС.ДальнейшееДействие2 КАК ДальнейшееДействиеЕГАИС2,
		|	СтатусыДокументовЕГАИС.ДальнейшееДействие3 КАК ДальнейшееДействиеЕГАИС3
		|ИЗ
		|	Документ.ТранспортнаяНакладнаяЕГАИС КАК ДокументТранспортнаяНакладнаяЕГАИС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
		|		ПО (СтатусыДокументовЕГАИС.Документ = ДокументТранспортнаяНакладнаяЕГАИС.Ссылка)
		|ГДЕ
		|	ДокументТранспортнаяНакладнаяЕГАИС.ТоварноТранспортнаяНакладная = &Ссылка
		|	И НЕ СтатусыДокументовЕГАИС.Статус В (&КонечныеСтатусы)
		|	И НЕ ДокументТранспортнаяНакладнаяЕГАИС.ПометкаУдаления
		|	
		|УПОРЯДОЧИТЬ ПО
		|	ДокументТранспортнаяНакладнаяЕГАИС.ДатаТН ВОЗР,
		|	ДокументТранспортнаяНакладнаяЕГАИС.Дата ВОЗР
		|");
		
		Запрос.УстановитьПараметр("Ссылка",          Объект.Ссылка);
		Запрос.УстановитьПараметр("КонечныеСтатусы", Документы.ТранспортнаяНакладнаяЕГАИС.КонечныеСтатусы());
		
		ТаблицаТранспортныеНакладные = Запрос.Выполнить().Выгрузить();
		
		ТоварВПутиПринадлежитГрузополучателю = Ложь;
		Для Каждого ЭлементДанных Из ТаблицаТранспортныеНакладные Цикл
			Если ЭлементДанных.СтатусЕГАИС = Перечисления.СтатусыОбработкиТранспортныхНакладныхЕГАИС.ПроведенЕГАИС
				И ЭлементДанных.ТоварВПутиПринадлежитГрузополучателю Тогда
				ТоварВПутиПринадлежитГрузополучателю = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТаблицаТранспортныеНакладные.Количество() = 0 Тогда
			
			Если СтатусЕГАИС = Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяКлиентом Тогда
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						НСтр("ru = 'Оформить'"),,
						ЦветаСтиля.ЦветГиперссылкиГосИС,,
						"ОформитьТранспортнуюНакладную"));
			КонецЕсли;
			
		Иначе
			
			ДанныеПоследнейТранспортнойНакладной = ТаблицаТранспортныеНакладные[ТаблицаТранспортныеНакладные.Количество() - 1];
			
			Если ТаблицаТранспортныеНакладные.Количество() = 1 Тогда
				
				СоставСтроки.Добавить("Оформлена");
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						СтрШаблон(
							НСтр("ru = 'Транспортная накладная %1 от %2: %3'"),
							ДанныеПоследнейТранспортнойНакладной.НомерТН,
							ДанныеПоследнейТранспортнойНакладной.ДатаТН,
							ДанныеПоследнейТранспортнойНакладной.СтатусЕГАИС),,
						ЦветаСтиля.ЦветГиперссылкиГосИС,,
						ПолучитьНавигационнуюСсылку(ДанныеПоследнейТранспортнойНакладной.Ссылка)));
				СоставСтроки.Добавить(". ");
				
			Иначе
				
				СоставСтроки.Добавить(" ");
				СоставСтроки.Добавить(
					Новый ФорматированнаяСтрока(
						СтрШаблон(
							НСтр("ru = 'Транспортная накладная %1 от %2: %3 ( + еще %4 )'"),
							ДанныеПоследнейТранспортнойНакладной.НомерТН,
							ДанныеПоследнейТранспортнойНакладной.ДатаТН, 
							ДанныеПоследнейТранспортнойНакладной.СтатусЕГАИС,
							ТаблицаТранспортныеНакладные.Количество() - 1),,
						ЦветаСтиля.ЦветГиперссылкиГосИС,,
						ПолучитьНавигационнуюСсылку(ДанныеПоследнейТранспортнойНакладной.Ссылка)));
				СоставСтроки.Добавить(". ");
				
			КонецЕсли;
			
			Если Не ТоварВПутиПринадлежитГрузополучателю Тогда
				Если ДанныеПоследнейТранспортнойНакладной.СтатусЕГАИС = Перечисления.СтатусыОбработкиТранспортныхНакладныхЕГАИС.ПроведенЕГАИС Тогда
					СоставСтроки.Добавить(
						Новый ФорматированнаяСтрока(
							НСтр("ru = 'Оформить следующую'"),,
							ЦветаСтиля.ЦветГиперссылкиГосИС,,
							"ОформитьТранспортнуюНакладную"));
				КонецЕсли;
			Иначе
				СоставСтроки.Добавить(НСтр("ru = 'Следующую транспортную накладную оформляет грузополучатель.'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СоставСтроки.Количество() > 0 Тогда
		Элементы.ГруппаТранспортныеНакладные.Видимость = Истина;
		ТранспортныеНакладные = Новый ФорматированнаяСтрока(СоставСтроки);
	Иначе
		Элементы.ГруппаТранспортныеНакладные.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьИнформацииОСканированииDataMatrix()
	
	ВидимостьИнформации = АкцизныеМаркиЕГАИС.ВидимостьИнформацииОСканированииDataMatrix(Истина);
	
	Элементы.ГруппаИнформацияDataMatrix.Видимость = НЕ Элементы.СтраницаТовары.ТолькоПросмотр И ВидимостьИнформации;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеДоступностьюЭлементовФормы(Форма)

	ОграничениеПоСтатусуЕГАИС = (Форма.СтатусЕГАИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.Черновик")
	                             И Форма.СтатусЕГАИС <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиТТНИсходящейЕГАИС.ОшибкаПередачи"));
	
	ОграничениеПоСтатусуПроверкиИПодбора = Форма.Объект.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется");
	
	ЗависимыеОтСтатусаЕГАИС = Новый Массив;
	ЗависимыеОтСтатусаЕГАИС.Добавить("ГруппаЛевоПравоОсновное");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ГруппаСканированиеИПроверкаАлкогольнойПродукции");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ТоварыГруппаДополнительныеКоманды");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ТоварыГруппаСтандартныеКоманды");
	ЗависимыеОтСтатусаЕГАИС.Добавить("Товары");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ГруппаИнформацияDataMatrix");
	ЗависимыеОтСтатусаЕГАИС.Добавить("СтраницаТранспортныйРаздел");
	ЗависимыеОтСтатусаЕГАИС.Добавить("ТоварыПодобратьСправки2");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма, ЗависимыеОтСтатусаЕГАИС, Не ОграничениеПоСтатусуЕГАИС);
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("Грузоотправитель");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ВидОперации");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("Грузополучатель");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыОткрытьПодбор");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыПоискПоШтрихкоду");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыВыгрузитьДанныеВТСД");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыПодобратьСправки2");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавитьДополнительная");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыЗакончитьРедактирование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыАлкогольнаяПродукция");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСправка2");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
		Форма, 
		ЗависимыеОтСтатусаПроверкиИПодбора, 
		Не (ОграничениеПоСтатусуЕГАИС Или ОграничениеПоСтатусуПроверкиИПодбора));
	
	Форма.РедактированиеФормыНеДоступно = ОграничениеПоСтатусуЕГАИС;
	Форма.ОграничениеРедактированияПоСтатусуПроверкиИПодбора = ОграничениеПоСтатусуПроверкиИПодбора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКоличестваФакт()
	
	ЕстьОтборСтрокТолькоРасхождения = ЕстьОтборСтрокТолькоРасхождения();
	
	Элементы.ТоварыКоличествоФакт.Видимость = ЕстьОтборСтрокТолькоРасхождения;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Форма.Элементы.ТоварыОткрытьПодбор.Видимость = Не ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
	Форма.Элементы.ПерезаполнитьПоОснованию.Видимость = ЗначениеЗаполнено(Форма.Объект.ДокументОснование);
	
КонецПроцедуры

#КонецОбласти

#Область МинимальныеЦеныПодакцизныхТоваров

&НаСервере
Процедура ЗаполнитьМинимальныеЦеныВТоварах()
	
	РезультатыПроверки = РезультатыПроверкиМиниальныхЦен();
	
	Если РезультатыПроверки.ЕстьНарушения Тогда
		ИнтеграцияЕГАИСКлиентСервер.ЗаполнитьМинимальныеЦеныВТоварах(Объект.Товары, РезультатыПроверки.СписокНарушений);
		Элементы.ДетализацияМинимальнойЦены.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатыПроверкиМиниальныхЦен()
	
	Возврат ИнтеграцияЕГАИС.РезультатыПроверкиМинимальныхЦенПоДокументу(Объект.Ссылка);
	
КонецФункции

#КонецОбласти

#КонецОбласти