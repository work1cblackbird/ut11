#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ВозвратПодарочныхСертификатов", ПараметрыЗаписи, Объект.Ссылка);
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИспользоватьОплатуПлатежнымиКартами = ПолучитьФункциональнуюОпцию("ИспользоватьОплатуПлатежнымиКартами");
	
	ДанныеФискальнойОперации = РозничныеПродажи.СтруктураДанныеФискальнойОперации();
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода,
	                                              |ДисплейПокупателя,
	                                              |ФискальныйРегистратор,
	                                              |ККТ,
	                                              |ПринтерЧеков,
	                                              |ЭквайринговыйТерминал,
	                                              |СчитывательМагнитныхКарт";
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтотОбъект, "");
	РозничныеПродажи.ЗаполнитьТаблицуОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	Если НЕ Справочники.КассыККМ.НастроенаКассаККМДляРМК() Тогда
		Элементы.ГруппаНижняяКоманднаяПанельОплата.Доступность = Ложь;
	КонецЕсли;
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		ОборудованиеПодключено = МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам(
			Неопределено,
			Неопределено,
			МенеджерОборудованияВызовСервера.РабочееМестоКлиента()).Количество() > 0;
		ЗначениеОткрыватьФормуСПодключеннымОборудованием = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"ЧекККМ", "ОткрыватьФормуСПодключеннымОборудованием");
		Если ЗначениеОткрыватьФормуСПодключеннымОборудованием = Неопределено Тогда
			ОткрыватьФормуСПодключеннымОборудованием = ОборудованиеПодключено;
		Иначе
			ОткрыватьФормуСПодключеннымОборудованием = ЗначениеОткрыватьФормуСПодключеннымОборудованием И ОборудованиеПодключено;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОбработкиПодарочныхСертификатов = ПодарочныеСертификатыВызовСервера.ПараметрыОбработкиПолученногоКода();
	ПараметрыОбработкиПодарочныхСертификатов.РегистрироватьНовые = Ложь;	
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыПодарочныхСертификатов.Активирован"));
	
	СтруктураОтбора = ПараметрыОбработкиПодарочныхСертификатов.Отборы;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("Статус", МассивСтатусов);
	СтруктураОтбора.Вставить("ТипОперации", ПодарочныеСертификатыКлиентСервер.ТипОперацииПоПодарочнымСертификатам(Объект));
	
	УстановитьПараметрыВыбораДляПодарочногоСертификата(ЭтотОбъект);
	
	ПриЧтенииСозданииНаСервере();

	ЗаполнитьДанныеПоЧекуККМ();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ПриСозданииЧека();
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		
		Если ОткрыватьФормуСПодключеннымОборудованием И ВладелецФормы = Неопределено Тогда
			
			ПодключитьОбработчикОжидания("ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания", 0.5, Истина);
			
		Иначе
			
			ПодключитьОбработчикОжидания("НачатьПодключениеОборудованияОбработчикОжидания", 0.1, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	Если ПринудительнаяАвторизация И ВладелецФормы = Неопределено Тогда
		ПодключитьОбработчикОжидания("ОткрытьОкноАвторизации", 0.5, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПринудительноеЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ПередЗакрытиемЧека(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ВозвратПодарочныхСертификатов.Форма.ВыборОтложенногоЧека" Тогда
		ЗагрузитьНовыйЧек(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен()
		И Не ТолькоПросмотр Тогда
		Если ИмяСобытия = "ScanData" И МенеджерОборудованияУТКлиент.ЕстьНеобработанноеСобытие() Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияУТКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		ИначеЕсли ИмяСобытия ="TracksData" Тогда
			ОбработатьДанныеСчитывателяМагнитныхКарт(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор
		И Не ТолькоПросмотр Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "АвторизованПользователь" Тогда
		
		Если Параметр.Режим = "СменитьПрава" Тогда
			НастроитьПраваДляПользователя(Параметр.Пользователь);
			ПересчитатьДокументНаКлиенте();
		ИначеЕсли Параметр.Режим = "ЗакрытьЧекККМ" Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЧтениеКомандФормы"
		И Параметр.Форма = УникальныйИдентификатор Тогда
		
		Оповестить("ЧтениеКомандФормы", Новый Структура("Форма, ФормаВладелец, АдресВоВременномХранилище", Параметр.ФормаВладелец, УникальныйИдентификатор, ПолучитьКомандыФормы(Параметр.ФормаВладелец)));
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанПодарочныйСертификат"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		ОбработатьПодарочныйСертификат(Параметр.ПодарочныйСертификат);
		ПересчитатьДокументНаКлиенте();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОборудованиеПодключено" Тогда
		РозничныеПродажиКлиент.ОбработатьСобытиеОборудованиеПодключено(ЭтотОбъект, Параметр, Источник);
		ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 1, Истина);
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеКассовойСмены" Тогда
		СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере();
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнформационнаяПанельПрочиеПараметрыЗначениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СчитатьПодарочныйСертификат(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("НеИспользоватьРучнойВвод", Ложь);
	ДополнительныеПараметры.Вставить("Отбор", ПараметрыОбработкиПодарочныхСертификатов.Отборы);
	ДополнительныеПараметры.Вставить("РегистрироватьНовые", ПараметрыОбработкиПодарочныхСертификатов.РегистрироватьНовые);
	
	ОткрытьФорму(
		"Справочник.ПодарочныеСертификаты.Форма.СчитываниеПодарочногоСертификата",
		ДополнительныеПараметры,
		ЭтотОбъект,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюОперацииСККМ(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ", Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",   Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ИзменитьКассуККМ", Истина);
	ПараметрыОткрытияФормы.Вставить("ОграничитьДоступныеКассыККМОднойОрганизацией", ЗначениеЗаполнено(Объект.РеализацияПодарочныхСертификатов));
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюОперацииСККМ", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМенюПрочихОпераций(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("КассаККМ",                Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("Кассир",                  Объект.Кассир);
	ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр",          ТолькоПросмотр);
	ПараметрыОткрытияФормы.Вставить("Документ",                Объект.Ссылка);
	ПараметрыОткрытияФормы.Вставить("НеВыводитьЗагрузкуИзТСД", Истина);
	ПараметрыОткрытияФормы.Вставить("Организация",             Объект.Организация);
	
	ПараметрыОткрытияФормы.Вставить("ПроверитьКоличествоВДокументе", Ложь);
	ПараметрыОткрытияФормы.Вставить("ПродажаПодарочногоСертификата", Ложь);
	ПараметрыОткрытияФормы.Вставить("ВозвратПодарочногоСертификата", Ложь);
	ПараметрыОткрытияФормы.Вставить("Заблокировать",                         ПринудительнаяАвторизация);
	ПараметрыОткрытияФормы.Вставить("АдресКомандПечатиВоВременномХранилище", АдресКомандПечатиВоВременномХранилище);
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.МенюПрочиеОперации", ПараметрыОткрытияФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключенноеОборудование(Команда)
	
	РозничныеПродажиКлиент.ОткрытьФормуПодключенноеОборудование(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатитьНаличнымиОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьПлатежнойКартой(Команда)
	
	ОчиститьСообщения();
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуПлатежнымиКартамиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплата(Команда)
	
	ОчиститьСообщения();
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("СмешаннаяОплатаОбработкаОповещения", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСБП(Команда)
	
	ОплатитьСБПЛокализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОплатыПлатежнымиКартами(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартами", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодарочныеСертификаты

&НаКлиенте
Процедура ПодарочныеСертификатыПриИзменении(Элемент)
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.ПодарочныеСертификаты, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатПриИзменении(Элемент)
	
	ПодарочныйСертификат = Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПодарочныйСертификат;
	ОбработатьПодарочныйСертификат(ПодарочныйСертификат, Элементы.ПодарочныеСертификаты.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура("Отбор", ПараметрыОбработкиПодарочныхСертификатов.Отборы);	
	ОткрытьФорму("Справочник.ПодарочныеСертификаты.ФормаВыбора", СтруктураПараметров, ЭтотОбъект,,,, 
	                         Новый ОписаниеОповещения("ПодарочныеСертификатыПодарочныйСертификатНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ПодарочныеСертификатыПодарочныйСертификат Тогда
		ПоказатьЗначение(Неопределено, Элементы.ПодарочныеСертификаты.ТекущиеДанные.ПодарочныйСертификат);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодарочныеСертификатыПодарочныйСертификатНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ВыбранныйСертификат = Результат;
	Если ВыбранныйСертификат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПодарочныеСертификаты.ТекущиеДанные;  	
	Если ТекущиеДанные <> Неопределено Тогда   		
		ТекущиеДанные.ПодарочныйСертификат = ВыбранныйСертификат;
		ОбработатьПодарочныйСертификат(ВыбранныйСертификат, Элементы.ПодарочныеСертификаты.ТекущаяСтрока);  
	КонецЕсли; 	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ШтрихкодыИТорговоеОборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	Если Не ШтрихкодированиеНоменклатурыКлиент.ШтрихкодыВалидны(ДанныеШтрихкодов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		МассивШтрихкодов = ДанныеШтрихкодов;
	Иначе
		МассивШтрихкодов = Новый Массив;
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов);
	КонецЕсли;
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтотОбъект,
		МассивШтрихкодов[0].Штрихкод,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.Штрихкод"),
		ПараметрыОбработкиПодарочныхСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДанныеСчитывателяМагнитныхКарт(Данные)
	
	ПодарочныеСертификатыКлиент.ОбработатьПолученныйКодНаКлиенте(
		ЭтотОбъект,
		Данные,
		ПредопределенноеЗначение("Перечисление.ТипыКодовКарт.МагнитныйКод"),
		ПараметрыОбработкиПодарочныхСертификатов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПодключенноеОборудованиеОбработчикОжидания()
	
	РозничныеПродажиКлиент.ОткрытьФормуПодключенноеОборудование(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПодключениеОборудованияОбработчикОжидания()
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("НачатьПодключениеОборудованиеПриОткрытииФормыЗавершение", РозничныеПродажиКлиент, Новый Структура("Форма", ЭтотОбъект));
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ОписаниеЗавершения, ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиИнформациюНаДисплейПокупателя()

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрокВТЧ = Объект.ПодарочныеСертификаты.Количество();
	
	ТекущаяСтрока = Элементы.ПодарочныеСертификаты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
		ТекущиеДанные = Объект.ПодарочныеСертификаты[КоличествоСтрокВТЧ - 1];
		Элементы.ПодарочныеСертификаты.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	ДПТекст1 = НСтр("ru = 'Здравствуйте!'");
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ПодарочныйСертификат) Тогда
			ДПТекст1 = Формат(ТекущиеДанные.Номинал, "ЧДЦ=2") + " " + Строка(ТекущиеДанные.ВалютаНоминала);
		Иначе
			ДПТекст1 = "";
		КонецЕсли;
	КонецЕсли;
	
	ДПТекст2 = РозничныеПродажиКлиент.ПодготовитьСтрокуКВыводуНаДисплейПокупателя(
		НСтр("ru='Итог:'"), СуммаДокумента);
	
	РозничныеПродажиКлиент.ВывестиТекстНаДисплеиПокупателя(
		ЭтотОбъект,
		Дисплеи,
		ДПТекст1 + Символы.ПС + ДПТекст2);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСсылкиНаОборудование()
	
	РабочееМесто = МенеджерОборудованияВызовСервера.РабочееМестоКлиента();
	
	ЭквайринговыеТерминалы.Очистить();
	ЭквайринговыеТерминалы = Справочники.ЭквайринговыеТерминалы.ПараметрыЭквайринговыхТерминаловПоОрганизации(Объект.Организация, РабочееМесто, ИспользоватьПодключаемоеОборудование);
	
	Если ИспользоватьПодключаемоеОборудование Тогда
		Дисплеи.ЗагрузитьЗначения(МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("ДисплейПокупателя"));
	КонецЕсли;
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	ВерсияФФД = МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетВерсиюФФД(ПараметрыКассыККМ.ИдентификаторУстройства);
	ОбновитьОрганизацияПлательщикНДС();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ОткрытьОкноАвторизации()
	
	ОткрытьФорму("Документ.ЧекККМ.Форма.Авторизация", Новый Структура("Режим", "СменитьПрава"), ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОшибкаПриПроведенииЧекаВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Отмена Тогда
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		Если ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьНаСервере" Тогда
			РезультатОперации = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ОтложитьНаСервере" Тогда
			РезультатОперации = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		ИначеЕсли ДополнительныеПараметры.ИмяПроцедуры = "ЗаписатьФискальнуюОперациюНаСервере" Тогда
			РезультатОперации = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, ДополнительныеПараметры.РеквизитыФискальнойОперацииКассовогоУзла);
		КонецЕсли;
		
		Если РезультатОперации Тогда
			
			ВыполнитьОбработкуОповещения(
				ДополнительныеПараметры.ОписаниеОповещения,
				?(ДополнительныеПараметры.ВозвращатьРезультатФункции, РезультатОперации, ДополнительныеПараметры.РезультатПриУспешномПроведении));
			
		Иначе
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
				ДополнительныеПараметры.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОписаниеОповещения,
			?(ДополнительныеПараметры.ВозвращатьРезультатФункции, ДополнительныеПараметры.РезультатОперации, ДополнительныеПараметры.РезультатПриОтмене));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Объект.Дата = ТекущаяДатаСеанса();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Значение = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.ВозвратПодарочныхСертификатов"));
		Значение.УстановитьСсылкуНового(Документы.ВозвратПодарочныхСертификатов.ПолучитьСсылку());
		ЗначениеВДанныеФормы(Значение, Объект);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "Документ.ВозвратПодарочныхСертификатов";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.Ссылка);
		Блокировка.Заблокировать();
		
		Результат = Записать(Новый Структура("РежимЗаписи, РежимПроведения", РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный));
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Розничные продажи'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи = Неопределено)
	
	Если Модифицированность Тогда
		
		Результат = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		Если Результат Тогда
			Оповестить("Запись_ВозвратПодарочныхСертификатов", Новый Структура, Неопределено);
		КонецЕсли;
		
		ОбработатьПодарочныеСертификатыНаСервере();
		
		Возврат Результат;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Отмена оплаты не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	РаботаСТабличнымиЧастями.ИнициализироватьКэшСтрок(Элементы.ПодарочныеСертификаты);
	
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	ВерсияФФД = МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетВерсиюФФД(ПараметрыКассыККМ.ИдентификаторУстройства);
	ОбновитьОрганизацияПлательщикНДС();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Т.ПодарочныйСертификат КАК Справочник.ПодарочныеСертификаты) КАК ПодарочныйСертификат
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ПодарочныеСертификаты КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ПодарочныйСертификат  КАК ПодарочныйСертификат,
	|	ПодарочныеСертификаты.Владелец.Номинал КАК Номинал,
	|	ПодарочныеСертификаты.Владелец.Валюта  КАК ВалютаНоминала
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодарочныеСертификаты КАК ПодарочныеСертификаты
	|		ПО (ВременнаяТаблица.ПодарочныйСертификат = ПодарочныеСертификаты.Ссылка)");
	
	Запрос.УстановитьПараметр("ПодарочныеСертификаты", Объект.ПодарочныеСертификаты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 	
	
		НайденныеСтроки = Объект.ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ПодарочныйСертификат", Выборка.ПодарочныйСертификат));
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			СтрокаТЧ.Номинал        = Выборка.Номинал;
			СтрокаТЧ.ВалютаНоминала = Выборка.ВалютаНоминала;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДокументНаКлиенте()
	
	Элементы.ПодарочныеСертификаты.ИзменятьСоставСтрок    = ПраваДоступа.КорректировкаСтрок;
	
	Элементы.ПодарочныеСертификатыКонтекстноеМенюУдалить.Доступность     = ПраваДоступа.КорректировкаСтрок;
	
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодарочныеСертификатыНаСервере()
	
	ОтборПоПодарочномуСертификату = Объект.ПодарочныеСертификаты.Выгрузить(,"ПодарочныйСертификат").ВыгрузитьКолонку("ПодарочныйСертификат");
	Выборка = Справочники.ПодарочныеСертификаты.ВыборкаДанныхПоПодарочнымСертификатамДляОбработки(ОтборПоПодарочномуСертификату, Объект);
	
	Для Каждого стрСертификат Из Объект.ПодарочныеСертификаты Цикл
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(СтрСертификат.ПодарочныйСертификат, "ПодарочныйСертификат") Тогда
			
			стрСертификат.Сумма = Выборка.Сумма;
			
			стрСертификат.Номинал        = Выборка.Номинал;
			стрСертификат.ВалютаНоминала = Выборка.ВалютаНоминала;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПодарочныйСертификат(ПодарочныйСертификат, СтрокаТЧ = Неопределено)
	
	Выборка = Справочники.ПодарочныеСертификаты.ВыборкаДанныхПоПодарочнымСертификатамДляОбработки(ПодарочныйСертификат, Объект);
	Если Выборка.Следующий() Тогда

		Если Выборка.ДокументРеализации <> Объект.РеализацияПодарочныхСертификатов Тогда
			Если Не СтрокаТЧ = Неопределено Тогда
				НайденнаяСтрока = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(СтрокаТЧ);
				НайденнаяСтрока.ПодарочныйСертификат = КэшированныеСтроки.ПодарочныеСертификаты.ПодарочныйСертификат;
			КонецЕсли;
			ТекстСообщения = НСтр("ru = 'Подарочный сертификат ""%1"" не относится к документу, по которому оформляется возврат. Операция не поддерживается.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ПодарочныйСертификат);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
			
		Если СтрокаТЧ = Неопределено Тогда
			
			НайденныеСтроки = Объект.ПодарочныеСертификаты.НайтиСтроки(Новый Структура("ПодарочныйСертификат", ПодарочныйСертификат));
			Если НайденныеСтроки.Количество() = 0 Тогда
				НайденнаяСтрока = Объект.ПодарочныеСертификаты.Добавить();
			Иначе
				НайденнаяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		Иначе
			НайденнаяСтрока = Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(СтрокаТЧ);
		КонецЕсли;
		
		НайденнаяСтрока.ПодарочныйСертификат = ПодарочныйСертификат;
		НайденнаяСтрока.Сумма = Выборка.Сумма;
		
		НайденнаяСтрока.Номинал        = Выборка.Номинал;
		НайденнаяСтрока.ВалютаНоминала = Выборка.ВалютаНоминала;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораДляПодарочногоСертификата(Форма)
	ПараметрыВыбораПодарочногоСертификата = Новый Массив;
	СтруктураОтбора = Форма.ПараметрыОбработкиПодарочныхСертификатов.Отборы;
	Если СтруктураОтбора.Свойство("Статус") Тогда
		ПараметрыВыбораПодарочногоСертификата.Добавить(Новый ПараметрВыбора("Статус", СтруктураОтбора.Статус));
	КонецЕсли;
	Если СтруктураОтбора.Свойство("Организация") Тогда
		ПараметрыВыбораПодарочногоСертификата.Добавить(Новый ПараметрВыбора("Организация", СтруктураОтбора.Организация));
	КонецЕсли;
	Форма.Элементы.ПодарочныеСертификатыПодарочныйСертификат.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПодарочногоСертификата);
КонецПроцедуры

#Область ПечатьЧека

&НаСервере
Функция ПараметрыОперацииФискализацииЧекаНаСервере(ИнформацияОбОплате)
	
	Возврат ПараметрыОперацииФискализацииЧекаНаСервереЛокализация(ИнформацияОбОплате);
	
КонецФункции

&НаКлиенте
Функция ПараметрыОперацииФискализацииЧека()
	
	Возврат ПараметрыОперацииФискализацииЧекаНаСервере(ИнформацияОбОплате(ЭтотОбъект));
	
КонецФункции

&НаКлиенте
Процедура ПробитьЧек()
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	Если Объект.ПометкаУдаления Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='Документ помечен на удаление'"), Объект.Ссылка,,,ЕстьОшибки);
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если ЕстьОшибки Или Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОперацииФискализацииЧека = ПараметрыОперацииФискализацииЧека();
	ПечатьЧекаПослеЗаписиИзмененийЛокализация(ПараметрыОперацииФискализацииЧека);
	
КонецПроцедуры

#Область ФискальнаяОперация

&НаСервере
Функция ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла)
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Оперативный);

	Результат = РозничныеПродажи.ЗаписатьФискальнуюОперациюНаСервере(ЭтотОбъект, РеквизитыФискальнойОперацииКассовогоУзла, ПараметрыЗаписи);
	
	Если Не Результат Тогда
		ТребуетсяПовторнаяПопыткаЗаписи = Истина;
	КонецЕсли;

	Возврат Результат;
КонецФункции

#КонецОбласти

&НаСервере
Процедура ОбновитьСостояниеКассовойСмены()
	
	Если ЗначениеЗаполнено(Объект.КассаККМ)
		И Объект.Статус <> Перечисления.СтатусыЧековККМ.Пробит Тогда

		СтруктураСостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		Если Объект.КассоваяСмена <> СтруктураСостояниеКассовойСмены.КассоваяСмена Тогда
			ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,,"Кассир");
		КонецЕсли;

		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Если Объект.Кассир <> ТекущийПользователь Тогда

			Объект.Кассир = ТекущийПользователь;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПодарочныеСертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ОплатаПлатежнымиКартами.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоЧекуККМ()
	
	ДанныеПоЧекуККМ = Новый Структура;
	ДанныеПоЧекуККМ.Вставить("КассоваяСмена", ПредопределенноеЗначение("Документ.КассоваяСмена.ПустаяСсылка"));
	ДанныеПоЧекуККМ.Вставить("СуммаДокумента", 0);
	ДанныеПоЧекуККМ.Вставить("СуммаНеотмененныхОплатПлатежнымиКартами", 0);
	ДанныеПоЧекуККМ.Вставить("КоличествоНеотмененныхОплатПлатежнымиКартами", 0);
	
	Если ЗначениеЗаполнено(Объект.РеализацияПодарочныхСертификатов) Тогда
	
		РеквизитыЧекККМ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.РеализацияПодарочныхСертификатов, "КассоваяСмена,СуммаДокумента");
		ДанныеПоЧекуККМ.КассоваяСмена = РеквизитыЧекККМ.КассоваяСмена;
		ДанныеПоЧекуККМ.СуммаДокумента = РеквизитыЧекККМ.СуммаДокумента;
		
		ЗаполнитьДанныеНеотмененныхОплатПлатежнымиКартамиПоЧекуККМ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеНеотмененныхОплатПлатежнымиКартамиПоЧекуККМ()

	ДанныеПоЧекуККМ.Вставить("СуммаНеотмененныхОплатПлатежнымиКартами", 0);
	ДанныеПоЧекуККМ.Вставить("КоличествоНеотмененныхОплатПлатежнымиКартами", 0);
	
	Если ЗначениеЗаполнено(Объект.РеализацияПодарочныхСертификатов) Тогда
		МассивВидовОплат = Новый Массив;
		МассивВидовОплат.Добавить(Перечисления.ТипыПлатежнойСистемыККТ.ПлатежнаяКарта);
		Запрос = Новый Запрос(Документы.РеализацияПодарочныхСертификатов.ТекстЗапросаДляПолученияНеотмененныхОплатПоЧекуККМ(Истина, Ложь));
		Запрос.УстановитьПараметр("Ссылка", Объект.РеализацияПодарочныхСертификатов);
		Запрос.УстановитьПараметр("ВидыОплат", МассивВидовОплат);
		ТаблицаНеотмененныхОплатПлатежнымиКартами = Запрос.Выполнить().Выгрузить();
		ДанныеПоЧекуККМ.КоличествоНеотмененныхОплатПлатежнымиКартами = ТаблицаНеотмененныхОплатПлатежнымиКартами.Количество();
		ДанныеПоЧекуККМ.СуммаНеотмененныхОплатПлатежнымиКартами = ТаблицаНеотмененныхОплатПлатежнымиКартами.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОрганизацияПлательщикНДС()
	
	ВозвратПодарочныхСертификатовЛокализация.ОбновитьОрганизацияПлательщикНДС(ПараметрыКассыККМ.Организация, ОрганизацияПлательщикНДС);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМК()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПолучитьСсылкиНаОборудование();
	
	Если Объект.ОплатаПлатежнымиКартами.Количество() > 0 Тогда
		Элементы.ПодарочныеСертификаты.ТолькоПросмотр    = Истина;
		Элементы.СчитатьПодарочныйСертификат.Доступность = Ложь;
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.СуммаКВозврату.Ширина                  = 22;
		Элементы.СуммаКВозвратуПлатежнымиКартами.Ширина = 22;
		Элементы.СуммаКВозвратуНаличными.Ширина         = 22;
	КонецЕсли;
	
	Элементы.ПодарочныеСертификатыСумма.Заголовок = Элементы.ПодарочныеСертификатыСумма.Заголовок + " " + "(" + Объект.Валюта + ")";

	РозничныеПродажи.ПодписатьГорячиеКлавишиНаКнопках(ЭтотОбъект);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши, Неопределено)              КАК ГорячиеКлавиши,
	|	ЕСТЬNULL(НастройкиРМК.ГорячиеКлавиши.КомандыФормы, Неопределено) КАК КомандыФормы,
	|	НастройкиРМК.ИспользоватьАвторизацию                             КАК ИспользоватьАвторизацию
	|ИЗ
	|	Справочник.НастройкиРМК КАК НастройкиРМК
	|ГДЕ
	|	НастройкиРМК.РабочееМесто = &РабочееМесто
	|	И НастройкиРМК.Ссылка В (ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Ссылка ИЗ Справочник.НастройкиРМК.КассыККМ КАК Т ГДЕ Т.КассаККМ = &КассаККМ)
	|");
	
	Запрос.УстановитьПараметр("РабочееМесто", МенеджерОборудованияВызовСервера.РабочееМестоКлиента());
	Запрос.УстановитьПараметр("КассаККМ", Объект.КассаККМ);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ГорячиеКлавиши            = Выборка.ГорячиеКлавиши;
		ПринудительнаяАвторизация = Выборка.ИспользоватьАвторизацию;
		
		Если ЗначениеЗаполнено(ГорячиеКлавиши) Тогда
			РозничныеПродажи.НастроитьБыстрыеТоварыИГорячиеКлавиши(ЭтотОбъект, Выборка);
		КонецЕсли;
		
	Иначе
		
		ГорячиеКлавиши            = Неопределено;
		ПринудительнаяАвторизация = Ложь;
		
	КонецЕсли;
	
	НастроитьПраваДляПользователя(Объект.Кассир);
	ПересчитатьОбщиеСуммыОплат(ЭтотОбъект);
		
	ДоступныеВидыОплаты = РозничныеПродажиКлиентСервер.ДоступныеВидыОплаты(ЭтотОбъект);
	Элементы.ОплатитьНаличными.Видимость = ДоступныеВидыОплаты.Наличные;
	Элементы.ОплатитьКартой.Видимость    = ДоступныеВидыОплаты.ПлатежныеКарты И ОбщаяСуммаОплатыПлатежнымиКартами > 0;
	Элементы.СмешаннаяОплата.Видимость   = ДоступныеВидыОплаты.ПлатежныеКарты И ОбщаяСуммаОплатыПлатежнымиКартами > 0;
	
	Элементы.ДекоративноеПолеГруппаСуммаКВозврату1.Видимость = Не Элементы.ОплатитьКартой.Видимость;
	Элементы.ДекоративноеПолеГруппаСуммаКВозврату2.Видимость = Истина;
	Элементы.СуммаКВозвратуПлатежнымиКартами.Видимость = Элементы.ОплатитьКартой.Видимость;
	
	ЭлементыНаПерегруппировку = Новый Массив;
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьНаличными);
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьКартой);
	ЭлементыНаПерегруппировку.Добавить(Элементы.СмешаннаяОплата);
	
	НастроитьРМКЛокализация(ДоступныеВидыОплаты, ЭлементыНаПерегруппировку);
	
	РозничныеПродажи.ПерегруппироватьКнопкиФормы(ЭтотОбъект, ЭлементыНаПерегруппировку);
	
	РозничныеПродажи.НастроитьКомандыПечати(ЭтотОбъект, Элементы.ПеремещаемыеКнопки);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПраваДляПользователя(Пользователь)
	
	ПраваДоступа = НастройкиПродажДляПользователейСервер.ПраваДоступаРМК(Пользователь);
	
	Объект.Кассир = Пользователь;
	РеквизитыКассира = РозничныеПродажи.РеквизитыКассира(Пользователь, Объект.Организация);
	
	ОбновитьЗаголовокФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Заголовок = НСтр("ru = 'Возврат (Кассир: %Кассир%)'");
	Заголовок = СтрЗаменить(Заголовок, "%Кассир%", Объект.Кассир);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКомандыФормы(УникальныйИдентификатор)
	
	КомандыФормы = Новый Массив;
	Для Каждого КомандаФормы Из Команды Цикл
		Если НЕ КомандаФормы.СочетаниеКлавиш.Клавиша = Клавиша.Нет Тогда
			КомандыФормы.Добавить(Новый Структура("ИмяКоманды, Заголовок, СочетаниеКлавиш", КомандаФормы.Имя, КомандаФормы.Заголовок, КомандаФормы.СочетаниеКлавиш));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(КомандыФормы, УникальныйИдентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДанныеИнформационнойПанели(Форма, ОтобразитьСдачу = Ложь)
	
	ИнформацияОбОплате = ИнформацияОбОплате(Форма);

	Форма.ЭтоПолныйВозвратВСменуПродажи = Ложь;
	
	Форма.ИнформационнаяПанельСуммаКВозврату                  = ИнформацияОбОплате.СуммаКОплате;
	
	Форма.ИнформационнаяПанельСуммаКВозвратуПлатежнымиКартами = 0;
	Если ИнформацияОбОплате.ПлатежныеКарты = 0 Тогда
		Форма.ИнформационнаяПанельСуммаКВозвратуНаличными         = ИнформацияОбОплате.СуммаКОплате;
	Иначе
		Форма.ИнформационнаяПанельСуммаКВозвратуНаличными         = ИнформацияОбОплате.СуммаКОплате - ИнформацияОбОплате.ПлатежныеКарты;
		Форма.ИнформационнаяПанельСуммаКВозвратуПлатежнымиКартами = ИнформацияОбОплате.ПлатежныеКарты;
	КонецЕсли;
	ИнформационнаяПанельЛокализация(Форма, ИнформацияОбОплате);
	
	КоличествоСтрокВТЧ = Форма.Объект.ПодарочныеСертификаты.Количество();
	
	ТекущаяСтрока = Форма.Элементы.ПодарочныеСертификаты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ > 0 Тогда
		ТекущиеДанные = Форма.Объект.ПодарочныеСертификаты[КоличествоСтрокВТЧ - 1];
		Форма.Элементы.ПодарочныеСертификаты.ТекущаяСтрока = ТекущиеДанные.ПолучитьИдентификатор();
	ИначеЕсли ТекущаяСтрока = Неопределено И КоличествоСтрокВТЧ = 0 Тогда
		ТекущиеДанные = Неопределено;
	Иначе
		ТекущиеДанные = Форма.Объект.ПодарочныеСертификаты.НайтиПоИдентификатору(ТекущаяСтрока);
	КонецЕсли;
	
	НаименованиеТовара = "";
	Если ТекущиеДанные <> Неопределено Тогда
		НаименованиеТовара = Строка(ТекущиеДанные.ПодарочныйСертификат);
	КонецЕсли;
	
	ОбязательныеРеквизиты = Новый Массив;
	
	ДанныеСтроки = Новый Структура;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ПодарочныйСертификат) Тогда
		ДанныеСтроки.Вставить("Номинал", Формат(ТекущиеДанные.Номинал, "ЧДЦ=2") + " " + Строка(ТекущиеДанные.ВалютаНоминала));
	КонецЕсли;
	
	СуммовыеПараметры = Новый Структура;
	СуммовыеПараметры.Вставить("Количество",                0);
	СуммовыеПараметры.Вставить("Цена",                      0);
	СуммовыеПараметры.Вставить("СуммаРучнойСкидки",         0);
	СуммовыеПараметры.Вставить("СуммаАвтоматическойСкидки", 0);
	СуммовыеПараметры.Вставить("Сумма",                     0);
	Если ТекущиеДанные <> Неопределено Тогда
		СуммовыеПараметры.Количество = 1;
		СуммовыеПараметры.Цена       = ТекущиеДанные.Сумма;
		ЗаполнитьЗначенияСвойств(СуммовыеПараметры, ТекущиеДанные);
	КонецЕсли;
	
	Данные = Новый Структура;
	Данные.Вставить("НаименованиеТовара",    НаименованиеТовара);
	Данные.Вставить("ДанныеСтроки",          ДанныеСтроки);
	Данные.Вставить("СуммовыеПараметры",     СуммовыеПараметры);
	Данные.Вставить("ОбязательныеРеквизиты", ОбязательныеРеквизиты);
	
	Если ОтобразитьСдачу Тогда
		
		ТекстСдача = Новый ФорматированнаяСтрока(
			СтрШаблон(НСтр("ru = 'Получить сдачу: %1'"),
				Формат(ИнформацияОбОплате.ИтогоОплачено - ИнформацияОбОплате.СуммаКОплате, "ЧДЦ=2; ЧН=0.00")));
		
		Данные.Вставить("ОтобразитьСдачу", Истина);
		Данные.Вставить("ТекстСдача",      ТекстСдача);
		
	Иначе
		Данные.Вставить("ОтобразитьСдачу", Ложь);
	КонецЕсли;
	
	РозничныеПродажиКлиентСервер.ОбновитьДанныеИнформационнойПанели(Форма, Данные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИнформацияОбОплате(Форма)
	
	ПересчитатьОбщиеСуммыОплат(Форма);
	
	ОплатаПлатежнымиКартамиОтменено = 0;
	ОплатыПлатежнымиКартами = РозничныеПродажиКлиентСервер.СтрокиОплатыПлатежнымиКартами(Форма.Объект.ОплатаПлатежнымиКартами);
	Для Каждого СтрокаТЧ Из ОплатыПлатежнымиКартами Цикл
		Если СтрокаТЧ.ОплатаОтменена Тогда
			ОплатаПлатежнымиКартамиОтменено = ОплатаПлатежнымиКартамиОтменено + СтрокаТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Форма.СуммаДокумента = Форма.Объект.ПодарочныеСертификаты.Итог("Сумма");

	Форма.ОбщаяСуммаОплатыПлатежнымиКартами = 0;
	Если Форма.СуммаДокумента >= Форма.ДанныеПоЧекуККМ.СуммаНеотмененныхОплатПлатежнымиКартами Тогда
		Форма.ОбщаяСуммаОплатыПлатежнымиКартами = Форма.ДанныеПоЧекуККМ.СуммаНеотмененныхОплатПлатежнымиКартами;
	КонецЕсли;
	
	ИнформацияОбОплате = Новый Структура;
	ИнформацияОбОплате.Вставить("Документ",               Форма.Объект.Ссылка);
	
	ИнформацияОбОплате.Вставить("Наличные",               Форма.Объект.ВыданоНаличными);
	ИнформацияОбОплате.Вставить("ПлатежныеКарты",         Форма.ОбщаяСуммаОплатыПлатежнымиКартами);
	ИнформацияОбОплате.Вставить("ПлатежныеКартыОтменено", ОплатаПлатежнымиКартамиОтменено);
	ИнформацияОбОплате.Вставить("ПодарочныеСертификаты",  0);
	ИнформацияОбОплате.Вставить("БонусныеБаллы",          0);
	
	ИнформацияОбОплате.Вставить("СуммаДокумента",         Форма.СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаКОплате",           Форма.СуммаДокумента);
	ИнформацияОбОплате.Вставить("СуммаСкидки",            0);
	ИнформацияОбОплате.Вставить("ИтогоОплачено",          ИнформацияОбОплате.Наличные + ОплатаПлатежнымиКартамиОтменено);
	
	ИнформацияОбОплате.Вставить("ДоступныеВидыОплаты", РозничныеПродажиКлиентСервер.ДоступныеВидыОплаты(Форма));
	
	ИнформацияОбОплатеЛокализация(Форма, ИнформацияОбОплате);
	
	Возврат ИнформацияОбОплате;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеПослеЗаписи(ОповещениеПриЗавершении, ТекстСообщения)
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметры = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметры.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметры.ТекстСообщения             = ТекстСообщения;
		ДополнительныеПараметры.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметры.ИмяПроцедуры               = "ЗаписатьНаСервере";
		ДополнительныеПараметры.РезультатОперации          = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметры);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ДополнительныеПараметры.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСмены();
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуОплатыНаличными", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуОплатыНаличными(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплатыНаличными",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СмешаннаяОплатаОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСостояниеКассовойСмены();
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСмешаннойОплаты(ИзмененныеДанныеЗаписаны, ДополнительныеПараметры) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате(ЭтотОбъект));
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("ДоступнаПередачаДанных", ПараметрыКассыККМ.ДоступнаПередачаДанных);
	ПараметрыОткрытияФормы.Вставить("ЭтоПолныйВозвратВСменуПродажи", ЭтоПолныйВозвратВСменуПродажи);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаСмешаннойОплаты",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗавершениеОплаты", ЭтотОбъект));
	
КонецПроцедуры

#Область ОтменаОплатыПлатежнымиКартами

&НаКлиенте
Процедура ДополнитьПараметрыОтменыОплатыПлатежнымиКартами(ДополнительныеПараметры)
	
	ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта",            Объект.Валюта);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	
	Если ЭтоПолныйВозвратВСменуПродажи Тогда
		ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeVoid");
	Иначе
		ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeRefund");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартами(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", ПоместитьТабличнуюЧастьОплатыПлатежнымиКартамиВХранилище());

	ПараметрыФормы.Вставить("ПоказатьКнопкуОтменитьОплатыПоследовательно", Ложь);
	Если ДополнительныеПараметры.Свойство("ПолученоНаличными") Тогда
		ПараметрыФормы.Вставить("ПоказатьКнопкуОтменитьОплату", Ложь);
		Объект.ПолученоНаличными = ДополнительныеПараметры.ПолученоНаличными;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ЭтоВозврат", Истина);
	ПараметрыФормы.Вставить("ЭтоПолныйВозвратВСменуПродажи", ЭтоПолныйВозвратВСменуПродажи);
	ПараметрыФормы.Вставить("ПоказыватьТолькоОплатыПлатежнымиКартами", Истина);
	ПараметрыФормы.Вставить("СуммаДокумента", СуммаДокумента);
	
	ДополнитьПараметрыОтменыОплатыПлатежнымиКартами(ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ТабличнаяЧастьОплатаПлатежнымиКартами",
		ПараметрыФормы,,,,,
		Новый ОписаниеОповещения("ОтменитьОплатыПлатежнымиКартамиВыборСтрокиОплатыЗавершение", РозничныеПродажиКлиент, ДополнительныеПараметры),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Параметры:
//	Результат - Структура - 
// 	ДополнительныеПараметры - Структура:
// 		* Форма - ФормаКлиентскогоПриложения:
// 			** Объект - ДанныеФормыСтруктура:
// 				*** Ссылка - ДокументСсылка
&НаКлиенте
Процедура ОтменитьОплатыПлатежнымиКартамиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Данные", ДополнительныеПараметры.Форма.Объект.Ссылка);
		ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДополнительныеПараметры.Форма.ДанныеДляЖурналаРегистрации);
		ПараметрыФормы.Вставить("ТекстСообщения",
			НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
			|Отмена оплаты не зафиксирована в системе.'"));
		
		ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ДополнительныеПараметры.Форма);
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОповещениеВФормуОплаты") Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартой(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОтменитьОплатуКартой", РозничныеПродажиКлиент, ДополнительныеПараметры),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнымиКартами(ОповещениеОЗавершении)
	
	СтрокиОплатыПлатежнымиКартами = Новый Массив;
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами Цикл
		Если СтрокаОплаты.ОплатаОтменена Тогда
			Продолжить;
		КонецЕсли;
		СтрокиОплатыПлатежнымиКартами.Добавить(СтрокаОплаты);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ОповещениеПриЗавершении",       ОповещениеОЗавершении);
	ДополнительныеПараметры.Вставить("СтрокиОплатыПлатежнымиКартами", СтрокиОплатыПлатежнымиКартами);
	
	ДополнительныеПараметры.Вставить("Форма",             ЭтотОбъект);
	ДополнительныеПараметры.Вставить("Валюта",            Объект.Валюта);
	ДополнительныеПараметры.Вставить("ПараметрыКассыККМ", ПараметрыКассыККМ);
	ДополнительныеПараметры.Вставить("ТипТранзакции",     "AuthorizeRefund");
	
	РозничныеПродажиКлиент.ОтменитьОплатуПлатежнымиКартамиПоследовательно(
		Неопределено,
		ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуПлатежнойКартойЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ДанныеДляЖурналаРегистрации = Новый Структура;
	ДанныеДляЖурналаРегистрации.Вставить("СуммаОперации",  ДополнительныеПараметры.СуммаОперации);
	ДанныеДляЖурналаРегистрации.Вставить("СсылочныйНомер", ДополнительныеПараметры.СсылочныйНомер);
	ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаЭТ",    ДополнительныеПараметры.НомерЧека);
	
	СтрокаОплаты = Объект.ОплатаПлатежнымиКартами.Получить(Объект.ОплатаПлатежнымиКартами.Индекс(ДополнительныеПараметры.СтрокаОплаты));
	СтрокаОплаты.ОплатаОтменена = Истина;
	Модифицированность = Истина;
	
	ПересчитатьДокументНаКлиенте();
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	ИзмененныеДанныеЗаписаны = ЗаписатьНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи);
	Если Не ИзмененныеДанныеЗаписаны Тогда
		
		ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения             = ДополнительныеПараметры.ОповещениеПриЗавершении;
		ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После выполнения операции отмены оплаты не удалось записать документ.'");
		ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
		ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
		ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
		ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьНаСервере";
		ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПовторЗаписи),
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(
			ДополнительныеПараметры.ОповещениеПриЗавершении,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Истина, Истина));
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
//
// Параметры:
//  Результат - Структура - 
//  ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиЗавершения
&НаКлиенте
Процедура ОтменитьОплату(Результат, ДополнительныеПараметры) Экспорт
	
	ОтменитьОплатуПлатежнымиКартами(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

// Вызывается из формы сложной оплаты
//
// Параметры:
//  Результат - Структура - 
//  ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиЗавершения
&НаКлиенте
Процедура ОтменитьОплатуСторно(Результат, ДополнительныеПараметры) Экспорт
	
	СтруктураПоиска = Новый Структура("ОплатаОтменена", Истина);
	Для каждого СтрокаОплаты Из Объект.ОплатаПлатежнымиКартами.НайтиСтроки(СтруктураПоиска) Цикл
		СтрокаОплаты.ОплатаОтменена = Ложь;
	КонецЦикла;
	
	ВыполнитьОбработкуОповещения(
		Новый ОписаниеОповещения("ОтменитьОплатуЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОплатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате(ЭтотОбъект));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗавершениеОплаты(РезультатОплаты, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатОплаты) = Тип("Структура")
		И РезультатОплаты.Свойство("ПолученоНаличными")
		И РезультатОплаты.Свойство("ДанныеЭлектронногоЧека") Тогда
		
		Объект.ВыданоНаличными = РезультатОплаты.ПолученоНаличными;
		Объект.Партнер         = РезультатОплаты.ДанныеЭлектронногоЧека.Партнер;
		
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека  = РезультатОплаты.ДанныеЭлектронногоЧека.ВариантОтправкиЭлектронногоЧека;
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека = РезультатОплаты.ДанныеЭлектронногоЧека.КонтактныеДанныеЭлектронногоЧека;
		
	ИначеЕсли РезультатОплаты = "Отмена" Или РезультатОплаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьДобавлениеОплаты(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьДобавлениеОплаты(ДополнительныеПараметры)
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	// Команда оплаты картой вызвана из формы РМК
	Если ДополнительныеПараметры = Неопределено Тогда
		
		Если Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
			
			ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина);
			
		Иначе
			
			Если ИнформацияОбОплате.ИтогоОплачено >= ИнформацияОбОплате.СуммаКОплате
				И ЗначениеЗаполнено(ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека) Тогда
				
				ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина);
				
				ПробитьЧек();
				
			ИначеЕсли ИнформацияОбОплате.ИтогоОплачено > 0 Тогда
				
				ВыполнитьДействиеПослеЗаписи(
					Новый ОписаниеОповещения("ОткрытьФормуСмешаннойОплаты", ЭтотОбъект),
					НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
				
				ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
				
			Иначе
				
				ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеВФормуОплаты, ИнформацияОбОплате);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКомандуПечати(ИмяКоманды, ДополнительныеПараметры) Экспорт

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команды[ИмяКоманды], Объект);

КонецПроцедуры

// Функция-конструктор дополнительных параметров, которые возвращаются в обработке завершения
// Возвращаемое значение:
// 	Структура - дополнительные параметры:
// 	* Ссылка - Неопределено - 
// 	
&НаКлиенте
Функция ДополнительныеПараметрыОбработкиЗавершения()
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка", Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНовыйЧек(Ссылка)
	
	Если Объект.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит") Тогда
		
		ДополнительныеПараметры = ДополнительныеПараметрыОбработкиЗавершения();
		ДополнительныеПараметры.Ссылка = Ссылка;
		
		Отказ = Ложь;
		ПередЗакрытиемЧека(
			Отказ,
			Новый ОписаниеОповещения("ЗагрузитьНовыйЧекЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НовыйЧекНаСервере(Ссылка);
		ЗагрузитьНовыйЧекФрагмент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьНовыйЧекФрагмент()
	
	ПересчитатьДокументНаКлиенте();
	
КонецПроцедуры

// Параметры:
//  Результат - Булево, Неопределено -
// 	ДополнительныеПараметры - см. ДополнительныеПараметрыОбработкиЗавершения
// 
&НаКлиенте
Процедура ЗагрузитьНовыйЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	НовыйЧекНаСервере(ДополнительныеПараметры.Ссылка);
	
	ЗагрузитьНовыйЧекФрагмент();
	
КонецПроцедуры

&НаСервере
Функция ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи)
	
	ОтложитьВыполнено = Истина;
	
	СтарыйСтатус = Объект.Статус;
	Объект.Статус = Перечисления.СтатусыЧековККМ.Отложен;
	
	Попытка
		
		ОтложитьВыполнено = ЗаписатьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
		Если Не ОтложитьВыполнено Тогда
			Объект.Статус = СтарыйСтатус;
		КонецЕсли;
		
	Исключение
		
		Объект.Статус = СтарыйСтатус;
		ОтложитьВыполнено = Ложь;
		
	КонецПопытки;
	
	Возврат ОтложитьВыполнено;
	
КонецФункции

&НаКлиенте
Процедура ОтложитьНаКлиенте(ОповещениеПриЗавершении)
	
	Модифицированность = Истина;
	
	ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
	Результат = ОтложитьНаСервере(ТребуетсяПовторнаяПопыткаЗаписи);
		
	ОбработатьПодарочныеСертификатыНаСервере();
	
	Если Не Результат Тогда
		
		ДополнительныеПараметрыПопытка = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
		ДополнительныеПараметрыПопытка.ОписаниеОповещения         = ОповещениеПриЗавершении;
		ДополнительныеПараметрыПопытка.ТекстСообщения             = НСтр("ru = 'Не удалось записать документ.'");
		ДополнительныеПараметрыПопытка.ВозвращатьРезультатФункции = Истина;
		ДополнительныеПараметрыПопытка.ИмяПроцедуры               = "ОтложитьНаСервере";
		ДополнительныеПараметрыПопытка.РезультатОперации          = Результат;
		
		Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
			ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПопытка);
			Возврат;
		КонецЕсли;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПопытка),
			ДополнительныеПараметрыПопытка.ТекстСообщения,
			РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
		Возврат;
		
	Иначе
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЧека(Отказ, ОписаниеОповещения = Неопределено)
	
	Кнопки = Новый СписокЗначений;
	
	Если Не ТолькоПросмотр И (Модифицированность ИЛИ ЗначениеЗаполнено(Объект.Ссылка)) Тогда
		
		Если ПраваДоступа.Отложить Тогда
			Кнопки.Добавить(1, НСтр("ru = 'Отложить'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) И ПраваДоступа.КорректировкаСтрок Тогда
			Кнопки.Добавить(4, НСтр("ru = 'Удалить чек'"));
		Иначе
			Если Модифицированность И ПраваДоступа.КорректировкаСтрок Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть без сохранения'"));
			КонецЕсли;
			Если Не Модифицированность И ПраваДоступа.КорректировкаСтрок Тогда
				Кнопки.Добавить(3, НСтр("ru = 'Закрыть'"));
			КонецЕсли;
		КонецЕсли;
		
		Кнопки.Добавить(99, НСтр("ru = 'Отмена'"));
		
	КонецЕсли;
	
	Если Кнопки.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
		
		Отказ = Истина;
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ВопросПередЗакрытиемЧекаЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			НСтр("ru = 'Выберите действие перед закрытием.'"),
			Кнопки);
		
	Иначе
		
		Если ОписаниеОповещения <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемОперацияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("Запись_ВозвратПодарочныхСертификатов", Новый Структура, Неопределено);
	
	Если Результат Тогда
		
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЧекаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОчиститьСообщения();
	
	Если РезультатВопроса = 1 Тогда
		
		// Отложить чек без резервирования
		ОтложитьНаКлиенте(Новый ОписаниеОповещения("ВопросПередЗакрытиемОперацияЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
	ИначеЕсли РезультатВопроса = 3 Тогда
		
		// Закрыть без сохранения.
		Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
			ПринудительноеЗавершениеРаботы = Истина;
			Закрыть(Неопределено);
		Иначе
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = 4 Тогда
		
		// Удалить чек.
		УдалениеВыполнено = РозничныеПродажиВызовСервера.УдалитьДокументПриОтменеФискальнойОперации(Объект.Ссылка);
		
		Если УдалениеВыполнено Тогда
			
			Оповестить("Запись_ВозвратПодарочныхСертификатов", Новый Структура, Неопределено);
			
			Если ДополнительныеПараметры.ОписаниеОповещения = Неопределено Тогда
				ПринудительноеЗавершениеРаботы = Истина;
				Закрыть(Неопределено);
			Иначе
				ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещения, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НовыйЧекНаСервере(Ссылка)
	
	НовыйЧек = Ссылка.ПолучитьОбъект();
	
	НовыйЧек.Дата = ТекущаяДатаСеанса();
	РазблокироватьДанныеФормыДляРедактирования();
	ЗначениеВДанныеФормы(НовыйЧек, Объект);
	
	ОбработатьПодарочныеСертификатыНаСервере();
	
	ТолькоПросмотр = Ложь;
	Модифицированность = Ложь;
	
	ПриСозданииЧека();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧека()
	
	СтруктураСостояниеКассовойСмены = РозничныеПродажиВызовСервера.СостояниеКассовойСмены(Объект.КассаККМ);
	ЗаполнитьЗначенияСвойств(Объект, СтруктураСостояниеКассовойСмены,, "Кассир");
	РозничныеПродажи.ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
	
	ОбновитьЗаголовокФормы();
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);
	
	НастроитьРМК();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОбщиеСуммыОплат(Форма)
	
	Форма.ОбщаяСуммаОплатыПлатежнымиКартами = РозничныеПродажиКлиентСервер.СуммаОплатыПлатежнымиКартами(Форма.Объект.ОплатаПлатежнымиКартами);
	
	ПересчитатьОбщиеСуммыОплатЛокализация(Форма);
	
КонецПроцедуры

&НаКлиенте
// Вызывается из формы МенюОперацииСККМ
Процедура ИзменитьКассуККМЗавершение(КассаККМ, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(КассаККМ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.КассаККМ <> КассаККМ Тогда		
		ИзменитьКассуККМ(КассаККМ);
		ПересчитатьДокументНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьКассуККМ(КассаККМ)
	
	Объект.КассаККМ = КассаККМ;
	ПараметрыКассыККМ = Новый ФиксированнаяСтруктура(Справочники.КассыККМ.ПараметрыКассыККМ(Объект.КассаККМ));
	ВерсияФФД = МенеджерОборудованияВызовСервера.ФискальноеУстройствоПоддерживаетВерсиюФФД(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	Если ЗначениеЗаполнено(Объект.РеализацияПодарочныхСертификатов) Тогда
		// Изменяем только реквизиты, связанные с кассой (кроме Кассира), состав возвращаемых подарочных сертификатов не изменяется.
		СостояниеКассовойСмены = РозничныеПродажи.ПолучитьСостояниеКассовойСмены(Объект.КассаККМ);
		ЗаполнитьЗначенияСвойств(Объект, СостояниеКассовойСмены,,"Кассир");
	Иначе
		НовыйЧек = Документы.ВозвратПодарочныхСертификатов.СоздатьДокумент();
		НовыйЧек.Партнер = Справочники.Партнеры.РозничныйПокупатель;
		НовыйЧек.ОбработкаЗаполнения(Новый Структура("КассаККМ", Объект.КассаККМ), Истина);
		НовыйЧек.Дата = ТекущаяДатаСеанса();
		
		Кассир = ?(ЗначениеЗаполнено(Объект.Кассир), Объект.Кассир, НовыйЧек.Кассир);
		ЗначениеВДанныеФормы(НовыйЧек, Объект);
		Прочитать();
		
		СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, НовыйЧек);
		Объект.Кассир = Кассир;
	КонецЕсли;
	
	ТолькоПросмотр = Ложь;
	Модифицированность = Ложь;
	
	РозничныеПродажи.ОчиститьДанныеФискальнойОперации(ДанныеФискальнойОперации);
	
	ОбновитьЗаголовокФормы();
	ОбновитьДанныеИнформационнойПанели(ЭтотОбъект, Истина = ТолькоПросмотр);

	НастроитьРМК();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Локализация

&НаКлиенте
Процедура ПечатьЧекаПослеЗаписиИзмененийЛокализация(ПараметрыОперацииФискализацииЧека)
	
	//++ Локализация
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ПробитьЧекПослеПроведения", ЭтотОбъект, ПараметрыОперацииФискализацииЧека),
		НСтр("ru = 'Перед выполнением операции пробития чека не удалось провести документ.'"));
	
	Возврат;
	//-- Локализация
	
	//@skip-warning
	УстановитьФискальныйСтатусПробит();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОперацииФискализацииЧекаНаСервереЛокализация(ИнформацияОбОплате)
	
	ПараметрыОперацииФискализацииЧека = Новый Структура;
	
	//++ Локализация
	ПараметрыОперацииФискализацииЧека = ФормированиеПараметровФискальногоЧекаСервер.ПараметрыОперацииФискализацииЧека(Объект.Ссылка, Объект.Организация, Объект.Кассир);
	ПараметрыОперацииФискализацииЧека.Вставить("ВерсияФФД", ВерсияФФД);
	ПараметрыОперацииФискализацииЧека.Вставить("ИдентификаторУстройства", ПараметрыКассыККМ.ИдентификаторУстройства);
	
	ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьТипРасчета(
		ПараметрыОперацииФискализацииЧека,
		Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств);
		
	ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьСерийныйНомерОборудования(
		ПараметрыОперацииФискализацииЧека,
		ПараметрыКассыККМ.СерийныйНомер);
		
	ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаМестоРасчетов(
		ПараметрыОперацииФискализацииЧека,
		Объект.Организация,
		СтруктураСостояниеКассовойСмены.КассаККМ,
		ПараметрыКассыККМ.ИдентификаторУстройства);
		
	ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаПозицийЧекаККМ(ПараметрыОперацииФискализацииЧека, Объект.Ссылка);
	
	ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаТаблицаОплатЧекаККМ(
		ПараметрыОперацииФискализацииЧека,
		ИнформацияОбОплате);
	
	ФормированиеПараметровФискальногоЧекаСервер.ОбновитьПараметрыФискальногоЧекаСБП(
		ПараметрыОперацииФискализацииЧека,
		РозничныеПродажиКлиентСерверЛокализация.СтрокиОплатыСБП(Объект.ОплатаПлатежнымиКартами));
	
	ФормированиеПараметровФискальногоЧекаСервер.ПараметрыФискальногоЧекаЗаполнитьПараметрыОтправкиЭлектронногоЧека(
		ПараметрыОперацииФискализацииЧека,
		ДанныеФискальнойОперации.ВариантОтправкиЭлектронногоЧека,
		ДанныеФискальнойОперации.КонтактныеДанныеЭлектронногоЧека);
	
	// Замена ставок НДС по признакам способа расчета: аванс, предоплата, оплата кредита
	Отказ = Ложь;
	ПараметрыОперацииФискализацииЧека.Вставить("СпособФорматноЛогическогоКонтроля", Перечисления.СпособыФорматноЛогическогоКонтроля.РазделятьСтроки);
	ОборудованиеЧекопечатающиеУстройстваВызовСервера.ПривестиДанныеКТребуемомуФормату(ПараметрыОперацииФискализацииЧека, Отказ, "", Ложь);
	//-- Локализация
	
	Возврат ПараметрыОперацииФискализацииЧека;
	
КонецФункции

&НаКлиенте
Процедура УстановитьФискальныйСтатусПробит()
	
	Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Оперативный);
	
	Записать(ПараметрыЗаписи);
	
	ТолькоПросмотр = Истина;
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Функционал печати чека для документа не реализован. Обратитесь к разработчикам.'"));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьРМКЛокализация(ДоступныеВидыОплаты, ЭлементыНаПерегруппировку)
	
	//++ Локализация
	Если СуммаДокумента = 0 Тогда
		СуммаДокумента = Объект.ПодарочныеСертификаты.Итог("Сумма");
	КонецЕсли;
	
	Элементы.ОплатитьСБП.Видимость       = ДоступныеВидыОплаты.СБП И ОбщаяСуммаОплатыСБП > 0
	                                          ИЛИ ДоступныеВидыОплаты.СБП И Не ЗначениеЗаполнено(Объект.РеализацияПодарочныхСертификатов);
	Элементы.СмешаннаяОплата.Видимость   = (Элементы.СмешаннаяОплата.Видимость ИЛИ Элементы.ОплатитьСБП.Видимость)
	                                           И СуммаДокумента <> ОбщаяСуммаОплатыСБП;
	
	ЭлементыНаПерегруппировку.Добавить(Элементы.ОплатитьСБП);
	
	Элементы.ДекоративноеПолеГруппаСуммаКВозврату2.Видимость = Не Элементы.ОплатитьСБП.Видимость;
	Элементы.СуммаКВозвратуСБП.Видимость = Элементы.ОплатитьСБП.Видимость;
	//-- Локализация
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнформацияОбОплатеЛокализация(Форма, ИнформацияОбОплате)
	
	//++ Локализация	
	ОплатаСБПОтменено = 0;
	
	ОплатыСБП = РозничныеПродажиКлиентСерверЛокализация.СтрокиОплатыСБП(Форма.Объект.ОплатаПлатежнымиКартами);
	Для Каждого СтрокаТЧ Из ОплатыСБП Цикл
		Если СтрокаТЧ.ОплатаОтменена Тогда
			ОплатаСБПОтменено = ОплатаСБПОтменено + СтрокаТЧ.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	ИнформацияОбОплате.Вставить("СБП",         Форма.ОбщаяСуммаОплатыСБП);
	ИнформацияОбОплате.Вставить("СБПОтменено", ОплатаСБПОтменено);
	
	
	ИтогоОплачено = ИнформацияОбОплате.ИтогоОплачено + ОплатаСБПОтменено;
	ИнформацияОбОплате.Вставить("ИтогоОплачено", ИтогоОплачено);
	//-- Локализация
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСБПЛокализация()
	
	//++ Локализация
	ОчиститьСообщения();
	ВыбраннаяФормаОплаты = РозничныеПродажиКлиентСервер.ДоступныеВидыОплаты(ЭтотОбъект);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВыбраннаяФормаОплаты", ВыбраннаяФормаОплаты);
	
	РозничныеПродажиКлиент.ОбработатьСостояниеСмены(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ОплатаСБПОбработкаОповещения", ЭтотОбъект, ДополнительныеПараметры));
	//-- Локализация
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнформационнаяПанельЛокализация(Форма, ИнформацияОбОплате)
	
	//++ Локализация
	Если ИнформацияОбОплате.СБП > 0 Тогда
		
		ОбщаяСуммаОплатыПлатежнымиКартамиИСБП = ИнформацияОбОплате.ПлатежныеКарты + ИнформацияОбОплате.СБП;
												
		Если ОбщаяСуммаОплатыПлатежнымиКартамиИСБП = 0 Тогда
			Форма.ИнформационнаяПанельСуммаКВозвратуНаличными         = ИнформацияОбОплате.СуммаКОплате;
		Иначе
			Форма.ИнформационнаяПанельСуммаКВозвратуНаличными         = ИнформацияОбОплате.СуммаКОплате - ОбщаяСуммаОплатыПлатежнымиКартамиИСБП;
		КонецЕсли;
		
		Форма.ИнформационнаяПанельСуммаКВозвратуСБП = ИнформацияОбОплате.СБП;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьОбщиеСуммыОплатЛокализация(Форма)
	
	//++ Локализация
	Форма.ЕстьОплатаСБП = РозничныеПродажиКлиентСерверЛокализация.СуммаОплатыСБППоДокументу(Форма.Объект.ОплатаПлатежнымиКартами) > 0;
	Форма.ОбщаяСуммаОплатыСБП = 0;
	
	ОплатыСБП = РозничныеПродажиКлиентСерверЛокализация.СтрокиОплатыСБП(Форма.Объект.ОплатаПлатежнымиКартами);
	Для Каждого СтрокаТЧ Из ОплатыСБП Цикл
		Форма.ОбщаяСуммаОплатыСБП = Форма.ОбщаяСуммаОплатыСБП + СтрокаТЧ.Сумма;
	КонецЦикла;
	//-- Локализация
	
КонецПроцедуры
//++ Локализация

&НаКлиенте
Процедура ПробитьЧекПослеПроведения(Проведен, ПараметрыОперацииФискализацииЧека) Экспорт
	
	Если НЕ Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПробитьЧекЗавершение", ЭтотОбъект);
	
	Результат = МенеджерОборудованияУТКлиент.ОборудованиеПодключено(ПараметрыКассыККМ.ИдентификаторУстройства);
	
	Если Результат Или ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
		
		Если Не ПараметрыКассыККМ.ИспользоватьБезПодключенияОборудования Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения",                ОписаниеОповещения);
			ДополнительныеПараметры.Вставить("ПараметрыОперацииФискализацииЧека", ПараметрыОперацииФискализацииЧека);
			
			ОповещениеПриЗавершении     = Новый ОписаниеОповещения("ПечатьЧека_Завершение",        ЭтотОбъект, ДополнительныеПараметры);
			ОповещениеПослеОткрытииЧека = Новый ОписаниеОповещения("ПечатьЧека_ПослеОткрытияЧека", ЭтотОбъект, ДополнительныеПараметры);
			
			ДополнительныеПараметры = МенеджерОборудованияКлиентСервер.ДополнительныеПараметрыОперации();
				ДополнительныеПараметры.ОповещениеПослеОткрытииЧека = ОповещениеПослеОткрытииЧека;
			
			ОборудованиеЧекопечатающиеУстройстваКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(
				ОповещениеПриЗавершении,
				УникальныйИдентификатор,
				ПараметрыКассыККМ.ИдентификаторУстройства,
				ПараметрыОперацииФискализацииЧека,
				ДополнительныеПараметры);
			
		Иначе
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
			
			РезультатВыполнения = Новый Структура;
			РезультатВыполнения.Вставить("Результат", Истина);
			ПечатьЧека_Завершение(
				РезультатВыполнения,
				ДополнительныеПараметры);
			
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Фискальное устройство не подключено. Чек не напечатан.'"));
			
		ВыполнитьОбработкуОповещения(
			ОписаниеОповещения,
			Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
				Ложь, Ложь));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_ПослеОткрытияЧека(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ШапкаЧека = ПараметрыВыполнения.ВходныеПараметры;
	
	Если ПараметрыВыполнения.НомерСмены <> 0 Тогда
		ШапкаЧека.НомерСменыККТ = ПараметрыВыполнения.НомерСмены;
	КонецЕсли;
	
	Если ПараметрыВыполнения.НомерЧека <> 0 Тогда
		ШапкаЧека.НомерЧекаККТ = ПараметрыВыполнения.НомерЧека;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ПараметрыВыполнения.ОповещениеПродолжения, ПараметрыВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЧека_Завершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	ИзмененныеДанныеЗаписаны = Ложь;
	ВыполненаОперацияНаУстройстве = Ложь;
	
	Если РезультатВыполнения.Результат Тогда
		
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыЧековККМ.Пробит");
		Если РезультатВыполнения.Свойство("НомерЧекаККТ") Тогда
			Объект.НомерЧекаККМ = Число(РезультатВыполнения.НомерЧекаККТ);
		КонецЕсли;
		
		ДанныеДляЖурналаРегистрации = Новый Структура;
		ДанныеДляЖурналаРегистрации.Вставить("Дата",   Объект.Дата);
		ДанныеДляЖурналаРегистрации.Вставить("Статус", Объект.Статус);
		
		ПараметрыФискализации = Неопределено;
		Если РезультатВыполнения.Свойство("ВыходныеПараметры")
			И РезультатВыполнения.ВыходныеПараметры.Количество() > 1 Тогда
			
			ДанныеДляЖурналаРегистрации.Вставить("НомерЧекаККМ", РезультатВыполнения.ВыходныеПараметры[1]);
			Объект.НомерЧекаККМ = Число(ДанныеДляЖурналаРегистрации.НомерЧекаККМ);
		
			// Если данные в регистр ФискальныеОперации не были записаны - произошла ошибка при записи.
			Если РезультатВыполнения.ВыходныеПараметры.Количество() > 8 Тогда
				ПараметрыФискализации = РезультатВыполнения.ВыходныеПараметры[8];
			КонецЕсли;
		КонецЕсли;
		
		ВыполненаОперацияНаУстройстве = Истина;
		Модифицированность = Истина;
		
		ТребуетсяПовторнаяПопыткаЗаписи = Ложь;
		ИзмененныеДанныеЗаписаны = ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, ПараметрыФискализации);
		Если Не ИзмененныеДанныеЗаписаны Тогда
			
			ДополнительныеПараметрыПовторЗаписи = РозничныеПродажиКлиентСервер.СтруктураПовтораЗаписи();
			ДополнительныеПараметрыПовторЗаписи.РеквизитыФискальнойОперацииКассовогоУзла = ПараметрыФискализации;
			ДополнительныеПараметрыПовторЗаписи.ОписаниеОповещения             = ДополнительныеПараметры.ОписаниеОповещения;
			ДополнительныеПараметрыПовторЗаписи.ТекстСообщения                 = НСтр("ru = 'После пробития чека на ФР не удалось сохранить документ.'");
			ДополнительныеПараметрыПовторЗаписи.ВозвращатьРезультатФункции     = Ложь;
			ДополнительныеПараметрыПовторЗаписи.РезультатПриУспешномПроведении = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Истина);
			ДополнительныеПараметрыПовторЗаписи.РезультатПриОтмене             = Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны", Истина, Ложь);
			ДополнительныеПараметрыПовторЗаписи.ИмяПроцедуры                   = "ЗаписатьНаСервере";
			ДополнительныеПараметрыПовторЗаписи.РезультатОперации              = ИзмененныеДанныеЗаписаны;
			
			Если Не ТребуетсяПовторнаяПопыткаЗаписи Тогда
				ОшибкаПриПроведенииЧекаВопросЗавершение(КодВозвратаДиалога.Отмена, ДополнительныеПараметрыПовторЗаписи);
				Возврат;
			КонецЕсли;
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ОшибкаПриПроведенииЧекаВопросЗавершение", ЭтотОбъект, ДополнительныеПараметрыПовторЗаписи),
				ДополнительныеПараметрыПовторЗаписи.ТекстСообщения,
				РежимДиалогаВопрос.ПовторитьОтмена, 10, КодВозвратаДиалога.Повторить,,КодВозвратаДиалога.Повторить);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
		                            |Чек не напечатан на фискальном устройстве.
		                            |Дополнительное описание:
		                            |%ДополнительноеОписание%'");
		
		ТекстСообщения = СтрЗаменить(
			ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(
		ДополнительныеПараметры.ОписаниеОповещения,
		Новый Структура("ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны",
			ВыполненаОперацияНаУстройстве, ИзмененныеДанныеЗаписаны));
	
КонецПроцедуры

&НаКлиенте
Процедура ПробитьЧекЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.ВыполненаОперацияНаУстройстве
		И Результат.ИзмененныеДанныеЗаписаны Тогда
		
		ТолькоПросмотр = Истина;
		
	Иначе
		
		Если Результат.ВыполненаОперацияНаУстройстве И Не Результат.ИзмененныеДанныеЗаписаны Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Данные", Объект.Ссылка);
			ПараметрыФормы.Вставить("ДанныеДляЖурналаРегистрации", ДанныеДляЖурналаРегистрации);
			ПараметрыФормы.Вставить("ТекстСообщения",
				НСтр("ru = 'ВНИМАНИЕ! Произошла исключительная ситуация:
				|Чек ККМ пробит, но не зафиксирован в системе.'"));
			
			ОткрытьФорму("Документ.ЧекККМ.Форма.ОшибкаЗаписи", ПараметрыФормы, ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьФискальнуюОперациюНаКлиенте(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла)
	
	Результат = ЗаписатьФискальнуюОперациюНаСервере(ТребуетсяПовторнаяПопыткаЗаписи, РеквизитыФискальнойОперацииКассовогоУзла);
	
	Если Результат Тогда
		Оповестить("Запись_ВозвратПодарочныхСертификатов", Новый Структура, Неопределено);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОплатаСБПОбработкаОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ВыполнитьДействиеПослеЗаписи(
		Новый ОписаниеОповещения("ОткрытьФормуОплатыСБП", ЭтотОбъект),
		НСтр("ru = 'Перед открытием формы оплаты не удалось записать документ.'"));
		
КонецПроцедуры

// Вызывается из формы сложной оплаты
&НаКлиенте
Процедура ОткрытьФормуОплатыСБП(ИзмененныеДанныеЗаписаны, ПараметрыЗавершения) Экспорт
	
	Если Не ИзмененныеДанныеЗаписаны Тогда
		Возврат;
	КонецЕсли;
	
	ВывестиКОплатеНаДисплейПокупателя = Истина;
	ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);
	
	ИнформацияОбОплате = ИнформацияОбОплате(ЭтотОбъект);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ИнформацияОбОплате",     ИнформацияОбОплате);
	ПараметрыОткрытияФормы.Вставить("Организация",            Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("Партнер",                Объект.Партнер);
	ПараметрыОткрытияФормы.Вставить("КассаККМ",               Объект.КассаККМ);
	ПараметрыОткрытияФормы.Вставить("ДатаВозврата",           Объект.Дата);
	ПараметрыОткрытияФормы.Вставить("Валюта",                 Объект.Валюта);
	ПараметрыОткрытияФормы.Вставить("ДокументОплаты",         Объект.РеализацияПодарочныхСертификатов);
	
	Если Не (ИнформацияОбОплате.СБП = 0 И ИнформацияОбОплате.СБПОтменено = 0) Тогда
		СтрокаОплатыСБП = РозничныеПродажиКлиентСерверЛокализация.СтрокиОплатыСБП(Объект.ОплатаПлатежнымиКартами)[0];
		ПараметрыОткрытияФормы.Вставить("ДоговорПодключения", СтрокаОплатыСБП.ДоговорПодключения);
		ПараметрыОткрытияФормы.Вставить("СсылочныйНомер", СтрокаОплатыСБП.СсылочныйНомер);
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатОплатыСБП", ЭтотОбъект, ПараметрыЗавершения);
	
	ОткрытьФорму(
		"Документ.ЧекККМ.Форма.ФормаОплатыСБП",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатОплатыСБП(РезультатВыполнения, ПараметрыЗавершения) Экспорт
	
	Если РезультатВыполнения = Неопределено
		ИЛИ РезультатВыполнения = КодВозвратаДиалога.Отмена
		ИЛИ НЕ РезультатВыполнения.Результат Тогда
		
		ПодключитьОбработчикОжидания("ВывестиИнформациюНаДисплейПокупателя", 0.1, Истина);

		Возврат;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("СуммаВозврата")
		И РезультатВыполнения.СуммаВозврата > 0 Тогда
		
		НомерСтрокиОплатыСБП = Неопределено;
		
		ОплатыСБП = РозничныеПродажиКлиентСерверЛокализация.СтрокиОплатыСБП(Объект.ОплатаПлатежнымиКартами);
		Если ОплатыСБП.Количество() > 0 Тогда
			НомерСтрокиОплатыСБП = ОплатыСБП[0].НомерСтроки;
			Объект.ОплатаПлатежнымиКартами[НомерСтрокиОплатыСБП - 1].ОплатаОтменена = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитатьДокументНаКлиенте();
	
	ОбработатьДобавлениеОплаты(ПараметрыЗавершения);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти
