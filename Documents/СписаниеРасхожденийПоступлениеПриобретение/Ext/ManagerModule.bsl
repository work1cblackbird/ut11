#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Соглашение";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Подразделение", Параметры);
	
КонецПроцедуры

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,Дата";
	
	Возврат ИменаРеквизитов;
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  Структура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.СписаниеРасхожденийПоступлениеПриобретение";

	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Ложь);

	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = 
					ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры
					И Не СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.Склад, Объект.Дата)
						Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости    = Истина;
	ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;

	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаПоВозвратуПоставщику);
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("ВидРасхождений");
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;
	ПараметрыУказанияСерий.ИмяТЧТовары = "Расхождения";

	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерийНаСкладах");
	
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Ссылка");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Соглашение");
	ПараметрыУказанияСерий.ИменаПолейДляОпределенияРаспоряжения.Добавить("Договор");
	ПараметрыУказанияСерий.Дата = Объект.Дата;
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки,
	|	Товары.ВидРасхождений
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры,
	|	Товары.ВидРасхождений
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|СГРУППИРОВАТЬ ПО
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Назначение,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры,
	|	Товары.ВидРасхождений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.Количество,
	|	Серии.ВидРасхождений
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.ВидРасхождений,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Назначение,
	|	Серии.ВидРасхождений
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР 
	|			КОГДА ТоварыДляЗапроса.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|				ТОГДА 0
	|			КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|				ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|			КОГДА НЕ &ТолькоСерииДляСебестоимости
	|				ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|						ТОГДА ВЫБОР
	|							КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|									ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|								ТОГДА ВЫБОР
	|									КОГДА ТоварыДляЗапроса.Количество > 0
	|										ТОГДА 10
	|									ИНАЧЕ 9
	|								КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|						ТОГДА ВЫБОР
	|							КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|									ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|								ТОГДА ВЫБОР
	|									КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|											И ТоварыДляЗапроса.Количество > 0
	|										ТОГДА 8
	|									ИНАЧЕ 7
	|								КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|							И (НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|								ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении)
	|							И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
	|						ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|								ТОГДА ВЫБОР
	|									КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|											И ТоварыДляЗапроса.Количество > 0
	|										ТОГДА 4
	|									ИНАЧЕ 3
	|								КОНЕЦ
	|							ИНАЧЕ ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 2
	|								ИНАЧЕ 1
	|							КОНЕЦ
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Назначение = ТоварыДляЗапроса.Назначение
	|			И Товары.ВидРасхождений = ТоварыДляЗапроса.ВидРасхождений
	|		ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|		ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|			И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|			И ТоварыДляЗапроса.Назначение = СерииДляЗапроса.Назначение
	|			И ТоварыДляЗапроса.ВидРасхождений = СерииДляЗапроса.ВидРасхождений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|		ПО (ПолитикиУчетаСерий.Склад = &Склад)
	|			И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|			ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки					КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий			КАК СтатусУказанияСерийНаСкладах,
	|	Статусы.СтатусУказанияСерий			КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
    |
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("АдресныйСклад");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("Обеспечение");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	СписаниеРасхожденийПоступлениеПриобретениеЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  СписокЗначений, Структура - Данные документа для проведения
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.СписаниеРасхожденийПоступлениеПриобретение") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);

		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(ДокументСсылка, Запрос, ТекстыЗапроса, Регистры);
		
		СписаниеРасхожденийПоступлениеПриобретениеЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
		
	КонецЕсли;

	ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры);
	ОформитьПоступлениеСписаниеТоваровПоДвухходовке(Запрос, ТекстыЗапроса, Регистры);

	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(
		Запрос, ТекстыЗапроса, Регистры, Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение);

	//
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);

КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт

	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	ИсправлениеДокументов.ДобавитьКомандуИсправление(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	ИсправлениеДокументов.ДобавитьКомандуСторно(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	СписаниеРасхожденийПоступлениеПриобретениеЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Заполняет список команд создания на основании.
//
// Параметры:
//   КомандыСоздатьНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//   ТаблицаЗначений - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСоздатьНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСоздатьНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Идентификатор = Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение);
		КомандаСоздатьНаОсновании.ПроверкаПроведенияПередСозданиемНаОсновании = Истина;
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область Печать
// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт об оприходовании товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "АктСписанияРасхождений";
	КомандаПечати.Представление = НСтр("ru = 'Акт списания расхождений'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	КомандаПечати.ДополнительныеПараметры.Вставить("БезДопКолонки");
	
	СписаниеРасхожденийПоступлениеПриобретениеЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияРасхождений") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСписанияРасхождений",
				НСтр("ru = 'Акт списания расхождений'"),
				ПечатьАктаСписанияРасхождений(МассивОбъектов, ОбъектыПечати));

	КонецЕсли;
	СписаниеРасхожденийПоступлениеПриобретениеЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	СтруктураДанныхОбъектаПечати - см. ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта.СтруктураДанныхОбъектаПечати
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "ПеревозчикПартнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ПеревозчикПартнер");
	
КонецПроцедуры


#КонецОбласти

#Область ДляВызоваИзДругихПодсистем
// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом
#КонецОбласти

#Область Прочее
// Возвращает структуру с наименованием табличных частей документа, хранящих информацию о товарах.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие наименования табличных частей:
//		* Расхождения - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о товарах документа.
//	
Функция КоллекцияТабличныхЧастейТоваров() Экспорт
	
	ТаблицыДокумента = Новый Структура("Расхождения");
	
	Возврат ТаблицыДокумента;
	
КонецФункции
#КонецОбласти

#Область УчетНДС

// Возвращает параметры для заполнения вида деятельности НДС.
//
// Параметры:
//	Документ - ДанныеФормыСтруктура, ДокументСсылка.ПоступлениеТоваровНаСклад, ДокументОбъект.ПоступлениеТоваровНаСклад - 
//				документ поступления товаров на склад.
//
// Возвращаемое значение:
//	Структура - состав полей задается в функции УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС().
//
Функция ПараметрыЗаполненияВидаДеятельностиНДС(Документ) Экспорт
	
	РеквизитыДокумента = Новый Структура("Дата, Организация, Склад, Договор, НаправлениеДеятельности, Подразделение");
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СписаниеРасхожденийПоступлениеПриобретение") Тогда
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, РеквизитыДокумента);
	Иначе
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, Документ);
	КонецЕсли;
	
	ПараметрыЗаполнения = УчетНДСУПКлиентСервер.ПараметрыЗаполненияВидаДеятельностиНДС();
	ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, РеквизитыДокумента);
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти


#Область Прочее
// Порядок обработки документа при изменении направления деятельности.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения
// 
// Возвращаемое значение:
// см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "Расхождения";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Расхождения", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
// Возвращаемое значение:
//	см. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности  = "Объект.НаправлениеДеятельности";
	
	// Потребности в товарах на складе.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ОбеспечениеЗаказов", Истина,
																		"Объект.Расхождения.Назначение");
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Потребность").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Номенклатура   = "Объект.Расхождения.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика = "Объект.Расхождения.Характеристика";
	ОписаниеКолонок.ПутиКДанным.Склад          = "Объект.Склад";
	
	Возврат МакетФормы;
	
КонецФункции

// Заполняет параметры запроса, выполняющего получение данных об используемых в документе хозяйственных операциях.
//
// Параметры:
//	ПараметрыЗапроса - Структура - параметры запроса, которые нужно инициализировать:
//		* ХозОперацииЗакупкаУПоставщика				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииЗакупкаПоИмпорту				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииЗакупкаВСтранахЕАЭС			 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииПриемНаКомиссию				 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииТоварыВПути					 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииНеотфактурованныеПоставки		 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//		* ХозОперацииНеРазделятьОформлениеЗакупок	 - Массив, Неопределено - массив элементов с типом
//														ПеречислениеСсылка.ХозяйственныеОперации.
//
Процедура ЗаполнитьПараметрыХозяйственныхОпераций(ПараметрыЗапроса) Экспорт
	
	ИспользоватьТоварыВПутиОтПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьТоварыВПутиОтПоставщиков");
	ИспользоватьНеотфактурованныеПоставки = ПолучитьФункциональнуюОпцию("ИспользоватьНеотфактурованныеПоставки");
	
	ХозОперацииЗакупкаУПоставщика = Новый Массив;
	
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		ХозОперацииЗакупкаУПоставщика.Добавить(
			Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	КонецЕсли;
	
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозОперацииЗакупкаУПоставщика.Добавить(Перечисления.ХозяйственныеОперации.
			ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
	КонецЕсли;
	
	ХозОперацииТоварыВПути = Новый Массив;
	Если ИспользоватьТоварыВПутиОтПоставщиков Тогда
		ХозОперацииТоварыВПути.Добавить(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути);
	КонецЕсли;
	
	ХозОперацииНеотфактурованныеПоставки = Новый Массив;
	Если ИспользоватьНеотфактурованныеПоставки Тогда
		ХозОперацииНеотфактурованныеПоставки.Добавить(
			Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка);
		
	КонецЕсли;
	
	ПараметрыЗапроса.ХозОперацииТоварыВПути                  = ХозОперацииТоварыВПути;
	ПараметрыЗапроса.ХозОперацииНеотфактурованныеПоставки    = ХозОперацииНеотфактурованныеПоставки;
	
КонецПроцедуры

// Возвращает параметры выбора статей и аналитик.
//
// Параметры:
// 	Параметры - Структура - Структура, свойства которой содержат значения, 
//            влияющие на ДоступностьПоОперации: ЕстьПерепоставки, ЕстьНедопоставки, ОбработкаПроверкиЗаполнения.
// 
// Возвращаемое значение:
//	Структура - Параметры выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
//
Функция ПараметрыВыбораСтатейИАналитик(Параметры) Экспорт
	МассивПараметровВыбора = Новый Массив;
	
	#Область СтатьяДоходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья      = "СтатьяДоходов";
	ПараметрыВыбора.ТипСтатьи   = "СтатьяДоходовТипСтатьи";
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Ложь;
	
	Если Параметры.Свойство("ЕстьПерепоставки") И
		Не Параметры.ЕстьПерепоставки И
		Параметры.Свойство("ОбработкаПроверкиЗаполнения") И
		Параметры.ОбработкаПроверкиЗаполнения Тогда
		
		ПараметрыВыбора.ДоступностьПоОперации = Ложь;

	КонецЕсли;

	ПараметрыВыбора.ВыборСтатьиДоходов = Истина;
	ПараметрыВыбора.АналитикаДоходов   = "АналитикаДоходов";

	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаПассивов";
	
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяДоходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов.Добавить("АналитикаДоходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаПассивов");

	МассивПараметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти	
	
	#Область СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья      = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи   = "СтатьяРасходовТипСтатьи";
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Ложь;
	
	Если Параметры.Свойство("ЕстьНедопоставки") И
		Не Параметры.ЕстьНедопоставки И
		Параметры.Свойство("ОбработкаПроверкиЗаполнения") И
		Параметры.ОбработкаПроверкиЗаполнения Тогда
		
		ПараметрыВыбора.ДоступностьПоОперации = Ложь;

	КонецЕсли;

	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";

	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивов");
	
	МассивПараметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	Возврат МассивПараметровВыбора;
	
КонецФункции



// Возвращает значение распоряжения на поступление или отгрузку.
//
// Параметры:
//  ЗначенияПолейДляОпределенияРаспоряжения - Структура - состав полей определяется значением
//  поля ИменаПолейДляОпределенияРаспоряжения параметров указания серий этого документа.
//
// Возвращаемое значение:
//  ДокументСсылка - ссылка на распоряжение для выполнения складской операции.
//
Функция РаспоряжениеНаВыполнениеСкладскойОперации(ЗначенияПолейДляОпределенияРаспоряжения) Экспорт
	Возврат ЗначенияПолейДляОпределенияРаспоряжения.Ссылка;
КонецФункции

#КонецОбласти

// Заполняет ТЧ расхождения между поступлением и приобретением.
//
// Параметры:
//	Расхождения                            - ТаблицаЗначений - таблица расхождений документа,
//	ПараметрыЗаполнения                    - см. ПараметрыЗаполненияПоФактическойПриемке
//
// Возвращаемое значение:
//	Булево - Флаг, по которому можно определить что в результате перезаполнения ТЧ документа изменилась.
//
Функция ЗаполнитьРасхожденияМеждуПоступлениемИПриобретением(Расхождения, ПараметрыЗаполнения) Экспорт
	ТекущийДокумент                        = ПараметрыЗаполнения.ТекущийДокумент;
	СтруктураДействийСДобавленнымиСтроками = ПараметрыЗаполнения.СтруктураДействийСДобавленнымиСтроками;
	Склад                                  = ПараметрыЗаполнения.Склад;
	Соглашение                             = ПараметрыЗаполнения.Соглашение;
	Договор                                = ПараметрыЗаполнения.Договор;
	МассивРаспоряжений                     = ПараметрыЗаполнения.МассивРаспоряжений;
	
	Если МассивРаспоряжений.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;

	ЕстьИзменения = Ложь;
	Распоряжение = МассивРаспоряжений[0];
	
	УстановитьПривилегированныйРежим(Истина);
	
	РаботыУслуги = Новый Массив;
	РаботыУслуги.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	РаботыУслуги.Добавить(Перечисления.ТипыНоменклатуры.Услуга);

	Запрос = Новый Запрос(ТекстЗапросаРасхожденияПоступлениеПриобретение());
	Запрос.УстановитьПараметр("ДокументОснование", Распоряжение);
	Запрос.УстановитьПараметр("СкладУказан", ЗначениеЗаполнено(Склад));
	Запрос.УстановитьПараметр("СкладПоступления", Склад);
	Запрос.УстановитьПараметр("РаботыУслуги", РаботыУслуги);
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);     
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ЕстьИзменения;
	КонецЕсли; 
	Выборка = Результат.Выбрать();

	ВыгружаемыеКолонки = "Номенклатура, Характеристика, Серия, Упаковка, Количество, Назначение";
	Расхождения.Очистить();
	ЕстьИзменения = Истина;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Расхождения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);				
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействийСДобавленнымиСтроками, Неопределено);
	КонецЦикла;
	
	Возврат ЕстьИзменения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ОформитьПоступлениеСписаниеТоваровПоДвухходовке(Запрос, ТекстыЗапроса, Регистры)

	ТекстЗапросаДокумента = 
	"ВЫБРАТЬ
	|	ИсточникДанных.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ИсточникДанных.Ссылка.Распоряжение В
	|		(НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|			ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			ТОГДА ИсточникДанных.Ссылка
	|		ИНАЧЕ ИсточникДанных.Ссылка.Распоряжение
	|	КОНЕЦ КАК Накладная,
	|	ИсточникДанных.ВидРасхождений КАК ВидРасхождений,
	|	НЕОПРЕДЕЛЕНО КАК ВариантПриемкиТоваров,
	|	ИсточникДанных.Ссылка.Распоряжение КАК Заказ,
	|	ИсточникДанных.Ссылка.Договор КАК Договор,
	|	ИсточникДанных.Ссылка.Соглашение КАК Соглашение,
	|	ИсточникДанных.Ссылка.Дата КАК Дата,
	|	ИсточникДанных.Номенклатура КАК Номенклатура,
	|	ИсточникДанных.Характеристика КАК Характеристика,
	|	ИсточникДанных.Назначение КАК Назначение,
	|	ИсточникДанных.Серия КАК Серия,
	|	ИсточникДанных.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	ЛОЖЬ КАК СверхЗаказа,
	|	ВЫБОР 
	|		КОГДА ИсточникДанных.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ ИсточникДанных.Ссылка.Склад 
	|	КОНЕЦ КАК Склад,
	|	ИсточникДанных.Ссылка.Партнер КАК Отправитель,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ИсточникДанных.Ссылка.Распоряжение) = ТИП(Справочник.ДоговорыКонтрагентов)
	|			ТОГДА ВЫРАЗИТЬ(ИсточникДанных.Ссылка.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация
	|		КОГДА ТИПЗНАЧЕНИЯ(ИсточникДанных.Ссылка.Распоряжение) = ТИП(Документ.ЗаказПоставщику)
	|			ТОГДА ВЫРАЗИТЬ(ИсточникДанных.Ссылка.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация
	|		КОГДА ТИПЗНАЧЕНИЯ(ИсточникДанных.Ссылка.Распоряжение) = ТИП(Документ.ПриобретениеТоваровУслуг)
	|			ТОГДА ВЫРАЗИТЬ(ИсточникДанных.Ссылка.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасхожденийПоступлениеПриобретение)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ИсточникДанных.Количество КАК Количество,
	|	ЛОЖЬ КАК ЭтоНакладная,
	|	НЕ ИсточникДанных.Ссылка.Распоряжение В
	|	(НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Документ.ЗаказПоставщику.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ПоступлениеПоЗаказам
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК ИсточникДанных
	|ГДЕ
	|	ИсточникДанных.Ссылка В (&Ссылка)";
	
	ТекущийОбъектМетаданных = Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение;
	
	СкладыСервер.ОформитьСписаниеРасхожденийПоДвухходовке(
		Запрос,
		ТекстыЗапроса,
		Регистры,
		ТекстЗапросаДокумента,
		ТекущийОбъектМетаданных);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Распоряжение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Распоряжение");
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Период,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Распоряжение КАК Распоряжение,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Склад КАК Склад,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Контрагент.СтранаРегистрации КАК СтранаРегистрации,
	|	ДанныеДокумента.Соглашение КАК Соглашение,
	|	ДанныеДокумента.Соглашение.Валюта КАК ВалютаСоглашения,
	|	ДанныеДокумента.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДанныеДокумента.Соглашение.ЦенаВключаетНДС КАК ЦенаВключаетНДССоглашения,
	|	Значение(Перечисление.ХозяйственныеОперации.СписаниеРасхожденийПоступлениеПриобретение) КАК ХозяйственнаяОперация,
	|	ВЫБОР 
	|		КОГДА ДанныеДокумента.Распоряжение ССЫЛКА Документ.ЗаказПоставщику 
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация
	|		КОГДА ДанныеДокумента.Распоряжение ССЫЛКА Документ.ПриобретениеТоваровУслуг 
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Распоряжение КАК Документ.ПриобретениеТоваровУслуг).ХозяйственнаяОперация
	|		КОГДА ДанныеДокумента.Распоряжение ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ДанныеДокумента.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация
	|	КОНЕЦ КАК ХозяйственнаяОперацияРаспоряжения,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Автор КАК Автор,
	|	ДанныеДокумента.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	НастройкиХозяйственныхОпераций.Ссылка КАК НастройкаХозяйственнойОперации,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО НастройкиХозяйственныхОпераций.ХозяйственнаяОперация = &ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеРасхожденийПоступлениеПриобретение);
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Реквизиты.Организация, Реквизиты.Период);
	
	Запрос.УстановитьПараметр("Период", 							Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка", 							Реквизиты.Ссылка);
	
	Запрос.УстановитьПараметр("Распоряжение", 						Реквизиты.Распоряжение);
	Запрос.УстановитьПараметр("Организация", 						Реквизиты.Организация);
	Запрос.УстановитьПараметр("Партнер", 							Реквизиты.Партнер);
	Запрос.УстановитьПараметр("Контрагент", 						Реквизиты.Контрагент);
	Запрос.УстановитьПараметр("Склад",								Реквизиты.Склад);
	Запрос.УстановитьПараметр("СтранаРегистрации", 					Реквизиты.СтранаРегистрации);
	Запрос.УстановитьПараметр("Соглашение", 						Реквизиты.Соглашение);
	Запрос.УстановитьПараметр("ВидДеятельностиНДС", 				Реквизиты.ВидДеятельностиНДС);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", 				Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияРаспоряжения",	Реквизиты.ХозяйственнаяОперацияРаспоряжения);
	Запрос.УстановитьПараметр("Подразделение", 						Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Договор", 							Реквизиты.Договор);
	Запрос.УстановитьПараметр("Автор", 								Реквизиты.Автор);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", 			Реквизиты.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("Номер", 								Реквизиты.Номер);
	Запрос.УстановитьПараметр("Комментарий", 						Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("ПометкаУдаления", 					Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Проведен", 							Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям",
		ПолучитьФункциональнуюОпцию("КонтролироватьОстаткиТоваровОрганизацийКОформлениюПоПоступлениям"));
	Запрос.УстановитьПараметр("ХозОперацииЗакупкаПоИмпорту",		ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(
																		Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту));
	Запрос.УстановитьПараметр("ИдентификаторМетаданных",       		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяОбъекта()));
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",			ПараметрыУчетаПоОрганизации.ОсновноеНалогообложениеНДСПродажи);
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации",     Реквизиты.НастройкаХозяйственнойОперации);
	
	Запрос.УстановитьПараметр("ДокументПоступления", Реквизиты.Распоряжение);
	Запрос.УстановитьПараметр("Исправление", 						Реквизиты.Исправление);
	Запрос.УстановитьПараметр("СторнируемыйДокумент", 				Реквизиты.СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент", 				Реквизиты.ИсправляемыйДокумент);
	
	ПарыОперацийРаздельнойЗакупки = ЗакупкиСервер.ПарыОперацийРаздельнойЗакупки();
	ХозяйственнаяОперацияКПоступлению = ПарыОперацийРаздельнойЗакупки.Получить(Реквизиты.ХозяйственнаяОперация);
	ХозяйственнаяОперацияКПоступлению = ?(Не ЗначениеЗаполнено(ХозяйственнаяОперацияКПоступлению),
		Реквизиты.ХозяйственнаяОперацияРаспоряжения,
		ХозяйственнаяОперацияКПоступлению);
	
	Запрос.УстановитьПараметр("ХозяйственнаяОперацияКПоступлению", ХозяйственнаяОперацияКПоступлению);
	
	ИнформацияПоДоговору = Неопределено;
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ШаблонСтроки = "ru = 'По договору ""%1""'"; // @НСтр
		ИнформацияПоДоговору = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.Договор);
	КонецЕсли;
	Запрос.УстановитьПараметр("ИнформацияПоДоговору", ИнформацияПоДоговору);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);

КонецПроцедуры

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаРасхождений.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ											КАК ВидДвижения,
	|	&Период                                     	КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаРасхождений.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|			ИЛИ &ХозяйственнаяОперацияКПоступлению В (
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки))
	|			ТОГДА
	|				ТаблицаРасхождений.АналитикаУчетаНоменклатурыТоварыУПартнеров
	|			ИНАЧЕ
	|				АналитикаУчетаНоменклатурыБезСерии.КлючАналитики
	|	КОНЕЦ КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                	КАК Организация,
	|	ТаблицаРасхождений.ВидЗапасов                   КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК НомерГТД,
	|	ТаблицаРасхождений.Количество                  	КАК Количество,
	|	0                                           	КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                      	КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                	КАК ОрганизацияОтгрузки,
	|	ИСТИНА                                      	КАК Первичное
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК ТаблицаРасхождений
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатурыБезСерии
	|		ПО ТаблицаРасхождений.АналитикаУчетаНоменклатурыТоварыУПартнеров.Номенклатура = АналитикаУчетаНоменклатурыБезСерии.Номенклатура
	|		И ТаблицаРасхождений.АналитикаУчетаНоменклатурыТоварыУПартнеров.Характеристика = АналитикаУчетаНоменклатурыБезСерии.Характеристика
	|		И АналитикаУчетаНоменклатурыБезСерии.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|		И ТаблицаРасхождений.АналитикаУчетаНоменклатурыТоварыУПартнеров.Назначение = АналитикаУчетаНоменклатурыБезСерии.Назначение
	|		И ТаблицаРасхождений.АналитикаУчетаНоменклатурыТоварыУПартнеров.МестоХранения = АналитикаУчетаНоменклатурыБезСерии.МестоХранения
	|ГДЕ
	|	ТаблицаРасхождений.Ссылка = &Ссылка
	|	И ТаблицаРасхождений.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И (
	|		ТаблицаРасхождений.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		ИЛИ 
	|		(
	|		ТаблицаРасхождений.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|		И &ХозяйственнаяОперацияКПоступлению В (
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути),
	|														ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути))
	|		)
	|	)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	&Период                                     	КАК Период,
	|	ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                	КАК Организация,
	|	ТаблицаВидовЗапасов.ВидЗапасов                  КАК ВидЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)		КАК НомерГТД,
	|	ТаблицаВидовЗапасов.Количество                 	КАК Количество,
	|	0												КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                      	КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                	КАК ОрганизацияОтгрузки,
	|	ИСТИНА                                      	КАК Первичное
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.ВидыЗапасов КАК ТаблицаВидовЗапасов
	|ГДЕ
	|	ТаблицаВидовЗапасов.Ссылка = &Ссылка
	|	И (ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар ИЛИ ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ВестиУчетПоГТД)
	|	И ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаВидовЗапасов.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	&Период                                     	КАК Период,
	|	ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                	КАК Организация,
	|	ТаблицаВидовЗапасов.ВидЗапасов                 	КАК ВидЗапасов,
	|	ТаблицаВидовЗапасов.НомерГТД					КАК НомерГТД,
	|	ТаблицаВидовЗапасов.Количество                 	КАК Количество,
	|	ТаблицаВидовЗапасов.КоличествоПоРНПТ			КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация                      	КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                	КАК ОрганизацияОтгрузки,
	|	ИСТИНА                                      	КАК Первичное
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.ВидыЗапасов КАК ТаблицаВидовЗапасов
	|ГДЕ
	|	ТаблицаВидовЗапасов.Ссылка = &Ссылка
	|	И (ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар ИЛИ ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ВестиУчетПоГТД)
	|	И ТаблицаВидовЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры В 
	|			(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ТаблицаВидовЗапасов.НомерГТД <> ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Прослеживаемые работы
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)			КАК ВидДвижения,
	|	&Период											КАК Период,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|	&Организация									КАК Организация,
	|	ВидыЗапасов.ВидЗапасов							КАК ВидЗапасов,
	|	ВидыЗапасов.НомерГТД							КАК НомерГТД,
	|	ВидыЗапасов.Количество							КАК Количество,
	|	ВидыЗапасов.КоличествоПоРНПТ					КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО									КАК ОрганизацияОтгрузки,
	|	ИСТИНА											КАК Первичное
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.ВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар
	|	И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)			КАК ВидДвижения,
	|	&Период											КАК Период,
	|	Расхождения.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|	&Организация									КАК Организация,
	|	Расхождения.ВидЗапасов							КАК ВидЗапасов,
	|	НЕОПРЕДЕЛЕНО									КАК НомерГТД,
	|	Расхождения.Количество							КАК Количество,
	|	0												КАК КоличествоПоРНПТ,
	|	&ХозяйственнаяОперация							КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО									КАК ОрганизацияОтгрузки,
	|	ИСТИНА											КАК Первичное
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК Расхождения
	|ГДЕ
	|	Расхождения.Ссылка = &Ссылка
	|	И Расхождения.АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И Расхождения.АналитикаУчетаНоменклатуры.Номенклатура.ПрослеживаемыйТовар
	|	И Расхождения.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|	И &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка                  КАК Ссылка,
	|	&Период                  КАК ДатаДокументаИБ,
	|	&Номер                   КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&Организация             КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеРасхожденийПоступлениеПриобретение)   КАК ХозяйственнаяОперация,
	|	&Партнер                 КАК Партнер,
	|	&Контрагент              КАК Контрагент,
	|	&Договор                 КАК Договор,        
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&Склад		             КАК МестоХранения,
	|	&Подразделение           КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО             КАК Ответственный,
	|	&Автор                   КАК Автор,
	|	&Комментарий             КАК Комментарий,
	|	НЕОПРЕДЕЛЕНО             КАК Валюта,
	|	НЕОПРЕДЕЛЕНО             КАК Сумма,
	|	НЕОПРЕДЕЛЕНО             КАК Статус,
	|	&Проведен                КАК Проведен,
	|	&ПометкаУдаления         КАК ПометкаУдаления,
	|	ЛОЖЬ                     КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору    КАК Дополнительно,
	|	НЕОПРЕДЕЛЕНО			 КАК ДатаПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО			 КАК НомерПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО	         КАК НаименованиеПервичногоДокумента,
	|	&Исправление             КАК СторноИсправление,
	|	&СторнируемыйДокумент    КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент    КАК ИсправляемыйДокумент,
	|	&Период                  КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО             КАК Приоритет";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|	&ПустоеНазначение КАК Назначение,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия КАК Серия,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения КАК МестоХранения
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.ВидыЗапасов КАК ВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура = Аналитика.Номенклатура
	|			И ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика = Аналитика.Характеристика
	|			И ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия = Аналитика.Серия
	|			И ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения = Аналитика.МестоХранения
	|			И (&ПустоеНазначение = Аналитика.Назначение)
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL
	|	И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|
	|";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка", Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("ПустоеНазначение", Справочники.Назначения.ПустаяСсылка());
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
КонецПроцедуры

Функция ТекстЗапросаВтТаблицаСоответствияХозОпераций()
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР КОГДА ТипЗначения(ТаблицаДокумента.Распоряжение) = ТИП(Документ.ЗаказПоставщику)
	|		ТОГДА
	|			ВЫБОР 
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Документ.ЗаказПоставщику).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути)
	|			КОНЕЦ
	|	КОГДА ТипЗначения(ТаблицаДокумента.Распоряжение) = ТИП(Справочник.ДоговорыКонтрагентов)
	|		ТОГДА
	|			ВЫБОР 
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути)
	|				КОГДА ВЫРАЗИТЬ(ТаблицаДокумента.Распоряжение КАК Справочник.ДоговорыКонтрагентов).ХозяйственнаяОперация = 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути)
	|					ТОГДА 
	|						ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути)
	|			КОНЕЦ
	|	КОНЕЦ КАК ХозОперацияПоступления
	|ПОМЕСТИТЬ ВтТаблицаСоответствияХозОпераций
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка" + ОбщегоНазначения.РазделительПакетаЗапросов()	;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли;
	 
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	ТекстСоответствиеХозОпераций = ТекстЗапросаВтТаблицаСоответствияХозОпераций();
	
	ТекстЗапроса = ТекстСоответствиеХозОпераций +
	"
	|ВЫБРАТЬ
	|	ТаблицаРасхождений.Номенклатура КАК Номенклатура,
	|	ТаблицаРасхождений.Характеристика КАК Характеристика,
	|	ТаблицаРасхождений.Серия КАК Серия,
	|	ТаблицаРасхождений.Ссылка.Склад КАК Склад,
	|	ТаблицаРасхождений.АналитикаУчетаНоменклатуры.СкладскаяТерритория.ЦеховаяКладовая КАК ЦеховаяКладовая,
	|	ТаблицаРасхождений.Назначение КАК Назначение,
	|	ТаблицаРасхождений.ВидРасхождений КАК ВидРасхождений,
	|	ТаблицаРасхождений.Ссылка.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ХозяйственныеОперации.ХозОперацияПоступления КАК ХозяйственнаяОперацияРаспоряжения,
	|	ТаблицаРасхождений.АналитикаУчетаНоменклатуры КАК АналитикаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики КАК АналитикаНоменклатурыБезНазначения,
	|	ТаблицаРасхождений.АналитикаУчетаНоменклатурыТоварыУПартнеров КАК АналитикаУчетаНоменклатурыТоварыУПартнеров,
	|
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|
	|	ТаблицаРасхождений.ВидЗапасов КАК ВидЗапасов,
	|	ТаблицаРасхождений.ВидЗапасов КАК ВидЗапасовНаСкладе,
	|	ТаблицаРасхождений.ВидЗапасов.ТипЗапасов КАК ТипЗапасов,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка) КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ТаблицаРасхождений.Количество КАК Количество,
	|
	|	0 КАК СуммаСНДСУпр,
	|	0 КАК СуммаНДСУпр,
	|	0 КАК СуммаБезНДСУпр,
	|	
	|	0 КАК СуммаБезНДСРегл,
	|	0 КАК СуммаНДСРегл,
	|
	|	ТаблицаРасхождений.ИдентификаторСтроки КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК ТаблицаРасхождений
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО ТаблицаРасхождений.Номенклатура = АналитикаБезНазначения.Номенклатура
	|			И ТаблицаРасхождений.Характеристика = АналитикаБезНазначения.Характеристика
	|			И ТаблицаРасхождений.Серия = АналитикаБезНазначения.Серия
	|			И ТаблицаРасхождений.Ссылка.Склад = АналитикаБезНазначения.МестоХранения
	|			И (ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) = АналитикаБезНазначения.Назначение)
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО ТаблицаАналитикУчетаПартий.НомерСтроки = ТаблицаРасхождений.НомерСтроки
	|		И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""Расхождения""
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаСоответствияХозОпераций КАК ХозяйственныеОперации
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ТаблицаРасхождений.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра); 
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстНомераСтрок = РасчетСебестоимостиПроведениеДокументов.ТекстЗапросаКодыСтрокДляАналитикиУчетаПартий(
		Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение.Имя,
		"Расхождения");
	
	ТекстВыборкаПоляАналитик = ТекстНомераСтрок + 
	"ВЫБРАТЬ
	|	""Расхождения"" КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ДанныеДокумента.Партнер КАК Поставщик,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	// Списании расхождений по неотфактурованной постаоке или по товарам в пути от поставщиков относится всегда
	// к виду деятельности, не облагемому НДС. 
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК НалогообложениеНДС,
	|	ЕСТЬNULL(ГФУ.ВидЦенностиНДС, ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары)) КАК ВидЦенности,
	|	КодыСтрок.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеРасхожденийПоступлениеПриобретение КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = ТаблицаДокумента.АналитикаУчетаНоменклатуры.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодыСтрокДляАналитикиУчетаПартий КАК КодыСтрок
	|		ПО ТаблицаДокумента.НомерСтроки = КодыСтрок.НомерСтроки
	|		И КодыСтрок.ИмяТабличнойЧасти = ""Расхождения""
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыФинансовогоУчетаНоменклатуры КАК ГФУ
	|		ПО СпрНоменклатура.ГруппаФинансовогоУчета = ГФУ.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента      = "Документ.СписаниеРасхожденийПоступлениеПриобретение";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник    = Истина;
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",    """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоИсправлению", """""");
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ВЗапросеЕстьИсточник = Ложь;
		
	ИначеЕсли ИмяРегистра = "ТоварыОрганизаций" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ОтразитьРаспределениеЗапасовДвижения(Запрос, ТекстыЗапроса, Регистры)
	
	ТекстЗапросаТабЧасть =
		// Списание расхождений между поступлением и приобретением закрывает график поступления.
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка                                         КАК Ссылка,
		|	ТабЧасть.Ссылка.Дата                                    КАК Период,
		|	ТабЧасть.Номенклатура                                   КАК Номенклатура,
		|	ТабЧасть.Характеристика                                 КАК Характеристика,
		|	ТабЧасть.Ссылка.Склад                                   КАК Склад,
		|	ТабЧасть.Назначение                                     КАК Назначение,
		|	ВЫБОР 
		|		КОГДА ТабЧасть.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
		|			ТОГДА -ТабЧасть.Количество
		|		ИНАЧЕ ТабЧасть.Количество
		|	КОНЕЦ                                                   КАК Количество,
		|	ТабЧасть.Ссылка.Распоряжение                            КАК РаспоряжениеВГрафике
		|ИЗ
		|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Номенклатура.ТипНоменклатуры В(
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа),
		|			ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	РаспределениеЗапасовДвижения.ОтменитьЗапланированныйПриходЗапаса(Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаТабЧасть);
	
КонецПроцедуры

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	
	Если Запрос <> Неопределено Тогда
		// Нет дополнительных параметров.
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область Описание_ВыбытиеПоФиксированнойСтоимости_Товар
	
	// Расхождения при неотфактурованной поставке и по товарам в пути от поставщиков.
	//
	// Недопоставка (поступило меньше чем по накладной)
	//	Списание положительного остатка по разделу учета на статью расходов
	//	в корреспонденции с регистром "Прочие расходы" или "Активы и пассивы".
	//	Стоимость списания рассчитывается на этапах РешитьСЛУПлатформой_СебестоимостьПредприятия и РешитьСЛУПлатформой_СебестоимостьОрганизаций,
	//	т.к. для исправлений и сторно нельзя определить стоимость на этапе подбора партий.
	//	Формирование движений по регистрам выполняется в процедуре  СкорректироватьСтоимостьСписанияЗапасов(). 
	//
	//	Формируются движениея "Расход" с положительным количеством, если указан вид расхождений "Недопоставка".
	//	В движениях заполняется статья расходов или статья активов из поля СтатьяРасходов.
	//	При указании статьи активов в движениях заполняются реквизиты АналитикаАктивовПассивов и НастройкаСчетовУчета
	//	из полей АналитикаАктивов и НастройкаСчетовУчетаАктивов соответственно.
	//
	//	Для неотфактурованной поставки тип записи должен быть СписаниеОстаткаБезПартии, т.к. источник будет иметь 
	//	типы записей Потребление или Остаток, и в источнике партия не будет заполнена.
	//	Для товаров в пути от поставщиков тип записи должен быть Потребление, т.к. источник будет иметь типы записей Партия или Остаток
	//
	//	При неотфактуровке списываемый положительный остаток формируется документами ПриобретениеТоваровУслуг с типом записи Потребление.
	//	У таких записей признак РасчетНеЗавершен должен быть Истина - это значит что для записей нет остатков для фактуровки.
	// 
	//	Для товаров в пути от поставщиков положительный остаток формируется документами ПриобретениеТоваровУслуг с типом записи Партия.
	//
	// Перепоставка (поступило больше чем по накладной)
	//	Списание отрицательного остатка по разделу учета на статью доходов 
	//	в корреспондннции с регистром "Прочие доходы" или "Активы и пассивы".
	//	Стоимость списания рассчитывается на этапах РешитьСЛУПлатформой_СебестоимостьПредприятия и РешитьСЛУПлатформой_СебестоимостьОрганизаций,
	//	т.к. для исправлений и сторно нельзя определить стоимость на этапе подбора партий.
	//	Формирование движений по регистрам выполняется в процедуре  СкорректироватьСтоимостьСписанияЗапасов().
	//
	//	Формируются движениея "Расход" с типом записи "Потребление" и отрицательным количеством
	//	если указан вид расхождений "Перепоставка".
	//	В движениях заполняется статья доходов или статья пассивов из поля СтатьяДоходов.
	//	При указании статьи пассивов в движениях заполняются реквизиты АналитикаАктивовПассивов и НастройкаСчетовУчета
	//	из полей АналитикаПассивов и НастройкаСчетовУчетаПассивов соответственно.
	//
	//	Для неотфактурованной поставки тип записи должен быть Потребление, т.к. источник будет иметь типы записей Партия или Остаток.
	//	Для товаров в пути от поставщиков тип записи должен быть СписаниеОстаткаБезПартии, т.к. источник будет иметь типы записей Потребление или Остаток
	//
	//	При неотфактуровке списываемый отрицательный остаток формируется документами ПоступлениеТоваровНаСклад и ПоступлениеУслугВПодразделение
	//	с типом записи Партия.
	//
	//	Для товаров в пути от поставщиков отрицательный остаток формируется документами ПоступлениеТоваровНаСклад с типом записи Потребление.
	//	У таких записей признак РасчетНеЗавершен должен быть Истина - это значит что для записи нет остатков приобретений товаров. 
	//
	// Движения формируются через модульную операцию ВыбытиеПоФиксированнойСтоимости (эта операция может относить отрицательную стоимость на прочие доходы)
	// Раздел учета определяется в процедуре модуля РасчетСебестоимостиПроведениеДокументов по типу запасов:
	// - СобственныйТоварПоНеотфактурованнойПоставке - раздел учета "НеотфактурованныеПоставки"
	// - СобственныйТоварВПути - раздеь учета "СобственныйТоварВПути"
	
	#КонецОбласти
	
	#Область ВыбытиеПоФиксированнойСтоимости_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 						КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыТоварыУПартнеров КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК ВидЗапасов,
	// Списании расхождений по неотфактурованной постаоке или по товарам в пути от поставщиков относится всегда
	// к виду деятельности, не облагемому НДС. 
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК ВидДеятельностиНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС) КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО										КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО										КАК КорВидЗапасов,
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьяДоходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ТаблицаДокумента.СтатьяДоходов
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|			ТОГДА ТаблицаДокумента.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)						КАК СтатьяРасходовАктивов,
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьяДоходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ТаблицаДокумента.АналитикаПассивов
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьЯРасходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ТаблицаДокумента.АналитикаАктивов
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|			ТОГДА ТаблицаДокумента.АналитикаРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)						КАК АналитикаРасходовАктивов,
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьяДоходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ТаблицаДокумента.НастройкаСчетовУчетаПассивов
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьЯРасходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ТаблицаДокумента.НастройкаСчетовУчетаАктивов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)						КАК НастройкаСчетовУчета,
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьяДоходов) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|			ТОГДА ТаблицаДокумента.СтатьяДоходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)						КАК СтатьяДоходов,
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		 И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.СтатьяДоходов) = ТИП(ПланВидовХарактеристик.СтатьиДоходов)
	|			ТОГДА ТаблицаДокумента.АналитикаДоходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ)						КАК АналитикаДоходов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО							КАК Сделка,
	|	ТаблицаДокумента.Подразделение			КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО							КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 							КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	(ВЫБОР
	|		КОГДА ТаблицаВидыЗапасов.ВидРасхождений = ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|			ТОГДА -ТаблицаВидыЗапасов.Количество
	|		ИНАЧЕ ТаблицаВидыЗапасов.Количество КОНЕЦ) КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 	КАК ИдентификаторСтроки,
	|	0							 			КАК Стоимость,
	|	0							 			КАК СтоимостьБезНДС,
	|	0							 			КАК СтоимостьРегл,
	|	0							 			КАК СтоимостьУпр,
	|	0										КАК КорСтоимость,
	|
	// Прочие поля
	|	&ХозяйственнаяОперация					КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации			КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВыбытиеПоФиксированнойСтоимости,
		ТекстЗапроса);
		
	#КонецОбласти

	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

Функция ТекстЗапросаРасхожденияПоступлениеПриобретение()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления КАК ДокументПоступления,
	|	ТоварыКПоступлению.Склад КАК Склад,
	|	ТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	ТоварыКПоступлению.Характеристика КАК Характеристика,
	|	ТоварыКПоступлению.Назначение КАК Назначение,
	|	ТоварыКПоступлению.Серия КАК Серия,
	|	ТоварыКПоступлению.КОформлениюПоступленийПоНакладнымОстаток КАК Количество,
	|	ТоварыКПоступлению.КОформлениюПоступленийПоНакладнымОстаток КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению.Остатки(
	|			,
	|			ДокументПоступления = &ДокументОснование
	|				И ВЫБОР
	|					КОГДА &СкладУказан
	|							И НЕ Номенклатура.ТипНоменклатуры В (&РаботыУслуги)
	|						ТОГДА Склад = &СкладПоступления
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.КОформлениюПоступленийПоНакладнымОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТоварыКПоступлению.ДокументПоступления,
	|	ТоварыКПоступлению.Склад,
	|	ТоварыКПоступлению.Номенклатура,
	|	ТоварыКПоступлению.Характеристика,
	|	ТоварыКПоступлению.Назначение,
	|	ТоварыКПоступлению.Серия,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНАкопления.Расход)
	|			ТОГДА ТоварыКПоступлению.КОформлениюПоступленийПоНакладным
	|		ИНАЧЕ -ТоварыКПоступлению.КОформлениюПоступленийПоНакладным
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНАкопления.Расход)
	|			ТОГДА ТоварыКПоступлению.КОформлениюПоступленийПоНакладным
	|		ИНАЧЕ -ТоварыКПоступлению.КОформлениюПоступленийПоНакладным
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.ТоварыКПоступлению КАК ТоварыКПоступлению
	|ГДЕ
	|	ТоварыКПоступлению.Регистратор = &ТекущийДокумент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПоступления,
	|	Номенклатура,
	|	Характеристика,
	|	Назначение,
	|	Серия,
	|	Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия,
	|	СУММА(ТаблицаТовары.Количество) КАК Количество,
	|	СУММА(ТаблицаТовары.КоличествоУпаковок) КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ТаблицаТоварыСГруппировкой
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ДокументПоступления,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.ДокументПоступления КАК ДокументПоступления,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Серия КАК Серия,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.Количество < 0
	|				ТОГДА -ТаблицаТовары.Количество
	|			ИНАЧЕ ТаблицаТовары.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаТовары.КоличествоУпаковок < 0
	|				ТОГДА -ТаблицаТовары.КоличествоУпаковок
	|			ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
	|		КОНЕЦ) КАК КоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество < 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|	КОНЕЦ КАК ВидРасхождений
	|ИЗ
	|	ТаблицаТоварыСГруппировкой КАК ТаблицаТовары
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.ДокументПоступления,
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Назначение,
	|	ТаблицаТовары.Серия,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество < 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Перепоставка)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыРасхожденийПоступленийПриобретений.Недопоставка)
	|	КОНЕЦ";
	
	Возврат ТекстЗапроса;
КонецФункции

#КонецОбласти

#Область Печать

Функция ПечатьАктаСписанияРасхождений(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	КолонкаКодов = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов();
	ИмяКолонкиКодов = КолонкаКодов.ИмяКолонки;
	ПредставлениеКолонкиКодов = КолонкаКодов.ПредставлениеКолонки;
	ВыводитьДопКолонку = ЗначениеЗаполнено(ИмяКолонкиКодов);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Номер КАК Номер,
	|	Документ.Дата КАК Дата,
	|	Документ.Подразделение КАК Подразделение,
	|	Документ.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Партнер) КАК ПоставщикПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Склад) КАК СкладПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Подразделение) КАК ПодразделениеПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Распоряжение) КАК ОснованиеПредставление,
	|	Документ.Организация.Префикс КАК Префикс,
	|	Документ.Автор.ФизическоеЛицо КАК Ответственный
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	| Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасхождения.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасхождения.Номенклатура КАК Номенклатура,
	|	&ИмяКолонкиКодов КАК ДопКолонка,
	|	ТаблицаРасхождения.ВидРасхождений КАК ВидРасхождения,
	|	ТаблицаРасхождения.Номенклатура.НаименованиеПолное КАК НоменклатураПредставление,
	|	ТаблицаРасхождения.Характеристика.НаименованиеПолное КАК ХарактеристикаПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаРасхождения.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
	|	ТаблицаРасхождения.Количество КАК Количество,
	|	ТаблицаРасхождения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение.Расхождения КАК ТаблицаРасхождения
	|ГДЕ
	|	ТаблицаРасхождения.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";

	Если ВыводитьДопКолонку Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиКодов", "ТаблицаРасхождения.Номенклатура." +ИмяКолонкиКодов);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяКолонкиКодов КАК ДопКолонка,", "");
	КонецЕсли;

	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс");
	СинонимДокумента = НСтр("ru='Акт списания расхождений'", ОбщегоНазначения.КодОсновногоЯзыка());

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеРасхожденийПоступлениеПриобретение_АктСписанияРасхождений";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СписаниеРасхожденийПоступлениеПриобретение.ПФ_MXL_АктСписанияРасхождений");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	
	ОбластьОснование  = Макет.ПолучитьОбласть("Основание");

	ОбластьНомераШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьВидРасхожденийШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|ВидРасхождений");
	ОбластьКодовШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
	ОбластьТоварШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|Товар");
	ОбластьДанныеШапка = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	Если Не ВыводитьДопКолонку Тогда

		Макет.Область("Товар").ШиринаКолонки = Макет.Область("Товар").ШиринаКолонки
				+ Макет.Область("КолонкаКодов").ШиринаКолонки;

	КонецЕсли;

	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьВидРасхожденийСтрока = Макет.ПолучитьОбласть("Строка|ВидРасхождений");
	ОбластьНомераСтрока = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовСтрока  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
	ОбластьТоварСтрока  = Макет.ПолучитьОбласть("Строка|Товар");
	ОбластьДанныхСтрока = Макет.ПолучитьОбласть("Строка|Данные");

	ОбластьНомераПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
	ОбластьВидРасхожденийПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|ВидРасхождений");
	ОбластьКодовПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|КолонкаКодов");
	ОбластьТоварПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы|Товар");
	ОбластьДанныхПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы|Данные");

	ОбластьПодписи       = Макет.ПолучитьОбласть("Подписи");
	ОбластьСуммаПрописью = Макет.ПолучитьОбласть("СуммаПрописью");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	
	ВыборкаДокументы = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	
	ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
	ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной.
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаДокументы);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокументы);
		СтруктураДанныхШапки = Новый Структура;
		СтруктураДанныхШапки.Вставить("ТекстЗаголовка", 
								ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента));
		НаименованияНаДату = ОрганизацииПовтИсп.НаименованияНаДату(ВыборкаДокументы.Организация, ВыборкаДокументы.Дата);
		СтруктураДанныхШапки.Вставить("ОрганизацияПредставление", НаименованияНаДату.НаименованиеСокращенное);
		ОбластьЗаголовок.Параметры.Заполнить(СтруктураДанныхШапки);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовок, ВыборкаДокументы.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовок);

		ОбластьОснование.Параметры.Заполнить(ВыборкаДокументы);
		ТабДокумент.Вывести(ОбластьОснование);
		// Вывод шапки.
		ТабДокумент.Вывести(ОбластьНомераШапка);
		ТабДокумент.Присоединить(ОбластьВидРасхожденийШапка);

		Если ВыводитьДопКолонку Тогда

			ОбластьКодовШапка.Параметры.ДопКолонка = ПредставлениеКолонкиКодов;
			ТабДокумент.Присоединить(ОбластьКодовШапка);

		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТоварШапка);

		ТабДокумент.Присоединить(ОбластьДанныеШапка);

		СуммаВсего = 0;
		ВсегоНаименований = 0;

		// Вывод строк.
		ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаДокументы.Ссылка));
		
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();
		
		Пока ВыборкаПоСтрокам.Следующий() Цикл

			ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Вывести(ОбластьНомераСтрока);
			ОбластьВидРасхожденийСтрока.Параметры.ВидРасхождения = ВыборкаПоСтрокам.ВидРасхождения;
			ТабДокумент.Присоединить(ОбластьВидРасхожденийСтрока);

			Если ВыводитьДопКолонку Тогда

				ОбластьКодовСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабДокумент.Присоединить(ОбластьКодовСтрока);

			КонецЕсли;

			// Номенклатура.
			ОбластьТоварСтрока.Параметры.Номенклатура = ВыборкаПоСтрокам.Номенклатура;
			ОбластьТоварСтрока.Параметры.НоменклатураПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ВыборкаПоСтрокам.НоменклатураПредставление,
				ВыборкаПоСтрокам.ХарактеристикаПредставление,
				,
				,
				ДопПараметрыПредставлениеНоменклатуры);
			
			ТабДокумент.Присоединить(ОбластьТоварСтрока);
			
			// Данные о ценах, количестве.
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			
			ТабДокумент.Присоединить(ОбластьДанныхСтрока);

			ВсегоНаименований = ВсегоНаименований + 1;

		КонецЦикла;

		// Вывод подвала.
		ТабДокумент.Вывести(ОбластьНомераПодвалТаблицы);
		ТабДокумент.Присоединить(ОбластьВидРасхожденийПодвалТаблицы);
		Если ВыводитьДопКолонку Тогда
			ТабДокумент.Присоединить(ОбластьКодовПодвалТаблицы);
		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТоварПодвалТаблицы);
		ТабДокумент.Присоединить(ОбластьДанныхПодвалТаблицы);

		ОбластьПодписи.Параметры.Ответственный = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаДокументы.Ответственный, ВыборкаДокументы.Дата);
		ТабДокумент.Вывести(ОбластьПодписи);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции

#КонецОбласти


#Область Прочее

Функция ПолноеИмяОбъекта()
	Возврат "Документ.СписаниеРасхожденийПоступлениеПриобретение";
КонецФункции
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.СписаниеРасхожденийПоступлениеПриобретение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("f9d7b8d8-4538-499f-beba-d30c028fa1fd");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.СписаниеРасхожденийПоступлениеПриобретение.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Списание расхождений между поступлением и приобретением"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с перечисления ""Типы налогов"" на справочник ""Виды налогов и взносов"".';"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.СписаниеРасхожденийПоступлениеПриобретение.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеРасхожденийПоступлениеПриобретение.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СписаниеРасхожденийПоступлениеПриобретение КАК СписаниеРасхожденийПоступлениеПриобретение
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СписаниеРасхожденийПоступлениеПриобретение.АналитикаАктивов) = ТИП(Перечисление.УдалитьТипыНалогов)
	|	ИЛИ ТИПЗНАЧЕНИЯ(СписаниеРасхожденийПоступлениеПриобретение.АналитикаПассивов) = ТИП(Перечисление.УдалитьТипыНалогов)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать документы ""Списание расхождений между поступлением и приобретением"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с типом перечисление типы налогов на справочник виды налогов и взносов';"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеРасхожденийПоступлениеПриобретение КАК ДанныеДокумента
		|		ПО ТаблицаДокументов.Ссылка = ДанныеДокумента.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Документ = Запрос.Выполнить().Выбрать();
	
	Пока Документ.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Документ.Ссылка, Документ.ВерсияДанных, Параметры.Очередь); // ДокументОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "АналитикаАктивов");
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "АналитикаПассивов");
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Документ.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
	