//@strict-types

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ТекущийДокументУсловий = Объект.ДокументУсловий;
	ТекущийКонтрагент = Объект.Контрагент;
	ТекущийПартнер = Объект.Партнер;
	ТекущееНачалоПериода = Объект.НачалоПериода;
	ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
	ТекущаяВалюта = Объект.Валюта;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	УстановитьУсловноеОформление();
	
	СвязиПараметровВыбора = СвязиПараметровВыбораДокументаУсловий(Объект.Организация);
	Элементы.ДокументУсловий.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	ОбновитьВидимостьДоступностьФиксацииСегментов();
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУсловийПриИзменении(Элемент)
	
	Если Объект.ДокументУсловий.Пустая() Тогда
		
		ДокументУсловийОчисткаСервер();
		ОбновитьВидимостьДоступностьФиксацииСегментов();
		
	ИначеЕсли ТекущийДокументУсловий <> Объект.ДокументУсловий Тогда
		
		ТекущийДокументУсловий = Объект.ДокументУсловий;
		ДокументУсловийПриИзмененииСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУсловийОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументУсловийОчисткаСервер();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура КонтрагентПриИзменении(Элемент)
	
	Если ТекущийКонтрагент <> Объект.Контрагент
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущийКонтрагент = Объект.Контрагент;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.Контрагент = ТекущийКонтрагент;
				
			КонецЕсли;
			
		ИначеЕсли СведенияНачислений.ЕстьДокументыПродаж Тогда
			
			ТекстВопроса = НСтр("ru = 'Документы продажи в таблице начислений будут очищены.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущийКонтрагент = Объект.Контрагент;
				Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
					
					СтрокаНачисления.Контрагент = Объект.Контрагент;
					СтрокаНачисления.ДокументПродажи = Неопределено;
					
				КонецЦикла;
				
			Иначе
				
				Объект.Контрагент = ТекущийКонтрагент;
				
			КонецЕсли;
			
		Иначе
			
			ТекущийКонтрагент = Объект.Контрагент;
			Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
			
				СтрокаНачисления.Контрагент = Объект.Контрагент;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийКонтрагент = Объект.Контрагент;
		Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
			
			СтрокаНачисления.Контрагент = Объект.Контрагент;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПартнерПриИзменении(Элемент)
	
	Если ТекущийПартнер <> Объект.Партнер
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущийПартнер = Объект.Партнер;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.Партнер = ТекущийПартнер;
				
			КонецЕсли;
			
		ИначеЕсли СведенияНачислений.ЕстьДокументыПродаж Тогда
			
			ТекстВопроса = НСтр("ru = 'Документы продажи в таблице начислений будут очищены.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущийПартнер = Объект.Партнер;
				Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
					
					СтрокаНачисления.Партнер = Объект.Партнер;
					СтрокаНачисления.ДокументПродажи = Неопределено;
					
				КонецЦикла;
				
			Иначе
				
				Объект.Партнер = ТекущийПартнер;
				
			КонецЕсли;
			
		Иначе
			
			ТекущийПартнер = Объект.Партнер;
			Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
				
				СтрокаНачисления.Партнер = Объект.Партнер;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийПартнер = Объект.Партнер;
		Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
			
			СтрокаНачисления.Партнер = Объект.Партнер;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если ТекущееНачалоПериода <> Объект.НачалоПериода
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееНачалоПериода = Объект.НачалоПериода;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.НачалоПериода = ТекущееНачалоПериода;
				
			КонецЕсли;
			
		ИначеЕсли СведенияНачислений.ЕстьДокументыПродаж Тогда
			
			ТекстВопроса = НСтр("ru = 'Документы продажи в таблице начислений будут очищены.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееНачалоПериода = Объект.НачалоПериода;
				Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
					СтрокаНачисления.ДокументПродажи = Неопределено;
				КонецЦикла;
				
			Иначе
				
				Объект.НачалоПериода = ТекущееНачалоПериода;
				
			КонецЕсли;
			
		Иначе
			
			ТекущееНачалоПериода = Объект.НачалоПериода;
			
		КонецЕсли;
		
	Иначе
		
		ТекущееНачалоПериода = Объект.НачалоПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Если ТекущееОкончаниеПериода <> Объект.ОкончаниеПериода
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.ОкончаниеПериода = ТекущееОкончаниеПериода;
				
			КонецЕсли;
			
		ИначеЕсли СведенияНачислений.ЕстьДокументыПродаж Тогда
			
			ТекстВопроса = НСтр("ru = 'Документы продажи в таблице начислений будут очищены.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
				Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
					СтрокаНачисления.ДокументПродажи = Неопределено;
				КонецЦикла;
				
			Иначе
				
				Объект.ОкончаниеПериода = ТекущееОкончаниеПериода;
				
			КонецЕсли;
			
		Иначе
			
			ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
			
		КонецЕсли;
		
	Иначе
		
		ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ВалютаПриИзменении(Элемент)
	
	Если ТекущаяВалюта <> Объект.Валюта
	   И Объект.Начисления.Количество() > 0 Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущаяВалюта = Объект.Валюта;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.Валюта = ТекущаяВалюта;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяВалюта = Объект.Валюта;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяВалюта = Объект.Валюта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗафиксироватьСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "Зафиксировать";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ЗафиксироватьСоставСегментов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Начисления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.ЗаполнениеПоРасчету = Ложь;
		
	ИначеЕсли НоваяСтрока Тогда
		
		ТекущиеДанные.Контрагент = Объект.Контрагент;
		ТекущиеДанные.Партнер = Объект.Партнер;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияПослеУдаления(Элемент)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачисленияСуммаБонусНачисленныйПриИзменении(Элемент)
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);

КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("УстановитьИнтервалВыборЗначения", ЭтотОбъект);
	ПараметрыВыбораПериода = Новый Структура;
	ПараметрыВыбораПериода.Вставить("ДатаНачала", "НачалоПериода");
	ПараметрыВыбораПериода.Вставить("ДатаОкончания", "ОкончаниеПериода");
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		ПараметрыВыбораПериода,
		ОповещениеПослеВыбора);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьПоУсловиям(Команда)
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеШапкиДокумента(Отказ);
	ПроверитьПериодыПоПериодичности(Отказ);
	
	Если НЕ Отказ Тогда
		
		ПроверитьФиксациюСоставаСегментов(Отказ);
		
	КонецЕсли;
	
	Если НЕ Отказ
	   И Объект.Начисления.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru = 'Таблица начислений будет очищена.
								  |Продолжить?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ПараметрыРасчета = ПараметрыРасчетаРетроБонусов();
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьНачисленияПоУсловиямЗавершение", ЭтотОбъект);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			Элементы.НачисленияЗаполнитьПоУсловиям.Имя,
			"Доступность",
			Ложь);
		
		РетроБонусыКлиент.РетроБонусыЗаПериодПоДокументамПродажи(
			ПараметрыРасчета,
			ЭтотОбъект,
			ОповещениеОЗавершении);
		
	КонецЕсли;
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОрганизацияУказана = НЕ Объект.Организация.Пустая();
	
	Если ОрганизацияУказана Тогда
		
		Если НЕ Объект.ДокументУсловий.Пустая() Тогда
			
			ОрганизацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументУсловий, "Организация");
			Если ОрганизацияДокумента <> Объект.Организация Тогда
				
				Объект.ДокументУсловий = Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка();
				ТекущийДокументУсловий = Документы.УсловияРетроБонусовКлиентов.ПустаяСсылка();
				ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СвязиПараметровВыбора = СвязиПараметровВыбораДокументаУсловий(Объект.Организация);
	Элементы.ДокументУсловий.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ДокументУсловийПриИзмененииСервер()
	
	Объект.Начисления.Очистить();
	Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Объект.Партнер = Справочники.Партнеры.ПустаяСсылка();
	
	ОбновитьФлагВозможностиИзмененияУРБ();
	ЗаполнитьДанныеПоследнейКорректировки();
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументУсловий);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыФормыПоУсловию();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаСервере
Процедура ДокументУсловийОчисткаСервер()
	
	ТекущийДокументУсловий = ПредопределенноеЗначение("Документ.УсловияРетроБонусовКлиентов.ПустаяСсылка");
	Объект.ДокументУсловий = ПредопределенноеЗначение("Документ.УсловияРетроБонусовКлиентов.ПустаяСсылка");
	ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
	ОбновитьФлагВозможностиИзмененияУРБ();
	УстановитьЗаголовокДекорацииФиксацииСегментов();
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьСоставСегментов()
	
	ОбновитьДанныеПередФиксациейСегментов();
	Если НЕ ЕстьКорректировкаНаСогласовании
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Зафиксировать состав сегментов документа условий?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗафиксироватьСоставСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияЗафиксироватьСегменты.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ЗафиксироватьСоставСегментов(
				Объект.ДокументУсловий,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
	
	Иначе
		
		Если ЕстьКорректировкаНаСогласовании Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно зафиксировать состав сегментов: введена корректировка в статусе ""На согласовании""'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Состав сегментов уже зафиксирован'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект");
		НастроитьВидимостьДоступностьФормы();
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗафиксироватьСоставСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
	   И Результат.Статус = "Ошибка" Тогда
		
		СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
		
	КонецЕсли;
	
	ОбновитьДанныеПередФиксациейСегментов();
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ВыполняютсяОперацииПоФиксацииСоставаСегментов(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = НСтр("ru = 'По документу условий уже выполняются операции по фиксации состава сегментов. Попробуйте позже'");
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	НастроитьВидимостьДоступностьФормы();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПериодыПоПериодичности(Отказ)
	
	Если НЕ Отказ
	   И (Объект.НачалоПериода > ДатаОкончанияУсловия
	  ИЛИ Объект.ОкончаниеПериода < ДатаНачалаУсловия) Тогда
		
		ТекстОшибки = НСтр("ru = 'Документ условия не действует в указанном периоде начисления'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		
		РезультатПроверки = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
			ПериодичностьНачислений,
			Объект.НачалоПериода,
			Объект.ОкончаниеПериода,
			Истина);
			
		Если РезультатПроверки.ЕстьНарушениеНачала Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиНачала,
				,
				"НачалоПериода",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
		Если РезультатПроверки.ЕстьНарушениеОкончания Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверки.ТекстОшибкиОкончания,
				,
				"ОкончаниеПериода",
				"Объект",
				Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОФиксацииСегментов()
	
	РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Объект.ДокументУсловий);
	
	Если РеквизитыУсловий.Количество() = 0 Тогда
		
		ДокументУсловийСогласован = Ложь;
		ИспользуютсяСегменты = Ложь;
		СоставСегментовЗафиксирован = Ложь;
		
	Иначе
		
		ДокументУсловийСогласован = Истина;
		
		ИспользуютсяСегментыТоваров =
			(РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		ИспользуютсяСегментыПартнеров =
			(РеквизитыУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
		ИспользуютсяСегменты = (ИспользуютсяСегментыТоваров ИЛИ ИспользуютсяСегментыПартнеров);
		СоставСегментовЗафиксирован = РеквизитыУсловий.СегментыЗафиксированы;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ОбновитьФлагВозможностиИзмененияУРБ();
	ЗаполнитьДанныеПоследнейКорректировки();
	
	ЗаполнитьСлужебныеРеквизитыФормыПоУсловию();
	
	НастроитьВидимостьДоступностьФормы();
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыФормыПоУсловию()
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Объект.ДокументУсловий);
		
		БезРасчета = РеквизитыУсловий.БезРасчета;
		ПериодичностьНачислений = РеквизитыУсловий.ПериодичностьНачислений;
		ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
		БазаРасчетаПродаж = РеквизитыУсловий.БазаРасчетаПродаж;
		ТекущееНачалоПериода = РеквизитыУсловий.НачалоДействия;
		ТекущееОкончаниеПериода = РеквизитыУсловий.ОкончаниеДействия;
		ДатаНачалаУсловия = РеквизитыУсловий.НачалоДействия;
		ДатаОкончанияУсловия = РеквизитыУсловий.ОкончаниеДействия;
		ТекущаяВалюта = РеквизитыУсловий.Валюта;
		
		ИспользуютсяСегментыТоваров =
			(РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		ИспользуютсяСегментыПартнеров =
			(РеквизитыУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
		ИспользуютсяСегменты = (ИспользуютсяСегментыТоваров ИЛИ ИспользуютсяСегментыПартнеров);
		СоставСегментовЗафиксирован = РеквизитыУсловий.СегментыЗафиксированы;
		
	Иначе
		
		ОчиститьРеквизитыПоУсловию(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступностьФормы()
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ИменаЭлементовВидимостьВсе = Новый Массив; // Массив из Строка
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Контрагент.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.Партнер.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияКонтрагент.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияПартнер.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачалоПериода.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ОкончаниеПериода.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.УстановитьИнтервал.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.ДекорацияЗафиксироватьСегменты.Имя);
	ИменаЭлементовВидимостьВсе.Добавить(Элементы.НачисленияЗаполнитьПоУсловиям.Имя);
	
	ИменаЭлементовТолькоПросмотрВсе = Новый Массив; // Массив из Строка
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.НачалоПериода.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.ОкончаниеПериода.Имя);
	ИменаЭлементовТолькоПросмотрВсе.Добавить(Элементы.Валюта.Имя);
	
	ИменаЭлементовВидимых = Новый Массив; // Массив из Строка
	Если НЕ Объект.ДокументУсловий.Пустая() Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.НачалоПериода.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.ОкончаниеПериода.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.УстановитьИнтервал.Имя);
		
	КонецЕсли;
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.Контрагент.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.НачисленияПартнер.Имя);
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.Партнер.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.НачисленияКонтрагент.Имя);
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.Контрагент.Имя);
		ИменаЭлементовВидимых.Добавить(Элементы.Партнер.Имя);
		
	КонецЕсли;
	
	Если ИспользуютсяСегменты 
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.ДекорацияЗафиксироватьСегменты.Имя);
		
	КонецЕсли;
	
	Если НЕ БезРасчета Тогда
		
		ИменаЭлементовВидимых.Добавить(Элементы.НачисленияЗаполнитьПоУсловиям.Имя);
		
	КонецЕсли;
	
	ИменаЭлементовТолькоПросмотр = Новый Массив; // Массив из Строка
	Если ПериодичностьНачислений = Перечисления.ПериодичностиРетроБонусов.Однократно Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.НачалоПериода.Имя);
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.ОкончаниеПериода.Имя);
		
		Индекс = ИменаЭлементовВидимых.Найти(Элементы.УстановитьИнтервал.Имя);
		Если Индекс <> Неопределено Тогда
			ИменаЭлементовВидимых.Удалить(Индекс);
		КонецЕсли;
		
	КонецЕсли;
	
	Если БазаРасчетаПродаж <> Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты
	 ИЛИ БезРасчета Тогда
		
		ИменаЭлементовТолькоПросмотр.Добавить(Элементы.Валюта.Имя);
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Доступность = ЕстьПравоИзмененияУРБ;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы, ИменаЭлементовВидимостьВсе, ИменаЭлементовВидимых);
	
	РетроБонусыКлиентСервер.УстановитьТолькоПросмотрЭлементовПоМассиву(
		Элементы, ИменаЭлементовТолькоПросмотрВсе, ИменаЭлементовТолькоПросмотр);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыПоУсловию(Форма)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Объект = Форма.Объект;
	
	Объект.НачалоПериода = ПустаяДата;
	Форма.ТекущееНачалоПериода = ПустаяДата;
	Форма.ДатаНачалаУсловия = ПустаяДата;
	Объект.ОкончаниеПериода = ПустаяДата;
	Форма.ТекущееОкончаниеПериода = ПустаяДата;
	Форма.ДатаОкончанияУсловия = ПустаяДата;
	Объект.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	Форма.ТекущаяВалюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Форма.ТекущийКонтрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");;
	Объект.Партнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Форма.ТекущийПартнер = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Объект.НесколькоКонтрагентов = Ложь;
	Объект.НесколькоПартнеров = Ложь;
	Объект.Начисления.Очистить();
	
	Форма.БезРасчета = Ложь;
	Форма.ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПустаяСсылка");
	Форма.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностиРетроБонусов.ПустаяСсылка");
	Форма.БазаРасчетаПродаж = ПредопределенноеЗначение("Перечисление.БазыРасчетаПродажРетроБонусов.ПустаяСсылка");
	Форма.ИспользуютсяСегменты = Ложь;
	Форма.СоставСегментовЗафиксирован = Ложь;
	Форма.ЕстьКорректировкаНаСогласовании = Ложь;
	
КонецПроцедуры

// Возвращаемое значение:
//  Массив из СвязьПараметраВыбора
//
&НаКлиентеНаСервереБезКонтекста
Функция СвязиПараметровВыбораДокументаУсловий(Организация)
	
	СвязиПараметровВыбора = Новый Массив(); // Массив из СвязьПараметраВыбора
	
	Если НЕ Организация.Пустая() Тогда
		
		НоваяСвязь = Новый СвязьПараметраВыбора(
			"Отбор.Организация",
			"Объект.Организация",
			РежимИзмененияСвязанногоЗначения.НеИзменять);
		СвязиПараметровВыбора.Добавить(НоваяСвязь);
		
	КонецЕсли;
	
	Возврат СвязиПараметровВыбора;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиДокумента(Форма);
	
	КоллекцияНачислений = Форма.Объект.Начисления;
	
	Форма.ИтогоБонусРасчетный = КоллекцияНачислений.Итог("СуммаБонусРасчетный");
	Форма.ИтогоБонусНачисленный = КоллекцияНачислений.Итог("СуммаБонусНачисленный");
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - Признаки начислений:
// * ЕстьНачисленияПоРасчету - Булево - 
// * ЕстьДокументыПродаж - Булево - 
//
&НаКлиенте
Функция ПризнакиНачислений()
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьНачисленияПоРасчету", Ложь);
	Результат.Вставить("ЕстьДокументыПродаж", Ложь);
	
	Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
		
		Если ЗначениеЗаполнено(СтрокаНачисления.ДокументПродажи) Тогда
			
			Результат.ЕстьДокументыПродаж = Истина;
			
		КонецЕсли;
		
		Если СтрокаНачисления.ЗаполнениеПоРасчету Тогда
			
			Результат.ЕстьНачисленияПоРасчету = Истина;
			
		КонецЕсли;
		
		Если Результат.ЕстьНачисленияПоРасчету
		   И Результат.ЕстьДокументыПродаж Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗаполнитьНачисленияПоУсловиямЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			ЗаполнитьНачисленияПоУсловиямСервер(Результат.АдресРезультата);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		Элементы.НачисленияЗаполнитьПоУсловиям.Имя,
		"Доступность",
		Истина);
	
	РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Период - СтандартныйПериод -
//	ДополнительныеПараметры - Произвольный - 
//
&НаКлиенте
Асинх Процедура УстановитьИнтервалВыборЗначения(Период, ДополнительныеПараметры) Экспорт
	
	Если Объект.Начисления.Количество() > 0 
	   И (ТекущееНачалоПериода <> Объект.НачалоПериода
		  ИЛИ ТекущееОкончаниеПериода <> Объект.ОкончаниеПериода) Тогда
		
		СведенияНачислений = ПризнакиНачислений();
		
		Если СведенияНачислений.ЕстьНачисленияПоРасчету Тогда
			
			ТекстВопроса = НСтр("ru = 'Список начислений будет очищен.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееНачалоПериода = Объект.НачалоПериода;
				ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
				Объект.Начисления.Очистить();
				РассчитатьИтоговыеПоказателиДокумента(ЭтотОбъект);
				
			Иначе
				
				Объект.НачалоПериода = ТекущееНачалоПериода;
				Объект.ОкончаниеПериода = ТекущееОкончаниеПериода;
				
			КонецЕсли;
			
		ИначеЕсли СведенияНачислений.ЕстьДокументыПродаж Тогда
			
			ТекстВопроса = НСтр("ru = 'Документы продажи в таблице начислений будут очищены.
								|Продолжить?'");
			Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				ТекущееНачалоПериода = Объект.НачалоПериода;
				ТекущееОкончаниеПериода = Объект.ОкончаниеПериода;
				Для Каждого СтрокаНачисления Из Объект.Начисления Цикл
					СтрокаНачисления.ДокументПродажи = Неопределено;
				КонецЦикла;
				
			Иначе
				
				Объект.НачалоПериода = ТекущееНачалоПериода;
				Объект.ОкончаниеПериода = ТекущееОкончаниеПериода;
				
			КонецЕсли;
			
		Иначе
			
			ТекущееНачалоПериода = Объект.НачалоПериода;
			ТекущееОкончаниеПериода = Объект.ОкончаниеПериода
			
		КонецЕсли;
		
	Иначе
		
		ТекущееНачалоПериода = Объект.НачалоПериода;
		ТекущееОкончаниеПериода = Объект.ОкончаниеПериода
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНачисленияПоУсловиямСервер(Знач АдресРезультата)
	
	ТаблицаБонусов = РетроБонусыПоДокументамПродажи(АдресРезультата);
	СортироватьТаблицуРетроБонусов(ТаблицаБонусов);
	
	ИмяКолонкиВыручка = "";
	УсловияРБ = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Объект.ДокументУсловий);
	
	Если БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаУпрУчет
	 ИЛИ БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаРеглУчет
	 ИЛИ БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты Тогда
		
		Если УсловияРБ.УчитыватьНДС Тогда
			ИмяКолонкиВыручка = "СуммаВыручки";
		Иначе
			ИмяКолонкиВыручка = "СуммаВыручкиБезНДС";
		КонецЕсли;
		
	ИначеЕсли БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены Тогда
		
		ИмяКолонкиВыручка = "СуммаВБазовыхЦенах";
		
	КонецЕсли;
	
	Объект.Начисления.Очистить();
	Для Каждого СтрокаБонуса Из ТаблицаБонусов Цикл
		
		СтрокаНачисления = Объект.Начисления.Добавить();
		СтрокаНачисления.Контрагент = СтрокаБонуса.Контрагент;
		СтрокаНачисления.Партнер = СтрокаБонуса.Партнер;
		СтрокаНачисления.ДокументПродажи = СтрокаБонуса.ДокументПродажи;
		Если НЕ ПустаяСтрока(ИмяКолонкиВыручка) Тогда
			
			ВыручкаПоСтроке = СтрокаБонуса[ИмяКолонкиВыручка]; // ОпределяемыйТип.ДенежнаяСуммаЛюбогоЗнака
			СтрокаНачисления.Выручка = ВыручкаПоСтроке;
			
		КонецЕсли;
		СтрокаНачисления.РасчетнаяБаза = СтрокаБонуса.РасчетнаяБаза;
		СтрокаНачисления.СуммаБонусРасчетный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.СуммаБонусНачисленный = СтрокаБонуса.СуммаБонус;
		СтрокаНачисления.ЗаполнениеПоРасчету = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыРасчетаРетроБонусов()
	
	Контрагент = Неопределено;
	Партнер = Неопределено;
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		Контрагент = Объект.Контрагент;
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		Партнер = Объект.Партнер;
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
		
		Контрагент = Объект.Контрагент;
		Партнер = Объект.Партнер;
		
	КонецЕсли;
	
	ПараметрыРасчета = Отчеты.РасчетРетроБонусовКлиентов.ПараметрыРасчетаРетроБонусов();
	ПараметрыРасчета.ДокументУсловий = Объект.ДокументУсловий;
	ПараметрыРасчета.Организация = Объект.Организация;
	ПараметрыРасчета.ДатаНачала = Объект.НачалоПериода;
	ПараметрыРасчета.ДатаОкончания = Объект.ОкончаниеПериода;
	ПараметрыРасчета.Контрагент = Контрагент;
	ПараметрыРасчета.Партнер = Партнер;
	ПараметрыРасчета.Валюта = Объект.Валюта;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Параметры:
//  АдресРезультата - Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * Валюта - СправочникСсылка.Валюты
//  * ДокументПродажи - ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.КорректировкаРеализации, ДокументСсылка.АктВыполненныхРабот, ДокументСсылка.ВозвратТоваровОтКлиента -
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Организация - СправочникСсылка.Организации
//  * Партнер - СправочникСсылка.Партнеры
//  * РасчетнаяБаза - Число
//  * СуммаБонус - Число
//  * СуммаВБазовыхЦенах - Число
//  * СуммаВыручки - Число
//  * СуммаВыручкиБезНДС - Число
//
&НаСервереБезКонтекста
Функция РетроБонусыПоДокументамПродажи(АдресРезультата)
	
	ТаблицаБонусов = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Возврат ТаблицаБонусов;
	
КонецФункции

// Параметры:
//  Таблица - см. РетроБонусыПоДокументамПродажи
//
&НаСервереБезКонтекста
Процедура СортироватьТаблицуРетроБонусов(Таблица)
	
	ОписаниеТипаДата = Новый ОписаниеТипов("Дата");
	
	Таблица.Колонки.Добавить("Дата", ОписаниеТипаДата);
	
	ДокументыПродажи = Таблица.ВыгрузитьКолонку("ДокументПродажи");
	ДатыПоДокументам = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ДокументыПродажи, "Дата");
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		СтрокаТаблицы.Дата = ДатыПоДокументам[СтрокаТаблицы.ДокументПродажи];
		
	КонецЦикла;
	
	Таблица.Сортировать("Дата");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеШапкиДокумента(Отказ)
	
	СписокПроверяемыхРеквизитов = Новый СписокЗначений; // СписокЗначений из Строка
	СписокПроверяемыхРеквизитов.Добавить("ДокументУсловий");
	СписокПроверяемыхРеквизитов.Добавить("Организация");
	СписокПроверяемыхРеквизитов.Добавить("НачалоПериода");
	СписокПроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
	СписокПроверяемыхРеквизитов.Добавить("Валюта");
	
	Если ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту") Тогда
		
		СписокПроверяемыхРеквизитов.Добавить("Контрагент");
		
	ИначеЕсли ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКлиенту") Тогда
		
		СписокПроверяемыхРеквизитов.Добавить("Партнер", "Клиент");
		
	ИначеЕсли ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагентуКлиенту") Тогда
		
		СписокПроверяемыхРеквизитов.Добавить("Контрагент");
		СписокПроверяемыхРеквизитов.Добавить("Партнер", "Клиент");
		
	КонецЕсли;
	
	Для Каждого ДанныеРеквизита Из СписокПроверяемыхРеквизитов Цикл
		
		ИмяРеквизита = ДанныеРеквизита.Значение;
		Если ЗначениеЗаполнено(ДанныеРеквизита.Представление) Тогда
			СинонимРеквизита = ДанныеРеквизита.Представление; // Строка
		Иначе
			СинонимРеквизита = ИмяРеквизита; // Строка
		КонецЕсли; 
		
		Если НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
			
			ТекстОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(,, СинонимРеквизита);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, ИмяРеквизита, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьФиксациюСоставаСегментов(Отказ)
	
	ОбновитьДанныеОФиксацииСегментов();
	НужноЗафиксироватьСоставСегментов = (ИспользуютсяСегменты И НЕ СоставСегментовЗафиксирован);
	
	Если НЕ ДокументУсловийСогласован Тогда
		
		ТекстСообщения = НСтр("ru = 'Документ условий не согласован'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	ИначеЕсли НужноЗафиксироватьСоставСегментов Тогда
		
		ТекстСообщения = НСтр("ru = 'Не зафиксирован состав сегментов документа условий'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагВозможностиИзмененияУРБ()
	
	Если ЗначениеЗаполнено(Объект.ДокументУсловий) Тогда
		ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(Объект.ДокументУсловий);
	Иначе
		ЕстьПравоИзмененияУРБ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВидимостьДоступностьФиксацииСегментов()
	
	Элементы.ДекорацияЗафиксироватьСегменты.Доступность = ЕстьПравоИзмененияУРБ;
	Элементы.ДекорацияЗафиксироватьСегменты.Видимость = (ИспользуютсяСегменты И НЕ СоставСегментовЗафиксирован);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДекорацииФиксацииСегментов()
	
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		ТекстЗафиксировать = НСтр("ru = 'Введена корректировка в статусе ""На согласовании"", фиксация состава сегментов запрещена'");
		
	Иначе
		
		ШаблонЗафиксировать = НСтр("ru = 'Состав сегментов не зафиксирован. <a href=""%1"">Зафиксировать</a>.'");
		ТекстЗафиксировать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗафиксировать, "Зафиксировать");
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗафиксировать);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоследнейКорректировки()
	
	ЕстьКорректировкаНаСогласовании = Ложь;
	Если НЕ Объект.ДокументУсловий.Пустая() Тогда
		
		ЕстьКорректировкаНаСогласовании = РетроБонусыСервер.ЕстьКорректировкаНаСогласовании(Объект.ДокументУсловий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередФиксациейСегментов()
	
	ЗаполнитьДанныеПоследнейКорректировки();
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		УстановитьЗаголовокДекорацииФиксацииСегментов();
		
	КонецЕсли;
	
	ОбновитьДанныеОФиксацииСегментов();
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьУсловноеОформлениеСтрокПоРасчету();
	УстановитьУсловноеОформлениеПроизвольныхСтрок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСтрокПоРасчету()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияПартнер.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияКонтрагент.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияДокументПродажи.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияВыручка.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияРасчетнаяБаза.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияСуммаБонусРасчетный.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.ЗаполнениеПоРасчету");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПроизвольныхСтрок()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.НачисленияСуммаБонусРасчетный.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Начисления.ЗаполнениеПоРасчету");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Без расчета>'"));
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

//@skip-check module-unused-method - неявный вызов из УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти