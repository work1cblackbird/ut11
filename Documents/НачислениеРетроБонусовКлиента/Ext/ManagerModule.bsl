//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("РетроБонусы");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка.НачислениеРетроБонусовКлиента, ДокументОбъект.НачислениеРетроБонусовКлиента - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//	СписокЗначений Из Строка - список значений, содержащий тексты запросов и их имена.
//						Возвращается в случае, если свойство 'ПолучитьТекстыЗапроса' параметра ДопПараметры
//						имеет значение Истина.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.НачислениеРетроБонусовКлиента") Тогда
		
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
		
	Иначе
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений; // СписокЗначений из Строка
	
	ПолучитьДанныеДокумента(Запрос, ДокументСсылка);
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ТекстЗапросаТаблицаРетроБонусыКлиентов(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРетроБонусыКлиентовПериодыНачислений(ТекстыЗапроса, Регистры, ДокументОбъект);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	#Область СозданиеСписания
	НоваяКоманда = Документы.СписаниеРетроБонусовКлиента.ДобавитьКомандуСоздатьНаОсновании(
		КомандыСозданияНаОсновании, Параметры);
	Если НоваяКоманда <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"ДокументУсловий",
			,
			ВидСравненияКомпоновкиДанных.Заполнено);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"НесколькоКонтрагентов",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область СозданиеАктаПремииКлиенту
	НоваяКоманда = Документы.АктПремииКлиенту.ДобавитьКомандуСоздатьНаОсновании(
		КомандыСозданияНаОсновании, Параметры);
	Если НоваяКоманда <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"ДокументУсловий",
			,
			ВидСравненияКомпоновкиДанных.Заполнено);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"НесколькоКонтрагентов",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Добавляет команду создания документа "Начисление ретро-бонусов клиентов".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//  Неопределено, СтрокаТаблицыЗначений - Добавить команду создать на основании
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Результат = Неопределено;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.НачислениеРетроБонусовКлиента) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.НачислениеРетроБонусовКлиента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = 
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.НачислениеРетроБонусовКлиента);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		
		Результат = КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КомандаОтчет = Отчеты.РасчетРетроБонусовКлиентов.ДобавитьКомандуРасчетРетроБонусовКлиентов(
		КомандыОтчетов,
		"РасчетРетроБонусовКлиентовКонтекст");
	КомандаОтчет.Представление = НСтр("ru = 'Расшифровка расчета ретро-бонусов'");
	КомандаОтчет.РежимЗаписи = "Записывать";
	
КонецПроцедуры

// Описание логики ограничений прав доступа
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
		
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс
	
// Параметры:
//  ДокументНачисления - ДокументСсылка.НачислениеРетроБонусовКлиента
// 
// Возвращаемое значение:
//  Неопределено, ВыборкаИзРезультатаЗапроса -:
//  * Организация - СправочникСсылка.Организации
//  * Контрагент - СправочникСсылка.Контрагенты
//  * ПартнерКонтрагента - СправочникСсылка.Партнеры
//  * Валюта - СправочникСсылка.Валюты
//  * Партнер - СправочникСсылка.Партнеры
//  * ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
//  * НачалоПериода - Дата
//  * ОкончаниеПериода - Дата
//  * Сумма - СправочникСсылка.Организации
//
Функция ДанныеДокументаНачисления(ДокументНачисления) Экспорт
	
	ДанныеШапки = Неопределено;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПериодыНачислений.Организация КАК Организация,
	|	ПериодыНачислений.Контрагент КАК Контрагент,
	|	ПериодыНачислений.Контрагент.Партнер КАК ПартнерКонтрагента,
	|	ПериодыНачислений.Валюта КАК Валюта,
	|	ПериодыНачислений.Партнер КАК Партнер,
	|	ПериодыНачислений.ДокументУсловий КАК ДокументУсловий,
	|	ПериодыНачислений.НачалоПериода КАК НачалоПериода,
	|	ПериодыНачислений.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ЕСТЬNULL(РетроБонусыКлиентов.СуммаБонус, 0) КАК Сумма
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовПериодыНачислений КАК ПериодыНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РетроБонусыКлиентов КАК РетроБонусыКлиентов
	|		ПО ПериодыНачислений.Регистратор = РетроБонусыКлиентов.Регистратор
	|		И РетроБонусыКлиентов.СуммаБонус > 0
	|		И ПериодыНачислений.ДокументУсловий = РетроБонусыКлиентов.ДокументУсловий
	|		И ПериодыНачислений.Контрагент = РетроБонусыКлиентов.Контрагент
	|		И ПериодыНачислений.Партнер = РетроБонусыКлиентов.Партнер
	|ГДЕ
	|	ПериодыНачислений.Регистратор = &Регистратор
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Организация,
	|	Контрагент,
	|	Валюта";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ДокументНачисления);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			ВыборкаКонтрагент = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагент.Следующий() Цикл
				
				ДанныеШапки = ВыборкаКонтрагент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				ДанныеШапки.Следующий();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДанныеШапки;
	
КонецФункции
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ТекстЗапросаТаблицаРетроБонусыКлиентов(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.Дата КАК Период,
	|	Шапка.Организация КАК Организация,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	Шапка.НачалоПериода КАК НачалоПериода,
	|	Шапка.ОкончаниеПериода КАК ОкончаниеПериода,
	|	Шапка.ДокументУсловий КАК ДокументУсловий,
	|	Шапка.Валюта КАК Валюта,
	|	СУММА(ДанныеТаблицы.СуммаБонусНачисленный) КАК СуммаБонус,
	|	СУММА(0) КАК КАктированию,
	|	СУММА(0) КАК КПодписанию,
	|	СУММА(0) КАК КСписанию
	|ИЗ
	|	ДанныеДокументаТаблицаНачисления КАК ДанныеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка КАК Шапка
	|		ПО ДанныеТаблицы.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	Шапка.Дата,
	|	Шапка.Организация,
	|	ДанныеТаблицы.Контрагент,
	|	ДанныеТаблицы.Партнер,
	|	Шапка.НачалоПериода,
	|	Шапка.ОкончаниеПериода,
	|	Шапка.ДокументУсловий,
	|	Шапка.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеТаблицы.СуммаБонусНачисленный) <> 0";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ДанныеДокументаТаблицаНачисления",
			"Документ.НачислениеРетроБонусовКлиента.Начисления");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРетроБонусыКлиентовПериодыНачислений(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовПериодыНачислений";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Шапка.Дата КАК Период,
	|	Шапка.Организация КАК Организация,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	Шапка.НачалоПериода КАК НачалоПериода,
	|	Шапка.ОкончаниеПериода КАК ОкончаниеПериода,
	|	Шапка.ДокументУсловий КАК ДокументУсловий,
	|	Шапка.Валюта КАК Валюта
	|ИЗ
	|	ДанныеДокументаТаблицаНачисления КАК ДанныеТаблицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументаШапка КАК Шапка
	|		ПО ДанныеТаблицы.Ссылка = Шапка.Ссылка
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ДанныеДокументаТаблицаНачисления",
			"Документ.НачислениеРетроБонусовКлиента.Начисления");
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"ДанныеДокументаШапка",
			"Документ.НачислениеРетроБонусовКлиента");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДанныеДокумента

Процедура ПолучитьДанныеДокумента(Запрос, ДокументСсылка)
	
	СписокЗапросов = Новый Массив; // Массив из Строка
	
	ТекстЗапросаДанныеДокументаШапка(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаНачисления(СписокЗапросов);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаШапка(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ДокументУсловий КАК ДокументУсловий,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ДокументУсловий.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников
	|ПОМЕСТИТЬ ДанныеДокументаШапка
	|ИЗ
	|	Документ.НачислениеРетроБонусовКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаНачисления(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Контрагент КАК Контрагент,
	|	ТаблицаДанных.Партнер КАК Партнер,
	|	ТаблицаДанных.ДокументПродажи КАК ДокументПродажи,
	|	ТаблицаДанных.Выручка КАК Выручка,
	|	ТаблицаДанных.РасчетнаяБаза КАК РасчетнаяБаза,
	|	ТаблицаДанных.СуммаБонусРасчетный КАК СуммаБонусРасчетный,
	|	ТаблицаДанных.СуммаБонусНачисленный КАК СуммаБонусНачисленный
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаНачисления
	|ИЗ
	|	Документ.НачислениеРетроБонусовКлиента.Начисления КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|	И ТаблицаДанных.СуммаБонусНачисленный <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли