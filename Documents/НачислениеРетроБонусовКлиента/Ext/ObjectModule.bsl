//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.УсловияРетроБонусовКлиентов") Тогда
		
		СсылкаНаДокумент = ДанныеЗаполнения; // ДокументСсылка.УсловияРетроБонусовКлиентов
		ЗаполнитьПоУсловиюРетроБонусовКлиентов(СсылкаНаДокумент);
		
	КонецЕсли;
	
	ИнициализироватьДокумент();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив; // Массив Из Строка
	
	Если ДокументУсловий.Пустая() Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("Партнер");
		МассивНепроверяемыхРеквизитов.Добавить("НачалоПериода");
		МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
		МассивНепроверяемыхРеквизитов.Добавить("Валюта");
		МассивНепроверяемыхРеквизитов.Добавить("Начисления");
		
	Иначе
		
		Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
		РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ДокументУсловий);
		
		Если РеквизитыУсловий.Количество() > 0 Тогда
			
			Если РеквизитыУсловий.ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("Партнер");
				
			ИначеЕсли РеквизитыУсловий.ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
				
				МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
				
			КонецЕсли;
			
			ПроверитьФиксациюСоставаСегментовУРБ(Отказ, Ложь, РеквизитыУсловий);
			Если НЕ Отказ Тогда
				ПроверитьУчастниковПоУсловиюРетроБонусов(РеквизитыУсловий, Отказ);
			КонецЕсли;
			КонтрольЗаполненияПериодаДействия(РеквизитыУсловий, Отказ);
			
		Иначе
			
			МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
			МассивНепроверяемыхРеквизитов.Добавить("Партнер");
			МассивНепроверяемыхРеквизитов.Добавить("НачалоПериода");
			МассивНепроверяемыхРеквизитов.Добавить("ОкончаниеПериода");
			МассивНепроверяемыхРеквизитов.Добавить("Валюта");
			МассивНепроверяемыхРеквизитов.Добавить("Начисления");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Запрещено изменение документа в подчиненном узле обмена'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЕсли;
	
	Если ДокументУсловий.Пустая() Тогда
		
		НесколькоКонтрагентов = Ложь;
		НесколькоПартнеров = Ложь;
		
	Иначе
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ДокументУсловий);
		
		ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
		НесколькоКонтрагентов = (РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту);
		НесколькоПартнеров = (РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту);
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			ЕстьНачисленияЗаПериод(РеквизитыУсловий, Отказ);
			ПроверитьФиксациюСоставаСегментовУРБ(Отказ, Истина);
			ПроверитьСтатусАктуальногоУРБ(Отказ, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРасчетная = Начисления.Итог("СуммаБонусРасчетный");
	СуммаНачисленная = Начисления.Итог("СуммаБонусНачисленный");
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент()
	
	Ответственный = Пользователи.ТекущийПользователь();
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

// Параметры:
//  УсловиеРетроБонусов - ДокументСсылка.УсловияРетроБонусовКлиентов - Данные заполнения
//
Процедура ЗаполнитьПоУсловиюРетроБонусовКлиентов(УсловиеРетроБонусов)
	
	РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(УсловиеРетроБонусов);
	
	ДокументУсловий = УсловиеРетроБонусов;
	Организация = РеквизитыУсловий.Организация;
	НачалоПериода = РеквизитыУсловий.НачалоДействия;
	ОкончаниеПериода = РеквизитыУсловий.ОкончаниеДействия;
	Валюта = РеквизитыУсловий.Валюта;
	
	Если НЕ ЗначениеЗаполнено(Валюта)
	   И РеквизитыУсловий.БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты
	   И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") Тогда
		
		Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			
			ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Валюта"". Возможно, в информационной базе не введено ни одной валюты
								   |Для настройки необходимо перейти в раздел ""НСИ и администрирование""-""Предприятие""-""Валюты"".'");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

Процедура ЕстьНачисленияЗаПериод(РеквизитыУсловий, Отказ)
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовПериодыНачислений");
		ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", ДокументУсловий);
		ЭлементБлокировки.УстановитьЗначение("Валюта", Валюта);
		Если РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту Тогда
			
			ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
			
		ИначеЕсли РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту Тогда
			
			ЭлементБлокировки.УстановитьЗначение("Партнер", Партнер);
			
		Иначе
			
			ЭлементБлокировки.УстановитьЗначение("Контрагент", Контрагент);
			ЭлементБлокировки.УстановитьЗначение("Партнер", Партнер);
			
		КонецЕсли;
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		Блокировка.Заблокировать();
		
	Исключение
		
		НачалоДействияСтрокой = Формат(НачалоПериода, "ДЛФ=D;");
		ОкончаниеДействияСтрокой = Формат(ОкончаниеПериода, "ДЛФ=D;");
		ШаблонОшибки = НСтр("ru = 'Не удалось выполнить проверку на наличие уже введенных начислений по документу условий за период с %1 по %2 по причине ""%3"". 
							|Попробуйте позже'");
		ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОшибки, 
			НачалоДействияСтрокой,
			ОкончаниеДействияСтрокой,
			ОписаниеОшибки);
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Выборка = ВыборкаПересеченийНачисленийПоУсловию(РеквизитыУсловий);
	
	Пока Выборка.Следующий() Цикл
		
		РегистраторПредставление = Выборка.РегистраторПредставление;
		НачалоДействияСтрокой = Формат(НачалоПериода, "ДЛФ=D;");
		ОкончаниеДействияСтрокой = Формат(ОкончаниеПериода, "ДЛФ=D;");
		ВалютаСтрокой = Строка(Валюта);
		ТекстСообщения = "";
		
		Если РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту Тогда
			
			Шаблон = НСтр("ru = 'По контрагенту и документу условий за период с %1 по %2 в валюте %3 уже выполнено начисление ретро-бонусов документом %4'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				НачалоДействияСтрокой,
				ОкончаниеДействияСтрокой,
				ВалютаСтрокой,
				РегистраторПредставление);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
			
		ИначеЕсли РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту Тогда
			
			Шаблон = НСтр("ru = 'По клиенту и документу условий за период с %1 по %2 в валюте %3 уже выполнено начисление ретро-бонусов документом %4'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				НачалоДействияСтрокой,
				ОкончаниеДействияСтрокой,
				ВалютаСтрокой,
				РегистраторПредставление);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Партнер", "Объект", Отказ);
			
		Иначе
			
			Шаблон = НСтр("ru = 'По контрагенту, клиенту и документу условий за период с %1 по %2 в валюте %3 уже выполнено начисление ретро-бонусов документом %4'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				НачалоДействияСтрокой,
				ОкончаниеДействияСтрокой,
				ВалютаСтрокой,
				РегистраторПредставление);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "Контрагент", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - ВыборкаИзРезультатаЗапроса:
// 	* РегистраторПредставление - Строка - представление документа
//
Функция ВыборкаПересеченийНачисленийПоУсловию(РеквизитыУсловий)
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПРЕДСТАВЛЕНИЕ(РетроБонусыКлиентовПериодыНачислений.Регистратор) КАК РегистраторПредставление
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовПериодыНачислений КАК РетроБонусыКлиентовПериодыНачислений
	|ГДЕ
	|	РетроБонусыКлиентовПериодыНачислений.Регистратор <> &Регистратор
	|	И РетроБонусыКлиентовПериодыНачислений.ДокументУсловий = &ДокументУсловий
	|	И РетроБонусыКлиентовПериодыНачислений.Валюта = &Валюта
	|	И (&НачалоПериода МЕЖДУ РетроБонусыКлиентовПериодыНачислений.НачалоПериода И РетроБонусыКлиентовПериодыНачислений.ОкончаниеПериода
	|			ИЛИ &ОкончаниеПериода МЕЖДУ РетроБонусыКлиентовПериодыНачислений.НачалоПериода И РетроБонусыКлиентовПериодыНачислений.ОкончаниеПериода
	|			ИЛИ &НачалоПериода <= РетроБонусыКлиентовПериодыНачислений.НачалоПериода
	|				И &ОкончаниеПериода >= РетроБонусыКлиентовПериодыНачислений.НачалоПериода
	|			ИЛИ &НачалоПериода <= РетроБонусыКлиентовПериодыНачислений.ОкончаниеПериода
	|				И &ОкончаниеПериода >= РетроБонусыКлиентовПериодыНачислений.ОкончаниеПериода)
	|	И &ДополнительноеУсловие";
	
	ДополнительноеУсловие = "ИСТИНА";
	Если РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту Тогда
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ДополнительноеУсловие = "РетроБонусыКлиентовПериодыНачислений.Контрагент = &Контрагент";
		
	ИначеЕсли РеквизитыУсловий.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту Тогда
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		ДополнительноеУсловие = "РетроБонусыКлиентовПериодыНачислений.Партнер = &Партнер";
		
	Иначе
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		Запрос.УстановитьПараметр("Партнер", Партнер);
		ДополнительноеУсловие = "РетроБонусыКлиентовПериодыНачислений.Контрагент = &Контрагент И РетроБонусыКлиентовПериодыНачислений.Партнер = &Партнер";
		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительноеУсловие", ДополнительноеУсловие);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//  Отказ - Булево
//
Процедура ПроверитьУчастниковПоУсловиюРетроБонусов(РеквизитыУсловий, Отказ)
	
	СоставУчастников = РеквизитыУсловий.СоставУчастников;
	Участники = РеквизитыУсловий.Участники;
	
	Если Участники <> Перечисления.СоставыСписковРетроБонусов.Все Тогда
		
		Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
			
			ПроверитьУчастниковПоУсловиюРетроБонусовИНН(РеквизитыУсловий, Отказ);
			
		Иначе
			
			ПроверитьУчастниковПоУсловиюРетроБонусовКонтрагентуКлиенту(РеквизитыУсловий, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьУчастниковПоУсловиюРетроБонусовИНН(РеквизитыУсловий, Отказ)
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	
	ВыборкаОшибок = ВыборкаНеУчастниковПоИНН(РеквизитыУсловий);
	
	Пока ВыборкаОшибок.Следующий() Цикл
		
		ТекущийКонтрагент = ВыборкаОшибок.Контрагент;
		ТекущийКонтрагентСтрокой = Строка(ТекущийКонтрагент);
		
		Если ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
			
			Если ВыборкаОшибок.НеЗаполненИНН Тогда
				
				Шаблон = НСтр("ru = 'У контрагента %1 в строке %2 не указан ИНН, проверка начисления невозможна'");
				
			Иначе
				
				Шаблон = НСтр("ru = 'Документ условий не действует для контрагента %1 в строке %2'");
				
			КонецЕсли;
			
			НомерСтроки = ВыборкаОшибок.НомерСтроки;
			НомерСтрокой = Формат(НомерСтроки, "ЧГ=;");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				ТекущийКонтрагентСтрокой,
				НомерСтрокой);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Начисления", НомерСтроки, "НомерСтроки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, Поле, "Объект", Отказ);
			
		Иначе
			
			Если ВыборкаОшибок.НеЗаполненИНН Тогда
				
				Шаблон = НСтр("ru = 'У контрагента %1 не указан ИНН, проверка начисления невозможна'");
				
			Иначе
				
				Шаблон = НСтр("ru = 'Документ условий не действует для контрагента %1'");
				
			КонецЕсли;
				
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон, 
				ТекущийКонтрагентСтрокой);
				
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Контрагент", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУчастниковПоУсловиюРетроБонусовКонтрагентуКлиенту(РеквизитыУсловий, Отказ)
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	СоставУчастников = РеквизитыУсловий.СоставУчастников;
	
	ОшибкиЗаполнения = Новый Структура;
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", Ложь);
	ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Новый ТаблицаЗначений);
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		ОшибкиЗаполнения = ДанныеНеУчастникиКонтрагенты(РеквизитыУсловий);
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		
		ОшибкиЗаполнения = ДанныеНеУчастникиКлиенты(РеквизитыУсловий);
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Договоры Тогда
		
		ОшибкиЗаполнения = ДанныеНеУчастникиПоДоговорам(РеквизитыУсловий);
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
		
		ОшибкиЗаполнения = ДанныеНеУчастникиПоСоглашениям(РеквизитыУсловий);
		
	КонецЕсли;
	
	КонтрагентСтрокой = Строка(Контрагент);
	ПартнерСтрокой = Строка(Партнер);
		
	Если ОшибкиЗаполнения.ОшибкаЗаполненияШапки Тогда
		
		Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту Тогда
			
			Шаблон = НСтр("ru = 'Документ условий не действует для контрагента %1 и клиента %2'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон, 
				КонтрагентСтрокой,
				ПартнерСтрокой);
			
			Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Партнер", "Объект", Отказ);
			Иначе
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Контрагент", "Объект", Отказ);
			КонецЕсли;
			
		ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
			
			Шаблон = НСтр("ru = 'Документ условий не действует для контрагента %1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				КонтрагентСтрокой);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Контрагент", "Объект", Отказ);
			
		Иначе
			
			Шаблон = НСтр("ru = 'Документ условий не действует для клиента %1'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Шаблон,
				ПартнерСтрокой);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Партнер", "Объект", Отказ);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ТекущаяСтрокаОшибки Из ОшибкиЗаполнения.ОшибкиЗаполненияСтрок Цикл
			
			НомерСтроки = ТекущаяСтрокаОшибки.НомерСтроки;
			НомерСтрокой = Строка(НомерСтроки);
			
			Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
			
				ТекущийПартнер = ТекущаяСтрокаОшибки.Партнер;
				ТекущийПартнерСтрокой = Строка(ТекущийПартнер);
				
				Шаблон = НСтр("ru = 'Документ условий не действует для контрагента %1 и клиента %2 в строке %3'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					КонтрагентСтрокой,
					ТекущийПартнерСтрокой,
					НомерСтрокой);
					
			Иначе
				
				ТекущийКонтрагент = ТекущаяСтрокаОшибки.Контрагент;
				ТекущийКонтрагентСтрокой = Строка(ТекущийКонтрагент);
				
				Шаблон = НСтр("ru = 'Документ условий не действует для клиента %1 и контрагента %2 в строке %3'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					Шаблон,
					ПартнерСтрокой,
					ТекущийКонтрагентСтрокой,
					НомерСтрокой);
				
			КонецЕсли;
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Начисления", НомерСтроки, "НомерСтроки");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, Поле, "Объект", Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * НеЗаполненИНН - Булево
//  * Контрагент - СправочникСсылка.Контрагенты
//  * НомерСтроки - Число
//
Функция ВыборкаНеУчастниковПоИНН(РеквизитыУсловий)
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	
	Если ДетализацияРасчетаУчастников <> Детализация.ПоКлиенту Тогда
		
		ТаблицаУчастников = Новый ТаблицаЗначений;
		ТаблицаУчастников.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаУчастников.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		
		НоваяСтрока = ТаблицаУчастников.Добавить();
		НоваяСтрока.Контрагент = Контрагент;
		НоваяСтрока.НомерСтроки = 0;
		
	Иначе
		
		ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Контрагент");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	Запрос.УстановитьПараметр("Участники", РеквизитыУсловий.Участники);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУчастников.Контрагент КАК Контрагент,
	|	ТаблицаУчастников.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВТ_Контрагенты
	|ИЗ
	|	&ТаблицаУчастников КАК ТаблицаУчастников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Контрагенты.Контрагент КАК Контрагент,
	|	ВТ_Контрагенты.НомерСтроки,
	|	ЕСТЬNULL(Контрагенты.ИНН, """") КАК ИНН
	|ПОМЕСТИТЬ ВТ_КонтрагентыИНН
	|ИЗ
	|	ВТ_Контрагенты КАК ВТ_Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ВТ_Контрагенты.Контрагент = Контрагенты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК НеЗаполненИНН,
	|	ВТ_КонтрагентыИНН.Контрагент,
	|	ВТ_КонтрагентыИНН.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТ_КонтрагентыИНН КАК ВТ_КонтрагентыИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РетроБонусыКлиентовИНН КАК РетроБонусыКлиентовИНН
	|		ПО ВТ_КонтрагентыИНН.ИНН = РетроБонусыКлиентовИНН.ИНН
	|		И РетроБонусыКлиентовИНН.ДокументУсловий = &ДокументУсловий
	|ГДЕ
	|	&Участники = ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.Выбранные)
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КонтрагентыИНН.Контрагент,
	|	ВТ_КонтрагентыИНН.НомерСтроки
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ВЫБОР
	|		КОГДА РетроБонусыКлиентовИНН.ИНН ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ВТ_КонтрагентыИНН.Контрагент,
	|	ВТ_КонтрагентыИНН.НомерСтроки
	|ИЗ
	|	ВТ_КонтрагентыИНН КАК ВТ_КонтрагентыИНН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РетроБонусыКлиентовИНН КАК РетроБонусыКлиентовИНН
	|		ПО ВТ_КонтрагентыИНН.ИНН = РетроБонусыКлиентовИНН.ИНН
	|		И РетроБонусыКлиентовИНН.ДокументУсловий = &ДокументУсловий
	|ГДЕ
	|	&Участники = ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.КромеВыбранных)
	|	И ВТ_КонтрагентыИНН.ИНН <> """"
	|СГРУППИРОВАТЬ ПО
	|	ВТ_КонтрагентыИНН.Контрагент,
	|	ВТ_КонтрагентыИНН.НомерСтроки
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НЕ РетроБонусыКлиентовИНН.ИНН ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ВТ_КонтрагентыИНН.Контрагент,
	|	ВТ_КонтрагентыИНН.НомерСтроки
	|ИЗ
	|	ВТ_КонтрагентыИНН КАК ВТ_КонтрагентыИНН
	|ГДЕ
	|	&Участники = ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.КромеВыбранных)
	|	И ВТ_КонтрагентыИНН.ИНН = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//
// Возвращаемое значение:
//  Структура:
//  * ОшибкаЗаполненияШапки - Булево
//  * ОшибкиЗаполненияСтрок - ТаблицаЗначений:
//   ** НомерСтроки - Число
//   ** Контрагент - СправочникСсылка.Контрагенты
//   ** Партнер - СправочникСсылка.Партнеры
//
Функция ДанныеНеУчастникиКонтрагенты(РеквизитыУсловий)
	
	ОшибкиЗаполнения = Новый Структура;
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", Ложь);
	ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Новый ТаблицаЗначений);
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	Участники = РеквизитыУсловий.Участники;
	ОшибкаЗаполненияШапки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РетроБонусыКлиентовКонтрагенты.Контрагент
		|ПОМЕСТИТЬ ВТ_Участники
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
		|ГДЕ
		|	(РетроБонусыКлиентовКонтрагенты.Партнер = &Партнер
		|	ИЛИ РетроБонусыКлиентовКонтрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|	И РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Участники.Контрагент
		|ИЗ
		|	ВТ_Участники КАК ВТ_Участники";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РетроБонусыКлиентовКонтрагенты.Партнер
		|ПОМЕСТИТЬ ВТ_Участники
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
		|ГДЕ
		|	РетроБонусыКлиентовКонтрагенты.Контрагент = &Контрагент
		|	И РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Участники.Партнер
		|ИЗ
		|	ВТ_Участники КАК ВТ_Участники";
		
	Иначе
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РетроБонусыКлиентовКонтрагенты.Партнер
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
		|ГДЕ
		|	(РетроБонусыКлиентовКонтрагенты.Партнер = &Партнер
		|	ИЛИ РетроБонусыКлиентовКонтрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|	И РетроБонусыКлиентовКонтрагенты.Контрагент = &Контрагент
		|	И РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Участники = СоставыСписков.Выбранные
	   И Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	ИначеЕсли Участники = СоставыСписков.КромеВыбранных
	   И ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту
	   И НЕ Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	КонецЕсли;
	
	Если ДетализацияРасчетаУчастников <> Детализация.ПоКонтрагентуКлиенту
	   И НЕ ОшибкаЗаполненияШапки Тогда
		
		ТаблицаРезультата = Результат.Выгрузить();
		
		Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
			
			Если ТаблицаРезультата.Найти(Справочники.Партнеры.ПустаяСсылка(), "Партнер") = Неопределено Тогда
				
				ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Партнер");
				
				Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
				Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата);
				Запрос.УстановитьПараметр("Участники", Участники);
				
				Запрос.Текст = ТекстЗапросаОбработкаСтрок();
				ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Запрос.Выполнить().Выгрузить());
				
			Иначе
				
				Если Участники = СоставыСписков.КромеВыбранных Тогда
					ОшибкаЗаполненияШапки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Контрагент, Партнер");
			
			Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
			Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата);
			Запрос.УстановитьПараметр("Участники", Участники);
			
			Запрос.Текст = ТекстЗапросаОбработкаСтрок(Истина);
			ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Запрос.Выполнить().Выгрузить());
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", ОшибкаЗаполненияШапки);
	
	Возврат ОшибкиЗаполнения;
	
КонецФункции

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//
// Возвращаемое значение:
//  Структура:
//  * ОшибкаЗаполненияШапки - Булево
//  * ОшибкиЗаполненияСтрок - ТаблицаЗначений:
//   ** НомерСтроки - Число
//   ** Контрагент - СправочникСсылка.Контрагенты
//   ** Партнер - СправочникСсылка.Партнеры
//
Функция ДанныеНеУчастникиКлиенты( РеквизитыУсловий)
	
	ОшибкиЗаполнения = Новый Структура;
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", Ложь);
	ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Новый ТаблицаЗначений);
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	Участники = РеквизитыУсловий.Участники;
	ОшибкаЗаполненияШапки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РетроБонусыКлиентовКонтрагенты.Контрагент
		|ПОМЕСТИТЬ ВТ_Участники
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
		|ГДЕ
		|	РетроБонусыКлиентовКонтрагенты.Партнер = &Партнер
		|	И РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Участники.Контрагент
		|ИЗ
		|	ВТ_Участники КАК ВТ_Участники";
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РетроБонусыКлиентовКонтрагенты.Партнер
		|ПОМЕСТИТЬ ВТ_Участники
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
		|ГДЕ
		|	(РетроБонусыКлиентовКонтрагенты.Контрагент = &Контрагент
		|	ИЛИ РетроБонусыКлиентовКонтрагенты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|	И РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Участники.Партнер
		|ИЗ
		|	ВТ_Участники КАК ВТ_Участники";
		
	Иначе
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		Запрос.УстановитьПараметр("Контрагент", Контрагент);
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РетроБонусыКлиентовКонтрагенты.Партнер
		|ИЗ
		|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
		|ГДЕ
		|	РетроБонусыКлиентовКонтрагенты.Партнер = &Партнер
		|	И (РетроБонусыКлиентовКонтрагенты.Контрагент = &Контрагент
		|	ИЛИ РетроБонусыКлиентовКонтрагенты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|	И РетроБонусыКлиентовКонтрагенты.ДокументУсловий = &ДокументУсловий";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Участники = СоставыСписков.Выбранные
	   И Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	ИначеЕсли Участники = СоставыСписков.КромеВыбранных
	   И ДетализацияРасчетаУчастников = Детализация.ПоКонтрагентуКлиенту
	   И НЕ Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	КонецЕсли;
	
	Если ДетализацияРасчетаУчастников <> Детализация.ПоКонтрагентуКлиенту
	   И НЕ ОшибкаЗаполненияШапки Тогда
		
		Если ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
			
			ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Партнер");
			
			Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
			Запрос.УстановитьПараметр("Участники", Участники);
			Запрос.Текст = ТекстЗапросаОбработкаСтрок();
			ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Запрос.Выполнить().Выгрузить());
			
		Иначе
			
			ТаблицаРезультата = Результат.Выгрузить();
			Если ТаблицаРезультата.Найти(Справочники.Контрагенты.ПустаяСсылка(), "Контрагент") = Неопределено Тогда
				
				ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Контрагент");
				
				Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
				Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата);
				Запрос.УстановитьПараметр("Участники", Участники);
				
				Запрос.Текст = ТекстЗапросаОбработкаСтрок(Истина);
				ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Запрос.Выполнить().Выгрузить());
				
			Иначе
				
				Если Участники = СоставыСписков.КромеВыбранных Тогда
					ОшибкаЗаполненияШапки = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", ОшибкаЗаполненияШапки);
	
	Возврат ОшибкиЗаполнения;
	
КонецФункции

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//
// Возвращаемое значение:
//  Структура:
//  * ОшибкаЗаполненияШапки - Булево
//  * ОшибкиЗаполненияСтрок - ТаблицаЗначений:
//   ** НомерСтроки - Число
//   ** Контрагент - СправочникСсылка.Контрагенты
//   ** Партнер - СправочникСсылка.Партнеры
//
Функция ДанныеНеУчастникиПоСоглашениям(РеквизитыУсловий)
	
	ОшибкиЗаполнения = Новый Структура;
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", Ложь);
	ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Новый ТаблицаЗначений);
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияСКлиентами.Партнер КАК Партнер,
	|	СоглашенияСКлиентами.Контрагент КАК Контрагент,
	|	СоглашенияСКлиентами.Типовое КАК Типовое
	|ПОМЕСТИТЬ ВТ_ПартнерыКонтрагенты
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовДоговорыСоглашения КАК РетроБонусыКлиентовДоговорыСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО РетроБонусыКлиентовДоговорыСоглашения.Соглашение = СоглашенияСКлиентами.Ссылка
	|		И РетроБонусыКлиентовДоговорыСоглашения.ДокументУсловий = &ДокументУсловий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ПартнерыКонтрагенты.Типовое) КАК Типовое
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ВТ_ПартнерыКонтрагенты
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(ВТ_ПартнерыКонтрагенты.Типовое) = ИСТИНА";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Если ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
			
			ДанныеНеУчастникиПоСоглашениямДетализацияПоКлиенту(Запрос, ОшибкиЗаполнения);
			
		ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
			
			ДанныеНеУчастникиПоСоглашениямДетализацияПоКонтрагенту(Запрос, ОшибкиЗаполнения);
			
		Иначе
			
			ДанныеНеУчастникиПоСоглашениямДетализацияПоКлиентуПоКонтрагенту(Запрос, ОшибкиЗаполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОшибкиЗаполнения;
	
КонецФункции

// Параметры:
//  Запрос - Запрос - Запрос
//  ОшибкиЗаполнения - Структура - Ошибки заполнения:
// * ОшибкаЗаполненияШапки - Булево
// * ОшибкиЗаполненияСтрок - ТаблицаЗначений
//
Процедура ДанныеНеУчастникиПоСоглашениямДетализацияПоКлиентуПоКонтрагенту(Запрос, ОшибкиЗаполнения)
	
	ОшибкаЗаполненияШапки = Ложь;
	
	МассивКонтрагентов = Новый Массив;  // Массив из СправочникСсылка.Контрагенты
	МассивКонтрагентов.Добавить(Контрагент);
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Контрагенты", МассивКонтрагентов);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ПартнерыКонтрагенты.Партнер КАК Партнер
	|
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ВТ_ПартнерыКонтрагенты
	|ГДЕ
	|	ВТ_ПартнерыКонтрагенты.Контрагент В (&Контрагенты)
	|	И ВТ_ПартнерыКонтрагенты.Партнер = &Партнер";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	КонецЕсли;
	
	ОшибкиЗаполнения.ОшибкаЗаполненияШапки = ОшибкаЗаполненияШапки;
	
КонецПроцедуры

// Параметры:
//  Запрос - Запрос - Запрос
//  ОшибкиЗаполнения - Структура - Ошибки заполнения:
// * ОшибкаЗаполненияШапки - Булево
// * ОшибкиЗаполненияСтрок - ТаблицаЗначений
//
Процедура ДанныеНеУчастникиПоСоглашениямДетализацияПоКонтрагенту(Запрос, ОшибкиЗаполнения)
	
	ОшибкаЗаполненияШапки = Ложь;
	УчастникиВыбранные = Перечисления.СоставыСписковРетроБонусов.Выбранные;
	
	МассивКонтрагентов = Новый Массив;  // Массив из СправочникСсылка.Контрагенты
	МассивКонтрагентов.Добавить(Контрагент);
	МассивКонтрагентов.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Контрагенты", МассивКонтрагентов);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ПартнерыКонтрагенты.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТ_Участники
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ВТ_ПартнерыКонтрагенты
	|ГДЕ
	|	ВТ_ПартнерыКонтрагенты.Контрагент В (&Контрагенты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Участники.Партнер КАК Партнер
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	Иначе
		
		ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Партнер");
		
		Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
		Запрос.УстановитьПараметр("Участники", УчастникиВыбранные);
		Запрос.Текст = ТекстЗапросаОбработкаСтрок();
		ОшибкиЗаполнения.ОшибкиЗаполненияСтрок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ОшибкиЗаполнения.ОшибкаЗаполненияШапки = ОшибкаЗаполненияШапки;
	
КонецПроцедуры

// Параметры:
//  Запрос - Запрос - Запрос
//  ОшибкиЗаполнения - Структура - Ошибки заполнения:
// * ОшибкаЗаполненияШапки - Булево
// * ОшибкиЗаполненияСтрок - ТаблицаЗначений
//
Процедура ДанныеНеУчастникиПоСоглашениямДетализацияПоКлиенту(Запрос, ОшибкиЗаполнения)
	
	ОшибкаЗаполненияШапки = Ложь;
	УчастникиВыбранные = Перечисления.СоставыСписковРетроБонусов.Выбранные;
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ПартнерыКонтрагенты.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_Участники
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ВТ_ПартнерыКонтрагенты
	|ГДЕ
	|	ВТ_ПартнерыКонтрагенты.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Участники.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники";
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	Иначе
		
		ТаблицаРезультата = Результат.Выгрузить();
		Если ТаблицаРезультата.Найти(Справочники.Контрагенты.ПустаяСсылка(), "Контрагент") = Неопределено Тогда
			
			ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Контрагент");
			
			Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
			Запрос.УстановитьПараметр("ТаблицаРезультата", ТаблицаРезультата);
			Запрос.УстановитьПараметр("Участники", УчастникиВыбранные);
			
			Запрос.Текст = ТекстЗапросаОбработкаСтрок(Истина);
			ОшибкиЗаполнения.ОшибкиЗаполненияСтрок =  Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОшибкиЗаполнения.ОшибкаЗаполненияШапки = ОшибкаЗаполненияШапки;
	
КонецПроцедуры

// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//
// Возвращаемое значение:
//  Структура:
//  * ОшибкаЗаполненияШапки - Булево
//  * ОшибкиЗаполненияСтрок - ТаблицаЗначений:
//   ** НомерСтроки - Число
//   ** Контрагент - СправочникСсылка.Контрагенты
//   ** Партнер - СправочникСсылка.Партнеры
//
Функция ДанныеНеУчастникиПоДоговорам(РеквизитыУсловий)
	
	ОшибкиЗаполнения = Новый Структура;
	ОшибкиЗаполнения.Вставить("ОшибкаЗаполненияШапки", Ложь);
	ОшибкиЗаполнения.Вставить("ОшибкиЗаполненияСтрок", Новый ТаблицаЗначений);
	
	Детализация = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ДетализацияРасчетаУчастников = РеквизитыУсловий.ДетализацияРасчетаУчастников;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	МассивЗапросов = Новый Массив;  // Массив из Строка
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыКонтрагентов.Партнер КАК Партнер,
	|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
	|	ДоговорыКонтрагентов.РазрешенаРаботаСДочернимиПартнерами КАК РазрешенаРаботаСДочернимиПартнерами
	|ПОМЕСТИТЬ ВТ_ПартнерыКонтрагенты
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовДоговорыСоглашения КАК РетроБонусыКлиентовДоговорыСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО РетроБонусыКлиентовДоговорыСоглашения.Договор = ДоговорыКонтрагентов.Ссылка
	|		И РетроБонусыКлиентовДоговорыСоглашения.ДокументУсловий = &ДокументУсловий";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	Если ДетализацияРасчетаУчастников = Детализация.ПоКлиенту Тогда
		
		ДанныеНеУчастникиПоДоговорамДетализацияПоКлиенту(Запрос, МассивЗапросов, ОшибкиЗаполнения);
		
	ИначеЕсли ДетализацияРасчетаУчастников = Детализация.ПоКонтрагенту Тогда
		
		ДанныеНеУчастникиПоДоговорамДетализацияПоКонтрагенту(Запрос, МассивЗапросов, ОшибкиЗаполнения);
		
	Иначе
		
		ДанныеНеУчастникиПоДоговорамДетализацияПоКлиентуПоКонтрагенту(Запрос, МассивЗапросов, ОшибкиЗаполнения);
		
	КонецЕсли;
	
	Возврат ОшибкиЗаполнения;
	
КонецФункции

// Параметры:
//  Запрос - Запрос - Запрос
//  МассивЗапросов - Массив из Строка - Массив запросов
//  ОшибкиЗаполнения - Структура - Ошибки заполнения:
// * ОшибкаЗаполненияШапки - Булево
// * ОшибкиЗаполненияСтрок - ТаблицаЗначений
//
Процедура ДанныеНеУчастникиПоДоговорамДетализацияПоКлиентуПоКонтрагенту(Запрос, МассивЗапросов, ОшибкиЗаполнения)
	
	ОшибкаЗаполненияШапки = Ложь;
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартнерыКонтрагенты.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ПартнерыКонтрагенты
	|ГДЕ
	|	ПартнерыКонтрагенты.РазрешенаРаботаСДочернимиПартнерами
	|	И ПартнерыКонтрагенты.Партнер В (&СписокПартнеров)
	|	И ПартнерыКонтрагенты.Контрагент = &Контрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартнерыКонтрагенты.Контрагент
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ПартнерыКонтрагенты
	|ГДЕ
	|	НЕ ПартнерыКонтрагенты.РазрешенаРаботаСДочернимиПартнерами
	|	И ПартнерыКонтрагенты.Партнер = &Партнер
	|	И ПартнерыКонтрагенты.Контрагент = &Контрагент";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	КонецЕсли;
	
	ОшибкиЗаполнения.ОшибкаЗаполненияШапки =  ОшибкаЗаполненияШапки;
	
КонецПроцедуры

// Параметры:
//  Запрос - Запрос - Запрос
//  МассивЗапросов - Массив из Строка - Массив запросов
//  ОшибкиЗаполнения - Структура - Ошибки заполнения:
// * ОшибкаЗаполненияШапки - Булево
// * ОшибкиЗаполненияСтрок - ТаблицаЗначений
//
Процедура ДанныеНеУчастникиПоДоговорамДетализацияПоКонтрагенту(Запрос, МассивЗапросов, ОшибкиЗаполнения)
	
	ОшибкаЗаполненияШапки = Ложь;
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ПартнерыКонтрагенты.Партнер КАК Партнер,
	|	ВТ_ПартнерыКонтрагенты.РазрешенаРаботаСДочернимиПартнерами КАК РазрешенаРаботаСДочернимиПартнерами
	|ПОМЕСТИТЬ ВТ_Участники
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ВТ_ПартнерыКонтрагенты
	|ГДЕ
	|	ВТ_ПартнерыКонтрагенты.Контрагент = &Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Участники.Партнер КАК Партнер
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Партнер");
		Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
		
		ТекстЗапроса = ТекстЗапросаОбработкаСтрокПартнеровПоДоговорам();
		Запрос.Текст = ТекстЗапроса; 
		
		ОшибкиЗаполнения.ОшибкиЗаполненияСтрок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ОшибкиЗаполнения.ОшибкаЗаполненияШапки =  ОшибкаЗаполненияШапки;
	
КонецПроцедуры

// Параметры:
//  Запрос - Запрос - Запрос
//  МассивЗапросов - Массив из Строка - Массив запросов
//  ОшибкиЗаполнения - Структура - Ошибки заполнения:
// * ОшибкаЗаполненияШапки - Булево
// * ОшибкиЗаполненияСтрок - ТаблицаЗначений
//
Процедура ДанныеНеУчастникиПоДоговорамДетализацияПоКлиенту(Запрос, МассивЗапросов, ОшибкиЗаполнения)
	
	ОшибкаЗаполненияШапки = Ложь;
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПартнерыКонтрагенты.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_Участники
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ПартнерыКонтрагенты
	|ГДЕ
	|	ПартнерыКонтрагенты.РазрешенаРаботаСДочернимиПартнерами
	|	И ПартнерыКонтрагенты.Партнер В (&СписокПартнеров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПартнерыКонтрагенты.Контрагент
	|ИЗ
	|	ВТ_ПартнерыКонтрагенты КАК ПартнерыКонтрагенты
	|ГДЕ
	|	НЕ ПартнерыКонтрагенты.РазрешенаРаботаСДочернимиПартнерами
	|	И ПартнерыКонтрагенты.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Участники.Контрагент КАК Контрагент
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники";
	
	МассивЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(МассивЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОшибкаЗаполненияШапки = Истина;
		
	Иначе
		
		ТаблицаУчастников = Начисления.Выгрузить(, "НомерСтроки, Контрагент");
		
		Запрос.УстановитьПараметр("ТаблицаУчастников", ТаблицаУчастников);
		Запрос.УстановитьПараметр("Участники", Перечисления.СоставыСписковРетроБонусов.Выбранные);
		Запрос.Текст = ТекстЗапросаОбработкаСтрок(Истина);
		ОшибкиЗаполнения.ОшибкиЗаполненияСтрок = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	ОшибкиЗаполнения.ОшибкаЗаполненияШапки =  ОшибкаЗаполненияШапки;
	
КонецПроцедуры

Функция ТекстЗапросаОбработкаСтрокПартнеровПоДоговорам()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУчастниковДокумента.Партнер КАК Партнер,
	|	ТаблицаУчастниковДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаУчастников
	|ИЗ
	|	&ТаблицаУчастников КАК ТаблицаУчастниковДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ИерархияПартнеров.Родитель, ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)) КАК Родитель,
	|	ТаблицаУчастников.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТ_ПартнерыРодители
	|ИЗ
	|	ТаблицаУчастников КАК ТаблицаУчастников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|		ПО ТаблицаУчастников.Партнер = ИерархияПартнеров.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Участники.Партнер КАК Партнер
	|ПОМЕСТИТЬ ВТ_НайденныеУчастники
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУчастников КАК ТаблицаУчастников
	|		ПО ВТ_Участники.Партнер = ТаблицаУчастников.Партнер
	|ГДЕ
	|	НЕ ВТ_Участники.РазрешенаРаботаСДочернимиПартнерами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПартнерыРодители.Партнер
	|ИЗ
	|	ВТ_Участники КАК ВТ_Участники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПартнерыРодители КАК ВТ_ПартнерыРодители
	|		ПО ВТ_Участники.Партнер = ВТ_ПартнерыРодители.Родитель
	|ГДЕ
	|	ВТ_Участники.РазрешенаРаботаСДочернимиПартнерами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУчастников.Партнер КАК Партнер,
	|	ТаблицаУчастников.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаУчастников КАК ТаблицаУчастников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НайденныеУчастники КАК ВТ_НайденныеУчастники
	|		ПО ТаблицаУчастников.Партнер = ВТ_НайденныеУчастники.Партнер
	|ГДЕ
	|	ВТ_НайденныеУчастники.Партнер ЕСТЬ NULL";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаОбработкаСтрок(ДетализацияПоПартнеру = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаУчастниковДокумента.Партнер КАК Партнер,
	|	ТаблицаУчастниковДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаУчастников
	|ИЗ
	|	&ТаблицаУчастников КАК ТаблицаУчастниковДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУчастниковДокумента.Партнер КАК Партнер,
	|	ТаблицаУчастниковДокумента.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаУчастников КАК ТаблицаУчастниковДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Участники КАК ВТ_Участники
	|		ПО ТаблицаУчастниковДокумента.Партнер = ВТ_Участники.Партнер
	|ГДЕ
	|	ВТ_Участники.Партнер ЕСТЬ NULL
	|	И &Участники = ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.Выбранные)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаУчастниковДокумента.Партнер,
	|	ТаблицаУчастниковДокумента.НомерСтроки
	|ИЗ
	|	ТаблицаУчастников КАК ТаблицаУчастниковДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Участники КАК ВТ_Участники
	|		ПО ТаблицаУчастниковДокумента.Партнер = ВТ_Участники.Партнер
	|ГДЕ
	|	НЕ ВТ_Участники.Партнер ЕСТЬ NULL
	|	И &Участники = ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.КромеВыбранных)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Если ДетализацияПоПартнеру Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Партнер", "Контрагент");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Выполняется проверка на период действия.
// 
// Параметры:
//  РеквизитыУсловий - см. Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные
//  Отказ - Булево
//
Процедура КонтрольЗаполненияПериодаДействия(РеквизитыУсловий, Отказ)
	
	ПустаяДата = Дата(1, 1, 1);
	
	Если НачалоПериода = ПустаяДата
	 ИЛИ ОкончаниеПериода = ПустаяДата Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НачалоДействияРетроБонуса = РеквизитыУсловий.НачалоДействия;
	ОкончаниеДействияРетроБонуса = РеквизитыУсловий.ОкончаниеДействия;
	ПериодичностьНачислений = РеквизитыУсловий.ПериодичностьНачислений;
	
	ЕстьНарушениеНачала = Ложь;
	ЕстьНарушениеОкончания = Ложь;
	
	Если НачалоПериода > ОкончаниеПериода Тогда
			
		ТекстОшибки = НСтр("ru = 'Начало периода не может быть больше его окончания'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "НачалоДействия", "Объект", Отказ);
				
	ИначеЕсли НачалоПериода > ОкончаниеДействияРетроБонуса
	 ИЛИ ОкончаниеПериода < НачалоДействияРетроБонуса Тогда
		
		ЕстьНарушениеНачала = Истина;
		ЕстьНарушениеОкончания = Истина;
		ТекстОшибки = НСтр("ru = 'Документ условия не действует в указанном периоде начисления'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		
	КонецЕсли;
	
	РезультатПроверкиПериодичность = РетроБонусыСервер.ПроверитьПериодыПоПериодичности(
		ПериодичностьНачислений, 
		НачалоПериода,
		ОкончаниеПериода,
		Истина);
		
	Если РезультатПроверкиПериодичность.ЕстьНарушениеНачала 
	   И НЕ ЕстьНарушениеНачала Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверкиПериодичность.ТекстОшибкиНачала,, "НачалоДействия", "Объект", Отказ);
		
	КонецЕсли;
		
	Если РезультатПроверкиПериодичность.ЕстьНарушениеОкончания
	   И НЕ ЕстьНарушениеОкончания Тогда
		
		ОбщегоНазначения.СообщитьПользователю(
			РезультатПроверкиПериодичность.ТекстОшибкиОкончания,, "ОкончаниеДействия", "Объект", Отказ);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПроверитьФиксациюСоставаСегментовУРБ(Отказ, УстановитьБлокировку, Знач РеквизитыУсловий = Неопределено)
	
	ПредставлениеДокументаУсловий = ОбщегоНазначения.ПредметСтрокой(ДокументУсловий);
	
	Если УстановитьБлокировку Тогда
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.РетроБонусыКлиентовУсловия");
			ЭлементБлокировки.УстановитьЗначение("ДокументУсловий", ДокументУсловий);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			Блокировка.Заблокировать();
			
		Исключение
			
			ШаблонОшибки = НСтр("ru = 'Не удалось выполнить проверку фиксации состава сегментов документа %1 по причине ""%2"".
								|Попробуйте позже'");
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки,
				ПредставлениеДокументаУсловий,
				ОписаниеОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ДокументУсловий);
		
	ИначеЕсли РеквизитыУсловий = Неопределено Тогда
		
		РеквизитыУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(ДокументУсловий);
		
	КонецЕсли;
	
	ИспользуютсяСегменты = (РеквизитыУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры
							ИЛИ РеквизитыУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
	
	Если ИспользуютсяСегменты
	   И НЕ РеквизитыУсловий.СегментыЗафиксированы Тогда
		
		ШаблонСообщения = НСтр("ru = 'В документе условий %1 используются сегменты, но состав сегментов не зафиксирован'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ПредставлениеДокументаУсловий);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняется проверка на то, что документ УРБ согласован или если была корректировка УРБ, то она не в статусе на согласовании.
// 
// Параметры:
//  Отказ - Булево 
//  ВыполнитьСБлокировкой - Булево
// 
Процедура ПроверитьСтатусАктуальногоУРБ(Отказ, ВыполнитьСБлокировкой = Ложь)
	
	ДанныеДляКонтроля = Новый Структура;
	ДанныеДляКонтроля.Вставить("АктуальныйДокументУсловий", ДокументУсловий);
	ДанныеДляКонтроля.Вставить("СтатусКорректировки", Перечисления.СтатусыДокументовРетроБонусов.ПустаяСсылка());
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	ПолноеИмя = Метаданные.Документы.УсловияРетроБонусовКлиентов.ПолноеИмя();
	Запрос.УстановитьПараметр("ТипСсылки", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя));
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РетроБонусыКлиентовУсловия.РегистраторДвижения КАК АктуальныйДокументУсловий
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовУсловия КАК РетроБонусыКлиентовУсловия
	|ГДЕ
	|	РетроБонусыКлиентовУсловия.ДокументУсловий = &ДокументУсловий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК АктуальныйДокументУсловий,
	|	РеестрДокументов.Статус КАК СтатусКорректировки
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.ТипСсылки = &ТипСсылки
	|	И НЕ РеестрДокументов.ПометкаУдаления
	|	И РеестрДокументов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРетроБонусов.Согласован)
	|	И РеестрДокументов.ИсправляемыйДокумент = &ДокументУсловий";
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.ВыполнитьПакет();
	
	РезультатПоДаннымРегистра = Результат[0];
	РезультатПоДаннымДокументов = Результат[1];
	
	ДокументУсловийНеСогласован = РезультатПоДаннымРегистра.Пустой();
	ДокументКорректируется = НЕ РезультатПоДаннымДокументов.Пустой();
	
	Если ДокументКорректируется Тогда
		
		Выборка = РезультатПоДаннымДокументов.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеДляКонтроля, Выборка);
		
	ИначеЕсли НЕ ДокументУсловийНеСогласован Тогда
		
		Выборка = РезультатПоДаннымРегистра.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеДляКонтроля, Выборка);
		
	КонецЕсли;
	
	Если ВыполнитьСБлокировкой Тогда
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.УсловияРетроБонусовКлиентов");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ДанныеДляКонтроля.АктуальныйДокументУсловий);
			
			Блокировка.Заблокировать();
			
		Исключение
			
			ШаблонОшибки = НСтр("ru = 'Не удалось выполнить проверку статуса документа условий по причине: ""%1"".
								|Попробуйте позже'");
			ОписаниеОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОшибки, 
				ОписаниеОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ДокументУсловийНеСогласован
	 ИЛИ ДанныеДляКонтроля.СтатусКорректировки = Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании Тогда
		
		Если ВыполнитьСБлокировкой Тогда
			
			Если ДокументУсловийНеСогласован Тогда
				
				ТекстСообщения = НСтр("ru = 'Документ условий не согласован. Проведение документа невозможно'");
				
			Иначе
				
				ТекстСообщения = НСтр("ru = 'Для документа условий введена корректировка, которая находится на согласовании. Проведение документа невозможно'");
				
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ДокументУсловий", "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли