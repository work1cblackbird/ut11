#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Регионализация

// Обрабатывает результат операции запроса возможности перевозки партии в рамках регионализации.
// 
// Параметры:
//  ДанныеДокумента - Структура - данные документа
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующий субъект
//  Предприятие - СправочникСсылка.ПредприятияВЕТИС - предприятие
//  ПараметрыОбмена - см. ИнтеграцияВЕТИС.ПараметрыОбмена
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
//  
// Возвращаемое значение:
//  Массив из см. ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения - Обработать ответ на запрос возможности перевозки партии в рамках регионализации
Функция ОбработатьОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	Изменения = Новый Массив;
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			РазрешенияНомеровМаршрутов = Новый Соответствие;
			РазрешенияВидовПродукции = Новый Соответствие;
			
			ВыполнениеУсловийПоМаршрутам = Новый Соответствие;
			ВыполнениеУсловийПоВидамПродукции = Новый Соответствие;
			
			ВыполненныеУсловия = ДокументОбъект.Регионализация.Выгрузить(Новый Структура("УсловиеВыполняется", Истина));
			ВыполненныеУсловия.Индексы.Добавить("УсловиеРегионализации, ВидПродукции");
			
			УсловияРегионализации = Новый ТаблицаЗначений;
			УсловияРегионализации.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
			УсловияРегионализации.Колонки.Добавить("УсловиеРегионализации", Новый ОписаниеТипов("СправочникСсылка.УсловияРегионализацииВЕТИС"));
			УсловияРегионализации.Колонки.Добавить("УсловиеВыполняется", Новый ОписаниеТипов("Булево"));
			
			Для каждого РазрешениеМаршрута Из ДанныеДокумента.Объект.r13nRouteSection Цикл
				
				НомерМаршрута = Число(РазрешениеМаршрута.sqnId);
				ПоследнийСтатусРазрешенияМаршрута = Неопределено;
				
				Для каждого РазрешениеВидовПродукции Из РазрешениеМаршрута.appliedR13nRule Цикл
				
					СтатусРазрешения = Число(РазрешениеВидовПродукции.decision); // Строка. 1 - Разрешено, 2 - Разрешено с условиями, 3 - Запрещено.
					
					ВидыПродукции = Новый Массив;
					
					Для каждого СвойстваВидаПродукции Из РазрешениеВидовПродукции.cargoType Цикл
						ВидПродукции = ИнтеграцияВЕТИС.ВидПродукции(СвойстваВидаПродукции.guid,,, ПараметрыОбмена);
						ВидыПродукции.Добавить(ВидПродукции);
					КонецЦикла;
					
					Для каждого ВидПродукции Из ВидыПродукции Цикл
					
						Для каждого ТребованиеКПеремещению Из РазрешениеВидовПродукции.requirement Цикл
							
							// Внутри разрешения по маршруту со статусом 2 - разрешено с условиями, могут быть уточнения требований к перемещению по разным болезням
							// со статусами 1 (разрешено без условий), 2 (разрешено с условиями) и 3 (запрещено безусловно). В таком случае мы устанавливаем самый строгий статус.
							СтатусРазрешения = Макс(СтатусРазрешения, Число(ТребованиеКПеремещению.type)); // Строка. 1 - Разрешено, 2 - Разрешено с условиями, 3 - Запрещено.
							
							Если СтатусРазрешения = 2 Тогда
							
								Заболевание = ИнтеграцияВЕТИС.Заболевание(ТребованиеКПеремещению.relatedDisease.guid, ПараметрыОбмена, ТребованиеКПеремещению.relatedDisease.name);
								УсловияВыполненыВРамкахЗаболевания = Ложь;
								
								Для каждого ГруппаУсловий Из ТребованиеКПеремещению.conditionGroup Цикл
									УсловияПоГруппеВыполнены = Истина;
									
									Для каждого СведенияОУсловииПеремещения Из ГруппаУсловий.condition Цикл
										
										Если СведенияОУсловииПеремещения.guid = Неопределено Тогда
											Продолжить;
										КонецЕсли;
										
										ЗаболеванияУсловия = Новый Массив;
										Для каждого СведенияОЗаболеванииУсловия Из СведенияОУсловииПеремещения.relatedDisease Цикл
											Заболевание = ИнтеграцияВЕТИС.Заболевание(СведенияОЗаболеванииУсловия.guid, ПараметрыОбмена, СведенияОЗаболеванииУсловия.name);
											ЗаболеванияУсловия.Добавить(Заболевание);
										КонецЦикла;
										
										ОбязательностьУсловия = СведенияОУсловииПеремещения.strict;
										Если ОбязательностьУсловия = Неопределено Тогда
											ОбязательностьУсловия = Истина;
										КонецЕсли;
										
										УсловиеРегионализации = ИнтеграцияВЕТИС.УсловиеРегионализации(
											СведенияОУсловииПеремещения.guid,
											ПараметрыОбмена,
											СведенияОУсловииПеремещения.text,
											ОбязательностьУсловия,
											ЗаболеванияУсловия,
											Ложь);
										
										СтрокаУсловийРегионализации = УсловияРегионализации.Добавить();
										СтрокаУсловийРегионализации.ВидПродукции          = ВидПродукции;
										СтрокаУсловийРегионализации.УсловиеРегионализации = УсловиеРегионализации;
										
										ПоискУсловий = Новый Структура("УсловиеРегионализации, ВидПродукции", УсловиеРегионализации, ВидПродукции);
										СтрокиВыполненныхУсловий = ВыполненныеУсловия.НайтиСтроки(ПоискУсловий);
										Если СтрокиВыполненныхУсловий.Количество() > 0 Тогда
											СтрокаУсловийРегионализации.УсловиеВыполняется = СтрокиВыполненныхУсловий[0].УсловиеВыполняется;
										КонецЕсли;
										
										Если ОбязательностьУсловия Тогда
											УсловияПоГруппеВыполнены = Мин(УсловияПоГруппеВыполнены, СтрокаУсловийРегионализации.УсловиеВыполняется);
										Иначе
											УсловияПоГруппеВыполнены = УсловияПоГруппеВыполнены;
										КонецЕсли;
										
									КонецЦикла;
									
									УсловияВыполненыВРамкахЗаболевания = Макс(УсловияВыполненыВРамкахЗаболевания, УсловияПоГруппеВыполнены);
								КонецЦикла;
								
								УстановленноеЗначение = ВыполнениеУсловийПоВидамПродукции.Получить(ВидПродукции);
								Если УстановленноеЗначение = Неопределено Тогда
									ВыполнениеУсловийПоВидамПродукции.Вставить(ВидПродукции, УсловияВыполненыВРамкахЗаболевания);
								Иначе
									ВыполнениеУсловийПоВидамПродукции.Вставить(ВидПродукции, Мин(УстановленноеЗначение, УсловияВыполненыВРамкахЗаболевания));
								КонецЕсли;
								
								УстановленноеЗначение = ВыполнениеУсловийПоМаршрутам.Получить(НомерМаршрута);
								Если УстановленноеЗначение = Неопределено Тогда
									ВыполнениеУсловийПоМаршрутам.Вставить(НомерМаршрута, УсловияВыполненыВРамкахЗаболевания);
								Иначе
									ВыполнениеУсловийПоМаршрутам.Вставить(НомерМаршрута, Мин(УстановленноеЗначение, УсловияВыполненыВРамкахЗаболевания));
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЦикла;
						
						РазрешениеВидаПродукции = РазрешенияВидовПродукции.Получить(ВидПродукции);
						
						Если РазрешениеВидаПродукции = Неопределено Тогда
							РазрешенияВидовПродукции.Вставить(ВидПродукции, СтатусРазрешения);
						Иначе
							// Наиболее строгое по всем точкам маршрутов.
							РазрешенияВидовПродукции.Вставить(ВидПродукции, Макс(РазрешениеВидаПродукции, СтатусРазрешения));
						КонецЕсли;
						
					КонецЦикла;
					
					Если ПоследнийСтатусРазрешенияМаршрута = Неопределено Тогда
						ПоследнийСтатусРазрешенияМаршрута = СтатусРазрешения;
					Иначе
						// Наиболее строгое по всем видам продукции.
						ПоследнийСтатусРазрешенияМаршрута = Макс(ПоследнийСтатусРазрешенияМаршрута, СтатусРазрешения);
					КонецЕсли;
					
				КонецЦикла;
				
				РазрешенияНомеровМаршрутов.Вставить(НомерМаршрута, ПоследнийСтатусРазрешенияМаршрута);
				
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Регионализация", УсловияРегионализации);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Регионализация.ВидПродукции КАК ВидПродукции,
			|	Регионализация.УсловиеРегионализации КАК УсловиеРегионализации,
			|	Регионализация.УсловиеВыполняется КАК УсловиеВыполняется
			|ПОМЕСТИТЬ Регионализация
			|ИЗ
			|	&Регионализация КАК Регионализация
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	Регионализация.ВидПродукции КАК ВидПродукции,
			|	Регионализация.УсловиеРегионализации КАК УсловиеРегионализации,
			|	МИНИМУМ(Регионализация.УсловиеВыполняется) КАК УсловиеВыполняется
			|ИЗ
			|	Регионализация КАК Регионализация
			|
			|СГРУППИРОВАТЬ ПО
			|	Регионализация.ВидПродукции,
			|	Регионализация.УсловиеРегионализации";
			
			ДокументОбъект.Регионализация.Загрузить(Запрос.Выполнить().Выгрузить());
			
			НомерМаршрута = 0;
			Для каждого СтрокаМаршрута Из ДокументОбъект.Маршрут Цикл
				НомерМаршрута = НомерМаршрута + 1;
				ЗначениеРазрешения = РазрешенияНомеровМаршрутов.Получить(НомерМаршрута);
				Если НЕ ЗначениеРазрешения = Неопределено Тогда
					РазрешениеНомераМаршрута = ИнтеграцияВЕТИСПовтИсп.РезультатПроверкиПравилРегионализации(ЗначениеРазрешения);
					СтрокаМаршрута.РезультатПроверкиПравилРегионализации = РазрешениеНомераМаршрута;
					Если РазрешениеНомераМаршрута = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
						СтрокаМаршрута.УсловияРегионализацииВыполнены = ВыполнениеУсловийПоМаршрутам.Получить(НомерМаршрута);
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'В документе %1 указана строка №%2 табличной части ""Маршрут"", которая не была передана в сервис. Данные ответа сервиса не актуальны.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ДанныеДокумента.Документ,
						НомерМаршрута);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
			
			ЗапросВидовПродукцииДокумента = Новый Запрос;
			ЗапросВидовПродукцииДокумента.Текст =
			"ВЫБРАТЬ
			|	Товары.НомерСтроки КАК НомерСтроки,
			|	ЕСТЬNULL(Товары.Продукция.ВидПродукции, ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)) КАК ВидПродукции
			|ИЗ
			|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &Ссылка";
			ЗапросВидовПродукцииДокумента.УстановитьПараметр("Ссылка", ДанныеДокумента.Документ);
			ВыборкаПоТЧТовары = ЗапросВидовПродукцииДокумента.Выполнить().Выбрать();
			Пока ВыборкаПоТЧТовары.Следующий() Цикл
				ИндексСтроки = ВыборкаПоТЧТовары.НомерСтроки - 1;
				СтрокаТовары = ДокументОбъект.Товары[ИндексСтроки];
				ЗначениеРазрешения = РазрешенияВидовПродукции.Получить(ВыборкаПоТЧТовары.ВидПродукции);
				Если НЕ ЗначениеРазрешения = Неопределено Тогда
					РазрешениеВидаПродукции = ИнтеграцияВЕТИСПовтИсп.РезультатПроверкиПравилРегионализации(ЗначениеРазрешения);
					СтрокаТовары.РезультатПроверкиПравилРегионализации = РазрешениеВидаПродукции;
					Если РазрешениеВидаПродукции = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
						СтрокаТовары.УсловияРегионализацииВыполнены = ВыполнениеУсловийПоВидамПродукции.Получить(ВыборкаПоТЧТовары.ВидПродукции);
					Иначе
						СтрокаТовары.УсловияРегионализацииВыполнены = Ложь;
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'В документе %1 указан вид продукции ""%2"", который не был передан в сервис. Данные ответа сервиса не актуальны.'");
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки,
						ДанныеДокумента.Документ,
						ВыборкаПоТЧТовары.ВидПродукции);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецЦикла;
			
			ОбъектИзменен = Истина;
			
			ДокументОбъект.Записать();
			
		КонецЕсли;
		
		ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Ложь;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		НовыйСтатус = ОбновитьСтатусПослеПолученияДанных(
			ДанныеДокумента.Документ,
			ДанныеДокумента.ВходящаяОперация,
			ПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Ложь);
	
	ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
	ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
	ВозвращаемоеЗначение.Предприятие          = Предприятие;
	ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
	ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
	
	ВозвращаемоеЗначение.ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
	ВозвращаемоеЗначение.Передано              = Ложь;
	ВозвращаемоеЗначение.Принято               = Истина;
	
	ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
	ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
	
	ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
	ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
	ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
	
	ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
	
	Изменения.Добавить(ВозвращаемоеЗначение);
	
	Возврат Изменения;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеВЕТИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
// 
// Возвращаемое значение:
//  Неопределено - Не требуется
//  См. РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.КОформлению);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Неопределено - Не требуется
//  См. РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка;
		
		Если ИнтеграцияВЕТИС.ОшибкаПараметраОбновленияСтатуса(ДополнительныеПараметры,"ЕстьОшибкиСервиса") Тогда
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Неопределено - Не требуется
//  См. РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации Тогда
		
		ПараметрыОбновления = ПараметрыОбновленияСтатусаРегионализации(ДокументСсылка, Операция, ДополнительныеПараметры);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияТранспортнойПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформлены;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка;
		
		Если ИнтеграцияВЕТИС.ОшибкаПараметраОбновленияСтатуса(ДополнительныеПараметры,"ЕстьОшибкиСервиса") Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
		// Подготовка данных к восстановлению
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
		
		// Выполнена проверка корректности оформления.
		// Из ВетИС получен пустой ответ на запрос измененных записей складского журнала.
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - новый статус документа ВЕТИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица   = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияТранспортнойПартии);

	// Запросы восстановления
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);

	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);

	// Повторный запрос после проверки корректности оформления
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияТранспортнойПартии);

	Возврат Таблица;
	
КонецФункции

// Определить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ОбновитьДвижения = ИнтеграцияВЕТИС.СтатусТребуетОбновленияДвижений(СтатусыДвиженийРезерв(), ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И ОбновитьДвижения Тогда
		
		ОбновитьДвиженияЗаписиСкладскогоЖурналаВРезервеВЕТИС(ДокументСсылка);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

// Операции допустимых действий.
// 
// Возвращаемое значение:
//  Соответствие Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС -  Операции допустимых действий
Функция ОперацииДопустимыхДействий() Экспорт
	
	СоответствиеОпераций = Новый Соответствие;
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения, 
		Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите, 
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии);
		
	Возврат СоответствиеОпераций
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Параметры:
//  ТребуетсяПовторноеОформление - Булево -  Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС - конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформлены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ВСДОформленыЧерезWeb);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  ФлагНаличияПроверкиРегионализации - Булево - Требуется проверка регионализации
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(ФлагНаличияПроверкиРегионализации = Ложь) Экспорт
	
	Если ФлагНаличияПроверкиРегионализации Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения;
	Иначе
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите;
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСВЕТИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания регламентной операции
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область СообщенияВЕТИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
//  ПараметрыПередачи - Структура - Операция ВЕТИС.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите Тогда
		
		Возврат ЗапросНаОформлениеТранспортнойПартииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения Тогда
		
		Возврат ЗапросПроверкиВозможностиПеревозкиВРамкахРегионализацииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных Тогда

		Возврат ИнтеграцияВЕТИС.ЗапросДляПроверкиКорректностиОформленияXML(ДокументСсылка);

	КонецЕсли;
	
КонецФункции

// Обработать результат запроса на оформление транспортной партии.
// 
// Параметры:
//  ДанныеДокумента - Структура - данные документа
//  ХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - хозяйствующий субъект
//  Предприятие - СправочникСсылка.ПредприятияВЕТИС - предприятие
//  ПараметрыОбмена - см. ИнтеграцияВЕТИС.ПараметрыОбмена
//  ДополнительныеПараметры - Неопределено - Дополнительные параметры
// 
// Возвращаемое значение:
// - Неопределено
// - см. ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения
Функция ОбработатьРезультатЗапросаНаОформлениеТранспортнойПартии(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		// Ответ от ВЕТИС может приходить в несколько итераций,
		// поэтому меняем статус документа, если в документе одна строка,
		// заявка отклонена, либо обработаны все строки.
		ИзменитьСтатус = Истина;
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			// Сведения о добавленных записях в журнал входящей продукции.
			ИзмененныеЗаписиЖурнала = ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(
										ДанныеДокумента, 
										ПараметрыОбмена, 
										Предприятие, 
										ХозяйствующийСубъект,
										ДокументОбъект);
				
			// Сведения о ВСД.
			ЗагрузитьСведенияВСДПоРезультатамЗапросаВЕТИС(
				ДанныеДокумента, 
				ИзмененныеЗаписиЖурнала,
				ПараметрыОбмена, 
				Предприятие, 
				ХозяйствующийСубъект,
				ДокументОбъект);
			
			ДокументОбъект.Записать();
			
			ОбъектИзменен = Истина;
			
			Если ДокументОбъект.Товары.Количество() > 1
				и ДанныеДокумента.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаВыполнена Тогда
				
				Для Каждого СтрТовары из ДокументОбъект.Товары Цикл
					Если Не ЗначениеЗаполнено(СтрТовары.ВетеринарноСопроводительныйДокумент) Тогда
						ИзменитьСтатус = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзменитьСтатус Тогда
			ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
			
			ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
			ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
			ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
			ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
			ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
			ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;

			НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
				ДанныеДокумента.Документ,
				ДанныеДокумента.ВходящаяОперация,
				ПараметрыОбновленияСтатуса);
		Иначе
			
			// Резерв тем не менее построчный, обновим его, даже если статус документа не поменялся
			ОбновитьДвиженияЗаписиСкладскогоЖурналаВРезервеВЕТИС(ДокументОбъект.Ссылка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Истина);
	
	ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);

	Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда

		ВозвращаемоеЗначение = Неопределено;
		ДополнительныеПараметры.ЭлементОчереди.ТекстОшибки = ТекстОшибки;

	Иначе

		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;

		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;

		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;

		ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
		ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
		ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
		ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;

	КонецЕсли;

	Возврат ВозвращаемоеЗначение;

КонецФункции

#КонецОбласти

#Область Заполнение

// Заполняет реквизит ЗаписьСкладскогоЖурнала в табличной части документа на основании остатков продукции.
//
// Параметры:
//   Объект      - ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС, ДанныеФормыСтруктура - заполняемый документ 
//   СписокСтрок - Массив Из ДанныеФормыЭлементКоллекции, Неопределено - Строки, в которых надо заполнить записи складского журнала и соответствующие
//   им реквизиты.
//
// Возвращаемое значение:
//  см. ЗаполнениеДокументовВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала
Функция ЗаполнитьЗаписиСкладскогоЖурнала(Объект, СписокСтрок = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ЗаполнениеДокументовВЕТИС.ПараметрыЗаполненияЗаписейСкладскогоЖурнала();
	ПараметрыЗаполнения.ПодбиратьЗаписиСИстекшимСрокомГодности = Ложь;
	
	РезультатЗаполнения = ЗаполнениеДокументовВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(
		Объект.Товары,
		Объект.ГрузоотправительХозяйствующийСубъект,
		Объект.ГрузоотправительПредприятие,
		СписокСтрок,
		ПараметрыЗаполнения);
	
	ЗаполнитьЦелиВЕТИС(
		?(СписокСтрок = Неопределено, Объект.Товары, СписокСтрок),
		Объект.ГрузополучательХозяйствующийСубъект);
	
	ЗаполнитьЗависящиеОтЗаписейСкладскогоЖурналаРеквизиты(?(СписокСтрок = Неопределено, Объект.Товары, СписокСтрок));
	
	Возврат РезультатЗаполнения;
	
КонецФункции

// Заполняет реквизит Цель в табличной части документа на основании доступных целей и статистики грузополучателя
//
// Параметры:
//   ДанныеКЗаполнению - ДанныеФормыЭлементКоллекции, ДанныеФормыКоллекция, ТабличнаяЧасть - заполняемая строки или строки
//   ГрузополучательХозяйствующийСубъект - СправочникСсылка.ХозяйствующиеСубъектыВЕТИС - грузополучатель
//
Процедура ЗаполнитьЦелиВЕТИС(ДанныеКЗаполнению, ГрузополучательХозяйствующийСубъект) Экспорт
	
	КешированныеЗначения = Новый ДеревоЗначений;
	
	Если ТипЗнч(ДанныеКЗаполнению) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Итератор = Новый Массив;
		Итератор.Добавить(ДанныеКЗаполнению);
	Иначе
		Итератор = ДанныеКЗаполнению;
	КонецЕсли;
	
	ЗаписиЖурнала = Новый Массив;
	Для Каждого СтрокаДляЗаполнения Из Итератор Цикл
		Если ЗначениеЗаполнено(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала) Тогда
			Если ЗаписиЖурнала.Найти(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала) = Неопределено Тогда
				ЗаписиЖурнала.Добавить(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписиЖурнала.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросЦелиПоВСД = Новый Запрос;
	ЗапросЦелиПоВСД.УстановитьПараметр("Ссылка", ЗаписиЖурнала);
	ЗапросЦелиПоВСД.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВСДЗаписейЖурналаВЕТИС.ВетеринарноСопроводительныйДокумент.Цель КАК Цель,
	|	ВСДЗаписейЖурналаВЕТИС.Ссылка                                   КАК Ссылка
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК ВСДЗаписейЖурналаВЕТИС
	|ГДЕ
	|	ВСДЗаписейЖурналаВЕТИС.Ссылка В (&Ссылка)";
	
	ЦелиПоВСД = ЗапросЦелиПоВСД.Выполнить().Выгрузить();
	ЦелиПоВСД.Индексы.Добавить("Ссылка");
	ЦелиПоВСД.Индексы.Добавить("Ссылка, Цель");
	
	Для Каждого СтрокаДляЗаполнения Из Итератор Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала) Тогда
			Продолжить;
		КонецЕсли;
		
		Продукция = СтрокаДляЗаполнения.Продукция;
		
		ДопустимыеЦелиСтроки = ДопустимыеЦелиВЕТИС.ДопустимыеЦелиПоПродукции(
			Продукция,
			КешированныеЗначения,
			СтрокаДляЗаполнения.НизкокачественнаяПродукция);
		
		ЦелиСтроки = ЗаполнениеОбъектовПоСтатистикеВЕТИС.ЦелиПоПродукцииИПолучателю(
			СтрокаДляЗаполнения.Продукция,
			СтрокаДляЗаполнения.НизкокачественнаяПродукция,
			ГрузополучательХозяйствующийСубъект,
			КешированныеЗначения);
		
		//1. В любом случае не должно остаться неправильных целей.
		Если ЗначениеЗаполнено(СтрокаДляЗаполнения.Цель) 
			И ДопустимыеЦелиСтроки.Найти(СтрокаДляЗаполнения.Цель) = Неопределено Тогда
			СтрокаДляЗаполнения.Цель = Справочники.ЦелиВЕТИС.ПустаяСсылка();
		КонецЕсли;
		
		//2. Отгрузка с единственной целью. Берем ее.
		Если ЦелиСтроки.Количество() = 1 Тогда
			СтрокаДляЗаполнения.Цель = ЦелиСтроки[0];
			Продолжить;
		КонецЕсли;
		
		//3. Единственная доступная цель во входящих ВСД. Берем ее.
		ЦелиВСД = ЦелиПоВСД.НайтиСтроки(Новый Структура("Ссылка", СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала));
		Цель = Неопределено;
		Для Каждого СтрокаЦелиВСД Из ЦелиВСД Цикл
			Если ДопустимыеЦелиСтроки.Найти(СтрокаЦелиВСД.Цель)<> Неопределено Тогда
				Цель = ?(Цель = Неопределено, СтрокаЦелиВСД.Цель, Справочники.ЦелиВЕТИС.ПустаяСсылка());
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Цель) Тогда
			СтрокаДляЗаполнения.Цель = Цель;
			Продолжить;
		КонецЕсли;
		
		//4. Во входящих ВСД нет доступных целей. Берем частотную.
		Если Цель = Неопределено И ЦелиСтроки.Количество() Тогда
			СтрокаДляЗаполнения.Цель = ЦелиСтроки[0];
			Продолжить;
		КонецЕсли;
		
		//5. Берем частотную из доступных целей входящих ВСД.
		Поиск = Новый Структура("Ссылка, Цель", СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала);
		Для Каждого Цель Из ЦелиСтроки Цикл
			Поиск.Цель = Цель;
			Если ЦелиПоВСД.НайтиСтроки(Поиск).Количество() Тогда
				СтрокаДляЗаполнения.Цель = Цель;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть УпаковкиВЕТИС документа упаковками продукции, по данным записи складского журнала
//  * Если заполнена запись складского журнала - упаковками из записи журнала (пропорционально остатку).
//
// Параметры:
//   Объект - ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС - заполняемый документ
//   СписокСтрок - Массив Из ДанныеФормыЭлементКоллекции - строки табличной части "Товары", для которых требуется заполнение
//               - Неопределено - заполняется весь документ
//
Процедура ЗаполнитьПотребительскиеУпаковки(Объект, СписокСтрок = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Объект.Товары.Выгрузить(СписокСтрок));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Таблица.КоличествоВЕТИС КАК КоличествоВЕТИС,
	|	ВЫРАЗИТЬ(Таблица.Продукция КАК Справочник.ПродукцияВЕТИС) КАК Продукция,
	|	ВЫРАЗИТЬ(Таблица.ЕдиницаИзмеренияВЕТИС КАК Справочник.ЕдиницыИзмеренияВЕТИС) КАК ЕдиницаИзмеренияВЕТИС,
	|	ВЫРАЗИТЬ(Таблица.ЗаписьСкладскогоЖурнала КАК Справочник.ЗаписиСкладскогоЖурналаВЕТИС) КАК ЗаписьСкладскогоЖурнала
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|// 1 - фасовка карточки продукции есть в записи журнала, берем только ее
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтрокиТовары,
	|	Товары.КоличествоВЕТИС КАК КоличествоСтрокиТовары,
	|	Товары.Продукция.ФасовкаУпаковка КАК УпаковкаВЕТИС,
	|	УпаковкиЗаписиЖурнала.УровеньУпаковки КАК УровеньУпаковки,
	|	ЕСТЬNULL(Товары.Продукция.ФасовкаЕдиницаИзмерения.Коэффициент,0) КАК КоэффициентЕдиницыУпаковки,
	|	Товары.Продукция.ФасовкаКоличествоЕдиницВУпаковке КАК КратностьУпаковки,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Коэффициент КАК КоэффициентЕдиницыДокумента,
	|	1 КАК Приоритет
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС КАК УпаковкиЗаписиЖурнала
	|		ПО УпаковкиЗаписиЖурнала.Ссылка = Товары.ЗаписьСкладскогоЖурнала
	|		И УпаковкиЗаписиЖурнала.УпаковкаВЕТИС = Товары.Продукция.ФасовкаУпаковка
	|ГДЕ
	|	Товары.Продукция <> ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|	И Товары.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И Товары.Продукция.ФасовкаУпаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиВЕТИС.ПустаяСсылка)
	|	И Товары.ЕдиницаИзмеренияВЕТИС <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка)
	|	И Товары.Продукция.ФасовкаКоличествоЕдиницВУпаковке <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 2 - берем все упаковки записи журнала пропорционально упаковки из записи журнала
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.КоличествоВЕТИС,
	|	УпаковкиЗаписиЖурнала.УпаковкаВЕТИС,
	|	УпаковкиЗаписиЖурнала.УровеньУпаковки,
	|	УпаковкиЗаписиЖурнала.Ссылка.ЕдиницаИзмеренияВЕТИС.Коэффициент,
	|	ВЫБОР 
	|		КОГДА УпаковкиЗаписиЖурнала.КоличествоУпаковокВЕТИС = 0 ТОГДА -1
	|		ИНАЧЕ УпаковкиЗаписиЖурнала.Ссылка.КоличествоВЕТИС / УпаковкиЗаписиЖурнала.КоличествоУпаковокВЕТИС
	|	КОНЕЦ,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Коэффициент,
	|	2
	|ИЗ
	|	Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС КАК УпаковкиЗаписиЖурнала
	|		ПО УпаковкиЗаписиЖурнала.Ссылка = Товары.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	Товары.Продукция <> ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|	И Товары.ЕдиницаИзмеренияВЕТИС <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка)
	|	И Товары.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// 3 - берем упаковку из карточки продукции, считаем что там торговый уровень
	|ВЫБРАТЬ
	|	Товары.ИдентификаторСтроки,
	|	Товары.КоличествоВЕТИС,
	|	Товары.Продукция.ФасовкаУпаковка,
	|	ЗНАЧЕНИЕ(Перечисление.УровниУпаковокВЕТИС.ТорговыйУровень),
	|	ЕСТЬNULL(Товары.Продукция.ФасовкаЕдиницаИзмерения.Коэффициент,0),
	|	Товары.Продукция.ФасовкаКоличествоЕдиницВУпаковке,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Коэффициент,
	|	3
	|ИЗ
	|	Товары КАК Товары
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.УпаковкиВЕТИС КАК УпаковкиЗаписиЖурнала
	|		ПО УпаковкиЗаписиЖурнала.Ссылка = Товары.ЗаписьСкладскогоЖурнала
	|ГДЕ
	|	Товары.Продукция <> ЗНАЧЕНИЕ(Справочник.ПродукцияВЕТИС.ПустаяСсылка)
	|	И Товары.ЗаписьСкладскогоЖурнала <> ЗНАЧЕНИЕ(Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ПустаяСсылка)
	|	И Товары.Продукция.ФасовкаУпаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиВЕТИС.ПустаяСсылка)
	|	И Товары.ЕдиницаИзмеренияВЕТИС <> ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмеренияВЕТИС.ПустаяСсылка)
	|	И Товары.Продукция.ФасовкаКоличествоЕдиницВУпаковке <> 0
	|	И УпаковкиЗаписиЖурнала.Ссылка ЕСТЬ NULL
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтрокиТовары,
	|	Приоритет
	|ИТОГИ ПО
	|	ИдентификаторСтрокиТовары";
	
	Если СписокСтрок = Неопределено Тогда
		Объект.УпаковкиВЕТИС.Очистить();
	КонецЕсли;
	СтрокаТовары = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока СтрокаТовары.Следующий() Цикл
		Если СписокСтрок <> Неопределено Тогда
			УпаковкиСтрокиСтарые = Объект.УпаковкиВЕТИС.НайтиСтроки(
				Новый Структура("ИдентификаторСтрокиТовары", СтрокаТовары.ИдентификаторСтрокиТовары));
			Для Каждого ЭлементМассива Из УпаковкиСтрокиСтарые Цикл
				Объект.УпаковкиВЕТИС.Удалить(ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
		
		Выборка = СтрокаТовары.Выбрать();
		ТекущийПриоритет = 0;
		
		Пока Выборка.Следующий() Цикл
		
			Упаковка = Объект.УпаковкиВЕТИС.Добавить();
			ЗаполнитьЗначенияСвойств(Упаковка, Выборка);
			Упаковка.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			Упаковка.КоличествоУпаковокВЕТИС = Выборка.КоличествоСтрокиТовары
				/ Выборка.КратностьУпаковки
				* ?(Выборка.КоэффициентЕдиницыДокумента = 0, 1, Выборка.КоэффициентЕдиницыДокумента)
				/ ?(Выборка.КоэффициентЕдиницыУпаковки = 0, 1, Выборка.КоэффициентЕдиницыУпаковки);
			Если Упаковка.КоличествоУпаковокВЕТИС = 0 Тогда
				Упаковка.КоличествоУпаковокВЕТИС = 1;
			КонецЕсли;
			
			Если ТекущийПриоритет = 0 Тогда
				ТекущийПриоритет = Выборка.Приоритет;
			ИначеЕсли ТекущийПриоритет <> Выборка.Приоритет Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - Имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ТипДокумента = ТипДокумента();
	ИменаРеквизитов = ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ТипДокумента);
	Возврат ИменаРеквизитов;
	
КонецФункции


// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - Структура - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  см. ИнтеграцияИС.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ТипДокумента = ТипДокумента();
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(ТипДокумента, Объект);
	Возврат ПараметрыУказанияСерий;
	
КонецФункции


// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - см. ИнтеграцияИС.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//   Строка - Текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТипДокумента = ТипДокумента();
	ТекстЗапроса = ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипДокумента, ПараметрыУказанияСерий);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

//@skip-check module-accessibility-at-client
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СообщенияВЕТИС

#Область РегионализацияВЕТИС

Функция ЗапросПроверкиВозможностиПеревозкиВРамкахРегионализацииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	Операция              = Перечисления.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1); 
	ПространствоИмен      = ПараметрыЗапросаВЕТИС.ПространствоИмен;
	ИмяТипа               = ПараметрыЗапросаВЕТИС.ТипВЕТИС;
	ФорматОбмена          = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	ТипСообщения          = ПараметрыЗапросаВЕТИС.ТипСообщения;
	
	СписокЗапросов = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВЕТИС.ЗапросВозможностиПеревозкиПартииВРамкахРегионализации)
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)";
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Шапка.Дата                         КАК Дата,
	|	Шапка.Идентификатор                КАК Идентификатор,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	|
	|	Шапка.ГрузоотправительХозяйствующийСубъект                               КАК ХозяйствующийСубъект,
	|	ЕСТЬNULL(Шапка.ГрузоотправительХозяйствующийСубъект.Идентификатор, """") КАК ХозяйствующийСубъектИдентификатор,
	|	Шапка.ГрузоотправительПредприятие                                        КАК Предприятие,
	|	ЕСТЬNULL(Шапка.ГрузоотправительПредприятие.Идентификатор, """")          КАК Предприятие_Идентификатор,
	|	ЕСТЬNULL(Шапка.ГрузоотправительПредприятие.Наименование, """")           КАК ПредприятиеНаименование
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО (Истина)
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(Товары.Продукция.ВидПродукции.Идентификатор, """") КАК ВидПродукцииИдентификатор
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	СписокЗапросов.Добавить(ТекстЗапроса, "Товары");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Маршрут.НомерСтроки                               КАК НомерСтроки,
	|	Маршрут.Предприятие                               КАК Предприятие,
	|	ЕСТЬNULL(Маршрут.Предприятие.Идентификатор, """") КАК ПредприятиеИдентификатор,
	|	Маршрут.АдресПредставление                        КАК АдресПредставление,
	|	Маршрут.ДанныеАдреса                              КАК ДанныеАдреса,
	|	ЛОЖЬ                                              КАК СтрокаШапки
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК Маршрут
	|ГДЕ
	|	Маршрут.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&МаксимальныйНомерСтроки                                       КАК НомерСтроки,
	|	Шапка.ГрузополучательПредприятие                               КАК Предприятие,
	|	ЕСТЬNULL(Шапка.ГрузополучательПредприятие.Идентификатор, """") КАК ПредприятиеИдентификатор,
	|	Шапка.ГрузополучательПредприятие.АдресПредставление            КАК АдресПредставление,
	|	Шапка.ГрузополучательПредприятие.ДанныеАдреса                  КАК ДанныеАдреса,
	|	ИСТИНА                                                         КАК СтрокаШапки
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК Шапка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокаШапки,
	|	Маршрут.НомерСтроки";
	СписокЗапросов.Добавить(ТекстЗапроса, "Маршруты");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                  ДокументСсылка);
	Запрос.УстановитьПараметр("МаксимальныйНомерСтроки", 9999);
	
	Результат = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	Шапка    = Результат.Шапка.Выбрать();
	Товары   = Результат.Товары.Выбрать();
	Маршруты = Результат.Маршруты.Выбрать();
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка);
	
	Если Товары.Количество() = 0 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнена табличная часть ""Товары""'");
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
		СообщенияXML.Добавить(СообщениеXML);
		
		Возврат СообщенияXML;
		
	ИначеЕсли Маршруты.Количество() = 1 Тогда
		
		ТекстОшибки = НСтр("ru = 'Не заполнена табличная часть ""Маршрут""'");
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
		СообщенияXML.Добавить(СообщениеXML);
		
		Возврат СообщенияXML;
		
	ИначеЕсли Не Шапка.Следующий() Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("НастройкаОбмена") Тогда
		НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	Иначе
		НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ХозяйствующийСубъект);
		НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(
			СообщенияXML, СообщениеXML,
			Шапка.ХозяйствующийСубъект,
			НастройкиОбменаВЕТИС);
	КонецЕсли;
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	#Область ОприходованиеПродукцииВЕТИС
	
	ХранилищеВременныхДат = Новый Соответствие;
	
	ДокументXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяТипа);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
	
	ДокументXDTO.initiator = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO.initiator, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	Пока Товары.Следующий() Цикл
		
		CargoType = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "cargoType");
		CargoType.guid = Товары.ВидПродукцииИдентификатор;
		
		ДокументXDTO.cargoType.Добавить(CargoType);
		
	КонецЦикла;
	
	ДокументXDTO.shipmentRoute = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "shipmentRoute");
	
	Пока Маршруты.Следующий() Цикл
		
		RoutePoint = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ДокументXDTO.shipmentRoute, "routePoint");
		RoutePoint.sqnId = Маршруты.НомерСтроки;
		
		Если ЗначениеЗаполнено(Маршруты.ПредприятиеИдентификатор) Тогда
			RoutePoint.enterprise = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(routePoint, "enterprise");
			RoutePoint.enterprise.guid = Маршруты.ПредприятиеИдентификатор;
		Иначе
			АдресПунктаПерегрузки = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(RoutePoint, "location");
			ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(АдресПунктаПерегрузки, "name", Маршруты.АдресПредставление, СообщениеXML);
			ДанныеАдреса = Маршруты.ДанныеАдреса.Получить();
			Если ДанныеАдреса = Неопределено Тогда
				ТекстОшибки = НСтр("ru = 'В строке №%1 табличной части ""Маршрут"" не заполнены данные адреса. Перевыберите адрес из классификатора'");
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, Маршруты.НомерСтроки);
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, ТекстОшибки);
				СообщенияXML.Добавить(СообщениеXML);
				Возврат СообщенияXML;
			Иначе
				ИнтеграцияВЕТИС.УстановитьАдрес(АдресПунктаПерегрузки, ДанныеАдреса);
			КонецЕсли;
		КонецЕсли; 
		
		ДокументXDTO.shipmentRoute.routePoint.Добавить(RoutePoint);
		
	КонецЦикла;
	
	ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ХранилищеВременныхДат, ТекстСообщенияXML);
	
	#КонецОбласти
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = Шапка.ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Шапка.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = ДокументСсылка;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ФорматОбмена;
	СообщениеXML.Версия               = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Возвращает структуру параметров для расчета статуса документа по данным самого документа.
//
// Параметры:
// 	Документ - ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС - Ссылка на документ.
// 	         - ДокументОбъект.ИсходящаяТранспортнаяОперацияВЕТИС - ДокументОбъект.
//
// Возвращаемое значение:
// 	Структура - Структура со свойствами:
// 	 * ПроверятьНаРегионализацию - Булево.
// 	 * ЕстьНеПроверенныеСтроки   - Булево.
// 	 * ПеремещениеЗапрещено      - Булево.
// 	 * ПеремещениеРазрешеноПриВыполненииУсловий - Булево.
// 	 * ПеремещениеРазрешено      - Булево.
// 	 * УсловияВыполнены          - Булево.
//
Функция ПараметрыДляРасчетаСтатусаПоДаннымДокумента(Документ) Экспорт
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("ПроверятьНаРегионализацию",                Ложь);
	ДанныеДокумента.Вставить("ЕстьНеПроверенныеСтроки",                  Ложь);
	ДанныеДокумента.Вставить("ПеремещениеЗапрещено",                     Ложь);
	ДанныеДокумента.Вставить("ПеремещениеРазрешеноПриВыполненииУсловий", Ложь);
	ДанныеДокумента.Вставить("ПеремещениеРазрешено",                     Ложь);
	ДанныеДокумента.Вставить("УсловияВыполнены",                         Истина);
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ИсходящаяТранспортнаяОперацияВЕТИС") Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", Документ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	МАКСИМУМ(ВложенныйЗапрос.ЕстьПеревозкаТоваров) КАК ЕстьПеревозкаТоваров,
		|	МАКСИМУМ(ВложенныйЗапрос.ЕстьНеПроверенныеСтроки) КАК ЕстьНеПроверенныеСтроки,
		|	МАКСИМУМ(ВложенныйЗапрос.ПеремещениеРазрешено) КАК ПеремещениеРазрешено,
		|	МАКСИМУМ(ВложенныйЗапрос.ПеремещениеРазрешеноПриВыполненииУсловий) КАК ПеремещениеРазрешеноСУсловиями,
		|	МАКСИМУМ(ВложенныйЗапрос.ПеремещениеЗапрещено) КАК ПеремещениеЗапрещено,
		|	МИНИМУМ(ВложенныйЗапрос.УсловияВыполнены) КАК УсловияВыполнены
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ЕстьНеПроверенныеСтроки,
		|		ВЫБОР
		|			КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПеремещениеЗапрещено,
		|		ВЫБОР
		|			КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПеремещениеРазрешеноПриВыполненииУсловий,
		|		ВЫБОР
		|			КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК ПеремещениеРазрешено,
		|		ВЫБОР
		|			КОГДА Товары.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|					И Товары.УсловияРегионализацииВыполнены
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ КАК УсловияВыполнены,
		|		ЛОЖЬ КАК ЕстьПеревозкаТоваров
		|	ИЗ
		|		Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК Товары
		|	ГДЕ
		|		Товары.Ссылка = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА Маршрут.РезультатПроверкиПравилРегионализации = ЗНАЧЕНИЕ(Перечисление.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий)
		|					И Маршрут.УсловияРегионализацииВыполнены
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ,
		|		ЛОЖЬ
		|	ИЗ
		|		Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК Маршрут
		|	ГДЕ
		|		Маршрут.Ссылка = &ДокументСсылка
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		Шапка.ГрузоотправительПредприятие <> Шапка.ГрузополучательПредприятие
		|	ИЗ
		|		Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК Шапка
		|	ГДЕ
		|		Шапка.Ссылка = &ДокументСсылка) КАК ВложенныйЗапрос";
		
		ЕстьПеревозкаТоваров = Ложь;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
			ЕстьПеревозкаТоваров = Выборка.ЕстьПеревозкаТоваров;
		КонецЕсли;
		
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Маршрут.Предприятие КАК Предприятие,
		|	Маршрут.ДанныеАдреса КАК ДанныеАдреса
		|ИЗ
		|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК Маршрут
		|ГДЕ
		|	Маршрут.Ссылка = &ДокументСсылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Шапка.ГрузополучательПредприятие,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК Шапка
		|ГДЕ
		|	Шапка.Ссылка = &ДокументСсылка";
		
		ЕстьПеремещениеМеждуРегионами = Ложь;
		МассивМаршрута = Новый Массив;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеАдреса = Новый Структура;
			ДанныеАдреса.Вставить("Предприятие",  Выборка.Предприятие);
			ДанныеАдреса.Вставить("ДанныеАдреса", ?(Выборка.ДанныеАдреса = Неопределено, Неопределено, Выборка.ДанныеАдреса.Получить()));
			МассивМаршрута.Добавить(ДанныеАдреса);
		КонецЦикла;
		ЕстьПеремещениеМеждуРегионами = РегионализацияВЕТИС.ЕстьПеремещениеМеждуРегионами(МассивМаршрута);
		
		ДанныеДокумента.ПроверятьНаРегионализацию = ЕстьПеремещениеМеждуРегионами;
	Иначе
		// Заполнение по ДокументОбъект
		ЕстьПеревозкаТоваров = Документ.ГрузоотправительПредприятие <> Документ.ГрузополучательПредприятие;
		
		ИменаТабличныхЧастей = Новый Массив;
		ИменаТабличныхЧастей.Добавить("Товары");
		ИменаТабличныхЧастей.Добавить("Маршрут");
		
		Для каждого ИмяТабличнойЧасти Из ИменаТабличныхЧастей Цикл
			Для каждого СтрокаТабличнойЧасти из Документ[ИмяТабличнойЧасти] Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации) Тогда
					ДанныеДокумента.ЕстьНеПроверенныеСтроки = Истина;
				ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено Тогда
					ДанныеДокумента.ПеремещениеЗапрещено = Истина;
				ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
					ДанныеДокумента.ПеремещениеРазрешеноПриВыполненииУсловий = Истина;
					Если НЕ СтрокаТабличнойЧасти.УсловияРегионализацииВыполнены Тогда
						ДанныеДокумента.УсловияВыполнены = Ложь;
					КонецЕсли;
				ИначеЕсли СтрокаТабличнойЧасти.РезультатПроверкиПравилРегионализации = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено Тогда
					ДанныеДокумента.ПеремещениеРазрешено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ЕстьПеремещениеМеждуРегионами = Ложь;
		Если ЕстьПеревозкаТоваров Тогда
			МассивМаршрута = Новый Массив;
			Для каждого СтрокаТабличнойЧасти Из Документ.Маршрут Цикл
				ДанныеАдреса = Новый Структура;
				ДанныеАдреса.Вставить("Предприятие",  СтрокаТабличнойЧасти.Предприятие);
				ДанныеАдреса.Вставить("ДанныеАдреса", СтрокаТабличнойЧасти.ДанныеАдреса.Получить());
				МассивМаршрута.Добавить(ДанныеАдреса);
			КонецЦикла;
			
			ДанныеАдреса = Новый Структура;
			ДанныеАдреса.Вставить("Предприятие",  Документ.ГрузополучательПредприятие);
			ДанныеАдреса.Вставить("ДанныеАдреса", Неопределено);
			МассивМаршрута.Добавить(ДанныеАдреса);
			
			ЕстьПеремещениеМеждуРегионами = РегионализацияВЕТИС.ЕстьПеремещениеМеждуРегионами(МассивМаршрута);
		КонецЕсли;
		
		ДанныеДокумента.ПроверятьНаРегионализацию = ЕстьПеремещениеМеждуРегионами;
	КонецЕсли;
	
	Возврат ДанныеДокумента;
КонецФункции

Функция ПараметрыОбновленияСтатусаРегионализации(ДокументСсылка, Операция, ДополнительныеПараметры)
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
	
	СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
	
	Если НЕ ДополнительныеПараметры = Неопределено
	   И НЕ ДополнительныеПараметры.ДокументОбъект = Неопределено Тогда
		
		ДокументОбъект = ДополнительныеПараметры.ДокументОбъект;
		
		ДанныеДокумента = ПараметрыДляРасчетаСтатусаПоДаннымДокумента(ДокументОбъект);
		
	Иначе
		
		ДанныеДокумента = ПараметрыДляРасчетаСтатусаПоДаннымДокумента(ДокументСсылка);
		
	КонецЕсли;
	
	СтатусИДальнейшиеДейстия = СтатусИДальнейшиеДейстияВозможностиПеремещения(ДанныеДокумента);
	СтатусыБазовыйПроцесс.Принят = СтатусИДальнейшиеДейстия.Статус;
	Для каждого ДальнейшееДействие Из СтатусИДальнейшиеДейстия.ДальнейшиеДействия Цикл
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(ДальнейшееДействие);
	КонецЦикла;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			СтатусИДальнейшиеДейстия.Статус,
			СтатусИДальнейшиеДейстия.ДальнейшиеДействия);
	Иначе
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			СтатусыБазовыйПроцесс);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

Функция СтатусИДальнейшиеДейстияВозможностиПеремещения(ДанныеДокумента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Статус", Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ПустаяСсылка());
	Результат.Вставить("ДальнейшиеДействия", Новый Массив);
	
	Если ДанныеДокумента.ПроверятьНаРегионализацию Тогда
		
		Если ДанныеДокумента.ЕстьНеПроверенныеСтроки Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
			
		ИначеЕсли ДанныеДокумента.ПеремещениеЗапрещено Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеЗапрещено;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
			
		ИначеЕсли ДанныеДокумента.ПеремещениеРазрешеноПриВыполненииУсловий Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешеноСУсловиями;
			
			Если ДанныеДокумента.УсловияВыполнены Тогда
				Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
			Иначе
				Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеУсловияПеремещения);
				Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ИзменитеПродукциюИлиМаршрут);
			КонецЕсли;
			
		ИначеЕсли ДанныеДокумента.ПеремещениеРазрешено Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешено;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
			
		Иначе
			
			// Нет строк в табличных частях
			Результат.Статус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик;
			Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеВозможностьПеремещения);
			
		КонецЕсли;
		
	Иначе
		
		Результат.Статус = Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик;
		Результат.ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.Оформите);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

// Операция предназначена для оформления транспортной партии.
//  На вход системы передаются следующие сведения:
//  - информация об одной или нескольких партиях продукции, из которых будет сформирована транспортная партия;
//  - сведения о получателе транспортной партии;
//  - сведения о транспортном средстве и маршруте его следования;
//  - дополнительные сведения необходимые для оформления ВСД, например, результат ветеринарно-санитарной экспертизы, сведения о ТТН, особые отметки и т.д.
//  
//  Результатом выполнения данной операции является:
//  - списание объема с одной или нескольких записей журнала продукции, которые были указаны в заявке;
//  - гашение производственной сертификата, если был указан весь объем по данной записи журнала вырабатываемой продукции;
//  - для каждого наименования продукции указанного в транспортной партии, система Меркурий формирует ветеринарно-сопроводительный документ (ВСД).
//
Функция ЗапросНаОформлениеТранспортнойПартииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)

	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеТранспортнойПартии;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	
	ДанныеДокумента = ДанныеИсходящейПартии(ДокументСсылка, Операция);
	Шапка = ДанныеДокумента.Шапка[0];
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	Если ДанныеДокумента.Шапка.Количество() = 0 Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("НастройкаОбмена") Тогда
		НастройкаОбмена = ДополнительныеПараметры.НастройкаОбмена;
	Иначе
		НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ГрузоотправительХозяйствующийСубъект);
		НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ГрузоотправительХозяйствующийСубъект);
	КонецЕсли;
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(
			СообщенияXML, СообщениеXML,
			Шапка.ГрузоотправительХозяйствующийСубъект,
			НастройкиОбменаВЕТИС);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("СтраныМира",            ПрочиеКлассификаторыВЕТИСВызовСервера.СтраныМира());
	ВспомогательныеДанные.Вставить("Упаковки",              ДанныеДокумента.Упаковки);
	ВспомогательныеДанные.Вставить("ШтрихкодыУпаковок",     ДанныеДокумента.ШтрихкодыУпаковок);
	ВспомогательныеДанные.Вставить("Регионализация",        ДанныеДокумента.Регионализация);
	ВспомогательныеДанные.Вставить("СвязанныеДокументы",    ДанныеДокумента.СвязанныеДокументы);
	ВспомогательныеДанные.Вставить("ХранилищеВременныхДат", Новый Соответствие);
	ВспомогательныеДанные.Вставить("СведенияОНаименованииОпциональны");
	
		
		СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
		СообщениеXML.Операция = Операция;
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
		
		ДокументXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, ПараметрыЗапросаВЕТИС.ТипВЕТИС);
		
		#Область ФормированиеСообщения
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
		
		// Пользователь, зарегистрированный в системе Меркурий, инициирующий запрос к шлюзу.
		ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПользовательВЕТИС, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
		
		// Сведения о партии продукции.
		СведенияОПоставке = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "delivery");
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Грузоотправитель", "Грузоотправитель");
		ДопПараметры.Вставить("Грузополучатель",  "Грузополучатель");
		ДопПараметры.Вставить("ПолеКоличество",   "КоличествоВЕТИС");
		ДопПараметры.Вставить("Маршрут",          ДанныеДокумента.Маршрут);
		ДопПараметры.Вставить("Регионализация",   ДанныеДокумента.Регионализация);
		
		ОбменДаннымиВЕТИС.ЗаполнитьОбъект_DeliveryПакетом(
			ДанныеДокумента.Шапка[0],
			ДанныеДокумента.Товары,
			ВспомогательныеДанные,
			ДопПараметры,
			СведенияОПоставке,
			СообщениеXML);
		
		ДокументXDTO.delivery.Добавить(СведенияОПоставке);
		
		#КонецОбласти
		
		ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
		ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ВспомогательныеДанные.ХранилищеВременныхДат, ТекстСообщенияXML);
		
		СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
		СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
		СообщениеXML.ХозяйствующийСубъект = Шапка.ГрузоотправительХозяйствующийСубъект;
		СообщениеXML.Предприятие          = Шапка.ГрузоотправительПредприятие;
		СообщениеXML.Операция             = Операция;
		СообщениеXML.Документ             = ДокументСсылка;
		СообщениеXML.ДокументОснование    = Неопределено;
		СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
		СообщениеXML.Версия               = НомерВерсии;
		
		СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;

КонецФункции

Функция ДанныеИсходящейПартии(ДокументСсылка, Операция)
	
	СписокЗапросов = Новый СписокЗначений;
	
	#Область Версии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = &Операция
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	#КонецОбласти
	
	#Область Шапка
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Идентификатор КАК Идентификатор,
	
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0) КАК ПоследнийНомерВерсии,
	
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект.Идентификатор КАК ГрузоотправительХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ГрузоотправительХозяйствующийСубъект.ИдентификаторВерсии КАК ГрузоотправительХозяйствующийСубъект_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ДанныеДокумента.ГрузоотправительПредприятие.Идентификатор КАК ГрузоотправительПредприятие_Идентификатор,
	|	ДанныеДокумента.ГрузоотправительПредприятие.ИдентификаторВерсии КАК ГрузоотправительПредприятие_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузоотправительПредприятие.НаселенныйПунктИдентификатор КАК ГрузоотправительПредприятие_НаселенныйПунктИдентификатор,
	
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект КАК ГрузополучательХозяйствующийСубъект,
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект.Идентификатор КАК ГрузополучательХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ГрузополучательХозяйствующийСубъект.ИдентификаторВерсии КАК ГрузополучательХозяйствующийСубъект_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузополучательПредприятие КАК ГрузополучательПредприятие,
	|	ДанныеДокумента.ГрузополучательПредприятие.Идентификатор КАК ГрузополучательПредприятие_Идентификатор,
	|	ДанныеДокумента.ГрузополучательПредприятие.ИдентификаторВерсии КАК ГрузополучательПредприятие_ИдентификаторВерсии,
	|	ДанныеДокумента.ГрузополучательПредприятие.НаселенныйПунктИдентификатор КАК ГрузополучательПредприятие_НаселенныйПунктИдентификатор,
	
	|	ДанныеДокумента.ПеревозчикХозяйствующийСубъект КАК ПеревозчикХозяйствующийСубъект,
	|	ДанныеДокумента.ПеревозчикХозяйствующийСубъект.Идентификатор КАК ПеревозчикХозяйствующийСубъект_Идентификатор,
	|	ДанныеДокумента.ПеревозчикХозяйствующийСубъект.ИдентификаторВерсии КАК ПеревозчикХозяйствующийСубъект_ИдентификаторВерсии,
	
	|	ТаблицаМаршрут.ТипТранспорта КАК ТипТранспорта,
	|	ТаблицаМаршрут.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|	ТаблицаМаршрут.НомерАвтомобильногоПрицепа КАК НомерАвтомобильногоПрицепа,
	|	ТаблицаМаршрут.НомерАвтомобильногоКонтейнера КАК НомерАвтомобильногоКонтейнера,
	
	|	ДанныеДокумента.ТТНУказан КАК ТТНУказан,
	|	ДанныеДокумента.СерияТТН КАК СерияТТН,
	|	ДанныеДокумента.ДатаТТН КАК ДатаТТН,
	|	ДанныеДокумента.НомерТТН КАК НомерТТН,
	|	ДанныеДокумента.ТипТТН КАК ТипТТН,
	
	|	ДанныеДокумента.СпособХранения КАК СпособХранения
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК ТаблицаМаршрут
	|		ПО ТаблицаМаршрут.Ссылка = ДанныеДокумента.Ссылка
	|			И ТаблицаМаршрут.НомерСтроки = 1
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО (Истина)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	#КонецОбласти
	
	#Область ТоварыРазличные
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МИНИМУМ(ТаблицаДокумента.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ТоварыРазличные
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Продукция,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.Цель,
	|	ТаблицаДокумента.РезультатПроверкиПравилРегионализации,
	|	ТаблицаДокумента.УсловияРегионализацииВыполнены,
	|	ТаблицаДокумента.БлагополучиеМестности,
	|	ТаблицаДокумента.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС,
	|	ТаблицаДокумента.ПериодНахожденияЖивотныхНаТерриторииТС,
	|	ТаблицаДокумента.ХешСуммаОсобыеОтметки,
	|	ТаблицаДокумента.НизкокачественнаяПродукция,
	|	ТаблицаДокумента.ЭкспертизаРезультат,
	|	ТаблицаДокумента.ТипПроисхождения,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС.БазоваяЕдиницаИзмерения,
	|	ТаблицаДокумента.МестоДляКарантинирования,
	|	ТаблицаДокумента.КоличествоДнейДляКарантинирования";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ТоварыРазличные");
	
	#КонецОбласти
	
	#Область ВсеТовары
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтрокиДубль,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС
	|ПОМЕСТИТЬ ВсеТовары
	|ИЗ
	|	ТоварыРазличные КАК ТоварыРазличные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = &Ссылка)
	|			И (ТаблицаДокумента.НомерСтроки = ТоварыРазличные.НомерСтроки)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки,
	|	ТаблицаДокументаДубли.ИдентификаторСтроки,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС
	|ИЗ
	|	ТоварыРазличные КАК ТоварыРазличные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = &Ссылка)
	|			И (ТаблицаДокумента.НомерСтроки = ТоварыРазличные.НомерСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокументаДубли
	|		ПО (ТаблицаДокументаДубли.Ссылка = ТаблицаДокумента.Ссылка)
	|			И (ТаблицаДокументаДубли.НомерСтроки <> ТаблицаДокумента.НомерСтроки)
	|			И (ТаблицаДокументаДубли.Продукция = ТаблицаДокумента.Продукция)
	|			И (ТаблицаДокументаДубли.ЗаписьСкладскогоЖурнала = ТаблицаДокумента.ЗаписьСкладскогоЖурнала)
	|			И (ТаблицаДокументаДубли.Цель = ТаблицаДокумента.Цель)
	|			И (ТаблицаДокументаДубли.РезультатПроверкиПравилРегионализации = ТаблицаДокумента.РезультатПроверкиПравилРегионализации)
	|			И (ТаблицаДокументаДубли.УсловияРегионализацииВыполнены = ТаблицаДокумента.УсловияРегионализацииВыполнены)
	|			И (ТаблицаДокументаДубли.БлагополучиеМестности = ТаблицаДокумента.БлагополучиеМестности)
	|			И (ТаблицаДокументаДубли.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС = ТаблицаДокумента.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС)
	|			И (ТаблицаДокументаДубли.ПериодНахожденияЖивотныхНаТерриторииТС = ТаблицаДокумента.ПериодНахожденияЖивотныхНаТерриторииТС)
	|			И (ТаблицаДокументаДубли.ХешСуммаОсобыеОтметки = ТаблицаДокумента.ХешСуммаОсобыеОтметки)
	|			И (ТаблицаДокументаДубли.НизкокачественнаяПродукция = ТаблицаДокумента.НизкокачественнаяПродукция)
	|			И (ТаблицаДокументаДубли.ЭкспертизаРезультат = ТаблицаДокумента.ЭкспертизаРезультат)
	|			И (ТаблицаДокументаДубли.ТипПроисхождения = ТаблицаДокумента.ТипПроисхождения)
	|			И (ТаблицаДокументаДубли.ЕдиницаИзмеренияВЕТИС.БазоваяЕдиницаИзмерения = ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС.БазоваяЕдиницаИзмерения)
	|			И (ТаблицаДокументаДубли.МестоДляКарантинирования = ТаблицаДокумента.МестоДляКарантинирования)
	|			И (ТаблицаДокументаДубли.КоличествоДнейДляКарантинирования = ТаблицаДокумента.КоличествоДнейДляКарантинирования)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ВсеТовары");
	
	#КонецОбласти
	
	#Область ТоварыСгруппированные
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВсеТовары.НомерСтроки КАК НомерСтроки,
	|	ВсеТовары.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
	|	СУММА(ТаблицаДокумента.КоличествоВЕТИС * ВЫБОР
	|			КОГДА ВсеТовары.ЕдиницаИзмеренияВЕТИС <> ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС
	|					И ВЫРАЗИТЬ(ВсеТовары.ЕдиницаИзмеренияВЕТИС КАК Справочник.ЕдиницыИзмеренияВЕТИС).Коэффициент <> 0
	|				ТОГДА ВЫРАЗИТЬ(ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС КАК Справочник.ЕдиницыИзмеренияВЕТИС).Коэффициент / ВЫРАЗИТЬ(ВсеТовары.ЕдиницаИзмеренияВЕТИС КАК Справочник.ЕдиницыИзмеренияВЕТИС).Коэффициент
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоВЕТИС
	|ПОМЕСТИТЬ ТоварыСгруппированные
	|ИЗ
	|	ВсеТовары КАК ВсеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = &Ссылка)
	|			И (ТаблицаДокумента.ИдентификаторСтроки = ВсеТовары.ИдентификаторСтрокиДубль)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеТовары.НомерСтроки,
	|	ВсеТовары.ЕдиницаИзмеренияВЕТИС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ТоварыСгруппированные");
	
	#КонецОбласти
		
	#Область Товары
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки         КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Идентификатор КАК ЗаписьСкладскогоЖурнала_Идентификатор,
	|	
	|	ТаблицаДокумента.ЭкспертизаРезультат <> ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ) КАК ВСД_ЭкспертизаВыполнена,
	|	ТаблицаДокумента.ЭкспертизаРезультат   КАК ВСД_ЭкспертизаРезультат,
	|	ТаблицаДокумента.БлагополучиеМестности КАК ВСД_БлагополучиеМестности,
	|	ТаблицаДокумента.Цель.Идентификатор    КАК ВСД_Цель_Идентификатор,
	|	
	|	ТаблицаДокумента.ВетеринарноСопроводительныйДокумент КАК ВСД,
	|	NULL КАК ВСД_Идентификатор,
	|	NULL КАК ВСД_СерияБланкаСтрогойОтчетности,
	|	NULL КАК ВСД_НомерБланкаСтрогойОтчетности,
	|	NULL КАК ВСД_Дата,
	|	NULL КАК ВСД_Форма,
	|	NULL КАК ВСД_Тип,
	|	
	|	ТаблицаДокумента.ПериодНахожденияЖивотныхНаТерриторииТС             КАК ВСД_ПериодНахожденияЖивотныхНаТерриторииТС,
	|	ТаблицаДокумента.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС КАК ВСД_КоличествоПериодовНахожденияЖивотныхНаТерриторииТС,
	|	ТаблицаДокумента.МестоДляКарантинирования                           КАК ВСД_МестоДляКарантинирования,
	|	ТаблицаДокумента.КоличествоДнейДляКарантинирования                  КАК ВСД_КоличествоДнейДляКарантинирования,
	|	ТаблицаДокумента.ОсобыеОтметки                                      КАК ВСД_ОсобыеОтметки,
	|	
	|	NULL КАК ВСД_ГрузоотправительХозяйствующийСубъект_Идентификатор,
	|	NULL КАК ВСД_ГрузоотправительПредприятие_Идентификатор,
	|	NULL КАК ВСД_ГрузополучательХозяйствующийСубъект_Идентификатор,
	|	NULL КАК ВСД_ГрузополучательПредприятие_Идентификатор,
	|	NULL КАК ВСД_ПеревозчикХозяйствующийСубъект_Идентификатор,
	|	
	|	ТаблицаДокумента.Продукция <> ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Продукция КАК ПродукцияОтличается,
	|	
	|	ТаблицаДокумента.Продукция.ТипПродукции               КАК ТипПродукции,
	|	ТаблицаДокумента.Продукция.Продукция.Идентификатор    КАК ПродукцияПродукция_Идентификатор,
	|	ТаблицаДокумента.Продукция.Продукция.Наименование     КАК ПродукцияПродукция_Наименование,
	|	
	|	ТаблицаДокумента.Продукция.ВидПродукции               КАК ВидПродукции,
	|	ТаблицаДокумента.Продукция.ВидПродукции.Идентификатор КАК ВидПродукции_Идентификатор,
	|	ТаблицаДокумента.Продукция.ВидПродукции.Наименование  КАК ВидПродукции_Наименование,
	|	
	|	ТаблицаДокумента.Продукция                            КАК Продукция,
	|	ТаблицаДокумента.Продукция.Идентификатор              КАК Продукция_Идентификатор,
	|	
	|	ВЫБОР КОГДА ТаблицаДокумента.Продукция.ПолноеНаименование = """" ТОГДА
	|		ТаблицаДокумента.Продукция.Наименование
	|	ИНАЧЕ
	|		ТаблицаДокумента.Продукция.ПолноеНаименование
	|	КОНЕЦ КАК Продукция_Наименование,
	|	
	|	// Для работы с произвольной продукцией
	|	ТаблицаДокумента.Продукция.GTIN                                  КАК Продукция_GTIN,
	|	ТаблицаДокумента.Продукция.Артикул                               КАК Продукция_Артикул,
	|	
	|	ТаблицаДокумента.Продукция.ФасовкаУпаковка                       КАК Продукция_ФасовкаУпаковка,
	|	ТаблицаДокумента.Продукция.ФасовкаУпаковка.Идентификатор         КАК Продукция_ФасовкаУпаковка_Идентификатор,
	|	ТаблицаДокумента.Продукция.ФасовкаУпаковка.Наименование          КАК Продукция_ФасовкаУпаковка_Наименование,
	|	
	|	ТаблицаДокумента.Продукция.ФасовкаЕдиницаИзмерения               КАК Продукция_ФасовкаЕдиницаИзмерения,
	|	ТаблицаДокумента.Продукция.ФасовкаЕдиницаИзмерения.Идентификатор КАК Продукция_ФасовкаЕдиницаИзмерения_Идентификатор,
	|	ТаблицаДокумента.Продукция.ФасовкаЕдиницаИзмерения.Наименование  КАК Продукция_ФасовкаЕдиницаИзмерения_Наименование,
	|	
	|	ТаблицаДокумента.Продукция.ФасовкаКоличествоУпаковок             КАК Продукция_ФасовкаКоличествоУпаковок,
	|	ТаблицаДокумента.Продукция.ФасовкаКоличествоЕдиницВУпаковке      КАК Продукция_ФасовкаКоличествоЕдиницВУпаковке,
	|	
	|	ТоварыСгруппированные.ЕдиницаИзмеренияВЕТИС                КАК ЕдиницаИзмеренияВЕТИС,
	|	ТоварыСгруппированные.ЕдиницаИзмеренияВЕТИС.Идентификатор  КАК ЕдиницаИзмеренияВЕТИС_Идентификатор,
	|	ТоварыСгруппированные.ЕдиницаИзмеренияВЕТИС.Наименование   КАК ЕдиницаИзмеренияВЕТИСНаименование,
	|	ТоварыСгруппированные.КоличествоВЕТИС                      КАК КоличествоВЕТИС,
	|	
	|	ТаблицаДокумента.ДатаПроизводстваСтрока             КАК ДатаПроизводстваСтрока,
	|	ТаблицаДокумента.ДатаПроизводстваТочностьЗаполнения КАК ДатаПроизводстваТочностьЗаполнения,
	|	ТаблицаДокумента.ДатаПроизводстваНачалоПериода      КАК ДатаПроизводстваНачалоПериода,
	|	ТаблицаДокумента.ДатаПроизводстваКонецПериода       КАК ДатаПроизводстваКонецПериода,
	|	
	|	NULL  КАК СтранаПроизводства,
	|	
	|	ТаблицаДокумента.СкоропортящаясяПродукция   КАК СкоропортящаясяПродукция,
	|	ТаблицаДокумента.НизкокачественнаяПродукция КАК НизкокачественнаяПродукция,
	|	
	|	ТаблицаДокумента.ТипПроисхождения КАК ТипПроисхождения,
	|	
	|	ТаблицаДокумента.СрокГодностиСтрока             КАК СрокГодностиСтрока,
	|	ТаблицаДокумента.СрокГодностиТочностьЗаполнения КАК СрокГодностиТочностьЗаполнения,
	|	ТаблицаДокумента.СрокГодностиНачалоПериода      КАК СрокГодностиНачалоПериода,
	|	ТаблицаДокумента.СрокГодностиКонецПериода       КАК СрокГодностиКонецПериода
	|	
	|ИЗ
	|	ТоварыСгруппированные КАК ТоварыСгруппированные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|		ПО ТаблицаДокумента.НомерСтроки = ТоварыСгруппированные.НомерСтроки
	|			И ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Товары");
	#КонецОбласти
	
	#Область Упаковки
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВсеТовары.ИдентификаторСтроки КАК ИдентификаторСтрокиТовары,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.УровеньУпаковки КАК УровеньУпаковки,
	|	ТаблицаДокумента.КоличествоУпаковокВЕТИС КАК КоличествоУпаковокВЕТИС,
	|	ТаблицаДокумента.УпаковкаВЕТИС.КодЕЭК КАК УпаковкаВЕТИС_КодЕЭК
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.УпаковкиВЕТИС КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеТовары КАК ВсеТовары
	|		ПО ТаблицаДокумента.ИдентификаторСтрокиТовары = ВсеТовары.ИдентификаторСтрокиДубль
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";

	СписокЗапросов.Добавить(ТекстЗапроса, "Упаковки");

	#КонецОбласти
	
	#Область ШтрихкодыУпаковок
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтрокиУпаковки,
	|	ТаблицаДокумента.Штрихкод КАК Штрихкод,
	|	ТаблицаДокумента.ТипМаркировки КАК ТипМаркировки
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.ШтрихкодыУпаковок КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";

	СписокЗапросов.Добавить(ТекстЗапроса, "ШтрихкодыУпаковок");

	#КонецОбласти

	#Область Регионализация
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.УсловиеРегионализации.Идентификатор КАК УсловиеРегионализации_Идентификатор
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Регионализация КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.УсловиеВыполняется
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Регионализация");
	
	#КонецОбласти

	#Область Маршрут
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки                    КАК НомерСтроки,
	|	ТаблицаДокумента.АдресПредставление             КАК АдресПредставление,
	|	ТаблицаДокумента.ДанныеАдреса                   КАК ДанныеАдреса,
	|	ТаблицаДокумента.СПерегрузкой                   КАК СПерегрузкой,
	|	ТаблицаДокумента.Предприятие.Идентификатор      КАК Предприятие_Идентификатор,
	|	ТаблицаДокумента.ТипТранспорта                  КАК ТипТранспорта,
	|	ТаблицаДокумента.НомерТранспортногоСредства     КАК НомерТранспортногоСредства,
	|	ТаблицаДокумента.НомерАвтомобильногоПрицепа     КАК НомерАвтомобильногоПрицепа,
	|	ТаблицаДокумента.НомерАвтомобильногоКонтейнера  КАК НомерАвтомобильногоКонтейнера
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Маршрут КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.НомерСтроки <> 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Маршрут");
	
	#КонецОбласти
	
	#Область СвязанныеДокументы
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки  КАК НомерСтроки,
	|	ТаблицаДокумента.ТипДокумента КАК ТипДокумента,
	|	ТаблицаДокумента.Серия        КАК Серия,
	|	ТаблицаДокумента.Номер        КАК Номер,
	|	ТаблицаДокумента.Дата         КАК Дата
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.СвязанныеДокументы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "СвязанныеДокументы");
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Результат = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Результат.Упаковки.Индексы.Добавить("ИдентификаторСтрокиТовары");
	Результат.ШтрихкодыУпаковок.Индексы.Добавить("ИдентификаторСтрокиУпаковки");
	
	Возврат Результат;
	
КонецФункции

Функция ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(ДанныеДокумента, ПараметрыОбмена, Предприятие, ХозяйствующийСубъект, ДокументОбъект)
	
	ИзмененныеЗаписиЖурнала = Новый Массив;
	
	Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.stockEntry Цикл
		
		ЗаписьСкладскогоЖурнала = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
		
		ДанныеЗаписи = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
											ЭлементДанных,
											ЗаписьСкладскогоЖурнала,
											ХозяйствующийСубъект, 
											Предприятие, 
											ПараметрыОбмена);
		
		Если ДанныеЗаписи <> Неопределено Тогда
			ИзмененныеЗаписиЖурнала.Добавить(ДанныеЗаписи.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИзмененныеЗаписиЖурнала;
	
КонецФункции

Функция УдалитьНезначимыеСимволы(ИсходнаяСтрока)
	
	Возврат ВРЕГ(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(
		ИсходнаяСтрока, Символы.ПС, ""), Символы.ВТаб, ""), Символы.НПП, ""), Символы.ПФ, ""), Символы.Таб, ""), " ", ""));
	
КонецФункции

Процедура ЗагрузитьСведенияВСДПоРезультатамЗапросаВЕТИС(ДанныеДокумента, ИзмененныеЗаписиЖурнала, ПараметрыОбмена, Предприятие, ХозяйствующийСубъект, ДокументОбъект)
	
	ЗагруженныеВСД = Новый ТаблицаЗначений;
	ЗагруженныеВСД.Колонки.Добавить("ДанныеВСД");
	ЗагруженныеВСД.Колонки.Добавить("КоличествоВЕТИС");

	Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.vetDocument Цикл
		
		ВСД = Справочники.ВетеринарноСопроводительныйДокументВЕТИС.НайтиПоДаннымXDTO(ЭлементДанных, ПараметрыОбмена);
		
		ДанныеВСД = ИнтеграцияВЕТИС.ЗагрузитьВетеринарноСопроводительныйДокумент(
			ЭлементДанных,
			ВСД,
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена);
		
		Если ДанныеВСД <> Неопределено Тогда
			НоваяСтрока = ЗагруженныеВСД.Добавить();
			НоваяСтрока.ДанныеВСД       = ДанныеВСД;
			НоваяСтрока.КоличествоВЕТИС = ДанныеВСД.Объект.КоличествоВЕТИС;
		КонецЕсли;
		
	КонецЦикла;
	
	Товары = ДокументОбъект.Товары.Выгрузить();
	Для Каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.ОсобыеОтметки = УдалитьНезначимыеСимволы(СтрокаТЧ.ОсобыеОтметки);
	КонецЦикла;
	
	Для Каждого ЭлементДанных Из ЗагруженныеВСД Цикл
		
		ВСДСсылка = ЭлементДанных.ДанныеВСД.Ссылка;
		ВСДОбъект = ЭлементДанных.ДанныеВСД.Объект;
		
		НайденныеСтроки = Неопределено;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Продукция",                  ВСДОбъект.Продукция);
		ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС",      ВСДОбъект.ЕдиницаИзмеренияВЕТИС);
		ПараметрыОтбора.Вставить("Цель",                       ВСДОбъект.Цель);
		ПараметрыОтбора.Вставить("БлагополучиеМестности",      ВСДОбъект.БлагополучиеМестности);
		ПараметрыОтбора.Вставить("ОсобыеОтметки",                       УдалитьНезначимыеСимволы(ВСДОбъект.ОсобыеОтметки));
		ПараметрыОтбора.Вставить("ВетеринарноСопроводительныйДокумент", Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка());
		
		Если Не ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ВСДОбъект.Продукция) Тогда
			ПараметрыОтбора.Вставить("НизкокачественнаяПродукция", ВСДОбъект.НизкокачественнаяПродукция);
			ПараметрыОтбора.Вставить("ЭкспертизаРезультат",        ВСДОбъект.ЭкспертизаРезультат);
		КонецЕсли;

		НомерСтроки = ЭлементДанных.ДанныеВСД.НомерСтроки;
		Если ЗначениеЗаполнено(НомерСтроки) И НомерСтроки <= Товары.Количество() Тогда
			СтрокаТЧ = Товары[НомерСтроки - 1];
			НайденныеСтроки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаТЧ);
			Для Каждого ПараметрОтбора Из ПараметрыОтбора Цикл
				Если СтрокаТЧ[ПараметрОтбора.Ключ] <> ПараметрОтбора.Значение Тогда
					НайденныеСтроки = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НайденныеСтроки = Неопределено Тогда
			НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			
			Если СтрокаТЧ.КоличествоВЕТИС > ЭлементДанных.КоличествоВЕТИС Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ВетеринарноСопроводительныйДокумент) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТЧ.ВетеринарноСопроводительныйДокумент = ВСДСсылка;
			
			СтрокаДокумента = ДокументОбъект.Товары.Получить(СтрокаТЧ.НомерСтроки-1);
			СтрокаДокумента.ВетеринарноСопроводительныйДокумент = ВСДСсылка;
			
			ЭлементДанных.КоличествоВЕТИС = ЭлементДанных.КоличествоВЕТИС - СтрокаТЧ.КоличествоВЕТИС;

			Если ЭлементДанных.КоличествоВЕТИС = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриОтгрузкеПродукцииВЕТИС.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// ВСД расширенная этикетка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЭтикетокВЕТИС";
	КомандаПечати.Идентификатор = "ВСДРасширеннаяЭтикетка";
	КомандаПечати.Представление = НСтр("ru = 'Сжатое представление ВСД с расширенной информацией'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

	// ВСД сжатая этикетка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьЭтикетокВЕТИС";
	КомандаПечати.Идентификатор = "ВСДСжатаяЭтикетка";
	КомандаПечати.Представление = НСтр("ru = 'Сжатое представление ВСД'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
// 
// Параметры:
//   МассивОбъектов        - Массив Из ДокументСсылка - Массив ссылок на объекты которые нужно распечатать (входящий).
//   ПараметрыПечати       - Структура       - Структура дополнительных параметров печати (входящий).
//   КоллекцияПечатныхФорм - ТаблицаЗначений - Сформированные табличные документы (исходящий).
//   ОбъектыПечати         - Строка          - Имена макетов, перечисленные через запятую (входящий).
//   ПараметрыВывода       - Структура       - Параметры сформированных табличных документов (исходящий).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

Функция ПолучитьДанныеДляПечатнойФормыРасширеннойЭтикеткиВСД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка                                              КАК Ссылка,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Форма                                               КАК Форма,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Дата                                                КАК ДатаДокумента,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Статус                                              КАК Статус,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект                КАК Грузоотправитель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент.ИНН КАК ГрузоотправительИНН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ТипТТН                                              КАК ТипТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.СерияТТН                                            КАК СерияТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.НомерТТН                                            КАК НомерТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаТТН                                             КАК ДатаТТН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательХозяйствующийСубъект                 КАК Грузополучатель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательХозяйствующийСубъект.Контрагент.ИНН  КАК ГрузополучательИНН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие                          КАК ГрузополучательПредприятие,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузополучательПредприятие.АдресПредставление       КАК ГрузополучательПредприятиеАдрес,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор                                       КАК Идентификатор,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Продукция                                           КАК Продукция,
	|	ВетеринарноСопроводительныйДокументВЕТИС.КоличествоВЕТИС                                     КАК Количество,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ЕдиницаИзмеренияВЕТИС                               КАК ЕдиницаИзмерения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваСтрока                              КАК ДатаПроизводстваСтрока,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваТочностьЗаполнения                  КАК ДатаПроизводстваТочностьЗаполнения,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваНачалоПериода                       КАК ДатаПроизводстваНачалоПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ДатаПроизводстваКонецПериода                        КАК ДатаПроизводстваКонецПериода,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Производители.(
	|		Производитель                    КАК ПроизводительПредприятие,
	|		Производитель.АдресПредставление КАК ПроизводительПредприятиеАдрес)                      КАК Производители
	|ИЗ  Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходящаяТранспортнаяОперацияВЕТИСТовары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|	Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|	ПО ИсходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИС.Ссылка
	|ГДЕ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка В(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка";
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьДанныеДляПечатнойФормыСжатойЭтикеткиВСД(ПараметрыПечати, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка                                              КАК Ссылка,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект                КАК Грузоотправитель,
	|	ВетеринарноСопроводительныйДокументВЕТИС.ГрузоотправительХозяйствующийСубъект.Контрагент.ИНН КАК ГрузоотправительИНН,
	|	ВетеринарноСопроводительныйДокументВЕТИС.Идентификатор                                       КАК Идентификатор
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ИсходящаяТранспортнаяОперацияВЕТИСТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВетеринарноСопроводительныйДокументВЕТИС КАК ВетеринарноСопроводительныйДокументВЕТИС
	|		ПО ИсходящаяТранспортнаяОперацияВЕТИСТовары.ВетеринарноСопроводительныйДокумент = ВетеринарноСопроводительныйДокументВЕТИС.Ссылка
	|ГДЕ
	|	ИсходящаяТранспортнаяОперацияВЕТИСТовары.Ссылка В(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка";
	Возврат Запрос.Выполнить();
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.ГрузоотправительХозяйствующийСубъект КАК ГрузоотправительХозяйствующийСубъект,
	|	ДанныеШапки.ГрузоотправительПредприятие КАК ГрузоотправительПредприятие,
	|	ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик)) КАК Статус
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ДанныеШапки.Ссылка)
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтатусыДвиженийРезерв", СтатусыДвиженийРезерв());
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = ИнтеграцияВЕТИС.ТекстЗапросаДвижениеСерийТоваров(Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
	
	Если Не ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Ссылка КАК Документ,
	|	&ГрузоотправительХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	&ГрузоотправительПредприятие КАК Предприятие,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
	|	СУММА(ТаблицаДокумента.КоличествоВЕТИС) КАК КоличествоВЕТИС
	|ИЗ
	|	Документ.ИсходящаяТранспортнаяОперацияВЕТИС.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &Статус В (&СтатусыДвиженийРезерв)
	|	И ТаблицаДокумента.ВетеринарноСопроводительныйДокумент = ЗНАЧЕНИЕ(Справочник.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийРезерв()

	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Черновик);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияКПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОбрабатывается);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешено);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеРазрешеноСУсловиями);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияПеремещениеЗапрещено);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.ЗапросВозможностиПеремещенияОшибка);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.КОформлению);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Обрабатывается);
	Результат.Добавить(Перечисления.СтатусыОбработкиИсходящихТранспортныхОперацийВЕТИС.Ошибка);
	
	Возврат Результат;

КонецФункции

Процедура ОбновитьДвиженияЗаписиСкладскогоЖурналаВРезервеВЕТИС(ДокументСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
	
	НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
	
	ДополнительныеСвойстваДляПроведения = Новый Структура;
	ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
	
	ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
	НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
	НаборЗаписей.Записать();
		
КонецПроцедуры

#КонецОбласти

#Область Заполнение

Процедура ЗаполнитьЗависящиеОтЗаписейСкладскогоЖурналаРеквизиты(ДанныеКЗаполнению)
	
	Если ТипЗнч(ДанныеКЗаполнению) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Итератор = Новый Массив;
		Итератор.Добавить(ДанныеКЗаполнению);
	Иначе
		Итератор = ДанныеКЗаполнению;
	КонецЕсли;
	
	ЗаписиЖурнала = Новый Массив;
	Для Каждого СтрокаДляЗаполнения Из Итератор Цикл
		Если ЗначениеЗаполнено(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала) Тогда
			Если ЗаписиЖурнала.Найти(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала) = Неопределено Тогда
				ЗаписиЖурнала.Добавить(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписиЖурнала.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросРеквизитов = Новый Запрос;
	ЗапросРеквизитов.УстановитьПараметр("Ссылка", ЗаписиЖурнала);
	ЗапросРеквизитов.Текст = 
	"ВЫБРАТЬ 
	|	ЗаписиСкладскогоЖурнала.Ссылка                     КАК Ссылка,
	|	ЗаписиСкладскогоЖурнала.НизкокачественнаяПродукция КАК НизкокачественнаяПродукция
	|ПОМЕСТИТЬ ЗаписиСкладскогоЖурнала
	|ИЗ
	|	Справочник.ЗаписиСкладскогоЖурналаВЕТИС КАК ЗаписиСкладскогоЖурнала
	|ГДЕ
	|	ЗаписиСкладскогоЖурнала.Ссылка В (&Ссылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|//////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиСкладскогоЖурнала.Ссылка                     КАК Ссылка,
	|	ЗаписиСкладскогоЖурнала.НизкокачественнаяПродукция КАК НизкокачественнаяПродукция,
	|	ВСД.ВетеринарноСопроводительныйДокумент.ТипПроисхождения КАК ТипПроисхождения,
	|	ЕСТЬNULL(ВСД.ВетеринарноСопроводительныйДокумент.ЭкспертизаРезультат, ЗНАЧЕНИЕ(Перечисление.РезультатыЛабораторныхИсследованийВЕТИС.НеПодвергнутаВСЭ)) КАК ЭкспертизаРезультат,
	|	ЕСТЬNULL(ВСД.ВетеринарноСопроводительныйДокумент.ПериодНахожденияЖивотныхНаТерриторииТС, ЗНАЧЕНИЕ(Перечисление.ПериодыНахожденияЖивотныхНаТерриторииТСВЕТИС.СРождения)) КАК ПериодНахожденияЖивотныхНаТерриторииТС,
	|	ВСД.ВетеринарноСопроводительныйДокумент.КоличествоПериодовНахожденияЖивотныхНаТерриторииТС КАК КоличествоПериодовНахожденияЖивотныхНаТерриторииТС,
	|	ВСД.ВетеринарноСопроводительныйДокумент.МестоДляКарантинирования КАК МестоДляКарантинирования,
	|	ВСД.ВетеринарноСопроводительныйДокумент.КоличествоДнейДляКарантинирования КАК КоличествоДнейДляКарантинирования
	|ИЗ
	|	ЗаписиСкладскогоЖурнала КАК ЗаписиСкладскогоЖурнала
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗаписиСкладскогоЖурналаВЕТИС.ВетеринарноСопроводительныеДокументы КАК ВСД
	|		ПО ЗаписиСкладскогоЖурнала.Ссылка = ВСД.Ссылка
	|";
	
	Реквизиты = ЗапросРеквизитов.Выполнить().Выгрузить();
	Реквизиты.Индексы.Добавить("Ссылка");
	
	Для Каждого СтрокаДляЗаполнения Из Итератор Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = Реквизиты.НайтиСтроки(
			Новый Структура("Ссылка", СтрокаДляЗаполнения.ЗаписьСкладскогоЖурнала));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДляЗаполнения, НайденныеСтроки[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция ТипДокумента()
	
	Возврат Метаданные.Документы.ИсходящаяТранспортнаяОперацияВЕТИС;
	
КонецФункции

#КонецОбласти

#КонецЕсли
