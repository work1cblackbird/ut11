#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ВводОстатковДенежныхСредств") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДенежныеСредстваНаличные(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваВКассахККМ(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДенежныеСредстваБезналичные(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
	
	ВводОстатковЛокализация.ВводОстатковДенежныхСредствДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("УчетДенежныхСредств");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	ВводОстатковЛокализация.ВводОстатковДенежныхСредствЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандуИсправление(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	ИсправлениеДокументов.ДобавитьКомандуСторно(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ВводОстатковЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	ВводОстатковЛокализация.ВводОстатковДенежныхСредствДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
КонецПроцедуры

#КонецОбласти


#Область ДляВызоваИзДругихПодсистем

// Добавляет команду создания документа на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
// Возвращаемое значение:
//	КомандаФормы - добавляемая команда.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Возврат СозданиеНаОсновании.ДобавитьКомандуСозданияНаОсновании(КомандыСозданияНаОсновании, Метаданные.Документы.ВводОстатковДенежныхСредств);
	
КонецФункции

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#Область ИнициализацияИЗаполнение

// Инициализировать документ
//
// Параметры:
//  Объект           - ДокументОбъект - обрабатываемый документ.
//  ДанныеЗаполнения - Структура - данные заполнения.
//  СтандартнаяОбработка - Булево - взвод флага отказа от стандартной обработки заполнения документа.
Процедура ИнициализироватьДокумент(Объект, ДанныеЗаполнения = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
	Организация               = Справочники.Организации.ПустаяСсылка();
	Валюта                    = Справочники.Валюты.ПустаяСсылка();
	ХозяйственнаяОперация     = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	Комментарий               = "";
	ОтражатьВБУиНУ            = Ложь;
	ОтражатьВОперативномУчете = Ложь;
	ОтражатьВУУ               = Ложь;
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		
		Если ДанныеЗаполнения.Свойство("Организация") Тогда
			Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Валюта") Тогда
			Валюта = ДанныеЗаполнения.Валюта;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ХозяйственнаяОперация") Тогда
			ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Комментарий") Тогда
			Комментарий = ДанныеЗаполнения.Комментарий;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОтражатьВБУиНУ") Тогда
			ОтражатьВБУиНУ = ДанныеЗаполнения.ОтражатьВБУиНУ;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОтражатьВОперативномУчете") Тогда
			ОтражатьВОперативномУчете = ДанныеЗаполнения.ОтражатьВОперативномУчете;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОтражатьВУУ") Тогда
			ОтражатьВУУ = ДанныеЗаполнения.ОтражатьВУУ;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗначениеКопирования") Тогда
			ВводОстатковСервер.ЗаполнитьЗначенияПоСтаромуВводуОстатков(Объект, ДанныеЗаполнения.ЗначениеКопирования);
		КонецЕсли;
		
	КонецЕсли;
	
	//Организация
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Если Не ЗначениеЗаполнено(Организация)
			И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
			Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
		Иначе
			Объект.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	//Валюта
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		Иначе
			Объект.Валюта = Валюта;
		КонецЕсли;
	КонецЕсли;
	
	//ХозяйственнаяОперация
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Если Не ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
			Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах;
		Иначе
			Объект.ХозяйственнаяОперация = ХозяйственнаяОперация;
		КонецЕсли;
	КонецЕсли;
	
	//Способы отражения в учете
	Если ОтражатьВБУиНУ Тогда
		Объект.ОтражатьВБУиНУ = ОтражатьВБУиНУ;
	КонецЕсли;
	
	Если ОтражатьВОперативномУчете Тогда
		Объект.ОтражатьВОперативномУчете = ОтражатьВОперативномУчете;
	КонецЕсли;
	
	Если ОтражатьВУУ Тогда
		Объект.ОтражатьВУУ = ОтражатьВУУ;
	КонецЕсли;
	
	//Комментарий
	Если Не ЗначениеЗаполнено(Объект.Комментарий) Тогда
		Объект.Комментарий = Комментарий;
	КонецЕсли;
	
	ВводОстатковЛокализация.ВводОстатковДенежныхСредствОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
// Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("ХозяйственнаяОперация");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Представление = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Данные,
		Данные.Номер,
		Данные.Дата,
		Данные.ХозяйственнаяОперация);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст ="ВЫБРАТЬ
		|	ДанныеДокумента.Дата КАК Период,
		|	ДанныеДокумента.Номер КАК Номер,
		|	ДанныеДокумента.Ссылка КАК Ссылка,
		|	ДанныеДокумента.Организация КАК Организация,
		|	ДанныеДокумента.Валюта КАК Валюта,
		|	ДанныеДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВОперативномУчете КАК ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ КАК ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ КАК ОтражатьВУУ,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)) КАК Комментарий,
		|	ДанныеДокумента.Проведен КАК Проведен,
		|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
		|	ДанныеДокумента.Ответственный КАК Ответственный,
		|	ДанныеДокумента.Автор КАК Автор,
		|	ДанныеДокумента.Исправление КАК Исправление,
		|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
		|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
		|	НастройкиХозяйственныхОпераций.Ссылка КАК НастройкаХозяйственнойОперации,
		|	СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиКассы.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиБанковскиеСчета.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиКассыККМ.Сумма, 0)) КАК Сумма
		|ИЗ
		|	Документ.ВводОстатковДенежныхСредств КАК ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.Кассы КАК ДанныеТабличнойЧастиКассы
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиКассы.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ДанныеТабличнойЧастиБанковскиеСчета
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиБанковскиеСчета.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ДанныеТабличнойЧастиКассыККМ
		|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиКассыККМ.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
		|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
		|ГДЕ
		|	ДанныеДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДокумента.Дата,
		|	ДанныеДокумента.Номер,
		|	ДанныеДокумента.Ссылка,
		|	ДанныеДокумента.Организация,
		|	ДанныеДокумента.Валюта,
		|	ДанныеДокумента.ХозяйственнаяОперация,
		|	ДанныеДокумента.ОтражатьВОперативномУчете,
		|	ДанныеДокумента.ОтражатьВБУиНУ,
		|	ДанныеДокумента.ОтражатьВУУ,
		|	ДанныеДокумента.Проведен,
		|	ДанныеДокумента.ПометкаУдаления,
		|	ДанныеДокумента.Ответственный,
		|	ДанныеДокумента.Исправление,
		|	ДанныеДокумента.СторнируемыйДокумент,
		|	ДанныеДокумента.ИсправляемыйДокумент,
		|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК СТРОКА(100)),
		|	НастройкиХозяйственныхОпераций.Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                         Реквизиты.Период);
	Запрос.УстановитьПараметр("Номер",                          Реквизиты.Номер);
	Запрос.УстановитьПараметр("Организация",                    Реквизиты.Организация);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",          Реквизиты.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Реквизиты.Организация));
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",     Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ОтражатьВОперативномУчете",      Реквизиты.ОтражатьВОперативномУчете);
	Запрос.УстановитьПараметр("ОтражатьВБУиНУ",                 Реквизиты.ОтражатьВБУиНУ);
	Запрос.УстановитьПараметр("ОтражатьВУУ",                    Реквизиты.ОтражатьВУУ);
	Запрос.УстановитьПараметр("Комментарий",                    Реквизиты.Комментарий);
	Запрос.УстановитьПараметр("Проведен",                       Реквизиты.Проведен);
	Запрос.УстановитьПараметр("ПометкаУдаления",                Реквизиты.ПометкаУдаления);
	Запрос.УстановитьПараметр("Ответственный",                  Реквизиты.Ответственный);
	Запрос.УстановитьПараметр("Автор",                          Реквизиты.Автор);
	Запрос.УстановитьПараметр("СуммаДокумента",                 Реквизиты.Сумма);
	Запрос.УстановитьПараметр("Валюта",                         Реквизиты.Валюта);
	Запрос.УстановитьПараметр("Исправление",                    Реквизиты.Исправление);
	Запрос.УстановитьПараметр("СторнируемыйДокумент",           Реквизиты.СторнируемыйДокумент);
	Запрос.УстановитьПараметр("ИсправляемыйДокумент",           Реквизиты.ИсправляемыйДокумент);
	Запрос.УстановитьПараметр("НастройкаХозяйственнойОперации", Реквизиты.НастройкаХозяйственнойОперации);
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", 
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ."+Метаданные.Документы.ВводОстатковДенежныхСредств.Имя));
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКурсыВалют";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.КурсЧислитель / КурсыВалютСрезПоследних.КурсЗнаменатель КАК КоэффициентПересчета
	|	
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(
	|			&Период,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					&ВалютаУправленческогоУчета
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					Кассы.ВалютаДенежныхСредств
	|				ИЗ
	|					Документ.ВводОстатковДенежныхСредств.Кассы КАК ВводОстатковКассы
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
	|						ПО ВводОстатковКассы.Касса = Кассы.Ссылка
	|				ГДЕ
	|					ВводОстатковКассы.Ссылка = &Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					КассыККМ.ВалютаДенежныхСредств
	|				ИЗ
	|					Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ВводОстатковКассыККМ
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|						ПО ВводОстатковКассыККМ.КассаККМ = КассыККМ.Ссылка
	|				ГДЕ
	|					ВводОстатковКассыККМ.Ссылка = &Ссылка
	|				
	|				ОБЪЕДИНИТЬ ВСЕ
	|				
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					БанковскиеСчетаОрганизаций.ВалютаДенежныхСредств
	|				ИЗ
	|					Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ВводОстатковБанковскиеСчета
	|						ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|						ПО ВводОстатковБанковскиеСчета.БанковскийСчет = БанковскиеСчетаОрганизаций.Ссылка
	|				ГДЕ
	|					ВводОстатковБанковскиеСчета.Ссылка = &Ссылка
	|				)
	|				И БазоваяВалюта = &ВалютаРегламентированногоУчета
	|	) КАК КурсыВалютСрезПоследних";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваНаличные(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваНаличные";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	ТаблицаКассы.Касса                     КАК Касса,
	|	ТаблицаКассы.Сумма                     КАК Сумма,
	|	ТаблицаКассы.СуммаРегл                 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА Кассы.ВалютаДенежныхСредств = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаКассы.Сумма
	|		ИНАЧЕ
	|			ТаблицаКассы.Сумма * ЕСТЬNULL(КурсыВалютКассы.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                  КАК СуммаУпр,
	|	ТаблицаКассы.ИдентификаторСтроки       КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации        КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.Кассы КАК ТаблицаКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Кассы КАК Кассы
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютКассы
	|			ПО КурсыВалютКассы.Валюта = Кассы.ВалютаДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|			ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ПО ТаблицаКассы.Касса = Кассы.Ссылка
	|ГДЕ
	|	ТаблицаКассы.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВКассах)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаКассы.НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваВКассахККМ(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваВКассахККМ";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	ТаблицаКассы.КассаККМ                  КАК КассаККМ,
	|	ТаблицаКассы.Сумма                     КАК Сумма,
	|	ТаблицаКассы.СуммаРегл                 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА КассыККМ.ВалютаДенежныхСредств = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаКассы.Сумма
	|		ИНАЧЕ
	|			ТаблицаКассы.Сумма * ЕСТЬNULL(КурсыВалютКассы.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                  КАК СуммаУпр,
	|	ТаблицаКассы.НомерСтроки               КАК НомерСтроки,
	|	ТаблицаКассы.ИдентификаторСтроки       КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации        КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ТаблицаКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютКассы
	|			ПО КурсыВалютКассы.Валюта = КассыККМ.ВалютаДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|			ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ПО ТаблицаКассы.КассаККМ = КассыККМ.Ссылка
	|ГДЕ
	|	ТаблицаКассы.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	&Организация,
	|	ТаблицаКассы.КассаККМ,
	|	ТаблицаКассы.Сумма,
	|	ТаблицаКассы.СуммаРегл КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА КассыККМ.ВалютаДенежныхСредств = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаКассы.Сумма
	|		ИНАЧЕ
	|			ТаблицаКассы.Сумма * ЕСТЬNULL(КурсыВалютКассы.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ КАК СуммаУпр,
	|	ТаблицаКассы.НомерСтроки КАК НомерСтроки,
	|	ТаблицаКассы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации  КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ТаблицаКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КассыККМ КАК КассыККМ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютКассы
	|			ПО КурсыВалютКассы.Валюта = КассыККМ.ВалютаДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|			ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ПО ТаблицаКассы.КассаККМ = КассыККМ.Ссылка
	|ГДЕ
	|	ТаблицаКассы.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДенежныеСредстваБезналичные(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДенежныеСредстваБезналичные";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация                           КАК Организация,
	|	ТаблицаБанковскиеСчета.БанковскийСчет  КАК БанковскийСчет,
	|	ТаблицаБанковскиеСчета.Сумма           КАК Сумма,
	|	ТаблицаБанковскиеСчета.СуммаРегл       КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаУправленческогоУчета
	|			ТОГДА ТаблицаБанковскиеСчета.Сумма
	|		ИНАЧЕ
	|			ТаблицаБанковскиеСчета.Сумма * ЕСТЬNULL(КурсыВалютСчета.КоэффициентПересчета, 0) / ЕСТЬNULL(КурсыВалютУпр.КоэффициентПересчета, 1)
	|	КОНЕЦ                                  КАК СуммаУпр,
	|	ТаблицаБанковскиеСчета.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации        КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ТаблицаБанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютСчета
	|			ПО КурсыВалютСчета.Валюта = БанковскиеСчета.ВалютаДенежныхСредств
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютУпр
	|			ПО КурсыВалютУпр.Валюта = &ВалютаУправленческогоУчета
	|		ПО ТаблицаБанковскиеСчета.БанковскийСчет = БанковскиеСчета.Ссылка
	|ГДЕ
	|	ТаблицаБанковскиеСчета.Ссылка = &Ссылка
	|	И &ОтражатьВОперативномУчете
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК МестоХранения,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Подразделение,
	|	&Период КАК ДатаДокументаИБ,
	|	&Ссылка КАК Ссылка,
	|	&Номер КАК НомерДокументаИБ,
	|	НЕОПРЕДЕЛЕНО КАК Статус,
	|	&Ответственный КАК Ответственный,
	|	&Автор КАК Автор,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	НЕОПРЕДЕЛЕНО КАК Дополнительно,
	|	&Комментарий КАК Комментарий,
	|	&Проведен КАК Проведен,
	|	&ПометкаУдаления КАК ПометкаУдаления,
	|	НЕОПРЕДЕЛЕНО КАК ДатаПервичногоДокумента,
	|	НЕОПРЕДЕЛЕНО КАК НомерПервичногоДокумента,
	|	ВЫБОР 
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) > 1
	|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассыККМ.КассаККМ.ВалютаДенежныхСредств) > 1
	|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассы.Касса.ВалютаДенежныхСредств) > 1 ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &Валюта
	|	КОНЕЦ КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	&Период КАК ДатаОтраженияВУчете,
	|	&Исправление КАК СторноИсправление,
	|	&СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	ВЫБОР 
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) > 1
	|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассыККМ.КассаККМ.ВалютаДенежныхСредств) > 1
	|				ИЛИ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДанныеТабличнойЧастиКассы.Касса.ВалютаДенежныхСредств) > 1 ТОГДА 0
	|		ИНАЧЕ СУММА(ЕСТЬNULL(ДанныеТабличнойЧастиКассы.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиБанковскиеСчета.Сумма, 0) + ЕСТЬNULL(ДанныеТабличнойЧастиКассыККМ.Сумма, 0))
	|	КОНЕЦ КАК Сумма,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.Кассы КАК ДанныеТабличнойЧастиКассы
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиКассы.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ДанныеТабличнойЧастиБанковскиеСчета
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиБанковскиеСчета.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ДанныеТабличнойЧастиКассыККМ
	|		ПО ДанныеДокумента.Ссылка = ДанныеТабличнойЧастиКассыККМ.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ВводОстатковДенежныхСредств";
	
	ЗначенияПараметров = Новый Структура;
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ВводОстатковДенежныхСредств));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, Истина);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента);
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ТекстЗапроса;
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	ВводОстатковЛокализация.ВводОстатковДенежныхСредствДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ВводОстатковДенежныхСредств.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.29";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4b4b1834-9303-4f0a-861a-571df74738c8");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ВводОстатковДенежныхСредств.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита ""Валюта"" в документе ""Ввод остатков денежных средств""'");
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ВводОстатковДенежныхСредств.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводОстатков.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ВводОстатковБанковскиеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств КАК ВводОстатков
	|		ПО ВводОстатковБанковскиеСчета.Ссылка = ВводОстатков.Ссылка
	|ГДЕ
	|	ВводОстатков.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводОстатков.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатковБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств) = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводОстатков.Ссылка
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.Кассы КАК ВводОстатковКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств КАК ВводОстатков
	|		ПО ВводОстатковКассы.Ссылка = ВводОстатков.Ссылка
	|ГДЕ
	|	ВводОстатков.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводОстатков.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатковКассы.Касса.ВалютаДенежныхСредств) = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВводОстатков.Ссылка
	|ИЗ
	|	Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ВводОстатковКассыККМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств КАК ВводОстатков
	|		ПО ВводОстатковКассыККМ.Ссылка = ВводОстатков.Ссылка
	|ГДЕ
	|	ВводОстатков.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВводОстатков.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВводОстатковКассыККМ.КассаККМ.ВалютаДенежныхСредств) = 1";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать документы ""Ввод остатков денежных средств"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- заполнение реквизита ""Валюта""'"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств КАК ДанныеДокумента
		|		ПО ТаблицаДокументов.Ссылка = ДанныеДокумента.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ВводОстатковБанковскиеСчета.БанковскийСчет.ВалютаДенежныхСредств КАК Валюта
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.БанковскиеСчета КАК ВводОстатковБанковскиеСчета
		|		ПО ТаблицаДокументов.Ссылка = ВводОстатковБанковскиеСчета.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументов.Ссылка,
		|	ВводОстатковКассы.Касса.ВалютаДенежныхСредств
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.Кассы КАК ВводОстатковКассы
		|		ПО ТаблицаДокументов.Ссылка = ВводОстатковКассы.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДокументов.Ссылка,
		|	ВводОстатковКассыККМ.КассаККМ.ВалютаДенежныхСредств
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВводОстатковДенежныхСредств.КассыККМ КАК ВводОстатковКассыККМ
		|		ПО ТаблицаДокументов.Ссылка = ВводОстатковКассыККМ.Ссылка";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Запросы = Запрос.ВыполнитьПакет();
	Документ = Запросы[Запросы.ВГраница() - 1].Выбрать();
	ВалютаДокументов = Запросы[Запросы.ВГраница()].Выгрузить();
	
	Пока Документ.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Документ.Ссылка, Документ.ВерсияДанных, Параметры.Очередь); // ДокументОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				ДанныеДокумента = ВалютаДокументов.Найти(Документ.Ссылка, "Ссылка");
				ДокументОбъект.Валюта = ДанныеДокумента.Валюта;
				
				ОбъектИзменен = Истина;
				
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Документ.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		СписокОписаний.Добавить(НСтр("ru = 'Всего пропущено: %1'"));
		ТекстСообщения = СтрШаблон(СтрСоединить(СписокОписаний, Символы.ПС), ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана порция документов ""Ввод остатков денежных средств"": %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, , ,
			ТекстСообщения);
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
