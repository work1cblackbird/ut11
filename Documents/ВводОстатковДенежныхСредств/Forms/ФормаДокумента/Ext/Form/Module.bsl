
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
	ВалютаУправленческогоУчета     = Константы.ВалютаУправленческогоУчета.Получить();
	ИспользуетсяНесколькоСчетов    = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоРасчетныхСчетов");
	ИспользуетсяНесколькоКасс      = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	ИспользуетсяНесколькоКассККМ   = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКассККМ");
	
	АктуализироватьСписокХозяйственныхОпераций();
	
	Если Не ВозможностьОткрытияДокументаОтУстановленныхФО(Объект.ХозяйственнаяОперация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	УстановитьЗаголовокЭтойФормы();
	ЗаполнитьПараметрыДокумента();
	УстановитьВидимость();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах")
		И Не ИспользуетсяНесколькоСчетов Тогда
		
		Если Не ЗначениеЗаполнено(ЕдинственныйСчет) Тогда
			
			Отказ = Истина;
			
			ПодробноеПредставлениеОшибки =
				НСтр("ru = 'В информационной базе используется один банковский счет,
				|но его свойства не настроены разделе ""Казначейство"" - ""Настройки и справочники"" - ""Настройка банковского счета"".'");
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
		Объект.БанковскиеСчета.Очистить();
		
		НоваяСтрока = Объект.БанковскиеСчета.Добавить();
		
		НоваяСтрока.БанковскийСчет = ЕдинственныйСчет;
		НоваяСтрока.Сумма          = ОстатокНаСчете;
		
		ПриИзмененииРеквизитаСервер(
			НоваяСтрока.Сумма, 
			НоваяСтрока.СуммаРегл,
			НоваяСтрока.СуммаУпр,
			НоваяСтрока.БанковскийСчет);
			
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковВКассах")
		И Не ИспользуетсяНесколькоКасс Тогда
		
		Если Не ЗначениеЗаполнено(ЕдинственнаяКасса) Тогда
			
			Отказ = Истина;
			
			ПодробноеПредставлениеОшибки =
				НСтр("ru = 'В информационной базе используется одна касса,
				|но ее свойства не настроены в разделе ""Нормативно-справочная информация"" - ""Настройки и справочники"" - ""Настройка кассы"".'");
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
		Объект.Кассы.Очистить();
		
		НоваяСтрока = Объект.Кассы.Добавить();
		
		НоваяСтрока.Касса = ЕдинственнаяКасса;
		НоваяСтрока.Сумма = ОстатокВКассе;
		
		ПриИзмененииРеквизитаСервер(
			НоваяСтрока.Сумма,
			НоваяСтрока.СуммаРегл,
			НоваяСтрока.СуммаУпр,
			НоваяСтрока.Касса);
			
	КонецЕсли;
		
	Если (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах")
		Или Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке"))
		И Не ИспользуетсяНесколькоКассККМ Тогда
		
		Если Не ЗначениеЗаполнено(ЕдинственнаяКассаККМ) Тогда
			
			Отказ = Истина;
			
			ПодробноеПредставлениеОшибки =
				НСтр("ru = 'В информационной базе используется одна касса ККМ,
				|но ее свойства не настроены в разделе ""Нормативно-справочная информация"" - ""Настройки и справочники"" - ""Настройка кассы ККМ"".'");
			
			ВызватьИсключение ПодробноеПредставлениеОшибки;
			
		КонецЕсли;
		
		Объект.КассыККМ.Очистить();
		
		НоваяСтрока = Объект.КассыККМ.Добавить();
		
		НоваяСтрока.КассаККМ = ЕдинственнаяКассаККМ;
		НоваяСтрока.Сумма    = ОстатокВКассе;
		
		ПриИзмененииРеквизитаСервер(
			НоваяСтрока.Сумма,
			НоваяСтрока.СуммаРегл,
			НоваяСтрока.СуммаУпр,
			НоваяСтрока.КассаККМ);
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ХозяйственнаяОперация",  Объект.ХозяйственнаяОперация);
	Оповестить("Запись_ВводОстатков", ПараметрыЗаписи, Объект.Ссылка);
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	УстановитьЗаголовокЭтойФормы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтражатьВОперативномУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВБУиНУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВУУПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОрганизацияПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБанковскиеСчета

&НаКлиенте
Процедура БанковскиеСчетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ИспользуетсяНесколькоСчетов Тогда
		Элемент.ТекущиеДанные.БанковскийСчет = ЕдинственныйСчет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаБанковскийСчетПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	ПриИзмененииРеквизитаСервер(
		СтрокаТаблицы.Сумма, 
		СтрокаТаблицы.СуммаРегл,
		СтрокаТаблицы.СуммаУпр,
		СтрокаТаблицы.БанковскийСчет);
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскиеСчетаСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.БанковскиеСчета.ТекущиеДанные;
	
	ПриИзмененииРеквизитаСервер(
		СтрокаТаблицы.Сумма, 
		СтрокаТаблицы.СуммаРегл,
		СтрокаТаблицы.СуммаУпр,
		СтрокаТаблицы.БанковскийСчет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКассы

&НаКлиенте
Процедура КассыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И Не ИспользуетсяНесколькоКасс Тогда
		Элемент.ТекущиеДанные.Касса = ЕдинственнаяКасса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КассыКассаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Кассы.ТекущиеДанные;
	
	ПриИзмененииРеквизитаСервер(
		СтрокаТаблицы.Сумма, 
		СтрокаТаблицы.СуммаРегл,
		СтрокаТаблицы.СуммаУпр,
		СтрокаТаблицы.Касса);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.Кассы.ТекущиеДанные;
	
	ПриИзмененииРеквизитаСервер(
		СтрокаТаблицы.Сумма, 
		СтрокаТаблицы.СуммаРегл,
		СтрокаТаблицы.СуммаУпр,
		СтрокаТаблицы.Касса);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКассыККМ

&НаКлиенте
Процедура КассыККМКассаККМПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КассыККМ.ТекущиеДанные;
	
	ПриИзмененииРеквизитаСервер(
		СтрокаТаблицы.Сумма, 
		СтрокаТаблицы.СуммаРегл,
		СтрокаТаблицы.СуммаУпр,
		СтрокаТаблицы.КассаККМ);
	
КонецПроцедуры

&НаКлиенте
Процедура КассыККМСуммаПриИзменении(Элемент)
	
	СтрокаТаблицы = Элементы.КассыККМ.ТекущиеДанные;
	
	ПриИзмененииРеквизитаСервер(
		СтрокаТаблицы.Сумма, 
		СтрокаТаблицы.СуммаРегл,
		СтрокаТаблицы.СуммаУпр,
		СтрокаТаблицы.КассаККМ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьЗаголовокЭтойФормы()
	
	АвтоЗаголовок = Ложь;
	
	Заголовок = ВводОстатковВызовСервера.ЗаголовокДокументаВводОстатковПоХозяйственнойОперации(Объект.Ссылка,
		Объект.Номер,
		Объект.Дата,
		Объект.ХозяйственнаяОперация);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыДокумента()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) 
		И Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций")
		И Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах 
		И Не ИспользуетсяНесколькоСчетов Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = Объект.Организация;
		
		ЕдинственныйСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		Если ЗначениеЗаполнено(ЕдинственныйСчет) Тогда
			Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдинственныйСчет, "ВалютаДенежныхСредств");
		Иначе
			Валюта = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.БанковскиеСчета.Количество() > 0 Тогда
			ОстатокНаСчете = Объект.БанковскиеСчета[0].Сумма;
		КонецЕсли;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах
		И Не ИспользуетсяНесколькоКасс Тогда
		
		ЕдинственнаяКасса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
		
		Если ЗначениеЗаполнено(ЕдинственнаяКасса) Тогда
			ВалютаКассы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдинственнаяКасса, "ВалютаДенежныхСредств");
		Иначе
			ВалютаКассы = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.Кассы.Количество() > 0 Тогда
			ОстатокВКассе = Объект.Кассы[0].Сумма;
		КонецЕсли;
		
	ИначеЕсли (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке)
		И Не ИспользуетсяНесколькоКассККМ Тогда
		
		ЕдинственнаяКассаККМ = Справочники.КассыККМ.КассаККМПоУмолчанию();
		
		Если ЗначениеЗаполнено(ЕдинственнаяКассаККМ) Тогда
			ВалютаКассыККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЕдинственнаяКассаККМ, "ВалютаДенежныхСредств");
		Иначе
			ВалютаКассыККМ = Справочники.Валюты.ПустаяСсылка();
		КонецЕсли;
		
		Если Объект.КассыККМ.Количество() > 0 Тогда
			ОстатокВКассе = Объект.КассыККМ[0].Сумма;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаСервер(Сумма, СуммаРегл, СуммаУпр, Реквизит)
	
	ДатаДокумента = Объект.Дата;
	ИмяОперации   = Объект.ХозяйственнаяОперация;
	
	Если ИмяОперации = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах Тогда
		Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Реквизит).Валюта;
	ИначеЕсли ИмяОперации = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		Или ИмяОперации = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке Тогда
		Валюта = Справочники.КассыККМ.РеквизитыКассыККМ(Реквизит).Валюта;
	ИначеЕсли ИмяОперации = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах Тогда
		Валюта = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Реквизит).Валюта;
	КонецЕсли;
	
	Если Валюта = ВалютаРегламентированногоУчета Тогда
		СуммаРегл = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаРегламентированногоУчета, ДатаДокумента);
		СуммаРегл = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
	Если Валюта = ВалютаУправленческогоУчета Тогда
		СуммаУпр = Сумма;
	Иначе
		КоэффициентПересчета = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(Валюта, ВалютаУправленческогоУчета, ДатаДокумента);
		СуммаУпр = Окр(Сумма * КоэффициентПересчета, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаВводОстатковПо.Видимость  = ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет");
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах Тогда
		
		Элементы.ГруппаБанковскиеСчета.Видимость = ИспользуетсяНесколькоСчетов;
		Элементы.ГруппаОдинСчет.Видимость        = Не ИспользуетсяНесколькоСчетов;
		Элементы.ГруппаОднаКасса.Видимость       = Ложь;
		Элементы.ГруппаКассы.Видимость           = Ложь;
		Элементы.ГруппаКассыККМ.Видимость        = Ложь;
		
		Элементы.БанковскиеСчетаЗаполнитьПоОстаткам.Видимость = 
			Не Объект.ОтражатьВОперативномУчете И (Объект.ОтражатьВБУиНУ Или Объект.ОтражатьВУУ) И НЕ Объект.Исправление;
		
		Элементы.БанковскиеСчетаСуммаРегл.Видимость = Объект.ОтражатьВОперативномУчете Или Объект.ОтражатьВБУиНУ;
		Элементы.БанковскиеСчетаСуммаУпр.Видимость  = Объект.ОтражатьВОперативномУчете Или Объект.ОтражатьВУУ;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах Тогда
		
		Элементы.ГруппаОднаКасса.Видимость       = Не ИспользуетсяНесколькоКасс;
		Элементы.ГруппаКассы.Видимость           = ИспользуетсяНесколькоКасс;
		Элементы.ГруппаБанковскиеСчета.Видимость = Ложь;
		Элементы.ГруппаОдинСчет.Видимость        = Ложь;
		Элементы.ГруппаКассыККМ.Видимость        = Ложь;
		
		Элементы.КассыЗаполнитьПоОстаткам.Видимость = Не Объект.ОтражатьВОперативномУчете И (Объект.ОтражатьВБУиНУ Или Объект.ОтражатьВУУ);
		Элементы.КассыСуммаРегл.Видимость           = Объект.ОтражатьВОперативномУчете Или Объект.ОтражатьВБУиНУ;
		Элементы.КассыСуммаУпр.Видимость            = Объект.ОтражатьВОперативномУчете Или Объект.ОтражатьВУУ;
		
	ИначеЕсли Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке
		Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах Тогда
		
		Элементы.ГруппаОднаКасса.Видимость          = Не ИспользуетсяНесколькоКассККМ;
		Элементы.ГруппаКассыККМ.Видимость           = ИспользуетсяНесколькоКассККМ;
		Элементы.ГруппаБанковскиеСчета.Видимость    = Ложь;
		Элементы.ГруппаОдинСчет.Видимость           = Ложь;
		Элементы.ГруппаКассы.Видимость              = Ложь;
		Элементы.КассыЗаполнитьПоОстаткам.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВозможностьОткрытияДокументаОтУстановленныхФО(ХозяйственнаяОперация)
	
	Результат = Ложь;	
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковНаБанковскихСчетах  Тогда
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
		
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	БанковскиеСчетаОрганизаций.Ссылка
				|ИЗ
				|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
				|ГДЕ
				|	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления
				|");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2
				И Не ИспользуетсяНесколькоСчетов Тогда
				ВызватьИсключение  НСтр("ru = 'Не удалось заполнить поле ""Банковский счет"". В информационной базе введено несколько банковских счетов организаций,
				|но при этом, не включена функциональная опция ""Использовать несколько банковских счетов"". Включите функциональную опцию ""Использовать несколько банковских счетов"".'");
			ИначеЕсли Запрос.Выполнить().Выбрать().Количество()  = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Банковский счет"". Возможно, в информационной базе не введено ни одного банковского счета организации.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	ИначеЕсли ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВКассах Тогда
		
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Касса) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	Кассы.Ссылка
				|ИЗ
				|	Справочник.Кассы КАК Кассы
				|ГДЕ
				|	НЕ Кассы.ПометкаУдаления");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2
				И Не ИспользуетсяНесколькоКасс Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Касса"". В информационной базе введено несколько касс, но при этом, 
				|не включена функциональная опция ""Использовать несколько касс"". Включите функциональную опцию ""Использовать несколько касс"".'");
			ИначеЕсли Запрос.Выполнить().Выбрать().Количество()  = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Касса"". Возможно, в информационной базе не введено ни одной кассы.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	ИначеЕсли (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМКОформлениюОтчетовОРозничныхПродажах
		Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковВАвтономныхКассахККМПоРозничнойВыручке) Тогда
		
		КассаККМ = Справочники.КассыККМ.КассаККМПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(КассаККМ) Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
				|	КассыККМ.Ссылка КАК КассаККМ
				|ИЗ
				|	Справочник.КассыККМ КАК КассыККМ
				|ГДЕ
				|	НЕ КассыККМ.ПометкаУдаления");
			
			Если Запрос.Выполнить().Выбрать().Количество() = 2 
				И Не ИспользуетсяНесколькоКассККМ Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Касса ККМ"". В информационной базе введено несколько касс ККМ,
				|Включите функциональную опцию ""Использовать несколько касс ККМ""'");
			ИначеЕсли Запрос.Выполнить().Выбрать().Количество()  = 0 Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось заполнить поле ""Касса ККМ"". Возможно, в информационной базе не введено ни одной кассы ККМ'");
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = Истина;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура АктуализироватьСписокХозяйственныхОпераций()
	
	ПараметрыОтбора = ВводОстатковСервер.ИнициализироватьПараметрыОтбораДоступныхХозяйственныхОпераций();
	ПараметрыОтбора.ДокументВводаОстатков = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
		Метаданные.Документы.ВводОстатковДенежныхСредств);
	
	ДоступныеХозяйственныеОперации = ВводОстатковСервер.ДоступныеХозяйственныеОперации(ПараметрыОтбора);
	Элементы.ХозяйственнаяОперация.СписокВыбора.ЗагрузитьЗначения(ДоступныеХозяйственныеОперации);
	
КонецПроцедуры


#КонецОбласти
