
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.СписаниеПартииОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.АннулированиеОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаны);
		Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаныЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Аннулировано);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаны);
	Статусы.Добавить(Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Аннулировано);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.СписаниеПартииКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСписанияПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.АннулированиеКПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартиийРасчетСтатуса Тогда
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.СписаниеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.СписаниеПартииОбрабатывается;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСписанияПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.АннулированиеОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.АннулированиеОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартии Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаны;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.СписаниеПартииОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСписанияПартии Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Аннулировано;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.АннулированиеОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.СписаниеПартиийРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.СписаниеПартии);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.АннулированиеСписанияПартии);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиСписанияПартииЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		
		РегистрыНакопления.ОстаткиПартийЗЕРНО.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.СписаниеПартийЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.СписаниеПартийЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.СписаниеПартийЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииЗЕРНО.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.СписаниеПартийЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#Область ОбработкаЗаполнения

Функция ЗаполнитьПартии(Объект, СписокСтрок = Неопределено) Экспорт
	
	РезультатЗаполнения = Новый Структура;
	РезультатЗаполнения.Вставить("ВсегоСтрок",       0);
	РезультатЗаполнения.Вставить("ЗаполненоСтрок",   0);
	РезультатЗаполнения.Вставить("ПроблемныхСтрок",  0);
	РезультатЗаполнения.Вставить("ИзмененныеСтроки", Новый Массив);
	
	РезультатЗаполнения.Вставить("НоменклатураНеЗаполнена", 0);
	РезультатЗаполнения.Вставить("КоличествоНеЗаполнено"  , 0);
	
	ВсеСтроки      = Новый Массив;
	СтрокиССериями = Новый Массив;
	СтрокиБезСерий = Новый Массив;
	
	Для каждого СтрокаДокумента Из Объект.Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		ИначеЕсли СписокСтрок <> Неопределено И СписокСтрок.Найти(СтрокаДокумента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеСтроки.Добавить(СтрокаДокумента);
		
		Если Не ЗначениеЗаполнено(СтрокаДокумента.Номенклатура) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.НоменклатураНеЗаполнена = РезультатЗаполнения.НоменклатураНеЗаполнена + 1;
			
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаДокумента.Количество) Тогда
			
			РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ПроблемныхСтрок + 1;
			РезультатЗаполнения.КоличествоНеЗаполнено = РезультатЗаполнения.КоличествоНеЗаполнено + 1;
			
		Иначе

			Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
				СтрокиССериями.Добавить(СтрокаДокумента);
			Иначе
				СтрокиБезСерий.Добавить(СтрокаДокумента);
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
	РезультатЗаполнения.ВсегоСтрок = СтрокиССериями.Количество() + СтрокиБезСерий.Количество() + РезультатЗаполнения.ПроблемныхСтрок;
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
		ТаблицаИсточникиРеквизитов, Объект.Организация, Объект.Подразделение);
	ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	
	Элеватор = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка();
	Если ЗначениеЗаполнено(Объект.ВладелецПартии) Тогда
		Элеватор = ВладелецПартии;
		ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
		ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
			ТаблицаИсточникиРеквизитов, Объект.ВладелецПартии, Объект.ПодразделениеВладельцаПартии);
		ВладелецПартии = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	КонецЕсли;
	Местоположение = Справочники.КлючиАдресовЗЕРНО.СопоставленныеКлючиАдресов(Объект.Склад);
	Если РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		Возврат РезультатЗаполнения.СообщениеПользователю;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Серия          КАК Серия,
	|	ТаблицаТовары.КодТНВЭД       КАК КодТНВЭД,
	|	ТаблицаТовары.ОКПД2          КАК ОКПД2,
	|	ТаблицаТовары.Партия         КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&Товары КАК ТаблицаТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	КодТНВЭД,
	|	ОКПД2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Партия КАК Партия,
	|	СУММА(ТаблицаТовары.КоличествоЗЕРНО) КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ПартииВДокументе
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТовары.Партия
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура   КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика КАК Характеристика,
	|	ТаблицаСоответствия.Серия          КАК Серия,
	|	ТаблицаСоответствия.Партия         КАК Партия,
	|	0                                  КАК Порядок
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика, ТаблицаСоответствия.Серия) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика,
	|				ТаблицаТоварыСПродукцией.Серия
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				НЕ ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура,
	|	ТаблицаСоответствия.Характеристика,
	|	&ПустаяСерия,
	|	ТаблицаСоответствия.Партия,
	|	1
	|ИЗ
	|	РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствия
	|ГДЕ
	|	(ТаблицаСоответствия.Номенклатура, ТаблицаСоответствия.Характеристика) В
	|			(ВЫБРАТЬ
	|				ТаблицаТоварыСПродукцией.Номенклатура,
	|				ТаблицаТоварыСПродукцией.Характеристика
	|			ИЗ
	|				ТаблицаТовары КАК ТаблицаТоварыСПродукцией
	|			ГДЕ
	|				ТаблицаТоварыСПродукцией.Серия В (&НезаполненныеЗначенияСерии))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Номенклатура,
	|	ТаблицаТовары.Характеристика,
	|	ТаблицаТовары.Серия,
	|	ТаблицаСоответствияПоКодам.Партия,
	|	2
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК ТаблицаСоответствияНетПартий
	|		ПО ТаблицаСоответствияНетПартий.Номенклатура = ТаблицаТовары.Номенклатура
	|		И ТаблицаСоответствияНетПартий.Характеристика = ТаблицаТовары.Характеристика
	|		И (ТаблицаСоответствияНетПартий.Серия = ТаблицаТовары.Серия
	|			ИЛИ ТаблицаТовары.Серия В (&НезаполненныеЗначенияСерии))
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК ТаблицаСоответствияПоКодам
	|		ПО ТаблицаСоответствияПоКодам.ВидПродукции = &ВидПродукции
	|		И ТаблицаСоответствияПоКодам.ВладелецПартии В (&ВладелецПартии)
	|		И ТаблицаСоответствияПоКодам.Местоположение В (&Местоположение)
	|		И ТаблицаСоответствияПоКодам.Элеватор В (&Элеватор)
	|		И ТаблицаСоответствияПоКодам.ОКПД2 = ТаблицаТовары.ОКПД2
	|		И ТаблицаСоответствияПоКодам.КодТНВЭД = ТаблицаТовары.КодТНВЭД
	|		И ТаблицаСоответствияПоКодам.Партия В (ВЫБРАТЬ Партия Из РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки)
	|ГДЕ
	|	ТаблицаСоответствияНетПартий.Серия ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КлючиПартийЗЕРНО.ОКПД2     КАК ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД  КАК КодТНВЭД,
	|	ТаблицаОстатков.Партия     КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток - ТаблицаОстатков.ВОбработкеЗЕРНООстаток КАК КоличествоЗЕРНО
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(,
	|		Партия В (ВЫБРАТЬ СписокПродукции.Партия ИЗ ТаблицаСоответствия КАК СписокПродукции)
	|		И Партия.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПартийЗЕРНО.Подписано)) КАК ТаблицаОстатков
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО КлючиПартийЗЕРНО.ВидПродукции = &ВидПродукции
	|		И КлючиПартийЗЕРНО.ВладелецПартии В (&ВладелецПартии)
	|		И КлючиПартийЗЕРНО.Местоположение В (&Местоположение)
	|		И КлючиПартийЗЕРНО.Элеватор В (&Элеватор)
	|		И КлючиПартийЗЕРНО.Партия = ТаблицаОстатков.Партия
	|ГДЕ
	|	ТаблицаОстатков.КоличествоЗЕРНООстаток > ТаблицаОстатков.ВОбработкеЗЕРНООстаток
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.ОКПД2           КАК ОКПД2,
	|	ТаблицаОстатков.КодТНВЭД        КАК КодТНВЭД,
	|	ТаблицаОстатков.Партия          КАК Партия,
	|	ТаблицаОстатков.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствия.Номенклатура            КАК Номенклатура,
	|	ТаблицаСоответствия.Характеристика          КАК Характеристика,
	|	ТаблицаСоответствия.Серия                   КАК Серия,
	|	ТаблицаСоответствия.Партия                  КАК Партия";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВидПродукции",   Объект.ВидПродукции);
	Запрос.УстановитьПараметр("ВладелецПартии", ВладелецПартии);
	Запрос.УстановитьПараметр("Местоположение", Местоположение);
	Запрос.УстановитьПараметр("Элеватор",       Элеватор);
	
	Запрос.УстановитьПараметр("НезаполненныеЗначенияСерии", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("СерияНоменклатуры"));
	Запрос.УстановитьПараметр("ПустаяСерия",                ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
	
	СписокКолонок = "Номенклатура, Характеристика, Серия, Партия, КодТНВЭД, ОКПД2, КоличествоЗЕРНО";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(, СписокКолонок));
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаОстатки = Результат[Результат.ВГраница()-1].Выгрузить();
	
	Если ТаблицаОстатки.Количество() = 0 Тогда
		Возврат РезультатЗаполнения.СообщениеПользователю;
	КонецЕсли;
	
	ТаблицаСоответствия = Результат[Результат.ВГраница()].Выгрузить();
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика, Серия");
	ТаблицаСоответствия.Индексы.Добавить("Номенклатура, Характеристика");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Товары", Объект.Товары);
	ПараметрыЗаполнения.Вставить("ТаблицаОстатки", ТаблицаОстатки);
	ПараметрыЗаполнения.Вставить("ТаблицаСоответствия", ТаблицаСоответствия);
	
	ЗаполнитьВСтрокахПартии(СтрокиССериями, ПараметрыЗаполнения, РезультатЗаполнения);
	ЗаполнитьВСтрокахПартии(СтрокиБезСерий, ПараметрыЗаполнения, РезультатЗаполнения);
	
	ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения);
	
	Возврат РезультатЗаполнения.СообщениеПользователю;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.СписаниеПартийЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("ТребуетРезервированияПартии", Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ТребуетРезервированияПартии());
	Запрос.УстановитьПараметр("ТребуетСписанияПартии", Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ТребуетСписанияПартии());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетСписанияПартии)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	ТаблицаТовары.Партия                    КАК Партия,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетСписанияПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоЗЕРНО,
	|	ВЫБОР
	|		КОГДА &СтатусОбработки В (&ТребуетРезервированияПартии)
	|			ТОГДА ТаблицаТовары.КоличествоЗЕРНО
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеЗЕРНО
	|ИЗ
	|	Документ.СписаниеПартийЗЕРНО.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И (&СтатусОбработки В (&ТребуетСписанияПартии)
	|		ИЛИ &СтатусОбработки В (&ТребуетРезервированияПартии))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.СписаниеПартийЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт

	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		Возврат СообщенияСписанийПартий(СсылкаНаОбъект, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		Возврат СообщенияАннулированиеСписанияПартий(СсылкаНаОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Формирует XML сообщения для списания партий зерна и продуктов переработки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ Списание партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СообщенияСписанийПартий(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартии;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеПартийЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ПричинаСписания                    КАК ПричинаСписания,
	|	Шапка.ОписаниеПричины                    КАК ОписаниеПричины,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|	ЕСТЬNULL(ПричиныСписания.Идентификатор, """") КАК ПричинаСписанияИдентификатор,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.СписаниеПартийЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК ПричиныСписания
	|		ПО Шапка.ПричинаСписания = ПричиныСписания.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Партия              КАК Партия,
	|	Товары.КодТНВЭД            КАК КодТНВЭД,
	|	Товары.ОКПД2               КАК ОКПД2,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Характеристика      КАК Характеристика,
	|	Товары.Серия               КАК Серия,
	|	Товары.Количество          КАК Количество,
	|	Товары.КоличествоЗЕРНО     КАК КоличествоЗЕРНО,
	|	Товары.Идентификатор       КАК ИдентификаторСтроки,
	|	РеестрПартий.Идентификатор КАК НомерПартии
	|
	|ИЗ
	|	Документ.СписаниеПартийЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартий
	|		ПО Товары.Партия = РеестрПартий.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции = Шапка.ВидПродукции;
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.СписаниеПартиийРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateGpbDebit";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCreateLotDebit";
	КонецЕсли;
	
	ИмяПоляНомерПартии = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерПартииПоВидуПродукции(ВидПродукции);
	
	Для Каждого СтрокаПартии Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо            = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки    = СтрокаПартии.ИдентификаторСтроки;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), СтрокаПартии.Партия);
		СообщениеXML.ПараметрыЗапроса.Вставить("Партия", СтрокаПартии.Партия);
		
		СписаниеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СписаниеПартииXDTO, "amount",  СтрокаПартии.КоличествоЗЕРНО, СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СписаниеПартииXDTO, "comment", Шапка.ОписаниеПричины, СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СписаниеПартииXDTO, "Reason",  Шапка.ПричинаСписанияИдентификатор, СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СписаниеПартииXDTO, ИмяПоляНомерПартии, СтрокаПартии.НомерПартии, СообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			СписаниеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует XML сообщения для аннулирования списания партий зерна и продуктов переработки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ Списание партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СообщенияАннулированиеСписанияПартий(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML     = Новый Массив();
	СписокЗапросов   = Новый СписокЗначений;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСписанияПартии;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыОбмена  = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеПартийЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ПричинаСписания                    КАК ПричинаСписания,
	|	Шапка.ОписаниеПричины                    КАК ОписаниеПричины,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.СписаниеПартийЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.Партия               КАК Партия,
	|	Товары.Номенклатура         КАК Номенклатура,
	|	Товары.Характеристика       КАК Характеристика,
	|	Товары.Серия                КАК Серия,
	|	Товары.Количество           КАК Количество,
	|	Товары.КоличествоЗЕРНО      КАК КоличествоЗЕРНО,
	|	Товары.Идентификатор        КАК ИдентификаторСтроки,
	|	Статусы.ИдентификаторЗаявки КАК ИдентификаторЗаявки
	|
	|ИЗ
	|	Документ.СписаниеПартийЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
	|		ПО Товары.Ссылка = Статусы.ОбъектСинхронизации
	|		И Товары.Идентификатор = Статусы.ИдентификаторСтроки
	|		И Товары.Идентификатор В (&ИдентификаторСтроки)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",            Операция);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ПараметрыЗапроса);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Шапка.Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	ВидПродукции      = Шапка.ВидПродукции;
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledGpbDebit";
		ИмяПоляНомерЗаявки = "gpbDebitId";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_lots", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledLotDebit";
		ИмяПоляНомерЗаявки = "lotDebitId";
	КонецЕсли;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.СписаниеПартиийРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Для Каждого СтрокаПартии Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо            = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки    = СтрокаПартии.ИдентификаторСтроки;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), СтрокаПартии.Партия);
		СообщениеXML.ПараметрыЗапроса.Вставить("Партия", СтрокаПартии.Партия);
		
		СписаниеПартииXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ИдентификаторЗаявки = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаПартии.ИдентификаторЗаявки);
		Если Не ЗначениеЗаполнено(ИдентификаторЗаявки) Тогда
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки. Отсутствует идентификатор заявки.'"));
			СообщенияXML.Добавить(СообщениеXML);
			Продолжить;
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СписаниеПартииXDTO, ИмяПоляНомерЗаявки, ИдентификаторЗаявки, СообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			СписаниеПартииXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
		
		СообщенияXML.Добавить(СообщениеXML);
	
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ИдентификаторСтроки          = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартиийРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		Статусы.Принят = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект);
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.СписаниеПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаны, Новый Массив());
		ПараметрыОбновления.ИдентификаторСтроки = ИдентификаторСтроки;
		ПараметрыОбновления.ИдентификаторЗаявки = Формат(ПолученныеДанные.id, "ЧГ=0;");
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект, ПараметрыОбновления);
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		ИзмененныеОбъекты.Добавить(РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Партия);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.АннулированиеСписанияПартии Тогда
		
		Если ВРег(ПолученныеДанные.resultOperation) = "DONE" Тогда
			
			Если ЭлементОчереди.ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
				ИмяПоляНомерЗаявки = "gpbDebitId";
			Иначе
				ИмяПоляНомерЗаявки = "lotDebitId";
			КонецЕсли;
			
			ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
				Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Аннулировано, Новый Массив());
			ПараметрыОбновления.ИдентификаторСтроки = ИдентификаторСтроки;
			ПараметрыОбновления.ИдентификаторЗаявки = Формат(ПолученныеДанные[ИмяПоляНомерЗаявки], "ЧГ=0;");
			
			РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
				ЭлементОчереди.СсылкаНаОбъект, ПараметрыОбновления);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультирующийСтатусДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СписаниеПартийЗЕРНОТовары.Идентификатор                          КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
		|ИЗ
		|	Документ.СписаниеПартийЗЕРНО.Товары КАК СписаниеПартийЗЕРНОТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО СписаниеПартийЗЕРНОТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = СписаниеПартийЗЕРНОТовары.Идентификатор
		|ГДЕ
		|	СписаниеПартийЗЕРНОТовары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ЕстьСписано      = Ложь;
	ЕстьАннулировано = Ложь;
	ЕстьОшибки       = Ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаны Тогда
			ЕстьСписано = Истина;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Аннулировано Тогда
			ЕстьАннулировано = Истина;
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьАннулировано И Не ЕстьСписано Тогда
		Статус = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Аннулировано;
	ИначеЕсли ЕстьАннулировано И ЕстьСписано
		Или ЕстьСписано И ЕстьОшибки Тогда
		Статус = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаныЧастично;
	ИначеЕсли Не ЕстьАннулировано И ЕстьСписано Тогда
		Статус = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.ПартииСписаны;
	Иначе
		Статус = Перечисления.СтатусыОбработкиСписанияПартииЗЕРНО.Ошибка;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

#Область ОбработкаЗаполнения

Процедура ЗаполнитьВСтрокахПартии(СписокСтрокДокумента, ПараметрыЗаполнения, РезультатЗаполнения)
	
	ТаблицаСоответствия = ПараметрыЗаполнения.ТаблицаСоответствия;
	
	Для каждого СтрокаДокумента Из СписокСтрокДокумента Цикл
		
		ОсталосьЗаполнить = СтрокаДокумента.КоличествоЗЕРНО;
		
		Если ЗначениеЗаполнено(СтрокаДокумента.Партия) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",   СтрокаДокумента.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", СтрокаДокумента.Характеристика);
		Если ЗначениеЗаполнено(СтрокаДокумента.Серия) Тогда
			СтруктураПоиска.Вставить("Серия", СтрокаДокумента.Серия);
		КонецЕсли;
		СписокСтрокСоответствия = ТаблицаСоответствия.НайтиСтроки(СтруктураПоиска);
		
		ЗаполнитьПартииПоСтрокеДокументаИСоответствию(
			СтрокаДокумента,
			СписокСтрокСоответствия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
		
		Если ОсталосьЗаполнить = 0 Тогда
			РезультатЗаполнения.ЗаполненоСтрок = РезультатЗаполнения.ЗаполненоСтрок + 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартииПоСтрокеДокументаИСоответствию(СтрокаДокумента, СписокСтрокСоответствия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)
	
	Для каждого СтрокаСоответствие Из СписокСтрокСоответствия Цикл
		
		ЗаполнитьПартиюПоСтрокеДокумента(
			СтрокаДокумента,
			СтрокаСоответствие.Партия,
			ПараметрыЗаполнения,
			ОсталосьЗаполнить,
			РезультатЗаполнения);
			
		Если ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПартиюПоСтрокеДокумента(СтрокаДокумента, Партия, ПараметрыЗаполнения, ОсталосьЗаполнить, РезультатЗаполнения)

	Товары = ПараметрыЗаполнения.Товары;
	ТаблицаОстатки = ПараметрыЗаполнения.ТаблицаОстатки;
	
	Отбор = Новый Структура("Партия", Партия);
	ОстаткиПоПартии = ТаблицаОстатки.НайтиСтроки(Отбор);
	Для Каждого СтрокаОстатки Из ОстаткиПоПартии Цикл
		
		Если СтрокаОстатки.КоличествоЗЕРНО <= 0 Тогда
			Продолжить;
		ИначеЕсли ОсталосьЗаполнить = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Выделим новую строку если остатка не хватит
		Если СтрокаОстатки.КоличествоЗЕРНО < ОсталосьЗаполнить Тогда
			
			НоваяСтрока = Товары.Вставить(Товары.Индекс(СтрокаДокумента) + 1);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);
			НоваяСтрока.Партия = СтрокаОстатки.Партия;
			
			Коэффициент = СтрокаОстатки.КоличествоЗЕРНО / НоваяСтрока.КоличествоЗЕРНО;
			НоваяСтрока.КоличествоЗЕРНО = СтрокаОстатки.КоличествоЗЕРНО;
			НоваяСтрока.Количество = НоваяСтрока.Количество * Коэффициент;
			
			СтрокаДокумента.КоличествоЗЕРНО = СтрокаДокумента.КоличествоЗЕРНО - НоваяСтрока.КоличествоЗЕРНО;
			СтрокаДокумента.Количество = СтрокаДокумента.Количество - НоваяСтрока.Количество;
			
			ОсталосьЗаполнить = ОсталосьЗаполнить - СтрокаОстатки.КоличествоЗЕРНО;
			СтрокаОстатки.КоличествоЗЕРНО = 0;
			
			РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ВсегоСтрок + 1;
			
		Иначе
			
			СтрокаДокумента.Партия = СтрокаОстатки.Партия;
			Коэффициент = ОсталосьЗаполнить / СтрокаДокумента.КоличествоЗЕРНО;
			СтрокаДокумента.КоличествоЗЕРНО = ОсталосьЗаполнить;
			СтрокаДокумента.Количество = СтрокаДокумента.Количество * Коэффициент;
			
			ОсталосьЗаполнить = 0;
			СтрокаОстатки.КоличествоЗЕРНО = СтрокаОстатки.КоличествоЗЕРНО - СтрокаДокумента.КоличествоЗЕРНО;
			
		КонецЕсли;
		
		РезультатЗаполнения.ЗаполненоСтрок = РезультатЗаполнения.ЗаполненоСтрок + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьСообщениеОЗавершенииЗаполненияПартий(РезультатЗаполнения)

	Если РезультатЗаполнения = Неопределено Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Требуется заполнить реквизит Номенклатура'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = 0 Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение не требуется'");
		КартинкаСообщения = БиблиотекаКартинок.Информация32;
		
	ИначеЕсли РезультатЗаполнения.ВсегоСтрок = РезультатЗаполнения.ЗаполненоСтрок Тогда
		
		ЗаголовокСообщения = "";
		ТекстСообщения = НСтр("ru = 'Заполнение успешно завершено'");
		КартинкаСообщения = БиблиотекаКартинок.Успешно32;
		
	ИначеЕсли РезультатЗаполнения.ПроблемныхСтрок = РезультатЗаполнения.ВсегоСтрок Тогда
		
		ЧастиСтрок = Новый Массив;
		ЧастиСтрок.Добавить(НСтр("ru = 'Требуется заполнить'"));
		Если РезультатЗаполнения.НоменклатураНеЗаполнена > 0 И РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизиты Номенклатура и Количество'"));
		ИначеЕсли РезультатЗаполнения.НоменклатураНеЗаполнена > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Номенклатура'"));
		ИначеЕсли РезультатЗаполнения.КоличествоНеЗаполнено > 0 Тогда
			ЧастиСтрок.Добавить(НСтр("ru = 'реквизит Количество'"));
		КонецЕсли;
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = СтрСоединить(ЧастиСтрок, " ");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	ИначеЕсли РезультатЗаполнения.ЗаполненоСтрок <> 0 Тогда
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение выполнено частично'");
		
		Если РезультатЗаполнения.ПроблемныхСтрок <> 0 Тогда
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции и не заполнены обязательные реквизиты'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Недостаточно остатков продукции'");
		КонецЕсли; 
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	Иначе
		
		ЗаголовокСообщения = НСтр("ru = 'Заполнение не выполнено'");
		ТекстСообщения = НСтр("ru = 'Нет остатков продукции'");
		КартинкаСообщения = БиблиотекаКартинок.Предупреждение32;
		
	КонецЕсли;
	
	СообщениеПользователю = Новый Структура;
	СообщениеПользователю.Вставить("ЗаголовокСообщения", ЗаголовокСообщения);
	СообщениеПользователю.Вставить("ТекстСообщения", ТекстСообщения);
	СообщениеПользователю.Вставить("КартинкаСообщения", КартинкаСообщения);
	
	РезультатЗаполнения.Вставить("СообщениеПользователю", СообщениеПользователю);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
