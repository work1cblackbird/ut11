#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ПланированиеЗапасов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПланПродажПоКатегориям") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ТекстЗапросаПланПродажПоКатегориям(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "План продаж по категориям".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПланПродажПоКатегориям) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ПланПродажПоКатегориям.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПланПродажПоКатегориям);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьПланированиеПродажПоКатегориям";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
	
КонецПроцедуры

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - ПеречислениеСсылка.СтатусыПланов - Новый статус плана
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "ПланПродажПоКатегориям" отсутствуют дополнительные проверки
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Формирует структуру дополнительных реквизитов по документу
//
// Параметры:
// Параметры     - Структура - Значения дополнительных реквизитов
// ДопПараметры  - Структура - Состав операндов по указанному виду плана и сценарию.
//
Процедура ДополнительныеПараметрыДляРасчетаПоФормуле(Параметры, ДопПараметры) Экспорт
	
	ВидПлана                  = Параметры.ВидПланаРеквизиты;
	Сценарий                  = Параметры.СценарийРеквизиты;
	ПутьКРеквизиту            = Параметры.ПутьКРеквизиту;
	ЭтоПланПродажПоКатегориям = ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродажПоКатегориям;
	ЭтоПланПродаж             = ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланПродаж;
	ЭтоПланОстатков 			= ВидПлана.ТипПлана = Перечисления.ТипыПланов.ПланОстатков;
	
	ИспользоватьПланированиеПродажПоКатегориям = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродажПоКатегориям") 
		И Сценарий.ИспользоватьВПланированииПродажПоКатегориям
		И Не Сценарий.ИспользоватьРасчетПоСкоростиПродаж;
	ИспользоватьРасчетПоСкоростиПродаж = ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродажПоКатегориям") 
		И Сценарий.ИспользоватьВПланированииПродажПоКатегориям
		И Сценарий.ИспользоватьРасчетПоСкоростиПродаж;
	ИспользоватьПланыПродаж 	= ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродаж") 
		И Сценарий.ИспользоватьВПланированииПродаж;
	
	СоздаватьРеквизитСОтбором = ВидПлана.ЗаполнятьПартнера 
		Или ВидПлана.ЗаполнятьФорматМагазина 
		Или ВидПлана.ЗаполнятьСклад 
		Или (ВидПлана.ЗаполнятьПодразделение И (ЭтоПланПродаж ИЛИ ЭтоПланПродажПоКатегориям))
		Или (Сценарий.ПланированиеПоНазначениям И Не ВидПлана.ЗаполнятьНазначениеВТЧ);
	
	
#Область ПланыПродажПоКатегориям
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориям");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПродажПоКатегориям
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланированиеПродажПоКатегориям 
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыПланы");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориям", ДопПараметр);
#КонецОбласти
	
#Область ПланыПродажПоКатегориямСОтбором
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориямСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьПланированиеПродажПоКатегориям 
		И СоздаватьРеквизитСОтбором
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьПланированиеПродажПоКатегориям 
		И СоздаватьРеквизитСОтбором
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям*'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыПланыСОтбором");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориямСОтбором", ДопПараметр);
#КонецОбласти

#Область ПланыПродажПоКатегориямПоСкоростиПродаж
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориямПоСкоростиПродаж");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям (по скорости продаж)'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьРасчетПоСкоростиПродаж 
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьРасчетПоСкоростиПродаж 
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям (по скорости продаж)'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыПланы");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориямПоСкоростиПродаж", ДопПараметр);
#КонецОбласти
	
#Область ПланыПродажПоКатегориямПоСкоростиПродажСОтбором
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ПланыПродажПоКатегориямПоСкоростиПродажСОтбором");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			НСтр("ru='План продаж по категориям (по скорости продаж)*'"));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ИспользоватьРасчетПоСкоростиПродаж 
		И СоздаватьРеквизитСОтбором 
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", 	ИспользоватьРасчетПоСкоростиПродаж 
		И СоздаватьРеквизитСОтбором 
		И (ЭтоПланПродаж 
			Или ЭтоПланПродажПоКатегориям 
			Или Не ИспользоватьПланыПродаж));
	ДопПараметр.Вставить("ЗаголовокОперанда", 	НСтр("ru='План продаж по категориям (по скорости продаж)*'"));
	ДопПараметр.Вставить("Расшифровка", 		"Документ.ПланПродажПоКатегориям");
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыПланыСОтбором");
	
	ДопПараметры.Вставить("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором", ДопПараметр);
#КонецОбласти

#Область ФактПродажПоКатегориям
	// Свойства реквизита формы
	ДопПараметр = Новый Структура();
	ДопПараметр.Вставить("Имя", 				"ФактПродажПоКатегориям");
	ДопПараметр.Вставить("Тип", 				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ДопПараметр.Вставить("Путь", 				ПутьКРеквизиту);
	ДопПараметр.Вставить("Заголовок", 			?(СоздаватьРеквизитСОтбором, НСтр("ru='Факт продаж по категориям*'"), 
		НСтр("ru='Факт продаж по категориям'")));
	ДопПараметр.Вставить("СоздаватьРеквизит", 	ЭтоПланПродажПоКатегориям);
	ДопПараметр.Вставить("УдалятьРеквизитыТаблицы", Истина);
	
	// Общие свойства
	ДопПараметр.Вставить("СоздаватьОперанд", ЭтоПланПродажПоКатегориям);
	ДопПараметр.Вставить("ЗаголовокОперанда", ?(СоздаватьРеквизитСОтбором, НСтр("ru='Факт продаж по категориям*'"), 
		НСтр("ru='Факт продаж по категориям'")));
	ДопПараметр.Вставить("ВходитВОперанд",		"ДополнительныеОперандыФакты");
	
	ДопПараметры.Вставить("ФактПродажПоКатегориям", ДопПараметр);
#КонецОбласти

КонецПроцедуры

// Возвращает макеты операндов для данного плана
//
// Параметры:
//  Макеты  - Соответствие - Общий список макетов, в который добавляются макеты этого документа.
//
// Возвращаемое значение:
//   Соответствие   - Макеты для операндов.
//
Функция МакетыОперандовПлана(Макеты = Неопределено) Экспорт

	Если Макеты = Неопределено Тогда
		Макеты = Новый Соответствие;
	КонецЕсли; 
	
	Макеты.Вставить("ПланыПродажПоКатегориям",                         ПолучитьМакет("СКД_ПланыПродажПоКатегориям"));
	Макеты.Вставить("ПланыПродажПоКатегориямСОтбором",                 ПолучитьМакет("СКД_ПланыПродажПоКатегориямСОтбором"));
	Макеты.Вставить("ПланыПродажПоКатегориямПоСкоростиПродаж",         ПолучитьМакет("СКД_ПланыПродажПоКатегориямПоСкоростиПродаж"));
	Макеты.Вставить("ПланыПродажПоКатегориямПоСкоростиПродажСОтбором", ПолучитьМакет("СКД_ПланыПродажПоКатегориямПоСкоростиПродажСОтбором"));
	Макеты.Вставить("ФактПродажПоКатегориям",                          ПолучитьМакет("СКД_ФактПродажПоКатегориям"));
	Макеты.Вставить("ТоварныеКатегории",                               ПолучитьМакет("СКД_ТоварныеКатегории"));
	Макеты.Вставить("ТоварныеКатегорииСкладаФормат",                   ПолучитьМакет("СКД_ТоварныеКатегорииСкладаФормат"));
	
	Возврат Макеты;

КонецФункции

// Процедура заполняет табличную часть документа по формулам или по правилу заполнения по источникам данных планирования,
// предназначена для заполнения документа в фоне.
//
// Параметры:
//  Параметры  - Структура - Настройки для заполнения
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//  АдресХранилищаДополнительный - Строка.
//
Процедура ЗаполнитьДокумент(Знач Параметры, Знач АдресХранилища, Знач АдресХранилищаДополнительный = "") Экспорт
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Параметры.КлючОбщихНастроек, 
		"НастройкиФоновогоЗадания_"+Параметры.УникальныйИдентификатор);
	
	Если ТипЗнч(Настройки) <> Тип("Структура") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Периоды", Настройки.Периоды);
	
	Если Параметры.Свойство("ЗаполнятьПоФормуле") Тогда
		
		Параметры.Вставить("ЗаполняемаяТЧ", Настройки.ЗаполняемаяТЧ);
		ЗаполнитьДокументПоФормуле(Параметры, АдресХранилища, АдресХранилищаДополнительный);
		
	ИначеЕсли Параметры.Свойство("ЗаполнятьПоПравилу") Тогда
		
		Параметры.Вставить("ПравилоЗаполнения", Настройки.ПравилоЗаполнения);
		Параметры.Вставить("ПользовательскиеНастройки", Настройки.ПользовательскиеНастройки);
		Параметры.Вставить("ЗаполняемаяТЧ", Настройки.ЗаполняемаяТЧ);
		
		ЗаполнитьПоПравилуЗаполнения(Параметры, АдресХранилища);
		
	ИначеЕсли Параметры.Свойство("ЗаполнитьДляЗамещения") Тогда
		
		Параметры.Вставить("ЗаполняемаяТЧ", Настройки.ЗаполняемаяТЧ);
		ЗаполнитьДокументДляЗамещения(Параметры, АдресХранилища);
		
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить(Параметры.КлючОбщихНастроек, 
		"НастройкиФоновогоЗадания_"+Параметры.УникальныйИдентификатор, Пользователи.ТекущийПользователь());
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по формулам
// Параметры:
//  Параметры  - Структура - Настройки для заполнения:
//  	* ЗаполняемаяТЧ - ТаблицаЗначений -
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//  АдресХранилищаДополнительный - Строка.
//
Процедура ЗаполнитьДокументПоФормуле(Знач Параметры, Знач АдресХранилища, Знач АдресХранилищаДополнительный) Экспорт
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("Документ.ПланПродажПоКатегориям.МодульМенеджера.ЗаполнитьДокументПоФормуле");
	
	Если Не Параметры.Свойство("ЗаполнятьПоФормуле") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаОтгрузки";
	
	Периоды = Параметры.Периоды;
	Планирование.ПодготовитьТаблицуПериодовПередЗаполнением(Параметры);
	Планирование.ЗаполнитьТаблицуПериодов(Периоды, Параметры.Периодичность, Параметры.НачалоПериодаСмещения, Параметры.КонецПериодаСмещения,,, Параметры.НачалоАктивныхПериодов);
	
	НайденныеСтрокиПериодов = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, АдресХранилища);
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаДополнительный);
		
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Периоды", Периоды); 
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	КолонкаПериода = ЗаполняемаяТЧ.Колонки[ИмяКолонкиПериода]; // КолонкаТаблицыЗначений - 
	КолонкаПериода.Имя = "ПериодСостава";
	
	Результат = Планирование.ЗаполнитьПоФормуле(Параметры);
	
	Если Результат.Колонки.Найти("ПериодСостава") = Неопределено Тогда
		Результат.Колонки.Добавить("ПериодСостава", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата))
	КонецЕсли; 
	
	Результат.Колонки["ПериодСостава"].Имя = ИмяКолонкиПериода;
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	Если Параметры.НачалоАктивныхПериодов > Параметры.НачалоПериодаСмещения Тогда
		ПоместитьВоВременноеХранилище(Периоды, АдресХранилищаДополнительный);
	Иначе
		ПоместитьВоВременноеХранилище(Неопределено, АдресХранилищаДополнительный);
	КонецЕсли;
	
	КоличествоОбработанных = Периоды.Количество();
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, КоличествоОбработанных);
	
КонецПроцедуры

// Процедура заполняет табличную часть документа по правилу заполнения из различных источников.
//
// Параметры:
//  Параметры  - Структура - Настройки для заполнения:
//  	* ЗаполняемаяТЧ - ТаблицаЗначений -
//  	* Периоды см. Планирование.ТаблицаПериоды
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания
//  Настройки  - Структура - Дополнительные настройки для заполнения, Правило заполнения, пользовательские настройки, ТЧ
//                           заполнения.
//
Процедура ЗаполнитьПоПравилуЗаполнения(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Если Не Параметры.Свойство("ЗаполнятьПоПравилу") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаОтгрузки";
	
	Периоды = Параметры.Периоды;
	
	НайденныеСтрокиПериодов = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	Коэффициенты = Новый Массив;
	Для Индекс = 1 По ВсегоПериодов Цикл
		Коэффициенты.Добавить(1);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыДанных", Планирование.ПолучитьПараметрыПлана(Параметры));
	Если Параметры.Свойство("Отбор") Тогда
		ДополнительныеПараметры.Вставить("Отбор", Параметры.Отбор);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ИзменитьРезультатНа) Тогда
		
		ДополнительныеПараметры.ПараметрыДанных.Вставить("Коэффициент", (100 + Параметры.ИзменитьРезультатНа) / 100);
		
	КонецЕсли;
	
	ПравилоЗаполнения = Параметры.ПравилоЗаполнения;
	ПользовательскиеНастройки = Параметры.ПользовательскиеНастройки;
	
	
	Результат = Планирование.ВыбратьДанныеПоПравилам(
		Перечисления.ТипыПланов.ПланПродажПоКатегориям, 
		ПравилоЗаполнения, 
		ПользовательскиеНастройки, 
		ДополнительныеПараметры);
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	Если Результат <> Неопределено Тогда
		
		РазрядностьОкругления = Параметры.ТочностьОкругления + 3;
		
		Для каждого СтрокаРезультата Из Результат Цикл
			
			Если Параметры.ТочностьОкругления <> 0 Тогда
				ИмяФункции = НСтр("ru = 'Окр(%1; %2)'");
				СтрокаРезультата.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяФункции, СтрокаРезультата.Расшифровка, Pow(10, -РазрядностьОкругления));
				СтрокаРезультата.ЧисловоеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИмяФункции, СтрокаРезультата.ЧисловоеПредставление, Pow(10, -РазрядностьОкругления));
			КонецЕсли;
			
			Если СтрокаРезультата.Количество = null Тогда
				Продолжить;
			КонецЕсли;
			
			Если Цел(СтрокаРезультата.Количество * Pow(10, РазрядностьОкругления)) = 0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Количество = Окр(СтрокаРезультата.Количество, РазрядностьОкругления);
			
			Если Параметры.КроссТаблица Тогда
				
				Если ЗначениеЗаполнено(СтрокаРезультата.Период) 
					И СтрокаРезультата.Период >= Параметры.НачалоПериода 
					И СтрокаРезультата.Период <= Параметры.ОкончаниеПериода Тогда
					
					// Распределять по периодам не требуется
					СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " = " + СтрокаРезультата.ЧисловоеПредставление;
				
					Если СтрокаРезультата.ЧисловоеПредставление <> Строка(Количество) Тогда
						СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " = " + Строка(Количество);
					КонецЕсли;
					
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
					
					НоваяСтрока.Количество = Количество;
					НоваяСтрока[ИмяКолонкиПериода] = СтрокаРезультата.Период;
					
					Продолжить;
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаРезультата.Период) Тогда
					// Исключаем строку т.к. не попадает в заданный период плана
					Продолжить;
					
				КонецЕсли; 
				
				Если СтрокаРезультата.Количество < 0 Тогда
					ЗнакКоличества = -1;
				Иначе
					ЗнакКоличества = 1;
				КонецЕсли;
				
				РаспределениеКоличества = Планирование.РаспределитьСуммуПропорциональноКоэффициентам(ЗнакКоличества * СтрокаРезультата.Количество, Коэффициенты, РазрядностьОкругления);
				Если РаспределениеКоличества = Неопределено Тогда
					
					СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " = " + СтрокаРезультата.ЧисловоеПредставление;
					
					Если СтрокаРезультата.ЧисловоеПредставление <> Строка(Количество) Тогда
						СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " = " + Строка(Количество);
					КонецЕсли;
					
					Продолжить;
				КонецЕсли; 
				
				// При равномерном распределении остаток округления вычитается из первого элемента, поэтому обнуляем если ушел в минус.
				Если РаспределениеКоличества[0] < 0 Тогда
					РаспределениеКоличества[0] = 0;
				КонецЕсли;
				
				СтрокаРезультата.Расшифровка = "(" + СтрокаРезультата.Расшифровка + ") * " + НСтр("ru = 'Коэфф распределения'");
				СтрокаРезультата.ЧисловоеПредставление = "(" + СтрокаРезультата.ЧисловоеПредставление + ") * ";
				// Распределение производим начиная с последнего элемента, т.к. первый может быть меньше остальных.
				Индекс = РаспределениеКоличества.ВГраница();
				Пока Индекс >= 0 Цикл
				
					Количество = РаспределениеКоличества[Индекс];
					ДатаПериода = НайденныеСтрокиПериодов[НайденныеСтрокиПериодов.ВГраница() - Индекс].ДатаНачала;
					Индекс = Индекс - 1;
					
					Если Количество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = ЗаполняемаяТЧ.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
					
					НоваяСтрока.Количество = ЗнакКоличества * Количество;
					НоваяСтрока[ИмяКолонкиПериода] = ДатаПериода;
					
					НоваяСтрока.Расшифровка = СтрокаРезультата.Расшифровка + " = "
						+ СтрокаРезультата.ЧисловоеПредставление
						+ Строка(Окр(НоваяСтрока.Количество/СтрокаРезультата.Количество, 3, 1))
						+ " = " + Строка(НоваяСтрока.Количество);
				КонецЦикла; 
				
			Иначе
				
				СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " = " + СтрокаРезультата.ЧисловоеПредставление;
				
				Если СтрокаРезультата.ЧисловоеПредставление <> Строка(Количество) Тогда
					СтрокаРезультата.Расшифровка = СтрокаРезультата.Расшифровка + " = " + Строка(Количество);
				КонецЕсли;
				
				НоваяСтрока = ЗаполняемаяТЧ.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультата);
				НоваяСтрока.Количество = Количество;
				НоваяСтрока[ИмяКолонкиПериода] = СтрокаРезультата.Период;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ЗаполняемаяТЧ, АдресХранилища);
	
КонецПроцедуры

// Процедура заполняет табличную часть документа из регистра
// Параметры:
//  Параметры  - Структура - Настройки для заполнения:
//  	* ЗаполняемаяТЧ - ТаблицаЗначений -
//  АдресХранилища - Строка - Адрес временного хранилища, в которое будет помещен результат работы задания.
//
Процедура ЗаполнитьДокументДляЗамещения(Знач Параметры, Знач АдресХранилища) Экспорт
	
	Если Не Параметры.Свойство("ЗаполнитьДляЗамещения") Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяКолонкиПериода = "ДатаОтгрузки";
	
	Периоды = Параметры.Периоды;
	
	НайденныеСтрокиПериодов = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	ВсегоПериодов = НайденныеСтрокиПериодов.Количество();
	Если Параметры.КроссТаблица И ВсегоПериодов = 0 Тогда 
		
		ПоместитьВоВременноеХранилище(Новый ТаблицаЗначений, АдресХранилища);
		Возврат;
		
	КонецЕсли;
	
	Параметры.Вставить("Периоды", Периоды); 
	
	ЗаполняемаяТЧ = Параметры.ЗаполняемаяТЧ;
	
	КолонкаПериода = ЗаполняемаяТЧ.Колонки[ИмяКолонкиПериода]; // КолонкаТаблицыЗначений - 
	КолонкаПериода.Имя = "ПериодСостава";
	
	Результат = Планирование.ЗаполнитьДляЗамещения(Параметры);
	
	Если Результат.Колонки.Найти("ПериодСостава") = Неопределено Тогда
		Результат.Колонки.Добавить("ПериодСостава", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата))
	КонецЕсли; 
	
	Результат.Колонки["ПериодСостава"].Имя = ИмяКолонкиПериода;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры


// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//  Возвращаемое значение:
//  См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	
	// Все назначения для поля Назначение в таблице товарных категорий.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Ложь, "Объект.ТоварныеКатегории.Назначение");
	
	// Все назначения для поля Назначение в таблице товарных категорий по периодам.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Ложь, "Объект.ТоварныеКатегорииПоПериодам.Назначение");
	
	// Все назначения для поля Назначение в шапке документа.
	ОписаниеКолонок = Справочники.Назначения.ДобавитьОписаниеКолонок(МакетФормы, "ВсеНазначения", Ложь, "Объект.Назначение");
	
	Возврат МакетФормы;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(Склад)
	|	И ЗначениеРазрешено(Сценарий)
	|	И ЗначениеРазрешено(ВидПлана)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ФорматМагазина КАК ФорматМагазина,
	|	ДанныеДокумента.Сценарий КАК Сценарий,
	|	ДанныеДокумента.ВидПлана КАК ВидПлана,
	|	ДанныеДокумента.Замещающий КАК Замещающий,
	|	ДанныеДокумента.ОкончаниеПериода КАК ОкончаниеПериода,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.Назначение КАК Назначение,
	|	ДанныеДокумента.ВидПлана.ЗаполнятьНазначениеВТЧ КАК ЗаполнятьНазначениеВТЧ
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	Реквизиты = РезультатыЗапроса[0].Выбрать();
	Реквизиты.Следующий();
	
	
	Запрос.УстановитьПараметр("НачалоПериода",             Реквизиты.НачалоПериода);
	Запрос.УстановитьПараметр("Статус",                    Реквизиты.Статус);
	Запрос.УстановитьПараметр("Подразделение",             Реквизиты.Подразделение);
	Запрос.УстановитьПараметр("Сценарий",                  Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("ВидПлана",                  Реквизиты.ВидПлана);
	Запрос.УстановитьПараметр("Замещающий",                Реквизиты.Замещающий);
	Запрос.УстановитьПараметр("ФорматМагазина",            Реквизиты.ФорматМагазина);
	Запрос.УстановитьПараметр("ОкончаниеПериода",          Реквизиты.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Назначение",                Реквизиты.Назначение);
	Запрос.УстановитьПараметр("ЗаполнятьНазначениеВТЧ",    Реквизиты.ЗаполнятьНазначениеВТЧ);
	
	
КонецПроцедуры

Функция ТекстЗапросаПланПродажПоКатегориям(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПланыПродажПоКатегориям";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ТаблицаТовары.ДатаОтгрузки
	|	КОНЕЦ КАК Период,
	|	&Сценарий КАК Сценарий,
	|	&ВидПлана КАК ВидПлана,
	|	&ФорматМагазина КАК ФорматМагазина,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаТовары.Ссылка КАК ПланПродажПоКатегориям,
	|	ТаблицаТовары.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Склад КАК Склад,
	|	ТаблицаТовары.РейтингПродаж КАК РейтингПродаж,
	|	ТаблицаТовары.Количество КАК Количество
	|ИЗ
	|	Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ ТаблицаТовары.Замещен";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	
	ПолноеИмяДокумента = "Документ.ПланПродажПоКатегориям"; 
	ЗначенияПараметров = Новый Структура;
	
	ПереопределениеРасчетаПараметров = Новый Структура;
		
	Если ИмяРегистра = "ПланыПродажПоКатегориям" Тогда
	
		ТекстЗапроса = ТекстЗапросаПланПродажПоКатегориям(Запрос, ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ТаблицаТовары";
				
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(ТекстЗапроса,
																								ПолноеИмяДокумента,
																								СинонимТаблицыДокумента,
																								ПереопределениеРасчетаПараметров);

	Возврат Результат;

КонецФункции

// Формирует запрос для расчета замещенных и замещающих планов
// 
// Параметры:
//  Параметры - Структура - Значения дополнительных реквизитов.
// 
// Возвращаемое значение:
//  Запрос
Функция ЗапросЗамещенныеИЗамещающиеПланы(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланПродажПоКатегориямЗамещающий.Ссылка КАК ЗамещаемыйПлан,
	|	ВЫБОР
	|		КОГДА &НачалоПериода > ПланПродажПоКатегориямЗамещающий.НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ПланПродажПоКатегориямЗамещающий.НачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &ОкончаниеПериода < ПланПродажПоКатегориямЗамещающий.ОкончаниеПериода
	|			ТОГДА &ОкончаниеПериода
	|		ИНАЧЕ ПланПродажПоКатегориямЗамещающий.ОкончаниеПериода
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	ПланПродажПоКатегориямЗамещающий.Статус КАК Статус
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориямЗамещающий
	|ГДЕ
	|	ПланПродажПоКатегориямЗамещающий.ОкончаниеПериода >= &НачалоПериода
	|	И ПланПродажПоКатегориямЗамещающий.НачалоПериода <= &ОкончаниеПериода
	|	И ПланПродажПоКатегориямЗамещающий.Ссылка <> &Ссылка
	|	И ПланПродажПоКатегориямЗамещающий.Проведен
	|	И ПланПродажПоКатегориямЗамещающий.ВидПлана = &ВидПлана
	|	И (ПланПродажПоКатегориямЗамещающий.Статус.Порядок >= &СтатусИндекс
	|			ИЛИ ПланПродажПоКатегориямЗамещающий.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.НаУтверждении)
	|				И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден))
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И ПланПродажПоКатегориямЗамещающий.Дата > &Дата
	|	И ПланПродажПоКатегориямЗамещающий.Подразделение = &Подразделение
	|	И ПланПродажПоКатегориямЗамещающий.ФорматМагазина = &ФорматМагазина
	|	И ПланПродажПоКатегориямЗамещающий.Склад = &Склад
	|	И ПланПродажПоКатегориямЗамещающий.Назначение = &Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода,
	|	Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланПродажПоКатегориямЗамещенный.Ссылка КАК ЗамещенныйПлан,
	|	ВЫБОР
	|		КОГДА &НачалоПериода > ПланПродажПоКатегориямЗамещенный.НачалоПериода
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ПланПродажПоКатегориямЗамещенный.НачалоПериода
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА &ОкончаниеПериода < ПланПродажПоКатегориямЗамещенный.ОкончаниеПериода
	|			ТОГДА &ОкончаниеПериода
	|		ИНАЧЕ ПланПродажПоКатегориямЗамещенный.ОкончаниеПериода
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	ПланПродажПоКатегориямЗамещенный.Статус КАК Статус
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ПланПродажПоКатегориямЗамещенный
	|ГДЕ
	|	ПланПродажПоКатегориямЗамещенный.ОкончаниеПериода >= &НачалоПериода
	|	И ПланПродажПоКатегориямЗамещенный.НачалоПериода <= &ОкончаниеПериода
	|	И ПланПродажПоКатегориямЗамещенный.Ссылка <> &Ссылка
	|	И ПланПродажПоКатегориямЗамещенный.Проведен
	|	И ПланПродажПоКатегориямЗамещенный.ВидПлана = &ВидПлана
	|	И (ПланПродажПоКатегориямЗамещенный.Статус.Порядок <= &СтатусИндекс
	|			ИЛИ ПланПродажПоКатегориямЗамещенный.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|				И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.НаУтверждении))
	|	И ПланПродажПоКатегориямЗамещенный.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И ПланПродажПоКатегориямЗамещенный.Дата < &Дата
	|	И ПланПродажПоКатегориямЗамещенный.Подразделение = &Подразделение
	|	И ПланПродажПоКатегориямЗамещенный.ФорматМагазина = &ФорматМагазина
	|	И ПланПродажПоКатегориямЗамещенный.Склад = &Склад
	|	И ПланПродажПоКатегориямЗамещенный.Назначение = &Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачалоПериода,
	|	Статус";
	
	Запрос.УстановитьПараметр("Ссылка", Параметры.Ссылка);
	Запрос.УстановитьПараметр("ВидПлана", Параметры.ВидПлана);
	Запрос.УстановитьПараметр("Статус", Параметры.Статус);
	Запрос.УстановитьПараметр("СтатусИндекс", Перечисления.СтатусыПланов.Индекс(Параметры.Статус));
	Запрос.УстановитьПараметр("Дата", Параметры.Дата);
	Запрос.УстановитьПараметр("Подразделение", Параметры.Подразделение);
	Запрос.УстановитьПараметр("ФорматМагазина", Параметры.ФорматМагазина);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("Назначение", Параметры.Назначение);
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", Параметры.ОкончаниеПериода);
	Запрос.УстановитьПараметр("Периодичность", Параметры.Периодичность);
		
	Возврат Запрос;
	
КонецФункции

// Формирует запрос для заполнения документа
// 
// Параметры:
//  Параметры - Структура - Значения дополнительных реквизитов.
// 
// Возвращаемое значение:
//  Запрос
Функция ЗапросЗамещения(Параметры) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланыПродажПоКатегориямОбороты.Период КАК ПериодСостава,
	|	ПланыПродажПоКатегориямОбороты.Сценарий КАК Сценарий,
	|	ПланыПродажПоКатегориямОбороты.Статус КАК Статус,
	|	ПланыПродажПоКатегориямОбороты.Подразделение КАК Подразделение,
	|	ПланыПродажПоКатегориямОбороты.Склад КАК Склад,
	|	ПланыПродажПоКатегориямОбороты.ФорматМагазина КАК ФорматМагазина,
	|	ПланыПродажПоКатегориямОбороты.КоличествоОборот КАК Количество,
	|	ПланыПродажПоКатегориямОбороты.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ПланыПродажПоКатегориямОбороты.Назначение КАК Назначение
	|ИЗ
	|	РегистрНакопления.ПланыПродажПоКатегориям.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Запись,
	|			Сценарий = &Сценарий
	|				И ВидПлана = &ВидПлана
	|				И &ТекстЗапросаОтборСклад
	|				И (&ЗаполнятьНазначениеВТЧ
	|					ИЛИ Назначение = &Назначение)
	|				И Статус В (&Статусы)
	|				И &ТекстЗапросаОтборПодразделение
	|				И &ТекстЗапросаОтборФорматМагазина) КАК ПланыПродажПоКатегориямОбороты";
		
	Запрос.УстановитьПараметр("КонецПериода",   Параметры.КонецПериодаСмещения);
	Запрос.УстановитьПараметр("НачалоПериода",  Параметры.НачалоПериодаСмещения);
	Запрос.УстановитьПараметр("Подразделение",  Параметры.Подразделение);
	Запрос.УстановитьПараметр("Склад",          Параметры.Склад);
	Запрос.УстановитьПараметр("ФорматМагазина", Параметры.ФорматМагазина);
	Запрос.УстановитьПараметр("Статусы",        Параметры.Статусы);
	Запрос.УстановитьПараметр("Сценарий",       Параметры.Сценарий);
	Запрос.УстановитьПараметр("ВидПлана",       Параметры.ВидПлана);
	Запрос.УстановитьПараметр("ЗаполнятьНазначениеВТЧ", Параметры.ЗаполнятьНазначениеВТЧ);
	Запрос.УстановитьПараметр("Назначение",             Параметры.Назначение);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборПодразделение",
		?(ЗначениеЗаполнено(Параметры.Подразделение),"Подразделение = &Подразделение","Истина"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборСклад",
		?(ЗначениеЗаполнено(Параметры.Склад),"Склад = &Склад","Истина"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"&ТекстЗапросаОтборФорматМагазина",
		?(ЗначениеЗаполнено(Параметры.ФорматМагазина),"ФорматМагазина = &ФорматМагазина","Истина"));
	
	Возврат Запрос;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаДанныхИзФайла

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
// 
// Параметры:
// 	АдресЗагружаемыхДанных- Строка - адрес временного хранилища с таблицей значений, в которой
//                                   находятся загруженные данные из файла.
// 	АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                                       являющейся копией табличной части документа, 
//                                       которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
// 	СписокНеоднозначностей - ТаблицаЗначений - состоит из:
//  * Идентификатор - Число - идентификатор
//  * Колонка - Строка - имя колонки
// 	ПолноеИмяТабличнойЧасти - Строка - полное имя табличной части
// 	ДополнительныеПараметры - см. ПланированиеКлиент.ДополнительныеПараметрыЗагрузкиИзФайла
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	ТоварныеКатегории = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);// ТаблицаЗначений
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);// ТаблицаЗначений
	ТоварныеКатегории.Колонки.Удалить("ДополнительныеПараметры");
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапроса.Добавить(ТекстЗапросаВтЗагружаемыеДанные());
	ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеТоварныхКатегорий());
	
	Если ДополнительныеПараметры.ИспользуютсяНазначения Тогда
		ТекстыЗапроса.Добавить(Планирование.ТекстЗапросаВтДанныеНазначений());
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользуетсяРасчетПоСкоростиПродаж Тогда
		ТекстыЗапроса.Добавить(ТекстЗапросаВтДанныеРейтинговПродаж());
	КонецЕсли;
	Если ДополнительныеПараметры.ИспользуютсяСклады Тогда
		ТекстыЗапроса.Добавить(Планирование.ТекстЗапросаВтДанныеСкладов());
	КонецЕсли;

	ТекстыЗапроса.Добавить(ТекстЗапросаЗагружаемыеДанныеТоварныеКатегории());
	
	Запрос = СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры);// Запрос
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Идентификатор = 1;
	Для Каждого Строка Из Результат Цикл
		
		Если ДополнительныеПараметры.КроссТаблица Тогда
			
			СтрокаЗагружаемыхДанных = ЗагружаемыеДанные.Найти(Строка.Идентификатор, "Идентификатор");
			
			Для Каждого Период Из ДополнительныеПараметры.Периоды Цикл
				
				// Параллельное дозаполнение загружаемых данных для корректной работы механизма БСП
				СтрокаЗагружаемыхДанных.Идентификатор = Идентификатор;
				ЗаполнитьЗначенияСвойств(ЗагружаемыеДанные.Добавить(), СтрокаЗагружаемыхДанных);
				
				НоваяСтрока = ТоварныеКатегории.Добавить();
				Строка.Идентификатор = Идентификатор;
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				НоваяСтрока.Идентификатор = Идентификатор;
				НоваяСтрока.Количество = Строка["Количество_" + Период.ИмяКолонки];
				НоваяСтрока.ДатаОтгрузки = Период.ДатаНачала;
				
				СоздатьЗаписиОНеоднозначности(СписокНеоднозначностей, Строка, ДополнительныеПараметры);
				
				Идентификатор = Идентификатор + 1;
				
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока = ТоварныеКатегории.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			СоздатьЗаписиОНеоднозначности(СписокНеоднозначностей, Строка, ДополнительныеПараметры);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТоварныеКатегории, АдресТаблицыСопоставления);
КонецПроцедуры

Процедура СоздатьЗаписиОНеоднозначности(СписокНеоднозначностей, Строка, ДополнительныеПараметры)
	
	Если Строка.КоличествоТоварныхКатегорий > 1 Тогда
		ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
		ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
		ЗаписьОНеоднозначности.Колонка       = "ТоварнаяКатегория";
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИспользуетсяРасчетПоСкоростиПродаж И Строка.КоличествоРейтинговПродаж > 1 Тогда
		ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
		ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
		ЗаписьОНеоднозначности.Колонка       = "РейтингПродаж";
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИспользуютсяНазначения И Строка.КоличествоНазначений > 1 Тогда
		ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
		ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
		ЗаписьОНеоднозначности.Колонка       = "Назначение";
	КонецЕсли;
	
	Если ДополнительныеПараметры.ИспользуютсяСклады И Строка.КоличествоСкладов > 1 Тогда
		ЗаписьОНеоднозначности               = СписокНеоднозначностей.Добавить();
		ЗаписьОНеоднозначности.Идентификатор = Строка.Идентификатор;
		ЗаписьОНеоднозначности.Колонка       = "Склад";
	КонецЕсли;
	
КонецПроцедуры

// Заполнить список неоднозначностей.
// 
// Параметры:
//  ПолноеИмяТабличнойЧасти - Строка
//  СписокНеоднозначностей - Массив из СтрокаТаблицыЗначений
//  ИмяКолонки - Строка
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений
//  ДополнительныеПараметры - см. ПланированиеКлиент.ДополнительныеПараметрыЗагрузкиИзФайла
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	Запрос = Новый Запрос;
	
	Если ИмяКолонки = "ТоварнаяКатегория" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|		ТоварныеКатегории.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.ТоварныеКатегории КАК ТоварныеКатегории
		|		
		|	ГДЕ
		|		НЕ &ТоварнаяКатегория = """"
		|		И ТоварныеКатегории.Наименование = &ТоварнаяКатегория
		|";
		
		Запрос.УстановитьПараметр("ТоварнаяКатегория", ЗагружаемыеЗначенияСтрока.ТоварнаяКатегория);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Назначение" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Назначения.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Назначения КАК Назначения
		|
		|ГДЕ
		|	НЕ &Назначение = """"
		|	И Назначения.Наименование = &Назначение
		|";
		
		Запрос.УстановитьПараметр("Назначение", ЗагружаемыеЗначенияСтрока.Назначение);
		
	КонецЕсли;
	
	Если ИмяКолонки = "РейтингПродаж" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РейтингиПродаж.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РейтингиПродажНоменклатуры КАК РейтингиПродаж
		|
		|ГДЕ
		|	НЕ &РейтингПродаж = """"
		|	И РейтингиПродаж.Наименование = &РейтингПродаж
		|";
		
		Запрос.УстановитьПараметр("РейтингПродаж", ЗагружаемыеЗначенияСтрока.РейтингПродаж);
		
	КонецЕсли;
	
	Если ИмяКолонки = "Склад" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|
		|ГДЕ
		|	НЕ &Склад = """"
		|	И Склады.Наименование = &Склад
		|";
		
		Запрос.УстановитьПараметр("Склад", ЗагружаемыеЗначенияСтрока.Склад);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция СоздатьНастроитьЗапрос(ТекстыЗапроса, ЗагружаемыеДанные, ДополнительныеПараметры)
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	КроссТаблица = ДополнительныеПараметры.КроссТаблица;
	ПоляКоличество = "";
	ПолеПериода = "";
	
	Если КроссТаблица Тогда
		Для Каждого Период Из ДополнительныеПараметры.Периоды Цикл
			ПоляКоличество = ПоляКоличество + "
			|ЗагружаемыеДанные.Количество_" + Период.ИмяКолонки + " КАК Количество_" +  Период.ИмяКолонки + ",";
		КонецЦикла;
	Иначе
		ПоляКоличество = "ЗагружаемыеДанные.Количество КАК Количество,";
		ПолеПериода = "ЗагружаемыеДанные.ДатаОтгрузки КАК ДатаОтгрузки,"
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеКоличество,", ПоляКоличество);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеДатаОтгрузки,", ПолеПериода);
	
	// Используются назначения
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеНазначение,",
		?(ДополнительныеПараметры.ИспользуютсяНазначения, "ЗагружаемыеДанные.Назначение КАК Назначение,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение,", ?(ДополнительныеПараметры.ИспользуютсяНазначения, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0) = 1
		|			ТОГДА ДанныеНазначений.Назначение
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|	КОНЕЦ КАК Назначение,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоНазначений,", 
		?(ДополнительныеПараметры.ИспользуютсяНазначения, "ЕСТЬNULL(ДанныеНазначений.КоличествоНазначений, 0) КАК КоличествоНазначений,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяНазначения, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеНазначений КАК ДанныеНазначений
		|	ПО ДанныеНазначений.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	// Используются рейтинги продаж
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеРейтингПродаж,",
		?(ДополнительныеПараметры.ИспользуетсяРасчетПоСкоростиПродаж, "ЗагружаемыеДанные.РейтингПродаж КАК РейтингПродаж,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РейтингПродаж,", ?(ДополнительныеПараметры.ИспользуетсяРасчетПоСкоростиПродаж, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеРейтинговПродаж.КоличествоРейтинговПродаж, 0) = 1
		|			ТОГДА ДанныеРейтинговПродаж.РейтингПродаж
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РейтингиПродажНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК РейтингПродаж,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоРейтинговПродаж,", 
		?(ДополнительныеПараметры.ИспользуетсяРасчетПоСкоростиПродаж, "ЕСТЬNULL(ДанныеРейтинговПродаж.КоличествоРейтинговПродаж, 0) КАК КоличествоРейтинговПродаж,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуетсяРасчетПоСкоростиПродаж, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеРейтинговПродаж КАК ДанныеРейтинговПродаж
		|	ПО ДанныеРейтинговПродаж.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	// Используются склады
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЗагружаемыеДанныеСклад,",
		?(ДополнительныеПараметры.ИспользуютсяСклады, "ЗагружаемыеДанные.Склад КАК Склад,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Склад,", ?(ДополнительныеПараметры.ИспользуютсяСклады, "
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеСкладов.КоличествоСкладов, 0) = 1
		|			ТОГДА ДанныеСкладов.Склад
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,", ""));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КоличествоСкладов,", 
		?(ДополнительныеПараметры.ИспользуютсяСклады, "ЕСТЬNULL(ДанныеСкладов.КоличествоСкладов, 0) КАК КоличествоСкладов,", ""));
	
	ТекстЗапроса = ТекстЗапроса + ?(ДополнительныеПараметры.ИспользуютсяСклады, "
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеСкладов КАК ДанныеСкладов
		|	ПО ДанныеСкладов.Идентификатор = ЗагружаемыеДанные.Идентификатор", "");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗагружаемыеДанные", ЗагружаемыеДанные);
	
	Возврат Запрос;
	
КонецФункции

Функция ТекстЗапросаВтЗагружаемыеДанные()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор     КАК Идентификатор,
	|	ЗагружаемыеДанные.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	&ЗагружаемыеДанныеНазначение,
	|	&ЗагружаемыеДанныеРейтингПродаж,
	|	&ЗагружаемыеДанныеСклад,
	|	&ЗагружаемыеДанныеКоличество,
	|	&ЗагружаемыеДанныеДатаОтгрузки,
	|	ЗагружаемыеДанные.Комментарий       КАК Комментарий
	|ПОМЕСТИТЬ ВтЗагружаемыеДанные
	|ИЗ
	|	&ЗагружаемыеДанные КАК ЗагружаемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеТоварныхКатегорий()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварныеКатегории.Идентификатор                           КАК Идентификатор,
	|	МАКСИМУМ(ТоварныеКатегории.ТоварнаяКатегория)             КАК ТоварнаяКатегория,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТоварныеКатегории.ТоварнаяКатегория) КАК КоличествоТоварныхКатегорий
	|ПОМЕСТИТЬ ВтДанныеТоварныхКатегорий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор   КАК Идентификатор,
	|		ТоварныеКатегории.Ссылка          КАК ТоварнаяКатегория
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК ТоварныеКатегории
	|		ПО ТоварныеКатегории.Наименование = ЗагружаемыеДанные.ТоварнаяКатегория
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.ТоварнаяКатегория = """"
	|
	|	) КАК ТоварныеКатегории
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварныеКатегории.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДанныеРейтинговПродаж()
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	РейтингиПродаж.Идентификатор                       КАК Идентификатор,
	|	МАКСИМУМ(РейтингиПродаж.РейтингПродаж)             КАК РейтингПродаж,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РейтингиПродаж.РейтингПродаж) КАК КоличествоРейтинговПродаж
	|ПОМЕСТИТЬ ВтДанныеРейтинговПродаж
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|		РейтингиПродаж.Ссылка           КАК РейтингПродаж
	|	ИЗ
	|		ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РейтингиПродажНоменклатуры КАК РейтингиПродаж
	|		ПО РейтингиПродаж.Наименование = ЗагружаемыеДанные.РейтингПродаж
	|
	|	ГДЕ
	|		НЕ ЗагружаемыеДанные.РейтингПродаж = """"
	|	) КАК РейтингиПродаж
	|
	|СГРУППИРОВАТЬ ПО
	|	РейтингиПродаж.Идентификатор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ТекстЗапросаЗагружаемыеДанныеТоварныеКатегории()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗагружаемыеДанные.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДанныеТоварныхКатегорий.КоличествоТоварныхКатегорий, 0) = 1
	|			ТОГДА ДанныеТоварныхКатегорий.ТоварнаяКатегория
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка)
	|	КОНЕЦ КАК ТоварнаяКатегория,
	|	&Назначение,
	|	&РейтингПродаж,
	|	&Склад,
	|	ЕСТЬNULL(ДанныеТоварныхКатегорий.КоличествоТоварныхКатегорий, 0) КАК КоличествоТоварныхКатегорий,
	|	&КоличествоНазначений,
	|	&КоличествоРейтинговПродаж,
	|	&КоличествоСкладов,
	|	&ЗагружаемыеДанныеКоличество,
	|	&ЗагружаемыеДанныеДатаОтгрузки,
	|	ЗагружаемыеДанные.Комментарий  КАК Комментарий
	|ИЗ
	|	ВтЗагружаемыеДанные КАК ЗагружаемыеДанные
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеТоварныхКатегорий КАК ДанныеТоварныхКатегорий
	|	ПО ДанныеТоварныхКатегорий.Идентификатор = ЗагружаемыеДанные.Идентификатор
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// План продаж по категориям
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПланПродажПоКатегориям";
	КомандаПечати.Представление = НСтр("ru = 'План продаж по категориям'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПланПродажПоКатегориям") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПланПродажПоКатегориям",
			НСтр("ru = 'План продаж по категориям'"),
			СформироватьПечатнуюФормуПлана(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция СформироватьПечатнуюФормуПлана(МассивОбъектов, ОбъектыПечати, ПараметрыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("КроссТаблица") Тогда
		ПоУмолчаниюКроссТаблица = ПараметрыПечати.КроссТаблица = Истина;
		ПоУмолчаниюТаблица = ПараметрыПечати.КроссТаблица = Ложь;
	Иначе
		ПоУмолчаниюКроссТаблица = Ложь;
		ПоУмолчаниюТаблица = Ложь;
	КонецЕсли; 
	
	ВыводитьШапку = Истина;
	Если ПараметрыПечати <> Неопределено И ПараметрыПечати.Свойство("ВыводитьШапку") Тогда
		ВыводитьШапку = ПараметрыПечати.ВыводитьШапку;
	КонецЕсли;
	
	ВыводитьСценарий 		= Истина;
	ВыводитьПериодСтатус	= Истина;
	ВыводитьПодразделение	= Истина;
	ВыводитьСклад 			= Истина;
	ВыводитьФорматМагазина	= Истина;
	ВыводитьСкладВТЧ 		= Истина;
	ВыводитьРейтингПродаж	= Истина;
	
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСценарий", ВыводитьСценарий) Тогда
		ВыводитьСценарий 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьПериодСтатус", ВыводитьПериодСтатус) Тогда
		ВыводитьПериодСтатус 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьПодразделение", ВыводитьПодразделение) Тогда
		ВыводитьПодразделение 	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСклад", ВыводитьСклад) Тогда
		ВыводитьСклад 			= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьФорматМагазина", ВыводитьФорматМагазина) Тогда
		ВыводитьФорматМагазина	= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСкладВТЧ", ВыводитьСкладВТЧ) Тогда
		ВыводитьСкладВТЧ 		= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьСкладВТЧ", ВыводитьСкладВТЧ) Тогда
		ВыводитьСкладВТЧ 		= Истина;
	КонецЕсли;
	Если ПараметрыПечати <> Неопределено И НЕ ПараметрыПечати.Свойство("ВыводитьРейтингПродаж", ВыводитьРейтингПродаж) Тогда
		ВыводитьРейтингПродаж	= Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка                         КАК Ссылка,
	|	ТаблицаДокумента.Номер                          КАК Номер,
	|	ТаблицаДокумента.Дата                           КАК Дата,
	|	ТаблицаДокумента.Ответственный                  КАК Ответственный,
	|	ТаблицаДокумента.Статус                         КАК Статус,
	|	ТаблицаДокумента.Периодичность                  КАК Периодичность,
	|	ТаблицаДокумента.НачалоПериода                  КАК НачалоПериода,
	|	ТаблицаДокумента.ОкончаниеПериода               КАК ОкончаниеПериода,
	|	ТаблицаДокумента.Сценарий                       КАК Сценарий,
	|	ТаблицаДокумента.ВидПлана                       КАК ВидПлана,
	|	ВЫБОР
	|		КОГДА &ПоУмолчаниюКроссТаблица
	|				ИЛИ ТаблицаДокумента.КроссТаблица
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                           КАК КроссТаблица,
	|	ТаблицаДокумента.ЗаполненоАвтоматически         КАК ЗаполненоАвтоматически,
	|	СпрВидыПланов.ЗаполнятьПодразделение            КАК ЗаполнятьПодразделение,
	|	СпрВидыПланов.ЗаполнятьСклад                    КАК ЗаполнятьСклад,
	|	СпрВидыПланов.ЗаполнятьФорматМагазина           КАК ЗаполнятьФорматМагазина,
	|	СпрВидыПланов.ЗаполнятьСкладВТЧ                 КАК ЗаполнятьСкладВТЧ,
	|	СценарииПланирования.ОтображатьНомерПериода     КАК ОтображатьНомерПериода,
	|	СценарииПланирования.ИспользоватьРасчетПоСкоростиПродаж КАК ЗаполнятьРейтингПродаж,
	|	Пользователи.ФизическоеЛицо                     КАК ОтветственныйФизЛицо,
	|	ТаблицаДокумента.Подразделение                  КАК Подразделение,
	|	ТаблицаДокумента.ФорматМагазина                 КАК ФорматМагазина,
	|	ТаблицаДокумента.Склад                          КАК Склад,
	|	ТаблицаДокумента.Назначение                     КАК Назначение,
	|	СценарииПланирования.ПланированиеПоНазначениям  КАК ПланированиеПоНазначениям,
	|	СпрВидыПланов.ЗаполнятьНазначениеВТЧ            КАК ЗаполнятьНазначениеВТЧ
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СценарииТоварногоПланирования КАК СценарииПланирования
	|		ПО ТаблицаДокумента.Сценарий = СценарииПланирования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыПланов КАК СпрВидыПланов
	|		ПО ТаблицаДокумента.ВидПлана = СпрВидыПланов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО ТаблицаДокумента.Ответственный = Пользователи.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В(&МассивДокументов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка                            КАК Ссылка,
	|	ТаблицаТовары.ТоварнаяКатегория                 КАК ТоварнаяКатегория,
	|	ТаблицаТовары.ТоварнаяКатегория.Наименование    КАК ТоварнаяКатегорияНаименование,
	|	ТаблицаТовары.НомерСтроки                       КАК НомерСтроки,
	|	ТаблицаТовары.ДатаОтгрузки                      КАК ДатаПериода,
	|	ТаблицаТовары.Количество                        КАК Количество,
	|	ТаблицаТовары.Комментарий                       КАК Комментарий,
	|	ТаблицаТовары.Склад                             КАК Склад,
	|	ТаблицаТовары.РейтингПродаж                     КАК РейтингПродаж,
	|	ТаблицаТовары.Назначение.Наименование           КАК НазначениеНаименование,
	|	ТаблицаТовары.Назначение                        КАК Назначение
	|ИЗ
	|	Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ТаблицаТовары
	|ГДЕ
	|	(&ПоУмолчаниюТаблица
	|			ИЛИ НЕ ТаблицаТовары.Ссылка.КроссТаблица)
	|	И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	И НЕ ТаблицаТовары.Отменено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.ТоварнаяКатегория.Наименование,
	|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки),
	|	ВложенныйЗапрос.ДатаПериода,
	|	СУММА(ВложенныйЗапрос.Количество),
	|	МАКСИМУМ(ВложенныйЗапрос.Комментарий),
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.РейтингПродаж,
	|	ВложенныйЗапрос.Назначение.Наименование,
	|	ВложенныйЗапрос.Назначение
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|		ВЫБОР ТаблицаДокумента.Периодичность
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, ГОД)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, ПОЛУГОДИЕ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, КВАРТАЛ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, МЕСЯЦ)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, ДЕКАДА)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
	|				ТОГДА НАЧАЛОПЕРИОДА(ТаблицаТовары.ДатаОтгрузки, НЕДЕЛЯ)
	|			ИНАЧЕ ТаблицаТовары.ДатаОтгрузки
	|		КОНЕЦ КАК ДатаПериода,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ВЫБОР КОГДА ТаблицаТовары.Отменено ТОГДА 0 ИНАЧЕ ТаблицаТовары.Количество КОНЕЦ КАК Количество,
	|		ВЫБОР КОГДА ТаблицаТовары.Отменено ТОГДА """" ИНАЧЕ ВЫРАЗИТЬ(ТаблицаТовары.Комментарий КАК СТРОКА(1000)) КОНЕЦ КАК Комментарий,
	|		ТаблицаТовары.Склад                 КАК Склад,
	|		ТаблицаТовары.РейтингПродаж         КАК РейтингПродаж,
	|		ТаблицаТовары.Назначение            КАК Назначение
	|	ИЗ
	|		Документ.ПланПродажПоКатегориям.ТоварныеКатегории КАК ТаблицаТовары
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродажПоКатегориям КАК ТаблицаДокумента
	|			ПО ТаблицаТовары.Ссылка = ТаблицаДокумента.Ссылка
	|	ГДЕ
	|		(&ПоУмолчаниюКроссТаблица
	|				ИЛИ ТаблицаТовары.Ссылка.КроссТаблица)
	|		И ТаблицаТовары.Ссылка В(&МассивДокументов)
	|	) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.ТоварнаяКатегория,
	|	ВложенныйЗапрос.ТоварнаяКатегория.Наименование,
	|	ВложенныйЗапрос.Склад,
	|	ВложенныйЗапрос.РейтингПродаж,
	|	ВложенныйЗапрос.ДатаПериода,
	|	ВложенныйЗапрос.Назначение,
	|	ВложенныйЗапрос.Назначение.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки,
	|	ТоварнаяКатегорияНаименование,
	|	НазначениеНаименование,
	|	Склад,
	|	РейтингПродаж,
	|	ДатаПериода
	|ИТОГИ ПО
	|	Ссылка");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланПродажПоКатегориям_ПланПродажПоКатегориям";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивОбъектов);
	Запрос.УстановитьПараметр("ПоУмолчаниюКроссТаблица", ПоУмолчаниюКроссТаблица);
	Запрос.УстановитьПараметр("ПоУмолчаниюТаблица", ПоУмолчаниюТаблица);
	
	МассивРезультатов 		= Запрос.ВыполнитьПакет(); 
	ДанныеПечати			= МассивРезультатов[0].Выбрать();
	ВыборкаПоДокументам 	= МассивРезультатов[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	ЕстьКроссТаблицы = Ложь;
	НачалоШапки = 0;
	ОкончаниеШапки = 0;
	ШиринаНомера = 0;
	ОкончаниеНомера = 0;
	
	//ДЕБАГ
	ПланироватьПоСумме = ЛОЖЬ;
	
	Пока ДанныеПечати.Следующий() Цикл
		
		// Найдем в выборке товары по текущему документу
		СтруктураПоиска = Новый Структура("Ссылка", ДанныеПечати.Ссылка);
		НайденСледующий = ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска);
		ВыборкаПоТоварам = ВыборкаПоДокументам.Выбрать();
		
		КроссТаблица = ДанныеПечати.КроссТаблица;
		
		Если КроссТаблица Тогда
			ТаблицаПериодов = Планирование.ШаблонТаблицыПериодов();
			Планирование.ЗаполнитьТаблицуПериодов(ТаблицаПериодов, 
				ДанныеПечати.Периодичность, 
				ДанныеПечати.НачалоПериода, 
				ДанныеПечати.ОкончаниеПериода, 
				?(ВыводитьШапку, ДанныеПечати.ОтображатьНомерПериода, Ложь));
			КроссТаблица = ТаблицаПериодов.Количество() > 1 ИЛИ НЕ ВыводитьШапку;
		КонецЕсли;
		
		// Макет необходимо получать для каждого документа, т.к. размеры колонок изменяются динамически.
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПланПродажПоКатегориям.ПФ_MXL_ПланПродажПоКатегориям");
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент    = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// Выводим шапку плана
		Если ВыводитьШапку Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
			ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеПечати.Ссылка);
			
			ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(
				ДанныеПечати,
				НСтр("ru='План продаж по категориям'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если ВыводитьСценарий Тогда
				ОбластьМакета                                  = Макет.ПолучитьОбласть("Сценарий");
				ПредставлениеСценария                          = Строка(ДанныеПечати.Сценарий) + ", "+ Строка(ДанныеПечати.Периодичность);
				ОбластьМакета.Параметры.ПредставлениеСценария  = ПредставлениеСценария;
				ОбластьМакета.Параметры.Сценарий               = ДанныеПечати.Сценарий;
				ПредставлениеВидаПлана                         = Строка(ДанныеПечати.ВидПлана);
				ОбластьМакета.Параметры.ПредставлениеВидаПлана = ПредставлениеВидаПлана;
				ОбластьМакета.Параметры.ВидПлана               = ДанныеПечати.ВидПлана;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ВыводитьПериодСтатус Тогда
				ОбластьМакета                                = Макет.ПолучитьОбласть("Период");
				ПредставлениеПериода                         = НСтр("ru='Период с %1 по %2'", ОбщегоНазначения.КодОсновногоЯзыка());
				ПредставлениеПериода                         = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеПериода,
					Формат(ДанныеПечати.НачалоПериода, "ДЛФ=D"), 
					Формат(ДанныеПечати.ОкончаниеПериода, "ДЛФ=D"));
				ОбластьМакета.Параметры.ПредставлениеПериода = ПредставлениеПериода;
				ОбластьМакета.Параметры.Статус = Строка(ДанныеПечати.Статус);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьПодразделение И ВыводитьПодразделение Тогда
				ОбластьМакета                                       = Макет.ПолучитьОбласть("Подразделение");
				ПредставлениеПодразделения                          = Строка(ДанныеПечати.Подразделение);
				ОбластьМакета.Параметры.ПредставлениеПодразделения  = ПредставлениеПодразделения;
				ОбластьМакета.Параметры.Подразделение               = ДанныеПечати.Подразделение;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьФорматМагазина И ВыводитьФорматМагазина Тогда
				ОбластьМакета                                        = Макет.ПолучитьОбласть("ФорматМагазина");
				ПредставлениеФорматаМагазина                         = Строка(ДанныеПечати.ФорматМагазина);
				ОбластьМакета.Параметры.ПредставлениеФорматаМагазина = ПредставлениеФорматаМагазина;
				ОбластьМакета.Параметры.ФорматМагазина               = ДанныеПечати.ФорматМагазина;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ЗаполнятьСклад И ВыводитьСклад Тогда
				ОбластьМакета                               = Макет.ПолучитьОбласть("Склад");
				ПредставлениеСклада                         = Строка(ДанныеПечати.Склад);
				ОбластьМакета.Параметры.ПредставлениеСклада = ПредставлениеСклада;
				ОбластьМакета.Параметры.Склад               = ДанныеПечати.Склад;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
			Если ДанныеПечати.ПланированиеПоНазначениям
				И Не ДанныеПечати.ЗаполнятьНазначениеВТЧ Тогда
				ОбластьМакета                                   = Макет.ПолучитьОбласть("Назначение");
				ПредставлениеНазначение                         = Строка(ДанныеПечати.Назначение);
				ОбластьМакета.Параметры.ПредставлениеНазначение = ПредставлениеНазначение;
				ОбластьМакета.Параметры.Назначение              = ДанныеПечати.Назначение;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
		КонецЕсли;
		
		// Выводим заголовок таблицы Товары
		ДопПоля = Новый Массив; // Массив из см. Планирование.СтруктураДопПоля
		
		Если ДанныеПечати.ПланированиеПоНазначениям
			И ДанныеПечати.ЗаполнятьНазначениеВТЧ Тогда
			СтруктураДопПоля = Новый Структура;
			СтруктураДопПоля.Вставить("Заголовок", НСтр("ru='Назначение'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураДопПоля.Вставить("КолонкаЗначения", "Назначение");
			ДопПоля.Добавить(СтруктураДопПоля);
		КонецЕсли;
		
		Если ДанныеПечати.ЗаполнятьСкладВТЧ Тогда
			СтруктураДопПоля = Новый Структура;
			СтруктураДопПоля.Вставить("Заголовок", НСтр("ru='Склад'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураДопПоля.Вставить("КолонкаЗначения", "Склад");
			ДопПоля.Добавить(СтруктураДопПоля);
		КонецЕсли;
		Если ДанныеПечати.ЗаполнятьРейтингПродаж Тогда
			СтруктураДопПоля = Новый Структура;
			СтруктураДопПоля.Вставить("Заголовок", НСтр("ru='Рейтинг продаж'", ОбщегоНазначения.КодОсновногоЯзыка()));
			СтруктураДопПоля.Вставить("КолонкаЗначения", "РейтингПродаж");
			ДопПоля.Добавить(СтруктураДопПоля);
		КонецЕсли;
		
		ИмяОбластиКоличество = ?(КроссТаблица, "КоличествоКросс","Количество");
		
		ИспользоватьХарактеристикиНоменклатуры = ЛОжь;
		БезХарактеристик = НЕ (ВыводитьШапку ИЛИ ИспользоватьХарактеристикиНоменклатуры);
		// Расчет ширины колонки товарной категории
		ШиринаКолонкиТоварнаяКатегория = Макет.Область("ТоварнаяКатегория").ШиринаКолонки;
		
		Если ДопПоля.Количество() > 0 Тогда
			ШиринаКолонкиТоварнаяКатегория = ШиринаКолонкиТоварнаяКатегория -Макет.Область("ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0")).ШиринаКолонки * ДопПоля.Количество();
		КонецЕсли; 
		Макет.Область("ТоварнаяКатегория").ШиринаКолонки = ШиринаКолонкиТоварнаяКатегория;
		
		ПериодовНаПервойСтранице = 2;
		ПериодовНаСтранице = 6;
		
		ОбластьНомера                   = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьУИ                       = Макет.ПолучитьОбласть("ШапкаТаблицы|УникальныеИдентификаторы");
		ОбластьТоварнаяКатегория        = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварнаяКатегория");
		ОбластьДанных                   = Макет.ПолучитьОбласть("ШапкаТаблицы|" + ИмяОбластиКоличество);
		ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("ШапкаТаблицы|КоличествоКроссОкончание");
		ОбластьДатаПериод               = Макет.ПолучитьОбласть("ШапкаТаблицы|ДатаПериод");
		Если ДопПоля.Количество() > 0 Тогда
			ОбластьТоварнаяКатегорияДопПоле = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0"));
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если Не ВыводитьШапку Тогда
			ТабличныйДокумент.Присоединить(ОбластьУИ);
		КонецЕсли;
		
		ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегория);
		
		Для каждого ДопПоле Из ДопПоля Цикл
			ОбластьТоварнаяКатегорияДопПоле.Параметры.Заголовок = ДопПоле.Заголовок;
			ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегорияДопПоле);
		КонецЦикла; 
		
		НомерСтраницы = 1;
		Если КроссТаблица Тогда
			Для каждого Период Из ТаблицаПериодов Цикл
				Индекс = ТаблицаПериодов.Индекс(Период);
				Если Индекс = ТаблицаПериодов.Количество()-1 Тогда
					ОбластьДанныхКроссОкончание.Параметры.Заголовок = Период.Заголовок;
					ТабличныйДокумент.Присоединить(ОбластьДанныхКроссОкончание);
				Иначе
					ОбластьДанных.Параметры.Заголовок = Период.Заголовок;
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
		КонецЕсли; 
		
		НачалоШапки = ТабличныйДокумент.ВысотаТаблицы - ОбластьНомера.ВысотаТаблицы +1;
		ОкончаниеШапки = ТабличныйДокумент.ВысотаТаблицы;
		ШиринаНомера = ОбластьНомера.ШиринаТаблицы;
		
		ОбластьНомера                   = Макет.ПолучитьОбласть("СтрокаТаблицы|НомерСтроки");
		ОбластьУИ                       = Макет.ПолучитьОбласть("СтрокаТаблицы|УникальныеИдентификаторы");
		ОбластьТоварнаяКатегория        = Макет.ПолучитьОбласть("СтрокаТаблицы|ТоварнаяКатегория");
		ОбластьДанных                   = Макет.ПолучитьОбласть("СтрокаТаблицы|" + ИмяОбластиКоличество);
		ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("СтрокаТаблицы|КоличествоКроссОкончание");
		ОбластьДатаПериод               = Макет.ПолучитьОбласть("СтрокаТаблицы|ДатаПериод");
		Если ДопПоля.Количество() > 0 Тогда
			ОбластьТоварнаяКатегорияДопПоле = Макет.ПолучитьОбласть("СтрокаТаблицы|ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0") );
		КонецЕсли;
		
		ТекущаяСтрока  = Новый Структура("ТоварнаяКатегория, Склад, РейтингПродаж, Назначение");
		ТекущийПериод  = 0;
		НомерСтроки    = 0;
	
		// Выводим строки таблицы Товары
		Пока ВыборкаПоТоварам.Следующий() Цикл
			
			ОдинаковыеСтроки = Истина;
			Если КроссТаблица Тогда
				Для каждого Элемент Из ТекущаяСтрока Цикл
					Если ВыборкаПоТоварам[Элемент.Ключ] <> Элемент.Значение Тогда
						ОдинаковыеСтроки = Ложь;
						Прервать;
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
			
			Если НЕ КроссТаблица ИЛИ КроссТаблица И НЕ ОдинаковыеСтроки Тогда
				
				// Доформирование строки товара, если данных нет до конца периода
				Если КроссТаблица И ТекущийПериод <> 0 И ТекущийПериод < ТаблицаПериодов.Количество() Тогда
					Пока ТекущийПериод < ТаблицаПериодов.Количество() Цикл
						ТекущийПериод = ТекущийПериод + 1;
						Если ТекущийПериод < ТаблицаПериодов.Количество() Тогда
							ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("СтрокаТаблицы|" + ИмяОбластиКоличество));
						Иначе
							ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("СтрокаТаблицы|КоличествоКроссОкончание"));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыборкаПоТоварам);
				ТекущийПериод = 0;
				
				НомерСтроки = НомерСтроки + 1;
				
				ОбластьНомера.Параметры.НомерСтроки = НомерСтроки;
				ТабличныйДокумент.Вывести(ОбластьНомера);
				
				Если Не ВыводитьШапку Тогда
					ОбластьУИ.Параметры.УникальныйИдентификаторТоварнаяКатегория = Строка(ВыборкаПоТоварам.ТоварнаяКатегория.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторСклад             = Строка(ВыборкаПоТоварам.Склад.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторРейтингПродаж     = Строка(ВыборкаПоТоварам.РейтингПродаж.УникальныйИдентификатор());
					ОбластьУИ.Параметры.УникальныйИдентификаторНазначение        = Строка(ВыборкаПоТоварам.Назначение.УникальныйИдентификатор());
					
					ТабличныйДокумент.Присоединить(ОбластьУИ);
				КонецЕсли;
				
				ОбластьТоварнаяКатегория.Параметры.Заполнить(ВыборкаПоТоварам);
				
				ОбластьТоварнаяКатегория.Параметры.ТоварнаяКатегория = ВыборкаПоТоварам.ТоварнаяКатегорияНаименование;
				
				ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегория);
				
				Для каждого ДопПоле Из ДопПоля Цикл
					ОбластьТоварнаяКатегорияДопПоле.Параметры.Значение = ВыборкаПоТоварам[ДопПоле.КолонкаЗначения];
					ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегорияДопПоле);
				КонецЦикла;
				
			КонецЕсли;
			
			Если КроссТаблица Тогда
				
				Период = ТаблицаПериодов.Найти(ВыборкаПоТоварам.ДатаПериода, "ДатаНачала");
				
				Индекс = ТаблицаПериодов.Индекс(Период);
				
				ПустаяОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицы|" + ИмяОбластиКоличество);
				ПустаяОбластьДанныхКроссОкончание = Макет.ПолучитьОбласть("СтрокаТаблицы|КоличествоКроссОкончание");
				
				Пока ТекущийПериод < Период.НомерКолонки Цикл
					
					ТекущийПериод = ТекущийПериод + 1;
					ОбластьДанных = ПустаяОбластьДанных;
					ОбластьДанныхКроссОкончание = ПустаяОбластьДанныхКроссОкончание;
					
					Если ТекущийПериод = Период.НомерКолонки Тогда
						Если Индекс < ТаблицаПериодов.Количество()-1 Тогда
							ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
							Область = ОбластьДанных.Область("R1C1:R1C1");
							Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
							ТабличныйДокумент.Присоединить(ОбластьДанных);
						Иначе
							ОбластьДанныхКроссОкончание.Параметры.Заполнить(ВыборкаПоТоварам);
							Область = ОбластьДанныхКроссОкончание.Область("R1C1:R1C1");
							Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
							ТабличныйДокумент.Присоединить(ОбластьДанныхКроссОкончание);
						КонецЕсли; 
					Иначе
						ТабличныйДокумент.Присоединить(ОбластьДанных);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТекущийПериод = ТаблицаПериодов.Количество() Тогда
					ТекущийПериод = 0;
				КонецЕсли;
				
			Иначе
				ОбластьДатаПериод.Параметры.Заполнить(ВыборкаПоТоварам);
				ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
				
				ОбластьДанных.Параметры.Заполнить(ВыборкаПоТоварам);
				Область = ОбластьДанных.Область("R1C1:R1C1");
				Область.Примечание.Текст = ВыборкаПоТоварам.Комментарий;
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЕсли;
			
		КонецЦикла;
		
		// Доформирование строки товара, если данных нет до конца периода
		Если КроссТаблица И ТекущийПериод <> 0 И ТекущийПериод < ТаблицаПериодов.Количество() Тогда
			Пока ТекущийПериод < ТаблицаПериодов.Количество() Цикл
				ТекущийПериод = ТекущийПериод + 1;
				Если ТекущийПериод < ТаблицаПериодов.Количество() Тогда
					ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("СтрокаТаблицы|" + ИмяОбластиКоличество));
				Иначе
					ТабличныйДокумент.Присоединить(Макет.ПолучитьОбласть("СтрокаТаблицы|КоличествоКроссОкончание"));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Выводим подвал, в том случае если выводили шапку
		Если ВыводитьШапку Тогда
			ОбластьНомера                   = Макет.ПолучитьОбласть("ПодвалТаблицы|НомерСтроки");
			ОбластьУИ                       = Макет.ПолучитьОбласть("ПодвалТаблицы|УникальныеИдентификаторы");
			ОбластьТоварнаяКатегория        = Макет.ПолучитьОбласть("ПодвалТаблицы|ТоварнаяКатегория");
			ОбластьДанных                   = Макет.ПолучитьОбласть("ПодвалТаблицы|" + ИмяОбластиКоличество);
			ОбластьДанныхКроссОкончание     = Макет.ПолучитьОбласть("ПодвалТаблицы|КоличествоКроссОкончание");
			ОбластьДатаПериод               = Макет.ПолучитьОбласть("ПодвалТаблицы|ДатаПериод");
			Если ДопПоля.Количество() > 0 Тогда
				ОбластьТоварнаяКатегорияДопПоле = Макет.ПолучитьОбласть("ПодвалТаблицы|ТоварнаяКатегорияДопПоле"+ Формат(ДопПоля.Количество(), "ЧДЦ=0; ЧГ=0") );
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегория);
			Для каждого ДопПоле Из ДопПоля Цикл
				ТабличныйДокумент.Присоединить(ОбластьТоварнаяКатегорияДопПоле);
			КонецЦикла; 
			
			Если КроссТаблица Тогда
				
				Для каждого Период Из ТаблицаПериодов Цикл
					Если Период.Активная И Период.НомерКолонки <= 0 Тогда
						Продолжить;
					КонецЕсли; 
					
					ТабличныйДокумент.Присоединить(ОбластьДанных);
				КонецЦикла;
			Иначе
				ТабличныйДокумент.Присоединить(ОбластьДатаПериод);
				ТабличныйДокумент.Присоединить(ОбластьДанных);
			КонецЕсли;
			
			ОкончаниеНомера = ТабличныйДокумент.ВысотаТаблицы;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтоговаяСтрока");
			ИтоговаяСтрока = НСтр("ru='Всего наименований %КоличествоНаименований%.'", ОбщегоНазначения.КодОсновногоЯзыка());
			ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", НомерСтроки);
			ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Выводим подписи
			ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
			
			Если ЗначениеЗаполнено(ДанныеПечати.ОтветственныйФизЛицо) Тогда
				ОбластьМакета.Параметры.ПредставлениеОтветственного =
					ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ДанныеПечати.ОтветственныйФизЛицо, ДанныеПечати.Дата);
				ОбластьМакета.Параметры.Ответственный = ДанныеПечати.ОтветственныйФизЛицо;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеПечати.Ссылка);
		
		Если КроссТаблица Тогда
			ЕстьКроссТаблицы = Истина;
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ДанныеПечати.Количество() = 1 И ЕстьКроссТаблицы Тогда
	
		ОбластьШапки = ТабличныйДокумент.Область(НачалоШапки, , ОкончаниеШапки, );
		ТабличныйДокумент.ПовторятьПриПечатиСтроки = ОбластьШапки;
		
		ОбластьНомера = ТабличныйДокумент.Область(, 1, , ШиринаНомера);
		ТабличныйДокумент.ПовторятьПриПечатиКолонки = ОбластьНомера;
	
	КонецЕсли; 
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;

КонецФункции

Функция СоздатьПрисоединенныйФайлExcel(ДокументСсылка, ИдентификаторФормы) Экспорт
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("ВыводитьШапку", Ложь);
	
	МассивДокументов = Новый Массив;
	МассивДокументов.Добавить(ДокументСсылка);
	
	ОбъектыПечати = Новый СписокЗначений;
	ОбъектыПечати.Добавить(ДокументСсылка);
	
	ТабличныйДокумент = СформироватьПечатнуюФормуПлана(МассивДокументов, ОбъектыПечати, ПараметрыПечати);
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), ИдентификаторФормы);
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
	ПараметрыФайла.Вставить("ВладелецФайлов", ДокументСсылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", "Excel" + " " + Формат(ТекущаяДата, НСтр("ru = 'ДФ=''dd.MM.yyyy ЧЧ.мм.сс'''")));
	ПараметрыФайла.Вставить("РасширениеБезТочки", "xls");
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяДата);
	
	Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище, Неопределено);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Если Файл <> Неопределено Тогда
		РаботаСФайламиСлужебный.ЗанятьФайлДляРедактированияСервер(Файл);
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(Файл, ИдентификаторФормы, Истина);
		СтруктураДействийExcel = Новый Структура;
		СтруктураДействийExcel.Вставить("AutoFilter", Новый Структура("СтрокаНачало, КолонкаНачало", 2, 2));
		
		// Скрытие колонок с идентификаторами номенклатуры и характеристик, упаковки, партнера, соглашения, склада.
		МассивКолонок = Новый Массив;
		МассивКолонок.Добавить(3);
		МассивКолонок.Добавить(4);
		МассивКолонок.Добавить(5);
		СтруктураДействийExcel.Вставить("HiddenColumns", МассивКолонок);
		
		Возврат Новый Структура("ДанныеФайла, Файл, СтруктураДействийExcel", ДанныеФайла, Файл, СтруктураДействийExcel);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Параметры:
//  ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ПланПродажПоКатегориям.Форма.ФормаСписка";
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ПланПродажПоКатегориям))
		И ПравоДоступа("Добавление", Метаданные.Документы.ПланПродажПоКатегориям)
		И ПолучитьФункциональнуюОпцию("ИспользоватьПланированиеПродажПоКатегориям");
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ПланыПродажПоКатегориямОжидающиеСогласования,
	|	МИНИМУМ(Планы.Статус.Порядок) КАК СтатусПорядок
	|ИЗ
	|	Документ.ПланПродажПоКатегориям КАК Планы
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ) <= Планы.ОкончаниеПериода
	|	И ВЫБОР
	|	КОГДА НЕ Планы.Замещающий
	|		ТОГДА Планы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.НаУтверждении)
	|	КОГДА Планы.Замещающий
	|			И Планы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|			И Планы.Статус.Порядок >= 2
	|		ТОГДА ИСТИНА
	|	ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|	И Планы.Проведен";
	
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос, ОбщиеПараметрыЗапросов);
	
	// Заполнение дел.
	ДелоРодитель = ТекущиеДела.Найти("ПланыЗакупок", "Идентификатор");
	Если ДелоРодитель = Неопределено Тогда
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ПланыЗакупок";
		ДелоРодитель.Представление  = НСтр("ru = 'Планы ожидающие согласования'");
		ДелоРодитель.Владелец       = Планирование.ПодсистемаПланирование();
	КонецЕсли;
	
	// ПланыЗакупокОжидающиеСогласования
	ПараметрыОтбора = Новый Структура;
	Если Перечисления.СтатусыПланов[Результат.СтатусПорядок] = Перечисления.СтатусыПланов.НаУтверждении Тогда
		ПараметрыОтбора.Вставить("Статус", Перечисления.СтатусыПланов.НаУтверждении);
	КонецЕсли;
	ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ПланыПродажПоКатегориямОжидающиеСогласования";
	Дело.ЕстьДела       = Результат.ПланыПродажПоКатегориямОжидающиеСогласования > 0;
	Дело.Представление  = НСтр("ru = 'Планы продаж по категориям'");
	Дело.Количество     = Результат.ПланыПродажПоКатегориямОжидающиеСогласования;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	Дело.Владелец       = "ПланыЗакупок";
	
	Если Результат.ПланыПродажПоКатегориямОжидающиеСогласования > 0 Тогда
		ДелоРодитель.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
