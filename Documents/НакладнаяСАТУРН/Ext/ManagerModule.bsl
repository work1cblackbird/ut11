#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеПодтвержденияОшибка);
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержденОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказаноОшибка);

	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.НаправленНаЭкспорт);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Утрачен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержден);
		Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказано);
		
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//   СтруктураПараметров - Структура - Входящие данные.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ДальнейшееДействие = Новый Массив;
		
		Если СтруктураПараметров.Свойство("Статус")
			И СтруктураПараметров.Статус =  Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик Тогда
			ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
		Иначе
			Если СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
				Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СтруктураПараметров.ОбъектРасчета, "ГрузополучательОрганизацияСАТУРН, Операция, Идентификатор");
			Иначе
				Реквизиты = СтруктураПараметров;
			КонецЕсли;
			
			Если ВозможнаОперацияПодтвержденияНакладной(Реквизиты) Тогда
				ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
				ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
				ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
			Иначе
				ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
		
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбмене

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОрганизацияСАТУРН = Неопределено;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ДополнительныеПараметры.Свойство("ОрганизацияСАТУРН", ОрганизацияСАТУРН);
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов
		// Первая операция в цепочке сообщений, доступно действие "отмените передачу данных"
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиНакладнойСАТУРН.КПередаче,
			ОрганизацияСАТУРН);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки 
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеКПередаче,
			ОрганизацияСАТУРН);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
		ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
			
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
		ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//   * ДополнительныеПараметры - Неопределено, Структура - 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		Реквизиты = РеквизитыДляРасчетаСтатусаДальнейшегоДействия(ДокументСсылка);
		
		Если ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ПараметрыЗапроса <> Неопределено Тогда
			СтатусПринят = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
				ДополнительныеПараметры.ПараметрыЗапроса, "СтатусДокумента", Неопределено);
		КонецЕсли;
		
		Если СтатусПринят <> Неопределено Тогда
			Статусы.Принят = СтатусПринят;
		ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение Тогда
			Если ЗначениеЗаполнено(Реквизиты.ДатаВозврата) Тогда
				Если Реквизиты.ЕстьПринято И Реквизиты.ЕстьВозвращено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично;
				Иначе
					Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Реквизиты.ДатаПолучения) Тогда
				Если Реквизиты.ЕстьПринято И Реквизиты.ЕстьВозвращено Тогда
					Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично;
				Иначе
					Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату;
				КонецЕсли;
			Иначе
				Статусы.Принят = СтатусПринятПоВидуОперации(Реквизиты.Операция)
			КонецЕсли;
		Иначе
			Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается;
		КонецЕсли;
		
		Если Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается Тогда
			// Расчет финального статуса в абстрактной операции
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		ИначеЕсли (Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату
			Или Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично)
			И ВозможнаОперацияПодтвержденияВозврата(Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
		ИначеЕсли Статусы.Принят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути
			И ВозможнаОперацияПодтвержденияНакладной(Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		КонецЕсли;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование Тогда
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		Иначе
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян
		// при частичной приемка ожидается подтверждение недопоставленного груза
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Реквизиты = РеквизитыДляРасчетаСтатусаДальнейшегоДействия(ДокументСсылка);
		
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса Тогда
			Статусы.Принят = СтатусПринятПоВидуОперации(Реквизиты.Операция);
			Если ВозможнаОперацияПодтвержденияНакладной(Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
			ИначеЕсли Реквизиты.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
			КонецЕсли;
		Иначе
			ЭтоЧастичнаяПриемка = Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
				И Реквизиты.ЕстьПринято И Реквизиты.ЕстьВозвращено;
			Если ЭтоЧастичнаяПриемка Тогда
				Статусы.Принят = СтатусПринятПоВидуОперации(Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки);
			Иначе
				Статусы.Принят = СтатусПринятПоВидуОперации(Операция);
			КонецЕсли;
			Если (Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
				Или ЭтоЧастичнаяПриемка)
				И ВозможнаОперацияПодтвержденияВозврата(Реквизиты) Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
			КонецЕсли;
		КонецЕсли;
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		Иначе
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		ЭтоЧастичнаяПриемка = Ложь;
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса Тогда
			Реквизиты = РеквизитыДляРасчетаСтатусаДальнейшегоДействия(ДокументСсылка);
			ЭтоЧастичнаяПриемка = Реквизиты.ЕстьПринято И Реквизиты.ЕстьВозвращено;
			Если ЭтоЧастичнаяПриемка Тогда
				Статусы.Принят = СтатусПринятПоВидуОперации(Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата);
			Иначе
				Статусы.Принят = СтатусПринятПоВидуОперации(Операция);
			КонецЕсли;
		Иначе
			Статусы.Принят = СтатусПринятПоВидуОперации(Операция);
		КонецЕсли;
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Если ЭтоЧастичнаяПриемка Тогда
			Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата);
		Иначе
			Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		КонецЕсли;
		
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = СтатусПринятПоВидуОперации(Операция);
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
			// Операция всегда от имени Грузоотправителя, поэтому доступны дальнейшие действия
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
		Иначе
			// Черновик
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		КонецЕсли;
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
		
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
			
			Статусы.Принят = СтатусПринятПоВидуОперации(Операция);
			Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
			КонецЕсли;
			
		Иначе
			
			Статусы.Принят = СтатусОбрабатываетсяПоВидуОперации(Операция);
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		КонецЕсли;
		
		Статусы.Обрабатывается = СтатусОбрабатываетсяПоВидуОперации(Операция);
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = СтатусОшибкаПоВидуОперации(Операция);
		
		Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
		ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса
			Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 142,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 152,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 16,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 162,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 17,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 172,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 18,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 19,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 192,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Входящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Входящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Входящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Входящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Входящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Входящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 3,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 31,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 32,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//  ПараметрыОбновленияСтатуса - См. ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияСАТУРНПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияСАТУРН.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		РегистрыСведений.МестаХраненияПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		РегистрыНакопления.ОстаткиПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСАТУРН

Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииСАТУРН.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.НакладнаяСАТУРН, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			И ДополнительныеПараметры.Свойство("ПараметрыОбработкиДокумента")
			И ТипЗнч(ДополнительныеПараметры.ПараметрыОбработкиДокумента) = Тип("Структура")
			И ДополнительныеПараметры.ПараметрыОбработкиДокумента.Свойство("ДополнительныеПараметры")
			И ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры <> Неопределено
			И ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры.Свойство("Операция") Тогда
			
			Операция = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры.Операция;
			Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов Тогда
				Возврат ЗагрузкаСтатусовНакладныхJSON(ДокументСсылка, ДополнительныеПараметры);
			Иначе
				Возврат ЗагрузкаВходящихНакладныхJSON(ДокументСсылка, ДополнительныеПараметры);
			КонецЕсли;
		Иначе
			
			Возврат ИсходящаяНакладнаяJSON(ДокументСсылка, ДополнительныеПараметры);
			
		КонецЕсли;
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную Тогда
		
		Возврат ПриемкаВозвратНакладнойJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную Тогда
		
		Возврат ПриемкаВозвратНакладнойJSON(ДокументСсылка, ДополнительныеПараметры, Ложь);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза Тогда
		
		Возврат ПриемкаВозвратНакладнойJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат Тогда
		
		Возврат ПодтверждениеВозвратаJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате Тогда
		
		Возврат ПодтверждениеВозвратаJSON(ДокументСсылка, ДополнительныеПараметры, Ложь);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию Тогда
		
		Возврат АннулированиеНакладнойJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр Тогда
		
		Возврат ПередачаНаДосмотрНакладнойJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт Тогда
		
		Возврат ПодтверждениеЭкспортаНакладнойJSON(ДокументСсылка, ДополнительныеПараметры, Истина);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт Тогда
		
		Возврат ПодтверждениеЭкспортаНакладнойJSON(ДокументСсылка, ДополнительныеПараметры, Ложь);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.НакладнаяСАТУРН);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.НакладнаяСАТУРН, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.НакладнаяСАТУРН, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаЗаполнения

// Заполняет партии в выбранном документе
//
// Параметры:
//  Объект - ДокументОбъект.НакладнаяСАТУРН
//  СписокСтрок - Неопределено, Массив Из ДанныеФормыЭлементКоллекции - выделенные строки
//
// Возвращаемое значение:
//  Структура:
//   ЗаголовокСообщения - Строка
//   ТекстСообщения - Строка
//   КартинкаСообщения  - Картинка
Функция ЗаполнитьПартии(Объект, СписокСтрок = Неопределено) Экспорт
	
	Настройки = ИнтеграцияСАТУРНСлужебный.НастройкиЗаполненияПартий("Товары", СписокСтрок);
	Настройки.ОрганизацияСАТУРН = "ГрузоотправительОрганизацияСАТУРН";
	Настройки.МестоХранения = "ГрузоотправительМестоХранения";
	Настройки.ЗаполнитьКоличествоСАТУРН = Истина;
	
	РезультатЗаполнения = ИнтеграцияСАТУРНСлужебный.ЗаполнитьПартии(Объект, Настройки);

	Для Каждого СтрокаТаблицы Из РезультатЗаполнения.ИзмененныеСтроки Цикл
		СтрокаТаблицы.КоличествоУпаковокПринято    = СтрокаТаблицы.КоличествоУпаковок;
		СтрокаТаблицы.КоличествоПринято            = СтрокаТаблицы.Количество;
		СтрокаТаблицы.КоличествоПринятоСАТУРН      = СтрокаТаблицы.КоличествоСАТУРН;
		СтрокаТаблицы.КоличествоУпаковокВозвращено = 0;
		СтрокаТаблицы.КоличествоВозвращено         = 0;
		СтрокаТаблицы.КоличествоВозвращеноСАТУРН   = 0;
		СтрокаТаблицы.ПричинаРасхождения           = "";
	КонецЦикла;

	Возврат РезультатЗаполнения.СообщениеПользователю;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДействияПриОбменеСАТУРН

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовРасчетСтатуса Тогда
		
		Если ПараметрыЗапроса.ВсеСтраницыПолучены
			И ПараметрыЗапроса.ОбновитьДатуСинхронизации Тогда
			
			ДатаПоследнегоДокумента = ПараметрыЗапроса.ДатаПоследнегоДокумента;
			
			Если ДатаПоследнегоДокумента > ПараметрыЗапроса.ДатаСинхронизации Тогда
				
				РегистрыСведений.СинхронизацияСтатусовДокументовСАТУРН.УстановитьДатуВыполненияСинхронизации(
					ЭлементОчереди.ОрганизацияСАТУРН,
					Перечисления.ВидыНастроекОбменаСАТУРН.ЗагрузкаСтатусовНакладных,
					ДатаПоследнегоДокумента);
				
			ИначеЕсли ЗначениеЗаполнено(ПараметрыЗапроса.КонецПериода)
				И ПараметрыЗапроса.КонецПериода > ПараметрыЗапроса.ДатаСинхронизации Тогда
				
				РегистрыСведений.СинхронизацияСтатусовДокументовСАТУРН.УстановитьДатуВыполненияСинхронизации(
					ЭлементОчереди.ОрганизацияСАТУРН,
					Перечисления.ВидыНастроекОбменаСАТУРН.ЗагрузкаСтатусовНакладных,
					ПараметрыЗапроса.КонецПериода);
				
			КонецЕсли;
			
		Иначе
			
			// Обновить дату выполнения обмена
			РегистрыСведений.СинхронизацияСтатусовДокументовСАТУРН.УстановитьДатуВыполненияСинхронизации(
				ЭлементОчереди.ОрганизацияСАТУРН,
				Перечисления.ВидыНастроекОбменаСАТУРН.ЗагрузкаСтатусовНакладных);
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовРасчетСтатуса Тогда
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		ПараметрыЗапросаОснования             = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		КоличествоЭлементов = ВходящиеДанные.Количество();
		
		ПараметрыПолученияПартии = Справочники.ПартииСАТУРН.ПараметрыПолученияПартии();
		ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
		
		СообщенияJSON = Новый Массив;
		
		РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		Для Каждого ЭлементДанных Из ВходящиеДанные Цикл
			
			ИдентификаторДокумента = Формат(ЭлементДанных.Id, "ЧГ=0;");
			НакладнаяСАТУРН = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена, Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя(), ИдентификаторДокумента);
			
			СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
			ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
			СообщениеJSON.ИдентификаторЗаявки = ИдентификаторДокумента;
			ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, РеквизитыИсходящегоСообщения);
			СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение;
			СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(
				Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов, СообщениеJSON.Документ);
			
			СообщениеJSON.ПараметрыЗапроса = Новый Структура;
			СообщениеJSON.ПараметрыЗапроса.Вставить("ЗагрузкаНовогоДокумента", Не ЗначениеЗаполнено(НакладнаяСАТУРН));
			СообщениеJSON.ПараметрыЗапроса.Вставить("СтатусДокумента", ИнтерфейсСАТУРН.СтатусНакладной(ЭлементДанных.lcState));
			СообщенияJSON.Добавить(СообщениеJSON);
			
		КонецЦикла;
		
		Если КоличествоЭлементов = 0 Тогда
			
			ПараметрыЗапросаОснования.ВсеСтраницыПолучены = Истина;
			
		Иначе
			
			НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
			НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
			
			СообщениеJSON = СообщенияЗагрузкиДокументов(
				НовыеПараметрыФормирования,
				ПараметрыОбмена,
				Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов,
				РеквизитыИсходящегоСообщения);
			СообщениеJSON.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
			ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, РеквизитыИсходящегоСообщения);
			СообщенияJSON.Добавить(СообщениеJSON);
			
			ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		ПараметрыЗапросаОснования             = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		КоличествоЭлементов = ВходящиеДанные.Количество();
		
		РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		ПараметрыПолученияПартии = Справочники.ПартииСАТУРН.ПараметрыПолученияПартии();
		ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
		
		ТаблицаДанных = Новый ТаблицаЗначений();
		ТаблицаДанных.Колонки.Добавить("Идентификатор",         ОбщегоНазначения.ОписаниеТипаСтрока(255));
		ТаблицаДанных.Колонки.Добавить("СтатусОбработки",       Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН"));
		ТаблицаДанных.Колонки.Добавить("СтатусОбработкиСАТУРН", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН"));
		ТаблицаДанных.Колонки.Добавить("Ссылка",                Новый ОписаниеТипов("ДокументСсылка.НакладнаяСАТУРН"));
		ТаблицаДанных.Колонки.Добавить("ИдентификаторПолучателя",  ОбщегоНазначения.ОписаниеТипаСтрока(255));
		ТаблицаДанных.Колонки.Добавить("ИдентификаторОтправителя", ОбщегоНазначения.ОписаниеТипаСтрока(255));

		ТаблицаДанных.Колонки.Добавить("ДатаИзменения",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
		
		ОрганизацияСАТУРНИдентификатор = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ОрганизацияСАТУРНИдентификатор;
		СтатусыКОбновлению = СтатусыНакладнойКОбновлению();
		Для Каждого ЭлементДанных Из ВходящиеДанные Цикл
			
			Если СтатусыКОбновлению[ЭлементДанных.lcState] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаДанных.Добавить();
			СтрокаТаблицы.Идентификатор         = Формат(ЭлементДанных.Id, "ЧГ=0;");
			СтрокаТаблицы.СтатусОбработкиСАТУРН = ИнтерфейсСАТУРН.СтатусНакладной(ЭлементДанных.lcState);
			СтрокаТаблицы.ДатаИзменения         = ОбщегоНазначенияИСКлиентСервер.ДатаИзСтрокиUNIX(ЭлементДанных.sys_changedAt);
			СтрокаТаблицы.ИдентификаторПолучателя  = Формат(ЭлементДанных.recieverContractorId, "ЧГ=0;");
			СтрокаТаблицы.ИдентификаторОтправителя = Формат(ЭлементДанных.ownerContractorId,    "ЧГ=0;");
			
		КонецЦикла;
		
		ДополнитьСтатусыНакладныхПоИдентфикаторам(ТаблицаДанных);
		
		СообщенияJSON = Новый Массив;
		
		ДатаПоследнегоДокумента = ПараметрыЗапросаОснования.ДатаПоследнегоДокумента;
		
		СтатусыКОбработке = СтатусыОбработкиНакладнойСАТУРНКОбработке();
		Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
			
			Операция = Неопределено;
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.Ссылка)
				И (СтрокаТаблицы.ИдентификаторПолучателя = ОрганизацияСАТУРНИдентификатор
					Или СтрокаТаблицы.ИдентификаторОтправителя = ОрганизацияСАТУРНИдентификатор) Тогда
				Если СтатусыКОбработке[СтрокаТаблицы.СтатусОбработкиСАТУРН] = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТаблицы.Ссылка)
				И СтрокаТаблицы.СтатусОбработки <> СтрокаТаблицы.СтатусОбработкиСАТУРН
				И СоответствиеСтатусовЧастичнойПриемкиСАТУРН()[СтрокаТаблицы.СтатусОбработки] <> СтрокаТаблицы.СтатусОбработкиСАТУРН Тогда
				Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение;
			КонецЕсли;
			
			Если Операция <> Неопределено Тогда
				
				СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
				ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
				СообщениеJSON.ИдентификаторЗаявки = СтрокаТаблицы.Идентификатор;
				ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, РеквизитыИсходящегоСообщения);
				СообщениеJSON.Операция            = Операция;
				СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(
					Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов, СообщениеJSON.Документ);
				СообщениеJSON.ПараметрыЗапроса  = Новый Структура;
				СообщениеJSON.ПараметрыЗапроса.Вставить("СтатусДокумента", СтрокаТаблицы.СтатусОбработкиСАТУРН);
				Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение Тогда
					СообщениеJSON.Документ = СтрокаТаблицы.Ссылка;
				Иначе // НакладнаяЗагрузкаДокументовЧтение
					СообщениеJSON.ПараметрыЗапроса.Вставить("ЗагрузкаНовогоДокумента", Истина);
				КонецЕсли;
				СообщенияJSON.Добавить(СообщениеJSON);
				
				ДатаПоследнегоДокумента = Макс(ДатаПоследнегоДокумента, СтрокаТаблицы.ДатаИзменения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоЭлементов = 0 Тогда
			
			ПараметрыЗапросаОснования.ВсеСтраницыПолучены = Истина;
			
		Иначе
			
			НовыеПараметрыФормирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗапроса);
			НовыеПараметрыФормирования.НомерСтраницы = НовыеПараметрыФормирования.НомерСтраницы + 1;
			
			СообщениеJSON = СообщенияЗагрузкиДокументов(
				НовыеПараметрыФормирования,
				ПараметрыОбмена,
				Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов,
				РеквизитыИсходящегоСообщения);
			СообщениеJSON.ЗагружатьДо = РеквизитыИсходящегоСообщения.ЗагружатьДо;
			ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, РеквизитыИсходящегоСообщения);
			СообщенияJSON.Добавить(СообщениеJSON);
			
			ПараметрыЗапросаОснования.ДатаПоследнегоДокумента = ДатаПоследнегоДокумента;
			
			ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		Идентификатор = ПолученныеДанные.objList._OBJ_ARRAY[0].id;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект               = ЭлементОчереди.Документ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = Идентификатор;
			
			ДокументОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки = Идентификатор;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = Идентификатор;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
		СообщениеJSON.АргументыОперации.theCard._id = Идентификатор;
		
		СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Истина);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
		
		Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ЭтоПолучениеИдентификаторовСтрок Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента;
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
			СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Истина);
		Иначе
			СообщениеJSON.Операция = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.Операция;
		КонецЕсли;
		
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовЧтение Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		Если ВходящиеДанные.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Документ по идентификатору %1 не найден.'"),
				РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки);
		КонецЕсли;
		
		ЭлементДанных = ВходящиеДанные[0];
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		СтатусДокумента = РеквизитыИсходящегоСообщения.ПараметрыЗапроса.СтатусДокумента;

		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ЭлементДанных.dateRecieve) Тогда
				ДокументОбъект.ДатаПолучения = ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateRecieve);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ЭлементДанных.dateReturn) Тогда
				ДокументОбъект.ДатаВозврата = ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateReturn);
			КонецЕсли;
			
			ИдентификаторГрузоотправительМестоХранения = Формат(ЭлементДанных.sourceWarehauseId._id, "ЧГ=0;");
			ДокументОбъект.ГрузоотправительМестоХранения = Справочники.МестаХраненияСАТУРН.МестоХранения(
				ИдентификаторГрузоотправительМестоХранения,
				ПараметрыОбмена,
				ЭлементОчереди.ОрганизацияСАТУРН);
			
			Если ТипЗнч(ЭлементДанных.destinationWarehauseId) = Тип("Структура") Тогда
				ИдентификаторГрузополучательМестоХранения = Формат(ЭлементДанных.destinationWarehauseId._id, "ЧГ=0;");
				ДокументОбъект.ГрузополучательМестоХранения = Справочники.МестаХраненияСАТУРН.МестоХранения(
					ИдентификаторГрузополучательМестоХранения,
					ПараметрыОбмена,
					ЭлементОчереди.ОрганизацияСАТУРН);
			КонецЕсли;
			
			// У старых документов может быть не заполнен
			Если ЗначениеЗаполнено(ДокументОбъект.Товары[0].ИдентификаторСтрокиСАТУРН) Тогда

				ОшибкиПриЗагрузке = Ложь;
				ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15);

				// Полный и частичный возврат при загрузке из сервиса никак не отличаются
				ОбновитьСтатусДокументаПриЗагрузке(СтатусДокумента, ЭлементДанных);
				РеквизитыИсходящегоСообщения.ПараметрыЗапроса.СтатусДокумента = СтатусДокумента;
				
				ГрузополучательСопоставлен = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
					ДокументОбъект.ГрузополучательОрганизацияСАТУРН).Сопоставлено;
				ГрузоотправительСопоставлен = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
					ДокументОбъект.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;

				ПараметрыЗаполнения = НовыеПараметрыЗаполненияТабличнойЧастиПриЧтенииСАТУРН();
				ПараметрыЗаполнения.СтатусДокумента           = СтатусДокумента;
				ПараметрыЗаполнения.ЗаполнитьКоличествоСАТУРН = Истина;

				Если СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен
					И (ГрузополучательСопоставлен Или ДокументОбъект.ВходящаяНакладная) Тогда
					ПараметрыЗаполнения.ОбновитьВыделеннуюПартию = Истина;
				ИначеЕсли ГрузоотправительСопоставлен
					И (СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично
					   Или СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично) Тогда
					ПараметрыЗаполнения.ОбновитьВыделеннуюПартию   = Истина;
					ПараметрыЗаполнения.ОбновитьВозвращеннуюПартию = Истина;
				КонецЕсли;

				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("ЭлементОчереди", ЭлементОчереди);
				ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
				ДополнительныеПараметры.Вставить("ИзмененныеОбъекты", ИзмененныеОбъекты);

				Результат = ОбновитьДанныеТабличнойЧастиДокументаПриЧтении(
					ВходящиеДанные,
					ДокументОбъект,
					ПараметрыЗаполнения,
					ДополнительныеПараметры);

				ЗаполнитьКоличествоУпаковокВСтрокахТабличнойЧасти(
					Результат.ПозицииДляПересчетаКоличества,
					Ложь,
					ДокументОбъект.ВходящаяНакладная);

			КонецЕсли;

			ДокументОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовЧтение Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		Если ВходящиеДанные.Количество() = 0 Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Документ по идентификатору %1 не найден.'"),
				РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки);
		КонецЕсли;
		
		НакладнаяСАТУРН = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(
			ПараметрыОбмена, Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя(), РеквизитыИсходящегоСообщения.ИдентификаторЗаявки);
		
		ЭлементДанных = ВходящиеДанные[0];
		
		Если ЗначениеЗаполнено(НакладнаяСАТУРН) Тогда
			
			Если  ПараметрыЗапроса.ЗагрузкаНовогоДокумента Тогда
				// Документ загружен другим сообщением в очереди.
				Возврат;
			КонецЕсли;
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементОчереди.Документ = НакладнаяСАТУРН;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
			
			Попытка
				Блокировка.Заблокировать();
				ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
				ЗаполнитьДокументПоДаннымСАТУРН(ДокументОбъект, ЭлементДанных, ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты);
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
			
		Иначе
			
			ДокументОбъект = СоздатьДокумент();
			ЗаполнитьДокументПоДаннымСАТУРН(ДокументОбъект, ЭлементДанных, ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты);
			
		КонецЕсли;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		// Отправка накладной
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			
			Если ВходящиеДанные.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Документ по идентификатору %1 не найден.'"),
					РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки);
			КонецЕсли;
			
			Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ЭтоПолучениеИдентификаторовСтрок Тогда
				
				СообщенияJSON = Новый Массив;
				
				СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
				
				ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
				
				СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента;
				СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
				СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
				СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
				СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
				СообщениеJSON.АргументыОперации.theCard._id = СообщениеJSON.ИдентификаторЗаявки;
				
				СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Ложь);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				НомерСтроки = 1;
				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.PA_Batch_Shipments Цикл
					
					ИдентификаторСтроки = СтрокаТаблицы.id;
					РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамПартий.Вставить(ИдентификаторСтроки, НомерСтроки);
					
					СообщениеJSON.АргументыОперации.theCard._tparts.PA_Batch_Shipments[НомерСтроки - 1].Вставить("_id", ИдентификаторСтроки);
					СообщениеJSON.АргументыОперации.theCard._tparts.PA_Batch_Shipments[НомерСтроки - 1].Удалить("id");
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
				
				ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
				
			Иначе
				
				ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15);

				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.PA_Batch_Shipments Цикл
					
					НомерСтроки = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамПартий[СтрокаТаблицы.id];
					Если НомерСтроки = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТовары = ДокументОбъект.Товары[НомерСтроки - 1];
					СтрокаТовары.ИдентификаторСтрокиСАТУРН = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаТаблицы.id);

					Если СтрокаТаблицы.batchIdReg._id <> СтрокаТаблицы.batchId._id Тогда
						СтрокаТовары.ВыделеннаяПартия = Справочники.ПартииСАТУРН.Партия(
							СтрокаТаблицы.batchIdReg._id,
							ПараметрыОбмена,
							ЭлементОчереди.ОрганизацияСАТУРН);
					Иначе
						СтрокаТовары.ВыделеннаяПартия = СтрокаТовары.Партия;
					КонецЕсли;
					
					ИзмененныеОбъекты.Добавить(СтрокаТовары.ВыделеннаяПартия);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументОбъект.Записать();
			
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
		
		СообщениеJSON.АргументыОперации   = Новый Структура();
		АргументыОперации = СообщениеJSON.АргументыОперации;
		АргументыОперации.Вставить("getFullCards", 1);
		
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Ложь);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента Тогда
			Если РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.Свойство("ЧастичнаяПриемка") Тогда
				СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки;
			Иначе
				СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки;
			КонецЕсли;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента Тогда
			Если РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.Свойство("ЧастичнаяПриемка") Тогда
				СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата;
			Иначе
				СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата;
			КонецЕсли;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение;
		ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ;
		КонецЕсли;
		
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		
		Статусы = РезультирующийСтатусДокумента(ЭлементОчереди);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ЭлементОчереди.Документ,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
		Если Статусы.Принят <> Неопределено Тогда
			РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
				ЭлементОчереди.Документ,
				ПараметрыОбновления);
		КонецЕсли;
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
			Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование Тогда
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя());
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
			
			Попытка
				
				Блокировка.Заблокировать();
				
				ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
				
				Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
					СтрокаТаблицы.ВыделеннаяПартия = Неопределено;
					СтрокаТаблицы.ИдентификаторСтрокиСАТУРН = Неопределено;
				КонецЦикла;
				
				ДокументОбъект.Записать();
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
		СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение;
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ПараметрыЗапроса = Новый Структура;
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование Тогда
			СообщениеJSON.ПараметрыЗапроса.Вставить("ОбновитьВыделенныеПартииПослеАннулирования", Истина);
		Иначе
			СообщениеJSON.ПараметрыЗапроса.Вставить("ОбновитьВыделенныеПартииПослеАннулирования", Ложь);
		КонецЕсли;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		// Отправка накладной
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.НакладнаяСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);

		Попытка

			Блокировка.Заблокировать();

			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();

			Если ВходящиеДанные.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Документ по идентификатору %1 не найден.'"),
					РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки);
			КонецЕсли;
			
			ПараметрыЗаполнения = НовыеПараметрыЗаполненияТабличнойЧастиПриЧтенииСАТУРН();
			Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("ОбновитьВыделенныеПартииПослеАннулирования")
				И РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ОбновитьВыделенныеПартииПослеАннулирования Тогда
				ПараметрыЗаполнения.ОбновитьВыделеннуюПартиюПослеАннулирования = Истина;
			Иначе
				ПараметрыЗаполнения.ОбновитьВыделеннуюПартию    = Истина;
				ПараметрыЗаполнения.ОбновитьВозвращеннуюПартию  = Истина;
			КонецЕсли;

			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ЭлементОчереди", ЭлементОчереди);
			ДополнительныеПараметры.Вставить("ПараметрыОбмена", ПараметрыОбмена);
			ДополнительныеПараметры.Вставить("ИзмененныеОбъекты", ИзмененныеОбъекты);

			Результат = ОбновитьДанныеТабличнойЧастиДокументаПриЧтении(
				ВходящиеДанные,
				ДокументОбъект,
				ПараметрыЗаполнения,
				ДополнительныеПараметры);

			Если Результат.ЕстьИзменения Тогда
				ДокументОбъект.Записать();
			КонецЕсли;

			ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);

		Исключение
			ВызватьИсключение;
		КонецПопытки;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяОрганизацияСАТУРН", Справочники.КлассификаторОрганизацийСАТУРН.ПустаяСсылка());
	Запрос.УстановитьПараметр("ОперацияПеревозка",       Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки,
	|	ДанныеШапки.ГрузоотправительОрганизацияСАТУРН КАК ГрузоотправительОрганизацияСАТУРН,
	|	ВЫБОР
	|		КОГДА ДанныеШапки.ГрузополучательОрганизацияСАТУРН = &ПустаяОрганизацияСАТУРН
	|			И ДанныеШапки.Операция = &ОперацияПеревозка
	|		ТОГДА ДанныеШапки.ГрузоотправительОрганизацияСАТУРН
	|		ИНАЧЕ ДанныеШапки.ГрузополучательОрганизацияСАТУРН
	|	КОНЕЦ КАК ГрузополучательОрганизацияСАТУРН
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = &Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
	Запрос.УстановитьПараметр("ДляОтправителя",
		ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
			Реквизиты.ГрузоотправительОрганизацияСАТУРН).Сопоставлено);
	Запрос.УстановитьПараметр("ДляПолучателя",
		ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
			Реквизиты.ГрузополучательОрганизацияСАТУРН).Сопоставлено);
	
	// Движение Расход
	СтатусыРегистрацииОтправителя = Новый Массив;
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.НаправленНаЭкспорт);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Утрачен);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеПодтвержденияОшибка);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержден);
	СтатусыРегистрацииОтправителя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказано);
	
	// Движение Приход
	СтатусыРегистрацииПолучателя = Новый Массив;
	СтатусыРегистрацииПолучателя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен);
	СтатусыРегистрацииПолучателя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично);
	СтатусыРегистрацииПолучателя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично);
	СтатусыРегистрацииПолучателя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка);
	СтатусыРегистрацииПолучателя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается);
	СтатусыРегистрацииПолучателя.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеПодтвержденияОшибка);
	
	// Движение Приход
	СтатусыЧастичнаяПриемкаВозврат = Новый Массив;
	СтатусыЧастичнаяПриемкаВозврат.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично); // Резерв возвращаемой партии
	СтатусыЧастичнаяПриемкаВозврат.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично); // Остаток
	СтатусыЧастичнаяПриемкаВозврат.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен); // Остаток
	СтатусыЧастичнаяПриемкаВозврат.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка);
	СтатусыЧастичнаяПриемкаВозврат.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается);
	
	Запрос.УстановитьПараметр("СтатусыРегистрацииОтправителя",  СтатусыРегистрацииОтправителя);
	Запрос.УстановитьПараметр("СтатусыРегистрацииПолучателя",   СтатусыРегистрацииПолучателя);
	Запрос.УстановитьПараметр("СтатусыЧастичнаяПриемкаВозврат", СтатусыЧастичнаяПриемкаВозврат);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Шапка.ДатаРегистрации                  КАК Период,
	|	ТаблицаТовары.Партия                   КАК Партия,
	|	ВЫБОР
	|		КОГДА Статусы.Статус В (&СтатусыРегистрацииОтправителя)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСАТУРН,
	|	ВЫБОР
	|		КОГДА Не Статусы.Статус В (&СтатусыРегистрацииОтправителя)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.Возвращен)
	|		ТОГДА ТаблицаТовары.ВыделеннаяПартия <> ТаблицаТовары.Партия
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|	И &ДляОтправителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.ДатаПолучения                    КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|		ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ТаблицаТовары.ВыделеннаяПартия
	|	КОНЕЦ                                  КАК Партия,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.Получен)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ ТаблицаТовары.КоличествоУпаковокПринято * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|	КОНЕЦ КАК КоличествоСАТУРН,
	|	0 КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И &ДляПолучателя
	|	И Статусы.Статус В (&СтатусыРегистрацииПолучателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА Шапка.ДатаВозврата = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА Шапка.ДатаПолучения
	|		ИНАЧЕ Шапка.ДатаВозврата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ПартияВозврат = ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|		ТОГДА ТаблицаТовары.ВыделеннаяПартия
	|		ИНАЧЕ ТаблицаТовары.ПартияВозврат
	|	КОНЕЦ КАК Партия,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.Возвращен)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковокВозвращено * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСАТУРН,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковокВозвращено * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И &ДляОтправителя
	|	И Статусы.Статус В (&СтатусыЧастичнаяПриемкаВозврат)
	|	И ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.Возвращен)
	|		ТОГДА ТаблицаТовары.ВыделеннаяПартия <> ТаблицаТовары.Партия
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок <> ТаблицаТовары.КоличествоУпаковокПринято
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестаХраненияПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Шапка.ДатаПолучения                КАК Период,
	|	ВЫБОР
	|		КОГДА Шапка.ГрузополучательОрганизацияСАТУРН = &ПустаяОрганизацияСАТУРН
	|			И Шапка.Операция = &ОперацияПеревозка
	|		ТОГДА Шапка.ГрузоотправительОрганизацияСАТУРН
	|		ИНАЧЕ Шапка.ГрузополучательОрганизацияСАТУРН
	|	КОНЕЦ                              КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузополучательМестоХранения КАК МестоХранения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ВыделеннаяПартия = ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|		ТОГДА ТаблицаТовары.Партия
	|		ИНАЧЕ ТаблицаТовары.ВыделеннаяПартия
	|	КОНЕЦ                  КАК Партия
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И &ДляПолучателя
	|	И Статусы.Статус В (&СтатусыРегистрацииПолучателя)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Шапка.ДатаВозврата = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА Шапка.ДатаПолучения
	|		ИНАЧЕ Шапка.ДатаВозврата
	|	КОНЕЦ КАК Период,
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузоотправительМестоХранения     КАК МестоХранения,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ПартияВозврат = ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|		ТОГДА ТаблицаТовары.ВыделеннаяПартия
	|		ИНАЧЕ ТаблицаТовары.ПартияВозврат
	|	КОНЕЦ                  КАК Партия
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И &ДляОтправителя
	|	И Статусы.Статус В (&СтатусыЧастичнаяПриемкаВозврат)
	|	И ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.Возвращен)
	|		ТОГДА ТаблицаТовары.ВыделеннаяПартия <> ТаблицаТовары.Партия
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается)
	|			ИЛИ Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок <> ТаблицаТовары.КоличествоУпаковокПринято
	|			И ТаблицаТовары.ПартияВозврат <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок <> ТаблицаТовары.КоличествоУпаковокПринято
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН- статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.НаправленНаЭкспорт);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Утрачен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик); // При аннулировании
	Статусы.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути); // При аннулировании
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Формирует JSON сообщения для загрузки статусов накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ЗагрузкаСтатусовНакладныхJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусовРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	АбстрактноеСообщениеJSON.Документ            = ДокументСсылка;
	АбстрактноеСообщениеJSON.Версия              = 1;
	АбстрактноеСообщениеJSON.Операция            = Операция;
	АбстрактноеСообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	АбстрактноеСообщениеJSON.АргументыОперации   = Новый Структура;
	
	ПараметрыФормирования = ПараметрыФормированияСообщенияJSON();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, АбстрактноеСообщениеJSON);
	ПараметрыФормирования.НомерСтраницы = 1;
	
	ПараметрыОбработкиДокумента = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
	ПараметрыЗагрузки = ПараметрыОбработкиДокумента.ДополнительныеПараметры;

	//@skip-check wrong-string-literal-content
	ПараметрыФормирования.ОрганизацияСАТУРНИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПараметрыОбработкиДокумента.ОрганизацияСАТУРН, "Идентификатор");
	
	ПараметрыФормирования.ДатаСинхронизации = РегистрыСведений.СинхронизацияСтатусовДокументовСАТУРН.ДатаСинхронизации(
		ПараметрыОбработкиДокумента.ОрганизацияСАТУРН,
		Перечисления.ВидыНастроекОбменаСАТУРН.ЗагрузкаСтатусовНакладных);
	
	Если ПараметрыЗагрузки.Свойство("Интервал") Тогда
		ПараметрыФормирования.НачалоПериода = ПараметрыЗагрузки.Интервал.НачалоПериода;
		ПараметрыФормирования.КонецПериода  = ПараметрыЗагрузки.Интервал.КонецПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыФормирования.ДатаСинхронизации)
		И (Не ЗначениеЗаполнено(ПараметрыФормирования.НачалоПериода)
			Или ПараметрыФормирования.ДатаСинхронизации > ПараметрыФормирования.НачалоПериода)
		Или Не ЗначениеЗаполнено(ПараметрыФормирования.ДатаСинхронизации)
			И Не ЗначениеЗаполнено(ПараметрыФормирования.НачалоПериода)
			И Не ЗначениеЗаполнено(ПараметрыФормирования.КонецПериода) Тогда
		ПараметрыФормирования.ОбновитьДатуСинхронизации = Истина;
	КонецЕсли;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = ПараметрыФормирования;
	АбстрактноеСообщениеJSON.ОрганизацияСАТУРН = ПараметрыОбработкиДокумента.ОрганизацияСАТУРН;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	Для Каждого ОперацияЗагрузки Из ПараметрыФормирования.ОперацииЗагрузки Цикл
		СообщениеJSON = СообщенияЗагрузкиДокументов(
			ПараметрыФормирования,
			ДополнительныеПараметры.ПараметрыОбмена,
			ОперацияЗагрузки,
			АбстрактноеСообщениеJSON);
		СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
		ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для загрузки входящей накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ЗагрузкаВходящихНакладныхJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументовРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры;
	ПараметрыОбработкиДокумента = ДополнительныеПараметры.ПараметрыОбработкиДокумента;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	АбстрактноеСообщениеJSON.Документ            = ПустаяСсылка();
	АбстрактноеСообщениеJSON.Версия              = 1;
	АбстрактноеСообщениеJSON.Операция            = Операция;
	АбстрактноеСообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	АбстрактноеСообщениеJSON.АргументыОперации   = Новый Структура;
	
	ПараметрыФормирования = ПараметрыФормированияСообщенияJSON();
	ЗаполнитьЗначенияСвойств(ПараметрыФормирования, АбстрактноеСообщениеJSON);
	ПараметрыФормирования.НомерСтраницы                  = 1;
	ПараметрыФормирования.ОперацииЗагрузки = Новый Массив;
	ПараметрыФормирования.ОперацииЗагрузки.Добавить(Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов);
	
	ПараметрыЗагрузки = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ДополнительныеПараметры;

	//@skip-check wrong-string-literal-content
	ОрганизацияСАТУРНИдентификатор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработкиДокумента.ОрганизацияСАТУРН, "Идентификатор");
	ПараметрыФормирования.ОрганизацияСАТУРНИдентификатор = ОрганизацияСАТУРНИдентификатор;
	
	Если ПараметрыЗагрузки.Свойство("Интервал") Тогда
		ПараметрыФормирования.НачалоПериода = ПараметрыЗагрузки.Интервал.НачалоПериода;
		ПараметрыФормирования.КонецПериода  = ПараметрыЗагрузки.Интервал.КонецПериода;
	КонецЕсли;
	
	Если ПараметрыЗагрузки.Свойство("ИдентификаторДокумента") Тогда
		ПараметрыФормирования.ИдентификаторДокумента = ПараметрыЗагрузки.ИдентификаторДокумента;
	КонецЕсли;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = ПараметрыФормирования;
	АбстрактноеСообщениеJSON.ОрганизацияСАТУРН = ПараметрыОбработкиДокумента.ОрганизацияСАТУРН;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	Для Каждого ОперацияЗагрузки Из ПараметрыФормирования.ОперацииЗагрузки Цикл
		СообщениеJSON = СообщенияЗагрузкиДокументов(
			ПараметрыФормирования,
			ДополнительныеПараметры.ПараметрыОбмена,
			ОперацияЗагрузки,
			АбстрактноеСообщениеJSON);
		СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
		ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция СообщенияЗагрузкиДокументов(ПараметрыФормирования, ПараметрыОбмена, Операция, РеквизитыИсходящегоСообщения)
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
	СообщениеJSON.Операция          = Операция;
	СообщениеJSON.Описание          = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
	СообщениеJSON.НомерСтраницы     = ПараметрыФормирования.НомерСтраницы;
	СообщениеJSON.ПараметрыЗапроса  = ПараметрыФормирования;
	
	Если СообщениеJSON.НомерСтраницы = 1 Тогда
		НачалоПозиции = 0;
	Иначе
		НачалоПозиции = ПараметрыФормирования.КоличествоНаСтранице * (СообщениеJSON.НомерСтраницы - 1);
	КонецЕсли;
	
	СообщениеJSON.АргументыОперации = АргументыОперацииЗагрузкаНакладных(ПараметрыФормирования, НачалоПозиции, Операция);
	
	Возврат СообщениеJSON;
	
КонецФункции

Функция АргументыОперацииЗагрузкаНакладных(ПараметрыФормирования, НачалоПозиции, Операция)
	
	АргументыОперации = Новый Структура();
	АргументыОперации.Вставить("pos",               НачалоПозиции);
	АргументыОперации.Вставить("size",              ПараметрыФормирования.КоличествоНаСтранице);
	АргументыОперации.Вставить("getFullCards",      0);
	
	Отборы = Новый Массив;
	
	// Загрузка по идентификатору документа.
	Если ЗначениеЗаполнено(ПараметрыФормирования.ИдентификаторДокумента) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("column", "id");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", ПараметрыФормирования.ИдентификаторДокумента); // значение в массиве
		Отборы.Добавить(Отбор);
		
		АргументыОперации.Вставить("filters", Отборы);
		Возврат АргументыОперации;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыФормирования.ДатаСинхронизации)
		И Не ЗначениеЗаполнено(ПараметрыФормирования.НачалоПериода) Тогда
		Сутки = 86400;
		ПараметрыФормирования.НачалоПериода = НачалоДня(ТекущаяДатаСеанса()) - 30 * Сутки;
	КонецЕсли;
	
	НачалоПериода     = ПараметрыФормирования.НачалоПериода;
	КонецПериода      = ПараметрыФормирования.КонецПериода;
	ДатаСинхронизации = ПараметрыФормирования.ДатаСинхронизации;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("column", "recieverContractorId");
		Отбор.Вставить("condition", "=");
		Отбор.Вставить("value", Строка(ПараметрыФормирования.ОрганизацияСАТУРНИдентификатор));
		Отборы.Добавить(Отбор);
		
		ИмяКолонкиОтбораДата = "docDate";
		
	Иначе
		
		ИмяКолонкиОтбораДата = "sys_changedAt";
		
		Если ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = Формат(ОбщегоНазначенияИС.ДатаВСтрокуUNIX(ПараметрыФормирования.НачалоПериода), "ЧГ=0;");
		КонецЕсли;
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			КонецПериода = Формат(ОбщегоНазначенияИС.ДатаВСтрокуUNIX(КонецДня(КонецПериода)), "ЧГ=0;");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДатаСинхронизации) Тогда
			ДатаСинхронизации = Формат(ОбщегоНазначенияИС.ДатаВСтрокуUNIX(ПараметрыФормирования.ДатаСинхронизации), "ЧГ=0;");
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеСтатусы = Новый Массив;
	Для Каждого ЭлементКоллекции Из СтатусыНакладнойКОбновлению() Цикл
		ДопустимыеСтатусы.Добавить(ЭлементКоллекции.Ключ);
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("column", "lcState");
	Отбор.Вставить("condition", "=");
	Отбор.Вставить("value", ДопустимыеСтатусы);
	Отборы.Добавить(Отбор);
	
	Если ЗначениеЗаполнено(НачалоПериода) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("column", ИмяКолонкиОтбораДата);
		Отбор.Вставить("condition", ">=");
		Отбор.Вставить("value", НачалоПериода);
		Отборы.Добавить(Отбор);
		
		Если ЗначениеЗаполнено(КонецПериода) Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("column", ИмяКолонкиОтбораДата);
			Отбор.Вставить("condition", "<=");
			Отбор.Вставить("value", КонецПериода);
			Отборы.Добавить(Отбор);
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ДатаСинхронизации) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("column", ИмяКолонкиОтбораДата);
		Отбор.Вставить("condition", ">=");
		Отбор.Вставить("value", ДатаСинхронизации);
		Отборы.Добавить(Отбор);
		
	КонецЕсли;
	
	АргументыОперации.Вставить("filters", Отборы);
	
	Возврат АргументыОперации;
	
КонецФункции

// Формирует JSON сообщения для исходящей накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ИсходящаяНакладнаяJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ГрузоотправительОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузоотправительОрганизацияСАТУРН                  КАК ГрузоотправительОрганизацияСАТУРН,
	|	Представление(Шапка.ГрузоотправительОрганизацияСАТУРН)   КАК ГрузоотправительПредставление,
	|	Шапка.ГрузоотправительОрганизацияСАТУРН.Идентификатор    КАК ГрузоотправительИдентификатор,
	|
	|	Шапка.ГрузополучательОрганизацияСАТУРН                  КАК ГрузополучательОрганизацияСАТУРН,
	|	Представление(Шапка.ГрузополучательОрганизацияСАТУРН)   КАК ГрузополучательПредставление,
	|	ЕСТЬNULL(Шапка.ГрузополучательОрганизацияСАТУРН.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузополучательИдентификатор,
	|
	|	Шапка.ГрузоотправительМестоХранения                      КАК ГрузоотправительМестоХранения,
	|	ЕСТЬNULL(Шапка.ГрузоотправительМестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузоотправительМестоХраненияИдентификатор,
	|	Шапка.ГрузополучательМестоХранения                      КАК ГрузополучательМестоХранения,
	|	ЕСТЬNULL(Шапка.ГрузополучательМестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузополучательМестоХраненияИдентификатор,
	|
	|	Шапка.Перевозчик                  КАК Перевозчик,
	|	Представление(Шапка.Перевозчик)   КАК ПеревозчикПредставление,
	|	ЕСТЬNULL(Шапка.Перевозчик.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ПеревозчикИдентификатор,
	|	
	|	Шапка.НомерПервичногоДокумента        КАК НомерПервичногоДокумента,
	|	Шапка.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|
	|	Шапка.ДатаРегистрации            КАК ДатаРегистрации,
	|	Шапка.НомерТранспортногоСредства КАК НомерТранспортногоСредства,
	|	Шапка.ИдентификаторГосКонтракта  КАК ИдентификаторГосКонтракта,
	|	Шапка.Комментарий                КАК Комментарий
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки               КАК НомерСтроки,
	|	Представление(Товары.ПАТ)        КАК ПАТПредставление,
	|	Представление(Товары.Упаковка)   КАК УпаковкаПредставление,
	|	Товары.КоличествоУпаковок        КАК КоличествоУпаковок,
	|	Товары.КоличествоВУпаковкеСАТУРН КАК КоличествоВУпаковкеСАТУРН,
	|	Товары.КодТовара                 КАК КодТовара,
	|	Товары.КодПартии                 КАК КодПартии,
	|
	|	ЕСТЬNULL(Товары.ПАТ.Идентификатор, """")    КАК ПАТИдентификатор,
	|	Товары.Партия                               КАК Партия,
	|	ЕСТЬNULL(Товары.Партия.Идентификатор, """") КАК ПартияСАТУРНИдентификатор
	|ИЗ
	|	Документ.НакладнаяСАТУРН.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);
	АбстрактноеСообщениеJSON.АргументыОперации = Новый Структура;
	
	Если Товары.Количество() = 0 Тогда
		АбстрактноеСообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			АбстрактноеСообщениеJSON,
			НСтр("ru = 'Передача сообщений по устаревшим операциям не поддерживается.
			           |Для отправки документа выберите операцию ""Экспорт""'"));
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента, НомерВерсии);
	СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	ДальнейшиеДействия = Новый Массив;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = Новый Структура;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Шапка.Операция);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ДальнейшиеДействия", ДальнейшиеДействия);
	
	Если ВозможнаОперацияПодтвержденияНакладной(Шапка, Истина) Тогда
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
	КонецЕсли;
	
	АргументыОперации = АбстрактноеСообщениеJSON.АргументыОперации;
	
	АргументыОперации.Вставить("theCard", Новый Структура);
	ДанныеДокумента = АргументыОперации.theCard;
	
	ДанныеДокумента.Вставить("_id",          Неопределено);
	ДанныеДокумента.Вставить("name",         Шапка.НаименованиеПервичногоДокумента);
	ДанныеДокумента.Вставить("description",  "");
	ДанныеДокумента.Вставить("docNote",      Шапка.Комментарий);
	ДанныеДокумента.Вставить("docNum",       Шапка.НомерПервичногоДокумента);
	
	Если ЗначениеЗаполнено(Шапка.ИдентификаторГосКонтракта) Тогда
		ДанныеДокумента.Вставить("contractNum", Шапка.ИдентификаторГосКонтракта);
	КонецЕсли;
	
	// Контрагент, который является владельцем партии на начало операции (юрлицо)
	// (может не совпадать с грузоотправителем, если груз отправляется с ответственного хранения)
	ДанныеДокумента.Вставить("ownerContractorId", Шапка.ГрузоотправительИдентификатор);
	ДанныеДокумента.Вставить("sourceWarehauseId", Шапка.ГрузоотправительМестоХраненияИдентификатор);
	
	ДанныеДокумента.Вставить("docDate", ЗаписатьДатуJSON(Шапка.ДатаРегистрации, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
	Если Шапка.Операция <> Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		И Шапка.Операция <> Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство Тогда
		
		Если Шапка.Операция <> Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля Тогда
			// Контрагент, которому переходит во владение партия (может не совпадать с грузоотправителем,
			// если груз перемещается на ответственное хранение)
			Если ЗначениеЗаполнено(Шапка.ГрузополучательОрганизацияСАТУРН) Тогда
				ДанныеДокумента.Вставить("recieverContractorId",   Шапка.ГрузополучательИдентификатор);
			ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка Тогда
				ДанныеДокумента.Вставить("recieverContractorId",   Шапка.ГрузоотправительИдентификатор);
			КонецЕсли;
			
			// Склад, куда перемещаем товар (приемник, куда перемещаем, если внутренее перемещенеи - тут быть null, или сам ))
			Если ЗначениеЗаполнено(Шапка.ГрузополучательМестоХранения) Тогда
				ДанныеДокумента.Вставить("destinationWarehauseId",   Шапка.ГрузополучательМестоХраненияИдентификатор);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ПеревозчикИдентификатор) Тогда
			ДанныеДокумента.Вставить("carrierContractorId",   Шапка.ПеревозчикИдентификатор);
		КонецЕсли;
		ДанныеДокумента.Вставить("vehicleNumber", Шапка.НомерТранспортногоСредства);
		
	КонецЕсли;
	
	ДанныеДокумента.Вставить("_tparts", Новый Структура);
	ДанныеТела = ДанныеДокумента._tparts;
	
	ДанныеТела.Вставить("PA_Batch_Shipments", Новый Массив);
	СтрокиТела = ДанныеТела.PA_Batch_Shipments;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("НомерСтрокПоИдентификаторамПартий", Новый Соответствие());
	
	Для Каждого ЭлементКоллекции Из Товары Цикл
		
		ИдентификаторСтроки = ЭлементКоллекции.НомерСтроки;
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("id",              ИдентификаторСтроки);
		ЭлементДанных.Вставить("name",            ЭлементКоллекции.ПАТПредставление);
		ЭлементДанных.Вставить("patProductId",    ЭлементКоллекции.ПАТИдентификатор);
		Если Не ЗначениеЗаполнено(ЭлементКоллекции.Партия) Тогда
			ДобавитьТекстОшибкиНеЗаполненаПартия(АбстрактноеСообщениеJSON, ЭлементКоллекции);
		Иначе
			ЭлементДанных.Вставить("batchId",         ЭлементКоллекции.ПартияСАТУРНИдентификатор);
		КонецЕсли;
		ЭлементДанных.Вставить("pu_title",        ЭлементКоллекции.УпаковкаПредставление);
		ЭлементДанных.Вставить("pu_kgWeight",     ЭлементКоллекции.КоличествоВУпаковкеСАТУРН);
		// Количество, отгружено, принято, возвращено упаковочных единиц
		ЭлементДанных.Вставить("countPu_sent",     ЭлементКоллекции.КоличествоУпаковок);
		ЭлементДанных.Вставить("countPu_accepted", ЭлементКоллекции.КоличествоУпаковок);
		ЭлементДанных.Вставить("sellerItemCode",   ЭлементКоллекции.КодТовара);
		ЭлементДанных.Вставить("sellerBatchId",    ЭлементКоллекции.КодПартии);
		СтрокиТела.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Если АбстрактноеСообщениеJSON.Ошибки.Количество() = 0 Тогда
		СообщенияJSON.Добавить(СообщениеJSON);
	КонецЕсли;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для подтверждения или возврата накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  ГрузПолучен - Неопределено, Булево - признак операции: Истина - подтверждение, Возврат - возврат накладной, Неопределено - груз утерян.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПриемкаВозвратНакладнойJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено, ГрузПолучен = Неопределено)
	
	Если ГрузПолучен = Истина Тогда
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса;
	ИначеЕсли ГрузПолучен = Ложь Тогда
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса;
	Иначе
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса;
	КонецЕсли;
	
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ГрузоотправительОрганизацияСАТУРН,
	|
	|	Шапка.ГрузополучательОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузополучательОрганизацияСАТУРН                  КАК ГрузополучательОрганизацияСАТУРН,
	|	Представление(Шапка.ГрузополучательОрганизацияСАТУРН)   КАК ГрузополучательПредставление,
	|	ЕСТЬNULL(Шапка.ГрузополучательОрганизацияСАТУРН.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузополучательИдентификатор,
	|
	|	Шапка.ГрузополучательМестоХранения                      КАК ГрузополучательМестоХранения,
	|	ЕСТЬNULL(Шапка.ГрузополучательМестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузополучательМестоХраненияИдентификатор,
	|
	|	Шапка.ДатаПолучения              КАК ДатаПолучения,
	|	Шапка.ДатаВозврата               КАК ДатаВозврата,
	|	Шапка.Комментарий                КАК Комментарий
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтрокиСРасхождениями.ИдентификаторСтрокиСАТУРН КАК ИдентификаторСтрокиСАТУРН
	|ПОМЕСТИТЬ СтрокиСРасхождениями
	|ИЗ
	|	Документ.НакладнаяСАТУРН.Товары КАК СтрокиСРасхождениями
	|ГДЕ
	|	СтрокиСРасхождениями.Ссылка = &Ссылка
	|	И &ДоступнаЧастичнаяПриемка
	|	И СтрокиСРасхождениями.КоличествоВозвращеноСАТУРН > 0
	|");

	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.КоличествоСАТУРН             КАК КоличествоСАТУРН,
	|	Товары.КоличествоПринятоСАТУРН      КАК КоличествоПринятоСАТУРН,
	|	Товары.КоличествоВозвращеноСАТУРН   КАК КоличествоВозвращеноСАТУРН,
	|	Товары.ПричинаРасхождения           КАК ПричинаРасхождения,
	|	Товары.ИдентификаторСтрокиСАТУРН    КАК ИдентификаторСтрокиСАТУРН
	|
	|ИЗ
	|	СтрокиСРасхождениями КАК СтрокиСРасхождениями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН.Товары КАК Товары
	|		ПО СтрокиСРасхождениями.ИдентификаторСтрокиСАТУРН = Товары.ИдентификаторСтрокиСАТУРН
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторСтрокиСАТУРН
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	Запрос.УстановитьПараметр("ДоступнаЧастичнаяПриемка", ГрузПолучен = Истина);

	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);
	АбстрактноеСообщениеJSON.АргументыОперации = Новый Структура;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = Новый Структура;
	
	Если ГрузПолучен = Истина Тогда
		Если Не ЗначениеЗаполнено(Шапка.ГрузополучательМестоХраненияИдентификатор) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				АбстрактноеСообщениеJSON,
				НСтр("ru = 'Не заполнено поле ""Склад-получатель""'"));
			СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
			Возврат СообщенияJSON;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ДатаПолучения) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			АбстрактноеСообщениеJSON,
			НСтр("ru = 'Не указана дата получения'"));
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;

	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;

	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	ЧастичнаяПриемка = Ложь;
	ПараметрыЗапроса = Новый Структура;
	Если ГрузПолучен = Истина Тогда
		ОперацияСообщения = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента;
		Реквизиты         = РеквизитыДляРасчетаСтатусаДальнейшегоДействия(ДокументСсылка);
		ЧастичнаяПриемка  = Реквизиты.ЕстьПринято И Реквизиты.ЕстьВозвращено;
		ПараметрыЗапроса.Вставить("ЧастичнаяПриемка", ЧастичнаяПриемка);
		Если ПараметрыЗапроса.ЧастичнаяПриемка Тогда
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ЧастичнаяПриемка", Истина);
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки);
			ЗаполнитьДальнейшиеДействияВПараметрахЗапроса(Шапка, АбстрактноеСообщениеJSON);
		Иначе
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки);
		КонецЕсли;
	ИначеЕсли ГрузПолучен = Ложь Тогда
		ОперацияСообщения = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат);
		ЗаполнитьДальнейшиеДействияВПараметрахЗапроса(Шапка, АбстрактноеСообщениеJSON);
	Иначе
		ОперацияСообщения = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян);
	КонецЕсли;
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, ОперацияСообщения, НомерВерсии);
	СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
	
	СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
	СообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	СообщениеJSON.АргументыОперации = Новый Структура;
	АргументыОперации = СообщениеJSON.АргументыОперации;
	
	АргументыОперации.Вставить("theCard", Новый Структура);
	ДанныеДокумента = АргументыОперации.theCard;
	
	ДанныеДокумента.Вставить("_id",         Шапка.Идентификатор);
	ДанныеДокумента.Вставить("comment",     Шапка.Комментарий);
	ДанныеДокумента.Вставить("dateRecieve", ЗаписатьДатуJSON(Шапка.ДатаПолучения, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	Если ГрузПолучен = Истина Тогда
		ДанныеДокумента.Вставить("destinationWarehauseId", Шапка.ГрузополучательМестоХраненияИдентификатор);
	КонецЕсли;

	Если ГрузПолучен = Истина И ЧастичнаяПриемка Тогда

		ДанныеДокумента.Вставить("_tparts", Новый Структура);
		ДанныеТела = ДанныеДокумента._tparts;

		ДанныеТела.Вставить("PA_Batch_Shipments", Новый Массив);
		СтрокиТела = ДанныеТела.PA_Batch_Shipments;

		СоответствиеИдентификаторовСтрок = Новый Соответствие;

		Для Каждого СтрокаТовары Из Товары Цикл

			ЭлементДанных = СоответствиеИдентификаторовСтрок[СтрокаТовары.ИдентификаторСтрокиСАТУРН];
			Если ЭлементДанных = Неопределено Тогда

				ЭлементДанных = Новый Структура;
				ЭлементДанных.Вставить("_id",             Формат(СтрокаТовары.ИдентификаторСтрокиСАТУРН, "ЧГ=0;"));
				ЭлементДанных.Вставить("countPu_accepted", СтрокаТовары.КоличествоПринятоСАТУРН);
				ЭлементДанных.Вставить("countPu_returned", СтрокаТовары.КоличествоВозвращеноСАТУРН);
				ЭлементДанных.Вставить("countGapStatus",   СтрокаТовары.ПричинаРасхождения);

				СоответствиеИдентификаторовСтрок.Вставить(СтрокаТовары.ИдентификаторСтрокиСАТУРН, ЭлементДанных);
				СтрокиТела.Добавить(ЭлементДанных);

			Иначе

				ЭлементДанных.countPu_accepted = ЭлементДанных.countPu_accepted + СтрокаТовары.КоличествоПринятоСАТУРН;
				ЭлементДанных.countPu_returned = ЭлементДанных.countPu_returned + СтрокаТовары.КоличествоВозвращеноСАТУРН;

				Если СтрНайти(ЭлементДанных.countGapStatus, СтрокаТовары.ПричинаРасхождения) = 0 Тогда
					Если ЗначениеЗаполнено(ЭлементДанных.countGapStatus) Тогда
						ЭлементДанных.countGapStatus = СтрШаблон("%1; %2", ЭлементДанных.countGapStatus, СтрокаТовары.ПричинаРасхождения);
					Иначе
						ЭлементДанных.countGapStatus = СтрокаТовары.ПричинаРасхождения;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для подтверждения возврата накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  ГрузПолучен - Булево - признак операции: Истина - груз возвращен, Ложь - груз утерян при возврате.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПодтверждениеВозвратаJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено, ГрузПолучен = Истина)
	
	Если ГрузПолучен Тогда
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса;
	Иначе
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса;
	КонецЕсли;
	
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|
	|	Шапка.ДатаПолучения              КАК ДатаПолучения,
	|	Шапка.ДатаВозврата               КАК ДатаВозврата,
	|	Шапка.Комментарий                КАК Комментарий
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);

	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	Если Не ЗначениеЗаполнено(Шапка.ДатаВозврата) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			АбстрактноеСообщениеJSON,
			НСтр("ru = 'Не указана дата возврата'"));
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура; 
	ДанныеДокумента.Вставить("_id",     Шапка.Идентификатор);
	ДанныеДокумента.Вставить("comment", Шапка.Комментарий);
	ДанныеДокумента.Вставить("dateReturn", ЗаписатьДатуJSON(Шапка.ДатаВозврата, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
	АргументыОперации = Новый Структура;
	АргументыОперации.Вставить("theCard", ДанныеДокумента);
	
	ПараметрыЗапроса = Новый Структура;
	
	АбстрактноеСообщениеJSON.АргументыОперации = АргументыОперации;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = ПараметрыЗапроса;
	
	ЧастичнаяПриемка = Ложь;
	
	Если ГрузПолучен Тогда
		Реквизиты = РеквизитыДляРасчетаСтатусаДальнейшегоДействия(ДокументСсылка);
		ЧастичнаяПриемка = Реквизиты.ЕстьПринято И Реквизиты.ЕстьВозвращено;
		ПараметрыЗапроса.Вставить("ЧастичнаяПриемка", ЧастичнаяПриемка);
		Если ПараметрыЗапроса.ЧастичнаяПриемка Тогда
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата);
		Иначе
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата);
		КонецЕсли;
	Иначе
		АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате);
	КонецЕсли;
	
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	Если ГрузПолучен Тогда
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента, НомерВерсии);
			
	Иначе
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента, НомерВерсии);
		
	КонецЕсли;
	
	СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
	СообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	СообщениеJSON.АргументыОперации = АргументыОперации;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для аннулирования накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АннулированиеНакладнойJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	
	ТекущееСостояние = РегистрыСведений.СтатусыДокументовСАТУРН.ТекущееСостояние(ДокументСсылка);
	СтатусСАТУРН = ТекущееСостояние.Статус;
	
	Если СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка Тогда
		ОперацияДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Операция");
		Операция = ОперацииАннулированияПоВидуОперацииДокумента()[ОперацияДокумента];
	Иначе
		Операция = ОперацииАннулированияПоСтатусуДокумента()[СтатусСАТУРН];
	КонецЕсли;
	
	Если Операция = Неопределено Тогда
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		СообщениеJSON.ОрганизацияСАТУРН = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ОрганизацияСАТУРН;
		СообщениеJSON.Документ          = ДокументСсылка;
		СообщениеJSON.Операция          = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование;
		СообщениеJSON.Версия            = 1;
		
		СообщениеJSON.Описание =  ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(
			Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование, ДокументСсылка, 1);
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Статус документа ""%1"" не поддерживает операцию аннулирования'"), СтатусСАТУРН));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Операция                           КАК Операция,
	|
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ГрузоотправительОрганизацияСАТУРН,
	|	Шапка.ГрузополучательОрганизацияСАТУРН  КАК ГрузополучательОрганизацияСАТУРН
	|
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.ОрганизацияСАТУРН   = Шапка.ОрганизацияСАТУРН;
	СообщениеJSON.Документ            = ДокументСсылка;
	СообщениеJSON.ДокументОснование   = Шапка.ДокументОснование;
	СообщениеJSON.Операция            = Операция;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	СообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		
		Если Не ВозможнаОперацияПодтвержденияНакладной(Шапка) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
					НСтр("ru = 'Аннулирование подтверждения накладной доступно только Грузополучателю'"));
		ИначеЕсли ЗначениеЗаполнено(Шапка.ГрузополучательОрганизацияСАТУРН) Тогда
			
			ДальнейшиеДействия = Новый Массив;
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
			ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
			
			ПараметрыЗапроса = Новый Структура("ДальнейшиеДействия", ДальнейшиеДействия);
			СообщениеJSON.ПараметрыЗапроса = ПараметрыЗапроса;
			
			СообщениеJSON.ОрганизацияСАТУРН = Шапка.ГрузополучательОрганизацияСАТУРН;
			
			СообщениеАннулированиеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
				Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование, НомерВерсии);
			
			СообщениеАннулированиеJSON.ОрганизацияСАТУРН   = Шапка.ГрузополучательОрганизацияСАТУРН;
			СообщениеАннулированиеJSON.ЗагружатьДо         = СообщениеJSON.Идентификатор;
			СообщениеАннулированиеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
			СообщениеАннулированиеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
			
			ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеАннулированиеJSON, СообщениеJSON);
			
			СообщенияJSON.Добавить(СообщениеАннулированиеJSON);
			
		КонецЕсли;
		
	ИначеЕсли Не ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		Шапка.ГрузоотправительОрганизацияСАТУРН).Сопоставлено Тогда
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				НСтр("ru = 'Аннулирование накладной доступно только Грузоотправителю'"));
		
	КонецЕсли;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для передачи на пункт досмотра экспортной накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПередачаНаДосмотрНакладнойJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса;
	
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузополучательМестоХранения      КАК ГрузополучательМестоХранения,
	|
	|	ЕСТЬNULL(Шапка.ГрузополучательМестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузополучательМестоХраненияИдентификатор,
	|
	|	Шапка.ДатаПолучения              КАК ДатаПолучения,
	|	Шапка.ДатаВозврата               КАК ДатаВозврата,
	|	Шапка.Комментарий                КАК Комментарий
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);

	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);

	Если Не ЗначениеЗаполнено(Шапка.ГрузополучательМестоХраненияИдентификатор) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			АбстрактноеСообщениеJSON,
			НСтр("ru = 'Не заполнено поле ""Склад-получатель""'"));
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Шапка.ДатаПолучения) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			АбстрактноеСообщениеJSON,
			НСтр("ru = 'Не указана дата поступления на досмотр'"));
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура; 
	ДанныеДокумента.Вставить("_id",     Шапка.Идентификатор);
	ДанныеДокумента.Вставить("dateRecieve", ЗаписатьДатуJSON(Шапка.ДатаПолучения, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	ДанныеДокумента.Вставить("destinationWarehauseId", Шапка.ГрузополучательМестоХраненияИдентификатор);
	
	АргументыОперации = Новый Структура;
	АргументыОперации.Вставить("theCard", ДанныеДокумента);
	
	АбстрактноеСообщениеJSON.АргументыОперации   = АргументыОперации;
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Новый Структура;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр);
	
	ДальнейшиеДействия = Новый Массив;
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
	ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ДальнейшиеДействия", ДальнейшиеДействия);
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента, НомерВерсии);
	
	СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
	СообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	СообщениеJSON.АргументыОперации = АргументыОперации;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для подтверждения экспорта по накладной.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.НакладнаяСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  ЭкспортПодтвержден - Булево - признак операции: Истина - экспорт подтвержден, Ложь - в экспорте отказано.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПодтверждениеЭкспортаНакладнойJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено, ЭкспортПодтвержден = Истина)
	
	СообщенияJSON = Новый Массив;
	
	Если ЭкспортПодтвержден Тогда
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса;
	Иначе
		Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса;
	КонецЕсли;
	
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ГрузоотправительОрганизацияСАТУРН КАК ОрганизацияСАТУРН,
	|	Шапка.ГрузополучательМестоХранения      КАК ГрузополучательМестоХранения,
	|
	|	ЕСТЬNULL(Шапка.ГрузополучательМестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК ГрузополучательМестоХраненияИдентификатор,
	|
	|	Шапка.ДатаПолучения              КАК ДатаПолучения,
	|	Шапка.ДатаВозврата               КАК ДатаВозврата,
	|	Шапка.Комментарий                КАК Комментарий
	|ИЗ
	|	Документ.НакладнаяСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);

	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);

	Если Не ЗначениеЗаполнено(Шапка.ДатаВозврата) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			АбстрактноеСообщениеJSON,
			НСтр("ru = 'Не указана дата окончания досмотра'"));
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ДанныеДокумента = Новый Структура; 
	ДанныеДокумента.Вставить("_id",        Шапка.Идентификатор);
	ДанныеДокумента.Вставить("dateExport", ЗаписатьДатуJSON(Шапка.ДатаВозврата, ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
	АргументыОперации = Новый Структура;
	АргументыОперации.Вставить("theCard", ДанныеДокумента);
	
	АбстрактноеСообщениеJSON.АргументыОперации   = АргументыОперации;
	АбстрактноеСообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Новый Структура;
	
	Если ЭкспортПодтвержден Тогда
		АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение);
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента, НомерВерсии);
	Иначе
		АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("Операция", Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ);
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента, НомерВерсии);
	КонецЕсли;
	
	СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
	СообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	СообщениеJSON.АргументыОперации = АргументыОперации;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

Функция РезультирующийСтатусДокумента(ЭлементОчереди) Экспорт
	
	Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
	
	СтатусПринят     = Неопределено;
	ПараметрыЗапроса = ЭлементОчереди.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.ПротоколОбмена = Неопределено Тогда
		Возврат Статусы;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена Тогда
			
			Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса Тогда
				
				СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
				
			ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
				Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
				Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса Тогда
					Если ПараметрыЗапроса.Свойство("ЧастичнаяПриемка") И ПараметрыЗапроса.ЧастичнаяПриемка Тогда
						СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка;
					Иначе
						СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка;
					КонецЕсли;
				ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса Тогда
					СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка;
				Иначе // НакладнаяГрузУтерянРасчетСтатуса
					СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка;
				КонецЕсли;
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза);
				
			ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
				Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса Тогда
					Если ПараметрыЗапроса.Свойство("ЧастичнаяПриемка") И ПараметрыЗапроса.ЧастичнаяПриемка Тогда
						СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка;
					Иначе
						СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОшибка;
					КонецЕсли;
				Иначе //НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса
					СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОшибка;
				КонецЕсли;
				
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
				
			ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
				
				СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеПодтвержденияОшибка;
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
				
			ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
				
				СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОшибка;
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр);
				
			ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса
				Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
				
				Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса Тогда
					СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержденОшибка;
				Иначе
					СтатусПринят = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказаноОшибка;
				КонецЕсли;
				
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт);
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт);
				
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтатусПринят = Неопределено Тогда
		
		Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
			Или ПараметрыЗапроса.Свойство("Операция") Тогда
			СтатусПринят = СтатусПринятПоВидуОперации(ПараметрыЗапроса.Операция);
		Иначе
			СтатусПринят = СтатусПринятПоВидуОперации(ЭлементОчереди.Операция);
		КонецЕсли;
		
		Если ПараметрыЗапроса.Свойство("ДальнейшиеДействия")
			И ЗначениеЗаполнено(ПараметрыЗапроса.ДальнейшиеДействия) Тогда
			
			Для Каждого ДальнейшееДействие Из ПараметрыЗапроса.ДальнейшиеДействия Цикл
				Статусы.ПринятДействия.Добавить(ДальнейшееДействие);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Статусы.Принят = СтатусПринят;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы документа "обработан успешно" по виду операции.
//
// Параметры:
//   Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - операция документа.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Конечные статусы.
Функция СтатусПринятПоВидуОперации(Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути; // onWay
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.НаправленНаЭкспорт;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен; // delivered
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично; // onReturning
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату; // onReturning
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Утрачен; // lost
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен; // returned
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично; // returned
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Утрачен; // lost
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик; // отмена received --> draft
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути; // отмена received --> onWay
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортНаправленНаДосмотр // onWayToExportInspection
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотр // onExportInspection
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержден // onExportSentNew
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказано // onExportRefuse
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает статусы документа "обработан успешно" по виду операции.
//
// Параметры:
//   Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - операция документа.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Конечные статусы.
Функция СтатусОшибкаПоВидуОперации(Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеПодтвержденияОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержденОшибка;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ 
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказаноОшибка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает статусы документа "обрабатывается" по виду операции.
//
// Параметры:
//   Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - операция документа.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Конечные статусы.
Функция СтатусОбрабатываетсяПоВидуОперации(Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспорт
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧтение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичнойПриемки Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозврат
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяВозвратИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерян
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяГрузУтерянИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозврата
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеВозвратаИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеЧастичногоВозврата Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозврате
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеУтериГрузаПриВозвратеИзменениеДокумента Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулирование
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотр
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеПриемаНаДосмотрРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждение
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортПодтверждениеРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержденОбрабатывается;
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказ 
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортОтказРасчетСтатуса Тогда
		Возврат Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказаноОбрабатывается;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВозможнаОперацияПодтвержденияНакладной(Реквизиты, РазрешенПустойИдентификатор = Ложь)
	
	Результат = Ложь;
	Если (ЗначениеЗаполнено(Реквизиты.Идентификатор) Или РазрешенПустойИдентификатор)
		И Реквизиты.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реквизиты, "ГрузополучательСопоставленСОрганизацией") Тогда
			Результат = Реквизиты.ГрузополучательСопоставленСОрганизацией;
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.ГрузополучательОрганизацияСАТУРН) Тогда
			Результат = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
				Реквизиты.ГрузополучательОрганизацияСАТУРН).Сопоставлено;
		Иначе
			Результат = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
				Реквизиты.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВозможнаОперацияПодтвержденияВозврата(Реквизиты)
	
	Результат = Ложь;
	
	Если ЗначениеЗаполнено(Реквизиты.Идентификатор)
		И Реквизиты.Операция = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Реквизиты, "ГрузоотправительСопоставленСОрганизацией") Тогда
			Результат = Реквизиты.ГрузоотправительСопоставленСОрганизацией;
		Иначе
			Результат = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
				Реквизиты.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыФормированияСообщенияJSON()
	
	ВозвращаемоеЗначение = ИнтеграцияСАТУРНСлужебный.ПараметрыФормированияСообщенияJSON();
	
	ВозвращаемоеЗначение.Вставить("ОрганизацияСАТУРНИдентификатор");
	ВозвращаемоеЗначение.Вставить("ВсеСтраницыПолучены",  Ложь);
	ВозвращаемоеЗначение.Вставить("НачалоПозиции",        0);
	ВозвращаемоеЗначение.Вставить("НачалоПериода",        Дата(1,1,1));
	ВозвращаемоеЗначение.Вставить("КонецПериода",         Дата(1,1,1));
	ВозвращаемоеЗначение.Вставить("ДатаСинхронизации",    Дата(1,1,1));
	
	ВозвращаемоеЗначение.Вставить("ИдентификаторДокумента",    Неопределено);
	ВозвращаемоеЗначение.Вставить("ДатаПоследнегоДокумента",   Дата(1,1,1));
	ВозвращаемоеЗначение.Вставить("ОбновитьДатуСинхронизации", Ложь);
	
	ОперацииЗагрузки = Новый Массив;
	ОперацииЗагрузки.Добавить(Перечисления.ВидыОперацийСАТУРН.НакладнаяЗагрузкаСтатусов);
	ВозвращаемоеЗначение.Вставить("ОперацииЗагрузки", ОперацииЗагрузки);
	
	ВозвращаемоеЗначение.КоличествоНаСтранице = ИнтеграцияСАТУРНСлужебный.ПараметрыОптимизации().КоличествоЭлементовСтраницыОтвета;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция СтатусыНакладнойКОбновлению(ВключаяКонечныеСтатусы = Истина)
	
	Результат = Новый Соответствие();
	Результат.Вставить("onWay",       Истина);
	Результат.Вставить("onReturning", Истина);
	Если ВключаяКонечныеСтатусы Тогда
		Результат.Вставить("returned",  Истина);
		Результат.Вставить("delivered", Истина);
		Результат.Вставить("lost",      Истина);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция СтатусыОбработкиНакладнойСАТУРНКОбработке()
	
	Результат = Новый Соответствие();
	Результат.Вставить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути,     Истина);
	Результат.Вставить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату, Истина);
	Возврат Результат;
	
КонецФункции

Процедура ДополнитьСтатусыНакладныхПоИдентфикаторам(ИсточникДанных)
	
	Если ИсточникДанных.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Т.Идентификатор           КАК Идентификатор,
	|	Т.СтатусОбработки         КАК СтатусОбработки,
	|	Т.СтатусОбработкиСАТУРН   КАК СтатусОбработкиСАТУРН,
	|	Т.ДатаИзменения           КАК ДатаИзменения,
	|	Т.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	Т.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|	Т.Ссылка                  КАК Ссылка
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	&ИсточникДанных КАК Т
	|ИНДЕКСИРОВАТЬ ПО
	|	Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Идентификатор           КАК Идентификатор,
	|	ТаблицаДокументов.СтатусОбработкиСАТУРН   КАК СтатусОбработкиСАТУРН,
	|	ТаблицаДокументов.ДатаИзменения           КАК ДатаИзменения,
	|	ТаблицаДокументов.ИдентификаторПолучателя КАК ИдентификаторПолучателя,
	|	ТаблицаДокументов.ИдентификаторОтправителя КАК ИдентификаторОтправителя,
	|
	|	ЕСТЬNULL(НакладнаяСАТУРН.Ссылка, ТаблицаДокументов.Ссылка)                  КАК Ссылка,
	|	ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус, ТаблицаДокументов.СтатусОбработки) КАК СтатусОбработки
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК НакладнаяСАТУРН
	|		ПО ТаблицаДокументов.Идентификатор = НакладнаяСАТУРН.Идентификатор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
	|		ПО НакладнаяСАТУРН.Ссылка = СтатусыДокументовСАТУРН.Документ";
	
	Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанных);
	
	ИсточникДанных = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ЗаполнитьПАТИСопоставленныеРанееПартии(ДанныеСАТУРН)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", ДанныеСАТУРН);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки      КАК НомерСтроки,
	|	Таблица.Партия           КАК Партия,
	|	Таблица.ВыделеннаяПартия КАК ВыделеннаяПартия,
	|	Таблица.Упаковка         КАК Упаковка,
	|	Таблица.КоличествоСАТУРН КАК КоличествоСАТУРН,
	|	Таблица.КоличествоВУпаковкеСАТУРН  КАК КоличествоВУпаковкеСАТУРН,
	|	Таблица.КоличествоПринятоСАТУРН    КАК КоличествоПринятоСАТУРН,
	|	Таблица.КоличествоВозвращеноСАТУРН КАК КоличествоВозвращеноСАТУРН,
	|	Таблица.ИдентификаторСтрокиСАТУРН  КАК ИдентификаторСтрокиСАТУРН,
	|	Таблица.КодТовара КАК КодТовара,
	|	Таблица.КодПартии КАК КодПартии
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	СоответствиеПоПартии.Партия  КАК Партия,
	|	СоответствиеПоПартии.Порядок КАК Порядок
	|ПОМЕСТИТЬ СоответствиеПоПартии 
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Соответствие.Партия,
	|		Соответствие.Порядок,
	|		Соответствие.Номенклатура,
	|		Соответствие.Характеристика,
	|		Соответствие.Серия
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Таблица.Партия КАК Партия,
	|			МИНИМУМ(Соответствие.Порядок) КАК Порядок
	|		ИЗ Таблица КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|				ПО Таблица.Партия = Соответствие.Партия
	|		СГРУППИРОВАТЬ ПО
	|			Таблица.Партия) КАК СоответствиеПорядок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|			ПО СоответствиеПорядок.Партия = Соответствие.Партия
	|			И СоответствиеПорядок.Порядок = Соответствие.Порядок) КАК СоответствиеПоПартии
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеПоПартии.Партия,
	|	СоответствиеПоПартии.Порядок
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) = 1
	|;
	|ВЫБРАТЬ
	|	СоответствиеПоПАТ.ПАТ     КАК ПАТ,
	|	СоответствиеПоПАТ.Порядок КАК Порядок
	|ПОМЕСТИТЬ СоответствиеПоПАТ
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Соответствие.ПАТ,
	|		Соответствие.Порядок,
	|		Соответствие.Номенклатура,
	|		Соответствие.Характеристика,
	|		Соответствие.Серия
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Соответствие.ПАТ,
	|			МИНИМУМ(Соответствие.Порядок) КАК Порядок
	|		ИЗ Таблица КАК Таблица
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииСАТУРН КАК Партии
	|				ПО Таблица.Партия = Партии.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|				ПО Партии.ПАТ = Соответствие.ПАТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПоПартии КАК СоответствиеПоПартии
	|				ПО Таблица.Партия = СоответствиеПоПартии.Партия
	|		ГДЕ
	|			СоответствиеПоПартии.Партия ЕСТЬ NULL
	|		СГРУППИРОВАТЬ ПО
	|			Соответствие.ПАТ) КАК СоответствиеПорядок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|			ПО СоответствиеПорядок.ПАТ = Соответствие.ПАТ
	|			И СоответствиеПорядок.Порядок = Соответствие.Порядок) КАК СоответствиеПоПАТ
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеПоПАТ.ПАТ,
	|	СоответствиеПоПАТ.Порядок
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(1) = 1
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.НомерСтроки      КАК НомерСтроки,
	|	Таблица.Партия           КАК Партия,
	|	Таблица.ВыделеннаяПартия КАК ВыделеннаяПартия,
	|	Таблица.Упаковка         КАК Упаковка,
	|	Таблица.КоличествоСАТУРН КАК КоличествоСАТУРН,
	|
	|	Таблица.КоличествоВУпаковкеСАТУРН  КАК КоличествоВУпаковкеСАТУРН,
	|	Таблица.КоличествоПринятоСАТУРН    КАК КоличествоПринятоСАТУРН,
	|	Таблица.КоличествоВозвращеноСАТУРН КАК КоличествоВозвращеноСАТУРН,
	|	Таблица.ИдентификаторСтрокиСАТУРН  КАК ИдентификаторСтрокиСАТУРН,
	|	Таблица.КодТовара КАК КодТовара,
	|	Таблица.КодПартии КАК КодПартии,
	|
	|	Партии.ПАТ                         КАК ПАТ,
	|	Партии.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличиныСАТУРН,
	|
	|	Соответствие.Номенклатура        КАК Номенклатура,
	|	Соответствие.Характеристика      КАК Характеристика,
	|	Соответствие.Серия               КАК Серия,
	|	Соответствие.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|
	|	0 КАК КоличествоУпаковок,
	|	0 КАК Количество,
	|	0 КАК КоличествоУпаковокПринято,
	|	0 КАК КоличествоПринято,
	|	0 КАК КоличествоУпаковокВозвращено,
	|	0 КАК КоличествоВозвращено
	|	
	|ИЗ Таблица КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПартииСАТУРН КАК Партии
	|		ПО Таблица.Партия = Партии.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПоПартии КАК СоответствиеПоПартии
	|		ПО Таблица.Партия = СоответствиеПоПартии.Партия
	|	ЛЕВОЕ СОЕДИНЕНИЕ СоответствиеПоПАТ КАК СоответствиеПоПАТ
	|		ПО
	|		ВЫБОР
	|			КОГДА СоответствиеПоПартии.Партия ЕСТЬ NULL
	|			ТОГДА Партии.ПАТ = СоответствиеПоПАТ.ПАТ
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыСАТУРН КАК Соответствие
	|		ПО
	|		ВЫБОР
	|			КОГДА НЕ СоответствиеПоПартии.Партия ЕСТЬ NULL
	|			ТОГДА СоответствиеПоПартии.Партия = Соответствие.Партия
	|				И СоответствиеПоПартии.Порядок = Соответствие.Порядок
	|			КОГДА НЕ СоответствиеПоПАТ.ПАТ ЕСТЬ NULL
	|			ТОГДА СоответствиеПоПАТ.ПАТ = Соответствие.ПАТ
	|				И СоответствиеПоПАТ.Порядок = Соответствие.Порядок
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";
	
	ДанныеСАТУРН = Запрос.Выполнить().Выгрузить();
	
	ШтрихкодыEAN                   = Новый Массив;
	ПозицииДляПересчетаКоличества  = Новый Массив;
	СтрокиКОпределениюНоменклатуры = Новый Массив;

	Для Каждого СтрокаТаблицы Из ДанныеСАТУРН Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
			И ЗначениеЗаполнено(СтрокаТаблицы.КодТовара) Тогда
			ШтрихкодыEAN.Добавить(СтрокаТаблицы.КодТовара);
			СтрокиКОпределениюНоменклатуры.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;

	Если ШтрихкодыEAN.Количество() Тогда
		ИнформацияПоШтрихкодамEAN = ШтрихкодированиеОбщегоНазначенияИС.ДанныеПоШтрихкодамEAN(ШтрихкодыEAN);
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ШтрихкодEAN", Неопределено);
		ПараметрыОтбора.Вставить("ВидПродукции", Перечисления.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН);
		Для Каждого СтрокаТаблицы Из СтрокиКОпределениюНоменклатуры Цикл
			ПараметрыОтбора.ШтрихкодEAN = СтрокаТаблицы.КодТовара;
			НайденныеСтроки = ИнформацияПоШтрихкодамEAN.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, НайденныеСтроки[0], "Номенклатура, Характеристика");
				ПозицииДляПересчетаКоличества.Добавить(СтрокаТаблицы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для Каждого СтрокаТаблицы Из ДанныеСАТУРН Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			ПозицииДляПересчетаКоличества.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьКоличествоУпаковокВСтрокахТабличнойЧасти(ПозицииДляПересчетаКоличества);

КонецПроцедуры

Процедура ДобавитьТекстОшибкиНеЗаполненаПартия(СообщениеJSON, СтрокаТаблицы)

	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		СтрШаблон(НСтр("ru = 'Не заполнена колонка ""Партия"" в строке %1'"),
			СтрокаТаблицы.НомерСтроки));

КонецПроцедуры

Функция РеквизитыДляРасчетаСтатусаДальнейшегоДействия(ДокументСсылка)

	Результат = Новый Структура;
	Результат.Вставить("ГрузополучательОрганизацияСАТУРН",  Справочники.КлассификаторОрганизацийСАТУРН.ПустаяСсылка());
	Результат.Вставить("ГрузоотправительОрганизацияСАТУРН", Справочники.КлассификаторОрганизацийСАТУРН.ПустаяСсылка());
	Результат.Вставить("Операция",                          Перечисления.ВидыОперацийСАТУРН.ПустаяСсылка());
	Результат.Вставить("Идентификатор",                     ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("УникальныйИдентификаторИС"));
	Результат.Вставить("ДатаПолучения",                     Дата(1,1,1));
	Результат.Вставить("ДатаВозврата",                      Дата(1,1,1));
	Результат.Вставить("ЕстьПринято",                       Ложь);
	Результат.Вставить("ЕстьВозвращено",                    Ложь);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "ВЫБРАТЬ
	|	НакладнаяСАТУРН.ГрузополучательОрганизацияСАТУРН  КАК ГрузополучательОрганизацияСАТУРН,
	|	НакладнаяСАТУРН.ГрузоотправительОрганизацияСАТУРН КАК ГрузоотправительОрганизацияСАТУРН,
	|	НакладнаяСАТУРН.Операция      КАК Операция,
	|	НакладнаяСАТУРН.Идентификатор КАК Идентификатор,
	|	НакладнаяСАТУРН.ДатаПолучения КАК ДатаПолучения,
	|	НакладнаяСАТУРН.ДатаВозврата  КАК ДатаВозврата,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НакладнаяСАТУРНТовары.КоличествоПринятоСАТУРН > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьПринято,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА НакладнаяСАТУРНТовары.КоличествоВозвращеноСАТУРН > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ) КАК ЕстьВозвращено
	|ИЗ
	|	Документ.НакладнаяСАТУРН.Товары КАК НакладнаяСАТУРНТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НакладнаяСАТУРН КАК НакладнаяСАТУРН
	|		ПО НакладнаяСАТУРНТовары.Ссылка = НакладнаяСАТУРН.Ссылка
	|ГДЕ
	|	НакладнаяСАТУРН.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	НакладнаяСАТУРН.ГрузополучательОрганизацияСАТУРН,
	|	НакладнаяСАТУРН.ГрузоотправительОрганизацияСАТУРН,
	|	НакладнаяСАТУРН.Операция,
	|	НакладнаяСАТУРН.Идентификатор,
	|	НакладнаяСАТУРН.ДатаПолучения,
	|	НакладнаяСАТУРН.ДатаВозврата";

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьДальнейшиеДействияВПараметрахЗапроса(Шапка, АбстрактноеСообщениеJSON)

	Если ВозможнаОперацияПодтвержденияВозврата(Шапка) Тогда
		ДальнейшиеДействия = Новый Массив;
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат);
		ДальнейшиеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате);
		АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ДальнейшиеДействия", ДальнейшиеДействия);
	КонецЕсли;

КонецПроцедуры

Функция НовыеПараметрыЗаполненияТабличнойЧастиПриЧтенииСАТУРН()

	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОбновитьВыделеннуюПартию",    Ложь);
	ПараметрыЗаполнения.Вставить("ОбновитьВозвращеннуюПартию",  Ложь);
	ПараметрыЗаполнения.Вставить("ЗаполнитьКоличествоСАТУРН",   Ложь);
	ПараметрыЗаполнения.Вставить("СтатусДокумента",             Неопределено);
	ПараметрыЗаполнения.Вставить("ОбновитьВыделеннуюПартиюПослеАннулирования", Ложь);

	Возврат ПараметрыЗаполнения;

КонецФункции

Функция ОбновитьДанныеТабличнойЧастиДокументаПриЧтении(ВходящиеДанные, ДокументОбъект, ПараметрыЗаполнения, ДополнительныеПараметры)

	ПозицииДляПересчетаКоличества  = Новый Массив;
	ЕстьИзменения = Ложь;

	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15);

	ЭлементОчереди    = ДополнительныеПараметры.ЭлементОчереди;
	ПараметрыОбмена   = ДополнительныеПараметры.ПараметрыОбмена;
	ИзмененныеОбъекты = ДополнительныеПараметры.ИзмененныеОбъекты;

	ОтборСтрок = Новый Структура("ИдентификаторСтрокиСАТУРН");
	Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.PA_Batch_Shipments Цикл

		ОбновитьВыделеннуюПартию = ПараметрыЗаполнения.ОбновитьВыделеннуюПартию
			И СтрокаТаблицы.batchIdAccept <> -1
			И СтрокаТаблицы.batchIdReg <> -1
			И СтрокаТаблицы.batchIdReg._id <> СтрокаТаблицы.batchIdAccept._id;

		ОбновитьВозвращеннуюПартию = ПараметрыЗаполнения.ОбновитьВозвращеннуюПартию
			И СтрокаТаблицы.batchIdRegExt <> -1;
		
		ОбновитьВыделеннуюПартиюПослеАннулирования = ПараметрыЗаполнения.ОбновитьВыделеннуюПартиюПослеАннулирования;
		
		Если ОбновитьВыделеннуюПартию
			Или ОбновитьВозвращеннуюПартию
			Или ПараметрыЗаполнения.ЗаполнитьКоличествоСАТУРН
			Или ОбновитьВыделеннуюПартиюПослеАннулирования Тогда

			ОтборСтрок.ИдентификаторСтрокиСАТУРН = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаТаблицы.id);
			СтрокиТоваров = ДокументОбъект.Товары.НайтиСтроки(ОтборСтрок);

			Если СтрокиТоваров.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Идентификатор строки %1 не найден.'"),
					СтрокаТаблицы.id);
			КонецЕсли;

			ЕстьИзменения = Истина;

			ВыделеннаяПартия = Неопределено;
			Если ОбновитьВыделеннуюПартию Тогда
				ВыделеннаяПартия = Справочники.ПартииСАТУРН.Партия(
					СтрокаТаблицы.batchIdAccept._id,
					ПараметрыОбмена,
					ЭлементОчереди.ОрганизацияСАТУРН);
				ИзмененныеОбъекты.Добавить(ВыделеннаяПартия);
			ИначеЕсли ОбновитьВыделеннуюПартиюПослеАннулирования Тогда
				Если СтрокаТаблицы.batchIdReg <> -1
					И СтрокаТаблицы.batchIdReg._id <> СтрокаТаблицы.batchId._id Тогда
					ВыделеннаяПартия = Справочники.ПартииСАТУРН.Партия(
						СтрокаТаблицы.batchIdReg._id,
						ПараметрыОбмена,
						ЭлементОчереди.ОрганизацияСАТУРН);
				Иначе
					ВыделеннаяПартия = Справочники.ПартииСАТУРН.Партия(
						СтрокаТаблицы.batchId._id,
						ПараметрыОбмена,
						ЭлементОчереди.ОрганизацияСАТУРН);
				КонецЕсли;
			КонецЕсли;

			ПартияВозврат = Неопределено;
			Если ОбновитьВозвращеннуюПартию Тогда
				ПартияВозврат = Справочники.ПартииСАТУРН.Партия(
					СтрокаТаблицы.batchIdRegExt._id,
					ПараметрыОбмена,
					ЭлементОчереди.ОрганизацияСАТУРН);
				ИзмененныеОбъекты.Добавить(ПартияВозврат);
			КонецЕсли;

			// В документе может быть разбита исходная строка при приемке
			Для Каждого СтрокаТовары Из СтрокиТоваров Цикл
				Если ВыделеннаяПартия <> Неопределено Тогда
					СтрокаТовары.ВыделеннаяПартия = ВыделеннаяПартия;
				КонецЕсли;
				Если ПартияВозврат <> Неопределено Тогда
					СтрокаТовары.ПартияВозврат = ПартияВозврат;
				КонецЕсли;
				Если ПараметрыЗаполнения.ЗаполнитьКоличествоСАТУРН
					И СтрокиТоваров.Количество() = 1 Тогда
					// Не обновлять, если исходная строка разбита, данные уже посчитаны и хранятся в документе
					ОбновитьКоличествоПринятоВозвращеноСАТУРН(СтрокаТовары, СтрокаТаблицы, ПараметрыЗаполнения);
					СтрокаТовары.ПричинаРасхождения = СтрокаТаблицы.countGapStatus;
					ПозицииДляПересчетаКоличества.Добавить(СтрокаТовары);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Результат = Новый Структура;
	Результат.Вставить("ПозицииДляПересчетаКоличества", ПозицииДляПересчетаКоличества);
	Результат.Вставить("ЕстьИзменения", ЕстьИзменения);

	Возврат Результат;

КонецФункции

Процедура ОбновитьКоличествоПринятоВозвращеноСАТУРН(СтрокаПриемник, СтрокаИсточник, ПараметрыЗаполнения)

	СтатусДокумента = ПараметрыЗаполнения.СтатусДокумента;

	Если СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату
		Или СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен Тогда
		СтрокаПриемник.КоличествоПринятоСАТУРН    = 0; // в ответе сервиса может быть countPu_accepted = countPu_sent
		СтрокаПриемник.КоличествоВозвращеноСАТУРН = СтрокаИсточник.countPu_sent; // в ответе сервиса может быть countPu_returned = 0
	ИначеЕсли СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично
		Или СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично Тогда
		СтрокаПриемник.КоличествоПринятоСАТУРН    = СтрокаИсточник.countPu_accepted;
		СтрокаПриемник.КоличествоВозвращеноСАТУРН = СтрокаПриемник.КоличествоСАТУРН - СтрокаПриемник.КоличествоПринятоСАТУРН;
	Иначе // ВПути
		СтрокаПриемник.КоличествоПринятоСАТУРН    = СтрокаИсточник.countPu_sent;
		СтрокаПриемник.КоличествоВозвращеноСАТУРН = 0;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКоличествоУпаковокВСтрокахТабличнойЧасти(ПозицииДляПересчетаКоличества, ЭтоЗагрузкаДокумента = Истина,
	РасчетКоличестваПоДаннымУпаковок = Истина)

	Если ПозицииДляПересчетаКоличества.Количество() > 0 Тогда
		
		ТипИзмеряемойВеличиныОбъем = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Объем;
		ТипИзмеряемойВеличиныВес   = Перечисления.ТипыИзмеряемыхВеличинСАТУРН.Вес;
		
		ИсточникДанныхКоэффициентВесОбъемУпаковок = Новый Массив;
		Для Каждого СтрокаТаблицы Из ПозицииДляПересчетаКоличества Цикл
			СтруктураРасчета = Новый Структура("Номенклатура, Упаковка");
			ЗаполнитьЗначенияСвойств(СтруктураРасчета,СтрокаТаблицы);
			ИсточникДанныхКоэффициентВесОбъемУпаковок.Добавить(СтруктураРасчета);
		КонецЦикла;
		
		Данные = ИнтеграцияИСВызовСервера.КоэффициентВесОбъемУпаковок(ИсточникДанныхКоэффициентВесОбъемУпаковок);
		
		Для Каждого СтрокаТаблицы Из ПозицииДляПересчетаКоличества Цикл
			
			Если РасчетКоличестваПоДаннымУпаковок Тогда

				Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;

				ДанныеУпаковки = ИнтеграцияИСКлиентСервер.ПолучитьДанныеУпаковки(
					Данные, СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Упаковка);

				Если ЭтоЗагрузкаДокумента Тогда
					Если Не ЗначениеЗаполнено(СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН) Тогда
						Если ДанныеУпаковки.ТипИзмеряемойВеличиныОбъем Тогда
							СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
						ИначеЕсли ДанныеУпаковки.ТипИзмеряемойВеличиныВес Тогда
							СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
						ИначеЕсли ДанныеУпаковки.Объем > 0 Тогда
							СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем;
						Иначе
							СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				Если СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныОбъем Тогда
					Коэффициент = ДанныеУпаковки.Объем;
				ИначеЕсли СтрокаТаблицы.ТипИзмеряемойВеличиныСАТУРН = ТипИзмеряемойВеличиныВес Тогда
					Коэффициент = ДанныеУпаковки.Вес;
				Иначе
					Коэффициент = 0;
				КонецЕсли;

				Если Коэффициент > 0 Тогда
					Если ЭтоЗагрузкаДокумента Тогда
						СтрокаТаблицы.КоличествоУпаковок = СтрокаТаблицы.КоличествоСАТУРН * СтрокаТаблицы.КоличествоВУпаковкеСАТУРН / Коэффициент;
					КонецЕсли;
					СтрокаТаблицы.КоличествоУпаковокПринято = СтрокаТаблицы.КоличествоПринятоСАТУРН * СтрокаТаблицы.КоличествоВУпаковкеСАТУРН / Коэффициент;
					СтрокаТаблицы.КоличествоУпаковокВозвращено = СтрокаТаблицы.КоличествоВозвращеноСАТУРН * СтрокаТаблицы.КоличествоВУпаковкеСАТУРН / Коэффициент;
				Иначе
					Если ЭтоЗагрузкаДокумента Тогда
						СтрокаТаблицы.КоличествоУпаковок = 0;
					КонецЕсли;
					СтрокаТаблицы.КоличествоУпаковокПринято = 0;
					СтрокаТаблицы.КоличествоУпаковокВозвращено = 0;
				КонецЕсли;

				Если ДанныеУпаковки.Коэффициент = 0 Тогда
					Если ЭтоЗагрузкаДокумента Тогда
						СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоУпаковок;
					КонецЕсли;
					СтрокаТаблицы.КоличествоПринято = СтрокаТаблицы.КоличествоУпаковокПринято;
					СтрокаТаблицы.КоличествоВозвращено = СтрокаТаблицы.КоличествоУпаковокВозвращено;
				Иначе
					Если ЭтоЗагрузкаДокумента Тогда
						СтрокаТаблицы.Количество = СтрокаТаблицы.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
					КонецЕсли;
					СтрокаТаблицы.КоличествоПринято = СтрокаТаблицы.КоличествоУпаковокПринято * ДанныеУпаковки.Коэффициент;
					СтрокаТаблицы.КоличествоВозвращено = СтрокаТаблицы.КоличествоУпаковокВозвращено * ДанныеУпаковки.Коэффициент;
				КонецЕсли;

			Иначе // Накладная создана в ИБ, КоличествоУпаковок = КоличествоСАТУРН

				Коэффициент = СтрокаТаблицы.Количество / СтрокаТаблицы.КоличествоУпаковок;
				СтрокаТаблицы.КоличествоУпаковокПринято    = СтрокаТаблицы.КоличествоПринятоСАТУРН;
				СтрокаТаблицы.КоличествоПринято            = СтрокаТаблицы.КоличествоУпаковокПринято * Коэффициент;
				СтрокаТаблицы.КоличествоУпаковокВозвращено = СтрокаТаблицы.КоличествоВозвращеноСАТУРН;
				СтрокаТаблицы.КоличествоВозвращено         = СтрокаТаблицы.КоличествоУпаковокВозвращено * Коэффициент;

			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСтатусДокументаПриЗагрузке(СтатусДокумента, ЭлементДанных)

	ПринятЧастично = Ложь;
	ЕстьПринято = Ложь;
	ЕстьВозврат = Ложь;
	Если СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату
		Или СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен Тогда
		Для Каждого СтрокаТабличнойЧасти Из ЭлементДанных._tparts.PA_Batch_Shipments Цикл
			Если СтрокаТабличнойЧасти.countPu_accepted = 0 Тогда
				ЕстьВозврат = Истина;
			ИначеЕсли СтрокаТабличнойЧасти.countPu_accepted <> СтрокаТабличнойЧасти.countPu_sent Тогда
				ПринятЧастично = Истина;
				Прервать;
			Иначе 
				ЕстьПринято = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ПринятЧастично Или (ЕстьПринято И ЕстьВозврат) Тогда
		Если СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату Тогда
			СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично;
		ИначеЕсли СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен Тогда
			СтатусДокумента = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СоответствиеСтатусовЧастичнойПриемкиСАТУРН()
	
	Статусы = Новый Соответствие();
	Статусы.Вставить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично, Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату);
	Статусы.Вставить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично, Перечисления.СтатусыОбработкиНакладнойСАТУРН.Возвращен);
	
	Возврат Статусы;
	
КонецФункции

Функция ОперацииАннулированияПоСтатусуДокумента()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование);
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование);
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование);
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортНаправленНаДосмотр,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование);
	
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование);
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование);
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование);
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование);
	
	Результат.Вставить(
		Перечисления.СтатусыОбработкиНакладнойСАТУРН.Получен,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПодтверждениеАннулированиеРасчетСтатуса);
	
	Возврат Результат;
	
КонецФункции

Функция ОперацииАннулированияПоВидуОперацииДокумента()
	
	Результат = Новый Соответствие;
	
	Результат.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводствоАннулирование);
	Результат.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизацияАннулирование);
	Результат.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговляАннулирование);
	Результат.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотраАннулирование);
	Результат.Вставить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка,
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозкаАннулирование);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьДокументПоДаннымСАТУРН(ДокументОбъект, ЭлементДанных, ЭлементОчереди, ПараметрыОбмена, ИзмененныеОбъекты)
	
	ЭтоНовый = ДокументОбъект.ЭтоНовый();
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ДокументОбъект.Дата          = ТекущаяДатаСеанса();
	Если ЭтоНовый Тогда
		ДокументОбъект.Идентификатор      = ЭлементОчереди.РеквизитыИсходящегоСообщения.ИдентификаторЗаявки;
		ДокументОбъект.Операция           = Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка;
		ДокументОбъект.ВходящаяНакладная = Истина;
	КонецЕсли;
	ДокументОбъект.НаименованиеПервичногоДокумента = ЭлементДанных.name;
	ДокументОбъект.Комментарий                     = ЭлементДанных.description;
	ДокументОбъект.ДатаРегистрации                 = ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.docDate);
	ДокументОбъект.НомерПервичногоДокумента        = ЭлементДанных.docNum;
	ДокументОбъект.НомерТранспортногоСредства      = ЭлементДанных.vehicleNumber;
	ДокументОбъект.ИдентификаторГосКонтракта       = ЭлементДанных.contractNum;
	
	Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Свойство("СтатусДокумента") Тогда;
		СтатусДокумента = РеквизитыИсходящегоСообщения.ПараметрыЗапроса.СтатусДокумента;
	Иначе
		СтатусДокумента = ИнтерфейсСАТУРН.СтатусНакладной(ЭлементДанных.lcState);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементДанных.dateRecieve) Тогда
		ДатаПолучения = ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateRecieve);
		Если Год(ДатаПолучения) > 1 Или Не ЭтоНовый Тогда
			ДокументОбъект.ДатаПолучения = ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateRecieve);
		КонецЕсли;
	ИначеЕсли Не ЭтоНовый Тогда
		ДокументОбъект.ДатаПолучения = Дата(1,1,1);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭлементДанных.dateReturn) Тогда
		ДокументОбъект.ДатаВозврата = ИнтерфейсСАТУРН.ДатаИзСтрокиISO(ЭлементДанных.dateReturn);
	ИначеЕсли Не ЭтоНовый Тогда
		ДокументОбъект.ДатаПолучения = Дата(1,1,1);
	КонецЕсли;
	
	ИдентификаторГрузополучателя = Формат(ЭлементДанных.recieverContractorId._id, "ЧГ=0;");
	ДокументОбъект.ГрузополучательОрганизацияСАТУРН = Справочники.КлассификаторОрганизацийСАТУРН.Организация(
		ИдентификаторГрузополучателя,
		ПараметрыОбмена,
		ЭлементОчереди.ОрганизацияСАТУРН);
	
	ИдентификаторГрузоотправителя = Формат(ЭлементДанных.ownerContractorId._id, "ЧГ=0;");
	ДокументОбъект.ГрузоотправительОрганизацияСАТУРН = Справочники.КлассификаторОрганизацийСАТУРН.Организация(
		ИдентификаторГрузоотправителя,
		ПараметрыОбмена,
		ЭлементОчереди.ОрганизацияСАТУРН);
	
	ИдентификаторГрузоотправительМестоХранения = Формат(ЭлементДанных.sourceWarehauseId._id, "ЧГ=0;");
	ДокументОбъект.ГрузоотправительМестоХранения = Справочники.МестаХраненияСАТУРН.МестоХранения(
		ИдентификаторГрузоотправительМестоХранения,
		ПараметрыОбмена,
		ЭлементОчереди.ОрганизацияСАТУРН);
	
	Если ТипЗнч(ЭлементДанных.destinationWarehauseId) = Тип("Структура") Тогда
		ИдентификаторГрузополучательМестоХранения = Формат(ЭлементДанных.destinationWarehauseId._id, "ЧГ=0;");
		ДокументОбъект.ГрузополучательМестоХранения = Справочники.МестаХраненияСАТУРН.МестоХранения(
			ИдентификаторГрузополучательМестоХранения,
			ПараметрыОбмена,
			ЭлементОчереди.ОрганизацияСАТУРН);
	ИначеЕсли Не ЭтоНовый Тогда
		ДокументОбъект.ГрузополучательМестоХранения = Справочники.МестаХраненияСАТУРН.ПустаяСсылка();
	КонецЕсли;
	
	ОшибкиПриЗагрузке = Ложь;
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(15);

	// Полный и частичный возврат при загрузке из сервиса по статусу никак не отличаются
	ОбновитьСтатусДокументаПриЗагрузке(СтатусДокумента, ЭлементДанных);
	РеквизитыИсходящегоСообщения.ПараметрыЗапроса.СтатусДокумента = СтатусДокумента;
	
	ПараметрыЗаполнения = НовыеПараметрыЗаполненияТабличнойЧастиПриЧтенииСАТУРН();
	ПараметрыЗаполнения.ОбновитьВыделеннуюПартию    = Истина;
	ПараметрыЗаполнения.ОбновитьВозвращеннуюПартию  = Истина;
	ПараметрыЗаполнения.ЗаполнитьКоличествоСАТУРН   = Ложь;
	ПараметрыЗаполнения.СтатусДокумента             = СтатусДокумента;
	
	Если Не ЭтоНовый Тогда
		ДокументОбъект.Товары.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ЭлементДанных._tparts.PA_Batch_Shipments Цикл
		
		Если ТипЗнч(СтрокаТабличнойЧасти.batchId) <> Тип("Структура") Тогда
			ОшибкиПриЗагрузке = Истина;
			Прервать;
		КонецЕсли;
		
		ИдентификаторПартии = Формат(СтрокаТабличнойЧасти.batchId._id, "ЧГ=0;");
		Партия = Справочники.ПартииСАТУРН.Партия(
			ИдентификаторПартии,
			ПараметрыОбмена,
			ЭлементОчереди.ОрганизацияСАТУРН);

		Если Не ЗначениеЗаполнено(Партия) Тогда
			ОшибкиПриЗагрузке = Истина;
			Прервать;
		КонецЕсли;
		ИзмененныеОбъекты.Добавить(Партия);
		
		ИдентификаторПАТ = Формат(СтрокаТабличнойЧасти.patProductId._id, "ЧГ=0;");
		ПАТ = Справочники.КлассификаторПАТСАТУРН.ПАТ(
			ИдентификаторПАТ,
			ПараметрыОбмена,
			ЭлементОчереди.ОрганизацияСАТУРН);
		
		СтрокаТовары = ДокументОбъект.Товары.Добавить();
		СтрокаТовары.ПАТ = ПАТ;
		СтрокаТовары.Партия = Партия;
		СтрокаТовары.КоличествоВУпаковкеСАТУРН  = СтрокаТабличнойЧасти.pu_kgWeight;
		СтрокаТовары.КоличествоСАТУРН           = СтрокаТабличнойЧасти.countPu_sent;
		СтрокаТовары.ИдентификаторСтрокиСАТУРН  = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаТабличнойЧасти.id);

		ОбновитьКоличествоПринятоВозвращеноСАТУРН(СтрокаТовары, СтрокаТабличнойЧасти, ПараметрыЗаполнения);

		СтрокаТовары.ПричинаРасхождения         = СтрокаТабличнойЧасти.countGapStatus;

		СтрокаТовары.КодТовара = СтрокаТабличнойЧасти.sellerItemCode;
		СтрокаТовары.КодПартии = СтрокаТабличнойЧасти.sellerBatchId;

		// обработка объединения дочерних партий
		Если ТипЗнч(СтрокаТабличнойЧасти.batchIdAccept) = Тип("Структура") Тогда
			ИдентификаторВыделеннойПартии = Формат(СтрокаТабличнойЧасти.batchIdAccept._id, "ЧГ=0;");
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.batchIdReg) = Тип("Структура") Тогда
			ИдентификаторВыделеннойПартии = Формат(СтрокаТабличнойЧасти.batchIdReg._id, "ЧГ=0;");
		КонецЕсли;
		
		Если ИдентификаторВыделеннойПартии <> Неопределено
			И ИдентификаторВыделеннойПартии = ИдентификаторПартии Тогда
			
			СтрокаТовары.ВыделеннаяПартия = Партия;
			
		Иначе
			
			ВыделеннаяПартия = ИнтеграцияСАТУРНСлужебный.СсылкаПоИдентификатору(
				ПараметрыОбмена, Метаданные.Справочники.ПартииСАТУРН.ПолноеИмя(), ИдентификаторВыделеннойПартии);
			
			ВыделеннаяПартия = Справочники.ПартииСАТУРН.Партия(
				ИдентификаторВыделеннойПартии,
				ПараметрыОбмена,
				ЭлементОчереди.ОрганизацияСАТУРН);
			
			Если ЗначениеЗаполнено(ВыделеннаяПартия) Тогда
				СтрокаТовары.ВыделеннаяПартия = ВыделеннаяПартия;
				ИзмененныеОбъекты.Добавить(ВыделеннаяПартия);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары.ТипИзмеряемойВеличиныСАТУРН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаТовары.ВыделеннаяПартия, "ТипИзмеряемойВеличиныСАТУРН");
		
		Если ТипЗнч(СтрокаТабличнойЧасти.batchIdRegExt) = Тип("Структура") Тогда
			ИдентификаторПартииВозврат = Формат(СтрокаТабличнойЧасти.batchIdRegExt._id, "ЧГ=0;");
			ПартияВозврат = Справочники.ПартииСАТУРН.Партия(
				ИдентификаторПартииВозврат,
				ПараметрыОбмена,
				ЭлементОчереди.ОрганизацияСАТУРН);
			СтрокаТовары.ПартияВозврат = ПартияВозврат;
			ИзмененныеОбъекты.Добавить(ПартияВозврат);
		КонецЕсли;

	КонецЦикла;
	
	Если ОшибкиПриЗагрузке Тогда
		
		СтрокаРезультата = ИнтеграцияСАТУРНСлужебный.СтруктураИзменения(ЭлементОчереди);
		
		СтрокаРезультата.ОрганизацияСАТУРН = ЭлементОчереди.ОрганизацияСАТУРН;
		СтрокаРезультата.Сообщение         = ЭлементОчереди.Сообщение;
		СтрокаРезультата.ТекстОшибки       = СтрШаблон(
		                                        НСтр("ru = 'Ошибка при загрузке партий по идентификатору документа %1'"),
		                                        РеквизитыИсходящегоСообщения.ИдентификаторЗаявки);
		
		ПараметрыОбмена.Изменения.Добавить(СтрокаРезультата);
		
	Иначе
		
		Товары = ДокументОбъект.Товары.Выгрузить();
		ЗаполнитьПАТИСопоставленныеРанееПартии(Товары);
		ДокументОбъект.Товары.Загрузить(Товары);
		
		ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.НакладнаяСАТУРН, ДокументОбъект);
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
		
		ДокументОбъект.Записать();
		
		ЭлементОчереди.Документ = ДокументОбъект.Ссылка;
		
		ИзмененныеОбъекты.Добавить(ДокументОбъект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
