#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеНакладнаяСАТУРН.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСПАТ(ЭтотОбъект, "ТоварыПартия");
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(ЭтотОбъект, "ГрузоотправительМестоХранения", "Объект.ГрузоотправительОрганизацияСАТУРН", "");
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(ЭтотОбъект, "ГрузополучательМестоХранения", "Объект.ГрузополучательОрганизацияСАТУРН", "");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере(Ложь);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, НовыйОбъект, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИмяПодсистемы = ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы();
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы)
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы)
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.САТУРНПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_КлассификаторОрганизацийСАТУРН"
		И (Параметр = Объект.ГрузоотправительОрганизацияСАТУРН Или Параметр = Объект.ГрузополучательОрганизацияСАТУРН)
		Или ИмяСобытия = "Запись_МестаХраненияСАТУРН"
			И (Параметр = Объект.ГрузоотправительМестоХранения Или Параметр = Объект.ГрузополучательМестоХранения)) Тогда
		
		ЗаполнитьГиперссылкиРеквизитов();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		Отбор = Новый Структура("Партия", ВыбранноеЗначение.Партия);
		НайденныеСтроки = Объект.Товары.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
				Если ВыбранноеЗначение.КоличествоВУпаковкеСАТУРН <> 0 Тогда
					ПараметрыЗаполнения.ПересчитатьКоличествоВУпаковкеСАТУРН = Ложь;
				КонецЕсли;
				ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоОстаткуСАТУРН = Истина;
				ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Истина;
				ПараметрыЗаполнения.КоличествоСуффикс = ",Принято,Возвращено";
				НоменклатураПриИзменении(НоваяСтрока, ПараметрыЗаполнения);
				
				Если ЗначениеЗаполнено(ВыбранноеЗначение.ТипИзмеряемойВеличины)
					И ВыбранноеЗначение.ТипИзмеряемойВеличины <> НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН Тогда
					НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
					ПриИзмененииТипаИзмеряемойВеличины(НоваяСтрока, ПараметрыЗаполнения);
				КонецЕсли;
			Иначе
				НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормСАТУРНКлиент.ОбработкаНавигационнойСсылкиСАТУРН(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора, НовыйДокумент);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, НовыйДокумент);
	
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка))
		Или (ДействияНавигационнойСсылкиБезПроверкиПроведения().Найти(НавигационнаяСсылкаФорматированнойСтроки) = Неопределено
			И Не Объект.Проведен) Тогда
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Накладная ФГИС ""Сатурн"""" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		
		Если ДействияНавигационнойСсылкиБезПроверкиПроведения().Найти(НавигационнаяСсылкаФорматированнойСтроки) = Неопределено Тогда
			ТекстВопроса = НСтр("ru = 'Документ ""Накладная ФГИС ""Сатурн"""" был изменен. Провести?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Документ ""Накладная ФГИС ""Сатурн"""" был изменен. Записать?'");
		КонецЕсли;
		
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		Отказ = Ложь;
		
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьНакладную"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьВозврат"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюПриВозврате"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ПередатьНаДосмотр"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьЭкспорт"
			Или НавигационнаяСсылкаФорматированнойСтроки = "ОтклонитьЭкспорт" Тогда
			Отказ = Не ПроверитьЗаполнение();
		ИначеЕсли (НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную"
				Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза")
			И Не ЗначениеЗаполнено(Объект.ДатаПолучения) Тогда
			ТекстСообщения = Нстр("ru = 'Не указана дата получения'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект.ДатаПолучения", Отказ);
		КонецЕсли;
		
		Если Не Отказ Тогда
			ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОрганизацияСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора",   Истина);
	ПараметрыОткрытия.Вставить("Соответствует", "Организации");
	
	Если ЗначениеЗаполнено(ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН)
		И Не ЗначениеЗаполнено(Объект.ГрузоотправительОрганизацияСАТУРН) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН);
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОрганизацияСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН)
		И Не ЗначениеЗаполнено(Объект.ГрузополучательОрганизацияСАТУРН) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("Соответствует", "Контрагенту");
		
	КонецЕсли;
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОрганизацияСАТУРНПриИзменении(Элемент)
	
	ЗаполнитьГиперссылкиРеквизитов("Грузоотправитель");
	ОбновитьПодсказкиВвода(ЭтотОбъект);
	ГрузоотправительСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		Объект.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузополучательОрганизацияСАТУРН) Тогда
		ГрузоотправительСопоставленСОрганизацией = ГрузоотправительСопоставленСОрганизацией;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительМестоХраненияПриИзменении(Элемент)
	ЗаполнитьГиперссылкиРеквизитов("Грузоотправитель");
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательМестоХраненияПриИзменении(Элемент)
	ЗаполнитьГиперссылкиРеквизитов("Грузополучатель");
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОрганизацияСАТУРНПриИзменении(Элемент)
	
	ГрузополучательОрганизацияСАТУРНПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Операция");
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	
	РеквизитыТранспортногоСредства = ЗначенияРеквизитовТранспортногоСредства(Объект.ТранспортноеСредство);
	Объект.НомерТранспортногоСредства = РеквизитыТранспортногоСредства.НомерТранспортногоСредства;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.ДокументОснование = Неопределено;
	ЗаполнитьОтборыПоОснованию(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактПриИзменении(Элемент)
	
	СоответствиеРеквизитовГосКонтракта = ДанныеГосударственногоКонтракта(Объект.ГосударственныйКонтракт);
	
	ДанныеГосКонтракта = СоответствиеРеквизитовГосКонтракта[Объект.ГосударственныйКонтракт];
	Если ДанныеГосКонтракта = Неопределено Тогда
		Объект.ИдентификаторГосКонтракта  = "";
	Иначе
		Объект.ИдентификаторГосКонтракта = СтрШаблон(
			"%1 от %2",
			ДанныеГосКонтракта.НомерГосКонтракта,
			ДанныеГосКонтракта.ДатаГосКонтракта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГосударственныйКонтрактОчистка(Элемент, СтандартнаяОбработка)
	Объект.ИдентификаторГосКонтракта  = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно
		И Не (РедактированиеТоваров И ПоляРедактированияТоваровВПути(Элементы).Найти(Поле.Имя) <> Неопределено)
		Или Не ПравоИзменения Тогда
		СобытияФормСАТУРНКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"),
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияСАТУРНВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.ПАТ);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	ПараметрыЗаполнения.КоличествоСуффикс = "";
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
		
	ТекущиеДанные.КоличествоУпаковокПринято    = ТекущиеДанные.КоличествоУпаковок;
	ТекущиеДанные.КоличествоПринято            = ТекущиеДанные.Количество;
	ТекущиеДанные.КоличествоУпаковокВозвращено = 0;
	ТекущиеДанные.КоличествоВозвращено         = 0;
	ТекущиеДанные.ПричинаРасхождения           = "";
	
	Если Не РедактированиеФормыНедоступно Тогда
		ТекущиеДанные.КоличествоПринятоСАТУРН      = ТекущиеДанные.КоличествоСАТУРН;
		ТекущиеДанные.КоличествоВозвращеноСАТУРН   = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПринятоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыЗаполнения = ПараметрыЗаполненияСтроки(Истина);
	ПараметрыЗаполнения.КоличествоСуффикс = "Принято";
	ПараметрыЗаполнения.ПересчитатьКоличествоВУпаковкеСАТУРН = Ложь;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
	
	ТекущиеДанные.КоличествоУпаковокВозвращено = ТекущиеДанные.КоличествоУпаковок - ТекущиеДанные.КоличествоУпаковокПринято;
	ТекущиеДанные.КоличествоВозвращеноСАТУРН   = ТекущиеДанные.КоличествоСАТУРН - ТекущиеДанные.КоличествоПринятоСАТУРН;
	
	Если ТекущиеДанные.КоличествоУпаковокВозвращено = 0 Тогда
		ТекущиеДанные.ПричинаРасхождения = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПринятоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный));
	КоличествоПринято = ОписаниеТипаЧисло.ПривестиЗначение(Текст);
	
	Если КоличествоПринято > ТекущиеДанные.КоличествоУпаковок Тогда
		ТекстСообщения = НСтр("ru = 'Количество принято не может быть больше отправленного количества.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,,
			Элемент.Имя,
			СтандартнаяОбработка);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПринятоСАТУРНПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КоличествоВозвращеноСАТУРН = ТекущиеДанные.КоличествоСАТУРН - ТекущиеДанные.КоличествоПринятоСАТУРН;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПараметрыИдентификации = ИнтеграцияСАТУРНКлиентСервер.ПараметрыИдентификацииТовараПартии();
	ЗаполнитьЗначенияСвойств(ПараметрыИдентификации, ТекущиеДанные);
	ДанныеИдентификации = ИнтеграцияСАТУРНВызовСервера.ДанныеИдентификацииТовараПартии(ПараметрыИдентификации);
	
	Если ДанныеИдентификации.ИдентификаторыПартии.Количество() = 1 Тогда
		ТекущиеДанные.КодПартии = ДанныеИдентификации.ИдентификаторыПартии[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	ПараметрыЗаполнения.КоличествоСуффикс = ",Принято,Возвращено";
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииУпаковки(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзмеряемойВеличиныСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Данные = Новый Структура;
	Данные.Вставить("Партия",       ТекущиеДанные.Партия);
	Данные.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Данные.Вставить("Упаковка",     ТекущиеДанные.Упаковка);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(
		ИнтеграцияСАТУРНКлиент.ДоступныеТипыИзмеряемыхВеличин(Данные, КэшированныеЗначения));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзмеряемойВеличиныСАТУРНПриИзменении(Элемент)
	
	ПриИзмененииТипаИзмеряемойВеличины();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ПартииСАТУРН") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		Если ВыбранноеЗначение.КоличествоСАТУРН < ТекущиеДанные.Количество Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПартии", СобытияФормСАТУРНКлиент, ТекущиеДанные);
			СобытияФормСАТУРНКлиент.ОбработатьВыборПартииСНедостаткомКоличества(
				Объект.Товары, ВыбранноеЗначение, ТекущиеДанные, ОписаниеОповещения);
		Иначе
			СобытияФормСАТУРНКлиент.ОбработатьВыборПартии(ВыбранноеЗначение, ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПАТ Тогда
		
		Элементы.ТоварыПАТ.СписокВыбора.ЗагрузитьЗначения(ТекущиеДанные.НоменклатураДляВыбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыНоменклатура Тогда
		
		ЗаполнитьСпискиВыбораНоменклатуры(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыХарактеристика Тогда
		
		ЗаполнитьСпискиВыбораХарактеристика(ТекущиеДанные);
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКодТовара Тогда
		
		МассивЗначенийGTINДляВыбора = МассивЗначенийGTINДляВыбора(Элементы.Товары.ТекущаяСтрока);
		
		Элементы.ТоварыКодТовара.СписокВыбора.Очистить();
		Для Каждого ЭлементСпискаЗначений Из МассивЗначенийGTINДляВыбора Цикл
			Элементы.ТоварыКодТовара.СписокВыбора.Добавить(ЭлементСпискаЗначений, ЭлементСпискаЗначений);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыКодПартии Тогда
		
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
		ПараметрыИдентификации = ИнтеграцияСАТУРНКлиентСервер.ПараметрыИдентификацииТовараПартии();
		ЗаполнитьЗначенияСвойств(ПараметрыИдентификации, ДанныеСтроки);
		
		ДанныеИдентификации = ИнтеграцияСАТУРНВызовСервера.ДанныеИдентификацииТовараПартии(ПараметрыИдентификации);
		Элементы.ТоварыКодПартии.СписокВыбора.Очистить();
		Для Каждого ЭлементСпискаЗначений Из ДанныеИдентификации.ИдентификаторыПартии Цикл
			Элементы.ТоварыКодПартии.СписокВыбора.Добавить(ЭлементСпискаЗначений.Значение, ЭлементСпискаЗначений.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПАТПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.Партия = Неопределено;
	ТекущаяСтрока.ВыделеннаяПартия = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодТовараНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийGTINДляВыбора(ТекущаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКодПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияСАТУРНКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьОперацию(Команда)
	
	ПараметрыАннулированияНакладной = ПараметрыАннулированияНакладной();
	Если ПараметрыАннулированияНакладной = Неопределено Тогда
		СообщитьАннулированиеНеПоддерживаетсяДляСтатусаДокумента();
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДальнейшееДействие", ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию"));
	ДополнительныеПараметры.Вставить("ПараметрыОперации", ПараметрыАннулированияНакладной);
	
	Если Модифицированность Тогда
		
		ДокументБылМодифицированЗавершение = Новый ОписаниеОповещения(
			"ВопросДокументБылМодифицированЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Документ ""Накладная ФГИС ""Сатурн"""" был изменен. Записать?'");
		ПоказатьВопрос(ДокументБылМодифицированЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Аннулировать %1 ?'"),
			Строка(Объект.Ссылка));
		
		ВопросАннулироватьЗавершение = Новый ОписаниеОповещения(
			"ВопросАннулироватьЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
			
		ПоказатьВопрос(ВопросАннулироватьЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзСервиса(Команда)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДальнейшееДействие", ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные"));
	ДополнительныеПараметры.Вставить("ПараметрыОперации", Неопределено);
	
	Если Модифицированность Тогда
		
		ДокументБылМодифицированЗавершение = Новый ОписаниеОповещения(
			"ВопросДокументБылМодифицированЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Документ ""Накладная ФГИС ""Сатурн"""" был изменен. Записать?'");
		ПоказатьВопрос(ДокументБылМодифицированЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Объект.Проведен Тогда
		
		ДокументБылПроведенЗавершение = Новый ОписаниеОповещения(
			"ВопросДокументБылПроведенЗавершение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Документ ""Накладная ФГИС ""Сатурн"""" проведен.
						        |Операция возможна только для непроведенных документов.
						        |Отменить проведение?'"));
		ПоказатьВопрос(ДокументБылПроведенЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	Иначе
		
		ПередатьСообщениеЗагрузкиДокументаИзСервиса(ДополнительныеПараметры.ПараметрыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.НакладнаяСАТУРН.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПартий(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительОрганизацияСАТУРН) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Грузоотправитель""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ГрузоотправительОрганизацияСАТУРН",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительМестоХранения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Склад-источник""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ГрузоотправительМестоХранения",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартииПоВыделеннымСтрокам(Команда)
	ВыполнитьКомандуЗаполнитьПартии();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ПараметрыРазбиенияСтроки = СобытияФормИСКлиент.ПараметрыРазбиенияСтроки(ТекущиеДанные.КоличествоУпаковок);
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковок";
	
	СобытияФормИСКлиент.РазбитьСтрокуТабличнойЧасти(Объект.Товары, Элементы.Товары, ПараметрыРазбиенияСтроки, Оповещение);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	ИнтеграцияСАТУРН.УстановитьУсловноеОформлениеПоляПАТ(ЭтотОбъект);
	
	СобытияФормИС.УстановитьУсловноеОформлениеПоляНоменклатура(ЭтотОбъект);
	СобытияФормИС.УстановитьУсловноеОформлениеПоляХарактеристика(ЭтотОбъект);
	
	// ДанныеНовойПартии
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВыделеннаяПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыВыделеннаяПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		НСтр("ru = '<будет заполнена автоматически>'"));
	
	// Причина расхождения
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПричинаРасхождения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокПринято.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.ПутьКДанным);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет расхождений>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПричинаРасхождения.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковокПринято.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.ПутьКДанным);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПричинаРасхождения.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ГрузополучательСопоставленСОрганизацией");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	СтатусыКПодтверждению = Новый СписокЗначений();
	СтатусыКПодтверждению.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути);
	СтатусыКПодтверждению.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка);
	СтатусыКПодтверждению.Добавить(Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусСАТУРН");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыКПодтверждению;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// Код товара
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТовара.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодТовара.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет данных>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	// Код партии
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодПартии.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКодПартии.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<нет данных>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ОбновитьКомандыОснования = Истина)
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.НакладнаяСАТУРН);
	
	ЗаполнитьОтборыПоОснованию(Объект.ДокументОснование, ЭтотОбъект, ОбновитьКомандыОснования);
	
	НовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленныеТовары(Объект.Товары, НоменклатураДляВыбора, НовыйДокумент);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, НовыйДокумент);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.НакладнаяСАТУРН);
	
	ИнтеграцияИСПереопределяемый.ИспользуетсяПоддержкаПлатежейВСоответствииС275ФЗ(ГосударственныеКонтрактыИспользуются);
	
	УказываетсяТранспортноеСредство = ИнтеграцияСАТУРН.УказываетсяТранспортноеСредство();
	
	ГрузополучательСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		ГрузополучательОрганизацияСАТУРН(ЭтотОбъект)).Сопоставлено;
	
	ГрузоотправительСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		Объект.ГрузоотправительОрганизацияСАТУРН).Сопоставлено;
	
	ИспользоватьЧастичнуюПриемку = ИдентификаторыСтрокСАТУРНЗаполнены();
	
	УпаковкиИспользуются = ИнтеграцияИС.УпаковкиИспользуются();
	
	ЗаполнитьГиперссылкиРеквизитов();
	
	УстановитьПараметрыВыбораСкладаПолучателя(ЭтотОбъект);
	
	ОбновитьПредставленияНаФорме();
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект,
		Перечисления.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН);
	
	Если Не НовыйДокумент Тогда
		ДанныеДокумента = Новый Структура("Операция");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Объект);
		Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
			ПоместитьВоВременноеХранилище(ДанныеДокумента, ДанныеДокументаАдрес);
		Иначе
			ДанныеДокументаАдрес = ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДоступныеОперации();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусСАТУРН();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	ЭтоПеревозка = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка"));
	ЭтоЭкспорт   = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра"));
	
	СтатусКВозврату = ЭтоПеревозка И СтатусыКВозврату().Найти(Форма.СтатусСАТУРН) <> Неопределено;
	СтатусВозвращен = ЭтоПеревозка И СтатусыВозвращен().Найти(Форма.СтатусСАТУРН) <> Неопределено;
	СтатусВПути     = ЭтоПеревозка
		И (СтатусыВПути().Найти(Форма.СтатусСАТУРН) <> Неопределено
		  Или СтатусыАннулирование().Найти(Форма.СтатусСАТУРН) <> Неопределено);
	
	СтатусПринятПолностью    = ЭтоПеревозка И Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.Получен");
	СтатусВозвращеноУтрачено = СтатусВозвращен
		Или Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.Утрачен");
	
	СтатусПодтверждениеЭкспорта = ЭтоЭкспорт И СтатусыТребуетсяПодтверждениеЭкспорта().Найти(Форма.СтатусСАТУРН) <> Неопределено;
	СтатусКПередачеНаДосмотр = Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортНаправленНаДосмотр")
		Или Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОшибка");
	СтатусЭкспортПодтвержден = ЭтоЭкспорт И СтатусыЭкспортПодтвержден().Найти(Форма.СтатусСАТУРН) <> Неопределено;
	
	ЭтоВходящаяНакладная = Объект.ВходящаяНакладная;
	
	Если Инициализация Тогда
		
		Элементы.ДатаПолучения.АвтоОтметкаНезаполненного = Форма.РедактированиеРеквизитовПриемки;
		
		Элементы.ДатаВозврата.Видимость = СтатусКВозврату Или СтатусВозвращен Или СтатусПодтверждениеЭкспорта Или СтатусЭкспортПодтвержден;
		Элементы.ДатаВозврата.АвтоОтметкаНезаполненного = 
			СтатусКВозврату И Форма.ГрузополучательСопоставленСОрганизацией
			Или СтатусПодтверждениеЭкспорта;
		
		Если ЭтоЭкспорт Тогда
			ЗаголовокДатаВозврата  = Нстр("ru = 'Дата окончания досмотра'");
		Иначе
			ЗаголовокДатаВозврата  = Нстр("ru = 'Дата возврата'");
		КонецЕсли;
		Элементы.ДатаВозврата.Заголовок = ЗаголовокДатаВозврата;
		
		Элементы.ГрузополучательМестоХранения.АвтоОтметкаНезаполненного = СтатусКПередачеНаДосмотр;
			
		Элементы.ТоварыВыделеннаяПартияУпаковочнаяЕдиница.Видимость = ЭтоВходящаяНакладная;
		Элементы.ТоварыПартия.Видимость = Не ЭтоВходящаяНакладная;
		
		Если ЭтоВходящаяНакладная Тогда
			ЗаголовокВыделеннаяПартия = Нстр("ru = 'Партия'");
		Иначе
			ЗаголовокВыделеннаяПартия = Нстр("ru = 'Выделенная партия'");
		КонецЕсли;
		Элементы.ТоварыВыделеннаяПартия.Заголовок = ЗаголовокВыделеннаяПартия;
		Элементы.ТоварыВыделеннаяПартия.ТолькоПросмотр = Элементы.ТоварыВыделеннаяПартия.ТолькоПросмотр;
		
		Исключения = Новый Массив;
		Исключения.Добавить(Элементы.ТоварыСортироватьСписокПоВозрастанию.Имя);
		Исключения.Добавить(Элементы.ТоварыСортироватьСписокПоУбыванию.Имя);
		Исключения.Добавить(Элементы.ТоварыПереместитьВверх.Имя);
		Исключения.Добавить(Элементы.ТоварыПереместитьВниз.Имя);
		Исключения.Добавить(Элементы.ТоварыВывестиСписок.Имя);
		
		Если Форма.РедактированиеРеквизитовПриемки Тогда
			Исключения.Добавить(Элементы.ГрузополучательМестоХранения.Имя);
			Исключения.Добавить(Элементы.ДатаПолучения.Имя);
			Если ЭтоПеревозка Тогда
				Исключения.Добавить(Элементы.ТоварыКоличествоУпаковокПринято.Имя);
				Исключения.Добавить(Элементы.ТоварыПричинаРасхождения.Имя);
			КонецЕсли;
		КонецЕсли;
		
		Если СтатусКВозврату И Форма.ГрузоотправительСопоставленСОрганизацией
			Или СтатусПодтверждениеЭкспорта Тогда
			Исключения.Добавить(Элементы.ДатаВозврата.Имя);
		КонецЕсли;
		
		Если Форма.РедактированиеТоваров Тогда
			
			Исключения.Добавить(Элементы.РазбитьСтроку.Имя);
			ИсключенияПоляТовары = ПоляРедактированияТоваровВПути(Элементы);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Исключения, ИсключенияПоляТовары);
			
		КонецЕсли;
		
		Если Исключения.Количество() Тогда
			ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
				Форма, Исключения, Истина);
		КонецЕсли;
		
		Исключения.Добавить(Элементы.ТоварыВыделеннаяПартия.Имя);
		Исключения.Добавить(Элементы.ТоварыПартияВозврат.Имя);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаТовары, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		
		Если Не Форма.РедактированиеФормыНеДоступно Тогда
			Элементы.ТоварыКоличествоСАТУРН.ТолькоПросмотр           = Форма.УпаковкиИспользуются;
			Элементы.ТоварыКоличествоВУпаковкеСАТУРН.ТолькоПросмотр  = Форма.УпаковкиИспользуются;
			Элементы.ТоварыКоличествоПринятоСАТУРН.ТолькоПросмотр    = Форма.УпаковкиИспользуются;
			Элементы.ТоварыКоличествоВозвращеноСАТУРН.ТолькоПросмотр = Форма.УпаковкиИспользуются;
		КонецЕсли;
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаДополнительно, Не Форма.РедактированиеФормыНеДоступно);
		
		ОбновитьПодсказкиВвода(Форма);
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("Операция") Тогда
		
		ВидимостьГрузополучателя = ВидимостьГрузополучателя(Форма);
		
		Элементы.ГрузополучательОрганизацияСАТУРН.Видимость        = ВидимостьГрузополучателя;
		Элементы.НадписьГрузополучательОрганизацияСАТУРН.Видимость = ВидимостьГрузополучателя;
		Элементы.ГрузополучательМестоХранения.Видимость            = ВидимостьГрузополучателя; // Для экспорта пункт досмотра
		Элементы.НадписьГрузополучательМестоХранения.Видимость     = ВидимостьГрузополучателя;
		
		Элементы.ДатаПолучения.Видимость = ЭтоПеревозка И Форма.ГрузополучательСопоставленСОрганизацией
			Или ЭтоЭкспорт;
		
		Если ЭтоЭкспорт Тогда
			ЗаголовокДатаПолучения = Нстр("ru = 'Дата поступления на досмотр'");
		Иначе
			ЗаголовокДатаПолучения = Нстр("ru = 'Дата получения'");
		КонецЕсли;
		Элементы.ДатаПолучения.Заголовок = ЗаголовокДатаПолучения;
		
		ВидимостьПринятоПоДаннымИБ =  Форма.ИспользоватьЧастичнуюПриемку
			И (ЭтоВходящаяНакладная Или Форма.ГрузополучательСопоставленСОрганизацией)
			И (СтатусВПути Или СтатусКВозврату Или СтатусВозвращеноУтрачено Или СтатусПринятПолностью);
		
		Элементы.ТоварыКоличествоУпаковокПринято.Видимость = ВидимостьПринятоПоДаннымИБ;
		Элементы.ТоварыПричинаРасхождения.Видимость        = ВидимостьПринятоПоДаннымИБ;
		
		ВидимостьПринятоПоДаннымСАТУРН = Форма.ИспользоватьЧастичнуюПриемку
			И ЭтоПеревозка
			И Форма.РедактированиеФормыНеДоступно // Не (Черновик, Ошибка)
			И (Не Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути")
				  Или ЭтоВходящаяНакладная
				  Или Форма.ГрузополучательСопоставленСОрганизацией);
		
		Элементы.ТоварыКоличествоПринятоСАТУРН.Видимость = ВидимостьПринятоПоДаннымСАТУРН;
		
		ВидимостьРасхожденияПоДаннымСАТУРН = Форма.ИспользоватьЧастичнуюПриемку
			И Не (ЭтоВходящаяНакладная
				  Или Форма.ГрузополучательСопоставленСОрганизацией)
			И (СтатусПринятПолностью
			   Или СтатусВозвращеноУтрачено
			   Или СтатусКВозврату);
		
		Элементы.ТоварыПричинаРасхожденияСАТУРН.Видимость = ВидимостьРасхожденияПоДаннымСАТУРН;
		
		ВидимостьКоличествоВозвращено = СтатусВозвращен
			Или Форма.ИспользоватьЧастичнуюПриемку
			    И ЭтоПеревозка
			    И СтатусКВозврату;
		Элементы.ТоварыКоличествоВозвращеноСАТУРН.Видимость   = ВидимостьКоличествоВозвращено;
		Элементы.ТоварыКоличествоУпаковокВозвращено.Видимость = ВидимостьКоличествоВозвращено;
		
		Элементы.ТоварыПартияВозврат.Видимость = Форма.ИспользоватьЧастичнуюПриемку
			И Форма.ГрузоотправительСопоставленСОрганизацией
			И (СтатусКВозврату Или СтатусВозвращен);
		
		ДоступностьАннулирования = 
			Форма.ГрузоотправительСопоставленСОрганизацией
			    И СтатусыАннулированияГрузоотправителя().Найти(Форма.СтатусСАТУРН) <> Неопределено
			Или Форма.ГрузополучательСопоставленСОрганизацией
				И СтатусыАннулированияГрузополучателя().Найти(Форма.СтатусСАТУРН) <> Неопределено
			Или СтатусКПередачеНаДосмотр;
		
		Элементы.ФормаАннулироватьОперацию.Доступность = ДоступностьАннулирования;
		
		УстановитьПараметрыВыбораСкладаПолучателя(Форма);
		
		Элементы.ФормаОбновитьИзСервиса.Видимость = ЭтоПеревозка;
		Элементы.ФормаОбновитьИзСервиса.Доступность = СтатусыОбрабатывается().Найти(Форма.СтатусСАТУРН) = Неопределено;
		
		СтруктураРеквизитов.Вставить("ДокументОснование");
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГосударственныйКонтракт.Видимость  = Форма.ГосударственныеКонтрактыИспользуются;
	Элементы.ТранспортноеСредство.Видимость     = Форма.УказываетсяТранспортноеСредство;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	Элементы.Операция.СписокВыбора.Очистить();
	
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяРозничнаяТорговля);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяСписаниеВПроизводство);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяУтилизация);
	Элементы.Операция.СписокВыбора.Добавить(
		Перечисления.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра);
	
	Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ДанныеДокументаАдрес);
	Иначе
		ДанныеДокумента = Неопределено;
	КонецЕсли;
	
	Если ДанныеДокумента <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеДокумента.Операция)
			И Элементы.Операция.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.Операция) = Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				ДанныеДокумента.Операция);
		КонецЕсли;
		
	КонецЕсли;
	
	
	Элементы.Операция.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

#Область ПерезаполнениеПоОснованию

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер(, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер(ОбработатьТабличнуюЧасть = Истина, ОбработатьШапку = Истина)
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьСтатусСАТУРН()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("Операция", Объект.Операция);
	Реквизиты.Вставить("ГрузополучательОрганизацияСАТУРН", Объект.ГрузополучательОрганизацияСАТУРН);
	Реквизиты.Вставить("ГрузополучательСопоставленСОрганизацией", ГрузополучательСопоставленСОрганизацией);
	Реквизиты.Вставить("Идентификатор", Объект.Идентификатор);
	
	СтатусСАТУРН = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(Реквизиты);
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияСАТУРН.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусСАТУРН = Выборка.Статус;
				
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;

	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
	
	СтатусПредставление = ИнтеграцияСАТУРН.ПредставлениеСтатуса(СтатусСАТУРН, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусСАТУРН <> Перечисления.СтатусыОбработкиНакладнойСАТУРН.Черновик
	                              И СтатусСАТУРН <> Перечисления.СтатусыОбработкиНакладнойСАТУРН.Ошибка;
	
	РедактированиеРеквизитовПриемки = ГрузополучательСопоставленСОрганизацией
	                                     И (СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка
	                                     Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка)
	                                  Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортНаправленНаДосмотр
	                                  Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОшибка;
	
	РедактированиеТоваров = Объект.ВходящаяНакладная
	                        И (СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ВПути
	                               И ГрузополучательСопоставленСОрганизацией
	                           Или ГрузоотправительСопоставленСОрганизацией
	                               И (СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.КВозврату
	                                  Или СтатусСАТУРН = Перечисления.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично));
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверятьОбъектПроведен = Истина;
	Если ДействияНавигационнойСсылкиБезПроверкиПроведения().Найти(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки) <> Неопределено Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
		РазблокироватьДанныеФормыДляРедактирования();
		ПроверятьОбъектПроведен = Ложь;
	ИначеЕсли ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	Если Не Модифицированность Тогда
		Если Не ПроверятьОбъектПроведен ТОгда
			Если (ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную"
				Или ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза")
				И Не ЗначениеЗаполнено(Объект.ДатаПолучения) Тогда
				ТекстСообщения = Нстр("ru = 'Не указана дата получения'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,, "Объект.ДатаПолучения");
			Иначе
				ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
			КонецЕсли;
		ИначеЕсли Объект.Проведен Тогда
			ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьВозврат"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюПриВозврате"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПередатьНаДосмотр"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьЭкспорт"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ОтклонитьЭкспорт" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ГрузоотправительОрганизацияСАТУРН;
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьВозврат" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеВозврат");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюПриВозврате" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюПриВозврате");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПередатьНаДосмотр" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеНаДосмотр");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьЭкспорт" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеЭкспорт");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтклонитьЭкспорт" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтклонитеЭкспорт");
		КонецЕсли;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьНакладную"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную"
		Или НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ГрузополучательОрганизацияСАТУРН;
		Если НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьНакладную" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеНакладную");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВернутьНакладную" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВернитеНакладную");
		ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПодтвердитьУтерюГруза" Тогда
			ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеУтерюГруза");
		КонецЕсли;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "АннулироватьОперацию" Тогда
		
		ДополнительныеПараметры = ПараметрыАннулированияНакладной();
		Если ДополнительныеПараметры = Неопределено Тогда
			СообщитьАннулированиеНеПоддерживаетсяДляСтатусаДокумента();
			Возврат;
		КонецЕсли;
		ПередатьСообщениеАннулированияОперации(ДополнительныеПараметры);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияСАТУРНКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияСАТУРНКлиент.ОтменитьПередачу(Объект.Ссылка);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.САТУРНПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ГрузополучательОрганизацияСАТУРНПриИзмененииНаСервере()
	
	ЗаполнитьГиперссылкиРеквизитов("Грузополучатель");
	ОбновитьПодсказкиВвода(ЭтотОбъект);
	
	ГрузополучательСопоставленСОрганизацией = ИнтеграцияСАТУРНВызовСервера.ОрганизацияСАТУРНСопоставленаСОрганизациейИБ(
		ГрузополучательОрганизацияСАТУРН(ЭтотОбъект)).Сопоставлено;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГиперссылкиРеквизитов(ИмяХозяйствующегоСубъекта = Неопределено)
	
	ПараметрыПолученияСопоставлений = Новый Массив;
	
	Если ИмяХозяйствующегоСубъекта = Неопределено Тогда
		
		ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
		ПараметрПредставления.Префикс               = "Грузоотправитель";
		ПараметрПредставления.ОрганизацияСАТУРН     = Объект.ГрузоотправительОрганизацияСАТУРН;
		ПараметрПредставления.МестоХранения         = Объект.ГрузоотправительМестоХранения;
		ПараметрПредставления.ОрганизацияКонтрагент = ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН;
		ПараметрПредставления.Склад                 = ГрузоотправительИзОснованияДляОтбораМестаХранения;
		
		ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
		
		ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
		ПараметрПредставления.Префикс           = "Грузополучатель";
		ПараметрПредставления.ОрганизацияСАТУРН = ГрузополучательОрганизацияСАТУРН(ЭтотОбъект);
		ПараметрПредставления.МестоХранения     = Объект.ГрузополучательМестоХранения;
		ПараметрПредставления.ОрганизацияСАТУРНОбязательноеЗаполнение = Истина;
		ПараметрПредставления.ОрганизацияКонтрагент = ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН;
		ПараметрПредставления.Склад                 = ГрузополучательИзОснованияДляОтбораМестаХранения;
		
		ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
		
	Иначе
		
		Если ИмяХозяйствующегоСубъекта = "Грузополучатель" Тогда
			ОрганизацияСАТУРН = ГрузополучательОрганизацияСАТУРН(ЭтотОбъект);
		Иначе
			ОрганизацияСАТУРН = Объект[ИмяХозяйствующегоСубъекта + "ОрганизацияСАТУРН"];
		КонецЕсли;
		
		ПараметрПредставления = ИнтеграцияСАТУРН.НовыеПараметрыФормированияПредставленияСопоставлений();
		ПараметрПредставления.Префикс           = ИмяХозяйствующегоСубъекта;
		ПараметрПредставления.ОрганизацияСАТУРН = ОрганизацияСАТУРН;
		ПараметрПредставления.МестоХранения     = Объект[ИмяХозяйствующегоСубъекта + "МестоХранения"];
		ПараметрПредставления.ОрганизацияСАТУРНОбязательноеЗаполнение = (ИмяХозяйствующегоСубъекта = "Грузополучатель");
		ПараметрПредставления.ОрганизацияКонтрагент = ЭтотОбъект[ИмяХозяйствующегоСубъекта + "ИзОснованияДляОтбораОрганизацииСАТУРН"];
		ПараметрПредставления.Склад                 = ЭтотОбъект[ИмяХозяйствующегоСубъекта + "ИзОснованияДляОтбораМестаХранения"];
		
		ПараметрыПолученияСопоставлений.Добавить(ПараметрПредставления);
		
	КонецЕсли;
	
	ДанныеПредставлений = ИнтеграцияСАТУРН.ПредставленияСопоставлений(ПараметрыПолученияСопоставлений);
	
	Для Каждого КлючИЗначение Из ДанныеПредставлений Цикл
		
		ПараметрПредставления = КлючИЗначение.Ключ;
		ДанныеПредставления   = КлючИЗначение.Значение;
		
		ЭтотОбъект["Надпись" + ПараметрПредставления.Префикс + "ОрганизацияСАТУРН"] = ДанныеПредставления.ОрганизацияКонтрагент.Представление;
		ЭтотОбъект["Надпись" + ПараметрПредставления.Префикс + "МестоХранения"]     = ДанныеПредставления.ТорговыйОбъект.Представление;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ГрузополучательОрганизацияСАТУРН(Форма)
	
	Объект = Форма.Объект;
	Если ЗначениеЗаполнено(Объект.ГрузополучательОрганизацияСАТУРН)
		Или Не ВидимостьГрузополучателя(Форма) Тогда
		Возврат Объект.ГрузополучательОрганизацияСАТУРН;
	ИначеЕсли ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН) Тогда
		Возврат ПредопределенноеЗначение("Справочник.КлассификаторОрганизацийСАТУРН.ПустаяСсылка");
	Иначе
		Возврат Объект.ГрузоотправительОрганизацияСАТУРН;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидимостьГрузополучателя(Форма)
	
	Объект       = Форма.Объект;
	ЭтоПеревозка = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяПеревозка"));
	ЭтоЭкспорт   = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспорт")
		Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра"));
	
	Возврат (ЭтоПеревозка Или ЭтоЭкспорт);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкиВвода(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.ГрузополучательОрганизацияСАТУРН)
		Или ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН) Тогда
		Форма.Элементы.ГрузополучательОрганизацияСАТУРН.ПодсказкаВвода = "";
		Форма.Элементы.ГрузополучательОрганизацияСАТУРН.ОтметкаНезаполненного = 
			ЗначениеЗаполнено(Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН)
			И Не ЗначениеЗаполнено(Форма.Объект.ГрузополучательОрганизацияСАТУРН);
	Иначе
		Форма.Элементы.ГрузополучательОрганизацияСАТУРН.ПодсказкаВвода = Строка(Форма.Объект.ГрузоотправительОрганизацияСАТУРН);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияРеквизитовТранспортногоСредства(ТранспортноеСредство)
	
	РеквизитыТранспортногоСредства = ИнтеграцияСАТУРН.ИнициализироватьСтруктуруРеквизитовТранспортногоСредства();
	ИнтеграцияСАТУРНПереопределяемый.ПриОпределенииРеквизитовТранспортногоСредства(РеквизитыТранспортногоСредства, ТранспортноеСредство);
	Возврат РеквизитыТранспортногоСредства;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияСАТУРН.ПараметрыЗаполненияТабличнойЧастиТовары();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормСАТУРНПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Если ДобавленныеСтроки.Количество() > 0 Тогда
		ЗаполнитьПустойКодТовараВСтроках(ДобавленныеСтроки);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ТоварыНоменклатура");
	
КонецПроцедуры

#Область Товары

&НаКлиенте
Функция ПараметрыЗаполненияСтроки(ПриемкаТовара = Ложь)
	
	ПараметрыЗаполнения = ИнтеграцияСАТУРНКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоСАТУРН = РедактированиеФормыНедоступно
		И (СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути")
			Или СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка")
			Или СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка")
			Или СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.КВозврату")
			Или СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично"))
		И Не ПриемкаТовара;
	ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН = Не ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоСАТУРН;
	ПараметрыЗаполнения.ПересчитатьКоличествоВУпаковкеСАТУРН = Не ПараметрыЗаполнения.ПересчитатьКоличествоУпаковокПоСАТУРН;
	
	ПараметрыЗаполнения.КоличествоСуффикс = ",Принято,Возвращено";
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура НоменклатураПриИзменении(ТекущиеДанные = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	КонецЕсли;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий, ПараметрыЗаполнения);
	
	ТекущиеДанные.КоличествоВозвращеноСАТУРН = ТекущиеДанные.КоличествоСАТУРН - ТекущиеДанные.КоличествоПринятоСАТУРН;
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТипаИзмеряемойВеличины(ТекущиеДанные = Неопределено, ПараметрыЗаполнения = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииТипаИзмеряемойВеличины(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораНоменклатуры(ТекущаяСтрока)
	
	СписокВыбораНоменклатура = Элементы.ТоварыНоменклатура.СписокВыбора;
	СписокВыбораНоменклатура.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("ПАТ", ТекущаяСтрока.ПАТ));
	НоменклатураКэш = Неопределено;
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		Если СтрокаТЧ.Номенклатура <> НоменклатураКэш Тогда
			СписокВыбораНоменклатура.Добавить(СтрокаТЧ.Номенклатура);
			НоменклатураКэш = СтрокаТЧ.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСпискиВыбораХарактеристика(ТекущаяСтрока)
	
	СписокВыбораХарактеристика = Элементы.ТоварыХарактеристика.СписокВыбора;
	СписокВыбораХарактеристика.Очистить();
	
	НайденныеСтроки = НоменклатураДляВыбора.НайтиСтроки(Новый Структура("ПАТ, Номенклатура",
		ТекущаяСтрока.ПАТ,
		ТекущаяСтрока.Номенклатура));
	Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
		СписокВыбораХарактеристика.Добавить(СтрокаТЧ.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПоляРедактированияТоваровВПути(Элементы)
	
	Исключения = Новый Массив;
	
	Исключения.Добавить(Элементы.ТоварыНоменклатура.Имя);
	Исключения.Добавить(Элементы.ТоварыХарактеристика.Имя);
	Исключения.Добавить(Элементы.ТоварыГруппаКолонокСерия.Имя);
	Исключения.Добавить(Элементы.ТоварыКоличествоУпаковок.Имя);
	Исключения.Добавить(Элементы.ТоварыУпаковкаЕдиницаИзмерения.Имя);
	Исключения.Добавить(Элементы.ТоварыТипИзмеряемойВеличиныСАТУРН.Имя);
	
	Возврат Исключения;
	
КонецФункции

&НаКлиенте
Процедура ПриВыбореНоменклатуры(Номенклатура, ДополнительныеПараметры) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Номенклатура = Номенклатура;
	
	НоменклатураПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		
		ПараметрыЗаполнения = ПараметрыЗаполненияСтроки();
		ПараметрыЗаполнения.КоличествоСуффикс = "";
		
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, НоваяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
		
		Если Не ПараметрыЗаполнения.ПересчитатьКоличествоСАТУРН
			И ТекущиеДанные.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок > 0 Тогда
			// входящий режим
			КоличествоСАТУРНДоРазбиения = ТекущиеДанные.КоличествоСАТУРН;
			НоваяСтрока.КоличествоСАТУРН = ТекущиеДанные.КоличествоСАТУРН * НоваяСтрока.КоличествоУпаковок / (ТекущиеДанные.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок);
			ТекущиеДанные.КоличествоСАТУРН = КоличествоСАТУРНДоРазбиения - НоваяСтрока.КоличествоСАТУРН;
		КонецЕсли;

		Если ТекущиеДанные.КоличествоУпаковокПринято > ТекущиеДанные.КоличествоУпаковок Тогда
			ТекущиеДанные.КоличествоУпаковокПринято = ТекущиеДанные.КоличествоУпаковок;
			ТекущиеДанные.КоличествоУпаковокВозвращено = 0;
			ТекущиеДанные.ПричинаРасхождения = "";
		Иначе
			ТекущиеДанные.КоличествоУпаковокВозвращено = ТекущиеДанные.КоличествоУпаковок - ТекущиеДанные.КоличествоУпаковокПринято;
		КонецЕсли;
		
		Если НоваяСтрока.КоличествоУпаковокПринято > НоваяСтрока.КоличествоУпаковок Тогда
			НоваяСтрока.КоличествоУпаковокПринято = НоваяСтрока.КоличествоУпаковок;
			НоваяСтрока.КоличествоУпаковокВозвращено = 0;
			НоваяСтрока.ПричинаРасхождения = "";
		Иначе
			НоваяСтрока.КоличествоУпаковокВозвращено = НоваяСтрока.КоличествоУпаковок - НоваяСтрока.КоличествоУпаковокПринято;
		КонецЕсли;
		
		ПараметрыЗаполнения = ПараметрыЗаполненияСтроки(Истина);
		ПараметрыЗаполнения.КоличествоСуффикс = "Принято,Возвращено";
		
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыЗаполнения);
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, НоваяСтрока, КэшированныеЗначения, ПараметрыЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЗаполненияПартий

#Область ЗаполнитьПартии

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьПартии()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительОрганизацияСАТУРН) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Организация""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ГрузоотправительОрганизацияСАТУРН",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ГрузоотправительМестоХранения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Место хранения""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.ГрузоотправительМестоХранения",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = ЗаполнитьПартииНаСервере();
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПартииНаСервере()
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	РезультатЗаполнения = Документы.НакладнаяСАТУРН.ЗаполнитьПартии(Объект, СписокСтрок);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы)
	
	ПараметрыФормы.ОрганизацияСАТУРН = Объект.ГрузоотправительОрганизацияСАТУРН;
	ПараметрыФормы.МестоХранения = Объект.ГрузоотправительМестоХранения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПАТ) Тогда
		ПараметрыФормы.ПАТ = ТекущиеДанные.ПАТ;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыФормы.Номенклатура   = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
		ПараметрыФормы.Серия          = ТекущиеДанные.Серия;
		ПараметрыФормы.Упаковка       = ?(ЗначениеЗаполнено(ТекущиеДанные.Упаковка), ТекущиеДанные.Упаковка, ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыФормы.ТипИзмеряемойВеличины     = ТекущиеДанные.ТипИзмеряемойВеличиныСАТУРН;
		ПараметрыФормы.КоличествоВУпаковкеСАТУРН = ТекущиеДанные.КоличествоВУпаковкеСАТУРН;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти
&НаКлиенте
Функция ДействияНавигационнойСсылкиБезПроверкиПроведения()
	
	Результат = Новый Массив;
	Результат.Добавить("ПоказатьПричинуОшибки");
	Результат.Добавить("ОтменитьОперацию");
	Результат.Добавить("ОтменитьПередачуДанных");
	Результат.Добавить("ВернутьНакладную");
	Результат.Добавить("ПодтвердитьУтерюГруза");
	Результат.Добавить("АннулироватьОперацию");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтборыПоОснованию(ДокументОснование, Форма, НастроитьЗависимыеЭлементыФормы = Истина)
	
	ОтборыПоОснованию = Неопределено;
	Если ДокументОснование <> Неопределено Тогда 
		ОтборыПоОснованию = ИнтеграцияСАТУРНВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.НакладнаяСАТУРН"), ДокументОснование);
	КонецЕсли;
	
	Если ОтборыПоОснованию <> Неопределено Тогда
		Форма.ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН = ОтборыПоОснованию.ГрузоотправительОрганизацияСАТУРН;
		Форма.ГрузоотправительИзОснованияДляОтбораМестаХранения     = ОтборыПоОснованию.ГрузоотправительМестоХранения;
		Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН  = ОтборыПоОснованию.ГрузополучательОрганизацияСАТУРН;
		Форма.ГрузополучательИзОснованияДляОтбораМестаХранения      = ОтборыПоОснованию.ГрузополучательМестоХранения;
	Иначе 
		Форма.ГрузоотправительИзОснованияДляОтбораОрганизацииСАТУРН = Неопределено;
		Форма.ГрузоотправительИзОснованияДляОтбораМестаХранения     = Неопределено;
		Форма.ГрузополучательИзОснованияДляОтбораОрганизацииСАТУРН  = Неопределено;
		Форма.ГрузополучательИзОснованияДляОтбораМестаХранения      = Неопределено;
	КонецЕсли;
	
	Если НастроитьЗависимыеЭлементыФормы Тогда
		НастроитьЗависимыеЭлементыФормы(Форма, "ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеГосударственногоКонтракта(ГосударственныйКонтракт)
	
	Результат = Новый Соответствие();
	ИнтеграцияСАТУРНПереопределяемый.ПриОпределенииРеквизитовГосКонтракта(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ГосударственныйКонтракт), Результат);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИдентификаторыСтрокСАТУРНЗаполнены()
	
	Если Объект.Операция <> Перечисления.ВидыОперацийСАТУРН.НакладнаяПеревозка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.ИдентификаторСтрокиСАТУРН) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции
&НаСервере
Функция МассивЗначенийGTINДляВыбора(ТекущаяСтрока)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Результат = Новый Массив;
	
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	
	НоваяСтрока = ТаблицаНоменклатуры.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	
	ПроверяемыеGTIN = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;
	
	ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(
		ТаблицаНоменклатуры, ПроверяемыеGTIN, СоответствиеGTIN, Истина, ТекущиеДанные.ХарактеристикиИспользуются);
	
	Для Каждого GTIN Из ПроверяемыеGTIN Цикл
		Результат.Добавить(GTIN);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область АннулироватьОбновитьИзСервиса

&НаКлиенте
Процедура ВопросАннулироватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьСообщениеАннулированияОперации(ДополнительныеПараметры.ПараметрыОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДокументБылМодифицированЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// При аннулировании не проверять заполнение.
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Запись));
	РазблокироватьДанныеФормыДляРедактирования();
	
	Если Не Модифицированность Тогда
		Если ДополнительныеПараметры.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию") Тогда
			ПередатьСообщениеАннулированияОперации(ДополнительныеПараметры.ПараметрыОперации);
		Иначе
			ПередатьСообщениеЗагрузкиДокументаИзСервиса(ДополнительныеПараметры.ПараметрыОперации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСообщениеАннулированияОперации(ДополнительныеПараметры) Экспорт
	
	ПараметрыПередачи = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.ОрганизацияСАТУРН  = ДополнительныеПараметры.ОрганизацияСАТУРН;
	
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию");
	ПараметрыПередачи.ДополнительныеПараметры = Новый Структура;
	ПараметрыПередачи.ДополнительныеПараметры.Вставить("СтатусСАТУРН", СтатусСАТУРН);
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыАннулированияНакладной()
	
	Результат = Новый Структура("ОрганизацияСАТУРН");
	Если СтатусыАннулированияГрузоотправителя().Найти(СтатусСАТУРН) <> Неопределено
		И ГрузоотправительСопоставленСОрганизацией Тогда
		Результат.ОрганизацияСАТУРН  = Объект.ГрузоотправительОрганизацияСАТУРН;
	ИначеЕсли СтатусыАннулированияГрузополучателя().Найти(СтатусСАТУРН) <> Неопределено
		И ГрузополучательСопоставленСОрганизацией Тогда
		Результат.ОрганизацияСАТУРН  = Объект.ГрузополучательОрганизацияСАТУРН;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьАннулированиеНеПоддерживаетсяДляСтатусаДокумента()
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(
		СтрШаблон(
			НСтр("ru = 'Статус документа ""%1"" не поддерживает операцию аннулирования'"),
			СтатусСАТУРН),
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДокументБылПроведенЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
	РазблокироватьДанныеФормыДляРедактирования();
	
	Если Не Модифицированность Тогда
		ПередатьСообщениеЗагрузкиДокументаИзСервиса(ДополнительныеПараметры.ПараметрыОперации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСообщениеЗагрузкиДокументаИзСервиса(ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбработкиДокументов = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
	Если ГрузоотправительСопоставленСОрганизацией Тогда
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ГрузоотправительОрганизацияСАТУРН;
	ИначеЕсли ГрузополучательСопоставленСОрганизацией Тогда
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ГрузоотправительОрганизацияСАТУРН;
	Иначе
		Возврат;
	КонецЕсли;
	ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные");
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Операция", ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЗагрузкаДокументов"));
	ПараметрыЗапроса.Вставить("ИдентификаторДокумента", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Идентификатор));
	
	ПараметрыОбработкиДокументов.ДополнительныеПараметры = ПараметрыЗапроса;
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
	
	ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(
		ЭтотОбъект,
		ПараметрыОбработкиДокументов,
		ОписаниеПриЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СтатусыДокумента

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыАннулированияГрузоотправителя()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.СписанВПромышленность"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ОтправленНаУтилизацию"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ОтправленВРозничнуюТорговлю"));
	
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка"));
	
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортНаправленНаДосмотр"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотрОшибка"));
	
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.АннулированиеПодтвержденияОшибка"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыАннулированияГрузополучателя()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.Получен"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка"));
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыКВозврату()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.КВозврату"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастично"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыВозвращен()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.Возвращен"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвращенЧастично"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыВПути()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВПути"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвратОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвратОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыОбрабатывается()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПринятЧастичноОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ВозвратОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ГрузУтраченОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеВозвратаОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеЧастичногоВозвратаОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.Обрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ПодтверждениеУтратыГрузаОбрабатывается"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыАннулирование()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОбрабатывается"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.АннулированиеОшибка"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыТребуетсяПодтверждениеЭкспорта()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПринятНаДосмотр"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержденОшибка"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказаноОшибка"));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтатусыЭкспортПодтвержден()
	
	Результат = Новый Массив;
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортПодтвержден"));
	Результат.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбработкиНакладнойСАТУРН.ЭкспортОтказано"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораСкладаПолучателя(Форма)
	
	ПараметрыВыбора = Новый Массив;
	
	Если Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийСАТУРН.НакладнаяЭкспортЧерезПунктДосмотра") Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ЭтоСкладВременногоХранения", Истина));
	КонецЕсли;
	
	Форма.Элементы["ГрузополучательМестоХранения"].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустойКодТовараВСтроках(МассивСтрок)

	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура",   Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаНоменклатуры.Колонки.Добавить("НомерСтроки",    ОбщегоНазначения.ОписаниеТипаЧисло(5));

	Для Каждого СтрокаТовары Из МассивСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.КодТовара)
			И (СтрокаТовары.ХарактеристикиИспользуются
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
			И ЗначениеЗаполнено(СтрокаТовары.Характеристика)
			Или Не СтрокаТовары.ХарактеристикиИспользуются
			И ЗначениеЗаполнено(СтрокаТовары.Номенклатура)) Тогда
			СтрокаТаблицы = ТаблицаНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаТовары);
		КонецЕсли;
	КонецЦикла;

	Если ТаблицаНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	МассивGTIN       = Новый Массив;
	СоответствиеGTIN = Новый Соответствие;

	ШтрихкодированиеОбщегоНазначенияИС.ЗаполнитьПроверяемыеGTIN(ТаблицаНоменклатуры, МассивGTIN, СоответствиеGTIN, Истина);

	Если МассивGTIN.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
 		
		СтрокаТовары = Объект.Товары[СтрокаТаблицы.НомерСтроки - 1];
		
		МассивGTIN.Очистить();
		Для Каждого КлючИЗначение Из СоответствиеGTIN Цикл
			Если СтрокаТовары.Номенклатура = КлючИЗначение.Значение.Номенклатура
				И СтрокаТовары.Характеристика = КлючИЗначение.Значение.Характеристика Тогда
				МассивGTIN.Добавить(КлючИЗначение.Ключ);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивGTIN.Количество() = 1 Тогда
			СтрокаТовары.КодТовара = МассивGTIN[0];
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураХарактеристикаПриИзмененииСервер()
	
	Если РедактированиеФормыНеДоступно Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ДанныеСтроки  = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.КодТовара = "";
	ДанныеСтроки.КодПартии = "";
	
	Если ДанныеСтроки.ХарактеристикиИспользуются Тогда
		НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И ЗначениеЗаполнено(ДанныеСтроки.Характеристика));
	Иначе
		НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
	Если НоменклатураХарактеристикаУказана Тогда
		
		СтрокиДляОбработки = Новый Массив;
		СтрокиДляОбработки.Добавить(ДанныеСтроки);
		
		ЗаполнитьПустойКодТовараВСтроках(СтрокиДляОбработки);
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
