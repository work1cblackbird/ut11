#Область ОбработчикиСобытийФормы   

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом 
	
	СтатусыРедактирования = СтатусыРедактированияПисьма();	
	ТолькоПросмотр = СтатусыРедактирования.Найти(ТекущийОбъект.Статус) = Неопределено;  
	Элементы.ГруппаФайлы.ТолькоПросмотр = ТолькоПросмотр; 
	
	Если ТекущийОбъект.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
		ПоказатьПричинуОтклонения();
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды   
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаОсновныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьУсловноеОформление();
	
	ЭтоНовый = Параметры.Ключ.Пустая();
	Если ЭтоНовый Тогда  
		Объект.Статус = Перечисления.СтатусыОбменСБанками.Черновик;

		Если Параметры.Свойство("ЗначениеЗаполнения") Тогда
			ЗаполнитьОбъектПоЗначениюЗаполнения(Параметры.ЗначениеЗаполнения);
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			СкопироватьПисьмо();
		ИначеЕсли Параметры.Свойство("РеквизитыНовогоПисьма") Тогда
			ЗаполнитьНовоеПисьмо();   
		ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда
			ЗаполнитьОбъектПоОснованию();  
		КонецЕсли; 
		
		ЗаполнитьСведенияОНастройкеОбмена();  
		
		Подпись = СтрШаблон("
			|
			|--
			|%1
			|", ОбменСБанкамиСлужебный.НоваяПодпись());
		
		ПодготовленныйТекст = Объект.Текст; 
		Объект.Текст = Подпись+Символы.ПС+ПодготовленныйТекст;

	Иначе  	   
		ЗаполнитьПрисоединенныеФайлы(Объект.ПометкаУдаления); 
		Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка = Объект.ПометкаУдаления;
		Если Объект.Статус = Перечисления.СтатусыОбменСБанками.ОтклоненБанком Тогда
			ПоказатьПричинуОтклонения();
		КонецЕсли;
	КонецЕсли; 
	
	ОформитьШапкуФормы(ЭтоНовый, Отказ); 
	ЗаполнитьСведенияОНастройкеОбмена();
	Если Параметры.Ключ.Пустая() Тогда
		ЗаполнитьТипПисьма();             
	КонецЕсли; 
	УстановитьВидимостьКоманд(); 
	ИзменитьВидимостьДоступностьЭлементов();
	ОформитьПрисоединенныеФайлы();
		
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)  
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды  
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 	
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда 	
		ПараметрыОтбора = Новый Структура("Ссылка", Источник);
		МассивСтрок = ПрисоединенныеФайлыТаблица.НайтиСтроки(ПараметрыОтбора);   	
		Если МассивСтрок.Количество() Тогда
			ПересчитатьРазмерФайла(Источник);
		КонецЕсли;  
	ИначеЕсли ИмяСобытия = "ОбновитьСостояниеОбменСБанками" И Не Модифицированность Тогда		
		Прочитать();
	КонецЕсли;
	
	СтатусыРедактирования = СтатусыРедактированияПисьма();	
	ТолькоПросмотр = СтатусыРедактирования.Найти(Объект.Статус) = Неопределено; 
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" И ТолькоПросмотр Тогда
		УстановитьВидимостьКоманд();
		
		ПроверяемыеСтатусы = Новый Массив;	 
		ПроверяемыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Отправлен"));
		ПроверяемыеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыОбменСБанками.Принят")); 	
		Если ПроверяемыеСтатусы.Найти(Объект.Статус) <> Неопределено И Открыта() Тогда
			Закрыть();	
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Идентификатор) Тогда
		ТекущийОбъект.Идентификатор = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ТекущийОбъект.ЕстьВложение = ПрисоединенныеФайлыТаблица.Количество(); 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Сохранение добавленных файлов
	Для каждого ОписаниеФайла Из ПрисоединенныеФайлыТаблица Цикл 
		Если НЕ ОписаниеФайла.Сохранен Тогда 		
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", Пользователи.АвторизованныйПользователь());
			ПараметрыФайла.Вставить("ВладелецФайлов", Объект.Ссылка);
			СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Наименование);
			
			ПараметрыФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.ИмяБезРасширения);
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмениФайла.Расширение);
			ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное");
			ОписаниеФайла.Ссылка = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ОписаниеФайла.Хранение);
			ОписаниеФайла.Сохранен = Истина;  		
		КонецЕсли;    
	КонецЦикла;
	
	// Сброс состояния ЭД
	Если Объект.Статус = Перечисления.СтатусыОбменСБанками.Черновик Тогда
		ОбменСБанкамиСлужебный.УстановитьНовуюВерсиюЭД(ТекущийОбъект.Ссылка, Истина);
	КонецЕсли;
	
	УстановитьВидимостьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДляВалютногоКонтроляПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Основание) И ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ПисьмоОбменСБанками") Тогда
		ОснованиеСВалютнымКонтролем = ВалютныйКонтроль(Объект.Основание);
		Если Объект.ДляВалютногоКонтроля <> ОснованиеСВалютнымКонтролем Тогда
			УдалитьОснование();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПисьмаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Основание) И ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.ПисьмоОбменСБанками")
		И НЕ ДляВалютногоКонтроля(Объект.Основание) Тогда
			УдалитьОснование();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТипПисьма) Тогда
		ТекстШаблона = ТекстШаблона(Объект.ТипПисьма);
		Если ЗначениеЗаполнено(ТекстШаблона) Тогда
			Если ПустаяСтрока(Объект.Текст) Тогда
				Объект.Текст = ТекстШаблона;
			Иначе
				ДополнительныеПараметры = Новый Структура("ТекстШаблона", ТекстШаблона);
				Оповещение = Новый ОписаниеОповещения("ПослеВопросаОЗаменеТекста", ЭтотОбъект, ДополнительныеПараметры);
				ТекстВопроса = НСтр("ru = 'Заменить текст письма шаблоном?'");
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Модифицированность = Истина;
		Объект.Основание = ВыбранноеЗначение;
		Основание = ВыбранноеЗначение;
		ПриИзмененииОснования();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанкПриИзменении(Элемент) 
	
	БанкПриИзмененииНаСервере();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрисоединенныеФайлы

&НаКлиенте
Процедура ПрисоединенныеФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина; 
	
	ПослеЗагрузкиФайлов = Новый ОписаниеОповещения("ПослеЗагрузкиФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор; 	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ПослеЗагрузкиФайлов, ПараметрыЗагрузки);      
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединенныеФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;    
		
	КоличествоВыделенныеСтроки = Элементы.ПрисоединенныеФайлы.ВыделенныеСтроки.Количество();
	ТекстВопроса = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru=';Удалить %1 файл?;;Удалить %1 файла?;Удалить %1 файлов?;'"), 
		КоличествоВыделенныеСтроки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершениеУдаленияВложений", ЭтотОбъект);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ПрисоединенныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьПрисоединенныйФайл();	
	ОформитьПрисоединенныеФайлы();
	
КонецПроцедуры  

#КонецОбласти

#Область ОбработчикиКомандФормы   

&НаКлиенте
Процедура ИсторияПереписки(Команда)   
		
	Если Параметры.Ключ.Пустая() Тогда 
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаИсторияПереписки", ЭтотОбъект, Параметры); 
		Режим = РежимДиалогаВопрос.ОКОтмена;
		ПоказатьВопрос(Оповещение, 
			НСтр("ru = 'Данные еще не записаны. 
				|Просмотр истории доступен только после записи данных. 
				|Документ будет записан, продолжить?'"), Режим, 0);
	Иначе
		ИсторияПерепискиОткрытьФорму();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдалениеФайлы(Команда)
	
	ПоказыватьУдаленные = Не Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка;
	Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка = ПоказыватьУдаленные; 
	
	ЗаполнитьПрисоединенныеФайлы(ПоказыватьУдаленные);
	
КонецПроцедуры  

&НаКлиенте
Процедура СохранитьФайлыНаДиск(Команда)   
	
	Если ПрисоединенныеФайлыТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	СохраняемыеФайлы = ПолучитьСохраняемыеФайлы();
	Если СохраняемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);                                
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, СохраняемыеФайлы, ПараметрыСохраненияФайлов); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)     
	
	ОткрытьПрисоединенныйФайл(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда) 
	
	ОткрытьКарточкуПрисоединенногоФайла();       
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)  
	
	СохранитьПрисоединенныйФайл();  
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПисьмо(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда)
		
	ОбменСБанкамиСлужебныйКлиент.ОткрытьФормуПересылкиЭлектронногоПисьма(Объект.Ссылка);  	

КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли; 	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбработатьПометкуУдаления", ЭтотОбъект, Параметры);  
	Если Объект.ПометкаУдаления Тогда  
		ТекстВопроса = НСтр("ru = 'Восстановить письмо?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить письмо?'");
	КонецЕсли;
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры  

&НаКлиенте
Процедура ПоказатьПодписи(Команда)
	
	ОчиститьСообщения();
	ПараметрыФормы = Новый Структура("Объект", Объект.Ссылка);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.Подписи", ПараметрыФормы, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИнформациюДляТехническойПоддержки(Команда)
	
	ОписаниеФайла = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьФайлДляТехническойПоддержки(Объект.Ссылка);
	Если ОписаниеФайла = Неопределено Тогда  
		Текст = НСтр("ru = 'Не найдено сообщение обмена'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;        
	НачатьПолучениеФайлаССервера(ОписаниеФайла.АдресФайла, ОписаниеФайла.ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)     
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(НастройкаОбмена) Тогда    
		ТекстУведомления = НСтр("ru = 'Отправка писем %1 в %2 не поддерживается'");  
		ТекстУведомления = СтрШаблон(ТекстУведомления, Объект.Организация, Объект.Банк);
		ПоказатьПредупреждение(,ТекстУведомления);
		Возврат;
	КонецЕсли;  
	
	Отказ = Ложь; 	
	ПроверкиПередЗаписьюОтправкой(Отказ);	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьДатуОтправкиПисьма();
	
	Если Модифицированность Тогда
		Записать();
	КонецЕсли;  
	
	МассивСсылок = ОбщегоНазначенияБЭДКлиент.МассивПараметров(Объект.Ссылка);
	ОбменСБанкамиСлужебныйКлиент.ОбработатьЭлектронныеДокументы(МассивСсылок, "СформироватьПодписатьОтправить");
	
КонецПроцедуры  

&НаКлиенте
Процедура ЗаписатьЧерновик(Команда)
	
	Записать();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) 

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект); 
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() 

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);     
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПроверкиПередЗаписьюОтправкой(Отказ)   
	
	Если Объект.ДляВалютногоКонтроля И Не ЗначениеЗаполнено(Объект.Основание) Тогда
		ТекстСообщения = НСтр("ru = 'В письме для целей валютного контроля должно быть указано основание.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Основание", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Укажите организацию'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Организация", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Банк) Тогда
		ТекстСообщения = НСтр("ru = 'Укажите банк'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Банк", , Отказ);
	КонецЕсли;
	
	ОбщийРазмер = ПрисоединенныеФайлыТаблица.Итог("Размер");
	
	Если ОбщийРазмер > МаксимальныйРазмерВложений Тогда
		Шаблон = НСтр("ru = 'Превышен объем вложений на %1 Кб.
							|Письмо не может быть отправлено.'");
		ТекстСообщения = СтрШаблон(Шаблон, Формат((ОбщийРазмер - МаксимальныйРазмерВложений) / 1024, "ЧДЦ=1"));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПрисоединенныеФайлыТаблица", , Отказ);
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Тема) Тогда
		ТекстСообщения = НСтр("ru = 'Заполните тему письма'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Тема", , Отказ);
	КонецЕсли; 
	
	Если Элементы.ТипПисьма.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(Объект.ТипПисьма) Тогда
		ТекстСообщения = НСтр("ru = 'Заполните тип письма'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ТипПисьма", , Отказ);
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.Текст) Тогда
		ТекстСообщения = НСтр("ru = 'Текст письма не может быть пустым'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Текст", , Отказ);
	КонецЕсли;
	
	Если СтрДлина(Объект.Текст) > 8000 Тогда
		ШаблонСообщения = НСтр("ru = 'Слишком большой текст письма.
									|Текущая длина: %1
									|Допустимая длина: 8000'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрДлина(Объект.Текст));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Текст", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОНастройкеОбмена();	
	Если Не ЗначениеЗаполнено(Объект.ТипПисьма) Тогда   	
		ЗаполнитьТипПисьма();
	КонецЕсли;
	ИзменитьВидимостьДоступностьЭлементов();
	ОформитьПрисоединенныеФайлы(); 
	
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	
	ЗаполнитьСведенияОНастройкеОбмена();
	ЗаполнитьТипПисьма();
	ИзменитьВидимостьДоступностьЭлементов();	  
	ОформитьПрисоединенныеФайлы();	
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииОснования() 
	
	ИзменитьВидимостьДоступностьЭлементов();
	ОформитьПрисоединенныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбработатьПометкуУдаления(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;   
	
	УстановитьПометкуУдаления();
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипПисьма() 
	
	СведенияОТипахПисем = ОбменСБанкамиСлужебный.СведенияОТипахПисемПоНастройкеОбмена(НастройкаОбмена);
	Если СведенияОТипахПисем.ОдинТипПисьма Тогда
		Объект.ТипПисьма = СведенияОТипахПисем.ТипПисьмаПоНастройке;
	Иначе
		Объект.ТипПисьма = Неопределено;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьСведенияОНастройкеОбмена()

	ОписаниеНастройки = ОбменСБанкамиСлужебный.НастройкаОбменаСОтправкойПисем(Объект.Организация, Объект.Банк);  
	НастройкаОбмена = ОписаниеНастройки.Ссылка;
	ПрограммаБанка =  ОписаниеНастройки.ПрограммаБанка;  
	ИспользуетсяКриптография = ОписаниеНастройки.ИспользоватьЭП;

КонецПроцедуры 

&НаКлиенте
Процедура ПослеЗакрытияВопросаИсторияПереписки(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
	
	Отказ = Ложь;
	ПроверкиПередЗаписьюОтправкой(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияПерепискиОткрытьФорму();

КонецПроцедуры 

&НаКлиенте
Процедура ИсторияПерепискиОткрытьФорму()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Банк", Объект.Банк);
	ПараметрыОткрытия.Вставить("ИдентификаторПереписки", Объект.ИдентификаторПереписки);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.Переписка",
		ПараметрыОткрытия, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);   
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДатуОтправкиПисьма()
	
	Объект.Дата = ТекущаяДатаСеанса(); 

КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьПрисоединенныеФайлы(ЗаполнятьУдаленные = Ложь) 
	
	ПрисоединенныеФайлыТаблица.Очистить();
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, МассивФайлов);
	
	ДанныеФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивФайлов, 
		"Ссылка, Наименование, Расширение, Размер, ПометкаУдаления");
	
	Для каждого ЭлементКоллекции Из ДанныеФайлов Цикл   
		ДанныеФайла = ЭлементКоллекции.Значение;
		Если ДанныеФайла.ПометкаУдаления И Не ЗаполнятьУдаленные Тогда
			Продолжить;
		КонецЕсли;        	
		
		НовСтрока = ПрисоединенныеФайлыТаблица.Добавить();   		
		НовСтрока.Ссылка = ДанныеФайла.Ссылка;
		НовСтрока.Наименование = ОбменСБанкамиСлужебныйКлиентСервер.ПредставлениеПрисоединенногоФайла(
			ДанныеФайла.Наименование, ДанныеФайла.Расширение);  		
		РазмерФайла = ОбменСБанкамиСлужебныйКлиентСервер.ПеревестиРазмерПрисоединенногоФайлаИзБайт_В_КБ(ДанныеФайла.Размер); 
		НовСтрока.Размер = РазмерФайла; 
		ТекстСообщения = НСтр("ru = '%1 КБ'");
		НовСтрока.РазмерПредставление = СтрШаблон(ТекстСообщения,РазмерФайла);   	
		НовСтрока.КартинкаЧислом = ДанныеФайла.ПометкаУдаления;
		НовСтрока.Сохранен = Истина;
		НовСтрока.Удалить = Объект.Статус <> Перечисления.СтатусыОбменСБанками.Черновик;
	КонецЦикла; 
	
КонецПроцедуры   

&НаКлиенте
Процедура ЗавершениеУдаленияВложений(Ответ, Параметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыделенныеСтроки = Элементы.ПрисоединенныеФайлы.ВыделенныеСтроки;  
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого ВыдСтрока Из ВыделенныеСтроки Цикл 
		УдаляемыеСтроки.Добавить(ВыдСтрока);
	КонецЦикла;	
	
	ЗавершениеУдаленияВложенийНаСервере(УдаляемыеСтроки); 
	
КонецПроцедуры   

&НаСервере
Процедура ЗавершениеУдаленияВложенийНаСервере(УдаляемыеСтроки)
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл 
		ЭлементСписка = ПрисоединенныеФайлыТаблица.НайтиПоИдентификатору(УдаляемаяСтрока); 
		ФайлСсылка = ЭлементСписка.Ссылка;
		Если ЗначениеЗаполнено(ФайлСсылка) Тогда
			УстановленаПометка = СинхронизироватьПометкуУдаленияПрисоединенногоФайла(ФайлСсылка);
			Если УстановленаПометка Тогда
				ЭлементСписка.КартинкаЧислом = 1; 
				Если Не Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка Тогда
					ПрисоединенныеФайлыТаблица.Удалить(ЭлементСписка);                                             
				КонецЕсли;
			Иначе 
				ЭлементСписка.КартинкаЧислом = 0;
			КонецЕсли;    
		Иначе     
			УдалитьИзВременногоХранилища(ЭлементСписка.Хранение);
			ПрисоединенныеФайлыТаблица.Удалить(ЭлементСписка);
			Модифицированность = Истина; 
		КонецЕсли;  	
	КонецЦикла;		
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьПометкуУдаленияПрисоединенногоФайла(ФайлСсылка)
	
	ТекущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка,"ПометкаУдаления");

	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();	
	Попытка  
		НоваяПометкаУдаления = Не ТекущаяПометкаУдаления;
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка,,УникальныйИдентификатор);
		ФайлОбъект.УстановитьПометкуУдаления(НоваяПометкаУдаления); 
		РазблокироватьДанныеДляРедактирования(ФайлСсылка,УникальныйИдентификатор);		
		
		Возврат НоваяПометкаУдаления;
	Исключение 
		// записать предупреждение в журнал регистрации
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление присоединенного файла'", 
		ОбщегоНазначения.КодОсновногоЯзыка()),     
		УровеньЖурналаРегистрации.Ошибка,
		,
		ФайлОбъект, 
		ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		
		Возврат ТекущаяПометкаУдаления;
	КонецПопытки; 
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуПрисоединенногоФайла()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда		   
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ФайлСсылка); 
	КонецЕсли;  
	
КонецПроцедуры          

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда	
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлСсылка, УникальныйИдентификатор);	
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьПрисоединенныйФайл()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда		   
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлСсылка, УникальныйИдентификатор);
		ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);  
		
		ФайловаяСистемаКлиент.СохранитьФайл(
			ОписаниеОповещения,
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
			СтрШаблон("%1.%2",ДанныеФайла.Наименование,ДанныеФайла.Расширение),      
			ПараметрыСохраненияФайлов);
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайла(ПолученныеФайлы, ПустойПараметр) Экспорт
	Если Не ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ПолученныеФайлы[0].ПолноеИмя;
	Если ПустаяСтрока(ПолноеИмя) Тогда
		Обработчик = Неопределено;
	Иначе
		Обработчик = Новый ОписаниеОповещения("ОткрытьПроводник", ФайловаяСистемаКлиент, ПолноеИмя);
	КонецЕсли;
	
	Количество = ПолученныеФайлы.Количество();
	Если Количество > 1 Тогда
		Заголовок = Неопределено;
		Текст = СтрШаблон(НСтр("ru = 'Файлы (%1) сохранены'"), Количество);
	Иначе
		Заголовок = НСтр("ru = 'Файл сохранен'");
		Текст = ПолученныеФайлы[0].Имя;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(Заголовок, Обработчик, Текст, БиблиотекаКартинок.Успешно32);
КонецПроцедуры

&НаСервере
Функция ПолучитьСохраняемыеФайлы() 
	
	СохраняемыеФайлы = Новый Массив;
	Для каждого ЭлементКоллекции Из ПрисоединенныеФайлыТаблица Цикл
		ПрисоединенныйФайл = ЭлементКоллекции.Ссылка;   
		Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		СохраняемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат СохраняемыеФайлы;
	
КонецФункции 

&НаСервере
Процедура УстановитьВидимостьКоманд()    	
			
    СтатусыРедактирования = СтатусыРедактированияПисьма();	
	ВидимостьОтправить = ОбменСБанкамиСлужебный.ПравоОбработкиЭД() 
		И СтатусыРедактирования.Найти(Объект.Статус) <> Неопределено;
	
	Элементы.Отправить.Видимость = ВидимостьОтправить; 
	Элементы.Отправить.КнопкаПоУмолчанию = ВидимостьОтправить;
	Элементы.Записать.Видимость = ВидимостьОтправить;
	Элементы.Записать_ВсеДействия.Видимость = ВидимостьОтправить;  
	Элементы.Закрыть.Видимость = Не ВидимостьОтправить; 
	Элементы.Закрыть.КнопкаПоУмолчанию = Не ВидимостьОтправить;

	Элементы.ПоказатьПодписи.Видимость = ИспользуетсяКриптография И Не ВидимостьОтправить;
	Элементы.ПоказатьПодписи_ВсеДействия.Видимость = ИспользуетсяКриптография И Не ВидимостьОтправить; 
	
	ЭтоНовоеПисьмо = Параметры.Ключ.Пустая();
	ВидимостьПереслать = Не ЭтоНовоеПисьмо И ОбменСБанкамиСлужебный.ФункциональностьЭлектроннойПочтыДоступна(); 
	Элементы.Переслать.Видимость = ВидимостьПереслать;  
	Элементы.Переслать_ВсеДействия.Видимость = ВидимостьПереслать;
	
	Элементы.ПометитьНаУдаление.Видимость = Не ЭтоНовоеПисьмо;
	Элементы.ПометитьНаУдаление_ВсеДействия.Видимость = Не ЭтоНовоеПисьмо;    	
	
КонецПроцедуры 

&НаСервере
Функция СтатусыРедактированияПисьма()    
	
	СтатусыРедактирования = Новый Массив;       
	СтатусыРедактирования.Добавить(Перечисления.СтатусыОбменСБанками.ПустаяСсылка()); 
	СтатусыРедактирования.Добавить(Перечисления.СтатусыОбменСБанками.Черновик);  
	СтатусыРедактирования.Добавить(Перечисления.СтатусыОбменСБанками.ПодготовленКОтправке);
	СтатусыРедактирования.Добавить(Перечисления.СтатусыОбменСБанками.НеПодтвержден);
	
	Возврат СтатусыРедактирования;	
	
КонецФункции 

&НаСервере
Процедура УстановитьПометкуУдаления()  
	
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,,УникальныйИдентификатор);    
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	ПисьмоОбъект.ПометкаУдаления = Не Объект.ПометкаУдаления; 
	ПисьмоОбъект.Записать();     
	ЗначениеВРеквизитФормы(ПисьмоОбъект,"Объект");
	
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗагрузкиФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл   
		ДобавитьПрисоединенныйФайлВТаблицу(ОписаниеФайла.Хранение, ОписаниеФайла.Имя);     	
	КонецЦикла;
	
	Модифицированность = Истина;
	
	ОформитьПрисоединенныеФайлы();
	
КонецПроцедуры  

&НаСервереБезКонтекста
Функция ВалютныйКонтроль(Знач Письмо)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ДляВалютногоКонтроля");
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	// Тип письма недоступен пока не определена настройка обмена
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТипПисьма.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НастройкаОбмена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОЗаменеТекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Текст = ДополнительныеПараметры.ТекстШаблона;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДляВалютногоКонтроля(Знач Письмо)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "ДляВалютногоКонтроля");
	
КонецФункции

&НаКлиенте
Процедура УдалитьОснование()
	
	Объект.Основание = Неопределено;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстШаблона(Знач ТипПисьма)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипПисьма, "Шаблон");
	
КонецФункции

&НаСервере
Процедура ПоказатьПричинуОтклонения()

	СообщениеОбмена = ОбменСБанкамиСлужебный.СообщениеОбменаПоВладельцу(Объект.Ссылка);
	Если ЗначениеЗаполнено(СообщениеОбмена) Тогда
		ПричинаОтклонения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СообщениеОбмена, "ПричинаОтклонения");
		Элементы.ПричинаОтклонения.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРазмерФайла(Знач ПрисоединенныйФайл)
	
	Для каждого ЭлементКоллекции Из ПрисоединенныеФайлыТаблица Цикл
		
		Если ЭлементКоллекции.Ссылка = ПрисоединенныйФайл Тогда
			
			ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
			ЭлементКоллекции.Размер = ДанныеФайла.Размер;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОформитьПрисоединенныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораТипаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеДокументаВМетаданных = ОбменСБанкамиСлужебныйВызовСервера.НазваниеОбъектаВМетаданных(
		ВыбранныйЭлемент.Значение);
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		Отбор.Вставить("Организация", Объект.Организация);
	Иначе
		Отбор.Вставить("СписокОрганизаций", Элементы.Организация.СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Банк) Тогда
		Отбор.Вставить("Банк", Объект.Банк);
	Иначе
		Отбор.Вставить("СписокБанков", Элементы.Банк.СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Основание) И ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Отбор.Вставить("СчетОрганизации", Объект.СчетОрганизации);
	КонецЕсли;
	
	Если Объект.ДляВалютногоКонтроля Тогда
		Отбор.Вставить("ДляВалютногоКонтроля", Объект.ДляВалютногоКонтроля);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму("Документ." + НазваниеДокументаВМетаданных + ".ФормаВыбора", ПараметрыФормы, Элементы.Тема);
	
КонецПроцедуры

&НаСервере
Процедура ОформитьШапкуФормы(ЭтоНовый, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Организация КАК Организация,
	|	НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Банк КАК Банк
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбменСБанкамиИсходящиеДокументы
	|ГДЕ
	|	НастройкиОбменСБанкамиИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Письмо)
	|	И НЕ НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиОбменСБанкамиИсходящиеДокументы.Ссылка.Недействительна";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ЭтоНовый И НЕ ТаблицаРезультата.Количество() Тогда
		ТекстОшибки = НСтр("ru = 'Отсутствуют действующие настройки обмена 1С:ДиректБанк с поддержкой писем.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , , , Отказ);
		Возврат;
	КонецЕсли;
	
	МассивОрганизаций = ТаблицаРезультата.ВыгрузитьКолонку("Организация");
	
	Элементы.Организация.СписокВыбора.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОрганизаций));
	
	МассивБанков = ТаблицаРезультата.ВыгрузитьКолонку("Банк");
	
	СписокВыбораБанков = Элементы.Банк.СписокВыбора;
	СписокВыбораБанков.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивБанков));
	ОбменСБанкамиСлужебный.ЗаполнитьПредставленияСпискаБанков(СписокВыбораБанков);
	
	Если Элементы.Организация.СписокВыбора.Количество() = 1 Тогда
		Объект.Организация = Элементы.Организация.СписокВыбора.Получить(0).Значение;
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	Если Элементы.Банк.СписокВыбора.Количество() = 1 Тогда
		Объект.Банк = Элементы.Банк.СписокВыбора.Получить(0).Значение;
		Элементы.Банк.Видимость = Ложь;
	КонецЕсли;
	
	ОрганизацияБанкСПоддержкойПисем = Новый Соответствие;
	Для Каждого Запись Из ТаблицаРезультата Цикл
		ОрганизацияБанкСПоддержкойПисем.Вставить(Запись.Организация, Запись.Банк);
		ОрганизацияБанкСПоддержкойПисем.Вставить(Запись.Банк, Запись.Организация);
	КонецЦикла;
	
	ОрганизацияБанкСсылка = ПоместитьВоВременноеХранилище(ОрганизацияБанкСПоддержкойПисем, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлВТаблицу(АдресФайла, ИмяФайла)   
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	Размер = ДвоичныеДанныеФайла.Размер();
	СтруктураФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайла);
	Если Размер > МаксимальныйРазмерВложений Тогда
		ТекстСообщения = НСтр("ru = 'Размер файла %1 превышает допустимый.
									|Текущий размер: %2 байт.
									|Максимальный размер: %3 байт.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, СтруктураФайла.Имя, Размер, МаксимальныйРазмерВложений);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;

	НовСтрока = ПрисоединенныеФайлыТаблица.Добавить();
	НовСтрока.Хранение = АдресФайла;
	НовСтрока.Сохранен = Ложь;
	НовСтрока.Наименование = ОбменСБанкамиСлужебныйКлиентСервер.ПредставлениеПрисоединенногоФайла(
		СтруктураФайла.ИмяБезРасширения, СтруктураФайла.Расширение);  	
	РазмерФайла = ОбменСБанкамиСлужебныйКлиентСервер.ПеревестиРазмерПрисоединенногоФайлаИзБайт_В_КБ(Размер); 
	НовСтрока.Размер = РазмерФайла;  
	ТекстСообщения = НСтр("ru = '%1 КБ'");
	НовСтрока.РазмерПредставление = СтрШаблон(ТекстСообщения,РазмерФайла); 	
	НовСтрока.КартинкаЧислом = 0;
	
КонецПроцедуры  

&НаСервере
Процедура ОформитьПрисоединенныеФайлы() 
	
	МаксимальныйРазмерВложений = 0;  
	РеквизитыНастройкиОбмена = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НастройкаОбмена, 
		"ПрограммаБанка, МаксимальныйРазмерВложенийВПисьмо"); 
	Если РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн Тогда 
		МаксимальныйРазмерВложений = 2*1024*1024;
	ИначеЕсли РеквизитыНастройкиОбмена.ПрограммаБанка = Перечисления.ПрограммыБанка.АсинхронныйОбмен Тогда  
		МаксимальныйРазмерВложений = РеквизитыНастройкиОбмена.МаксимальныйРазмерВложенийВПисьмо;  
	Иначе
		 Элементы.ПрисоединенныеФайлыНаименование.Заголовок = НСтр("ru = 'Файлы'");
		 Возврат;
	КонецЕсли;
	
	МаксимальныйРазмерВложенийВКБ = Окр(МаксимальныйРазмерВложений/1024,1);  
	ПрисоединеноКБ = Окр(ПрисоединенныеФайлыТаблица.Итог("Размер"),1); 
	ДоступноКБ = ОКр((МаксимальныйРазмерВложенийВКБ - Мин(МаксимальныйРазмерВложенийВКБ,ПрисоединеноКБ)),1);

	ЗаголовокПрисоединенныеФайлы = НСтр("ru = 'Доступно %1 из %2 КБ'");
	Элементы.ПрисоединенныеФайлы.Заголовок = 
		СтрШаблон(ЗаголовокПрисоединенныеФайлы,Формат(ДоступноКБ,"ЧДЦ=0"),Формат(МаксимальныйРазмерВложенийВКБ,"ЧДЦ=0"));

КонецПроцедуры

&НаСервере
Процедура ИзменитьВидимостьДоступностьЭлементов()    	 			
	
	Элементы.ДляВалютногоКонтроля.Видимость = ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	Элементы.ПричинаОтклонения.Видимость = Ложь; 		
	
	Элементы.СчетОрганизации.Видимость = ЗначениеЗаполнено(Объект.СчетОрганизации);
	Элементы.Основание.Видимость = ЗначениеЗаполнено(Объект.Основание);

	ТиповПисемБольшеОдного = ОбменСБанкамиСлужебный.ПроверкаТиповПисемБольшеОдного(НастройкаОбмена); 	
	Элементы.ТипПисьма.Видимость = ТиповПисемБольшеОдного; 
	Элементы.ТипПисьма.АвтоОтметкаНезаполненного = 
		ТиповПисемБольшеОдного И ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	
	КартинкаСтатусаЧислом = ОбменСБанкамиСлужебный.ПолучитьСтатусЧисломДляКартинки(Объект.Статус); 
	Элементы.КартинкаСтатусаЧислом.Видимость = КартинкаСтатусаЧислом > 0; 	    
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПоЗначениюЗаполнения(ОснованиеПисьма)
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеПисьма, "Тема, Текст, ДляВалютногоКонтроля,
		|Организация, Банк, ВходящийНомер, ВходящаяДата, ТипПисьма, Направление, Дата, Номер, СчетОрганизации,
		|ИдентификаторПереписки, Основание, Идентификатор, Статус");
	Объект.Тема = "Re: " + РеквизитыОснования.Тема;
	Если ЗначениеЗаполнено(РеквизитыОснования.Основание) Тогда
		Объект.Основание = РеквизитыОснования.Основание;
	КонецЕсли;
	Объект.ДляВалютногоКонтроля = РеквизитыОснования.ДляВалютногоКонтроля;
	Объект.Организация = РеквизитыОснования.Организация;
	Объект.Банк = РеквизитыОснования.Банк;
	Объект.СчетОрганизации = РеквизитыОснования.СчетОрганизации;
	Объект.ИдентификаторПереписки = РеквизитыОснования.ИдентификаторПереписки;
	Если РеквизитыОснования.Статус = Перечисления.СтатусыОбменСБанками.Отправлен
			ИЛИ РеквизитыОснования.Статус = Перечисления.СтатусыОбменСБанками.Получен Тогда
			Объект.ИдентификаторИсходногоПисьма = РеквизитыОснования.Идентификатор;
			Если Не ЗначениеЗаполнено(РеквизитыОснования.Основание) Тогда
				Объект.Основание = ОснованиеПисьма;
			КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыОснования.Направление = Перечисления.НаправленияЭДО.Входящий Тогда
		НомерОснования = РеквизитыОснования.ВходящийНомер;
		ДатаОснования = РеквизитыОснования.ВходящаяДата;
		ТекстПисьма = НСтр("ru = 'Письмо из банка №%1 от %2
								|Тип письма: %3
								|Тема: %4'");
	Иначе
		НомерОснования = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОснования.Номер);
		ДатаОснования = РеквизитыОснования.Дата;
		ТекстПисьма = НСтр("ru = 'Письмо в банк №%1 от %2
								|Тип письма: %3
								|Тема: %4'");
	КонецЕсли; 
	
	ТекстПисьма = СтрШаблон(ТекстПисьма, НомерОснования, ДатаОснования, РеквизитыОснования.ТипПисьма,
		РеквизитыОснования.Тема) + Символы.ПС + Символы.ПС + РеквизитыОснования.Текст;
	Для Счетчик = 1 По СтрЧислоСтрок(ТекстПисьма) Цикл
		ТекСтрока = СтрПолучитьСтроку(ТекстПисьма, Счетчик);
		Объект.Текст = Объект.Текст + Символы.ПС + "> " + ТекСтрока;
	КонецЦикла;	
		           
	Объект.ИсходящийНомер = 0;
	Объект.Направление = Перечисления.НаправленияЭДО.Исходящий;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНовоеПисьмо() 
	
	РеквизитыНовогоПисьма = Параметры.РеквизитыНовогоПисьма; 
	
	Объект.Организация = РеквизитыНовогоПисьма.Организация;
	Объект.Банк = РеквизитыНовогоПисьма.Банк;    
	Объект.ИсходящийНомер = 0;
	Объект.Направление = Перечисления.НаправленияЭДО.Исходящий;
	
КонецПроцедуры 

&НаСервере
Процедура СкопироватьПисьмо()
	
	Объект.Идентификатор = Новый УникальныйИдентификатор();
	Объект.ИсходящийНомер = 0;
	Объект.Прочитано = Ложь;
	Объект.ВходящийНомер = "";
	Объект.Направление = Перечисления.НаправленияЭДО.Исходящий;
	Объект.ВходящаяДата = Неопределено;
	Объект.ИдентификаторПереписки = Неопределено;
	Объект.ИдентификаторИсходногоПисьма = Неопределено;
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Параметры.ЗначениеКопирования, МассивФайлов);
	Для каждого ЭлементКоллекции Из МассивФайлов Цикл
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементКоллекции, "ПометкаУдаления") Тогда
			Продолжить;
		КонецЕсли;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ЭлементКоллекции, УникальныйИдентификатор);
		НовСтрока = ПрисоединенныеФайлыТаблица.Добавить();
		НовСтрока.Наименование = ОбменСБанкамиСлужебныйКлиентСервер.ПредставлениеПрисоединенногоФайла(
			ДанныеФайла.Наименование, ДанныеФайла.Расширение); 			
		РазмерФайла = ОбменСБанкамиСлужебныйКлиентСервер.ПеревестиРазмерПрисоединенногоФайлаИзБайт_В_КБ(ДанныеФайла.Размер); 
		НовСтрока.Размер = РазмерФайла;     	
		ТекстСообщения = НСтр("ru = '%1 КБ'");
		НовСтрока.РазмерПредставление = СтрШаблон(ТекстСообщения,РазмерФайла);  	
		НовСтрока.Хранение = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;  
		НовСтрока.КартинкаЧислом = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОбъектПоОснованию()	 
	
	РеквизитыОбъекта = ОбменСБанкамиСлужебныйВызовСервера.РеквизитыОснованияПисьма(Параметры.Основание);

	Объект.Основание = Параметры.Основание;
	Объект.СчетОрганизации = РеквизитыОбъекта.Счет;
	Объект.Организация = РеквизитыОбъекта.Организация;
	Объект.Банк = РеквизитыОбъекта.Банк; 

КонецПроцедуры

#КонецОбласти  


