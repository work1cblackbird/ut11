
#Область ОбработчикиСобытийФормы  

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды   
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаОсновныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ИзменитьВидимостьДоступностьЭлементов();
	ЗагрузитьНастройкиЧтенияПисем();
	
	ЗаполнитьПрисоединенныеФайлы(Объект.ПометкаУдаления); 
	Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка = Объект.ПометкаУдаления; 
	
	СписокВыбораБанков = Элементы.Банк.СписокВыбора;
	СписокВыбораБанков.Добавить(Объект.Банк);
	ОбменСБанкамиСлужебный.ЗаполнитьПредставленияСпискаБанков(СписокВыбораБанков);
	
КонецПроцедуры   

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды  
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект); 
	//Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	
	ОбработатьПризнакПрочитано(); 
	
КонецПроцедуры 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрисоединенныеФайлы

&НаКлиенте
Процедура ПрисоединенныеФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьПрисоединенныйФайл(); 
	
КонецПроцедуры   

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ИсторияПереписки(Команда)	
	
	ИсторияПерепискиОткрытьФорму();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдалениеФайлы(Команда)
		
	ПоказыватьУдаленные = Не Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка;
	Элементы.ПрисоединенныеФайлыКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка = ПоказыватьУдаленные; 

	ЗаполнитьПрисоединенныеФайлы(ПоказыватьУдаленные);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыНаДиск(Команда) 
	
	Если ПрисоединенныеФайлыТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	СохраняемыеФайлы = ПолучитьСохраняемыеФайлы();
	Если СохраняемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);                                
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, СохраняемыеФайлы, ПараметрыСохраненияФайлов);    
	
КонецПроцедуры    

&НаКлиенте
Процедура СохранитьФайл(Команда) 
	
	СохранитьПрисоединенныйФайл(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)  
	
	ОткрытьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда) 
	
	ОткрытьКарточкуПрисоединенногоФайла(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)   	
	
	Если Параметры.Ключ.Пустая() Тогда
		Возврат;
	КонецЕсли; 	
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОбработатьПометкуУдаления", ЭтотОбъект, Параметры);  
	Если Объект.ПометкаУдаления Тогда  
		ТекстВопроса = НСтр("ru = 'Восстановить письмо?'");  
	Иначе
		ТекстВопроса = НСтр("ru = 'Удалить письмо?'");
	КонецЕсли;
	ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура Переслать(Команда) 
	
	ОбменСБанкамиСлужебныйКлиент.ОткрытьФормуПересылкиЭлектронногоПисьма(Объект.Ссылка);   
	
КонецПроцедуры  

&НаКлиенте
Процедура СохранитьИнформациюДляТехническойПоддержки(Команда)   
	
	ОписаниеФайла = ОбменСБанкамиСлужебныйВызовСервера.ПолучитьФайлДляТехническойПоддержки(Объект.Ссылка);
	Если ОписаниеФайла = Неопределено Тогда  
		Текст = НСтр("ru = 'Не найдено сообщение обмена'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;        
	НачатьПолучениеФайлаССервера(ОписаниеФайла.АдресФайла, ОписаниеФайла.ИмяФайла);	   
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитаноНепрочитанно(Команда)
	
	ИзменитьПризнакПрочитаноСервер();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПоказатьПодписи(Команда)
	
	ПараметрыФормы = Новый Структура("Объект", Объект.Ссылка);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.Подписи", ПараметрыФормы, , , , , ,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда)
	
	ПараметрыФормы = Новый Структура("ЗначениеЗаполнения", Объект.Ссылка);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.ПисьмоВБанк", ПараметрыФормы);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) 

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект); 
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() 

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);     
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаКлиенте
Процедура ПослеСохраненияФайла(ПолученныеФайлы, ПустойПараметр) Экспорт
	Если Не ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ПолученныеФайлы[0].ПолноеИмя;
	Если ПустаяСтрока(ПолноеИмя) Тогда
		Обработчик = Неопределено;
	Иначе
		Обработчик = Новый ОписаниеОповещения("ОткрытьПроводник", ФайловаяСистемаКлиент, ПолноеИмя);
	КонецЕсли;
	
	Количество = ПолученныеФайлы.Количество();
	Если Количество > 1 Тогда
		Заголовок = Неопределено;
		Текст = СтрШаблон(НСтр("ru = 'Файлы (%1) сохранены'"), Количество);
	Иначе
		Заголовок = НСтр("ru = 'Файл сохранен'");
		Текст = ПолученныеФайлы[0].Имя;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(Заголовок, Обработчик, Текст, БиблиотекаКартинок.Успешно32);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОбработатьПометкуУдаления(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;   
	
	УстановитьПометкуУдаления();
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоОбработкиДокументов()
	
	Возврат ОбменСБанкамиСлужебный.ЕстьПравоОбработкиДокументов();	

КонецФункции

&НаКлиенте
Процедура ИсторияПерепискиОткрытьФорму()
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Банк", Объект.Банк);
	ПараметрыОткрытия.Вставить("ИдентификаторПереписки", Объект.ИдентификаторПереписки);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.Переписка",
		ПараметрыОткрытия, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры   
	
&НаКлиенте
Процедура ОбработатьПризнакПрочитано()

	ПисьмоПрочитано = Объект.Прочитано;
	Если ПисьмоПрочитано Тогда
		Возврат;
	КонецЕсли;  
	
	Если Не ЕстьПравоОбработкиДокументов() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПрочитаноНепрочитанно.Доступность = Ложь;
	Элементы.ПрочитаноНепрочитанно_ВсеДействия.Доступность = Ложь; 
	Элементы.ПрочитаноНепрочитанно.Пометка = Не ПисьмоПрочитано;	 
	Элементы.ПрочитаноНепрочитанно_ВсеДействия.Пометка = Не ПисьмоПрочитано; 
	
	Если РучноеПрочтение Тогда  
		Элементы.ПрочитаноНепрочитанно.Доступность = Истина;
		Элементы.ПрочитаноНепрочитанно_ВсеДействия.Доступность = Истина;
	ИначеЕсли Не ПисьмоПрочитано И ЗадержкаЧтения Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьПризнакПрочитано",3,Истина);   
	ИначеЕсли Не ПисьмоПрочитано Тогда 
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьПризнакПрочитано",0.2,Истина); 
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрисоединенныеФайлы(ЗаполнятьУдаленные = Ложь) 
	
	ПрисоединенныеФайлыТаблица.Очистить();
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Объект.Ссылка, МассивФайлов);
	
	ДанныеФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивФайлов, 
		"Ссылка, Наименование, Расширение, Размер, ПометкаУдаления");
	
	Для каждого ЭлементКоллекции Из ДанныеФайлов Цикл   
		ДанныеФайла = ЭлементКоллекции.Значение;
		Если ДанныеФайла.ПометкаУдаления И Не ЗаполнятьУдаленные Тогда
			Продолжить;
		КонецЕсли;        	
		
		НовСтрока = ПрисоединенныеФайлыТаблица.Добавить();
		НовСтрока.Ссылка = ДанныеФайла.Ссылка;
		НовСтрока.Наименование = ОбменСБанкамиСлужебныйКлиентСервер.ПредставлениеПрисоединенногоФайла(
			ДанныеФайла.Наименование, ДанныеФайла.Расширение);  		
		РазмерФайла = ОбменСБанкамиСлужебныйКлиентСервер.ПеревестиРазмерПрисоединенногоФайлаИзБайт_В_КБ(ДанныеФайла.Размер); 
		ТекстСообщения = НСтр("ru = '%1 КБ'");
		НовСтрока.РазмерПредставление = СтрШаблон(ТекстСообщения,РазмерФайла);  	
		НовСтрока.КартинкаЧислом = ДанныеФайла.ПометкаУдаления; 
	КонецЦикла;      
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиЧтенияПисем()   
	
	НастройкиЧтения = ОбменСБанкамиСлужебный.НастройкиЧтенияФормыСписка();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект,НастройкиЧтения);
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьКарточкуПрисоединенногоФайла()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда		   
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ФайлСсылка); 
	КонецЕсли;  
	
КонецПроцедуры          

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлСсылка, УникальныйИдентификатор);	
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьПрисоединенныйФайл()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлы.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда		   
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлСсылка, УникальныйИдентификатор); 
		ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);  
		
		ФайловаяСистемаКлиент.СохранитьФайл(
			ОписаниеОповещения,
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
			СтрШаблон("%1.%2",ДанныеФайла.Наименование,ДанныеФайла.Расширение),      
			ПараметрыСохраненияФайлов);
	КонецЕсли; 

КонецПроцедуры

&НаСервере
Функция ПолучитьСохраняемыеФайлы() 
	
	СохраняемыеФайлы = Новый Массив;
	Для каждого ЭлементКоллекции Из ПрисоединенныеФайлыТаблица Цикл
		ПрисоединенныйФайл = ЭлементКоллекции.Ссылка;   
		Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		СохраняемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат СохраняемыеФайлы;
	
КонецФункции

&НаСервере
Процедура ИзменитьВидимостьДоступностьЭлементов()   
	
	ОписаниеНастройки = ОбменСБанкамиСлужебный.НастройкаОбменаСОтправкойПисем(Объект.Организация, Объект.Банк);
	Элементы.ДляВалютногоКонтроля.Видимость = ПрограммаБанка = Перечисления.ПрограммыБанка.СбербанкОнлайн;
	Элементы.ПоказатьПодписи.Видимость =  ОписаниеНастройки.ИспользоватьЭП;
	Элементы.ПоказатьПодписи_ВсеДействия.Видимость =  ОписаниеНастройки.ИспользоватьЭП;
	
	ВидимостьПереслать = ОбменСБанкамиСлужебный.ФункциональностьЭлектроннойПочтыДоступна();  
	Элементы.Переслать.Видимость = ВидимостьПереслать;  
	Элементы.Переслать_ВсеДействия.Видимость = ВидимостьПереслать;  
	
	ЕстьПравоОбработкиДокументов = ОбменСБанкамиСлужебный.ЕстьПравоОбработкиДокументов();
	Элементы.Ответить.Доступность = ЕстьПравоОбработкиДокументов;
	Элементы.ПрочитаноНепрочитанно_ВсеДействия.Доступность = ЕстьПравоОбработкиДокументов;
	Элементы.ПрочитаноНепрочитанно.Видимость = ЕстьПравоОбработкиДокументов;

	Элементы.ТипПисьма.Видимость = ЗначениеЗаполнено(Объект.ТипПисьма); 
	Элементы.Основание.Видимость = ЗначениеЗаполнено(Объект.Основание);
	
	КартинкаСтатуса = ОбменСБанкамиСлужебный.ПолучитьСтатусЧисломДляКартинки(Объект.Статус); 
	Элементы.КартинкаСтатуса.Видимость = КартинкаСтатуса>0;  
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьПометкуУдаления()  
	
	ЗаблокироватьДанныеДляРедактирования(Объект.Ссылка,,УникальныйИдентификатор);    
	
	ПисьмоОбъект = РеквизитФормыВЗначение("Объект");
	ПисьмоОбъект.ПометкаУдаления = Не Объект.ПометкаУдаления; 
	ПисьмоОбъект.Записать();     
	ЗначениеВРеквизитФормы(ПисьмоОбъект, "Объект");
	
	РазблокироватьДанныеДляРедактирования(Объект.Ссылка,УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПризнакПрочитано()   	
	
	ИзменитьПризнакПрочитаноСервер();
	
КонецПроцедуры 

&НаСервере
Процедура ИзменитьПризнакПрочитаноСервер() 
	
	ПисьмоПрочитано = Не Объект.Прочитано;   
	Объект.Прочитано = ПисьмоПрочитано; 
	Записать();
	
	Элементы.ПрочитаноНепрочитанно.Доступность = Истина;
	Элементы.ПрочитаноНепрочитанно_ВсеДействия.Доступность = Истина;
	Элементы.ПрочитаноНепрочитанно.Пометка = Не ПисьмоПрочитано;	 
	Элементы.ПрочитаноНепрочитанно_ВсеДействия.Пометка = Не ПисьмоПрочитано; 
	
КонецПроцедуры

#КонецОбласти   
