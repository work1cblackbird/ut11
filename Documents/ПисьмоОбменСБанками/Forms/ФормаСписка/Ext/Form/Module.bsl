
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)   
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды   
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаОсновныеКоманды;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьУсловноеОформление();
	
	ИнициализироватьДерево();
	СформироватьДеревоПисем();
	
	ЗагрузитьСохраняемыеНастройкиПросмотра();
	УстановитьВидимостьЭлементов();    
	
	СоздатьОтборПоРазделамВСпискахРазделов();   
	
	Если ЗначениеЗаполнено(Параметры.Раздел) Тогда  	
		СоответствияРазделов = Новый Соответствие; 
		СоответствияРазделов.Вставить("Входящие",0); 
		СоответствияРазделов.Вставить("Исходящие",1);
			
		НужныйРаздел = СоответствияРазделов.Получить(Параметры.Раздел);   
		Если НужныйРаздел = Неопределено Тогда
			НужныйРаздел = 0;
		КонецЕсли;
				
		ЭлементыДерева = ДеревоДействий.ПолучитьЭлементы();
		НужнаяСтрока = ЭлементыДерева.Получить(НужныйРаздел);
		Элементы.ДеревоДействий.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор(); 
		УстановитьОтборПоРазделуПисем(НужнаяСтрока.Значение);
   	Иначе 
		УстановитьОтборПоРазделуПисем("Входящие");
	КонецЕсли;       
	
	СформироватьТаблицуБыстрогоОтбора();  
	ЗаполнитьСпискиБанковОрганизаций();  
	
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();    
	Если Элементы.Организация.СписокВыбора.НайтиПоЗначению(Организация) <> Неопределено Тогда
		УстановитьОтборСпискаПисемПоОрганизации(); 	     
	КонецЕсли;  
	
КонецПроцедуры  

&НаКлиенте
Процедура ПриОткрытии(Отказ)    
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды  
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект); 
	//Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьСостояниеОбменСБанками" Тогда
		РассчитатьКоличествоПисемДереваКлиент();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент) 
	
	ОрганизацияПриИзмененииНаСервере();   
	
КонецПроцедуры 

&НаКлиенте
Процедура БанкПриИзменении(Элемент)
	
    БанкПриИзмененииНаСервере();
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрисоединенныеФайлыТаблица

&НаКлиенте
Процедура ПрисоединенныеФайлыТаблицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьПрисоединенныйФайл(); 	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПисьма 

&НаКлиенте
Процедура ПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;     
		
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация",Организация); 
	ПараметрыЗаполнения.Вставить("Банк",Банк);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеОЗакрытииПисьма",ЭтотОбъект);	
	ПараметрыОткрытияФормы = Новый Структура("РеквизитыНовогоПисьма", ПараметрыЗаполнения);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.ПисьмоВБанк", ПараметрыОткрытияФормы,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ПисьмаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)   
	
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ОповещениеОЗакрытииПисьма",ЭтотОбъект,ВыбраннаяСтрока);	
	ПараметрыЗаполнения = Новый Структура("Ключ", ВыбраннаяСтрока);
	
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.ФормаОбъекта",
		ПараметрыЗаполнения,,,,,Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтроки",0.2, Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПисьмаПриИзменении(Элемент)
	
	РассчитатьКоличествоПисемДереваКлиент();
	
КонецПроцедуры
 
 #КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыеОтборы

&НаКлиенте
Процедура БыстрыеОтборыЗначениеПриИзменении(Элемент)
	
	ПриИзмененииОтбораНаСервере();
	
КонецПроцедуры  

 #КонецОбласти
 
#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДействий

&НаКлиенте
Процедура ДеревоДействийПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_ДеревоДействийПриАктивизацииСтроки",0.1,Истина);

КонецПроцедуры  

&НаКлиенте
Процедура Подключаемый_ДеревоДействийПриАктивизацииСтроки()

	ТекущиеДанные = Элементы.ДеревоДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НовыйРаздел = ТекущиеДанные.Значение;
	Если НовыйРаздел <> ТекущийРаздел Тогда
		УстановитьОтборПоРазделуПисем(НовыйРаздел); 
	КонецЕсли;	 
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы 

&НаКлиенте
Процедура ПоказатьПомеченныеНаУдалениеФайлы(Команда)
	
	ПоказыватьУдаленные = Не Элементы.ПрисоединенныеФайлыТаблицаКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка;
	Элементы.ПрисоединенныеФайлыТаблицаКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка = ПоказыватьУдаленные; 
	
	ОписаниеПисьма = ПолучитьОписаниеПисьма();
	Если ОписаниеПисьма <> Неопределено Тогда   
		ВывестиПрисоединенныеФайлы(ОписаниеПисьма.Ссылка, ПоказыватьУдаленные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлыНаДиск(Команда)     
	
	Если ПрисоединенныеФайлыТаблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	СохраняемыеФайлы = ПолучитьСохраняемыеФайлы();
	Если СохраняемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);                                
	ФайловаяСистемаКлиент.СохранитьФайлы(ОписаниеОповещения, СохраняемыеФайлы, ПараметрыСохраненияФайлов); 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)  
	
	ОткрытьПрисоединенныйФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)      
	
	СохранитьПрисоединенныйФайл();  
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайла(Команда)
	
	ОткрытьКарточкуПрисоединенногоФайла();
	
КонецПроцедуры 

&НаКлиенте
Процедура ИсторияПереписки(Команда)
	
	ОписаниеПисьма = ПолучитьОписаниеПисьма();
	Если ОписаниеПисьма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", ОписаниеПисьма.Организация);
	ПараметрыОткрытия.Вставить("Банк", ОписаниеПисьма.Банк);
	ПараметрыОткрытия.Вставить("ИдентификаторПереписки", ОписаниеПисьма.ИдентификаторПереписки);
	
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.Переписка",
		ПараметрыОткрытия, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
 
&НаКлиенте
Процедура Прочитано(Команда)  
	
	ПризнакПрочитаноНаСервере();
	РассчитатьКоличествоПисемДереваКлиент(); 
	
КонецПроцедуры  

&НаКлиенте
Процедура Переслать(Команда) 	

	Если ЗначениеЗаполнено(Элементы.Письма.ТекущаяСтрока) Тогда
		ОписаниеПисьма = ПолучитьОписаниеПисьма();
		ОбменСБанкамиСлужебныйКлиент.ОткрытьФормуПересылкиЭлектронногоПисьма(ОписаниеПисьма.Ссылка);     
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура НастройкиЧтения(Команда)  	
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастройкиЧтения",ЭтотОбъект);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.НастройкиЧтения",,,,,,
		ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответить(Команда) 
	
	ТекущиеДанные = Элементы.Письма.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОповещениеОЗакрытииПисьма",ЭтотОбъект);	
	ПараметрыОткрытияФормы = Новый Структура("ЗначениеЗаполнения", Элементы.Письма.ТекущаяСтрока);
	ОткрытьФорму("Документ.ПисьмоОбменСБанками.Форма.ПисьмоВБанк", ПараметрыОткрытияФормы,,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПолучить(Команда)
		
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Банк) Тогда
		ОбменСБанкамиКлиент.СинхронизироватьСБанком(Организация, Банк);
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Параметр", "Банк");
	МассивСтрокКоллекции = БыстрыеОтборы.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрокКоллекции.Количество() Тогда
		НайденнаяСтрока = МассивСтрокКоллекции.Получить(0);
		БанкОтбор = НайденнаяСтрока.Значение;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Параметр", "Организация");
	МассивСтрокКоллекции = БыстрыеОтборы.НайтиСтроки(ПараметрыОтбора);
	Если МассивСтрокКоллекции.Количество() Тогда
		НайденнаяСтрока = МассивСтрокКоллекции.Получить(0);
		ОрганизацияОтбор = НайденнаяСтрока.Значение;
	КонецЕсли;
	
	БанкСинхронизация = ?(ЗначениеЗаполнено(Банк), Банк, БанкОтбор);
	ОрганизацияСинхронизация = ?(ЗначениеЗаполнено(Организация), Организация, ОрганизацияОтбор);
	ОбменСБанкамиКлиент.СинхронизироватьСБанком(ОрганизацияСинхронизация, БанкСинхронизация);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) 

	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Письма); 
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт

	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Письма, Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() 

	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Письма);     
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции 

&НаСервере
Процедура ПризнакПрочитаноНаСервере()  
	
	ВыделенныеСтроки = Элементы.Письма.ВыделенныеСтроки;       
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;    
	
	ОписаниеПисем = СформироватьОписаниеПисем(ВыделенныеСтроки); 	
	Для Каждого ОписаниеПисьма Из ОписаниеПисем Цикл		
		УстановитьПризнакПрочитано(ОписаниеПисьма);  
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьСпискиБанковОрганизаций(Истина,Ложь);
	УстановитьОтборСпискаПисемПоОрганизации(); 	
	
КонецПроцедуры

&НаСервере
Процедура БанкПриИзмененииНаСервере()
	
	ЗаполнитьСпискиБанковОрганизаций(Ложь,Истина);
	УстановитьОтборСпискаПисемПоБанку();    
	
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьКарточкуПрисоединенногоФайла()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлыТаблица.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда		   
		РаботаСФайламиКлиент.ОткрытьФормуФайла(ФайлСсылка); 
	КонецЕсли;  
	
КонецПроцедуры          

&НаКлиенте
Процедура ОткрытьПрисоединенныйФайл()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлыТаблица.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;   
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлСсылка, УникальныйИдентификатор);			
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли;  
	
КонецПроцедуры 

&НаКлиенте
Процедура СохранитьПрисоединенныйФайл()
	
	ТекущиеДанные = Элементы.ПрисоединенныеФайлыТаблица.ТекущиеДанные;	 
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	ФайлСсылка = ТекущиеДанные.Ссылка;
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда	
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ФайлСсылка, УникальныйИдентификатор);
		
		ПараметрыСохраненияФайлов = ФайловаяСистемаКлиент.ПараметрыСохраненияФайлов();
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияФайла", ЭтотОбъект);  
		
		ФайловаяСистемаКлиент.СохранитьФайл(
			ОписаниеОповещения,
			ДанныеФайла.СсылкаНаДвоичныеДанныеФайла,
			СтрШаблон("%1.%2",ДанныеФайла.Наименование,ДанныеФайла.Расширение),      
			ПараметрыСохраненияФайлов); 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайла(ПолученныеФайлы, ПустойПараметр) Экспорт
	Если Не ЗначениеЗаполнено(ПолученныеФайлы) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = ПолученныеФайлы[0].ПолноеИмя;
	Если ПустаяСтрока(ПолноеИмя) Тогда
		Обработчик = Неопределено;
	Иначе
		Обработчик = Новый ОписаниеОповещения("ОткрытьПроводник", ФайловаяСистемаКлиент, ПолноеИмя);
	КонецЕсли;
	
	Количество = ПолученныеФайлы.Количество();
	Если Количество > 1 Тогда
		Заголовок = Неопределено;
		Текст = СтрШаблон(НСтр("ru = 'Файлы (%1) сохранены'"), Количество);
	Иначе
		Заголовок = НСтр("ru = 'Файл сохранен'");
		Текст = ПолученныеФайлы[0].Имя;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(Заголовок, Обработчик, Текст, БиблиотекаКартинок.Успешно32);
КонецПроцедуры

&НаСервере
Функция ПолучитьСохраняемыеФайлы() 
	
	СохраняемыеФайлы = Новый Массив;
	Для каждого ЭлементКоллекции Из ПрисоединенныеФайлыТаблица Цикл
		ПрисоединенныйФайл = ЭлементКоллекции.Ссылка;   
		Если Не ЗначениеЗаполнено(ПрисоединенныйФайл) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ДанныеФайла.ИмяФайла, ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
		СохраняемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Возврат СохраняемыеФайлы;
	
КонецФункции

&НаСервере
Процедура СформироватьДеревоПисем()
	
	ДеревоНавигации = РеквизитФормыВЗначение("ДеревоДействий");
	
	КоличествоПоРазделам = ОбменСБанкамиСлужебный.РассчитатьКоличествоПисемПоРазделам();
	Для каждого ЭлементКоллекции Из КоличествоПоРазделам Цикл
		СтрокаНавигации = ДеревоНавигации.Строки.Найти(ЭлементКоллекции.Ключ, "Значение", Истина);
		СтрокаНавигации.Представление = СтрокаНавигации.ШаблонПредставления;
		СтрокаНавигации.Количество = ЭлементКоллекции.Значение;
		Если ЭлементКоллекции.Значение > 0 Тогда
			СтрокаНавигации.Представление = СтрокаНавигации.ШаблонПредставления + " (" + СтрокаНавигации.Количество
			+ ")";
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНавигации, "ДеревоДействий"); 
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	ЕстьПравоОбработкиДокументов = ОбменСБанкамиСлужебный.ЕстьПравоОбработкиДокументов();
	Элементы.ПрочитаноНепрочитанно.Видимость = ЕстьПравоОбработкиДокументов;	
	Элементы.ПисьмаПереслать.Видимость = ОбменСБанкамиСлужебный.ФункциональностьЭлектроннойПочтыДоступна();
	
КонецПроцедуры  

&НаСервере
Процедура ЗаполнитьСпискиБанковОрганизаций(ЗаполнитьБанк = Истина, ЗаполнитьОрганизацию = Истина) 
	
	ПустаяСсылкаНаБанк = ОбменСБанкамиСлужебный.ПустаяСсылкаНаСправочникБанки();  	
	Если ПустаяСсылкаНаБанк = Неопределено Тогда	
		Элементы.Банк.СписокВыбора.Очистить();   
		Элементы.Организация.СписокВыбора.Очистить();    
		Возврат;                                         
	КонецЕсли;
	
	Запрос = Новый Запрос;  
	Запрос.УстановитьПараметр("БанкПустаяСсылка", ПустаяСсылкаНаБанк);   
	ТекстЗапроса =  
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиОбмена.Ссылка.Организация КАК Организация,
	|	НастройкиОбмена.Ссылка.Банк КАК Банк
	|ИЗ
	|	Справочник.НастройкиОбменСБанками.ИсходящиеДокументы КАК НастройкиОбмена
	|ГДЕ
	|	НастройкиОбмена.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭДОбменСБанками.Письмо)
	|	И НЕ НастройкиОбмена.Ссылка.ПометкаУдаления
	|	И НЕ НастройкиОбмена.Ссылка.Недействительна
	|	И НастройкиОбмена.Ссылка.Банк <> &БанкПустаяСсылка
	|	И НастройкиОбмена.Ссылка.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПисьмоОбменСБанками.Организация,
	|	ПисьмоОбменСБанками.Банк
	|ИЗ
	|	Документ.ПисьмоОбменСБанками КАК ПисьмоОбменСБанками
	|ГДЕ
	|	ПисьмоОбменСБанками.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбменСБанками.Получен)
	|	И ПисьмоОбменСБанками.Банк <> &БанкПустаяСсылка
	|	И ПисьмоОбменСБанками.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)"; 
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();  
	
	Если ЗаполнитьБанк Тогда  
		ТаблицаБанки = ТаблицаРезультата.Скопировать(); 
		ТаблицаБанки.Свернуть("Банк"); 
		СписокБанков = ТаблицаБанки.ВыгрузитьКолонку("Банк");  		
		СписокВыбораБанков = Элементы.Банк.СписокВыбора;  
		СписокВыбораБанков.ЗагрузитьЗначения(СписокБанков);
		ОбменСБанкамиСлужебный.ЗаполнитьПредставленияСпискаБанков(СписокВыбораБанков);  
		Элементы.Банк.Видимость = СписокВыбораБанков.Количество() > 1;
	КонецЕсли;  
	
	Если ЗаполнитьОрганизацию Тогда
		ТаблицаОрганизация = ТаблицаРезультата.Скопировать(); 
		ТаблицаОрганизация.Свернуть("Организация");
		МассивОрганизаций = ТаблицаОрганизация.ВыгрузитьКолонку("Организация");   
		СписокВыбораОрганизаций = Элементы.Организация.СписокВыбора;
		СписокВыбораОрганизаций.ЗагрузитьЗначения(МассивОрганизаций);   
		Элементы.Организация.Видимость = СписокВыбораОрганизаций.Количество() > 1;
	КонецЕсли;  
	
КонецПроцедуры   

&НаКлиенте
Процедура ПослеПолученияКоличестваПоРазделам(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаданиеВыполняется = Ложь;
	
	Если Результат = Неопределено ИЛИ Результат.Статус = "Ошибка" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	УдалитьИзВременногоХранилища(Результат.АдресРезультата);
	
	ЭлементыПервогоУровня = ДеревоДействий.ПолучитьЭлементы();
	Для каждого ПервыйУровень Из ЭлементыПервогоУровня Цикл
		ЭлементыВторогоУровня = ПервыйУровень.ПолучитьЭлементы();
		Для каждого ВторойУровень Из ЭлементыВторогоУровня Цикл
			Если СтруктураВозврата.Свойство(ВторойУровень.Значение, ВторойУровень.Количество) Тогда
				Если ВторойУровень.Количество Тогда
					ПредставлениеКоличества = ?(ВторойУровень.Количество = 1000, "999+", ВторойУровень.Количество);
					ВторойУровень.Представление = ВторойУровень.ШаблонПредставления + " (" + ПредставлениеКоличества + ")";
				Иначе
					ВторойУровень.Представление = ВторойУровень.ШаблонПредставления;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбораНаСервере()
	
	Отбор = Письма.Отбор;
	
	ГруппаБыстрыйОтбор = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Отбор.Элементы, "БыстрыйОтбор", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаБыстрыйОтбор.РежимОтображения = Режим;
	
	Для каждого СтрокаОтбора Из БыстрыеОтборы Цикл    	
		Поле = СтрокаОтбора.Параметр;
		Значение = СтрокаОтбора.Значение;  	
		Если Не ПолеДоступноДляОтбора(Отбор, Поле) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Поле = "Тема" ИЛИ Поле = "Текст" Тогда 		
			Использование = ЗначениеЗаполнено(Значение); 		
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаБыстрыйОтбор, Поле, ВидСравненияКомпоновкиДанных.Подобно,
				"%" + Значение + "%", , Использование, Режим); 		
		КонецЕсли;      		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолеДоступноДляОтбора(Знач Отбор, Знач Поле) 
	
	Если Поле = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ДоступноеПоле = Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле);
	
	Возврат (ДоступноеПоле <> Неопределено);
	
КонецФункции

&НаКлиенте
Процедура ПослеВыбораТипаОснования(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НазваниеДокументаВМетаданных = ОбменСБанкамиСлужебныйВызовСервера.НазваниеОбъектаВМетаданных(
	ВыбранныйЭлемент.Значение);
	ПараметрыФормы = Новый Структура;
	Отбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	Иначе
		ПараметрыОтбора = Новый Структура("Параметр", "Организация");
		МассивСтрокКоллекции = БыстрыеОтборы.НайтиСтроки(ПараметрыОтбора);
		НайденнаяСтрока = МассивСтрокКоллекции.Получить(0);
		Отбор.Вставить("СписокОрганизаций", НайденнаяСтрока.СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Отбор.Вставить("Банк", Банк);
	Иначе
		ПараметрыОтбора = Новый Структура("Параметр", "Банк");
		МассивСтрокКоллекции = БыстрыеОтборы.НайтиСтроки(ПараметрыОтбора);
		НайденнаяСтрока = МассивСтрокКоллекции.Получить(0);
		Отбор.Вставить("СписокБанков", НайденнаяСтрока.СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", Отбор);
	
	ОткрытьФорму(
	"Документ." + НазваниеДокументаВМетаданных + ".ФормаВыбора", ПараметрыФормы, Элементы.БыстрыеОтборыЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДерево()
	
	Дерево = РеквизитФормыВЗначение("ДеревоДействий");
	
	СтрокаВходящие = Дерево.Строки.Добавить();
	СтрокаВходящие.Значение = "Входящие";  
	СтрокаВходящие.НомерКартинки = 0;
	СтрокаВходящие.Представление = НСтр("ru = 'Входящие'");
	СтрокаВходящие.ШаблонПредставления = НСтр("ru = 'Входящие'");
	
	СтрокаИсходящие = Дерево.Строки.Добавить();
	СтрокаИсходящие.Значение = "Исходящие";   
	СтрокаИсходящие.НомерКартинки = 0;
	СтрокаИсходящие.Представление = НСтр("ru = 'Исходящие'");
	СтрокаИсходящие.ШаблонПредставления = НСтр("ru = 'Исходящие'");
	
	СтрокаОтправленные = Дерево.Строки.Добавить();
	СтрокаОтправленные.Значение = "Отправленные";
	СтрокаОтправленные.НомерКартинки = 0;
	СтрокаОтправленные.Представление = НСтр("ru = 'Отправленные'");
	СтрокаОтправленные.ШаблонПредставления = НСтр("ru = 'Отправленные'");  
	
	СтрокаЧерновики = Дерево.Строки.Добавить();
	СтрокаЧерновики.Значение = "Черновики";   
	СтрокаЧерновики.НомерКартинки = 2;
	СтрокаЧерновики.Представление = НСтр("ru = 'Черновики'");
	СтрокаЧерновики.ШаблонПредставления = НСтр("ru = 'Черновики'");
	
	СтрокаКорзина = Дерево.Строки.Добавить();
	СтрокаКорзина.Значение = "Корзина";
	СтрокаКорзина.НомерКартинки = 4;
	СтрокаКорзина.Представление = НСтр("ru = 'Корзина'");
	СтрокаКорзина.ШаблонПредставления = НСтр("ru = 'Корзина'");
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоДействий");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуБыстрогоОтбора()
	
	БыстрыеОтборы.Очистить();
	
	ДобавитьСтрокуОтбора("Тема", НСтр("ru = 'Тема:'"), "Строка", "");
	ДобавитьСтрокуОтбора("Текст", НСтр("ru = 'Текст:'"), "Строка", "");  
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуОтбора(
	Параметр,
	ПредставлениеПараметра,
	Тип,
	Значение = Неопределено,
	СписокВыбора = Неопределено)
	
	НоваяСтрока = БыстрыеОтборы.Добавить();
	НоваяСтрока.Параметр = Параметр;
	НоваяСтрока.ПредставлениеПараметра = ПредставлениеПараметра;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.Значение = Значение;
	Если СписокВыбора <> Неопределено Тогда
		НоваяСтрока.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Недоступные поля быстрого отбора при выборе определенных значений отбора
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.БыстрыеОтборыЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БыстрыеОтборы.Недоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

	// Выделять разделы с количеством жирным шрифтом	
	СписокОформляемыхПолей = Новый СписокЗначений; 
	СписокОформляемыхПолей.Добавить("Входящие");
	СписокОформляемыхПолей.Добавить("Исходящие"); 
	СписокОформляемыхПолей.Добавить("Черновики");  
	
	Элемент = УсловноеОформление.Элементы.Добавить(); 
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоДействийПредставление.Имя);   
	
	ГруппаОтбораИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;      
		
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокОформляемыхПолей;  
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоДействий.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;  
	
	ЭлементШрифтаОформления = Элемент.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = ШрифтыСтиля.ЖирныйШрифтБЭД;
	ЭлементШрифтаОформления.Использование = Истина;
	
	// Выделять непрочтенные письма жирным шрифтом 
	УсловноеОформлениеКД = Письма.КомпоновщикНастроек.Настройки.УсловноеОформление;
	УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	
	ЭлементУсловногоОформления = УсловноеОформлениеКД.Элементы.Добавить();	
	ЭлементУсловногоОформления.Использование = Истина;       
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Прочитано");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;  
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Направление");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Перечисления.НаправленияЭДО.Входящий;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементШрифтаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементШрифтаОформления.Значение = ШрифтыСтиля.ЖирныйШрифтБЭД;
	ЭлементШрифтаОформления.Использование = Истина;
     	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоРазделуПисем(Знач НовыйРаздел)
	
	ТекущийРаздел = НовыйРаздел;
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
		Письма.Отбор.Элементы, "ОтборПоРазделам");
	
	Если ГруппаОтборПоРазделам = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаОтборПоРазделам.Использование = Истина;
	
	// Включаем использование группы отбора, соответствующей разделу.
	РазделНайден = Ложь;
	Для каждого ГруппаРаздела Из ГруппаОтборПоРазделам.Элементы Цикл
		Если ГруппаРаздела.Представление = НовыйРаздел Тогда
			ГруппаРаздела.Использование = Истина;
			РазделНайден = Истина;
		Иначе
			ГруппаРаздела.Использование = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// Если не удалось найти группу раздела, то включаем все разделы.
	Если Не РазделНайден Тогда
		ГруппаОтборПоРазделам.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборПоРазделамВСпискахРазделов()
	
	Разделы = Новый Массив;   
	Разделы.Добавить("Входящие");
	Разделы.Добавить("Отправленные");
	Разделы.Добавить("Исходящие");
	Разделы.Добавить("Корзина");
	Разделы.Добавить("Черновики");
	
	ГруппаОтборПоРазделам = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Письма.Отбор.Элементы, "ОтборПоРазделам", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	Для каждого Раздел Из Разделы Цикл         	
		ГруппаРаздел = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
			ГруппаОтборПоРазделам, Раздел, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 	
		СоздатьОтборПоРазделу(Раздел, ГруппаРаздел); 	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборПоРазделу(Знач Раздел, ГруппаОтбора)
	
	// Изменения в отборы вносить согласовано с текстами запросов количества элементов в разделе.
	// См. метод ТекстЗапросаКоличестваЭлементовПоРазделуБезОтбора.
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ПометкаУдаления", 
		Ложь, ВидСравненияКомпоновкиДанных.Равно, , Истина);
	
	Если Раздел = "Входящие" Тогда    	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Направление", 
			Перечисления.НаправленияЭДО.Входящий, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли Раздел = "Отправленные" Тогда		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Направление", 
			Перечисления.НаправленияЭДО.Исходящий, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		СтатусыИсходящих = ОбменСБанкамиСлужебный.СтатусыИсходящихПисем();
		СтатусыИсходящих.Добавить(Перечисления.СтатусыОбменСБанками.Черновик); 	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Статус", 
			СтатусыИсходящих, ВидСравненияКомпоновкиДанных.НеВСписке, , Истина);    		
		
	ИначеЕсли Раздел = "Исходящие" Тогда   	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Направление", 
			Перечисления.НаправленияЭДО.Исходящий, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		СтатусыИсходящих = ОбменСБанкамиСлужебный.СтатусыИсходящихПисем();   	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Статус", 
			СтатусыИсходящих, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
		
	ИначеЕсли Раздел = "Черновики" Тогда     	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Направление", 
			Перечисления.НаправленияЭДО.Исходящий, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Статус", 
			Перечисления.СтатусыОбменСБанками.Черновик, ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	ИначеЕсли Раздел = "Корзина" Тогда         	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "ПометкаУдаления", 
			Истина, ВидСравненияКомпоновкиДанных.Равно, , Истина);      
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаПисемПоОрганизации() 
	
	Если ЗначениеЗаполнено(Организация) Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Письма.Отбор,"Организация",Организация,ВидСравненияКомпоновкиДанных.Равно,,Истина); 	
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Письма.Отбор,"Организация",,,,Ложь); 	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСпискаПисемПоБанку() 
	
	Если ЗначениеЗаполнено(Банк) Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Письма.Отбор,"Банк",Банк,ВидСравненияКомпоновкиДанных.Равно,,Истина); 	
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Письма.Отбор,"Банк",,,,Ложь); 	
	КонецЕсли;    
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеОЗакрытииПисьма(Результат, ДополнительныеПараметры) Экспорт 
		
	Если Элементы.ГруппаПредпросмотр.Видимость Тогда  
		ТекущиеДанные = Элементы.Письма.ТекущиеДанные;  
		Если ТекущиеДанные <> Неопределено Тогда
			ВывестиПредпросмотрПисьма(ТекущиеДанные.Ссылка);  
		КонецЕсли;
	КонецЕсли; 
	
	РассчитатьКоличествоПисемДереваКлиент(); 
	
КонецПроцедуры 

&НаКлиенте
Процедура РассчитатьКоличествоПисемДереваКлиент()     
	
	ПодключитьОбработчикОжидания("Подключаемый_РассчитатьКоличествоПисемДереваКлиент",0.1,Истина);     
	
КонецПроцедуры  

&НаКлиенте
Процедура Подключаемый_РассчитатьКоличествоПисемДереваКлиент()
	
	ТекущиеДанные = Элементы.ДеревоДействий.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;    
	
	Раздел = ТекущиеДанные.Значение;
	
	ПроверяемыеРазделы = Новый Массив;
	ПроверяемыеРазделы.Добавить("Входящие");
	ПроверяемыеРазделы.Добавить("Исходящие");
	ПроверяемыеРазделы.Добавить("Черновики");
	
	Если ПроверяемыеРазделы.Найти(Раздел) <> Неопределено Тогда
		КоличествоНепрочитанных = РассчитатьКоличествоПисемДереваСервер(Раздел);  
		ТекущиеДанные.Количество = КоличествоНепрочитанных;      
		Если КоличествоНепрочитанных > 0 Тогда
			ТекущиеДанные.Представление = СтрШаблон("%1 (%2)",ТекущиеДанные.Значение, КоличествоНепрочитанных); 
		Иначе
			ТекущиеДанные.Представление = СтрШаблон("%1",ТекущиеДанные.Значение);
		КонецЕсли; 	
	КонецЕсли;
	
	Элементы.Письма.Обновить();
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция РассчитатьКоличествоПисемДереваСервер(Раздел)    	
	
	КоличествоПоРазделам = ОбменСБанкамиСлужебный.РассчитатьКоличествоПисемПоРазделам();
	ВсегоНепрочитанно = КоличествоПоРазделам[Раздел];
	
	Возврат ВсегоНепрочитанно;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтроки() 
	
	Если Элементы.ГруппаПредпросмотр.Видимость Тогда  
		ТекущиеДанные = Элементы.Письма.ТекущиеДанные;  
		Если ТекущиеДанные <> Неопределено Тогда
			ВывестиПредпросмотрПисьма(ТекущиеДанные.Ссылка);  
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   

&НаСервере
Процедура ВывестиПредпросмотрПисьма(ВходящееПисьмо)   		
	
	ОписаниеПисьма = СформироватьОписаниеПисьма(ВходящееПисьмо);
	
	ЗаголовокПредпросмотр = СтрШаблон("%1, %2", ОписаниеПисьма.Ссылка,ОписаниеПисьма.Тема);   	
	ТекстПредпросмотр = ОписаниеПисьма.Текст;  
	
	ПоказыватьУдаленные = Элементы.ПрисоединенныеФайлыТаблицаКонтекстноеМенюПоказатьПомеченныеНаУдалениеФайлы.Пометка;        
	ВывестиПрисоединенныеФайлы(ОписаниеПисьма.Ссылка, ПоказыватьУдаленные);
	
	УстановитьСтатусКартинкиЧислом(ОписаниеПисьма);
	Элементы.ПредпросмотрИконкиСтатуса.Видимость = ПредпросмотрИконкиСтатуса > 0;
	Элементы.ДекорацияЗначениеСтатуса.Заголовок = ОписаниеПисьма.Статус;   
	
КонецПроцедуры    

&НаСервере
Процедура УстановитьСтатусКартинкиЧислом(ОписаниеПисьма)
	
	ПредпросмотрИконкиСтатуса = ОбменСБанкамиСлужебный.ПолучитьСтатусЧисломДляКартинки(ОписаниеПисьма.Статус);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеПисьма(ВходящееПисьмо = Неопределено)
	
	Если ВходящееПисьмо = Неопределено Тогда
		ТекущиеДанные = Элементы.Письма.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ВходящееПисьмо = ТекущиеДанные.Ссылка;
	КонецЕсли;    
	
	ОписаниеПисьма = СформироватьОписаниеПисьма(ВходящееПисьмо);	
	Возврат ОписаниеПисьма;    	
	
КонецФункции 

// Возвращает значения реквизитов документа Письмо с банком
//
// Параметры:
//  Письмо - ДокументСсылка.ПисьмоОбменСБанками - документ Письмо с банком;
//
// Возвращаемое значение:
//  Структура              - значения реквизитов письма
//               
&НаСервере
Функция СформироватьОписаниеПисьма(Письмо)    
	
	РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Письмо, "Тема, Текст, Статус, Прочитано, ИдентификаторПереписки, Организация, Банк, Ссылка, ПометкаУдаления");
	
	ОписаниеПисьма = Новый Структура; 
	ОписаниеПисьма.Вставить("Тема",РеквизитыПисьма.Тема);
	ОписаниеПисьма.Вставить("Текст",РеквизитыПисьма.Текст);   
	ОписаниеПисьма.Вставить("Статус",РеквизитыПисьма.Статус);
	ОписаниеПисьма.Вставить("Прочитано",РеквизитыПисьма.Прочитано); 
	ОписаниеПисьма.Вставить("ИдентификаторПереписки",РеквизитыПисьма.ИдентификаторПереписки); 
	ОписаниеПисьма.Вставить("Организация",РеквизитыПисьма.Организация);
	ОписаниеПисьма.Вставить("Банк",РеквизитыПисьма.Банк);
	ОписаниеПисьма.Вставить("Ссылка",РеквизитыПисьма.Ссылка);  
	ОписаниеПисьма.Вставить("ПометкаУдаления",РеквизитыПисьма.ПометкаУдаления);
	
	Возврат ОписаниеПисьма;
	
КонецФункции

&НаСервере
Функция СформироватьОписаниеПисем(СписокПисем)  
	
	ВыбранныеРеквизитыПисем = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокПисем, "Прочитано, Ссылка");
	
	ОписанияПисем = Новый Массив; 
	Для Каждого ЗначенияРеквизитовПисьма Из ВыбранныеРеквизитыПисем Цикл		
		РеквизитыПисьма = ЗначенияРеквизитовПисьма.Значение;			
		ОписаниеПисьма = Новый Структура; 
		ОписаниеПисьма.Вставить("Прочитано",РеквизитыПисьма.Прочитано); 
		ОписаниеПисьма.Вставить("Ссылка",РеквизитыПисьма.Ссылка);     		
		ОписанияПисем.Добавить(ОписаниеПисьма);
	КонецЦикла;
	
	Возврат ОписанияПисем;
	
КонецФункции 

&НаСервере
Процедура ВывестиПрисоединенныеФайлы(Письмо, ПоказыватьУдаленные = Ложь)
	
	ПрисоединенныеФайлыТаблица.Очистить();
	
	МассивФайлов = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Письмо, МассивФайлов);
	
	ДанныеФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивФайлов, 
		"Ссылка, Наименование, Расширение, Размер, ПометкаУдаления"); 
	
	Для каждого ЭлементКоллекции Из ДанныеФайлов Цикл 
		ДанныеФайла = ЭлементКоллекции.Значение;
		Если ДанныеФайла.ПометкаУдаления И Не ПоказыватьУдаленные Тогда
			Продолжить;
		КонецЕсли;	
		
		НовСтрока = ПрисоединенныеФайлыТаблица.Добавить();
		НовСтрока.Ссылка = ДанныеФайла.Ссылка;
		НовСтрока.Наименование = ОбменСБанкамиСлужебныйКлиентСервер.ПредставлениеПрисоединенногоФайла(
			ДанныеФайла.Наименование, ДанныеФайла.Расширение);   		
		РазмерФайла = ОбменСБанкамиСлужебныйКлиентСервер.ПеревестиРазмерПрисоединенногоФайлаИзБайт_В_КБ(ДанныеФайла.Размер); 
		ТекстСообщения = НСтр("ru = '%1 КБ'");
		НовСтрока.РазмерПредставление = СтрШаблон(ТекстСообщения,РазмерФайла);  	
		НовСтрока.КартинкаЧислом = ДанныеФайла.ПометкаУдаления;       
	КонецЦикла;  	
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакПрочитано(ОписаниеПисьма) 
	
	ЕстьПравоОбработкиДокументов = ОбменСБанкамиСлужебный.ЕстьПравоОбработкиДокументов();
	Если Не ЕстьПравоОбработкиДокументов Тогда
		Возврат;
	КонецЕсли;
	
	Попытка 
		ДокументОбъект = ОписаниеПисьма.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Заблокировать();
		ДокументОбъект.Прочитано = Не ОписаниеПисьма.Прочитано;  
		ДокументОбъект.Записать();
		ДокументОбъект.Разблокировать(); 
		
		ОписаниеПисьма.Прочитано = ДокументОбъект.Прочитано; 
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Ошибка установки признака прочтения'",
			ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			ОписаниеПисьма.Ссылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры          

&НаКлиенте
Процедура ПослеЗакрытияФормыНастройкиЧтения(Результат, ДополнительныеПараметры) Экспорт
	
	ЗагрузитьСохраняемыеНастройкиПросмотра();   
	
КонецПроцедуры 

&НаСервере
Процедура ЗагрузитьСохраняемыеНастройкиПросмотра() 
	
	НастройкиЧтения = ОбменСБанкамиСлужебный.НастройкиЧтенияФормыСписка();
	Элементы.ГруппаПредпросмотр.Видимость = НастройкиЧтения.ПоказыватьПредпросмотр;	
	
КонецПроцедуры

#КонецОбласти  








