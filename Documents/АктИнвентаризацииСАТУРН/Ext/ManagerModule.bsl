#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//   СтруктураПараметров - Структура - Входящие данные.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбмене

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//   * ДополнительныеПараметры - Неопределено, Структура - 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка
		Или Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН - Новый статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияСАТУРН.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияСАТУРНПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияСАТУРН.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		РегистрыСведений.МестаХраненияПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		РегистрыНакопления.ОстаткиПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСАТУРН

Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииСАТУРН.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.АктИнвентаризацииСАТУРН, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.АктИнвентаризацииСАТУРН);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.АктИнвентаризацииСАТУРН, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.АктИнвентаризацииСАТУРН, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаЗаполнения

Функция ЗаполнитьПартии(Объект, СписокСтрок = Неопределено) Экспорт
	
	Настройки = ИнтеграцияСАТУРНСлужебный.НастройкиЗаполненияПартий("Товары", СписокСтрок);
	РезультатЗаполнения = ИнтеграцияСАТУРНСлужебный.ЗаполнитьПартии(Объект, Настройки);
	ПересчитатьКоличествоОстатков(Объект, РезультатЗаполнения.ИзмененныеСтроки);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

Процедура ПересчитатьКоличествоОстатков(Объект, МассивСтрок) Экспорт
	
	СоответствиеОстатков = Новый Соответствие;
	Если ЗначениеЗаполнено(Объект.ОрганизацияСАТУРН)
		И ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
			Строка = МассивСтрок[Индекс];
			Если ЗначениеЗаполнено(Строка.Партия) Тогда
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Партия", Строка.Партия);
				ДанныеСтроки.Вставить("Остаток", 0);
				СоответствиеОстатков.Вставить(Индекс, ДанныеСтроки);
			КонецЕсли;
		КонецЦикла;
		Если СоответствиеОстатков.Количество() > 0 Тогда
			ПолучитьОстатки(СоответствиеОстатков);
		КонецЕсли;
	КонецЕсли;
	
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		Строка = МассивСтрок[Индекс];
		ДанныеСтроки = СоответствиеОстатков[Индекс];
		Если ДанныеСтроки = Неопределено Тогда
			Остаток = 0;
		Иначе
			Остаток = ДанныеСтроки.Остаток;
		КонецЕсли;
		Строка.КоличествоОстатокСАТУРН = Остаток;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сообщения

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		Идентификатор = ПолученныеДанные.objList._OBJ_ARRAY[0].id;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.АктИнвентаризацииСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект               = ЭлементОчереди.Документ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = Идентификатор;
			
			ДокументОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки = Идентификатор;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = Идентификатор;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
		СообщениеJSON.АргументыОперации.theCard._id = Идентификатор;
		
		СообщениеJSON.ПараметрыЗапроса.Вставить("ДляПолученияИдентификаторовСтрок", Истина);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ДляПолученияИдентификаторовСтрок Тогда
			
			СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
			
			ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
			
			СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента;
			СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
			СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
			СообщениеJSON.ПараметрыЗапроса.Вставить("ДляПолученияИдентификаторовСтрок", Истина);
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
		Иначе
			
			Если РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ТребуетсяЗапросОстатков Тогда
				
				ДобавитьОчередноеСообщениеЗапросаОстатков(РеквизитыИсходящегоСообщения, РеквизитыИсходящегоСообщенияОснования, СообщенияJSON);
				
			Иначе
				
				РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ТребуетсяПринятиеКУчету = Истина;
				
				СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
				
				ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
				
				СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету;
				СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
				СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
				
				СообщенияJSON.Добавить(СообщениеJSON);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.АктИнвентаризацииСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			
			Если ВходящиеДанные.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Документ по идентификатору %1 не найден.'"),
					РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки);
			КонецЕсли;
			
			Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ДляПолученияИдентификаторовСтрок Тогда
				
				СообщенияJSON = Новый Массив;
				
				СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
				ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
				
				СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииИзменениеДокумента;
				СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
				СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
				СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
				СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
				СообщениеJSON.АргументыОперации.theCard._id = СообщениеJSON.ИдентификаторЗаявки;
				
				СообщениеJSON.ПараметрыЗапроса.Вставить("ДляПолученияИдентификаторовСтрок", Ложь);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				НомерСтроки = 1;
				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.Inventorization_Batch_Info Цикл
					
					ИдентификаторСтроки = СтрокаТаблицы.id;
					РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамСтрок.Вставить(ИдентификаторСтроки, НомерСтроки);
					
					СообщениеJSON.АргументыОперации.theCard._tparts.Inventorization_Batch_Info[НомерСтроки - 1].Вставить("_id", ИдентификаторСтроки);
					СообщениеJSON.АргументыОперации.theCard._tparts.Inventorization_Batch_Info[НомерСтроки - 1].Удалить("id");
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
				
				ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
				
			Иначе
				
				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.Inventorization_Batch_Info Цикл
					
					НомерСтроки = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамСтрок[СтрокаТаблицы.id];
					
					СтрокаТовары        = ДокументОбъект.Товары[НомерСтроки - 1];
					ИдентификаторПартии = Формат(СтрокаТаблицы.batchIdReg._id, "ЧГ=0;");
					
					ДанныеЗапросаОстатков = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ДанныеЗапросаОстатковПоПартиям[ИдентификаторПартии];
					
					Если ДанныеЗапросаОстатков = Неопределено Тогда
						СтрокаТовары.Партия = Справочники.ПартииСАТУРН.Партия(ИдентификаторПартии, ПараметрыОбмена, ЭлементОчереди.ОрганизацияСАТУРН);
						ИзмененныеОбъекты.Добавить(СтрокаТовары.Партия);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументОбъект.Записать();
			
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		ДанныеЗапросаОстатковПоПартиям = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ДанныеЗапросаОстатковПоПартиям;
		ВходящиеДанные                 = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		
		Для Каждого СтрокаДанных Из ВходящиеДанные Цикл
			
			ИдентификаторПартии   = Формат(СтрокаДанных.batchId, "ЧГ=0;");
			ДанныеОстатковПартии = ДанныеЗапросаОстатковПоПартиям[ИдентификаторПартии];
			ДанныеОстатковПартии.ТекущийОстатокСАТУРН = СтрокаДанных.quantity;
			ДанныеОстатковПартии.ОстатокПолучен       = Истина;
			
			Если ДанныеОстатковПартии.ТекущийОстатокСАТУРН <> ДанныеОстатковПартии.ТекущийОстаток Тогда
				
				Партия = Справочники.ПартииСАТУРН.Партия(
					ИдентификаторПартии,
					ПараметрыОбмена,
					ЭлементОчереди.ОрганизацияСАТУРН);
				
				ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Остаток партии ""%1"" - %2 не соответствует остатку ФГИС - %3.'"),
						Партия,
						Формат(ДанныеОстатковПартии.ТекущийОстаток,          "ЧН=0; ЧГ=0;"),
						Формат(ДанныеОстатковПартии.ТекущийОстатокСАТУРН,    "ЧН=0; ЧГ=0;"));
					
				ИнтеграцияСАТУРНСлужебный.ДобавитьВПротоколОбмена(
					ЭлементОчереди,
					ТекстОшибки,
					ПараметрыОбмена,,
					Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса);
					
				РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ЕстьОшибкаПроверкиОстатка = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ЕстьОшибкаПроверкиОстатка Тогда
			
			ДобавленоСледующееСообщение = ДобавитьОчередноеСообщениеЗапросаОстатков(
				РеквизитыИсходящегоСообщения,
				РеквизитыИсходящегоСообщенияОснования,
				СообщенияJSON);
			
			Если Не ДобавленоСледующееСообщение Тогда
				
				РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ТребуетсяПринятиеКУчету = Истина;
				СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
				
				ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
				
				СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету;
				СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
				СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
				
				СообщенияJSON.Добавить(СообщениеJSON);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииПринятиеКУчету Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ПринятКУчету = Истина;
		
		Если РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ТребуетсяЧтениеПослеПроведения Тогда
			
			СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
			
			ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
			
			СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеДокумента;
			СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
			СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
			СообщениеJSON.АргументыОперации   = Новый Структура();
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
			СообщениеJSON.ПараметрыЗапроса.Вставить("ДляПолученияИдентификаторовСтрок", Ложь);
			АргументыОперации = СообщениеJSON.АргументыОперации;
			АргументыОперации.Вставить("getFullCards", 1);
			
			СообщенияJSON.Добавить(СообщениеJSON);
			
			ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
			
		КонецЕсли;
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН;
		Статусы.Ошибка = Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		Если РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ТребуетсяПринятиеКУчету
			И РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ПринятКУчету Тогда
			
			СтатурсОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена;
			
		ИначеЕсли РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ЕстьОшибкаПроверкиОстатка Тогда
			
			СтатурсОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена;
			
		КонецЕсли;
		
		Если СтатурсОбработки <> Неопределено Тогда
			
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
				ЭлементОчереди.Документ, СтатурсОбработки, Статусы);
			
			РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
				ЭлементОчереди.Документ,
				ПараметрыОбновления);
				
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Сообщение к передаче JSON.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
		
		Возврат АктИнвентаризацииJSON(ДокументСсылка, ДополнительныеПараметры);
	
	КонецЕсли;
	
КонецФункции

// Формирует JSON сообщения для акта инвентаризации.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктИнвентаризацииСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция АктИнвентаризацииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктИнвентаризацииСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Представление(Шапка.ОрганизацияСАТУРН)   КАК ОрганизацияСАТУРНПредставление,
	|	Шапка.ОрганизацияСАТУРН.Идентификатор    КАК ОрганизацияСАТУРНИдентификатор,
	|
	|	Шапка.МестоХранения                      КАК МестоХранения,
	|	ЕСТЬNULL(Шапка.МестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК МестоХраненияИдентификатор,
	|	Шапка.ДатаРегистрации                    КАК ДатаРегистрации,
	|	Шапка.ПричинаИнвентаризации              КАК ПричинаИнвентаризации,
	|	Шапка.Комментарий                        КАК Комментарий
	|ИЗ
	|	Документ.АктИнвентаризацииСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки                 КАК НомерСтроки,
	|	Представление(Товары.ПАТ)          КАК ПАТПредставление,
	|	Товары.ПАТ.Идентификатор           КАК ПАТИдентификатор,
	|	Товары.Номенклатура                КАК Номенклатура,
	|	Товары.Упаковка                    КАК Упаковка,
	|	Представление(Товары.Упаковка)     КАК УпаковкаПредставление,
	|	Товары.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличиныСАТУРН,
	|	Товары.КоличествоУпаковок          КАК КоличествоУпаковок,
	|	Товары.КоличествоОстатокСАТУРН     КАК КоличествоОстатокСАТУРН,
	|	Товары.КоличествоВУпаковкеСАТУРН   КАК КоличествоВУпаковкеСАТУРН,
	|	Товары.ПричинаРасхождения          КАК ПричинаРасхождения,
	|	ЕстьNULL(Товары.Партия.Идентификатор, """") КАК ИдентификаторПартии,
	|	Товары.НомерПартии                 КАК НомерПартии,
	|	Товары.ТорговоеНаименование        КАК ТорговоеНаименование,
	|	Товары.АртикулПроизводителя        КАК АртикулПроизводителя,
	|	Товары.ДатаПроизводства            КАК ДатаПроизводства,
	|	Товары.СрокГодности                КАК СрокГодности
	|ИЗ
	|	Документ.АктИнвентаризацииСАТУРН.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);
	АбстрактноеСообщениеJSON.АргументыОперации = Новый Структура;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = Новый Структура();
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииСозданиеДокумента, НомерВерсии);
	СообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеJSON.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	Если Товары.Количество() = 0 Тогда
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		Если Не ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			Товары.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, Товары);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	АргументыОперации = АбстрактноеСообщениеJSON.АргументыОперации;
	
	АргументыОперации.Вставить("theCard", Новый Структура);
	ДанныеДокумента = АргументыОперации.theCard;
	
	ДанныеДокумента.Вставить("_id",          Неопределено);
	ДанныеДокумента.Вставить("docDate",      Шапка.ДатаРегистрации);
	ДанныеДокумента.Вставить("docNum",       Шапка.Номер);
	ДанныеДокумента.Вставить("docNote",      Шапка.Комментарий);
	ДанныеДокумента.Вставить("name",         СтрШаблон(НСтр("ru = 'Акт инвентаризации №%1'"), Шапка.Номер));
	ДанныеДокумента.Вставить("description",  Шапка.ПричинаИнвентаризации);
	ДанныеДокумента.Вставить("contractorId", Шапка.ОрганизацияСАТУРНИдентификатор);
	ДанныеДокумента.Вставить("warehauseId",  Шапка.МестоХраненияИдентификатор);
	
	ДанныеДокумента.Вставить("_tparts", Новый Структура);
	ДанныеТела = ДанныеДокумента._tparts;
	
	ДанныеТела.Вставить("Inventorization_Batch_Info", Новый Массив);
	СтрокиТела = ДанныеТела.Inventorization_Batch_Info;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ЕстьОшибкаПроверкиОстатка",        Ложь);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ТребуетсяПринятиеКУчету",          Ложь);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ПринятКУчету",                     Ложь);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ТребуетсяЧтениеПослеПроведения",   Ложь);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ТребуетсяЗапросОстатков",          Ложь);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("НомерСтрокПоИдентификаторамСтрок", Новый Соответствие());
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ДанныеЗапросаОстатковПоПартиям",   Новый Соответствие());
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("ОрганизацияСАТУРНИдентификатор",   Шапка.ОрганизацияСАТУРНИдентификатор);
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("МестоХраненияИдентификатор",       Шапка.МестоХраненияИдентификатор);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если СтрокаТовары.КоличествоОстатокСАТУРН = 0
			Или СтрокаТовары.КоличествоВУпаковкеСАТУРН = 0 Тогда
			КоличествоУпаковокОстатокСАТУРН = 0;
		Иначе
			КоличествоУпаковокОстатокСАТУРН = СтрокаТовары.КоличествоОстатокСАТУРН / СтрокаТовары.КоличествоВУпаковкеСАТУРН;
		КонецЕсли;
		
		КоличествоУпаковокСАТУРН = КоличествоУпаковокОстатокСАТУРН + СтрокаТовары.КоличествоУпаковок;
		Если КоличествоУпаковокСАТУРН < 0 Тогда
			КоличествоУпаковокСАТУРН = 0;
		КонецЕсли;
		
		ИдентификаторСтроки = СтрокаТовары.НомерСтроки;
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("id",              ИдентификаторСтроки);
		ЭлементДанных.Вставить("patProductId",    СтрокаТовары.ПАТИдентификатор);
		Если ЗначениеЗаполнено(СтрокаТовары.ИдентификаторПартии) Тогда
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.ТребуетсяЗапросОстатков = Истина;
			ЭлементДанных.Вставить("batchId", СтрокаТовары.ИдентификаторПартии);
			ДанныеСтрокиДокумента = Новый Структура();
			ДанныеСтрокиДокумента.Вставить("НомерСтроки",          СтрокаТовары.НомерСтроки);
			ДанныеСтрокиДокумента.Вставить("ТекущийОстаток",       СтрокаТовары.КоличествоОстатокСАТУРН);
			ДанныеСтрокиДокумента.Вставить("ТекущийОстатокСАТУРН", 0);
			ДанныеСтрокиДокумента.Вставить("ОстатокПолучен",       Ложь);
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.ДанныеЗапросаОстатковПоПартиям.Вставить(
				СтрокаТовары.ИдентификаторПартии,
				ДанныеСтрокиДокумента);
		Иначе
			АбстрактноеСообщениеJSON.ПараметрыЗапроса.ТребуетсяЧтениеПослеПроведения = Истина;
			ЭлементДанных.Вставить("batchCode",          СтрокаТовары.НомерПартии);
			ЭлементДанных.Вставить("itemMarkName",       СтрокаТовары.ТорговоеНаименование);
			ЭлементДанных.Вставить("producerArticleNum", СтрокаТовары.АртикулПроизводителя);
			ЭлементДанных.Вставить("productionDate",     СтрокаТовары.ДатаПроизводства);
			//ЭлементДанных.Вставить("", СтрокаТовары.СрокГодности);	// пока поле в API отсутствует
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТовары.Упаковка) Тогда
			НаименованиеУпаковки = СтрокаТовары.УпаковкаПредставление;
		Иначе
			НаименованиеУпаковки = Строка(СтрокаТовары.ЕдиницаИзмерения);
		КонецЕсли;
		ЭлементДанных.Вставить("baseUnitType",    ИнтерфейсСАТУРН.ТипИзмеряемойВеличины(СтрокаТовары.ТипИзмеряемойВеличиныСАТУРН));
		ЭлементДанных.Вставить("pu_title",        НаименованиеУпаковки);
		ЭлементДанных.Вставить("pu_kgWeight",     СтрокаТовары.КоличествоВУпаковкеСАТУРН);
		ЭлементДанных.Вставить("countPu_fact",    КоличествоУпаковокСАТУРН);
		ЭлементДанных.Вставить("countPu_counted", КоличествоУпаковокОстатокСАТУРН);
		ЭлементДанных.Вставить("countGapStatus",  СтрокаТовары.ПричинаРасхождения);
		
		СтрокиТела.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ДобавитьОчередноеСообщениеЗапросаОстатков(РеквизитыИсходящегоСообщения, РеквизитыИсходящегоСообщенияОснования, СообщенияJSON)
	
	ВозвращаемоеЗначение = Ложь;
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(18, 0);
	
	Для Каждого КлючИЗначение Из РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ДанныеЗапросаОстатковПоПартиям Цикл
		
		ДанныеЗапросаПоПартии = КлючИЗначение.Значение;
		
		Если ДанныеЗапросаПоПартии.ОстатокПолучен Тогда
			Продолжить;
		КонецЕсли;
		
		ВозвращаемоеЗначение = Истина;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.АктИнвентаризацииЧтениеАктуальногоОстатка;
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		
		СообщениеJSON.АргументыОперации = Новый Структура();
		
		АргументыОперации = СообщениеJSON.АргументыОперации;
		АргументыОперации.Вставить("getFullCards",      0);
		АргументыОперации.Вставить("ownerContractorId", ОписаниеТипаЧисло.ПривестиЗначение(РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.ОрганизацияСАТУРНИдентификатор));
		АргументыОперации.Вставить("warehouseId",       ОписаниеТипаЧисло.ПривестиЗначение(РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.МестоХраненияИдентификатор));
		АргументыОперации.Вставить("batchId",           ОписаниеТипаЧисло.ПривестиЗначение(КлючИЗначение.Ключ));
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Прервать;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.АктИнвентаризацииСАТУРН КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = &Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.КоличествоУпаковок < 0
	|		ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ                      КАК ВидДвижения,
	|	Шапка.ДатаРегистрации      КАК Период,
	|	ТаблицаТовары.Партия       КАК Партия,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН)
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ТаблицаТовары.КоличествоУпаковок < 0
	|				ТОГДА -ТаблицаТовары.КоличествоУпаковок
	|				ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
	|			КОНЕЦ * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСАТУРН,
	|	ВЫБОР
	|		КОГДА Статусы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН)
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА ТаблицаТовары.КоличествоУпаковок < 0
	|				ТОГДА -ТаблицаТовары.КоличествоУпаковок
	|				ИНАЧЕ ТаблицаТовары.КоличествоУпаковок
	|			КОНЕЦ * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.АктИнвентаризацииСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктИнвентаризацииСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестаХраненияПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.ДатаРегистрации      КАК Период,
	|	Шапка.ОрганизацияСАТУРН    КАК ОрганизацияСАТУРН,
	|	Шапка.МестоХранения        КАК МестоХранения,
	|	ТаблицаТовары.Партия КАК Партия
	|ИЗ
	|	Документ.АктИнвентаризацииСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АктИнвентаризацииСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|		И ТаблицаТовары.КоличествоУпаковок > 0
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|		И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН)
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиАктаИнвентаризацииСАТУРН- статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиАктаИнвентаризацииСАТУРН.ПроведенСАТУРН);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область ОбработкаЗаполнения

Процедура ПолучитьОстатки(СоответствиеОстатков)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Индекс", ОбщегоНазначения.ОписаниеТипаЧисло(6));
	Таблица.Колонки.Добавить("Партия", Новый ОписаниеТипов("СправочникСсылка.ПартииСАТУРН"));
	
	Для Каждого КлючИЗначение Из СоответствиеОстатков Цикл
		Строка = Таблица.Добавить();
		Строка.Индекс = КлючИЗначение.Ключ;
		Строка.Партия = КлючИЗначение.Значение.Партия;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Индекс,
	|	Таблица.Партия
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|ВЫБРАТЬ
	|	Таблица.Индекс,
	|	Таблица.Партия,
	|	Остатки.КоличествоСАТУРНОстаток КАК Остаток
	|ИЗ
	|	Таблица КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийСАТУРН.Остатки() КАК Остатки
	|	ПО Таблица.Партия = Остатки.Партия
	|ГДЕ
	|	Остатки.КоличествоСАТУРНОстаток > 0";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеОстатков[Выборка.Индекс].Остаток = Выборка.Остаток;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
