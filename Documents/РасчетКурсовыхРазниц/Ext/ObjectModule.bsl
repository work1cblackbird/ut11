#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьДокумент();
	
	РасчетКурсовыхРазницЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ПроведениеРасчетКурсовыхРазниц");
	ДополнительныеСвойства.Вставить("ОписаниеЗамера", ОписаниеЗамера);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	Если РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И НЕ ПометкаУдаления Тогда
		ПроверитьДублиДокументовТекущегоПериода(Отказ);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект);
	
	РасчетКурсовыхРазницЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НЕ ДополнительныеСвойства.Свойство("ВыполненРасчет") Тогда
		
		УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Истина);
		НачатьТранзакцию();
		Попытка
			ОчиститьНаборыЗаписейДвижений(ЭтотОбъект);
			НоваяАрхитектураРасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
			ЭтоРасчеты = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами
				Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками;
			Если ЭтоРасчеты И НоваяАрхитектураРасчетов Тогда
				Документы.РасчетКурсовыхРазниц.РассчитатьКурсовыеРазницыПоСрокам(Организация, Дата, ХозяйственнаяОперация, ПереоценкаПоДням);
			Иначе
				Документы.РасчетКурсовыхРазниц.РассчитатьКурсовыеРазницы(ЭтотОбъект.Ссылка);
			КонецЕсли;
			УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			УправлениеДоступом.ОтключитьОбновлениеКлючейДоступа(Ложь, Ложь);
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЕсли;
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РасчетКурсовыхРазницЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
	ОписаниеЗамера = Неопределено;
	Если ДополнительныеСвойства.Свойство("ОписаниеЗамера", ОписаниеЗамера) Тогда
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ЭтоРасчеты = ЭтотОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСПоставщиками
		Или ЭтотОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами;
	Если ЭтоРасчеты И ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") И ЕстьДвиженияПоСрокам() Тогда
		
		ТекстОшибки = НСтр("ru = 'Для отмены проведения ""%1"" необходимо
		|снять с проведения все документы формирующие валютные остатки
		|по организации ""%2""'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Ссылка, Организация);
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	РасчетКурсовыхРазницЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьДокумент()
	
	Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
КонецПроцедуры

Процедура ПроверитьДублиДокументовТекущегоПериода(Отказ)
	
	Если ДополнительныеСвойства.Свойство("ОтключитьПроверкуДублей") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Т.Ссылка
	|ИЗ
	|	Документ.РасчетКурсовыхРазниц КАК Т
	|ГДЕ
	|	Т.Проведен
	|	И Т.Организация = &Организация
	|	И Т.Дата МЕЖДУ &ПериодНачало И &ПериодОкончание
	|	И НЕ Т.Ссылка = &ТекущийДокумент
	|	И Т.ХозяйственнаяОперация = &Операция");
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);
	Запрос.УстановитьПараметр("ПериодНачало", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("ПериодОкончание", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("Операция", ХозяйственнаяОперация);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		ТекстОшибки = НСтр("ru = 'Для организации ""%1"" в текущем месяце %2 уже существует аналогичный документ ""%3"".
							|Пометьте на удаление все непроведенные документы расчета курсовых разниц.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Организация, Формат(Дата, "ДФ=ММ.yyyy"), ХозяйственнаяОперация);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНаборыЗаписейДвижений(ЭтотОбъект)
	
	НаборыДвижений = Новый Массив;
	НаборыДвижений.Добавить("РасчетыСПоставщикамиПоДокументам");
	НаборыДвижений.Добавить("РасчетыСКлиентамиПоДокументам");
	НаборыДвижений.Добавить("ДенежныеСредстваБезналичные");
	НаборыДвижений.Добавить("ДенежныеСредстваНаличные");
	НаборыДвижений.Добавить("ДенежныеСредстваВКассахККМ");
	НаборыДвижений.Добавить("ДенежныеСредстваВПути");
	НаборыДвижений.Добавить("ДенежныеСредстваУПодотчетныхЛиц");
	НаборыДвижений.Добавить("РасчетыПоФинансовымИнструментам");
	НаборыДвижений.Добавить("ПроцентныеРасходыДисконтирования");
	НаборыДвижений.Добавить("ТоварыКОформлениюОтчетовКомитенту");
	НаборыДвижений.Добавить("ТоварыУслугиКОформлениюОтчетовКомитентуОЗакупках");
	НаборыДвижений.Добавить("УслугиКОформлениюОтчетовПринципалу");
	
	РасчетКурсовыхРазницЛокализация.ДополнитьНаборыОчисткиДвижений(НаборыДвижений);
	
	Для Каждого ИмяНабора Из НаборыДвижений Цикл
		Набор = ЭтотОбъект.Движения[ИмяНабора]; // РегистрНакопленияНаборЗаписей - 
		Набор.Очистить();
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьДвиженияПоСрокам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетыПоСрокам.ДокументРегистратор КАК ДокументРегистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыПоСрокам
	|ГДЕ
	|	РасчетыПоСрокам.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РасчетыПоСрокам.ДокументРегистратор = &ДокументРегистратор";
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПереоценкаРасчетовСКлиентами Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РасчетыСПоставщиками", "РасчетыСКлиентами");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(Дата));
	Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(Дата));
	Запрос.УстановитьПараметр("ДокументРегистратор", Ссылка);
	
	НаборДвижений = Запрос.Выполнить();
	
	Возврат НЕ НаборДвижений.Пустой();
	
КонецФункции

#КонецОбласти

#КонецЕсли
