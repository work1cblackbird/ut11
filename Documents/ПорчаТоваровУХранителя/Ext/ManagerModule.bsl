#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - см. ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Партнер, Соглашение";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Организация", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Автор";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Автор";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "Подразделение", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Ответственный";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "ПриходоватьТоварыПоСебестоимостиСписания", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "Ответственный";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаПусты = "ПриходоватьТоварыПоСебестоимостиСписания";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "СтатьяРасходов", Параметры);
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьВсегда = "СтатьяРасходов";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "СтатьяРасходов";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов, "АналитикаРасходов", Параметры);
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("ОперативныйУчетТоваровОрганизаций");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	МеханизмыДокумента.Добавить("СерийныйУчет");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("УчетНДС");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	ПорчаТоваровУХранителяЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ПорчаТоваровУХранителя") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры);
		
		РасчетСебестоимостиПроведениеДокументов.ОтразитьВМеханизмеУчетаЗатратИСебестоимости(ДокументСсылка, Запрос, ТекстыЗапроса, Регистры);
		
		ПорчаТоваровУХранителяЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(
		Запрос, ТекстыЗапроса, Регистры, Метаданные.Документы.ПорчаТоваровУХранителя);
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//	Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#Область СозданиеНаОсновании

// Добавляет команду создания документа "Отчет о списании товаров у хранителя".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ПорчаТоваровУХранителя) Тогда
		
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер           = Метаданные.Документы.ПорчаТоваровУХранителя.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление      =
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ПорчаТоваровУХранителя);
		КомандаСоздатьНаОсновании.РежимЗаписи         = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции =
			"ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи, ИспользоватьПроизводствоНаСтороне2_5";
		
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Определяет список команд создания на основании.
//
// Параметры:
//	КомандыСозданияНаОсновании - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//	Параметры - См. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандуИсправление(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	ИсправлениеДокументов.ДобавитьКомандуСторно(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	ПорчаТоваровУХранителяЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ОстаткиТоваровОрганизаций.ДобавитьКомандуОтчета(КомандыОтчетов);
	
	ПорчаТоваровУХранителяЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат "ХозяйственнаяОперация,Дата";
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//	Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.ПорчаТоваровУХранителя";
	
	УчитыватьСебестоимостьПоСериям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьПоСериямСклад",
																Новый Структура());
	ИспользоватьСерииНоменклатуры  = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад",
																Новый Структура());
	
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ИспользоватьСерииНоменклатуры;
	
	ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ДвижениеВФинансовомУчете);
	
	ПараметрыУказанияСерий.ЭтоНакладная                = Истина;
	ПараметрыУказанияСерий.Дата                        = Объект.Дата;
	ПараметрыУказанияСерий.ИмяПоляСклад                = "Договор";
	ПараметрыУказанияСерий.ИмяТЧСерии                  = "Товары";
	
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Назначение");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("НоменклатураОприходование");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("ХарактеристикаОприходование");
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("ПодНазначение");
	
	ПараметрыУказанияСерий.ИменаПолейССуффиксом.Вставить("Номенклатура",	"НоменклатураОприходование");
	ПараметрыУказанияСерий.ИменаПолейССуффиксом.Вставить("Характеристика",	"ХарактеристикаОприходование");
	
	ПараметрыУказанияСерий.ИменаПолейСтатусУказанияСерий.Добавить("СтатусУказанияСерий");
	
	ПараметрыУказанияСерий.ПараметрыЗапроса.Вставить("ХозяйственнаяОперация", Объект.ХозяйственнаяОперация);
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий.
//
// Параметры:
//	ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий.
//
// Возвращаемое значение:
//	Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки                      КАК НомерСтроки,
	|	Товары.Номенклатура                     КАК Номенклатура,
	|	Товары.Характеристика                   КАК Характеристика,
	|	Товары.Назначение                       КАК Назначение,
	|	Товары.Серия                            КАК Серия,
	|	Товары.СтатусУказанияСерий              КАК СтатусУказанияСерий,
	|	Товары.Количество                       КАК Количество
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	Товары.НомерСтроки                      КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий              КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|				И (ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВПереданныхНаХранениеТоварах
	|							И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваровУХранителя)
	|					ИЛИ ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийПереданныхПереработчикуТоваров
	|							И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваровУПереработчика))
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 18
	|					ИНАЧЕ 17
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ                                   КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки                      КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий              КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область НазначениеИНаправлениеДеятельности

// Инициализирует параметры, обслуживающие выбор назначений в формах документа.
//
//	Возвращаемое значение:
//		См. Справочники.Назначения.МакетФормыВыбораНазначений
//
Функция МакетФормыВыбораНазначений() Экспорт
	
	МакетФормы = Справочники.Назначения.МакетФормыВыбораНазначений();
	
	ШаблонНазначения = Справочники.Назначения.ДобавитьШаблонНазначений(МакетФормы);
	ШаблонНазначения.НаправлениеДеятельности = "Объект.НаправлениеДеятельности";
	ШаблонНазначения.ВидимыеОтборыНаФорме.Вставить(
		"НаправлениеДеятельности",
		НСтр("ru='Только назначения направления деятельности ""%1""'"));
	
	ШаблонНазначения.ТипыНазначений.Очистить();
	ШаблонНазначения.ТипыНазначений.Добавить(Перечисления.ТипыНазначений.Собственное);
	
	// Остатки переданных товаров
	ОписаниеКолонок =
		Справочники.Назначения.ДобавитьОписаниеКолонок(
			МакетФормы,
			"ТоварыПереданныеХранителям",
			Истина,
			"Объект.Товары.Назначение");
	
	ОписаниеКолонок.Колонки.НайтиПоЗначению("Передано").Пометка = Истина;
	
	ОписаниеКолонок.ПутиКДанным.Организация    = "Объект.Организация";
	ОписаниеКолонок.ПутиКДанным.Договор        = "Объект.Договор";
	ОписаниеКолонок.ПутиКДанным.Номенклатура   = "Объект.Товары.Номенклатура";
	ОписаниеКолонок.ПутиКДанным.Характеристика = "Объект.Товары.Характеристика";
	
	Возврат МакетФормы;
	
КонецФункции

// см. НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности
Функция ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности(Форма) Экспорт
	
	ПорядокОбработкиДокумента = НаправленияДеятельностиСервер.ПорядокОбработкиДокументаПриИзмененииНаправленияДеятельности();
	ПорядокОбработкиДокумента.ИменаТабличныхЧастейДляОчисткиНекорректныхНазначений = "Товары";
	ТаблицаУсловий = НаправленияДеятельностиСервер.УсловияОбработкиНазначенийВСтроках("ТипНоменклатуры");
	ПорядокОбработкиДокумента.УсловияОбработкиСтрок.Вставить("Товары", ТаблицаУсловий);
	
	Возврат ПорядокОбработкиДокумента;
	
КонецФункции

#КонецОбласти


#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)
	|	И ЗначениеРазрешено(Подразделение)
	|	И ЗначениеРазрешено(ХозяйственнаяОперация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Возвращает параметры выбора статей и аналитик.
// 
// Параметры:
//  ПриходоватьТоварыПоСебестоимости - Булево - признак необходимости оприходования товаров по себестоимости.
//
// Возвращаемое значение:
//	см. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики.
//
Функция ПараметрыВыбораСтатейИАналитик(ПриходоватьТоварыПоСебестоимости) Экспорт
	
	// СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья      = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи   = "ТипСтатьи";
	
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов   = "АналитикаРасходов";
	
	ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
	ПараметрыВыбора.АналитикаАктивовПассивов   = "АналитикаАктивовПассивов";
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("АналитикаАктивовПассивов");
	
	ПараметрыВыбора.ДоступностьПоОперации               = Не ПриходоватьТоварыПоСебестоимости;
	ПараметрыВыбора.СкрыватьСтатьюНедоступнуюПоОперации = Ложь;
	
	Возврат ПараметрыВыбора;
	
КонецФункции


// Возвращает структуру с наименованием табличных частей документа, хранящих информацию о товарах.
//
// Возвращаемое значение:
//	Структура - коллекция, содержащая следующие наименования табличных частей:
//		* Товары - ТаблицаЗначений, ТабличнаяЧасть, Неопределено - данные о товарах документа.
//	
Функция КоллекцияТабличныхЧастейТоваров() Экспорт
	
	ТаблицыДокумента = Новый Структура("Товары", Неопределено);
	
	Возврат ТаблицыДокумента;
	
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ХозяйственнаяОперация");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
		ПредставлениеОбъекта = НСтр("ru = 'Порча товаров у хранителя'");
	
	Представление = СтрШаблон(НСтр("ru='%1 %2 от %3'"), ПредставлениеОбъекта, Данные.Номер, Данные.Дата);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных; 
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка                                                     КАК Ссылка,
	|	ДанныеДокумента.Номер                                                      КАК Номер,
	|	ДанныеДокумента.Дата                                                       КАК Период,
	|	ДанныеДокумента.Партнер                                                    КАК Партнер,
	|	ДанныеДокумента.Контрагент                                                 КАК Контрагент,
	|	ДанныеДокумента.Соглашение                                                 КАК Соглашение,
	|	ДанныеДокумента.СуммаДокумента                                             КАК СуммаДокумента,
	|	ДанныеДокумента.Валюта                                                     КАК Валюта,
	|	ДанныеДокумента.ПриходоватьТоварыПоСебестоимостиСписания                   КАК ПриходоватьТоварыПоСебестоимостиСписания,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиРасходов)
	|			ТОГДА ДанныеДокумента.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                                      КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеДокумента.СтатьяРасходов) = ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов)
	|			ТОГДА ДанныеДокумента.СтатьяРасходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                                      КАК СтатьяАктивовПассивов,
	|	ДанныеДокумента.АналитикаАктивовПассивов                                   КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.АналитикаРасходов                                          КАК АналитикаРасходов,
	|	ДанныеДокумента.ХозяйственнаяОперация                                      КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация                                                КАК Организация,
	|	ДанныеДокумента.Договор                                                    КАК Договор,
	|	ДанныеДокумента.ВидЦены                                                    КАК ВидЦены,
	|	ДанныеДокумента.Комментарий                                                КАК Комментарий,
	|	ДанныеДокумента.ВидыЗапасовУказаныВручную                                  КАК ВидыЗапасовУказаныВручную,
	|	ДанныеДокумента.Ответственный                                              КАК Ответственный,
	|	ДанныеДокумента.Автор                                                      КАК Автор,
	|	ДанныеДокумента.НаправлениеДеятельности                                    КАК НаправлениеДеятельности,
	|	ДанныеДокумента.Подразделение                                              КАК Подразделение,
	|	ЕСТЬNULL(ДанныеДокумента.Подразделение.ВариантОбособленногоУчетаТоваров,
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПустаяСсылка)) КАК ВариантОбособленногоУчетаТоваров,
	|	ДанныеДокумента.Сделка                                                     КАК Сделка,
	|	ЕСТЬNULL(ДанныеДокумента.Сделка.ОбособленныйУчетТоваровПоСделке, ЛОЖЬ)     КАК ОбособленныйУчетТоваровПоСделке,
	|	ДанныеДокумента.Исправление                                                КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент                                       КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент                                       КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.ПометкаУдаления                                            КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен                                                   КАК Проведен,
	|	НастройкиХозяйственныхОпераций.Ссылка                                      КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Реквизиты = РезультатЗапроса.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	ИнформацияПоДоговору    = "";
	НомерНаПечать           = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер);
	ИдентификаторМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.ПорчаТоваровУХранителя");
	
	Если ЗначениеЗаполнено(Реквизиты.Договор) Тогда
		ШаблонСтроки = "ru = 'По договору ""%1""'"; // @НСтр
		ИнформацияПоДоговору = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтроки, Реквизиты.Договор);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИдентификаторМетаданных", ИдентификаторМетаданных);
	Запрос.УстановитьПараметр("НомерНаПечать",           НомерНаПечать);
	Запрос.УстановитьПараметр("ИнформацияПоДоговору",    ИнформацияПоДоговору);
	Запрос.УстановитьПараметр(
		"ФормироватьВидыЗапасовПоГруппамФинансовогоУчета",
		ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ТекстЗапросаДвиженияНоменклатураНоменклатура(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияНоменклатураНоменклатура";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                          КАК Период,
	|	ВЫБОР КОГДА &ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваровСПереоценкой)
	|	КОНЕЦ                                            КАК ХозяйственнаяОперация,
	|	&Организация                                     КАК Организация,
	|	&Подразделение                                   КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатуры
	|		ИНАЧЕ ВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначения
	|	КОНЕЦ                                            КАК АналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.НаправлениеДеятельности              КАК НаправлениеДеятельности,
	|	&Договор                                         КАК Склад,
	|	ВидыЗапасов.ТипЗапасов                           КАК ТипЗапасов,
	|	ВидыЗапасов.ВидЗапасов                           КАК ВидЗапасов,
	|	ВЫБОР
	|		КОГДА &УчитыватьСебестоимостьТоваровПоНазначениям
	|			ТОГДА ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование
	|		ИНАЧЕ ВидыЗапасов.АналитикаУчетаНоменклатурыБезНазначенияОприходование
	|	КОНЕЦ                                            КАК КорАналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.НаправлениеДеятельностиОприходование КАК КорНаправлениеДеятельности,
	|	&Договор                                         КАК КорСклад,
	|	ВидыЗапасов.ВидЗапасовОприходование.ТипЗапасов   КАК КорТипЗапасов,
	|	ВидыЗапасов.ВидЗапасовОприходование              КАК КорВидЗапасов,
	|	ВидыЗапасов.Количество                           КАК Количество,
	|	ВидыЗапасов.Количество                           КАК КорКоличество,
	|	ВЫБОР
	|		КОГДА &ПриходоватьТоварыПоСебестоимостиСписания
	|			ТОГДА 0
	|		ИНАЧЕ ВидыЗапасов.СуммаУпр
	|	КОНЕЦ                                            КАК Стоимость,
	|	ВЫБОР
	|		КОГДА &ПриходоватьТоварыПоСебестоимостиСписания
	|			ТОГДА 0
	|		ИНАЧЕ ВидыЗапасов.СуммаУпр
	|	КОНЕЦ                                            КАК СтоимостьБезНДС,
	|	ВЫБОР
	|		КОГДА &ПриходоватьТоварыПоСебестоимостиСписания
	|			ТОГДА 0
	|		ИНАЧЕ ВидыЗапасов.СуммаРегл
	|	КОНЕЦ                                            КАК СтоимостьРегл,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ВидыЗапасов.ВидЗапасов
	|		ИНАЧЕ ВидыЗапасов.Номенклатура
	|	КОНЕЦ                                            КАК ИсточникГФУНоменклатуры,
	|	ВЫБОР
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета
	|			ТОГДА ВидыЗапасов.ВидЗапасовОприходование
	|		ИНАЧЕ ВидыЗапасов.НоменклатураОприходование
	|	КОНЕЦ                                            КАК КорИсточникГФУНоменклатуры
	|
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период													КАК Период,
	|	ТаблицаСерии.Серия										КАК Серия,
	|	ТаблицаСерии.Номенклатура								КАК Номенклатура,
	|	ТаблицаСерии.Характеристика								КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСерии.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|			ТОГДА ТаблицаСерии.Назначение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ													КАК Назначение,
	|	&Ссылка													КАК Документ,
	|	&Партнер												КАК Отправитель,
	|	НЕОПРЕДЕЛЕНО											КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтражениеПорчи)	КАК СкладскаяОперация,
	|	ЛОЖЬ													КАК ЭтоСкладскоеДвижение,
	|	ТаблицаСерии.Количество									КАК Количество
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя.Товары КАК ТаблицаСерии
	|ГДЕ
	|	ТаблицаСерии.Ссылка = &Ссылка
	|	И ТаблицаСерии.Количество <> 0
	|	И ТаблицаСерии.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период										КАК Период,
	|	ТаблицаТовары.Серия							КАК Серия,
	|	ТаблицаТовары.НоменклатураОприходование		КАК Номенклатура,
	|	ТаблицаТовары.ХарактеристикаОприходование	КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ПодНазначение
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(ТаблицаТовары.Назначение.ДвиженияПоСкладскимРегистрам, ЛОЖЬ)
	|						ТОГДА ТаблицаТовары.Назначение
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|	КОНЕЦ										КАК Назначение,
	|	&Ссылка										КАК Документ,
	|	НЕОПРЕДЕЛЕНО								КАК Отправитель,
	|	&Партнер									КАК Получатель,
	|	ЗНАЧЕНИЕ(Перечисление.СкладскиеОперации.ОтражениеПорчи) КАК СкладскаяОперация,
	|	ЛОЖЬ										КАК ЭтоСкладскоеДвижение,
	|	ТаблицаТовары.Количество					КАК Количество
	|ИЗ
	|	Документ.ПорчаТоваров.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Количество <> 0
	|	И ТаблицаТовары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтОснований", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                КАК Ссылка,
	|	&Период                                КАК ДатаДокументаИБ,
	|	&Номер                                 КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных               КАК ТипСсылки,
	|	&Организация                           КАК Организация,
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&Партнер                               КАК Партнер,
	|	&Контрагент                            КАК Контрагент,
	|	&Договор                               КАК Договор,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.КоличествоНаправленийДеятельности = 1
	|			ТОГДА ДанныеДокумента.НаправлениеДеятельности
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                  КАК НаправлениеДеятельности,
	|	&Партнер                               КАК МестоХранения,
	|	&Подразделение                         КАК Подразделение,
	|	&Ответственный                         КАК Ответственный,
	|	&Автор                                 КАК Автор,
	|	ВЫРАЗИТЬ(&Комментарий КАК СТРОКА(100)) КАК Комментарий,
	|	&Валюта                                КАК Валюта,
	|	&СуммаДокумента                        КАК Сумма,
	|	НЕОПРЕДЕЛЕНО                           КАК Статус,
	|	&Проведен                              КАК Проведен,
	|	&ПометкаУдаления                       КАК ПометкаУдаления,
	|	ЛОЖЬ                                   КАК ДополнительнаяЗапись,
	|	&ИнформацияПоДоговору                  КАК Дополнительно,
	|	&Период                                КАК ДатаПервичногоДокумента,
	|	&Исправление                           КАК СторноИсправление,
	|	&СторнируемыйДокумент                  КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент                  КАК ИсправляемыйДокумент,
	|	&НомерНаПечать                         КАК НомерПервичногоДокумента,
	|	&Период                                КАК ДатаОтраженияВУчете
	|ИЗ
	|	ВтОснований КАК ДанныеДокумента";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТоварыОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ТоварыОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                        КАК Организация,
	|	ВидыЗапасов.ВидЗапасов                              КАК ВидЗапасов,
	|	ВидыЗапасов.НомерГТД                                КАК НомерГТД,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	&Организация                                        КАК ОрганизацияОтгрузки,
	|	ВЫБОР
	|		КОГДА &СтатьяРасходов = НЕОПРЕДЕЛЕНО
	|			ТОГДА &СтатьяАктивовПассивов
	|		ИНАЧЕ &СтатьяРасходов
	|	КОНЕЦ                                               КАК СтатьяРасходов,
	|	&АналитикаРасходов                                  КАК АналитикаРасходов,
	|	&АналитикаАктивовПассивов                           КАК АналитикаАктивовПассивов,
	|	ВидыЗапасов.Номенклатура                            КАК Номенклатура,
	|	ВидыЗапасов.Характеристика                          КАК Характеристика,
	|	ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК КорАналитикаУчетаНоменклатуры,
	|	ВидыЗапасов.ВидЗапасовОприходование                 КАК КорВидЗапасов,
	|	ЛОЖЬ                                                КАК Первичное,
	|	ВидыЗапасов.Количество                              КАК Количество,
	|	0                                                   КАК КОформлениюСписания,
	|	ВидыЗапасов.КоличествоПоРНПТ                        КАК КоличествоПоРНПТ,
	|	0                                                   КАК КОформлениюСписанияПоРНПТ
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)              КАК ВидДвижения,
	|	&Период                                             КАК Период,
	|	ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатуры,
	|	&Организация                                        КАК Организация,
	|	ВидыЗапасов.ВидЗапасовОприходование                 КАК ВидЗапасов,
	|	ВидыЗапасов.НомерГТД                                КАК НомерГТД,
	|	&ХозяйственнаяОперация                              КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                        КАК ОрганизацияОтгрузки,
	|	НЕОПРЕДЕЛЕНО                                        КАК СтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                        КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                        КАК АналитикаАктивовПассивов,
	|	ВидыЗапасов.НоменклатураОприходование               КАК Номенклатура,
	|	ВидыЗапасов.ХарактеристикаОприходование             КАК Характеристика,
	|	НЕОПРЕДЕЛЕНО                                        КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                        КАК КорВидЗапасов,
	|	НЕ &ПриходоватьТоварыПоСебестоимостиСписания        КАК Первичное,
	|	ВидыЗапасов.Количество                              КАК Количество,
	|	0                                                   КАК КОформлениюСписания,
	|	ВидыЗапасов.КоличествоПоРНПТ                        КАК КоличествоПоРНПТ,
	|	0                                                   КАК КОформлениюСписанияПоРНПТ
	|ИЗ
	|	ВтВидыЗапасов КАК ВидыЗапасов
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""ВидыЗапасов"" 										 КАК ИмяТабличнойЧасти,
	|	ТаблицаДокумента.НомерСтроки 							 КАК НомерСтроки,
	|	НЕОПРЕДЕЛЕНО											 КАК Поставщик,
	|	НЕОПРЕДЕЛЕНО											 КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО 											 КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО						 					 КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.Товары) 			 КАК ВидЦенности,
	|	0														 КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя.ВидыЗапасов КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПорчаТоваровУХранителя КАК ДанныеДокумента
	|		ПО ДанныеДокумента.Ссылка = ТаблицаДокумента.Ссылка
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтВидыЗапасов";
	
	УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос);
	ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос);
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыЗапасов.НомерСтроки                                            КАК НомерСтроки,
	|	ВидыЗапасов.Ссылка                                                 КАК Ссылка,
	|	ВидыЗапасов.ИдентификаторСтроки                                    КАК ИдентификаторСтроки,
	|	ВидыЗапасов.НомерГТД                                               КАК НомерГТД,
	|
	|	ВидыЗапасов.ВидЗапасов.ВладелецТовара                              КАК ВладелецТовара,
	|	ВидыЗапасов.ВидЗапасов.Договор                                     КАК Договор,
	|	ВидыЗапасов.ВидЗапасов                                             КАК ВидЗапасов,
	|	ВидыЗапасов.ВидЗапасов.ТипЗапасов                                  КАК ТипЗапасов,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры                             КАК АналитикаУчетаНоменклатуры,
	|	АналитикаБезНазначения.КлючАналитики                               КАК АналитикаУчетаНоменклатурыБезНазначения,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура                КАК Номенклатура,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика              КАК Характеристика,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение                  КАК Назначение,
	|	ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия                       КАК Серия,
	|	ЕСТЬNULL(ВидыЗапасов.АналитикаУчетаНоменклатуры.Назначение.НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))     КАК НаправлениеДеятельности,
	|
	|	&Организация                                                       КАК Организация,
	|	ВидыЗапасов.ВидЗапасовОприходование.Валюта                         КАК Валюта,
	|	ВидыЗапасов.ВидЗапасовОприходование                                КАК ВидЗапасовОприходование,
	|	ВидыЗапасов.ВидЗапасовОприходование.ТипЗапасов                     КАК ТипЗапасовОприходование,
	|	ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование                КАК АналитикаУчетаНоменклатурыОприходование,
	|	АналитикаБезНазначенияОприходование.КлючАналитики                  КАК АналитикаУчетаНоменклатурыБезНазначенияОприходование,
	|	ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Номенклатура   КАК НоменклатураОприходование,
	|	ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Характеристика КАК ХарактеристикаОприходование,
	|	ЕСТЬNULL(ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Назначение.НаправлениеДеятельности,
	|		ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))     КАК НаправлениеДеятельностиОприходование,
	|
	|	ТаблицаАналитикУчетаПартий.ВидЦенности							   КАК ВидЦенности,
	|	ТаблицаАналитикУчетаПартий.НалогообложениеНДС					   КАК ВидДеятельностиНДС,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий 				   КАК АналитикаУчетаПартий,
	|
	|	ВидыЗапасов.Количество                                                         КАК Количество,
	|	ВидыЗапасов.КоличествоПоРНПТ                                                   КАК КоличествоПоРНПТ,
	|	ВидыЗапасов.Сумма                                                              КАК Сумма,
	|	ВЫРАЗИТЬ(ВидыЗапасов.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))  КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ВидыЗапасов.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаЗабаланс * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2)) КАК СуммаЗабалансУпр,
	|	ВЫРАЗИТЬ(ВидыЗапасов.СуммаЗабаланс * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2)) КАК СуммаЗабалансРегл
	|
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя.ВидыЗапасов КАК ВидыЗапасов
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначения
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура   = АналитикаБезНазначения.Номенклатура
	|		 И ВидыЗапасов.АналитикаУчетаНоменклатуры.Характеристика = АналитикаБезНазначения.Характеристика
	|		 И ВидыЗапасов.АналитикаУчетаНоменклатуры.Серия          = АналитикаБезНазначения.Серия
	|		 И ВидыЗапасов.АналитикаУчетаНоменклатуры.МестоХранения  = АналитикаБезНазначения.МестоХранения
	|		 И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)          = АналитикаБезНазначения.Назначение
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК АналитикаБезНазначенияОприходование
	|		ПО ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Номенклатура   = АналитикаБезНазначенияОприходование.Номенклатура
	|		 И ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Характеристика = АналитикаБезНазначенияОприходование.Характеристика
	|		 И ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.Серия          = АналитикаБезНазначенияОприходование.Серия
	|		 И ВидыЗапасов.АналитикаУчетаНоменклатурыОприходование.МестоХранения  = АналитикаБезНазначенияОприходование.МестоХранения
	|		 И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                       = АналитикаБезНазначенияОприходование.Назначение
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|	ПО ТаблицаАналитикУчетаПартий.НомерСтроки 		= ВидыЗапасов.НомерСтроки
	|	 И ТаблицаАналитикУчетаПартий.ИмяТабличнойЧасти = ""ВидыЗапасов""
	|ГДЕ
	|	ВидыЗапасов.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаНоменклатуры(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаНоменклатурыИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаАналитик.Номенклатура   КАК Номенклатура,
	|	ТаблицаАналитик.Характеристика КАК Характеристика,
	|	ТаблицаАналитик.Назначение     КАК Назначение,
	|	ТаблицаАналитик.Серия          КАК Серия,
	|	ТаблицаАналитик.МестоХранения  КАК Склад
	|ИЗ
	|	(ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатуры.Номенклатура   КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатуры.Характеристика КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)     КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатуры.Серия          КАК Серия,
	|		Товары.АналитикаУчетаНоменклатуры.МестоХранения  КАК МестоХранения
	|	ИЗ
	|		Документ.ПорчаТоваровУХранителя.Товары КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|			ПО Товары.АналитикаУчетаНоменклатуры.Номенклатура      = Аналитика.Номенклатура
	|			 И Товары.АналитикаУчетаНоменклатуры.Характеристика    = Аналитика.Характеристика
	|			 И Товары.АналитикаУчетаНоменклатуры.Серия             = Аналитика.Серия
	|			 И Товары.АналитикаУчетаНоменклатуры.МестоХранения     = Аналитика.МестоХранения
	|			 И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)        = Аналитика.Назначение
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И Аналитика.Номенклатура ЕСТЬ NULL
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Товары.АналитикаУчетаНоменклатурыОприходование.Номенклатура   КАК Номенклатура,
	|		Товары.АналитикаУчетаНоменклатурыОприходование.Характеристика КАК Характеристика,
	|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                  КАК Назначение,
	|		Товары.АналитикаУчетаНоменклатурыОприходование.Серия          КАК Серия,
	|		Товары.АналитикаУчетаНоменклатурыОприходование.МестоХранения  КАК МестоХранения
	|	ИЗ
	|		Документ.ПорчаТоваровУХранителя.Товары КАК Товары
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
	|			ПО Товары.АналитикаУчетаНоменклатурыОприходование.Номенклатура   = Аналитика.Номенклатура
	|			 И Товары.АналитикаУчетаНоменклатурыОприходование.Характеристика = Аналитика.Характеристика
	|			 И Товары.АналитикаУчетаНоменклатурыОприходование.Серия          = Аналитика.Серия
	|			 И Товары.АналитикаУчетаНоменклатурыОприходование.МестоХранения  = Аналитика.МестоХранения
	|			 И ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                  = Аналитика.Назначение
	|	ГДЕ
	|		Товары.Ссылка = &Ссылка
	|		И Аналитика.Номенклатура ЕСТЬ NULL
	|		И НЕ &УчитыватьСебестоимостьТоваровПоНазначениям) КАК ТаблицаАналитик
	|";
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",                                     Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("УчитыватьСебестоимостьТоваровПоНазначениям", Запрос.Параметры.УчитыватьСебестоимостьТоваровПоНазначениям);
	
	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаНоменклатуры.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаНоменклатурыИнициализированы", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтОснований";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Ссылка                                                             КАК Ссылка,
	|	МАКСИМУМ(
	|		ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК НаправлениеДеятельности,
	|	КОЛИЧЕСТВО(
	|		РАЗЛИЧНЫЕ ЕСТЬNULL(ТаблицаТовары.Назначение.НаправлениеДеятельности,
	|			ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка))) КАК КоличествоНаправленийДеятельности
	|ПОМЕСТИТЬ ВтОснований
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПорчаТоваровУХранителя.Товары КАК ТаблицаТовары
	|		ПО ДанныеДокумента.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	&Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента           = "Документ.ПорчаТоваровУХранителя";
	СинонимТаблицыДокумента      = "";
	ВЗапросеЕстьИсточник         = Истина;
	ТекстыЗапросаВременныхТаблиц = Новый Соответствие();
	
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ЗначенияПараметров = Новый Структура();
	ЗначенияПараметров.Вставить("ИдентификаторМетаданных",
								ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяДокумента));
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(Запрос, ТекстыЗапроса, ИмяРегистра);
		ТекстыЗапросаВременныхТаблиц.Вставить("ВтОснований", ТекстЗапросаВтОснований(Запрос, ТекстыЗапроса));
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров,
			ТекстыЗапросаВременныхТаблиц);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос)
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
	   И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты =
		РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Запрос.Параметры.Валюта,
			Неопределено,
			Запрос.Параметры.Период,
			Запрос.Параметры.Организация);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл", Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",  Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	
КонецПроцедуры

Процедура УстановитьПараметрЗапросаНалогообложениеОрганизации(Запрос)
	
	Если Запрос.Параметры.Свойство("НалогообложениеОрганизации") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыУчетаПоОрганизации = УчетНДСУП.ПараметрыУчетаПоОрганизации(Запрос.Параметры.Организация, Запрос.Параметры.Период).ОсновноеНалогообложениеНДСПродажи;
	Запрос.УстановитьПараметр("НалогообложениеОрганизации", ПараметрыУчетаПоОрганизации);
	
КонецПроцедуры

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных =
	"ВЫБРАТЬ
	|	""ВидыЗапасов""                             КАК ИсточникДанных,
	|	ИСТИНА                                      КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка                     КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата                КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация         КАК Организация,
	|	ТаблицаДокумента.Ссылка.Валюта              КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО                                КАК ВалютаВзаиморасчетов,
	|	ТаблицаДокумента.Ссылка.Дата                КАК ПериодБазыНДС,
	|	ТаблицаДокумента.Ссылка.Дата                КАК ДатаКурса,
	|	ТаблицаДокумента.НомерСтроки                КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки        КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Сумма                      КАК СуммаБезНДС,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0                                           КАК СуммаНДС,
	|	0                                           КАК СуммаВзаиморасчетов,
	|	0                                           КАК СуммаНДСВзаиморасчетов,
	|	0                                           КАК СуммаБезНДСРегл,
	|	0                                           КАК СуммаБезНДСУпр,
	|	ЛОЖЬ                                        КАК БезЗалоговаяВозвратнаяТара,
	|	ЛОЖЬ                                        КАК ОтражаетсяВРасчетах,
	|	ЛОЖЬ                                        КАК ПересчитыватьПоДаннымРасчетов,
	|	НЕОПРЕДЕЛЕНО                                КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя.ВидыЗапасов КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(
		Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДатыПоступленияТоваровОрганизаций(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДатыПоступленияТоваровОрганизаций";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтВидыЗапасов", ТекстыЗапроса) Тогда
		ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Период                                                              КАК ДатаПоступления,
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Номенклатура   КАК Номенклатура,
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Характеристика КАК Характеристика,
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Серия          КАК Серия,
	|	ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Назначение     КАК Назначение,
	|	ТаблицаТовары.ВидЗапасовОприходование                                КАК ВидЗапасов,
	|	ТаблицаТовары.НомерГТД                                               КАК НомерГТД
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаТовары
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыПоступленияТоваровОрганизаций КАК ПоступленияТоваров
	|	ПО ТаблицаТовары.ВидЗапасовОприходование                               = ПоступленияТоваров.ВидЗапасов
	|	И ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Номенклатура   = ПоступленияТоваров.Номенклатура
	|	И ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Характеристика = ПоступленияТоваров.Характеристика
	|	И ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Серия          = ПоступленияТоваров.Серия
	|	И ТаблицаТовары.АналитикаУчетаНоменклатурыОприходование.Назначение     = ПоступленияТоваров.Назначение
	|	И ТаблицаТовары.НомерГТД                                               = ПоступленияТоваров.НомерГТД
	|
	|ГДЕ
	|	(ПоступленияТоваров.ДатаПоступления ЕСТЬ NULL
	|		ИЛИ ПоступленияТоваров.ДатаПоступления < НАЧАЛОПЕРИОДА(&Период, ДЕНЬ))
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ПартионныйУчет

Функция ОписаниеРегистровУчетаЗатратИСебестоимости(Документ) Экспорт
	
	ОписаниеРегистров = Новый Массив;
	ОписаниеРегистров.Добавить(Метаданные.РегистрыНакопления.СебестоимостьТоваров);
	
	Возврат ОписаниеРегистров;
	
КонецФункции

Функция УстановитьДополнительныеПараметрыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Массив;
	ДополнительныеПараметры.Добавить("НалогообложениеОрганизации");
	
	Если Запрос <> Неопределено Тогда
		УстановитьПараметрЗапросаНалогообложениеОрганизации(Запрос);
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

Функция СформироватьДополнительныеТаблицыОперацийУчетаЗатратИСебестоимости(Документ, Запрос = Неопределено, ТекстыЗапроса = Неопределено) Экспорт
	
	ДополнительныеТаблицы = Новый Массив;
	ДополнительныеТаблицы.Добавить("ВтВидыЗапасов");
	
	Если Запрос <> Неопределено Тогда
	
		Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса(ДополнительныеТаблицы[0], ТекстыЗапроса) Тогда
			ТекстЗапросаВтВидыЗапасов(Запрос, ТекстыЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДополнительныеТаблицы;
	
КонецФункции

Функция ОписаниеОперацийУчетаСебестоимости(Документ) Экспорт
	
	ОписаниеОпераций = Новый Массив;
	
	#Область ВыбытиеПоФиксированнойСтоимости_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов 					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС			КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование					КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование	  								КАК КорВидЗапасов,
	|	&СтатьяРасходов 															КАК СтатьяРасходовАктивов,
	|	&АналитикаРасходов 															КАК АналитикаРасходовАктивов,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ОтклонениеВСтоимостиТоваров)  КАК СтатьяДоходов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры.Номенклатура					КАК АналитикаДоходов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 					КАК Сделка,
	|	ТаблицаДокумента.Подразделение 	КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО 					КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 					КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 			КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 	КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.СуммаУпр 			КАК Стоимость,
	|	ТаблицаВидыЗапасов.СуммаУпр 			КАК СтоимостьБезНДС,
	|	ТаблицаВидыЗапасов.СуммаРегл 			КАК СтоимостьРегл,
	|	ТаблицаВидыЗапасов.СуммаУпр 			КАК СтоимостьУпр,
	|	0										КАК КорСтоимость,
	|
	// Прочие поля
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваровСПереоценкой)
	|	КОНЕЦ 																		КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 										КАК ИдентификаторФинЗаписи,
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|	КОНЕЦ 																		КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВыбытиеПоФиксированнойСтоимости,
		ТекстЗапроса);
	
	#КонецОбласти

	#Область ВнутреннееПоступление_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК ДокументИсточник,
	|	НЕОПРЕДЕЛЕНО			КАК ПериодДокументаИсточника,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 								КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование					КАК ВидЗапасов,
	|	ВЫБОР КОГДА НЕ &Исправление
	|		ТОГДА ТаблицаДокумента.Ссылка
	|		ИНАЧЕ ТаблицаДокумента.ИсправляемыйДокумент
	|	КОНЕЦ 														КАК Партия,
	|	ВЫБОР КОГДА ТаблицаВидыЗапасов.ВидДеятельностиНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)
	|		ТОГДА &НалогообложениеОрганизации
	|		ИНАЧЕ ТаблицаВидыЗапасов.ВидДеятельностиНДС
	|	КОНЕЦ 														КАК ВидДеятельностиНДС,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС						КАК ВидДеятельностиНДСДокумента,
	|
	// Поля аналитики учета партий
	|	ТаблицаВидыЗапасов.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ВЫБОР КОГДА НЕ &ФИФОСкользящаяОценка
	|		ТОГДА ТаблицаВидыЗапасов.АналитикаУчетаПартий
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ 									КАК КорАналитикаУчетаПартий,
	|	0 										КАК КодСтроки,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО						КАК КорАналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО						КАК КорВидЗапасов,
	|	НЕОПРЕДЕЛЕНО						КАК КорГруппаПродукции,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО 						КАК Сделка,
	|	ТаблицаДокумента.Подразделение 		КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО 						КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 						КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 						 		КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 				 		КАК ИдентификаторСтроки,
	|	ТаблицаВидыЗапасов.СуммаУпр 						 		КАК Стоимость,
	|	ТаблицаВидыЗапасов.СуммаУпр 						 		КАК СтоимостьБезНДС,
	|	ТаблицаВидыЗапасов.СуммаРегл 								КАК СтоимостьРегл,
	|	0                                   				 		КАК НДСРегл,
	|	ТаблицаВидыЗапасов.СуммаУпр 						 		КАК СтоимостьУпр,
	|	0 													 		КАК НДСУпр,
	|	ТаблицаВидыЗапасов.СуммаЗабалансУпр					 		КАК СтоимостьЗабалансовая,
	|	ТаблицаВидыЗапасов.СуммаЗабалансРегл				 		КАК СтоимостьЗабалансоваяРегл,
	|	0													 		КАК ДопРасходы,
	|	0													 		КАК ДопРасходыБезНДС,
	|	0															КАК ДопРасходыРегл,
	|	0															КАК ДопРасходыУпр,
	|	0 												 			КАК ПостояннаяРазница,
	|	0 													 		КАК ВременнаяРазница,
	|	0													 		КАК КорСтоимость,
	|
	// Прочие поля
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваровСПереоценкой)
	|	КОНЕЦ 																		КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 										КАК ИдентификаторФинЗаписи,
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|	КОНЕЦ 																		КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И НЕ ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.ВнутреннееПоступление,
		ТекстЗапроса);
	
	#КонецОбласти

	#Область Перемещение_Товар
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата 	КАК Период,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО 			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация 					 	КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов			 		 	КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС 			 	КАК ВидДеятельностиНДС,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС				КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО                                        		КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО 									   			КАК КорПартия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование	КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование					КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО							КАК Сделка,
	|	ТаблицаДокумента.Подразделение			КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО							КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО 							КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество 			КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваров)					КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки 										КАК ИдентификаторФинЗаписи,
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|	КОНЕЦ 																		КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ТипЗапасов <> ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|	И ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Перемещение,
		ТекстЗапроса);
		
	#КонецОбласти

	#Область Перемещение_ТоварНаХранении
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	// Описание документа
	|	ТаблицаДокумента.Дата	КАК Период,
	|	ТаблицаДокумента.Ссылка	КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО			КАК КорректируемыйДокумент,
	|
	// Поля учета номенклатуры
	|	ТаблицаДокумента.Организация					КАК Организация,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС			КАК ВидДеятельностиНДС,
	|	ТаблицаВидыЗапасов.ВидДеятельностиНДС			КАК ВидДеятельностиНДСДокумента,
	|
	// Корреспондирующие поля
	|	НЕОПРЕДЕЛЕНО										КАК КорОрганизация,
	|	НЕОПРЕДЕЛЕНО										КАК КорПартия,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры		КАК КорАналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов						КАК КорВидЗапасов,
	|
	// Поля аналитики финансового учета
	|	НЕОПРЕДЕЛЕНО							КАК Сделка,
	|	ТаблицаДокумента.Подразделение			КАК Подразделение,
	|	НЕОПРЕДЕЛЕНО							КАК Менеджер,
	|	НЕОПРЕДЕЛЕНО							КАК ГруппаПродукции,
	|
	// Количественные и суммовые показатели
	|	ТаблицаВидыЗапасов.Количество			КАК Количество,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	КАК ИдентификаторСтроки,
	|
	// Прочие поля
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПорчаТоваровСПереоценкой)
	|	КОНЕЦ									КАК ХозяйственнаяОперация,
	|	ТаблицаВидыЗапасов.ИдентификаторСтроки	КАК ИдентификаторФинЗаписи,
	|	ВЫБОР КОГДА ТаблицаДокумента.ПриходоватьТоварыПоСебестоимостиСписания
	|		ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПорчаТоваров)
	|	КОНЕЦ									КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ТаблицаДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|	И ТаблицаВидыЗапасов.ТипЗапасов = ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)
	|";
	
	РасчетСебестоимостиПроведениеДокументов.ДобавитьОписаниеОперацииДляОтраженияВУчетеСебестоимости(
		ОписаниеОпераций,
		Перечисления.ОперацииУчетаСебестоимости.Перемещение,
		ТекстЗапроса);
		
	#КонецОбласти
	
	Возврат ОписаниеОпераций;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Акт о порче товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор                  = "АктПорчиТоваров";
	КомандаПечати.Представление                  = НСтр("ru = 'Акт о порче товаров'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФункциональныеОпции            = "ИспользоватьКачествоТоваров";
	
	ПорчаТоваровУХранителяЛокализация.ДобавитьКомандыПечати(КомандыПечати);
	
КонецПроцедуры

// Формирует печатные формы объекта.
//
// Параметры:
//	МассивОбъектов        - Массив           - массив ссылок на объекты которые нужно распечатать,
//	ПараметрыПечати       - Структура        - структура дополнительных параметров печати,
//	КоллекцияПечатныхФорм - ТаблицаЗначений  - сформированные табличные документы,
//	ОбъектыПечати         - СписокЗначений   - список объектов печати,
//	ПараметрыВывода       - Структура        - параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктПорчиТоваров") Тогда

		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм, 
			"АктПорчиТоваров",
			НСтр("ru = 'Акт о порче товаров'"),
			ПечатьАктаПорчиТоваровУХранителя(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	ПорчаТоваровУХранителяЛокализация.Печать(
		МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
	
	ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(
		ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

Функция ПечатьАктаПорчиТоваровУХранителя(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДопКолонка = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	ВыводитьДопКолонку = ЗначениеЗаполнено(ДопКолонка);

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка                              КАК Ссылка,
	|	Документ.Номер                               КАК Номер,
	|	Документ.Дата                                КАК Дата,
	|	Документ.ИсправляемыйДокумент.Номер          КАК НомерИсправляемогоДокумента,
	|	Документ.ИсправляемыйДокумент.Дата           КАК ДатаИсправляемогоДокумента,
	|	Документ.Исправление                         КАК Исправление,
	|	Документ.Договор                             КАК Договор,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Договор)              КАК ДоговорПредставление,
	|	Документ.Подразделение                       КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(Документ.Подразделение)        КАК ПодразделениеПредставление,
	|	Документ.Организация                         КАК Организация,
	|	Документ.Организация.Префикс                 КАК Префикс,
	|	Документ.Ответственный.ФизическоеЛицо        КАК Ответственный,
	|	Документ.ПричинаПорчи                        КАК ПричинаПорчи 
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК Документ
	|ГДЕ
	|	Документ.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки                                               КАК НомерСтроки,
	|	ТаблицаТовары.Номенклатура                                              КАК НоменклатураИсходная,
	|	ТаблицаТовары.Номенклатура.НаименованиеПолное                           КАК НоменклатураИсходнаяПредставление,
	|	ТаблицаТовары.Характеристика.НаименованиеПолное                         КАК ХарактеристикаИсходнаяПредставление,
	|	&ДопКолонкаСписание,
	|	ТаблицаТовары.НоменклатураОприходование                                 КАК НоменклатураИспорченная,
	|	&ДопКолонкаОприходование,
	|	ТаблицаТовары.НоменклатураОприходование.НаименованиеПолное              КАК НоменклатураИспорченнаяПредставление,
	|	ТаблицаТовары.ХарактеристикаОприходование.НаименованиеПолное            КАК ХарактеристикаИспорченнаяПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Серия)                                      КАК СерияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.Номенклатура.ЕдиницаИзмерения)              КАК ЕдиницаИзмеренияИсходнаяПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТовары.НоменклатураОприходование.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияИспорченнаяПредставление,
	|	ТаблицаТовары.Количество                                                КАК Количество,
	|	ТаблицаТовары.Ссылка                                                    КАК Ссылка
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";	
	
	Если ВыводитьДопКолонку Тогда
		
		Запрос.Текст =
			СтрЗаменить(
				Запрос.Текст,
				"&ДопКолонкаСписание,",
				"ТаблицаТовары.Номенклатура." + ДопКолонка +" КАК ДопКолонкаСписание,");
		
		Запрос.Текст =
			СтрЗаменить(
				Запрос.Текст,
				"&ДопКолонкаОприходование,",
				"ТаблицаТовары.НоменклатураОприходование." + ДопКолонка +"  КАК ДопКолонкаОприходование,");
		
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопКолонкаСписание,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопКолонкаОприходование,", "");
	КонецЕсли;
	
	РеквизитыДокумента = Новый Структура("Номер, Дата, Префикс, Представление, НомерИсправляемогоДокумента, ДатаИсправляемогоДокумента");
	СинонимДокумента = НСтр("ru='Акт о порче товаров'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПорчаТоваровУХранителя_АктОПорчеТоваровУХранителя";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ПорчаТоваровУХранителя.ПФ_MXL_АктОПорчеТоваровУХранителя");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПодразделения") Тогда
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	Иначе
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокБезПодразделения");
	КонецЕсли;
	
	ОбластьНомераШапка              = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
	ОбластьКодовИсходнаяШапка       = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодовИсходная");
	ОбластьКодовИспорченнаяШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодовИспорченная");
	ОбластьТоварИсходныйШапка       = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварИсходный");
	ОбластьТоварИспорченныйШапка    = Макет.ПолучитьОбласть("ШапкаТаблицы|ТоварИспорченный");
	ОбластьЕдИзмИсходнаяШапка       = Макет.ПолучитьОбласть("ШапкаТаблицы|ЕдиницаИзмеренияИсходная");
	ОбластьЕдИзмИспорченнаяШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы|ЕдиницаИзмеренияИспорченная");
	ОбластьДанныеШапка              = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");

	Если Не ВыводитьДопКолонку Тогда

		Макет.Область("ТоварИсходный").ШиринаКолонки = Макет.Область("ТоварИсходный").ШиринаКолонки
				+ Макет.Область("КолонкаКодовИсходная").ШиринаКолонки;
		Макет.Область("ТоварИспорченный").ШиринаКолонки = Макет.Область("ТоварИспорченный").ШиринаКолонки
				+ Макет.Область("КолонкаКодовИспорченная").ШиринаКолонки;

	КонецЕсли;

	ОбластьНомераСтрока              = Макет.ПолучитьОбласть("Строка|НомерСтроки");
	ОбластьКодовИсходнаяСтрока       = Макет.ПолучитьОбласть("Строка|КолонкаКодовИсходная");
	ОбластьКодовИспорченнаяСтрока  = Макет.ПолучитьОбласть("Строка|КолонкаКодовИспорченная");
	ОбластьТоварИсходныйСтрока       = Макет.ПолучитьОбласть("Строка|ТоварИсходный");
	ОбластьТоварИспорченныйСтрока    = Макет.ПолучитьОбласть("Строка|ТоварИспорченный");
	ОбластьЕдИзмИсходнаяСтрока       = Макет.ПолучитьОбласть("Строка|ЕдиницаИзмеренияИсходная");
	ОбластьЕдИзмИспорченнаяСтрока  = Макет.ПолучитьОбласть("Строка|ЕдиницаИзмеренияИспорченная");
	ОбластьДанныхСтрока              = Макет.ПолучитьОбласть("Строка|Данные");

	ОбластьПодвалТаблицы  = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьПодписи        = Макет.ПолучитьОбласть("Подписи");
	ОбластьСуммаПрописью  = Макет.ПолучитьОбласть("СуммаПрописью");
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	РезультатыЗапроса = Запрос.ВыполнитьПакет(); 
	
	ВыборкаДокументы = РезультатыЗапроса[0].Выбрать();
	ВыборкаПоТабличнымЧастям = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПервыйДокумент = Истина;
	Пока ВыборкаДокументы.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;

		// Выводим шапку накладной.
		ЗаполнитьЗначенияСвойств(РеквизитыДокумента, ВыборкаДокументы);
		ОбластьЗаголовок.Параметры.Заполнить(ВыборкаДокументы);
		ДанныеОбласти = Новый Структура;
		НаименованияНаДату = ОрганизацииПовтИсп.НаименованияНаДату(ВыборкаДокументы.Организация, ВыборкаДокументы.Дата);
		ДанныеОбласти.Вставить("ОрганизацияПредставление", НаименованияНаДату.НаименованиеСокращенное);
		ДанныеОбласти.Вставить("ТекстЗаголовка",
						ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(РеквизитыДокумента, СинонимДокумента));
		ОбластьЗаголовок.Параметры.Заполнить(ДанныеОбласти);
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабДокумент, Макет, ОбластьЗаголовок, ВыборкаДокументы.Ссылка);
		ТабДокумент.Вывести(ОбластьЗаголовок);

		// Вывод шапки.
		ТабДокумент.Вывести(ОбластьНомераШапка);

		Если ВыводитьДопКолонку Тогда

			ТабДокумент.Присоединить(ОбластьКодовИсходнаяШапка);

		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТоварИсходныйШапка);
		ТабДокумент.Присоединить(ОбластьЕдИзмИсходнаяШапка);
		
		Если ВыводитьДопКолонку Тогда

			ТабДокумент.Присоединить(ОбластьКодовИспорченнаяШапка);

		КонецЕсли;
		ТабДокумент.Присоединить(ОбластьТоварИспорченныйШапка);
		ТабДокумент.Присоединить(ОбластьЕдИзмИспорченнаяШапка);

		ТабДокумент.Присоединить(ОбластьДанныеШапка);

		ВсегоНаименований = 0;

		// Вывод строк.
		ВыборкаПоТабличнымЧастям.НайтиСледующий(Новый Структура("Ссылка",ВыборкаДокументы.Ссылка));
		
		ВыборкаПоСтрокам = ВыборкаПоТабличнымЧастям.Выбрать();
		
		Пока ВыборкаПоСтрокам.Следующий() Цикл

			ОбластьНомераСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Вывести(ОбластьНомераСтрока);

			Если ВыводитьДопКолонку Тогда

				ОбластьКодовИсходнаяСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабДокумент.Присоединить(ОбластьКодовИсходнаяСтрока);

			КонецЕсли;

			// Номенклатура.
			ДопПараметрыПредставлениеНоменклатуры = НоменклатураКлиентСервер.ДополнительныеПараметрыПредставлениеНоменклатурыДляПечати();
			ДопПараметрыПредставлениеНоменклатуры.КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			
			ОбластьТоварИсходныйСтрока.Параметры.НоменклатураИсходная = ВыборкаПоСтрокам.НоменклатураИсходная;
			ОбластьТоварИсходныйСтрока.Параметры.НоменклатураИсходнаяПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокам.НоменклатураИсходнаяПредставление,
					ВыборкаПоСтрокам.ХарактеристикаИсходнаяПредставление,
					,
					ВыборкаПоСтрокам.СерияПредставление,
					ДопПараметрыПредставлениеНоменклатуры);
					
			ТабДокумент.Присоединить(ОбластьТоварИсходныйСтрока);
			
			ОбластьЕдИзмИсходнаяСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Присоединить(ОбластьЕдИзмИсходнаяСтрока);
			
			Если ВыводитьДопКолонку Тогда

				ОбластьКодовИспорченнаяСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
				ТабДокумент.Присоединить(ОбластьКодовИспорченнаяСтрока);

			КонецЕсли;

			// Номенклатура.
			ОбластьТоварИспорченныйСтрока.Параметры.НоменклатураИспорченная = ВыборкаПоСтрокам.НоменклатураИспорченная;
			ОбластьТоварИспорченныйСтрока.Параметры.НоменклатураИспорченнаяПредставление = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
					ВыборкаПоСтрокам.НоменклатураИспорченнаяПредставление,
					ВыборкаПоСтрокам.ХарактеристикаИспорченнаяПредставление,
					ВыборкаПоСтрокам.СерияПредставление,
					,
					ДопПараметрыПредставлениеНоменклатуры);
					
			ТабДокумент.Присоединить(ОбластьТоварИспорченныйСтрока);
			
			ОбластьЕдИзмИспорченнаяСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			ТабДокумент.Присоединить(ОбластьЕдИзмИспорченнаяСтрока);

			// Данные количестве.
			ОбластьДанныхСтрока.Параметры.Заполнить(ВыборкаПоСтрокам);
			
			ТабДокумент.Присоединить(ОбластьДанныхСтрока);

			ВсегоНаименований = ВсегоНаименований + 1;

		КонецЦикла;

		// Вывод подвала.
		ТабДокумент.Вывести(ОбластьПодвалТаблицы);
		// Вывод Суммы прописью.
		
		ТекстИтоговойСтроки = НСтр("ru = 'Всего наименований %ВсегоНаименований%'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ТекстИтоговойСтроки = СтрЗаменить(ТекстИтоговойСтроки,"%ВсегоНаименований%", ВсегоНаименований);
		
		ОбластьСуммаПрописью.Параметры.ИтоговаяСтрока = ТекстИтоговойСтроки;

		ТабДокумент.Вывести(ОбластьСуммаПрописью);

		// Вывод подписей.
		ОбластьПодписи.Параметры.Ответственный = ФизическиеЛицаУТ.ФамилияИнициалыФизЛица(ВыборкаДокументы.Ответственный,
			?(ВыборкаДокументы.Исправление, ВыборкаДокументы.ДатаИсправляемогоДокумента, ВыборкаДокументы.Дата));

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);

	КонецЦикла;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции

// Заполняет структуру данными о получателях печатных форм.
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - см. ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта.СтруктураДанныхОбъектаПечати
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Партнер";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона:
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения:
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение- список используемых в шаблоне реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение - значения реквизитов
//      * Ключ     - Строка - имя вложения в шаблоне;
//      * Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область УнифицированныеМетодыПоХозяйственнымОперациям

#Область Проведение

// Возвращает параметры заполнения видов запасов для документа "Пересортица товаров у хранителя".
// 
// Параметры:
//  СторнируемыйДокумент - ДокументСсылка.ПорчаТоваровУХранителя - 
//
// Возвращаемое значение:
//  см. ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов
//
Функция ПараметрыЗаполненияВидовЗапасов(СторнируемыйДокумент) Экспорт
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	ПараметрыЗаполнения.ПодбиратьВТЧТоварыПринятыеНаОтветственноеХранение.Вставить(Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи, "Всегда");
	ПараметрыЗаполнения.СторнируемыйДокумент = СторнируемыйДокумент;
	
	Возврат ПараметрыЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ХозяйственныеОперации

// Возвращает хозяйственную операцию договора.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ХозяйственныеОперации - 
// 
Функция ХозяйственнаяОперацияДоговора() Экспорт
	
	Возврат Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи;
	
КонецФункции

#КонецОбласти

#Область ФункциональныеОпции

// Возвращает признак применяемости соглашений с клиентами
//
// Возвращаемое значение:
//  Булево - 
//
Функция СоглашенияСКлиентамиПрименимы() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак использование соглашений с клиентами
//
// Возвращаемое значение:
//  Булево -
//
Функция ИспользоватьСоглашенияСКлиентами() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");

КонецФункции

#КонецОбласти

#Область Форма

//Получает договор по умолчанию.
//
// Параметры:
//  Объект - ДанныеФормыСтруктура - 
//
// Возвращаемое значение:
//  СправочникСсылка.ДоговорыКонтрагентов - 
//
Функция ПолучитьДоговорПоУмолчанию(Объект) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
					Объект, ХозяйственнаяОперацияДоговора(), Неопределено, Объект.НаправлениеДеятельности);
	Иначе
		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
					Объект, ХозяйственнаяОперацияДоговора());
	КонецЕсли;
	
	Возврат Договор;
	
КонецФункции

// Устанавливает доступность элемента договор.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//  Договор - СправочникСсылка.ДоговорыКонтрагентов, Неопределено -
//
Процедура УстановитьДоступностьДоговора(Форма, Объект, Договор = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;

	ПродажиСервер.УстановитьДоступностьДоговора(
		Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Договор);
	
КонецПроцедуры

// Настраивает форму.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  Номер - Число - 
//  Дата  - Дата - 
//
Процедура НастроитьФорму(Форма, Номер, Дата) Экспорт
	
	Элементы  = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Форма.АвтоЗаголовок = Истина;
	Форма.Заголовок     = ЗаголовокФормыДокумента(Не ЗначениеЗаполнено(Параметры.Ключ), Номер, Дата);

	Элементы.Партнер.Заголовок = НСтр("ru = 'Клиент'");
	
	Элементы.Соглашение.Видимость = ИспользоватьСоглашенияСКлиентами();
	
КонецПроцедуры

// Настраивает параметры выбора и связи параметров выбора реквизитов формы.
//
// Параметры:
//  Форма  - ФормаКлиентскогоПриложения -
//  Объект - ДанныеФормыСтруктура -
//
Процедура НастроитьПараметрыВыбораЭлементов(Форма, Объект) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Партнер
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Клиент", Истина));
			
	Элементы.Партнер.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	// Контрагент
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ЗаголовокПоПартнеру", НСтр("ru = 'По клиенту'")));
			
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
	//Договор
	МассивПараметровВыбора = Новый Массив;
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.Статус", Перечисления.СтатусыДоговоровКонтрагентов.Действует));
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора("Отбор.ХозяйственнаяОперация", ХозяйственнаяОперацияДоговора()));
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));


	МассивСвязейПараметровВыбора = Новый Массив;
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать));
		
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Партнер", "Объект.Партнер", РежимИзмененияСвязанногоЗначения.Очищать));
	
	МассивСвязейПараметровВыбора.Добавить(
		Новый СвязьПараметраВыбора("Соглашение", "Объект.Соглашение", РежимИзмененияСвязанногоЗначения.НеИзменять));
		
	Элементы.Договор.ПараметрыВыбора       = Новый ФиксированныйМассив(МассивПараметровВыбора);
	Элементы.Договор.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязейПараметровВыбора);
	
	// Направление деятельности
	МассивПараметровВыбора = Новый Массив;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.УчетДоходов", Истина));
	
	Элементы.НаправлениеДеятельности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Возвращает заголовок формы документа передача товаров хранителю.
//
// Параметры:
//  НовыйДокумент - Булево - 
//  Номер - Число - 
//  Дата - Дата - 
//
// Возвращаемое значение:
//  Строка - 
//
Функция ЗаголовокФормыДокумента(НовыйДокумент, Номер, Дата) Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает представление документа передача товаров хранителю.
//
// Возвращаемое значение:
//  Строка - 
//
Функция ПредставлениеОбъекта() Экспорт
	
	Возврат НСтр("ru = 'Порча товаров у хранителя'");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбщиеМетодыПоХозяйственнымОперациям

#Область ОбработчикиДействий

// Получает серверный обработчик действий в зависимости от хозяйственной операции
//
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации, Неопределено - 
//
// Возвращаемое значение:
//  ОбщийМодуль, ДокументМенеджер - обработчик менеджер
//
Функция ОбработчикДействий(ХозяйственнаяОперация = Неопределено) Экспорт
	
		ОбработчикДействий = Документы.ПорчаТоваровУХранителя;
	
	Возврат ОбработчикДействий;
	
КонецФункции

#КонецОбласти

#Область Форма

// Настраивает реквизит ХозяйственнаяОперация
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - 
//  Объект - ДанныеФормыСтруктура - 
//
Процедура НастроитьРеквизитХозяйственнаяОперация(Форма, Объект) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ХозяйственнаяОперация.СписокВыбора.Очистить();
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачуНаОтветственноеХранениеСПравомПродажи") Тогда
		Элементы.ХозяйственнаяОперация.СписокВыбора.Добавить(
			Перечисления.ХозяйственныеОперации.ПорчаТоваровУХранителя);
	КонецЕсли;
	
	
	Элементы.ХозяйственнаяОперация.Видимость = Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() > 1;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация)
	   И Элементы.ХозяйственнаяОперация.СписокВыбора.Количество() = 1 Тогда
		Объект.ХозяйственнаяОперация = Элементы.ХозяйственнаяОперация.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.ПорчаТоваровУХранителя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Некритичный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("6c83e525-7c9a-4d1a-be0e-a27a888a1cee");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.ПорчаТоваровУХранителя.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Порча товаров у хранителя"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с перечисления ""Типы налогов"" на справочник ""Виды налогов и взносов"".';"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПорчаТоваровУХранителя.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ПорчаТоваровУХранителя.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ПорчаТоваровУХранителя.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПорчаТоваровУХранителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПорчаТоваровУХранителя КАК ПорчаТоваровУХранителя
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ПорчаТоваровУХранителя.АналитикаАктивовПассивов) = ТИП(Перечисление.УдалитьТипыНалогов)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	ПроблемныхОбъектов = 0;
	ИсключенияПриОбновлении = Новый Массив;
	
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Не удалось обработать документы ""Порча товаров у хранителя"" по обработчику:'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с типом перечисление типы налогов на справочник виды налогов и взносов';"));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеДляОбновления.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументов
		|ИЗ
		|	&ДанныеДляОбновления КАК ДанныеДляОбновления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаДокументов.Ссылка КАК Ссылка,
		|	ДанныеДокумента.ВерсияДанных КАК ВерсияДанных
		|ИЗ
		|	ТаблицаДокументов КАК ТаблицаДокументов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПорчаТоваровУХранителя КАК ДанныеДокумента
		|		ПО ТаблицаДокументов.Ссылка = ДанныеДокумента.Ссылка
		|";
	
	Запрос.УстановитьПараметр("ДанныеДляОбновления", ОбновляемыеДанные);
	
	Документ = Запрос.Выполнить().Выбрать();
	
	Пока Документ.Следующий() Цикл
		
		ПричинаИсключения = 0;
		Рекомендация = "";
		
		НачатьТранзакцию();
		
		Попытка
			
			ПричинаИсключения = 1; // Блокировка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ОбновлениеИнформационнойБазыУТ.ПроверитьПолучитьОбъект(
				Документ.Ссылка, Документ.ВерсияДанных, Параметры.Очередь); // ДокументОбъект
			
			ПричинаИсключения = 2; // ПлохиеДанные
			Рекомендация = НСтр("ru = 'Перепроведите документ вручную.'");
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "АналитикаАктивовПассивов");
				ОбъектИзменен = Истина;
			КонецЕсли;
			
			ПричинаИсключения = 3; // Запись
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ПроблемныхОбъектов = ПроблемныхОбъектов + 1;
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
			Если ПричинаИсключения = 2 Тогда
				
				ОписаниеПроблемы = ОбновлениеИнформационнойБазыУТ.ПроблемаСДанными(
					Документ.Ссылка, Рекомендация, ИнформацияОбОшибке());
				ИсключенияПриОбновлении.Добавить(ОписаниеПроблемы);
				
			ИначеЕсли ПричинаИсключения = 3 Тогда
				
				ОбновлениеИнформационнойБазыУТ.ЗаписатьПлохиеДанные(
					ИсключенияПриОбновлении, ОбъектовОбработано, Параметры);
				ВызватьИсключение СтрСоединить(СписокОписаний, Символы.ПС);
				
			КонецЕсли;
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
	Если ОбъектовОбработано = 0 И ПроблемныхОбъектов <> 0 Тогда
		
		СписокОписаний.Добавить(НСтр("ru = 'Всего пропущено: %1'"));
		ТекстСообщения = СтрШаблон(СтрСоединить(СписокОписаний, Символы.ПС), ПроблемныхОбъектов);
		ВызватьИсключение ТекстСообщения;
		
	Иначе
		
		ШаблонСообщения = НСтр("ru = 'Обработана порция документов ""Порча товаров у хранителя"": %1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОбъектовОбработано);
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация, , ,
			ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
