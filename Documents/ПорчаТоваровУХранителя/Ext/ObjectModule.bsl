#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет условия продаж в документе списания товаров у хранителя.
//
// Параметры:
//	УсловияПродаж - Структура - Данные для заполнения.
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	
	Если УсловияПродаж.Организация <> Организация
		И ЗначениеЗаполнено(УсловияПродаж.Организация) Тогда
		
		Организация = УсловияПродаж.Организация;
		
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент)
			И УсловияПродаж.Контрагент <> Контрагент Тогда
			
			Контрагент = УсловияПродаж.Контрагент;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Обработчик = Документы.ПорчаТоваровУХранителя.ОбработчикДействий(ХозяйственнаяОперация);
	Договор = Обработчик.ПолучитьДоговорПоУмолчанию(ЭтотОбъект);
	РеквизитыДоговора = Новый Структура("Валюта, НаправлениеДеятельности, Подразделение", "ВалютаВзаиморасчетов");
	Справочники.ДоговорыКонтрагентов.ЗаполнитьРеквизитыДокумента(ЭтотОбъект, Договор, РеквизитыДоговора);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по умолчанию в документе списания товаров у хранителя.
//
Процедура ЗаполнитьУсловияПродажПоУмолчанию() Экспорт
	
	Обработчик = Документы.ПорчаТоваровУХранителя.ОбработчикДействий(ХозяйственнаяОперация);
	ИспользоватьСоглашенияСКлиентами = Обработчик.ИспользоватьСоглашенияСКлиентами();
	
	Если ЗначениеЗаполнено(Партнер)
		Или Не ИспользоватьСоглашенияСКлиентами Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВыбранноеСоглашение",   Соглашение);
		ПараметрыОтбора.Вставить("ПустаяСсылкаДокумента", Документы.ПорчаТоваровУХранителя.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ХозяйственныеОперации", Обработчик.ХозяйственнаяОперацияДоговора());
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
										Партнер, ПараметрыОтбора, Обработчик.СоглашенияСКлиентамиПрименимы());
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			
			Если Не ИспользоватьСоглашенияСКлиентами
				Или (Соглашение <> УсловияПродажПоУмолчанию.Соглашение
					И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение)) Тогда
				
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				
				ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
				
			Иначе
				Соглашение = УсловияПродажПоУмолчанию.Соглашение;
				
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
				
				Договор = Обработчик.ПолучитьДоговорПоУмолчанию(ЭтотОбъект);
			КонецЕсли;
			
		Иначе
			Соглашение = Неопределено;
			
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в документе списания товаров у хранителя.
//
Процедура ЗаполнитьУсловияПродажПоСоглашению() Экспорт
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение);
	
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
КонецПроцедуры

#Область АналитикиУчетаНоменклатуры

// Заполняет аналитики учета номенклатуры. Используется в отчете ОстаткиТоваровОрганизаций.
//
Процедура ЗаполнитьАналитикиУчетаНоменклатуры() Экспорт
	
	ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
	
КонецПроцедуры

// Инициализирует параметры заполнения видов запасов дополнительных свойств документа, используемых при записи документа
// в режиме 'Проведения' или 'Отмены проведения'.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.Сторно, ДокументОбъект.ПорчаТоваровУХранителя - документ сторно или сторнируемый документ.
//	РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//
Процедура ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ДокументОбъект, РежимЗаписи = Неопределено) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполненияВидовЗапасов());
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

// Функция формирует временные данные документа.
//
// Возвращаемое значение:
//	МенеджерВременныхТаблиц - Менеджер временных таблиц.
//
Функция ВременныеТаблицыДанныхДокумента() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	&Дата                                                      КАК Дата,
	|	&Партнер                                                   КАК Партнер,
	|	&Контрагент                                                КАК Контрагент,
	|	&Соглашение                                                КАК Соглашение,
	|	&ХозяйственнаяОперация                                     КАК ХозяйственнаяОперация,
	|	&Организация                                               КАК Организация,
	|	&Договор                                                   КАК Договор,
	|	&Валюта                                                    КАК Валюта,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Подразделение КАК Справочник.СтруктураПредприятия).ВариантОбособленногоУчетаТоваров =
	|								ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоМенеджерамПодразделения)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				ТОГДА &Ответственный
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК Менеджер,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Сделка КАК Справочник.СделкиСКлиентами).ОбособленныйУчетТоваровПоСделке
	|			И &ФормироватьВидыЗапасовПоСделкам
	|				ТОГДА &Сделка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК Сделка,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(&Подразделение КАК Справочник.СтруктураПредприятия).ВариантОбособленногоУчетаТоваров =
	|								ЗНАЧЕНИЕ(Перечисление.ВариантыОбособленногоУчетаТоваров.ПоПодразделению)
	|			И &ФормироватьВидыЗапасовПоПодразделениямМенеджерам
	|				ТОГДА &Подразделение
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	&ТипЗапасов                                                КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                             КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                            КАК Номенклатура,
	|	ТаблицаТоваров.НоменклатураОприходование               КАК НоменклатураОприходование,
	|	ТаблицаТоваров.Характеристика                          КАК Характеристика,
	|	ТаблицаТоваров.ХарактеристикаОприходование             КАК ХарактеристикаОприходование,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|	ТаблицаТоваров.Назначение                              КАК Назначение,
	|	ТаблицаТоваров.ПодНазначение                           КАК ПодНазначение,
	|	ТаблицаТоваров.Серия                                   КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий                     КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.Количество                              КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				ИЛИ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|			ТОГДА 0
	|		ИНАЧЕ &ТекстПоляТаблицаТоваровКоличествоПоРНПТ_
	|	КОНЕЦ                                                  КАК КоличествоПоРНПТ,
	|	ТаблицаТоваров.Цена                                    КАК Цена,
	|	ТаблицаТоваров.ЦенаЗабаланс                            КАК ЦенаЗабаланс,
	|	&ТекстПоляТаблицаТоваровНомерГТД_                      КАК НомерГТД
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|//////////////////////////////////////////////////////////////////////////////// 2
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки                             КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура                            КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                          КАК Характеристика,
	|	ТаблицаТоваров.Назначение                              КАК Назначение,
	|	ТаблицаТоваров.Серия                                   КАК Серия,
	|	ТаблицаТоваров.СтатусУказанияСерий                     КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.НоменклатураОприходование               КАК НоменклатураОприходование,
	|	ТаблицаТоваров.ХарактеристикаОприходование             КАК ХарактеристикаОприходование,
	|	ТаблицаТоваров.ПодНазначение                           КАК ПодНазначение,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|	ТаблицаТоваров.НомерГТД                                КАК НомерГТД,
	|	&Договор                                               КАК Склад,
	|	&Сделка                                                КАК Сделка,
	|	ТаблицаТоваров.Количество                              КАК Количество,
	|	ТаблицаТоваров.КоличествоПоРНПТ                        КАК КоличествоПоРНПТ,
	|	ТаблицаТоваров.Цена                                    КАК Цена,
	|	ТаблицаТоваров.ЦенаЗабаланс                            КАК ЦенаЗабаланс,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка)            КАК СтавкаНДС,
	|	0                                                      КАК СуммаСНДС,
	|	0                                                      КАК СуммаНДС,
	|	0                                                      КАК СуммаВознаграждения,
	|	0                                                      КАК СуммаНДСВознаграждения,
	|	ИСТИНА                                                 КАК ПодбиратьВидыЗапасов
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 3
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                             КАК НомерСтроки,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаВидыЗапасов.ВидЗапасов                              КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование                 КАК ВидЗапасовОприходование,
	|	ТаблицаВидыЗапасов.НомерГТД                                КАК НомерГТД,
	|	ТаблицаВидыЗапасов.Количество                              КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|				ИЛИ НАЧАЛОПЕРИОДА(&Дата, МЕСЯЦ) < &ДатаНачалаУчетаПрослеживаемыхИмпортныхТоваров
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаВидыЗапасов.КоличествоПоРНПТ
	|	КОНЕЦ                                                      КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.Сумма                                   КАК Сумма,
	|	ТаблицаВидыЗапасов.СуммаЗабаланс                           КАК СуммаЗабаланс,
	|	&ВидыЗапасовУказаныВручную                                 КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ВтВидыЗапасов
	|ИЗ
	|	&ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 4
	|ВЫБРАТЬ
	|	ТаблицаВидыЗапасов.НомерСтроки                             КАК НомерСтроки,
	|	Аналитика.Номенклатура                                     КАК Номенклатура,
	|	Аналитика.Характеристика                                   КАК Характеристика,
	|	Аналитика.Серия                                            КАК Серия,
	|	ТаблицаВидыЗапасов.ВидЗапасов                              КАК ВидЗапасов,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	АналитикаОприходование.Номенклатура                        КАК НоменклатураОприходование,
	|	АналитикаОприходование.Характеристика                      КАК ХарактеристикаОприходование,
	|	ТаблицаВидыЗапасов.ВидЗапасовОприходование                 КАК ВидЗапасовОприходование,
	|	ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|	Аналитика.МестоХранения                                    КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                   КАК СкладОтгрузки,
	|	ТаблицаВидыЗапасов.НомерГТД                                КАК НомерГТД,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)         КАК Сделка,
	|	ТаблицаВидыЗапасов.Количество                              КАК Количество,
	|	ТаблицаВидыЗапасов.КоличествоПоРНПТ                        КАК КоличествоПоРНПТ,
	|	ТаблицаВидыЗапасов.Сумма                                   КАК Сумма,
	|	ТаблицаВидыЗапасов.СуммаЗабаланс                           КАК СуммаЗабаланс,
	|	ТаблицаВидыЗапасов.ВидыЗапасовУказаныВручную               КАК ВидыЗапасовУказаныВручную
	|ПОМЕСТИТЬ ТаблицаВидыЗапасов
	|ИЗ
	|	ВтВидыЗапасов КАК ТаблицаВидыЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК Аналитика
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры = Аналитика.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК АналитикаОприходование
	|		ПО ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование = АналитикаОприходование.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаНоменклатуры
	|";
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаТоваров = ?(ДополнительныеСвойства.Свойство("ТаблицыЗаполненияВидовЗапасовПриОбмене")
							И ДополнительныеСвойства.ТаблицыЗаполненияВидовЗапасовПриОбмене <> Неопределено
							И ДополнительныеСвойства.ТаблицыЗаполненияВидовЗапасовПриОбмене.Свойство("Товары"),
						ДополнительныеСвойства.ТаблицыЗаполненияВидовЗапасовПриОбмене.Товары,
						Товары);
	
	Запрос.УстановитьПараметр("Ссылка",                    Ссылка);
	Запрос.УстановитьПараметр("Дата",                      Дата);
	Запрос.УстановитьПараметр("Партнер",                   Партнер);
	Запрос.УстановитьПараметр("Контрагент",                Контрагент);
	Запрос.УстановитьПараметр("Соглашение",                Соглашение);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",     ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("Подразделение",             Подразделение);
	Запрос.УстановитьПараметр("Договор",                   Договор);
	Запрос.УстановитьПараметр("Валюта",                    Валюта);
	Запрос.УстановитьПараметр("ТипЗапасов",                Перечисления.ТипыЗапасов.Товар);
	Запрос.УстановитьПараметр("Сделка",                    Сделка);
	Запрос.УстановитьПараметр("Ответственный",             Ответственный);
	Запрос.УстановитьПараметр("Проведен",                  Проведен);
	Запрос.УстановитьПараметр("ТаблицаТоваров",            ТаблицаТоваров);
	Запрос.УстановитьПараметр("ТаблицаВидыЗапасов",        ВидыЗапасов);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную", ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр(
					"ФормироватьВидыЗапасовПоСделкам",
					ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоСделкам"));
	Запрос.УстановитьПараметр(
					"ФормироватьВидыЗапасовПоПодразделениямМенеджерам",
					ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам"));
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект, Запрос);
	
	ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
		ТаблицаТоваров,
		Запрос.Текст,
		"&ТекстПоляТаблицаТоваровКоличествоПоРНПТ_",
		"ТаблицаТоваров",
		"КоличествоПоРНПТ",
		"ТаблицаТоваров.КоличествоПоРНПТ",
		"0");
	
	ОбщегоНазначенияУТ.ЗаменитьОтсутствующиеПоляТаблицыЗначенийВТекстеЗапроса(
		ТаблицаТоваров,
		Запрос.Текст,
		"&ТекстПоляТаблицаТоваровНомерГТД_",
		"ТаблицаТоваров",
		"НомерГТД",
		"ТаблицаТоваров.НомерГТД",
		"ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)");
	
	Запрос.Выполнить();
	
	Возврат Запрос.МенеджерВременныхТаблиц;
	
КонецФункции

// Процедура формирует временную таблицу товаров с аналитикой обособленного учета.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//								который будет содержать созданную таблицу.
//
Процедура СформироватьВременнуюТаблицуТоваровИАналитики(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры                  КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаДанныхДокумента.Партнер                             КАК Партнер,
	|	ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)  КАК Соглашение,
	|	ТаблицаТоваров.Номенклатура                                КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика                              КАК Характеристика,
	|	ТаблицаТоваров.Назначение                                  КАК Назначение,
	|	ВЫБОР
	|		КОГДА ТаблицаТоваров.СтатусУказанияСерий = 18
	|			ТОГДА ТаблицаТоваров.Серия
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|	КОНЕЦ                                                      КАК Серия,
	|	ТаблицаТоваров.Количество                                  КАК Количество,
	|	ТаблицаДанныхДокумента.Договор                             КАК Склад,
	|	ТаблицаДанныхДокумента.Менеджер                            КАК Менеджер,
	|	ТаблицаДанныхДокумента.Сделка                              КАК Сделка,
	|	ТаблицаДанныхДокумента.Подразделение                       КАК Подразделение,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС
	|ПОМЕСТИТЬ ТаблицаТоваровИАналитики
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДанныхДокумента КАК ТаблицаДанныхДокумента
	|		ПО ИСТИНА
	|ГДЕ
	|	ТаблицаТоваров.Номенклатура.ТипНоменклатуры В (
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
	|									ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|;
	|";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Заполняет реквизиты, хранящие информацию о видах запасов и аналитиках учета номенклатуры в табличной части 'Товары'
// документа, а также заполняет табличную часть 'ВидыЗапасов'.
//
// Параметры:
//	Отказ - Булево - признак того, что не удалось заполнить данные.
//	ТаблицыДокумента - см. Документы.ПорчаТоваровУХранителя.КоллекцияТабличныхЧастейТоваров.
//
Процедура ЗаполнитьВидыЗапасовПриОбмене(Отказ, ТаблицыДокумента) Экспорт
	
	ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
	
	Если ТаблицыДокумента <> Неопределено Тогда
		ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров(ТаблицыДокумента);
		ДополнительныеСвойства.Вставить("ТаблицыЗаполненияВидовЗапасовПриОбмене", ТаблицыДокумента);
	Иначе
		ИмяПараметра = "ТаблицыДокумента";
		
		ТекстИсключения = НСтр("ru = 'Для заполнения видов запасов не передан параметр ""%1"".'");
		ТекстИсключения = СтрШаблон(ТекстИсключения, ИмяПараметра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ЗаполнитьВидыЗапасов(Отказ);
	ДополнительныеСвойства.Удалить("ТаблицыЗаполненияВидовЗапасовПриОбмене");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("Номенклатура", "НоменклатураОприходование");
	ПараметрыПроверки.ИменаПолейССуффиксом.Вставить("Характеристика", "ХарактеристикаОприходование");
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект, МассивНепроверяемыхРеквизитов, Отказ, ПараметрыПроверки);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПорчаТоваровУХранителя);
	НоменклатураСервер.ПроверитьЗаполнениеСерий(ЭтотОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов);
	
	Для Каждого СтрокаТЧТовары Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧТовары.Номенклатура)
		   И СтрокаТЧТовары.Номенклатура = СтрокаТЧТовары.НоменклатураОприходование Тогда
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
													"Товары",
													СтрокаТЧТовары.НомерСтроки,
													"НоменклатураОприходование");
		
			ТекстОшибки = СтрШаблон(
							НСтр("ru='Нельзя выбирать товар исходного качества. Выберите товар другого качества в строке %1 списка ""Товары""'"),
							СтрокаТЧТовары.НомерСтроки);
		
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
		
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ПроверитьВидНоменклатурыОприходования(ЭтотОбъект,Отказ);
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоПодразделениямМенеджерам") Тогда
		ПроверяемыеРеквизиты.Добавить("Подразделение");
	КонецЕсли;
	
	Обработчик = Документы.ПорчаТоваровУХранителя.ОбработчикДействий(ХозяйственнаяОперация);
	Если Не Обработчик.ИспользоватьСоглашенияСКлиентами() Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Соглашение");
	КонецЕсли;
	
	ИсправлениеДокументов.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик =
		Документы.ПорчаТоваровУХранителя.ПараметрыВыбораСтатейИАналитик(ПриходоватьТоварыПоСебестоимостиСписания);
	ДоходыИРасходыСервер.ОбработкаПроверкиЗаполнения(
		ЭтотОбъект, Отказ, ПроверяемыеРеквизиты, ПараметрыВыбораСтатейИАналитик);
	
	ПроверитьСтавкиНДС(Отказ);
	
	Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ЗатратыСервер.ПроверитьИспользованиеПартионногоУчета22(ЭтотОбъект, Дата, Отказ);
	
	ПорчаТоваровУХранителяЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ПорчаТоваровУХранителя") Тогда
		ИсправлениеДокументов.ЗаполнитьИсправление(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик =
		Документы.ПорчаТоваровУХранителя.ПараметрыВыбораСтатейИАналитик(ПриходоватьТоварыПоСебестоимостиСписания);
	ДоходыИРасходыСервер.ОбработкаЗаполнения(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ОтветственныеЛицаСервер.ОтветственныеЛицаДокументаОбработкаЗаполнения(
		ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
		
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПорчаТоваровУХранителяЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	ИтогоСуммаДокумента = 0;
	Если ПриходоватьТоварыПоСебестоимостиСписания Тогда
		Для Каждого СтрокаТЧТовары Из Товары Цикл
			Если СтрокаТЧТовары.Цена <> 0 Тогда
				СтрокаТЧТовары.Цена = 0;
			КонецЕсли;
			Если СтрокаТЧТовары.ЦенаЗабаланс <> 0 Тогда
				СтрокаТЧТовары.ЦенаЗабаланс = 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТЧТовары Из Товары Цикл
			ИтогоСуммаДокумента =
				ИтогоСуммаДокумента
				+ СтрокаТЧТовары.Количество * СтрокаТЧТовары.Цена
				+ СтрокаТЧТовары.Количество * СтрокаТЧТовары.ЦенаЗабаланс;
		КонецЦикла;
	КонецЕсли;
	
	СуммаДокумента = ИтогоСуммаДокумента;
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ЭтотОбъект, Документы.ПорчаТоваровУХранителя);
	НоменклатураСервер.ОчиститьНеиспользуемыеСерии(ЭтотОбъект, ПараметрыУказанияСерий);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
		ЗаполнитьВидыЗапасов(Отказ);
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если Не ВидыЗапасовУказаныВручную Тогда
			ВидыЗапасов.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоНовый()	И Не ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, "ВидыЗапасов");
	
	// Выбор статей и аналитик.
	ПараметрыВыбораСтатейИАналитик =
		Документы.ПорчаТоваровУХранителя.ПараметрыВыбораСтатейИАналитик(ПриходоватьТоварыПоСебестоимостиСписания);
	ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ПорчаТоваровУХранителяЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ПорчаТоваровУХранителяЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ЭтотОбъект);
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПорчаТоваровУХранителяЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполненияВидовЗапасов());
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ПорчаТоваровУХранителяЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ВидыЗапасов.Очистить();
	Основание = Неопределено;
	
	ИнициализироватьДокумент();
	
	ИсправлениеДокументов.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	ОбщегоНазначенияУТ.ОчиститьИдентификаторыДокумента(ЭтотОбъект, "ВидыЗапасов");
	
	ПорчаТоваровУХранителяЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Автор = Пользователи.ТекущийПользователь();
	
	Организация   = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	Подразделение = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Ответственный, Подразделение);
	
	Если Не ПриходоватьТоварыПоСебестоимостиСписания Тогда
		ВидЦены = Справочники.ВидыЦен.ВидЦеныПоУмолчанию(ВидЦены);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	КонецЕсли;
	
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры


#КонецОбласти

#Область АналитикиУчетаНоменклатуры

// Заполняет аналитики учета номенклатуры в табличных частях документа, хранящих информацию о товарах.
// Если параметр не передан, тогда будет выполнено заполнение данных в табличных частях документа.
//
// Параметры:
//	ТаблицыДокумента - см. Документы.ПорчаТоваровУХранителя.КоллекцияТабличныхЧастейТоваров
//
Процедура ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров(ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = Документы.ПорчаТоваровУХранителя.КоллекцияТабличныхЧастейТоваров();
		
		ЗаполнитьЗначенияСвойств(ТаблицыДокумента, ЭтотОбъект);
	КонецЕсли;
	
	ТаблицаТовары = ТаблицыДокумента.Товары;
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(ХозяйственнаяОперация,
																		Договор,
																		Подразделение,
																		Партнер,
																		Договор);
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицаТовары, МестаУчета);
	
	ТекстПоляНазначения = 
	"ВЫБОР
	|	КОГДА Коллекция.ПодНазначение
	|		ТОГДА Коллекция.Назначение
	|	ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|КОНЕЦ";
	
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.АналитикаУчетаНоменклатуры = "АналитикаУчетаНоменклатурыОприходование";
	ИменаПолей.Номенклатура               = "НоменклатураОприходование";
	ИменаПолей.Характеристика             = "ХарактеристикаОприходование";
	ИменаПолей.Назначение                 = Новый Структура("ТекстПоля", ТекстПоляНазначения);
	ИменаПолей.Серия                      = "Серия";
	ИменаПолей.СтатусУказанияСерий        = "СтатусУказанияСерий";
	
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицаТовары, МестаУчета, ИменаПолей);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	
	Если Не Проведен
	 Или ПерезаполнитьВидыЗапасов
	 Или ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	 Или ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц) Тогда
		
		ПараметрыЗаполнения = ПараметрыЗаполненияВидовЗапасов();
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоТоварамОрганизаций(
			ЭтотОбъект, МенеджерВременныхТаблиц, Отказ, ПараметрыЗаполнения);
		
		ВидыЗапасов.Свернуть("АналитикаУчетаНоменклатуры, ВидЗапасов, НомерГТД", "Количество, КоличествоПоРНПТ");
		
		ЗаполнитьНоменклатуруОприходованиеВидовЗапасов(Отказ);
		
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьНоменклатуруОприходованиеВидовЗапасов(Отказ)
	
	ТипыЗапасов = ВидыЗапасов.ВыгрузитьКолонку("ВидЗапасов");
	ТипыЗапасов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТипыЗапасов, "ТипЗапасов");
	
	СтруктураПоиска = Новый Структура("АналитикаУчетаНоменклатуры");
	
	Для Каждого СтрокаТоваров Из Товары Цикл

		КоличествоТоваров = СтрокаТоваров.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТоваров);
		Для Каждого СтрокаЗапасов Из ВидыЗапасов.НайтиСтроки(СтруктураПоиска) Цикл

			Если СтрокаЗапасов.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Количество = Мин(КоличествоТоваров, СтрокаЗапасов.Количество);

			НоваяСтрока = ВидыЗапасов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаЗапасов);
			
			НоваяСтрока.АналитикаУчетаНоменклатурыОприходование	= СтрокаТоваров.АналитикаУчетаНоменклатурыОприходование;
			НоваяСтрока.ВидЗапасовОприходование					= СтрокаЗапасов.ВидЗапасов;
			
			НоваяСтрока.Сумма =
				?(Не ПриходоватьТоварыПоСебестоимостиСписания,
					Количество * СтрокаТоваров.Цена,
					0);
			
			НоваяСтрока.СуммаЗабаланс =
				?(Не ПриходоватьТоварыПоСебестоимостиСписания,
					Количество * СтрокаТоваров.ЦенаЗабаланс,
					0);
			
			НоваяСтрока.Количество								= Количество;
			НоваяСтрока.КоличествоПоРНПТ						= Количество * СтрокаЗапасов.КоличествоПоРНПТ
																	/ СтрокаЗапасов.Количество;

			СтрокаЗапасов.Количество		= СтрокаЗапасов.Количество - НоваяСтрока.Количество;
			СтрокаЗапасов.КоличествоПоРНПТ	= СтрокаЗапасов.КоличествоПоРНПТ - НоваяСтрока.КоличествоПоРНПТ;
			
			КоличествоТоваров = КоличествоТоваров - НоваяСтрока.Количество;
			
			// Проверка заполнения цен выполняется после подбора видов запасов, так как зависит от подобранного типа запасов.
			Если Не ПриходоватьТоварыПоСебестоимостиСписания Тогда
				
				ТекстОшибки= "";
				ТекущийТипЗапасов = ТипыЗапасов.Получить(НоваяСтрока.ВидЗапасов);
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.СуммаЗабаланс)
					И Не ЗначениеЗаполнено(НоваяСтрока.Сумма)
					И (ТекущийТипЗапасов = Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи
						Или Ложь) Тогда
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТоваров.НомерСтроки, "ЦенаЗабаланс");
					ТекстОшибки = НСтр("ru='В строке %1 для товара ""%2"" необходимо заполнить забалансовую цену.'");
					
					ТекстОшибки =
						СтрШаблон(
							ТекстОшибки,
							СтрокаТоваров.НомерСтроки,
							НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
								СтрокаТоваров.Номенклатура,
								СтрокаТоваров.Характеристика,,
								СтрокаТоваров.Серия,
								СтрокаТоваров.Назначение));
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.Сумма)
					И (ТекущийТипЗапасов = Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи
						Или Ложь) Тогда
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТоваров.НомерСтроки, "Цена");
					ТекстОшибки = НСтр("ru='В строке %1 для товара ""%2"" необходимо заполнить только забалансовую цену.'");
					
					ТекстОшибки =
						СтрШаблон(
							ТекстОшибки,
							СтрокаТоваров.НомерСтроки,
							НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
								СтрокаТоваров.Номенклатура,
								СтрокаТоваров.Характеристика,,
								СтрокаТоваров.Серия,
								СтрокаТоваров.Назначение));
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
					
				КонецЕсли;
				
				
				Если Не ЗначениеЗаполнено(НоваяСтрока.Сумма)
					И Не ЗначениеЗаполнено(НоваяСтрока.СуммаЗабаланс)
					И Не ТекущийТипЗапасов = Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи Тогда
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТоваров.НомерСтроки, "Цена");
					ТекстОшибки = НСтр("ru='В строке %1 для товара ""%2"" необходимо заполнить балансовую цену.'");
					
					ТекстОшибки =
						СтрШаблон(
							ТекстОшибки,
							СтрокаТоваров.НомерСтроки,
							НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
								СтрокаТоваров.Номенклатура,
								СтрокаТоваров.Характеристика,,
								СтрокаТоваров.Серия,
								СтрокаТоваров.Назначение));
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НоваяСтрока.СуммаЗабаланс)
					И Не ТекущийТипЗапасов = Перечисления.ТипыЗапасов.ТоварНаХраненииСПравомПродажи Тогда
					
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТоваров.НомерСтроки, "ЦенаЗабаланс");
					ТекстОшибки = НСтр("ru='В строке %1 для товара ""%2"" необходимо заполнить только балансовую цену.'");
					
					ТекстОшибки =
						СтрШаблон(
							ТекстОшибки,
							СтрокаТоваров.НомерСтроки,
							НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
								СтрокаТоваров.Номенклатура,
								СтрокаТоваров.Характеристика,,
								СтрокаТоваров.Серия,
								СтрокаТоваров.Назначение));
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, Поле,, Отказ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КоличествоТоваров = 0 Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;
		
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВидыЗапасов.НайтиСтроки(Новый Структура("Количество", 0));
	Для Каждого СтрокаТаблицы Из МассивУдаляемыхСтрок Цикл
		ВидыЗапасов.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Дата, Организация, ХозяйственнаяОперация, Партнер, Договор";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

Функция ПроверитьИзменениеТоваров(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|	ТаблицаТоваров.НоменклатураОприходование               КАК НоменклатураОприходование,
	|	ТаблицаТоваров.ХарактеристикаОприходование             КАК ХарактеристикаОприходование
	|ИЗ 
	|	(ВЫБРАТЬ
	|		ТаблицаТоваров.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаТоваров.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|		ТаблицаТоваров.НоменклатураОприходование               КАК НоменклатураОприходование,
	|		ТаблицаТоваров.ХарактеристикаОприходование             КАК ХарактеристикаОприходование,
	|		ТаблицаТоваров.Количество                              КАК Количество,
	|		ВЫРАЗИТЬ(ТаблицаТоваров.Количество * ТаблицаТоваров.Цена КАК ЧИСЛО(31, 2)) КАК Сумма,
	|		ВЫРАЗИТЬ(ТаблицаТоваров.Количество * ТаблицаТоваров.ЦенаЗабаланс КАК ЧИСЛО(31, 2)) КАК СуммаЗабаланс
	|	ИЗ
	|		ТаблицаТоваров КАК ТаблицаТоваров
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатуры              КАК АналитикаУчетаНоменклатуры,
	|		ТаблицаВидыЗапасов.АналитикаУчетаНоменклатурыОприходование КАК АналитикаУчетаНоменклатурыОприходование,
	|		ТаблицаВидыЗапасов.НоменклатураОприходование               КАК НоменклатураОприходование,
	|		ТаблицаВидыЗапасов.ХарактеристикаОприходование             КАК ХарактеристикаОприходование,
	|		-ТаблицаВидыЗапасов.Количество                             КАК Количество,
	|		-ТаблицаВидыЗапасов.Сумма                                  КАК Сумма,
	|		-ТаблицаВидыЗапасов.СуммаЗабаланс                          КАК СуммаЗабаланс
	|	ИЗ
	|		ТаблицаВидыЗапасов КАК ТаблицаВидыЗапасов) КАК ТаблицаТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатурыОприходование,
	|	ТаблицаТоваров.НоменклатураОприходование,
	|	ТаблицаТоваров.ХарактеристикаОприходование
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаТоваров.Количество) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.Сумма) <> 0
	|	ИЛИ СУММА(ТаблицаТоваров.СуммаЗабаланс) <> 0
	|";
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапрос = Запрос.Выполнить();
	
	Возврат Не РезультатЗапрос.Пустой();
	
КонецФункции

Функция ПараметрыЗаполненияВидовЗапасов()
	
	Обработчик = Документы.ПорчаТоваровУХранителя.ОбработчикДействий(ХозяйственнаяОперация);
	
	Возврат Обработчик.ПараметрыЗаполненияВидовЗапасов(СторнируемыйДокумент);
	
КонецФункции

#КонецОбласти

#Область ПроверкиЗаполнения

Процедура ПроверитьСтавкиНДС(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура)              КАК НоменклатураСписание,
	|	ВЫРАЗИТЬ(ТаблицаТовары.НоменклатураОприходование КАК Справочник.Номенклатура) КАК НоменклатураОприходование,
	|	ТаблицаТовары.НомерСтроки                                                     КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.НоменклатураСписание.СтавкаНДС <> ТаблицаТовары.НоменклатураОприходование.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Товары.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура");
		ТекстСообщения =
			НСтр("ru='Невозможно отразить порчу, т.к. у некачественной и исходной номенклатуры не равны ставки НДС'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле, "Объект", Отказ);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
