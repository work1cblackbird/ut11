#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.АннулированиеОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СведенияВнесены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СведенияВнесеныЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Аннулирован);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура")
		И СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
		Объект = СтруктураПараметров.ОбъектРасчета;
	Иначе
		Объект = СтруктураПараметров;
	КонецЕсли;
	
	Если Объект <> Неопределено
		И НужноСоздатьМестаФормированияПартий(Объект) Тогда
		ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СоздайтеМестаФормированияПартий;
	КонецЕсли;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииСоздание
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожае Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеАннулирование Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.АннулированиеКПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса Тогда
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииСоздание
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОбрабатывается;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожае Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Обрабатывается;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеАннулирование Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.АннулированиеОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.АннулированиеОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса Тогда
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииСоздание Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОбработан;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СоздайтеМестаФормированияПартий);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожае Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СведенияВнесены;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеАннулирование Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Аннулирован;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.АннулированиеОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииРасчетСтатуса Тогда
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Статус обработки сообщения
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Документ, для которого требуется обновить статус.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииСоздание);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожае);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеАннулирование);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Документ, для которого требуется обновить статус.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СоздайтеМестаФормированияПартий);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Сообщения

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ПараметрыЗапроса = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииРасчетСтатуса Тогда
		
		Если ПараметрыЗапроса.Свойство("ОбработанныеСтроки") Тогда
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
			
			Попытка
				
				Блокировка.Заблокировать();
				ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
				
				Для Каждого КлючИЗначение Из ПараметрыЗапроса.ОбработанныеСтроки Цикл
					
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Идентификатор", КлючИЗначение.Ключ);
					
					СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
					Для Каждого СтрокаТаблицыТовары Из СтрокиДокумента Цикл
						СтрокаТаблицыТовары.МестоФормированияПартии = КлючИЗначение.Значение;
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументОбъект.Записать();
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект);
		Статусы.Принят = РезультирующийСтатусДокумента;
		
		ВсеМестаФормированияПартийСозданы = ВсеМестаФормированияПартийСозданы(ЭлементОчереди.СсылкаНаОбъект);
		
		Если ВсеМестаФормированияПартийСозданы Тогда
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Иначе
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СоздайтеМестаФормированияПартий);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
			
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект);
		Статусы.Принят = РезультирующийСтатусДокумента;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииСоздание Тогда
		
		Блокировка = Новый БлокировкаДанных();
		
		Для Каждого КлючИЗначение Из ПараметрыОбмена.ПараметрыПреобразования.БлокируемыеОбъекты Цикл
			
			ЭлементБлокировки = Блокировка.Добавить(КлючИЗначение.Ключ);
			БлокируемыеДанные = КлючИЗначение.Значение;
			
			Если БлокируемыеДанные <> Неопределено Тогда
				Для Каждого Колонка Из БлокируемыеДанные.Колонки Цикл
					ЭлементБлокировки.ИспользоватьИзИсточникаДанных(Колонка.Имя, Колонка.Имя);
				КонецЦикла;
				ЭлементБлокировки.ИсточникДанных = БлокируемыеДанные;
			КонецЕсли;
			
		КонецЦикла;
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ИнтеграцияЗЕРНОСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена);
			
			ДополнительныеРеквизиты = Новый Соответствие();
			
			Если ПолученныеДанные.Owner = Неопределено Тогда
				ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
				ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
					ТаблицаИсточникиРеквизитов, ЭлементОчереди.Организация, ЭлементОчереди.Подразделение);
				КлючиОрганизаций = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
				Если КлючиОрганизаций.Количество() Тогда
					ДополнительныеРеквизиты.Вставить("Товаропроизводитель", КлючиОрганизаций[0]);
				КонецЕсли;
			КонецЕсли;
			
			МестоФормированияПартии = Справочники.РеестрМестФормированияПартийЗЕРНО.ЗагрузитьМестоФормированияПартии(
				ПолученныеДанные,
				ЭлементОчереди.Организация,
				ЭлементОчереди.Подразделение,
				ПараметрыОбмена,,,
				ДополнительныеРеквизиты);
			ОбработанныеСтроки.Вставить(РеквизитыИсходящегоСообщения.ИдентификаторСтроки, МестоФормированияПартии);
			
			ИзмененныеОбъекты.Добавить(МестоФормированияПартии);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожае Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Обрабатывается, Новый Массив());
		ПараметрыОбновления.ИдентификаторСтроки = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
		ПараметрыОбновления.ИдентификаторЗаявки = Формат(ПолученныеДанные.id, "ЧГ=0;");
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект, ПараметрыОбновления);
		
	КонецЕсли;
	
КонецПроцедуры

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО - Ссылка на объект.
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче.
//
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт

	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.СоздайтеМестаФормированияПартий Тогда
		Возврат СообщенияСозданиеМестФормированияПартий(СсылкаНаОбъект, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		Возврат СообщенияВнесениеСведенийОСобранномУрожае(СсылкаНаОбъект, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		Возврат СообщенияАннулированиеВнесениеСведенийОСобранномУрожае(СсылкаНаОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииЗЕРНО.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ВнесениеСведенийОСобранномУрожаеЗЕРНО, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Сообщения

// Формирует XML сообщения для создания мест формирования партий
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СообщенияСозданиеМестФормированияПартий(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив;
	СписокЗапросов  = Новый СписокЗначений;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииСоздание;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ДатаСбораУрожая                    КАК ДатаСбораУрожая,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Зерно) КАК ВидПродукции,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ОКПД2                   КАК ОКПД2,
	|	Товары.КоличествоЗЕРНО         КАК КоличествоЗЕРНО,
	|	Товары.МестоВыращивания        КАК МестоВыращивания,
	|	Товары.МестоВыращиванияСтрокой КАК МестоВыращиванияСтрокой,
	|	Товары.ПлощадьСбораУрожая      КАК ПлощадьСбораУрожая,
	|	Товары.Идентификатор           КАК Идентификатор
	|
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.МестоФормированияПартии = ЗНАЧЕНИЕ(Справочник.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка)
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.МестоФормированияПартииРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_grainmonitor", ПараметрыОбмена.ПараметрыОптимизации);
	ИмяСвойстваЗапроса = "RequestCreatePrimaryStoragePlace";
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
		
		СтрокаТоварыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		Наименование = СтрШаблон(НСтр("ru = '%1, %2 га, %3, 1С-%4'"),
			СтрокаТовары.МестоВыращиванияСтрокой,
			СтрокаТовары.ПлощадьСбораУрожая,
			Формат(Шапка.ДатаСбораУрожая, "ДФ=dd.MM.yyyy;"),
			Шапка.Номер);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO, "name", Наименование, АбстрактноеСообщениеXML);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO, "Crop", СтрокаТовары.ОКПД2, АбстрактноеСообщениеXML);
		
		МестоВыращиванияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(
			СтрокаТовары.МестоВыращивания, СтрокаТовары.МестоВыращиванияСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO, "PlaceOfFormation", МестоВыращиванияXDTO, АбстрактноеСообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			СтрокаТоварыXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
	
		СообщенияXML.Добавить(СообщениеXML);
	
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует XML сообщения для внесения сведений о собранном урожае
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СообщенияВнесениеСведенийОСобранномУрожае(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив;
	СписокЗапросов  = Новый СписокЗначений;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожае;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ДатаСбораУрожая                    КАК ДатаСбораУрожая,
	|	Шапка.МестоХранения                      КАК МестоХранения,
	|	Шапка.МестоХраненияСтрокой               КАК МестоХраненияСтрокой,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Зерно) КАК ВидПродукции,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.ОКПД2                                                 КАК ОКПД2,
	|	Товары.КоличествоЗЕРНО                                       КАК КоличествоЗЕРНО,
	|	Товары.МестоВыращивания                                      КАК МестоВыращивания,
	|	Товары.МестоВыращиванияСтрокой                               КАК МестоВыращиванияСтрокой,
	|	Товары.ПлощадьСбораУрожая                                    КАК ПлощадьСбораУрожая,
	|	Товары.НомерПоляЕФИС                                         КАК НомерПоляЕФИС,
	|	ЕСТЬNULL(Товары.ВидПраваСобственности.Идентификатор, """")   КАК ВидПраваСобственностиИдентификатор,
	|	ЕСТЬNULL(Товары.МестоФормированияПартии.Идентификатор, """") КАК МестоФормированияПартииИдентификатор,
	|	Товары.Идентификатор                                         КАК Идентификатор
	|
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.МестоФормированияПартии <> ЗНАЧЕНИЕ(Справочник.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка)
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка,
		Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса,
		НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
		
	ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_grainmonitor", ПараметрыОбмена.ПараметрыОптимизации);
	ИмяСвойстваЗапроса = "RequestCreateHarvestedCrop";

	МестоХраненияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(
		Шапка.МестоХранения, Шапка.МестоХраненияСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		
		СтрокаТоварыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		МестоВыращиванияXDTO = ИнтеграцияЗЕРНОСлужебный.АдресРФXDTO(
			СтрокаТовары.МестоВыращивания, СтрокаТовары.МестоВыращиванияСтрокой, АбстрактноеСообщениеXML, ПараметрыОбмена);
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"primaryStoragePlaceID", Число(СтрокаТовары.МестоФормированияПартииИдентификатор), АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"amount", СтрокаТовары.КоличествоЗЕРНО, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"area", СтрокаТовары.ПлощадьСбораУрожая, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"EfisNumber", СтрокаТовары.НомерПоляЕФИС, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"CultivationPlace", МестоВыращиванияXDTO, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"StoragePlace", МестоХраненияXDTO, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"Crop", СтрокаТовары.ОКПД2, АбстрактноеСообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"PropertyRight", СтрокаТовары.ВидПраваСобственностиИдентификатор, АбстрактноеСообщениеXML);
		
		Если ИнтеграцияЗЕРНОСлужебный.ЭтоВерсияВключая_1_0_8(ПараметрыОбмена.ПараметрыОптимизации) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
				"dateRegistration", Шапка.ДатаСбораУрожая, АбстрактноеСообщениеXML);
		КонецЕсли;
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			СтрокаТоварыXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
	
		СообщенияXML.Добавить(СообщениеXML);
	
	КонецЦикла;
	
	Если АбстрактноеСообщениеXML.Ошибки.Количество() Тогда
		СообщенияXML = Новый Массив;
	КонецЕсли;

	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

// Формирует XML сообщения для аннулирования внесения сведений о собранном урожае
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВнесениеСведенийОСобранномУрожаеЗЕРНО.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СообщенияАннулированиеВнесениеСведенийОСобранномУрожае(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML     = Новый Массив;
	СписокЗапросов   = Новый СписокЗначений;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеАннулирование;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыОбмена  = ДополнительныеПараметры.ПараметрыОбмена;
		
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыПродукцииИС.Зерно) КАК ВидПродукции,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Статусы.ИдентификаторЗаявки КАК ИдентификаторЗаявки,
	|	Товары.Идентификатор        КАК Идентификатор
	|
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО.Товары КАК Товары
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
	|		ПО Товары.Ссылка = Статусы.ОбъектСинхронизации
	|		И Товары.Идентификатор = Статусы.ИдентификаторСтроки
	|		И Товары.Идентификатор В (&ИдентификаторыСтрок)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",            Операция);
	Запрос.УстановитьПараметр("ИдентификаторыСтрок", ПараметрыЗапроса);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.ВнесениеСведенийОСобранномУрожаеРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_grainmonitor", ПараметрыОбмена.ПараметрыОптимизации);
	ИмяСвойстваЗапроса = "RequestCanceledHarvestedCrop";
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, Операция, НомерВерсии);
		СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
		СообщениеXML.ИдентификаторСтроки = СтрокаТовары.Идентификатор;
		
		СтрокаТоварыXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
		
		ИдентификаторЗаявки = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаТовары.ИдентификаторЗаявки);
		Если Не ЗначениеЗаполнено(ИдентификаторЗаявки) Тогда
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки. Отсутствует идентификатор заявки.'"));
			СообщенияXML.Добавить(СообщениеXML);
			Продолжить;
		КонецЕсли;
		
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(СтрокаТоварыXDTO,
			"harvestedCropId", Число(ИдентификаторЗаявки), СообщениеXML);
		
		СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
			СтрокаТоварыXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
			ДополнительныеПараметры.ПараметрыОбмена);
	
		СообщенияXML.Добавить(СообщениеXML);
	
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

Функция НужноСоздатьМестаФормированияПартий(Объект)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("МестоФормированияПартии", Справочники.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка());
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураПоиска);
	
	Возврат НайденныеСтроки.Количество() > 0;
	
КонецФункции

Функция РезультирующийСтатусДокумента(ДокументСсылка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОбъектовСинхронизацииЗЕРНО.Статус КАК Статус
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
	|		ПО Товары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
	|		И Товары.Идентификатор = СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьСведенияВнесены = Ложь;
	ЕстьАннулирован     = Ложь;
	ЕстьМестоСоздано    = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СведенияВнесены Тогда
			ЕстьСведенияВнесены = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Аннулирован Тогда
			ЕстьАннулирован = Истина;
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОбработан Тогда
			ЕстьМестоСоздано = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьСведенияВнесены Тогда
		Если ЕстьАннулирован Тогда
			Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СведенияВнесеныЧастично;
		Иначе
			Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СведенияВнесены;
		КонецЕсли;
	Иначе
		Если ЕстьАннулирован Тогда
			Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Аннулирован;
		Иначе
			Если ЕстьМестоСоздано Тогда
				Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.СозданиеМестФормированияПартийОбработан;
			Иначе
				Статус = Перечисления.СтатусыОбработкиВнесениеСведенийОСобранномУрожаеЗЕРНО.Черновик;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ВсеМестаФормированияПартийСозданы(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВнесениеСведенийОСобранномУрожаеЗЕРНОТовары.Ссылка
	|ИЗ
	|	Документ.ВнесениеСведенийОСобранномУрожаеЗЕРНО.Товары КАК ВнесениеСведенийОСобранномУрожаеЗЕРНОТовары
	|ГДЕ
	|	ВнесениеСведенийОСобранномУрожаеЗЕРНОТовары.Ссылка = &Ссылка
	|	И ВнесениеСведенийОСобранномУрожаеЗЕРНОТовары.МестоФормированияПартии = ЗНАЧЕНИЕ(Справочник.РеестрМестФормированияПартийЗЕРНО.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой()
	
КонецФункции

#КонецОбласти

#КонецЕсли
