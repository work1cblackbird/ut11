#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Устанавливает статус для объекта документа
//
// Параметры:
//	НовыйСтатус - Строка - Имя статуса, который будет установлен у заказов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров установки статуса.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешной установки нового статуса.
//
Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Статус = Перечисления.СтатусыДоверенностей[НовыйСтатус];
	
	Возврат ПроверитьЗаполнение();
	
КонецФункции

// Заполняет документ по основанию
// Параметры:
//	ДанныеЗаполнения - Структура, ДокументСсылка - основание
//
Процедура ЗаполнитьНаОсновании(ДанныеЗаполнения) Экспорт
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ДокументОснование") Тогда
			Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения.ДокументОснование);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
				ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
				Если НЕ ДанныеЗаполнения.Свойство("НаДенежныеСредства") Тогда
					ЗаполнитьПоЗаявкеНаВозвратТоваров(ДанныеЗаполнения.ДокументОснование);
				Иначе
					ЗаполнитьПоЗаявкеНаВозвратТоваровДС(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
				ЗаполнитьПоАктуВыполненныхРабот(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				ЗаполнитьПоРеализацииУслугПрочихАктивов(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
				ЗаполнитьПоВыкупуВозвратнойТарыКлиентом(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ВыкупТоваровХранителем") Тогда
				ЗаполнитьПоВыкупуТоваровХранителем(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
				ЗаполнитьПоВозвратуТоваровПоставщику(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
				ЗаполнитьПоОтчетуКомиссионера(ДанныеЗаполнения.ДокументОснование, ДанныеЗаполнения);

			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказКлиента") Тогда
		ЗаполнитьПоЗаказуКлиента(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ЗаполнитьПоРеализацииТоваровУслуг(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваров(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ЗаполнитьПоАктуВыполненныхРабот(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
		ЗаполнитьПоРеализацииУслугПрочихАктивов(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом") Тогда
		ЗаполнитьПоВыкупуВозвратнойТарыКлиентом(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВыкупТоваровХранителем") Тогда
		ЗаполнитьПоВыкупуТоваровХранителем(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		ЗаполнитьПоВозвратуТоваровПоставщику(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаполнитьПоДоговоруКонтрагента(ДанныеЗаполнения, ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
		ЗаполнитьПоОтчетуКомиссионера(ДанныеЗаполнения, ДанныеЗаполнения);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьНаОсновании(ДанныеЗаполнения);
	ИнициализироватьДокумент(ДанныеЗаполнения);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ДоверенностьВыданнаяЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаОкончанияДействия < НачалоДня(Дата) Тогда
		ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата, "ДЛФ=DD"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ЭтотОбъект,
			"ДатаОкончанияДействия",
			,
			Отказ);
	КонецЕсли;
	Если ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
		Если Не Отказ И ОбщегоНазначенияУТ.ПроверитьЗаполнениеРеквизитовОбъекта(ЭтотОбъект, ПроверяемыеРеквизиты) Тогда
			Отказ = Истина;
		КонецЕсли;
		ЗакупкиСервер.ПроверитьКорректностьЗаполненияДокументаЗакупки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ФизЛицо");
		Если Не ЗначениеЗаполнено(ФизЛицо) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Сотрудник"" не заполнено'"),
				ЭтотОбъект,
				"ФизЛицо",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
	
	ДоверенностьВыданнаяЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	РеквизитыСсылки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Статус, ПометкаУдаления");
	
	Если НЕ ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		КоличествоПозиций = Товары.Количество() + МатериальныеЦенности.Количество();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументОснование)
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		НоменклатураПартнеровСервер.ЗаполнитьПустоеСопоставлениеВНоменклатуреПартнераПоНоменклатуреИБ(Товары, Отказ);
	КонецЕсли;
	Если Статус = Перечисления.СтатусыДоверенностей.Выдана
		И НЕ Статус = РеквизитыСсылки.Статус Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ПометкаУдаления И НЕ ПометкаУдаления = РеквизитыСсылки.ПометкаУдаления Тогда
		ИзменитьСтатусДоверенностиПриПометкеУдаления();
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ДоверенностьВыданнаяЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЕстьПоступлениеТоваров = Ложь;
	СуммаОплатПоДокументу = 0;
	КоличествоПозиций = 0;
	
	Статус = Перечисления.СтатусыДоверенностей.НеВыдана;
	Если ЗначениеЗаполнено(ОбъектКопирования.СрокДействия) Тогда
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			ДатаОкончанияДействия = КалендарныеГрафики.ДатаПоКалендарю(ОсновнойКалендарьПредприятия, ТекущаяДатаСеанса(), ОбъектКопирования.СрокДействия, Ложь);
		Иначе
			ДатаОкончанияДействия = ТекущаяДатаСеанса() + ОбъектКопирования.СрокДействия * 86400;
		КонецЕсли;
	КонецЕсли;
	ИнициализироватьДокумент();
	
	ДоверенностьВыданнаяЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ПолучитьПоследниеПаспортныеДанныеСтрокой()
	
	ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(ФизЛицо);
	
	Если ЗначениеЗаполнено(ДокументФизическогоЛица.ВидДокумента) Тогда
		ВидДокументаФизЛица = ДокументФизическогоЛица.ВидДокумента;
		СерияДокументаФизЛица = ДокументФизическогоЛица.Серия;
		НомерДокументаФизЛица = ДокументФизическогоЛица.Номер;
		КемВыданДокументФизлица = ДокументФизическогоЛица.КемВыдан;
		ДатаВыдачиДокументаФизЛица = ДокументФизическогоЛица.ДатаВыдачи;
		ПредставлениеДокументаФизЛица = ДокументФизическогоЛица.Представление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	ДоверенностьВыданнаяЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ДоверенностьВыданнаяЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ДоверенностьВыданнаяЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ИзменитьСтатусДоверенностиПриПометкеУдаления()
	
	Если Статус = Перечисления.СтатусыДоверенностей.Выдана Тогда
		Статус = Перечисления.СтатусыДоверенностей.Аннулирована;
	ИначеЕсли Статус = Перечисления.СтатусыДоверенностей.ИспользованаЧастично
		И ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Статус = Перечисления.СтатусыДоверенностей.Аннулирована;
	КонецЕсли;
	
КонецПроцедуры

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	КонецЕсли;
	Ответственный = Пользователи.ТекущийПользователь();
	Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Организация;
	СтруктураПараметров.БанковскийСчет = БанковскийСчет;
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	// Срок действия доверенности по умолчанию подставляется из последней доверенности, иначе 15 рабочих дней.
	Если Не ЗначениеЗаполнено(СрокДействия) Тогда
		СрокДействияПоследнейДоверенности = Документы.ДоверенностьВыданная.ПолучитьСрокДействияПоследнейДоверенности();
		Если СрокДействияПоследнейДоверенности <> Неопределено Тогда
			СрокДействия = СрокДействияПоследнейДоверенности;
		Иначе
			СрокДействия = 15;
		КонецЕсли;
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			Попытка
				ДатаОкончанияДействия = КалендарныеГрафики.ДатаПоКалендарю(ОсновнойКалендарьПредприятия,  ТекущаяДатаСеанса(), СрокДействия);
			Исключение
				ДатаОкончанияДействия = ТекущаяДатаСеанса() + 1296000;
			КонецПопытки;
		Иначе
			ДатаОкончанияДействия = ТекущаяДатаСеанса() + 1296000;
		КонецЕсли;
	КонецЕсли;
	ПолучитьПоследниеПаспортныеДанныеСтрокой();
	
КонецПроцедуры

#Область ЗаполнениеНаПолучениеТоваров

Процедура ЗаполнитьПоЗаказуПоставщику(Знач ДокументОснование)
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаказПоставщику.Ссылка КАК ДокументОснование,
		|	ЗаказПоставщику.Ссылка.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
		|	ЗаказПоставщику.Ссылка.ДатаПоДаннымПоставщика КАК ДатаПоДаннымПоставщика,
		|	ЗаказПоставщику.Ссылка.Номер КАК НомерОснования,
		|	ЗаказПоставщику.Ссылка.Дата КАК ДатаОснования,
		|	ЗаказПоставщику.Партнер КАК Партнер,
		|	ЗаказПоставщику.Контрагент КАК Контрагент,
		|	ЗаказПоставщику.Организация КАК Организация,
		|	ЗаказПоставщику.Организация.Префикс КАК Префикс,
		|	ЗаказПоставщику.БанковскийСчет КАК БанковскийСчет,
		|	ЗаказПоставщику.Статус КАК СтатусДокумента,
		|	ЗаказПоставщику.Менеджер.ФизическоеЛицо КАК ФизЛицо,
		|	НЕ ЗаказПоставщику.Проведен КАК ЕстьОшибкиПроведен,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Подтвержден)
		|		ИЛИ ЗаказПоставщику.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовПоставщикам.Закрыт)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьОшибкиСтатус
		|ИЗ
		|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
		|ГДЕ
		|	ЗаказПоставщику.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказТовары.Номенклатура КАК Номенклатура,
		|	ЗаказТовары.НоменклатураПартнера КАК НоменклатураПартнера,
		|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказТовары.Характеристика КАК Характеристика,
		|	ЗаказТовары.Упаковка КАК Упаковка,
		|	СУММА(ЗаказыПоставщикам.КОформлениюОстаток / ВЫБОР
		|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ) КАК КоличествоУпаковок
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование
		|	И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыПоставщикам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
		|		ПО ЗаказТовары.Ссылка = &ДокументОснование
		|		И ЗаказыПоставщикам.ЗаказПоставщику = ЗаказТовары.Ссылка
		|		И ЗаказыПоставщикам.Номенклатура = ЗаказТовары.Номенклатура
		|		И ЗаказыПоставщикам.Характеристика = ЗаказТовары.Характеристика
		|		И ЗаказыПоставщикам.КодСтроки = ЗаказТовары.КодСтроки
		|ГДЕ
		|	ЗаказыПоставщикам.КОформлениюОстаток > 0
		|СГРУППИРОВАТЬ ПО
		|	ЗаказТовары.Номенклатура,
		|	ЗаказТовары.НоменклатураПартнера,
		|	ЗаказТовары.Характеристика,
		|	ЗаказТовары.Упаковка,
		|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения
		|
		|УПОРЯДОЧИТЬ ПО
		|	МИНИМУМ(ЗаказТовары.НомерСтроки)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка  = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	МассивДопустимыхСтатусов = Новый Массив();
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Подтвержден);
	МассивДопустимыхСтатусов.Добавить(Перечисления.СтатусыЗаказовПоставщикам.Закрыт);
	ОбщегоНазначенияУТ.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ДокументОснование,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		ВыборкаШапка.ЕстьОшибкиСтатус,
		МассивДопустимыхСтатусов);
		
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	Если ЗначениеЗаполнено(ВыборкаШапка.НомерПоДаннымПоставщика) И ЗначениеЗаполнено(ВыборкаШапка.ДатаПоДаннымПоставщика) Тогда
		НомерДокумента = ВыборкаШапка.НомерПоДаннымПоставщика;
		ДатаДокумента = ВыборкаШапка.ДатаПоДаннымПоставщика;
	Иначе
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.НомерОснования, Ложь, Истина);
		ДатаДокумента = ВыборкаШапка.ДатаОснования;
	КонецЕсли;
	ПоДокументу = НСтр("ru = 'Заказ №%Номер% от %Дата%'");
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
	Товары.Загрузить(РезультатыЗапроса[1].Выгрузить());
	ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваров(Знач ДокументОснование)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка КАК ДокументОснование,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Номер КАК НомерОснования,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Дата КАК ДатаОснования,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Партнер КАК Партнер,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Контрагент КАК Контрагент,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Организация КАК Организация,
	|	ЗаявкаНаВозвратТоваровОтКлиента.БанковскийСчет КАК БанковскийСчет,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Статус КАК СтатусДокумента,
	|	ЗаявкаНаВозвратТоваровОтКлиента.Менеджер.ФизическоеЛицо КАК ФизЛицо,
	|	НЕ ЗаявкаНаВозвратТоваровОтКлиента.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР
	|		КОГДА ЗаявкаНаВозвратТоваровОтКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована)
	|				ИЛИ ЗаявкаНаВозвратТоваровОтКлиента.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Отклонена)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкаНаВозвратТоваровОтКлиента
	|ГДЕ
	|	ЗаявкаНаВозвратТоваровОтКлиента.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатураПартнера,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаявкаНаВозврат.КОформлениюОстаток / ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(, ЗаявкаНаВозвратТоваровОтКлиента = &ДокументОснование) КАК ЗаявкаНаВозврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|		ПО (ЗаказТовары.Ссылка = &ДокументОснование)
	|			И ЗаявкаНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента = ЗаказТовары.Ссылка
	|			И ЗаявкаНаВозврат.Номенклатура = ЗаказТовары.Номенклатура
	|			И ЗаявкаНаВозврат.Характеристика = ЗаказТовары.Характеристика
	|			И ЗаявкаНаВозврат.КодСтроки = ЗаказТовары.КодСтроки
	|ГДЕ
	|	НЕ ЗаявкаНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента.ЭтоЗаказКакСчет
	|	И ЗаявкаНаВозврат.КОформлениюОстаток > 0
	|	И ЗаявкаНаВозврат.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика,
	|	ЗаказТовары.Упаковка,
	|	ЗаказТовары.КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|ГДЕ
	|	(ЗаказТовары.Ссылка.ЭтоЗаказКакСчет
	|	)	
	|	И ЗаказТовары.Ссылка = &ДокументОснование
	|	И ЗаказТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаШапка  = РезультатыЗапроса[0].Выбрать();
	ВыборкаШапка.Следующий();
	
	Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПроверитьВозможностьВводаНаОсновании(
		ВыборкаШапка.ДокументОснование,
		ВыборкаШапка.СтатусДокумента,
		ВыборкаШапка.ЕстьОшибкиПроведен,
		Истина);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыборкаШапка);
	НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ВыборкаШапка.НомерОснования, Ложь, Истина);
	ДатаДокумента = ВыборкаШапка.ДатаОснования;
	ПоДокументу = НСтр("ru='Заявка на возврат товаров №%Номер% от %Дата%'");
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
	ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
	Товары.Загрузить(РезультатыЗапроса[1].Выгрузить());
	ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров;
	
КонецПроцедуры



#КонецОбласти

#Область ЗаполнениеНаПолучениеДС

Процедура ЗаполнитьПоЗаказуКлиента(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Касса.Владелец
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.БанковскийСчет.Владелец
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	ДанныеДокумента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Статус КАК СтатусДокумента,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо,
	|	ДанныеДокумента.ЭтоЗаказКакСчет КАК ЭтоЗаказКакСчет,
	|	НЕ ДанныеДокумента.Проведен КАК ЕстьОшибкиПроведен
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ИспользуетсяСогласованиеЗаказовКлиентов", ПолучитьФункциональнуюОпцию("ИспользоватьСогласованиеЗаказовКлиентов"));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		Документы.ЗаказКлиента.ПроверитьВозможностьВводаНаОсновании(
			ДокументОснование,
			Выборка.СтатусДокумента,
			Выборка.ЕстьОшибкиПроведен);
			
		Если ЗначениеЗаполнено(Выборка.НомерПоДаннымКлиента) И ЗначениеЗаполнено(Выборка.ДатаПоДаннымКлиента) Тогда
			НомерДокумента = Выборка.НомерПоДаннымКлиента;
			ДатаДокумента = Выборка.ДатаПоДаннымКлиента;
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
			ДатаДокумента = Выборка.ДатаОснования;
		КонецЕсли;
		ПоДокументу = НСтр("ru='Заказ №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ДокументОснование;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииТоваровУслуг(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Касса.Владелец
	|		КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаТовары.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
		|ГДЕ
		|	ТаблицаТовары.Ссылка = &Ссылка
		|	И ТаблицаТовары.Ссылка.РеализацияПоЗаказам
		|");
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		РезультатЗапросаПоЗаказам = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
			ЗаказыКлиента = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
			ЗаказыКлиента.Добавить(ДокументОснование);
		Иначе
			ЗаказыКлиента = ДокументОснование;
		КонецЕсли;
		
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Реализация товаров №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ЗаказыКлиента;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоЗаявкеНаВозвратТоваровДС(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоНакладным)
	|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамНакладным)
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Заявка на возврат товаров №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ДокументОснование;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
			
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоАктуВыполненныхРабот(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаУслуги.ЗаказКлиента КАК ЗаказКлиента
		|ИЗ
		|	Документ.АктВыполненныхРабот.Услуги КАК ТаблицаУслуги
		|ГДЕ
		|	ТаблицаУслуги.Ссылка = &Ссылка
		|	И ТаблицаУслуги.Ссылка.АктПоЗаказам
		|");
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		РезультатЗапросаПоЗаказам = Запрос.Выполнить();
		Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
			ЗаказыКлиента = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
			ЗаказыКлиента.Добавить(ДокументОснование);
		Иначе
			ЗаказыКлиента = ДокументОснование;
		КонецЕсли;
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Акт выполненных работ №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ЗаказыКлиента;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРеализацииУслугПрочихАктивов(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Реализация №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ДокументОснование;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
			
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВыкупуВозвратнойТарыКлиентом(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.Касса.Владелец
	|	КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Выкуп возвратной тары №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ДокументОснование;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
			
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоВозвратуТоваровПоставщику(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|	ИНАЧЕ
	|		ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.СуммаДокумента КАК Сумма,
	|	ДанныеДокумента.СпособКомпенсации КАК СпособКомпенсации,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Возврат товаров №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();

		Если Выборка.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства Тогда
			ОбъектРасчетов = ДокументОснование;
		Иначе
			ОбъектРасчетов = Выборка.Договор;
		КонецЕсли;

		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.СуммаОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ОбъектРасчетов.Объект = &ОбъектРасчетов
		|	) КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.СуммаОстаток > 0
		|");
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
		ВыборкаПоРасчетам = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоРасчетам.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоРасчетам);
			НоваяСтрока.Партнер = ДанныеЗаполнения.Партнер;
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ДанныеЗаполнения.Валюта,
				ВыборкаПоРасчетам.ВалютаВзаиморасчетов, ТекущаяДатаСеанса(), ДанныеЗаполнения.Организация);
			СуммаПоСтроке = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0,
				НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если СуммаПоСтроке <= ДанныеЗаполнения.Сумма Тогда
				НоваяСтрока.Сумма = СуммаПоСтроке;
			Иначе
				НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер = ДанныеЗаполнения.Партнер;
			НоваяСтрока.Сумма = ДанныеЗаполнения.Сумма;
		КонецЕсли;
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКонтрагента(Знач Договор, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Ссылка КАК ОснованиеПлатежа,
	|	ДанныеДокумента.Ссылка КАК Заказ,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо,
	|	0 КАК СуммаДокумента
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", Договор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Договор №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = Выборка.ОснованиеПлатежа;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.ОснованиеПлатежа;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = Выборка.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = Выборка.ОснованиеПлатежа;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		
		ДанныеЗаполнения.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоОтчетуКомиссионера(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Касса.Владелец
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.БанковскийСчет.Владелец
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК НомерПоДаннымКлиента,
	|	ДанныеДокумента.ДатаВходящегоДокумента КАК ДатаПоДаннымКлиента,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		Если ЗначениеЗаполнено(Выборка.НомерПоДаннымКлиента) И ЗначениеЗаполнено(Выборка.ДатаПоДаннымКлиента) Тогда
			НомерДокумента = Выборка.НомерПоДаннымКлиента;
			ДатаДокумента = Выборка.ДатаПоДаннымКлиента;
		Иначе
			НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
			ДатаДокумента = Выборка.ДатаОснования;
		КонецЕсли;
		ПоДокументу = НСтр("ru='Отчет по продажам №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ДокументОснование;
		ПараметрыЗаполненияРасшифровки.Договор          = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьПоВыкупуТоваровХранителем(Знач ДокументОснование, ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС) КАК ТипДоверенности,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Касса <> ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Касса.Владелец
	|		КОГДА ДанныеДокумента.БанковскийСчетОрганизации <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.БанковскийСчетОрганизации.Владелец
	|		ИНАЧЕ ДанныеДокумента.Организация
	|	КОНЕЦ КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	ДанныеДокумента.Номер КАК НомерОснования,
	|	ДанныеДокумента.Дата КАК ДатаОснования,
	|	ДанныеДокумента.Менеджер.ФизическоеЛицо КАК ФизЛицо
	|ИЗ
	|	Документ.ВыкупТоваровХранителем КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		НомерДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.НомерОснования, Ложь, Истина);
		ДатаДокумента = Выборка.ДатаОснования;
		ПоДокументу = НСтр("ru = 'Выкуп товаров хранителем №%Номер% от %Дата%'");
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Номер%", НомерДокумента);
		ПоДокументу = СтрЗаменить(ПоДокументу, "%Дата%", Формат(ДатаДокумента, "ДЛФ=D"));
		РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента = ДокументОснование;
		ПараметрыЗаполненияРасшифровки.Договор = Выборка.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента = ДанныеЗаполнения.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер = Выборка.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = ДокументОснование;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		
		СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
