#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	ДоверенностьВыданнаяЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов - таблиц значений - данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.ДоверенностьВыданная") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		
		ДоверенностьВыданнаяЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ДоверенностьВыданнаяЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);
	
КонецПроцедуры

// Добавляет команду создания документа "Доверенность".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  
// Возвращаемое значение:
//	ТаблицаЗначений, Неопределено - сформированные команды для вывода в подменю.
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.ДоверенностьВыданная.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.ДоверенностьВыданная);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "ИспользоватьДоверенностиНаПолучениеТМЦ";
	

		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ДоверенностьВыданнаяЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);
	
КонецПроцедуры

// Возвращает срок действия последней введенной ответственным в систему доверенности.
//
// Возвращаемое значение:
//	Число - срок действия последней доверенности.
//
Функция ПолучитьСрокДействияПоследнейДоверенности() Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Доверенность.СрокДействия КАК СрокДействия
		|ИЗ
		|	Документ.ДоверенностьВыданная КАК Доверенность
		|ГДЕ
		|	НЕ Доверенность.ПометкаУдаления
		|	И Доверенность.Ответственный = &Ответственный
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ
		|");
		
	Запрос.УстановитьПараметр("Ответственный", Пользователи.ТекущийПользователь());
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СрокДействия;
	КонецЕсли;
	
КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять
//	НовыйСтатус - Строка - Имя нового статуса
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыДоверенностей[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ИСТИНА КАК Проведен, // Для документа доверенности свойство <Проведенение> установлено в <Запретить>
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
//	НовыйСтатус - Строка - Имя нового статуса для документов
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Дополнительные проверки для доверенности отсутствуют
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ФизЛицо)
	|	И ЗначениеРазрешено(Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Печать

Функция ДоверенностиПоЗаказам(МассивОбъектов) Экспорт
	
	ДоверенностиПоЗаказам = Новый Массив;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Доверенность.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|ГДЕ
	|	НЕ Доверенность.ПометкаУдаления
	|	И Доверенность.ДокументОснование В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ДоверенностиПоЗаказам = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДоверенностиПоЗаказам;
	
КонецФункции

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	ДоверенностьВыданнаяЛокализация.ДобавитьКомандыПечати(КомандыПечати);

КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ДоверенностьВыданнаяЛокализация.Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода)
		
КонецПроцедуры


Функция КомплектПечатныхФорм() Экспорт
	
	КомплектПечатныхФорм = РегистрыСведений.НастройкиПечатиОбъектов.ПодготовитьКомплектПечатныхФорм();
	
	ДоверенностьВыданнаяЛокализация.КомплектПечатныхФорм(КомплектПечатныхФорм);
	
	Возврат КомплектПечатныхФорм;
	
КонецФункции

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	СтруктураДанныхОбъектаПечати - см. ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта.СтруктураДанныхОбъектаПечати
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда 
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТекущиеДела

// Заполняет список текущих дел пользователя.
// Параметры: 
//     ТекущиеДела - см. ТекущиеДелаСервер.ТекущиеДела.
//
Процедура ПриЗаполненииСпискаТекущихДел(ТекущиеДела) Экспорт
	
	ИмяФормы = "Документ.ДоверенностьВыданная.Форма.ФормаСпискаДокументов";
	ИспользованиеДоверенностей = ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ");
	
	ОбщиеПараметрыЗапросов = ТекущиеДелаСлужебный.ОбщиеПараметрыЗапросов();
	
	// Определим доступны ли текущему пользователю показатели группы
	Доступность =
		(ОбщиеПараметрыЗапросов.ЭтоПолноправныйПользователь
			Или ПравоДоступа("Просмотр", Метаданные.Документы.ДоверенностьВыданная))
		И (ПравоДоступа("Добавление", Метаданные.Документы.ДоверенностьВыданная)
			ИЛИ ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная))
		И ИспользованиеДоверенностей;
	
	Если НЕ Доступность Тогда
		Возврат;
	КонецЕсли;
	
	ДоступностьРаспоряженийТовары = ИспользованиеДоверенностей
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов);
		
	ДоступностьРаспоряженийДС = ИспользованиеДоверенностей
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами)
		И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
		
	// Документы.
	ЧтениеЗаказПоставщику = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказПоставщику)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказПоставщику);
	ЧтениеЗаказКлиента = ПравоДоступа("Чтение", Метаданные.Документы.ЗаказКлиента)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ЧтениеЗаявкаНаВозвратТоваровОтКлиента = ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ЧтениеАктВыполненныхРабот = ПравоДоступа("Чтение", Метаданные.Документы.АктВыполненныхРабот)
		И ПравоДоступа("Просмотр", Метаданные.Документы.АктВыполненныхРабот);
	ЧтениеРеализацияУслугПрочихАктивов = ПравоДоступа("Чтение", Метаданные.Документы.РеализацияУслугПрочихАктивов)
		И ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияУслугПрочихАктивов);
	ЧтениеОтчетКомиссионера = ПравоДоступа("Чтение", Метаданные.Документы.ОтчетКомиссионера)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетКомиссионера);
	ЧтениеРеализацияТоваровУслуг = ПравоДоступа("Чтение", Метаданные.Документы.РеализацияТоваровУслуг)
		И ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг);
		
	
	
	ЧтениеВозвратТоваровПоставщику = ПравоДоступа("Чтение", Метаданные.Документы.ВозвратТоваровПоставщику)
		И ПравоДоступа("Просмотр", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	// Справочники.
	ЧтениеДоговорыКонтрагентов = ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	// Расчет показателей
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Доверенности.Ссылка,
	|	Доверенности.ДокументОснование,
	|	Доверенности.ТипДоверенности,
	|	Доверенности.Статус,
	|	Доверенности.ДатаОкончанияДействия,
	|	Доверенности.Ответственный
	|ПОМЕСТИТЬ ВыданныеДоверенности
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыданныеДоверенности.ДокументОснование
	|ПОМЕСТИТЬ ОснованияДоверенностейНаТовар
	|ИЗ
	|	ВыданныеДоверенности КАК ВыданныеДоверенности
	|ГДЕ
	|	НЕ ВыданныеДоверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыданныеДоверенности.ДокументОснование
	|ПОМЕСТИТЬ ОснованияДоверенностейНаДС
	|ИЗ
	|	ВыданныеДоверенности КАК ВыданныеДоверенности
	|ГДЕ
	|	ВыданныеДоверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС);";
	
	Если ДоступностьРаспоряженийТовары Тогда
		ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаРаспоряженийПоступление.ЗаказПоставщику КАК Ссылка
		|ПОМЕСТИТЬ РаспоряженияПоступление
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ТИПЗНАЧЕНИЯ(ЗаказПоставщику) В (&ТипыДокументов)) КАК ТаблицаРаспоряженийПоступление
		|ГДЕ
		|	ТаблицаРаспоряженийПоступление.КОформлениюОстаток > 0
		|	И ТИПЗНАЧЕНИЯ(ТаблицаРаспоряженийПоступление.ЗаказПоставщику) В (&ТипыДокументов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки КАК ТаблицаРаспоряженийВозврат
		|ГДЕ
		|	НЕ ТаблицаРаспоряженийВозврат.ЗаявкаНаВозвратТоваровОтКлиента.ЭтоЗаказКакСчет
		|	И ТаблицаРаспоряженийВозврат.КОформлениюОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРаспоряженийВозвратН.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ТаблицаРаспоряженийВозвратН
		|ГДЕ
		|	ТаблицаРаспоряженийВозвратН.ЭтоЗаказКакСчет
		|	И ТаблицаРаспоряженийВозвратН.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаспоряженияПоступление.Ссылка) КАК КоличествоПоступление
		|ПОМЕСТИТЬ РаспоряженияНаДоставку
		|ИЗ
		|	РаспоряженияПоступление КАК РаспоряженияПоступление
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияДоверенностейНаТовар КАК ОснованияДоверенностейНаТовар
		|		ПО (ОснованияДоверенностейНаТовар.ДокументОснование = РаспоряженияПоступление.Ссылка)
		|ГДЕ
		|	ОснованияДоверенностейНаТовар.ДокументОснование ЕСТЬ NULL;";
		
		ТипыДокументов = Новый Массив;
		Если ЧтениеЗаказПоставщику Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		КонецЕсли;
		
		
		
		Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	КонецЕсли;
	
	Если ДоступностьРаспоряженийДС Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Ссылка КАК ОбъектРасчетов
		|ПОМЕСТИТЬ ОбъектыРасчетов
		|ИЗ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
		|ГДЕ
		|	(ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) В (&ТипыДокументов)
		|	ИЛИ ТИПЗНАЧЕНИЯ(ОбъектыРасчетов.Объект) = ТИП(Документ.ВозвратТоваровПоставщику))
		|	И НЕ ОбъектыРасчетов.ПометкаУдаления
		|;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасчетыСКлиентами.ОбъектРасчетов.Объект КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДолга
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетов)) КАК РасчетыСКлиентами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
		|		ПО РасчетыСКлиентами.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
		|ГДЕ
		|	РасчетыСКлиентами.КОплатеОстаток - РасчетыСКлиентами.ОплачиваетсяОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.ОбъектРасчетов.Объект
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(, ОбъектРасчетов В (ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетов)) КАК РасчетыСПоставщиками
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
		|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики
		|ГДЕ
		|	РасчетыСПоставщиками.КОплатеОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДокументыДолга.Ссылка) КАК ДокументовКОплате
		|ПОМЕСТИТЬ ДокументыКОплате
		|ИЗ
		|	ДокументыДолга КАК ДокументыДолга
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОснованияДоверенностейНаДС КАК ОснованияДоверенностейНаДС
		|		ПО (ОснованияДоверенностейНаДС.ДокументОснование = ДокументыДолга.Ссылка)
		|ГДЕ
		|	ОснованияДоверенностейНаДС.ДокументОснование ЕСТЬ NULL;";
		
		ТипыДокументов = Новый Массив;
		Если ЧтениеЗаказКлиента Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
		КонецЕсли;
		Если ЧтениеРеализацияТоваровУслуг Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		КонецЕсли;
		Если ЧтениеЗаявкаНаВозвратТоваровОтКлиента Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		КонецЕсли;
		Если ЧтениеАктВыполненныхРабот Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		КонецЕсли;
		Если ЧтениеРеализацияУслугПрочихАктивов Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
		КонецЕсли;
		Если ЧтениеВозвратТоваровПоставщику Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		КонецЕсли;
		Если ЧтениеОтчетКомиссионера Тогда
			ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		КонецЕсли;
		Если ЧтениеДоговорыКонтрагентов Тогда
			ТипыДокументов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	NULL КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров,
	|	NULL КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеДС,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенности,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.ДатаОкончанияДействия <= &ДатаАктуальности
	|					И ДокументДоверенность.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенностиИстекающиеНаСегодня,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ДокументДоверенность.ДатаОкончанияДействия < &ДатаАктуальности
	|					И ДокументДоверенность.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|					И ДокументДоверенность.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|				ТОГДА ДокументДоверенность.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК ВыданныеДоверенностиПросроченные
	|ПОМЕСТИТЬ ТаблицаПоказателей
	|ИЗ
	|	ВыданныеДоверенности КАК ДокументДоверенность
	|ГДЕ
	|	ДокументДоверенность.Ответственный = &Пользователь
	|";
	
	Если ДоступностьРаспоряженийТовары Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаспоряженияНаДоставку.КоличествоПоступление,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ РаспоряженияНаДоставку";
	КонецЕсли;
	
	Если ДоступностьРаспоряженийДС Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	ДокументыКОплате.ДокументовКОплате,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ ДокументыКОплате";
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	ТекущиеДелаСлужебный.УстановитьОбщиеПараметрыЗапросов(Запрос, ОбщиеПараметрыЗапросов);
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|		&ДоступностьРаспоряженийТовары,
	|		&ДоступностьРаспоряженийДС,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенности) КАК ВыданныеДоверенности,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенностиИстекающиеНаСегодня) КАК ВыданныеДоверенностиИстекающиеНаСегодня,
	|		СУММА(ТаблицаПоказателей.ВыданныеДоверенностиПросроченные) КАК ВыданныеДоверенностиПросроченные
	|ИЗ
	|	ТаблицаПоказателей КАК ТаблицаПоказателей";
	
	// Уберем служебные коментарии из текста запроса - "разблокируем" строки запроса
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДоступностьРаспоряженийТовары,", 
		?(ДоступностьРаспоряженийТовары, "СУММА(ТаблицаПоказателей.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров) КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров,", ""));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДоступностьРаспоряженийДС,", 
		?(ДоступностьРаспоряженийДС, "СУММА(ТаблицаПоказателей.РаспоряженияНаОформлениеДоверенностиНаПолучениеДС) КАК РаспоряженияНаОформлениеДоверенностиНаПолучениеДС,", ""));
	Результат = ТекущиеДелаСлужебный.ЧисловыеПоказателиТекущихДел(Запрос);
	
	// Заполнение дел.
	// ДоверенностиНаПолучениеТМЦ
	// РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров
	ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров = Ложь;
	Если ДоступностьРаспоряженийТовары Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.НеВыдана);
		ПараметрыОтбора.Вставить("Актуальность", "");
		ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
		ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
		ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ТребуетсяДоверенность", Истина);
		ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
		ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
		ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформление");
		
		ДелоРодитель = ТекущиеДела.Добавить();
		ДелоРодитель.Идентификатор  = "ДоверенностиНаПолучениеТМЦ";
		ДелоРодитель.Представление  = НСтр("ru = 'Доверенности на получение ТМЦ'");
		ДелоРодитель.Владелец       = Метаданные.Подсистемы.Закупки;
		
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров";
		Дело.ЕстьДела       = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров > 0;
		Дело.Представление  = НСтр("ru = 'Основания для оформления (получение товаров)'");
		Дело.Количество     = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Владелец       = "ДоверенностиНаПолучениеТМЦ";
		
		ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеТоваров = Дело.ЕстьДела;
		ДелоРодитель.ЕстьДела = Дело.ЕстьДела;
	КонецЕсли;
	
	// РаспоряженияНаОформлениеДоверенностиНаПолучениеДС
	ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеДС = Ложь;
	Если ДоступностьРаспоряженийДС Тогда
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.НеВыдана);
		ПараметрыОтбора.Вставить("Актуальность", "");
		ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
		ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
		ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
		ПараметрыОтбора.Вставить("ТребуетсяДоверенность", Истина);
		ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
		ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
		ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
		ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаРаспоряженияНаОформлениеДС");
		
		// ДоверенностиНаПолучениеТМЦ
		ДелоРодительПродажи = ТекущиеДела.Добавить();
		ДелоРодительПродажи.Идентификатор  = "ДоверенностиНаПолучениеДС";
		ДелоРодительПродажи.Представление  = НСтр("ru = 'Доверенности на получение наличных ДС'");
		ДелоРодительПродажи.Владелец       = Метаданные.Подсистемы.Продажи;
	
		Дело = ТекущиеДела.Добавить();
		Дело.Идентификатор  = "РаспоряженияНаОформлениеДоверенностиНаПолучениеДС";
		Дело.ЕстьДела       = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеДС > 0;
		Дело.Представление  = НСтр("ru = 'Основания для оформления (получение наличных ДС)'");
		Дело.Количество     = Результат.РаспоряженияНаОформлениеДоверенностиНаПолучениеДС;
		Дело.Важное         = Ложь;
		Дело.Форма          = ИмяФормы;
		Дело.ПараметрыФормы = ПараметрыФормы;
		Дело.Владелец       = "ДоверенностиНаПолучениеДС";
		
		ЕстьРаспоряженияНаОформлениеДоверенностиНаПолучениеДС = Дело.ЕстьДела;
		ДелоРодительПродажи.ЕстьДела = Дело.ЕстьДела;
	КонецЕсли;
	
	ДелоРодительФинансы = ТекущиеДела.Добавить();
	ДелоРодительФинансы.Идентификатор  = "ВыданныеДоверенностиРодитель";
	ДелоРодительФинансы.Представление  = НСтр("ru = 'Выданные доверенности'");
	ДелоРодительФинансы.Владелец       = Метаданные.Подсистемы.Казначейство;
	
	// ВыданныеДоверенности
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Актуальность", "");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенности";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенности > 0;
	Дело.Представление  = НСтр("ru = 'Выданные доверенности'");
	Дело.Количество     = Результат.ВыданныеДоверенности;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	// ВыданныеДоверенностиИстекающиеНаСегодня
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Актуальность", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенностиИстекающиеНаСегодня";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенностиИстекающиеНаСегодня > 0;
	Дело.Представление  = НСтр("ru = 'Доверенности, истекающие сегодня'");
	Дело.Количество     = Результат.ВыданныеДоверенностиИстекающиеНаСегодня;
	Дело.Важное         = Ложь;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	// ВыданныеДоверенностиПросроченные
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Состояние", Перечисления.СтатусыДоверенностей.Выдана);
	ПараметрыОтбора.Вставить("Просрочен", "Сегодня");
	ПараметрыОтбора.Вставить("ДатаСобытия", ОбщиеПараметрыЗапросов.ПустаяДата);
	ПараметрыОтбора.Вставить("Ответственный", ОбщиеПараметрыЗапросов.Пользователь);
	ПараметрыОтбора.Вставить("ФизЛицо", Справочники.ФизическиеЛица.ПустаяСсылка());
	ПараметрыОтбора.Вставить("ЕстьДоверенность", Ложь);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураБыстрогоОтбора", ПараметрыОтбора);
	ПараметрыФормы.Вставить("СостояниеРаспоряжения", НСтр("ru = 'Требующие создания доверенности'"));
	ПараметрыФормы.Вставить("НаличиеДоверенности", Истина);
	ПараметрыФормы.Вставить("ИмяТекущейСтраницы", "СтраницаДоверенностиНаПолучениеТоваров");
	
	Дело = ТекущиеДела.Добавить();
	Дело.Идентификатор  = "ВыданныеДоверенностиПросроченные";
	Дело.ЕстьДела       = Результат.ВыданныеДоверенностиПросроченные > 0;
	Дело.Представление  = НСтр("ru = 'Просроченные доверенности'");
	Дело.Количество     = Результат.ВыданныеДоверенностиПросроченные;
	Дело.Важное         = Истина;
	Дело.Форма          = ИмяФормы;
	Дело.ПараметрыФормы = ПараметрыФормы;
	Дело.Владелец       = "ВыданныеДоверенностиРодитель";
	
	Если Результат.ВыданныеДоверенности > 0
		Или Результат.ВыданныеДоверенностиИстекающиеНаСегодня > 0
		Или Результат.ВыданныеДоверенностиПросроченные > 0 Тогда
		ДелоРодительФинансы.ЕстьДела = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

#КонецОбласти

#Область Прочее

#Область ФормированиеГиперссылкиВЖурналеЗакупок 

Функция ТекстЗапросаРаспоряженийНаТовары(НетДоверенности = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(Доверенности.Ссылка) КАК СозданаДоверенность,
	|	Доверенности.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ Доверенности
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|	И Доверенности.ТипДоверенности <> ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|
	|СГРУППИРОВАТЬ ПО
	|	Доверенности.ДокументОснование
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановоеПоступление.Распоряжение.Ссылка КАК Ссылка,
	|	ПлановоеПоступление.Распоряжение.ПометкаУдаления КАК ПометкаУдаления,
	|	ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) КАК ТипРаспоряжения,
	|	ПлановоеПоступление.Распоряжение.Дата КАК Дата,
	|	ПлановоеПоступление.Распоряжение.Номер КАК Номер,
	|	ПлановоеПоступление.Распоряжение.Партнер КАК Партнер,
	|	ПлановоеПоступление.Распоряжение.Контрагент КАК Контрагент,
	|	ПлановоеПоступление.Распоряжение.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА
	|				ЛОЖЬ
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|		ИНАЧЕ ПлановоеПоступление.Распоряжение.Склад
	|	КОНЕЦ КАК Склад,
	|	ПлановоеПоступление.Распоряжение.Валюта КАК Валюта,
	|	ПлановоеПоступление.Распоряжение.Менеджер КАК Менеджер,
	|	ПлановоеПоступление.Распоряжение.СуммаДокумента КАК СуммаДокумента,
	|	ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка) КАК Приоритет,
	|	ПлановоеПоступление.Распоряжение.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПРЕДСТАВЛЕНИЕ(ПлановоеПоступление.Распоряжение.ХозяйственнаяОперация) КАК ХозяйственнаяОперацияПредставление,
	|	ПлановоеПоступление.Распоряжение.Комментарий КАК Комментарий,
	|	(Доверенности.СозданаДоверенность ЕСТЬ НЕ NULL) КАК ЕстьДоверенность,
	|	1 КАК КартинкаПриоритета
	|ИЗ
	|	#ТекстЗапросаПлановоеПоступление КАК ПлановоеПоступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ Доверенности КАК Доверенности
	|		ПО ПлановоеПоступление.Распоряжение = Доверенности.ДокументОснование
	|ГДЕ
	|	НЕ ПлановоеПоступление.Распоряжение.Ссылка ЕСТЬ NULL 
	|	И (ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) = ТИП(Документ.ЗаказПоставщику)

	|			ИЛИ ТИПЗНАЧЕНИЯ(ПлановоеПоступление.Распоряжение) = ТИП(Документ.ЗаявкаНаВозвратТоваровОтКлиента))
	|	И &УсловиеОтбора";
	
	ТекстЗапросаПлановоеПоступление = Новый Массив;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|ВЫБРАТЬ
		|		ЗаказыПоставщикам.ЗаказПоставщику КАК Распоряжение
		|	ИЗ
		|		РегистрНакопления.ЗаказыПоставщикам.Остатки КАК ЗаказыПоставщикам
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаказыПоставщикам.ЗаказПоставщику
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗаказыПоставщикам.КОформлениюОстаток) > 0");
	КонецЕсли;
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|	ВЫБРАТЬ
		|		ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента КАК Распоряжение
		|	ИЗ
		|		РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки КАК ЗаявкиНаВозврат
		|	ГДЕ
		|		НЕ ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента.ЭтоЗаказКакСчет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ЗаявкиНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента
		|	
		|	ИМЕЮЩИЕ
		|		СУММА(ЗаявкиНаВозврат.КОформлениюОстаток) > 0");
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента) Тогда
		ТекстЗапросаПлановоеПоступление.Добавить("
		|	ВЫБРАТЬ
		|		ЗаявкиНаВозврат.Ссылка КАК Распоряжение
		|	ИЗ
		|		Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ЗаявкиНаВозврат
		|	ГДЕ
		|		ЗаявкиНаВозврат.ЭтоЗаказКакСчет
		|		И ЗаявкиНаВозврат.Проведен");
	КонецЕсли;
	Если ТекстЗапросаПлановоеПоступление.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'У пользователя недостаточно прав для исполнения операции над базой данных'");
	КонецЕсли;
	ТекстЗапросаПлановоеПоступление = СтрСоединить(ТекстЗапросаПлановоеПоступление,"
		|ОБЪЕДИНИТЬ ВСЕ
		|");
	ТекстЗапросаПлановоеПоступление = "("+ТекстЗапросаПлановоеПоступление+")";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТекстЗапросаПлановоеПоступление",ТекстЗапросаПлановоеПоступление);
	
	УсловиеОтбора = "";
	
	Если ЗначениеЗаполнено(НетДоверенности) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "Доверенности.СозданаДоверенность ЕСТЬ NULL");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &УсловиеОтбора", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции

Функция СформироватьГиперссылкуСмТакжеВРаботе(Параметры) Экспорт
	
	Если Параметры.Свойство("ТипДоверенности") И Параметры.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ДоверенностьВыданная)
			ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ") Тогда
			
			Возврат Неопределено
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаДоверенностиНаПолучениеДС();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		
	Иначе
		ИспользоватьРасширенныеВозможностиЗаказаКлиента = ПолучитьФункциональнуюОпцию("ИспользоватьРасширенныеВозможностиЗаказаКлиента");
		Если Не (ПолучитьФункциональнуюОпцию("ИспользоватьДоверенностиНаПолучениеТМЦ")
				И ПравоДоступа("Чтение", Метаданные.Документы.ДоверенностьВыданная)
				И (ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаказыПоставщикам)
					Или ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.ЗаявкиНаВозвратТоваровОтКлиентов)
						И ИспользоватьРасширенныеВозможностиЗаказаКлиента
					Или ПравоДоступа("Чтение", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента)
						И Не ИспользоватьРасширенныеВозможностиЗаказаКлиента)) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапросаРаспоряженийНаТовары(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
	КонецЕсли;
	ТекстГиперссылки = НСтр("ru = 'Доверенности'");
	
	ИмяФормыРабочееМестоДоверенности = "Документ.ДоверенностьВыданная.Форма.ФормаСпискаДокументов";
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,ЦветаСтиля.НезаполненноеПолеТаблицы,,
			ИмяФормыРабочееМестоДоверенности);
	Иначе
		Возврат Новый ФорматированнаяСтрока(ТекстГиперссылки,,,,
			ИмяФормыРабочееМестоДоверенности);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапросаРаспоряженийНаДС() Экспорт
	
	// Регистры.
	ЧтениеРасчетыСКлиентами = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами);
	ЧтениеРасчетыСПоставщиками = ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСПоставщиками);
	
	// Документы.
	ЧтениеЗаказКлиента = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказКлиента);
	ЧтениеЗаявкаНаВозвратТоваровОтКлиента = ПравоДоступа("Просмотр", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента);
	ЧтениеАктВыполненныхРабот = ПравоДоступа("Просмотр", Метаданные.Документы.АктВыполненныхРабот);
	ЧтениеРеализацияУслугПрочихАктивов = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияУслугПрочихАктивов);
	ЧтениеОтчетКомиссионера = ПравоДоступа("Просмотр", Метаданные.Документы.ОтчетКомиссионера);
	ЧтениеРеализацияТоваровУслуг = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг);
	
	
	ЧтениеВозвратТоваровПоставщику = ПравоДоступа("Просмотр", Метаданные.Документы.ВозвратТоваровПоставщику);
	
	// Справочники.
	ЧтениеДоговорыКонтрагентов = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКонтрагентов);
	
	ТекстыЗапросов = Новый Массив();
	
	ТекстШаблона = "
	|ВЫБРАТЬ
	|	ДокументРасчетов.Ссылка КАК Ссылка,
	|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументРасчетов.Дата КАК Дата,
	|	ДокументРасчетов.Номер КАК Номер,
	|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
	|	Расчеты.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
	|	&ПоступлениеОплатыОтКлиентаПредставление КАК ХозяйственнаяОперацияПредставление,
	|	КлючиАналитики.Партнер КАК Партнер,
	|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
	|	КлючиАналитики.Контрагент КАК Контрагент,
	|	КлючиАналитики.Организация КАК Организация,
	|	ДокументРасчетов.Менеджер КАК Менеджер,
	|	ДокументРасчетов.Менеджер КАК Ответственный,
	|	ДокументРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
	|				,
	|				НЕ ОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО
	|					И ОбъектРасчетов.Объект ССЫЛКА Документ.ЗаказКлиента) КАК Расчеты
	|		ПО (Расчеты.ОбъектРасчетов.Объект = ДокументРасчетов.Ссылка)
	|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
	|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)
	|ГДЕ
	|	ДокументРасчетов.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)";
		
	Если ЧтениеРасчетыСКлиентами Тогда
		
		ТекстХОПредставление = НСтр("ru = '""Поступление оплаты от клиента""'");
		
		// Заказ клиента.
		Если ЧтениеЗаказКлиента Тогда
			ТекстЗапроса = ТекстШаблона;
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		// Заявка на возврат товаров от клиента.
		Если ЧтениеЗаявкаНаВозвратТоваровОтКлиента Тогда
			ТекстЗапроса = СтрЗаменить(ТекстШаблона, "ЗаказКлиента", Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.Имя);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		// Акт выполненных работ.
		Если ЧтениеАктВыполненныхРабот Тогда
			ТекстЗапроса = СтрЗаменить(ТекстШаблона, "ЗаказКлиента", Метаданные.Документы.АктВыполненныхРабот.Имя);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		// Реализация услуг прочих активов.
		Если ЧтениеРеализацияУслугПрочихАктивов Тогда
			ТекстЗапроса = СтрЗаменить(ТекстШаблона, "ЗаказКлиента", Метаданные.Документы.РеализацияУслугПрочихАктивов.Имя);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		// Отчет комиссионера.
		Если ЧтениеОтчетКомиссионера Тогда
			ТекстЗапроса = СтрЗаменить(ТекстШаблона, "ЗаказКлиента", Метаданные.Документы.ОтчетКомиссионера.Имя);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		// Реализация товаров услуг.
		Если ЧтениеРеализацияТоваровУслуг Тогда
			ТекстЗапроса = СтрЗаменить(ТекстШаблона, "ЗаказКлиента", Метаданные.Документы.РеализацияТоваровУслуг.Имя);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		
		Если ЧтениеДоговорыКонтрагентов Тогда
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ДокументРасчетов.Ссылка КАК Ссылка,
			|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
			|	ДокументРасчетов.Дата КАК Дата,
			|	ДокументРасчетов.Номер КАК Номер,
			|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
			|	Расчеты.Валюта КАК Валюта,
			|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента) КАК ХозяйственнаяОперация,
			|	&ПоступлениеОплатыОтКлиентаПредставление КАК ХозяйственнаяОперацияПредставление,
			|	КлючиАналитики.Партнер КАК Партнер,
			|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
			|	КлючиАналитики.Контрагент КАК Контрагент,
			|	КлючиАналитики.Организация КАК Организация,
			|	ДокументРасчетов.Менеджер КАК Менеджер,
			|	ДокументРасчетов.Менеджер КАК Ответственный,
			|	0 КАК СуммаДокумента,
			|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДокументРасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(
			|				,
			|				ОбъектРасчетов.Объект ССЫЛКА Справочник.ДоговорыКонтрагентов) КАК Расчеты
			|		ПО (Расчеты.ОбъектРасчетов.Объект = ДокументРасчетов.Ссылка)
			|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
			|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоступлениеОплатыОтКлиентаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЧтениеРасчетыСПоставщиками Тогда
		
		ТекстХОПредставление = НСтр("ru = '""Возврат от поставщика""'");
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ДокументРасчетов.Ссылка КАК Ссылка,
		|	ДокументРасчетов.ПометкаУдаления КАК ПометкаУдаления,
		|	ДокументРасчетов.Дата КАК Дата,
		|	ДокументРасчетов.Номер КАК Номер,
		|	ТИПЗНАЧЕНИЯ(ДокументРасчетов.Ссылка) КАК ТипРаспоряжения,
		|	Расчеты.Валюта КАК Валюта,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика) КАК ХозяйственнаяОперация,
		|	&ВозвратДенежныхСредствОтПоставщикаПредставление КАК ХозяйственнаяОперацияПредставление,
		|	КлючиАналитики.Партнер КАК Партнер,
		|	КлючиАналитики.Партнер.Наименование КАК ПартнерПредставление,
		|	КлючиАналитики.Контрагент КАК Контрагент,
		|	КлючиАналитики.Организация КАК Организация,
		|	ДокументРасчетов.Менеджер КАК Менеджер,
		|	ДокументРасчетов.Менеджер КАК Ответственный,
		|	ДокументРасчетов.СуммаДокумента КАК СуммаДокумента,
		|	Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток КАК КОплатеОстаток
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику КАК ДокументРасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСПоставщиками.Остатки(
		|				,
		|				НЕ ОбъектРасчетов.Объект = НЕОПРЕДЕЛЕНО
		|					И ОбъектРасчетов.Объект ССЫЛКА Документ.ВозвратТоваровПоставщику) КАК Расчеты
		|		ПО (Расчеты.ОбъектРасчетов.Объект = ДокументРасчетов.Ссылка)
		|			И (Расчеты.КОплатеОстаток - Расчеты.ОплачиваетсяОстаток > 0)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитики
		|		ПО (Расчеты.АналитикаУчетаПоПартнерам = КлючиАналитики.КлючАналитики)
		|";
		
		// Возврат товаров поставщику.
		Если ЧтениеВозвратТоваровПоставщику Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВозвратДенежныхСредствОтПоставщикаПредставление", ТекстХОПредставление);
			ТекстыЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекстыЗапросов.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстШаблонаЗапроса = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Документы.Ссылка КАК Ссылка,
		|	Документы.ПометкаУдаления КАК ПометкаУдаления,
		|	Документы.Дата КАК Дата,
		|	Документы.Номер КАК Номер,
		|	Документы.ТипРаспоряжения КАК ТипРаспоряжения,
		|	Документы.Валюта КАК Валюта,
		|	Документы.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Документы.ХозяйственнаяОперацияПредставление КАК ХозяйственнаяОперацияПредставление,
		|	Документы.Партнер КАК Партнер,
		|	Документы.ПартнерПредставление КАК ПартнерПредставление,
		|	Документы.Контрагент КАК Контрагент,
		|	Документы.Организация КАК Организация,
		|	Документы.Менеджер КАК Менеджер,
		|	Документы.Ответственный КАК Ответственный,
		|	Документы.СуммаДокумента КАК СуммаДокумента,
		|	Документы.КОплатеОстаток КАК КОплатеОстаток
		|ПОМЕСТИТЬ ДокументыРасчетов
		|ИЗ ДокументыРасчетовПредварительные КАК Документы
		|;";
	
	ТекстЗапроса = СтрЗаменить(ТекстШаблонаЗапроса, "ДокументыРасчетовПредварительные",
		"(" + СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()) + ")");
	
	ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Доверенности.ДокументОснование
	|ПОМЕСТИТЬ ВыданныеДоверенности
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|	И Доверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыРасчетов.Ссылка КАК Ссылка,
	|	ДокументыРасчетов.ПометкаУдаления КАК ПометкаУдаления,
	|	ДокументыРасчетов.Дата КАК Дата,
	|	ДокументыРасчетов.Номер КАК Номер,
	|	ДокументыРасчетов.ТипРаспоряжения КАК ТипРаспоряжения,
	|	ДокументыРасчетов.Валюта КАК Валюта,
	|	ДокументыРасчетов.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДокументыРасчетов.ХозяйственнаяОперацияПредставление КАК ХозяйственнаяОперацияПредставление,
	|	ДокументыРасчетов.Партнер КАК Партнер,
	|	ДокументыРасчетов.Партнер.Наименование КАК ПартнерПредставление,
	|	ДокументыРасчетов.Контрагент КАК Контрагент,
	|	ДокументыРасчетов.Организация КАК Организация,
	|	ДокументыРасчетов.Менеджер КАК Менеджер,
	|	ДокументыРасчетов.Ответственный КАК Ответственный,
	|	ДокументыРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	ДокументыРасчетов.КОплатеОстаток КАК КОплатеОстаток,
	|	ЗНАЧЕНИЕ(Справочник.Приоритеты.ПустаяСсылка) КАК Приоритет,
	|	ВЫБОР
	|		КОГДА ВыданныеДоверенности.ДокументОснование ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДоверенность,
	|	ВЫБОР
	|		КОГДА ВыданныеДоверенности.ДокументОснование ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяДоверенность,
	|	1 КАК КартинкаПриоритета
	|ИЗ
	|	ДокументыРасчетов КАК ДокументыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыданныеДоверенности КАК ВыданныеДоверенности
	|		ПО ДокументыРасчетов.Ссылка = ВыданныеДоверенности.ДокументОснование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДоверенностиНаПолучениеДС()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ДоверенностьВыданная.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьВыданная
	|ГДЕ
	|	ДоверенностьВыданная.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|	И ДоверенностьВыданная.Статус В (ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана),ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.НеВыдана))";
	
	Возврат ТекстЗапроса
	
КонецФункции

// Формирует таблицу значений для расшифровки платежей.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//   * СтатьяДвиженияДенежныхСредств - СправочникСсылка.СтатьиДвиженияДенежныхСредств
//   * ОбъектРасчетов - СправочникСсылка.ОбъектыРасчетов
//   * Партнер - СправочникСсылка.Партнеры
//   * ВалютаВзаиморасчетов - СправочникСсылка.Валюты
//   * ДатаПогашения - Дата
//   * Сумма - Число
//   * СуммаВзаиморасчетов - Число
//
Функция ПолучитьТаблицуРасшифровкаПлатежа() Экспорт
	
	РасшифровкаПлатежа = Новый ТаблицаЗначений();
	РасшифровкаПлатежа.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
	РасшифровкаПлатежа.Колонки.Добавить("ОбъектРасчетов",                Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	РасшифровкаПлатежа.Колонки.Добавить("Партнер",                       Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	РасшифровкаПлатежа.Колонки.Добавить("ВалютаВзаиморасчетов",          Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	РасшифровкаПлатежа.Колонки.Добавить("ДатаПогашения",                 Новый ОписаниеТипов("Дата"));
	РасшифровкаПлатежа.Колонки.Добавить("Сумма",                         Новый ОписаниеТипов("Число"));
	РасшифровкаПлатежа.Колонки.Добавить("СуммаВзаиморасчетов",           Новый ОписаниеТипов("Число"));
	
	Возврат РасшифровкаПлатежа;
	
КонецФункции

#КонецОбласти

#Область РасчетСтатусаДоверенности

Функция РассчитатьСостояниеДоверенности(МассивОбъектов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДоверенностьНаТовары.Ссылка КАК Ссылка,
	|	ДоверенностьНаТовары.ДокументОснование КАК ДокументОснование
	|ПОМЕСТИТЬ ДоверенностиНаТовары
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьНаТовары
	|ГДЕ
	|	ДоверенностьНаТовары.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров)
	|	И ДоверенностьНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|	И ДоверенностьНаТовары.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоверенностьНаДС.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ДоверенностиНаДС
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьНаДС
	|ГДЕ
	|	ДоверенностьНаДС.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|	И ДоверенностьНаДС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|	И ДоверенностьНаДС.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоверенностьНаДС.Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДоверенностьНаДС
	|ГДЕ
	|	ДоверенностьНаДС.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС)
	|	И ДоверенностьНаДС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.ИспользованаЧастично)
	|	И ДоверенностьНаДС.Ссылка В(&МассивСсылок)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоверенностиНаДС.Ссылка КАК Ссылка,
	|	СУММА(ДокументыКассы.СуммаДокумента) КАК СуммаОплат
	|ПОМЕСТИТЬ Оплаченные
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДокументыКассы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоверенностиНаДС КАК ДоверенностиНаДС
	|		ПО (ДоверенностиНаДС.Ссылка = ДокументыКассы.ДоверенностьВыданная)
	|			И (ДокументыКассы.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоверенностиНаДС.Ссылка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДокументыКассы.СуммаДокумента) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоверенностиНаТовары.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ Поступившие
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО РасчетыСПоставщиками.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоверенностиНаТовары КАК ДоверенностиНаТовары
	|		ПО (ДоверенностиНаТовары.ДокументОснование = РасчетыСПоставщиками.ОбъектРасчетов.Объект)
	|			И (РасчетыСПоставщиками.ВидДвижения = ЗНАЧЕНИЕ(ВИдДвиженияНакопления.Расход))
	|			И (НЕ РасчетыСПоставщиками.КПоступлению = 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументДоверенностьВыданная.Ссылка КАК Ссылка,
	|	ДокументДоверенностьВыданная.ПометкаУдаления КАК ПометкаУдаления,
	|	ПРЕДСТАВЛЕНИЕ(ДокументДоверенностьВыданная.Ссылка) КАК Представление,
	|	0 КАК СуммаОплат,
	|	ЛОЖЬ КАК ЕстьОплаты,
	|	НЕ Поступившие.Ссылка ЕСТЬ NULL КАК ЕстьПоступлениеТоваров
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДокументДоверенностьВыданная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоверенностиНаТовары КАК ДоверенностиНаТовары
	|		ПО (ДоверенностиНаТовары.Ссылка = ДокументДоверенностьВыданная.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Поступившие КАК Поступившие
	|		ПО (Поступившие.Ссылка = ДокументДоверенностьВыданная.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументДоверенностьВыданная.Ссылка,
	|	ДокументДоверенностьВыданная.ПометкаУдаления,
	|	ПРЕДСТАВЛЕНИЕ(ДокументДоверенностьВыданная.Ссылка),
	|	ЕСТЬNULL(Оплаченные.СуммаОплат, 0),
	|	НЕ Оплаченные.Ссылка ЕСТЬ NULL,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК ДокументДоверенностьВыданная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоверенностиНаДС КАК ДоверенностиНаДС
	|		ПО (ДоверенностиНаДС.Ссылка = ДокументДоверенностьВыданная.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Оплаченные КАК Оплаченные
	|		ПО (Оплаченные.Ссылка = ДокументДоверенностьВыданная.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоверенностиНаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДоверенностиНаДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Поступившие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Оплаченные";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивОбъектов);
	
	ТаблицаДоверенностей = Запрос.Выполнить().Выгрузить();
	ТаблицаДоверенностей.Индексы.Добавить("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТаблицаДоверенностей;
КонецФункции

Процедура РассчитатьСтатусДоверенности(Объект, Знач ЕстьОплаты = Ложь, Знач СуммаОплат = 0, Знач ЕстьПоступлениеТоваров = Ложь) Экспорт
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Если ЕстьОплаты Тогда
			Объект.СуммаОплатПоДокументу = СуммаОплат;
			Если СуммаОплат < Объект.СуммаДокумента Тогда
				Объект.Статус = Перечисления.СтатусыДоверенностей.ИспользованаЧастично;
			Иначе
				Объект.Статус = Перечисления.СтатусыДоверенностей.Использована;
			КонецЕсли;
		Иначе
			Объект.СуммаОплатПоДокументу = 0;
		КонецЕсли;
	ИначеЕсли Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		
		Объект.ЕстьПоступлениеТоваров = ЕстьПоступлениеТоваров;
		Если ЕстьПоступлениеТоваров Тогда
			Объект.Статус = Перечисления.СтатусыДоверенностей.Использована;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РассчитатьСтатусДоверенностей(ПараметрыМетода, АдресХранилища) Экспорт
	
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %1 помечен на удаление. Невозможно рассчитать статус'");
	ШаблонОшибкиЗаблокировать = НСтр("ru='Не удалось заблокировать %1. %2'");
	ШаблонОшибкиЗаписать = НСтр("ru='Не удалось записать %1. %2'");
	
	Если ПараметрыМетода.МассивДокументов.Количество() = 0 Тогда
		ВыбранныеДокументы = ДоверенностиЗаПоследнийМесяц();
	Иначе
		ВыбранныеДокументы = ПараметрыМетода.МассивДокументов;
	КонецЕсли;
	
	СоставДокументов = Документы.ДоверенностьВыданная.РассчитатьСостояниеДоверенности(ВыбранныеДокументы);
	
	КоличествоОбработанных = 0;
	Для каждого СтрокаДокумента Из СоставДокументов Цикл
		
		Если СтрокаДокумента.ПометкаУдаления Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(ШаблонОшибкиПомеченНаУдаление, СтрокаДокумента.Представление), СтрокаДокумента.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(СтрокаДокумента.Ссылка);
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаблокировать,
				СтрокаДокумента.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СтрокаДокумента.Ссылка);
			Продолжить;
		КонецПопытки;
		
		Объект = СтрокаДокумента.Ссылка.ПолучитьОбъект(); // ДокументОбъект.ДоверенностьВыданная
		
		РассчитатьСтатусДоверенности(Объект,
			СтрокаДокумента.ЕстьОплаты, СтрокаДокумента.СуммаОплат, СтрокаДокумента.ЕстьПоступлениеТоваров);
		
		Попытка
			Объект.Записать(РежимЗаписиДокумента.Запись);
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Исключение
			ТекстОшибки = СтрШаблон(ШаблонОшибкиЗаписать,
				СтрокаДокумента.Представление, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СтрокаДокумента.Ссылка);
		КонецПопытки;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(КоличествоОбработанных, АдресХранилища);
КонецПроцедуры

Функция ДоверенностиЗаПоследнийМесяц()
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Доверенности.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенности
	|ГДЕ
	|	НЕ Доверенности.ПометкаУдаления
	|	И Доверенности.Дата >= ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ), МЕСЯЦ, -1)
	|	И (Доверенности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.Выдана)
	|			ИЛИ Доверенности.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоверенностей.ИспользованаЧастично)
	|				И Доверенности.ТипДоверенности = ЗНАЧЕНИЕ(Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС))";

	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#КонецЕсли
