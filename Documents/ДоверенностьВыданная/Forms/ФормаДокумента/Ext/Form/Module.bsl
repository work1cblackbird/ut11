
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	ЕстьПравоНаДобавлениеДокументов = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДокументыФизическихЛиц); 
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Элементы.ФизЛицо.Заголовок = НСтр("ru = 'Сотрудник'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		
		СтруктураХарактеристикиНоменклатуры = Новый Структура;
		СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	УстановитьВидимостьДоступностьПоСтатусуДоверенности();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		Оповестить("Запись_ДоверенностьНаПолучениеДС", ПараметрыЗаписи, Объект.Ссылка);
	Иначе
		Оповестить("Запись_ДоверенностьНаПолучениеТоваров", ПараметрыЗаписи, Объект.Ссылка);
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументФизЛица" Тогда
		ОчиститьДанныеПаспорта(ЭтаФорма);
		ЗаполнитьСпискокУдостоверенийЛичности();
		Объект.ПредставлениеДокументаФизЛица = Параметр.Представление;
		Объект.ВидДокументаФизЛица = Параметр.ВидДокумента;
		Объект.СерияДокументаФизЛица = Параметр.ПаспортСерия;
		Объект.НомерДокументаФизЛица = Параметр.ПаспортНомер;
		Объект.КемВыданДокументФизлица = Параметр.ПаспортВыдан;
		Объект.ДатаВыдачиДокументаФизЛица = Параметр.ПаспортДатаВыдачи;
	КонецЕсли;
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещения = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаДокумента();
	ПараметрыОповещения.Форма = ЭтотОбъект;
	ПараметрыОповещения.ДокументСсылка = Объект.Ссылка;
	ПараметрыОповещения.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыОповещения.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаДокумента(ИмяСобытия, Параметр, Источник, ПараметрыОповещения);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	ОчиститьСообщения();
	ДокументОснованиеПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииСервер()
	
	ВалютаДокументОснование = Неопределено;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		
		Попытка
			
			ОбъектДоверенность = РеквизитФормыВЗначение("Объект");
			ОбъектДоверенность.Заполнить(Объект.ДокументОснование);
			ОбъектДоверенность.ДокументОснование = Объект.ДокументОснование;
			
			ЗначениеВРеквизитФормы(ОбъектДоверенность, "Объект");
			
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект.ДокументОснование, "Валюта") Тогда
				ВалютаДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Валюта");
			Иначе
				ВалютаДокументОснование = Объект.Валюта;
			КонецЕсли;
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Выбрано некорректное основание: %Основание%.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Основание%", Объект.ДокументОснование);
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			
			Объект.ДокументОснование = Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров") Тогда
		Объект.Валюта = Неопределено;
		Объект.СуммаДокумента = 0;
		
		Объект.МатериальныеЦенности.Очистить();
	ИначеЕсли Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		Объект.Валюта = ВалютаДокументОснование;
		
		Объект.Товары.Очистить();
		Объект.МатериальныеЦенности.Очистить();
	Иначе
		Объект.Валюта = Неопределено;
		Объект.СуммаДокумента = 0;
		
		Объект.Товары.Очистить();
	КонецЕсли;
	
	Элементы.Валюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	УстановитьВидимостьПоТипуДоверенности();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДоверенностиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ТипДоверенности) Тогда
		Объект.ТипДоверенности = ТипДоверенности(Объект);
	КонецЕсли;
	
	Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров")
		Или Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеПрочихМатериальныхЦенностей") Тогда
		
		Объект.Валюта = Неопределено;
		Объект.СуммаДокумента = 0;
		
		Если Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров") Тогда
			Объект.МатериальныеЦенности.Очистить();
		Иначе
			Объект.Товары.Очистить();
		КонецЕсли;
		
	ИначеЕсли Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		
		Объект.Валюта = ВалютаДокументОснование;
		
		Объект.Товары.Очистить();
		Объект.МатериальныеЦенности.Очистить();
		
	КонецЕсли;
	
	ТипыОснований = ТипыОснований(Объект.ТипДоверенности);
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)
		И ТипыОснований.Найти(ТипЗнч(Объект.ДокументОснование)) = Неопределено Тогда
		
		Объект.ДокументОснование = Неопределено;
		
	КонецЕсли;
	
	УстановитьВидимостьПоТипуДоверенности();
	
КонецПроцедуры

&НаКлиенте
Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		ПриИзмененииФизЛицаСервер();
	Иначе
		Элементы.Должность.СписокВыбора.Очистить();
		Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
		СписокДолжностейЗагружен = Истина;
		Объект.ПредставлениеДокументаФизЛица = "";
		ОчиститьДанныеПаспорта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПриИзменении(Элемент)
	
	Объект.ДатаОкончанияДействия = РассчитатьДатуОкончанияДействия(НачалоДня(Объект.Дата), Объект.СрокДействия);
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияДействияПриИзменении(Элемент)
	
	Объект.СрокДействия = РассчитатьСрокДействия(Объект.Дата, Объект.ДатаОкончанияДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент) 
	
	Если Не ЗначениеЗаполнено (Объект.Партнер) Тогда
		Возврат;
	КонецЕсли;
	ПриИзмененииПартнераСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ФизЛицо", Объект.ФизЛицо);
		ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.ФормаЗаписи", ПараметрыФормы, ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ПредставлениеДокументаФизЛица", ВыбранноеЗначение);
		НайденныеСтроки = СписокДокументов.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество()>0 Тогда
			НайденныйДокумент = НайденныеСтроки.Получить(0);
			ЗаполнитьЗначенияСвойств(Объект, НайденныйДокумент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОчистка(Элемент, СтандартнаяОбработка)
	
	ОчиститьДанныеПаспорта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыПодбора = Новый Структура("СтрокаПоиска, ФизЛицо");
	ПараметрыПодбора.СтрокаПоиска = Текст;
	ПараметрыПодбора.ФизЛицо = Объект.ФизЛицо;
	ДанныеВыбора = ПолучитьДанныеВыбораДокумента(ПараметрыПодбора);
	Если ЕстьПравоНаДобавлениеДокументов Тогда
		ДанныеВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдостоверениеЛичностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыПодбора = Новый Структура("СтрокаПоиска, ФизЛицо");
		ПараметрыПодбора.СтрокаПоиска = Текст;
		ПараметрыПодбора.ФизЛицо = Объект.ФизЛицо;
		ДанныеВыбора = ПолучитьДанныеВыбораДокумента(ПараметрыПодбора);
		Если ЕстьПравоНаДобавлениеДокументов Тогда
			ДанныеВыбора.Вставить(0,Неопределено, НСтр("ru = '<Создать новый>'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(
		Элемент.ТекстРедактирования, 
		ЭтотОбъект, 
		"Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры  

&НаКлиенте
Процедура ТоварыНоменклатураПартнераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ЭлементФормы" , Элемент);
	ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	ОповещениеОЗакрытие = Новый ОписаниеОповещения("ОбработатьРезультатВыбораНоменклатурыПартнера", ЭтотОбъект, ДополнительныеПараметры);

	НоменклатураПартнеровКлиент.ОткрытьФормуВыбораНоменклатурыПартнера(ЭтотОбъект, Объект.Партнер, ТекущаяСтрока, Элемент.Заголовок, ОповещениеОЗакрытие);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	НоменклатураПартнеровКлиент.ПриВыбореНоменклатурыПартнера(Объект, Поле, "ТоварыНоменклатураПартнера", НСтр("ru = 'Поставщик'"));

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПартнераПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(Элемент.ПараметрыВыбора, ТекущаяСтрока);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПартнера");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ЭтаФорма.ИмяФормы, "Товары"));
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ТоварыНоменклатураПартнера" Тогда
		Если ЕстьДоступКНоменклатуреПоставщика Тогда
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;

			НоменклатураПартнеровКлиент.ЗаполнитьСписокВыбораНоменклатурыПартнера(
				Объект.Партнер, ТекущиеДанные, Элементы.ТоварыНоменклатураПартнера.СписокВыбора);

			НоменклатураПартнеровКлиент.УстановитьПараметрыВыбораУпаковки(
				Элементы.ТоварыНоменклатураПартнера.ПараметрыВыбора, ТекущиеДанные);
		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	НоменклатураПартнеровКлиент.ПоказатьНоменклатуруПартнера(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные, НСтр("ru = 'Поставщик'"));
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнера(Команда)
	
	Если Не ОбщегоНазначенияУТКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер();
	ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(
		Новый ОписаниеОповещения("ЗаполнитьНоменклатуруПоНоменклатуреПартнераЗавершение", ЭтотОбъект),
		АдресТоваровВХранилище,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПартнераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ЗаполнитьТоварыИзВременногоХранилищаСервер(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаличныеДС(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ОчиститьСообщения();
		Сообщение = НСтр("ru = 'Укажите основание для заполнения по расчетам.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,, "Объект.ДокументОснование");
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.СуммаДокумента = 0 Тогда
		ТекстВопроса = СтрШаблон(НСтр("ru='Сумма к получению по доверенности
		|будет перезаполнена по расчетам по основанию %1. Продолжить?'"), СокрЛП(Объект.ДокументОснование));
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, Нстр("ru = 'Продолжить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, Нстр("ru = 'Отменить'"));
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьНаличныеДСЗавершение", ЭтотОбъект),
			ТекстВопроса, СписокКнопок,, КодВозвратаДиалога.Да, НСтр("ru = 'Заполнение суммы к получению'"));
		Возврат;
	КонецЕсли;
	ЗаполнитьНаличныеДСФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаличныеДСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаличныеДСФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаличныеДСФрагмент()
	
	Перем ТекстСообщения;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ЗаполнитьНаличныеДСНаСервере();
	КонецЕсли;
	
	Если Объект.СуммаДокумента = 0 Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отсутствует задолженность по расчетам по основанию %1'"),
			СокрЛП(Объект.ДокументОснование));
		ПоказатьПредупреждение(Неопределено, ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованию(Команда)
	
	ОчиститьСообщения();
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) ТОгда
		ТекстСообщения = НСтр("ru='Не заполнено основание.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоОснованиюЗавершение", ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru='Список товаров к получению по доверенности будет перезаполнен по основанию. Продолжить?'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, Нстр("ru = 'Продолжить'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, Нстр("ru = 'Отменить'"));
		
		ЗаголовокОкнаВопроса = НСтр("ru = 'Заполнение товаров к получению'");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, СписокКнопок, , КодВозвратаДиалога.Да, ЗаголовокОкнаВопроса);
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОснованиюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура РассчитатьСостояние(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи", ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Документ еще не записан.
		|Рассчитать статус возможно только после записи данных.
		|Данные будут записаны.'");
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ВыполнитьОбработкуОповещения(Обработчик, КодВозвратаДиалога.ОК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеКомандыПослеПодтвержденияЗаписи(Знач Ответ = Неопределено, Знач ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Ответ = Неопределено ИЛИ Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		ОчиститьСообщения();
		Записать();
		Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ТекущийСтатус = Объект.Статус;
	ТекущаяСуммаОплат = Объект.СуммаОплатПоДокументу;
	ТекущееПоступлениеТоваров = Объект.ЕстьПоступлениеТоваров;
	РассчитатьСостояниеНаСервере();
	Если НЕ ТекущийСтатус = Объект.Статус
		ИЛИ НЕ ТекущаяСуммаОплат = Объект.СуммаОплатПоДокументу
		ИЛИ НЕ ТекущееПоступлениеТоваров = Объект.ЕстьПоступлениеТоваров Тогда
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	ПараметрыУсловногоОформления = НоменклатураСервер.НовыеПараметрыУсловногоОформленияЕдиницИзмерения();
	ПараметрыУсловногоОформления.ИмяПоляЕдиницаИзмерения = "ТоварыЕдиницаИзмерения";
	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма, ПараметрыУсловногоОформления);
		
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыНоменклатураПартнера.Имя);
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<выберите поставщика>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);

КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура ПриИзмененииФизЛицаСервер()
	
	МассивДолжностейСотрудника = ДолжностиСотрудника(Объект.ФизЛицо);
	Если МассивДолжностейСотрудника.Количество() > 0 Тогда
		Объект.Должность = МассивДолжностейСотрудника[0];
	КонецЕсли;
	Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
	ПолучитьПоследниеПаспортныеДанныеСтрокой();
	ЗаполнитьСписокВыбораДолжность();
	ЗаполнитьСпискокУдостоверенийЛичности();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	НоменклатураПартнеровСервер.ЗаполнитьНоменклатуруПартнераПоНоменклатуреПриИзмененииПартнера(Объект.Товары, Объект.Партнер);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    = Объект.Организация;
	СтруктураПараметров.БанковскийСчет = Объект.БанковскийСчет;
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
КонецПроцедуры

#КонецОбласти

#Область СостояниеДоверенности

&НаСервере
Процедура РассчитатьСостояниеНаСервере()
	
	Если НЕ (Объект.Статус = Перечисления.СтатусыДоверенностей.Выдана
			ИЛИ Объект.Статус = Перечисления.СтатусыДоверенностей.ИспользованаЧастично) Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив();
	МассивОбъектов.Добавить(Объект.Ссылка);
	
	ТаблицаСостояния = Документы.ДоверенностьВыданная.РассчитатьСостояниеДоверенности(МассивОбъектов);
	
	Если ТаблицаСостояния.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Документы.ДоверенностьВыданная.РассчитатьСтатусДоверенности(Объект,
		ТаблицаСостояния[0].ЕстьОплаты, ТаблицаСостояния[0].СуммаОплат, ТаблицаСостояния[0].ЕстьПоступлениеТоваров);
		
	УстановитьСостояниеДоверенности();
	СтатусПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеДоверенности()
	
	СостояниеДоверенности = "";
	Если Объект.Статус = Перечисления.СтатусыДоверенностей.НеВыдана Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеПрочихМатериальныхЦенностей Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНетПоступленияДС = НСтр("ru = 'Нет поступления ДС'");
	ТекстНетПоступленияТоваров = НСтр("ru = 'Нет поступления товаров (МЦ)'");
	ТекстЕстьПоступленияТоваров = НСтр("ru = 'Есть поступления товаров (МЦ)'");
	ТекстПолноеПоступлениеДС = НСтр("ru = 'ДС поступили полностью'");
	ТекстЧастичноеПоступлениеДС = НСтр("ru = 'ДС поступили частично: %1'");
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Если Объект.СуммаОплатПоДокументу = 0 Тогда
			СостояниеДоверенности = ТекстНетПоступленияДС;
		Иначе
			Если Объект.СуммаОплатПоДокументу < Объект.СуммаДокумента Тогда
				СостояниеДоверенности = СтрШаблон(ТекстЧастичноеПоступлениеДС,
				Формат(Объект.СуммаОплатПоДокументу, "ЧДЦ=2; ЧРГ="));
			Иначе
				СостояниеДоверенности = ТекстПолноеПоступлениеДС;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если Объект.ЕстьПоступлениеТоваров Тогда
			СостояниеДоверенности = ТекстЕстьПоступленияТоваров;
		Иначе
			СостояниеДоверенности = ТекстНетПоступленияТоваров;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииНаСервере()
	
	ВыданаИспользована = НЕ Объект.Статус = Перечисления.СтатусыДоверенностей.НеВыдана;
	Элементы.Страницы.ТолькоПросмотр = ВыданаИспользована;
	Элементы.ТипДоверенности.ТолькоПросмотр = ВыданаИспользована;
	Элементы.ЗаполнитьНаличныеДС.Доступность = НЕ ВыданаИспользована;
	Элементы.ТоварыРазбитьСтроку.Доступность = НЕ ВыданаИспользована;
	Элементы.ТоварыЗаполнитьПоОснованию.Доступность = НЕ ВыданаИспользована;
	Элементы.ТоварыЗаполнитьНоменклатуруПоНоменклатуреПартнера.Доступность = НЕ ВыданаИспользована;
	
	ДоступностьРассчета = Ложь;
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		ДоступностьРассчета = Объект.Статус = Перечисления.СтатусыДоверенностей.Выдана;
	ИначеЕсли Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		ДоступностьРассчета = Объект.Статус = Перечисления.СтатусыДоверенностей.Выдана
			ИЛИ Объект.Статус = Перечисления.СтатусыДоверенностей.ИспользованаЧастично;
	КонецЕсли;
		
	Элементы.РассчитатьСостояние.Доступность = ДоступностьРассчета;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	УстановитьВидимостьПоТипуДоверенности();
	ЗаполнитьСписокВыбораДолжность();
	ЗаполнитьСпискокУдостоверенийЛичности();
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		
		СтруктураХарактеристикиНоменклатуры = Новый Структура;
		СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
		СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	КонецЕсли;
	УстановитьВидимостьДоступностьПоСтатусуДоверенности();
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Объект.ДокументОснование, "Валюта") Тогда
			ВалютаДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Валюта");
		Иначе
			ВалютаДокументОснование = Объект.Валюта;
		КонецЕсли;
	КонецЕсли;
	Элементы.Валюта.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДокументОснование);
	
	УстановитьСостояниеДоверенности();
	СтатусПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьПоСтатусуДоверенности()
	
	ЕстьПравоНаИзменение = ПравоДоступа("Изменение", Метаданные.Документы.ДоверенностьВыданная);
	СтатусДоступен = ПраваПользователяПовтИсп.ЗаписьВыданнойДоверенностиВОкончательномСтатусе();
	ВыданнаяДоверенность = НЕ Объект.Статус = Перечисления.СтатусыДоверенностей.НеВыдана;
	ТолькоПросмотр = (ВыданнаяДоверенность И Не СтатусДоступен)
						Или Объект.ПометкаУдаления
						Или Не ЕстьПравоНаИзменение;
	
	Элементы.Статус.Доступность = СтатусДоступен;
	
	Если ВыданнаяДоверенность Тогда
		СтатусНеВыдана = Элементы.Статус.СписокВыбора.НайтиПоЗначению(Перечисления.СтатусыДоверенностей.НеВыдана);
		Если НЕ СтатусНеВыдана = Неопределено Тогда
			Элементы.Статус.СписокВыбора.Удалить(СтатусНеВыдана);
		КонецЕсли;
		Элементы.ДокументОснование.Видимость = Истина;
		Элементы.ДокументОснование1.Видимость = Ложь;
	Иначе
		Элементы.ДокументОснование.Видимость = Ложь;
		Элементы.ДокументОснование1.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Ответственный.Видимость = ВыданнаяДоверенность;
	
	ЕстьДоступКНоменклатуреПоставщика = ПравоДоступа("Чтение", Метаданные.Справочники.НоменклатураКонтрагентов);
	Элементы.ТоварыЗаполнитьНоменклатуруПоНоменклатуреПартнера.Видимость = ЕстьДоступКНоменклатуреПоставщика;
	Элементы.ТоварыНоменклатураПартнера.ТолькоПросмотр = НЕ ЕстьДоступКНоменклатуреПоставщика;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДолжностиСотрудника(ФизЛицо)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Доверенность.Должность КАК Должность,
	|	МАКСИМУМ(Доверенность.Дата) КАК Дата
	|ИЗ
	|	Документ.ДоверенностьВыданная КАК Доверенность
	|ГДЕ
	|	Доверенность.ФизЛицо = &ФизЛицо
	|	И Доверенность.Должность <> """"
	|	И НЕ Доверенность.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	Доверенность.Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ");
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Должность");
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияДействия(ДатаНачалаДействия, СрокДействия)
	
	ДатаОкончанияДействия = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДатаНачалаДействия) Тогда
		Если СрокДействия > 0 Тогда
			ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
			Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
				ДатаОкончанияДействия = 
					КалендарныеГрафики.ДатаПоКалендарю(ОсновнойКалендарьПредприятия, ДатаНачалаДействия, СрокДействия);
			Иначе
				ДатаОкончанияДействия = ДатаНачалаДействия + СрокДействия * 86400;
			КонецЕсли;
			Возврат ДатаОкончанияДействия;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСрокДействия(ДатаНачалаДействия, ДатаОкончанияДействия)
	
	СрокДействия = 0;
	Если ЗначениеЗаполнено(ДатаОкончанияДействия) И ДатаОкончанияДействия >= ДатаНачалаДействия Тогда
		ОсновнойКалендарьПредприятия = Константы.ОсновнойКалендарьПредприятия.Получить();
		Если ЗначениеЗаполнено(ОсновнойКалендарьПредприятия) Тогда
			Попытка
				СрокДействия = КалендарныеГрафики.РазностьДатПоКалендарю(ОсновнойКалендарьПредприятия, ДатаНачалаДействия, ДатаОкончанияДействия);
			Исключение
				СрокДействия = 0;
			КонецПопытки;
		Иначе
			СрокДействия = (НачалоДня(ДатаОкончанияДействия) - НачалоДня(ДатаНачалаДействия)) / 86400;
		КонецЕсли;
	КонецЕсли;
	Возврат СрокДействия;
КонецФункции

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Товары);
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();

	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище); // ДокументТабличнаяЧасть.ДоверенностьВыданная.Товары
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоследниеПаспортныеДанныеСтрокой()
	
	ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(Объект.ФизЛицо);
	
	Объект.ВидДокументаФизЛица = ДокументФизическогоЛица.ВидДокумента;
	Объект.СерияДокументаФизЛица = ДокументФизическогоЛица.Серия;
	Объект.НомерДокументаФизЛица = ДокументФизическогоЛица.Номер;
	Объект.КемВыданДокументФизлица = ДокументФизическогоЛица.КемВыдан;
	Объект.ДатаВыдачиДокументаФизЛица = ДокументФизическогоЛица.ДатаВыдачи;
	Объект.ПредставлениеДокументаФизЛица = ДокументФизическогоЛица.Представление;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискокУдостоверенийЛичности()
	
	Элементы.УдостоверениеЛичности.СписокВыбора.Очистить();
	СписокДокументов.Очистить();
	СписокДокументов.Загрузить(ДокументыФизЛица(Элементы.УдостоверениеЛичности,Объект.ФизЛицо));
	Для каждого Документ Из СписокДокументов Цикл
		Элементы.УдостоверениеЛичности.СписокВыбора.Добавить(Документ.ПредставлениеДокументаФизЛица,
			Документ.ПредставлениеДокументаФизЛица);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ДокументыФизЛица(ЭлементУдостоверениеЛичности, ФизЛицо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Серия КАК СерияДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Номер КАК НомерДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан КАК КемВыданДокументФизлица,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи КАК ДатаВыдачиДокументаФизЛица,
	|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокументаФизЛица
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачиДокументаФизЛица УБЫВ";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	ТаблицаДокументовФизЛица = Новый ТаблицаЗначений;
	ТаблицаДокументовФизЛица.Колонки.Добавить("ВидДокументаФизЛица",
		Новый ОписаниеТипов("СправочникСсылка.ВидыДокументовФизическихЛиц"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("СерияДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("НомерДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("КемВыданДокументФизлица", Новый ОписаниеТипов("Строка"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("ДатаВыдачиДокументаФизЛица", Новый ОписаниеТипов("Дата"));
	ТаблицаДокументовФизЛица.Колонки.Добавить("ПредставлениеДокументаФизЛица", Новый ОписаниеТипов("Строка"));
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйДокумент = ТаблицаДокументовФизЛица.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйДокумент,ВыборкаДетальныеЗаписи);
	КонецЦикла;
	Возврат ТаблицаДокументовФизЛица;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеПаспорта(Форма)
	
	Форма.Объект.ВидДокументаФизЛица = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка");
	Форма.Объект.КемВыданДокументФизлица = "";
	Форма.Объект.ДатаВыдачиДокументаФизЛица = "";
	Форма.Объект.НомерДокументаФизЛица = "";
	Форма.Объект.ПредставлениеДокументаФизЛица = "";
	Форма.Объект.СерияДокументаФизЛица = "";
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДокумента(Параметры)
	
	ДанныеВыбора = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДокументыФизическихЛицСрезПоследних.Представление КАК ПредставлениеДокумента
			|ИЗ
			|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
			|ГДЕ
			|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо
			|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность
			|	И ДокументыФизическихЛицСрезПоследних.Представление ПОДОБНО &СтрокаПоиска";
		Запрос.УстановитьПараметр("Физлицо", Параметры.Физлицо);
		Запрос.УстановитьПараметр("СтрокаПоиска","%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДанныеВыбора.Добавить(ВыборкаДетальныеЗаписи.ПредставлениеДокумента,ВыборкаДетальныеЗаписи.ПредставлениеДокумента);
		КонецЦикла;
	КонецЕсли;
	Возврат ДанныеВыбора;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораДолжность()
	
	Если Не СписокДолжностейЗагружен И ЗначениеЗаполнено(Объект.ФизЛицо) Тогда
		МассивДолжностейСотрудника = ДолжностиСотрудника(Объект.ФизЛицо);
		Элементы.Должность.СписокВыбора.Очистить();
		Для Каждого ДолжностьСотрудника Из МассивДолжностейСотрудника Цикл
			Элементы.Должность.СписокВыбора.Добавить(ДолжностьСотрудника);
		КонецЦикла;
		СписокДолжностейЗагружен = Истина;
	КонецЕсли;
КонецПроцедуры

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаСервере
Процедура ЗаполнитьНаличныеДСНаСервере()
	
	РеализацияТоваров = Объект.ДокументОснование;
	РасшифровкаПлатежа = Документы.ДоверенностьВыданная.ПолучитьТаблицуРасшифровкаПлатежа();
	
	Если НЕ ТипЗнч(РеализацияТоваров) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		Если ТипЗнч(РеализацияТоваров) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаТовары.ЗаказКлиента КАК ЗаказКлиента
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК ТаблицаТовары
			|ГДЕ
			|	ТаблицаТовары.Ссылка = &Ссылка
			|	И ТаблицаТовары.Ссылка.РеализацияПоЗаказам
			|");
			Запрос.УстановитьПараметр("Ссылка", РеализацияТоваров);
			УстановитьПривилегированныйРежим(Истина);
			РезультатЗапросаПоЗаказам = Запрос.Выполнить();
			УстановитьПривилегированныйРежим(Ложь);
			Если НЕ РезультатЗапросаПоЗаказам.Пустой() Тогда
				ЗаказыКлиента = РезультатЗапросаПоЗаказам.Выгрузить().ВыгрузитьКолонку("ЗаказКлиента");
				ЗаказыКлиента.Добавить(РеализацияТоваров);
			Иначе
				ЗаказыКлиента = РеализацияТоваров;
			КонецЕсли;
		Иначе
			ЗаказыКлиента = РеализацияТоваров;
		КонецЕсли;
		Если ТипЗнч(Объект.ДокументОснование) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			РеквизитыОснования = Новый Структура("Договор, Валюта", Объект.ДокументОснование, Объект.Валюта);
		Иначе
			УстановитьПривилегированныйРежим(Истина);
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеализацияТоваров, "Договор, Валюта");
			УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
		
		ПараметрыЗаполненияРасшифровки = ВзаиморасчетыСервер.ПараметрыЗаполненияРасшифровкиПлатежаПоЗаказу();
		ПараметрыЗаполненияРасшифровки.ЗаказКлиента     = ЗаказыКлиента;
		ПараметрыЗаполненияРасшифровки.Договор          = РеквизитыОснования.Договор;
		ПараметрыЗаполненияРасшифровки.ВалютаДокумента  = РеквизитыОснования.Валюта;
		ПараметрыЗаполненияРасшифровки.Партнер          = Объект.Партнер;
		ПараметрыЗаполненияРасшифровки.ОснованиеПлатежа = РеализацияТоваров;
		
		ВзаиморасчетыСервер.ЗаполнитьРасшифровкуПлатежаПоЗаказуКлиента(
			ПараметрыЗаполненияРасшифровки,
			РасшифровкаПлатежа);
		
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		Объект.Валюта = РеквизитыОснования.Валюта;
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеализацияТоваров, "СпособКомпенсации, Договор, Валюта, СуммаДокумента, Организация");
		УстановитьПривилегированныйРежим(Ложь);
		
		Если РеквизитыОснования.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства Тогда
			ОбъектРасчетов = РеализацияТоваров;
		Иначе
			ОбъектРасчетов = РеквизитыОснования.Договор;
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	РасчетыСПоставщиками.Валюта КАК ВалютаВзаиморасчетов,
		|	РасчетыСПоставщиками.СуммаОстаток КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками.Остатки(,
		|		ОбъектРасчетов.Объект = &ОбъектРасчетов
		|	) КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.СуммаОстаток > 0
		|");
		Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
		ВыборкаПоРасчетам = Запрос.Выполнить().Выбрать();
		Если ВыборкаПоРасчетам.Следующий() Тогда
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоРасчетам);
			Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(РеквизитыОснования.Валюта,
			ВыборкаПоРасчетам.ВалютаВзаиморасчетов, ТекущаяДатаСеанса(), РеквизитыОснования.Организация);
			СуммаПоСтроке = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0,
			НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
			Если СуммаПоСтроке <= РеквизитыОснования.СуммаДокумента Тогда
				НоваяСтрока.Сумма = СуммаПоСтроке;
			Иначе
				НоваяСтрока.Сумма = РеквизитыОснования.СуммаДокумента;
				НоваяСтрока.СуммаВзаиморасчетов = 0;
			КонецЕсли;
		Иначе
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Сумма = РеквизитыОснования.СуммаДокумента;
		КонецЕсли;
		Объект.СуммаДокумента = РасшифровкаПлатежа.Итог("Сумма");
		Объект.Валюта = РеквизитыОснования.Валюта;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПоТипуДоверенности()
	
	Если Не ЗначениеЗаполнено(Объект.ТипДоверенности) Тогда
		Объект.ТипДоверенности = ТипДоверенности(Объект);
	КонецЕсли;
	
	Если Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеТоваров Тогда
		Элементы.ГруппаДС.Видимость = Ложь;
		Элементы.СтраницаТовары.Видимость = Истина;
		Элементы.СтраницаДенежныеСредства.Видимость = Истина;
		Элементы.СтраницаМатериальныеЦенности.Видимость = Ложь;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ГруппаСостояние.Видимость = Истина;
	ИначеЕсли Объект.ТипДоверенности = Перечисления.ТипыВыданныхДоверенностей.НаПолучениеДС Тогда
		Элементы.ГруппаДС.Видимость = Истина;
		Элементы.СтраницаТовары.Видимость = Ложь;
		Элементы.СтраницаДенежныеСредства.Видимость = Истина;
		Элементы.СтраницаМатериальныеЦенности.Видимость = Ложь;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
		Элементы.ГруппаСостояние.Видимость = Истина;
	Иначе
		Элементы.ГруппаДС.Видимость = Ложь;
		Элементы.СтраницаТовары.Видимость = Ложь;
		Элементы.СтраницаДенежныеСредства.Видимость = Истина;
		Элементы.СтраницаМатериальныеЦенности.Видимость = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаМатериальныеЦенности;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		
		Элементы.ГруппаСостояние.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТипДоверенности(Объект)
	
	ТипДоверенности = ?(Объект.Товары.Количество() > 0,
						ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров"),
						?(Объект.МатериальныеЦенности.Количество() > 0,
							ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеПрочихМатериальныхЦенностей"),
							ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС")));
	
	Возврат ТипДоверенности;
	
КонецФункции

&НаКлиенте
Функция ТипыОснований(ТипДоверенности)
	
	ТипыОснований = Новый Массив;
	
	Если ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеТоваров")
		Или ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеПрочихМатериальныхЦенностей") Тогда
		
		ТипыОснований.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		
	ИначеЕсли Объект.ТипДоверенности = ПредопределенноеЗначение("Перечисление.ТипыВыданныхДоверенностей.НаПолучениеДС") Тогда
		
		ТипыОснований.Добавить(Тип("ДокументСсылка.АктВыполненныхРабот"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ВыкупТоваровХранителем"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ЗаказКлиента"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.ОтчетКомиссионера"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		ТипыОснований.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
		ТипыОснований.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
	КонецЕсли;
	
	Возврат ТипыОснований;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоОснованиюСервер()
	
	ДанныеЗаполнения = Объект.ДокументОснование;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ЗаполнитьПоЗаказуПоставщику(ДанныеЗаполнения);
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ЗаполнитьПоЗаявкеНаВозвратТоваров(ДанныеЗаполнения);

	КонецЕсли;
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаказуПоставщику(Знач ДокументОснование)
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказТовары.Ссылка КАК Ссылка,
		|	ЗаказТовары.Номенклатура КАК Номенклатура,
		|	ЗаказТовары.НоменклатураПартнера КАК НоменклатураПартнера,
		|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказТовары.Характеристика КАК Характеристика,
		|	ЗаказТовары.Упаковка КАК Упаковка,
		|	ЗаказТовары.НомерСтроки КАК НомерСтроки,
		|	ЗаказТовары.КодСтроки КАК КодСтроки
		|ПОМЕСТИТЬ ДанныеЗаказа
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
		|ГДЕ
		|	ЗаказТовары.Ссылка = &ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаказТовары.Номенклатура КАК Номенклатура,
		|	ЗаказТовары.НоменклатураПартнера КАК НоменклатураПартнера,
		|	ЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЗаказТовары.Характеристика КАК Характеристика,
		|	ЗаказТовары.Упаковка КАК Упаковка,
		|	ЗаказыПоставщикам.КОформлениюОстаток / ВЫБОР
		|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
		|			ТОГДА 1
		|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
		|	КОНЕЦ КАК КоличествоУпаковок
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ЗаказПоставщику = &ДокументОснование
		|	И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),
		|		ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаказыПоставщикам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеЗаказа КАК ЗаказТовары
		|		ПО ЗаказыПоставщикам.КодСтроки = ЗаказТовары.КодСтроки
		|ГДЕ
		|	ЗаказыПоставщикам.КОформлениюОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказТовары.НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатыЗапроса = Запрос.Выполнить();
	Объект.Товары.Загрузить(РезультатыЗапроса.Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоЗаявкеНаВозвратТоваров(Знач ДокументОснование)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказТовары.Ссылка КАК Ссылка,
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаказТовары.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ДанныеПотоварам
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура КАК Номенклатура,
	|	НЕОПРЕДЕЛЕНО КАК НоменклатураПартнера,
	|	ЗаказТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика КАК Характеристика,
	|	ЗаказТовары.Упаковка КАК Упаковка,
	|	ЗаявкаНаВозврат.КОформлениюОстаток / ВЫБОР
	|		КОГДА ЗаказТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ &ТекстЗапросаКоэффициентУпаковки
	|	КОНЕЦ КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(
	|			,
	|			ЗаявкаНаВозвратТоваровОтКлиента = &ДокументОснование
	|				И Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), 
	|					ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))) КАК ЗаявкаНаВозврат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоТоварам КАК ЗаказТовары
	|		ПО ЗаявкаНаВозврат.КодСтроки = ЗаказТовары.КодСтроки
	|ГДЕ
	|	ЗаявкаНаВозврат.КОформлениюОстаток > 0
	|	И НЕ ЗаявкаНаВозврат.ЗаявкаНаВозвратТоваровОтКлиента.ЭтоЗаказКакСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказТовары.Номенклатура,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказТовары.Номенклатура.ЕдиницаИзмерения,
	|	ЗаказТовары.Характеристика,
	|	ЗаказТовары.Упаковка,
	|	ЗаказТовары.КоличествоУпаковок
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары КАК ЗаказТовары
	|ГДЕ
	|	ЗаказТовары.Ссылка = &ДокументОснование
	|	И ЗаказТовары.Ссылка.ЭтоЗаказКакСчет
	|	И ЗаказТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"&ТекстЗапросаКоэффициентУпаковки",
		Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
		"ЗаказТовары.Упаковка",
		"ЗаказТовары.Номенклатура"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	РезультатыЗапроса = Запрос.Выполнить();
	Объект.Товары.Загрузить(РезультатыЗапроса.Выгрузить());
КонецПроцедуры



// Параметры:
// ВыбранноеЗначение - СправочникСсылка.НоменклатураКонтрагентов
// ДополнительныеПараметры - Структура
// 
&НаКлиенте
Процедура ОбработатьРезультатВыбораНоменклатурыПартнера(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ТекущаяСтрока.НоменклатураПартнера = ВыбранноеЗначение;
	
	ТоварыНоменклатураПартнераПриИзменении(ДополнительныеПараметры.ЭлементФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
