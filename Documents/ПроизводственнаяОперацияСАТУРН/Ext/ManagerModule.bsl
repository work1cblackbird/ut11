#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.АннулированиеОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//   СтруктураПараметров - Структура - Входящие данные.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные;
	
	Возврат ДальнейшееДействие;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбмене

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету Тогда
		
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.АннулированиеКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.АннулированиеОшибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//   * ДополнительныеПараметры - Неопределено, Структура - 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Черновик;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.АннулированиеОшибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - Новый статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияСАТУРН.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияСАТУРНПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияСАТУРН.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		РегистрыСведений.МестаХраненияПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		РегистрыНакопления.ОстаткиПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСАТУРН

Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииСАТУРН.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ПроизводственнаяОперацияСАТУРН, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные Тогда
		
		Возврат ПроизводственнаяОперацияJSON(ДокументСсылка, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию Тогда
		
		Возврат АннулированиеПроизводственнойОперацииJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ПроизводственнаяОперацияСАТУРН);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ПроизводственнаяОперацияСАТУРН, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ПроизводственнаяОперацияСАТУРН, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаЗаполнения

Функция ЗаполнитьПартии(Объект, СписокСтрок = Неопределено) Экспорт
	
	Настройки = ИнтеграцияСАТУРНСлужебный.НастройкиЗаполненияПартий("Сырье", СписокСтрок);
	РезультатЗаполнения = ИнтеграцияСАТУРНСлужебный.ЗаполнитьПартии(Объект, Настройки);
	Возврат РезультатЗаполнения.СообщениеПользователю;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ДействияПриОбменеСАТУРН

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		Идентификатор = ПолученныеДанные.objList._OBJ_ARRAY[0].id;
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ПроизводственнаяОперацияСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект               = ЭлементОчереди.Документ.ПолучитьОбъект();
			ДокументОбъект.Идентификатор = Идентификатор;
			
			ДокументОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки = Идентификатор;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = Идентификатор;
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
		СообщениеJSON.АргументыОперации.theCard._id = Идентификатор;
		
		СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Истина);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
		
		Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ЭтоПолучениеИдентификаторовСтрок Тогда
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента;
			СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
			СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Истина);
		Иначе
			СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету;
		КонецЕсли;
		
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента Тогда
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ПроизводственнаяОперацияСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			
			Если ВходящиеДанные.Количество() = 0 Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Документ по идентификатору %1 не найден.'"),
					РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки);
			КонецЕсли;
			
			Если РеквизитыИсходящегоСообщения.ПараметрыЗапроса.ЭтоПолучениеИдентификаторовСтрок Тогда
				
				СообщенияJSON = Новый Массив;
				
				СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
				ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
				
				СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияИзменениеДокумента;
				СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
				СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
				СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
				СообщениеJSON.АргументыОперации   = РеквизитыИсходящегоСообщенияОснования.АргументыОперации;
				СообщениеJSON.АргументыОперации.theCard._id = СообщениеJSON.ИдентификаторЗаявки;
				
				СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Ложь);
				СообщенияJSON.Добавить(СообщениеJSON);
				
				НомерСтроки = 1;
				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.PatProduction_tbr_ProducedBatchInfo Цикл
					
					ИдентификаторСтроки = СтрокаТаблицы.id;
					РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамПартийТовары.Вставить(ИдентификаторСтроки, НомерСтроки);
					
					СообщениеJSON.АргументыОперации.theCard._tparts.PatProduction_tbr_ProducedBatchInfo[НомерСтроки - 1].Вставить("_id", ИдентификаторСтроки);
					СообщениеJSON.АргументыОперации.theCard._tparts.PatProduction_tbr_ProducedBatchInfo[НомерСтроки - 1].Удалить("id");
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
				
				НомерСтроки = 1;
				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.PatProduction_tbr_SourceBatchInfo Цикл
					
					ИдентификаторСтроки = СтрокаТаблицы.id;
					РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамПартийСырье.Вставить(ИдентификаторСтроки, НомерСтроки);
					
					СообщениеJSON.АргументыОперации.theCard._tparts.PatProduction_tbr_SourceBatchInfo[НомерСтроки - 1].Вставить("_id", ИдентификаторСтроки);
					СообщениеJSON.АргументыОперации.theCard._tparts.PatProduction_tbr_SourceBatchInfo[НомерСтроки - 1].Удалить("id");
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла;
				
				ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
				
			Иначе
				
				Для Каждого СтрокаТаблицы Из ВходящиеДанные[0]._tparts.PatProduction_tbr_ProducedBatchInfo Цикл
					
					НомерСтроки = РеквизитыИсходящегоСообщенияОснования.ПараметрыЗапроса.НомерСтрокПоИдентификаторамПартийТовары[СтрокаТаблицы.id];
					Если НомерСтроки = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаТовары = ДокументОбъект.Товары[НомерСтроки - 1];
					СтрокаТовары.Партия = Справочники.ПартииСАТУРН.Партия(
						СтрокаТаблицы.batchIdReg.id,
						ПараметрыОбмена,
						ЭлементОчереди.ОрганизацияСАТУРН);
					
					ИзмененныеОбъекты.Добавить(СтрокаТовары.Партия);
					
				КонецЦикла;
				
			КонецЕсли;
			
			ДокументОбъект.Записать();
			
			ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияПринятиеКУчету Тогда
		
		СообщенияJSON = Новый Массив;
		
		ЭлементОчередиОснование               = ИнтеграцияСАТУРНСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		РеквизитыИсходящегоСообщенияОснования = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения;
		РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияЧтениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщенияОснования.ИдентификаторЗаявки;
		СообщениеJSON.АргументыОперации   = Новый Структура();
		СообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		СообщениеJSON.ПараметрыЗапроса.Вставить("ЭтоПолучениеИдентификаторовСтрок", Ложь);
		АргументыОперации = СообщениеJSON.АргументыОперации;
		АргументыОперации.Вставить("getFullCards", 1);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса Тогда
		
		Статусы = РезультирующийСтатусДокумента(ЭлементОчереди);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ЭлементОчереди.Документ,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
			ЭлементОчереди.Документ,
			ПараметрыОбновления);
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
	
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ПроизводственнаяОперацияСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Черновик;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.АннулированиеОшибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ЭлементОчереди.Документ,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
		Попытка
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			
			Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
				СтрокаТаблицы.Партия = Неопределено;
			КонецЦикла;
			
			ДокументОбъект.Записать();
			
			ПриИзмененииСтатусаДокумента(
				ЭлементОчереди.Документ,
				Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Черновик,
				Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН,
				ПараметрыОбновления);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = &Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	Шапка.ДатаПроизводства                 КАК Период,
	|	ТаблицаТовары.Партия             КАК Партия,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСАТУРН,
	|	ВЫБОР
	|		КОГДА Статусы.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН)
	|		ТОГДА ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияСАТУРН.Сырье КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.ДатаПроизводства                 КАК Период,
	|	ТаблицаТовары.Партия             КАК Партия,
	|	ТаблицаТовары.КоличествоУпаковок * ТаблицаТовары.КоличествоВУпаковкеСАТУРН КАК КоличествоСАТУРН,
	|	0                                      КАК ВОбработкеСАТУРН
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестаХраненияПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.ДатаПроизводства     КАК Период,
	|	Шапка.ОрганизацияСАТУРН    КАК ОрганизацияСАТУРН,
	|	Шапка.МестоХранения        КАК МестоХранения,
	|	ТаблицаТовары.Партия КАК Партия
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияСАТУРН.Товары КАК ТаблицаТовары
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|		И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|		ПО Шапка.Ссылка = Статусы.Документ
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиПроизводственнойОперацииСАТУРН - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Формирует JSON сообщения для производственной операции.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ПроизводственнаяОперацияJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияРасчетСтатуса;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Представление(Шапка.ОрганизацияСАТУРН)   КАК ОрганизацияСАТУРНПредставление,
	|	Шапка.ОрганизацияСАТУРН.Идентификатор    КАК ОрганизацияСАТУРНИдентификатор,
	|
	|	Шапка.МестоХранения                      КАК МестоХранения,
	|	ЕСТЬNULL(Шапка.МестоХранения.Идентификатор, НЕОПРЕДЕЛЕНО) КАК МестоХраненияИдентификатор,
	|	Шапка.ДатаПроизводства                КАК ДатаПроизводства,
	|	Шапка.НомерПервичногоДокумента        КАК НомерПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента         КАК ДатаПервичногоДокумента,
	|	Шапка.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	Шапка.Комментарий                     КАК Комментарий
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.НомерСтроки                 КАК НомерСтроки,
	|	Представление(Товары.ПАТ)          КАК ПАТПредставление,
	|	Товары.ПАТ.Идентификатор           КАК ПАТИдентификатор,
	|	Товары.Номенклатура                КАК Номенклатура,
	|	Товары.Упаковка                    КАК Упаковка,
	|	Представление(Товары.Упаковка)     КАК УпаковкаПредставление,
	|	Товары.ТипИзмеряемойВеличиныСАТУРН КАК ТипИзмеряемойВеличиныСАТУРН,
	|	Товары.КоличествоУпаковок          КАК КоличествоУпаковок,
	|	Товары.КоличествоВУпаковкеСАТУРН   КАК КоличествоВУпаковкеСАТУРН,
	|	Товары.НомерПартии                 КАК НомерПартии,
	|	Товары.ТорговоеНаименование        КАК ТорговоеНаименование,
	|	Товары.АртикулПроизводителя        КАК АртикулПроизводителя,
	|	Товары.СрокГодности                КАК СрокГодности
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Сырье.НомерСтроки               КАК НомерСтроки,
	|	Представление(Сырье.ПАТ)        КАК ПАТПредставление,
	|	Сырье.ПАТ.Идентификатор         КАК ПАТИдентификатор,
	|	Сырье.Номенклатура              КАК Номенклатура,
	|	Сырье.Упаковка                  КАК Упаковка,
	|	Представление(Сырье.Упаковка)   КАК УпаковкаПредставление,
	|	Сырье.КоличествоУпаковок        КАК КоличествоУпаковок,
	|	Сырье.КоличествоВУпаковкеСАТУРН КАК КоличествоВУпаковкеСАТУРН,
	|
	|	Представление(Сырье.Партия) КАК ПартияСАТУРНПредставление,
	|	Сырье.Партия.Идентификатор  КАК ПартияСАТУРНИдентификатор
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН.Сырье КАК Сырье
	|ГДЕ
	|	Сырье.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Сырье");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	Сырье = РезультатЗапроса["Сырье"].Выгрузить();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Операция, НомерВерсии);
	АбстрактноеСообщениеJSON.АргументыОперации = Новый Структура;
	АбстрактноеСообщениеJSON.ПараметрыЗапроса  = Новый Структура();
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияСозданиеДокумента, НомерВерсии);
	СообщениеJSON.ЗагружатьДо       = АбстрактноеСообщениеJSON.Идентификатор;
	
	ИнтеграцияСАТУРНСлужебный.УстановитьСообщениеОснование(СообщениеJSON, АбстрактноеСообщениеJSON);
	
	Если Товары.Количество() = 0 Тогда
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Для Каждого Строка Из Сырье Цикл
		Если Не ЗначениеЗаполнено(Строка.Упаковка) Тогда
			Сырье.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, Сырье);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из Товары Цикл
		Если Не ЗначениеЗаполнено(Строка.Упаковка) Тогда
			Товары.Колонки.Добавить("ЕдиницаИзмерения", Метаданные.ОпределяемыеТипы.Упаковка.Тип);
			ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(Неопределено, Товары);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	АргументыОперации = АбстрактноеСообщениеJSON.АргументыОперации;
	
	АргументыОперации.Вставить("theCard", Новый Структура);
	ДанныеДокумента = АргументыОперации.theCard;
	
	ДанныеДокумента.Вставить("_id",          Неопределено);
	ДанныеДокумента.Вставить("name",         СтрШаблон(НСтр("ru = '%1 №%2'"), Шапка.НаименованиеПервичногоДокумента, Шапка.Номер));
	ДанныеДокумента.Вставить("description",  "");
	ДанныеДокумента.Вставить("docNum",       СтрШаблон(НСтр("ru = '№%1 от %2'"),
	                                                   Шапка.НомерПервичногоДокумента,
	                                                   Шапка.ДатаПервичногоДокумента));
	ДанныеДокумента.Вставить("docDate",      Шапка.ДатаПроизводства);
	ДанныеДокумента.Вставить("contractorId", Шапка.ОрганизацияСАТУРНИдентификатор);
	ДанныеДокумента.Вставить("warehauseId",  Шапка.МестоХраненияИдентификатор);
	ДанныеДокумента.Вставить("docNote",      Шапка.Комментарий);
	
	ДанныеДокумента.Вставить("_tparts", Новый Структура);
	ДанныеТела = ДанныеДокумента._tparts;
	
	ДанныеТела.Вставить("PatProduction_tbr_SourceBatchInfo", Новый Массив);
	СтрокиТела = ДанныеТела.PatProduction_tbr_SourceBatchInfo;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("НомерСтрокПоИдентификаторамПартийСырье", Новый Соответствие());
	
	Для Каждого ЭлементКоллекции Из Сырье Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Упаковка) Тогда
			НаименованиеУпаковки = ЭлементКоллекции.УпаковкаПредставление;
		Иначе
			НаименованиеУпаковки = Строка(ЭлементКоллекции.ЕдиницаИзмерения);
		КонецЕсли;
		
		ИдентификаторСтроки = ЭлементКоллекции.НомерСтроки;
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("id",              ИдентификаторСтроки);
		ЭлементДанных.Вставить("name",            ЭлементКоллекции.ПартияСАТУРНПредставление);
		ЭлементДанных.Вставить("patProductId",    ЭлементКоллекции.ПАТИдентификатор);
		ЭлементДанных.Вставить("batchId",         ЭлементКоллекции.ПартияСАТУРНИдентификатор);
		ЭлементДанных.Вставить("pu_title",        НаименованиеУпаковки);
		ЭлементДанных.Вставить("pu_kgWeight",     ЭлементКоллекции.КоличествоВУпаковкеСАТУРН);
		ЭлементДанных.Вставить("countPu_counted", ЭлементКоллекции.КоличествоУпаковок);
		ЭлементДанных.Вставить("countNetto_counted",
			ЭлементКоллекции.КоличествоУпаковок * ЭлементКоллекции.КоличествоВУпаковкеСАТУРН);
		
		СтрокиТела.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	ДанныеТела.Вставить("PatProduction_tbr_ProducedBatchInfo", Новый Массив);
	СтрокиТела = ДанныеТела.PatProduction_tbr_ProducedBatchInfo;
	
	АбстрактноеСообщениеJSON.ПараметрыЗапроса.Вставить("НомерСтрокПоИдентификаторамПартийТовары", Новый Соответствие());
	
	Для Каждого ЭлементКоллекции Из Товары Цикл
		
		Если ЗначениеЗаполнено(ЭлементКоллекции.Упаковка) Тогда
			НаименованиеУпаковки = ЭлементКоллекции.УпаковкаПредставление;
		Иначе
			НаименованиеУпаковки = Строка(ЭлементКоллекции.ЕдиницаИзмерения);
		КонецЕсли;
		
		ИдентификаторСтроки = ЭлементКоллекции.НомерСтроки;
		ЭлементДанных = Новый Структура;
		ЭлементДанных.Вставить("id",              ИдентификаторСтроки);
		ЭлементДанных.Вставить("patProductId",    ЭлементКоллекции.ПАТИдентификатор);
		ЭлементДанных.Вставить("batchCode",       ЭлементКоллекции.НомерПартии);
		ЭлементДанных.Вставить("baseUnitType",    ИнтерфейсСАТУРН.ТипИзмеряемойВеличины(ЭлементКоллекции.ТипИзмеряемойВеличиныСАТУРН));
		ЭлементДанных.Вставить("pu_title",        НаименованиеУпаковки);
		ЭлементДанных.Вставить("pu_kgWeight",     ЭлементКоллекции.КоличествоВУпаковкеСАТУРН);
		ЭлементДанных.Вставить("countPu_counted", ЭлементКоллекции.КоличествоУпаковок);
		ЭлементДанных.Вставить("countNetto_counted",
			ЭлементКоллекции.КоличествоУпаковок * ЭлементКоллекции.КоличествоВУпаковкеСАТУРН);
		ЭлементДанных.Вставить("batchCode",          ЭлементКоллекции.НомерПартии);
		ЭлементДанных.Вставить("itemMarkName",       ЭлементКоллекции.ТорговоеНаименование);
		ЭлементДанных.Вставить("producerArticleNum", ЭлементКоллекции.АртикулПроизводителя);
		ЭлементДанных.Вставить(
			"expirationDate",
			?(ЗначениеЗаполнено(ЭлементКоллекции.СрокГодности), ЭлементКоллекции.СрокГодности, Дата(2099,1,1)));
		
		СтрокиТела.Добавить(ЭлементДанных);
		
	КонецЦикла;
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для аннулирования производственной операции.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияСАТУРН - Ссылка на документ.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//  Повторно - Булево - признак подготовки сообщения с исправлениями.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АннулированиеПроизводственнойОперацииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийСАТУРН.ПроизводственнаяОперацияАннулирование;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &Ссылка
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Документ,
	|	Шапка.Идентификатор                      КАК Идентификатор,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|
	|	Шапка.ОрганизацияСАТУРН                  КАК ОрганизацияСАТУРН,
	|	Представление(Шапка.ОрганизацияСАТУРН)   КАК ОрганизацияСАТУРНПредставление,
	|	Шапка.ОрганизацияСАТУРН.Идентификатор    КАК ОрганизацияСАТУРНИдентификатор
	|
	|ИЗ
	|	Документ.ПроизводственнаяОперацияСАТУРН КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка  = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.ОрганизацияСАТУРН   = Шапка.ОрганизацияСАТУРН;
	СообщениеJSON.Документ            = ДокументСсылка;
	СообщениеJSON.ДокументОснование   = Шапка.ДокументОснование;
	СообщениеJSON.Операция            = Операция;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, ДокументСсылка);
	СообщениеJSON.ИдентификаторЗаявки = Шапка.Идентификатор;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

Функция РезультирующийСтатусДокумента(ЭлементОчереди) Экспорт
	
	Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
	
	Для Каждого СтрокаТЧ Из ЭлементОчереди.ПротоколОбмена Цикл
		Если СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.Ошибка
			Или СтрокаТЧ.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаОтклонена Тогда
			
			Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
			
			Возврат Статусы;
		КонецЕсли;
	КонецЦикла;
	
	Статусы.Принят = Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН;
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#КонецЕсли
