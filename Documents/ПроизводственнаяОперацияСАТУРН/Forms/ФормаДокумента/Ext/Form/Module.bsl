#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеПроизводственнаяОперацияСАТУРН.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "СырьеХарактеристика", "Элементы.Сырье.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "СырьеСерия", "Элементы.Сырье.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "СырьеУпаковка", "Элементы.Сырье.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "СырьеСерия", "Элементы.Сырье.ТекущиеДанные.Характеристика");
		
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСПАТ(ЭтотОбъект, "СырьеПартия", "Элементы.Сырье.ТекущиеДанные.ПАТ");
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(ЭтотОбъект, "СырьеПартия");
	СобытияФормСАТУРН.УстановитьСвязиПараметровВыбораСОрганизациейМестомХранения(ЭтотОбъект, "МестоХранения",, "");
	СобытияФормСАТУРН.УстановитьПараметрыВыбораОрганизации(ЭтотОбъект);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореНоменклатуры", ЭтотОбъект);
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ОписаниеОповещения, НовыйОбъект, Источник);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере(Ложь);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИмяПодсистемы = ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы();
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИмяПодсистемы)
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "СтатусСАТУРН");
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИмяПодсистемы)
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.САТУРНПрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_КлассификаторОрганизацийСАТУРН" И Параметр = Объект.ОрганизацияСАТУРН
		Или ИмяСобытия = "Запись_МестаХраненияСАТУРН" И Параметр = Объект.МестоХранения) Тогда
		
		ЗаполнитьГиперссылкиРеквизитов();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		Отбор = Новый Структура("Партия", ВыбранноеЗначение.Партия);
		НайденныеСтроки = Объект.Сырье.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Сырье.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоменклатураПриИзменении("Сырье", НоваяСтрока);
				Если ЗначениеЗаполнено(ВыбранноеЗначение.ТипИзмеряемойВеличины)
					И ВыбранноеЗначение.ТипИзмеряемойВеличины <> НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН Тогда
					НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
					ПриИзмененииТипаИзмеряемойВеличиныСырье(НоваяСтрока);
				КонецЕсли;
				Если НоваяСтрока.КоличествоВУпаковкеСАТУРН > 0 Тогда
					НоваяСтрока.КоличествоУпаковок = ВыбранноеЗначение.КоличествоСАТУРН / НоваяСтрока.КоличествоВУпаковкеСАТУРН;
				КонецЕсли;
				НоваяСтрока.Количество = НоваяСтрока.КоличествоУпаковок;
			Иначе
				НоваяСтрока.ТипИзмеряемойВеличиныСАТУРН = ВыбранноеЗначение.ТипИзмеряемойВеличины;
			КонецЕсли;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормСАТУРНКлиент.ОбработкаНавигационнойСсылкиСАТУРН(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	НовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, НовыйДокумент);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Сырье);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Сырье, НовыйДокумент);
	
	СформироватьПредставлениеДанныхНовойПартии(ЭтотОбъект, Объект.Товары);
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ОчиститьСообщения();

	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Производственная операция"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	ИначеЕсли Модифицированность Тогда

		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Производственная операция"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);

	Иначе

		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСАТУРНПриИзменении(Элемент)
	ЗаполнитьГиперссылкиРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)
	ЗаполнитьГиперссылкиРеквизитов();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПроизводстваПриИзменении(Элемент)
	
	СформироватьПредставлениеДанныхНовойПартии(ЭтотОбъект, Объект.Товары);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
	
	Если ЗначениеЗаполнено(ОрганизацияИзОснованияДляОтбораОрганизацииСАТУРН)
		И Не ЗначениеЗаполнено(Объект.ОрганизацияСАТУРН) Тогда
		
		ПараметрыОткрытия.Вставить("Контрагент", ОрганизацияИзОснованияДляОтбораОрганизацииСАТУРН);
		
	Иначе
		
		ПараметрыОткрытия.Вставить("Соответствует", "Организации");
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.КлассификаторОрганизацийСАТУРН.ФормаСписка",
		ПараметрыОткрытия,
		Элемент,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьОтборыПоОснованию(Неопределено, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно
		Или Не ПравоИзменения Тогда
		СобытияФормСАТУРНКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"),
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураПриИзменении("Товары", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияСАТУРНВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.ПАТ);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(
		ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка, Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииУпаковки(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзмеряемойВеличиныСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Данные = Новый Структура;
	Данные.Вставить("Партия",       ТекущиеДанные.Партия);
	Данные.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Данные.Вставить("Упаковка",     ТекущиеДанные.Упаковка);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(
		ИнтеграцияСАТУРНКлиент.ДоступныеТипыИзмеряемыхВеличин(Данные, КэшированныеЗначения));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыТипИзмеряемойВеличиныСАТУРНПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииТипаИзмеряемойВеличины(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДанныеНовойПартииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	НередактируемыеРеквизиты = Новый Массив;
	НередактируемыеРеквизиты.Добавить("ДатаПроизводства");
	
	ДанныеПартии = Новый Структура;
	ДанныеПартии.Вставить("НомерПартии",          ТекущиеДанные.НомерПартии);
	ДанныеПартии.Вставить("ТорговоеНаименование", ТекущиеДанные.ТорговоеНаименование);
	ДанныеПартии.Вставить("АртикулПроизводителя", ТекущиеДанные.АртикулПроизводителя);
	ДанныеПартии.Вставить("ДатаПроизводства",     Объект.ДатаПроизводства);
	ДанныеПартии.Вставить("СрокГодности",         ТекущиеДанные.СрокГодности);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ДанныеПартии",             ДанныеПартии);
	ПараметрыОткрытияФормы.Вставить("НередактируемыеРеквизиты", НередактируемыеРеквизиты);
	
	ОткрытьФорму(
		"Справочник.ПартииСАТУРН.Форма.ДанныеПартии",
		ПараметрыОткрытияФормы,
		ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ДанныеНовойПартииОкончаниеВыбора", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДанныеНовойПартииОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ОчиститьДанныеНовойПартии(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПАТ Тогда
		
		Элементы.ТоварыПАТ.СписокВыбора.ЗагрузитьЗначения(ТекущиеДанные.НоменклатураДляВыбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСырье

&НаКлиенте
Процедура СырьеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно
		Или Не ПравоИзменения Тогда
		СобытияФормСАТУРНКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(
		Элемент,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН"),
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоменклатураПриИзменении("Сырье", ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	ПараметрыНоменклатуры = ИнтеграцияСАТУРНВызовСервера.ПараметрыСозданияНоменклатуры(
		ТекущиеДанные.ПАТ);
	
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуСозданияНоменклатуры(ЭтотОбъект, ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(
		ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка, Элементы.Сырье.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииУпаковки(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеТипИзмеряемойВеличиныСАТУРННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Данные = Новый Структура;
	Данные.Вставить("Партия",       ТекущиеДанные.Партия);
	Данные.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
	Данные.Вставить("Упаковка",     ТекущиеДанные.Упаковка);
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(
		ИнтеграцияСАТУРНКлиент.ДоступныеТипыИзмеряемыхВеличин(Данные, КэшированныеЗначения));
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеТипИзмеряемойВеличиныСАТУРНПриИзменении(Элемент)
	
	ПриИзмененииТипаИзмеряемойВеличиныСырье();
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.КоличествоВУпаковкеСАТУРН) Тогда
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
			"Объект.Сырье", ТекущиеДанные.НомерСтроки, "КоличествоВУпаковкеСАТУРН");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Для выбора партии требуется указать коэффициент пересчета из упаковок номенклатуры.'"), , Поле);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ПартииСАТУРН") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияСАТУРНКлиентСервер.ЭтоВыборПартииСАТУРН(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
		
		Если ВыбранноеЗначение.КоличествоСАТУРН < ТекущиеДанные.Количество Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПартии", СобытияФормСАТУРНКлиент, ТекущиеДанные);
			СобытияФормСАТУРНКлиент.ОбработатьВыборПартииСНедостаткомКоличества(
				Объект.Сырье, ВыбранноеЗначение, ТекущиеДанные, ОписаниеОповещения);
		Иначе
			СобытияФормСАТУРНКлиент.ОбработатьВыборПартии(ВыбранноеЗначение, ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.СырьеПАТ Тогда
		
		Элементы.СырьеПАТ.СписокВыбора.ЗагрузитьЗначения(ТекущиеДанные.НоменклатураДляВыбора.ВыгрузитьЗначения());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПАТПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Сырье.ТекущиеДанные;
	ТекущаяСтрока.Партия = Неопределено;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияСАТУРНКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.ФормаДокумента.Команда.ТоварыОткрытьПодбор");
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти", "Товары");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПроизводственнаяОперацияСАТУРН.ФормаДокумента.Команда.СырьеОткрытьПодбор");
	
	ДополнительныеПараметры = Новый Структура("ИмяТабличнойЧасти", "Сырье");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект, ДополнительныеПараметры);
	СобытияФормСАТУРНКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПартий(Команда)
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ОрганизацияСАТУРН) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Организация""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ОрганизацияСАТУРН",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = ИнтеграцияСАТУРНКлиент.ПараметрыФормыПодбораПартий();
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийСАТУРН.Форма.ФормаОстатков",
		ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартииПоВыделеннымСтрокам(Команда)
	ВыполнитьКомандуЗаполнитьПартии();
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ПараметрыРазбиенияСтроки = СобытияФормИСКлиент.ПараметрыРазбиенияСтроки(ТекущиеДанные.КоличествоУпаковок);
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоУпаковок";
	
	СобытияФормИСКлиент.РазбитьСтрокуТабличнойЧасти(Объект.Сырье, Элементы.Сырье, ПараметрыРазбиенияСтроки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьОперацию(Команда)
	
	Если Модифицированность Тогда
		
		ДокументБылМодифицированЗавершение = Новый ОписаниеОповещения(
			"ВопросДокументБылМодифицированЗавершение",
			ЭтотОбъект);
		
		ТекстВопроса = НСтр("ru = 'Документ ""Производственная операция ФГИС ""Сатурн"""" был изменен. Провести?'");
		ПоказатьВопрос(ДокументБылМодифицированЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Аннулировать %1 ?'"),
			Строка(Объект.Ссылка));
		
		ВопросАннулироватьЗавершение = Новый ОписаниеОповещения(
			"ВопросАннулироватьЗавершение",
			ЭтотОбъект);
			
		ПоказатьВопрос(ВопросАннулироватьЗавершение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "СырьеХарактеристика","Объект.Сырье.ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "СырьеСерия", "Объект.Сырье.СтатусУказанияСерий", "Объект.Сырье.ТипНоменклатуры");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(
		ЭтотОбъект, "СырьеНоменклатураЕдиницаИзмерения", "Объект.Сырье.Упаковка");
	
	ИнтеграцияСАТУРН.УстановитьУсловноеОформлениеПоляПАТ(ЭтотОбъект);
	ИнтеграцияСАТУРН.УстановитьУсловноеОформлениеПоляПАТ(ЭтотОбъект, "СырьеПАТ", "Сырье");
	
	// ДанныеНовойПартии
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДанныеНовойПартии.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыДанныеНовойПартии.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",
		НСтр("ru = '<укажите данные создаваемой партии>'"));
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере(ОбновитьКомандыОснования = Истина)
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	НовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ПроизводственнаяОперацияСАТУРН);
	ЗаполнитьОтборыПоОснованию(Объект.ДокументОснование, ЭтотОбъект, ОбновитьКомандыОснования);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Товары, НовыйДокумент);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Сырье);
	ИнтеграцияСАТУРН.ЗаполнитьСопоставленнуюПродукциюВДокументе(Объект.Сырье, НовыйДокумент);
	
	СформироватьПредставлениеДанныхНовойПартии(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ПроизводственнаяОперацияСАТУРН);
	
	ЗаполнитьГиперссылкиРеквизитов();
	ОбновитьПредставленияНаФорме();
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект,
		Перечисления.ВидыПродукцииИС.ПодконтрольнаяПродукцияСАТУРН);
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусСАТУРН();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("СтатусСАТУРН") Тогда
		ДоступностьАннулирования = (Форма.СтатусСАТУРН = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПроизводственнойОперацииСАТУРН.ПроведенСАТУРН"));
		Элементы.ФормаАннулироватьОперацию.Доступность = ДоступностьАннулирования;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ТоварыДанныеНовойПартии.Видимость = Не Форма.РедактированиеФормыНедоступно;
	Элементы.ТоварыПартия.Видимость      = Форма.РедактированиеФормыНедоступно;
	
	ЗависимыеОтСтатусаСАТУРН = Новый Массив;
	ЗависимыеОтСтатусаСАТУРН.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
	ЗависимыеОтСтатусаСАТУРН.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыТовары");
	ЗависимыеОтСтатусаСАТУРН.Добавить("СтраницаТовары");
	ЗависимыеОтСтатусаСАТУРН.Добавить("СтраницаСырье");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаСАТУРН, Не Форма.РедактированиеФормыНеДоступно);
	
КонецПроцедуры

#Область ПерезаполнениеПоОснованию

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область Статус

&НаСервере
Процедура ОбновитьСтатусСАТУРН()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусСАТУРН = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияСАТУРН.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусСАТУРН = Выборка.Статус;
				
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;

	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеПередачуДанных);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию);

	СтатусПредставление = ИнтеграцияСАТУРН.ПредставлениеСтатуса(СтатусСАТУРН, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусСАТУРН <> Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Черновик
	                              И СтатусСАТУРН <> Перечисления.СтатусыОбработкиПроизводственнойОперацииСАТУРН.Ошибка;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.ОрганизацияСАТУРН  = Объект.ОрганизацияСАТУРН;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "АннулироватьОперацию" Тогда
		
		ПередатьСообщениеАннулированияОперации();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияСАТУРНКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияСАТУРНКлиент.ОтменитьПередачу(Объект.Ссылка);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.САТУРНПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ВопросАннулироватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПередатьСообщениеАннулированияОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДокументБылМодифицированЗавершение(РезультатВопроса, СтрокиДляСписания) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ПередатьСообщениеАннулированияОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьСообщениеАннулированияОперации() Экспорт
	
	ПараметрыПередачи = ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.ОрганизацияСАТУРН  = Объект.ОрганизацияСАТУРН;
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.АннулируйтеОперацию");
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияСАТУРНКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГиперссылкиРеквизитов()
	
	СобытияФормСАТУРН.ЗаполнитьГиперссылкиРеквизитовУпрощенно(ЭтотОбъект, "ПроизводственныйОбъект");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения, ДополнительныеПараметры);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения, ДополнительныеПараметры)
	
	ПараметрыЗаполнения = ИнтеграцияСАТУРН.ПараметрыЗаполненияТабличнойЧастиТовары();
	ПараметрыЗаполнения.ИмяТабличнойЧасти = ДополнительныеПараметры.ИмяТабличнойЧасти;
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормСАТУРНПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект[ДополнительныеПараметры.ИмяТабличнойЧасти]);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СтрШаблон("%1Номенклатура", ДополнительныеПараметры.ИмяТабличнойЧасти));
	
КонецПроцедуры

#Область Товары

&НаКлиенте
Процедура ДанныеНовойПартииОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
	
	СформироватьПредставлениеДанныхНовойПартии(ЭтотОбъект, ТекущиеДанные);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДанныеНовойПартии(Форма, ТекущиеДанные)
	
	ТекущиеДанные.НомерПартии          = "";
	ТекущиеДанные.ТорговоеНаименование = "";
	ТекущиеДанные.АртикулПроизводителя = "";
	ТекущиеДанные.ДатаПроизводства     = Дата(1, 1, 1);
	ТекущиеДанные.СрокГодности         = Дата(1, 1, 1);
	
	СформироватьПредставлениеДанныхНовойПартии(Форма, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеДанныхНовойПартии(Форма, Данные)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
		ДанныеДляОбработки = Данные;
	Иначе
		ДанныеДляОбработки = Новый Массив;
		ДанныеДляОбработки.Добавить(Данные);
	КонецЕсли;
	
	Для Каждого Строка Из ДанныеДляОбработки Цикл
		Если Не ЗначениеЗаполнено(Строка.НомерПартии) Тогда
			Если ЗначениеЗаполнено(Строка.ДатаПроизводства) Тогда
				Строка.ДатаПроизводства = "";
			КонецЕсли;
		Иначе
			Строка.ДатаПроизводства = Форма.Объект.ДатаПроизводства;
		КонецЕсли;
	КонецЦикла;
	
	ИнтеграцияСАТУРНКлиентСервер.СформироватьПредставлениеДанныхНовойПартии(Данные);
	
КонецПроцедуры

#КонецОбласти

#Область Сырье

&НаКлиенте
Процедура ПриИзмененииТипаИзмеряемойВеличиныСырье(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	КонецЕсли;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииТипаИзмеряемойВеличины(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
		
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
		СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииКоличестваУпаковок(
			ЭтотОбъект, НоваяСтрока, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПриВыбореНоменклатуры(Номенклатура, ДополнительныеПараметры) Экспорт
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		ИмяТЧ = "Товары";
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСырье Тогда
		ИмяТЧ = "Сырье";
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Номенклатура = Номенклатура;
	
	НоменклатураПриИзменении(ИмяТЧ, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(ИмяТЧ, ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
			ИмяТЧ = "Товары";
		ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаСырье Тогда
			ИмяТЧ = "Сырье";
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормСАТУРНКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

#Область ОбработчикиЗаполненияПартий

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьПартии()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.ОрганизацияСАТУРН) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Организация""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.ОрганизацияСАТУРН",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.МестоХранения) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Место хранения""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка,
			"Объект.МестоХранения",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = ЗаполнитьПартииНаСервере();
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПартииНаСервере()
	
	СписокСтрок = Новый Массив;
	Для каждого ИдентификаторСтроки Из Элементы.Сырье.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Сырье.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	РезультатЗаполнения = Документы.ПроизводственнаяОперацияСАТУРН.ЗаполнитьПартии(Объект, СписокСтрок);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы)
	
	ПараметрыФормы.ОрганизацияСАТУРН = Объект.ОрганизацияСАТУРН;
	ПараметрыФормы.МестоХранения = Объект.МестоХранения;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ПАТ) Тогда
		ПараметрыФормы.ПАТ = ТекущиеДанные.ПАТ;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		ПараметрыФормы.Номенклатура   = ТекущиеДанные.Номенклатура;
		ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
		ПараметрыФормы.Серия          = ТекущиеДанные.Серия;
		ПараметрыФормы.Упаковка       = ?(ЗначениеЗаполнено(ТекущиеДанные.Упаковка), ТекущиеДанные.Упаковка, ТекущиеДанные.ЕдиницаИзмерения);
		ПараметрыФормы.ТипИзмеряемойВеличины     = ТекущиеДанные.ТипИзмеряемойВеличиныСАТУРН;
		ПараметрыФормы.КоличествоВУпаковкеСАТУРН = ТекущиеДанные.КоличествоВУпаковкеСАТУРН;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОтборыПоОснованию(ДокументОснование, Форма, НастроитьЗависимыеЭлементыФормы = Истина)
	
	ОтборыПоОснованию = Неопределено;
	Если ДокументОснование <> Неопределено Тогда 
		ОтборыПоОснованию = ИнтеграцияСАТУРНВызовСервера.ОтборыДляРеквизитовДокументаПоОснованию(Тип("ДокументСсылка.ПроизводственнаяОперацияСАТУРН"), ДокументОснование);
	КонецЕсли;
	
	Если ОтборыПоОснованию <> Неопределено Тогда
		Форма.ОрганизацияИзОснованияДляОтбораОрганизацииСАТУРН = ОтборыПоОснованию.ОрганизацияСАТУРН;
		Форма.СкладИзОснованияДляОтбораМестаХранения           = ОтборыПоОснованию.МестоХранения;
	Иначе 
		Форма.ОрганизацияИзОснованияДляОтбораОрганизацииСАТУРН = Неопределено;
		Форма.СкладИзОснованияДляОтбораМестаХранения           = Неопределено;
	КонецЕсли;
	
	Если НастроитьЗависимыеЭлементыФормы Тогда
		НастроитьЗависимыеЭлементыФормы(Форма, "ДокументОснование");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
