#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЭтоАвторизованныйПользователь(Ответственный)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Параметры:
//  ОтборИзСписка - Структура - значения отборов списка
//
// Возвращаемое значение:
//  ТаблицаЗначений - результат запроса с отборами
//
Функция ПолучитьДокументыПоОтбору(ОтборИзСписка) Экспорт
	
	ОтборПоДокументам = ЗначениеЗаполнено(ОтборИзСписка.РаспознанныеДокументы);
	Если ОтборПоДокументам Тогда
		ОтборДата = Ложь;
		ОтборОрганизация = Ложь;
		ОтборКонтрагент = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ОтборИзСписка.ТекущаяДата) Тогда 
			
			ОтборДата = Истина;
			
			Если ОтборИзСписка.ТекущаяДатаПериод = "День" Тогда
				НачалоПериода = НачалоДня(ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецДня(ОтборИзСписка.ТекущаяДата);
			ИначеЕсли ОтборИзСписка.ТекущаяДатаПериод = "Месяц" Тогда
				НачалоПериода = НачалоМесяца(ОтборИзСписка.ТекущаяДата);
				КонецПериода = КонецМесяца(ОтборИзСписка.ТекущаяДата);
			КонецЕсли;
		Иначе
			ОтборДата = Ложь;
		КонецЕсли;
		
		ОтборОрганизация = ЗначениеЗаполнено(ОтборИзСписка.ТекущаяОрганизация);
		ОтборКонтрагент = ЗначениеЗаполнено(ОтборИзСписка.ТекущийКонтрагент);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	РаспознанныйДокумент.Дата КАК Дата,
	|	РаспознанныйДокумент.Статус КАК Статус,
	|	РаспознанныйДокумент.Направление КАК Направление,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НаправлениеДокумента,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА ""Продавец""
	|		ИНАЧЕ ""Покупатель""
	|	КОНЕЦ КАК ИмяРеквизитаКонтрагент,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.Направление = ЗНАЧЕНИЕ(Перечисление.НаправленияРаспознанногоДокумента.Входящий)
	|			ТОГДА ""ПокупательОрганизация""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РаспознанныйДокумент.ТипДокумента = ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату)
	|					ТОГДА ""Исполнитель""
	|				ИНАЧЕ ""ПродавецОрганизация""
	|			КОНЕЦ
	|	КОНЕЦ КАК ИмяРеквизитаОрганизация,
	|	РаспознанныйДокумент.ТипДокумента КАК ТипДокумента,
	|	РаспознанныйДокумент.НомерДокумента КАК НомерДокумента,
	|	РаспознанныйДокумент.ДатаДокумента КАК ДатаДокумента,
	|	РаспознанныйДокумент.СуммаДокумента КАК ИтогоВсего,
	|	РаспознанныйДокумент.Контрагент КАК Контрагент,
	|	РаспознанныйДокумент.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА РаспознанныйДокумент.НомерДокумента <> """"
	|				И РаспознанныйДокумент.ДатаДокумента <> ДАТАВРЕМЯ(1, 1, 1)
	|				И РаспознанныйДокумент.СуммаДокумента <> 0
	|				И РаспознанныйДокумент.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				И РаспознанныйДокумент.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДанныеЗаполнены,
	|	РаспознанныйДокумент.Наименование КАК Наименование
	|ПОМЕСТИТЬ ОсновнаяТаблица
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	НЕ РаспознанныйДокумент.ПометкаУдаления
	|	И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент)
	|	И РаспознанныйДокумент.ТипДокумента <> ЗНАЧЕНИЕ(Перечисление.ТипыДокументовРаспознаваниеДокументов.ПустаяСсылка)
	|	И РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)
	|	И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РаспознанныйДокумент.Контрагент = &Контрагент
	|	И РаспознанныйДокумент.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОсновнаяТаблица.Ссылка КАК Ссылка,
	|	ИСТИНА КАК КартинкаОткрытия,
	|	ОсновнаяТаблица.Дата КАК Дата,
	|	ОсновнаяТаблица.Статус КАК Статус,
	|	ОсновнаяТаблица.Направление КАК Направление,
	|	ОсновнаяТаблица.НаправлениеДокумента КАК НаправлениеДокумента,
	|	ОсновнаяТаблица.ТипДокумента КАК ТипДокумента,
	|	ОсновнаяТаблица.НомерДокумента КАК НомерДокумента,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаНомерДокумента.РаспознанныйТекст КАК СТРОКА(1024))) КАК НомерДокументаРаспознано,
	|	ОсновнаяТаблица.ДатаДокумента КАК ДатаДокумента,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаДатаДокумента.РаспознанныйТекст КАК СТРОКА(1024))) КАК ДатаДокументаРаспознано,
	|	ОсновнаяТаблица.Контрагент КАК Контрагент,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаКонтрагент.РаспознанныйТекст КАК СТРОКА(1024))) КАК КонтрагентРаспознано,
	|	ОсновнаяТаблица.Организация КАК Организация,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаОрганизация.РаспознанныйТекст КАК СТРОКА(1024))) КАК ОрганизацияРаспознано,
	|	ОсновнаяТаблица.ИтогоВсего КАК ИтогоВсего,
	|	""Не сопоставлен: "" + (ВЫРАЗИТЬ(СтрокаИтогоВсего.РаспознанныйТекст КАК СТРОКА(1024))) КАК ИтогоВсегоРаспознано,
	|	ОсновнаяТаблица.ДанныеЗаполнены КАК ДанныеЗаполнены,
	|	ОсновнаяТаблица.Наименование КАК Наименование
	|ИЗ
	|	ОсновнаяТаблица КАК ОсновнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаНомерДокумента
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаНомерДокумента.Ссылка
	|			И (СтрокаНомерДокумента.ИмяРеквизита = ""НомерДокумента"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаДатаДокумента
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаДатаДокумента.Ссылка
	|			И (СтрокаДатаДокумента.ИмяРеквизита = ""ДатаДокумента"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаКонтрагент
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаКонтрагент.Ссылка
	|			И ОсновнаяТаблица.ИмяРеквизитаКонтрагент = СтрокаКонтрагент.ИмяРеквизита
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаОрганизация
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаОрганизация.Ссылка
	|			И ОсновнаяТаблица.ИмяРеквизитаОрганизация = СтрокаОрганизация.ИмяРеквизита
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РаспознанныйДокумент.РеквизитыДокумента КАК СтрокаИтогоВсего
	|		ПО ОсновнаяТаблица.Ссылка = СтрокаИтогоВсего.Ссылка
	|			И (СтрокаИтогоВсего.ИмяРеквизита = ""ИтогоВсего"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновнаяТаблица.Дата";
	
	Если ОтборПоДокументам Тогда
		Запрос.УстановитьПараметр("РаспознанныеДокументы", ОтборИзСписка.РаспознанныеДокументы);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Ссылка В(&РаспознанныеДокументы)", "");
	КонецЕсли;
	
	Если ОтборДата Тогда
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Дата МЕЖДУ &НачалоПериода И &КонецПериода", "");
	КонецЕсли;
	
	Если ОтборОрганизация Тогда
		Запрос.УстановитьПараметр("Организация", ОтборИзСписка.ТекущаяОрганизация);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Организация = &Организация", "");
	КонецЕсли;
	
	Если ОтборКонтрагент Тогда
		Запрос.УстановитьПараметр("Контрагент", ОтборИзСписка.ТекущийКонтрагент);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Контрагент = &Контрагент", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НаименованиеРаспознанногоДокумента(ДокументОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ДокументОбъект.ТипДокумента) Тогда
		
		Если ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.ПоступлениеТоваров Тогда
			ПредставлениеОперации = НСтр("ru = 'Поступление'");
		ИначеЕсли ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.РеализацияТоваров Тогда
			ПредставлениеОперации = НСтр("ru = 'Реализация'");
		ИначеЕсли ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.СчетНаОплатуКлиента Тогда
			ПредставлениеОперации = НСтр("ru = 'Счет для клиента'");
		ИначеЕсли ДокументОбъект.ВариантОбработки = Перечисления.ВариантыОбработкиЗаданияРаспознавания.СчетНаОплатуПоставщика Тогда
			ПредставлениеОперации = НСтр("ru = 'Счет от поставщика'");
		Иначе
			ПредставлениеОперации = НСтр("ru = 'Документ'");
		КонецЕсли;
		
		ЕстьНомер = ЗначениеЗаполнено(ДокументОбъект.НомерДокумента);
		ЕстьДата  = ЗначениеЗаполнено(ДокументОбъект.ДатаДокумента);
		ЕстьСумма = ЗначениеЗаполнено(ДокументОбъект.СуммаДокумента);
		
		ПредставлениеДаты = Формат(ДокументОбъект.ДатаДокумента, "ДФ='dd.MM.yyyy'");
		
		ПредставлениеСуммы = Формат(ДокументОбъект.СуммаДокумента, "ЧДЦ=2");
		
		// 0 0 0
		// Документ из 1ccaab8a-c181-4bf5-a83b-d9f5485005ac.pdf
		// Реализация из 1ccaab8a-c181-4bf5-a83b-d9f5485005ac.pdf
		Если Не ЕстьНомер И Не ЕстьДата И Не ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 из %2'"),
				ПредставлениеОперации, ДокументОбъект.ИмяФайла);
		КонецЕсли;
		
		// 0 0 1
		// Документ на сумму 54 910
		Если Не ЕстьНомер И Не ЕстьДата И ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 на сумму %2'"),
				ПредставлениеОперации, ПредставлениеСуммы);
		КонецЕсли;
		
		// 0 1 0
		// Счет от поставщика от 22.12.2016
		Если Не ЕстьНомер И ЕстьДата И Не ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 от %2'"),
				ПредставлениеОперации, ПредставлениеДаты);
		КонецЕсли;
		
		// 0 1 1
		// Счет от клиента от 22.12.2016 на сумму 54 910
		Если Не ЕстьНомер И ЕстьДата И ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 от %2 на сумму %3'"),
				ПредставлениеОперации, ПредставлениеДаты, ПредставлениеСуммы);
		КонецЕсли;
		
		// 1 0 0
		// Документ № 587
		Если ЕстьНомер И Не ЕстьДата И Не ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 № %2'"),
				ПредставлениеОперации, ДокументОбъект.НомерДокумента);
		КонецЕсли;
		
		// 1 0 1
		// Реализация № 587 на сумму 54 910
		Если ЕстьНомер И Не ЕстьДата И ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 № %2 на сумму %3'"),
				ПредставлениеОперации, ДокументОбъект.НомерДокумента, ПредставлениеСуммы);
		КонецЕсли;
		
		// 1 1 0
		// Поступление № 587 от 22.12.2016
		Если ЕстьНомер И ЕстьДата И Не ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 № %2 от %3'"),
				ПредставлениеОперации, ДокументОбъект.НомерДокумента, ПредставлениеДаты);
		КонецЕсли;
		
		// 1 1 1
		// Реализация № 587 от 22.12.2016 на сумму 54 910
		Если ЕстьНомер И ЕстьДата И ЕстьСумма Тогда
			Наименование = СтрШаблон(НСтр("ru = '%1 № %2 от %3 на сумму %4'"),
				ПредставлениеОперации, ДокументОбъект.НомерДокумента, ПредставлениеДаты, ПредставлениеСуммы);
		КонецЕсли;
		
	ИначеЕсли ДокументОбъект.ТребуетсяОплата Тогда
		// Требуется оплата для обработки 1ccaab8a-c181-4bf5-a83b-d9f5485005ac.pdf
		// Требуется оплата для обработки 1.pdf, 2.pdf, 3.pdf
		
		Наименование = СтрШаблон(НСтр("ru = 'Требуется оплата для обработки %1'"), ДокументОбъект.ИмяФайла);
	Иначе
		// Ошибка при обработке 1ccaab8a-c181-4bf5-a83b-d9f5485005ac.pdf
		// Ошибка при обработке 1ccaab8a-c181-4bf5-a83b-d9f5485005ac.pdf, 1ccaab8a-c181-4bf5-a83b-d9f5485005ac.pdf
		
		Наименование = СтрШаблон(НСтр("ru = 'Ошибка при обработке %1'"), ДокументОбъект.ИмяФайла);
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

Процедура ЗаписатьИзмененияРеквизитов(ДанныеИзменений, АдресРезультата = Неопределено) Экспорт
	
	Для Каждого СтрокаИзменений Из ДанныеИзменений Цикл
		ДокументОбъект = СтрокаИзменений.Ссылка.ПолучитьОбъект();
		РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(
			ДокументОбъект, СтрокаИзменений.ИмяРеквизита, СтрокаИзменений.Значение);
		РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(ДокументОбъект);
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИзмененияРеквизитовТаблицы(ДанныеИзменений, АдресРезультата = Неопределено) Экспорт
	
	Для Каждого СтрокаИзменений Из ДанныеИзменений Цикл
		ДокументОбъект = СтрокаИзменений.Ссылка.ПолучитьОбъект();
		РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаТаблицыДокумента(
			ДокументОбъект, СтрокаИзменений.НомерСтрокиТЧ, СтрокаИзменений.ИмяРеквизита, СтрокаИзменений.Значение);
		РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(ДокументОбъект);
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьУстаревшиеДокументы() Экспорт
	
	ДокументыСПроблемами = Новый Массив;
	
	Настройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	Если Не Настройки.АвтоматическиУдалятьОбработанныеИПомеченныеНаУдаление
		И Не Настройки.АвтоматическиУдалятьНеобработанные Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтсрочкиУдаленияУстаревшихДокументов = Перечисления.ПериодыОтсрочкиУдаленияУстаревшихДокументов.ДатаОтбораДляУдаления(Настройки.ПериодОтсрочкиУдаленияУстаревшихДокументов);
	ДатаОтсрочкиУдаленияНеобработанныхДокументов = Перечисления.ПериодыОтсрочкиУдаленияУстаревшихДокументов.ДатаОтбораДляУдаления(Настройки.ПериодОтсрочкиУдаленияНеобработанныхДокументов);
	
	// Шаг 1: Пометить на удаление обработанные, подошедшие ко сроку
	
	СледующаяПорция = Истина;
	Пока СледующаяПорция Цикл 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 100
			|	РаспознанныйДокумент.Ссылка КАК Ссылка,
			|	РаспознанныйДокумент.ПометкаУдаления КАК ПометкаУдаления
			|ИЗ
			|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
			|ГДЕ
			|	(&АвтоматическиУдалятьОбработанные
			|				И РаспознанныйДокумент.ДатаПоследнегоИзменения < &ДатаОтсрочкиУдаленияУстаревшихДокументов
			|				И РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан)
			|			ИЛИ &АвтоматическиУдалятьНеобработанные
			|				И РаспознанныйДокумент.ДатаПоследнегоИзменения < &ДатаОтсрочкиУдаленияНеобработанныхДокументов
			|				И (РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый)
			|					ИЛИ РаспознанныйДокумент.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка)))
			|	И НЕ РаспознанныйДокумент.ПометкаУдаления
			|	И НЕ РаспознанныйДокумент.Ссылка В (&ДокументыСПроблемами)
			|
			|УПОРЯДОЧИТЬ ПО
			|	РаспознанныйДокумент.ДатаПоследнегоИзменения";
		
		Запрос.УстановитьПараметр("АвтоматическиУдалятьОбработанные", Настройки.АвтоматическиУдалятьОбработанныеИПомеченныеНаУдаление);
		Запрос.УстановитьПараметр("АвтоматическиУдалятьНеобработанные", Настройки.АвтоматическиУдалятьНеобработанные);
		Запрос.УстановитьПараметр("ДатаОтсрочкиУдаленияУстаревшихДокументов", ДатаОтсрочкиУдаленияУстаревшихДокументов);
		Запрос.УстановитьПараметр("ДатаОтсрочкиУдаленияНеобработанныхДокументов", ДатаОтсрочкиУдаленияНеобработанныхДокументов);
		Запрос.УстановитьПараметр("ДокументыСПроблемами", ДокументыСПроблемами);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		СледующаяПорция = Не РезультатЗапроса.Пустой();
		
		НачатьТранзакцию();
		Попытка
			
			Пока Выборка.Следующий() Цикл
				
				Попытка
					Объект = Выборка.Ссылка.ПолучитьОбъект();
					Объект.ДополнительныеСвойства.Вставить("ПометкаУдаленияУстановелнаРегЗаданием", Истина);
					Объект.УстановитьПометкуУдаления(Истина);
				Исключение
					ДокументыСПроблемами.Добавить(Объект.Ссылка);
					
					ЗаписьЖурналаРегистрации(
						"РаспознаваниеДокументов.УдалениеУстаревшихДокументов",
						УровеньЖурналаРегистрации.Ошибка,
						Документы.РаспознанныйДокумент,
						Объект.Ссылка,
						СтрШаблон(
							НСтр("ru = 'Не удалось пометить на удаление документ, как устаревший:
							           |%1'"),
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
						)
					);
					
					Прервать;
				КонецПопытки;
				
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	// Шаг 2: Собрать список помеченных на удаление
	
	// Использование УдалениеПомеченныхОбъектов.ПомеченныеНаУдаление не подходит
	// Потому что надо отобрать помеченные не просто по таблице а еще и подходящие по дате последнего изменения
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РаспознанныйДокумент.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
		|ГДЕ
		|	РаспознанныйДокумент.ДатаПоследнегоИзменения < &Дата
		|	И РаспознанныйДокумент.ПометкаУдаления
		|	И НЕ РаспознанныйДокумент.Ссылка В (&ДокументыСПроблемами)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РаспознанныйДокумент.ДатаПоследнегоИзменения";
	
	Запрос.УстановитьПараметр("Дата", ДатаОтсрочкиУдаленияУстаревшихДокументов);
	Запрос.УстановитьПараметр("ДокументыСПроблемами", ДокументыСПроблемами);
	
	ДокументыКУдалению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если ДокументыКУдалению.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Шаг 3: Удалить помеченные
	
	// Сам внутри управляет порционностью и транзакциями
	РезультатУдаления = УдалениеПомеченныхОбъектов.УдалитьПомеченныеОбъекты(ДокументыКУдалению);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыСПроблемами, РезультатУдаления.НеУдаленные);
	
	Если ДокументыСПроблемами.Количество() > 0 Тогда
		ЗаписьЖурналаРегистрации(
			"РаспознаваниеДокументов.УдалениеУстаревшихДокументов",
			УровеньЖурналаРегистрации.Ошибка,
			Документы.РаспознанныйДокумент,
			,
			СтрШаблон(
				НСтр("ru = 'Не удалось удалить распознанные документы
				           |%1'"),
				ПредставлениеДокументыСПроблемами(ДокументыСПроблемами)
			)
		);
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеДокументыСПроблемами(ДокументыСПроблемами)
	
	Строки = Новый Массив;
	
	Для Каждого Ссылка Из ДокументыСПроблемами Цикл
		Строки.Добавить(Строка(Ссылка));
	КонецЦикла;
	
	Возврат СтрСоединить(Строки, Символы.ПС);
	
КонецФункции

Функция СоздатьРаспознанныйДокументСОшибкойЗагрузки(ИдентификаторЗадания, ИдентификаторДокумента, ОписаниеОшибки) Экспорт
	
	РезультатыОбработки = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьРезультатыОбработкиПоИдЗадания(ИдентификаторЗадания);
			
	РезультатыОбработки.ИдентификаторРезультата = ИдентификаторДокумента;
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	НовыйДокумент.ИдентификаторЗадания = ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = ИдентификаторДокумента;
	НовыйДокумент.ИмяФайла = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.Наименование = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.Источник = РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов
		.ИсточникПоИдентификатору(
			ИдентификаторЗадания
		);
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка;
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьПользователяПоИдЗадания(
			НовыйДокумент.ИдентификаторЗадания
		);
	НовыйДокумент.МобильноеПриложение = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьМобильноеПриложениеПоИдЗадания(
			НовыйДокумент.ИдентификаторЗадания
		);
	НовыйДокумент.ОписаниеОшибки = ОписаниеОшибки;
	НовыйДокумент.Записать();
	
	РегистрыСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов
		.ЗаписатьРезультатОбработкиДокумента(
			ИдентификаторЗадания,
			РезультатыОбработки
		);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

#Область Формат_v1

Функция СоответствиеТиповДокументовВСервисеИБРД() Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	СоответствиеТипов.Вставить("ACT", Перечисления.ТипыДокументовРаспознаваниеДокументов.АктОбОказанииУслуг);
	СоответствиеТипов.Вставить("SCH", Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетНаОплату);
	СоответствиеТипов.Вставить("SF", Перечисления.ТипыДокументовРаспознаваниеДокументов.СчетФактура);
	СоответствиеТипов.Вставить("TG12", Перечисления.ТипыДокументовРаспознаваниеДокументов.ТОРГ12);
	СоответствиеТипов.Вставить("UPD", Перечисления.ТипыДокументовРаспознаваниеДокументов.УПД);
	
	РаспознаваниеДокументовПереопределяемый.ПриСопоставленииТиповДокументов(СоответствиеТипов);
	
	Возврат СоответствиеТипов;
	
КонецФункции

Функция СоздатьРаспознанныйДокумент(ДанныеСервиса, ДанныеВыборки, РезультатыОбработки, ДатаСоздания = Неопределено, ДанныеСтраниц = Неопределено) Экспорт
	
	ДесериализованноеЗначение = ДанныеСервиса.ДесериализованноеЗначение.Получить("result");
	Если ТипЗнч(ДесериализованноеЗначение) <> Тип("Соответствие") Тогда
		ВызватьИсключение НСтр("ru = 'Ожидалось, что ДесериализованноеЗначение будет типа Соответствие.'");
	КонецЕсли;
	Если ТипЗнч(ДесериализованноеЗначение.Получить("document")) = Тип("Соответствие") Тогда
		ТипДокумента = ДесериализованноеЗначение["document"].Получить("type");
	Иначе
		ТипДокумента = Неопределено;
	КонецЕсли;
	
	СоответствиеТипов = СоответствиеТиповДокументовВСервисеИБРД();
	
	ТипСсылкой = СоответствиеТипов.Получить(ТипДокумента);
	Если ТипСсылкой = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идентификатор документа: %1
			           |Неизвестный тип документа.'"),
			ДанныеВыборки.ИдентификаторЗадания
		);
		СоздатьРаспознанныйДокументСОшибкой(ДанныеСервиса, ДанныеВыборки, РезультатыОбработки, ОписаниеОшибки, ДатаСоздания, ДанныеСтраниц);
		Возврат Неопределено;
	КонецЕсли;
	
	// Замер производительности
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("НачалоЗагрузки");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РезультатыОбработки.ИдентификаторРезультата, Пакет);
	
	СвойстваШапки = ДесериализованноеЗначение["Страница"];
	СоответствияШапки = СвойстваШапки["child"];
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	
	Печати = ДесериализованноеЗначение["document"].Получить("stamps");
	Если ТипЗнч(Печати) = Тип("Массив") Тогда
		Для Каждого Печать Из Печати Цикл
			СтрокаПометки = НовыйДокумент.ПометкиНаДокументе.Добавить();
			СтрокаПометки.ТипПометки = Перечисления.ТипыПометокРаспознанногоДокумента.Печать;
			СтрокаПометки.ОбластьИзображения = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				Печать["chunk_img"]
			);
			ДанныеКоординат = Печать["bbox"];
			Если ТипЗнч(ДанныеКоординат) = Тип("Массив") И ДанныеКоординат.Количество() = 4 Тогда
				СтрокаПометки.КоординатаX0 = ДанныеКоординат[0];
				СтрокаПометки.КоординатаY0 = ДанныеКоординат[1];
				СтрокаПометки.КоординатаX1 = ДанныеКоординат[2];
				СтрокаПометки.КоординатаY1 = ДанныеКоординат[3];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ДатаСоздания = Неопределено Тогда
		НовыйДокумент.Дата = ДатаСоздания;
	Иначе
		НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	НовыйДокумент.ИдентификаторЗадания = ДанныеВыборки.ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = РезультатыОбработки.ИдентификаторРезультата;
	НовыйДокумент.ИмяФайла = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.ТипДокумента = ТипСсылкой;
	НовыйДокумент.Источник = Источник(РезультатыОбработки, ДанныеВыборки);
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьПользователяПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	НовыйДокумент.МобильноеПриложение = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьМобильноеПриложениеПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	
	НовыйДокумент.ИсходноеИзображение = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
		СвойстваШапки["chunk_img"]
	);
	НовыйДокумент.Миниатюра = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
		СвойстваШапки["thumbnail"]
	);
	НовыйДокумент.ШиринаИзображения = РаспознаваниеДокументовСериализацияСлужебныйКлиентСервер.ПривестиТип(
		СвойстваШапки["width"],
		Тип("Число")
	);
	НовыйДокумент.ВысотаИзображения = РаспознаваниеДокументовСериализацияСлужебныйКлиентСервер.ПривестиТип(
		СвойстваШапки["height"],
		Тип("Число")
	);
	
	ТекСоответствие = РаспознаваниеДокументовСлужебный.ПолучитьСопоставлениеРеквизитовИСвойствJSON(НовыйДокумент.ТипДокумента);
	
	ИнициализироватьТаблицыРеквизитовДокумента(НовыйДокумент);
	
	ЗаполнитьРеквизитыРекурсивно(СоответствияШапки, "", ТекСоответствие, НовыйДокумент);
	
	// Добавление строк с не распознанными колонками
	КопияТаблицы = НовыйДокумент.РеквизитыТабличныхЧастей.Выгрузить(, "НомерСтрокиТЧ");
	КопияТаблицы.Свернуть("НомерСтрокиТЧ");
	ВсеНомераСтрок = КопияТаблицы.ВыгрузитьКолонку("НомерСтрокиТЧ");
	
	Если ВсеНомераСтрок.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Ожидалось, что будет хотя бы одна строка.'");
	КонецЕсли;
	
	ВсеНомераСтрок.Удалить(ВсеНомераСтрок.Найти(1));
	
	Для Каждого ДанныеСопоставления Из ТекСоответствие Цикл
		Если СтрНайти(ДанныеСопоставления.Адрес, ".Строка.") Тогда
			Для Каждого НомерСтроки Из ВсеНомераСтрок Цикл
				Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", НомерСтроки, ДанныеСопоставления.ИмяРеквизита);
				Если НЕ НовыйДокумент.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор).Количество() Тогда
					НоваяСтрока = НовыйДокумент.РеквизитыТабличныхЧастей.Добавить();
					НоваяСтрока.НомерСтрокиТЧ = НомерСтроки;
					НоваяСтрока.ИмяРеквизита = ДанныеСопоставления.ИмяРеквизита;
					НоваяСтрока.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
					НоваяСтрока.ПорядокСтроки = НомерСтроки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВыполнитьНечеткийПоискИЗаполнить(НовыйДокумент);
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Загружен");
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(НовыйДокумент, РезультатОбратнойСвязи);
	
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый;
	
	НовыйДокумент.ДополнительныеСвойства.Вставить("Автозаполнение", Истина);
	НовыйДокумент.ДополнительныеСвойства.Вставить("ДанныеСтраниц", ДанныеСтраниц);
	НовыйДокумент.Записать();
	
	ПослеУспешнойЗаписиРаспознанногоДокумента(НовыйДокумент, ДанныеВыборки.ИдентификаторЗадания, РезультатыОбработки);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Функция СоздатьРаспознанныйДокументСОшибкой(ДанныеСервиса, ДанныеВыборки, РезультатыОбработки, ОписаниеОшибки = Неопределено, ДатаСоздания = Неопределено, ДанныеСтраниц = Неопределено) Экспорт
	
	// Замер производительности
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("НачалоЗагрузки");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РезультатыОбработки.ИдентификаторРезультата, Пакет);
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	Если НЕ ДатаСоздания = Неопределено Тогда
		НовыйДокумент.Дата = ДатаСоздания;
	Иначе
		НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	НовыйДокумент.ИдентификаторЗадания = ДанныеВыборки.ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = РезультатыОбработки.ИдентификаторРезультата;
	НовыйДокумент.ИмяФайла = РезультатыОбработки.ИменаФайлов;
	НовыйДокумент.Источник = Источник(РезультатыОбработки, ДанныеВыборки);
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка;
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьПользователяПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	НовыйДокумент.МобильноеПриложение = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ПолучитьМобильноеПриложениеПоИдЗадания(
		НовыйДокумент.ИдентификаторЗадания
	);
	
	ДесериализованноеЗначение = ДанныеСервиса.ДесериализованноеЗначение.Получить("result");
	Если ДесериализованноеЗначение <> Неопределено И ТипЗнч(ДесериализованноеЗначение) = Тип("Соответствие") Тогда
		Если ДесериализованноеЗначение.Получить("Страница") <> Неопределено Тогда
			// Если сервис умеет распознавать этот документ, но для него нет соответствия/обработчика
			// в данной конфигурации, то chunk_img (а не full_img) и thumbnail будут внутри элемента "Страница"
			ДесериализованноеЗначение = ДесериализованноеЗначение.Получить("Страница");
		КонецЕсли;
		
		Если ДесериализованноеЗначение.Получить("thumbnail") <> Неопределено Тогда
			НовыйДокумент.Миниатюра = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				ДесериализованноеЗначение["thumbnail"]
			);
		КонецЕсли;
		
		Если ДесериализованноеЗначение.Получить("full_img") <> Неопределено Тогда
			НовыйДокумент.ИсходноеИзображение = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				ДесериализованноеЗначение["full_img"]
			);
		ИначеЕсли ДесериализованноеЗначение.Получить("chunk_img") <> Неопределено Тогда
			НовыйДокумент.ИсходноеИзображение = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
				ДесериализованноеЗначение["chunk_img"]
			);
		КонецЕсли;
	КонецЕсли;
	
	Если ОписаниеОшибки <> Неопределено Тогда
		НовыйДокумент.ОписаниеОшибки = ОписаниеОшибки;
	ИначеЕсли ТипЗнч(ДесериализованноеЗначение) = Тип("Соответствие") Тогда
		НовыйДокумент.ОписаниеОшибки = РаспознаваниеДокументовКоннекторСлужебный.ТекстОшибкиПоКоду(ДесериализованноеЗначение.Получить("error"));
	ИначеЕсли ДесериализованноеЗначение <> Неопределено Тогда
		НовыйДокумент.ОписаниеОшибки = ДесериализованноеЗначение;
	КонецЕсли;
	
	Если ДесериализованноеЗначение.Получить("error") = 71 Тогда // Нет оплаты
		НовыйДокумент.ТребуетсяОплата = Истина;
	КонецЕсли;
	
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(НовыйДокумент);
	НовыйДокумент.ДополнительныеСвойства.Вставить("Автозаполнение", Истина);
	НовыйДокумент.ДополнительныеСвойства.Вставить("ДанныеСтраниц", ДанныеСтраниц);
	
	ДокументСсылка = Неопределено;
	НачатьТранзакцию();
	Попытка
		НовыйДокумент.Записать();
		РегистрыСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов.ЗаписатьРезультатОбработкиДокумента(
			ДанныеВыборки.ИдентификаторЗадания,
			РезультатыОбработки
		);
		РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИзменитьВОбработке(
			НовыйДокумент.ИдентификаторРезультата,
			Ложь
		);
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			Метаданные.Документы.РаспознанныйДокумент,
			НовыйДокумент.Ссылка,
			НСтр("ru = 'Записан документ с идентификатором:'") + Символы.ПС + РезультатыОбработки.ИдентификаторРезультата);
		ДокументСсылка = НовыйДокумент.Ссылка;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(
			РаспознаваниеДокументов.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не удалось записать документ по причине:'") + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
		);
		Возврат Неопределено;
	КонецПопытки;
	
	РаспознаваниеДокументов.ОтправитьОбратнуюСвязьRecognitionResult(НовыйДокумент);
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Загружен");
	РезультатОбратнойСвязи.НомерРаспознанногоДокумента = НовыйДокумент.Номер;
	РезультатОбратнойСвязи.ТипРаспознанногоДокумента = "Ошибка";
	
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(НовыйДокумент.ИдентификаторРезультата, Пакет);
	
	Возврат ДокументСсылка;
	
КонецФункции

Процедура ЗаполнитьРеквизитыРекурсивно(СоответствиеJSON, АдресJSON, СоответствиеРеквизитов, Док, ТабличнаяЧасть = Неопределено, НомерСтрокиТЧ = 0, Знач ПредСоответствиеJSON = Неопределено)
	
	Перем СтрТабРек;
	
	Для Каждого ТекСоотв Из СоответствиеJSON Цикл
		Если ТипЗнч(ТекСоотв.Значение) = Тип("Соответствие") Тогда
			Если ТекСоотв.Значение["type"] = "container" ИЛИ НЕ ТекСоотв.Значение.Получить("child") = Неопределено Тогда
				Если ТекСоотв.Значение.Получить("postprocessed") = Истина Тогда
					ЗаполнитьЗначенияРеквизита(СтрТабРек, АдресJSON + СокрЛП(ТекСоотв.Ключ) + ".", Док, НомерСтрокиТЧ, СоответствиеРеквизитов, ТабличнаяЧасть, ТекСоотв.Значение, СоответствиеJSON);
				КонецЕсли;
				НовСоответствие = ТекСоотв.Значение["child"];
				ПредСоответствиеJSON = ТекСоотв;
			ИначеЕсли ТекСоотв.Значение["type"] = "table" Тогда
				ДанныеСтрок = ТекСоотв.Значение["rows"];
				АдресJSON = ТекСоотв.Ключ + ".Строка.";
				ИмяТаблицы = ТекСоотв.Ключ;
				
				РаспознаваниеДокументовСлужебный.ПриФормированииДанныхТабличныхЧастей(Док, ИмяТаблицы, АдресJSON, ДанныеСтрок);
				
				Для Каждого СтрокаТаблицы Из ДанныеСтрок Цикл
					ЗаполнитьРеквизитыРекурсивно(СтрокаТаблицы, АдресJSON, СоответствиеРеквизитов, Док, ИмяТаблицы, ДанныеСтрок.Найти(СтрокаТаблицы) + 1);
				КонецЦикла;
				
				ДанныеПодвала = ТекСоотв.Значение["footer"];
				ИмяТаблицы = ТекСоотв.Ключ;
				
				РаспознаваниеДокументовСлужебный.ПриФормированииДанныхТабличныхЧастей(Док, ИмяТаблицы, АдресJSON, ДанныеСтрок);
				
				Для Каждого СтрокаТаблицы Из ДанныеПодвала Цикл
					АдресJSON = ИмяТаблицы + "." + СтрокаТаблицы.Ключ + ".";
					ЗаполнитьРеквизитыРекурсивно(СтрокаТаблицы.Значение, АдресJSON, СоответствиеРеквизитов, Док);
				КонецЦикла;
				
				АдресJSON = "";
				Продолжить;
			Иначе
				НовСоответствие = ТекСоотв.Значение;
			КонецЕсли;
			ЗаполнитьРеквизитыРекурсивно(НовСоответствие, АдресJSON + СокрЛП(ТекСоотв.Ключ) + ".", СоответствиеРеквизитов, Док, ТабличнаяЧасть, НомерСтрокиТЧ, ПредСоответствиеJSON);
		Иначе
			ЗаполнитьЗначенияРеквизита(СтрТабРек, АдресJSON, Док, НомерСтрокиТЧ, СоответствиеРеквизитов, ТабличнаяЧасть, СоответствиеJSON, ПредСоответствиеJSON);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизита(СтрТабРек, Знач АдресJSON, Знач Док, Знач НомерСтрокиТЧ, Знач СоответствиеРеквизитов, Знач ТабличнаяЧасть, Знач СоответствиеJSON, Знач ПредСоответствиеJSON = Неопределено)
	
	Если СтрТабРек <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекАдрес = Лев(АдресJSON, СтрДлина(АдресJSON) - 1); // Убираем точку в конце
	СтрокиОтбора = СоответствиеРеквизитов.НайтиСтроки(Новый Структура("Адрес", ТекАдрес));
	Для Каждого ТекРеквизит Из СтрокиОтбора Цикл
		
		Если ТабличнаяЧасть = Неопределено Тогда
			Отбор = Новый Структура("ИмяРеквизита", ТекРеквизит.ИмяРеквизита);
			НайденныеСтроки = Док.РеквизитыДокумента.НайтиСтроки(Отбор);
			СтрТабРек = НайденныеСтроки[0];
		Иначе
			Если НомерСтрокиТЧ = 1 Тогда
				Отбор = Новый Структура("НомерСтрокиТЧ, ИмяРеквизита", 1, ТекРеквизит.ИмяРеквизита);
				СтрТабРек = Док.РеквизитыТабличныхЧастей.НайтиСтроки(Отбор)[0];
			Иначе
				СтрТабРек = Док.РеквизитыТабличныхЧастей.Добавить();
			КонецЕсли;
			СтрТабРек.НомерСтрокиТЧ = НомерСтрокиТЧ;
			СтрТабРек.ПорядокСтроки = НомерСтрокиТЧ;
		КонецЕсли;
		
		СтрТабРек.ИмяРеквизита = ТекРеквизит.ИмяРеквизита;
		СтрТабРек.Значение = ТекРеквизит.ОписаниеТипа.ПривестиЗначение();
		
		Для Каждого ТекСоотв Из СоответствиеJSON Цикл
			Если ТипЗнч(ТекСоотв.Значение) = Тип("Соответствие") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСоотв.Ключ = "text" Тогда
				СтрТабРек.РаспознанныйТекст = ТекСоотв.Значение;
				ТекТипРеквизита = ТипЗнч(СтрТабРек.Значение);
				Если РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТекТипРеквизита) Тогда
					Если ТекТипРеквизита = Тип("Строка") Тогда
						СтрТабРек.Значение = СокрЛП(ТекСоотв.Значение);
					Иначе
						СтрТабРек.Значение = РаспознаваниеДокументовСериализацияСлужебныйКлиентСервер.ПривестиТип(ТекСоотв.Значение, ТекТипРеквизита);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекСоотв.Ключ = "chunk_img" Тогда
				Если ТекСоотв.Значение = Неопределено Тогда
					Если ПредСоответствиеJSON = Неопределено Или ПредСоответствиеJSON.Значение["chunk_img"] = Неопределено Тогда
						СтрТабРек.СтрокВИзображении = 0;
					Иначе 
						СтрТабРек.ОбластьИзображения = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
							ПредСоответствиеJSON.Значение["chunk_img"]
						);
					КонецЕсли;
				Иначе
					СтрТабРек.ОбластьИзображения = РаспознаваниеДокументовСериализацияСлужебный.ИзвлечьДанныеКартинки(
						ТекСоотв.Значение
					);
				КонецЕсли;
			ИначеЕсли ТекСоотв.Ключ = "num_lines" Тогда
				СтрТабРек.СтрокВИзображении = ТекСоотв.Значение;
			ИначеЕсли ТекСоотв.Ключ = "bbox" Тогда
				Если ТипЗнч(ТекСоотв.Значение) = Тип("Массив") И ТекСоотв.Значение.Количество() = 4 Тогда
					СтрТабРек.КоординатаX0 = ТекСоотв.Значение[0];
					СтрТабРек.КоординатаY0 = ТекСоотв.Значение[1];
					СтрТабРек.КоординатаX1 = ТекСоотв.Значение[2];
					СтрТабРек.КоординатаY1 = ТекСоотв.Значение[3];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Источник(РезультатыОбработки, ДанныеВыборки)
	
	Если РезультатыОбработки.Свойство("Источник") Тогда 
		Возврат Перечисления.ИсточникиПолученияФайлов.ВнешняяСистема;
	Иначе
		Возврат РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов.ИсточникПоИдентификатору(
			ДанныеВыборки.ИдентификаторЗадания
		);
	КонецЕсли;
	
КонецФункции

Процедура ПерезаписатьДокументыСозданныеМобильнымПриложением(МобильноеПриложение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РаспознанныйДокумент.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
			|ГДЕ
			|	РаспознанныйДокумент.МобильноеПриложение = &МобильноеПриложение";
		
		Запрос.УстановитьПараметр("МобильноеПриложение", МобильноеПриложение);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Записать();
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Формат_v2

Функция СоздатьРаспознанныйДокументV2(СвойстваРаспознанногоДокумента, РаспознанныйДокумент, ИдентификаторЗадания, СостояниеЗадания) Экспорт
	
	ИдентификаторДокумента = РаспознанныйДокумент.ИдентификаторДокумента;
	
	РезультатыОбработки = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьРезультатыОбработкиПоИдЗадания(ИдентификаторЗадания);
		
	РезультатыОбработки.ИдентификаторРезультата = ИдентификаторДокумента;
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("НачалоЗагрузки");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(РезультатыОбработки.ИдентификаторРезультата, Пакет);
	
	НовыйДокумент = Документы.РаспознанныйДокумент.СоздатьДокумент();
	
	ДатаСоздания = СостояниеЗадания.ДатаСоздания;
	Если Не ДатаСоздания = Неопределено Тогда
		НовыйДокумент.Дата = ДатаСоздания;
	Иначе
		НовыйДокумент.Дата = ТекущаяУниверсальнаяДата();
	КонецЕсли;
		
	НовыйДокумент.ИдентификаторЗадания = ИдентификаторЗадания;
	НовыйДокумент.ИдентификаторРезультата = ИдентификаторДокумента;
	НовыйДокумент.ИмяФайла = СтрСоединить(РаспознанныйДокумент.ИменаФайлов, ", ");
	НовыйДокумент.Наименование = СтрСоединить(РаспознанныйДокумент.ИменаФайлов, ", ");	
	НовыйДокумент.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов[СвойстваРаспознанногоДокумента.Класс];
	
	Если СвойстваРаспознанногоДокумента.Класс = "КассовыйЧек" Тогда
		
		ТипОперацииЧек = СущностьПоКлассу(СвойстваРаспознанногоДокумента.Страницы["0"].Сущности, "ТипОперацииЧек");
		Если ТипОперацииЧек <> 1 Тогда
			НовыйДокумент.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.НеопознанныйДокумент;
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйДокумент.Источник = РегистрыСведений.ПредставлениеЗаданийРаспознаваниеДокументов
		.ИсточникПоИдентификатору(
			ИдентификаторЗадания
		);
	НовыйДокумент.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый;
	НовыйДокумент.Направление = Перечисления.НаправленияРаспознанногоДокумента.Входящий;
	НовыйДокумент.МобильноеПриложение = Справочники.МобильныеПриложенияРаспознаванияДокументов.МобильноеПриложениеПоИдентификатору(
		СостояниеЗадания.ИдентификаторМобильногоПриложения);
	НовыйДокумент.Ответственный = РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов
		.ПолучитьПользователяПоИдЗадания(
			НовыйДокумент.ИдентификаторЗадания
		);
		
	// Упрощенный режим - существует только одна страница.
	Страница = СвойстваРаспознанногоДокумента.Страницы["0"];
	ВсеСущности = Страница.Сущности;
	
	НовыйДокумент.ИсходноеИзображение = Новый ХранилищеЗначения(Страница.Картинка);
	НовыйДокумент.Миниатюра           = Новый ХранилищеЗначения(Страница.Миниатюра);
	НовыйДокумент.ВысотаИзображения   = Страница.Высота;
	НовыйДокумент.ШиринаИзображения   = Страница.Ширина;
	
	Для Каждого Печать Из Страница.Печати Цикл
		СтрокаПометки = НовыйДокумент.ПометкиНаДокументе.Добавить();
		СтрокаПометки.ТипПометки = Перечисления.ТипыПометокРаспознанногоДокумента.Печать;
		СтрокаПометки.ОбластьИзображения = Новый ХранилищеЗначения(Печать.Картинка);
		
		Области = СтрРазделить(Печать.Область, ",");
		
		СтрокаПометки.КоординатаX0 = Области[0];
		СтрокаПометки.КоординатаY0 = Области[1];
		СтрокаПометки.КоординатаX1 = Области[2];
		СтрокаПометки.КоординатаY1 = Области[3];
	КонецЦикла;
	
	ИнициализироватьТаблицыРеквизитовДокумента(НовыйДокумент);
	
	ЗаполнитьРеквизитыДокументаПоСущностям(НовыйДокумент, ВсеСущности);
	
	ВосстановлениеТаблицыРеквизитовДоПолнойТаблицы(НовыйДокумент);
		Если НовыйДокумент.ТипДокумента = Перечисления.ТипыДокументовРаспознаваниеДокументов.КассовыйЧек Тогда
		
		РаспознаваниеДокументовСлужебныйКлиентСервер.УстановитьЗначениеРеквизитаДокумента(НовыйДокумент, "СуммаВключаетНДС", Истина);
		
	КонецЕсли;
	
	ВыполнитьНечеткийПоискИЗаполнить(НовыйДокумент);
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Загружен");
	РаспознаваниеДокументовПереопределяемый.ПередЗаписьюРаспознанногоДокумента(НовыйДокумент, РезультатОбратнойСвязи);
	
	НовыйДокумент.ДополнительныеСвойства.Вставить("Автозаполнение", Истина);
	НовыйДокумент.Записать();
	
	ПослеУспешнойЗаписиРаспознанногоДокумента(НовыйДокумент, ИдентификаторЗадания, РезультатыОбработки);
	
	Возврат НовыйДокумент.Ссылка;
	
КонецФункции

Процедура ЗаполнитьРеквизитыДокументаПоСущностям(НовыйДокумент, ВсеСущности)
	
	ВсеПравила = ПравилаОбработкиСущностей();
	
	Для Каждого СущностьКлючЗначение Из ВсеСущности Цикл
		
		Сущность = СущностьКлючЗначение.Значение;
		
		Если Сущность.ЭтоТипСоставной Тогда 
			Для Каждого Правило Из ПравилаОбработкиСущностиПоКлассу(Сущность.Класс, ВсеПравила) Цикл
				
				СущностьИсточникаДанных = СущностьПоПути(ВсеСущности, Сущность, Правило.Путь);
				ЗаполнитьЗначенияРеквизитаV2(СущностьИсточникаДанных, НовыйДокумент, Правило);
				
			КонецЦикла;
		КонецЕсли;
		
		Если Сущность.ЭтоТипТаблица Тогда
			
			Если Сущность.Класс <> РаспознаваниеДокументовSDK.КлассыСущностей().ТаблицаНоменклатур Тогда
				Продолжить;
			КонецЕсли;
			
			НомерСтроки = 1;
			Для Каждого СтрокаТаблицы Из Сущность.Таблица.Строки Цикл
				
				Для Каждого ЯчейкаПодвалаТаблицыКлючЗначение Из СтрокаТаблицы Цикл
					
					ЯчейкаПодвалаТаблицы = ЯчейкаПодвалаТаблицыКлючЗначение.Значение;
					
					Для Каждого Правило Из ПравилаОбработкиЯчейкиТаблицыПоКлассу(ЯчейкаПодвалаТаблицы.Класс, ВсеПравила) Цикл
						
						ЗаполнитьЗначенияРеквизитаV2(
							ЯчейкаПодвалаТаблицы,
							НовыйДокумент,
							Правило,
							"ТаблицаНоменклатур",
							НомерСтроки
						);
						
					КонецЦикла;
					
				КонецЦикла;
				
				НомерСтроки = НомерСтроки + 1;
				
			КонецЦикла;
			
			Для Каждого ПодвалТаблицыКлючЗначение Из Сущность.Таблица.Подвалы Цикл
				
				КлассПодвала  = ПодвалТаблицыКлючЗначение.Ключ;
				ПодвалТаблицы = ПодвалТаблицыКлючЗначение.Значение;
				
				ПравилаОбработкиПодвала = ПравилаОбработкиПодвалаТаблицыПоКлассу(КлассПодвала, ВсеПравила);
				
				Для Каждого ЯчейкаПодвалаТаблицыКлючЗначение Из ПодвалТаблицы Цикл
					
					ЯчейкаПодвалаТаблицы = ЯчейкаПодвалаТаблицыКлючЗначение.Значение;
					
					Для Каждого Правило Из ПравилаОбработкиЯчейкиТаблицыПоКлассу(ЯчейкаПодвалаТаблицы.Класс, ПравилаОбработкиПодвала) Цикл
						
						ЗаполнитьЗначенияРеквизитаV2(
							ЯчейкаПодвалаТаблицы,
							НовыйДокумент,
							Правило
						);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитаV2(
		Сущность,
		Документ,
		Правило,
		ТабличнаяЧасть = Неопределено,
		НомерСтроки = Неопределено,
		ПроверятьУверенностьСущности = Истина
	)
	
	Если Сущность = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = Правило.ИмяРеквизита;
	
	Если ТабличнаяЧасть = Неопределено Тогда
		
		Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер
			.РеквизитДокумента(Документ, ИмяРеквизита);
		
	Иначе
		
		Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер
			.РеквизитТаблицыДокумента(Документ, НомерСтроки, ИмяРеквизита);
		
	КонецЕсли;
	
	Если ПроверятьУверенностьСущности И Реквизит.УверенностьНайденногоЗначения > Сущность.Уверенность Тогда 
		Возврат; // Уже загрузили сущность с лучшим показателем уверенности.
	КонецЕсли;
	
	Реквизит.ИмяРеквизита = ИмяРеквизита;
	
	Если ЗначениеЗаполнено(Сущность.Область) Тогда
		Области = СтрРазделить(Сущность.Область, ",");
		
		Реквизит.КоординатаX0 = Области[0];
		Реквизит.КоординатаY0 = Области[1];
		Реквизит.КоординатаX1 = Области[2];
		Реквизит.КоординатаY1 = Области[3];
	КонецЕсли;
	
	Реквизит.Значение = Правило.ОписаниеТипа.ПривестиЗначение(Сущность.Значение);
	Реквизит.РаспознанныйТекст = Сущность.РаспознанныйТекст;
	Реквизит.УверенностьНайденногоЗначения = Сущность.Уверенность;
	Реквизит.ОбластьИзображения = Новый ХранилищеЗначения(Сущность.Картинка);
	Реквизит.СтрокВИзображении = Сущность.КоличествоСтрок;
	
КонецПроцедуры

Функция ПравилаОбработкиСущностиПоКлассу(КлассСущности, ВсеПравила)
	
	Отбор = Новый Структура;
	Отбор.Вставить("КлассСущности", КлассСущности);
	
	Возврат ВсеПравила.НайтиСтроки(Отбор);
	
КонецФункции

Функция ПравилаОбработкиЯчейкиТаблицыПоКлассу(КлассЯчейкиТаблицы, ВсеПравила)
	
	Если ТипЗнч(ВсеПравила) = Тип("ТаблицаЗначений") Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Путь", КлассЯчейкиТаблицы);
		
		Возврат ВсеПравила.НайтиСтроки(Отбор);
		
	ИначеЕсли ТипЗнч(ВсеПравила) = Тип("Массив") Тогда
		
		Результат = Новый Массив;
		
		Для Каждого Правило Из ВсеПравила Цикл
			Если Правило.Путь = КлассЯчейкиТаблицы Тогда
				Результат.Добавить(Правило);
			КонецЕсли;
		КонецЦикла;
		
		Возврат Результат;
		
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка вызова.'");
	КонецЕсли;
	
КонецФункции

Функция ПравилаОбработкиПодвалаТаблицыПоКлассу(КлассПодвалаТаблицы, ВсеПравила)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ПодклассСущности", КлассПодвалаТаблицы);
	
	Возврат ВсеПравила.НайтиСтроки(Отбор);
	
КонецФункции

Функция СущностьПоПути(ВсеСущности, Сущность, Путь)
	
	Результат = Сущность;
	
	ЧастиПути = СтрРазделить(Путь, ".");
	НомерВложенияСущности = 0;
	
	Пока ЧастиПути.Количество() > НомерВложенияСущности Цикл 
		
		Если Результат = Неопределено Или Не Результат.ЭтоТипСоставной Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяСвойства = ЧастиПути[НомерВложенияСущности];
		Ключ = Результат.Свойства[ИмяСвойства];
		Результат = ВсеСущности[Ключ];
		
		НомерВложенияСущности = НомерВложенияСущности + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СущностьПоКлассу(ВсеСущности, ИмяКласса)
	
	Результат = Неопределено;
	Для Каждого КлючИЗначение Из ВсеСущности Цикл
		
		Если КлючИЗначение.Значение.Класс = ИмяКласса Тогда
			Результат = КлючИЗначение.Значение.Значение;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НовыеПравилаОбработкиСущностей()
	
	КвалификаторКоличество = Новый КвалификаторыЧисла(15, 3);
	КвалификаторДенежнаяСумма = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	КвалификаторДенежнаяСуммаЛюбойЗнак = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ИмяРеквизита");
	Результат.Колонки.Добавить("КлассСущности");
	Результат.Колонки.Добавить("ПодклассСущности");
	Результат.Колонки.Добавить("Путь");
	Результат.Колонки.Добавить("ОписаниеТипа");
	Результат.Колонки.Добавить("КлючСтарогоСоответствия");
	
	Результат.Индексы.Добавить("КлассСущности");
	Результат.Индексы.Добавить("Путь");
	
	Возврат Результат;
	
КонецФункции

Функция ПравилаОбработкиСущностей()
	
	КвалификаторКоличество = Новый КвалификаторыЧисла(15, 3);
	КвалификаторДенежнаяСумма = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Неотрицательный);
	КвалификаторДенежнаяСуммаЛюбойЗнак = Новый КвалификаторыЧисла(15, 2, ДопустимыйЗнак.Любой);
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	
	Результат = НовыеПравилаОбработкиСущностей();
	
	// Реквизиты
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "НомерДокумента";
	Правило.КлассСущности = "ЗаголовокДокумента";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Номер";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_0";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ДатаДокумента";
	Правило.КлассСущности = "ЗаголовокДокумента";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Дата";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Дата", , , КвалификаторДаты);
	Правило.КлючСтарогоСоответствия = "Р_1";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Продавец";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Правило.КлючСтарогоСоответствия = "Р_2";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ПродавецОрганизация";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Правило.КлючСтарогоСоответствия = "Р_8";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННКПППродавца";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа =  Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННПродавца";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа =  Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_13";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КПППродавца";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.КПП";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Исполнитель";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Правило.КлючСтарогоСоответствия = "Р_17";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННИсполнителя";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_18";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КППИсполнителя";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_19";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Покупатель";
	Правило.КлассСущности = "Покупатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Правило.КлючСтарогоСоответствия = "Р_3";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ПокупательОрганизация";
	Правило.КлассСущности = "Покупатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
	Правило.КлючСтарогоСоответствия = "Р_9";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННКПППокупателя";
	Правило.КлассСущности = "Покупатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННПокупателя";
	Правило.КлассСущности = "Покупатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_14";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КПППокупателя";
	Правило.КлассСущности = "Покупатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.КПП";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_19";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Грузоотправитель";
	Правило.КлассСущности = "Грузоотправитель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Правило.КлючСтарогоСоответствия = "Р_4";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННГрузоотправителя";
	Правило.КлассСущности = "Грузоотправитель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КППГрузоотправителя";
	Правило.КлассСущности = "Грузоотправитель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.КПП";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Грузополучатель";
	Правило.КлассСущности = "Грузополучатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Наименование";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Правило.КлючСтарогоСоответствия = "Р_5";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИННГрузополучателя";
	Правило.КлассСущности = "Грузополучатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.ИНН";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КППГрузополучателя";
	Правило.КлассСущности = "Грузополучатель";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.КПП";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "БанковскийСчетКонтрагента";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.БанковскийСчет.НомерСчета";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаКонтрагентов");
	Правило.КлючСтарогоСоответствия = "Р_21";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "БанковскийСчетОрганизации";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.БанковскийСчет.НомерСчета";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций");
	Правило.КлючСтарогоСоответствия = "Р_22";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "БанкНаименование";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.БанковскийСчет.НаименованиеБанка";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_?";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "БанкСчет";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.БанковскийСчет.НомерСчетаКорреспондента";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_23";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Банк";
	Правило.КлассСущности = "Поставщик";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.БанковскийСчет.БИК";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков");
	Правило.КлючСтарогоСоответствия = "Р_24";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Договор";
	Правило.КлассСущности = "ДокументОснование";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Компания.Номер";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	Правило.КлючСтарогоСоответствия = "Р_6";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "НомерДоговора";
	Правило.КлассСущности = "ДокументОснование";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Номер";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Р_15";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ДатаДоговора";
	Правило.КлассСущности = "ДокументОснование";
	Правило.ПодклассСущности = "Свойства";
	Правило.Путь = "Дата";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Дата", , , КвалификаторДаты);
	Правило.КлючСтарогоСоответствия = "Р_16";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Склад";
	Правило.КлассСущности = "";
	Правило.ПодклассСущности = "";
	Правило.Путь = "";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	Правило.КлючСтарогоСоответствия = "Р_7";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "СуммаВключаетНДС";
	Правило.КлассСущности = "";
	Правило.ПодклассСущности = "";
	Правило.Путь = "";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Булево");
	Правило.КлючСтарогоСоответствия = "Р_25";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ВидСкидки";
	Правило.КлассСущности = "";
	Правило.ПодклассСущности = "";
	Правило.Путь = "";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число");
	Правило.КлючСтарогоСоответствия = "Р_26";
	
	// Колонки Таблицы
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Номенклатура";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "НаименованиеНоменклатуры";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_0";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Артикул";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "АртикулНоменклатуры";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_1";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Содержание";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "НаименованиеНоменклатуры";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_2";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Количество";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "Количество";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторКоличество);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_3";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Цена";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "Цена";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_4";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Сумма";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "Сумма";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_5";
	
	Правило = Результат.Добавить(); // Переопределит Сумма
	Правило.ИмяРеквизита = "Сумма";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "СуммаБезНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_5";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "СтавкаНДС";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "СтавкаНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_6";
	
	Правило = Результат.Добавить(); // Переопределит СтавкаНДС
	Правило.ИмяРеквизита = "СтавкаНДС";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "СтавкаНДСТип";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_6";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "СуммаНДС";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "СуммаНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_7";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "Всего";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "СуммаСНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_8";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "СуммаСкидки";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "Скидка";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_9";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ЕдиницаИзмерения";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "НаменованиеЕдиницыИзмерения";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_10";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КодЕдиницыИзмерения";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "КодЕдиницыИзмерения";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_11";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "СтранаПроисхождения";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "НаименованиеСтраныПроисхождения";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.СтраныМира");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_12";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "КодСтраныПроисхождения";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "КодСтраныПроисхождения";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Строка");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_12";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "НомерГТД";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "Строки";
	Правило.Путь = "НомерГТД";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("СправочникСсылка.НомераГТД");
	Правило.КлючСтарогоСоответствия = "Т_1.Строка.Р_14";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИтогоСумма";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалИтого";
	Правило.Путь = "Сумма";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Р_10";
	
	Правило = Результат.Добавить(); // Переопределит ПодвалИтого.Сумма
	Правило.ИмяРеквизита = "ИтогоСумма";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалИтого";
	Правило.Путь = "СуммаБезНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Р_10";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИтогоСуммаНДС";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалИтого";
	Правило.Путь = "СуммаНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Р_11";
	
	Правило = Результат.Добавить(); // Переопределит ПодвалИтого.СуммаНДС
	Правило.ИмяРеквизита = "ИтогоСуммаНДС";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалСуммаНДС";
	Правило.Путь = "Сумма";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Р_11";
	
	Правило = Результат.Добавить(); // Переопределит ПодвалСуммаНДС.Сумма
	Правило.ИмяРеквизита = "ИтогоСуммаНДС";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалВТомЧислеНДС";
	Правило.Путь = "Сумма";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Р_11";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИтогоВсего";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалИтого";
	Правило.Путь = "СуммаСНДС";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСумма);
	Правило.КлючСтарогоСоответствия = "Р_12";
	
	Правило = Результат.Добавить();
	Правило.ИмяРеквизита = "ИтогоСуммаСкидки";
	Правило.КлассСущности = "ТаблицаНоменклатур";
	Правило.ПодклассСущности = "ПодвалИтого";
	Правило.Путь = "Скидка";
	Правило.ОписаниеТипа = Новый ОписаниеТипов("Число", КвалификаторДенежнаяСуммаЛюбойЗнак);
	Правило.КлючСтарогоСоответствия = "Р_20";
	
	Возврат Результат;
	
КонецФункции
	
#КонецОбласти

Процедура ИнициализироватьТаблицыРеквизитовДокумента(ДокументОбъект)
	
	Соответствие = РаспознаваниеДокументовСлужебный
		.ПолучитьСопоставлениеРеквизитовИСвойствJSON(ДокументОбъект.ТипДокумента);
	
	Для Каждого ДанныеСопоставления Из Соответствие Цикл
		Если СтрНайти(ДанныеСопоставления.Адрес, ".Строка.") Тогда
			
			НомерСтроки = 1;
			
			Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер
				.РеквизитТаблицыДокумента(ДокументОбъект, НомерСтроки, ДанныеСопоставления.ИмяРеквизита);
			Реквизит.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
			
		Иначе
			
			Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер
				.РеквизитДокумента(ДокументОбъект, ДанныеСопоставления.ИмяРеквизита);
			Реквизит.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение();
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВосстановлениеТаблицыРеквизитовДоПолнойТаблицы(ДокументОбъект) Экспорт
	
	Если ДокументОбъект.РеквизитыТабличныхЧастей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.РеквизитыТабличныхЧастей.Сортировать("НомерСтрокиТЧ");
	
	КоличествоСтрок = ДокументОбъект
		.РеквизитыТабличныхЧастей[ДокументОбъект.РеквизитыТабличныхЧастей.Количество() - 1]["НомерСтрокиТЧ"];
	
	Соответствие = РаспознаваниеДокументовСлужебный
		.ПолучитьСопоставлениеРеквизитовИСвойствJSON(ДокументОбъект.ТипДокумента);
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Для Каждого ДанныеСопоставления Из Соответствие Цикл
			Если СтрНайти(ДанныеСопоставления.Адрес, ".Строка.") Тогда
				Реквизит = РаспознаваниеДокументовСлужебныйКлиентСервер
					.РеквизитТаблицыДокумента(ДокументОбъект, НомерСтроки, ДанныеСопоставления.ИмяРеквизита);
				Реквизит.Значение = ДанныеСопоставления.ОписаниеТипа.ПривестиЗначение(Реквизит.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьНечеткийПоискИЗаполнить(НовыйДокумент)
	
	НоваяСсылка = Документы.РаспознанныйДокумент.ПолучитьСсылку();
	НовыйДокумент.УстановитьСсылкуНового(НоваяСсылка);
	РаспознаваниеДокументов.ЗаполнитьСпискиВыбораНаСервере(НовыйДокумент, НоваяСсылка);
	ЗаполнитьЗначенияРаспознанногоДокумента(НовыйДокумент, НоваяСсылка);
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРаспознанногоДокумента(ДокументОбъект, ДокументСсылка) Экспорт
	
	// Значения примитивных типов заполнены ранее. По ним не идет нечеткий поиск
	Для Каждого Реквизит Из ДокументОбъект.РеквизитыДокумента Цикл
		Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаПроблемныхЗначений()
			И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
			И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
			
			Реквизит.Значение = Реквизит.НайденноеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из ДокументОбъект.РеквизитыТабличныхЧастей Цикл
		Если Реквизит.УверенностьНайденногоЗначения >= РаспознаваниеДокументовСлужебныйКлиентСервер.ГраницаПроблемныхЗначений()
			И НЕ РаспознаваниеДокументовКлиентСервер.ЭтоПримитивныйТип(ТипЗнч(Реквизит.Значение))
			И НЕ РаспознаваниеДокументовКлиентСервер.РаспознанныйТекстСодержитПустоеЗначениеПоля(Реквизит.ИмяРеквизита, Реквизит.РаспознанныйТекст) Тогда
			
			Реквизит.Значение = Реквизит.НайденноеЗначение;
		КонецЕсли;
	КонецЦикла;
	
	РаспознаваниеДокументовПереопределяемый.ПриЗаполненииРаспознанногоДокумента(ДокументОбъект, ДокументСсылка);
	
КонецПроцедуры

Процедура ПослеУспешнойЗаписиРаспознанногоДокумента(НовыйДокумент, ИдентификаторЗадания, РезультатыОбработки)
	
	РаспознаваниеДокументов.ОтправитьОбратнуюСвязьRecognitionResult(НовыйДокумент);
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Загружен");
	РезультатОбратнойСвязи.НомерРаспознанногоДокумента = НовыйДокумент.Номер;
	РезультатОбратнойСвязи.ТипРаспознанногоДокумента = Строка(НовыйДокумент.ТипДокумента);
	
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(НовыйДокумент.ИдентификаторРезультата, Пакет);
	
	ТекущиеНастройки = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
	
	УстановитьПривилегированныйРежим(Истина);
	
	КандидатыВСвязанныеДокументы = РаспознаваниеДокументовСлужебный.НайтиПотенциальныеСвязаныеДокументы(НовыйДокумент);
	
	Для Каждого Кандидат Из КандидатыВСвязанныеДокументы Цикл
		
		РегистрыСведений.СвязанныеОбъектыРаспознаниеДокументов.ЗаписатьЗначения(Кандидат.Ссылка, НовыйДокумент.Ссылка);
		
		Если ТекущиеНастройки.ПомечатьДокументОбработаннымПриНайденномВБазе Тогда 
			
			ОтметитьДокументОбработанным(НовыйДокумент);
			
			Если ТекущиеНастройки.ПриОбнаруженииДокументаПрикреплятьИзображениеАвтоматически Тогда
				АдресКартинки = ПоместитьВоВременноеХранилище(НовыйДокумент.ИсходноеИзображение.Получить());
				РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(НовыйДокумент, Кандидат.Ссылка, АдресКартинки);
				УдалитьИзВременногоХранилища(АдресКартинки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	РегистрыСведений.РезультатыОбработкиЗаданийРаспознаваниеДокументов.ЗаписатьРезультатОбработкиДокумента(
		ИдентификаторЗадания,
		РезультатыОбработки
	);
	
	РегистрыСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов.ИзменитьВОбработке(
		НовыйДокумент.ИдентификаторРезультата,
		Ложь
	);
	
КонецПроцедуры

Процедура ОтметитьДокументОбработанным(ДокументОбъект) Экспорт
	
	ДокументОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
	ДокументОбъект.Записать();
	
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проведен");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(ДокументОбъект.ИдентификаторРезультата, Пакет);

КонецПроцедуры

#Область Часть_ERP

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//   Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//   Структура - см. НоменклатураКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ПараметрыУказанияСерий = НоменклатураКлиентСервер.ПараметрыУказанияСерий();	
	ПараметрыУказанияСерий.ПолноеИмяОбъекта = "Документ.РаспознанныйДокумент";  
	ПараметрыСерийСклада = СкладыСервер.ИспользованиеСерийНаСкладе(Объект.Склад, Истина);
	ПараметрыУказанияСерий.УчитыватьСебестоимостьПоСериям = ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
	ПараметрыУказанияСерий.ПоляСвязи.Добавить("Склад");		
	ПараметрыУказанияСерий.ЭтоНакладная = Истина;            
	ПараметрыУказанияСерий.ТолькоСерииДляСебестоимости = Ложь; 
    ПараметрыУказанияСерий.Дата = Объект.Дата;    
	
	Если Объект.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда 
		ПараметрыУказанияСерий.Вставить("Направление",Перечисления.НаправленияРаспознанногоДокумента.Исходящий);
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры;
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
		
		ПараметрыУказанияСерий.ПланированиеОтгрузки = Истина;
		ПараметрыУказанияСерий.РегистрироватьСерии = НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий);	
	Иначе
		ПараметрыУказанияСерий.Вставить("Направление",Перечисления.НаправленияРаспознанногоДокумента.Входящий);
		ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры  = 
						(ПараметрыСерийСклада.ИспользоватьСерииНоменклатуры И Не СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Объект.Склад, Объект.Дата, Истина))
						Или ПараметрыСерийСклада.УчитыватьСебестоимостьПоСериям;
		ПараметрыУказанияСерий.СерииПриПланированииОтгрузкиУказываютсяВТЧСерии = Истина;
		ПараметрыУказанияСерий.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ПриемкаОтПоставщика);

		ПараметрыУказанияСерий.ОперацияДокумента = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		ПараметрыУказанияСерий.ПараметрыЗапроса.Вставить("ХозОперацияТоварыВПутиИНеотфактуровка", Ложь);
	КонецЕсли;

	Возврат ПараметрыУказанияСерий; 
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//		ПараметрыУказанияСерий - Структура - состав полей задается в функции НоменклатураКлиентСервер.ПараметрыУказанияСерий
//	Возвращаемое значение:
//		Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт

Если ПараметрыУказанияСерий.Направление = Перечисления.НаправленияРаспознанногоДокумента.Исходящий Тогда
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.ТСклад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия КАК Серия,
	|	Товары.Количество КАК Количество,
	|	Товары.СтатусУказанияСерий КАК СтатусУказанияСерий,
	|	Товары.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Склад КАК Склад,
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад КАК Склад,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	Серии.Количество КАК Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад КАК Склад,
	|	Серии.Номенклатура КАК Номенклатура,
	|	Серии.Характеристика КАК Характеристика,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 14
	|					ИНАЧЕ 13
	|				КОНЕЦ
	|		КОГДА &ТолькоСерииДляСебестоимости
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|			ТОГДА ВЫБОР
	|					КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|						ТОГДА 10
	|					ИНАЧЕ 9
	|				КОНЕЦ
	|		КОГДА Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|				И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке
	|			ТОГДА 0
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|				И &ПланированиеОтбора
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 6
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 8
	|							ИНАЧЕ 7
	|						КОНЕЦ
	|				КОНЕЦ
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПоФактуОтбора
	|				И НЕ(Склады.ИспользоватьОрдернуюСхемуПриОтгрузке
	|						И &Дата >= Склады.ДатаНачалаОрдернойСхемыПриОтгрузке)
	|				И &ФактОтбора
	|				И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриОтгрузкеКлиенту
	|			ТОГДА ВЫБОР
	|					КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|						ТОГДА ВЫБОР
	|								КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|										И ТоварыДляЗапроса.Количество > 0
	|									ТОГДА 4
	|								ИНАЧЕ 3
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|									И ТоварыДляЗапроса.Количество > 0
	|								ТОГДА 2
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусУказанияСерий
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Склад = СерииДляЗапроса.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = ТоварыДляЗапроса.Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки КАК НомерСтроки,
	|	Статусы.СтатусУказанияСерий КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	Статусы.СтатусУказанияСерий <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
Иначе 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.ТСклад КАК Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Серия,
	|	Товары.Количество,
	|	Товары.СтатусУказанияСерий,
	|	Товары.НомерСтроки
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	СУММА(Товары.Количество) КАК Количество,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ ТоварыДляЗапроса
	|ИЗ
	|	Товары КАК Товары
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.Склад,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	Серии.Количество
	|ПОМЕСТИТЬ Серии
	|ИЗ
	|	&Серии КАК Серии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика,
	|	СУММА(Серии.Количество) КАК Количество
	|ПОМЕСТИТЬ СерииДляЗапроса
	|ИЗ
	|	Серии КАК Серии
	|
	|СГРУППИРОВАТЬ ПО
	|	Серии.Склад,
	|	Серии.Номенклатура,
	|	Серии.Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.СтатусУказанияСерий КАК СтарыйСтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ИЛИ &ХозОперацияТоварыВПутиИНеотфактуровка
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА ВЫБОР
	|							КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|								ТОГДА 14
	|							ИНАЧЕ 13
	|						КОНЕЦ
	|				КОГДА НЕ &ТолькоСерииДляСебестоимости
	|					ТОГДА ВЫБОР
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтгрузки
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|											ТОГДА ВЫБОР
	|													КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|															И ТоварыДляЗапроса.Количество > 0
	|														ТОГДА 10
	|													ИНАЧЕ 9
	|												КОНЕЦ
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПланированииОтбора
	|								ТОГДА ВЫБОР
	|										КОГДА НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|												ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении
	|											ТОГДА ВЫБОР
	|													КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|															И ТоварыДляЗапроса.Количество > 0
	|														ТОГДА 8
	|													ИНАЧЕ 7
	|												КОНЕЦ
	|										ИНАЧЕ 0
	|									КОНЕЦ
	|							КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемке
	|									И (НЕ Склады.ИспользоватьОрдернуюСхемуПриПоступлении
	|										ИЛИ &Дата < Склады.ДатаНачалаОрдернойСхемыПриПоступлении)
	|									И ПолитикиУчетаСерий.ПолитикаУчетаСерий.УказыватьПриПриемкеОтПоставщика
	|								ТОГДА ВЫБОР
	|										КОГДА ПолитикиУчетаСерий.ПолитикаУчетаСерий.УчитыватьОстаткиСерий
	|											ТОГДА ВЫБОР
	|													КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|															И ТоварыДляЗапроса.Количество > 0
	|														ТОГДА 4
	|													ИНАЧЕ 3
	|												КОНЕЦ
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ТоварыДляЗапроса.Количество = ЕСТЬNULL(СерииДляЗапроса.Количество, 0)
	|														И ТоварыДляЗапроса.Количество > 0
	|													ТОГДА 2
	|												ИНАЧЕ 1
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерий,
	|	ВЫБОР
	|		КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчитыватьСебестоимостьПоСериям
	|					ТОГДА
	|						ВЫБОР
	|							КОГДА (ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчетСерийВНеотфактурованныхПоставкахТоваров
	|									ИЛИ ТоварыДляЗапроса.ВидНоменклатуры.ПолитикаУчетаСерий.УчетТоваровВПутиОтПоставщикаПоСериям)
	|								ТОГДА ВЫБОР
	|										КОГДА Товары.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|											ТОГДА 18
	|										ИНАЧЕ 17
	|									КОНЕЦ
	|								ИНАЧЕ 0
	|						КОНЕЦ
	|					ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусУказанияСерийТоварыУПартнеров
	|ПОМЕСТИТЬ Статусы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыДляЗапроса КАК ТоварыДляЗапроса
	|			ЛЕВОЕ СОЕДИНЕНИЕ СерииДляЗапроса КАК СерииДляЗапроса
	|			ПО ТоварыДляЗапроса.Номенклатура = СерииДляЗапроса.Номенклатура
	|				И ТоварыДляЗапроса.Характеристика = СерииДляЗапроса.Характеристика
	|				И ТоварыДляЗапроса.Склад = СерииДляЗапроса.Склад
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетаСерий
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
	|				ПО ПолитикиУчетаСерий.Склад = Склады.Ссылка
	|			ПО (ПолитикиУчетаСерий.Склад = ТоварыДляЗапроса.Склад)
	|				И ТоварыДляЗапроса.ВидНоменклатуры = ПолитикиУчетаСерий.Ссылка
	|		ПО Товары.Номенклатура = ТоварыДляЗапроса.Номенклатура
	|			И Товары.Характеристика = ТоварыДляЗапроса.Характеристика
	|			И Товары.Склад = ТоварыДляЗапроса.Склад
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.НомерСтроки                         КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА &ХозОперацияТоварыВПутиИНеотфактуровка
	|			ТОГДА Статусы.СтатусУказанияСерийТоварыУПартнеров
	|		ИНАЧЕ Статусы.СтатусУказанияСерий
	|	КОНЕЦ                                       КАК СтатусУказанияСерий
	|ИЗ
	|	Статусы КАК Статусы
	|ГДЕ
	|	ВЫБОР
	|		КОГДА &ХозОперацияТоварыВПутиИНеотфактуровка
	|			ТОГДА Статусы.СтатусУказанияСерийТоварыУПартнеров
	|		ИНАЧЕ Статусы.СтатусУказанияСерий
	|	КОНЕЦ <> Статусы.СтарыйСтатусУказанияСерий
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";

КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПараметрыВыбораСтатейИАналитик() Экспорт
	
	МассивПаметровВыбора = Новый Массив;
	
	#Область ТоварыСтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным =    "ТаблицаДокумента";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
		
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	
	ПараметрыВыбора.УсловияДоступностиСтатьиВСтроках.Вставить("СписатьНаРасходы", Истина);
	
	МассивПаметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	Возврат МассивПаметровВыбора;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли