#Область ОписаниеПеременных

&НаКлиенте
Перем ОригинальныеТекстыСообщений; // Исп. в ОбновитьПредставлениеБалансаНаКлиенте

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьРаспознаваниеДокументов") Тогда
		ВызватьИсключение НСтр("ru = 'Функциональная опция ИспользоватьРаспознаваниеДокументов отключена.'");
	КонецЕсли;
	
	ЭтотОбъект.НавигационнаяСсылка = "e1cib/list/Документ.РаспознанныйДокумент";
	
	ПоказыватьМиниатюры = Ложь;
	ПоказыватьМиниатюрыНаСервере();
	
	ОбщиеНастройки = ПолучитьОбщиеНастройки();
	
	БалансПредставление = СтроковыеФункции.ФорматированнаяСтрока(НСтр("ru='Пожалуйста подождите...'"));
	
	ДатаСеанса = ТекущаяДатаСеанса();
	ДатаСеансаУниверсальная = УниверсальноеВремя(ДатаСеанса, ЧасовойПоясСеанса());
	ПоправкаКУниверсальномуВремени = ДатаСеанса - ДатаСеансаУниверсальная;
	
	Список.Параметры.УстановитьЗначениеПараметра("ПоправкаВремени", ПоправкаКУниверсальномуВремени);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = НачалоМесяца(ДатаСеансаУниверсальная);
	ЭлементОтбора.Использование = (ВариантОтбора = 0);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение = КонецМесяца(ДатаСеансаУниверсальная);
	ЭлементОтбора.Использование = (ВариантОтбора = 0);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "";
	ЭлементОтбора.Использование = (ВариантОтбора = 1);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "";
	ЭлементОтбора.Использование = (ВариантОтбора = 2);
	
	ФильтрПоСтатусу = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ФильтрПоСтатусу.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ФильтрПоСтатусу.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокВсеСтатусы = Новый СписокЗначений();
	СписокВсеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.ПустаяСсылка"));
	СписокВсеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый"));
	СписокВсеСтатусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка"));
	
	ФильтрПоСтатусу.ПравоеЗначение = СписокВсеСтатусы;
	ФильтрПоСтатусу.Использование = Истина;
		
	Элементы.СписокФильтрСтатусВОбработке.ЦветФона = WebЦвета.АкварельноСиний;
	Элементы.СписокФильтрСтатусНовые.ЦветФона = WebЦвета.АкварельноСиний;
	Элементы.СписокФильтрСтатусСОшибкой.ЦветФона = WebЦвета.АкварельноСиний;
	
	ИдентификаторФильтраПоСтатусам = Список.Отбор.ПолучитьИдентификаторПоОбъекту(ФильтрПоСтатусу);
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		И Не Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда

		ДоступныеОрганизации = Новый СписокЗначений;
		ДоступныеОрганизации.ЗагрузитьЗначения(РаспознаваниеДокументовСлужебный.ДоступныеОрганизации());
		ДоступныеОрганизации.Добавить(Справочники.Организации.ПустаяСсылка());
		
		ФильтрПоОрганизации = ОтборОрганизация.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ФильтрПоОрганизации.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ФильтрПоОрганизации.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ФильтрПоОрганизации.ПравоеЗначение = ДоступныеОрганизации;
		
	КонецЕсли;
	
	ЗаполнитьПериодыДляОтборов();
	
	УстановитьУсловноеОформление();
	
	ОткрытьФормуБлокировкиСервиса = РаспознаваниеДокументовСлужебный.ТребуетсяЗаблокироватьСервисРаспознавания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОткрытьФормуБлокировкиСервиса Тогда
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьФормуБлокировки(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтроки1 = ОтборПериодДерево.ПолучитьЭлементы();
	Если ВсеСтроки1.Количество() > 1 Тогда
		Элементы.ОтборПериодДерево.Развернуть(ВсеСтроки1[1].ПолучитьИдентификатор());
	КонецЕсли;
	
	// ПерсонализированныеПредложения
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);
	// Конец ПерсонализированныеПредложения
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьРаспознанныеДокументы", 3, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_Периодический_ЗагрузитьРаспознанныеДокументы", 30);
	
	РаспознаваниеДокументовЗамерыВремениСлужебныйКлиент.ПодключитьОбработчикОтправкиЗамеровВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РаспознанныйДокумент_СтатусОбработан" Тогда
		ПараметрыОтбораСозданныхДокументов1С = ПолучитьПараметрыОтбораСозданныхДокументов1С();
		УстановитьСтатусОбработанНаСервере(Источник, ПараметрыОтбораСозданныхДокументов1С);
		ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "РаспознанныйДокумент_ОбновитьОтборФормыСписка" Тогда
		Если ВариантОтбора = 1 Тогда
			Элементы.ОтборКонтрагент.Обновить();
			ОтборКонтрагентПриАктивизацииСтроки(Элементы.ОтборКонтрагент);
		ИначеЕсли ВариантОтбора = 2 Тогда
			Элементы.ОтборОрганизация.Обновить();
			ОтборОрганизацияПриАктивизацииСтроки(Элементы.ОтборОрганизация);
		КонецЕсли;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	ИначеЕсли ИмяСобытия = "РаспознанныйДокумент_ОбновитьПредставлениеБаланса" Тогда
		СостоянияПоБалансу = Неопределено;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредставлениеБаланса", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВариантОтбораПриИзменении(Элемент)
	
	ВариантОтбораПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьМиниатюрыПриИзменении(Элемент)
	
	Если ДанныеДеревьев = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДанныеДеревьев.ТекущаяСтрока = Неопределено;
	
	ПриАктивизацииСтрокиДеревоСписок(Элементы.Список.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьСозданныеДокументы1СПриИзменении(Элемент)
	
	ПараметрыОтбораСозданныхДокументов1С = ПолучитьПараметрыОтбораСозданныхДокументов1С();
	ОбновитьДеревоДокументовИФайловВсеНаСервере(ПараметрыОтбораСозданныхДокументов1С);
	Элементы.ГруппаДеревоПраво.Видимость = ПоказыватьСозданныеДокументы1С;
	ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлПочтыИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	Ошибка = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Текст);
	Элементы.ТекстНеверныйАдресЭлПочты.Видимость = Ошибка;
	
КонецПроцедуры

// ПерсонализированныеПредложения

&НаКлиенте
Процедура ТекстБаннераОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.ЗакрытьБаннер(ЭтотОбъект);
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПоказатьБаннерНажатие(Элемент)
	
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.ОткрытьБаннер(ЭтотОбъект);
	РаспознаваниеДокументовПерсонализированныеПредложенияКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

// Конец ПерсонализированныеПредложения

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборПериодДерево

&НаКлиенте
Процедура ОтборПериодДеревоПриАктивизацииСтроки(Элемент)
	
	ТекущаяДата = Неопределено;
	ТекущаяДатаПериод = Неопределено;
	ТекущийКонтрагент = Неопределено;
	ТекущаяОрганизация = Неопределено;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяДата = Элемент.ТекущиеДанные.День;
	ПериодДень = (Элемент.ТекущиеДанные.Вложенность = 1);
	
	ТекущаяДатаПериод = ?(ПериодДень, "День", "Месяц");
	
	ИзменитьОтборПоПериоду(ТекущаяДата, ПериодДень);
	Если ПоказыватьСозданныеДокументы1С Тогда
		Элементы.СтраницыДерева.ТекущаяСтраница = Элементы.СтраницаПустая;
		ОбновитьДеревоДокументовИФайловВсеНаСервере(Новый Структура("НачалоПериода, ПериодДень", ТекущаяДата, ПериодДень));
		ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборКонтрагент

&НаКлиенте
Процедура ОтборКонтрагентПриАктивизацииСтроки(Элемент)
	
	ТекущаяДата = Неопределено;
	ТекущаяДатаПериод = Неопределено;
	ТекущийКонтрагент = Неопределено;
	ТекущаяОрганизация = Неопределено;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийКонтрагент = Элемент.ТекущиеДанные.Контрагент;
	Список.Отбор.Элементы[2].ПравоеЗначение = ТекущийКонтрагент;
	
	Если ПоказыватьСозданныеДокументы1С Тогда 
		ОбновитьДеревоДокументовИФайловВсеНаСервере(ТекущийКонтрагент);
		ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтборОрганизация

&НаКлиенте
Процедура ОтборОрганизацияПриАктивизацииСтроки(Элемент)
	
	ТекущаяДата = Неопределено;
	ТекущаяДатаПериод = Неопределено;
	ТекущийКонтрагент = Неопределено;
	ТекущаяОрганизация = Неопределено;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущаяОрганизация = Элемент.ТекущиеДанные.Организация;
	ЭлементОтбора = Список.Отбор.Элементы[3];
	Если ЗначениеЗаполнено(ТекущаяОрганизация) Тогда
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ТекущаяОрганизация;
	Иначе
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация.Наименование");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.ПравоеЗначение = Неопределено;
	КонецЕсли;
	Если ПоказыватьСозданныеДокументы1С Тогда
		ОбновитьДеревоДокументовИФайловВсеНаСервере(ТекущаяОрганизация);
		ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Поле.Имя = "СтатусРаспознавания" Тогда
		
		СтатусРаспознавания = Элемент.ТекущиеДанные.СтатусРаспознавания;
		Если СтатусРаспознавания = 0 Тогда
			Если Элемент.ТекущиеДанные.ЭтоЗаданиеРаспознавания Тогда 
				Статус = НСтр("ru = 'Задание распознавания отменено.'");
			Иначе 
				Статус = НСтр("ru = 'Установлена пометка на удаление.'");
			КонецЕсли;
		ИначеЕсли СтатусРаспознавания = 1 Тогда
			Статус = НСтр("ru = 'Ошибка распознавания.'");
		ИначеЕсли СтатусРаспознавания = 4 Тогда
			Статус = НСтр("ru = 'Документ обработан.'");
		ИначеЕсли СтатусРаспознавания = 2 Тогда
			Статус = НСтр("ru = 'Документ распознан и ожидает проверки.'");
		ИначеЕсли СтатусРаспознавания = 3 Тогда
			Статус = НСтр("ru = 'Документ в процессе распознавания. Пожалуйста, подождите...'");
		КонецЕсли;
		ПоказатьПредупреждение(, Статус);
		
	ИначеЕсли Поле.Имя = "СтатусСвязанногоДокумента" Тогда
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РаспознанныйДокумент", ТекущиеДанные.Ссылка);
		
		ОткрытьФорму(
			"Документ.РаспознанныйДокумент.Форма.ПрикрепитьИзображениеКНайденомуДокументу",
			ПараметрыОткрытия,
			ЭтотОбъект);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("ТекущаяДата", ТекущаяДата);
		Отбор.Вставить("ТекущаяДатаПериод", ТекущаяДатаПериод);
		Отбор.Вставить("ТекущаяОрганизация", ТекущаяОрганизация);
		Отбор.Вставить("ТекущийКонтрагент", ТекущийКонтрагент);
		
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьРаспознанныйДокумент(
			ТекущиеДанные.Ссылка,
			ТекущиеДанные.ТипДокумента,
			ТекущиеДанные.ВариантОбработки,
			ТекущиеДанные.Идентификатор,
			ТекущиеДанные.КоличествоСтрокТаблицы,
			Отбор
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	ПриАктивизацииСтрокиДеревоСписок(Элементы.Список.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ОткрытьФормуДобавления();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоДокументыИФайлы

&НаКлиенте
Процедура ДеревоДокументыИФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	Иначе
		ДанныеФайла = РаботаСФайламиКлиент.ДанныеФайла(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументыИФайлыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиЛичныйКабинет(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		РаспознаваниеДокументовСлужебныйКлиентСервер.АдресЛичногоКабинета()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьТестовыйПериод(Команда)
	
	ИдентификаторСервиса = РаспознаваниеДокументовСлужебныйКлиентСервер.ИдентификаторСервиса();
	Обработчик = Новый ОписаниеОповещения("ПослеПодключенияТестовогоПериода", ЭтотОбъект);
	ПодключениеСервисовСопровожденияКлиент.ПодключитьТестовыйПериод(ИдентификаторСервиса, ЭтотОбъект, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура БалансПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "#Перейти" Тогда
		
		СтандартнаяОбработка = Ложь;
		НеВыполнятьОбновление = Истина; // Запретить загрузку принудительно
		ОтрисоватьПредставлениеБалансаНаКлиенте(Неопределено);
		
		Обработчик = Новый ОписаниеОповещения("ПослеПроверкиПодключенияКСервисуРаспознавания", ЭтотОбъект);
		РаспознаваниеДокументовКлиент.ПоказатьАвторизациюИТС(Обработчик, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлыДляРаспознавания(Команда)
	
	ОткрытьФормуДобавления();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеМиниатюр(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Кнопка = Элементы.ОтображениеМиниатюр;
	ВключитьФильтр = НЕ Кнопка.Пометка;
	Кнопка.Пометка = ВключитьФильтр;
	ПоказыватьМиниатюры = ВключитьФильтр;
	
	ИзменитьТекстПодсказки(ВключитьФильтр, "ОтображениеМиниатюр");
	
	ДанныеДеревьев.ТекущаяСтрока = Неопределено;
	ПриАктивизацииСтрокиДеревоСписок(Элементы.Список.ТекущиеДанные, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеСозданныхДокументов(Команда)
	
	Кнопка = Элементы.ОтображениеСозданныхДокументов;
	ВключитьФильтр = Не Кнопка.Пометка;
	Кнопка.Пометка = ВключитьФильтр;
	
	ИзменитьТекстПодсказки(ВключитьФильтр, "ОтображениеСозданныхДокументов");
	
	ПоказыватьСозданныеДокументы1С = ВключитьФильтр;
	Элементы.СтраницыДерева.ТекущаяСтраница = Элементы.СтраницаПустая;
	
	ПараметрыОтбораСозданныхДокументов1С = ПолучитьПараметрыОтбораСозданныхДокументов1С();
	ОбновитьДеревоДокументовИФайловВсеНаСервере(ПараметрыОтбораСозданныхДокументов1С);
	Элементы.ГруппаДеревоПраво.Видимость = ВключитьФильтр;
	ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаданияИЗагрузить(Команда)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредставлениеБаланса", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьРаспознанныеДокументы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ЭтоЗаданиеРаспознавания Тогда
		Если ТекущиеДанные.ПометкаУдаления Тогда
			ПоказатьПредупреждение(,
				НСтр("ru = 'Нельзя сохранить файл отмененного задания распознавания.'"));
		Иначе
			ПоказатьПредупреждение(,
				НСтр("ru = 'Нельзя сохранить в процессе обработки.
				           |Дождитесь окончания распознавания и повторите.'"));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	РаспознаваниеДокументовСлужебныйКлиент.СохранитьФайлыДокумента(ТекущиеДанные.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайловВОбработке(Команда)
	
	Фильтр = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.ПустаяСсылка");
	Кнопка = Элементы.СписокФильтрСтатусВОбработке;
	ОбработатьНажатиеКнопкиСтатистики(Фильтр, Кнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайловНовых(Команда)
	
	Фильтр = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый");
	Кнопка = Элементы.СписокФильтрСтатусНовые;
	ОбработатьНажатиеКнопкиСтатистики(Фильтр, Кнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайловСОшибкой(Команда)
	
	Фильтр = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка");
	Кнопка = Элементы.СписокФильтрСтатусСОшибкой;
	ОбработатьНажатиеКнопкиСтатистики(Фильтр, Кнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтатусОбработан(Команда)
	
	Фильтр = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан");
	Кнопка = Элементы.СписокФильтрСтатусОбработан;
	ОбработатьНажатиеКнопкиСтатистики(Фильтр, Кнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ФильтрСтатусУдаленные(Команда)
	
	Фильтр = ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Удален");
	Кнопка = Элементы.СписокФильтрСтатусУдаленные;
	ОбработатьНажатиеКнопкиСтатистики(Фильтр, Кнопка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИдентификаторДокумента(Команда)
	
	Если ТипЗнч(Элементы.Список.ТекущиеДанные) = Тип("ДанныеФормыСтруктура") Тогда
		ПараметрыСообщения = Новый Структура;
		ПараметрыСообщения.Вставить("Заголовок", НСтр("ru = 'Идентификатор документа'"));
		ПараметрыСообщения.Вставить("Сообщение", Элементы.Список.ТекущиеДанные.Идентификатор);
		ПараметрыСообщения.Вставить("МногострочныйРежим", Ложь);
		
		ОткрытьФорму("ОбщаяФорма.ФормаСообщениеБРД", ПараметрыСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьИзображениеКНайденомуДокументу(Команда)
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыСтруктура") Тогда
			
			Если Не ТекущиеДанные.ЭтоЗаданиеРаспознавания Тогда 
				ПрикрепитьИзображение(ТекущиеДанные.Ссылка);
				ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьИзображение(Ссылка)
	
	ДокументОбъект = Ссылка.ПолучитьОбъект();
	АдресКартинки = ПоместитьВоВременноеХранилище(ДокументОбъект.ИсходноеИзображение.Получить());
	
	УстановитьПривилегированныйРежим(Истина);
	КандидатыВСвязанныеДокументы = РаспознаваниеДокументовСлужебный.НайтиПотенциальныеСвязаныеДокументы(ДокументОбъект);
	
	Для Каждого Кандидат Из КандидатыВСвязанныеДокументы Цикл
		РаспознаваниеДокументовСлужебный.ДобавитьПрисоединенныйФайл(ДокументОбъект, Кандидат.Ссылка, АдресКартинки);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	УдалитьИзВременногоХранилища(АдресКартинки);
	
	Если КандидатыВСвязанныеДокументы.Количество() > 0 Тогда 
		Документы.РаспознанныйДокумент.ОтметитьДокументОбработанным(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьОбработано(Команда)
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыСтруктура") Тогда
			ОтметитьОбработаноНаСервере(ТекущиеДанные.Ссылка);
			ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ПометитьНаУдалениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводКомплектовДокументов(Команда)
	
	Статусы = Новый Массив;
	Если Элементы.СписокФильтрСтатусНовые.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый"));
	КонецЕсли;
	Если Элементы.СписокФильтрСтатусОбработан.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан"));
	КонецЕсли;
	Если Элементы.СписокФильтрСтатусСОшибкой.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка"));
	КонецЕсли;
	Если Элементы.СписокФильтрСтатусУдаленные.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Удален"));
	КонецЕсли;
	
	ОтборИзСписка = Новый Структура;
	//ОтборИзСписка.Вставить("ПомеченныеНаУдаление", Элементы.СписокФильтрСтатусУдаленные.Пометка);
	ОтборИзСписка.Вставить("Статусы", Статусы);
	ОтборИзСписка.Вставить("ТекущаяДата", ТекущаяДата);
	ОтборИзСписка.Вставить("ТекущаяДатаПериод", ТекущаяДатаПериод);
	ОтборИзСписка.Вставить("ТекущаяОрганизация", ТекущаяОрганизация);
	ОтборИзСписка.Вставить("ТекущийКонтрагент", ТекущийКонтрагент);

КонецПроцедуры

&НаКлиенте
Процедура ГрупповаяОбработкаДокументов(Команда)
	
	Статусы = Новый Массив;
	Если Элементы.СписокФильтрСтатусНовые.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Новый"));
	КонецЕсли;
	Если Элементы.СписокФильтрСтатусОбработан.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан"));
	КонецЕсли;
	Если Элементы.СписокФильтрСтатусСОшибкой.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка"));
	КонецЕсли;
	Если Элементы.СписокФильтрСтатусУдаленные.Пометка Тогда
		Статусы.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСозданныхДокументовРаспознаваниеДокументов.Удален"));
	КонецЕсли;
	
	РаспознанныеДокументы = Новый Массив;
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого СтрокаСписка Из ВыделенныеСтроки Цикл 
			РаспознанныеДокументы.Добавить(Элементы.Список.ДанныеСтроки(СтрокаСписка).Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	ОтборИзСписка = Новый Структура;
	ОтборИзСписка.Вставить("Статусы", Статусы);
	ОтборИзСписка.Вставить("РаспознанныеДокументы", РаспознанныеДокументы);
	ОтборИзСписка.Вставить("ТекущаяДата", ТекущаяДата);
	ОтборИзСписка.Вставить("ТекущаяДатаПериод", ТекущаяДатаПериод);
	ОтборИзСписка.Вставить("ТекущаяОрганизация", ТекущаяОрганизация);
	ОтборИзСписка.Вставить("ТекущийКонтрагент", ТекущийКонтрагент);
	
	ПараметрыФормы = Новый Структура("ОтборИзСписка", ОтборИзСписка);
	ОткрытьФорму("Обработка.ГрупповаяОбработкаРаспознанныхДокументов.Форма.ГрупповаяОбработка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиСайт(Команда)
	
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
		РаспознаваниеДокументовСлужебныйКлиентСервер.АдресСведенияСайт()
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьАдресЭлПочты(Команда)
	
	Ошибка = Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлПочты);
	Если Ошибка Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		СохранитьАдресЭлПочтыНаСервере();
		
		ПараметрыВопроса = РаспознаваниеДокументовСлужебныйКлиент.ПараметрыВопросаПользователю();
		ПараметрыВопроса.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		ПараметрыВопроса.Картинка = БиблиотекаКартинок.УспешнаяОтправкаБРД;
		ПараметрыВопроса.Заголовок = НСтр("ru = 'Подписка оформлена'");
		
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьВопросПользователю(
			,
			НСтр("ru = 'Адрес электронной почты подписан на уведомления'"),
			РежимДиалогаВопрос.ОК,
			ПараметрыВопроса
		);
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредставлениеБаланса", 0.1, Истина);
	Исключение
		ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеОбработчикиСобытий

&НаКлиенте
Процедура ПослеПроверкиПодключенияКСервисуРаспознавания(Результат, Контекст) Экспорт
	
	НеВыполнятьОбновление = Ложь; // Разрешить загрузку
	ОтрисоватьПредставлениеБалансаНаКлиенте(Неопределено);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредставлениеБаланса", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 3, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриАктивизацииСтрокиДеревоСписок(ТекДанные, ПереключитьМиниатюры = Ложь)
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) Тогда
		ИдСтроки = ТекДанные.Ссылка;
		ДокументСсылка = ТекДанные.Ссылка;
	Иначе
		ИдСтроки = Неопределено;
		ДокументСсылка = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеДеревьев) Тогда
		ДанныеДеревьев = Новый Структура("ТекущаяСтрока, ИдентификаторДереваДокументов, СсылкаДереваДокументов");
	ИначеЕсли ДанныеДеревьев.ТекущаяСтрока = ИдСтроки Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеДеревьев.ТекущаяСтрока = ИдСтроки;
	ДанныеСтроки = Неопределено;
	
	Если ПоказыватьМиниатюры Или ПереключитьМиниатюры Тогда
		ДанныеДеревьев.Вставить("ПараметрыПриАктивизации", Новый Структура("ДанныеСтроки, ДокументСсылка, ПереключитьМиниатюры", ДанныеСтроки, ДокументСсылка, ПереключитьМиниатюры));
		ПодключитьОбработчикОжидания("Подключаемый_ПриАктивизацииСтроки", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриАктивизацииСтрокиНаСервере(ДанныеСтроки, ДокументСсылка, ПереключитьМиниатюры)
	
	Если ДокументСсылка = Неопределено Тогда
		Если ПоказыватьМиниатюры Тогда
			Элементы.ГруппаМиниатюры.Видимость = Ложь;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ПереключитьМиниатюры Тогда
		ПоказыватьМиниатюрыНаСервере();
	КонецЕсли;
	
	Если ДанныеСтроки = Неопределено Тогда
		ДанныеСтроки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "ИдентификаторЗадания,ТипДокумента");
	КонецЕсли;
	
	Если ПоказыватьМиниатюры Тогда
		ОбновитьКартинкиВПодвалеНаСервере(ДанныеСтроки.ИдентификаторЗадания, ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриАктивизацииСтроки()
	
	ПриАктивизацииСтрокиНаСервере(ДанныеДеревьев.ПараметрыПриАктивизации.ДанныеСтроки,
		ДанныеДеревьев.ПараметрыПриАктивизации.ДокументСсылка,
		ДанныеДеревьев.ПараметрыПриАктивизации.ПереключитьМиниатюры);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_АдресИзображенияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РеквизитМиниатюры = РеквизитыМиниатюр[Элемент.Имя];
	Если Не РаспознаваниеДокументовСлужебныйКлиент.ДоступенНеоплаченныйРаспознанныйДокумент(РеквизитМиниатюры.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = РеквизитМиниатюры.ИмяФайла + ".jpeg";
	ФайловаяСистемаКлиент.ОткрытьФайл(РеквизитМиниатюры.Местоположение,, ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеДобавленияФайлов(КоличествоДобавленныхФайлов, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьПериодыДляОтборов();
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПоказаПредупреждания(Результат, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПодключенияТестовогоПериода(Результат, Контекст) Экспорт
	
	Если Результат = ПредопределенноеЗначение("Перечисление.СостоянияПодключенияСервисов.Подключен") Тогда
		Элементы.ПодключитьТестовыйПериод.Видимость = Ложь;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредставлениеБаланса", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Представления

&НаСервере
Процедура ОбновитьКартинкиВПодвалеНаСервере(ИдентификаторЗадания, ДокументСсылка)
	
	Элементы.ГруппаМиниатюры.Видимость = Истина;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторЗадания", ИдентификаторЗадания);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаспознанныйДокумент.Ссылка КАК Ссылка,
	|	РаспознанныйДокумент.Миниатюра КАК Миниатюра,
	|	РаспознанныйДокумент.ИсходноеИзображение КАК ИсходноеИзображение,
	|	РаспознанныйДокумент.ИмяФайла КАК ИмяФайла
	|ИЗ
	|	Документ.РаспознанныйДокумент КАК РаспознанныйДокумент
	|ГДЕ
	|	РаспознанныйДокумент.ИдентификаторЗадания = &ИдентификаторЗадания
	|	И РаспознанныйДокумент.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	РаспознанныйДокумент.Дата
	|";
	
	Если ДокументСсылка = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И РаспознанныйДокумент.Ссылка = &Ссылка", "");
	Иначе
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоИзображений = Выборка.Количество();
	
	мДобавляемыхРеквизитов = Новый Массив;
	ИдИзображения = ДобавленоРеквизитов;
	Пока ИдИзображения < КоличествоИзображений Цикл
		ИмяРеквизита = "АдресИзображения" + ИдИзображения;
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"));
		мДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		ИдИзображения = ИдИзображения + 1;
	КонецЦикла;
	ИзменитьРеквизиты(мДобавляемыхРеквизитов);
	
	ШиринаФормы = 300;
	ШиринаПоляКартинки = 20;
	КоличествоПолейВГруппе = Цел(ШиринаФормы/(ШиринаПоляКартинки*10 + 10));
	Если КоличествоПолейВГруппе = 0 Тогда 
		КоличествоПолейВГруппе = 1;
	КонецЕсли;
	Пока ДобавленоРеквизитов < КоличествоИзображений Цикл
		НомерГруппыДобавления = Цел((ДобавленоРеквизитов)/КоличествоПолейВГруппе);
		
		ИмяГруппыСтроки = "ГруппаМиниатюры" + НомерГруппыДобавления;
		Если Элементы.Найти(ИмяГруппыСтроки) = Неопределено Тогда
			НовыйЭлемент = Элементы.Вставить(ИмяГруппыСтроки, Тип("ГруппаФормы"), Элементы.ГруппаМиниатюры);
			НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
			НовыйЭлемент.ОтображатьЗаголовок = Ложь;
			НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			НовыйЭлемент.Высота = 10;
			НовыйЭлемент.РастягиватьПоВертикали = Ложь;
		КонецЕсли;
		
		ИмяГруппы = "ГруппаАдресИзображения"+ДобавленоРеквизитов;
		НовыйЭлемент = Элементы.Вставить(ИмяГруппы, Тип("ГруппаФормы"), Элементы[ИмяГруппыСтроки]);
		НовыйЭлемент.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлемент.Отображение = ОтображениеОбычнойГруппы.Нет;
		НовыйЭлемент.ОтображатьЗаголовок = Ложь;
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		ИмяРеквизита = "АдресИзображения"+ДобавленоРеквизитов;
		НовыйЭлемент = Элементы.Вставить(ИмяРеквизита, Тип("ПолеФормы"), Элементы[ИмяГруппы]);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеКартинки;
		НовыйЭлемент.ПутьКДанным = ИмяРеквизита;
		НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		НовыйЭлемент.РазмерКартинки = РазмерКартинки.Пропорционально;
		НовыйЭлемент.Ширина = ШиринаПоляКартинки;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Гиперссылка = Истина;
		НовыйЭлемент.УстановитьДействие("Нажатие", "Подключаемый_АдресИзображенияНажатие");
		
		НовыйЭлемент = Элементы.Вставить("ДекорацияИмяФайла"+ДобавленоРеквизитов, Тип("ДекорацияФормы"), Элементы[ИмяГруппы]);
		НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
		НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
		НовыйЭлемент.МаксимальнаяШирина = ШиринаПоляКартинки;
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		ДобавленоРеквизитов = ДобавленоРеквизитов + 1;
	КонецЦикла;
	
	ИдИзображения = 0;
	РеквизитыМиниатюр = Новый Структура;
	мДобавляемыхРеквизитов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Если РаспознаваниеДокументовСлужебныйВызовСервера.ДоступенНеоплаченныйРаспознанныйДокумент(Выборка.Ссылка) Тогда
			Миниатюра = Выборка.Миниатюра.Получить();
		Иначе
			Миниатюра = БиблиотекаКартинок.ОтсутствуетИзображениеРаспознанногоДокумента.ПолучитьДвоичныеДанные();
		КонецЕсли;
		
		Если Миниатюра = Неопределено Тогда
			Миниатюра = Выборка.ИсходноеИзображение.Получить();
			Если Миниатюра = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяРеквизита = "АдресИзображения" + ИдИзображения;
		
		ЭтотОбъект[ИмяРеквизита] = ПоместитьВоВременноеХранилище(Миниатюра, УникальныйИдентификатор);
		Элементы["Группа" + ИмяРеквизита].Видимость = Истина;
		Элементы["ДекорацияИмяФайла" + ИдИзображения].Заголовок = Выборка.ИмяФайла;
		
		ИдИзображения = ИдИзображения + 1;
		
		ИсходноеИзображение = Выборка.ИсходноеИзображение.Получить();
		Местоположение = ПоместитьВоВременноеХранилище(ИсходноеИзображение, УникальныйИдентификатор);
		
		РеквизитМиниатюры = Новый Структура;
		РеквизитМиниатюры.Вставить("Ссылка", Выборка.Ссылка);
		РеквизитМиниатюры.Вставить("ИмяФайла", Выборка.ИмяФайла);
		РеквизитМиниатюры.Вставить("Местоположение", Местоположение);
		
		РеквизитыМиниатюр.Вставить(ИмяРеквизита, РеквизитМиниатюры);
	КонецЦикла;
	
	Пока ИдИзображения < ДобавленоРеквизитов Цикл
		ИмяРеквизита = "ГруппаАдресИзображения" + ИдИзображения;
		Элементы[ИмяРеквизита].Видимость = Ложь;
		ИдИзображения = ИдИзображения + 1;
	КонецЦикла;
	
	Элементы.ДекорацияНетИзображений.Видимость = (КоличествоИзображений = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеКнопкиСтатистики(Фильтр, Кнопка)
	
	ВключитьФильтр = НЕ Кнопка.Пометка;
	Кнопка.Пометка = ВключитьФильтр; 
	Если Кнопка.Пометка Тогда
		Кнопка.ЦветФона = WebЦвета.АкварельноСиний;
	Иначе
		Кнопка.ЦветФона =  Новый Цвет();
	КонецЕсли;
	
	ИзменитьОтборПоСтатусу(Фильтр, ВключитьФильтр);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтборПоСтатусу(Фильтр, ВключитьФильтр)
	
	ЭлементОтбора = Список.Отбор.ПолучитьОбъектПоИдентификатору(ИдентификаторФильтраПоСтатусам);
	
	СписокОтбора = ЭлементОтбора.ПравоеЗначение;
	Если ВключитьФильтр Тогда
		СписокОтбора.Добавить(Фильтр);
	Иначе
		НайденныйЭлемент = СписокОтбора.НайтиПоЗначению(Фильтр);
		Если НайденныйЭлемент <> Неопределено Тогда
			СписокОтбора.Удалить(СписокОтбора.НайтиПоЗначению(Фильтр));
		КонецЕсли;
	КонецЕсли;
	
	ЭлементОтбора.Использование = СписокОтбора.Количество();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТекстПодсказки(ВключитьФильтр, ИмяКоманды)
	
	Команда = Команды.Найти(ИмяКоманды);
	ТекстПодсказки = Команда.Подсказка;
	
	Если ВключитьФильтр Тогда
		ТекстПодсказки = СтрЗаменить(ТекстПодсказки, НСтр("ru = 'Показать'"), НСтр("ru = 'Скрыть'"));
	Иначе
		ТекстПодсказки = СтрЗаменить(ТекстПодсказки, НСтр("ru = 'Скрыть'"), НСтр("ru = 'Показать'"));
	КонецЕсли;
	
	Команда.Подсказка = ТекстПодсказки;
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьМиниатюрыНаСервере()
	
	Элементы.ГруппаМиниатюры.Видимость = ПоказыватьМиниатюры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДобавления()
	
	Обработчик = Новый ОписаниеОповещения("ПослеДобавленияФайлов", ЭтотОбъект);
	РаспознаваниеДокументовКлиент.ПоказатьДобавлениеФайлов(УникальныйИдентификатор, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСписок()
	
	Элементы.Список.Обновить();
	
	СостоянияПоСтатусам = СостоянияПоСтатусам();
	
	Элементы.СписокФильтрСтатусВОбработке.Заголовок = СтрШаблон(НСтр("ru = 'На распознавании: %1'"), СостоянияПоСтатусам.ФайловКОбработке);
	Элементы.СписокФильтрСтатусНовые.Заголовок = СтрШаблон(НСтр("ru = 'Распознанные: %1'"), СостоянияПоСтатусам.ФайловНовых);
	Элементы.СписокФильтрСтатусСОшибкой.Заголовок = СтрШаблон(НСтр("ru = 'С ошибкой: %1'"), СостоянияПоСтатусам.ФайловСОшибкой);
	Элементы.СписокФильтрСтатусОбработан.Заголовок = СтрШаблон(НСтр("ru = 'Созданные: %1'"), СостоянияПоСтатусам.ДокументовОбработано);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьПредставлениеБаланса()
	
	ДлительнаяОперация = НачатьПолучениеСостояниеБаланса(УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		Элементы.СписокПроверитьЗаданияИЗагрузить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияСостоянияБаланса", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьПолучениеСостояниеБаланса(УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение состояния по балансу в фоне'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	Возврат ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполнения, "РаспознаваниеДокументов.СостоянияПоБалансу");
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияСостоянияБаланса(ДлительнаяОперация, Контекст) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		Элементы.СписокПроверитьЗаданияИЗагрузить.Картинка = БиблиотекаКартинок.Обновить;
		
		СостоянияПоБалансу = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		ОтрисоватьПредставлениеБалансаНаКлиенте(СостоянияПоБалансу);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтрисоватьПредставлениеБалансаНаКлиенте(СостоянияПоБалансу)
	
	// Расчет состояний в фоновом задании.
	// Вызывавется РаспознаваниеДокументов.СостоянияПоБалансу()
	
	Если СостоянияПоБалансу = Неопределено Тогда
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		БалансЗаголовок = НСтр("ru='Проверка статуса подключения'");
		ПоказатьСтраницуБиллинга(Элементы.СтраницаПроверкаСтатусаПодключения);
		
		Возврат;
	КонецЕсли;
	
	Если ОригинальныеТекстыСообщений = Неопределено Тогда
		
		// Инициализация кэша текстов оригинальных сообщений.
		// Требуется чтобы при выполнении следующего цикла
		// можно было использовать оригинальной текст как шаблон
		// в котором заполнять параметры.
		
		ОригинальныеТекстыСообщений = Новый Соответствие;
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаПилотныйРежимДатаОкончания.Имя,
			Элементы.ТекстСтраницаПилотныйРежимДатаОкончания.Заголовок
		);
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаПилотныйРежимДатаОкончанияНаступила.Имя,
			Элементы.ТекстСтраницаПилотныйРежимДатаОкончанияНаступила.Заголовок
		);
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаБалансНулевой.Имя,
			Элементы.ТекстСтраницаБалансНулевой.Заголовок
		);
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаБалансПоложительный.Имя,
			Элементы.ТекстСтраницаБалансПоложительный.Заголовок
		);
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаБалансПоложительныйДатаОкончания.Имя,
			Элементы.ТекстСтраницаБалансПоложительныйДатаОкончания.Заголовок
		);
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаБалансОтрицательный.Имя,
			Элементы.ТекстСтраницаБалансОтрицательный.Заголовок
		);
		ОригинальныеТекстыСообщений.Вставить(
			Элементы.ТекстСтраницаСервисОтключен.Имя,
			Элементы.ТекстСтраницаСервисОтключен.Заголовок
		);
		
	КонецЕсли;
	
	Элементы.ГруппаБиллинг.ЦветФона = Новый Цвет; // цвет по-умолчанию
	Элементы.ГруппаБиллингПодробно.ЦветТекстаЗаголовка = WebЦвета.Зеленый; // цвет по-умолчанию
	
	Если СостоянияПоБалансу.СостояниеБаланса = "Ошибка" Тогда
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ГруппаБиллингПодробно.ЦветТекстаЗаголовка = WebЦвета.Красный;
		БалансЗаголовок = НСтр("ru='Проверка не удалась'");
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаОшибка);
		
		Возврат;
	КонецЕсли;
	
	Если СостоянияПоБалансу.СостояниеБаланса = "НеПоказыватьБаланс" Тогда
		Элементы.ГруппаБиллинг.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Если СостоянияПоБалансу.СостояниеБаланса = "НеАвторизован" Тогда
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		БалансЗаголовок = НСтр("ru = 'Подключить сервис'");
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаНеАвторизован);
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "НеАктивирован" Тогда
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.ПолучениеНовостейВручную;
		БалансЗаголовок = НСтр("ru = 'Заявка отправлена'");
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаНеАктивирован);
		АдресЭлПочты = СостоянияПоБалансу.АдресЭлПочты;
		
		Если Не ПустаяСтрока(АдресЭлПочты) Тогда
			
			ПараметрыЗамены = Новый Структура;
			ПараметрыЗамены.Вставить("АдресЭлПочты", СостоянияПоБалансу.АдресЭлПочты);
			
			Элементы.ТекстОжиданиеАктивации.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
				НСтр("ru = 'Заявка на подключение сервиса распознавания документов отправлена
				           |и будет обработана в ближайшее время.
				           |
				           |На адрес [АдресЭлПочты] мы отправим уведомление по факту подключения.'"),
				ПараметрыЗамены
			);
			Элементы.АдресЭлПочты.Заголовок = НСтр("ru = 'Вы можете заменить e-mail для уведомления'");
			Элементы.СохранитьАдресЭлПочты.Заголовок = НСтр("ru = 'Заменить'");
		КонецЕсли;
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "ПилотныйРежим" Тогда
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Информация;
		БалансЗаголовок = НСтр("ru = 'Пилотный режим'");
		ПоказатьСтраницуБиллинга(Элементы.СтраницаПилотныйРежим);
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "ПилотныйРежимДатаОкончания" Тогда
		
		Элементы.ГруппаБиллинг.ЦветФона = СтандартныеПодсистемыКлиент.ЭлементыСтиля()["ЦветФонаПредупрежденияБРД"];
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("ДатаОкончания", Формат(СостоянияПоБалансу.ДатаОкончания, "ДЛФ=D"));
		ПараметрыЗамены.Вставить("ДатаОкончанияПрописью", Формат(СостоянияПоБалансу.ДатаОкончания, "ДЛФ=DD"));
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ГруппаБиллингПодробно.ЦветТекстаЗаголовка = WebЦвета.Красный;
		БалансЗаголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Пилотный режим до [ДатаОкончания]'"),
			ПараметрыЗамены
		);
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаПилотныйРежимДатаОкончания);
		Элементы.ТекстСтраницаПилотныйРежимДатаОкончания.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаПилотныйРежимДатаОкончания.Имя],
				ПараметрыЗамены
			);
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "ПилотныйРежимДатаОкончанияНаступила" Тогда
		
		Элементы.ГруппаБиллинг.ЦветФона = СтандартныеПодсистемыКлиент.ЭлементыСтиля()["ЦветФонаПредупрежденияБРД"];
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("ДатаОкончания", Формат(СостоянияПоБалансу.ДатаОкончания, "ДЛФ=D"));
		ПараметрыЗамены.Вставить("ДатаОкончанияПрописью", Формат(СостоянияПоБалансу.ДатаОкончания, "ДЛФ=DD"));
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ГруппаБиллингПодробно.ЦветТекстаЗаголовка = WebЦвета.Красный;
		БалансЗаголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Пилотный режим до [ДатаОкончания]'"),
			ПараметрыЗамены
		);
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаПилотныйРежимДатаОкончанияНаступила);
		Элементы.ТекстСтраницаПилотныйРежимДатаОкончанияНаступила.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаПилотныйРежимДатаОкончанияНаступила.Имя],
				ПараметрыЗамены
			);
			
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "БалансНулевой" Тогда
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("БалансПрописью", ПредставлениеБаланса(СостоянияПоБалансу.Баланс));
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		БалансЗаголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Баланс: [БалансПрописью]'"),
			ПараметрыЗамены
		);
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаБалансНулевой);
		Элементы.ТекстСтраницаБалансНулевой.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаБалансНулевой.Имя],
				ПараметрыЗамены
			);
		
		Элементы.ПодключитьТестовыйПериод.Видимость = СостоянияПоБалансу.ПодключениеТестовогоПериодаДоступно;
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "БалансПоложительный" Тогда
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("БалансПрописью", ПредставлениеБаланса(СостоянияПоБалансу.Баланс));
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Информация;
		БалансЗаголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Баланс: [БалансПрописью]'"),
			ПараметрыЗамены
		);
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаБалансПоложительный);
		Элементы.ТекстСтраницаБалансПоложительный.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаБалансПоложительный.Имя],
				ПараметрыЗамены
			);
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "БалансПоложительныйДатаОкончания" Тогда
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("БалансПрописью", ПредставлениеБаланса(СостоянияПоБалансу.Баланс));
		ПараметрыЗамены.Вставить("ДатаОкончанияПрописью", Формат(СостоянияПоБалансу.ДатаОкончания, "ДЛФ=DD"));
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Информация;
		БалансЗаголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Баланс: [БалансПрописью]'"),
			ПараметрыЗамены
		);
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаБалансПоложительныйДатаОкончания);
		Элементы.ТекстСтраницаБалансПоложительныйДатаОкончания.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаБалансПоложительныйДатаОкончания.Имя],
				ПараметрыЗамены
			);
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "БалансОтрицательный" Тогда
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("КредитПрописью", ПредставлениеБаланса(СостоянияПоБалансу.Кредит));
		ПараметрыЗамены.Вставить("КредитПрописьюРодительный", ПредставлениеБаланса(СостоянияПоБалансу.Кредит, "Родительный"));
		ПараметрыЗамены.Вставить("ДатаОкончанияПрописью", Формат(СостоянияПоБалансу.ДатаОкончания, "ДЛФ=DD"));
		ПараметрыЗамены.Вставить("ИспользованоПрописью", ПредставлениеБаланса(СостоянияПоБалансу.Использовано));
		ПараметрыЗамены.Вставить("Использовано", СостоянияПоБалансу.Использовано);
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ГруппаБиллингПодробно.ЦветТекстаЗаголовка = WebЦвета.Красный;
		БалансЗаголовок = РаспознаваниеДокументовСлужебныйКлиентСервер.ВставитьПараметрыВСтроку(
			НСтр("ru = 'Кредит: использовано [Использовано] из [КредитПрописьюРодительный]'"),
			ПараметрыЗамены
		);
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаБалансОтрицательный);
		Элементы.ТекстСтраницаБалансОтрицательный.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаБалансОтрицательный.Имя],
				ПараметрыЗамены
			);
		
	ИначеЕсли СостоянияПоБалансу.СостояниеБаланса = "СервисОтключен" Тогда
		
		ПараметрыЗамены = Новый Структура;
		ПараметрыЗамены.Вставить("ИспользованоПрописью", ПредставлениеБаланса(СостоянияПоБалансу.Использовано));
		
		Элементы.Биллинг.Картинка = БиблиотекаКартинок.Предупреждение;
		Элементы.ГруппаБиллингПодробно.ЦветТекстаЗаголовка = WebЦвета.Красный;
		БалансЗаголовок = НСтр("ru = 'Сервис отключен'");
		
		ПоказатьСтраницуБиллинга(Элементы.СтраницаСервисОтключен);
		Элементы.ТекстСтраницаСервисОтключен.Заголовок = РаспознаваниеДокументовСлужебныйКлиентСервер
			.ВставитьПараметрыВСтроку(
				ОригинальныеТекстыСообщений[Элементы.ТекстСтраницаСервисОтключен.Имя],
				ПараметрыЗамены
			);
			
	КонецЕсли;
	
	Если СостоянияПоБалансу.ПоказатьТребованиеВключитьИТС Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеПоказаПредупреждания", ЭтотОбъект);
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьТребованиеВключитьИТС(Обработчик);
	КонецЕсли;
	
	Если СостоянияПоБалансу.ПоказатьПредупреждениеНулевойБаланс Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеПоказаПредупреждания", ЭтотОбъект);
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьПредупреждениеНулевойБаланс(Обработчик, СостоянияПоБалансу.ДатаОкончания);
	КонецЕсли;
	
	Если СостоянияПоБалансу.ПоказатьПредупреждениеСервисОтключен Тогда
		Обработчик = Новый ОписаниеОповещения("ПослеПоказаПредупреждания", ЭтотОбъект);
		РаспознаваниеДокументовСлужебныйКлиент.ПоказатьПредупреждениеСервисОтключен(Обработчик);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтраницуБиллинга(СтраницаКПоказу)
	
	Для Каждого СтраницаГруппы Из Элементы.ГруппаСостоянияБиллинга.ПодчиненныеЭлементы Цикл
		СтраницаГруппы.Видимость = (СтраницаГруппы = СтраницаКПоказу);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеБаланса(Знач Баланс, Знач Падеж = "Именительный")
	
	Если Баланс = 0 Тогда
		Возврат НСтр("ru = '0 страниц'");
	КонецЕсли;
	
	Баланс = ?(Баланс > 0, Баланс, -Баланс); // По модулю
	
	Если Падеж = "Именительный" Тогда
		
		Возврат СтрокаСЧислом(
			НСтр("ru=';
			         |%1 страница;
			         |;
			         |%1 страницы;
			         |%1 страниц;
			         |%1 страницы'"),
			Баланс,
			ВидЧисловогоЗначения.Количественное,
			"Л=ru"
		);
		
		
	ИначеЕсли Падеж = "Родительный" Тогда
		
		Возврат СтрокаСЧислом(
			НСтр("ru=';
			         |%1 страницы;
			         |;
			         |%1 страниц;
			         |%1 страниц;
			         |%1 страниц'"),
			Баланс,
			ВидЧисловогоЗначения.Количественное,
			"Л=ru"
		);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область БизнесЛогика

&НаСервереБезКонтекста
Функция ПолучитьОбщиеНастройки()
	Возврат РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.ТекущиеНастройки();
КонецФункции

&НаСервереБезКонтекста
Процедура ОтметитьОбработаноНаСервере(ДокументСсылка)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РаспознанныйДокумент");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		Блокировка.Заблокировать();
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		Если ДокументОбъект.ПометкаУдаления Тогда 
			ВызватьИсключение НСтр("ru = 'Невозможно отправить в обработанные помеченный на удаление документ.'");
		КонецЕсли;
		
		ДокументОбъект.Заблокировать();
		ДокументОбъект.Статус = Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Обработан;
		ДокументОбъект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Замер производительности
	РезультатОбратнойСвязи = РаспознаваниеДокументов.ОписаниеОбратнойСвязи("Проигнорировано");
	Пакет = Новый Структура("created", РезультатОбратнойСвязи);
	РаспознаваниеДокументовКоннекторСлужебный.ПередатьОбратнуюСвязь(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ИдентификаторРезультата"),
		Пакет);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СостоянияПоСтатусам()
	
	Возврат РаспознаваниеДокументов.СостоянияПоСтатусам();
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_Периодический_ЗагрузитьРаспознанныеДокументы()
	
	// Этот метод обертка нужен длятого чтобы периодический вызов работал независимо всегда
	// и для него не сбрасывался таймер запуска при попытке запуска принудительно 1 раз.
	
	Подключаемый_ЗагрузитьРаспознанныеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьРаспознанныеДокументы()
	
	Если НеВыполнятьОбновление() Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРаспознанныеДокументыНаСервере();
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьПредставлениеБаланса", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция НеВыполнятьОбновление()
	
	ПоказанаСтраницаВводаПочты = Не Элементы.ГруппаБиллингПодробно.Скрыта()
		И Элементы.СтраницаНеАктивирован.Видимость;
	
	Возврат ПоказанаСтраницаВводаПочты Или НеВыполнятьОбновление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗагрузитьРаспознанныеДокументыНаСервере()
	
	Возврат РаспознаваниеДокументовСлужебный.ЗагрузкаРаспознанныхДокументов();
	
КонецФункции

#Область Отборы

&НаКлиенте
Функция ПолучитьПараметрыОтбораСозданныхДокументов1С()
	
	Если НЕ ПоказыватьСозданныеДокументы1С Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВариантОтбора = 0 Тогда
		ДанныеСтроки = Элементы.ОтборПериодДерево.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Результат = Неопределено;
		Иначе
			Результат = Новый Структура("НачалоПериода, ПериодДень", ДанныеСтроки.День, (ДанныеСтроки.Вложенность = 1));
		КонецЕсли;
	ИначеЕсли ВариантОтбора = 1 Тогда
		ДанныеСтроки = Элементы.ОтборКонтрагент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Результат = ДанныеСтроки.Контрагент;
		КонецЕсли;
	ИначеЕсли ВариантОтбора = 2 Тогда
		ДанныеСтроки = Элементы.ОтборОрганизация.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Результат = ДанныеСтроки.Организация;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ВариантОтбораПриИзмененииНаСервере()
	
	Элементы.ГруппаОтборПериод.Видимость = (ВариантОтбора = 0);
	Элементы.ГруппаОтборКонтрагент.Видимость = (ВариантОтбора = 1);
	Элементы.ГруппаОтборОрганизация.Видимость = (ВариантОтбора = 2);
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ЭлементыОтбора[0].Использование = (ВариантОтбора = 0);
	ЭлементыОтбора[1].Использование = (ВариантОтбора = 0);
	ЭлементыОтбора[2].Использование = (ВариантОтбора = 1);
	ЭлементыОтбора[3].Использование = (ВариантОтбора = 2);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПериодыДляОтборов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ.День КАК День,
		|	ВТ.Месяц КАК Месяц,
		|	1 КАК Вложенность
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Т1.ДатаЗагрузки, СЕКУНДА, &ПоправкаВремени), ДЕНЬ) КАК День,
		|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Т1.ДатаЗагрузки, СЕКУНДА, &ПоправкаВремени), МЕСЯЦ) КАК Месяц
		|	ИЗ
		|		РегистрСведений.ИсходныеДанныеЗаданийРаспознаваниеДокументов КАК Т1
		|	ГДЕ
		|		Т1.ДатаЗагрузки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Т2.Дата, СЕКУНДА, &ПоправкаВремени), ДЕНЬ),
		|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(Т2.Дата, СЕКУНДА, &ПоправкаВремени), МЕСЯЦ)
		|	ИЗ
		|		Документ.РаспознанныйДокумент КАК Т2
		|	ГДЕ
		|		Т2.Дата <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ВТ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ.День УБЫВ
		|ИТОГИ
		|	МИНИМУМ(НАЧАЛОПЕРИОДА(ВТ.День, МЕСЯЦ)) КАК День
		|ПО
		|	Месяц";
	
	Запрос.УстановитьПараметр("ПоправкаВремени", ПоправкаКУниверсальномуВремени);
	
	ДеревоПериодов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	СтрокаЛюбаяДата = ДеревоПериодов.Строки.Вставить(0);
	СтрокаЛюбаяДата.День = '00010101';
	СтрокаЛюбаяДата.Месяц = '00010101';
	СтрокаЛюбаяДата.Вложенность = -1;
	
	ЗначениеВРеквизитФормы(ДеревоПериодов, "ОтборПериодДерево");
	Элементы.ОтборПериодДерево.ТекущаяСтрока = 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОтборПоПериоду(НачалоПериода, ПериодДень)
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		// За все время
		КонецПериода = '30010101';
	ИначеЕсли ПериодДень Тогда
		КонецПериода = КонецДня(НачалоПериода);
	Иначе
		КонецПериода = КонецМесяца(НачалоПериода);
	КонецЕсли;
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	ЭлементыОтбора[0].ПравоеЗначение = НачалоПериода;
	ЭлементыОтбора[1].ПравоеЗначение = КонецПериода;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьАдресЭлПочтыНаСервере()
	
	РаспознаваниеДокументовSDK.УстановитьАдресЭлектроннойПочты(АдресЭлПочты);
	
	МенеджерЗаписи = РегистрыСведений.ОбщиеНастройкиРаспознаваниеДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Прочитать();
	МенеджерЗаписи.АдресЭлПочты = АдресЭлПочты;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревом

#Область ДеревоДокументыИФайлы

&НаСервере
Процедура ОбновитьДеревоДокументовИФайловВсеНаСервере(ПараметрыОтбора)
	
	Если НЕ ПоказыватьСозданныеДокументы1С ИЛИ ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(СвязанныеОбъектыРаспознаниеДокументов.РаспознанныйДокумент.Дата) КАК ДатаРаспознанного,
	|	СвязанныеОбъектыРаспознаниеДокументов.СсылкаНаОбъект КАК Ссылка,
	|	СвязанныеОбъектыРаспознаниеДокументов.СсылкаНаОбъект.Представление КАК Наименование
	|ИЗ
	|	РегистрСведений.СвязанныеОбъектыРаспознаниеДокументов КАК СвязанныеОбъектыРаспознаниеДокументов
	|ГДЕ
	|	СвязанныеОбъектыРаспознаниеДокументов.РаспознанныйДокумент.Дата >= &НачалоПериода
	|	И СвязанныеОбъектыРаспознаниеДокументов.РаспознанныйДокумент.Дата <= &КонецПериода
	|	И СвязанныеОбъектыРаспознаниеДокументов.РаспознанныйДокумент.Контрагент = &Контрагент
	|	И СвязанныеОбъектыРаспознаниеДокументов.РаспознанныйДокумент.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеОбъектыРаспознаниеДокументов.СсылкаНаОбъект,
	|	СвязанныеОбъектыРаспознаниеДокументов.СсылкаНаОбъект.Представление
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРаспознанного УБЫВ,
	|	СвязанныеОбъектыРаспознаниеДокументов.СсылкаНаОбъект.Представление";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	ВсеОтборы = СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Отбор;
	
	Запрос = Новый Запрос;
	Если ВариантОтбора = 0 Тогда
		ВсеОтборы.Удалить(3);
		ВсеОтборы.Удалить(2);
		
		НачалоПериода = ПараметрыОтбора.НачалоПериода;
		Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
			// За все время
			КонецПериода = '30010101';
		ИначеЕсли ПараметрыОтбора.ПериодДень Тогда
			КонецПериода = КонецДня(НачалоПериода);
		Иначе
			КонецПериода = КонецМесяца(НачалоПериода);
		КонецЕсли;
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	ИначеЕсли ВариантОтбора = 1 Тогда
		ВсеОтборы.Удалить(3);
		ВсеОтборы.Удалить(1);
		ВсеОтборы.Удалить(0);
		
		Запрос.УстановитьПараметр("Контрагент", ПараметрыОтбора);
	ИначеЕсли ВариантОтбора = 2 Тогда
		ВсеОтборы.Удалить(2);
		ВсеОтборы.Удалить(1);
		ВсеОтборы.Удалить(0);
		
		Запрос.УстановитьПараметр("Организация", ПараметрыОтбора);
	КонецЕсли;
	
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
	Иначе
		МодульРаботаСФайлами = Неопределено;
	КонецЕсли;
	
	ТекДерево = РеквизитФормыВЗначение("ДеревоДокументыИФайлы");
	ТекДерево.Строки.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если УправлениеДоступом.ЧтениеРазрешено(Выборка.Ссылка) Тогда  
			СтрДерева = ТекДерево.Строки.Добавить(); 
		Иначе
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрДерева, Выборка);
		Если МодульРаботаСФайлами <> Неопределено Тогда
			ВложенныеФайлы = Новый Массив;
			МодульРаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(Выборка.Ссылка, ВложенныеФайлы);
			Для Каждого ВложенныйФайл Из ВложенныеФайлы Цикл
				РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВложенныйФайл, "Наименование,Расширение");
				СтрДерева2 = СтрДерева.Строки.Добавить();
				СтрДерева2.Ссылка = ВложенныйФайл;
				СтрДерева2.Наименование = РеквизитыФайла.Наименование+"."+РеквизитыФайла.Расширение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТекДерево, "ДеревоДокументыИФайлы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДокументыИФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если Строка <> Неопределено И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") И
		ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		
		СтрокаДерева = ДеревоДокументыИФайлы.НайтиПоИдентификатору(Строка);
		Если СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
			МассивСсылок = Новый Массив;
			Для Каждого ТекущееЗначение Из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
					МассивСсылок.Добавить(ТекущееЗначение);
				ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Число") Тогда
					ТекущиеДанныеСтроки = Элементы.Список.ДанныеСтроки(ТекущееЗначение);
					Если ЗначениеЗаполнено(ТекущиеДанныеСтроки.Ссылка) Тогда
						МассивСсылок.Добавить(ТекущиеДанныеСтроки.Ссылка);
					Иначе
						Возврат;
					КонецЕсли;
				Иначе
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			СтандартнаяОбработка = Не РазрешеноПеретаскивание(МассивСсылок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазрешеноПеретаскивание(МассивСсылок)
	
	Для Каждого ДокументСсылка Из МассивСсылок Цикл
		Если ЗначениеЗаполнено(ДокументСсылка)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Статус")
				= Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка Тогда
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ДеревоДокументыИФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МассивСсылок = Новый Массив;
	Для Каждого ТекущееЗначение Из ПараметрыПеретаскивания.Значение Цикл
		Если ТипЗнч(ТекущееЗначение) = Тип("ДокументСсылка.РаспознанныйДокумент") Тогда
			МассивСсылок.Добавить(ТекущееЗначение);
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("Число") Тогда
			ТекущиеДанныеСтроки = Элементы.Список.ДанныеСтроки(ТекущееЗначение);
			Если ЗначениеЗаполнено(ТекущиеДанныеСтроки.Ссылка) Тогда
				МассивСсылок.Добавить(ТекущиеДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтрокаДерева = ДеревоДокументыИФайлы.НайтиПоИдентификатору(Строка);
	
	ИменаФайлов = Новый Массив;
	СтрокиВложений = СтрокаДерева.ПолучитьЭлементы();
	Для Каждого СтрокаВложений Из СтрокиВложений Цикл
		ИменаФайлов.Добавить(СтрокаВложений.Наименование);
	КонецЦикла;
	
	ПараметрыОтбораСозданныхДокументов1С = ПолучитьПараметрыОтбораСозданныхДокументов1С();
	ДанныеДляПрикрепленияФайла = Новый Структура(
		"МассивСсылок, ИменаФайлов, КудаДобавляемСсылка, ПараметрыОтбораСозданныхДокументов1С",
		МассивСсылок,
		ИменаФайлов,
		СтрокаДерева.Ссылка,
		ПараметрыОтбораСозданныхДокументов1С
	);
	ПодключитьОбработчикОжидания("Подключаемый_ДобавитьИсходноеИзображениеНаСервере", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДобавитьИсходноеИзображениеНаСервере() Экспорт
	
	ДобавитьИсходноеИзображениеНаСервере(ДанныеДляПрикрепленияФайла.МассивСсылок, ДанныеДляПрикрепленияФайла.ИменаФайлов,
		ДанныеДляПрикрепленияФайла.КудаДобавляемСсылка, ДанныеДляПрикрепленияФайла.ПараметрыОтбораСозданныхДокументов1С);
	ПодключитьОбработчикОжидания("Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсходноеИзображениеНаСервере(МассивСсылок, ИменаФайлов, КудаДобавляемСсылка, ПараметрыОтбораСозданныхДокументов1С)
	
	ОставитьТолькоДопустимыеСсылки(МассивСсылок);
	Для Каждого РаспознанныйДокумент Из МассивСсылок Цикл
		
		РаспознаваниеДокументовСлужебный.ПрикрепитьИсходныеФайлы(РаспознанныйДокумент, КудаДобавляемСсылка);
		
	КонецЦикла;
	ОбновитьДеревоДокументовИФайловВсеНаСервере(ПараметрыОтбораСозданныхДокументов1С);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОставитьТолькоДопустимыеСсылки(МассивСсылок)
	
	Ид = МассивСсылок.Количество();
	Пока Ид > 0 Цикл
		Ид = Ид - 1;
		Если Не ЗначениеЗаполнено(МассивСсылок[Ид])
			Или ОбщегоНазначения.ЗначениеРеквизитаОбъекта(МассивСсылок[Ид], "Статус")
			<> Перечисления.СтатусыСозданныхДокументовРаспознаваниеДокументов.Ошибка Тогда
 			
			МассивСсылок.Удалить(Ид);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_РазвернутьСтрокиДереваДокументыИФайлы()
	
	Если Не Элементы.ГруппаДеревоПраво.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	ВсеСтрокиДерева = ЭтотОбъект.ДеревоДокументыИФайлы.ПолучитьЭлементы();
	Для Каждого СтрДерева Из ВсеСтрокиДерева Цикл
		Элементы.ДеревоДокументыИФайлы.Развернуть(СтрДерева.ПолучитьИдентификатор());
	КонецЦикла;
	Элементы.СтраницыДерева.ТекущаяСтраница = Элементы.СтраницаДерева;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусОбработанНаСервере(РаспознанныйДок, ПараметрыОтбораСозданныхДокументов1С)
	
	ОбновитьДеревоДокументовИФайловВсеНаСервере(ПараметрыОтбораСозданныхДокументов1С);
	
КонецПроцедуры

#КонецОбласти

#Область ПометитьНаУдаление

&НаКлиенте
Процедура ПометитьНаУдалениеНаКлиенте()
	
	Для Каждого СтрокаСписка Из Элементы.Список.ВыделенныеСтроки Цикл
		ТекущиеДанные = Элементы.Список.ДанныеСтроки(СтрокаСписка);
		Если ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыСтруктура") Тогда
			
			Если ТекущиеДанные.ЭтоЗаданиеРаспознавания Тогда 
				Если ТекущиеДанные.ПометкаУдаления Тогда 
					ПоказатьПредупреждение(, НСтр("ru = 'Задание распознавания уже отменено.'"));
				Иначе
					ОтменитьЗаданиеРаспознавания(ТекущиеДанные.Идентификатор);
				КонецЕсли;
			Иначе 
				ПометитьНаУдалениеНаСервере(ТекущиеДанные.Ссылка);
				ОповеститьОбИзменении(ТекущиеДанные.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСписок", 0.1, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеНаСервере(ДокументСсылка)
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.РаспознанныйДокумент");
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
		Блокировка.Заблокировать();
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Не ДокументОбъект.ПометкаУдаления);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьЗаданиеРаспознавания(ИдентификаторЗадания)
	
	РегистрыСведений.СостоянияЗаданийРаспознаваниеДокументов.ИзменитьСтатусОбработкиЗадания(
		ИдентификаторЗадания,
		Перечисления.СтатусыНаСервисеРаспознаваниеДокументов.Отменено
	);
	
КонецПроцедуры

#КонецОбласти

#Область ПерсонализированныеПредложения

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = НачатьПолучениеБаннера(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннера", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьПолучениеБаннера(ПоказатьПредыдущий)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьФункцию(
		ПараметрыВыполнения,
		"РаспознаваниеДокументовПерсонализированныеПредложения.ПолучитьКарусельБаннеров",
		РаспознаваниеДокументовПерсонализированныеПредложения.ИмяРазмещенияСписокРезультатовРаспознавания(),
		ПоказатьПредыдущий
	);
	
КонецФункции

&НаКлиенте
Процедура ПослеПолученияБаннера(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	РаспознаваниеДокументовПерсонализированныеПредложения.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление колонки день дерева в формате месяца при отборе по периоду.
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПериодДерево.Вложенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтборПериодДеревоДень");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ДФ='MMMM yyyy'");
	ЭлементОформления.Использование = Истина;
	
	// Оформление колонки день дерева для элемента "За все время" при отборе по периоду.
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборПериодДерево.Вложенность");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = -1;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтборПериодДеревоДень");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'За все время'"));
	ЭлементОформления.Использование = Истина;
	
	// Оформление помеченных на удаление.
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПредставлениеДаты");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ТипДокумента");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Наименование");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Источник");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Организация");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Контрагент");
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Номер");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(192, 192, 192));
	ЭлементОформления.Использование = Истина;
	
	// Оформление недоступных организаций
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей()
		И Не Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		
		ДоступныеОрганизации = Новый СписокЗначений;
		ДоступныеОрганизации.ЗагрузитьЗначения(РаспознаваниеДокументовСлужебный.ДоступныеОрганизации());
		ДоступныеОрганизации.Добавить(Справочники.Организации.ПустаяСсылка());
		
		ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
		
		ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
		ОтборЭлемента.ПравоеЗначение = ДоступныеОрганизации;
		
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Организация");
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = ''"));
		ЭлементОформления.Использование = Истина;
		
	КонецЕсли;
	
	// Оформление поля дата списка распознанных документов.
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.ПредставлениеДаты");
	
	// Оформление статуса связанных документов.
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтатусСвязанногоДокумента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("СтатусСвязанногоДокумента");
	
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементОформления.Использование = Истина;
	
	// Оформление отбора по Контрагенту.
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборКонтрагент.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтборКонтрагентКонтрагент");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не определено'"));
	ЭлементОформления.Использование = Истина;
	
	// Оформление отбора по Организации.
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОтборОрганизация.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ОтборОрганизацияОрганизация");
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не определено'"));
	ЭлементОформления.Использование = Истина;
	
КонецПроцедуры

#КонецОбласти