#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = ОтчетОбИмпорте() Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.КПередаче);
		
	ИначеЕсли Операция = ЗапросОтмены() Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУведомленияОПланируемомИмпортеЕГАИС.ЗапросНаОтменуПроведенияКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПереданоВУТМ;
	КонецЕсли;
	
	Если Операция = ОтчетОбИмпорте() Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = ЗапросОтмены() Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  См. РегистрыСведений.СтатусыДокументовЕГАИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыБазовыйПроцесс.Принят           = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ПроведенЕГАИС;
	СтатусыБазовыйПроцесс.Обрабатывается   = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ОбрабатываетсяЕГАИС;
	СтатусыБазовыйПроцесс.ОшибкаПроведения = Неопределено;
	СтатусыБазовыйПроцесс.Ошибка           = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ОшибкаПередачи;
	СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.НеТребуется);
	СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыБазовыйПроцесс.УведомлениеОРегистрацииДвижения = Истина;;
	
	СтатусыЗапросНаОтменуПроведения = РегистрыСведений.СтатусыДокументовЕГАИС.СтруктураСтатусы();
	СтатусыЗапросНаОтменуПроведения.Принят           = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.Обрабатывается   = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС;
	СтатусыЗапросНаОтменуПроведения.ОтменаПроведения = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.Отменен;
	СтатусыЗапросНаОтменуПроведения.ОшибкаПроведения = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.Ошибка           = Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка;
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	СтатусыЗапросНаОтменуПроведения.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию);
	СтатусыЗапросНаОтменуПроведения.УведомлениеОРегистрацииДвижения = Ложь;
	
	ВыполнитьРасчетТекущегоСостояния = Истина;
	Если ДополнительныеПараметры <> Неопределено
		И ДополнительныеПараметры.Свойство("ТекущееСостояние")
		И ДополнительныеПараметры.ТекущееСостояние <> Неопределено Тогда
		ВыполнитьРасчетТекущегоСостояния = ДополнительныеПараметры.ТекущееСостояние;
	КонецЕсли;
	
	Если Операция = УведомлениеОРегистрацииДвижения() Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
			ДокументСсылка,
			"УведомлениеОРегистрацииДвижения", Перечисления.СтатусыОбработкиСообщенийЕГАИС.ПринятИзЕГАИС,
			СтатусыБазовыйПроцесс, ВыполнитьРасчетТекущегоСостояния);
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПолученЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = ОтчетОбИмпорте() Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = ЗапросОтмены() Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		Иначе
			ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПолученЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	ИначеЕсли Операция = Перечисления.ВидыДокументовЕГАИС.КвитанцияПроведенЕГАИС Тогда
		
		Статусы = Неопределено;
		Если ДополнительныеПараметры.ОперацияКвитанции = ОтчетОбИмпорте() Тогда
			
			Статусы = СтатусыБазовыйПроцесс;
			
		ИначеЕсли ДополнительныеПараметры.ОперацияКвитанции = ЗапросОтмены() Тогда
			
			Статусы = СтатусыЗапросНаОтменуПроведения;
			
		Иначе
			ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		КонецЕсли;
		
		Если Статусы <> Неопределено Тогда
			ПараметрыОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.РассчитатьСтатусыПриПолученииКвитанции(
				ДокументСсылка,
				"КвитанцияПроведенЕГАИС", ДополнительныеПараметры.СтатусОбработки,
				Статусы, ВыполнитьРасчетТекущегоСостояния);
		КонецЕсли;
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Перечислениессылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Документ ЕГАИС.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыИнформированияЕГАИС - новый статус документа ЕГАИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовЕГАИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ОбменДаннымиЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица = ОбменДаннымиЕГАИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ОбменДаннымиЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, ОтчетОбИмпорте(), ДокументСсылка);
	ОбменДаннымиЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Входящий,  УведомлениеОРегистрацииДвижения());
	ОбменДаннымиЕГАИС.ДобавитьОперациюВПоследовательность(Таблица, 0, Исходящий, ЗапросОтмены(), ДокументСсылка);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтчетОбИмпортеЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ОбменДаннымиЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	СтатусыДвижений = СтатусыДвижений();
	
	ДобавитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетДобавленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус);
	УдалитьДвижения = ИнтеграцияЕГАИС.СтатусТребуетУдаленияДвижений(СтатусыДвижений, ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И (ДобавитьДвижения Или УдалитьДвижения) Тогда
		
		ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
		
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ИнтеграцияЕГАИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЕГАИС.РассчитатьСтатусыОформленияДокументовЕГАИС(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ОшибкаПроведенияЕГАИС);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ЗапросНаОтменуПроведенияОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС -- Конечные статусы.
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.Отменен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ОшибкаПроведенияЕГАИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСЕГАИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
// 
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, не требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - дальшейшие действия
// 
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПолученЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеКвитанцииПроведенЕГАИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОжидайтеПолучениеУведомленияОРегистрацииДвижения);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для оформления
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОформите() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ 0 КАК КоличествоДокументов
	|";
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаОтчетОбИмпортеЕГАИСОформите(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов для отработки
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОтработайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетОбИмпортеЕГАИС КАК ОтчетОбИмпортеЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ОтчетОбИмпортеЕГАИС.Ссылка
	|ГДЕ
	|	ОтчетОбИмпортеЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ОтчетОбИмпортеЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеДействия)
	|	И (ОтчетОбИмпортеЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ОтчетОбИмпортеЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаОтчетОбИмпортеЕГАИСОтработайте(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения количества документов, находящихся в состоянии ожидания
// 
// Возвращаемое значение:
//  Строка - Текст запроса
//
Функция ТекстЗапросаПанельОбменСЕГАИСОжидайте() Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ СтатусыДокументовЕГАИС.Документ) КАК КоличествоДокументов
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.ОтчетОбИмпортеЕГАИС КАК ОтчетОбИмпортеЕГАИС
	|ПО
	|	СтатусыДокументовЕГАИС.Документ = ОтчетОбИмпортеЕГАИС.Ссылка
	|ГДЕ
	|	ОтчетОбИмпортеЕГАИС.Ссылка ЕСТЬ НЕ NULL
	|	И НЕ ОтчетОбИмпортеЕГАИС.ПометкаУдаления
	|	И СтатусыДокументовЕГАИС.ДальнейшееДействие1 В(&ВсеТребующиеОжидания)
	|	И (ОтчетОбИмпортеЕГАИС.ОрганизацияЕГАИС В(&ОрганизацияЕГАИС)
	|		ИЛИ &БезОтбораПоОрганизацииЕГАИС)
	|	И (ОтчетОбИмпортеЕГАИС.Ответственный = &Ответственный
	|		ИЛИ &Ответственный = НЕОПРЕДЕЛЕНО)
	|";
	
	ИнтеграцияЕГАИСПереопределяемый.ТекстЗапросаОтчетОбИмпортеЕГАИСОжидайте(ТекстЗапроса);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие
//  ДополнительныеПараметры - Неопределено, Структура - Дополнительные параметры
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ОтчетОбИмпортеЕГАИСXML(ДокументСсылка);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтменуПроведения Тогда
		
		Возврат ЗапросНаОтменуПроведенияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

//@skip-warning
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИнтеграцияЕГАИСВызовСервера.ПриПолученииФормыДокумента(
		"ОтчетОбИмпортеЕГАИС",
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ПроцессыОбработкиДокумента

Функция ОтчетОбИмпорте()
	
	Возврат Перечисления.ВидыДокументовЕГАИС.ОтчетОбИмпорте;
	
КонецФункции

Функция ЗапросОтмены()
	
	Возврат Перечисления.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияОтчетаОбИмпорте;
	
КонецФункции

Функция УведомлениеОРегистрацииДвижения()
	
	Возврат Перечисления.ВидыДокументовЕГАИС.УведомлениеОРегистрацииДвиженияОтчетаОбИмпортеПроизводстве;
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиОтчетаОбИмпортеЕГАИС - Статусы.
//
Функция СтатусыДвижений()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиОтчетаОбИмпортеЕГАИС.ПроведенЕГАИС);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтчетПроизводственнойЛинии

// Подготавливает данные для заполнения таблицы ДанныеОтчетаПроизводственнойЛинии при удалении строк
// Сохраняет полученный результат (структуру) в переданный адрес временного хранилища.
// 
// Параметры:
//	 ПараметрыЗаполнения - Структура - структура, содержащая следующие ключи:
//		ДанныеОтчета - ТаблицаЗначений - Данные объекта ДанныеОтчетаПроизводственнойЛинии;
//		ВыделенныеСтроки - Массив - данные выделенных строк отчета (структура "Штрихкод, ШтрихкодУпаковки").
//	 АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения.
Процедура ПодготовитьДанныеЗаполненияОтчетПроизводственноЛинии(ПараметрыЗаполнения, АдресРезультата) Экспорт
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.ОтчетОбИмпортеЕГАИС.ПодготовитьДанныеЗаполненияОтчетПроизводственноЛинии");
	
	ВыделенныеСтроки = ПараметрыЗаполнения.ВыделенныеСтроки;
	
	ДанныеОтчетаПроизводственнойЛинии = ПараметрыЗаполнения.ДанныеОтчета;
	
	Для Каждого СтрокаОтчета Из ВыделенныеСтроки Цикл
		ДанныеОтчетаПроизводственнойЛинии.Удалить(СтрокаОтчета);
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ДанныеОтчетаПроизводственнойЛинии, АдресРезультата);
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, ДанныеОтчетаПроизводственнойЛинии.Количество());
	
КонецПроцедуры

Функция СохранитьОбработанныеДанныеОтчета(ДокументСсылка, ДанныеОтчета, ПолныеДанныеОтчета = Истина) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТекстОшибки", "");
	Результат.Вставить("ЕстьОшибки",  Ложь);
	
	Блокировка              = Новый БлокировкаДанных();
	ЭлементБлокировки       = Блокировка.Добавить("Документ.ОтчетОбИмпортеЕГАИС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", ДокументСсылка);
	
	НачатьТранзакцию();

	Попытка
		
		Блокировка.Заблокировать();
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ЗагрузитьДанныеОтчетаПроизводственнойЛинии(ДокументОбъект, ДанныеОтчета, ПолныеДанныеОтчета);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстОшибкиЖурналРегистрации = СтрШаблон(
			НСтр("ru = 'При сохранении нормализованных кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ДокументСсылка,
			ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Результат.ТекстОшибки = СтрШаблон(
			НСтр("ru = 'При сохранении нормализованных кодов маркировки по документу %1 возникла ошибка:
			           |Текст ошибки: %2'"),
			ДокументСсылка,
			ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбъектМетаданных = ДокументСсылка.Метаданные();
		
		ИмяСобытияЖурналРегистрации = НСтр("ru = 'ГосИС: запись данных отчета производственной линии ИС МП'",
			ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(
			ИмяСобытияЖурналРегистрации, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных,,
			ТекстОшибкиЖурналРегистрации);
		
		Результат.ЕстьОшибки = Истина;
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьДанныеОтчетаПроизводственнойЛинии(ДокументОбъект, ДанныеОтчета, ПолныеДанныеОтчета) Экспорт
	
	Если ПолныеДанныеОтчета Тогда
		
		ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ДанныеОтчета);
		
	Иначе
		
		СтруктураПоиска = Новый Структура("ЗначениеШтрихкода, ЗначениеШтрихкодаУпаковки");
		Для Каждого СтрокаДанных Из ДанныеОтчета Цикл
			
			Если ЗначениеЗаполнено(СтрокаДанных.ТекстОшибкиЗначениеШтрихкода)
				Или ЗначениеЗаполнено(СтрокаДанных.ТекстОшибкиЗначениеШтрихкодаУпаковки) Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанных);
				НайденныеСтрокиДокумента = ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтрокиДокумента <> Неопределено Тогда
					Для Каждого СтрокаДокумента Из НайденныеСтрокиДокумента Цикл
						ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаДанных);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияЕГАИС

Функция ОтчетОбИмпортеЕГАИСXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОбИмпортеЕГАИС КАК Шапка
		|		ПО Шапка.Ссылка       = &Ссылка
		|		 И Шапка.Ссылка       = ЕГАИСПрисоединенныеФайлы.Документ
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|	И ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ОтчетОбИмпорте)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Ссылка                          КАК Ссылка,
		|	Шапка.Номер                           КАК Номер,
		|	Шапка.Дата                            КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
		|	Шапка.Идентификатор                   КАК Идентификатор,
		|	Шапка.ДокументОснование               КАК ДокументОснование,
		|	ВЫРАЗИТЬ(Шапка.Комментарий КАК Строка(500)) КАК Примечание,
		|	Шапка.ОтчетПроизводственнойЛинии КАК ОтчетПроизводственнойЛинии,
		|	
		|	Шапка.ОрганизацияЕГАИС              КАК ОрганизацияЕГАИС,
		|	Шапка.ОрганизацияЕГАИС.Код          КАК ИдентификаторФСРАР,
		|	Шапка.ОрганизацияЕГАИС.ФорматОбмена КАК ФорматОбмена,
		|	Шапка.Ответственный                 КАК Ответственный,
		|	
		|	Шапка.ДатаВвоза КАК ДатаВвоза,
		|	Шапка.НомерГТД КАК НомерГТД,
		|	Шапка.ДатаГТД КАК ДатаГТД,
		|	Шапка.НомерКонтракта КАК НомерКонтракта,
		|	Шапка.ДатаКонтракта КАК ДатаКонтракта,
		|	Шапка.Страна.Код КАК КодСтраны,
		|
		|	Импортеры.Код                                            КАК ИмпортерКод,
		|	ВЫРАЗИТЬ(Импортеры.Наименование КАК Строка(64))          КАК ИмпортерНаименование,
		|	ВЫРАЗИТЬ(Импортеры.НаименованиеПолное КАК Строка(255))   КАК ИмпортерНаименованиеПолное,
		|	Импортеры.ИНН                                            КАК ИмпортерИНН,
		|	Импортеры.КПП                                            КАК ИмпортерКПП,
		|	Импортеры.КодСтраны                                      КАК ИмпортерКодСтраны,
		|	Импортеры.КодРегиона                                     КАК ИмпортерКодРегиона,
		|	Импортеры.ПочтовыйИндекс                                 КАК ИмпортерПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Импортеры.ПредставлениеАдреса КАК Строка(1000)) КАК ИмпортерПредставлениеАдреса,
		|	Импортеры.ТипОрганизации                                 КАК ИмпортерТипОрганизации,
		|	Импортеры.ИдентификаторОрганизацииТС                     КАК ИмпортерИдентификаторОрганизацииТС,
		|
		|	Поставщики.Код                                            КАК ПоставщикКод,
		|	ВЫРАЗИТЬ(Поставщики.Наименование КАК Строка(64))          КАК ПоставщикНаименование,
		|	ВЫРАЗИТЬ(Поставщики.НаименованиеПолное КАК Строка(255))   КАК ПоставщикНаименованиеПолное,
		|	Поставщики.ИНН                                            КАК ПоставщикИНН,
		|	Поставщики.КПП                                            КАК ПоставщикКПП,
		|	Поставщики.КодСтраны                                      КАК ПоставщикКодСтраны,
		|	Поставщики.КодРегиона                                     КАК ПоставщикКодРегиона,
		|	Поставщики.ПочтовыйИндекс                                 КАК ПоставщикПочтовыйИндекс,
		|	ВЫРАЗИТЬ(Поставщики.ПредставлениеАдреса КАК Строка(1000)) КАК ПоставщикПредставлениеАдреса,
		|	Поставщики.ТипОрганизации                                 КАК ПоставщикТипОрганизации,
		|	Поставщики.ИдентификаторОрганизацииТС                     КАК ПоставщикИдентификаторОрганизацииТС
		|ИЗ
		|	Документ.ОтчетОбИмпортеЕГАИС КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Импортеры
		|		ПО Шапка.ОрганизацияЕГАИС = Импортеры.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК Поставщики
		|		ПО Шапка.Поставщик = Поставщики.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
		|	Товары.Номенклатура         КАК Номенклатура,
		|	Товары.Характеристика       КАК Характеристика,
		|	Товары.Серия                КАК Серия
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	Документ.ОтчетОбИмпортеЕГАИС.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|");
	
	ТекстыЗапроса.Добавить(
		ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(
			"ВТТовары",
			"ВТКоэффициентыПересчетаВЕдиницыЕГАИС"));
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.Номенклатура             КАК Номенклатура,
		|	Товары.Характеристика           КАК Характеристика,
		|	Товары.Серия                    КАК Серия,
		|
		|	Товары.Количество
		|	* ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) КАК Количество,
		|	
		|	Товары.АлкогольнаяПродукция.Код КАК АлкогольнаяПродукция,
		|	Товары.НомерПартии              КАК НомерПартии,
		|	Товары.ИдентификаторУведомления КАК ИдентификаторУведомления,
		|	Товары.Крепость                 КАК Крепость,
		|	Товары.КрепостьОт               КАК КрепостьОт,
		|	Товары.КрепостьДо               КАК КрепостьДо,
		|	Товары.Комментарий1             КАК Комментарий1,
		|	Товары.Комментарий2             КАК Комментарий2,
		|	Товары.Комментарий3             КАК Комментарий3
		|ИЗ
		|	Документ.ОтчетОбИмпортеЕГАИС.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
		|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = Товары.АлкогольнаяПродукция
		|		 И ЕдиницыЕГАИС.Номенклатура = Товары.Номенклатура
		|		 И ЕдиницыЕГАИС.Характеристика = Товары.Характеристика
		|		 И ЕдиницыЕГАИС.Серия = Товары.Серия
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|",
		"Товары");
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
		|ИЗ
		|	Документ.ОтчетОбИмпортеЕГАИС.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
		|ГДЕ
		|	ШтрихкодыУпаковок.Ссылка = &Ссылка
		|",
		"ШтрихкодыУпаковок");
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеОтчетаПроизводственнойЛинии.НормализованноеЗначениеШтрихкода КАК НормализованноеЗначениеШтрихкода,
		|	ДанныеОтчетаПроизводственнойЛинии.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
		|	ДанныеОтчетаПроизводственнойЛинии.НормализованноеЗначениеШтрихкодаУпаковки КАК НормализованноеЗначениеШтрихкодаУпаковки,
		|	ДанныеОтчетаПроизводственнойЛинии.ЗначениеШтрихкодаУпаковки КАК ЗначениеШтрихкодаУпаковки,
		|	ДанныеОтчетаПроизводственнойЛинии.ФорматBase64 КАК ФорматBase64
		|ИЗ
		|	Документ.ОтчетОбИмпортеЕГАИС.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчетаПроизводственнойЛинии
		|ГДЕ
		|	ДанныеОтчетаПроизводственнойЛинии.Ссылка = &Ссылка
		|",
		"ДанныеОтчетаПроизводственнойЛинии");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	РезультатыЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	//@skip-warning
	Шапка = РезультатыЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары = РезультатыЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	
	ПараметрыНормализации = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализации.НачинаетсяСоСкобки = Ложь;
	
	Если Не Шапка.ОтчетПроизводственнойЛинии = Истина Тогда
		//@skip-warning
		ШтрихкодыУпаковок = РезультатыЗапроса["ШтрихкодыУпаковок"].Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
		ВложенныеШтрихкодыУпаковок = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(ШтрихкодыУпаковок);
	Иначе
		//@skip-warning
		ШтрихкодыТаблица = РезультатыЗапроса["ДанныеОтчетаПроизводственнойЛинии"].Выгрузить();
		
#Область РазборКодовМаркировки
	
		КодыМаркировкиНормализованы = Истина;
		
		Для Каждого СтрокаОтчета Из ШтрихкодыТаблица Цикл
			Если Не ЗначениеЗаполнено(СтрокаОтчета.НормализованноеЗначениеШтрихкода) Тогда
				КодыМаркировкиНормализованы = Ложь;
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		ПараметрыРазбора = Новый Структура;
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка.Ссылка);
		
		// Если флаг стоит, то из пула полные коды брать нельзя.
		ПараметрыРазбора.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
		ПараметрыРазбора.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
		
		ШтрихкодыТаблица.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
		ШтрихкодыТаблица.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкодаУпаковки", Новый ОписаниеТипов("Строка"));
		
		ПараметрыРазбора.Вставить("КодыМаркировкиНормализованы", КодыМаркировкиНормализованы);
		ПараметрыРазбора.Вставить("ПараметрыНормализации", ПараметрыНормализации);
		
		РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
			ШтрихкодыТаблица, Неопределено, ПараметрыРазбора);
		
		ЕстьОшибки = РезультатОбработкиДанныхОтчета.ЕстьОшибки;
		Если ЕстьОшибки Тогда
			СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
			СообщениеXML.Документ = ДокументСсылка;
			СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
				ОтчетОбИмпорте(), ДокументСсылка);
			ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML,
				НСтр("ru = 'Коды маркировки отчета производственной линии содержат ошибки.'"));
			СообщенияXML.Добавить(СообщениеXML);
			Возврат СообщенияXML;
		КонецЕсли;
		
		ШтрихкодыУпаковок = Новый ТаблицаЗначений();
		ШтрихкодыУпаковок.Колонки.Добавить("Штрихкод");
		ШтрихкодыУпаковок.Колонки.Добавить("КодДляПередачи");
		Для Каждого СтрокаТЧ Из РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета Цикл
			НоваяСтрока = ШтрихкодыУпаковок.Добавить();
			НоваяСтрока.КодДляПередачи = СтрокаТЧ.ЗначениеШтрихкодаКодДляПередачиИСМП;
			НоваяСтрока.Штрихкод = СтрокаТЧ.ИсходнаяСтрока.НормализованноеЗначениеШтрихкода;
		КонецЦикла;
		
		Если Не КодыМаркировкиНормализованы Тогда
			РезультатСохраненияДанныхОтчета = СохранитьОбработанныеДанныеОтчета(ДокументСсылка, ШтрихкодыТаблица);
			Если РезультатСохраненияДанныхОтчета.ЕстьОшибки Тогда
				СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
				СообщениеXML.Документ = ДокументСсылка;
				СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
					ОтчетОбИмпорте(), ДокументСсылка);
				ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, РезультатСохраненияДанныхОтчета.ТекстОшибки);
				СообщенияXML.Добавить(СообщениеXML);
				Возврат СообщенияXML;
			КонецЕсли;
		КонецЕсли;
		
#КонецОбласти
	КонецЕсли;
	
	Если Шапка.Количество() = 0
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
			ОтчетОбИмпорте(), ДокументСсылка);
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		ОтчетОбИмпорте(), ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ОтчетОбИмпорте(), ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(ОтчетОбИмпорте(), ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ТоварыИтоги = Товары.Скопировать(,"Номенклатура, Характеристика, Серия, Количество");
	ТоварыИтоги.Свернуть("Номенклатура, Характеристика, Серия", "Количество");
	ТоварыИтоги.Колонки.Добавить("КодыМаркировки", Новый ОписаниеТипов("Массив"));
	
	Поиск = Новый Структура("Номенклатура,Характеристика,Серия");
	
	Если Не Шапка.ОтчетПроизводственнойЛинии Тогда
		
		Для Каждого СтрокаТЧ Из ВложенныеШтрихкодыУпаковок.МаркированныеТовары Цикл
			
			ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
			НайденнаяСтрока = ТоварыИтоги.НайтиСтроки(Поиск);
			Если НайденнаяСтрока.Количество() = 0 Тогда
				ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Ошибка при связывании кодов маркировки и номенклатуры'"));
			КонецЕсли;
			НайденнаяСтрока = НайденнаяСтрока[0];
			
			КодБезКриптохвоста = 
				РазборКодаМаркировкиИССлужебныйКлиентСервер.НормализоватьКодМаркировки(
					СтрокаТЧ.ДанныеРазбора,
					СтрокаТЧ.ВидПродукции,
					ПараметрыНормализации);
			НайденнаяСтрока.КодыМаркировки.Добавить(КодБезКриптохвоста);
			
		КонецЦикла;
		
	Иначе
		
		НайденнаяСтрока = ТоварыИтоги[0];
		Для Каждого КодБезКриптохвоста Из ШтрихкодыУпаковок Цикл
			НайденнаяСтрока.КодыМаркировки.Добавить(КодБезКриптохвоста.КодДляПередачи);
		КонецЦикла;
		
	КонецЕсли;
	
	ОтчетXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "RepImportedType_v4");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ОтчетXDTO, "Identity", Шапка.Идентификатор, СообщениеXML, 3);
	
	Header = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОтчетXDTO, "Header");
	ОтчетXDTO.Header = Header;
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Number",         СокрЛП(Шапка.Номер),  СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Date",           Шапка.Дата,           СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ImportedDate",   Шапка.ДатаВвоза,      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "GTDNUMBER",      Шапка.НомерГТД,       СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "GTDDate",        Шапка.ДатаГТД,        СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ContractNUMBER", Шапка.НомерКонтракта, СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "ContractDate",   Шапка.ДатаКонтракта,  СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Country",        Шапка.КодСтраны,      СообщениеXML);
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Header, "Note",           Шапка.Примечание ,    СообщениеXML);
	
	ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(Header, "Importer", Шапка, "Импортер",  СообщениеXML);
	ИнтеграцияЕГАИС.ЗаполнитьВXDTOОрганизацию_v2(Header, "Supplier", Шапка, "Поставщик", СообщениеXML);
	
	ОтчетXDTO.Content = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ОтчетXDTO, "Content");
	
	Для Каждого СтрокаТЧ Из ТоварыИтоги Цикл
		
		ЗаполнитьЗначенияСвойств(Поиск, СтрокаТЧ);
		Детали = Товары.НайтиСтроки(Поиск)[0];
		
		НомерСтроки = Формат(ТоварыИтоги.Индекс(СтрокаТЧ) + 1, "ЧГ=0");
		
		Position = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "PositionType");
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Identity",    НомерСтроки,                   СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Quantity",    СтрокаТЧ.Количество,           СообщениеXML);
		
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "ProductCode",   Детали.АлкогольнаяПродукция, СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "PlannedImport", Детали.ИдентификаторУведомления, СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Comment1",      Детали.Комментарий1,             СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Comment2",      Детали.Комментарий2,             СообщениеXML);
		РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Comment3",      Детали.Комментарий3,             СообщениеXML);
		
		Если ЗначениеЗаполнено(Детали.НомерПартии) Тогда
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "Party",         Детали.НомерПартии, СообщениеXML);
		КонецЕсли;
		Если ЗначениеЗаполнено(Детали.Крепость) Тогда
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercent",    Детали.Крепость,    СообщениеXML);
		Иначе
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercentMin", Детали.КрепостьОт,  СообщениеXML);
			РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position, "alcPercentMax", Детали.КрепостьДо,  СообщениеXML);
		КонецЕсли;
		
		Если СтрокаТЧ.КодыМаркировки.Количество() Тогда
			
			Position.MarkInfo = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(Position, "MarkInfo");
			
			Для Каждого КодАкцизнойМарки Из СтрокаТЧ.КодыМаркировки Цикл
				РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(Position.MarkInfo, "ms", КодАкцизнойМарки, СообщениеXML);
			КонецЦикла;
			
		КонецЕсли;
		
		ОтчетXDTO.Content.Position.Добавить(Position);
		
	КонецЦикла;
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ОтчетXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = ОтчетОбИмпорте();
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ЗапросНаОтменуПроведенияXML(ДокументСсылка)
	
	СообщенияXML = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕГАИСПрисоединенныеФайлы.Документ КАК Ссылка,
	|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
	|ГДЕ
	|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ЕГАИСПрисоединенныеФайлы.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросНаОтменуПроведенияОтчетаОбИмпорте)
	|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ЕГАИСПрисоединенныеФайлы.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)    КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование               КАК ДокументОснование,
	|	Шапка.ОрганизацияЕГАИС                КАК ОрганизацияЕГАИС,
	|	Шапка.ИдентификаторЕГАИС              КАК ИдентификаторЕГАИС,
	|	Шапка.ОрганизацияЕГАИС.ФорматОбмена   КАК ФорматОбмена,
	|	Шапка.Ответственный                   КАК Ответственный
	|ИЗ
	|	Документ.ОтчетОбИмпортеЕГАИС КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
		СообщениеXML.Документ = ДокументСсылка;
		СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
			ЗапросОтмены(), ДокументСсылка);
		
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	ФорматОбмена = ОбменДаннымиЕГАИСКлиентСервер.ФорматОбмена(Шапка.ФорматОбмена);
	
	СообщениеXML = ОбменДаннымиЕГАИС.СтруктураСообщенияXML();
	СообщениеXML.Описание = ОбменДаннымиЕГАИС.ОписаниеОперацииПередачиДанных(
		ЗапросОтмены(), ДокументСсылка, НомерВерсии);
	
	ПространствоИмен = Перечисления.ВидыДокументовЕГАИС.ПространствоИмен(ЗапросОтмены(), ФорматОбмена);
	ИмяТипа          = Перечисления.ВидыДокументовЕГАИС.ТипЕГАИС(ЗапросОтмены(), ФорматОбмена);
	
	Если ПространствоИмен = Неопределено
		Или ИмяТипа = Неопределено Тогда
		ОбменДаннымиЕГАИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(НСтр("ru = 'Операция не поддерживается в версии формата обмена: %1.'"), ФорматОбмена));
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	КонецЕсли;
	
	ЗапросXDTO = РаботаСXMLЕГАИС.ОбъектXDTO(ПространствоИмен, "QueryRejectRepImported");
	
	РаботаСXMLЕГАИС.ЗаполнитьСвойствоXDTO(ЗапросXDTO, "RegId",      Шапка.ИдентификаторЕГАИС, СообщениеXML);
	
	ТекстСообщенияXML = РаботаСXMLЕГАИС.ОбъектXDTOВXML(ЗапросXDTO, Шапка.ИдентификаторФСРАР, ПространствоИмен, ИмяТипа);
	
	СообщениеXML.ТекстСообщенияXML = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения      = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеXML.ОрганизацияЕГАИС  = Шапка.ОрганизацияЕГАИС;
	СообщениеXML.Операция          = ЗапросОтмены();
	СообщениеXML.ФорматОбмена      = ФорматОбмена;
	СообщениеXML.Документ          = ДокументСсылка;
	СообщениеXML.ДокументОснование = Шапка.ДокументОснование;
	СообщениеXML.Версия            = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Результат, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды);
	Иначе
		
		ПараметрыЗаполнения = ПараметрыЗаполнения();
		ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения);
		
		Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
		Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(РезультатОбработки, Форма, ДанныеШтрихкода, ВложенныеШтрихкоды)
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
КонецПроцедуры

Процедура ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыЗаполнения)
	
	ИсточникДанных = Форма.Объект;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода);
	
	Если ПараметрыЗаполнения.РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = ПараметрыЗаполнения.РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОбновляемаяСтрока);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		//поле Количество
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
		
		Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
			КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
		КонецЕсли;
		
		Если КоличествоМаркируемойПродукции > 0 Тогда
			
			СтрокаТовары.Количество = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
			
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			Иначе
				СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
			КонецЕсли;
			
			ОбновляемаяСтрока.Количество = КоличествоМаркируемойПродукции;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		ПараметрыЗаполнения.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, ПараметрыЗаполнения);
			
		Иначе
			
			ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева);
		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаИПодборМаркируемойПродукции

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ВидМаркируемойПродукции, ДокументСсылка) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ОтчетОбИмпортеЕГАИСТовары.Номенклатура КАК Номенклатура,
		|	ОтчетОбИмпортеЕГАИСТовары.Характеристика КАК Характеристика,
		|	ОтчетОбИмпортеЕГАИСТовары.Серия КАК Серия,
		|	СУММА(ОтчетОбИмпортеЕГАИСТовары.Количество) КАК Количество
		|ПОМЕСТИТЬ ДанныеДокумента
		|ИЗ
		|	Документ.ОтчетОбИмпортеЕГАИС.Товары КАК ОтчетОбИмпортеЕГАИСТовары
		|ГДЕ
		|	ОтчетОбИмпортеЕГАИСТовары.Ссылка = &ДокументСсылка
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОбИмпортеЕГАИСТовары.Номенклатура,
		|	ОтчетОбИмпортеЕГАИСТовары.Характеристика,
		|	ОтчетОбИмпортеЕГАИСТовары.Серия");
	ТекстыЗапроса.Добавить(ШтрихкодированиеОбщегоНазначенияИС.ТекстЗапросаСвойстваМаркируемойПродукции("ДанныеДокумента"));
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ДанныеДокумента.Номенклатура,
		|	ДанныеДокумента.Характеристика,
		|	ДанныеДокумента.Серия,
		|	ДанныеДокумента.Количество
		|ИЗ
		|	ДанныеДокумента КАК ДанныеДокумента
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваМаркируемойПродукции КАК СвойстваМаркируемойПродукции
		|		ПО СвойстваМаркируемойПродукции.Номенклатура = ДанныеДокумента.Номенклатура
		|		И СвойстваМаркируемойПродукции.ВидПродукции = &ВидМаркируемойПродукции", "Результат");
		
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидМаркируемойПродукции", ВидМаркируемойПродукции);
	
	Выборка = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса).Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - См. Обработки.ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ШтрихкодыУпаковок = ДокументОбъект.ШтрихкодыУпаковок.Выгрузить().ВыгрузитьКолонку("ШтрихкодУпаковки");
	ВидПродукции = ПараметрыОкончанияПроверки.ВидПродукцииИС;
	ШтрихкодированиеИСПереопределяемый.ВыделитьШтрихкодыСодержащиеВидыПродукции(
		ШтрихкодыУпаковок, ВидПродукции);
	Товары = ИнтеграцияИС.СвойстваТаблицыПродукции(ДокументОбъект.Товары.Выгрузить(, "Номенклатура"))
		.Скопировать(Новый Структура("ВидПродукции", ВидПродукции));
	
	ДобавленныеСтроки = Новый Массив;
	ИзмененныеСтроки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции();
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
			ДобавленныеСтроки.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			ИзмененныеСтроки.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработатьСтрокиТЧ(ДокументОбъект, ДобавленныеСтроки, ИзмененныеСтроки);
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если (СтрокаТовары.Количество = 0 И СтрокаТовары.КоличествоПотребительскихУпаковок = 0)
			Или (ИзмененныеСтроки.Найти(СтрокаТовары) = Неопределено
				И Товары.Найти(СтрокаТовары.Номенклатура) <> Неопределено)Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	// Обновление таблицы "ШтрихкодыУпаковок".
	ИндексТабЧастиТовары = ДокументОбъект.ШтрихкодыУпаковок.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		СтрокаШтрихкоды = ДокументОбъект.ШтрихкодыУпаковок[ИндексТабЧастиТовары];
		Если ШтрихкодыУпаковок.Найти(СтрокаШтрихкоды.ШтрихкодУпаковки) <> Неопределено Тогда
			ДокументОбъект.ШтрихкодыУпаковок.Удалить(СтрокаШтрихкоды);
		КонецЕсли;
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня Цикл
		ЗаполнитьЗначенияСвойств(ДокументОбъект.ШтрихкодыУпаковок.Добавить(), СтрокаТЧ);
	КонецЦикла;
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработатьСтрокиТЧ(ДокументОбъект, ДобавленныеСтроки, ИзмененныеСтроки)
	
	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	ПараметрыЗаполненияТабличнойЧасти = ИнтеграцияЕГАИСКлиентСервер.ПараметрыЗаполненияТабличнойЧасти();
	ПараметрыЗаполненияТабличнойЧасти.ЗаполнитьАлкогольнуюПродукцию = Истина;
	ПараметрыЗаполненияТабличнойЧасти.ЗаполнитьКрепость = Истина;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	СтруктураДействий.Вставить("ЗаполнитьАлкогольнуюПродукцию", ПараметрыЗаполненияТабличнойЧасти);
	
	Для Каждого СтрокаТЧ Из ДобавленныеСтроки Цикл
		
		ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий);
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	
	Для Каждого СтрокаТЧ Из ИзмененныеСтроки Цикл
		
		Если ДобавленныеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
			ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТЧ, СтруктураДействий);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата                    КАК Период,
	|	ДанныеШапки.Ссылка                  КАК Ссылка,
	|	ДанныеШапки.ОрганизацияЕГАИС        КАК ОрганизацияЕГАИС,
	|	ДанныеШапки.ДатаРегистрацииДвижений КАК ДатаРегистрацииДвижений,
	|	СтатусыДокументовЕГАИС.Статус       КАК СтатусОбработки
	|ИЗ
	|	Документ.ОтчетОбИмпортеЕГАИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО СтатусыДокументовЕГАИС.Документ = ДанныеШапки.Ссылка
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",                  Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",                  Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",        Реквизиты.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СтатусОбработки",         Реквизиты.СтатусОбработки);
	Запрос.УстановитьПараметр("ДатаРегистрацииДвижений", Реквизиты.ДатаРегистрацииДвижений);
	Запрос.УстановитьПараметр("СтатусыДвижений",         СтатусыДвижений());
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТТовары", ТекстыЗапроса) Тогда
		ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ИнтеграцияЕГАИС.ЕстьТаблицаЗапроса("ВТКоэффициентыПересчетаВЕдиницыЕГАИС", ТекстыЗапроса) Тогда
		ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса);
	КонецЕсли;

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Период                                 КАК Период,
	|	&ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке, 0) > 0
	|		ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) /
	|			ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке КАК ЧИСЛО(12, 0))
	|		ИНАЧЕ ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
	|	КОНЕЦ                                   КАК СвободныйОстаток,
	|	0                                       КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаТовары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаТовары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаТовары.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = ТаблицаТовары.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатуры
	|			ПО ТаблицаТовары.Номенклатура = ОписаниеНоменклатуры.Номенклатура
	|			 И ТаблицаТовары.АлкогольнаяПродукция.ТипПродукции <> ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|ГДЕ
	|	&СтатусОбработки В (&СтатусыДвижений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&ДатаРегистрацииДвижений                КАК ДатаРегистрацииДвижений,
	|	&ОрганизацияЕГАИС                       КАК ОрганизацияЕГАИС,
	|	ТаблицаТовары.АлкогольнаяПродукция      КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Справка2                  КАК Справка2,
	|	0                                       КАК СвободныйОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке, 0) > 0
	|		ТОГДА ВЫРАЗИТЬ(ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1) /
	|			ОписаниеНоменклатуры.КоличествоВПотребительскойУпаковке КАК ЧИСЛО(12, 0))
	|		ИНАЧЕ ТаблицаТовары.Количество * ЕСТЬNULL(ЕдиницыЕГАИС.Коэффициент, 1)
	|	КОНЕЦ                                   КАК Количество,
	|	ТаблицаТовары.НомерСтроки               КАК НомерСтроки
	|ИЗ
	|	ВТТовары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКоэффициентыПересчетаВЕдиницыЕГАИС КАК ЕдиницыЕГАИС
	|		ПО ЕдиницыЕГАИС.АлкогольнаяПродукция = ТаблицаТовары.АлкогольнаяПродукция
	|		 И ЕдиницыЕГАИС.Номенклатура = ТаблицаТовары.Номенклатура
	|		 И ЕдиницыЕГАИС.Характеристика = ТаблицаТовары.Характеристика
	|		 И ЕдиницыЕГАИС.Серия = ТаблицаТовары.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОписаниеНоменклатурыИС КАК ОписаниеНоменклатуры
	|			ПО ТаблицаТовары.Номенклатура = ОписаниеНоменклатуры.Номенклатура
	|			 И ТаблицаТовары.АлкогольнаяПродукция.ТипПродукции <> ЗНАЧЕНИЕ(Перечисление.ТипыПродукцииЕГАИС.Неупакованная)
	|ГДЕ
	|	&СтатусОбработки В (&СтатусыДвижений)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТТовары(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТТовары";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка               КАК Ссылка,
	|	ТаблицаТовары.НомерСтроки          КАК НомерСтроки,
	|	ТаблицаТовары.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаТовары.Номенклатура         КАК Номенклатура,
	|	ТаблицаТовары.Характеристика       КАК Характеристика,
	|	ТаблицаТовары.Серия                КАК Серия,
	|	ТаблицаТовары.Количество           КАК Количество,
	|	ТаблицаТовары.Справка2             КАК Справка2
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	Документ.ОтчетОбИмпортеЕГАИС.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТКоэффициентыПересчетаВЕдиницыЕГАИС";
	
	ТекстЗапроса = ИнтеграцияЕГАИС.ТекстЗапросаВТКоэффициентыПересчетаВЕдиницыЕГАИС("ВТТовары", ИмяРегистра);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияСерийТоваров(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = "";
	ИнтеграцияЕГАИСПереопределяемый.ПриЗаполненииТекстаЗапросаДвижениеСерийТоваров(ТекстЗапроса, Метаданные.Документы.ОтчетОбИмпортеЕГАИС.Имя);
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ОтчетОбИмпортеЕГАИС);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ОтчетОбИмпортеЕГАИС, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ОтчетОбИмпортеЕГАИС, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииАлкогольнойПродукции.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
// 
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ВЫБОР КОГДА ОрганизацияЕГАИС.Сопоставлено И ОрганизацияЕГАИС.СоответствуетОрганизации Тогда ЗначениеРазрешено(ОрганизацияЕГАИС.Контрагент)
	|	КОГДА ОрганизацияЕГАИС.Сопоставлено И НЕ ОрганизацияЕГАИС.СоответствуетОрганизации Тогда ЗначениеРазрешено(ОрганизацияЕГАИС.ТорговыйОбъект)
	|	ИНАЧЕ ИСТИНА КОНЕЦ ";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

#КонецОбласти

#КонецЕсли

