#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

	УстановитьБыстрыйОтборСервер();
	СобытияФормСАТУРН.ПриСозданииНаСервереФормыСпискаДокументов(ЭтотОбъект);

	ИнтеграцияСАТУРН.ЗаполнитьСписокВыбораДальнейшееДействие(
		Элементы.СтраницаОформленоОтборДальнейшееДействие.СписокВыбора, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	
	УстановитьВидимостьТаблицыКОформлению();
	НастроитьВидимостьДоступностьЭлементовСервер();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);

	ИнтеграцияИС.УстановитьПризнакПравоИзмененияФормыСписка(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ИнтеграцияИСКлиент.ОбработкаОповещенияВФормеСпискаДокументовИС(
		ЭтотОбъект,
		ИнтеграцияСАТУРНКлиентСервер.ИмяПодсистемы(),
		ИмяСобытия,
		Параметр,
		Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОтборПоОрганизации

&НаКлиенте
Процедура ОформленоОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Истина, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Истина, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура ОформленоОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "Оформлено");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуВыбораОрганизаций(ЭтотОбъект, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Истина, Истина, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, Истина, Истина, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "КОформлению");
	
КонецПроцедуры

&НаКлиенте
Процедура КОформлениюОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияСАТУРНКлиент.ОбработатьВыборОрганизаций(ЭтотОбъект, ВыбранноеЗначение, Истина, "КОформлению");
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура СтраницаОформленоОтборСтатусПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборДальнейшееДействиеПриИзменении(Элемент)
	
	УстановитьОтборПоДальнейшемуДействиюСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОформленоОтборОтветственныйПриИзменении(Элемент)
	
	ОтветственныйОтборПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПродукцияПриИзменении(Элемент)
	
	УстановитьВидимостьТаблицыКОформлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ТТНПродукцияПоДокументамПриИзменении(Элемент)

	УстановитьВидимостьТаблицыКОформлению();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокКОформлению

&НаКлиенте
Процедура СписокКОформлениюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокКОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	ИнтеграцияСАТУРНКлиент.ВыполнитьОбмен(
		ЭтотОбъект,
		ИнтеграцияСАТУРНКлиент.ОрганизацииДляОбмена(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Оформить(Команда)
	
	ОчиститьСообщения();
	Основание = Новый Массив;
		
	Если ТТНПродукция = 0 Тогда
		
		Если Не ИнтеграцияИСКлиент.ВыборСтрокиСпискаКорректен(Элементы.СписокКОформлению) Тогда
			Возврат;
		КонецЕсли;
	
		Для Каждого ИдентификаторСтроки Из Элементы.СписокКОформлению.ВыделенныеСтроки Цикл
			
			Основание.Добавить(ИдентификаторСтроки);
			
		КонецЦикла;
		
		Если НЕ ВозможностьВводаПогашенияИмпортаПродукции(Основание) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если Не ИнтеграцияИСКлиент.ВыборСтрокиСпискаКорректен(Элементы.СписокПоТоварнымНакладным) Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные = Элементы.СписокПоТоварнымНакладным.ТекущиеДанные;
		Основание = СписокИмпортируемыхПартийПоОтбору(ТекущиеДанные.ОрганизацияСАТУРН, ТекущиеДанные.МестоХранения, ТекущиеДанные.ДатаВвоза, ТекущиеДанные.НомерТТНАРГУС);
		
		Если Основание.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр( "ru = 'Нет данных для заполнения'"),, "СписокПоТоварнымНакладным");
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИнтеграцияСАТУРНКлиент.ОткрытьФормуСозданияДокумента(
		ИнтеграцияИСКлиентСервер.ИмяОбъектаИзИмениФормы(ЭтотОбъект),
		Основание,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Архивировать(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьРаспоряжения(ЭтотОбъект, Элементы.СписокКОформлению, ИнтеграцияСАТУРНКлиент,
		ПредопределенноеЗначение("Документ.ИмпортПродукцииСАТУРН.ПустаяСсылка"), "Ссылка");
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокументы(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Элементы.Список, ИнтеграцияСАТУРНКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьИмпорт(Команда)
	
	ИнтеграцияСАТУРНКлиент.ПодготовитьСообщенияКПередаче(
		Элементы.Список, ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеИмпорт"));

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВвоз(Команда)
	
	ИнтеграцияСАТУРНКлиент.ПодготовитьСообщенияКПередаче(
		Элементы.Список, ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитьВвоз"));

КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьИмпорт(Команда)
	
	ЗапросИмпортаЗавершение = Новый ОписаниеОповещения("Подключаемый_ЗапросИмпортаЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	
	Если ЗначениеЗаполнено(ОрганизацияСАТУРН) Тогда
		ПараметрыФормы.Вставить("Организация", ОрганизацияСАТУРН);
	КонецЕсли;
	
	ОткрытьФорму(
		"Документ.ИмпортПродукцииСАТУРН.Форма.ЗапросИмпортируемыхПартий",
		ПараметрыФормы,
		ЭтотОбъект,,,,
		ЗапросИмпортаЗавершение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Ошибки
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.Статус.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.ЗагрузитьЗначения(Документы.ИмпортПродукцииСАТУРН.СтатусыОшибок());
	ОтборЭлемента.ПравоеЗначение = СписокСтатусов;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиОшибкаПередачиГосИС);
	
	// Требуется ожидание
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Статус.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ДальнейшееДействие.ПутьКДанным);
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке;
	
	СписокДействий = Новый СписокЗначений;
	СписокДействий.ЗагрузитьЗначения(Документы.ИмпортПродукцииСАТУРН.ВсеТребующиеОжидания()); 
	ОтборЭлемента.ПравоеЗначение = СписокДействий;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.СтатусОбработкиПередаетсяГосИС);
	
	// Даты
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", Элементы.Дата.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТаблицыКОформлению()
	
	Если ТТНПродукция Тогда
		Элементы.СписокПоТоварнымНакладным.Видимость                          = Истина;
		Элементы.СписокПоДокументамКОформлениюКоманднаяПанельГруппа.Видимость = Истина;
		Элементы.СписокКОформлению.Видимость                                  = Ложь;
		Элементы.СписокКОформлениюКоманднаяПанельГруппа.Видимость             = Ложь;
	Иначе 
		Элементы.СписокПоТоварнымНакладным.Видимость                          = Ложь;
		Элементы.СписокПоДокументамКОформлениюКоманднаяПанельГруппа.Видимость = Ложь;
		Элементы.СписокКОформлению.Видимость                                  = Истина;
		Элементы.СписокКОформлениюКоманднаяПанельГруппа.Видимость             = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапросИмпортаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.СписокКОформлению.Обновить();
	
КонецПроцедуры

#Область ОтборДальнейшиеДействия

&НаСервереБезКонтекста
Функция ВсеТребующиеДействия()
	
	Возврат Документы.ИмпортПродукцииСАТУРН.ВсеТребующиеДействия();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВсеТребующиеОжидания()
	
	Возврат Документы.ИмпортПродукцииСАТУРН.ВсеТребующиеОжидания();
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоДальнейшемуДействиюСервер()
	
	ИнтеграцияСАТУРН.УстановитьОтборПоДальнейшемуДействию(
		Список, ДальнейшееДействие, ВсеТребующиеДействия(), ВсеТребующиеОжидания());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБыстрыйОтборСервер()
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		СтруктураБыстрогоОтбора.Свойство("ОрганизацииСАТУРН",              ОрганизацииСАТУРН);
		СтруктураБыстрогоОтбора.Свойство("ОрганизацияСАТУРН",              ОрганизацияСАТУРН);
		СтруктураБыстрогоОтбора.Свойство("ОрганизацииСАТУРНПредставление", ОрганизацииСАТУРНПредставление);
		
		ИнтеграцияСАТУРНКлиентСервер.УстановитьОтборыДинамическогоСпискаПоОрганизацииСАТУРН(ЭтотОбъект);
		
		ИнтеграцияИС.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Ответственный", Ответственный, СтруктураБыстрогоОтбора);
		
	КонецЕсли;
	
	СобытияФормСАТУРН.ЗаполнитьСписокВыбораОрганизацииПоСохраненнымНастройкам(ЭтотОбъект);
	
	Если ИнтеграцияСАТУРН.НеобходимОтборПоДальнейшемуДействиюПриСозданииНаСервере(ДальнейшееДействие, СтруктураБыстрогоОтбора) Тогда
		УстановитьОтборПоДальнейшемуДействиюСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьВидимостьДоступностьЭлементовСервер()
	
	Если НЕ ПравоДоступа("Добавление", Метаданные.Документы.ИмпортПродукцииСАТУРН) Тогда
		Элементы.СтраницаКОформлению.Видимость = Ложь;
	ИначеЕсли Параметры.ОткрытьРаспоряжения Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКОформлению;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()

	ИнтеграцияСАТУРНСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОтборПриИзменении()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список, "Ответственный", Ответственный, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ответственный));
	
КонецПроцедуры

&НаКлиенте
Функция ВозможностьВводаПогашенияИмпортаПродукции(Знач ВыделенныеСтроки)
	
	Если ВыделенныеСтроки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли ВыделенныеСтроки.Количество() = 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПогашениеИмпортаВозможно = ПроверитьПоКлючевымРеквизитамЕдинообразностьПартий(ВыделенныеСтроки);
	
	Если Не ПогашениеИмпортаВозможно Тогда
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Различаются ключевые реквизиты импортируемых партий. Выделенные строки должны быть включены в различные документы Импорта продукции'"),, "СписокКОформлению");
			Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СписокИмпортируемыхПартийПоОтбору(Организация, МестоХранения, ДатаВвоза, НомерТТН)
	
	МассивИмпортируемыхПартий = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИмпортируемаяПартияСАТУРН.Ссылка
		|ИЗ
		|	Справочник.ИмпортируемаяПартияСАТУРН КАК ИмпортируемаяПартияСАТУРН
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовСАТУРН КАК Статусы
		|		ПО ИмпортируемаяПартияСАТУРН.Ссылка = Статусы.Основание
		|ГДЕ
		|	НЕ ИмпортируемаяПартияСАТУРН.ПометкаУдаления
		|	И ИмпортируемаяПартияСАТУРН.ИдентификаторПартии = """"
		|	И Статусы.СтатусОформления В
		|	(ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.НеОформлено),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ОформленоЧастично),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ЕстьОшибкиОформления),
		|		ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.ТребуетсяСопоставлениеНоменклатуры))
		|	И ЕСТЬNULL(Статусы.Архивный, ЛОЖЬ) = ЛОЖЬ
		|	И ИмпортируемаяПартияСАТУРН.ОрганизацияСАТУРН = &ОрганизацияСАТУРН
		|	И ИмпортируемаяПартияСАТУРН.МестоХранения = &МестоХранения
		|	И ИмпортируемаяПартияСАТУРН.НомерТТНАРГУС = &НомерТТНАРГУС
		|	И ИмпортируемаяПартияСАТУРН.ДатаВвоза = &ДатаВвоза";
	
	Запрос.УстановитьПараметр("МестоХранения",     МестоХранения);
	Запрос.УстановитьПараметр("НомерТТНАРГУС",     НомерТТН);
	Запрос.УстановитьПараметр("ДатаВвоза",         ДатаВвоза);
	Запрос.УстановитьПараметр("ОрганизацияСАТУРН", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИмпортируемыхПартий.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивИмпортируемыхПартий;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьПоКлючевымРеквизитамЕдинообразностьПартий(МассивПартий)
	
	ПогашениеИмпортаВозможно = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИмпортируемаяПартияСАТУРН.ОрганизацияСАТУРН,
		|	ИмпортируемаяПартияСАТУРН.МестоХранения,
		|	ИмпортируемаяПартияСАТУРН.ДатаВвоза,
		|	ИмпортируемаяПартияСАТУРН.НомерТТНАРГУС
		|ИЗ
		|	Справочник.ИмпортируемаяПартияСАТУРН КАК ИмпортируемаяПартияСАТУРН
		|ГДЕ
		|	ИмпортируемаяПартияСАТУРН.Ссылка В (&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивПартий);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПогашениеИмпортаВозможно = (ВыборкаДетальныеЗаписи.Количество() = 1);
	
	Возврат ПогашениеИмпортаВозможно;
	
КонецФункции

#КонецОбласти

#КонецОбласти