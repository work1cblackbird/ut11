
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ввезено;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
//
// Параметры:
//   ТребуетсяПовторноеОформление - Булево.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено);
		Статусы.Добавить(Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//   СтруктураПараметров - Структура - Входящие данные.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеИмпорт);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитьВвоз);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбмене

// Статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий
		Или Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//   * ДополнительныеПараметры - Неопределено, Структура - 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.КПередаче;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен;
		Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.КПередаче;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий Тогда

		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();

		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ДокументСсылка);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		Статусы.ПринятДействия = РезультирующийСтатусДокумента.ДальнейшееДействие;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();
		
		Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки")
			И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
	
			РезультирующийСтатусДокумента = СтатусПоСтрокеИмпортируемойПартии(ДокументСсылка, ДополнительныеПараметры.ИдентификаторСтроки);
			Статусы.Принят = РезультирующийСтатусДокумента.Статус;
			Статусы.ПринятДействия = РезультирующийСтатусДокумента.ДальнейшееДействие;
			
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу Тогда

		Статусы = РегистрыСведений.СтатусыДокументовСАТУРН.СтруктураСтатусы();

		РезультирующийСтатусДокумента = РезультирующийСтатусДокумента(ДокументСсылка);
		Статусы.Принят = РезультирующийСтатусДокумента.Статус;
		Статусы.ПринятДействия = РезультирующийСтатусДокумента.ДальнейшееДействие;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.РассчитатьСтатусы(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиСообщенийСАТУРН.ЗаявкаВыполнена,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
		НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
			ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
		ПараметрыОбновления.ИдентификаторСтроки = "";
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийСАТУРН - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийСАТУРН - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
			
			ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
			НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
				ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
			
			ПараметрыОбновления.ИдентификаторСтроки = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиНакладнойСАТУРН - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовСАТУРН.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	АбстрактнаяОперация = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса);
	АбстрактнаяОперация.АбстрактнаяОперация = Истина;

	АбстрактнаяОперация = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу);
	АбстрактнаяОперация.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий);
	
	АбстрактнаяОперация = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса);
	АбстрактнаяОперация.АбстрактнаяОперация = Истина;

	АбстрактнаяОперация = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 22,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу);
	АбстрактнаяОперация.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 23,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 24,
		Исходящий,
		Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиИмпортаПродукцииСАТУРН - Новый статус.
//  ПараметрыОбновленияСтатуса - См. ИнтеграцияСАТУРНСлужебныйКлиентСервер.ПараметрыОбновленияСтатуса
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияСАТУРНПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус) <> Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус) = Неопределено Тогда
		РасчетСтатусовОформленияСАТУРН.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		РегистрыСведений.МестаХраненияПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		РегистрыНакопления.ОстаткиПартийСАТУРН.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменСАТУРН

Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитьВвоз);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеИмпорт);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииСАТУРН.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ИмпортПродукцииСАТУРН, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ИмпортПродукцииСАТУРН);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ИмпортПродукцииСАТУРН, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ИмпортПродукцииСАТУРН, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Обмен

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт

	РеквизитыИсходящегоСообщения          = ЭлементОчереди.РеквизитыИсходящегоСообщения;

	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента Тогда

		СообщенияJSON = Новый Массив;
		
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщения.ИдентификаторЗаявки;
		СообщениеJSON.ИдентификаторСтроки = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
		
		СообщениеJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииПодтверждениеПриемки;
		СообщениеJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция, СообщениеJSON.Документ);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);

	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий Тогда
	
		ВходящиеДанные = ИнтеграцияСАТУРНСлужебный.ОбработатьРезультатЗапросаСпискаОбъектов(ПолученныеДанные, ПараметрыОбмена);
		ИнтеграцияСАТУРНСлужебный.СсылкиПоИдентификаторам(ПараметрыОбмена, ИзмененныеОбъекты);

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ИмпортПродукцииСАТУРН.ПолноеИмя());
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.Документ);
		
		Попытка
			
			ДокументОбъект = ЭлементОчереди.Документ.ПолучитьОбъект();
			Блокировка.Заблокировать();

			Для Каждого СтрокаДанныхИмпортируемыхПартий Из ВходящиеДанные Цикл
				
				ДанныеОбъекта   = Справочники.ИмпортируемаяПартияСАТУРН.ДанныеОбъекта(СтрокаДанныхИмпортируемыхПартий);
				Справочники.ИмпортируемаяПартияСАТУРН.ЗагрузитьОбъект(ДанныеОбъекта, ПараметрыОбмена,,, ЭлементОчереди.ОрганизацияСАТУРН);
				
				Если ЗначениеЗаполнено(ДанныеОбъекта.ИдентификаторПартии) Тогда
					
					Партия = Справочники.ПартииСАТУРН.Партия(ДанныеОбъекта.ИдентификаторПартии, ПараметрыОбмена);
					
					Для Каждого СтрокаТоваров Из ДокументОбъект.Товары Цикл
						
						Если Не СтрокаТоваров.Идентификатор = ДанныеОбъекта.Идентификатор Тогда
							Продолжить;
						КонецЕсли;
						
						СтрокаТоваров.Партия = Партия;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
		
			ДокументОбъект.Записать();
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу Тогда
	
		СообщенияJSON = Новый Массив;
		
		СообщениеЧтениеПартийJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		ИнтеграцияСАТУРНСлужебный.ЗаполнитьСообщениеПоИсточнику(СообщениеЧтениеПартийJSON, РеквизитыИсходящегоСообщения);
		
		СообщениеЧтениеПартийJSON.ИдентификаторЗаявки = РеквизитыИсходящегоСообщения.ИдентификаторЗаявки;
		СообщениеЧтениеПартийJSON.ИдентификаторСтроки = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
		
		СообщениеЧтениеПартийJSON.Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий;
		СообщениеЧтениеПартийJSON.Описание = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеЧтениеПартийJSON.Операция, СообщениеЧтениеПартийJSON.Документ);
		
		СообщениеЧтениеПартийJSON.ПараметрыЗапроса = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
		
		СообщениеЧтениеПартийJSON.АргументыОперации = Новый Структура();
		СообщениеЧтениеПартийJSON.АргументыОперации.Вставить("filters",      РеквизитыИсходящегоСообщения.ПараметрыЗапроса.Отборы);
		СообщениеЧтениеПартийJSON.АргументыОперации.Вставить("getFullCards", 1);
		
		СообщенияJSON.Добавить(СообщениеЧтениеПартийJSON);
		
		ИнтеграцияСАТУРНСлужебный.ПодготовитьКПередачеИсходныеСообщения(СообщенияJSON, ПараметрыОбмена);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ИмпортПродукцииСАТУРН - Ссылка на документ итмпорта.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюСАТУРН - Дальнейшее действие.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON - Сообщения к передаче.
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	СообщенияJSON = Новый Массив();
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ПодтвердитеИмпорт Тогда
		
		СообщенияJSON = ПодтверждениеПолученияИмпортаПродукцииСАТУРН(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ЗагрузитеПартииИмпорта Тогда
		
		СообщенияJSON = ОбновитьДанныеПартийИмпортаПродукцииСАТУРН(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитьВвоз Тогда
		
		СообщенияJSON = ОтменитьВвозИмпортаПродукцииСАТУРН(ДокументСсылка, ДополнительныеПараметры);
	
	КонецЕсли;

	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОтменитьВвозИмпортаПродукцииСАТУРН(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияJSON = Новый Массив;
	
	ДанныеИсходногоДокумента = ДанныеДокументаИмпортаПродукции(ДокументСсылка);
	
	Шапка  = ДанныеИсходногоДокумента.Шапка;
	Данные = ДанныеИсходногоДокумента.Данные;
	
	МассивИдентификаторов = Новый Массив;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеПоДокументуJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу, НомерВерсии);
	АбстрактноеСообщениеПоДокументуJSON.АргументыОперации = Новый Структура;
	АбстрактноеСообщениеПоДокументуJSON.ПараметрыЗапроса  = Новый Структура;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеПоДокументуJSON);

	Пока Данные.Следующий() Цикл
	
		АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса, НомерВерсии);
		АбстрактноеСообщениеJSON.АргументыОперации   = Новый Структура;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		АбстрактноеСообщениеJSON.ИдентификаторСтроки = Данные.ИдентификаторСтроки;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки = Данные.ИдентификаторСтроки;
		
		АбстрактноеСообщениеJSON.ЗагружатьДо = АбстрактноеСообщениеПоДокументуJSON.Идентификатор;
		
		АбстрактноеСообщениеJSON.ЯвляетсяОснованиемСообщений = Истина;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ            = ДокументСсылка;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ИдентификаторСтроки = Данные.ИдентификаторСтроки;
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииОтменаПриемки;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция);
		СообщениеJSON.АргументыОперации   = Новый Структура;
		СообщениеJSON.ИдентификаторЗаявки = Данные.ИдентификаторСтроки;
		СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
		СообщениеJSON.СообщениеОснование  = АбстрактноеСообщениеJSON.Идентификатор;
		
		СообщениеJSON.АргументыОперации.Вставить("theCard", Новый Структура);
		ДанныеДокумента = СообщениеJSON.АргументыОперации.theCard;
		
		ДанныеДокумента.Вставить("_id", Данные.Идентификатор);
		
		МассивИдентификаторов.Добавить(Данные.Идентификатор);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
	МассивОтборов = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("column",    "id");
	Отбор.Вставить("condition", "=");
	Отбор.Вставить("value",     МассивИдентификаторов);

	МассивОтборов.Добавить(Отбор);
	
	АбстрактноеСообщениеПоДокументуJSON.ПараметрыЗапроса.Вставить("Отборы", МассивОтборов);

	Возврат СообщенияJSON;
	
КонецФункции

Функция ПодтверждениеПолученияИмпортаПродукцииСАТУРН(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияJSON = Новый Массив;
	
	ДанныеИсходногоДокумента = ДанныеДокументаИмпортаПродукции(ДокументСсылка);
	
	Шапка  = ДанныеИсходногоДокумента.Шапка;
	Данные = ДанныеИсходногоДокумента.Данные;
	
	МассивИдентификаторов = Новый Массив;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеПоДокументуJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
		Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатусовПоДокументу, НомерВерсии);
	АбстрактноеСообщениеПоДокументуJSON.АргументыОперации = Новый Структура;
	АбстрактноеСообщениеПоДокументуJSON.ПараметрыЗапроса  = Новый Структура;
	
	СообщенияJSON.Добавить(АбстрактноеСообщениеПоДокументуJSON);

	Пока Данные.Следующий() Цикл
	
		АбстрактноеСообщениеJSON = ИнтеграцияСАТУРНСлужебный.ИнициализироватьСообщениеJSON(
			Шапка, ДокументСсылка, Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса, НомерВерсии);
		АбстрактноеСообщениеJSON.АргументыОперации   = Новый Структура;
		АбстрактноеСообщениеJSON.ПараметрыЗапроса    = Новый Структура;
		АбстрактноеСообщениеJSON.ИдентификаторСтроки = Данные.ИдентификаторСтроки;
		АбстрактноеСообщениеJSON.ИдентификаторЗаявки = Данные.ИдентификаторСтроки;
		АбстрактноеСообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеПоДокументуJSON.Идентификатор;
		
		АбстрактноеСообщениеJSON.ЯвляетсяОснованиемСообщений = Истина;
		
		СообщенияJSON.Добавить(АбстрактноеСообщениеJSON);
	
		СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ            = ДокументСсылка;
		СообщениеJSON.Версия              = НомерВерсии;
		СообщениеJSON.ИдентификаторЗаявки = Данные.ИдентификаторСтроки;
		СообщениеJSON.ИдентификаторСтроки = Данные.ИдентификаторСтроки;
		СообщениеJSON.Операция            = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииИзменениеДокумента;
		СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция);
		СообщениеJSON.АргументыОперации   = Новый Структура;
		СообщениеJSON.ЗагружатьДо         = АбстрактноеСообщениеJSON.Идентификатор;
		СообщениеJSON.СообщениеОснование  = АбстрактноеСообщениеJSON.Идентификатор;
		
		СообщениеJSON.АргументыОперации.Вставить("theCard", Новый Структура);
		ДанныеДокумента = СообщениеJSON.АргументыОперации.theCard;
		
		ДанныеДокумента.Вставить("_id",               Данные.Идентификатор);
		ДанныеДокумента.Вставить("targetWarehouseId", Данные.ИдентификаторСклада);
		
		Если ЗначениеЗаполнено(Данные.ДатаПолучения) Тогда
			ДанныеДокумента.Вставить("dateReceive",       Данные.ДатаПолучения);
		КонецЕсли;

		ДанныеДокумента.Вставить("description",       Данные.Комментарий);
		
		ИдентификаторПартии   = Данные.Идентификатор;
		МассивИдентификаторов.Добавить(ИдентификаторПартии);
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
	КонецЦикла;
	
	МассивОтборов         = Новый Массив;
	
	Отбор = Новый Структура;
	Отбор.Вставить("column",    "id");
	Отбор.Вставить("condition", "=");
	Отбор.Вставить("value",     МассивИдентификаторов);

	МассивОтборов.Добавить(Отбор);
	
	АбстрактноеСообщениеПоДокументуJSON.ПараметрыЗапроса.Вставить("Отборы", МассивОтборов);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ОбновитьДанныеПартийИмпортаПродукцииСАТУРН(ДокументСсылка, ДополнительныеПараметры)
	
	Операция      = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииЧтениеПартий;
	СообщенияJSON = Новый Массив;
	
	ДанныеИсходногоДокумента = ДанныеДокументаИмпортаПродукции(ДокументСсылка);
	
	СообщениеJSON = ИнтеграцияСАТУРНСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Документ            = ДокументСсылка;
	СообщениеJSON.Операция            = Операция;
	СообщениеJSON.Описание            = ИнтеграцияСАТУРНСлужебный.ОписаниеОперацииПередачиДанных(СообщениеJSON.Операция);
	СообщениеJSON.АргументыОперации   = Новый Структура;
	СообщениеJSON.ИдентификаторСтроки = ДанныеИсходногоДокумента.ИдентификаторСтроки;
	
	МассивОтборов         = Новый Массив;
	МассивИдентификаторов = Новый Массив;
	
	Пока ДанныеИсходногоДокумента.Следующий() Цикл
	
		ИдентификаторПартии   = ДанныеИсходногоДокумента.ИдентификаторСтроки;
		МассивИдентификаторов.Добавить(ИдентификаторПартии);
		
		НомерВерсии = ДанныеИсходногоДокумента.ПоследнийНомерВерсии + 1;
		СообщениеJSON.Версия              = НомерВерсии;
		
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("column",    "id");
	Отбор.Вставить("condition", "=");
	Отбор.Вставить("value",     МассивИдентификаторов);
	
	МассивОтборов.Добавить(Отбор);
	
	СообщениеJSON.АргументыОперации.Вставить("filters",      МассивОтборов);
	СообщениеJSON.АргументыОперации.Вставить("getFullCards", 1);
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ДанныеДокументаИмпортаПродукции(ДокументИмпорт)
	
	Операция = Перечисления.ВидыОперацийСАТУРН.ИмпортПродукцииРасчетСтатуса;
	
	РезультатВозврата = Новый Структура("Шапка, Данные");
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.САТУРНПрисоединенныеФайлы КАК ПрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИмпортПродукцииСАТУРН КАК Шапка
	|		ПО Шапка.Ссылка                 = &ДокументИмпорт
	|		 И Шапка.Ссылка                 = ПрисоединенныеФайлы.Документ
	|		 И ПрисоединенныеФайлы.Операция = &Операция
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	ДокументСписок.ОрганизацияСАТУРН         КАК ОрганизацияСАТУРН,
	|	ДокументСписок.ДокументОснование         КАК ДокументОснование,
	|	ДокументСписок.ДатаПолучения             КАК ДатаПолучения,
	|	ДокументСписок.Комментарий               КАК Комментарий
	|ИЗ
	|	Документ.ИмпортПродукцииСАТУРН КАК ДокументСписок
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|			ПО ДокументСписок.Ссылка = Версии.Ссылка
	|ГДЕ
	|	ДокументСписок.Ссылка = &ДокументИмпорт",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИмпортПродукцииСАТУРНТовары.НомерСтроки КАК                       НомерСтроки,
	|	ИмпортПродукцииСАТУРНТовары.ИмпортируемаяПартия.Идентификатор КАК ИдентификаторСтроки,
	|	ИмпортПродукцииСАТУРНТовары.Идентификатор КАК                     Идентификатор,
	|	ДокументСписок.МестоХранения.Идентификатор КАК                    ИдентификаторСклада,
	|	ДокументСписок.ДатаПолучения КАК                                  ДатаПолучения,
	|	ДокументСписок.Комментарий КАК                                    Комментарий
	|ИЗ
	|	Документ.ИмпортПродукцииСАТУРН.Товары КАК ИмпортПродукцииСАТУРНТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИмпортПродукцииСАТУРН КАК ДокументСписок
	|		ПО ИмпортПродукцииСАТУРНТовары.Ссылка = ДокументСписок.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
	|		ПО ИмпортПродукцииСАТУРНТовары.Ссылка = СтатусыДокументовСАТУРН.Документ
	|		И ИмпортПродукцииСАТУРНТовары.Идентификатор = СтатусыДокументовСАТУРН.ИдентификаторСтроки
	|ГДЕ
	|	ДокументСписок.Ссылка = &ДокументИмпорт
	|	И НЕ ИмпортПродукцииСАТУРНТовары.Идентификатор = """"
	|	И НЕ ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИмпортаПродукцииСАТУРН.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено)
	|	И НЕ ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус,
	|		ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИмпортаПродукцииСАТУРН.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен)",
	"Данные");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументИмпорт", ДокументИмпорт);
	Запрос.УстановитьПараметр("Операция",       Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Данные  = РезультатЗапроса["Данные"].Выбрать();
	//@skip-warning
	Шапка   = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	
	РезультатВозврата.Шапка  = Шапка;
	РезультатВозврата.Данные = Данные;
	
	Возврат РезультатВозврата;
	
КонецФункции

Функция СтатусПоСтрокеИмпортируемойПартии(ДокументСсылка, ИдентификаторСтроки)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	СписокИмпортируемаяПартияСАТУРН.Статус КАК Статус
		|ИЗ
		|	Документ.ИмпортПродукцииСАТУРН.Товары КАК ИмпортПродукцииСАТУРНТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИмпортируемаяПартияСАТУРН КАК СписокИмпортируемаяПартияСАТУРН
		|		ПО ИмпортПродукцииСАТУРНТовары.ИмпортируемаяПартия = СписокИмпортируемаяПартияСАТУРН.Ссылка
		|ГДЕ
		|	ИмпортПродукцииСАТУРНТовары.Ссылка = &Ссылка
		|	И ИмпортПродукцииСАТУРНТовары.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Ссылка",        ДокументСсылка);
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыОбъектовСАТУРН.Актуально Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено;
			Результат.ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
			
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыОбъектовСАТУРН.Отменен Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен;
			Результат.ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
			
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыОбъектовСАТУРН.Архив Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Архив;
			Результат.ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.НеТребуется);
			
		Иначе
			
			Результат.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ввезено;
			Результат.ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РезультирующийСтатусДокумента(ДокументСсылка)
	
	Результат = Новый Структура;
	Результат.Вставить("Статус",             Неопределено);
	Результат.Вставить("ДальнейшееДействие", Новый Массив);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Товары.Идентификатор                                   КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыДокументовСАТУРН.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
		|ИЗ
		|	Документ.ИмпортПродукцииСАТУРН.Товары КАК Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументовСАТУРН
		|		ПО Товары.Ссылка = СтатусыДокументовСАТУРН.Документ
		|		И СтатусыДокументовСАТУРН.ИдентификаторСтроки = Товары.Идентификатор
		|ГДЕ
		|	Товары.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ЕстьСформировано = Ложь;
	ЕстьОшибки       = Ложь;
	ЕстьВвезенные    = Ложь;
	ЕстьОтмененные   = Ложь;
	
	ДальнейшееДействие = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено Тогда
			
			ЕстьСформировано = Истина;
			
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается Тогда
			
			Результат.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Обрабатывается;
			Результат.ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОжидайтеЗавершенияОбработкиДанных);
	
			Возврат Результат;
			
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ввезено Тогда
			
			ЕстьВвезенные = Истина;
			
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен Тогда
			
			ЕстьОтмененные = Истина;
			
		Иначе
			
			ЕстьОшибки = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДальнейшееДействие = Новый Массив;
	
	Если ЕстьСформировано И ЕстьОшибки Тогда
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.ПолученоЧастично;
		ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		
	ИначеЕсли ЕстьСформировано И Не ЕстьВвезенные Тогда
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено;
		
	ИначеЕсли ЕстьОтмененные И ЕстьОшибки Тогда
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
		
	ИначеЕсли ЕстьОтмененные Тогда
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Отменен;
		
	ИначеЕсли ЕстьСформировано И ЕстьВвезенные Тогда
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.ПолученоЧастично;
		ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		
	ИначеЕсли ЕстьВвезенные Тогда
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ввезено;
		ДальнейшееДействие = ДальнейшееДействиеПоУмолчанию();
		
	Иначе
		
		Статус = Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Ошибка;
		ДальнейшееДействие.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюСАТУРН.ОтменитеОперацию);
	
	КонецЕсли;
	
	Результат.Статус = Статус;
	Результат.ДальнейшееДействие = ДальнейшееДействие;
	
	Возврат Результат;
	
КонецФункции

#Область Проведение

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ИмпортПродукцииСАТУРН КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК СтатусыДокументов
	|		ПО СтатусыДокументов.Документ = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	Шапка.ДатаПолучения                    КАК Период,
	|	0                                      КАК ВОбработкеСАТУРН,
	|	ТаблицаТовары.КоличествоСАТУРН         КАК КоличествоСАТУРН,
	|	ТаблицаТовары.Партия                   КАК Партия
	|ИЗ
	|	Документ.ИмпортПродукцииСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИмпортПродукцииСАТУРН.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|			ПО ТаблицаТовары.Ссылка = Статусы.Документ
	|			И ТаблицаТовары.Идентификатор = Статусы.ИдентификаторСтроки
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено)
	|	И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаМестаХраненияПартийСАТУРН(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "МестаХраненияПартийСАТУРН";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Шапка.ДатаПолучения        КАК Период,
	|	Шапка.ОрганизацияСАТУРН    КАК ОрганизацияСАТУРН,
	|	Шапка.МестоХранения        КАК МестоХранения,
	|	ТаблицаТовары.Партия КАК Партия
	|ИЗ
	|	Документ.ИмпортПродукцииСАТУРН КАК Шапка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ИмпортПродукцииСАТУРН.Товары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовСАТУРН КАК Статусы
	|			ПО ТаблицаТовары.Ссылка = Статусы.Документ
	|			И ТаблицаТовары.Идентификатор = Статусы.ИдентификаторСтроки
	|		ПО Шапка.Ссылка = ТаблицаТовары.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка
	|	И Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено)
	|	И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.ПартииСАТУРН.ПустаяСсылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиАктаПримененияСАТУРН- статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиИмпортаПродукцииСАТУРН.Получено);
	
	Возврат Статусы;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
