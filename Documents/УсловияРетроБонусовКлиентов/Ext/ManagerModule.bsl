//@strict-types

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив из Строка - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("РетроБонусы");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка.УсловияРетроБонусовКлиентов, ДокументОбъект.УсловияРетроБонусовКлиентов - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//	СписокЗначений Из Строка - список значений, содержащий тексты запросов и их имена.
//						Возвращается в случае, если свойство 'ПолучитьТекстыЗапроса' параметра ДопПараметры
//						имеет значение Истина.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.УсловияРетроБонусовКлиентов") Тогда
		
		ДокументОбъект = Документ;
		ДокументСсылка = Документ.Ссылка;
		
	Иначе
		
		ДокументОбъект = Документ.ПолучитьОбъект();
		ДокументСсылка = Документ;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений; // СписокЗначений из Строка
	
	ПолучитьДанныеДокумента(Запрос, ДокументСсылка);
	
	Если НЕ ДопПараметры.ПолучитьТекстыЗапроса Тогда
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаУсловия(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаКонтрагенты(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаИННКонтрагентов(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаСегментыПартнеров(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаДоговорыСоглашения(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаТовары(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаСегментыТоваров(ТекстыЗапроса, Регистры, ДокументОбъект);
		ТекстЗапросаТаблицаРетроБонусыКлиентов(ТекстыЗапроса, Регистры, ДокументОбъект);
		
	КонецЕсли;
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

#Область Прочее

// Параметры очистки реквизитов ТЧ участников
// 
// Возвращаемое значение:
//  Структура - Параметры очистки реквизитов участников:
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов -
//	* ОтборУчастников - ПеречислениеСсылка.СоставыСписковРетроБонусов -
// 
Функция ПараметрыОчисткиРеквизитовУчастников() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("СоставУчастников", Перечисления.СоставыУчастниковРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ОтборУчастников", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	
	Возврат НовыеПараметры;
	
КонецФункции

// Выполняет очистку неиспользуемых реквизитов участников условий ретро-бонусов
// 
// Параметры:
//  Объект - ДокументОбъект.УсловияРетроБонусовКлиентов -
//  	   - ДанныеФормыСтруктура: см. Документы.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Объект -
//  Параметры - см. ПараметрыОчисткиРеквизитовУчастников
//
Процедура ОчиститьНеиспользуемыеРеквизитыУчастников(Объект, Параметры) Экспорт
	
	ОчиститьНеиспользуемыеРеквизитыКонтрагенты(Объект, Параметры);
	ОчиститьНеиспользуемыеРеквизитыИННКонтрагентов(Объект, Параметры);
	ОчиститьНеиспользуемыеРеквизитыСегментыПартнеров(Объект, Параметры);
	ОчиститьНеиспользуемыеРеквизитыДоговорыСоглашения(Объект, Параметры);
	
КонецПроцедуры

// Устанавливает корректные значения для указания плана участников
//
// Параметры:
//  Объект - ДокументОбъект.УсловияРетроБонусовКлиентов - 
//		   - ДанныеФормыСтруктура: см. Документы.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Объект -
//  Параметры - см. ПараметрыОчисткиРеквизитовУчастников
//  ИзмененныйУчастник - Неопределено - Обработать все строки документа
//  				   - СправочникСсылка.Партнеры, СправочникСсылка.Контрагенты - изменившееся значения для обработки 
//
Процедура УстановитьПризнакиРасчетаПланаУчастников(Объект, Параметры, ИзмененныйУчастник = Неопределено) Экспорт
	
	Если Объект.БезРасчета
	 ИЛИ Объект.ОтборУчастников <> Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПризнакиРасчетаПоКонтрагентуКлиенту(Объект, Параметры);
	
	УстановитьПризнакиРасчетаПланаУчастниковРасхождениеСоставаИРасчета(Объект, Параметры);
	УстановитьПризнакиРасчетаПланаУчастниковСовпадениеСоставаИРасчета(Объект, Параметры, ИзмененныйУчастник);
	УстановитьПризнакиРасчетаПланаДоговорыСоглашения(Объект, Параметры, ИзмененныйУчастник);
	
	УстановитьПризнакиРасчетаПланаИННКонтрагентов(Объект, Параметры);
	
КонецПроцедуры

// Параметры очистки реквизитов ТЧ товаров
// 
// Возвращаемое значение:
//  Структура - Параметры очистки реквизитов участников:
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов -
//	* ОтборТоваров - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* ПоказательПродаж - ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов -
//	* БазаРасчета - ПеречислениеСсылка.БазыРасчетаПродажРетроБонусов -
//
Функция ПараметрыОчисткиРеквизитовТоваров() Экспорт
	
	НовыеПараметры = Новый Структура;
	НовыеПараметры.Вставить("СоставТоваров", Перечисления.СоставыТоваровРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ОтборТоваров", Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("ПоказательПродаж", Перечисления.ЦелевыеПоказателиПродажРетроБонусов.ПустаяСсылка());
	НовыеПараметры.Вставить("БазаРасчета", Перечисления.БазыРасчетаПродажРетроБонусов.ПустаяСсылка());
	
	Возврат НовыеПараметры;
	
КонецФункции

// Выполняет очистку неиспользуемых реквизитов товаров условий ретро-бонусов
// 
// Параметры:
//  Объект - ДокументОбъект.УсловияРетроБонусовКлиентов -
//  	   - ДанныеФормыСтруктура: см. Документы.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Объект -
//  Параметры - см. ПараметрыОчисткиРеквизитовТоваров
//
Процедура ОчиститьНеиспользуемыеРеквизитыТоваров(Объект, Параметры) Экспорт
	
	Если Параметры.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
		
		Объект.СегментыТоваров.Очистить();
		
	ИначеЕсли Параметры.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		
		Объект.Товары.Очистить();
		
	Иначе
		
		Объект.Товары.Очистить();
		Объект.СегментыТоваров.Очистить();
		
	КонецЕсли;
	
	Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		
		Объект.Товары.Очистить();
		Объект.СегментыТоваров.Очистить();
		
	Иначе
		
		ПустаяДата = Дата(1, 1, 1);
		ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
		ЗапретПревышенияПоСумме =
			(Параметры.ПоказательПродаж = ПоказателиПродаж.Сумма
			 И Объект.ЗапретНачисленияСверхПлана);
		
		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			
			Если НЕ СтрокаТЧ.ИсходнаяСтрока Тогда
			
				СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата; 
				СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
			КонецЕсли;
			
			Если НЕ Объект.Исправление Тогда
				
				СтрокаТЧ.Отменено = Ложь;
				СтрокаТЧ.ИсходнаяСтрока = Ложь;
				
			КонецЕсли;
			
			Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
				
				СтрокаТЧ.НачалоДействия = ПустаяДата;
				СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
				СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
				СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
				СтрокаТЧ.КоличествоПлан = 0;
				СтрокаТЧ.БазоваяЦена = 0;
				СтрокаТЧ.Процент = 0;
				
			КонецЕсли;
			
			Если Параметры.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
				
				Если (Параметры.ПоказательПродаж <> ПоказателиПродаж.Количество
					  И Параметры.ПоказательПродаж <> ПоказателиПродаж.КоличествоСовокупно
					  И Параметры.ПоказательПродаж <> ПоказателиПродаж.ПакетноеПредложение) Тогда
					
					СтрокаТЧ.КоличествоПлан = 0;
					
				КонецЕсли;
				
				Если Параметры.БазаРасчета <> Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены Тогда
					
					СтрокаТЧ.БазоваяЦена = 0;
					
				КонецЕсли;
				
				Если НЕ РетроБонусыКлиентСервер.ИспользуетсяПериодУсловийТоваров(Параметры.ПоказательПродаж) Тогда
					
					СтрокаТЧ.НачалоДействия = ПустаяДата;
					СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
					СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
					СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
					
				КонецЕсли;
				
				Если ЗапретПревышенияПоСумме Тогда
					
					СтрокаТЧ.Процент = 0;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ Объект.Исправление Тогда
			
			Для Каждого СтрокаТЧ Из Объект.СегментыТоваров Цикл
			
				СтрокаТЧ.Отменено = Ложь;
				СтрокаТЧ.ИсходнаяСтрока = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает актуальные данные по заданному условию (документ должен быть проведен)
//
// Параметры:
//  ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов - Документ условий
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//	* БезРасчета - Булево -
//	* НачалоДействия - Дата -
//	* ОкончаниеДействия - Дата -
//	* Организация - СправочникСсылка.Организации -
//	* Валюта - СправочникСсылка.Валюты -
//	* ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов -
//	* ДетализацияРасчетаУчастниковПредставление - Строка -
//	* ПериодичностьНачислений - ПеречислениеСсылка.ПериодичностиРетроБонусов -
//	* ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов -
//	* ПериодичностьУсловийПредставление - Строка -
//	* СегментыЗафиксированы - Булево -
//	* СоставТоваров - ПеречислениеСсылка.СоставыТоваровРетроБонусов -
//	* СоставУчастников - ПеречислениеСсылка.СоставыУчастниковРетроБонусов -
//	* Участники - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* Товары - ПеречислениеСсылка.СоставыСписковРетроБонусов -
//	* ЗапретНачисленияСверхПлана - Булево -
//	* ПоказательПродаж - ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов -
//	* ПоказательПродажПредставление - Строка -
//	* БазаРасчетаПродаж - ПеречислениеСсылка.БазыРасчетаПродажРетроБонусов -
//	* УчитыватьНДС - Булево -
//	* ПорядокРаспределения - ПеречислениеСсылка.ПорядкиРаспределенияРетроБонусов -
//	* ДокументУсловийРетроБонусовПредставление - Строка -
// 
Функция АктуальныеДанные(ДокументУсловий) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РетроБонусыКлиентовУсловия.ДокументУсловий.БезРасчета КАК БезРасчета,
	|	РетроБонусыКлиентовУсловия.НачалоДействия КАК НачалоДействия,
	|	РетроБонусыКлиентовУсловия.ОкончаниеДействия КАК ОкончаниеДействия,
	|	РетроБонусыКлиентовУсловия.Организация КАК Организация,
	|	РетроБонусыКлиентовУсловия.Валюта КАК Валюта,
	|	РетроБонусыКлиентовУсловия.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РетроБонусыКлиентовУсловия.ДетализацияРасчетаУчастников) КАК ДетализацияРасчетаУчастниковПредставление,
	|	РетроБонусыКлиентовУсловия.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	РетроБонусыКлиентовУсловия.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РетроБонусыКлиентовУсловия.ПериодичностьУсловий) КАК ПериодичностьУсловийПредставление,
	|	РетроБонусыКлиентовУсловия.СегментыЗафиксированы КАК СегментыЗафиксированы,
	|	РетроБонусыКлиентовУсловия.СоставТоваров КАК СоставТоваров,
	|	РетроБонусыКлиентовУсловия.СоставУчастников КАК СоставУчастников,
	|	РетроБонусыКлиентовУсловия.Участники КАК Участники,
	|	РетроБонусыКлиентовУсловия.Товары КАК Товары,
	|	РетроБонусыКлиентовУсловия.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	РетроБонусыКлиентовУсловия.Вид.ПоказательПродаж КАК ПоказательПродаж,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РетроБонусыКлиентовУсловия.Вид.ПоказательПродаж) КАК ПоказательПродажПредставление,
	|	РетроБонусыКлиентовУсловия.Вид.БазаРасчетаПродаж КАК БазаРасчетаПродаж,
	|	РетроБонусыКлиентовУсловия.Вид.УчитыватьНДС КАК УчитыватьНДС,
	|	РетроБонусыКлиентовУсловия.Вид.ПорядокРаспределения КАК ПорядокРаспределения,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(РетроБонусыКлиентовУсловия.ДокументУсловий) КАК ДокументУсловийРетроБонусовПредставление
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовУсловия КАК РетроБонусыКлиентовУсловия
	|ГДЕ
	|	РетроБонусыКлиентовУсловия.ДокументУсловий = &ДокументУсловий";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДокументУсловий", ДокументУсловий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Определяет, есть ли право у текущего пользователя на непосредственное согласование документа условий ретро-бонусов клиентов
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьПравоСогласования() Экспорт
	
	Результат = Пользователи.РолиДоступны(Метаданные.Роли.ПравоСогласованияУсловийРетроБонусовКлиентов.Имя);
	
	Возврат Результат;
	
КонецФункции

// Разрешенные статусы документа к установке для текущего пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
//
Функция РазрешенныеСтатусыКУстановке() Экспорт
	
	РазрешенныеСтатусы = Новый Массив; // Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
	
	Если Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить() Тогда
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	Иначе
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании);
		
		Если ЕстьПравоСогласования() Тогда
		
			РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
		КонецЕсли;
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	КонецЕсли;
	
	Возврат РазрешенныеСтатусы;
	
КонецФункции

// Разрешенные статусы документа с возможностью изменения документа для текущего пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
//
Функция РазрешенныеСтатусыКИзменению() Экспорт
	
	РазрешенныеСтатусы = Новый Массив; // Массив из ПеречислениеСсылка.СтатусыДокументовРетроБонусов
	
	Если Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить() Тогда
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	Иначе
		
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.Черновик);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НаСогласовании);
		РазрешенныеСтатусы.Добавить(Перечисления.СтатусыДокументовРетроБонусов.НеСогласован);
		
	КонецЕсли;
	
	Возврат РазрешенныеСтатусы;
	
КонецФункции

// Определяет, разрешено ли изменение документа по переданному статусу
// 
// Параметры:
//  СтатусДокумента - ПеречислениеСсылка.СтатусыДокументовРетроБонусов
// 
// Возвращаемое значение:
//  Булево
//
Функция РазрешеноИзменениеПоСтатусу(Знач СтатусДокумента) Экспорт
	
	Результат = Истина;
	
	Если НЕ СтатусДокумента.Пустая() Тогда
		
		РазрешенныеСтатусы = РазрешенныеСтатусыКИзменению();
		Результат = (РазрешенныеСтатусы.Найти(СтатусДокумента) <> Неопределено);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	#Область СозданиеКорректировки
	НоваяКоманда = ИсправлениеДокументов.ДобавитьКомандуИсправление(
		КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	Если НоваяКоманда <> Неопределено Тогда
		
		НоваяКоманда.Представление = НСтр("ru = 'Корректировка условий ретро-бонусов клиентов'");
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"БезРасчета",
			Ложь);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"Статус",
			Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область СозданиеНачисления
	НоваяКоманда = Документы.НачислениеРетроБонусовКлиента.ДобавитьКомандуСоздатьНаОсновании(
		КомандыСозданияНаОсновании, Параметры);
	Если НоваяКоманда <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"БезРасчета",
			Истина);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"НачислитьСразу",
			Ложь);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"Статус",
			Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ГрупповоеНачислениеРетроБонусов
	НоваяКоманда = Обработки.ГрупповоеНачислениеРетроБонусовКлиентов.ДобавитьКомандуСоздатьНаОсновании(
		КомандыСозданияНаОсновании, Параметры);
	Если НоваяКоманда <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"НачислитьСразу",
			Ложь);
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			НоваяКоманда,
			"Статус",
			Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

// Подготавливает данные печати.
// 
// Параметры:
//  ИсточникиДанных - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.ИсточникиДанных
//  ВнешниеНаборыДанных - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.ВнешниеНаборыДанных
//  КодЯзыка - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.КодЯзыка
//  ДополнительныеПараметры - см. УправлениеПечатьюПереопределяемый.ПриПодготовкеДанныхПечати.ДополнительныеПараметры
//
Процедура ПриПодготовкеДанныхПечати(ИсточникиДанных, ВнешниеНаборыДанных, КодЯзыка, ДополнительныеПараметры) Экспорт
	
	//++ Локализация
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаАктуальныеДанные();
	Запрос.УстановитьПараметр("МассивОбъектов", ИсточникиДанных);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	НаибольшийИндекс = МассивРезультатов.ВГраница();
	РезультатДоговорыСоглашения = МассивРезультатов[НаибольшийИндекс - 7];
	РезультатПереопределяемыеПоля = МассивРезультатов[НаибольшийИндекс - 6];
	РезультатУсловия = МассивРезультатов[НаибольшийИндекс - 5];
	РезультатТовары = МассивРезультатов[НаибольшийИндекс - 4];
	РезультатИНН = МассивРезультатов[НаибольшийИндекс - 3];
	РезультатКонтрагенты = МассивРезультатов[НаибольшийИндекс - 2];
	РезультатСегментыПартнеров = МассивРезультатов[НаибольшийИндекс - 1];
	РезультатСегментыТоваров = МассивРезультатов[НаибольшийИндекс];
	
	ВнешниеНаборыДанных.Вставить("НаборУсловия", НаборДанныхУсловия(РезультатУсловия));
	ВнешниеНаборыДанных.Вставить("НаборТовары", НаборДанныхТовары(РезультатТовары));
	ВнешниеНаборыДанных.Вставить("НаборИНН", НаборДанныхИНН(РезультатИНН));
	ВнешниеНаборыДанных.Вставить("НаборКонтрагенты", НаборДанныхКонтрагенты(РезультатКонтрагенты));
	ВнешниеНаборыДанных.Вставить("НаборСегментыПартнеров", НаборДанныхСегментыПартнеров(РезультатСегментыПартнеров));
	ВнешниеНаборыДанных.Вставить("НаборСегментыТоваров", НаборДанныхСегментыТоваров(РезультатСегментыТоваров));
	ВнешниеНаборыДанных.Вставить("ПереопределяемыеДанные", НаборПереопределяемыеПоля(РезультатПереопределяемыеПоля));
	ВнешниеНаборыДанных.Вставить("НаборДоговорыСоглашения", НаборДанныхДоговорыСоглашения(РезультатДоговорыСоглашения));
	
	//-- Локализация
	
КонецПроцедуры

// Переопределяет настройки печати для объекта.
//
// Параметры:
//  Настройки - см. УправлениеПечатью.НастройкиПечатиОбъекта.
//
Процедура ПриОпределенииНастроекПечати(Настройки) Экспорт
	
	//++ Локализация
	
	Настройки.ПриДобавленииКомандПечати = Истина;
	
	//-- Локализация
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	//++ Локализация
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Документ.УсловияРетроБонусовКлиентов.ПФ_MXL_Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "УправлениеПечатью";
	КомандаПечати.Идентификатор = "Документ.УсловияРетроБонусовКлиентов.ПФ_MXL_КарточкаКорр";
	КомандаПечати.Представление = НСтр("ru = 'Карточка (с учетом корректировок)'");
	
	//-- Локализация
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	Отчеты.ВедомостьПоРетроБонусамКлиентов.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "ВедомостьПоРетроБонусамКлиентовКонтекст");
	
	КомандаОтчет = Отчеты.РасчетРетроБонусовКлиентов.ДобавитьКомандуРасчетРетроБонусовКлиентов(
		КомандыОтчетов,
		"РасчетРетроБонусовКлиентовКонтекст");
	Если КомандаОтчет <> Неопределено Тогда
		
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(
			КомандаОтчет,
			"БезРасчета",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно);
		
	КонецЕсли;
	
	Отчеты.СоставСегментовРетроБонусовКлиентов.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "СоставСегментовРетроБонусовКлиентовКонтекст");
	
	Отчеты.СоставСегментовРетроБонусовКлиентов.ДобавитьКомандуОтчета(
		КомандыОтчетов, Параметры, "СоставСегментовРетроБонусовКлиентовПоДаннымДокументаКонтекст");
	
КонецПроцедуры

// Описание логики ограничений прав доступа
//
// Параметры:
//   Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Возвращает имена реквизитов, которые не должны отображаться в списке реквизитов обработки ГрупповоеИзменениеОбъектов.
//
//	Возвращаемое значение:
//		Массив из Строка - массив имен реквизитов.
//
Функция РеквизитыНеРедактируемыеВГрупповойОбработке() Экспорт
	
	НеРедактируемыеРеквизиты = Новый Массив; // Массив из Строка
	
	НеРедактируемыеРеквизиты.Добавить("*");
		
	Возврат НеРедактируемыеРеквизиты;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Исправление");
	
КонецПроцедуры

// Параметры:
//  Данные - Структура - Данные документа:
//  * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов
//  * Номер - Строка -
//  * Дата - Дата
//  * Исправление - Булево
//  Представление - Строка - Представление
//  СтандартнаяОбработка - Булево - Стандартная обработка
//
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Данные.Ссылка <> Неопределено Тогда
		
		Представление = РетроБонусыВызовСервера.ЗаголовокДокумента(
			Данные.Ссылка,
			Данные.Номер,
			Данные.Дата,
			Данные.Исправление);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область Прочее

// Определяет свойства полей формы в зависимости от данных
//
// Параметры:
//	Настройки - ТаблицаЗначений - таблица с колонками:
//		* Поля - Массив из Строка - поля, для которых определяются настройки отображения
//		* Условие - ОтборКомпоновкиДанных - условия применения настройки
//		* Свойства - Структура - имена и значения свойств
//
Процедура ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	МодульНастройки = ФинансоваяОтчетностьСервер;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область СегментыТоваровПартнеровОтмена
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СегментыТоваров.Отменено");
	Элемент.Поля.Добавить("СегментыПартнеров.Отменено");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	#Область ПоляШапкиПоИсправлению
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Организация");
	Элемент.Поля.Добавить("ВидРетроБонуса");
	Элемент.Поля.Добавить("НачалоДействия");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область НастройкаПоПризнакуНачислений
	// Элементы участников
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Контрагенты");
	Элемент.Поля.Добавить("Контрагенты.Контрагент");
	Элемент.Поля.Добавить("Контрагенты.Партнер");
	Элемент.Поля.Добавить("ИННКонтрагентов");
	Элемент.Поля.Добавить("ИННКонтрагентов.ИНН");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
	// Команды участников
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("КонтрагентыЗаполнитьПоСегменту");
	Элемент.Поля.Добавить("КонтрагентыЗагрузитьКонтрагентовИзФайла");
	Элемент.Поля.Добавить("ИННКонтрагентовЗагрузитьИННКонтрагентовИзФайла");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Доступность", Ложь);
	#КонецОбласти
	
	НастройкаТаблицыУчастников(Настройки, МодульНастройки);
	НастройкаТаблицыИННКонтрагентов(Настройки, МодульНастройки);
	НастройкаТаблицыДоговорыСоглашения(Настройки, МодульНастройки);
	НастройкаТаблицыТовары(Настройки, МодульНастройки);
	
	НастройкаПоляДетализацияРасчетаУчастников(Настройки, МодульНастройки);
	НастройкаПоляЗапретНачисленияСверхПлана(Настройки, МодульНастройки);
	НастройкаПоляВалюта(Настройки, МодульНастройки);
	НастройкаПоляБонусПроцент(Настройки, МодульНастройки);
	НастройкаПоляОтборУчастников(Настройки, МодульНастройки);
	НастройкаПоляОтборТоваров(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки);
	НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки);
	НастройкаПоляСуммаПлан(Настройки, МодульНастройки);
	НастройкаПоляЗапретНачисленияСверхПлана(Настройки, МодульНастройки);
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - адрес временного хранилища с таблицей значений, в которой
//                               находятся загруженные данные из файла.
//                               Состав колонок: Идентификатор - Число - порядковый номер строки, остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - адрес временного хранилища с пустой таблицей значений,
//                               являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - список неоднозначных значений, для которых в ИБ имеется несколько подходящих вариантов:
//       * Колонка       - Строка - имя колонки, в которой была обнаружена неоднозначность
//       * Идентификатор - Число  - идентификатор строки, в которой была обнаружена неоднозначность
//   ПолноеИмяТабличнойЧасти   - Строка - полное имя табличной части, в которую загружаются данные
//   ДополнительныеПараметры   - Произвольный - Любые дополнительные сведения
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	МетаданныеУРБ = Метаданные.Документы.УсловияРетроБонусовКлиентов;
	
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных); // ТаблицаЗначений
	ТаблицаДляЗаполнения = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления); // ТаблицаЗначений
	
	Если ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.Контрагенты.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧКонтрагенты(
			ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.ИННКонтрагентов.ПолноеИмя() Тогда
		
		Для Каждого СтрокаЗагружаемая Из ЗагружаемыеДанные Цикл
			
			СтрокаТаблицы = ТаблицаДляЗаполнения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗагружаемая);
			
		КонецЦикла;
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.СегментыТоваров.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧСегментыТоваров(
			ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.Товары.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧТовары(
			ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.СегментыПартнеров.ПолноеИмя() Тогда
		
		СопоставитьЗагружаемыеДанныеТЧСегментыПартнеров(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ТаблицаДляЗаполнения, АдресТаблицыСопоставления);
	
КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//	ПолноеИмяТабличнойЧасти - Строка - Полное имя табличной части, в которую загружаются данные.
//	СписокНеоднозначностей - Массив Из Произвольный - Массив для заполнения с неоднозначными данными.
//	ИмяКолонки - Строка - Имя колонки, в который возникла неоднозначность.
//	ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений - Загружаемые данные, на основании которых возникла неоднозначность.
//	ДополнительныеПараметры - Произвольный - Любые дополнительные сведения
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	МетаданныеУРБ = Метаданные.Документы.УсловияРетроБонусовКлиентов;
	
	Если ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.Контрагенты.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Контрагент" Тогда
			
			ЗаполнитьСписокНеоднозначностейКонтрагентов(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		ИначеЕсли ИмяКолонки = "Партнер" Тогда
			
			ЗаполнитьСписокНеоднозначностейПартнеров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.СегментыТоваров.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Сегмент" Тогда
			
			ЗаполнитьСписокНеоднозначностейСегментовТоваров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
			
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.Товары.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Номенклатура" Тогда
			
			ЗаполнитьСписокНеоднозначностейНоменклатуры(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
		Если ИмяКолонки = "Характеристика" Тогда
			
			ЗаполнитьСписокНеоднозначностейХарактеристики(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = МетаданныеУРБ.ТабличныеЧасти.СегментыПартнеров.ПолноеИмя() Тогда
		
		Если ИмяКолонки = "Сегмент" Тогда
			
			ЗаполнитьСписокНеоднозначностейСегментовПартнеров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает адаптированный текст запроса движений по регистру
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра для получения адаптированного запроса 
// 
// Возвращаемое значение:
//  см. ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса
// 
Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.УсловияРетроБонусовКлиентов";
	СинонимТаблицыДокумента = "";
	ВЗапросеЕстьИсточник = Истина;
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать", """""");
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		
	Иначе
		
		ШаблонИсключения = НСтр("ru = 'В документе %1 не реализована адаптация текста запроса формирования движений по регистру %2.'");
		ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонИсключения,
			ПолноеИмяДокумента,
			ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
		
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ВЗапросеЕстьИсточник,
			ПереопределениеРасчетаПараметров);
		
	Иначе
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса,
			ПолноеИмяДокумента,
			СинонимТаблицыДокумента,
			ПереопределениеРасчетаПараметров);
		
	КонецЕсли;
	
	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// Заполняет сведения об обработчиках обновления.
// 
// Параметры:
//  Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.УсловияРетроБонусовКлиентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.21";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4c2628f2-3dea-492f-9fab-a761f101f34a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.УсловияРетроБонусовКлиентов.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	
	МассивКомментариев = Новый Массив(); // Массив из Строка
	МассивКомментариев.Добавить(НСтр("ru = 'Исправляет заполнение полей ""Отбор товаров"" для документа ""Условия ретро-бонусов клиентов"", если в них установлен флаг расчета суммы вне системы.'"));
	Обработчик.Комментарий = СтрСоединить(МассивКомментариев, " ");
	
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	
	Читаемые = Новый Массив; // Массив из Строка
	Читаемые.Добавить(Метаданные.Документы.УсловияРетроБонусовКлиентов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив; // Массив из Строка
	Изменяемые.Добавить(Метаданные.Документы.УсловияРетроБонусовКлиентов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив; // Массив из Строка
	Блокируемые.Добавить(Метаданные.Документы.УсловияРетроБонусовКлиентов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ВидыРетроБонусовКлиентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	
КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СоздатьДокумент().Метаданные().ПолноеИмя();
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("НачалоДействия УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("НачалоДействия УБЫВ");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Данные.Ссылка
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов КАК Данные
	|ГДЕ
	|	Данные.БезРасчета
	|	И Данные.ОтборТоваров <> ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.ПустаяСсылка)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

// Обработчик обновления.
// 
// Параметры:
//  Параметры - Структура - параметры обработчика:
//   * ВерсияПодсистемыНаНачалоОбновления - Строка - версия подсистемы.
//   * ИмяОбработчика - Строка - имя обработчика.
//   * ОбновляемыеДанные - Структура.
//   * ОбработкаЗавершена - Булево, Неопределено - признак завершения обработки.
//   * Очередь - Число - очередь.
//   * ПрогрессВыполнения - Структура:
//     ** ВсегоОбъектов - Число - всего обработано объектов.
//     ** ОбработаноОбъектов - Число - обработано объектов.
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Параметры.ОбработкаЗавершена = Ложь;
	
	ПолноеИмяОбъекта = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		
		Параметры.ОбработкаЗавершена =
			ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
		
	КонецЕсли;
	
	ОбъектовОбработано = 0;
	
	Для Каждого СтрокаТаблицы Из ОбновляемыеДанные Цикл
		
		ОписаниеИзменений = Новый Массив; // Массив из Строка
		ОписаниеИзменений.Добавить(НСтр("ru = 'При обновлении системы выполнены следующие операции:'"));
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", СтрокаТаблицы.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = СтрокаТаблицы.Ссылка.ПолучитьОбъект(); // ДокументОбъект.УсловияРетроБонусовКлиентов
			Записывать = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				ПредставлениеСсылки = Строка(ДокументОбъект);
				
				Если ДокументОбъект.БезРасчета Тогда
					
					Если НЕ ДокументОбъект.ОтборТоваров.Пустая() Тогда
						
						ДокументОбъект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.ПустаяСсылка();
						ОписаниеИзменений.Добавить(НСтр("ru = '- обновлено значение поля ""Отбор товаров"" для документа с признаком расчета вне системы'"));
						Записывать = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Записывать Тогда
				
				ДокументОбъект.ЗаписьИсторииДанных.КомментарийВерсии = СтрСоединить(ОписаниеИзменений);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(СтрокаТаблицы.Ссылка);
				
			КонецЕсли;
			
			ОбъектовОбработано = ОбъектовОбработано + 1;
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(
				ИнформацияОбОшибке(),
				СтрокаТаблицы.Ссылка,
				ПредставлениеСсылки);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(
		Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Реквизиты документа
// 
// Параметры:
//  Запрос - Запрос - Запрос
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса - Реквизиты документа:
// * Дата - Дата -  
// * Номер - Строка - 
// * Организация - СправочникСсылка.Организации -
// * Валюта - СправочникСсылка.Валюты -
// * НачалоДействия- Дата -
// * ОкончаниеДействия- Дата -
// * ОтборУчастников - ПеречислениеСсылка.СоставыСписковРетроБонусов
// * ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
// * СуммаПлан - ОпределяемыйТип.ДенежнаяСуммаНеотрицательная -
// * Исправление - Булево -
// * ИсправляемыйДокумент - ДокументСсылка.УсловияРетроБонусовКлиентов -
//
Функция РеквизитыДокумента(Запрос)
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеДокумента.ОтборУчастников КАК ОтборУчастников,
	|	ДанныеДокумента.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Возврат Реквизиты;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Реквизиты =	РеквизитыДокумента(Запрос);
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

// Параметры:
//  Реквизиты - см. РеквизитыДокумента
// 
// Возвращаемое значение:
//  Структура 
//
Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	
	Значения.Вставить(
		"ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.УсловияРетроБонусовКлиентов"));
	
	Если Реквизиты <> Неопределено Тогда
		
		Значения.Вставить(
			"НомерНаПечать",
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
		Значения.Вставить("Период", Реквизиты.Дата);
		Значения.Вставить("Организация", Реквизиты.Организация);
		Значения.Вставить("Валюта", Реквизиты.Валюта);
		Значения.Вставить("НачалоДействия", Реквизиты.НачалоДействия);
		Значения.Вставить("ОкончаниеДействия", Реквизиты.ОкончаниеДействия);
		Значения.Вставить("ОтборУчастников", Реквизиты.ОтборУчастников);
		Значения.Вставить("ДетализацияРасчетаУчастников", Реквизиты.ДетализацияРасчетаУчастников);
		Значения.Вставить("СуммаПлан", Реквизиты.СуммаПлан);
		Значения.Вставить("Исправление", Реквизиты.Исправление);
		Значения.Вставить("ИсправляемыйДокумент", Реквизиты.ИсправляемыйДокумент);
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры, ДокументОбъект = Неопределено)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК ДатаДокументаИБ,
	|	ДанныеДокумента.Номер КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных КАК ТипСсылки,
	|	ДанныеДокумента.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК НаправлениеДеятельности,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК МестоХранения,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ВЫРАЗИТЬ(ДанныеДокумента.Комментарий КАК Строка(100)) КАК Комментарий,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	0 КАК Сумма,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ДополнительнаяЗапись,
	|	ДанныеДокумента.Описание КАК Дополнительно,
	|	ДанныеДокумента.Дата КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать КАК НомерПервичногоДокумента,
	|	ДанныеДокумента.Исправление КАК СторноИсправление,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Дата КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО КАК Приоритет
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Если ДокументОбъект = Неопределено Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДанныеДокументаШапка", "Документ.УсловияРетроБонусовКлиентов");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НомерНаПечать", "ДанныеДокумента.Номер");
		
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаУсловия(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовУсловия";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеДокумента.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.ВидРетроБонуса КАК Вид,
	|	ДанныеДокумента.Описание КАК Описание,
	|	ДанныеДокумента.СоставУчастников КАК СоставУчастников,
	|	ДанныеДокумента.ОтборУчастников КАК Участники,
	|	ДанныеДокумента.СоставТоваров КАК СоставТоваров,
	|	ДанныеДокумента.ОтборТоваров КАК Товары,
	|	ДанныеДокумента.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеДокумента.БонусПроцент КАК БонусПроцент,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ДанныеДокумента.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	ДанныеДокумента.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников,
	|	ДанныеДокумента.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаШапка КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаКонтрагенты(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовКонтрагенты";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА &ОтборУчастников <> ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.Выбранные)
	|			ТОГДА 0
	|		КОГДА ДанныеТаблицы.ПланНеУказывается
	|			ТОГДА 0
	|		КОГДА ДанныеТаблицы.СуммаПлан = 0
	|			ТОГДА &СуммаПлан
	|		ИНАЧЕ ДанныеТаблицы.СуммаПлан
	|	КОНЕЦ КАК СуммаПлан,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаКонтрагенты КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаИННКонтрагентов(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовИНН";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.ИНН КАК ИНН,
	|	ВЫБОР
	|		КОГДА &ОтборУчастников <> ЗНАЧЕНИЕ(Перечисление.СоставыСписковРетроБонусов.Выбранные)
	|			ТОГДА 0
	|		КОГДА &ДетализацияРасчетаУчастников = ЗНАЧЕНИЕ(Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКлиенту)
	|			ТОГДА 0
	|		КОГДА ДанныеТаблицы.СуммаПлан = 0
	|			ТОГДА &СуммаПлан
	|		ИНАЧЕ ДанныеТаблицы.СуммаПлан
	|	КОНЕЦ КАК СуммаПлан,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаИНН КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСегментыПартнеров(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовСегментыПартнеров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Сегмент КАК Сегмент,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаСегментыПартнеров КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДоговорыСоглашения(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовДоговорыСоглашения";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Договор КАК Договор,
	|	ДанныеТаблицы.Соглашение КАК Соглашение,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ПланНеУказывается
	|			ТОГДА 0
	|		КОГДА ДанныеТаблицы.СуммаПлан = 0
	|			ТОГДА &СуммаПлан
	|		ИНАЧЕ ДанныеТаблицы.СуммаПлан
	|	КОНЕЦ КАК СуммаПлан,
	|	ДанныеТаблицы.ПродажиИндивидуальныеПоТиповым КАК УчитыватьПродажиПоИндивидуальным,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаДоговорыСоглашения КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаТовары(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовТовары";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Номенклатура КАК Номенклатура,
	|	ДанныеТаблицы.Характеристика КАК Характеристика,
	|	ДанныеТаблицы.КоличествоПлан КАК КоличествоПлан,
	|	ДанныеТаблицы.Процент КАК БонусПроцент,
	|	ДанныеТаблицы.БазоваяЦена КАК БазоваяЦена,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаТовары КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСегментыТоваров(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентовСегментыТоваров";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ ДокументОбъект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Все Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &Исправление
	|			ТОГДА &ИсправляемыйДокумент
	|		ИНАЧЕ ДанныеТаблицы.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	ДанныеТаблицы.Сегмент КАК Сегмент,
	|	ДанныеТаблицы.Ссылка КАК РегистраторДвижения
	|ИЗ
	|	ДанныеДокументаТаблицаСегментыТоваров КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРетроБонусыКлиентов(ТекстыЗапроса, Регистры, ДокументОбъект)
	
	ИмяРегистра = "РетроБонусыКлиентов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры)
	 ИЛИ ДокументОбъект.Статус <> Перечисления.СтатусыДокументовРетроБонусов.Согласован
	 ИЛИ НЕ ДокументОбъект.НачислитьСразу Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ДанныеТаблицы.Контрагент КАК Контрагент,
	|	ДанныеТаблицы.Партнер КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоДействия
	|		ИНАЧЕ ДанныеТаблицы.НачалоДействия
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА ДанныеТаблицы.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ОкончаниеДействия
	|		ИНАЧЕ ДанныеТаблицы.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	ДанныеТаблицы.Ссылка КАК ДокументУсловий,
	|	&Валюта КАК Валюта,
	|	ДанныеТаблицы.СуммаБонус КАК СуммаБонус,
	|	0 КАК КАктированию,
	|	0 КАК КПодписанию,
	|	0 КАК КСписанию
	|ИЗ
	|	ДанныеДокументаТаблицаКонтрагенты КАК ДанныеТаблицы
	|ГДЕ
	|	ДанныеТаблицы.Ссылка = &Ссылка
	|	И НЕ ДанныеТаблицы.Отменено";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#Область ДанныеДокумента

Процедура ПолучитьДанныеДокумента(Запрос, ДокументСсылка)
	
	СписокЗапросов = Новый Массив; // Массив из Строка
	
	ТекстЗапросаДанныеДокументаШапка(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаИННКонтрагентов(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаКонтрагенты(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаДоговорыСоглашения(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаТовары(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаСегментыПартнеров(СписокЗапросов);
	ТекстЗапросаДанныеТаблицаСегментыТоваров(СписокЗапросов);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеДокументаШапка(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДанныеДокумента.ПометкаУдаления КАК ПометкаУдаления,
	|	ДанныеДокумента.Проведен КАК Проведен,
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Статус КАК Статус,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.НачалоДействия КАК НачалоДействия,
	|	ДанныеДокумента.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДанныеДокумента.Описание КАК Описание,
	|	ДанныеДокумента.ВидРетроБонуса КАК ВидРетроБонуса,
	|	ДанныеДокумента.ВидРетроБонуса.СоставУчастников КАК СоставУчастников,
	|	ДанныеДокумента.ОтборУчастников КАК ОтборУчастников,
	|	ДанныеДокумента.ВидРетроБонуса.СоставТоваров КАК СоставТоваров,
	|	ДанныеДокумента.ОтборТоваров КАК ОтборТоваров,
	|	ДанныеДокумента.ВидРетроБонуса.УчитыватьНДС КАК УчитыватьНДС,
	|	ДанныеДокумента.НачислитьСразу КАК НачислитьСразу,
	|	ДанныеДокумента.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	ДанныеДокумента.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	ДанныеДокумента.СуммаПлан КАК СуммаПлан,
	|	ДанныеДокумента.БонусПроцент КАК БонусПроцент,
	|	ДанныеДокумента.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников,
	|	ДанныеДокумента.Комментарий КАК Комментарий,
	|	ДанныеДокумента.Ответственный КАК Ответственный,
	|	ДанныеДокумента.Исправление КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент КАК ИсправляемыйДокумент
	|ПОМЕСТИТЬ ДанныеДокументаШапка
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаКонтрагенты(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Контрагент КАК Контрагент,
	|	ТаблицаДанных.Партнер КАК Партнер,
	|	ТаблицаДанных.СуммаПлан КАК СуммаПлан,
	|	ТаблицаДанных.ПланНеУказывается КАК ПланНеУказывается,
	|	ТаблицаДанных.СуммаБонус КАК СуммаБонус,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаКонтрагенты
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.Контрагенты КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаИННКонтрагентов(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.ИНН КАК ИНН,
	|	ТаблицаДанных.СуммаПлан КАК СуммаПлан,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаИНН
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.ИННКонтрагентов КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаДоговорыСоглашения(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Договор КАК Договор,
	|	ТаблицаДанных.Соглашение КАК Соглашение,
	|	ТаблицаДанных.ПродажиИндивидуальныеПоТиповым КАК ПродажиИндивидуальныеПоТиповым,
	|	ТаблицаДанных.СуммаПлан КАК СуммаПлан,
	|	ТаблицаДанных.ПланНеУказывается КАК ПланНеУказывается,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаДоговорыСоглашения
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.ДоговорыСоглашения КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаТовары(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Номенклатура КАК Номенклатура,
	|	ТаблицаДанных.Характеристика КАК Характеристика,
	|	ТаблицаДанных.КоличествоПлан КАК КоличествоПлан,
	|	ТаблицаДанных.БазоваяЦена КАК БазоваяЦена,
	|	ТаблицаДанных.Процент КАК Процент,
	|	ТаблицаДанных.НачалоДействия КАК НачалоДействия,
	|	ТаблицаДанных.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаТовары
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.Товары КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаСегментыПартнеров(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Сегмент КАК Сегмент,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаСегментыПартнеров
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.СегментыПартнеров КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ТекстЗапросаДанныеТаблицаСегментыТоваров(СписокЗапросов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДанных.Ссылка КАК Ссылка,
	|	ТаблицаДанных.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДанных.Сегмент КАК Сегмент,
	|	ТаблицаДанных.Отменено КАК Отменено
	|ПОМЕСТИТЬ ДанныеДокументаТаблицаСегментыТоваров
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.СегментыТоваров КАК ТаблицаДанных
	|ГДЕ
	|	ТаблицаДанных.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область МетодыНастройкиПолейФормы

Процедура НастройкаТаблицыУчастников(Настройки, МодульНастройки)
	
	ОтборПолей = БазовыйОтборПериодовТаблицУчастников(МодульНастройки);
	НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, "Контрагенты", ОтборПолей);
	НастройкаТаблицыУчастниковПолеКонтрагентыСуммаПлан(Настройки, МодульНастройки);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "Контрагенты.Отменено");
	НастройкаПоляДекорацияКонтрагентыЕстьНачисления(Настройки, МодульНастройки);
	НастройкаКомандЗаполненияТаблицыУчастников(Настройки, МодульНастройки);
	
КонецПроцедуры

Процедура НастройкаТаблицыУчастниковПолеКонтрагентыСуммаПлан(Настройки, МодульНастройки)
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	#Область БазовыйОтбор
	ОтборПолей = Новый ОтборКомпоновкиДанных();
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(ОтборПолей);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ПоказателиПродаж.Сумма,, ВидСравненияКомпоновкиДанных.НеРавно);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ДетализацияРасчетаУчастников", ДетализацияРасчета.ПоКонтрагенту);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.СоставУчастников", СоставыУчастников.Клиенты);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ДетализацияРасчетаУчастников", ДетализацияРасчета.ПоКлиенту);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.СоставУчастников", СоставыУчастников.Контрагенты);
	#КонецОбласти
	
	#Область СуммаПланВидимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Контрагенты.СуммаПлан");
	
	МодульНастройки.СкопироватьОтбор(ОтборПолей, Элемент.Условие);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область СуммаПланТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Контрагенты.СуммаПлан");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область СуммаПланДоИзменений
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Контрагенты.СуммаПланДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляДекорацияКонтрагентыЕстьНачисления(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияКонтрагентыЕстьНачисления");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаТаблицыИННКонтрагентов(Настройки, МодульНастройки)
	
	ОтборПолей = БазовыйОтборПериодовТаблицУчастников(МодульНастройки);
	НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, "ИННКонтрагентов", ОтборПолей);
	НастройкаТаблицыИННКонтрагентовПолеСуммаПлан(Настройки, МодульНастройки);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "ИННКонтрагентов.Отменено");
	НастройкаПоляДекорацияИННЕстьНачисления(Настройки, МодульНастройки);
	
КонецПроцедуры

Процедура НастройкаТаблицыИННКонтрагентовПолеСуммаПлан(Настройки, МодульНастройки)
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	#Область БазовыйОтбор
	ОтборПолей = Новый ОтборКомпоновкиДанных();
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(ОтборПолей);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.ПоказательПродаж",
		ПоказателиПродаж.Сумма,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ДетализацияРасчетаУчастников", ДетализацияРасчета.ПоКлиенту);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.СоставУчастников", СоставыУчастников.ИНН);
	#КонецОбласти
	
	#Область СуммаПланВидимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ИННКонтрагентов.СуммаПлан");
	
	МодульНастройки.СкопироватьОтбор(ОтборПолей, Элемент.Условие);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область СуммаПланТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ИННКонтрагентов.СуммаПлан");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьИсправления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область СуммаПланДоИзменений
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ИННКонтрагентов.СуммаПланДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляДекорацияИННЕстьНачисления(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияИННЕстьНачисления");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаТаблицыДоговорыСоглашения(Настройки, МодульНастройки);
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
		
	#Область Договор
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДоговорыСоглашения.Договор");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.СоставУчастников",
		СоставыУчастников.Договоры,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область Соглашение
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДоговорыСоглашения.Соглашение");
	Элемент.Поля.Добавить("ДоговорыСоглашенияТипСоглашения");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.СоставУчастников",
		СоставыУчастников.Соглашения,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
		
	ОтборПолей = БазовыйОтборПериодовТаблицУчастников(МодульНастройки);
	НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, "ДоговорыСоглашения", ОтборПолей);
	НастройкаТаблицыДоговорыСоглашенияПолеПродажиИндивидуальныеПоТиповым(Настройки, МодульНастройки);
	НастройкаТаблицыДоговорыСоглашенияПолеСуммаПлан(Настройки, МодульНастройки);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "ДоговорыСоглашения.Отменено");
	
КонецПроцедуры

Процедура НастройкаТаблицыДоговорыСоглашенияПолеПродажиИндивидуальныеПоТиповым(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДоговорыСоглашения.ПродажиИндивидуальныеПоТиповым");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставУчастников",
		Перечисления.СоставыУчастниковРетроБонусов.Соглашения,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.ИспользоватьИндивидуальныеСоглашения",
		Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаТаблицыДоговорыСоглашенияПолеСуммаПлан(Настройки, МодульНастройки)
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	ОтборПолей = Новый ОтборКомпоновкиДанных();
	
	#Область БазовыйОтбор
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(ОтборПолей);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.ПоказательПродаж",
		ПоказателиПродаж.Сумма,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"ДетализацияРасчетаУчастников",
		ДетализацияРасчета.ПоКонтрагенту,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставУчастников",
		СоставыУчастников.Договоры,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	#КонецОбласти
	
	#Область СуммаПланВидимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДоговорыСоглашения.СуммаПлан");
	
	МодульНастройки.СкопироватьОтбор(ОтборПолей, Элемент.Условие);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область СуммаПланТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДоговорыСоглашения.СуммаПлан");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
	#Область СуммаПланДоИзменений
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДоговорыСоглашения.СуммаПланДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаТаблицыТовары(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	#Область ПериодыДоИсправления
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.НачалоДействияДоИзменений");
	Элемент.Поля.Добавить("Товары.ОкончаниеДействияДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиПродаж.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область Периоды
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.НачалоДействия");
	Элемент.Поля.Добавить("Товары.ОкончаниеДействия");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиПродаж.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область НастройкаПоПризнакуНачислений
	// Элементы
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары");
	Элемент.Поля.Добавить("Товары.Номенклатура");
	Элемент.Поля.Добавить("Товары.Характеристика");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиПродаж.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	
	// Команды товаров
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ТоварыЗаполнитьПроцентБонуса");
	Элемент.Поля.Добавить("ТоварыЗаполнитьКоличествоПлан");
	Элемент.Поля.Добавить("ТоварыЗаполнитьПоСегменту");
	Элемент.Поля.Добавить("ТоварыЗагрузитьТоварыИзФайла");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиПродаж.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Доступность", Ложь);
	#КонецОбласти
	
	НастройкаПоляТоварыПроцент(Настройки, МодульНастройки);
	НастройкаПоляТоварыБазоваяЦена(Настройки, МодульНастройки);
	НастройкаПоляТоварыКоличествоПлан(Настройки, МодульНастройки);
	НастройкаПоляДекорацияТоварыЕстьНачисления(Настройки, МодульНастройки);
	НастройкаПоляОтменено(Настройки, МодульНастройки, "Товары.Отменено");
	
КонецПроцедуры

Процедура НастройкаПоляТоварыПроцент(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.Процент");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ОтборТоваров", СоставыСписков.Выбранные);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.ПоказательПродаж", ПоказателиПродаж.Сумма);
	МодульНастройки.НовыйОтбор(ГруппаИ, "ЗапретНачисленияСверхПлана", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыБазоваяЦена(Настройки, МодульНастройки)
	
	БазыПродаж = Перечисления.БазыРасчетаПродажРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.БазоваяЦена");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.БазаРасчетаПродаж", БазыПродаж.ВыручкаБазовыеЦены);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляТоварыКоличествоПлан(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Товары.КоличествоПлан");
	Элемент.Поля.Добавить("ТоварыНоменклатураЕдиницаИзмерения");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.Количество);
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиПродаж.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПоляДекорацияТоварыЕстьНачисления(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДекорацияТоварыЕстьНачисления");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ОтборТоваров", СоставыСписков.КромеВыбранных);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.КоличествоСовокупно);
	ИсклПоказатели.Добавить(ПоказателиПродаж.ПакетноеПредложение);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.ВСписке);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаКомандЗаполненияТаблицыУчастников(Настройки, МодульНастройки)
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("КонтрагентыЗаполнитьПоСегменту");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.СоставУчастников", СоставыУчастников.Контрагенты);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	
КонецПроцедуры

Процедура НастройкаПолейПериодовТаблиц(Настройки, МодульНастройки, ИмяТаблицы, ОтборПолей)
	
	#Область ПериодыДоИсправления
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить(ИмяТаблицы + "НачалоДействияДоИзменений");
	Элемент.Поля.Добавить(ИмяТаблицы + ".ОкончаниеДействияДоИзменений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.СкопироватьОтбор(ОтборПолей, ГруппаИЛИ);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Ложь);
		
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область Периоды
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить(ИмяТаблицы + ".НачалоДействия");
	Элемент.Поля.Добавить(ИмяТаблицы + ".ОкончаниеДействия");
	
	МодульНастройки.СкопироватьОтбор(ОтборПолей, Элемент.Условие);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Функция БазовыйОтборПериодовТаблицУчастников(МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	Отбор = Новый ОтборКомпоновкиДанных();
	
	МодульНастройки.НовыйОтбор(Отбор, "ОтборУчастников", СоставыСписков.КромеВыбранных);
	
	Возврат Отбор;
	
КонецФункции

Процедура НастройкаПоляОтменено(Настройки, МодульНастройки, ИмяПоля)
	
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить(ИмяПоля);
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Истина);
	
КонецПроцедуры

Процедура НастройкаПоляВалюта(Настройки, МодульНастройки)
	
	БазаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Валюта");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "БезРасчета", Ложь);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Дополнительно.БазаРасчетаПродаж", БазаПродаж.ВыручкаВзаиморасчеты);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Организация", Справочники.Организации.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.БазаРасчетаПродаж",
		БазаПродаж.ВыручкаРеглУчет,
		,
		ВидСравненияКомпоновкиДанных.Равно);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("Валюта");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.БазаРасчетаПродаж",
		БазаПродаж.ВыручкаБазовыеЦены);
	МодульНастройки.НовыйОтбор(ГруппаИ, "Исправление", Ложь);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Ложь);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляБонусПроцент(Настройки, МодульНастройки)
	
	СоставыСписков = Перечисления.СоставыСписковРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БонусПроцент");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(ГруппаИ, "БезРасчета", Ложь);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ОтборТоваров",
		СоставыСписков.Выбранные,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
		
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставТоваров",
		Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
	
	ГруппаИ = РетроБонусыСервер.НоваяГруппаОтборов(ГруппаИЛИ, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"Дополнительно.ПоказательПродаж",
		Перечисления.ЦелевыеПоказателиПродажРетроБонусов.Сумма);
	МодульНастройки.НовыйОтбор(
		ГруппаИ,
		"ЗапретНачисленияСверхПлана",
		Истина);
		
	Элемент.Свойства.Вставить("Видимость", Истина);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("БонусПроцент");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборУчастников(Настройки, МодульНастройки)
	
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	СписокУчастникиПросмотр = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
	СписокУчастникиПросмотр.Добавить(СоставыУчастников.Договоры);
	СписокУчастникиПросмотр.Добавить(СоставыУчастников.Соглашения);
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборУчастников");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ,
		"Дополнительно.СоставУчастников",
		СписокУчастникиПросмотр,
		,
		ВидСравненияКомпоновкиДанных.ВСписке);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляОтборТоваров(Настройки, МодульНастройки)
	
	БазыПродаж = Перечисления.БазыРасчетаПродажРетроБонусов;
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ОтборТоваров");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.НеИспользуется);
	ИсклПоказатели.Добавить(ПоказателиПродаж.Сумма);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.БазаРасчетаПродаж", БазыПродаж.ВыручкаБазовыеЦены);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПериодичностьУсловий(Настройки, МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьУсловий");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ПоказателиПродаж.НеИспользуется);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьУсловий");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "НачислитьСразу", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляПериодичностьНачислений(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ПериодичностьНачислений");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляСуммаПлан(Настройки, МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СуммаПлан");
	
	МодульНастройки.НовыйОтбор(
		Элемент.Условие,
		"Дополнительно.ПоказательПродаж",
		ПоказателиПродаж.Сумма,
		,
		ВидСравненияКомпоновкиДанных.НеРавно);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("СуммаПлан");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ПоказательПродаж", ПоказателиПродаж.Сумма);
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьНачисления", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляЗапретНачисленияСверхПлана(Настройки, МодульНастройки)
	
	ПоказателиПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов;
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ЗапретНачисленияСверхПлана");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "БезРасчета", Истина);
	
	ИсклПоказатели = Новый СписокЗначений; // СписокЗначений Из ПеречислениеСсылка.ЦелевыеПоказателиПродажРетроБонусов
	ИсклПоказатели.Добавить(ПоказателиПродаж.Количество);
	ИсклПоказатели.Добавить(ПоказателиПродаж.Сумма);
	МодульНастройки.НовыйОтбор(
		ГруппаИЛИ, "Дополнительно.ПоказательПродаж", ИсклПоказатели,, ВидСравненияКомпоновкиДанных.НеВСписке);
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ЗапретНачисленияСверхПлана");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "Исправление", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

Процедура НастройкаПоляДетализацияРасчетаУчастников(Настройки, МодульНастройки)
	
	#Область Видимость
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДетализацияРасчетаУчастников");
	
	МодульНастройки.НовыйОтбор(Элемент.Условие, "ВидРетроБонуса", Справочники.ВидыРетроБонусовКлиентов.ПустаяСсылка());
	
	Элемент.Свойства.Вставить("Видимость", Ложь);
	#КонецОбласти
	
	#Область ТолькоПросмотр
	Элемент = Настройки.Добавить();
	
	Элемент.Поля.Добавить("ДетализацияРасчетаУчастников");
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Условие);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "Исправление", Истина);
	МодульНастройки.НовыйОтбор(ГруппаИЛИ, "НачислитьСразу", Истина);
	
	Элемент.Свойства.Вставить("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзФайлов

// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений:
//  * ИНН - Строка
//  * КПП - Строка
//  * КонтрагентНаименование - Строка
//  * Код - Строка - Код партнера
//  * ПартнерНаименование - Строка
//  * Идентификатор - Число
//  ТаблицаДляЗаполнения - ТаблицаЗначений:
//  * Контрагент - СправочникСсылка.Контрагенты
//  * Партнер - СправочникСсылка.Партнеры
//  ДополнительныеПараметры - Структура:
//  * НастройкиОтображенияПолей - Структура:
//  ** Контрагент - Булево
//  ** Партнер - Булево
//  СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначностей:
//  * Колонка - Строка
//  * Идентификатор - Число
//
Процедура СопоставитьЗагружаемыеДанныеТЧКонтрагенты(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	Если ДополнительныеПараметры.Свойство("НастройкиОтображенияПолей") Тогда
		
		НастройкиОтображенияПолей = ДополнительныеПараметры.НастройкиОтображенияПолей;
		ПодбиратьКонтрагентов = НастройкиОтображенияПолей.Контрагент;
		ПодбиратьПартнеров = НастройкиОтображенияПолей.Партнер;
		
	Иначе
		
		ПодбиратьКонтрагентов = Ложь;
		ПодбиратьПартнеров = Ложь;
		
	КонецЕсли;
	
	ДанныеИБПоКонтрагентамПартнерам = ДанныеИБПоКонтрагентамПартнерам(ПодбиратьКонтрагентов, ПодбиратьПартнеров);
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		Если ПодбиратьКонтрагентов Тогда
			
			НоваяСтрока.Контрагент = ПодобратьКонтрагентаПоРеквизитам(
				СтрокаДанных, ДанныеИБПоКонтрагентамПартнерам.ТаблицаКонтрагентов, СписокНеоднозначностей);
			
		КонецЕсли;
		
		Если ПодбиратьПартнеров Тогда
			
			НоваяСтрока.Партнер = ПодобратьПартнераПоРеквизитам(
				СтрокаДанных, ДанныеИБПоКонтрагентамПартнерам.ТаблицаПартнеров, СписокНеоднозначностей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ПодбиратьКонтрагентов - Булево - Подбирать контрагентов
//  ПодбиратьПартнеров - Булево - Подбирать партнеров
// 
// Возвращаемое значение:
//  Структура - Данные ИБ по контрагентам партнерам:
//  * ТаблицаКонтрагентов - ТаблицаЗначений:
//  ** ИНН - Строка
//  ** КПП - Строка
//  ** Наименование - Строка
//  ** НаименованиеПолное - Строка
//  ** Контрагент - СправочникСсылка.Контрагенты
//  * ТаблицаПартнеров - ТаблицаЗначений:
//  ** Код - Строка
//  ** Наименование - Строка
//  ** Партнер - СправочникСсылка.Партнеры
//
Функция ДанныеИБПоКонтрагентамПартнерам(ПодбиратьКонтрагентов, ПодбиратьПартнеров)
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаКонтрагентов", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаПартнеров", Новый ТаблицаЗначений);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Контрагенты.Ссылка КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	&ПодбиратьКонтрагентов
	|	И НЕ Контрагенты.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Партнеры.Код КАК Код,
	|	Партнеры.Наименование КАК Наименование,
	|	Партнеры.Ссылка КАК Партнер
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	&ПодбиратьПартнеров
	|	И Партнеры.Клиент
	|	И НЕ Партнеры.ПометкаУдаления";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПодбиратьКонтрагентов", ПодбиратьКонтрагентов);
	Запрос.УстановитьПараметр("ПодбиратьПартнеров", ПодбиратьПартнеров);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[0];
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.ТаблицаКонтрагентов = РезультатЗапроса.Выгрузить();
	Результат.ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаКонтрагентов.Колонки.Добавить("НаименованиеПолноеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоКонтрагентам(Результат.ТаблицаКонтрагентов);
	
	РезультатЗапроса = МассивРезультатов[1];
	Результат.ТаблицаПартнеров = РезультатЗапроса.Выгрузить();
	Результат.ТаблицаПартнеров.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоПартнерам(Результат.ТаблицаПартнеров);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТаблицаКонтрагентов - ТаблицаЗначений:
//  * ИНН - Строка
//  * КПП - Строка
//  * Наименование - Строка
//  * НаименованиеПолное - Строка
//  * НаименованиеПоиск - Строка
//  * НаименованиеПолноеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоКонтрагентам(ТаблицаКонтрагентов)
	
	Для Каждого СтрокаКонтрагента Из ТаблицаКонтрагентов Цикл
		
		ИНН = СтрЗаменить(СтрокаКонтрагента.ИНН, " ", "");
		СтрокаКонтрагента.ИНН = ВРег(ИНН);
		
		КПП = СтрЗаменить(СтрокаКонтрагента.КПП, " ", "");
		СтрокаКонтрагента.КПП = ВРег(КПП);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаКонтрагента.Наименование, " ", "");
		СтрокаКонтрагента.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
		НаименованиеПолноеПоиск = СтрЗаменить(СтрокаКонтрагента.НаименованиеПолное, " ", "");
		СтрокаКонтрагента.НаименованиеПолноеПоиск = ВРег(НаименованиеПолноеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ТаблицаКонтрагентов - ТаблицаЗначений:
//  * Код - Строка
//  * Наименование - Строка
//  * НаименованиеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоПартнерам(ТаблицаКонтрагентов)
	
	Для Каждого СтрокаКонтрагента Из ТаблицаКонтрагентов Цикл
		
		Код = СтрЗаменить(СтрокаКонтрагента.Код, " ", "");
		СтрокаКонтрагента.Код = ВРег(Код);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаКонтрагента.Наименование, " ", "");
		СтрокаКонтрагента.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодобратьКонтрагентаПоРеквизитам(ЗагружаемаяСтрока, ТаблицаКонтрагентов, СписокНеоднозначностей)
	
	СтрокаПоискаИНН = ВРег(СтрЗаменить(ЗагружаемаяСтрока.ИНН, " ", "")); 
	СтрокаПоискаКПП = ВРег(СтрЗаменить(ЗагружаемаяСтрока.КПП, " ", "")); 
	СтрокаПоискаКонтрагент = ВРег(СтрЗаменить(ЗагружаемаяСтрока.КонтрагентНаименование, " ", ""));
	
	ЕстьИНН = ЗначениеЗаполнено(ЗагружаемаяСтрока.ИНН);
	ЕстьКПП = ЗначениеЗаполнено(ЗагружаемаяСтрока.КПП);
	ЕстьИмя = ЗначениеЗаполнено(ЗагружаемаяСтрока.КонтрагентНаименование);
	
	ДанныеНайдены = Ложь;
	
	// Поиск по всем заполненным полям
	СтруктураПоиска = Новый Структура;
	Если ЕстьИНН Тогда
		СтруктураПоиска.Вставить("ИНН", СтрокаПоискаИНН);
	КонецЕсли;
	Если ЕстьКПП Тогда
		СтруктураПоиска.Вставить("КПП", СтрокаПоискаКПП);
	КонецЕсли;
	Если ЕстьИмя Тогда
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаКонтрагент);
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеНайдены = Истина;
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьИмя Тогда
		
		СтруктураПоиска.Удалить("НаименованиеПоиск");
		СтруктураПоиска.Вставить("НаименованиеПолноеПоиск", СтрокаПоискаКонтрагент);
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ДанныеНайдены = Истина;
	КонецЕсли;
	
	// Высший приоритет по ИНН
	Если НЕ ДанныеНайдены
	   И ЕстьИНН
	   И ЕстьИмя Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИНН", СтрокаПоискаИНН);
		
		Если ЕстьКПП Тогда
			СтруктураПоиска.Вставить("КПП", СтрокаПоискаКПП);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск по наименованию
	Если НЕ ДанныеНайдены
	   И ЕстьИНН
	   И ЕстьИмя Тогда
		
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаКонтрагент);
		НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Поиск по полному наименованию
	Если НЕ ДанныеНайдены
	   И ЕстьИНН
	   И ЕстьИмя Тогда
		
		СтруктураПоиска.Вставить("НаименованиеПолноеПоиск", СтрокаПоискаКонтрагент);
		НайденныеСтроки = ТаблицаКонтрагентов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтрокаКонтрагента = НайденныеСтроки[0];
			НайденныйКонтрагент = СтрокаКонтрагента.Контрагент;
			
		Иначе
			
			СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
			СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			СтрокаНеоднозначности.Колонка = "Контрагент";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйКонтрагент;
	
КонецФункции

Функция ПодобратьПартнераПоРеквизитам(ЗагружаемаяСтрока, ТаблицаПартнеров, СписокНеоднозначностей)
	
	СтрокаПоискаКод = ВРег(СтрЗаменить(ЗагружаемаяСтрока.Код, " ", "")); 
	СтрокаПоискаПартнер = ВРег(СтрЗаменить(ЗагружаемаяСтрока.ПартнерНаименование, " ", ""));
	
	ЕстьКод = ЗначениеЗаполнено(ЗагружаемаяСтрока.Код);
	ЕстьИмя = ЗначениеЗаполнено(ЗагружаемаяСтрока.ПартнерНаименование);
	
	ДанныеНайдены = Ложь;
	
	Если ЕстьКод Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Код", СтрокаПоискаКод);
		
		НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьИмя Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаПартнер);
		
		НайденныеСтроки = ТаблицаПартнеров.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйПартнер = Справочники.Партнеры.ПустаяСсылка();
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтрокаПартнера = НайденныеСтроки[0];
			НайденныйПартнер = СтрокаПартнера.Партнер;
			
		Иначе
			
			СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
			СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			СтрокаНеоднозначности.Колонка = "Партнер";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйПартнер;
	
КонецФункции

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.Контрагенты
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * КонтрагентНаименование - Строка
//  * ИНН - Строка
//  * КПП - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейКонтрагентов(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.КонтрагентНаименование) Тогда
		
		ТекстУсловия =
		"Контрагенты.Наименование = &Наименование
		| ИЛИ Контрагенты.НаименованиеПолное = &Наименование";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.КонтрагентНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ИНН) Тогда
		
		ТекстУсловия =
		"Контрагенты.ИНН = &ИНН";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("ИНН", ЗагружаемыеЗначенияСтрока.ИНН);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.КПП) Тогда
		
		ТекстУсловия =
		"Контрагенты.КПП = &КПП";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.КПП);
		
	КонецЕсли;
	
	ТекстИ = ТекстОбъединенияУсловийЗапроса();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.Партнеры
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * ПартнерНаименование - Строка
//  * Код - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейПартнеров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ПартнерНаименование) Тогда
		
		ТекстУсловия =
		"Партнеры.Наименование = &Наименование";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ПартнерНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Код) Тогда
		
		ТекстУсловия =
		"Партнеры.Код = &Код";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.Код);
		
	КонецЕсли;
	
	ТекстИ = ТекстОбъединенияУсловийЗапроса();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	НЕ Партнеры.ПометкаУдаления
	|	И Партнеры.Клиент";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений:
//  * СегментНаименование - Строка
//  * Код - Строка
//  * Идентификатор - Число
//  ТаблицаДляЗаполнения - ТаблицаЗначений:
//  * Сегмент - СправочникСсылка.СегментыНоменклатуры
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
//  СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначностей:
// * Колонка - Строка
// * Идентификатор - Число 
//
Процедура СопоставитьЗагружаемыеДанныеТЧСегментыТоваров(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	ТаблицаСегментовТоваров = ТаблицаСегментовТоваров();
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.Сегмент = ПодобратьСегментНоменклатурыПоРеквизитам(
			СтрокаДанных, ТаблицаСегментовТоваров, СписокНеоднозначностей);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  ТаблицаЗначений - Таблица сегментов товаров:
//  * Код - Строка
//  * Наименование - Строка
//  * Сегмент - СправочникСсылка.СегментыНоменклатуры
//
Функция ТаблицаСегментовТоваров()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СегментыНоменклатуры.Код КАК Код,
	|	СегментыНоменклатуры.Наименование КАК Наименование,
	|	СегментыНоменклатуры.Ссылка КАК Сегмент
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК СегментыНоменклатуры
	|ГДЕ
	|	НЕ СегментыНоменклатуры.ПометкаУдаления
	|	И НЕ СегментыНоменклатуры.ЭтоГруппа";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСегментов = РезультатЗапроса.Выгрузить();
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаСегментов.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	ЗаполнитьПоляПоискаПоСегментамТоваров(ТаблицаСегментов);
	
	Возврат ТаблицаСегментов;
	
КонецФункции

// Параметры:
//  ТаблицаСегментов - ТаблицаЗначений:
//  * Код - Строка
//  * Наименование - Строка
//  * НаименованиеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоСегментамТоваров(ТаблицаСегментов)
	
	Для Каждого СтрокаСегмента Из ТаблицаСегментов Цикл
		
		Код = СтрЗаменить(СтрокаСегмента.Код, " ", "");
		СтрокаСегмента.Код = ВРег(Код);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаСегмента.Наименование, " ", "");
		СтрокаСегмента.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодобратьСегментНоменклатурыПоРеквизитам(ЗагружаемаяСтрока, ТаблицаСегментов, СписокНеоднозначностей)
	
	СтрокаПоискаКод = ВРег(СтрЗаменить(ЗагружаемаяСтрока.Код, " ", "")); 
	СтрокаПоискаСегмент = ВРег(СтрЗаменить(ЗагружаемаяСтрока.СегментНаименование, " ", ""));
	
	ЕстьКод = ЗначениеЗаполнено(ЗагружаемаяСтрока.Код);
	ЕстьИмя = ЗначениеЗаполнено(ЗагружаемаяСтрока.СегментНаименование);
	
	ДанныеНайдены = Ложь;
	
	Если ЕстьКод Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Код", СтрокаПоискаКод);
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьИмя Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаСегмент);
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйСегмент = Справочники.СегментыНоменклатуры.ПустаяСсылка();
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтрокаСегмента = НайденныеСтроки[0];
			НайденныйСегмент = СтрокаСегмента.Сегмент;
			
		Иначе
			
			СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
			СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			СтрокаНеоднозначности.Колонка = "Сегмент";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйСегмент;
	
КонецФункции

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.СегментыНоменклатуры
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * СегментНаименование - Строка
//  * Код - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейСегментовТоваров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.СегментНаименование) Тогда
		
		ТекстУсловия =
		"Сегменты.Наименование = &Наименование";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.СегментНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Код) Тогда
		
		ТекстУсловия =
		"Сегменты.Код = &Код";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.Код);
		
	КонецЕсли;
	
	ТекстИ = ТекстОбъединенияУсловийЗапроса();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сегменты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СегментыНоменклатуры КАК Сегменты
	|ГДЕ
	|	НЕ Сегменты.ПометкаУдаления
	|	И НЕ Сегменты.ЭтоГруппа";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеТЧСегментыПартнеров(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	ТаблицаСегментовПартнеров = ТаблицаСегментовПартнеров();
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		НоваяСтрока.Сегмент =
			ПодобратьСегментПартнеровПоРеквизитам(СтрокаДанных, ТаблицаСегментовПартнеров, СписокНеоднозначностей);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСегментовПартнеров()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СегментыПартнеров.Код КАК Код,
	|	СегментыПартнеров.Наименование КАК Наименование,
	|	СегментыПартнеров.Ссылка КАК Сегмент
	|ИЗ
	|	Справочник.СегментыПартнеров КАК СегментыПартнеров
	|ГДЕ
	|	НЕ СегментыПартнеров.ПометкаУдаления
	|	И НЕ СегментыПартнеров.ЭтоГруппа";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаСегментов = РезультатЗапроса.Выгрузить();
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ТаблицаСегментов.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	ЗаполнитьПоляПоискаПоСегментамПартнеров(ТаблицаСегментов);
	
	Возврат ТаблицаСегментов;
	
КонецФункции

// ЗаполнитьПоляПоискаПоСегментамТоваров.
// 
// Параметры:
//  ТаблицаСегментов - ТаблицаЗначений:
//  * Код - Строка
//  * Наименование - Строка
//  * НаименованиеПоиск - Строка
Процедура ЗаполнитьПоляПоискаПоСегментамПартнеров(ТаблицаСегментов)
	
	Для Каждого СтрокаСегмента Из ТаблицаСегментов Цикл
		
		Код = СтрЗаменить(СтрокаСегмента.Код, " ", "");
		СтрокаСегмента.Код = ВРег(Код);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаСегмента.Наименование, " ", "");
		СтрокаСегмента.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодобратьСегментПартнеровПоРеквизитам(ЗагружаемаяСтрока, ТаблицаСегментов, СписокНеоднозначностей)
	
	СтрокаПоискаКод = ВРег(СтрЗаменить(ЗагружаемаяСтрока.Код, " ", "")); 
	СтрокаПоискаСегмент = ВРег(СтрЗаменить(ЗагружаемаяСтрока.СегментНаименование, " ", ""));
	
	ЕстьКод = ЗначениеЗаполнено(ЗагружаемаяСтрока.Код);
	ЕстьИмя = ЗначениеЗаполнено(ЗагружаемаяСтрока.СегментНаименование);
	
	ДанныеНайдены = Ложь;
	
	Если ЕстьКод Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Код", СтрокаПоискаКод);
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьИмя Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокаПоискаСегмент);
		
		НайденныеСтроки = ТаблицаСегментов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеНайдены = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныйСегмент = Справочники.СегментыПартнеров.ПустаяСсылка();
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			
			СтрокаСегмента = НайденныеСтроки[0];
			НайденныйСегмент = СтрокаСегмента.Сегмент;
			
		Иначе
			
			СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
			СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
			СтрокаНеоднозначности.Колонка = "Сегмент";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденныйСегмент;
	
КонецФункции

Процедура ЗаполнитьСписокНеоднозначностейСегментовПартнеров(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.СегментНаименование) Тогда
		
		ТекстУсловия =
		"Сегменты.Наименование = &Наименование";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.СегментНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Код) Тогда
		
		ТекстУсловия =
		"Сегменты.Код = &Код";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.Код);
		
	КонецЕсли;
	
	ТекстИ = ТекстОбъединенияУсловийЗапроса();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сегменты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СегментыПартнеров КАК Сегменты
	|ГДЕ
	|	НЕ Сегменты.ПометкаУдаления
	|	И НЕ Сегменты.ЭтоГруппа";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстОбъединенияУсловийЗапроса()
	
	ТекстИ = НСтр("ru = 'И'");
	ТекстОбъединения = Символы.ПС + ТекстИ + " ";
	
	Возврат ТекстОбъединения;
	
КонецФункции

// Параметры:
//  ЗагружаемыеДанные - ТаблицаЗначений:
//  * НоменклатураНаименование - Строка
//  * Артикул - Строка
//  * Штрихкод - Строка
//  * Код - Строка
//  * ХарактеристикаНаименование - Строка
//  * Идентификатор - Число
//  ТаблицаДляЗаполнения - ТаблицаЗначений, Произвольный - Таблица для заполнения
//  ДополнительныеПараметры - Структура:
//  * НастройкиОтображенияПолей - Структура:
//  ** Характеристика - Булево
//  СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначностей:
// * Колонка - Строка
// * Идентификатор - Число
//
Процедура СопоставитьЗагружаемыеДанныеТЧТовары(ЗагружаемыеДанные, ТаблицаДляЗаполнения, ДополнительныеПараметры, СписокНеоднозначностей)
	
	ДанныеИБПоНоменклатуре = ДанныеИБПоНоменклатуреИХарактеристикам();
	ТаблицаШтрихкодов = ДанныеИБПоШтрихкодам(ЗагружаемыеДанные);
	
	НастройкиОтображенияПолей = ДополнительныеПараметры.НастройкиОтображенияПолей;
	ИспользоватьХарактеристики = НастройкиОтображенияПолей.Характеристика;
	
	Для Каждого СтрокаДанных Из ЗагружаемыеДанные Цикл
		
		НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		
		ДанныеНоменклатурыИХарактеристики = ПодобратьНоменклатуруПоРеквизитам(
			СтрокаДанных,
			ДанныеИБПоНоменклатуре,
			ТаблицаШтрихкодов,
			ИспользоватьХарактеристики,
			СписокНеоднозначностей);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеНоменклатурыИХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - Данные ИБ по номенклатуре и характеристикам:
// * ТаблицаНоменклатуры - ТаблицаЗначений:
// ** Код - Строка 
// ** Артикул - Строка 
// ** Наименование - Строка 
// ** НаименованиеПолное - Строка 
// ** Номенклатура - СправочникСсылка.Номенклатура 
// ** ИспользованиеХарактеристик - Булево 
// ** ЗначениеДляОтбораХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
// * ТаблицаХарактеристик - ТаблицаЗначений:
// ** НаименованиеХарактеристики - Строка 
// ** НаименованиеХарактеристикиПолное - Строка 
// ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры 
// ** ЗначениеДляОтбораХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
//
Функция ДанныеИБПоНоменклатуреИХарактеристикам()
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицаНоменклатуры", Новый ТаблицаЗначений);
	Результат.Вставить("ТаблицаХарактеристик", Новый ТаблицаЗначений);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Наименование КАК Наименование,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	НЕОПРЕДЕЛЕНО КАК ЗначениеДляОтбораХарактеристик
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
	|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|			И (ВариантыКомплектацииНоменклатуры.Основной)
	|ГДЕ
	|	НЕ Номенклатура.ЭтоГруппа
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|	И Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	И &ТекстУсловияОтбор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Номенклатура.Ссылка,
	|	Номенклатура.Код,
	|	Номенклатура.Артикул,
	|	Номенклатура.Наименование,
	|	Номенклатура.НаименованиеПолное,
	|	Номенклатура.ИспользованиеХарактеристик,
	|	ВЫБОР
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА Номенклатура.Ссылка
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|			ТОГДА Номенклатура.ВладелецХарактеристик
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ТОГДА Номенклатура.ВидНоменклатуры
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО (ВЫБОР
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|					ТОГДА Номенклатура.Ссылка
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры)
	|					ТОГДА Номенклатура.ВладелецХарактеристик
	|				КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|					ТОГДА Номенклатура.ВидНоменклатуры
	|				ИНАЧЕ НЕОПРЕДЕЛЕНО
	|			КОНЕЦ = ХарактеристикиНоменклатуры.Владелец)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыКомплектацииНоменклатуры КАК ВариантыКомплектацииНоменклатуры
	|		ПО (ВариантыКомплектацииНоменклатуры.Владелец = Номенклатура.Ссылка)
	|			И (ВариантыКомплектацииНоменклатуры.Владелец.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Набор))
	|			И (ВариантыКомплектацииНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ВариантыКомплектацииНоменклатуры.Основной)
	|ГДЕ
	|	Номенклатура.ИспользованиеХарактеристик <> ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|	И НЕ Номенклатура.ПометкаУдаления
	|	И Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|	И &ТекстУсловияОтбор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатуры.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	ТаблицаНоменклатуры.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ПОМЕСТИТЬ ПараметрыОтбораХарактеристик
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыОтбора.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ХарактеристикиНоменклатуры.Наименование КАК Наименование,
	|	ХарактеристикиНоменклатуры.НаименованиеПолное КАК НаименованиеПолное
	|ПОМЕСТИТЬ ТаблицаХарактеристик
	|ИЗ
	|	ПараметрыОтбораХарактеристик КАК ПараметрыОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ПО ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = ХарактеристикиНоменклатуры.Владелец
	|ГДЕ
	|	НЕ ПараметрыОтбора.ЗначениеДляОтбораХарактеристик = НЕОПРЕДЕЛЕНО
	|	И НЕ ХарактеристикиНоменклатуры.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначениеДляОтбораХарактеристик,
	|	Характеристика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хар.Характеристика.Наименование КАК НаименованиеХарактеристики,
	|	Хар.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	|	Хар.Характеристика КАК Характеристика,
	|	Хар.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ИЗ
	|	ТаблицаХарактеристик КАК Хар
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ном.Код КАК Код,
	|	Ном.Артикул КАК Артикул,
	|	Ном.Наименование КАК Наименование,
	|	Ном.НаименованиеПолное КАК НаименованиеПолное,
	|	Ном.Номенклатура КАК Номенклатура,
	|	Ном.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	Ном.ЗначениеДляОтбораХарактеристик КАК ЗначениеДляОтбораХарактеристик
	|ИЗ
	|	ТаблицаНоменклатуры КАК Ном";
		
	ТекстУсловияОтбораПоНоменклатуре = "ИСТИНА";
	
	ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТекстУсловияОтбор", ТекстУсловияОтбораПоНоменклатуре);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	РезультатЗапроса = МассивРезультатов[3]; // РезультатЗапроса
	
	Результат.ТаблицаХарактеристик = РезультатЗапроса.Выгрузить();
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаХарактеристик.Колонки.Добавить("НаименованиеХарактеристикиПолноеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоХарактеристике(Результат.ТаблицаХарактеристик);
	
	РезультатЗапроса = МассивРезультатов[4]; // РезультатЗапроса
	
	Результат.ТаблицаНоменклатуры = РезультатЗапроса.Выгрузить();
	
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("АртикулПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПоиск", ОписаниеТиповСтрока);
	Результат.ТаблицаНоменклатуры.Колонки.Добавить("НаименованиеПолноеПоиск", ОписаниеТиповСтрока);
	
	ЗаполнитьПоляПоискаПоНоменклатуре(Результат.ТаблицаНоменклатуры);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТаблицаНоменклатуры - ТаблицаЗначений:
//  * Код - Строка
//  * Артикул - Строка
//  * Наименование - Строка
//  * НаименованиеПолное - Строка
//  * АртикулПоиск - Строка
//  * НаименованиеПоиск - Строка
//  * НаименованиеПолноеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоНоменклатуре(ТаблицаНоменклатуры)
	
	Для Каждого СтрокаНоменклатуры Из ТаблицаНоменклатуры Цикл
		
		Код = СтрЗаменить(СтрокаНоменклатуры.Код, " ", "");
		СтрокаНоменклатуры.Код = ВРег(Код);
		
		АртикулПоиск = СтрЗаменить(СтрокаНоменклатуры.Артикул, " ", "");
		СтрокаНоменклатуры.АртикулПоиск = ВРег(АртикулПоиск);
		
		НаименованиеПоиск = СтрЗаменить(СтрокаНоменклатуры.Наименование, " ", "");
		СтрокаНоменклатуры.НаименованиеПоиск = ВРег(НаименованиеПоиск);
		
		НаименованиеПолноеПоиск = СтрЗаменить(СтрокаНоменклатуры.НаименованиеПолное, " ", "");
		СтрокаНоменклатуры.НаименованиеПолноеПоиск = ВРег(НаименованиеПолноеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

// Параметры:
//  ТаблицаХарактеристик - ТаблицаЗначений:
//  * НаименованиеХарактеристики - Строка
//  * НаименованиеХарактеристикиПолное - Строка
//  * НаименованиеХарактеристикиПоиск - Строка
//  * НаименованиеХарактеристикиПолноеПоиск - Строка
//
Процедура ЗаполнитьПоляПоискаПоХарактеристике(ТаблицаХарактеристик)
	
	Для Каждого СтрокаХарактеристики Из ТаблицаХарактеристик Цикл
		
		НаименованиеХарактеристикиПоиск =
			СтрЗаменить(СтрокаХарактеристики.НаименованиеХарактеристики, " ", "");
		СтрокаХарактеристики.НаименованиеХарактеристикиПоиск = ВРег(НаименованиеХарактеристикиПоиск);
		
		НаименованиеХарактеристикиПолноеПоиск =
			СтрЗаменить(СтрокаХарактеристики.НаименованиеХарактеристикиПолное, " ", "");
		СтрокаХарактеристики.НаименованиеХарактеристикиПолноеПоиск =
			ВРег(НаименованиеХарактеристикиПолноеПоиск);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДанныеИБПоШтрихкодам(ТаблицаДанных)
	
	ДанныеПоШтрихкодам = ТаблицаДанныхШтрихкодов();
	
	ИмяКолонкиШтрихкод = "Штрихкод";
	ТаблицаШтрихкодов = ТаблицаДанных.Скопировать(, ИмяКолонкиШтрихкод);
	ТаблицаШтрихкодов.Свернуть(ИмяКолонкиШтрихкод);
	
	Штрихкоды = Новый Массив; // Массив из Строка
	Для Каждого СтрокаШтрихкода Из ТаблицаШтрихкодов Цикл
		
		ЗначениеШтрихкодаСтроки = СтрокаШтрихкода[ИмяКолонкиШтрихкод]; // Строка
		
		Если НЕ ПустаяСтрока(ЗначениеШтрихкодаСтроки) Тогда
			Штрихкоды.Добавить(ЗначениеШтрихкодаСтроки);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Штрихкоды.Количество() > 0 Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Штрихкод КАК Штрихкод,
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура,
		|	ШтрихкодыНоменклатуры.Характеристика КАК Характеристика,
		|	ШтрихкодыНоменклатуры.Упаковка КАК Упаковка
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В (&Штрихкоды)
		|	И ШтрихкодыНоменклатуры.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)";
		
		ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Штрихкоды", Штрихкоды);
		Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СтрокаДанных = ДанныеПоШтрихкодам.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеПоШтрихкодам;
	
КонецФункции

// Возвращаемое значение:
//  ТаблицаЗначений:
// * Штрихкод - Строка
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// * Упаковка - СправочникСсылка.УпаковкиЕдиницыИзмерения
//
Функция ТаблицаДанныхШтрихкодов()
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповНоменклатура = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
	ОписаниеТиповХарактеристика = Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры");
	ОписаниеТиповУпаковка = Новый ОписаниеТипов("СправочникСсылка.УпаковкиЕдиницыИзмерения");
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Штрихкод", ОписаниеТиповСтрока);
	Таблица.Колонки.Добавить("Номенклатура", ОписаниеТиповНоменклатура);
	Таблица.Колонки.Добавить("Характеристика", ОписаниеТиповХарактеристика);
	Таблица.Колонки.Добавить("Упаковка", ОписаниеТиповУпаковка);
	
	Возврат Таблица;
	
КонецФункции

Функция ПодобратьНоменклатуруПоРеквизитам(ЗагружаемаяСтрока, ДанныеИБПоНоменклатуре, ТаблицаШтрихкодов, ИспользоватьХарактеристики, СписокНеоднозначностей)
	
	ТаблицаНоменклатуры = ДанныеИБПоНоменклатуре.ТаблицаНоменклатуры;
	ТаблицаХарактеристик = ДанныеИБПоНоменклатуре.ТаблицаХарактеристик;
	
	СтрокиПоиска = Новый Структура;
	Штрихкод = СтрЗаменить(ЗагружаемаяСтрока.Штрихкод, " ", "");
	СтрокаПоискаШтрихкод = ВРег(Штрихкод);
	СтрокиПоиска.Вставить("Штрихкод", СтрокаПоискаШтрихкод);
	Код = СтрЗаменить(ЗагружаемаяСтрока.Код, " ", "");
	СтрокаПоискаКод = ВРег(Код);
	СтрокиПоиска.Вставить("Код", СтрокаПоискаКод);
	Артикул = СтрЗаменить(ЗагружаемаяСтрока.Артикул, " ", "");
	СтрокаПоискаАртикул = ВРег(Артикул);
	СтрокиПоиска.Вставить("Артикул", СтрокаПоискаАртикул);
	Номенклатура = СтрЗаменить(ЗагружаемаяСтрока.НоменклатураНаименование, " ", "");
	СтрокаПоискаНоменклатура = ВРег(Номенклатура);
	СтрокиПоиска.Вставить("Номенклатура", СтрокаПоискаНоменклатура);
	Если ИспользоватьХарактеристики Тогда
		
		Характеристика = СтрЗаменить(ЗагружаемаяСтрока.ХарактеристикаНаименование, " ", "");
		СтрокаПоискаХарактеристика = ВРег(Характеристика);
		СтрокиПоиска.Вставить("Характеристика", СтрокаПоискаХарактеристика);
		
	КонецЕсли;
	
	ЕстьШтрихкод = ЗначениеЗаполнено(Штрихкод);
	ЕстьКод = ЗначениеЗаполнено(Код);
	ЕстьАртикул = ЗначениеЗаполнено(Артикул);
	ЕстьНоменклатура = ЗначениеЗаполнено(Номенклатура);
	ЕстьХарактеристика = (ИспользоватьХарактеристики И ЗначениеЗаполнено(СтрокаПоискаХарактеристика));
	
	НайденныеДанные = НайденныеДанныеПоТоварам();
	ДанныеНайдены = Ложь;
	
	Если ЕстьШтрихкод Тогда
		
		ПодобратьНоменклатуруПоШтрихкоду(ТаблицаШтрихкодов, СтрокиПоиска, ДанныеНайдены, НайденныеДанные);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьКод
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоКодуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И ЕстьНоменклатура
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулуНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьКод
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоКоду(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И ЕстьНоменклатура
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулуНоменклатуре(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И НЕ ЕстьАртикул
	   И ЕстьНоменклатура
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И НЕ ЕстьНоменклатура
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулу(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И ЕстьАртикул
	   И НЕ ЕстьНоменклатура
	   И ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоАртикулуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	Если НЕ ДанныеНайдены
	   И НЕ ЕстьАртикул
	   И ЕстьНоменклатура
	   И НЕ ЕстьХарактеристика Тогда
		
		ПодобратьНоменклатуруПоНаименованию(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены);
		
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	Если ИспользоватьХарактеристики Тогда
		СтруктураРезультата.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
	
	Если ДанныеНайдены Тогда
		
		Если НайденныеДанные.Количество() = 1 Тогда
			
			СтрокаНоменклатуры = НайденныеДанные[0];
			ЗаполнитьЗначенияСвойств(СтруктураРезультата, СтрокаНоменклатуры);
			
		Иначе
			
			ЗаполнитьСпискиНеоднозначностиПриПодбореНоменклатуры(ЗагружаемаяСтрока, СписокНеоднозначностей, ИспользоватьХарактеристики);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции

Процедура ЗаполнитьСпискиНеоднозначностиПриПодбореНоменклатуры(ЗагружаемаяСтрока, СписокНеоднозначностей, ИспользоватьХарактеристики)
	
	СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
	СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
	СтрокаНеоднозначности.Колонка = "Номенклатура";
	
	Если ИспользоватьХарактеристики Тогда
		
		СтрокаНеоднозначности = СписокНеоднозначностей.Добавить();
		СтрокаНеоднозначности.Идентификатор = ЗагружаемаяСтрока.Идентификатор;
		СтрокаНеоднозначности.Колонка = "Характеристика";
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.Номенклатура
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * НоменклатураНаименование - Строка
//  * Артикул - Строка
//  * Код - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейНоменклатуры(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Запрос = Новый Запрос;
	
	ТекстыУсловий = Новый Массив; // Массив из Строка
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.НоменклатураНаименование) Тогда
		
		ТекстУсловия =
		"(Номенклатура.Наименование = &Наименование
		| ИЛИ Номенклатура.НаименованиеПолное = &Наименование)";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.НоменклатураНаименование);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Артикул) Тогда
		
		ТекстУсловия =
		"Номенклатура.Артикул = &Артикул";
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Артикул", ЗагружаемыеЗначенияСтрока.Артикул);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.Код) Тогда
		
		ТекстУсловия =
		"Номенклатура.Код = &Код";
		
		ТекстыУсловий.Добавить(ТекстУсловия);
		Запрос.УстановитьПараметр("Код", ЗагружаемыеЗначенияСтрока.Код);
		
	КонецЕсли;
	
	ТекстИ = ТекстОбъединенияУсловийЗапроса();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	НЕ Номенклатура.ПометкаУдаления";
	
	Если ТекстыУсловий.Количество() > 0 Тогда
		
		ПолныйТекстУсловий = СтрСоединить(ТекстыУсловий, ТекстИ);
		ТекстЗапроса = ТекстЗапроса + ТекстИ + ПолныйТекстУсловий;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СписокНеоднозначностей - Массив из СправочникСсылка.ХарактеристикиНоменклатуры
//  ЗагружаемыеЗначенияСтрока - СтрокаТаблицыЗначений:
//  * ХарактеристикаНаименование - Строка
//
Процедура ЗаполнитьСписокНеоднозначностейХарактеристики(СписокНеоднозначностей, ЗагружаемыеЗначенияСтрока)
	
	Если НЕ ЗначениеЗаполнено(ЗагружаемыеЗначенияСтрока.ХарактеристикаНаименование) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ХарактеристикаНаименование);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Характеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	НЕ Характеристики.ПометкаУдаления
	|	И Характеристики.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Характеристики.Наименование = &Наименование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Характеристики.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК Характеристики
	|ГДЕ
	|	НЕ Характеристики.ПометкаУдаления
	|	И Характеристики.Владелец ССЫЛКА Справочник.Номенклатура
	|	И Характеристики.НаименованиеПолное = &Наименование";
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СписокНеоднозначностей.Добавить(Выборка.Ссылка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоНаименованию(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)

	СтруктураПоиска = Новый Структура("АртикулПоиск", СтрокиПоиска.Артикул);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденнаяНоменклатураПоКлючу,
		ТаблицаХарактеристик,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоКлючу,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные,
				НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулу(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура("АртикулПоиск", СтрокиПоиска.Артикул);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)

	СтруктураПоиска = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденныеХарактеристикиПоКлючу,
		ТаблицаНоменклатуры,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденныеХарактеристикиПоКлючу,
			ТаблицаНоменклатуры,
			ОтборПоСвязаннойТаблице);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			СтруктураПоиска = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
			НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
			ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(
				НайденныеХарактеристикиПоКлючу,
				ТаблицаНоменклатуры,
				ОтборПоСвязаннойТаблице);
			
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
				НайденныеСтроки = ПоискПоСвязаннойТаблице(
					НайденныеХарактеристикиПоКлючу,
					ТаблицаНоменклатуры,
					ОтборПоСвязаннойТаблице);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтруктураПоиска = Новый Структура("НаименованиеПоиск",	СтрокиПоиска.Номенклатура);
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
			
			СтруктураПоиска = Новый Структура("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
			
		КонецЕсли;
		
		Для каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			
			СтруктураПоиска = Новый Структура(
				"ЗначениеДляОтбораХарактеристик", НоменклатураПоКлючу.ЗначениеДляОтбораХарактеристик);
			НайденныеХарактеристикиПоКлючу = ТаблицаХарактеристик.НайтиСтроки(СтруктураПоиска);
			
			Для каждого ХарактеристикаПоКлючу Из НайденныеХарактеристикиПоКлючу Цикл
				
				ДобавитьДанныеНайденнойСтроки(
					НайденныеДанные, НоменклатураПоКлючу.Номенклатура, ХарактеристикаПоКлючу.Характеристика);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные,
				НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НайденныеДанные.Количество() > 0 Тогда
		ДанныеНайдены = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулуНоменклатуре(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("АртикулПоиск", СтрокиПоиска.Артикул);
	СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
		
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
			
			СтруктураПоискаАртикул = Новый Структура("АртикулПоиск", СтрокиПоиска.Артикул);
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаАртикул);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоКоду(ТаблицаНоменклатуры, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Код", СтрокиПоиска.Код);
	СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
		
		НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		Если НайденнаяНоменклатураПоКлючу.Количество() = 0 Тогда
			
			СтруктураПоискаКод = Новый Структура("Код", СтрокиПоиска.Код);
			НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоискаКод);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденнаяНоменклатураПоКлючу.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НоменклатураПоКлючу Из НайденнаяНоменклатураПоКлючу Цикл
			
			ДобавитьДанныеНайденнойСтроки(НайденныеДанные, НоменклатураПоКлючу.Номенклатура);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоАртикулуНоменклатуреХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("АртикулПоиск", СтрокиПоиска.Артикул);
	СтруктураПоиска.Вставить("НаименованиеПоиск", СтрокиПоиска.Номенклатура);
	
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденнаяНоменклатураПоКлючу,
		ТаблицаХарактеристик,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоКлючу,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("АртикулПоиск", СтрокиПоиска.Артикул);
		СтруктураПоиска.Вставить("НаименованиеПолноеПоиск", СтрокиПоиска.Номенклатура);
		НайденнаяНоменклатураПоАртикулНаименованиеПолное = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
		
		ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоАртикулНаименованиеПолное,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ОтборПоСвязаннойТаблице = Новый Структура;
			ОтборПоСвязаннойТаблице.Вставить("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
			НайденныеСтроки = ПоискПоСвязаннойТаблице(
				НайденнаяНоменклатураПоАртикулНаименованиеПолное,
				ТаблицаХарактеристик,
				ОтборПоСвязаннойТаблице);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные, НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоКодуХарактеристике(ТаблицаНоменклатуры, ТаблицаХарактеристик, НайденныеДанные, СтрокиПоиска, ДанныеНайдены)
	
	СтруктураПоиска = Новый Структура("Код", СтрокиПоиска.Код);
	НайденнаяНоменклатураПоКлючу = ТаблицаНоменклатуры.НайтиСтроки(СтруктураПоиска);
	ОтборПоСвязаннойТаблице = Новый Структура("НаименованиеХарактеристикиПоиск", СтрокиПоиска.Характеристика);
	НайденныеСтроки = ПоискПоСвязаннойТаблице(
		НайденнаяНоменклатураПоКлючу,
		ТаблицаХарактеристик,
		ОтборПоСвязаннойТаблице);
	
	Если НайденныеСтроки.Количество() = 0 Тогда
		
		ОтборПоСвязаннойТаблице = Новый Структура;
		ОтборПоСвязаннойТаблице.Вставить("НаименованиеХарактеристикиПолноеПоиск", СтрокиПоиска.Характеристика);
		НайденныеСтроки = ПоискПоСвязаннойТаблице(
			НайденнаяНоменклатураПоКлючу,
			ТаблицаХарактеристик,
			ОтборПоСвязаннойТаблице);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			
			ПустойОтбор = Новый Структура;
			НайденныеСтроки = ПоискПоСвязаннойТаблице(
				НайденнаяНоменклатураПоКлючу,
				ТаблицаХарактеристик,
				ПустойОтбор);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			
			ДобавитьДанныеНайденнойСтроки(
				НайденныеДанные,
				НайденнаяСтрока.Номенклатура,
				НайденнаяСтрока.Характеристика);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодобратьНоменклатуруПоШтрихкоду(ТаблицаШтрихкодов, СтрокиПоиска, ДанныеНайдены, НайденныеДанные)
	
	СтруктураПоискаШтрихкод = Новый Структура;
	СтруктураПоискаШтрихкод.Вставить("Штрихкод", СтрокиПоиска.Штрихкод);
	
	НайденныеСтроки = ТаблицаШтрихкодов.НайтиСтроки(СтруктураПоискаШтрихкод);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ДанныеНайдены = Истина;
		СтрокаШтрихкода = НайденныеСтроки[0];
		ДобавитьДанныеНайденнойСтроки(НайденныеДанные, СтрокаШтрихкода.Номенклатура, СтрокаШтрихкода.Характеристика);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДанныеНайденнойСтроки(НайденныеСтроки, Номенклатура, Характеристика = Неопределено);
	
	Данные = СтрокаДанныхПоТоварам();
	Данные.Номенклатура = Номенклатура;
	Данные.Характеристика = Характеристика;
	
	НайденныеСтроки.Добавить(Данные);
	
КонецПроцедуры

// Поиск по связанной таблице.
// 
// Параметры:
//  МассивНайденныхРанее - Массив из СтрокаТаблицыЗначений - Массив найденных ранее
//  СвязаннаяТаблица - ТаблицаЗначений - Связанная таблица:
// * Код - Строка - 
// * Артикул - Строка - 
// * Наименование - Строка - 
// * НаименованиеПолное - Строка - 
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * ИспользованиеХарактеристик - Булево - 
// * ЗначениеДляОтбораХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры - 
//  ОтборПоСвязаннойТаблице - Структура - Отбор по связанной таблице:
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Номенклатура - СправочникСсылка.Номенклатура
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
Функция ПоискПоСвязаннойТаблице(МассивНайденныхРанее, СвязаннаяТаблица, ОтборПоСвязаннойТаблице)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Результат.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	
	Если МассивНайденныхРанее.Количество() > 0 Тогда
		
		Для каждого СтрокаПоКлючу Из МассивНайденныхРанее Цикл
			
			ОтборДляПоиска = Новый Структура;
			ОтборДляПоиска.Вставить("ЗначениеДляОтбораХарактеристик", СтрокаПоКлючу.ЗначениеДляОтбораХарактеристик);
			
			Для каждого ЭлементОтбора Из ОтборПоСвязаннойТаблице Цикл
				ОтборДляПоиска.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
			
			НайденныеПоОтбору = СвязаннаяТаблица.НайтиСтроки(ОтборДляПоиска);
			Для каждого СтрокаНайденнаяПоОтбору Из НайденныеПоОтбору Цикл
				
				НоваяСтрокаРезультата = Результат.Добавить();
				НоваяСтрокаРезультата.Номенклатура = СтрокаНайденнаяПоОтбору.Номенклатура;
				НоваяСтрокаРезультата.Характеристика = СтрокаПоКлючу.Характеристика;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//++ Локализация

#Область ДанныеПечати

// Текст запроса печати карточки с учетом корректировок
// 
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаАктуальныеДанные()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентов.Исправление
	|			ТОГДА УсловияРетроБонусовКлиентов.ИсправляемыйДокумент
	|		ИНАЧЕ УсловияРетроБонусовКлиентов.Ссылка
	|	КОНЕЦ КАК ДокументУсловий,
	|	УсловияРетроБонусовКлиентов.Ссылка КАК Ссылка,
	|	УсловияРетроБонусовКлиентов.Валюта КАК Валюта,
	|	УсловияРетроБонусовКлиентов.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
	|ГДЕ
	|	УсловияРетроБонусовКлиентов.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияРетроБонусовКлиентов.Ссылка КАК ДокументУсловий,
	|	УсловияРетроБонусовКлиентов.Ссылка КАК Ссылка,
	|	УсловияРетроБонусовКлиентов.НачалоДействия КАК НачалоДействия,
	|	УсловияРетроБонусовКлиентов.ОкончаниеДействия КАК ОкончаниеДействия,
	|	УсловияРетроБонусовКлиентов.ВидРетроБонуса КАК ВидРетроБонуса,
	|	УсловияРетроБонусовКлиентов.Описание КАК Описание,
	|	УсловияРетроБонусовКлиентов.ОтборУчастников КАК ОтборУчастников,
	|	УсловияРетроБонусовКлиентов.ОтборТоваров КАК ОтборТоваров,
	|	УсловияРетроБонусовКлиентов.ВидРетроБонуса.УчитыватьНДС КАК УчитыватьНДС,
	|	УсловияРетроБонусовКлиентов.БонусПроцент КАК БонусПроцент,
	|	УсловияРетроБонусовКлиентов.СуммаПлан КАК СуммаПлан,
	|	УсловияРетроБонусовКлиентов.Валюта КАК Валюта,
	|	УсловияРетроБонусовКлиентов.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	УсловияРетроБонусовКлиентов.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	УсловияРетроБонусовКлиентов.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников,
	|	УсловияРетроБонусовКлиентов.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	УсловияРетроБонусовКлиентов.Номер КАК Номер,
	|	УсловияРетроБонусовКлиентов.Ответственный КАК Ответственный
	|ПОМЕСТИТЬ ВТ_ДокументыБезДвижений
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов КАК УсловияРетроБонусовКлиентов
	|ГДЕ
	|	УсловияРетроБонусовКлиентов.Ссылка В(&МассивОбъектов)
	|	И НЕ УсловияРетроБонусовКлиентов.Исправление
	|	И УсловияРетроБонусовКлиентов.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРетроБонусов.Согласован)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УсловияРетроБонусовКлиентовКонтрагенты.Ссылка КАК ДокументУсловий,
	|	УсловияРетроБонусовКлиентовКонтрагенты.Контрагент КАК Контрагент,
	|	УсловияРетроБонусовКлиентовКонтрагенты.Партнер КАК Партнер,
	|	СУММА(УсловияРетроБонусовКлиентовКонтрагенты.СуммаБонус) КАК СуммаБонус,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовКонтрагенты.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Документы.ДокументУсловий.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовКонтрагенты.НачалоДействия
	|	КОНЕЦ КАК НачалоДействия,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовКонтрагенты.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Документы.ДокументУсловий.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовКонтрагенты.ОкончаниеДействия
	|	КОНЕЦ КАК ОкончаниеДействия,
	|	СУММА(УсловияРетроБонусовКлиентовКонтрагенты.СуммаПлан) КАК СуммаПлан
	|ПОМЕСТИТЬ ВТ_РетроБонусыКлиентовКонтрагенты
	|ИЗ
	|	Документ.УсловияРетроБонусовКлиентов.Контрагенты КАК УсловияРетроБонусовКлиентовКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО УсловияРетроБонусовКлиентовКонтрагенты.Ссылка = ВТ_Документы.ДокументУсловий
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияРетроБонусовКлиентовКонтрагенты.Партнер,
	|	УсловияРетроБонусовКлиентовКонтрагенты.Ссылка,
	|	УсловияРетроБонусовКлиентовКонтрагенты.Контрагент,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовКонтрагенты.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Документы.ДокументУсловий.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовКонтрагенты.НачалоДействия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовКонтрагенты.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Документы.ДокументУсловий.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовКонтрагенты.ОкончаниеДействия
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументУсловий,
	|	Контрагент,
	|	Партнер,
	|	НачалоДействия,
	|	ОкончаниеДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ДоговорыСоглашения.НачалоДействия КАК НачалоДействия,
	|	ДоговорыСоглашения.ОкончаниеДействия КАК ОкончаниеДействия,
	|	ДоговорыСоглашения.ДокументУсловий КАК ДокументУсловий,
	|	ДоговорыСоглашения.Договор КАК Договор,
	|	ДоговорыСоглашения.Соглашение КАК Соглашение,
	|	ДоговорыСоглашения.УчитыватьПродажиПоИндивидуальным КАК УчитыватьПродажиПоИндивидуальным,
	|	ДоговорыСоглашения.СуммаПлан КАК СуммаПлан,
	|	ВЫБОР
	|		КОГДА ДоговорыСоглашения.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ДоговорыСоглашения.Договор.Партнер
	|		КОГДА ДоговорыСоглашения.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
	|			ТОГДА ДоговорыСоглашения.Соглашение.Партнер
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА ДоговорыСоглашения.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ДоговорыСоглашения.Договор.Контрагент
	|		КОГДА ДоговорыСоглашения.Соглашение <> ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
	|			ТОГДА ДоговорыСоглашения.Соглашение.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовДоговорыСоглашения КАК ДоговорыСоглашения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО ДоговорыСоглашения.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыСоглашения.Ссылка,
	|	ВЫБОР
	|		КОГДА ДоговорыСоглашения.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.НачалоДействия
	|		ИНАЧЕ ДоговорыСоглашения.НачалоДействия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДоговорыСоглашения.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.ОкончаниеДействия
	|		ИНАЧЕ ДоговорыСоглашения.ОкончаниеДействия
	|	КОНЕЦ,
	|	ДоговорыСоглашения.Ссылка,
	|	ДоговорыСоглашения.Договор,
	|	ДоговорыСоглашения.Соглашение,
	|	ДоговорыСоглашения.ПродажиИндивидуальныеПоТиповым,
	|	ДоговорыСоглашения.СуммаПлан,
	|	ДоговорыСоглашения.Партнер,
	|	ДоговорыСоглашения.Контрагент
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовКлиентов.ДоговорыСоглашения КАК ДоговорыСоглашения
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = ДоговорыСоглашения.Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ВТ_Документы.Валюта КАК Валюта,
	|	ВТ_Документы.Организация КАК Организация
	|ИЗ
	|	ВТ_Документы КАК ВТ_Документы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыКлиентовУсловия.ДокументУсловий КАК ДокументУсловий,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	РетроБонусыКлиентовУсловия.НачалоДействия КАК НачалоДействия,
	|	РетроБонусыКлиентовУсловия.ОкончаниеДействия КАК ОкончаниеДействия,
	|	РетроБонусыКлиентовУсловия.Вид КАК Вид,
	|	РетроБонусыКлиентовУсловия.Описание КАК Описание,
	|	РетроБонусыКлиентовУсловия.Участники КАК Участники,
	|	РетроБонусыКлиентовУсловия.Товары КАК Товары,
	|	РетроБонусыКлиентовУсловия.УчитыватьНДС КАК УчитыватьНДС,
	|	РетроБонусыКлиентовУсловия.БонусПроцент КАК БонусПроцент,
	|	РетроБонусыКлиентовУсловия.СуммаПлан КАК СуммаПлан,
	|	РетроБонусыКлиентовУсловия.Валюта КАК Валюта,
	|	РетроБонусыКлиентовУсловия.ПериодичностьУсловий КАК ПериодичностьУсловий,
	|	РетроБонусыКлиентовУсловия.ПериодичностьНачислений КАК ПериодичностьНачислений,
	|	РетроБонусыКлиентовУсловия.ДетализацияРасчетаУчастников КАК ДетализацияРасчетаУчастников,
	|	РетроБонусыКлиентовУсловия.ЗапретНачисленияСверхПлана КАК ЗапретНачисленияСверхПлана,
	|	РетроБонусыКлиентовУсловия.ДокументУсловий.Номер КАК НомерДокументаУсловийСПрефиксом,
	|	РетроБонусыКлиентовУсловия.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовУсловия КАК РетроБонусыКлиентовУсловия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РетроБонусыКлиентовУсловия.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументыБезДвижений.ДокументУсловий,
	|	ВТ_ДокументыБезДвижений.Ссылка,
	|	ВТ_ДокументыБезДвижений.НачалоДействия,
	|	ВТ_ДокументыБезДвижений.ОкончаниеДействия,
	|	ВТ_ДокументыБезДвижений.ВидРетроБонуса,
	|	ВТ_ДокументыБезДвижений.Описание,
	|	ВТ_ДокументыБезДвижений.ОтборУчастников,
	|	ВТ_ДокументыБезДвижений.ОтборТоваров,
	|	ВТ_ДокументыБезДвижений.УчитыватьНДС,
	|	ВТ_ДокументыБезДвижений.БонусПроцент,
	|	ВТ_ДокументыБезДвижений.СуммаПлан,
	|	ВТ_ДокументыБезДвижений.Валюта,
	|	ВТ_ДокументыБезДвижений.ПериодичностьУсловий,
	|	ВТ_ДокументыБезДвижений.ПериодичностьНачислений,
	|	ВТ_ДокументыБезДвижений.ДетализацияРасчетаУчастников,
	|	ВТ_ДокументыБезДвижений.ЗапретНачисленияСверхПлана,
	|	ВТ_ДокументыБезДвижений.Номер,
	|	ВТ_ДокументыБезДвижений.Ответственный
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыКлиентовТовары.НачалоДействия КАК НачалоДействия,
	|	РетроБонусыКлиентовТовары.ОкончаниеДействия КАК ОкончаниеДействия,
	|	РетроБонусыКлиентовТовары.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовТовары.Номенклатура КАК Номенклатура,
	|	РетроБонусыКлиентовТовары.Характеристика КАК Характеристика,
	|	РетроБонусыКлиентовТовары.КоличествоПлан КАК КоличествоПлан,
	|	РетроБонусыКлиентовТовары.БонусПроцент КАК БонусПроцент,
	|	РетроБонусыКлиентовТовары.БазоваяЦена КАК БазоваяЦена,
	|	РетроБонусыКлиентовТовары.Номенклатура.Представление КАК НоменклатураПредставление,
	|	РетроБонусыКлиентовТовары.Характеристика.Представление КАК ХарактеристикаПредставление,
	|	ВТ_Документы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовТовары КАК РетроБонусыКлиентовТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РетроБонусыКлиентовТовары.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовТовары.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовТовары.НачалоДействия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовТовары.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовТовары.ОкончаниеДействия
	|	КОНЕЦ,
	|	УсловияРетроБонусовКлиентовТовары.Ссылка,
	|	УсловияРетроБонусовКлиентовТовары.Номенклатура,
	|	УсловияРетроБонусовКлиентовТовары.Характеристика,
	|	УсловияРетроБонусовКлиентовТовары.КоличествоПлан,
	|	УсловияРетроБонусовКлиентовТовары.Процент,
	|	УсловияРетроБонусовКлиентовТовары.БазоваяЦена,
	|	УсловияРетроБонусовКлиентовТовары.Номенклатура.Представление,
	|	УсловияРетроБонусовКлиентовТовары.Характеристика.Представление,
	|	УсловияРетроБонусовКлиентовТовары.Ссылка
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовКлиентов.Товары КАК УсловияРетроБонусовКлиентовТовары
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовКлиентовТовары.Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыКлиентовИНН.НачалоДействия КАК НачалоДействия,
	|	РетроБонусыКлиентовИНН.ОкончаниеДействия КАК ОкончаниеДействия,
	|	РетроБонусыКлиентовИНН.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовИНН.ИНН КАК ИНН,
	|	РетроБонусыКлиентовИНН.СуммаПлан КАК СуммаПлан,
	|	ВТ_Документы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовИНН КАК РетроБонусыКлиентовИНН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РетроБонусыКлиентовИНН.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовИННКонтрагентов.НачалоДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.НачалоДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовИННКонтрагентов.НачалоДействия
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УсловияРетроБонусовКлиентовИННКонтрагентов.ОкончаниеДействия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_ДокументыБезДвижений.ОкончаниеДействия
	|		ИНАЧЕ УсловияРетроБонусовКлиентовИННКонтрагентов.ОкончаниеДействия
	|	КОНЕЦ,
	|	УсловияРетроБонусовКлиентовИННКонтрагентов.Ссылка,
	|	УсловияРетроБонусовКлиентовИННКонтрагентов.ИНН,
	|	УсловияРетроБонусовКлиентовИННКонтрагентов.СуммаПлан,
	|	УсловияРетроБонусовКлиентовИННКонтрагентов.Ссылка
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовКлиентов.ИННКонтрагентов КАК УсловияРетроБонусовКлиентовИННКонтрагентов
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовКлиентовИННКонтрагентов.Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыКлиентовКонтрагенты.НачалоДействия КАК НачалоДействия,
	|	РетроБонусыКлиентовКонтрагенты.ОкончаниеДействия КАК ОкончаниеДействия,
	|	РетроБонусыКлиентовКонтрагенты.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовКонтрагенты.Контрагент КАК Контрагент,
	|	РетроБонусыКлиентовКонтрагенты.Партнер КАК Партнер,
	|	РетроБонусыКлиентовКонтрагенты.СуммаПлан КАК СуммаПлан,
	|	ВТ_Документы.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВТ_РетроБонусыКлиентовКонтрагенты.СуммаБонус, 0) КАК СуммаБонус
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовКонтрагенты КАК РетроБонусыКлиентовКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РетроБонусыКлиентовКонтрагенты.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РетроБонусыКлиентовКонтрагенты КАК ВТ_РетроБонусыКлиентовКонтрагенты
	|		ПО РетроБонусыКлиентовКонтрагенты.ДокументУсловий = ВТ_РетроБонусыКлиентовКонтрагенты.ДокументУсловий
	|			И РетроБонусыКлиентовКонтрагенты.НачалоДействия = ВТ_РетроБонусыКлиентовКонтрагенты.НачалоДействия
	|			И РетроБонусыКлиентовКонтрагенты.ОкончаниеДействия = ВТ_РетроБонусыКлиентовКонтрагенты.ОкончаниеДействия
	|			И РетроБонусыКлиентовКонтрагенты.Контрагент = ВТ_РетроБонусыКлиентовКонтрагенты.Контрагент
	|			И РетроБонусыКлиентовКонтрагенты.Партнер = ВТ_РетроБонусыКлиентовКонтрагенты.Партнер
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_РетроБонусыКлиентовКонтрагенты.НачалоДействия,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.ОкончаниеДействия,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.ДокументУсловий,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.Контрагент,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.Партнер,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.СуммаПлан,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.ДокументУсловий,
	|	ВТ_РетроБонусыКлиентовКонтрагенты.СуммаБонус
	|ИЗ
	|	ВТ_РетроБонусыКлиентовКонтрагенты КАК ВТ_РетроБонусыКлиентовКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ПО ВТ_РетроБонусыКлиентовКонтрагенты.ДокументУсловий = ВТ_ДокументыБезДвижений.Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыКлиентовСегментыПартнеров.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовСегментыПартнеров.Сегмент КАК Сегмент,
	|	ВТ_Документы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовСегментыПартнеров КАК РетроБонусыКлиентовСегментыПартнеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РетроБонусыКлиентовСегментыПартнеров.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияРетроБонусовКлиентовСегментыПартнеров.Ссылка,
	|	УсловияРетроБонусовКлиентовСегментыПартнеров.Сегмент,
	|	УсловияРетроБонусовКлиентовСегментыПартнеров.Ссылка
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовКлиентов.СегментыПартнеров КАК УсловияРетроБонусовКлиентовСегментыПартнеров
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовКлиентовСегментыПартнеров.Ссылка
	|ИТОГИ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РетроБонусыКлиентовСегментыТоваров.ДокументУсловий КАК ДокументУсловий,
	|	РетроБонусыКлиентовСегментыТоваров.Сегмент КАК Сегмент,
	|	ВТ_Документы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.РетроБонусыКлиентовСегментыТоваров КАК РетроБонусыКлиентовСегментыТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|		ПО РетроБонусыКлиентовСегментыТоваров.ДокументУсловий = ВТ_Документы.ДокументУсловий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияРетроБонусовКлиентовСегментыТоваров.Ссылка,
	|	УсловияРетроБонусовКлиентовСегментыТоваров.Сегмент,
	|	УсловияРетроБонусовКлиентовСегментыТоваров.Ссылка
	|ИЗ
	|	ВТ_ДокументыБезДвижений КАК ВТ_ДокументыБезДвижений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УсловияРетроБонусовКлиентов.СегментыТоваров КАК УсловияРетроБонусовКлиентовСегментыТоваров
	|		ПО ВТ_ДокументыБезДвижений.Ссылка = УсловияРетроБонусовКлиентовСегментыТоваров.Ссылка
	|ИТОГИ ПО
	|	Ссылка";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаУсловия - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** Вид - СправочникСсылка.ВидыРетроБонусовКлиентов
// ** Описание - Строка
// ** Участники - ПеречислениеСсылка.СоставыСписковРетроБонусов
// ** Товары - ПеречислениеСсылка.СоставыСписковРетроБонусов
// ** УчитыватьНДС - Булево
// ** БонусПроцент - Число
// ** СуммаПлан - Число
// ** Валюта - СправочникСсылка.Валюты
// ** ПериодичностьУсловий - ПеречислениеСсылка.ПериодичностиРетроБонусов
// ** ПериодичностьНачислений - ПеречислениеСсылка.ПериодичностиРетроБонусов
// ** ДетализацияРасчетаУчастников - ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов
// ** ЗапретНачисленияСверхПлана - Булево
// ** НомерДокументаУсловийСПрефиксом - Число
//
Функция НаборДанныхУсловия(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборУсловия = Новый ТаблицаЗначений;
	НаборУсловия.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборУсловия.Колонки.Добавить("АктуальныеДанныеТаблицаУсловия", ОписаниеТиповТЗ);
	
	ТаблицаУсловияШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаУсловияШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыРетроБонусовКлиентов"));
	Колонки.Добавить("Описание", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Участники", Новый ОписаниеТипов("ПеречислениеСсылка.СоставыСписковРетроБонусов"));
	Колонки.Добавить("Товары", Новый ОписаниеТипов("ПеречислениеСсылка.СоставыСписковРетроБонусов"));
	Колонки.Добавить("УчитыватьНДС", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("БонусПроцент", ОбщегоНазначения.ОписаниеТипаЧисло(4, 2));
	Колонки.Добавить("СуммаПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Колонки.Добавить("ПериодичностьУсловий", Новый ОписаниеТипов("ПеречислениеСсылка.ПериодичностиРетроБонусов"));
	Колонки.Добавить("ПериодичностьНачислений", Новый ОписаниеТипов("ПеречислениеСсылка.ПериодичностиРетроБонусов"));
	Колонки.Добавить("ДетализацияРасчетаУчастников", Новый ОписаниеТипов("ПеречислениеСсылка.ДетализацияРасчетаУчастниковРетроБонусов"));
	Колонки.Добавить("ЗапретНачисленияСверхПлана", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("НомерДокументаУсловийСПрефиксом", ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Колонки.Добавить("Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	
	ВыборкаТаблицаУсловия = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаУсловия.Следующий() Цикл
		
		АктуальныеДанныеТаблицаУсловия = ТаблицаУсловияШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаУсловия.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаУсловия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборУсловия.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаУсловия.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаУсловия = АктуальныеДанныеТаблицаУсловия;
		
	КонецЦикла;
	
	Возврат НаборУсловия;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаТовары - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** Номенклатура - СправочникСсылка.Номенклатура
// ** Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры
// ** КоличествоПлан - Число
// ** БонусПроцент - Число
// ** БазоваяЦена - Число
// ** ПредставлениеНоменклатуры - Строка
//
Функция НаборДанныхТовары(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборТовары = Новый ТаблицаЗначений;
	НаборТовары.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборТовары.Колонки.Добавить("АктуальныеДанныеТаблицаТовары", ОписаниеТиповТЗ);
	
	ТаблицаТоварыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаТоварыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	Колонки.Добавить("КоличествоПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("БонусПроцент", ОбщегоНазначения.ОписаниеТипаЧисло(4, 2));
	Колонки.Добавить("БазоваяЦена", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("ПредставлениеНоменклатуры", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	
	ВыборкаТаблицаТовары = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаТовары.Следующий() Цикл
		
		АктуальныеДанныеТаблицаТовары = ТаблицаТоварыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаТовары.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаТовары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			
			СтрокаТЗ.ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				Выборка.НоменклатураПредставление,
				Выборка.ХарактеристикаПредставление);
				
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборТовары.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаТовары.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаТовары = АктуальныеДанныеТаблицаТовары;
		
	КонецЦикла;
	
	Возврат НаборТовары;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаИНН - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** ИНН - Строка
// ** СуммаПлан - Число
//
Функция НаборДанныхИНН(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборИНН = Новый ТаблицаЗначений;
	НаборИНН.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборИНН.Колонки.Добавить("АктуальныеДанныеТаблицаИНН", ОписаниеТиповТЗ);
	
	ТаблицаИННШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаИННШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("ИНН", ОбщегоНазначения.ОписаниеТипаСтрока(12));
	Колонки.Добавить("СуммаПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ВыборкаТаблицаИНН = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаИНН.Следующий() Цикл
		
		АктуальныеДанныеТаблицаИНН = ТаблицаИННШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаИНН.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаИНН.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборИНН.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаИНН.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаИНН = АктуальныеДанныеТаблицаИНН;
		
	КонецЦикла;
	
	Возврат НаборИНН;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаКонтрагенты - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** Контрагент - СправочникСсылка.Контрагенты
// ** Партнер - СправочникСсылка.Партнеры
// ** СуммаПлан - Число
// ** СуммаБонус - Число
//
Функция НаборДанныхКонтрагенты(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборКонтрагенты = Новый ТаблицаЗначений;
	НаборКонтрагенты.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборКонтрагенты.Колонки.Добавить("АктуальныеДанныеТаблицаКонтрагенты", ОписаниеТиповТЗ);
	
	ТаблицаКонтрагентыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаКонтрагентыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("СуммаПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	Колонки.Добавить("СуммаБонус", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ВыборкаТаблицаКонтрагенты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаКонтрагенты.Следующий() Цикл
		
		АктуальныеДанныеТаблицаКонтрагенты = ТаблицаКонтрагентыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаКонтрагенты.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаКонтрагенты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборКонтрагенты.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаКонтрагенты.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаКонтрагенты = АктуальныеДанныеТаблицаКонтрагенты;
		
	КонецЦикла;
	
	Возврат НаборКонтрагенты;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаСегментыПартнеров - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** Сегмент - СправочникСсылка.СегментыПартнеров
//
Функция НаборДанныхСегментыПартнеров(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборСегментыПартнеров = Новый ТаблицаЗначений;
	НаборСегментыПартнеров.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборСегментыПартнеров.Колонки.Добавить("АктуальныеДанныеТаблицаСегментыПартнеров", ОписаниеТиповТЗ);
	
	ТаблицаСегментыПартнеровШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаСегментыПартнеровШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"));
	
	ВыборкаТаблицаСегментыПартнеров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаСегментыПартнеров.Следующий() Цикл
		
		АктуальныеДанныеТаблицаСегментыПартнеров = ТаблицаСегментыПартнеровШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаСегментыПартнеров.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаСегментыПартнеров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборСегментыПартнеров.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаСегментыПартнеров.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаСегментыПартнеров = АктуальныеДанныеТаблицаСегментыПартнеров;
		
	КонецЦикла;
	
	Возврат НаборСегментыПартнеров;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаСегментыТоваров - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** Сегмент - СправочникСсылка.СегментыНоменклатуры
//
Функция НаборДанныхСегментыТоваров(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборСегментыТоваров = Новый ТаблицаЗначений;
	НаборСегментыТоваров.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборСегментыТоваров.Колонки.Добавить("АктуальныеДанныеТаблицаСегментыТоваров", ОписаниеТиповТЗ);
	
	ТаблицаСегментыНоменклатурыШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаСегментыНоменклатурыШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Сегмент", Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
	
	ВыборкаТаблицаСегментыТоваров = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаСегментыТоваров.Следующий() Цикл
		
		АктуальныеДанныеТаблицаСегментыТоваров = ТаблицаСегментыНоменклатурыШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаСегментыТоваров.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаСегментыТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборСегментыТоваров.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаСегментыТоваров.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаСегментыТоваров = АктуальныеДанныеТаблицаСегментыТоваров;
		
	КонецЦикла;
	
	Возврат НаборСегментыТоваров;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * Валюта - СправочникСсылка.Валюты - 
// * Организация - СправочникСсылка.Организации - 
Функция НаборПереопределяемыеПоля(РезультатЗапроса)
	
	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	
	ПереопределяемыеПоля = Новый ТаблицаЗначений;
	ПереопределяемыеПоля.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	ПереопределяемыеПоля.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПереопределяемыеПоля.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СтрокаТЗ = ПереопределяемыеПоля.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
		
	КонецЦикла;
	
	Возврат ПереопределяемыеПоля;
	
КонецФункции

// Возвращает таблицу значений для внешнего набора макета ДополнительныеДанныеПечати
//
// Параметры:
//   РезультатЗапроса - РезультатЗапроса - результат запроса с текстом ТекстЗапросаАктуальныеДанные
// Возвращаемое значение:
//  ТаблицаЗначений:
// * Ссылка - ДокументСсылка.УсловияРетроБонусовКлиентов - 
// * АктуальныеДанныеТаблицаДоговорыСоглашения - ТаблицаЗначений:
// ** НомерСтроки - Число
// ** НачалоДействия - Дата
// ** ОкончаниеДействия - Дата
// ** ДокументУсловий - ДокументСсылка.УсловияРетроБонусовКлиентов
// ** Контрагент - СправочникСсылка.Контрагенты
// ** Партнер - СправочникСсылка.Партнеры
// ** Договор - СправочникСсылка.ДоговорыКонтрагентов
// ** Соглашение - СправочникСсылка.СоглашенияСКлиентами
// ** УчитыватьПродажиПоИндивидуальным - Булево
// ** СуммаПлан - Число
// 
Функция НаборДанныхДоговорыСоглашения(РезультатЗапроса)

	ОписаниеТиповУсловия = Новый ОписаниеТипов("ДокументСсылка.УсловияРетроБонусовКлиентов");
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	
	НаборДоговорыСоглашения = Новый ТаблицаЗначений;
	НаборДоговорыСоглашения.Колонки.Добавить("Ссылка", ОписаниеТиповУсловия);
	НаборДоговорыСоглашения.Колонки.Добавить("АктуальныеДанныеТаблицаДоговорыСоглашения", ОписаниеТиповТЗ);
	
	ТаблицаДоговорыСоглашенияШаблон = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаДоговорыСоглашенияШаблон.Колонки;
	Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	Колонки.Добавить("НачалоДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ОкончаниеДействия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Колонки.Добавить("ДокументУсловий", ОписаниеТиповУсловия);
	Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Колонки.Добавить("Партнер", Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
	Колонки.Добавить("Договор", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Колонки.Добавить("Соглашение", Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
	Колонки.Добавить("УчитыватьПродажиПоИндивидуальным", Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("СуммаПлан", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
	
	ВыборкаТаблицаДоговорыСоглашения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаТаблицаДоговорыСоглашения.Следующий() Цикл
		
		АктуальныеДанныеТаблицаДоговорыСоглашения = ТаблицаДоговорыСоглашенияШаблон.СкопироватьКолонки();
		Выборка = ВыборкаТаблицаДоговорыСоглашения.Выбрать();
		Индекс = 1;
		
		Пока Выборка.Следующий() Цикл
			
			СтрокаТЗ = АктуальныеДанныеТаблицаДоговорыСоглашения.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЗ, Выборка);
			СтрокаТЗ.НомерСтроки = Индекс;
			Индекс = Индекс + 1;
			
		КонецЦикла;
		
		НоваяСтрока = НаборДоговорыСоглашения.Добавить();
		НоваяСтрока.Ссылка = ВыборкаТаблицаДоговорыСоглашения.Ссылка;
		НоваяСтрока.АктуальныеДанныеТаблицаДоговорыСоглашения = АктуальныеДанныеТаблицаДоговорыСоглашения;
		
	КонецЦикла;
	
	Возврат НаборДоговорыСоглашения;

КонецФункции 

#КонецОбласти

//-- Локализация

#Область Прочее

Процедура УстановитьПризнакиРасчетаПоКонтрагентуКлиенту(Объект, Параметры)
	
	Если Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Контрагенты 
	   И Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		Возврат;
	КонецЕсли;
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагентуКлиенту Тогда
		
		Для Каждого СтрокаУчастника Из Объект.Контрагенты Цикл
			
			СтрокаУчастника.ПланНеУказывается = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакиРасчетаПланаУчастниковРасхождениеСоставаИРасчета(Объект, Параметры)
	
	Если Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Контрагенты 
	   И Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		Возврат;
	КонецЕсли;
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ДетализацияКонтрагентСоставКлиент =
		(Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту
		 И Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты);
	
	ДетализацияКлиентСоставКонтрагент =
		(Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту
		 И Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты);
	
	Если ДетализацияКонтрагентСоставКлиент
	 ИЛИ ДетализацияКлиентСоставКонтрагент Тогда
		
		Для Каждого СтрокаУчастника Из Объект.Контрагенты Цикл
			
			СтрокаУчастника.СуммаПлан = 0;
			СтрокаУчастника.ПланНеУказывается = Истина;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакиРасчетаПланаУчастниковСовпадениеСоставаИРасчета(Объект, Параметры, ИзмененныйУчастник)
	
	Если Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Контрагенты 
	  И Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		Возврат;
	КонецЕсли;
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ДетализацияКонтрагентСоставКонтрагент =
		(Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту
		 И Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты);
	
	ДетализацияКлиентСоставКлиент =
		(Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту
		 И Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты);
	
	Если ДетализацияКлиентСоставКлиент Тогда
		
		КлючевоеПоле = "Партнер";
		
	ИначеЕсли ДетализацияКонтрагентСоставКонтрагент Тогда
		
		КлючевоеПоле = "Контрагент";
		
	КонецЕсли;
	
	УчастникиПланНеУказывается = Новый Соответствие;
	
	Если ДетализацияКонтрагентСоставКонтрагент
	 ИЛИ ДетализацияКлиентСоставКлиент Тогда
		
		Для Каждого СтрокаУчастника Из Объект.Контрагенты Цикл
			
			Если СтрокаУчастника.Отменено Тогда
				Продолжить
			КонецЕсли;
			
			ЗначениеУчастника = СтрокаУчастника[КлючевоеПоле]; // СправочникСсылка.Партнеры, СправочникСсылка.Контрагенты
			Если ИзмененныйУчастник <> Неопределено
			   И ИзмененныйУчастник <> ЗначениеУчастника Тогда
				Продолжить;
			КонецЕсли;
			
			Если УчастникиПланНеУказывается[ЗначениеУчастника] <> Неопределено Тогда
				
				СтрокаУчастника.СуммаПлан = 0;
				СтрокаУчастника.ПланНеУказывается = Истина;
				
			Иначе
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить(КлючевоеПоле, ЗначениеУчастника);
				СтруктураОтбора.Вставить("Отменено", Ложь);
				НайденныеСтроки = Объект.Контрагенты.НайтиСтроки(СтруктураОтбора);
				
				Если НайденныеСтроки.Количество() > 1 Тогда
					
					СтрокаУчастника.СуммаПлан = 0;
					СтрокаУчастника.ПланНеУказывается = Истина;
					УчастникиПланНеУказывается[ЗначениеУчастника] = Истина;
					
				Иначе
					
					СтрокаУчастника.ПланНеУказывается = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакиРасчетаПланаДоговорыСоглашения(Объект, Параметры, ИзмененныйУчастник)
	
	Если Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Договоры
	   И Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаУказанияПлана = (Объект.ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту"))
		И (Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Договоры);
	УчастникиПланНеУказывается = Новый Соответствие;
	
	Для Каждого СтрокаУчастника Из Объект.ДоговорыСоглашения Цикл
		
		Если СтрокаУчастника.Отменено Тогда
			Продолжить
		КонецЕсли;
		
		Если НЕ ПроверкаУказанияПлана Тогда
			СтрокаУчастника.ПланНеУказывается = Истина;
		КонецЕсли;
		
		ЗначениеУчастника = СтрокаУчастника.Контрагент;
		
		Если ИзмененныйУчастник <> Неопределено
		   И ИзмененныйУчастник <> ЗначениеУчастника Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникиПланНеУказывается[ЗначениеУчастника] <> Неопределено Тогда
			
			СтрокаУчастника.СуммаПлан = 0;
			СтрокаУчастника.ПланНеУказывается = Истина;
			
		Иначе
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Контрагент", ЗначениеУчастника);
			СтруктураОтбора.Вставить("Отменено", Ложь);
			НайденныеСтроки = Объект.ДоговорыСоглашения.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				
				СтрокаУчастника.СуммаПлан = 0;
				СтрокаУчастника.ПланНеУказывается = Истина;
				УчастникиПланНеУказывается[ЗначениеУчастника] = Истина;
				
			ИначеЕсли ПроверкаУказанияПлана Тогда
				
				СтрокаУчастника.ПланНеУказывается = Ложь;
				
			Иначе
				
				СтрокаУчастника.ПланНеУказывается = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакиРасчетаПланаИННКонтрагентов(Объект, Параметры)
	
	Если Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
		Возврат;
	КонецЕсли;
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	Если Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту Тогда
		
		Для Каждого СтрокаУчастника Из Объект.ИННКонтрагентов Цикл
			
			СтрокаУчастника.СуммаПлан = 0;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращаемое значение:
//  Массив из см. СтрокаДанныхПоТоварам
//
Функция НайденныеДанныеПоТоварам();
	
	НайденныеДанные = Новый Массив;
	Возврат НайденныеДанные;
	
КонецФункции

// Возвращаемое значение:
//  Структура - Строка данных по товарам:
// * Номенклатура - СправочникСсылка.Номенклатура - 
// * Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры -
// 
Функция СтрокаДанныхПоТоварам();
	
	СтрокаДанных = Новый Структура;
	СтрокаДанных.Вставить("Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	СтрокаДанных.Вставить("Характеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	
	Возврат СтрокаДанных;
	
КонецФункции

Процедура ОчиститьНеиспользуемыеРеквизитыКонтрагенты(Объект, Знач Параметры)
	
	Если Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ (Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Контрагенты
		  И Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.Клиенты) Тогда
		
		Объект.Контрагенты.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	КромеВыбранных = (Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных);
	Выбранные = (Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные);
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	
	ДетализацияКонтрагентСоставКлиент =
		(Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКонтрагенту
		 И Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты);
	
	ДетализацияКлиентСоставКонтрагент =
		(Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту
		 И Параметры.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты);
	
	Для Каждого СтрокаТЧ Из Объект.Контрагенты Цикл
		
		Если НЕ Объект.Исправление Тогда
			
			СтрокаТЧ.Отменено = Ложь;
			СтрокаТЧ.ИсходнаяСтрока = Ложь;
			
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.ИсходнаяСтрока Тогда
			
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата; 
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.ПланНеУказываетсяДоИзменений = Ложь;
			
		КонецЕсли;
		
		Если КромеВыбранных Тогда
			
			СтрокаТЧ.СуммаПлан = 0;
			СтрокаТЧ.СуммаБонус = 0;
			СтрокаТЧ.НачалоДействия = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
		Если Выбранные
		   И (ДетализацияКонтрагентСоставКлиент
			  ИЛИ ДетализацияКлиентСоставКонтрагент) Тогда
			
			СтрокаТЧ.СуммаПлан = 0;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыИННКонтрагентов(Объект, Знач Параметры)
	
	Если Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
		
		Объект.ИННКонтрагентов.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	КромеВыбранных = (Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных);
	
	Для Каждого СтрокаТЧ Из Объект.ИННКонтрагентов Цикл
		
		Если НЕ Объект.Исправление Тогда
			
			СтрокаТЧ.Отменено = Ложь;
			СтрокаТЧ.ИсходнаяСтрока = Ложь;
			
		КонецЕсли;
		
		Если НЕ СтрокаТЧ.ИсходнаяСтрока Тогда
			
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата; 
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
		Если КромеВыбранных Тогда
			
			СтрокаТЧ.СуммаПлан = 0;
			СтрокаТЧ.НачалоДействия = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействия = ПустаяДата;
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыСегментыПартнеров(Объект, Параметры)
	
	Если Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Все
	 ИЛИ Параметры.СоставУчастников <> Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров Тогда
		
		Объект.СегментыПартнеров.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если Параметры.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
		
		Для Каждого СтрокаТЧ Из Объект.СегментыПартнеров Цикл
			
			Если НЕ Объект.Исправление Тогда
				
				СтрокаТЧ.Отменено = Ложь;
				СтрокаТЧ.ИсходнаяСтрока = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыДоговорыСоглашения(Объект, Параметры)
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	
	Если Параметры.СоставУчастников <> СоставыУчастников.Договоры
	   И Параметры.СоставУчастников <> СоставыУчастников.Соглашения Тогда
		
		Объект.ДоговорыСоглашения.Очистить();
		Возврат;
		
	КонецЕсли;
	
	ПустаяДата = Дата(1, 1, 1);
	ОчищатьСуммаПлан =
		(Параметры.СоставУчастников <> СоставыУчастников.Договоры
		 ИЛИ Объект.ДетализацияРасчетаУчастников = ДетализацияРасчета.ПоКлиенту);
	
	ПланНеУказывается = Ложь;
	РеквизитыСоглашений = Новый Соответствие;
	Если Параметры.СоставУчастников = СоставыУчастников.Соглашения Тогда
		
		ПланНеУказывается = Истина;
		ТаблицаСоглашенийДокумента = Объект.ДоговорыСоглашения.Выгрузить(, "Соглашение");
		СоглашенияДокумента = ТаблицаСоглашенийДокумента.ВыгрузитьКолонку("Соглашение");
		СоглашенияДокумента = ОбщегоНазначенияКлиентСервер.СвернутьМассив(СоглашенияДокумента);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(
			СоглашенияДокумента, Справочники.СоглашенияСКлиентами.ПустаяСсылка());
		
		ИменаРеквизитов = "Типовое";
		РеквизитыСоглашений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СоглашенияДокумента, ИменаРеквизитов);
		
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.ДоговорыСоглашения Цикл
		
		Если Параметры.СоставУчастников = СоставыУчастников.Соглашения
		   И НЕ СтрокаТЧ.Соглашение.Пустая() Тогда
			
			ПоляСоглашения = РеквизитыСоглашений[СтрокаТЧ.Соглашение];
			Если ПоляСоглашения.Типовое = Истина Тогда
				
				СтрокаТЧ.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
				СтрокаТЧ.Партнер = Справочники.Партнеры.ПустаяСсылка();
				
			Иначе
				
				СтрокаТЧ.ПродажиИндивидуальныеПоТиповым = Ложь;
				
			КонецЕсли;
			
			СтрокаТЧ.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			
		Иначе
			
			СтрокаТЧ.ПродажиИндивидуальныеПоТиповым = Ложь;
			СтрокаТЧ.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
			
		КонецЕсли;
		
		Если ОчищатьСуммаПлан Тогда
			СтрокаТЧ.СуммаПлан = 0;
		КонецЕсли;
		
		Если ПланНеУказывается Тогда
			СтрокаТЧ.ПланНеУказывается = Истина;
		КонецЕсли;
		
		Если НЕ Объект.Исправление Тогда
			
			СтрокаТЧ.НачалоДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.ОкончаниеДействияДоИзменений = ПустаяДата;
			СтрокаТЧ.СуммаПланДоИзменений = 0;
			СтрокаТЧ.Отменено = Ложь;
			СтрокаТЧ.ИсходнаяСтрока = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли