//@strict-types

#Область ОписаниеПеременных

&НаКлиенте
Перем КешированныеЗначения; // см. ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ТолькоПросмотр = Ложь;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(ТекущийОбъект);
	
	ПриСозданииЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		
		ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтотОбъект, Элементы.СтрокаИсправление);
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ПриСозданииЧтенииНаСервере();
		
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	УстановитьЗаголовок();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец ИнтеграцияС1СДокументооборотом
	
	СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
	ПропуститьПроверкуИзмененияПоСтатусу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ПараметрыЗаписи,
		"ПропуститьПроверкуИзмененияПоСтатусу",
		Ложь);
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ПропуститьПроверкуИзмененияПоСтатусу",
		ПропуститьПроверкуИзмененияПоСтатусу);
	
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	
	ИсправлениеДокументовКлиент.ПослеЗаписи(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЕстьПравоИзмененияУРБ = УправлениеДоступом.ИзменениеРазрешено(ТекущийОбъект);
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	ЗаполнитьСлужебныеРеквизитыСоглашенийДоговоров();
	УстановитьЗаголовок();
	ЗаполнитьРеквизитыСегментовПоУсловию();
	УстановитьНастройкиПоСтатусу();
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	//@skip-check invocation-parameter-type-intersect
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	
	РаботаСФайламиКлиент.ПоказатьПодтверждениеЗакрытияФормыСФайлами(ЭтотОбъект, Отказ, ЗавершениеРаботы, Объект.Ссылка);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура СтатусПриИзменении(Элемент)
	
	ОчиститьСообщения();
	
	ЗаполнитьПризнакНаличияНачислений();
	Если ТекущийСтатус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРетроБонусов.Согласован")
	   И ЕстьНачисления Тогда
		
		УстановитьЗаголовкиДекорацийСГиперссылками();
		
		ТекстСообщения = НСтр("ru = 'Созданы документы начисления. Изменение согласования запрещено.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект", "Статус");
		Объект.Статус = ТекущийСтатус;
			
	ИначеЕсли Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРетроБонусов.Согласован") Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ будет проведен, продолжить?'");
		Результат = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Результат = КодВозвратаДиалога.Да Тогда
			
			ОчиститьСообщения();
			
			Если Объект.ИсправляемыйДокумент.Пустая() Тогда
				Объект.ИдентификаторЦепочки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("ПропуститьПроверкуИзмененияПоСтатусу", Истина);
			ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			ПараметрыЗаписи.Вставить("РежимПроведения", РежимПроведенияДокумента.Неоперативный);
			
			Попытка
				
				УспешноПроведен = Записать(ПараметрыЗаписи);
				Если НЕ УспешноПроведен Тогда
					
					Объект.Статус = ТекущийСтатус;
					
				КонецЕсли;
				
			Исключение
				
				Объект.Статус = ТекущийСтатус;
				ТекстОшибки = НСтр("ru = 'При проведении документа возникли ошибки, статус не установлен'");
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,, "Объект.Статус");
				ВызватьИсключение;
				
			КонецПопытки;
			
			ТекущийСтатус = Объект.Статус;
			
			// СтандартныеПодсистемы.ПодключаемыеКоманды
			ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
			// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			
		Иначе
			
			Объект.Статус = ТекущийСтатус;
			
		КонецЕсли;
		
	Иначе
		
		ТекущийСтатус = Объект.Статус;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидРетроБонусаПриИзменении(Элемент)
	
	ВидРетроБонусаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьСразуПриИзменении(Элемент)
	
	Объект.ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагентуКлиенту");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьЗависимыеЭлементыФормы("НачислитьСразу");
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияРасчетаУчастниковПриИзменении(Элемент)
	
	ДетализацияРасчетаУчастниковПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоДействияПриИзменении(Элемент)
	
	НачалоДействияСтрокой = Формат(Объект.НачалоДействия, "ДЛФ=D;");
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеДействияПриИзменении(Элемент)
	
	ОкончаниеДействияСтрокой = Формат(Объект.ОкончаниеДействия, "ДЛФ=D;");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьУсловийПриИзменении(Элемент)
	
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборУчастниковПриИзменении(Элемент)
	
	ОтборУчастниковПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборТоваровПриИзменении(Элемент)
	
	ОтборТоваровПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаПланПриИзменении(Элемент)
	
	СформироватьСуммыПлановСтрокой(ЭтотОбъект); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапретНачисленияСверхПланаПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы("ЗапретНачисленияСверхПлана");
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	УстановитьЗаголовкиПоВалюте();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗафиксироватьСегментыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "Зафиксировать";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ЗафиксироватьСоставСегментов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменитьФиксациюСегментовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "ОтменитьФиксацию";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ОтменитьФиксациюСоставаСегментов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтменитьСогласованиеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбрабатываемаяСсылка = "ОтменитьСогласование";
	
	Если НавигационнаяСсылкаФорматированнойСтроки = ОбрабатываемаяСсылка Тогда
		ОтменитьСогласование();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКонтрагенты

&НаКлиенте
Процедура КонтрагентыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПослеУдаления(Элемент)
	
	Если НЕ ДетализацияПоКонтрагентуКлиенту(Объект.ДетализацияРасчетаУчастников) Тогда
		
		УстановитьПризнакиРасчетаПланаУчастников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.СуммаПланДоИзменений = 0;
		ТекущиеДанные.ПланНеУказываетсяДоИзменений = Ложь;
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
		Если НЕ ДетализацияПоКонтрагентуКлиенту(Объект.ДетализацияРасчетаУчастников) Тогда
		
			УстановитьПризнакиРасчетаПланаУчастников();
		
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если (Объект.НачислитьСразу
		  И СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Контрагенты")
		  И ТекущиеДанные.Партнер.Пустая())
	 ИЛИ НЕ ДетализацияПоКонтрагентуКлиенту(Объект.ДетализацияРасчетаУчастников) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонтрагентыКонтрагентПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если (Объект.НачислитьСразу
		  И СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Клиенты")
		  И ТекущиеДанные.Контрагент.Пустая())
	 ИЛИ НЕ ДетализацияПоКонтрагентуКлиенту(Объект.ДетализацияРасчетаУчастников) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		КонтрагентыПартнерПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.СуммаПлан = 0;
		ТекущиеДанные.ПланНеУказывается = Ложь;
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;
	
	Если НЕ ДетализацияПоКонтрагентуКлиенту(Объект.ДетализацияРасчетаУчастников) Тогда
		
		УстановитьПризнакиРасчетаПланаУчастников();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИННКонтрагентов

&НаКлиенте
Процедура ИННКонтрагентовПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ИННКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННКонтрагентовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ИННКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.СуммаПланДоИзменений = 0;
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННКонтрагентовОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИННКонтрагентов.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.СуммаПлан = 0;
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСегментыПартнеров

&НаКлиенте
Процедура СегментыПартнеровПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СегментыПартнеров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СегментыПартнеровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СегментыПартнеров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДоговорыСоглашения

&НаКлиенте
Процедура ДоговорыСоглашенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.СуммаПланДоИзменений = 0;
		ТекущиеДанные.ПланНеУказываетсяДоИзменений = Ложь;
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
		Если ДетализацияПоКонтрагенту(Объект.ДетализацияРасчетаУчастников)
		   И СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры") Тогда
			
			УстановитьПризнакиРасчетаПланаУчастников();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияПартнерПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ДоговорыСоглашенияПартнерПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияКонтрагентПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ДоговорыСоглашенияКонтрагентПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияДоговорНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные; // ДанныеФормыЭлементКоллекции: см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоров.СПокупателем"));
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	Если НЕ ТекущиеДанные.Контрагент.Пустая() Тогда
		СтруктураОтбора.Вставить("Контрагент", ТекущиеДанные.Контрагент);
	КонецЕсли;
	Если НЕ ТекущиеДанные.Партнер.Пустая() Тогда
		СтруктураОтбора.Вставить("Партнер", ТекущиеДанные.Партнер);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияДоговорПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ДоговорыСоглашенияДоговорПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияСоглашениеНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные; // ДанныеФормыЭлементКоллекции: см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДатаДокумента", Дата(1, 1, 1)); // Не ограничиваем выбор соглашений по периоду
	ПараметрыФормы.Вставить("ТолькоТиповые", Ложь);
	ПараметрыФормы.Вставить("ТолькоИспользуемыеВРаботеТП", Ложь);
	ПараметрыФормы.Вставить("РазрешитьВыборНедействующих", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.Соглашение);
	ПараметрыФормы.Вставить(
		"ХозяйственнаяОперация",
		ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияКлиенту"));
	
	Если НЕ ТекущиеДанные.Партнер.Пустая() Тогда
	
		ПараметрыФормы.Вставить("Партнер", ТекущиеДанные.Партнер);
	
	КонецЕсли;
	
	ДополнительныйОтбор = Новый Структура;
	ДополнительныйОтбор.Вставить("Организация", Объект.Организация);
	
	Если НЕ ТекущиеДанные.Контрагент.Пустая() Тогда
	
		МассивКонтрагентов = Новый Массив; // Массив Из СправочникСсылка.Контрагенты
		МассивКонтрагентов.Добавить(ТекущиеДанные.Контрагент);
		МассивКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ДополнительныйОтбор.Вставить("Контрагент", МассивКонтрагентов);
	
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Отбор", ДополнительныйОтбор);
	
	ОткрытьФорму("Справочник.СоглашенияСКлиентами.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияСоглашениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
	ДоговорыСоглашенияСоглашениеПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.СуммаПлан = 0;
		ТекущиеДанные.ПланНеУказывается = Ложь;
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;
	
	Если ДетализацияПоКонтрагенту(Объект.ДетализацияРасчетаУчастников)
	   И СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры") Тогда
		
		УстановитьПризнакиРасчетаПланаУчастников(ТекущиеДанные.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДоговорыСоглашения.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорыСоглашенияПослеУдаления(Элемент)
	
	Если ДетализацияПоКонтрагенту(Объект.ДетализацияРасчетаУчастников)
	   И СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры") Тогда
		
		УстановитьПризнакиРасчетаПланаУчастников();
		
	КонецЕсли
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.НачалоДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействияДоИзменений = Дата(1, 1, 1);
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура; 
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	
	ПакетнаяОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(
		ТекущиеДанные,
		СтруктураДействий,
		КешированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтмененоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные.Отменено Тогда
		
		ТекущиеДанные.НачалоДействия = Дата(1, 1, 1);
		ТекущиеДанные.ОкончаниеДействия = Дата(1, 1, 1);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСегментыТоваров

&НаКлиенте
Процедура СегментыТоваровПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СегментыТоваров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ИсходнаяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СегментыТоваровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.СегментыТоваров.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Копирование Тогда
		
		ТекущиеДанные.Отменено = Ложь;
		ТекущиеДанные.ИсходнаяСтрока = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтотОбъект, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуУдаленияДокумента(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьИнтервалПослеЗавершения", ЭтотОбъект);
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(
		Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоДействия", "ОкончаниеДействия"),
		ОписаниеОповещения);
		
КонецПроцедуры

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.РаботаСФайлами

// ИнтеграцияС1СДокументооборотом

// Параметры:
//   Команда - КомандаФормы - выполняемая команда
//
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	
КонецПроцедуры

// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Асинх Процедура ЗаполнитьПроцентБонуса(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки; // Массив из Число
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Подсказка = НСтр("ru = '% бонуса'");
		Квалификаторы = Новый КвалификаторыЧисла(4, 2, ДопустимыйЗнак.Неотрицательный);
		ТипПроцент = Новый ОписаниеТипов("Число", Квалификаторы);
		НовыйПроцент = 0;
		Результат = Ждать ВвестиЗначениеАсинх(НовыйПроцент, Подсказка, ТипПроцент); // Число, Неопределено
		
		Если Результат <> Неопределено Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если СтрокаТоваров.Отменено
				 ИЛИ СтрокаТоваров.ИсходнаяСтрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				СтрокаТоваров.Процент = Результат;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не выбраны строки для заполнения.'");
		Ждать ПредупреждениеАсинх(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКонтрагентовИзФайла(Команда)
	
	НастройкиОтображенияПолей = Новый Структура;
	НастройкиОтображенияПолей.Вставить("Контрагент", Элементы.КонтрагентыКонтрагент.Видимость);
	НастройкиОтображенияПолей.Вставить("Партнер", Элементы.КонтрагентыПартнер.Видимость);
	НастройкиОтображенияПолей.Вставить("СуммаПлан", Элементы.КонтрагентыСуммаПлан.Видимость);
	НастройкиОтображенияПолей.Вставить("СуммаБонус", Элементы.КонтрагентыСуммаБонус.Видимость);
	НастройкиОтображенияПолей.Вставить("Период", Элементы.КонтрагентыНачалоДействия.Видимость);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовКлиентов.Контрагенты";
	ПараметрыЗагрузки.Заголовок = ЗаголовокФормыЗагрузкиКонтрагентов();
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаКонтрагенты(НастройкиОтображенияПолей);
	ДополнительныеПараметры = Новый Структура("НастройкиОтображенияПолей", НастройкиОтображенияПолей);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьКонтрагентовИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИННКонтрагентовИзФайла(Команда)
	
	НастройкиОтображенияПолей = Новый Структура;
	НастройкиОтображенияПолей.Вставить("Период", Элементы.ИННКонтрагентовНачалоДействия.Видимость);
	НастройкиОтображенияПолей.Вставить("СуммаПлан", Элементы.ИННКонтрагентовСуммаПлан.Видимость);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовКлиентов.ИННКонтрагентов";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка ИНН контрагентов из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаКонтрагентыИНН(НастройкиОтображенияПолей);
	ДополнительныеПараметры = Новый Структура("НастройкиОтображенияПолей", НастройкиОтображенияПолей);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьИННКонтрагентовИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСегментыТоваровИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовКлиентов.СегментыТоваров";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка сегментов товаров из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаСегментовТоваров();
	ПараметрыЗагрузки.ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьСегментыТоваровИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ОтображатьПериод = (Элементы.ТоварыНачалоДействия.Видимость
						ИЛИ Элементы.ТоварыОкончаниеДействия.Видимость);
	
	НастройкиОтображенияПолей = Новый Структура;
	НастройкиОтображенияПолей.Вставить("Характеристика", ИспользоватьХарактеристикиНоменклатуры);
	НастройкиОтображенияПолей.Вставить("Период", ОтображатьПериод);
	НастройкиОтображенияПолей.Вставить("КоличествоПлан", Элементы.ТоварыКоличествоПлан.Видимость);
	НастройкиОтображенияПолей.Вставить("БазоваяЦена", Элементы.ТоварыБазоваяЦена.Видимость);
	НастройкиОтображенияПолей.Вставить("Процент", Элементы.ТоварыПроцент.Видимость);
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовКлиентов.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка товаров из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаТовары(НастройкиОтображенияПолей);
	ДополнительныеПараметры = Новый Структура("НастройкиОтображенияПолей", НастройкиОтображенияПолей);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСегментыПартнеровИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "УсловияРетроБонусовКлиентов.СегментыПартнеров";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка сегментов клиентов из файла'");
	ПараметрыЗагрузки.КолонкиМакета = ОписаниеКолонокМакетаСегментовПартнеров();
	ПараметрыЗагрузки.ДополнительныеПараметры = Новый Структура;
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьСегментыПартнеровИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗаполнитьКоличествоПлан(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки; // Массив из Число
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		
		Подсказка = НСтр("ru = 'Кол-во, план'");
		Квалификаторы = Новый КвалификаторыЧисла(15, 3, ДопустимыйЗнак.Неотрицательный);
		ТипКоличествоПлан = Новый ОписаниеТипов("Число", Квалификаторы);
		НовыйПлан = 0;
		Результат = Ждать ВвестиЗначениеАсинх(НовыйПлан, Подсказка, ТипКоличествоПлан); // Число, Неопределено
		
		Если Результат <> Неопределено Тогда
			
			Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
				
				СтрокаТоваров = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если СтрокаТоваров.ИсходнаяСтрока Тогда
					
					Продолжить;
					
				КонецЕсли;
				СтрокаТоваров.КоличествоПлан = Результат;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ТекстПредупреждения = НСтр("ru = 'Не выбраны строки для заполнения.'");
		Ждать ПредупреждениеАсинх(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчастниковПоСегменту(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьУчастниковПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.СегментыПартнеров.ФормаВыбора",
		,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварыПоСегменту(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьТоварыПоСегментуЗавершение", ЭтотОбъект);
	ОткрытьФорму(
		"Справочник.СегментыНоменклатуры.ФормаВыбора",
		,
		ЭтотОбъект,
		,
		,
		,
		ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ТекущийСтатус = Объект.Статус;
	
	ЗаполнитьПризнакНаличияНачислений();
	ЗаполнитьДанныеПоследнейКорректировки();
	
	УстановитьЗаголовкиДекорацийСГиперссылками();
	
	ЗаполнитьПоВидуРетроБонуса(Истина);
	УстановитьЗаголовкиПоВалюте();
	УстановитьНеизменнуюНастройкуПолейПоВиду();
	
	// Установка видимости по исправлению
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.КонтрагентыСуммаПланДоИзменений.Имя);
	ИменаЭлементов.Добавить(Элементы.КонтрагентыНачалоДействияДоИзменений.Имя);
	ИменаЭлементов.Добавить(Элементы.КонтрагентыОкончаниеДействияДоИзменений.Имя);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, ИменаЭлементов, "Видимость", Объект.Исправление);
	
	ДенежныеСредстваСервер.УправлениеЭлементамиФормыПриЧтенииСозданииНаСервере(ЭтотОбъект);
	
	МассивЭлементов = Новый Массив; // Массив из Строка
	МассивЭлементов.Добавить(Элементы.УстановитьИнтервал.Имя);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы, МассивЭлементов, "Видимость", НЕ Объект.Исправление);
	
	МассивДопустимыхТипов = Новый ФиксированныйМассив(РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры());
	ПараметрВыбораНоменклатуры = Новый ПараметрВыбора("Отбор.ТипНоменклатуры", МассивДопустимыхТипов);
	ПараметрыВыбораНоменклатуры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрВыбораНоменклатуры); // Массив из ПараметрВыбора
	Элементы.ТоварыНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНоменклатуры);
	
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
	НачалоДействияСтрокой = Формат(Объект.НачалоДействия, "ДЛФ=D;");
	ОкончаниеДействияСтрокой = Формат(Объект.ОкончаниеДействия, "ДЛФ=D;");
	СформироватьСуммыПлановСтрокой(ЭтотОбъект);
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьИндивидуальныеСоглашения = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	УстановитьНастройкиСведенийУчастников();
	ЗаполнитьСлужебныеРеквизитыСоглашенийДоговоров();
	УстановитьНастройкиСведенийТоваров();
	ЗаполнитьРеквизитыСегментовПоУсловию();
	
	УстановитьНастройкиПоСтатусу();
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиПоСтатусу()
	
	Если Объект.Ссылка.Пустая() Тогда
		ДоступноИзменениеПоПравам = Истина;
	Иначе
		ДоступноИзменениеПоПравам = УправлениеДоступом.ИзменениеРазрешено(Объект.Ссылка);
	КонецЕсли;
	
	РазрешеноИзменение = Документы.УсловияРетроБонусовКлиентов.РазрешеноИзменениеПоСтатусу(Объект.Статус);
	ВидимостьОтменыСогласования = Ложь;
	
	Если НЕ РазрешеноИзменение Тогда
		
		ТолькоПросмотр = Истина;
		
		ВидимостьОтменыСогласования = (ДоступноИзменениеПоПравам
									   И Объект.Статус = Перечисления.СтатусыДокументовРетроБонусов.Согласован);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		Элементы.ДекорацияОтменитьСогласование.Имя,
		"Видимость",
		ВидимостьОтменыСогласования);
	
	УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
	
	Если ТолькоПросмотр Тогда
		
		Элементы.Статус.СписокВыбора.Очистить();
		Элементы.Статус.РежимВыбораИзСписка = Ложь;
		
	Иначе
		
		РазрешенныеСтатусы = Документы.УсловияРетроБонусовКлиентов.РазрешенныеСтатусыКУстановке();
		
		Если РазрешенныеСтатусы.Количество() > 0 Тогда
			
			Элементы.Статус.СписокВыбора.ЗагрузитьЗначения(РазрешенныеСтатусы);
			Элементы.Статус.РежимВыбораИзСписка = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыСегментовПоУсловию()
	
	Если Объект.Проведен Тогда
		
		ДанныеУсловий = Документы.УсловияРетроБонусовКлиентов.АктуальныеДанные(Объект.Ссылка);
		ИспользуютсяСегментыТоваров =
			(ДанныеУсловий.СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры);
		ИспользуютсяСегментыПартнеров =
			(ДанныеУсловий.СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров);
		ИспользуютсяСегменты = (ИспользуютсяСегментыТоваров ИЛИ ИспользуютсяСегментыПартнеров);
		СоставСегментовЗафиксирован = ДанныеУсловий.СегментыЗафиксированы;
		
	Иначе
		
		ИспользуютсяСегменты = Ложь;
		СоставСегментовЗафиксирован = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьКомандФиксацииСегментов(Форма)
	
	МассивВсехЭлементов = Новый Массив; // Массив из Строка
	МассивВсехЭлементов.Добавить(Форма.Элементы.ДекорацияЗафиксироватьСегменты.Имя);
	МассивВсехЭлементов.Добавить(Форма.Элементы.ДекорацияОтменитьФиксациюСегментов.Имя);
	
	МассивВидимых = Новый Массив; // Массив из Строка
	
	Если Форма.ЕстьПравоИзмененияУРБ
	   И Форма.ИспользуютсяСегменты
	   И НЕ Форма.СоставСегментовЗафиксирован Тогда
		
		МассивВидимых.Добавить(Форма.Элементы.ДекорацияЗафиксироватьСегменты.Имя);
		
	КонецЕсли;
	
	Если Форма.ЕстьПравоИзмененияУРБ
	   И Форма.ИспользуютсяСегменты
	   И Форма.СоставСегментовЗафиксирован Тогда
		
		МассивВидимых.Добавить(Форма.Элементы.ДекорацияОтменитьФиксациюСегментов.Имя);
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовПоМассиву(
		Форма.Элементы, МассивВсехЭлементов, МассивВидимых);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		Форма.Элементы.ДекорацияЗафиксироватьСегменты.Имя,
		"Доступность",
		Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		Форма.Элементы.ДекорацияОтменитьФиксациюСегментов.Имя,
		"Доступность",
		Истина);
	
КонецПроцедуры

// Параметры:
//  СегментыЗафиксированы - Булево
//
&НаКлиенте
Процедура ОкончаниеФиксацииСоставаСегментов(СегментыЗафиксированы) Экспорт
	
	СоставСегментовЗафиксирован = СегментыЗафиксированы;
	УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиДекорацийСГиперссылками()
	
	Если ЕстьНачисления Тогда
		
		ТекстОтменитьСогласование = НСтр("ru = 'Созданы начисления, отмена согласования запрещена'");
		
	Иначе
		
		ШаблонОтменитьСогласование = НСтр("ru = '<a href=""%1"">Отменить согласование</a>'");
		ТекстОтменитьСогласование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОтменитьСогласование, "ОтменитьСогласование");
		
	КонецЕсли;
	
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		ТекстЗафиксировать = НСтр("ru = 'Введена корректировка в статусе ""На согласовании"", фиксация состава сегментов запрещена'");
		
	Иначе
		
		ШаблонЗафиксировать = НСтр("ru = 'Состав сегментов не зафиксирован. <a href=""%1"">Зафиксировать</a>.'");
		ТекстЗафиксировать = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗафиксировать, "Зафиксировать");
		
	КонецЕсли;
	
	Если ЕстьНачисления Тогда
		
		ТекстОтменить = НСтр("ru = 'Созданы начисления, отмена фиксации состава сегментов запрещена'");
		
	Иначе
		
		ШаблонОтменитьФиксацию = НСтр("ru = 'Состав сегментов зафиксирован. <a href=""%1"">Отменить фиксацию</a>.'");
		ТекстОтменить = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонОтменитьФиксацию, "ОтменитьФиксацию");
		
	КонецЕсли;
	
	Элементы.ДекорацияЗафиксироватьСегменты.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстЗафиксировать);
	Элементы.ДекорацияОтменитьФиксациюСегментов.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстОтменить);
	Элементы.ДекорацияОтменитьСогласование.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(ТекстОтменитьСогласование);
	
КонецПроцедуры

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	УстановитьОформлениеТаблицыКонтрагенты();
	УстановитьОформлениеТаблицыИННКонтрагентов();
	УстановитьОформлениеТаблицыДоговорыСоглашения();
	УстановитьОформлениеТаблицыТовары();
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.СегментыПартнеров,
		Элементы.СегментыПартнеровОтменено.Имя);
	УстановитьОформлениеИсходныхСтрокСегментыПартнеров();
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.СегментыТоваров,
		Элементы.СегментыТоваровОтменено.Имя);
	
	УстановитьОформлениеИсходныхСтрокСегментыТоваров();
	
КонецПроцедуры

// Возвращаемое значение:
//  Структура - Новые параметры оформления исправления:
// * ПоляИсходнаяСтрока - Массив из Строка - 
// * ПоляДоИзменений - Массив из Строка -
//
&НаСервере
Функция НовыеПараметрыОформленияИсходныхСтрок()
	
	Результат = Новый Структура;
	Результат.Вставить("ПоляИсходнаяСтрока", Новый Массив);
	Результат.Вставить("ПоляДоИзменений", Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Параметры:
//  ТаблицаФормы - ТаблицаФормы - Таблица формы
//  Параметры - см. НовыеПараметрыОформленияИсходныхСтрок
// 
&НаСервере
Процедура ОформитьПоляПоИсходнымСтрокам(ТаблицаФормы, Параметры)
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ПутьКИсходнаяСтрока = ПутьКТЧ + ".ИсходнаяСтрока";
	
	#Область ДанныеИсходнойСтроки
	ПоляИсходнаяСтрока = Параметры.ПоляИсходнаяСтрока;
	Если ПоляИсходнаяСтрока.Количество() > 0 Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Для Каждого ИмяПоля Из ПоляИсходнаяСтрока Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		Для Каждого ИмяПоля Из Параметры.ПоляДоИзменений Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКИсходнаяСтрока);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ЖирныйШрифт);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПоляДоИзменений
	Если Параметры.ПоляДоИзменений.Количество() > 0 Тогда
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		Для Каждого ИмяПоля Из Параметры.ПоляДоИзменений Цикл
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЦикла;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКИсходнаяСтрока);
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
		Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		
	КонецЕсли;
	#КонецОбласти
	
	ОформлениеФлагаОтмены(ТаблицаФормы);
	
КонецПроцедуры

// Блокировка флага отмены в исправлении документа
&НаСервере
Процедура ОформлениеФлагаОтмены(ТаблицаФормы)
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ИмяТЧ = ТаблицаФормы.Имя;
	ИмяОтменено = ИмяТЧ + "Отменено";
	ПутьКИсходнаяСтрока = ПутьКТЧ + ".ИсходнаяСтрока";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяОтменено);
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Отбор);
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКИсходнаяСтрока);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПериода(ТаблицаФормы, ДатаНачалоСтрокой, ДатаОкончанияСтрокой)
	
	// Заполнение датой из шапки, если не указана в строках
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ИмяТаблицы = ТаблицаФормы.Имя;
	ИмяНачалоДействия = ИмяТаблицы + "НачалоДействия";
	ПутьКНачалоДействия = ПутьКТЧ + ".НачалоДействия";
	ИмяОкончаниеДействия = ИмяТаблицы + "ОкончаниеДействия";
	ПутьКОкончаниеДействия = ПутьКТЧ + ".ОкончаниеДействия";
	ПутьКОтменено = ПутьКТЧ + ".Отменено";
	
	#Область НачалоДействия
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяНачалоДействия);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКНачалоДействия);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ДатаНачалоСтрокой);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	#КонецОбласти
	
	#Область ОкончаниеДействия
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяОкончаниеДействия);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОкончаниеДействия);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ДатаОкончанияСтрокой);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Лево);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ОформитьОтмененныеСтроки(ТаблицаФормы, ИменаЭлементов = Неопределено)
	
	ПутьКТЧ = ТаблицаФормы.ПутьКДанным;
	ПутьКОтменено = ПутьКТЧ + ".Отменено";
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Для Каждого ИмяПоля Из ИменаЭлементов Цикл
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
	КонецЦикла;
	
	ГруппаИЛИ = РетроБонусыСервер.НоваяГруппаОтборов(Элемент.Отбор);
		
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКОтменено);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "-");
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокСегментыПартнеров()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.СегментыПартнеровСегмент.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.СегментыПартнеров, ПараметрыОформления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокТовары()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыНоменклатура.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыХарактеристика.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыКоличествоПлан.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыБазоваяЦена.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ТоварыПроцент.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ТоварыНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ТоварыОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.Товары, ПараметрыОформления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокСегментыТоваров()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.СегментыТоваровСегмент.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.СегментыТоваров, ПараметрыОформления);
	
КонецПроцедуры

#Область УсловноеОформлениеКонтрагенты

&НаСервере
Процедура УстановитьОформлениеТаблицыКонтрагенты()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.Контрагенты,
		Элементы.КонтрагентыОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.КонтрагентыСуммаПлан.Имя);
	ИменаЭлементов.Добавить(Элементы.КонтрагентыНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.КонтрагентыОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.Контрагенты, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокКонтрагенты();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.Контрагенты,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
	УстановитьОформлениеКонтрагентыКонтрагент();
	УстановитьОформлениеКонтрагентыПартнер();
	УстановитьОформлениеКонтрагентыСуммаПлан();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКонтрагентыКонтрагент()
	
	#Область ОбязательностьЗаполнения
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыКонтрагент.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.Клиенты;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачислитьСразу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ПустойКонтрагент
	СтрокаПустогоКонтрагента = НСтр("ru = '<любой>'");
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыКонтрагент.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.Клиенты;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачислитьСразу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", СтрокаПустогоКонтрагента);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКонтрагентыПартнер()
	
	#Область ОбязательностьЗаполнения
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыПартнер.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачислитьСразу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	#КонецОбласти
	
	#Область ПустойПартнер
	СтрокаПустогоПартнера = НСтр("ru = '<любой>'");
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыПартнер.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.НачислитьСразу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра(
		"Текст", СтрокаПустогоПартнера);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКонтрагентыСуммаПлан()
	
	ПолеКомпоновкиДанныхСуммаПланаСтрокой = Новый ПолеКомпоновкиДанных("СуммаПланСтрокой");
	ПолеКомпоновкиДанныхСуммаПланСтрокойНеизменный = Новый ПолеКомпоновкиДанных("СуммаПланСтрокойНеизменный");
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	
	#Область ПустойПлан
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыСуммаПлан.Имя);
	
	Показатели = Новый СписокЗначений; // СписокЗначений из ПеречислениеСсылка.СоставыУчастниковРетроБонусов
	Показатели.Добавить(СоставыУчастников.Контрагенты);
	Показатели.Добавить(СоставыУчастников.Клиенты);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = Показатели;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.СуммаПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.ПланНеУказывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеКомпоновкиДанныхСуммаПланаСтрокой);
	#КонецОбласти
	
	#Область ПланНеУказывается
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КонтрагентыСуммаПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Контрагенты.ПланНеУказывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеКомпоновкиДанныхСуммаПланСтрокойНеизменный);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокКонтрагенты()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.КонтрагентыКонтрагент.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.КонтрагентыПартнер.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.КонтрагентыСуммаПланДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.КонтрагентыНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.КонтрагентыОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.Контрагенты, ПараметрыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформлениеИННКонтрагентов

&НаСервере
Процедура УстановитьОформлениеТаблицыИННКонтрагентов()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.ИННКонтрагентов,
		Элементы.ИННКонтрагентовОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.ИННКонтрагентовСуммаПлан.Имя);
	ИменаЭлементов.Добавить(Элементы.ИННКонтрагентовНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.ИННКонтрагентовОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.ИННКонтрагентов, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокИННКонтрагентов();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.ИННКонтрагентов,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
	УстановитьОформлениеИННКонтрагентовСуммаПлан();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИННКонтрагентовСуммаПлан()
	
	ПолеКомпоновкиДанныхСуммаПланаСтрокой = Новый ПолеКомпоновкиДанных("СуммаПланСтрокой");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННКонтрагентовСуммаПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СоставыУчастниковРетроБонусов.ИНН;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИННКонтрагентов.СуммаПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИННКонтрагентов.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеКомпоновкиДанныхСуммаПланаСтрокой);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокИННКонтрагентов()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ИННКонтрагентовИНН.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ИННКонтрагентовСуммаПланДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ИННКонтрагентовНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ИННКонтрагентовОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.ИННКонтрагентов, ПараметрыОформления);
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформлениеДоговорыСоглашения

&НаСервере
Процедура УстановитьОформлениеТаблицыДоговорыСоглашения()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.ДоговорыСоглашения,
		Элементы.ДоговорыСоглашенияОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.ДоговорыСоглашенияСуммаПлан.Имя);
	ИменаЭлементов.Добавить(Элементы.ДоговорыСоглашенияНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.ДоговорыСоглашенияОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.ДоговорыСоглашения, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокДоговорыСоглашения();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.ДоговорыСоглашения,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
	УстановитьОформлениеДоговорыСоглашенияСуммаПлан();
	УстановитьОформлениеДоговорыСоглашенияКонтрагент();
	УстановитьОформлениеДоговорыСоглашенияПартнер();
	УстановитьОформлениеДоговорыСоглашенияДоговор();
	УстановитьОформлениеДоговорыСоглашенияТипСоглашения();
	УстановитьОформлениеДоговорыСоглашенияПродажиИндивидуальныеПоТиповым();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеИсходныхСтрокДоговорыСоглашения()
	
	ПараметрыОформления = НовыеПараметрыОформленияИсходныхСтрок();
	
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ДоговорыСоглашенияПартнер.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ДоговорыСоглашенияКонтрагент.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ДоговорыСоглашенияДоговор.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ДоговорыСоглашенияСоглашение.Имя);
	ПараметрыОформления.ПоляИсходнаяСтрока.Добавить(Элементы.ДоговорыСоглашенияПродажиИндивидуальныеПоТиповым.Имя);
	
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ДоговорыСоглашенияСуммаПланДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ДоговорыСоглашенияНачалоДействияДоИзменений.Имя);
	ПараметрыОформления.ПоляДоИзменений.Добавить(Элементы.ДоговорыСоглашенияОкончаниеДействияДоИзменений.Имя);
	
	ОформитьПоляПоИсходнымСтрокам(Элементы.ДоговорыСоглашения, ПараметрыОформления);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДоговорыСоглашенияСуммаПлан()
	
	ПолеКомпоновкиДанныхСуммаПланаСтрокой = Новый ПолеКомпоновкиДанных("СуммаПланСтрокой");
	ПолеКомпоновкиДанныхСуммаПланСтрокойНеизменный = Новый ПолеКомпоновкиДанных("СуммаПланСтрокойНеизменный");
	СоставыУчастников = Перечисления.СоставыУчастниковРетроБонусов;
	
	#Область ПустойПлан
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияСуммаПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СоставУчастников");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = СоставыУчастников.Договоры;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.СуммаПлан");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.ПланНеУказывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеКомпоновкиДанныхСуммаПланаСтрокой);
	#КонецОбласти
	
	#Область ПланНеУказывается
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияСуммаПлан.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.ПланНеУказывается");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПолеКомпоновкиДанныхСуммаПланСтрокойНеизменный);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДоговорыСоглашенияДоговор()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияДоговор.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Организация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	СтрокаУкажитеОрганизацию = НСтр("ru = '<укажите организацию>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрокаУкажитеОрганизацию);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДоговорыСоглашенияКонтрагент()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Контрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	СтрокаДляВсех = НСтр("ru = '<все>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрокаДляВсех);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДоговорыСоглашенияПартнер()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияПартнер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Партнер");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	СтрокаДляВсех = НСтр("ru = '<все>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", СтрокаДляВсех);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДоговорыСоглашенияТипСоглашения()
	
	#Область СоглашениеНеЗаполнено
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияТипСоглашения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ТекстНеЗаполнено = НСтр("ru = '<укажите соглашение>'");
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстНеЗаполнено);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	#КонецОбласти
	
	#Область ТиповоеСоглашение
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияТипСоглашения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.ЭтоТиповоеСоглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ТекстТиповое = НСтр("ru = 'Типовое'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстТиповое);
	#КонецОбласти
	
	#Область ИндивидуальноеСоглашение
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияТипСоглашения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.ЭтоТиповоеСоглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ТекстИндивидуальное = НСтр("ru = 'Индивидуальное'");
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтмененнойСтрокиДокумента);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстИндивидуальное);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДоговорыСоглашенияПродажиИндивидуальныеПоТиповым()
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДоговорыСоглашенияПродажиИндивидуальныеПоТиповым.Имя);
	
	ГруппаИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаИ = ГруппаИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = ГруппаИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДоговорыСоглашения.ЭтоТиповоеСоглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры
#КонецОбласти

#Область УстановитьОформлениеТовары

&НаСервере
Процедура УстановитьОформлениеТаблицыТовары()
	
	ПолеКомпоновкиДанныхДатаНачалаСтрокой = Новый ПолеКомпоновкиДанных("НачалоДействияСтрокой");
	ПолеКомпоновкиДанныхДатаОкончанияСтрокой = Новый ПолеКомпоновкиДанных("ОкончаниеДействияСтрокой");
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	
	ЗаказыСервер.УстановитьОформлениеОтмененнойСтроки(
		УсловноеОформление,
		Элементы.Товары,
		Элементы.ТоварыОтменено.Имя);
	
	ИменаЭлементов = Новый Массив; // Массив из Строка
	ИменаЭлементов.Добавить(Элементы.ТоварыНачалоДействия.Имя);
	ИменаЭлементов.Добавить(Элементы.ТоварыОкончаниеДействия.Имя);
	ОформитьОтмененныеСтроки(Элементы.Товары, ИменаЭлементов);
	
	УстановитьОформлениеИсходныхСтрокТовары();
	
	УстановитьУсловноеОформлениеПериода(
		Элементы.Товары,
		ПолеКомпоновкиДанныхДатаНачалаСтрокой,
		ПолеКомпоновкиДанныхДатаОкончанияСтрокой);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормыВспомогательные

// Параметры:
//  Результат - Неопределено - Результат
//  ДополнительныеПараметры - Структура - Дополнительные параметры
// 
&НаКлиенте
Процедура УстановитьИнтервалПослеЗавершения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоДействияСтрокой = Формат(Объект.НачалоДействия, "ДЛФ=D;");
	ОкончаниеДействияСтрокой = Формат(Объект.ОкончаниеДействия, "ДЛФ=D;");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОпределитьВалютуДокумента();
	УстановитьЗаголовкиПоВалюте();
	
	Объект.ДоговорыСоглашения.Очистить();
	
	НастроитьЗависимыеЭлементыФормыНаСервере("Организация");
	
КонецПроцедуры

&НаСервере
Процедура ВидРетроБонусаПриИзмененииСервер()
	
	ЗаполнитьПоВидуРетроБонуса();
	УстановитьЗаголовкиПоВалюте();
	УстановитьПризнакиРасчетаПланаУчастников();
	УстановитьНеизменнуюНастройкуПолейПоВиду();
	
	ОтборУчастниковПриИзмененииСервер(Ложь);
	ОтборТоваровПриИзмененииСервер(Ложь);
	УстановитьДоступныйСписокПериодичностьНачислений(ЭтотОбъект);
	
	Если ПоказательПродаж <> Перечисления.ЦелевыеПоказателиПродажРетроБонусов.Сумма Тогда
		
		Объект.СуммаПлан = 0;
		
	КонецЕсли;
	
	Если ПоказательПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов.НеИспользуется Тогда
		
		Объект.БонусПроцент = 0;
		Объект.ЗапретНачисленияСверхПлана = Ложь;
		
	КонецЕсли;
	
	Если ПоказательПродаж = Перечисления.ЦелевыеПоказателиПродажРетроБонусов.Сумма Тогда
		
		Объект.БонусПроцент = 0;
		
	КонецЕсли;
	
	Если Объект.БезРасчета Тогда
		
		Для Каждого СтрокаКонтрагенты Из Объект.Контрагенты Цикл
			
			СтрокаКонтрагенты.СуммаПлан = 0;
			СтрокаКонтрагенты.НачалоДействия = Дата(1, 1, 1);
			СтрокаКонтрагенты.ОкончаниеДействия = Дата(1, 1, 1);
			
		КонецЦикла;
		
		Объект.ИННКонтрагентов.Очистить();
		Объект.Товары.Очистить();
		
	Иначе
		
		Для Каждого СтрокаКонтрагенты Из Объект.Контрагенты Цикл
			
			СтрокаКонтрагенты.СуммаБонус = 0;
			
		КонецЦикла;
		
		Объект.НачислитьСразу = Ложь;
		
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ДетализацияРасчетаУчастниковПриИзмененииСервер()
	
	УстановитьПризнакиРасчетаПланаУчастников();
	НастроитьЗависимыеЭлементыФормыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОтборУчастниковПриИзмененииСервер(Знач НастроитьЗависимыеЭлементы = Истина)
	
	УстановитьНастройкиСведенийУчастников();
	
	ПараметрыУчастников = Документы.УсловияРетроБонусовКлиентов.ПараметрыОчисткиРеквизитовУчастников();
	ПараметрыУчастников.СоставУчастников = СоставУчастников;
	ПараметрыУчастников.ОтборУчастников = Объект.ОтборУчастников;
	Документы.УсловияРетроБонусовКлиентов.ОчиститьНеиспользуемыеРеквизитыУчастников(Объект, ПараметрыУчастников);
	
	Если НастроитьЗависимыеЭлементы Тогда
		
		НастроитьЗависимыеЭлементыФормыНаСервере("ОтборУчастников");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборТоваровПриИзмененииСервер(Знач НастроитьЗависимыеЭлементы = Истина)
	
	УстановитьНастройкиСведенийТоваров();
	
	ПараметрыТоваров = Документы.УсловияРетроБонусовКлиентов.ПараметрыОчисткиРеквизитовТоваров();
	ПараметрыТоваров.СоставТоваров = СоставТоваров;
	ПараметрыТоваров.ОтборТоваров = Объект.ОтборТоваров;
	ПараметрыТоваров.ПоказательПродаж = ПоказательПродаж;
	ПараметрыТоваров.БазаРасчета = БазаРасчетаПродаж;
	Документы.УсловияРетроБонусовКлиентов.ОчиститьНеиспользуемыеРеквизитыТоваров(Объект, ПараметрыТоваров);
	
	Если НастроитьЗависимыеЭлементы Тогда
		
		НастроитьЗависимыеЭлементыФормыНаСервере("ОтборТоваров");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСогласование()
	
	ЗаполнитьПризнакНаличияНачислений();
	
	Если НЕ ЕстьНачисления Тогда
		
		Модифицированность = Истина;
		ТолькоПросмотр = Ложь;
		Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДокументовРетроБонусов.Черновик");
		ТекущийСтатус = Объект.Статус;
		УстановитьНастройкиПоСтатусу();
		
		// СтандартныеПодсистемы.ПодключаемыеКоманды
		ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Иначе
		
		УстановитьЗаголовкиДекорацийСГиперссылками();
		
		ТекстСообщения = НСтр("ru = 'Созданы документы начисления. Отмена согласования запрещена.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Объект", "Статус");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ЗафиксироватьСоставСегментов()
	
	ОбновитьДанныеПередФиксациейСегментов();
	Если НЕ ЕстьКорректировкаНаСогласовании
	   И НЕ СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Зафиксировать состав сегментов?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗафиксироватьСоставСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияЗафиксироватьСегменты.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ЗафиксироватьСоставСегментов(
				Объект.Ссылка,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
		
	Иначе
		
		Если ЕстьКорректировкаНаСогласовании Тогда
			
			ТекстСообщения = НСтр("ru = 'Невозможно зафиксировать состав сегментов: введена корректировка в статусе ""На согласовании""'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			
		КонецЕсли;
		
		УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ОтменитьФиксациюСоставаСегментов()
	
	ОбновитьДанныеПередОтменойФиксацииСегментов();
	Если НЕ ЕстьНачисления
	   И СоставСегментовЗафиксирован Тогда
		
		ТекстВопроса = НСтр("ru = 'Отменить фиксацию состава сегментов?'");
		Ответ = Ждать ВопросАсинх(ТекстВопроса, РежимДиалогаВопрос.ДаНет); // КодВозвратаДиалога
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ОтменитьФиксациюСоставаСегментовЗавершение", ЭтотОбъект);
			ОповещениеОперацияВыполняется = Новый ОписаниеОповещения(
				"ВыполняютсяОперацииПоФиксацииСоставаСегментов",
				ЭтотОбъект);
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				Элементы.ДекорацияОтменитьФиксациюСегментов.Имя,
				"Доступность",
				Ложь);
			
			РетроБонусыКлиент.ОтменитьФиксациюСоставаСегментов(
				Объект.Ссылка,
				ЭтотОбъект,
				ОповещениеОЗавершении,
				ОповещениеОперацияВыполняется);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗафиксироватьСоставСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			СоставСегментовЗафиксирован = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьДанныеПередФиксациейСегментов();
	УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ОтменитьФиксациюСоставаСегментовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		Если Результат.Статус = "Ошибка" Тогда
			
			СтандартныеПодсистемыКлиент.ВывестиИнформациюОбОшибке(Результат.ИнформацияОбОшибке);
			
		Иначе
			
			СоставСегментовЗафиксирован = Ложь;
			
		КонецЕсли;
		
	Иначе
		ЗаполнитьРеквизитыСегментовПоУсловию();
	КонецЕсли;
	
	УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Результат - см. ДлительныеОперацииКлиент.НовыйРезультатДлительнойОперации
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ВыполняютсяОперацииПоФиксацииСоставаСегментов(Результат, ДополнительныеПараметры) Экспорт
	
	ТекстСообщения = НСтр("ru = 'По данному документу уже выполняются операции по фиксации состава сегментов. Попробуйте позже'");
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	УстановитьВидимостьКомандФиксацииСегментов(ЭтотОбъект);
	
КонецПроцедуры

// Параметры:
//  Результат - СправочникСсылка.СегментыНоменклатуры, Неопределено -
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗаполнитьТоварыПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВыбранныйСегмент = Результат;
		ЗаполнитьТоварыПоСегментуСервер(ВыбранныйСегмент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоСегментуСервер(Знач Сегмент)
	
	СпособФормирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сегмент, "СпособФормирования");
	Если СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		
		ВыборкаНоменклатуры = ТоварыСтатическогоСегмента(Сегмент);
		
	Иначе
		
		ВыборкаНоменклатуры = ТоварыДинамическогоСегмента(Сегмент);
		
	КонецЕсли;
	
	Пока ВыборкаНоменклатуры.Следующий() Цикл
		
		СтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ВыборкаНоменклатуры);
		
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКонтрагентыВспомогательные

&НаСервере
Процедура КонтрагентыКонтрагентПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаУчастников = Объект.Контрагенты.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Объект.НачислитьСразу
	   И СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты
	   И СтрокаУчастников.Партнер.Пустая() Тогда
		
		НовыйПартнер = ПартнерПоКонтрагенту(СтрокаУчастников.Контрагент);
		СтрокаУчастников.Партнер = НовыйПартнер;
		
	КонецЕсли;
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	Если Объект.ДетализацияРасчетаУчастников <> ДетализацияРасчета.ПоКонтрагентуКлиенту Тогда
		
		УстановитьПризнакиРасчетаПланаУчастников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентыПартнерПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаУчастников = Объект.Контрагенты.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если Объект.НачислитьСразу
	   И СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты
	   И СтрокаУчастников.Контрагент.Пустая() Тогда
		
		НовыйКонтрагент = КонтрагентПоПартнеру(СтрокаУчастников.Партнер);
		СтрокаУчастников.Контрагент = НовыйКонтрагент;
		
	КонецЕсли;
	
	ДетализацияРасчета = Перечисления.ДетализацияРасчетаУчастниковРетроБонусов;
	Если Объект.ДетализацияРасчетаУчастников <> ДетализацияРасчета.ПоКонтрагентуКлиенту Тогда
		
		УстановитьПризнакиРасчетаПланаУчастников();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПартнерПоКонтрагенту(Знач Контрагент)
	
	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	
	Возврат Партнер;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтрагентПоПартнеру(Знач Партнер)
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	
	Выборка = ВыборкаКонтрагентов(Партнер);
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		Контрагент = Выборка.Ссылка;
		
	КонецЕсли;
	
	Возврат Контрагент;
	
КонецФункции

// Параметры:
//  Партнер - СправочникСсылка.Партнеры - Партнер
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//	* Ссылка - СправочникСсылка.Контрагенты
//
&НаСервереБезКонтекста
Функция ВыборкаКонтрагентов(Знач Партнер)
	
	Запрос = Новый	Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО Контрагенты.Партнер = Партнеры.Родитель
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|	И Партнеры.Родитель <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.ВыполнитьПакет();
	РезультатПоПартнеру = Результат[0];
	РезультатПоРодителюПартнера = Результат[1];
	
	Если РезультатПоПартнеру.Пустой() Тогда
		Возврат РезультатПоРодителюПартнера.Выбрать();
	Иначе
		Возврат РезультатПоПартнеру.Выбрать();
	КонецЕсли;
	
КонецФункции

// Параметры:
//  Результат - СправочникСсылка.СегментыПартнеров, Неопределено -
//  ДополнительныеПараметры - Неопределено
//
&НаКлиенте
Процедура ЗаполнитьУчастниковПоСегментуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ВыбранныйСегмент = Результат;
		ЗаполнитьУчастниковПоСегментуСервер(ВыбранныйСегмент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастниковПоСегментуСервер(Знач Сегмент)
	
	СпособФормирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сегмент, "СпособФормирования");
	Если СпособФормирования <> Перечисления.СпособыФормированияСегментов.ФормироватьДинамически Тогда
		
		ВыборкаПартнеров = ПартнерыСтатическогоСегмента(Сегмент);
		
	Иначе
		
		ВыборкаПартнеров = ПартнерыДинамическогоСегмента(Сегмент);
		
	КонецЕсли;
	
	Пока ВыборкаПартнеров.Следующий() Цикл
		
		СтрокаКонтрагенты = Объект.Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКонтрагенты, ВыборкаПартнеров);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКонтрагентыВспомогательные

&НаСервере
Процедура ДоговорыСоглашенияКонтрагентПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаУчастников = Объект.ДоговорыСоглашения.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры") Тогда
		
		ТекущийДоговор = СтрокаУчастников.Договор;
		ЗаполнитьОчиститьДоговор(СтрокаУчастников);
		Если ТекущийДоговор <> СтрокаУчастников.Договор Тогда
			
			ДоговорыСоглашенияДоговорПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
			
		КонецЕсли;
		УстановитьПризнакиРасчетаПланаУчастников(СтрокаУчастников.Контрагент);
		
	ИначеЕсли СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Соглашения") Тогда
		
		ТекущееСоглашение = СтрокаУчастников.Соглашение;
		ЗаполнитьОчиститьСоглашение(СтрокаУчастников);
		
		Если ТекущееСоглашение <> СтрокаУчастников.Соглашение Тогда
			
			ДоговорыСоглашенияСоглашениеПриИзмененииСерверОбработатьСтроку(ТекущаяСтрокаИдентификатор);
			
		КонецЕсли;
		УстановитьПризнакиРасчетаПланаУчастников(СтрокаУчастников.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорыСоглашенияПартнерПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаУчастников = Объект.ДоговорыСоглашения.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(
		СтрокаУчастников.Партнер, СтрокаУчастников.Контрагент);
	
	Если СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Договоры") Тогда
		
		ТекущийДоговор = СтрокаУчастников.Договор;
		ЗаполнитьОчиститьДоговор(СтрокаУчастников);
		Если ТекущийДоговор <> СтрокаУчастников.Договор Тогда
			
			ДоговорыСоглашенияДоговорПриИзмененииСервер(ТекущаяСтрокаИдентификатор);
			
		КонецЕсли;
		УстановитьПризнакиРасчетаПланаУчастников(СтрокаУчастников.Контрагент);
		
	ИначеЕсли СоставУчастников = ПредопределенноеЗначение("Перечисление.СоставыУчастниковРетроБонусов.Соглашения") Тогда
		
		ТекущееСоглашение = СтрокаУчастников.Соглашение;
		ЗаполнитьОчиститьСоглашение(СтрокаУчастников);
		
		Если ТекущееСоглашение <> СтрокаУчастников.Соглашение Тогда
			
			ДоговорыСоглашенияСоглашениеПриИзмененииСерверОбработатьСтроку(ТекущаяСтрокаИдентификатор);
			
		КонецЕсли;
		УстановитьПризнакиРасчетаПланаУчастников(СтрокаУчастников.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОчиститьДоговор(СтрокаУчастников, ТолькоДействующие = Истина)
	
	Если СтрокаУчастников.Контрагент.Пустая()
	 ИЛИ СтрокаУчастников.Партнер.Пустая() Тогда
		
		СтрокаУчастников.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Возврат;
		
	КонецЕсли;
	
	Выборка = ЗапросДоговораПоАналитике(СтрокаУчастников, ТолькоДействующие);
	Если Выборка.Количество() = 0 Тогда
		
		СтрокаУчастников.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	ИначеЕсли Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		СтрокаУчастников.Договор = Выборка.Договор;
		
	ИначеЕсли Выборка.Количество() > 2 Тогда
		
		СтрокаУчастников.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	Иначе
		
		НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КоличествоПохожих = 0;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Приоритет = 1 Тогда
				
				НовыйДоговор = Выборка.Договор;
				Прервать;
				
			Иначе
				
				КоличествоПохожих = КоличествоПохожих + 1;
				НовыйДоговор = Выборка.Договор;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоПохожих > 1 Тогда
			СтрокаУчастников.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе
			СтрокаУчастников.Договор = НовыйДоговор;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СтрокаУчастников - ДанныеФормыЭлементКоллекции: см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения - Строка участников
//  ТолькоДействующие - Булево - отбирать только действующие договора
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Приоритет - Число
//  * Договор - СправочникСсылка.ДоговорыКонтрагентов
//
&НаСервере
Функция ЗапросДоговораПоАналитике(Знач СтрокаУчастников, ТолькоДействующие)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Приоритет,
	|	Данные.Договор
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Приоритет,
	|		Договоры.Ссылка КАК Договор
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ГДЕ
	|		Договоры.Организация = &Организация
	|		И Договоры.Контрагент = &Контрагент
	|		И Договоры.Партнер = &Партнер
	|		И НЕ Договоры.ПометкаУдаления
	|		И Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		И Договоры.Ссылка = &Договор
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 2
	|		2 КАК Приоритет,
	|		Договоры.Ссылка КАК Договор
	|	ИЗ
	|		Справочник.ДоговорыКонтрагентов КАК Договоры
	|	ГДЕ
	|		Договоры.Организация = &Организация
	|		И Договоры.Контрагент = &Контрагент
	|		И Договоры.Партнер = &Партнер
	|		И НЕ Договоры.ПометкаУдаления
	|		И Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|		И &ТолькоДействующие
	|		И Договоры.Ссылка <> &Договор) КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Приоритет";
	
	Если ТолькоДействующие Тогда
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТолькоДействующие",
			"Договоры.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(
			ТекстЗапроса,
			"&ТолькоДействующие",
			"ИСТИНА");
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент", СтрокаУчастников.Контрагент);
	Запрос.УстановитьПараметр("Партнер", СтрокаУчастников.Партнер);
	Запрос.УстановитьПараметр("Договор", СтрокаУчастников.Договор);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОчиститьСоглашение(СтрокаУчастников, ТолькоДействующие = Истина)
	
	Если СтрокаУчастников.Партнер.Пустая() Тогда
		
		СтрокаУчастников.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		Возврат;
		
	КонецЕсли;
	
	Выборка = ЗапросСоглашенияПоАналитике(СтрокаУчастников);
	Если Выборка.Количество() = 0 Тогда
		
		СтрокаУчастников.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		
	ИначеЕсли Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		СтрокаУчастников.Соглашение = Выборка.Соглашение;
		СтрокаУчастников.Контрагент = Выборка.Контрагент;
		
	ИначеЕсли Выборка.Количество() > 2 Тогда
		
		СтрокаУчастников.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		
	Иначе
		
		НовоеСоглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		КоличествоПохожих = 0;
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.Приоритет = 1 Тогда
				
				НовоеСоглашение = Выборка.Соглашение;
				Прервать;
				
			Иначе
				
				КоличествоПохожих = КоличествоПохожих + 1;
				НовоеСоглашение = Выборка.Соглашение;
				Контрагент = Выборка.Контрагент;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если КоличествоПохожих > 1 Тогда
			
			СтрокаУчастников.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
			
		Иначе
			
			СтрокаУчастников.Соглашение = НовоеСоглашение;
			СтрокаУчастников.Контрагент = Контрагент;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  СтрокаУчастников - ДанныеФормыЭлементКоллекции: см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента.Элементы.ДоговорыСоглашения - Строка участников
// 
// Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса:
//  * Приоритет - Число -
//  * Соглашение - СправочникСсылка.СоглашенияСКлиентами -
//  * Контрагент - СправочникСсылка.Контрагенты - контрагент по соглашению 
//
&НаСервере
Функция ЗапросСоглашенияПоАналитике(Знач СтрокаУчастников)
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Данные.Приоритет КАК Приоритет,
	|	Данные.Соглашение КАК Соглашение,
	|	Данные.Соглашение.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		1 КАК Приоритет,
	|		Соглашения.Ссылка КАК Соглашение
	|	ИЗ
	|		Справочник.СоглашенияСКлиентами КАК Соглашения
	|	ГДЕ
	|		Соглашения.Организация В (&Организации)
	|		И Соглашения.Контрагент = &Контрагент
	|		И Соглашения.Партнер = &Партнер
	|		И НЕ Соглашения.ПометкаУдаления
	|		И НЕ Соглашения.Типовое
	|		И Соглашения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		И Соглашения.Ссылка = &Соглашение
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ ПЕРВЫЕ 2
	|		2 КАК Приоритет,
	|		Соглашения.Ссылка КАК Соглашение
	|	ИЗ
	|		Справочник.СоглашенияСКлиентами КАК Соглашения
	|	ГДЕ
	|		Соглашения.Организация В (&Организации)
	|		И Соглашения.Контрагент В (&Контрагенты)
	|		И Соглашения.Партнер В (&Партнеры)
	|		И Соглашения.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует)
	|		И НЕ Соглашения.ПометкаУдаления
	|		И НЕ Соглашения.Типовое
	|		И Соглашения.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|		И Соглашения.Ссылка <> &Соглашение) КАК Данные
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Приоритет";
	
	Запрос.Текст = ТекстЗапроса;
	
	Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Организация); // Массив из СправочникСсылка.Организации
	Организации.Добавить(Справочники.Организации.ПустаяСсылка());
	
	Контрагенты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаУчастников.Контрагент); // Массив из СправочникСсылка.Контрагенты
	Контрагенты.Добавить(Справочники.Контрагенты.ПустаяСсылка());
	
	Партнеры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтрокаУчастников.Партнер); // Массив из СправочникСсылка.Партнеры
	Партнеры.Добавить(Справочники.Партнеры.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("Контрагенты", Контрагенты);
	Запрос.УстановитьПараметр("Контрагент", СтрокаУчастников.Контрагент);
	Запрос.УстановитьПараметр("Партнеры", Партнеры);
	Запрос.УстановитьПараметр("Партнер", СтрокаУчастников.Партнер);
	Запрос.УстановитьПараметр("Соглашение", СтрокаУчастников.Соглашение);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере	
Процедура ДоговорыСоглашенияДоговорПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаУчастников = Объект.ДоговорыСоглашения.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если СтрокаУчастников.Контрагент.Пустая()
	 ИЛИ СтрокаУчастников.Партнер.Пустая() Тогда
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаУчастников.Договор, "Контрагент, Партнер");
		СтрокаУчастников.Контрагент = РеквизитыДоговора.Контрагент;
		СтрокаУчастников.Партнер = РеквизитыДоговора.Партнер;
		
	КонецЕсли;
	
	УстановитьПризнакиРасчетаПланаУчастников(СтрокаУчастников.Контрагент);
	
КонецПроцедуры

&НаСервере
Процедура ДоговорыСоглашенияСоглашениеПриИзмененииСервер(Знач ТекущаяСтрокаИдентификатор)
	
	ДоговорыСоглашенияСоглашениеПриИзмененииСерверОбработатьСтроку(ТекущаяСтрокаИдентификатор);
	
	СтрокаУчастников = Объект.ДоговорыСоглашения.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	Если СтрокаУчастников.ЭтоТиповоеСоглашение Тогда
		
		СтрокаУчастников.Партнер = Справочники.Партнеры.ПустаяСсылка();
		СтрокаУчастников.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	Иначе
		
		// Обновляем данные строки по соглашению (может быть не указан контрагент)
		
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			СтрокаУчастников.Соглашение, "Контрагент, Партнер");
		СтрокаУчастников.Контрагент = РеквизитыДоговора.Контрагент;
		СтрокаУчастников.Партнер = РеквизитыДоговора.Партнер;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорыСоглашенияСоглашениеПриИзмененииСерверОбработатьСтроку(Знач ТекущаяСтрокаИдентификатор)
	
	СтрокаУчастников = Объект.ДоговорыСоглашения.НайтиПоИдентификатору(ТекущаяСтрокаИдентификатор);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакСоглашенияВСтрокеТЧ", "Соглашение");
	
	КешЗначений = Неопределено;
	ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(
		СтрокаУчастников,
		СтруктураДействий,
		КешЗначений,
		Объект.ДоговорыСоглашения);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаКлиенте
Процедура НастроитьЗависимыеЭлементыФормы(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтотОбъект, ИзмененныйРеквизит, РеквизитыФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьЗависимыеЭлементыФормыНаСервере(ИзмененныйРеквизит = "")
	
	ДенежныеСредстваКлиентСервер.НастроитьЭлементыФормы(ЭтотОбъект, ИзмененныйРеквизит, РеквизитыФормы(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитыФормы(Форма)
	
	РеквизитыФормы = Новый Структура;
	РеквизитыФормы.Вставить("ПоказательПродаж");
	РеквизитыФормы.Вставить("БазаРасчетаПродаж");
	РеквизитыФормы.Вставить("СоставТоваров");
	РеквизитыФормы.Вставить("СоставУчастников");
	РеквизитыФормы.Вставить("ЕстьНачисления");
	РеквизитыФормы.Вставить("ИспользоватьИндивидуальныеСоглашения");
	
	ЗаполнитьЗначенияСвойств(РеквизитыФормы, Форма);
	
	Возврат РеквизитыФормы;
	
КонецФункции

&НаСервере
Процедура УстановитьНеизменнуюНастройкуПолейПоВиду()
	
	// Состав списка отбора товаров
	НовыеПараметры = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхОтборовТоваров();
	НовыеПараметры.БезРасчета = Объект.БезРасчета;
	НовыеПараметры.ПоказательПродаж = ПоказательПродаж;
	НовыеПараметры.БазаРасчетаПродаж = БазаРасчетаПродаж;
	НовыеПараметры.СоставТоваров = СоставТоваров;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокОтборТоваров(НовыеПараметры);
	Элементы.ОтборТоваров.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ОтборТоваров", МассивВыбора);
	
	// Состав списка отбора участников
	НовыеПараметры = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхОтборовУчастников();
	НовыеПараметры.БезРасчета = Объект.БезРасчета;
	НовыеПараметры.СоставУчастников = СоставУчастников;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокОтбораУчастников(НовыеПараметры);
	Элементы.ОтборУчастников.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ОтборУчастников", МассивВыбора);
	
	// Установка видимости и только просмотр полей
	ИменаЭлементовВидимостьВсех = Новый Массив; // Массив из Строка
	ИменаЭлементовВидимостьВсех.Добавить("Контрагенты.СуммаБонус");
	ИменаЭлементовВидимостьВсех.Добавить("НачислитьСразу");
	
	ИменаЭлементовВидимых = Новый Массив; // Массив из Строка
	СвязиПараметровВыбора = Новый Массив(); // Массив из СвязьПараметраВыбора
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		Элементы.Переместить(
			Элементы.КонтрагентыКонтрагент,
			Элементы.Контрагенты,
			Элементы.КонтрагентыПартнер);
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		
		Элементы.Переместить(
			Элементы.КонтрагентыПартнер,
			Элементы.Контрагенты,
			Элементы.КонтрагентыКонтрагент);
		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Партнер", "Элементы.Контрагенты.ТекущиеДанные.Партнер");
		СвязиПараметровВыбора.Добавить(НоваяСвязь);
		
	КонецЕсли;
	
	Элементы.КонтрагентыКонтрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
	Если Объект.БезРасчета Тогда
		
		ЗаголовокВалюты =  НСтр("ru = 'Валюта
								|начисляемого бонуса'");
		
		ИменаЭлементовВидимых.Добавить("НачислитьСразу");
		ИменаЭлементовВидимых.Добавить("Контрагенты.СуммаБонус");
		
	ИначеЕсли БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены Тогда
		
		ЗаголовокВалюты = НСтр("ru = 'Валюта
							   |базовых цен'");
		
	Иначе
		
		ЗаголовокВалюты = НСтр("ru = 'Валюта'");
		
	КонецЕсли;
	
	Элементы.Валюта.Заголовок = ЗаголовокВалюты;
	ОбщегоНазначенияУТКлиентСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы, ИменаЭлементовВидимостьВсех, ИменаЭлементовВидимых);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСведенийУчастников()
	
	ЗаголовокПоля = "";
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Контрагенты'");
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Клиенты'");
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда 
		
		ЗаголовокПоля = НСтр("ru = 'ИНН'");
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Сегменты
							 |клиентов'");
	
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Договоры Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Договоры'");
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Соглашения'");
		
	Иначе
		
		ЗаголовокПоля = НСтр("ru = 'Участники'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.ОтборУчастников.Имя, "Заголовок", ЗаголовокПоля);
	
	УстановитьНастройкуСтраницыИННКонтрагентов();
	УстановитьНастройкуСтраницыУчастники();
	УстановитьНастройкуСтраницыСегментыПартнеров();
	УстановитьНастройкуСтраницыДоговорыСоглашения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСтраницыУчастники()
	
	ВидимостьСтраницы = Ложь;
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		Если Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные контрагенты'");
			ВидимостьСтраницы = Истина;
			
		ИначеЕсли Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме контрагентов'");
			ВидимостьСтраницы = Истина;
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Контрагенты'");
			
		КонецЕсли;
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		
		Если Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные клиенты'");
			ВидимостьСтраницы = Истина;
			
		ИначеЕсли Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме клиентов'");
			ВидимостьСтраницы = Истина;
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Клиенты'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьСтраницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаУчастники.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.СтраницаУчастники.Имя, "Видимость", ВидимостьСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСтраницыИННКонтрагентов()
	
	ЗаголовокСтраницы = "";
	
	ВидимостьСтраницы = Ложь;
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.ИНН Тогда
		
		Если Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные ИНН'");
			ВидимостьСтраницы = Истина;
			
		ИначеЕсли Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме ИНН'");
			ВидимостьСтраницы = Истина;
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'ИНН'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьСтраницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаИННКонтрагентов.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.СтраницаИННКонтрагентов.Имя, "Видимость", ВидимостьСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСтраницыСегментыПартнеров()
	
	ВидимостьСтраницы = Ложь;
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.СегментыПартнеров Тогда
		
		Если Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные сегменты клиентов'");
			ВидимостьСтраницы = Истина;
			
		ИначеЕсли Объект.ОтборУчастников = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме сегментов клиентов'");
			ВидимостьСтраницы = Истина;
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Сегменты клиентов'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьСтраницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаСегментыПартнеров.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.СтраницаСегментыПартнеров.Имя, "Видимость", ВидимостьСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСтраницыДоговорыСоглашения()
	
	ВидимостьСтраницы = Ложь;
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Договоры Тогда
		
		ЗаголовокСтраницы = НСтр("ru = 'Выбранные договоры'");
		ВидимостьСтраницы = Истина;
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
		
		ЗаголовокСтраницы = НСтр("ru = 'Выбранные соглашения'");
		ВидимостьСтраницы = Истина;
		
	КонецЕсли;
	
	Если ВидимостьСтраницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаДоговорыСоглашения.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.СтраницаДоговорыСоглашения.Имя, "Видимость", ВидимостьСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиСведенийТоваров()
	
	ЗаголовокПоля = "";
	Если СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		
		ЗаголовокПоля = НСтр("ru = 'Сегменты
									   |товаров'");
		
	Иначе
		
		ЗаголовокПоля = НСтр("ru = 'Товары'");
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.ОтборТоваров.Имя, "Заголовок", ЗаголовокПоля);
	
	УстановитьНастройкуСтраницыТоваров();
	УстановитьНастройкуСтраницыСегментыТоваров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСтраницыТоваров()
	
	ВидимостьСтраницы = Ложь;
	
	Если СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.Номенклатура Тогда
		
		Если Объект.ОтборТоваров  = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные товары'");
			ВидимостьСтраницы = Истина;
			
		ИначеЕсли Объект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме товаров'");
			ВидимостьСтраницы = Истина;
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Товары'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьСтраницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаТовары.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.СтраницаТовары.Имя, "Видимость", ВидимостьСтраницы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкуСтраницыСегментыТоваров()
	
	ВидимостьСтраницы = Ложь;
	
	Если СоставТоваров = Перечисления.СоставыТоваровРетроБонусов.СегментыНоменклатуры Тогда
		
		Если Объект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.Выбранные Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Выбранные сегменты товаров'");
			ВидимостьСтраницы = Истина;
			
		ИначеЕсли Объект.ОтборТоваров = Перечисления.СоставыСписковРетроБонусов.КромеВыбранных Тогда
			
			ЗаголовокСтраницы = НСтр("ru = 'Кроме сегментов товаров'");
			ВидимостьСтраницы = Истина;
			
		Иначе
			
			ЗаголовокСтраницы = НСтр("ru = 'Сегменты товаров'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидимостьСтраницы Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы, Элементы.СтраницаСегментыТоваров.Имя, "Заголовок", ЗаголовокСтраницы);
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, Элементы.СтраницаСегментыТоваров.Имя, "Видимость", ВидимостьСтраницы);
	
КонецПроцедуры

&НаСервере
Функция ЗаголовокФормыЗагрузкиКонтрагентов()
	
	ЗаголовокФормы = "";
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		ЗаголовокФормы = НСтр("ru = 'Загрузка контрагентов из файла'");
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		ЗаголовокФормы = НСтр("ru = 'Загрузка клиентов из файла'");
	КонецЕсли;
	
	Возврат ЗаголовокФормы;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзФайлов

// Параметры:
//  АдресЗагруженныхДанных - Строка
//  ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура ТоварыЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		
		ОчиститьСообщения();
		ПолучитьЗагруженныеТоварыИзХранилища(АдресЗагруженныхДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеТоварыИзХранилища(Знач АдресТоваровВХранилище)

	ТоварыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаТоваров Из ТоварыИзХранилища Цикл
		
		СтрокаТЧТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТоваров);
		
	КонецЦикла;
	
	УдалитьИзВременногоХранилища(АдресТоваровВХранилище);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка
//  ДополнительныеПараметры - Структура
//
&НаКлиенте
Процедура СегментыПартнеровЗагрузитьИзВнешнегоФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресЗагруженныхДанных) Тогда
		
		ОчиститьСообщения();
		ПолучитьЗагруженныеСегментыПартнеровИзХранилища(АдресЗагруженныхДанных);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗагруженныеСегментыПартнеровИзХранилища(Знач АдресТоваровВХранилище)

	СегментыИзХранилища = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	Для Каждого СтрокаСегментов Из СегментыИзХранилища Цикл
		СтрокаТЧСегментыПартнеров = Объект.СегментыПартнеров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧСегментыПартнеров, СтрокаСегментов);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаКонтрагенты(НастройкиОтображенияПолей)
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	Если НастройкиОтображенияПолей.СуммаПлан Тогда
		ИменаКолонок.Добавить("СуммаПлан");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.СуммаБонус Тогда
		ИменаКолонок.Добавить("СуммаБонус");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ИменаКолонок.Добавить("НачалоДействия");
		ИменаКолонок.Добавить("ОкончаниеДействия");
		
	КонецЕсли;
	
	Колонки = СтрСоединить(ИменаКолонок, ",");
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.Контрагенты, Колонки);
	
	НомерКолонки = 0;
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Клиенты Тогда
		
		ДобавитьПоляПартнераВМакетЗагрузкиКонтрагентов(НастройкиОтображенияПолей, КолонкиМакета, НомерКолонки);
		ДобавитьПоляКонтрагентаВМакетЗагрузкиКонтрагентов(НастройкиОтображенияПолей, КолонкиМакета, НомерКолонки);
		
	ИначеЕсли СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Контрагенты Тогда
		
		ДобавитьПоляКонтрагентаВМакетЗагрузкиКонтрагентов(НастройкиОтображенияПолей, КолонкиМакета, НомерКолонки);
		ДобавитьПоляПартнераВМакетЗагрузкиКонтрагентов(НастройкиОтображенияПолей, КолонкиМакета, НомерКолонки);
		
	КонецЕсли;
	
	ПодсказкаСумма = НСтр("ru = 'Поддерживаются лидирующие нули, а также разделители целой и дробной части "","" и "".""'");
	Если НастройкиОтображенияПолей.СуммаПлан Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("СуммаПлан", КолонкиМакета);
		Колонка.Позиция = НомерКолонки;
		Колонка.Заголовок = НСтр("ru = 'Сумма, план'");
		Колонка.Подсказка = ПодсказкаСумма;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.СуммаБонус Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("СуммаБонус", КолонкиМакета);
		Колонка.Позиция = НомерКолонки;
		Колонка.Заголовок = НСтр("ru = 'Сумма, бонус'");
		Колонка.Подсказка = ПодсказкаСумма;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ПодсказкаДата = НСтр("ru = 'Поддерживается формат в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ""'");
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("НачалоДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Начало действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ОкончаниеДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Окончание действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

&НаСервере
Процедура ДобавитьПоляПартнераВМакетЗагрузкиКонтрагентов(НастройкиОтображенияПолей, КолонкиМакета, НомерКолонки)
	
	Если НастройкиОтображенияПолей.Партнер Тогда
		
		ИмяГруппы = НСтр("ru = 'Данные клиента'");
		
		НомерКолонки = НомерКолонки + 1;
		ТипКод = ОбщегоНазначения.ОписаниеТипаСтрока(11);
		ЗаголовокКолонки = НСтр("ru = 'Код клиента'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Код", ТипКод, ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = ИмяГруппы;
		КолонкиМакета.Добавить(Колонка);
		
		НомерКолонки = НомерКолонки + 1;
		ТипНаименованиеПартнера = ОбщегоНазначения.ОписаниеТипаСтрока(100);
		ЗаголовокКолонки = НСтр("ru = 'Клиент'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
			"ПартнерНаименование",
			ТипНаименованиеПартнера,
			ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = ИмяГруппы;
		КолонкиМакета.Добавить(Колонка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПоляКонтрагентаВМакетЗагрузкиКонтрагентов(НастройкиОтображенияПолей, КолонкиМакета, НомерКолонки)
	
	Если НастройкиОтображенияПолей.Контрагент Тогда
		
		ИмяГруппы = "Контрагент";
		
		НомерКолонки = НомерКолонки + 1;
		ТипИНН = Метаданные.ОпределяемыеТипы.ИНН.Тип;
		ЗаголовокКолонки = НСтр("ru = 'ИНН'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("ИНН", ТипИНН, ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = ИмяГруппы;
		КолонкиМакета.Добавить(Колонка);
		
		НомерКолонки = НомерКолонки + 1;
		ТипКПП = ОбщегоНазначения.ОписаниеТипаСтрока(9);
		ЗаголовокКолонки = НСтр("ru = 'КПП'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("КПП", ТипКПП, ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = ИмяГруппы;
		КолонкиМакета.Добавить(Колонка);
		
		НомерКолонки = НомерКолонки + 1;
		ТипНаименованиеКонтрагента = ОбщегоНазначения.ОписаниеТипаСтрока(250);
		ЗаголовокКолонки = НСтр("ru = 'Контрагент'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
			"КонтрагентНаименование",
			ТипНаименованиеКонтрагента,
			ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = ИмяГруппы;
		КолонкиМакета.Добавить(Колонка);
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Произвольный - 
//
&НаКлиенте
Процедура ЗагрузитьКонтрагентовИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьКонтрагентовИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка - Адрес загруженных данных
//
&НаСервере
Процедура ЗагрузитьКонтрагентовИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаКонтрагентыИНН(НастройкиОтображенияПолей)
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	ИменаКолонок.Добавить("ИНН");
	Если НастройкиОтображенияПолей.СуммаПлан Тогда
		ИменаКолонок.Добавить("СуммаПлан");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ИменаКолонок.Добавить("НачалоДействия");
		ИменаКолонок.Добавить("ОкончаниеДействия");
		
	КонецЕсли;
	
	Колонки = СтрСоединить(ИменаКолонок, ",");
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.ИННКонтрагентов, Колонки);
	
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ИНН", КолонкиМакета);
	Колонка.ОбязательнаДляЗаполнения = Истина;
	
	Если НастройкиОтображенияПолей.СуммаПлан Тогда
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("СуммаПлан", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Сумма, план'");
		Колонка.Подсказка = НСтр("ru = 'Поддерживаются лидирующие нули, а также разделители целой и дробной части "","" и "".""'");
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ПодсказкаДата = НСтр("ru = 'Поддерживается формат в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ""'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("НачалоДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Начало действия'");
		Колонка.Подсказка = ПодсказкаДата;
		
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ОкончаниеДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Окончание действия'");
		Колонка.Подсказка = ПодсказкаДата;
		
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьИННКонтрагентовИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИННКонтрагентовИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка -
//
&НаСервере
Процедура ЗагрузитьИННКонтрагентовИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.ИННКонтрагентов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаСегментовТоваров()
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.СегментыТоваров, "Сегмент");
	
	ТипКод = ОбщегоНазначения.ОписаниеТипаСтрока(11);
	ЗаголовокКолонки = НСтр("ru = 'Код'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Код", ТипКод, ЗаголовокКолонки);
	Колонка.Родитель = "Сегмент";
	Колонка.Позиция = 1;
	КолонкиМакета.Добавить(Колонка);
	
	ТипНаименованиеСегмента = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ЗаголовокКолонки = НСтр("ru = 'Сегмент'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"СегментНаименование",
		ТипНаименованиеСегмента,
		ЗаголовокКолонки);
	Колонка.Родитель = "Сегмент";
	Колонка.Позиция = 2;
	КолонкиМакета.Добавить(Колонка);
	
	ЗагрузкаДанныхИзФайлаКлиентСервер.УдалитьКолонкуМакета("Сегмент", КолонкиМакета);
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьСегментыТоваровИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСегментыТоваровИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//
&НаСервере
Процедура ЗагрузитьСегментыТоваровИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.СегментыТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОписаниеКолонокМакетаТовары(НастройкиОтображенияПолей)
	
	ИменаКолонок = Новый Массив; // Массив из Строка
	Если НастройкиОтображенияПолей.Период Тогда
		
		ИменаКолонок.Добавить("НачалоДействия");
		ИменаКолонок.Добавить("ОкончаниеДействия");
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.КоличествоПлан Тогда
		ИменаКолонок.Добавить("КоличествоПлан");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.БазоваяЦена Тогда
		ИменаКолонок.Добавить("БазоваяЦена");
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Процент Тогда
		ИменаКолонок.Добавить("Процент");
	КонецЕсли;
	
	Колонки = СтрСоединить(ИменаКолонок, ",");
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.Товары, Колонки);
	
	НомерКолонки = 0;
	
	ИмяГруппыНоменклатура = НСтр("ru = 'Номенклатура'");
	
	НомерКолонки = НомерКолонки + 1;
	ТипШтрихКод = ОбщегоНазначения.ОписаниеТипаСтрока(200);
	ЗаголовокКолонки = НСтр("ru = 'Штрихкод'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Штрихкод", ТипШтрихКод, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипКод = ОбщегоНазначения.ОписаниеТипаСтрока(11);
	ЗаголовокКолонки = НСтр("ru = 'Код'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Код", ТипКод, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипАртикул = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ЗаголовокКолонки = НСтр("ru = 'Артикул'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Артикул", ТипАртикул, ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	НомерКолонки = НомерКолонки + 1;
	ТипНаименованиеНоменклатуры = ОбщегоНазначения.ОписаниеТипаСтрока(100);
	ЗаголовокКолонки = НСтр("ru = 'Номенклатура'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"НоменклатураНаименование",
		ТипНаименованиеНоменклатуры,
		ЗаголовокКолонки);
	Колонка.Позиция = НомерКолонки;
	Колонка.Группа = ИмяГруппыНоменклатура;
	Колонка.Родитель = ИмяГруппыНоменклатура;
	КолонкиМакета.Добавить(Колонка);
	
	Если НастройкиОтображенияПолей.Характеристика Тогда
		
		НомерКолонки = НомерКолонки + 1;
		ТипНаименованиеХарактеристики = ОбщегоНазначения.ОписаниеТипаСтрока(150);
		ЗаголовокКолонки = НСтр("ru = 'Характеристика'");
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
			"ХарактеристикаНаименование",
			ТипНаименованиеХарактеристики,
			ЗаголовокКолонки);
		Колонка.Позиция = НомерКолонки;
		Колонка.Родитель = "Характеристика";
		КолонкиМакета.Добавить(Колонка);
		
	КонецЕсли;
	
	ТекстПодсказкиЧисло =
		НСтр("ru = 'Поддерживаются лидирующие нули, а также разделители целой и дробной части "","" и "".""'");
	Если НастройкиОтображенияПолей.КоличествоПлан Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("КоличествоПлан", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Кол-во, план'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.БазоваяЦена Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("БазоваяЦена", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Базовая цена'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Процент Тогда
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("Процент", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Бонус, %'");
		Колонка.Подсказка = ТекстПодсказкиЧисло;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Если НастройкиОтображенияПолей.Период Тогда
		
		ПодсказкаДата = НСтр("ru = 'Поддерживается формат в виде ""ДД.ММ.ГГГГ"" или ""ДД/ММ/ГГ""'");
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("НачалоДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Начало действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
		НомерКолонки = НомерКолонки + 1;
		Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.КолонкаМакета("ОкончаниеДействия", КолонкиМакета);
		Колонка.Заголовок = НСтр("ru = 'Окончание действия'");
		Колонка.Подсказка = ПодсказкаДата;
		Колонка.Позиция = НомерКолонки;
		
	КонецЕсли;
	
	Возврат КолонкиМакета;
	
КонецФункции

&НаСервере
Функция ОписаниеКолонокМакетаСегментовПартнеров()
	
	КолонкиМакета = ЗагрузкаДанныхИзФайла.СформироватьОписаниеКолонок(Объект.СегментыПартнеров, "Сегмент");
	
	ТипКод = ОбщегоНазначения.ОписаниеТипаСтрока(11);
	ЗаголовокКолонки = НСтр("ru = 'Код'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета("Код", ТипКод, ЗаголовокКолонки);
	Колонка.Родитель = "Сегмент";
	Колонка.Позиция = 1;
	КолонкиМакета.Добавить(Колонка);
	
	ТипНаименованиеСегмента = ОбщегоНазначения.ОписаниеТипаСтрока(50);
	ЗаголовокКолонки = НСтр("ru = 'Сегмент'");
	Колонка = ЗагрузкаДанныхИзФайлаКлиентСервер.ОписаниеКолонкиМакета(
		"СегментНаименование",
		ТипНаименованиеСегмента,
		ЗаголовокКолонки);
	Колонка.Родитель = "Сегмент";
	Колонка.Позиция = 2;
	КолонкиМакета.Добавить(Колонка);
	
	ЗагрузкаДанныхИзФайлаКлиентСервер.УдалитьКолонкуМакета("Сегмент", КолонкиМакета);
	
	Возврат КолонкиМакета;
	
КонецФункции

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено - Адрес загруженных данных
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка -
//
&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		
		ЗаполнитьСлужебныеРеквизитыПоНоменклатуре();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
//  АдресЗагруженныхДанных - Строка, Неопределено -
//  ДополнительныеПараметры - Произвольный -
//
&НаКлиенте
Процедура ЗагрузитьСегментыПартнеровИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьСегментыПартнеровИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСегментыПартнеровИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	СтрокиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл
		
		НоваяСтрока = Объект.СегментыПартнеров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		
		СтрокиДобавлены = Истина;
		
	КонецЦикла;
	
	Если СтрокиДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДетализацияПоКонтрагентуКлиенту(ДетализацияРасчетаУчастников)
	
	Возврат ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагентуКлиенту");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДетализацияПоКонтрагенту(ДетализацияРасчетаУчастников)
	
	Возврат ДетализацияРасчетаУчастников = ПредопределенноеЗначение("Перечисление.ДетализацияРасчетаУчастниковРетроБонусов.ПоКонтрагенту");
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовок()
	
	АвтоЗаголовок = Ложь;
	Заголовок = РетроБонусыСервер.ЗаголовокДокумента(
		Объект.Ссылка, Объект.Номер, Объект.Дата, Объект.Исправление);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВидуРетроБонуса(ТолькоКеш = Ложь)
	
	МассивРеквизитов = Новый Массив; // Массив Из Строка
	
	Если НЕ ТолькоКеш Тогда
		
		МассивРеквизитов.Добавить("БезРасчета");
		МассивРеквизитов.Добавить("ПериодичностьУсловий");
		МассивРеквизитов.Добавить("ПериодичностьНачислений");
		МассивРеквизитов.Добавить("ДетализацияРасчетаУчастников");
		МассивРеквизитов.Добавить("ОтборТоваров");
		МассивРеквизитов.Добавить("ОтборУчастников");
		
	КонецЕсли;
	
	МассивРеквизитов.Добавить("ПоказательПродаж");
	МассивРеквизитов.Добавить("БазаРасчетаПродаж");
	МассивРеквизитов.Добавить("СоставТоваров");
	МассивРеквизитов.Добавить("СоставУчастников");
	
	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидРетроБонуса, МассивРеквизитов);
	
	Если НЕ ТолькоКеш Тогда
		
		Объект.БезРасчета = РеквизитыВида.БезРасчета;
		Если НЕ Объект.БезРасчета Тогда
			
			Объект.НачислитьСразу = Ложь;
			
		КонецЕсли;
		
		Объект.ПериодичностьУсловий = РеквизитыВида.ПериодичностьУсловий;
		Объект.ПериодичностьНачислений = РеквизитыВида.ПериодичностьНачислений;
		Объект.ДетализацияРасчетаУчастников = РеквизитыВида.ДетализацияРасчетаУчастников;
		Объект.ОтборУчастников = РеквизитыВида.ОтборУчастников;
		Объект.ОтборТоваров = РеквизитыВида.ОтборТоваров;
		
	КонецЕсли;
	
	ПоказательПродаж = РеквизитыВида.ПоказательПродаж;
	БазаРасчетаПродаж = РеквизитыВида.БазаРасчетаПродаж;
	СоставТоваров = РеквизитыВида.СоставТоваров;
	СоставУчастников = РеквизитыВида.СоставУчастников;
	
	Если НЕ ТолькоКеш Тогда
		
		ОпределитьВалютуДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиРасчетаПланаУчастников(ИзмененныйУчастник = Неопределено)
	
	ПараметрыУчастников = Документы.УсловияРетроБонусовКлиентов.ПараметрыОчисткиРеквизитовУчастников();
	ПараметрыУчастников.СоставУчастников = СоставУчастников;
	ПараметрыУчастников.ОтборУчастников = Объект.ОтборУчастников;
	Документы.УсловияРетроБонусовКлиентов.УстановитьПризнакиРасчетаПланаУчастников(
		Объект, ПараметрыУчастников, ИзмененныйУчастник);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьВалютуДокумента()
	
	Если БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаРеглУчет
	   И НЕ Объект.Организация.Пустая() Тогда
		
		Объект.Валюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Объект.Организация);
		
	ИначеЕсли БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаУпрУчет Тогда
		
		Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
		
	ИначеЕсли БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены Тогда
		
		Объект.Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
		
	ИначеЕсли Объект.БезРасчета
			И ПолучитьФункциональнуюОпцию("НеИспользоватьНесколькоВалют") Тогда
		
		Объект.Валюта = Справочники.Валюты.ПолучитьВалютуПоУмолчанию();
		
	Иначе
		
		Объект.Валюта = Справочники.Валюты.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиПоВалюте()
	
	#Область СуммаПлан
	Если БазаРасчетаПродаж = Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаВзаиморасчеты
	 ИЛИ Объект.Валюта.Пустая() Тогда
		
		ЗаголовокСуммыПлан = НСтр("ru = 'Сумма, план'");
		
	Иначе
		
		ШаблонСуммыПлан = НСтр("ru = 'Сумма, план (%1)'");
		ЗаголовокСуммыПлан = СтрШаблон(ШаблонСуммыПлан, Объект.Валюта);
		
	КонецЕсли;
	
	Элементы.ИННКонтрагентовСуммаПлан.Заголовок = ЗаголовокСуммыПлан;
	Элементы.КонтрагентыСуммаПлан.Заголовок = ЗаголовокСуммыПлан;
	#КонецОбласти
	
	#Область СуммаБонус
	Если БезРасчета
	 ИЛИ Объект.Валюта.Пустая() Тогда
		
		ЗаголовокСуммыПлан = НСтр("ru = 'Сумма, бонус'");
		
	Иначе
		
		ШаблонСуммыПлан = НСтр("ru = 'Сумма, бонус (%1)'");
		ЗаголовокСуммыПлан = СтрШаблон(ШаблонСуммыПлан, Объект.Валюта);
		
	КонецЕсли;
	
	Элементы.КонтрагентыСуммаБонус.Заголовок = ЗаголовокСуммыПлан;
	#КонецОбласти
	
	#Область БазоваяЦена
	Если БазаРасчетаПродаж <> Перечисления.БазыРасчетаПродажРетроБонусов.ВыручкаБазовыеЦены
	 ИЛИ Объект.Валюта.Пустая() Тогда
		
		ЗаголовокБазоваяЦена = НСтр("ru = 'Базовая цена'");
		
	Иначе
		
		ШаблонБазоваяЦена = НСтр("ru = 'Базовая цена (%1)'");
		ЗаголовокБазоваяЦена = СтрШаблон(ШаблонБазоваяЦена, Объект.Валюта);
		
	КонецЕсли;
	
	Элементы.ТоварыБазоваяЦена.Заголовок = ЗаголовокБазоваяЦена;
	#КонецОбласти
	
КонецПроцедуры

// Установить доступный список периодичности начислений
// 
// Параметры:
//  Форма - см. Документ.УсловияРетроБонусовКлиентов.Форма.ФормаДокумента
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступныйСписокПериодичностьНачислений(Форма)
	
	Объект = Форма.Объект;
	
	ПараметрыОтбора = РетроБонусыКлиентСервер.НовыеПараметрыДоступныхПериодичностейНачислений();
	ПараметрыОтбора.ПериодичностьУсловий = Объект.ПериодичностьУсловий;
	ПараметрыОтбора.ПоказательПродаж = Форма.ПоказательПродаж;
	
	МассивВыбора = РетроБонусыКлиентСервер.ДоступныйСписокПериодичностьНачислений(ПараметрыОтбора);
	Форма.Элементы.ПериодичностьНачислений.СписокВыбора.ЗагрузитьЗначения(МассивВыбора);
	РетроБонусыКлиентСервер.ПроверитьУстановитьЗначениеСпискаВыбора(Объект, "ПериодичностьНачислений", МассивВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуре()
	
	ПараметрыЗаполненияРеквизитов = Новый Структура;
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакХарактеристикиИспользуются",
		Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакТипНоменклатуры",
		Новый Структура("Номенклатура", "ТипНоменклатуры"));
	ПараметрыЗаполненияРеквизитов.Вставить(
		"ЗаполнитьПризнакАртикул",
		Новый Структура("Номенклатура", "Артикул"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары, ПараметрыЗаполненияРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыСоглашенийДоговоров()
	
	Если СоставУчастников = Перечисления.СоставыУчастниковРетроБонусов.Соглашения Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьПризнакСоглашенияВСтрокеТЧ", "Соглашение");
		
		ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.ДоговорыСоглашения, СтруктураДействий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакНаличияНачислений()
	
	Если Объект.ИсправляемыйДокумент.Пустая() Тогда
		
		Если Объект.Ссылка.Пустая()
		 ИЛИ Объект.НачислитьСразу Тогда
			
			ЕстьНачисления = Ложь;
			
		Иначе
			
			МаксимальнаяДата = РетроБонусыСервер.ГраницаНачисленийКлиентов(Объект.Ссылка);
			ЕстьНачисления = (МаксимальнаяДата <> Дата(1, 1, 1));
			
		КонецЕсли;
		
	Иначе
		
		МаксимальнаяДата = РетроБонусыСервер.ГраницаНачисленийКлиентов(Объект.ИсправляемыйДокумент);
		ЕстьНачисления = (МаксимальнаяДата <> Дата(1, 1, 1));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеПоследнейКорректировки()
	
	ЕстьКорректировкаНаСогласовании = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		
		ЕстьКорректировкаНаСогласовании = РетроБонусыСервер.ЕстьКорректировкаНаСогласовании(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередФиксациейСегментов()
	
	ЗаполнитьДанныеПоследнейКорректировки();
	Если ЕстьКорректировкаНаСогласовании Тогда
		
		УстановитьЗаголовкиДекорацийСГиперссылками();
		
	КонецЕсли;
	ЗаполнитьРеквизитыСегментовПоУсловию();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПередОтменойФиксацииСегментов()
	
	ЗаполнитьПризнакНаличияНачислений();
	Если ЕстьНачисления Тогда
		УстановитьЗаголовкиДекорацийСГиперссылками();
	КонецЕсли;
	ЗаполнитьРеквизитыСегментовПоУсловию();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьСуммыПлановСтрокой(Форма)
	
	Форма.СуммаПланСтрокой = Формат(Форма.Объект.СуммаПлан, "ЧДЦ=2; ЧН=-;");
	
	ШаблонСуммы = "<%1>";
	Форма.СуммаПланСтрокойНеизменный = СтрШаблон(ШаблонСуммы, Форма.СуммаПланСтрокой);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПартнерыСтатическогоСегмента(Сегмент)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПартнерыСегмента.Партнер КАК Партнер
	|ИЗ
	|	РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
	|ГДЕ
	|	ПартнерыСегмента.Сегмент = &Сегмент
	|	И ПартнерыСегмента.Партнер.Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПартнерыДинамическогоСегмента(Сегмент)
	
	ДанныеСегмента = ТаблицаДинамическогоСегментаПартнеров(Сегмент);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДанныеСегмента.ЭлементСписка КАК Справочник.Партнеры) КАК Партнер
	|ПОМЕСТИТЬ ВТ_ПартнерыСегментов
	|ИЗ
	|	&ДанныеСегмента КАК ДанныеСегмента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПартнерыСегментов.Партнер КАК Партнер
	|ИЗ
	|	ВТ_ПартнерыСегментов КАК ПартнерыСегментов
	|ГДЕ
	|	ПартнерыСегментов.Партнер.Клиент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Партнер";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеСегмента", ДанныеСегмента);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Параметры:
//  Сегмент - СправочникСсылка.СегментыПартнеров
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлементСписка - СправочникСсылка.Партнеры
//
&НаСервереБезКонтекста
Функция ТаблицаДинамическогоСегментаПартнеров(Сегмент)
	
	ТаблицаСегмента = СегментыСервер.СписокЭлементовСКД(Сегмент);
	Возврат ТаблицаСегмента;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТоварыСтатическогоСегмента(Сегмент)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НоменклатураСегмента.Номенклатура КАК Номенклатура,
	|	НоменклатураСегмента.Характеристика КАК Характеристика
	|ИЗ
	|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|ГДЕ
	|	НоменклатураСегмента.Сегмент = &Сегмент
	|	И НоменклатураСегмента.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Сегмент", Сегмент);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТоварыДинамическогоСегмента(Сегмент)
	
	ДанныеСегмента = ТаблицаДинамическогоСегментаНоменклатуры(Сегмент);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ДанныеСегмента.ЭлементСписка КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ДанныеСегмента.ХарактеристикаЭлемента КАК Характеристика
	|ПОМЕСТИТЬ ВТ_НоменклатураСегментов
	|ИЗ
	|	&ДанныеСегмента КАК ДанныеСегмента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_НоменклатураСегментов.Номенклатура КАК Номенклатура,
	|	ВТ_НоменклатураСегментов.Характеристика КАК Характеристика
	|ИЗ
	|	ВТ_НоменклатураСегментов КАК ВТ_НоменклатураСегментов
	|ГДЕ
	|	ВТ_НоменклатураСегментов.Номенклатура.ТипНоменклатуры В (&ПоддерживаемыеТипыНоменклатуры)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Характеристика";
	
	ТипыНоменклатуры = РетроБонусыСервер.ПоддерживаемыеТипыНоменклатуры();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ДанныеСегмента", ДанныеСегмента);
	Запрос.УстановитьПараметр("ПоддерживаемыеТипыНоменклатуры", ТипыНоменклатуры);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

// Параметры:
//  Сегмент - СправочникСсылка.СегментыНоменклатуры
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//  * ЭлементСписка - СправочникСсылка.Номенклатура
//  * ХарактеристикаЭлемента - СправочникСсылка.ХарактеристикиНоменклатуры
//
&НаСервереБезКонтекста
Функция ТаблицаДинамическогоСегментаНоменклатуры(Сегмент)
	
	ТаблицаСегмента = СегментыСервер.СписокЭлементовСКД(Сегмент);
	Возврат ТаблицаСегмента;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды

// Подключаемый продолжить выполнение команды на сервере.
// 
// Параметры:
//  ПараметрыВыполнения - Структура -
//  ДополнительныеПараметры - Структура -
//
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СтандартныеПодсистемы_Свойства

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#КонецОбласти