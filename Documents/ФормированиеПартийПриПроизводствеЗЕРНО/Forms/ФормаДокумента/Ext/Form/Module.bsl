#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеФормированиеПартииПриПроизводствеЗЕРНО.Тип;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Характеристика", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "Серия", "Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "Серия", "Характеристика");
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "СырьеХарактеристика", "Элементы.Сырье.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, "СырьеСерия", "Элементы.Сырье.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(
		ЭтотОбъект, "СырьеСерия", "Элементы.Сырье.ТекущиеДанные.Характеристика");
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
	ПрименитьУсловноеОформлениеХарактеристикаСерия();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
		Отбор = Новый Структура("Партия", ВыбранноеЗначение.Партия);
		НайденныеСтроки = Объект.Сырье.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Сырье.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыбранноеЗначение);
			ОбновитьДанные(
				НоваяСтрока.Партия,
				Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеПартия", НоваяСтрока.ПолучитьИдентификатор()));
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий, ЭтотОбъект);
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	// РаботаСПолямимСоставногоТипа
	Если ВРег(Лев(ИмяСобытия, 6)) = "ЗАПИСЬ" Тогда
		СобытияФормИСКлиент.ПолеСоставногоТипаОбработатьИзменениеДанных(ЭтотОбъект, Источник);
	КонецЕсли;
	// Конец РаботаСПолямимСоставногоТипа
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если Не Отказ Тогда
		СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
		ЗаполнитьЗначенияСвойств(Объект, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	МассивНепроверяемыхРеквизитов.Добавить("Характеристика");
	МассивНепроверяемыхРеквизитов.Добавить("Серия");
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ОбновитьПодсказкуВводаТоваропроизводитель(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ОбновитьПодсказкуВводаПодразделения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПартииПриИзменении(Элемент)
	ОбновитьДанные(Объект.НазначениеПартии, Новый Структура("ИмяПоля", "НазначениеПартии"));
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойПриИзменении(Элемент)
	ПолеСоставногоТипаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойОткрытие(Элемент, СтандартнаяОбработка)
	ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ОпределитьТипОрганизацияКонтрагент(ТипТоваропроизводителя, Объект.Товаропроизводитель);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Товаропроизводитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоваропроизводительСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПолеСоставногоТипаАвтоПодбор(Элемент, Элемент.ТекстРедактирования, ДанныеВыбора, Неопределено, 0, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтранаНазначенияПриИзменении(Элемент)
	ОбновитьДанные(Объект.НазначениеПартии, Новый Структура("ИмяПоля", "СтранаНазначения"));
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(Элемент, ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	
	ОбновитьДанные(Номенклатура, Новый Структура("ИмяПоля", "Номенклатура"));
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, Объект, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	
	ОбновитьДанные(Характеристика, Новый Структура("ИмяПоля", "Характеристика"));
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении(Элемент)
	
	ОбновитьДанные(Серия, Новый Структура("ИмяПоля", "Серия"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ОКПД2Представление) Тогда
		ОКПД2 = "";
	КонецЕсли;
	ОбновитьДанные(ОКПД2, Новый Структура("ИмяПоля", "ОКПД2"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеПартии = Новый Структура;
	ДанныеПартии.Вставить("ОКПД2", ОКПД2);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ВидПродукции",ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораОКПД2(ЭтотОбъект, ДанныеПартии, Элемент, ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОКПД2 = ВыбранноеЗначение.Код;
	ОКПД2Представление = ВыбранноеЗначение.Представление;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
	СобытияФормЗерноКлиент.ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
	СобытияФормЗЕРНОКлиент.ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДанныеПартии = Новый Структура;
	ДанныеПартии.Вставить("ОКПД2", ОКПД2);
	ДанныеПартии.Вставить("КодТНВЭД", КодТНВЭД);
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораТНВЭД(ЭтотОбъект, ДанныеПартии, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.КодТНВЭДАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура КодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СобытияФормЗерноКлиент.КодТНВЭДОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, Объект, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЗЕРНОПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, Объект, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеПриИзменении(Элемент)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаПриИзменении(ЭтотОбъект, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура МестоположениеОчистка(Элемент, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Массив;
	ДополнительныеПоля.Добавить("СкладКонтрагент");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОчистка(ЭтотОбъект, Элемент, СтандартнаяОбработка, ДополнительныеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаНачалоВыбора(ЭтотОбъект, Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДополнительныеПоля = Новый Соответствие;
	ДополнительныеПоля.Вставить("СкладКонтрагент", "ВладелецАдреса");
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОбработкаВыбора(
		ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ДополнительныеПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура МестоположениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаАвтоПодбор(ЭтотОбъект, "СкладКонтрагентЗЕРНО",
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусЗЕРНОПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий при производстве ЗЕРНО"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партий при производстве ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСырье

&НаКлиенте
Процедура СырьеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно Тогда
		СобытияФормЗЕРНОКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.Сырье.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.СырьеКодТНВЭД Тогда
		ИнтеграцияЗЕРНОКлиентСервер.ОбновитьСписокВыбораКодаТНВЭД(ЭтотОбъект, Элементы.Сырье.ТекущиеДанные.ОКПД2, "СырьеКодТНВЭД");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидыПродукции = Новый Массив;
	
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна"));
	ВидыПродукции.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Зерно"));
	
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(Элемент, ВидыПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Сырье.ТекущиеДанные.Номенклатура,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеНоменклатура", Элементы.Сырье.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Сырье.ТекущиеДанные.Характеристика,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеХарактеристика", Элементы.Сырье.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка, Элементы.Сырье.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Сырье.ТекущиеДанные.Серия,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеСерия", Элементы.Сырье.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеОКПД2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораОКПД2(ЭтотОбъект, ТекущиеДанные, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеОКПД2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ТекущиеДанные.ОКПД2Представление = "";
	КонецЕсли;
	
	ОбновитьДанные(
		Элементы.Сырье.ТекущиеДанные.ОКПД2,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеОКПД2", Элементы.Сырье.ТекущиеДанные.ПолучитьИдентификатор()));
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеОКПД2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ОКПД2 = ВыбранноеЗначение.Код;
	ТекущиеДанные.ОКПД2Представление = ВыбранноеЗначение.Представление;
	
	ВыбранноеЗначение = ВыбранноеЗначение.Код;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
	СобытияФормЗерноКлиент.ОКПД2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродуктыПереработкиЗерна");
	СобытияФормЗЕРНОКлиент.ОКПД2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКодТНВЭДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиент.ОткрытьФормуПодбораТНВЭД(ЭтотОбъект, ТекущиеДанные, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКодТНВЭДАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиент.КодТНВЭДАвтоПодбор(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКодТНВЭДОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗерноКлиент.КодТНВЭДОкончаниеВводаТекста(
		ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, ТекущиеДанные.ОКПД2);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличество();
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеКоличествоЗЕРНОПриИзменении(Элемент)
	
	ПриИзмененииКоличествоЗЕРНО();
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПартияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ПараметрыФормы.ЗакрыватьПриВыборе = Истина;
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПартияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.РеестрПартийЗЕРНО") Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияЗЕРНОКлиентСервер.ЭтоВыборПартииЗЕРНО(ВыбранноеЗначение) Тогда
		
		ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
		ВыбранноеЗначение.Удалить("Операция");
		ВыбранноеЗначение.Удалить("КоличествоОстатокПартииЗЕРНО");
		ВыбранноеЗначение.Удалить("ЦельИспользования");
		
		Если ТекущиеДанные.КоличествоЗЕРНО > ВыбранноеЗначение.КоличествоЗЕРНО Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборПартии", ЭтотОбъект, ТекущиеДанные);
			СобытияФормЗЕРНОКлиент.ОбработатьВыборПартииСНедостаткомКоличества(
				Объект.Сырье, ВыбранноеЗначение, ТекущиеДанные, ОписаниеОповещения);
		Иначе
			ОбработатьВыборПартии(ВыбранноеЗначение, ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПартияПриИзменении(Элемент)
	
	ВыбраннаяПартия = Элементы.Сырье.ТекущиеДанные.Партия;
	ПараметрыОбновления = Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеПартияИзменение", Элементы.Сырье.ТекущиеДанные.ПолучитьИдентификатор());
	ОбновитьДанные(ВыбраннаяПартия, ПараметрыОбновления);
	
КонецПроцедуры

&НаКлиенте
Процедура СырьеПартияОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Сырье.ТекущиеДанные.КоличествоЗЕРНО = 0;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПотребительскиеСвойства

&НаКлиенте
Процедура ПотребительскиеСвойстваПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ПотребительскиеСвойства.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ПотребительскиеСвойстваЗначение Тогда
		ТекущиеДанные = Элементы.ПотребительскиеСвойства.ТекущиеДанные;
		ИнтеграцияЗЕРНОКлиент.НастроитьТипЗначенияПотребительскогоСвойства(
			ЭтотОбъект,
			Элемент.ТекущийЭлемент,
			ТекущиеДанные.ПотребительскоеСвойство,
			ТекущиеДанные.Значение,
			ОКПД2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ФормированиеПартийПриПроизводствеЗЕРНО.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборПартии(Команда)
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиент.ПараметрыФормыПодбораПартий();
	ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы);
	
	ОткрытьФорму("РегистрНакопления.ОстаткиПартийЗЕРНО.Форма.ФормаОстатков",
		ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияЗЕРНОКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПартии(Команда)
	
	ОчиститьСообщения();
	
	Если Не (СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована")
		Или СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи")) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование партии невозможно'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ВопросАннулированиеПартииЗавершение",
			ЭтотОбъект,
			Объект.Партия);
		ТекстВопроса = НСтр("ru = 'Документ ""Формирование партии из партий ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СтрокиТекстаВопроса = Новый Массив();
		
		СтрокиТекстаВопроса.Добавить(
			СтрШаблон(НСтр("ru = 'Аннулировать сформированную партию %1 ?'"), Объект.Партия));
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ПодтверждениеАннулированияПартииЗавершение",
			ЭтотОбъект,
			Объект.Партия);
		
		ТекстВопроса = СтрСоединить(СтрокиТекстаВопроса, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПартии(Команда)
	
	ВыполнитьКомандуЗаполнитьПартии();
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьСвойстваПартии(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	Если ЗначениеЗаполнено(Объект.Товаропроизводитель) Тогда
		ПараметрыФормы.Вставить("ВладелецПартии", Объект.Товаропроизводитель);
	Иначе
		ПараметрыФормы.Вставить("ВладелецПартии", Объект.Организация);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		ПараметрыФормы.Вставить("ОКПД2", ОКПД2);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.РеестрПартийЗЕРНО.Форма.ФормаВыбора",
		ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ВыборПартииЗавершение", ЭтотОбъект)
		, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ПараметрыРазбиенияСтроки = СобытияФормИСКлиент.ПараметрыРазбиенияСтроки(ТекущиеДанные.Количество);
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "Количество";
	
	СобытияФормИСКлиент.РазбитьСтрокуТабличнойЧасти(Объект.Сырье, Элементы.Сырье, ПараметрыРазбиенияСтроки, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект, "СырьеХарактеристика","Объект.Сырье.ХарактеристикиИспользуются");
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект, "СырьеСерия", "Объект.Сырье.СтатусУказанияСерий", "Объект.Сырье.ТипНоменклатуры");
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(ЭтотОбъект, "СырьеКоличество", "Объект.Сырье.Номенклатура");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект, "Характеристика", "ХарактеристикиИспользуются"); 
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект, "Серия", "СтатусУказанияСерий", "ТипНоменклатуры");
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(
		ЭтотОбъект, "Количество");
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеОКПД2(ЭтотОбъект, "СырьеОКПД2", "Объект.Сырье.ОКПД2Представление");
	
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойства(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеПотребительскогоСвойстваДиапазон(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьУсловноеОформлениеХарактеристикаСерия(СписокРеквизитов = "")
	
	Если Не ЗначениеЗаполнено(СписокРеквизитов) Тогда
		СписокРеквизитов = "Характеристика, Серия";
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	Для Каждого СвойствоСтруктуры Из СтруктураРеквизитов Цикл
		СобытияФормИС.ПрименитьУсловноеОформлениеКПолю(ЭтотОбъект, СвойствоСтруктуры.Ключ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнтеграцияЗЕРНО.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ФормированиеПартийПриПроизводствеЗЕРНО);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ФормированиеПартийПриПроизводствеЗЕРНО);
	
	ЕдиницаИзмеренияКилограмм = ИнтеграцияИСКлиентСерверПовтИсп.ЕдиницаИзмеренияКилограмм();
	
	ПодразделенияИспользуются = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	ЗаполнитьДоступныеЦелиИспользования(ЭтотОбъект);
	ЗаполнитьНазначениеПартии(ЭтотОбъект);
	
	ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Сырье);
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	ИнициализироватьСлужебныеРеквизиты();
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна, "Номенклатура");
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(
		ЭтотОбъект, ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции(), "СырьеНоменклатура");
	
	ТипТоваропроизводителя = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(Объект.Товаропроизводитель);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	ОбновитьПодсказкуВводаТоваропроизводитель(ЭтотОбъект);
	
	// СтандартныеПодсистемы.КонтактнаяИнформаци
	ИнициализироватьПоляКонтактнойИнформации();
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// РаботаСПолямимСоставногоТипа
	СобытияФормИС.ПоляСоставногоТипаИнициализация(ЭтотОбъект, ИменаЭлементовПолейСоставногоТипа());
	// Конец РаботаСПолямимСоставногоТипа
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДоступныеЦелиИспользования(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ЦельИспользования.СписокВыбора.Очистить();
	Элементы.ЦельИспользования.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ЦельИспользованияПартииКормовые"));
	Элементы.ЦельИспользования.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.ЦельИспользованияПартииПищевые"));
	Элементы.ЦельИспользования.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьНазначениеПартии(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.НазначениеПартии.СписокВыбора.Очистить();
	Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ"));
	Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииПереработка"));
	Элементы.НазначениеПартии.СписокВыбора.Добавить(ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииХранениеОбработка"));
	
	Элементы.НазначениеПартии.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСлужебныхРеквизитыФормыДляСинхронизации()
	
	Результат = Новый Массив;
	Результат.Добавить("Номенклатура");
	Результат.Добавить("Характеристика");
	Результат.Добавить("Серия");
	Результат.Добавить("ОКПД2");
	Результат.Добавить("КодТНВЭД");
	Результат.Добавить("СтатусУказанияСерий");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазначениеПартии")
		Или Инициализация Тогда
		
		ЭтоВывозСТерриторииРФ = Объект.НазначениеПартии = ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ");
		Элементы.СтранаНазначения.Видимость = ЭтоВывозСТерриторииРФ;
		Элементы.КодТНВЭД.Видимость         = ЭтоВывозСТерриторииРФ;
		Элементы.СырьеКодТНВЭД.Видимость    = ЭтоВывозСТерриторииРФ;
		
		СтруктураРеквизитов.Вставить("ОКПД2");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		Или Инициализация Тогда
		
		Элементы.Подразделение.Видимость                    = Форма.ПодразделенияИспользуются;
		Элементы.ПодразделениеТоваропроизводителя.Видимость = Форма.ПодразделенияИспользуются
			И Форма.ТипТоваропроизводителя = 0;
		
		ОбновитьПодсказкуВводаПодразделения(Форма);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Номенклатура")
		Или Инициализация Тогда
		
		НоменклатураЗаполнена = ЗначениеЗаполнено(Форма.Номенклатура);
		Элементы.Количество.АвтоОтметкаНезаполненного = НоменклатураЗаполнена;
		Элементы.Количество.ТолькоПросмотр            = Не НоменклатураЗаполнена;
		
		СтруктураРеквизитов.Вставить("ОКПД2");
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ОКПД2")
		Или Инициализация Тогда
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			Элементы.КодТНВЭД.Доступность = ЗначениеЗаполнено(Форма.ОКПД2);
			
			Если ЗначениеЗаполнено(Форма.ОКПД2) Тогда
				ИнтеграцияЗЕРНОКлиентСервер.ОбновитьСписокВыбораКодаТНВЭД(Форма, Форма.ОКПД2, "КодТНВЭД", Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ПотребительскиеСвойстваСкопироватьСвойстваПартии.Доступность = ЗначениеЗаполнено(Форма.ОКПД2);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СтатусЗЕРНО") Тогда
		
		РедактированиеФормыНеДоступно = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи");
		
		Форма.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
		
		Элементы.ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
		Элементы.СтраницаСырье.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
		Элементы.СтраницаПродукция.ТолькоПросмотр = Форма.РедактированиеФормыНеДоступно;
		Элементы.КоманднаяПанельСырье.Доступность = Не Форма.РедактированиеФормыНеДоступно;
		
		Элементы.АннулироватьПартии.Видимость =
			Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.ПартияСформирована")
			Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиФормированиеПартийЗЕРНО.АннулированиеПартииОшибкаПередачи")
		
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ОбновитьСтатусЗЕРНО") Тогда
		
		УстановитьПараметрыОбновленияСтатуса = Форма.Модифицированность И НЕ Инициализация;
		ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию()
	
	ОчиститьСообщения();
	
	ПерезаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

#Область РаботаСАдресами

&НаСервере
Процедура ИнициализироватьПоляКонтактнойИнформации()
	
	ВидКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	// Считываем данные из полей адреса в реквизиты для редактирования.
	КомментарийМестоположение = ОбщегоНазначенияИС.КомментарийКонтактнойИнформации(
		Объект.Местоположение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеАдресаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормЗЕРНОКлиент.ПолеАдресаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусЗЕРНО(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросАннулированиеПартииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ПодтверждениеАннулированияПартииЗавершение(РезультатВопроса, Объект.Партия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеАннулированияПартииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.Организация        = Объект.Организация;
	ПараметрыПередачи.Подразделение      = Объект.Подразделение;
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию");
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка        = Объект.Ссылка;
		ПараметрыПередачи.Организация   = Объект.Организация;
		ПараметрыПередачи.Подразделение = Объект.Подразделение;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	
	КонецЕсли;
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса = Ложь)
	
	Объект   = Форма.Объект;
	
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(Объект);
	
	Форма.СтатусЗЕРНО = ПараметрыСтатуса.СтатусЗЕРНО;
	Форма.СтатусЗЕРНОПредставление = ПараметрыСтатуса.СтатусЗЕРНОПредставление;
	Форма.РедактированиеФормыНеДоступно = ПараметрыСтатуса.РедактированиеФормыНеДоступно;
	
	НастроитьЗависимыеЭлементыФормы(Форма, "СтатусЗЕРНО");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЗЕРНО");
	Результат.Вставить("СтатусЗЕРНОПредставление");
	Результат.Вставить("РедактированиеФормыНеДоступно", Ложь);
	
	Ссылка = ДокументОбъект.Ссылка;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	
	СтатусЗЕРНО        = МенеджерОбъекта.СтатусПоУмолчанию();
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
		|ГДЕ
		|	Статусы.ОбъектСинхронизации = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЗЕРНО.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусЗЕРНО = Выборка.Статус;
			
			ДальнейшееДействие = Новый Массив;
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
			ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеПередачуДанных);
	
	СтатусЗЕРНОПредставление = ИнтеграцияЗЕРНО.ПредставлениеСтатуса(СтатусЗЕРНО, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусЗЕРНО <> Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.Черновик
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиФормированиеПартийЗЕРНО.ФормированиеПартииОшибкаПередачи;
	
	Результат.СтатусЗЕРНО                   = СтатусЗЕРНО;
	Результат.СтатусЗЕРНОПредставление      = СтатусЗЕРНОПредставление;
	Результат.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизиты()
	
	СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Объект, СтрСоединить(СлужебныеРеквизиты, ","));
	
	КодыОКПД2 = Объект.Сырье.Выгрузить(, "ОКПД2").ВыгрузитьКолонку("ОКПД2");
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		КодыОКПД2.Добавить(ОКПД2);
	КонецЕсли;
	
	КодыОКПД2 = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КодыОКПД2);
	
	ПустойОКПД2 = КодыОКПД2.Найти("");
	Если ПустойОКПД2 <> Неопределено Тогда
		КодыОКПД2.Удалить(ПустойОКПД2);
	КонецЕсли;
		
	Если КодыОКПД2.Количество() Тогда
		
		ТаблицаОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(КодыОКПД2);
		
		Если ЗначениеЗаполнено(ОКПД2) Тогда
			
			ДанныеОКПД2 = ТаблицаОКПД2.Найти(ОКПД2);
			Если ДанныеОКПД2 <> Неопределено Тогда
				ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
					ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
			КонецЕсли;
			
			ИнициализироватьТип = Объект.Ссылка.Пустая() Или Модифицированность;
			ИнтеграцияЗЕРНО.ИнициализироватьСлужебныеРеквизитыПотребительскихСвойств(ЭтотОбъект, ОКПД2, ИнициализироватьТип);
			
		КонецЕсли;
		
		ИнтеграцияЗЕРНО.ИнициализироватьКэшВидовСельхозКультур(ЭтотОбъект, КодыОКПД2);
		
		Для Каждого ТекущаяСтрока Из Объект.Сырье Цикл
			ДанныеОКПД2 = ТаблицаОКПД2.Найти(ТекущаяСтрока.ОКПД2);
			Если ДанныеОКПД2 <> Неопределено Тогда
				ТекущаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
					ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Партия) Тогда
		ПредставлениеПартия = Новый ФорматированнаяСтрока(
			Строка(Объект.Партия),,,, ПолучитьНавигационнуюСсылку(Объект.Партия));
	Иначе
		ПредставлениеПартия = Новый ФорматированнаяСтрока(
			НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(ИмяЦвета = "ЦветОсобогоТекста")
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля[ИмяЦвета];
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦвета);
	#КонецЕсли
	
КонецФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

#Область ПотребительскиеСвойства

#КонецОбласти

&НаСервере
Процедура ОбработкаРезультатаПодбораПартийНаСервере(Партия, ИзменяемаяСтрока)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Партия", Партия);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Остатки.Партия КАК Партия,
	|	КлючиПартийЗЕРНО.ОКПД2 КАК ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД КАК КодТНВЭД,
	|	МАКСИМУМ(Остатки.КоличествоЗЕРНООстаток - Остатки.ВОбработкеЗЕРНООстаток) КАК ДоступныйОстаток,
	|	МАКСИМУМ(ЕСТЬNULL(КлассификаторНСИ.Наименование, """"""""))               КАК ОКПД2Наименование,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Номенклатура, НЕОПРЕДЕЛЕНО))    КАК Номенклатура,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Характеристика, НЕОПРЕДЕЛЕНО))  КАК Характеристика,
	|	МАКСИМУМ(ЕСТЬNULL(СоответствиеПартийЗЕРНО.Серия, НЕОПРЕДЕЛЕНО))           КАК Серия
	|ИЗ
	|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В (&Партия)) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КлючиПартийЗЕРНО КАК КлючиПартийЗЕРНО
	|		ПО Остатки.Партия = КлючиПартийЗЕРНО.Партия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторНСИ
	|		ПО КлючиПартийЗЕРНО.ОКПД2 = КлассификаторНСИ.Идентификатор
	|		И КлассификаторНСИ.ВидКлассификатора = ЗНАЧЕНИЕ(Перечисление.ВидыКлассификаторовЗЕРНО.ОКПД2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеПартийЗЕРНО КАК СоответствиеПартийЗЕРНО
	|		ПО СоответствиеПартийЗЕРНО.Партия = Остатки.Партия
	|СГРУППИРОВАТЬ ПО
	|	Остатки.Партия,
	|	КлючиПартийЗЕРНО.ОКПД2,
	|	КлючиПартийЗЕРНО.КодТНВЭД";
	
	ТаблицаПодобранныхПартий = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПартии Из ТаблицаПодобранныхПартий Цикл
		
		ИзменяемаяСтрока.Партия = СтрокаПартии.Партия;
		Если ЗначениеЗаполнено(СтрокаПартии.Номенклатура) Тогда
			ИзменяемаяСтрока.Номенклатура = СтрокаПартии.Номенклатура;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПартии.Характеристика) Тогда
			ИзменяемаяСтрока.Характеристика = СтрокаПартии.Характеристика;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПартии.Серия) Тогда
			ИзменяемаяСтрока.Серия = СтрокаПартии.Серия;
		КонецЕсли;
		ИзменяемаяСтрока.ОКПД2 = СтрокаПартии.ОКПД2;
		ИзменяемаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
			СтрокаПартии.ОКПД2Наименование, СтрокаПартии.ОКПД2);
		ИзменяемаяСтрока.КодТНВЭД = СтрокаПартии.КодТНВЭД;
		ИзменяемаяСтрока.КоличествоЗЕРНО = СтрокаПартии.ДоступныйОстаток;
		
	КонецЦикла;
	
КонецПроцедуры

#Область ИзменениеДанных

&НаКлиенте
Функция СтруктураРеквизитовИзменяемыхНаСервере()
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СырьеПартия");
	СтруктураВозврата.Вставить("СырьеПартияИзменение");
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанные(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	ИмяОбновляемогоПоля = ДополнительныеПараметры.ИмяПоля;
	
	Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивПолейДляНастройки = Новый Массив;
	
	Если ИмяОбновляемогоПоля = "Номенклатура" Тогда
		
		ТекущийОКПД2 = ОКПД2;
		
		СобытияФормЗЕРНОКлиент.ПриИзмененииНоменклатурыВШапке(
			ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		Если ТекущийОКПД2 <> ОКПД2 Тогда
			ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ДополнительныеПараметры);
		КонецЕсли;
		
		СлужебныеРеквизиты = МассивСлужебныхРеквизитыФормыДляСинхронизации();
		ЗаполнитьЗначенияСвойств(Объект, ЭтотОбъект, СтрСоединить(СлужебныеРеквизиты, ","));
		
		Модифицированность = Истина;
		ДополнительныеПараметры.Вставить("ПрименитьУсловноеОформление");
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СырьеНоменклатура" Тогда
		
		ИзменяемаяСтрока = Элементы.Сырье.ТекущиеДанные;
		ТекущийОКПД2 = ИзменяемаяСтрока.ОКПД2;
		
		СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		Если ТекущийОКПД2 <> ОКПД2 Тогда
			ОКПД2ПриИзмененииНаКлиенте(ИзменяемаяСтрока.ОКПД2, ДополнительныеПараметры, ИзменяемаяСтрока);
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СырьеХарактеристика" Или ИмяОбновляемогоПоля = "Характеристика" Тогда
		
		Если ИмяОбновляемогоПоля = "Характеристика" Тогда
			
			СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииХарактеристики(
				ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения);
			
		Иначе
			
			ИзменяемаяСтрока = Элементы.Сырье.ТекущиеДанные;
			СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииХарактеристики(
				ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если (ИмяОбновляемогоПоля = "СырьеСерия" Или ИмяОбновляемогоПоля = "Серия")
		И ПараметрыУказанияСерий <> Неопределено Тогда
		
		Если ИмяОбновляемогоПоля = "Серия" Тогда
			
			СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииСерии(
				ЭтотОбъект, ЭтотОбъект, КэшированныеЗначения, ПараметрыУказанияСерий);
			
		Иначе
			
			ИзменяемаяСтрока = Элементы.Сырье.ТекущиеДанные;
			СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииСерии(
				ЭтотОбъект, ИзменяемаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "ОКПД2" Или ИмяОбновляемогоПоля = "СырьеОКПД2" Тогда
		
		ИзменяемаяСтрока = Неопределено;
		Если ИмяОбновляемогоПоля = "СырьеОКПД2" Тогда
			ИзменяемаяСтрока = Элементы.Сырье.ТекущиеДанные;
		КонецЕсли;
		
		ОКПД2ПриИзмененииНаКлиенте(Результат, ДополнительныеПараметры, ИзменяемаяСтрока);
		Модифицированность = Истина;
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "НазначениеПартии" Тогда
		
		Если Объект.НазначениеПартии <> ПредопределенноеЗначение("Справочник.КлассификаторНСИЗЕРНО.НазначениеПартииВывозСТерриторииРФ") Тогда
			Объект.СтранаНазначения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Истина);
		Иначе
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
		КонецЕсли;
		
		МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(ОКПД2, КодТНВЭД, ЭтотОбъект);
			Если НайденноеЗначениеТНВЭД = Неопределено Тогда
				ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
			Иначе
				КодТНВЭД = НайденноеЗначениеТНВЭД;
			КонецЕсли;
			
		Иначе
			
			КодТНВЭД = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СтранаНазначения" Тогда
		
		Если ЗначениеЗаполнено(Объект.СтранаНазначения) Тогда
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Истина);
		Иначе
			Объект.ПотребительскиеСвойства.Очистить();
			КэшПотребительскихСвойств.Очистить();
			МассивПолейДляНастройки.Добавить(ИмяОбновляемогоПоля);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПотребительскиеСвойства = Ложь;
	ОбновитьКэшВидовСельхозКультур  = Ложь;
	
	Если СтруктураРеквизитовИзменяемыхНаСервере().Свойство(ИмяОбновляемогоПоля)
		Или ДополнительныеПараметры.Свойство("ОбновитьПотребительскиеСвойства", ОбновитьПотребительскиеСвойства) И ОбновитьПотребительскиеСвойства
		Или ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур) И ОбновитьКэшВидовСельхозКультур
		Или ДополнительныеПараметры.Свойство("ПрименитьУсловноеОформление") Тогда
		ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения);
		Возврат;
	КонецЕсли;
	
	Если МассивПолейДляНастройки.Количество() Тогда
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СтрСоединить(МассивПолейДляНастройки, ","));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаСервере(Результат, ДополнительныеПараметры, КэшированныеЗначения)
	
	ИмяОбновляемогоПоля = ДополнительныеПараметры.ИмяПоля;
	
	Если ДополнительныеПараметры.Свойство("ПрименитьУсловноеОформление") Тогда
		ПрименитьУсловноеОформлениеХарактеристикаСерия();
	КонецЕсли;
	
	Если ИмяОбновляемогоПоля = "СырьеПартия" 
		Или ИмяОбновляемогоПоля = "СырьеПартияИзменение" Тогда
		
		ИзменяемаяСтрока = Объект.Сырье.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
		
		Если ИмяОбновляемогоПоля = "СырьеПартияИзменение" Тогда
			ОбработкаРезультатаПодбораПартийНаСервере(Результат, ИзменяемаяСтрока);
		КонецЕсли;
		
		ИнтеграцияЗЕРНО.ЗаполнитьСлужебныеРеквизитыНоменклатуры(ЭтотОбъект, ИзменяемаяСтрока);
		ИнтеграцияЗЕРНОПереопределяемый.ЗаполнитьКоличествоПоКоличествуЗЕРНО(ИзменяемаяСтрока);
		
		ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
		
	КонецЕсли;
	
	ОбновитьКэшВидовСельхозКультур = Ложь;
	Если ДополнительныеПараметры.Свойство("ОбновитьКэшВидовСельхозКультур", ОбновитьКэшВидовСельхозКультур)
		И ОбновитьКэшВидовСельхозКультур Тогда
		
		Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
			ТекущаяСтрока = Объект.Сырье.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторСтроки);
			ДанныеОКПД2 = ТекущаяСтрока.ОКПД2;
		Иначе
			ДанныеОКПД2 = ОКПД2;
		КонецЕсли;
		
		ТаблицаОКПД2ТНВЭД = РегистрыСведений.ВидыСельскохозяйственныхКультурЗЕРНО.ДанныеТНВЭДПоОКПД2(ДанныеОКПД2);
		ИнтеграцияЗЕРНО.ОбновитьКэшВидовСельхозКультур(ЭтотОбъект, ТаблицаОКПД2ТНВЭД);
		
		Если ДополнительныеПараметры.Свойство("ИдентификаторСтроки") Тогда
			ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(ТекущаяСтрока.КодТНВЭД, ТекущаяСтрока.ОКПД2, ТаблицаОКПД2ТНВЭД);
		Иначе
			ИнтеграцияЗЕРНО.ЗаполнитьТНВЭДПоВидуСельхозКультур(КодТНВЭД, ОКПД2, ТаблицаОКПД2ТНВЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ОбновитьПотребительскиеСвойства") Тогда
		
		Если ИмяОбновляемогоПоля = "Операция" Или ИмяОбновляемогоПоля = "НазначениеПартии"
			Или ИмяОбновляемогоПоля = "СтранаНазначения" Тогда
			КэшПотребительскихСвойств.Очистить();
		КонецЕсли;
		
		Объект.ПотребительскиеСвойства.Очистить();
		ПотребительскиеСвойства = ИнтеграцияЗЕРНО.ПотребительскиеСвойстваПродукцииПоДаннымОКПД2(
			ОКПД2, Объект.НазначениеПартии, , Объект.СтранаНазначения);
		Если ПотребительскиеСвойства <> Неопределено Тогда
			
			ИнтеграцияЗЕРНО.ОбновитьКэшПотребительскихСвойств(ЭтотОбъект, ПотребительскиеСвойства, ОКПД2);
			Для Каждого СтрокаПотребительскогоСвойства Из ПотребительскиеСвойства Цикл
				
				НоваяСтрока = Объект.ПотребительскиеСвойства.Добавить();
				ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьСтрокуПотребительскогоСвойства(ЭтотОбъект, НоваяСтрока, СтрокаПотребительскогоСвойства);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	МассивПолейДляНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяОбновляемогоПоля);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, СтрСоединить(МассивПолейДляНастройки, ","));
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОКПД2ПриИзмененииНаКлиенте(ОКПД2, ДополнительныеПараметры, ТекущаяСтрока = Неопределено)
	
	Если ЗначениеЗаполнено(ОКПД2) Тогда
		
		Если ТекущаяСтрока = Неопределено Тогда
			Объект.ПотребительскиеСвойства.Очистить();
			СвойстваЗаполненыПоДаннымКэша = ИнтеграцияЗЕРНОКлиентСервер.ЗаполнитьПотребительскиеСвойстваПоДаннымКеша(
				ЭтотОбъект, ОКПД2);
			ДополнительныеПараметры.Вставить("ОбновитьПотребительскиеСвойства", Не СвойстваЗаполненыПоДаннымКэша);
			ДанныеТНВЭД = КодТНВЭД;
		Иначе
			ДанныеТНВЭД = ТекущаяСтрока.КодТНВЭД;
		КонецЕсли;
		
		Если ИнтеграцияЗЕРНОКлиентСервер.ТребуетсяЗаполнениеКодаТНВЭД(Объект.НазначениеПартии) Тогда
			
			НайденноеЗначениеТНВЭД = ИнтеграцияЗЕРНОКлиент.КодТНВЭДПоДаннымКеша(ОКПД2, ДанныеТНВЭД, ЭтотОбъект);
			Если НайденноеЗначениеТНВЭД = Неопределено Тогда
				ДополнительныеПараметры.Вставить("ОбновитьКэшВидовСельхозКультур", Истина);
			Иначе
				Если ТекущаяСтрока = Неопределено Тогда
					КодТНВЭД = НайденноеЗначениеТНВЭД;
				Иначе
					ТекущаяСтрока.КодТНВЭД = НайденноеЗначениеТНВЭД;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ТекущаяСтрока = Неопределено Тогда
			Объект.ПотребительскиеСвойства.Очистить();
			КодТНВЭД = "";
			ОКПД2Представление = "";
		Иначе
			ТекущаяСтрока.КодТНВЭД = "";
			ТекущаяСтрока.ОКПД2Представление = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличество()
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличествоЗЕРНО()
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
		
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, НоваяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОпределитьТипОрганизацияКонтрагент(ТипВладельца, ОрганизацияКонтрагент)
	
	ТипВладельца = ИнтеграцияЗЕРНО.ОпределитьТипОрганизацияКонтрагент(ОрганизацияКонтрагент);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуВводаТоваропроизводитель(Форма)
	
	Форма.Элементы.ТоваропроизводительСтрокой.ПодсказкаВвода = Строка(Форма.Объект.Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПодсказкуВводаПодразделения(Форма)
	
	Если Форма.ПодразделенияИспользуются Тогда
		Если ЗначениеЗаполнено(Форма.Объект.Товаропроизводитель) Тогда
			Форма.Элементы.ПодразделениеТоваропроизводителя.ПодсказкаВвода = "";
		Иначе
			Форма.Элементы.ПодразделениеТоваропроизводителя.ПодсказкаВвода = Строка(Форма.Объект.Подразделение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиЗаполненияПартий

#Область ЗаполнитьПартии

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоШапкеДокумента(ПараметрыФормы)
	ПараметрыФормы.ОрганизацияВладелецПартии = Объект.Организация;
	ПараметрыФормы.ПодразделениеВладелецПартии = Объект.Подразделение;
	ПараметрыФормы.Грузоотправитель = Объект.СкладКонтрагент;
	ПараметрыФормы.ОрганизацияЭлеватор = ПредопределенноеЗначение("Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка");
	ПараметрыФормы.ЭтоЭкспорт = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтборПартийПоСтрокеДокумента(ПараметрыФормы)
	
	ТекущиеДанные = Элементы.Сырье.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
		ПараметрыФормы.ОКПД2 = ТекущиеДанные.ОКПД2;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	ПараметрыФормы.Номенклатура = ТекущиеДанные.Номенклатура;
	ПараметрыФормы.Характеристика = ТекущиеДанные.Характеристика;
	ПараметрыФормы.Серия = ТекущиеДанные.Серия;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьКомандуЗаполнитьПартии()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Организация""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"Объект.Организация",,
			Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СкладКонтрагент) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено местоположение производства'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			ТекстСообщения,
			Объект.Ссылка, 
			"СкладКонтрагент",,
			Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеПользователю = ЗаполнитьПартииНаСервере();
	
	ПоказатьОповещениеПользователя(
		СообщениеПользователю.ЗаголовокСообщения,,
		СообщениеПользователю.ТекстСообщения,
		СообщениеПользователю.КартинкаСообщения);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПартииНаСервере()
	
	СписокСтрок = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.Сырье.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Сырье.НайтиПоИдентификатору(ИдентификаторСтроки);
		СписокСтрок.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	РезультатЗаполнения = Документы.ФормированиеПартийПриПроизводствеЗЕРНО.ЗаполнитьПартии(Объект, СписокСтрок);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

#КонецОбласти

#Область ВыбратьПартию

&НаКлиенте
Процедура ОбработатьВыборПартии(ВыбранноеЗначение, ТекущиеДанные) Экспорт
	Перем КлючИЗначение;
	ТекущиеДанные.Партия = ВыбранноеЗначение.Партия;
	Для Каждого КлючИЗначение Из ВыбранноеЗначение Цикл 
		Если Не ЗначениеЗаполнено(ТекущиеДанные[КлючИЗначение.Ключ]) Тогда
			ТекущиеДанные[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанные(ВыбранноеЗначение,
		Новый Структура("ИмяПоля, ИдентификаторСтроки", "СырьеПартия", Элементы.Сырье.ТекущаяСтрока));
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СкопироватьПотребительскиеСвойства

&НаКлиенте
Процедура ВыборПартииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		СкопироватьПотребительскиеСвойстваПартииНаСервере(Результат);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПотребительскиеСвойстваПартииНаСервере(Результат)
	
	ИнтеграцияЗЕРНО.СкопироватьПотребительскиеСвойстваПартии(Результат, Объект.ПотребительскиеСвойства, КэшПотребительскихСвойств);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПолямимСоставногоТипа

&НаСервереБезКонтекста
Функция ИменаЭлементовПолейСоставногоТипа()
	
	Возврат "ТоваропроизводительСтрокой";
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииПолеСоставногоТипа(Элемент)
	
	Если Элемент.Имя = "ТоваропроизводительСтрокой" Тогда
		ОпределитьТипОрганизацияКонтрагент(ТипТоваропроизводителя, Объект.Товаропроизводитель);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Подразделение");
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОкончаниеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОкончаниеВыбора(ЭтотОбъект, Результат, ДополнительныеПараметры);
	Если Результат <> Неопределено Тогда
		Элемент = ДополнительныеПараметры.Элемент;
		ПриИзмененииПолеСоставногоТипа(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаПриИзменении(Элемент)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаПриИзменении(ЭтотОбъект, Элемент);
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОткрытие(Элемент, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОткрытие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаОбработкаВыбора(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ПриИзмененииПолеСоставногоТипа(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСоставногоТипаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ПолеСоставногоТипаАвтоПодбор(ЭтотОбъект,
		Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти