#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ИнтеграцияИСМП.ЗапрещеноИспользованиеОбъектаВИСМП(Объект.Ссылка) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеОтгрузкаТоваровИСМП.Тип;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ДоступныеВидыПродукцииИС = Документы.ОтгрузкаТоваровИСМП.ДоступныеВидыПродукцииИСМП();
	
	СобытияФормИСМП.НастроитьВидПродукцииПриСозданииНаСервере(ЭтотОбъект, ДоступныеВидыПродукцииИС);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыУпаковка");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	ПоддерживаемыеТипыПодключаемогоОборудования = "СканерШтрихкода";
	ИнтеграцияИС.НастроитьПодключаемоеОборудование(ЭтотОбъект, ПоддерживаемыеТипыПодключаемогоОборудования);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	// Режим отладки
	Элементы.СтраницаШтрихкодыУпаковок.Видимость = ОбщегоНазначения.РежимОтладки() И Пользователи.ЭтоПолноправныйПользователь();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОповещениеПриПодключении = Новый ОписаниеОповещения("ПодключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(
		ОповещениеПриПодключении,
		ЭтотОбъект,
		ПоддерживаемыеТипыПодключаемогоОборудования);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	ОповещениеПриОтключении = Новый ОписаниеОповещения("ОтключитьОборудованиеЗавершение", ЭтотОбъект);
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(ОповещениеПриОтключении, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияИСМПСлужебныйКлиент.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПерейтиКСтрокеОшибки" И Источник = "Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки" Тогда
		ТекущийЭлемент = Элементы.Товары;
		Элементы.Товары.ТекущаяСтрока = Параметр;
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВидПродукцииУказан()
		Или РедактированиеФормыНедоступно
		Или Не ПравоИзменения
		Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСоСканераСтруктура = СобытияФормИСКлиент.ВнешнееСобытиеПреобразоватьДанныеСоСканераВСтруктуру(ЭтотОбъект, Источник, Событие, Данные);
	Если ДанныеСоСканераСтруктура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьКодМаркировки(ДанныеСоСканераСтруктура);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ШтрихкодированиеОбщегоНазначенияИС.СохранитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	Если Не РедактированиеФормыНедоступно Тогда
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	ЗаполнитьПредставлениеСертификацииИмпорта();
	ОбновитьПредставленияНаФорме();
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормИСМПКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	Если ИнтеграцияИСКлиент.ЭтоЗагрузкаКодовМаркировки(ИсточникВыбора, ЭтотОбъект) Тогда
		//Формат загрузки из внешнего файла полностью соответствует формату загрузки из ТСД
		Подключаемый_ПолученыДанныеИзТСД(ВыбранноеЗначение, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияИСМПКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Отгрузка товаров ИС МП"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
		                                                    ЭтотОбъект,
		                                                    Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = '""Отгрузка товаров ИС МП"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОтсканироватьПроверитьМаркируемуюПродукциюОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПроверкаИПодборПродукцииИСМПКлиент.ОткрытьФормуПроверкиИПодбора(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	ПриИзмененииВидПродукцииНаСервере();
	
	СобытияФормИСМПКлиент.ВидПродукцииПриИзменении(ЭтотОбъект, Элемент);
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары
		                        |и связанные с ней штрихкоды упаковок будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидаПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации отсканированные коды маркировки будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацияПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ПриИзмененииОперацииНаСервере();
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "Операция");
	НастроитьЭлементыФормы(ЭтотОбъект);
	
	ОчиститьЗависимыеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыводаИзОборотаПриИзменении(Элемент)
	
	КонтрольДатыВыводаИзОборота();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПервичногоДокументаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(объект.ДатаВыводаИзОборота) Тогда
		КонтрольДатыВыводаИзОборота();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеGLNКонтрагентаПриОтгрузкеТоваров(Объект.Операция) Тогда
		Объект.GLNКонтрагента = ЗаполнитьGLNКонтрагентаПоСтатистике(Объект.Контрагент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыСертификация Тогда
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ТоварыДанныеИмпорта Тогда
		НастройкиРаботыССертификацией = ИнтеграцияИСМПКлиент.НастройкиРаботыССертификацией(
			"КэшДанныхИмпорта",
			"ТоварыДанныеИмпорта");
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект, НастройкиРаботыССертификацией);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеФормыНедоступно
		Или Не ПравоИзменения
		Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(ЭтотОбъект) Тогда
		СобытияФормИСМПКлиент.ВыборЭлементаТабличнойЧастиОткрытьФормуЭлемента(ЭтотОбъект, Элемент, Поле);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СобытияФормИСКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(Элемент, Объект.ВидПродукции, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(ТребуетсяОбновитьКэшУпаковок, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСтавкиНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммы(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСуммыНДС(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ДанныеКешаСтроки.Номенклатура   = ТекущиеДанные.Номенклатура;
	ДанныеКешаСтроки.Характеристика = ТекущиеДанные.Характеристика;
	ДанныеКешаСтроки.Серия          = ТекущиеДанные.Серия;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	ТоварыПослеУдаленияСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
	ТребуетсяОбновитьКэшУпаковок = ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(
		ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
	ТоварыНоменклатураХарактеристикаПриИзмененииСервер(ТребуетсяОбновитьКэшУпаковок, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыGTINНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Элемент.СписокВыбора.ЗагрузитьЗначения(
		МассивЗначенийGTINДляВыбора(Элементы.Товары.ТекущаяСтрока));
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ПроверкаИПодборПродукцииИСКлиент.ПрименитьКешПоСтроке(ЭтотОбъект, Объект.Товары, ТекущиеДанные, ДанныеКешаСтроки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ИнициализироватьКэшСтроки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормИСМПКлиентПереопределяемый.ПриИзмененииЦены(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДанныеИмпортаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИдентификаторыСтрок = Новый Массив;
	ИдентификаторыСтрок.Добавить(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор());
	ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок, "ДанныеИмпорта");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСертификацияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.Сертификация) Тогда
		ТекущиеДанные.ВидДокументаСертификации   = ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
		ТекущиеДанные.НомерДокументаСертификации = "";
		ТекущиеДанные.ДатаДокументаСертификации  = '00010101';
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.Сертификация);
	НайденныеСтроки = КэшСертификации.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.ВидДокументаСертификации   = НайденныеСтроки[0].ВидСертификации;
		ТекущиеДанные.НомерДокументаСертификации = НайденныеСтроки[0].НомерСертификации;
		ТекущиеДанные.ДатаДокументаСертификации  = НайденныеСтроки[0].ДатаСертификации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДанныеИмпортаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ПустаяСтрока(ТекущиеДанные.ДанныеИмпорта) Тогда
		ТекущиеДанные.Импортер                       = Неопределено;
		ТекущиеДанные.РегистрационныйНомерДекларации = "";
		ТекущиеДанные.ДатаДекларации                 = '00010101';
		Возврат;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("Представление", ТекущиеДанные.ДанныеИмпорта);
	НайденныеСтроки = КэшДанныхИмпорта.НайтиСтроки(ПараметрыПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекущиеДанные.Импортер                       = НайденныеСтроки[0].Импортер;
		ТекущиеДанные.РегистрационныйНомерДекларации = НайденныеСтроки[0].РегистрационныйНомерДекларации;
		ТекущиеДанные.ДатаДекларации                 = НайденныеСтроки[0].ДатаДекларации;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСПриИзменении(Элемент)
	ЗаполнитьДанныеВЕТИС();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСОчистка(Элемент, СтандартнаяОбработка)
	ЗаполнитьДанныеВЕТИС();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);

	ПараметрыОткрытия = ИнтеграцияИСМПВЕТИСКлиент.ПараметрыВыбораИдентификатораПросхождения(ПараметрыСканирования.ВидОперацииИСМП);
	ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, ТекущиеДанные, "Номенклатура, Характеристика, Серия, ХарактеристикиИспользуются");
	ПараметрыОткрытия.ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИдентификатораПроисхожденияВЕТИСЗавершение", ЭтотОбъект);
	ПараметрыОткрытия.Организация                         = Объект.Организация;
	ПараметрыОткрытия.ТребуетсяУказаниеСерии = ИнтеграцияИСКлиентСервер.НеобходимоУказатьСерию(ТекущиеДанные.СтатусУказанияСерий);

	ИнтеграцияИСМПВЕТИСКлиент.ОткрытьФормуВыбораИдентификатораПроисхожденияВЕТИС(ПараметрыОткрытия, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФормеПриИзменении(Элемент)
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме = ИнтеграцияИСКлиентСервер.ПреобразоватьИдентификаторВСД(
		ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме);
	ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокой = ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокой)
		И Не СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ТекущиеДанные.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Указан некорректный идентификатор ВСД'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.Товары", Объект.Товары.Индекс(ТекущиеДанные) + 1, "ИдентификаторПроисхожденияВЕТИССтрокойНаФорме"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзВнешнегоФайла(Команда)
	
	ОчиститьСообщения();
	
	ИнтеграцияИСКлиент.ОткрытьФормуЗагрузкиКодовМаркировки(
		ЭтотОбъект,
		Ложь,
		ИнтеграцияИСМПКлиент.ЗаголовокФормыЗагрузкиКодовМаркировки(ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	
	ОчиститьСообщения();
	
	Если Не ВидПродукцииУказан() Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиент.ПоказатьВводШтрихкода(ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ОтгрузкаТоваровИСМП.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормИСМПКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ОчиститьСообщения();
	СобытияФормИСМПКлиентПереопределяемый.ВыгрузитьДанныеВТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияИСКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияИСМПКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	ОбработчикПерезаполненияПоОснованию();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументыСертификации(Команда)
	
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеИмпорта(Команда)
	ОткрытьФормуРедактированияСертификации(Элементы.Товары.ВыделенныеСтроки, "ДанныеИмпорта");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеGTIN(Команда)
	
	ОчиститьСообщения();
	
	ЗаполнитьДоступныеGTINНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВозобновитьПодборМаркируемойПродукции(Команда)
	
	ПроверкаИПодборПродукцииИСМПКлиент.ВозобновитьПроверку(ЭтотОбъект, Объект.ВидПродукции, ПараметрыУказанияСерий);
	
КонецПроцедуры

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияИСМПСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт

	Прочитать();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусИСМП()
	
	МенеджерОбъекта = ОбщегоНазначенияИС.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	СтатусИСМП = МенеджерОбъекта.СтатусПоУмолчанию();
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		ДальнейшееДействие = Новый Массив;
	Иначе
		ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию();
	КонецЕсли;
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		ДальнейшееДействие = Новый Массив;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус КАК Статус,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыДокументовИСМП КАК Статусы
		|ГДЕ
		|	Статусы.Документ = &Документ");
		
		Запрос.УстановитьПараметр("Документ",                 Объект.Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияИСМП.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			СтатусИСМП = Выборка.Статус;
			
			Если СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеПередачуДанных);

	СтатусПредставление = ИнтеграцияИСМП.ПредставлениеСтатуса(СтатусИСМП, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусИСМП <> Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Черновик
	                              И СтатусИСМП <> Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОшибка;
	
	Если Не (Элементы.ТоварыСтатусПроверкиГосИС.Видимость ИЛИ РедактированиеФормыНедоступно) Тогда
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;

	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
						
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияИСМПКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "АннулироватьОтгрузку" Тогда
		
		ПараметрыОбработкиДокументов = ИнтеграцияИСМПСлужебныйКлиентСервер.ПараметрыОбработкиДокументов();
		ПараметрыОбработкиДокументов.Ссылка             = Объект.Ссылка;
		ПараметрыОбработкиДокументов.Организация        = Объект.Организация;
		ПараметрыОбработкиДокументов.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыОбработкиДокументов);
		
		ИнтеграцияИСМПКлиент.ПодготовитьКПередаче(
			ЭтотОбъект,
			ПараметрыОбработкиДокументов,
			ОписаниеПриЗавершении);	
			
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ИСМППрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияИС.ПараметрыЗаполненияТабличнойЧастиТовары(Объект.ВидПродукции);
	ПараметрыЗаполнения.ЗаполнитьСтавкуНДС = Элементы.ТоварыСтавкаНДС.Видимость;
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормИСМППереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	
	ВременнаяТаблица = Объект.Товары.Выгрузить(ДобавленныеСтроки);
	Если ВременнаяТаблица.Количество() Тогда
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамОтгрузкиТоваровИСМП(
			ВременнаяТаблица, Объект);
		ИнтеграцияИСМПКлиентСервер.ОбновитьКешСертификацииПоСтатистике(ЭтотОбъект, ВременнаяТаблица);
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	
	ЭтоОтгрузкаВЕАЭСПриОСУ = Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ;
	Для Каждого СтрокаТовары Из ДобавленныеСтроки Цикл
		
		СписокНоменклатуры.Добавить(СтрокаТовары.Номенклатура);
		
		Если ЭтоОтгрузкаВЕАЭСПриОСУ Тогда
			
			Если СтрокаТовары.ХарактеристикиИспользуются Тогда
				НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(СтрокаТовары.Номенклатура)
					И ЗначениеЗаполнено(СтрокаТовары.Характеристика));
			Иначе
				НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(СтрокаТовары.Номенклатура);
			КонецЕсли;
			
			Если НоменклатураХарактеристикаУказана Тогда
				
				ДанныеСтрокиПоСтатистике = ВременнаяТаблица.Найти(СтрокаТовары.НомерСтроки, "НомерСтроки");
				Если ДанныеСтрокиПоСтатистике <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеСтрокиПоСтатистике, "GTIN");
					ЗаполнитьСписокВыбораGTINПоСтроке(СтрокаТовары, СтрокаТовары);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
	ИнтеграцияИСМПКлиентСервер.ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(ЭтотОбъект, ДобавленныеСтроки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	
	// Коды отдельно от количества
	ИнтеграцияИСМП.УстановитьУсловноеОформлениеПолейКоличества(ЭтотОбъект);
	
	// GTIN
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыGTIN.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",      НСтр("ru = '<выберите существующий GTIN>'"));
	
	// Идентификатор ВСД
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.ИдентификаторПроисхожденияВЕТИССтрокой");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФорме.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// GLN Контрагента
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Операция");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = ИнтеграцияИСМПСлужебныйКлиентСервер.ОперацииОбязательногоИспользованияGLNПриОтгрузкеТоваров();
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.GLNКонтрагента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.GLNКонтрагента.Имя);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля  = ЦветаСтиля.ЦветТекстаПоля;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		ДанныеДокумента = Новый Структура("ВидПродукции, Операция");
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Объект);
		Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
			ПоместитьВоВременноеХранилище(ДанныеДокумента, ДанныеДокументаАдрес);
		Иначе
			ДанныеДокументаАдрес = ПоместитьВоВременноеХранилище(ДанныеДокумента, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	ШтрихкодированиеОбщегоНазначенияИС.ВосстановитьНастройкиВыбораМаркируемойПродукции(ЭтотОбъект, Объект.Ссылка);
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(ЭтотОбъект);
	
	ПравоИзменения              = ПравоДоступа("Изменение", Метаданные.Документы.ОтгрузкаТоваровИСМП);
	ИспользуетсяПодсистемаВетИС = ИнтеграцияИСМПВЕТИС.ИспользуетсяПодсистемаВетИС();
	
	ЗаполнитьДоступныеОперации();
	НастроитьТипКонтрагентаПоУмолчанию(Объект.Ссылка.Пустая());
	УстановитьПараметрыВыбораКонтрагента();
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ОтгрузкаТоваровИСМП);
	
	СобытияФормИСКлиентСерверПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	ОбновитьПредставленияНаФорме();

	НастроитьЭлементыФормы(ЭтотОбъект);
	ИнтеграцияИСМП.СоздатьКэшСертификацииЛицензии(ЭтотОбъект);
	
	ИнтеграцияИСМП.НастроитьВидимостьКолонкиКоличестваКодовМаркировки(ЭтотОбъект);
	
	Если Не ПодключенаОбработкаКодовМаркировки Тогда
		ИменаПолей = Новый Массив;
		ИменаПолей.Добавить("КоличествоПотребительскихУпаковок");
		Если ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(Объект.Операция, Объект.ВидПродукции) Тогда
			ИменаПолей.Добавить("СрокГодности");
		КонецЕсли;
		ПроверкаИПодборПродукцииИС.ПодключитьОбработкуКодовМаркировки(ЭтотОбъект,, СтрСоединить(ИменаПолей, ","));
		ПодключенаОбработкаКодовМаркировки = Истина;
	КонецЕсли;
	
	ИнициализироватьКэшСтроки(ЭтотОбъект);
	
	Если Не РедактированиеФормыНедоступно Тогда
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЭлементыФормы(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	Операция = Форма.Объект.Операция;
	
	ЭтоОтгрузкаЕАЭССПризнаниемКИ = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ"));
	ЭтоОтгрузкаЕАЭС              = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ")
		Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ"));
	Элементы.СтранаНазначения.Видимость    = ЭтоОтгрузкаЕАЭС;
	Элементы.ТоварыСертификация.Видимость  = ЭтоОтгрузкаЕАЭС;
	Элементы.ОтгрузкаНеучастнику.Видимость = Не ЭтоОтгрузкаЕАЭССПризнаниемКИ;
	
	Элементы.ЗаполнитьДокументыСертификации.Видимость = ЭтоОтгрузкаЕАЭС;
	
	ОперацияВыводИзОборота = Ложь;
	ВидимостьГосКонтракта  = Ложь;
	Если Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача") Тогда
		ОперацияВыводИзОборота = Истина;
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием") Тогда
		ОперацияВыводИзОборота = Истина;
		ВидимостьГосКонтракта  = Истина;
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя") Тогда
		ОперацияВыводИзОборота = Истина;
	КонецЕсли;
	
	Элементы.ДатаВыводаИзОборота.Видимость       = ОперацияВыводИзОборота;
	Элементы.ИдентификаторГосКонтракта.Видимость = ВидимостьГосКонтракта;
	
	ФорматДаты = "ДФ=dd.MM.yyyy;";
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступнаДатаПроизводстваПриПриемкеОтгрузке(Операция, Объект.ВидПродукции) Тогда
		Элементы.ТоварыДатаПроизводства.Видимость = Истина;
		Элементы.ТоварыДатаПроизводства.Формат = ФорматДаты;
		Элементы.ТоварыДатаПроизводства.ФорматРедактирования = ФорматДаты;
		Элементы.ТоварыДатаПроизводства.АвтоОтметкаНезаполненного =
			ИнтеграцияИСМПСлужебныйКлиентСервер.ТребуетсяУказаниеДатыПроизводстваПриПриемкеОтгрузке(Операция, Объект.ВидПродукции);
	Иначе
		Элементы.ТоварыДатаПроизводства.Видимость = Ложь;
	КонецЕсли;
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(Операция, Объект.ВидПродукции) Тогда
		Элементы.ТоварыСрокГодности.Видимость = Истина;
		Элементы.ТоварыСрокГодности.Формат = ФорматДаты;
		Элементы.ТоварыСрокГодности.ФорматРедактирования = ФорматДаты;
		Элементы.ТоварыСрокГодности.АвтоОтметкаНезаполненного =
			ИнтеграцияИСМПСлужебныйКлиентСервер.ТребуетсяУказаниеСрокаГодностиПриПриемкеОтгрузке(Операция, Объект.ВидПродукции);
		Элементы.ШтрихкодыУпаковокСрокГодности.Видимость = Истина;
		Элементы.ШтрихкодыУпаковокСрокГодности.Формат = ФорматДаты;
		Элементы.ШтрихкодыУпаковокСрокГодности.ФорматРедактирования = ФорматДаты;
	Иначе
		Элементы.ТоварыСрокГодности.Видимость = Ложь;
		Элементы.ШтрихкодыУпаковокСрокГодности.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыДанныеИмпорта.Видимость = ЭтоОтгрузкаЕАЭССПризнаниемКИ;
	Элементы.ТоварыПроизводитель.Видимость = ЭтоОтгрузкаЕАЭССПризнаниемКИ;
	
	ЗависимыеОтСтатусаИСМП = Новый Массив;
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
	ЗависимыеОтСтатусаИСМП.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыТовары");
	ЗависимыеОтСтатусаИСМП.Добавить("СтраницаТовары");
	
	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаИСМП, Не Форма.РедактированиеФормыНеДоступно);
	
	ЗависимыеОтСтатусаПроверкиИПодбора = Новый Массив;
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыПодменюЗаполнить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ГруппаТорговоеОборудование");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыНоменклатура");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыХарактеристика");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСерия");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКоличествоУпаковок");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУпаковкаЕдиницаИзмерения");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыУдалить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюДобавить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюСкопировать");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюИзменить");
	ЗависимыеОтСтатусаПроверкиИПодбора.Добавить("ТоварыКонтекстноеМенюУдалить");

	ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(Форма,
		ЗависимыеОтСтатусаПроверкиИПодбора,
		Не (Форма.РедактированиеФормыНеДоступно Или РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)));
	
	ЭтоОбъемноСортовойУчет = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ"));
	
	Если Форма.РедактированиеФормыНеДоступно
		Или НЕ Форма.ПравоИзменения
		Или ЭтоОбъемноСортовойУчет Тогда
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	ИначеЕсли Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Истина;
	Иначе
		Элементы.ВозобновитьПодборМаркируемойПродукции.Доступность = Ложь;
	КонецЕсли;
	
	ЭтоМолокоПриОСУ = (ЭтоОбъемноСортовойУчет
		И Объект.ВидПродукции = ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	
	Элементы.ТоварыСтатусПроверкиГосИС.Видимость                    = Не Форма.РедактированиеФормыНеДоступно;
	Элементы.ТоварыИдентификаторПроисхожденияВЕТИС.Видимость        = (ЭтоМолокоПриОСУ И Форма.ИспользуетсяПодсистемаВЕТИС);
	Элементы.ТоварыИдентификаторПроисхожденияВЕТИССтрокойНаФорме.Видимость = (ЭтоМолокоПриОСУ И Не Форма.ИспользуетсяПодсистемаВЕТИС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РедактированиеНедоступноПоСтатусуПроверкиИподбора(Форма)
	
	Если Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Выполняется")
		Или Форма.СтатусПроверкиИПодбора = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиИПодбораИС.Завершено") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ТоварыПослеУдаленияСервер()
	
	ПрименитьКешШтрихкодовУпаковок();
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИдентификаторыВСДНаФорме()
	
	Если Объект.ВидПродукции <> Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		СтрокаТовары.ИдентификаторПроисхожденияВЕТИССтрокойНаФорме = СтрокаТовары.ИдентификаторПроисхожденияВЕТИССтрокой;
	КонецЦикла;
	
КонецПроцедуры

#Область Оборудование

&НаКлиенте
Процедура ПодключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОборудованиеЗавершение(РезультатВыполнения, Параметры) Экспорт
	
	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр( "ru = 'При отключении оборудования произошла ошибка: ""%ОписаниеОшибки%"".'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Штрихкодирование

&НаКлиенте
Функция ОписаниеОповещенияОбработкиКодаМаркировки()
	
	Возврат Новый ОписаниеОповещения("ОбработатьКодМаркировки", ЭтотОбъект);
	
КонецФункции

&НаКлиенте
Процедура ПослеОбработкиШтрихкодов(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если ДанныеВыбораПоМаркируемойПродукции<>Неопределено Тогда
			КлючиСвязи = Новый Структура;
			КлючиСвязи.Вставить("Номенклатура");
			КлючиСвязи.Вставить("Характеристика");
			КлючиСвязи.Вставить("Серия");
			ЗаполнитьЗначенияСвойств(КлючиСвязи, ДанныеВыбораПоМаркируемойПродукции);
			СтрокиТовар = Объект.Товары.НайтиСтроки(КлючиСвязи);
			Если СтрокиТовар.Количество() И СтрокиТовар[0].СтатусПроверкиГосИС = 1 Тогда
				ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ЭтотОбъект,,Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования)
	
	ПараметрыЗавершенияВводаШтрихкода = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыЗавершенияОбработкиШтрихкода();
	ПараметрыЗавершенияВводаШтрихкода.РезультатОбработкиШтрихкода  = РезультатОбработки;
	ПараметрыЗавершенияВводаШтрихкода.Форма                        = ЭтотОбъект;
	ПараметрыЗавершенияВводаШтрихкода.ПараметрыСканирования        = ПараметрыСканирования;
	ПараметрыЗавершенияВводаШтрихкода.ДанныеШтрихкода              = ИсходныеДанные;
	
	Возврат ПараметрыЗавершенияВводаШтрихкода;
	
КонецФункции

&НаСервере
Функция ОбработатьВводШтрихкода(ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	РезультатОбработкиШтрихкода = ШтрихкодированиеОбщегоНазначенияИС.ОбработатьВводШтрихкода(
		ЭтотОбъект, ШтрихкодКоличество, КэшированныеЗначения, ПараметрыСканирования);
		
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаКодаМаркировкиВыполнитьДействие(ДанныеДляВыполненияДействия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора             = ДанныеДляВыполненияДействия.РезультатВыбора;
	РезультатОбработкиШтрихкода = ДанныеДляВыполненияДействия.РезультатОбработкиШтрихкода;
	КэшированныеЗначения        = ДанныеДляВыполненияДействия.КэшированныеЗначения;
	ПараметрыСканирования       = ДанныеДляВыполненияДействия.ПараметрыСканирования;
	
	Действие = ДанныеДляВыполненияДействия.Действие;
	РезультатОбработкиШтрихкода = ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(
		ДанныеДляВыполненияДействия.ИсходныеДанные, РезультатОбработкиШтрихкода, ДанныеДляВыполненияДействия.ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

&НаСервере
Функция ОбработкаКодаМаркировкиВыполнитьДействиеСервер(Действие, РезультатВыбора, РезультатОбработкиШтрихкода, ПараметрыСканирования, КэшированныеЗначения)
	
	ПараметрыОбработкиВыбора    = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьПараметрыОбработкиВыбора(РезультатВыбора, РезультатОбработкиШтрихкода, КэшированныеЗначения);
	РезультатОбработкиШтрихкода = ШтрихкодированиеИС.ВыполнитьДействие(ЭтотОбъект, Действие, ПараметрыОбработкиВыбора);
	
	ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования);
	
	РезультатОбработкиШтрихкода.ИзмененныеСтроки  = Новый Массив;
	РезультатОбработкиШтрихкода.ДобавленныеСтроки = Новый Массив;
	
	Возврат РезультатОбработкиШтрихкода;
	
КонецФункции

&НаСервере
Процедура ПослеОбработкиШтрихкодовСервер(РезультатОбработкиШтрихкода, КэшированныеЗначения, ПараметрыСканирования = Неопределено)
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
	ИзмененныеСтроки  = РезультатОбработкиШтрихкода.ИзмененныеСтроки;
	ДобавленныеСтроки = РезультатОбработкиШтрихкода.ДобавленныеСтроки;
	
	Если ДобавленныеСтроки.Количество() = 0 И ИзмененныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокНоменклатуры = Новый Массив;
	
	Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииНоменклатуры(
			ЭтотОбъект, ДобавленнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
		СписокНоменклатуры.Добавить(ДобавленнаяСтрока.Номенклатура);
		
	КонецЦикла;
	
	Для Каждого ИзмененнаяСтрока Из ИзмененныеСтроки Цикл
		
		СобытияФормИСМППереопределяемый.ПриИзмененииКоличества(
			ЭтотОбъект, ИзмененнаяСтрока, КэшированныеЗначения, ПараметрыУказанияСерий);
		
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество() Тогда
		
		ЭтоОтгрузкаСПризнаниемКИ = Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ;
		ВременнаяТаблица = Объект.Товары.Выгрузить(ДобавленныеСтроки);
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамОтгрузкиТоваровИСМП(
			ВременнаяТаблица, Объект);
		
		ИнтеграцияИСМПКлиентСервер.ОбновитьКешСертификацииПоСтатистике(ЭтотОбъект, ВременнаяТаблица);
		
		ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
		Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
			
			ИнтеграцияИСМПКлиентСервер.ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(ЭтотОбъект, ДобавленнаяСтрока);
			Если ЭтоОтгрузкаСПризнаниемКИ Тогда
				ДанныеСтрокиПоСтатистике = ВременнаяТаблица.Найти(ДобавленнаяСтрока.НомерСтроки, "НомерСтроки");
				Если ДанныеСтрокиПоСтатистике <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, ДанныеСтрокиПоСтатистике, "Производитель");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОткрытьФормуУточненияДанных()
	
	ШтрихкодированиеИСКлиент.Подключаемый_ОткрытьФормуУточненияДанных(ЭтотОбъект, ОписаниеОповещенияОбработкиКодаМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьКодМаркировки(ИсходныеДанные, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ИсходныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеОбщегоНазначенияИСКлиентСервер.ЗакодироватьШтрихкодДанныхBase64(ИсходныеДанные);
	
	РезультатОбработки = ОбработатьВводШтрихкода(ИсходныеДанные, Неопределено, ПараметрыСканирования);
	
	ПараметрыЗавершенияВводаШтрихкода = ПараметрыЗавершенияВводаШтрихкода(ИсходныеДанные, РезультатОбработки, ПараметрыСканирования);
	ШтрихкодированиеОбщегоНазначенияИСКлиент.ЗавершитьОбработкуШтрихкода(ПараметрыЗавершенияВводаШтрихкода);
	
КонецПроцедуры

#КонецОбласти

#Область КэшСтроки

&НаСервере
Процедура ПрименитьКешШтрихкодовУпаковок()
	
	Если Не РедактированиеФормыНедоступно Тогда
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект, , Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьКэшСтроки(Форма)

	Форма.ДанныеКешаСтроки = Новый Структура;
	Форма.ДанныеКешаСтроки.Вставить("Номенклатура");
	Форма.ДанныеКешаСтроки.Вставить("Характеристика");
	Форма.ДанныеКешаСтроки.Вставить("Серия");

КонецПроцедуры

#КонецОбласти

#Область ФормаПроверкиИПодбораОбуви

&НаСервере
Процедура ОбновитьИнформациюОткрытияФормыПроверкиПодбора()
	
	Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Истина;
	ТекстНадписи = "";
	
	СтатусПроверкиИПодбора = ПроверкаИПодборПродукцииИС.СтатусПроверкиИПодбораДокумента(
		Объект.Ссылка, Объект.ВидПродукции);
	
	Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
		
		Если ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Продолжить подбор и проверку маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Истина;
			
		Иначе
			
			ТекстНадписи = НСтр("ru = 'Промежуточные результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусИСМП = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Черновик
		Или СтатусИСМП = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОшибка Тогда
			
		Если СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			
			ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
		ИначеЕсли ПравоИзменения Тогда
			
			ТекстНадписи = НСтр("ru = 'Подобрать и проверить маркированную продукцию'");
			Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
			
		Иначе
			
			Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.ПустаяСсылка() Тогда
		
		Элементы.ГруппаСканированиеИПроверкаМаркируемойПродукции.Видимость = Ложь;
		
	Иначе
		
		ТекстНадписи = НСтр("ru = 'Результаты подбора маркированной продукции'");
		Элементы.ГруппаИнформацияОСканированииВДругойФорме.Видимость = Ложь;
		
	КонецЕсли;
	
	ТекстГиперссылки = ПроверкаИПодборПродукцииИСМПКлиентСервер.НавигационнаяСсылкаОткрытьФормуПроверкиПродукцииИСМП();
	
	СтрокаОткрытиеФормыСканирования = Новый ФорматированнаяСтрока(ТекстНадписи,
		Новый Шрифт(,,,,Истина), ЦветаСтиля.ЦветГиперссылкиГосИС,, ТекстГиперссылки);
	
	Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Заголовок = СтрокаОткрытиеФормыСканирования;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)

	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусИСМП();
	КонецЕсли;

	ОбновитьИнформациюОткрытияФормыПроверкиПодбора();
	ЗаполнитьИдентификаторыВСДНаФорме();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
		Элементы.ТоварыПерезаполнитьПоОснованию.Доступность = ЗначениеЗаполнено(Объект.ДокументОснование);
	КонецЕсли;
	
	Элементы.GLNКонтрагента.Видимость = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеGLNКонтрагентаПриОтгрузкеТоваров(Объект.Операция);
	ЭтоОтгрузкаИзЕАЭСПриОСУ           = (Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ"));
	
	Элементы.ТоварыGTIN.Видимость                = ЭтоОтгрузкаИзЕАЭСПриОСУ;
	Элементы.ТоварыСтатусПроверкиГосИС.Видимость = (Не ЭтоОтгрузкаИзЕАЭСПриОСУ);
	Элементы.ЗаполнитьДоступныеGTIN.Видимость    = ЭтоОтгрузкаИзЕАЭСПриОСУ;
	Элементы.ДекорацияОтсканироватьПроверитьМаркируемуюПродукцию.Видимость = (Не ЭтоОтгрузкаИзЕАЭСПриОСУ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСМПКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение") Тогда
		ОбработчикПерезаполненияПоОснованию(Ложь);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию(ЗадаватьВопрос = Истина)
	
	ОчиститьСообщения();
	
	Если Объект.Товары.Количество() > 0 И ЗадаватьВопрос Тогда
		
		ТекстВопроса = НСтр("ru = 'Данные документа будут перезаполнены. Продолжить?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВопросОПерезаполнениииПоОснованиюПриЗавершении", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОПерезаполнениииПоОснованиюПриЗавершении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПерезаполнитьПоОснованиюСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидаПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		Объект.ШтрихкодыУпаковок.Очистить();
		ВидПродукцииПриИзменении(Элементы.ВидПродукции);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацияПриЗавершении(РезультатВопроса, НоваяОрганизация) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = НоваяОрганизация;
		Объект.ШтрихкодыУпаковок.Очистить();
		ОбновлениеКешей();
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновлениеКешей()
	
	Если Не РедактированиеФормыНедоступно Тогда
		ПроверкаИПодборПродукцииИС.ЗаполнитьКешШтрихкодовУпаковок(ЭтотОбъект);
		ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(ЭтотОбъект);
	КонецЕсли;
	ШтрихкодированиеИС.ОбновитьКэшМаркируемойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидПродукцииНаСервере()
	
	ИнтеграцияИСМП.НастроитьВидимостьКолонкиКоличестваКодовМаркировки(ЭтотОбъект);
	
	ЗаполнитьДоступныеОперации();
	Если Элементы.Операция.СписокВыбора.НайтиПоЗначению(Объект.Операция) = Неопределено Тогда
		Объект.Операция = Элементы.Операция.СписокВыбора.Получить(0).Значение;
		
		ПроверитьНастроитьТипКонтрагента();
		
	КонецЕсли;
	УстановитьПараметрыВыбораКонтрагента();
	
	НастроитьЭлементыФормы(ЭтотОбъект);
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, "ВидПродукции");
	
	ОбновитьИнформациюОткрытияФормыПроверкиПодбора();
	ОбновлениеКешей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеОперации()
	
	Элементы.Операция.СписокВыбора.Очистить();
	
	ВидыОперацийПоВидуПродукцииИС = Документы.ОтгрузкаТоваровИСМП.ДоступныеВидыОперацийПоВидуПродукцииИС();
	ВидыОперациПоВидуПродукции = ВидыОперацийПоВидуПродукцииИС.Получить(Объект.ВидПродукции);
	Если ВидыОперациПоВидуПродукции <> Неопределено Тогда
		Для Каждого ВидОперации Из ВидыОперациПоВидуПродукции Цикл
			Элементы.Операция.СписокВыбора.Добавить(ВидОперации);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеДокументаАдрес) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(ДанныеДокументаАдрес);
	Иначе
		ДанныеДокумента = Неопределено;
	КонецЕсли;
	
	Если ДанныеДокумента <> Неопределено
		И ДанныеДокумента.ВидПродукции = Объект.ВидПродукции Тогда
		
		Если ЗначениеЗаполнено(ДанныеДокумента.Операция)
			И Элементы.Операция.СписокВыбора.НайтиПоЗначению(ДанныеДокумента.Операция) = Неопределено Тогда
			Элементы.Операция.СписокВыбора.Добавить(
				ДанныеДокумента.Операция);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьGLNКонтрагентаПоСтатистике(Контрагент)
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ДанныеСтатистики = ЗаполнениеОбъектовПоСтатистикеИСМП.ДанныеЗаполненияОтгрузкиТоваровИСМП(Неопределено, Контрагент);
		Возврат ДанныеСтатистики.GLNКонтрагента;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура НастроитьТипКонтрагентаПоУмолчанию(Инициализация = Ложь)
	
	ИспользуетсяПередачаТоваровМеждуОрганизациями = Ложь;
	ИнтеграцияИСМППереопределяемый.ПриОпределенииИспользованияПередачиТоваровМеждуОрганизациями(ИспользуетсяПередачаТоваровМеждуОрганизациями);
	
	Если Не ИспользуетсяПередачаТоваровМеждуОрганизациями Тогда
		ИспользоватьОграничениеВыбораТипа = Истина;
		ОписаниеТиповКонтрагентГосИС = Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип;
		Если Инициализация И (ЗначениеЗаполнено(Объект.Контрагент) И Не ОписаниеТиповКонтрагентГосИС.СодержитТип(ТипЗнч(Объект.Контрагент))) Тогда
			ИспользоватьОграничениеВыбораТипа = Ложь;
		КонецЕсли;
		Если ИспользоватьОграничениеВыбораТипа Тогда
			Элементы.Контрагент.ВыбиратьТип = Ложь;
			Элементы.Контрагент.ДоступныеТипы = ОписаниеТиповКонтрагентГосИС;
		КонецЕсли;
	ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
		ОписаниеТиповКонтрагентГосИС = Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип;
		Элементы.Контрагент.ВыбиратьТип = Ложь;
		Элементы.Контрагент.ДоступныеТипы = ОписаниеТиповКонтрагентГосИС;
	Иначе
		ОписаниеТиповКонтрагентГосИС = Метаданные.ОпределяемыеТипы.ОрганизацияКонтрагентГосИС.Тип;
		Элементы.Контрагент.ВыбиратьТип = Истина;
		Элементы.Контрагент.ДоступныеТипы = ОписаниеТиповКонтрагентГосИС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВидПродукцииУказан()
	
	Если Не ЗначениеЗаполнено(Объект.ВидПродукции) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан вид продукции'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьЗависимыеРеквизиты()
	
	ОперацияВыводИзОборота = Ложь;
	ОперацияГосКонтракт    = Ложь;
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача") Тогда
		ОперацияВыводИзОборота = Истина;
	ИначеЕсли Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием") Тогда
		ОперацияВыводИзОборота = Истина;
		ОперацияГосКонтракт    = Истина;
	ИначеЕсли Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя") Тогда
		ОперацияВыводИзОборота = Истина;
	КонецЕсли;
	
	Если Не ОперацияВыводИзОборота Тогда
		Объект.ДатаВыводаИзОборота = Дата(1, 1, 1);
	КонецЕсли;
	Если Не ОперацияГосКонтракт Тогда
		Объект.ИдентификаторГосКонтракта = Неопределено;
	КонецЕсли;
	
	Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ")
		Или Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ") Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.Сертификация   = Неопределено;
			СтрокаТовары.ВидДокументаСертификации   = Неопределено;
			СтрокаТовары.НомерДокументаСертификации = Неопределено;
			СтрокаТовары.ДатаДокументаСертификации  = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольДатыВыводаИзОборота()
	
	Если Объект.ДатаВыводаИзОборота < Объект.ДатаПервичногоДокумента Тогда
		ТекстСообщения = НСтр("ru = 'Дата вывода из оборота не может быть меньше даты первичного документа'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.ДатаВыводаИзОборота");
	КонецЕсли;
	
Конецпроцедуры

#Область GTIN

&НаСервере
Функция МассивЗначенийGTINДляВыбора(ТекущаяСтрока)
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("Число") Тогда
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	Иначе
		ТекущиеДанные = ТекущаяСтрока;
	КонецЕсли;
	
	ДопустимыеВидыУпаковок = Новый Массив();
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Потребительская);
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Набор);
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Неопределен);
	
	Возврат ИнтеграцияИСМП.МассивЗначенийGTINДляВыбора(ТекущиеДанные, Объект, Ложь, ДопустимыеВидыУпаковок);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеGTINНаСервере()
	
	Документы.ВыводИзОборотаИСМП.ЗаполнитьДоступныеGTIN(Объект)
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ТоварыНоменклатураХарактеристикаПриИзмененииСервер(ТребуетсяОбновитьКэшУпаковок, ТребуетсяОбновитьДанныеСертификации)
	
	ТекущаяСтрока = Элементы.Товары.ТекущаяСтрока;
	ДанныеСтроки  = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ХарактеристикиИспользуются Тогда
		НоменклатураХарактеристикаУказана = (ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
			И ЗначениеЗаполнено(ДанныеСтроки.Характеристика));
	Иначе
		НоменклатураХарактеристикаУказана = ЗначениеЗаполнено(ДанныеСтроки.Номенклатура);
	КонецЕсли;
	
	Если НоменклатураХарактеристикаУказана Или ТребуетсяОбновитьДанныеСертификации Тогда
		
		Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
			Или Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
				И ТребуетсяОбновитьДанныеСертификации Тогда
			
			ТребуетсяОбработатьДанныеСтрокиGTIN = Ложь;
			
			Если НоменклатураХарактеристикаУказана Тогда
				Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
					И Не ЗначениеЗаполнено(ДанныеСтроки.GTIN) Тогда
					ТребуетсяОбработатьДанныеСтрокиGTIN = Истина;
				КонецЕсли;
			ИначеЕсли Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
				ДанныеСтроки.GTIN = "";
			КонецЕсли;
			
			ВременнаяТаблица = Объект.Товары.Выгрузить(Новый Структура("НомерСтроки", ДанныеСтроки.НомерСтроки));
			Если ВременнаяТаблица.Количество() Тогда
				
				Если ТребуетсяОбновитьДанныеСертификации Тогда
					ВременнаяТаблица[0].Производитель = Неопределено;
					Если ЗначениеЗаполнено(ВременнаяТаблица[0].РегистрационныйНомерДекларации) Тогда
						ВременнаяТаблица[0].РегистрационныйНомерДекларации = "";
						ВременнаяТаблица[0].ДатаДекларации                 = Дата('00010101');
						ВременнаяТаблица[0].Импортер                       = Неопределено;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(ВременнаяТаблица[0].ВидДокументаСертификации) Тогда
						ВременнаяТаблица[0].ВидДокументаСертификации   =  ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка");
						ВременнаяТаблица[0].НомерДокументаСертификации = "";
						ВременнаяТаблица[0].ДатаДокументаСертификации  = Дата('00010101');
					КонецЕсли;
				КонецЕсли;
				
				ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамОтгрузкиТоваровИСМП(
					ВременнаяТаблица, Объект);
				
				ПоляЗаполнения = Новый Массив;
				
				Если ТребуетсяОбновитьДанныеСертификации Тогда
					
					ПоляЗаполнения.Добавить("ВидДокументаСертификации");
					ПоляЗаполнения.Добавить("НомерДокументаСертификации");
					ПоляЗаполнения.Добавить("ДатаДокументаСертификации");
					
					Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
						ПоляЗаполнения.Добавить("Импортер");
						ПоляЗаполнения.Добавить("РегистрационныйНомерДекларации");
						ПоляЗаполнения.Добавить("ДатаДекларации");
						ПоляЗаполнения.Добавить("Производитель");
					КонецЕсли;
					
				КонецЕсли;
				
				Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
					И ТребуетсяОбработатьДанныеСтрокиGTIN Тогда
					ПоляЗаполнения.Добавить("GTIN");
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, ВременнаяТаблица[0], СтрСоединить(ПоляЗаполнения, ","));
				
				Если ТребуетсяОбновитьДанныеСертификации Тогда
					
					ИнтеграцияИСМПКлиентСервер.ОбновитьКешСертификацииПоСтатистике(ЭтотОбъект, ВременнаяТаблица);
					
					СписокНоменклатуры = Новый Массив;
					СписокНоменклатуры.Добавить(ДанныеСтроки.Номенклатура);
					
					ИнтеграцияИСМПКлиентСервер.ДобавитьСертификатыНоменклатурыВКэш(ЭтотОбъект, СписокНоменклатуры);
					ИнтеграцияИСМПКлиентСервер.ЗаполнитьСертификациюЛицензииНоменклатурыПоСтроке(ЭтотОбъект, ТекущаяСтрока);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТребуетсяОбработатьДанныеСтрокиGTIN Тогда
				ЗаполнитьСписокВыбораGTINПоСтроке(ТекущаяСтрока, ДанныеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
			ДанныеСтроки.GTIN = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяОбновитьКэшУпаковок Тогда
		ПрименитьКешШтрихкодовУпаковок();
	КонецЕсли;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораGTINПоСтроке(ТекущаяСтрока, ДанныеСтроки)
	
	МассивЗначенийGTINДляВыбора = МассивЗначенийGTINДляВыбора(ТекущаяСтрока);
	Элементы.ТоварыGTIN.СписокВыбора.ЗагрузитьЗначения(МассивЗначенийGTINДляВыбора);
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.GTIN)
		Или МассивЗначенийGTINДляВыбора.Найти(ДанныеСтроки.GTIN) = Неопределено Тогда
		Если МассивЗначенийGTINДляВыбора.Количество() Тогда
			ДанныеСтроки.GTIN = МассивЗначенийGTINДляВыбора[0];
		Иначе
			ДанныеСтроки.GTIN = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ВетИС

&НаКлиенте
Процедура ЗаполнитьДанныеВЕТИС()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВЕТИСПоСтроке(ЭтотОбъект, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущиеДанные));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДанныеВЕТИСПоСтроке(Форма, ДобавленныеСтроки)
	
	Если Форма.Объект.ВидПродукции <> ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС")
		Или Форма.Объект.Операция <> ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторыВЕТИС = Новый Массив;
	Для Каждого СтрокаДанныхЗаполнения Из ДобавленныеСтроки Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанныхЗаполнения.ИдентификаторПроисхожденияВЕТИС) Тогда
			Продолжить;
		КонецЕсли;
		ИдентификаторыВЕТИС.Добавить(СтрокаДанныхЗаполнения.ИдентификаторПроисхожденияВЕТИС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИдентификатораПроисхожденияВЕТИСЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ИдентификаторПроисхожденияВЕТИС = Результат;
	ЗаполнитьДанныеВЕТИС();

КонецПроцедуры

#КонецОбласти

#Область РаботаСТСД

#Область ЗагрузкаИзТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДПослеАвторизации(РезультатАвторизации, Штрихкоды) Экспорт
	
	Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(Штрихкоды, АвторизацияЗапрашивалась = Неопределено) Экспорт
	
	Если Штрихкоды.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИСКлиент.ПараметрыСканирования(ЭтотОбъект);
	ШтрихкодированиеИСКлиент.ПреобразоватьШтрихкодыТСДВBase64(Штрихкоды);
	ОбработатьПолученныеДанныеТСДНаСервере(Штрихкоды, ПараметрыСканирования, КэшированныеЗначения);
	
	Если ЗагрузкаДанныхТСД.ТребуетсяАвторизация Тогда
		
		Если АвторизацияЗапрашивалась = Истина Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Загрузка данных недоступна: авторизация в сервисе не пройдена'"));
			ЗагрузкаДанныхТСД = Неопределено;
			Возврат;
		КонецЕсли;
		
		ИнтерфейсАвторизацииИСМПКлиент.ЗапроситьКлючСессии(
			ИнтерфейсАвторизацииИСМПКлиент.ПараметрыЗапросаКлючаСессии(Объект.Организация, Объект.ВидПродукции),
			Новый ОписаниеОповещения("ЗагрузитьИзТСДПослеАвторизации", ЭтотОбъект, Штрихкоды));
		Возврат;
		
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления.Количество() > 0 Тогда
		
		ДополнительныеПараметры = Новый Структура("ВсеШтрихкоды, ШтрихкодыДляСопоставления",
			ЗагрузкаДанныхТСД.ШтрихкодыТСД, ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления);
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			ЗагрузкаДанныхТСД.ШтрихкодыДляСопоставления, ЭтотОбъект, ОписаниеОповещения);
			
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок) Тогда
		ПараметрыОткрытия = ИнтеграцияИСМПКлиент.ПараметрыОткрытияФормыУточненияУпаковокПоGTIN();
		ПараметрыОткрытия.АдресУточнениеКоэффициентовУпаковок = ЗагрузкаДанныхТСД.АдресУточнениеКоэффициентовУпаковок;
		ИнтеграцияИСМПКлиент.ОткрытьФормуНастройкиВидовУпаковокПоGTIN(ПараметрыОткрытия, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ОбщаяОшибка Тогда
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ТекстОшибки = ЗагрузкаДанныхТСД.ТекстОбщейОшибки;
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		ЗагрузкаДанныхТСД = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДереве Тогда
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного(Объект.ВидПродукции);
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок; 
		ШтрихкодированиеИСКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
	КонецЕсли;
	
	Если ЗагрузкаДанныхТСД.ТребуетсяУточнениеДанных Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеУточненияДанныхТСД", ЭтотОбъект);
		ГрупповаяОбработкаШтрихкодовИСКлиент.ОткрытьФормуУточненияДанныхТСД(ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставлениеШтрихкодовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ШтрихкодированиеИСВызовСервера.ОчиститьОтложенныеКодыМаркировки(КэшМаркируемойПродукции);
		Возврат;
	КонецЕсли;
	
	Если Результат.НайденыНезарегистрированныеТовары Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СопоставлениеШтрихкодовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ШтрихкодированиеИСКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатурыПоШтрихкодам(
			Результат.ОтложенныеТовары, ЭтотОбъект, ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	Подключаемый_ПолученыДанныеИзТСД(ДополнительныеПараметры.ВсеШтрихкоды);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПолученныеДанныеТСДНаСервере(ШтрихкодыТСД, ПараметрыСканирования, КэшированныеЗначения)
	
	ЗагрузкаДанныхТСД = ГрупповаяОбработкаШтрихкодовИС.ОбработатьПолученныеДанныеТСДВДокументе(
		ЭтотОбъект, ШтрихкодыТСД, ПараметрыСканирования,
		(Объект.Операция <> Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ));
	
	Если ГрупповаяОбработкаШтрихкодовИС.ЗагрузкаШтрихкодовПрервана(ЗагрузкаДанныхТСД) Тогда
		Возврат;
	КонецЕсли;
	
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУточненияДанныхТСД(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения);
	ГрупповаяОбработкаШтрихкодовИСКлиент.ЗавершитьЗагрузкуТСД(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУточненияДанныхТСДНаСервере(КэшированныеЗначения)
	
	ГрупповаяОбработкаШтрихкодовИС.ОбработатьШтрихкоды(ЭтотОбъект, ЗагрузкаДанныхТСД);
	ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ДействияПослеЗагрузкиИзТСДНаСервере(КэшированныеЗначения)
	
	Модифицированность = Истина;
	ПослеОбработкиШтрихкодовСервер(ЗагрузкаДанныхТСД, КэшированныеЗначения);
	ОбновлениеКешей();
	ЗагрузкаДанныхТСД.ДобавленныеСтроки = Новый Массив;
	ЗагрузкаДанныхТСД.ИзмененныеСтроки  = Новый Массив;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Сертификация

&НаКлиенте
Процедура ОткрытьФормуРедактированияСертификации(ИдентификаторыСтрок, ВариантУточненияДанных = "Сертификация")
	
	Если ТипЗнч(ИдентификаторыСтрок) = Тип("Массив") Тогда
		МассивСтрок = ИдентификаторыСтрок;
	Иначе
		МассивСтрок = Новый Массив();
		МассивСтрок.Добавить(ИдентификаторыСтрок);
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВариантУточненияДанных", ВариантУточненияДанных);
	
	Если ВариантУточненияДанных = "Сертификация" Тогда
		ПараметрыОткрытия.Вставить("ВидСертификации",
			ПредопределенноеЗначение("Перечисление.ВидыДокументовОбязательнойСертификацииИС.ПустаяСсылка"));
		ПараметрыОткрытия.Вставить("ДатаСертификации",  Дата('00010101'));
		ПараметрыОткрытия.Вставить("НомерСертификации", "");
		ПараметрыОткрытия.Вставить("ВидПродукции",      Объект.ВидПродукции);
		
		Если Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ") Тогда
			ПараметрыОткрытия.Вставить("ВидПродукции", Объект.ВидПродукции);
		КонецЕсли;
	ИначеЕсли ВариантУточненияДанных = "ДанныеИмпорта" Тогда
		ПараметрыОткрытия.Вставить("ДатаДекларации",                 Дата('00010101'));
		ПараметрыОткрытия.Вставить("РегистрационныйНомерДекларации", "");
		ПараметрыОткрытия.Вставить("Импортер",                       Неопределено);
	КонецЕсли;
	
	Если МассивСтрок.Количество() = 1 Тогда
		
		ВыбраннаяСтрока = Объект.Товары.НайтиПоИдентификатору(МассивСтрок[0]);
		Если ВариантУточненияДанных = "Сертификация" Тогда
			ПараметрыОткрытия.ВидСертификации   = ВыбраннаяСтрока.ВидДокументаСертификации;
			ПараметрыОткрытия.ДатаСертификации  = ВыбраннаяСтрока.ДатаДокументаСертификации;
			ПараметрыОткрытия.НомерСертификации = ВыбраннаяСтрока.НомерДокументаСертификации;
		Иначе
			ПараметрыОткрытия.РегистрационныйНомерДекларации   = ВыбраннаяСтрока.РегистрационныйНомерДекларации;
			ПараметрыОткрытия.ДатаДекларации                   = ВыбраннаяСтрока.ДатаДекларации;
			ПараметрыОткрытия.Импортер                         = ВыбраннаяСтрока.Импортер;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ИдентификаторыСтрок, ВариантУточненияДанных", МассивСтрок, ВариантУточненияДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнениеСертификацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму(
		"ОбщаяФорма.УточнениеСертификацииИС",
		ПараметрыОткрытия, ЭтотОбъект,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеСертификацииЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт

	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантУточненияДанных = ДополнительныеПараметры.ВариантУточненияДанных;
	
	Если ВариантУточненияДанных = "ДанныеИмпорта" Тогда
		
		ПредставлениеДанныхИмпорта= ИнтеграцияИСМПКлиентСервер.ПредставлениеДанныхИмпорта(РезультатВыбора);
		
		Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
		
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			ЗаполнитьЗначенияСвойств(ДанныеСтроки, РезультатВыбора, "Импортер, РегистрационныйНомерДекларации, ДатаДекларации");
			ДанныеСтроки.ДанныеИмпорта = ПредставлениеДанныхИмпорта;
			ИнтеграцияИСМПКлиентСервер.ОбновитьКэшДанныхИмпорта(ЭтотОбъект, РезультатВыбора, ДанныеСтроки.Номенклатура);
			
		КонецЦикла;
		
		НастройкиРаботыССертификацией = ИнтеграцияИСМПКлиент.НастройкиРаботыССертификацией(
			"КэшДанныхИмпорта",
			"ТоварыДанныеИмпорта");
		
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект, НастройкиРаботыССертификацией);
		
	Иначе
		
		ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполненияСертификации, РезультатВыбора);
		ДанныеЗаполненияСертификации.ИспользоватьНомерСкважины = Ложь;
		
		ПредставлениеСертификации = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
		
		Для Каждого ИдентификаторСтроки Из ДополнительныеПараметры.ИдентификаторыСтрок Цикл
			
			ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			ДанныеСтроки.ВидДокументаСертификации   = РезультатВыбора.ВидСертификации;
			ДанныеСтроки.НомерДокументаСертификации = РезультатВыбора.НомерСертификации;
			ДанныеСтроки.ДатаДокументаСертификации  = РезультатВыбора.ДатаСертификации;
			ДанныеСтроки.Сертификация               = ПредставлениеСертификации;
			ИнтеграцияИСМПКлиентСервер.ОбновитьКэшСертификации(ЭтотОбъект, ДанныеЗаполненияСертификации, ДанныеСтроки.Номенклатура);
			
		КонецЦикла;
		
		ИнтеграцияИСМПКлиент.ОбновитьСписокВыбораСертификации(ЭтотОбъект);
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеСертификацииИмпорта()
	
	Для Каждого Строка Из Объект.Товары Цикл
		
		ЗаполнитьПредставлениеСертификации(Строка);
		
		Если ИнтеграцияИСМПКлиентСервер.ДоступноЗаполнениеДанныхИмпорта(Объект.Операция) Тогда
			ЗаполнитьПредставлениеДанныхИмпорта(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСертификации(ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.РегистрационныйНомерДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЗаполненияСертификации = ИнтеграцияИСМПКлиентСервер.ИнициализироватьДанныеЗаполненияСертификации();
	ДанныеЗаполненияСертификации.ВидСертификации   = ДанныеСтроки.ВидДокументаСертификации;
	ДанныеЗаполненияСертификации.ДатаСертификации  = ДанныеСтроки.ДатаДокументаСертификации;
	ДанныеЗаполненияСертификации.НомерСертификации = ДанныеСтроки.НомерДокументаСертификации;
	ДанныеЗаполненияСертификации.ИспользоватьНомерСкважины = Ложь;
	
	ДанныеСтроки.Сертификация = ИнтеграцияИСМПКлиентСервер.ПредставлениеСертификации(ДанныеЗаполненияСертификации);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеДанныхИмпорта(ДанныеСтроки)
	
	Если Не ЗначениеЗаполнено(ДанныеСтроки.РегистрационныйНомерДекларации) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ДанныеИмпорта = ИнтеграцияИСМПКлиентСервер.ПредставлениеДанныхИмпорта(ДанныеСтроки);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагента()
	
	Если Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
		Или Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Истина, "Контрагент");
	Иначе
		СобытияФормИСМППереопределяемый.УстановитьПараметрыВыбораКонтрагента(ЭтотОбъект, Неопределено, "Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТипКонтрагентаСоответствуетОперации(Контрагент, Операция)
	
	ОписаниеТиповКонтрагентГосИС = Метаданные.ОпределяемыеТипы.КонтрагентГосИС.Тип;
	ЭтоОтгрузкаЕАЭС = (Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);
	КонтрагентНеРезидент = ПроверкаИПодборПродукцииИСМП.КонтрагентНеРезидент(Контрагент);
	
	Если Не ЗначениеЗаполнено(Операция) Тогда
		Возврат Истина;
	ИначеЕсли ОписаниеТиповКонтрагентГосИС.СодержитТип(ТипЗнч(Контрагент))
		И КонтрагентНеРезидент
		И ЭтоОтгрузкаЕАЭС Тогда
		Возврат Истина;
	ИначеЕсли ОписаниеТиповКонтрагентГосИС.СодержитТип(ТипЗнч(Контрагент))
		И Не КонтрагентНеРезидент
		И Не ЭтоОтгрузкаЕАЭС Тогда
		Возврат Истина;
	ИначеЕсли Не ОписаниеТиповКонтрагентГосИС.СодержитТип(ТипЗнч(Контрагент))
		И Не ЭтоОтгрузкаЕАЭС Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОперацииНаСервере()
	
	ПроверитьНастроитьТипКонтрагента();
	
	УстановитьПараметрыВыбораКонтрагента();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастроитьТипКонтрагента()
	
	Если Не ТипКонтрагентаСоответствуетОперации(Объект.Контрагент, Объект.Операция) Тогда
		Объект.Контрагент     = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("КонтрагентГосИС");
		Объект.GLNКонтрагента = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("GLN");
	КонецЕсли;
	
	НастроитьТипКонтрагентаПоУмолчанию(Ложь);
	
КонецПроцедуры

#КонецОбласти
