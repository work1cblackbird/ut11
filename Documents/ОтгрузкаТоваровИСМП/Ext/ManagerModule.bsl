#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Подтвержден);
		Статусы.Добавить(Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ПодтвержденЧастично);
	КонецЕсли;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтклоненКлиентом);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Аннулирован);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.АннулированиеОтгрузкиОшибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать Тогда
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.АннулированиеОтгрузкиКПередаче);
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОбрабатывается;
		СтатусыБазовыйПроцесс.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование
		Или Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.АннулированиеОтгрузкиОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.АннулированиеОтгрузкиОбрабатывается;
		СтатусыБазовыйПроцесс.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.АннулированиеОтгрузкиОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
		
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ДополнительныеПараметры.Свойство("ОбновлениеСтатусаДокумента")
			И ДополнительныеПараметры.ОбновлениеСтатусаДокумента Тогда
			
			Если ДополнительныеПараметры.СтатусОбработки  = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована Тогда
				Статус = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Аннулирован;
			Иначе
				Статус = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Подтвержден;
			КонецЕсли;
			
			Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
			Статусы.Принят = Статус;
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.АннулированиеОтгрузкиОшибка;
			Если Не ДополнительныеПараметры.Свойство("ОперацияКвитанции")
				Или Не (ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
					    Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ) Тогда
				Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку);
			КонецЕсли;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		ИначеЕсли ДополнительныеПараметры.Свойство("ОперацияКвитанции")
			И (ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование
			Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать) Тогда
			
			Если ДополнительныеПараметры.Свойство("СтатусОбработки")
				И ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена Тогда
				Статусы.Принят = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Подтвержден;
			Иначе
				Статусы.Принят = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Аннулирован;
			КонецЕсли;
			
			Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОшибка;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		Иначе
			
			Если ДополнительныеПараметры.Свойство("СтатусОбработки")
				И ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаАннулирована Тогда
				
				Статусы.Принят = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Аннулирован;
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.НеТребуется);
			
			Иначе
				
				Статусы.Принят = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.Подтвержден;
				
				Если ДополнительныеПараметры.СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаОжидаетРегистрациюУчастникаГИСМТ Тогда
					Статусы.Обрабатывается = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОжидаетсяРегистрацияУчастникаИСМП;
				Иначе
					Статусы.Обрабатывается = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОжидаетсяПодтверждениеПоступления;
				КонецЕсли;
				Если Не ДополнительныеПараметры.Свойство("ОперацияКвитанции")
					Или Не (ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ
						    Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ) Тогда
					Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку);
				КонецЕсли;
				
			КонецЕсли;
			
			Статусы.Ошибка = Перечисления.СтатусыОбработкиОтгрузкиТоваровИСМП.ОтгрузкаОшибка;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
			
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ, для которого требуется обновить статус.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 16,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 17,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулирование);
		
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиОтгрузкиТоваровИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ Отгрузка товаров ИС МП.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ОтгрузкаТоваровJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеОтгрузку Тогда
		
		Возврат АннулироватьОтгрузкуТоваровJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

// Формирует абстрактное JSON сообщение для операции аннулирования отгрузки товаров
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ Отгрузка Товаров ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АннулироватьОтгрузкуТоваровJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАннулировать;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	Шапка.Организация                        КАК Организация,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Представление(Шапка.Организация)         КАК ОрганизацияПредставление,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Ссылка,
	|	Шапка.ИдентификаторЗаявкиНаОтгрузку      КАК ИдентификаторЗаявкиНаОтгрузку
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий()
		Или Не ЗначениеЗаполнено(Шапка.ИдентификаторЗаявкиНаОтгрузку) Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ТекстСообщенияJSON  = Неопределено;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Ложь;
	
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для операции отгрузки товаров
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ Отгрузка Товаров ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ОтгрузкаТоваровJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                                    КАК Номер,
	|	Шапка.Дата                                     КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0)       КАК ПоследнийНомерВерсии,
	|
	|	Шапка.Организация                              КАК Организация,
	|	Представление(Шапка.Организация)               КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                            КАК Ответственный,
	|	Представление(Шапка.Ответственный)             КАК ОтветственныйПредставление,
	|
	|	Шапка.ДокументОснование                        КАК ДокументОснование,
	|
	|	Шапка.Операция                                 КАК Операция,
	|	Шапка.НомерПервичногоДокумента                 КАК НомерПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента                  КАК ДатаПервичногоДокумента,
	|	Шапка.ВидПродукции                             КАК ВидПродукции,
	|	Шапка.Контрагент                               КАК Контрагент,
	|	Представление(Шапка.Контрагент)                КАК КонтрагентПредставление,
	|	Шапка.GLNКонтрагента                           КАК GLNКонтрагента,
	|	Шапка.ОтгрузкаНеучастнику                      КАК ОтгрузкаНеучастнику,
	|
	|	Шапка.ДатаОтгрузки                             КАК ДатаОтгрузки,
	|	Шапка.ДатаВыводаИзОборота                      КАК ДатаВыводаИзОборота,
	|	Представление(Шапка.ИдентификаторГосКонтракта) КАК ИдентификаторГосКонтрактаПредставление,
	|	ЕСТЬNULL(Шапка.СтранаНазначения.Код, """")     КАК СтранаНазначенияКод,
	|	Шапка.Ссылка                                   КАК Ссылка
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	ТекстЗапросаТовары = 
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура                      КАК Номенклатура,
	|	Товары.Характеристика                    КАК Характеристика,
	|	Товары.GTIN                              КАК GTIN,
	|	Товары.Серия                             КАК Серия,
	|	Товары.Упаковка                          КАК Упаковка,
	|	Товары.Количество                        КАК Количество,
	|	Товары.КоличествоУпаковок                КАК КоличествоУпаковок,
	|	&ИдентификаторПроисхожденияВЕТИССтрокой  КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Товары.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|
	|	Товары.ВидДокументаСертификации        КАК ВидДокументаСертификации,
	|	Товары.НомерДокументаСертификации      КАК НомерДокументаСертификации,
	|	Товары.ДатаДокументаСертификации       КАК ДатаДокументаСертификации,
	|
	|	Товары.Импортер                       КАК Импортер,
	|	Представление(Товары.Импортер)        КАК ИмпортерПредставление,
	|	Товары.РегистрационныйНомерДекларации КАК РегистрационныйНомерДекларации,
	|	Товары.ДатаДекларации                 КАК ДатаДекларации,
	|	Товары.Производитель                  КАК Производитель,
	|	Представление(Товары.Производитель)   КАК ПроизводительПредставление,
	|	Товары.ДатаПроизводства               КАК ДатаПроизводства,
	|	Товары.СрокГодности                   КАК СрокГодности,
	|
	|	// Дополнительные реквизиты
	|	Товары.Цена      КАК Цена,
	|	Товары.Сумма     КАК Сумма,
	|	Товары.СуммаНДС  КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары, Истина);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.СрокГодности     КАК СрокГодности
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;

	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	ДоступныеВидыПродукцииИС = ДоступныеВидыПродукцииИСМП();
	
	Если ДоступныеВидыПродукцииИС.Найти(Шапка.ВидПродукции) = Неопределено Тогда
		
		СообщениеJSON.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Вид продукции ""%1"" не поддерживается для отгрузки товаров.'"),
					Шапка.ВидПродукции);
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;

	КонецЕсли;
	
	ВидыОперацийПоВидуПродукцииИС = ДоступныеВидыОперацийПоВидуПродукцииИС();
	ВидыОперацийПоВидуПродукции = ВидыОперацийПоВидуПродукцииИС.Получить(Шапка.ВидПродукции);
	
	Если ВидыОперацийПоВидуПродукции = Неопределено
		Или ВидыОперацийПоВидуПродукции.Найти(Шапка.Операция) = Неопределено Тогда
		
		СообщениеJSON.ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Вид операции ""%1"" не поддерживается для отгрузки товаров.'"),
					Шапка.Операция);
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;

	КонецЕсли;
	
	ВидОперации               = Неопределено;
	ВидОперацииВыводИзОборота = "";
	ВыведенИзОборота          = Ложь;
	ЭтоОтгрузкаЕАЭС           = Ложь;
	ЭтоОтгрузкаЕАЭСПриОСУ     = Ложь;
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа Тогда
		ВидОперации = "SELLING";
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия Тогда
		ВидОперации = "COMMISSION";
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент Тогда
		ВидОперации = "AGENT";
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаБезвозмезднаяПередача Тогда
		ВидОперации = "SELLING";
		ВидОперацииВыводИзОборота = "DONATION";
		ВыведенИзОборота = Истина;
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаПриобретениеГосПредприятием Тогда
		ВидОперации = "SELLING";
		ВидОперацииВыводИзОборота = "STATE_ENTERPRISE";
		ВыведенИзОборота = Истина;
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаДляСобственныхНуждПокупателя Тогда
		ВидОперации = "SELLING";
		ВидОперацииВыводИзОборота = "NO_RETAIL_USE";
		ВыведенИзОборота = Истина;
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
		ЭтоОтгрузкаЕАЭС = Истина;
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ Тогда
		ЭтоОтгрузкаЕАЭС       = Истина;
		ЭтоОтгрузкаЕАЭСПриОСУ = Истина
	Иначе
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Неизвестный тип операции Уведомление об отгрузке маркированных товаров ИС МП: %1'"), Шапка.Операция));
	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
	
	Если ЭтоОтгрузкаЕАЭС Тогда
		ИдентификаторПолучателя = ИнтеграцияИСВызовСервера.НалоговыйНомерКонтрагента(Шапка.Контрагент);
		Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""Налоговый номер в стране регистрации"".
							   |Контрагент: %1'"), Шапка.Контрагент));
		КонецЕсли;
	Иначе
		РеквизитыКонтрагента = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Контрагент);
		Если Не ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН) Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не заполнено поле ""ИНН"" для грузополучателя %1'"), Шапка.Контрагент));
		КонецЕсли;
		ИдентификаторПолучателя = РеквизитыКонтрагента.ИНН;
	КонецЕсли;
	
	ТелоЗапроса = Новый Структура;
	
	ТелоЗапроса.Вставить("document_num",  Шапка.НомерПервичногоДокумента);
	ТелоЗапроса.Вставить("document_date", ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
	ТелоЗапроса.Вставить("transfer_date", ИнтеграцияИС.ДатаUTC(Шапка.ДатаОтгрузки));
	ТелоЗапроса.Вставить("receiver_inn",  ИдентификаторПолучателя);
	
	Если ЭтоОтгрузкаЕАЭСПриОСУ Тогда
		ТелоЗапроса.Вставить("country",       Шапка.СтранаНазначенияКод);
		ТелоЗапроса.Вставить("exporter_inn",  РеквизитыОрганизации.ИНН);
		ТелоЗапроса.Вставить("receiver_name", Шапка.КонтрагентПредставление);
	ИначеЕсли ЭтоОтгрузкаЕАЭС Тогда
		ТелоЗапроса.Вставить("receiver_country_code", Шапка.СтранаНазначенияКод);
		ТелоЗапроса.Вставить("sender_inn",            РеквизитыОрганизации.ИНН);
	Иначе
		ТелоЗапроса.Вставить("request_type",       "SHIPMENT");
		ТелоЗапроса.Вставить("to_not_participant", Шапка.ОтгрузкаНеучастнику);
		ТелоЗапроса.Вставить("sender_inn",         РеквизитыОрганизации.ИНН);
		
		Если ВыведенИзОборота Тогда
			ТелоЗапроса.Вставить("withdrawal_date", ИнтеграцияИС.ДатаUTC(Шапка.ДатаВыводаИзОборота));
			ТелоЗапроса.Вставить("withdrawal_type", ВидОперацииВыводИзОборота);
		КонецЕсли;
		
		ТелоЗапроса.Вставить("turnover_type",  ВидОперации);
		ТелоЗапроса.Вставить("st_contract_id", Шапка.ИдентификаторГосКонтрактаПредставление);
	КонецЕсли;
	
	Если ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеGLNКонтрагентаПриОтгрузкеТоваров(Шапка.Операция)
		И ЗначениеЗаполнено(Шапка.GLNКонтрагента) Тогда
		ТелоЗапроса.Вставить("receiver_gln", Шапка.GLNКонтрагента);
	КонецЕсли;
	
	ТелоЗапроса.Вставить("products", Новый Массив);
	
	Если ЭтоОтгрузкаЕАЭСПриОСУ Тогда
		
		КолонкиУникальности = СтрШаблон(
			"%1,%2",
			Метаданные.Документы.ОтгрузкаТоваровИСМП.ТабличныеЧасти.Товары.Реквизиты.GTIN.Имя,
			Метаданные.Документы.ОтгрузкаТоваровИСМП.ТабличныеЧасти.Товары.Реквизиты.ИдентификаторПроисхожденияВЕТИССтрокой.Имя);
		
		Товары.Свернуть(
			КолонкиУникальности +
			",Номенклатура,Характеристика,ВидДокументаСертификации,НомерДокументаСертификации,ДатаДокументаСертификации",
			"Количество,КоличествоПотребительскихУпаковок,Сумма,СуммаНДС");
		Товары.Индексы.Добавить(КолонкиУникальности);
		
		ТаблицаУникальности = Товары.Скопировать(, КолонкиУникальности);
		ТаблицаУникальности.Свернуть(КолонкиУникальности);
		
		ТекстыОшибокПоСертификатам = Новый Массив();
		
		Для Каждого СтрокаУникальности Из ТаблицаУникальности Цикл
			
			ДанныеОтбора = Новый Структура(КолонкиУникальности);
			ЗаполнитьЗначенияСвойств(ДанныеОтбора, СтрокаУникальности);
			
			НайденныеСтроки = Товары.НайтиСтроки(ДанныеОтбора);
			
			ПредставлениеУпаковки           = Неопределено;
			ДанныеСертификации              = Новый Массив();
			ЕстьСтрокиБезСертификата        = Ложь;
			ЕстьСтрокиСУказаниемСертификата = Ложь;
			
			СтрокаПродукции = Новый Структура;
			СтрокаПродукции.Вставить("gtin",         "");
			СтрокаПродукции.Вставить("cis_quantity", 0);
			СтрокаПродукции.Вставить("cost",         0);
			СтрокаПродукции.Вставить("tax",          0);
			
			Для Каждого СтрокаТоваров Из НайденныеСтроки Цикл
				
				СтрокаПродукции.gtin = СтрокаТоваров.GTIN;
				
				ТекущееПредставлениеУпаковки = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						СтрокаТоваров.Номенклатура, СтрокаТоваров.Характеристика);
				Если ПредставлениеУпаковки = Неопределено Тогда
					ПредставлениеУпаковки = ТекущееПредставлениеУпаковки;
				ИначеЕсли ТекущееПредставлениеУпаковки <> ПредставлениеУпаковки Тогда
					ПредставлениеУпаковки = "";
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТоваров.КоличествоПотребительскихУпаковок) Тогда
					СтрокаПродукции.cis_quantity = СтрокаПродукции.cis_quantity + СтрокаТоваров.КоличествоПотребительскихУпаковок;
				Иначе
					СтрокаПродукции.cis_quantity = СтрокаПродукции.cis_quantity + СтрокаТоваров.Количество;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТоваров.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
					СтрокаПродукции.Вставить("vsd_number", СтрокаТоваров.ИдентификаторПроисхожденияВЕТИССтрокой);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТоваров.Сумма) Тогда
					СтрокаПродукции.cost = СтрокаПродукции.cost + СтрокаТоваров.Сумма    * 100;
					СтрокаПродукции.tax  = СтрокаПродукции.tax  + СтрокаТоваров.СуммаНДС * 100;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТоваров.ВидДокументаСертификации) Тогда
					ДанныеТекущегоСертификата = Новый Структура();
					ДанныеТекущегоСертификата.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТоваров.ВидДокументаСертификации));
					ДанныеТекущегоСертификата.Вставить("certificate_number", СтрокаТоваров.НомерДокументаСертификации);
					ДанныеТекущегоСертификата.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТоваров.ДатаДокументаСертификации));
					СертификатУжеДобавлен = Ложь;
					Для Каждого ДобавленныйСертификат Из ДанныеСертификации Цикл
						ДанныеСертификатаСоответствуют = Истина;
						Для Каждого КлючИЗначение Из ДанныеТекущегоСертификата Цикл
							Если ДобавленныйСертификат[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
								ДанныеСертификатаСоответствуют = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ДанныеСертификатаСоответствуют Тогда
							СертификатУжеДобавлен = Истина;
						КонецЕсли;
					КонецЦикла;
					Если Не СертификатУжеДобавлен Тогда
						ДанныеСертификации.Добавить(ДанныеТекущегоСертификата);
					КонецЕсли;
					ЕстьСтрокиСУказаниемСертификата = Истина;
				Иначе
					ЕстьСтрокиБезСертификата = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьСтрокиСУказаниемСертификата И ЕстьСтрокиБезСертификата Тогда
				
				ПредставлениеКлючевыхПолей = Новый Массив();
				Для Каждого ИмяПоляКлюч Из СтрРазделить(КолонкиУникальности, ",") Цикл
					Если Не ЗначениеЗаполнено(СтрокаУникальности[ИмяПоляКлюч]) Тогда
						Продолжить;
					КонецЕсли;
					ПредставлениеКлючевыхПолей.Добавить(
						СтрШаблон("%1: %2",
							Метаданные.Документы.ОтгрузкаТоваровИСМП.ТабличныеЧасти.Товары.Реквизиты.Найти(ИмяПоляКлюч).Синоним,
							СтрокаУникальности[ИмяПоляКлюч]));
				КонецЦикла;
				ТекстыОшибокПоСертификатам.Добавить(
					СтрШаблон(
						НСтр("ru = 'Для всех строк %1 необходимо или указать данные сертификации или не указывать.'"),
						СтрСоединить(ПредставлениеКлючевыхПолей, ", ")));
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПредставлениеУпаковки) Тогда
				СтрокаПродукции.Вставить("product_name", ПредставлениеУпаковки);
			КонецЕсли;
			Если ДанныеСертификации.Количество() Тогда
				СтрокаПродукции.Вставить("certificate_document_data", ДанныеСертификации);
			КонецЕсли;
			
			ТелоЗапроса.products.Добавить(СтрокаПродукции);
		
		КонецЦикла;
		
		Если ТекстыОшибокПоСертификатам.Количество() Тогда
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрСоединить(ТекстыОшибокПоСертификатам, Символы.ПС));
		КонецЕсли;
		
	Иначе
		
		МассивКонтрагентов = Товары.ВыгрузитьКолонку("Импортер");
		МассивКонтрагентов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКонтрагентов);
		
		МассивПроизводителей = Товары.ВыгрузитьКолонку("Производитель");
		МассивПроизводителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПроизводителей);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивКонтрагентов, МассивПроизводителей, Истина);
		
		СоответствиеИННКонтрагентов = ИнтеграцияИСМП.ИНННалоговыйНомерКонтрагентов(МассивКонтрагентов);
		
		// Заполнение данных по маркируемым товарам
		ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
		ПараметрыСканирования.СсылкаНаОбъект = Шапка.Ссылка;
		ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
		
		ДоступнаДатаПроизводства = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступнаДатаПроизводстваПриПриемкеОтгрузке(Шапка.Операция, Шапка.ВидПродукции);
		ДоступенСрокГодности = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(Шапка.Операция, Шапка.ВидПродукции);
		
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,, Истина);
		
		Если ЭтоОтгрузкаЕАЭС Тогда
			ИсточникДанных = РезультатПоиска.МаркированныеТовары; // Для операции ЕАЭС могут передаваться только КИ
		Иначе
			ИсточникДанных = РезультатПоиска.ДеревоУпаковок.Строки;
		КонецЕсли;
		
		ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
		ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
		ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
		
		ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
		ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
		
		Для Каждого СтрокаТоваров Из ИсточникДанных Цикл
			
			ПараметрыОтбораСтрок = Новый Массив;

			Если СтрокаТоваров.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская
				Или СтрокаТоваров.ВидУпаковки = Перечисления.ВидыУпаковокИС.Набор И Не ЭтоОтгрузкаЕАЭС Тогда
				
				Если ЭтоОтгрузкаЕАЭС Тогда
					ИмяРеквизитаКИ = "cis";
				Иначе
					ИмяРеквизитаКИ = "uit_code";
				КонецЕсли;
				
				ДанныеОтбора = Новый Структура;
				ДанныеОтбора.Вставить("Номенклатура",   СтрокаТоваров.Номенклатура);
				ДанныеОтбора.Вставить("Характеристика", СтрокаТоваров.Характеристика);
				ДанныеОтбора.Вставить("Серия",          СтрокаТоваров.Серия);
				Если ДоступенСрокГодности Тогда
					ДанныеОтбора.Вставить("СрокГодности", СтрокаТоваров.ГоденДо);
				КонецЕсли;
				
				ПараметрыОтбораСтрок.Добавить(ДанныеОтбора);
				
			ИначеЕсли СтрокаТоваров.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
				
				ИмяРеквизитаКИ = "uitu_code";
				
				ПараметрыОтбораСтрок = СтруктураОтбораПоСоставуУпаковки(СтрокаТоваров);

			Иначе
				
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Передача кодов с видом упаковки ""%1"" не поддерживается.'"),
							СтрокаТоваров.ВидУпаковки));
				Продолжить;

			КонецЕсли;
			
			СтоимостьУпаковки        = 0;
			СуммаНДСУпаковки         = 0;
			КоличествоЕдиницУпаковки = 0;
			ДатаПроизводства         = Дата(1, 1, 1);
			
			Для Каждого ПараметрыОтбора Из ПараметрыОтбораСтрок Цикл
				
				НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаТЧТовары = НайденныеСтроки[0];
					
					Если СтрокаТЧТовары.Количество = 0 Тогда
						ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""Количество"" для номенклатуры %1.'"), ПараметрыОтбора.Номенклатура));
					Иначе
						ПредставлениеУпаковки = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТЧТовары.Номенклатура, СтрокаТЧТовары.Характеристика);
						
						СтоимостьУпаковки = СтоимостьУпаковки + СтрокаТЧТовары.Цена;
						СуммаНДСУпаковки  = СуммаНДСУпаковки  + СтрокаТЧТовары.СуммаНДС/СтрокаТЧТовары.Количество;
						КоличествоЕдиницУпаковки = КоличествоЕдиницУпаковки + 1;
						
						Если ДоступнаДатаПроизводства
							И Не ЗначениеЗаполнено(ДатаПроизводства) Тогда
							ДатаПроизводства = СтрокаТЧТовары.ДатаПроизводства;
						КонецЕсли;
						
						ДанныеСертификации = Неопределено;
						ДанныеИмпорта      = Неопределено;
						ДанныеПроизводства = Неопределено;
						
						Если ЭтоОтгрузкаЕАЭС Тогда
							
							Если ЗначениеЗаполнено(СтрокаТЧТовары.ВидДокументаСертификации) Тогда
								ДанныеСертификации = Новый Структура;
								ДанныеСертификации.Вставить("certificate_type",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификации(СтрокаТЧТовары.ВидДокументаСертификации));
								ДанныеСертификации.Вставить("certificate_number", СтрокаТЧТовары.НомерДокументаСертификации);
								ДанныеСертификации.Вставить("certificate_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДокументаСертификации));
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаТЧТовары.Импортер) Тогда
								ИННКонтрагента = СоответствиеИННКонтрагентов[СтрокаТЧТовары.Импортер];
								Если Не ЗначениеЗаполнено(ИННКонтрагента) Тогда
									ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
										СообщениеJSON,
										СтрШаблон(
											НСтр("ru = 'Не указан ИНН (или аналог) импортера %1 для номенклатуры %2'"),
												СтрокаТЧТовары.ИмпортерПредставление,
												ПараметрыОтбора.Номенклатура));
								Иначе
									ДанныеИмпорта = Новый Структура;
									ДанныеИмпорта.Вставить("importer_id",        ИННКонтрагента);
									ДанныеИмпорта.Вставить("importer_name",      СтрокаТЧТовары.ИмпортерПредставление);
									ДанныеИмпорта.Вставить("declaration_number", СтрокаТЧТовары.РегистрационныйНомерДекларации);
									ДанныеИмпорта.Вставить("declaration_date",   ИнтеграцияИС.ДатаUTC(СтрокаТЧТовары.ДатаДекларации));
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(СтрокаТЧТовары.Производитель) Тогда
								ИННКонтрагента = СоответствиеИННКонтрагентов[СтрокаТЧТовары.Производитель];
								Если Не ЗначениеЗаполнено(ИННКонтрагента) Тогда
									ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
										СообщениеJSON,
										СтрШаблон(
											НСтр("ru = 'Не указан ИНН (или аналог) производителя %1 для номенклатуры %2'"),
												СтрокаТЧТовары.ПроизводительПредставление,
												ПараметрыОтбора.Номенклатура));
								Иначе
									ДанныеПроизводства = Новый Структура;
									ДанныеПроизводства.Вставить("producer_id",        ИННКонтрагента);
									ДанныеПроизводства.Вставить("producer_name",      СтрокаТЧТовары.ПроизводительПредставление);
								КонецЕсли;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
							ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
					Если ДоступенСрокГодности Тогда
						ТекстОшибки = СтрШаблон(
							НСтр("ru = '%1 Срок годности %2.'"),
							ТекстОшибки,
							ПараметрыОтбора.СрокГодности);
					КонецЕсли;
					
					ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
					
				Иначе
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
							ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
					Если ДоступенСрокГодности Тогда
						ТекстОшибки = СтрШаблон(
							НСтр("ru = '%1 Срок годности %2.'"),
							ТекстОшибки,
							ПараметрыОтбора.СрокГодности);
					КонецЕсли;
					
					ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТЧ = Новый Структура;
			
			СтрокаТЧ.Вставить("product_cost",        Формат(СтоимостьУпаковки * 100,     "ЧГ=0;"));
			СтрокаТЧ.Вставить("product_tax",         Формат(Окр(СуммаНДСУпаковки * 100), "ЧГ=0;"));
			СтрокаТЧ.Вставить("product_description", ПредставлениеУпаковки);
				
			Если ЭтоОтгрузкаЕАЭС Тогда
				
				Если ДанныеСертификации <> Неопределено Тогда
					СтрокаТЧ.Вставить("certificate_document_data", Новый Массив);
					СтрокаТЧ.certificate_document_data.Добавить(ДанныеСертификации);
				КонецЕсли;
				
				Если ДанныеИмпорта <> Неопределено Тогда
					СтрокаТЧ.Вставить("import_data", ДанныеИмпорта);
				КонецЕсли;
				
				Если ДанныеПроизводства <> Неопределено Тогда
					СтрокаТЧ.Вставить("production_data", ДанныеПроизводства);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДоступнаДатаПроизводства
				И ЗначениеЗаполнено(ДатаПроизводства) Тогда
				СтрокаТЧ.Вставить("production_date", ИнтеграцияИС.ДатаUTC(ДатаПроизводства));
			КонецЕсли;
			
			Если ДоступенСрокГодности
				И ЗначениеЗаполнено(СтрокаТоваров.ГоденДо) Тогда
				СтрокаТЧ.Вставить("expiration_date", ИнтеграцияИС.ДатаUTC(СтрокаТоваров.ГоденДо));
			КонецЕсли;
			
			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
				СтрокаТоваров.Штрихкод, Шапка.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
			
			СтрокаТЧ.Вставить(
				ИмяРеквизитаКИ,
				ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
			
			ТелоЗапроса.products.Добавить(СтрокаТЧ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщениеJSON.Операция                  = Шапка.Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция СтруктураОтбораПоСоставуУпаковки(ДеревоУпаковок, ДанныеОтбора = Неопределено)
	
	Если ДанныеОтбора = Неопределено Тогда
		Результат = Новый Массив;
	Иначе
		Результат = ДанныеОтбора;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СтруктураОтбораПоСоставуУпаковки(СтрокаДерева, Результат);
		
		Если Не ПустаяСтрока(СтрокаДерева.Штрихкод)
			И СтрокаДерева.ВидУпаковки = Перечисления.ВидыУпаковокИС.Потребительская Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаДерева.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          СтрокаДерева.Серия);
			
			Результат.Добавить(ПараметрыОтбора);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеВидыПродукцииИСМП() Экспорт
	
	ВидыПродукцииИСМП = Новый Массив();
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
	
	Возврат ВидыПродукцииИСМП;
	
КонецФункции

Функция ДоступныеВидыОперацийПоВидуПродукцииИС() Экспорт

	ОтгрузкаЕАЭССПризнаниемКИ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ);
	ОтгрузкаВЕАЭСПриОСУ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ);
	
	ВидыОперацийПоВидуПродукцииИС = Новый Соответствие;
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.Шины, ОтгрузкаЕАЭССПризнаниемКИ);
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.Обувь, ОтгрузкаЕАЭССПризнаниемКИ);
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.ЛегкаяПромышленность, ОтгрузкаЕАЭССПризнаниемКИ);
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС, ОтгрузкаВЕАЭСПриОСУ);
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС, ОтгрузкаВЕАЭСПриОСУ);
	
	ОтгрузкаТоварыИзМеха = Новый Массив;
	ОтгрузкаТоварыИзМеха.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаПродажа);
	ОтгрузкаТоварыИзМеха.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаКомиссия);
	ОтгрузкаТоварыИзМеха.Добавить(Перечисления.ВидыОперацийИСМП.ОтгрузкаАгент);
	
	ВидыОперацийПоВидуПродукцииИС.Вставить(Перечисления.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха, ОтгрузкаТоварыИзМеха);
	
	Возврат ВидыОперацийПоВидуПродукцииИС;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ОтгрузкаТоваровИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ОтгрузкаТоваровИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ОтгрузкаТоваровИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или (Форма.Объект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ
			И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая) Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИС.ПрименитьКешШтрихкодовУпаковок(Форма);
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды) Экспорт
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ДоступенСрокГодности = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(
		ИсточникДанных.Операция, ИсточникДанных.ВидПродукции);
	
	ЭтоОтгрузкаИзЕАЭСПриОСУ = (Форма.Объект.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийИСМП.ОтгрузкаВЕАЭСПриОСУ"));
	СпецификаОбработки      = "";
	ОбработкаБезМаркировки  = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки
		Или ЭтоОтгрузкаИзЕАЭСПриОСУ;
	
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		СпецификаОбработки = СпецификаОбработки + ",КоличествоКодов";
	КонецЕсли;
	ИспользоватьGTIN = Ложь;
	Если ЭтоОтгрузкаИзЕАЭСПриОСУ Тогда
		Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И (Не МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ДанныеШтрихкода.GTIN)
			Или РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(ДанныеШтрихкода.GTIN)
			Или РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(ДанныеШтрихкода.GTIN)) Тогда
			ИспользоватьGTIN = Ложь;
		Иначе
			ИспользоватьGTIN = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьGTIN Тогда
		СпецификаОбработки = СпецификаОбработки + ",GTIN";
	КонецЕсли;
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	Если ДоступенСрокГодности Тогда
		ОбновляемаяСтрока.Вставить("СрокГодности", ДанныеШтрихкода.ГоденДо);
	КонецЕсли;
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(, ИспользоватьGTIN);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	Если ДоступенСрокГодности Тогда
		ПараметрыПоиска.Вставить("СрокГодности", ДанныеШтрихкода.ГоденДо);
	КонецЕсли;
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		КоличествоМаркируемойПродукции = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = 0;
		Если Не ОбработкаБезМаркировки Тогда
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		
		СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемойПродукции;
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемойПродукции;
		
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТовары);
		
		Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
			//поле Количество потребительских кодов маркировки
			КоличествоМаркируемойПродукции = ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;
			
			Если Не ЭтоОтгрузкаИзЕАЭСПриОСУ Тогда
				ВсегоПоПараметрамПоиска = 0;
				Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
					ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.КоличествоПотребительскихУпаковок;
				КонецЦикла;
			
				ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, "КоличествоПотребительскихУпаковок");
				
				Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
					КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
				КонецЕсли;
			КонецЕсли;
			
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + КоличествоМаркируемойПродукции;
			
		КонецЕсли;
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
		
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - Структура - (См. ПроверкаИПодборМОТП.ЗафиксироватьРезультатПроверкиИПодбора)
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	ДоступенСрокГодности = ИнтеграцияИСМПСлужебныйКлиентСервер.ДоступенСрокГодностиПриПриемкеОтгрузке(
		ДокументОбъект.Операция, ДокументОбъект.ВидПродукции);
	
	ДобавленныеСтроки       = Новый Массив;
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
			
		ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика", СтрокаТаблицы.Номенклатура, СтрокаТаблицы.Характеристика);
		Если ЗначениеЗаполнено(СтрокаТаблицы.Серия) Тогда
			ПараметрыОтбора.Вставить("Серия", СтрокаТаблицы.Серия);
		КонецЕсли;
		Если ДоступенСрокГодности Тогда
			ПараметрыОтбора.Вставить("СрокГодности", СтрокаТаблицы.СрокГодности);
		КонецЕсли;
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
			ДобавленныеСтроки.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	//Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
			Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	Если ДобавленныеСтроки.Количество() Тогда
		
		ВременнаяТаблица = ДокументОбъект.Товары.Выгрузить(ДобавленныеСтроки);
		ЗаполнениеОбъектовПоСтатистикеИСМП.ЗаполнитьДанныеПоТоварамОтгрузкиТоваровИСМП(
			ВременнаяТаблица, ДокументОбъект);
		
		Если ВременнаяТаблица.Количество() Тогда
			Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
				ДанныеЗаполненияСертификации = ВременнаяТаблица.Найти(ДобавленнаяСтрока.Номенклатура, "Номенклатура");
				Если ДанныеЗаполненияСертификации <> Неопределено Тогда
					
					ПоляЗаполнения = Новый Массив;
					ПоляЗаполнения.Добавить("ВидДокументаСертификации");
					ПоляЗаполнения.Добавить("НомерДокументаСертификации");
					ПоляЗаполнения.Добавить("ДатаДокументаСертификации");
					
					Если ДокументОбъект.Операция = Перечисления.ВидыОперацийИСМП.ОтгрузкаЕАЭССПризнаниемКИ Тогда
						ПоляЗаполнения.Добавить("Импортер");
						ПоляЗаполнения.Добавить("РегистрационныйНомерДекларации");
						ПоляЗаполнения.Добавить("ДатаДекларации");
						ПоляЗаполнения.Добавить("Производитель");
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(
						ДобавленнаяСтрока,
						ДанныеЗаполненияСертификации,
						СтрСоединить(ПоляЗаполнения, ","));
						
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтгрузкаТоваровИСМПТовары.Номенклатура,
	|	ОтгрузкаТоваровИСМПТовары.Характеристика,
	|	ОтгрузкаТоваровИСМПТовары.Серия,
	|	ОтгрузкаТоваровИСМПТовары.СрокГодности КАК ГоденДо,
	|	ОтгрузкаТоваровИСМПТовары.Количество
	|ИЗ
	|	Документ.ОтгрузкаТоваровИСМП.Товары КАК ОтгрузкаТоваровИСМПТовары
	|ГДЕ
	|	ОтгрузкаТоваровИСМПТовары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ВидПродукции"),
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

#КонецОбласти

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ОтгрузкаТоваровИСМП, Ограничение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#КонецЕсли
