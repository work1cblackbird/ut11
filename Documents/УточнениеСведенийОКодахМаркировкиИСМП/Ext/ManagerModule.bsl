#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
// Параметры:
//  ТребуетсяПовторноеОформление - булево.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ПередачаКорректировкиСведенийКМОбработана);
		Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОбработан);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.КорректировкаСведенийКМОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// Параметры:
//  СтруктураПараметров - Структура.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
			Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				СтруктураПараметров.ОбъектРасчета,
				"ВидПродукции, Операция");
		Иначе
			Реквизиты = СтруктураПараметров;
		КонецЕсли;
		
		Если Реквизиты.Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
			Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.КорректировкаСведенийКМПередаче);
		
		Возврат ПараметрыОбновления;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииКПередаче);
		
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		Или Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.КорректировкаСведенийКМОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.КорректировкаСведенийКМОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
		Возврат ПараметрыОбновления;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт

	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И (ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот)
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
		   Или ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес
		Тогда

		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ПередачаКорректировкиСведенийКМОбработана;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.КорректировкаСведенийКМОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		Возврат ПараметрыОбновления;
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента
		И ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда

		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		Статусы.Принят = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОбработан;
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП.ОтчетОПеревзвешиванииОшибкаПередачи;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Обновить статус после подготовки к передаче данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после передачи данных.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура -Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 14,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 15,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 16,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 17,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес);

	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиУточненияСведенийОКодахМаркировкиИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки() Экспорт
	
	ВидыПродукцииИСМП = Новый Массив();
	
	// CIRCULATION_INFORMATION - отключено с 01.10.23
	
	// CIRCULATION_INFORMATION_2 - отключено с 01.10.23
	
	// CIS_INFORMATION_CHANGE
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табак"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.АльтернативныйТабак"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.НикотиносодержащаяПродукция"));
	
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Антисептики"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольноеПиво"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БАДы"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Духи"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.КреслаКоляски"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ТехническиеСредстваРеабилитации"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МедицинскиеИзделия"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Обувь"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Пиво"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПивоВПотребительскихУпаковках"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ЛегкаяПромышленность"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.ПродукцияИзНатуральногоМеха"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.УпакованнаяВода"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Фотоаппараты"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Шины"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.СоковаяПродукция"));
	ВидыПродукцииИСМП.Добавить(ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.БезалкогольныеНапитки"));
	
	Возврат ВидыПродукцииИСМП;

КонецФункции

Функция ВидПродукцииИспользуетУточнениеСроковГодности(ВидПродукции) Экспорт
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Антисептики
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольноеПиво
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.КреслаКоляски
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.ТехническиеСредстваРеабилитации
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МедицинскиеИзделия
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияБезВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.МолочнаяПродукцияПодконтрольнаяВЕТИС
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.СоковаяПродукция
		Или ВидПродукции = Перечисления.ВидыПродукцииИС.БезалкогольныеНапитки Тогда
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ.
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат СведенияОРазрешительнойДокументацииJSON(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет Тогда
		
		Возврат ОтчетОПеревзвешиванииJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеОтчет);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - См. Обработки.ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	МассивОбработанныхСтрок = Новый Массив;
	
	СпецификаОперацииНанесения = ВидПродукцииИспользуетУточнениеСроковГодности(ДокументОбъект.ВидПродукции);
	
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Ложь, СпецификаОперацииНанесения);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаТаблицы);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТаблицы.КоличествоПотребительскихУпаковок;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + СтрокаТаблицы.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура   КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Серия          КАК Серия,
	|	Товары.Количество     КАК Количество,
	|	Товары.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|	Товары.ИдентификаторПроисхожденияВЕТИС   КАК ИдентификаторПроисхожденияВЕТИС,
	|	&СкоропортящаясяПродукция                КАК СкоропортящаясяПродукция,
	|	Товары.СрокГодности                      КАК ГоденДо
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &ДокументСсылка";
	
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(Запрос);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СкоропортящаясяПродукция", "ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);

	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);

КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП, Ограничение);

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий. Переопределяется.
//
//Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП);
	
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе. Переопределяется.
//
//Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
//
//Возвращаемое значение:
//  Произвольный - параметры указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП, Объект);
	
КонецФункции

//Возвращает текст запроса для расчета статусов указания серий. Переопределяется.
//
//Параметры:
//   ПараметрыУказанияСерий - Произвольный - см. ПараметрыУказанияСерий.
//
//Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.УточнениеСведенийОКодахМаркировкиИСМП, ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СообщенияJSON

// Формирует JSON сообщения для документов "Сведения о кодах идентификации для ввода товара в оборот",
// "Сведения о разрешительной документации для ввода товара в оборот" (см. ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки()).
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ Уточнение сведений о кодах маркировки ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция СведенияОРазрешительнойДокументацииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.Операция          КАК Операция,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ОтчетПроизводственнойЛинии КАК ОтчетПроизводственнойЛинии,
	|
	|	Шапка.ВидДокументаСертификации   КАК ВидДокументаСертификации,
	|	Шапка.НомерДокументаСертификации КАК НомерДокументаСертификации,
	|	Шапка.ДатаДокументаСертификации  КАК ДатаДокументаСертификации,
	|
	|	Шапка.КодТНВЭД                               КАК КодТНВЭД,
	|	Шапка.ДатаПроизводства                       КАК ДатаПроизводства,
	|	Шапка.СрокГодности                           КАК СрокГодности,
	|	Шапка.СпособВводаВОборот                     КАК СпособВводаВОборот,
	|	Шапка.ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой,
	|	Шапка.ИдентификаторПроисхожденияВЕТИС        КАК ИдентификаторПроисхожденияВЕТИС,
	|
	|	Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС КАК ИдентификаторПроизводственнойПлощадкиВЕТИС,
	|	
	|	ВЫБОР 
	|		КОГДА Шапка.ЗаменитьСведенияОРазрешительнойДокументации 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗаменитьСведенияОРазрешительнойДокументации,
	|	ВЫБОР 
	|		КОГДА Шапка.ЗаменитьСведенияОЛицензиях 
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗаменитьСведенияОЛицензиях,
	|
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	ТекстЗапросаТовары = 
		"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.КодТНВЭД                         КАК КодТНВЭД,
	|	Товары.ДатаПроизводства                 КАК ДатаПроизводства,
	|	Товары.СрокГодности                     КАК СрокГодности,
	|	Товары.ИдентификаторПроисхожденияВЕТИС  КАК ИдентификаторПроисхожденияВЕТИС,
	|	&ИдентификаторПроисхожденияВЕТИССтрокой КАК ИдентификаторПроисхожденияВЕТИССтрокой
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.Товары КАК Товары
	|
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ИнтеграцияИСМПВЕТИС.ДоработатьЗапросЗаполненияМаркируемойПродукцииДокументаМаркировка(ТекстЗапросаТовары, Ложь);
	СписокЗапросов.Добавить(ТекстЗапросаТовары, "Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДанныеОтчета.ЗначениеШтрихкода                КАК ЗначениеШтрихкода,
	|	ДанныеОтчета.НормализованноеЗначениеШтрихкода КАК НормализованноеЗначениеШтрихкода,
	|	ДанныеОтчета.ФорматBase64                     КАК ФорматBase64
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ДанныеОтчетаПроизводственнойЛинии КАК ДанныеОтчета
	|ГДЕ
	|	ДанныеОтчета.Ссылка = &Ссылка
	|",
	"ДанныеОтчета");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Количество КАК Количество,
	|	ШтрихкодыУпаковок.ИдентификаторПроисхожденияВЕТИС КАК ИдентификаторПроисхожденияВЕТИС,
	|	ШтрихкодыУпаковок.СрокГодности КАК СрокГодности
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ДокументыСертификации.ВидДокументаСертификации   КАК ВидДокументаСертификации,
	|	ДокументыСертификации.НомерДокументаСертификации КАК НомерДокументаСертификации,
	|	ДокументыСертификации.ДатаДокументаСертификации  КАК ДатаДокументаСертификации
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ДокументыСертификации КАК ДокументыСертификации
	|ГДЕ
	|	ДокументыСертификации.Ссылка = &Ссылка
	|",
	"ДокументыСертификации");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Лицензии.НомерЛицензииНаПользованиеНедрами КАК НомерЛицензииНаПользованиеНедрами,
	|	Лицензии.ДатаЛицензииНаПользованиеНедрами  КАК ДатаЛицензииНаПользованиеНедрами
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ЛицензииНаПользованиеНедрами КАК Лицензии
	|ГДЕ
	|	Лицензии.Ссылка = &Ссылка
	|",
	"ЛицензииНаПользованиеНедрами");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"];
	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчета"];
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"];
	
	Если Не Шапка.Следующий() 
		Или (ДанныеОтчета.Пустой() И ШтрихкодыУпаковок.Пустой()) Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ДоступныеВидыПродукции = ДоступныеВидыПродукцииУточненияСведенийОКодахМаркировки();
	
	Если ДоступныеВидыПродукции.Найти(Шапка.ВидПродукции) = Неопределено Тогда
		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Вид продукции ""%1"" не поддерживается.'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Шапка.ВидПродукции);
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД
			И Не ЭтоПродукцияПодконтрольнаяВЕТИС
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
			И Не ВидПродукцииИспользуетУточнениеСроковГодности(Шапка.ВидПродукции)
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес
			И Не ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции) Тогда
			
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Вид продукции ""%1"" не поддерживает операцию %2.'"),
					Шапка.ВидПродукции,
					Шапка.Операция));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.СведенияОРазрешительнойДокументацииДляВводаВОборот Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				НСтр("ru = 'Передача сведений для операции ""Сведения о разрешительной документации для ввода товара в оборот"" отключена с 01.10.23.
				           |Выберите другую операцию.'"));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.СведенияОКодахИдентификацииДляВводаВОборот Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				НСтр("ru = 'Передача сведений по документу ""Сведения о кодах идентификации для ввода товара в оборот"" отключена с 01.10.23.
				           |Выберите другую операцию.'"));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		Возврат СообщенияJSON;
	КонецЕсли;
	
	Если Шапка.ОтчетПроизводственнойЛинии Тогда
		Возврат СведенияОРазрешительнойДокументацииJSONОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации);
	Иначе
		Возврат СведенияОРазрешительнойДокументацииJSONШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации);
	КонецЕсли;
	
КонецФункции

Функция СведенияОРазрешительнойДокументацииJSONШтрихкодыУпаковокJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации)
	
	СообщенияJSON = Новый Массив;
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	//@skip-warning
	ЛицензииНаПользованиеНедрами = РезультатЗапроса["ЛицензииНаПользованиеНедрами"].Выгрузить();
	
	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Ссылка;
	Операция       = Шапка.Операция;
	
#Область РазборКодовМаркировки
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	Настройки = Новый Структура("СсылкаНаОбъект", ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);

#КонецОбласти

	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	ГруппаКодов = Новый Массив;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantInn", РеквизитыОрганизации.ИНН);
	ТелоЗапроса.Вставить("codes", ГруппаКодов);
	
	ПараметрыЗаполененияСообщений = Новый Структура;
	ПараметрыЗаполененияСообщений.Вставить("ВидПродукции", Шапка.ВидПродукции);
	ПараметрыЗаполененияСообщений.Вставить("ПараметрыНормализацииПрочее", ПараметрыНормализацииПрочее);
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД Тогда
		
		ИсточникДанных = РезультатПоиска.МаркированныеТовары;
		ИсточникДанных.Сортировать("ИдентификаторПроисхожденияВЕТИС, Штрихкод");
		
		ЗаполнитьСообщениеКорректировкаСведенийВСД(ГруппаКодов, ИсточникДанных, Товары, СообщениеJSON, ПараметрыЗаполененияСообщений);
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности Тогда
		
		ИсточникДанных = РезультатПоиска.МаркированныеТовары;
		ИсточникДанных.Сортировать("ГоденДо, Штрихкод");
		
		ЗаполнитьСообщениеКорректировкаСведенийСрокГодности(ГруппаКодов, ИсточникДанных, Товары, СообщениеJSON, ПараметрыЗаполененияСообщений);
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМФактическийВес Тогда
		
		ИсточникДанных = РезультатПоиска.МаркированныеТовары;
		ИсточникДанных.Сортировать("ГоденДо, Штрихкод");
		
		ЗаполнитьСообщениеКорректировкаСведенийФактическийВес(ГруппаКодов, ИсточникДанных, СообщениеJSON, ПараметрыЗаполененияСообщений);
		
	Иначе // Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМ
		
		ИсточникДанных = РезультатПоиска.МаркированныеТовары;
		ИсточникДанных.Индексы.Добавить("Номенклатура, Характеристика, Серия");
		
		ПараметрыЗаполененияСообщений.Вставить("СпособВводаВОборот",           Шапка.СпособВводаВОборот);
		ПараметрыЗаполененияСообщений.Вставить("ДокументыСертификации",        ДокументыСертификации);
		ПараметрыЗаполененияСообщений.Вставить("ЛицензииНаПользованиеНедрами", ЛицензииНаПользованиеНедрами);
		ПараметрыЗаполененияСообщений.Вставить(
			"ЗаменитьСведенияОРазрешительнойДокументации", Шапка.ЗаменитьСведенияОРазрешительнойДокументации);
		ПараметрыЗаполененияСообщений.Вставить(
			"ЗаменитьСведенияОЛицензиях", Шапка.ЗаменитьСведенияОЛицензиях);
		
		ЭтоБАД = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы;
		Если ЭтоБАД
			И ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС) Тогда
			ПараметрыЗаполененияСообщений.Вставить("ИдентификаторПроизводственнойПлощадкиВЕТИС", Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС);
		КонецЕсли;
		
		ЗаполнитьСообщениеКорректировкаСведенийКМ(ГруппаКодов, ИсточникДанных, Товары, СообщениеJSON, ПараметрыЗаполененияСообщений);
		
	КонецЕсли;
	
	СообщениеJSON.ТекстСообщенияJSON  = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция СведенияОРазрешительнойДокументацииJSONОтчетПроизводственнойЛинииJSON(РезультатЗапроса, ДополнительныеПараметры, РеквизитыОрганизации)
	
	СообщенияJSON = Новый Массив;
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	Шапка.Следующий();
	//@skip-warning
	ДанныеОтчета = РезультатЗапроса["ДанныеОтчета"].Выгрузить();
	//@skip-warning
	ДокументыСертификации = РезультатЗапроса["ДокументыСертификации"].Выгрузить();
	//@skip-warning
	ЛицензииНаПользованиеНедрами = РезультатЗапроса["ЛицензииНаПользованиеНедрами"].Выгрузить();
	
	НомерВерсии    = Шапка.ПоследнийНомерВерсии + 1;
	ДокументСсылка = Шапка.Ссылка;
	Операция       = Шапка.Операция;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	КодыМаркировкиНормализованы = Истина;
	
	Для Каждого СтрокаОтчета Из ДанныеОтчета Цикл
		Если ЗначениеЗаполнено(СтрокаОтчета.ЗначениеШтрихкода) Тогда
			КодыМаркировкиНормализованы = Ложь;
		КонецЕсли;
		Прервать;
	КонецЦикла;
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	ПараметрыОбработки = Новый Структура;
	ПараметрыОбработки.Вставить("ВосстанавливатьСтруктуруКодаМаркировки", Не ПараметрыСканирования.ПроверятьСтруктуруКодовМаркировки);
	ПараметрыОбработки.Вставить("ПроверятьАлфавитКодовМаркировки",        ПараметрыСканирования.ПроверятьАлфавитКодовМаркировки);
	// Коды нормализуются при проверке вида упаковок перед формированием сообщения.
	ПараметрыОбработки.Вставить("КодыМаркировкиНормализованы",            КодыМаркировкиНормализованы);
	ПараметрыОбработки.Вставить("ОбрабатыватьЗначенияШтрихкодУпаковок",   Ложь);
	
	ДанныеОтчета.Колонки.Добавить("ТекстОшибкиЗначениеШтрихкода", Новый ОписаниеТипов("Строка"));
	
	// 1. Разбор кодов, подготовка данных для построения дерева упаковок.
	
	РезультатОбработкиДанныхОтчета = РазборКодаМаркировкиИСОтчетПроизводственнойЛинии.НормализоватьДанныеОтчетаПроизводственнойЛинии(
		ДанныеОтчета, Шапка.ВидПродукции, ПараметрыОбработки);
	
	СохранитьРезультатОбработкиКодовМаркировки(ДокументСсылка, ДанныеОтчета);
	
	Если РезультатОбработкиДанныхОтчета.ЕстьОшибки Тогда
		
		СообщитьОНеправильномФормате(СообщениеJSON);
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ИсточникДанных = РезультатОбработкиДанныхОтчета.ОбработанныеДанныеОтчета;
	
	ГруппаКодов = Новый Массив;
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantInn", РеквизитыОрганизации.ИНН);
	ТелоЗапроса.Вставить("codes", ГруппаКодов);
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	СтрокаТЧ = Новый Структура;
	
	ПараметрыЗаполененияСообщений = Новый Структура;
	ПараметрыЗаполененияСообщений.Вставить("ДокументыСертификации",        ДокументыСертификации);
	ПараметрыЗаполененияСообщений.Вставить("ЛицензииНаПользованиеНедрами", ЛицензииНаПользованиеНедрами);
	ПараметрыЗаполененияСообщений.Вставить(
		"ЗаменитьСведенияОРазрешительнойДокументации", Шапка.ЗаменитьСведенияОРазрешительнойДокументации);
	ПараметрыЗаполененияСообщений.Вставить(
		"ЗаменитьСведенияОЛицензиях", Шапка.ЗаменитьСведенияОЛицензиях);
	Если Не ЗаполнитьСведенияКорректировкиОтчетПроизводственнойЛинии(СтрокаТЧ, Шапка, ПараметрыЗаполененияСообщений) Тогда
		
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				НСтр("ru = 'Не указаны данные для корректировки сведений.'"));
		
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	ТекущаяГруппа = Новый Массив;
	
	Для Каждого СтрокаДанных Из ИсточникДанных Цикл
		
		ИсходнаяСтрока = СтрокаДанных.ИсходнаяСтрока;
		Для Каждого ИменаКолонок Из РезультатОбработкиДанныхОтчета.ГруппыКолонок Цикл
			
			Если Не ЗначениеЗаполнено(ИсходнаяСтрока[ИменаКолонок.КодМаркировки]) Тогда
				Продолжить;
			КонецЕсли;
			ТекущаяГруппа.Добавить(СтрокаДанных[ИменаКолонок.КодДляПередачиИСМП]);
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокаТЧ.Вставить("code", ТекущаяГруппа);
	
	ГруппаКодов.Добавить(СтрокаТЧ);
	
	СообщениеJSON.ТекстСообщенияJSON  = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для документа "Отчет о перевзвешивании".
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.УточнениеСведенийОКодахМаркировкиИСМП - Документ Уточнение сведений о кодах маркировки ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ОтчетОПеревзвешиванииJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция = Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании;
	
	СообщенияJSON = Новый Массив;
	
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	
	|	Шапка.ВидПродукции      КАК ВидПродукции,
	|	Шапка.Операция          КАК Операция,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.ОтчетПроизводственнойЛинии КАК ОтчетПроизводственнойЛинии,
	|	Шапка.Ссылка КАК Ссылка
	|
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки,
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки.Количество КАК Количество
	|ИЗ
	|	Документ.УточнениеСведенийОКодахМаркировкиИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	Если Не Шапка.Следующий() Или ШтрихкодыУпаковок.Количество() = 0 Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	Если Не ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Шапка.ВидПродукции) Тогда
		
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Вид продукции ""%1"" не поддерживается.'"),
					Шапка.ВидПродукции));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	Если Шапка.Операция <> Перечисления.ВидыОперацийИСМП.ОтчетОПеревзвешивании Тогда
		НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
		СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Шапка.Операция, НомерВерсии);
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Передача отчета о перевзвешивании для операции ""%1"" не поддерживается.'"),
					Шапка.Операция));
		СообщенияJSON.Добавить(СообщениеJSON);
		Возврат СообщенияJSON;
	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	Операция             = Шапка.Операция;
	
	СообщениеJSON = ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
		Возврат СообщенияJSON;
	КонецЕсли;
	
#Область РазборКодовМаркировки
	
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	
	Настройки = Новый Структура("СсылкаНаОбъект", ДокументСсылка);
	ЗаполнитьЗначенияСвойств(ПараметрыСканирования, Настройки);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
		ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
		ПараметрыСканирования,, Истина);
	
#КонецОбласти
	
	ИсточникДанных = РезультатПоиска.МаркированныеТовары;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ГруппаКодов = Новый Массив;
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("participantInn", РеквизитыОрганизации.ИНН);
	
	ТелоЗапроса.Вставить("codes", ГруппаКодов);
	
	Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
		
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
			СтрокаИсточникаДанных.Штрихкод, Шапка.ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить("code",          ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
		СтрокаТЧ.Вставить("productWeight", СтрокаИсточникаДанных.Количество*1000);
		
		ГруппаКодов.Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
	СообщениеJSON.ТекстСообщенияJSON  = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

Функция ЗаполнитьСообщениеJSON(Шапка, ДокументСсылка, Операция, НомерВерсии = 1)
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	СообщениеJSON.ВидПродукции      = Шапка.ВидПродукции;
	СообщениеJSON.Операция          = Операция;
	СообщениеJSON.Версия            = НомерВерсии;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.ТипСообщения              = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.ТребуетсяПодписание       = Ложь;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	Возврат СообщениеJSON;
	
КонецФункции

Процедура СохранитьРезультатОбработкиКодовМаркировки(ДокументСсылка, ОбработанныеДанные)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ДанныеОтчетаПроизводственнойЛинии.Загрузить(ОбработанныеДанные);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
КонецПроцедуры

Процедура СообщитьОНеправильномФормате(СообщениеJSON)
	ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
		СообщениеJSON,
		НСтр("ru = 'Ошибка при разборе данных кодов маркировки'"));
КонецПроцедуры

Функция ЗаполнитьДанныеСертификацииПоСтроке(ИсточникДанных)
	
	ДанныеСертификации = Новый Структура;
	ДанныеСертификации.Вставить("permitDocDate",   Формат(ИсточникДанных.ДатаДокументаСертификации, "ДФ=dd.MM.yyyy"));
	ДанныеСертификации.Вставить("permitDocNumber", ИсточникДанных.НомерДокументаСертификации);
	ДанныеСертификации.Вставить("permitDocType",   ИнтерфейсИСМПСлужебный.ВидДокументаСертификацииЧисло(ИсточникДанных.ВидДокументаСертификации));
	
	Возврат ДанныеСертификации;
	
КонецФункции

Функция ЗаполнитьДанныеЛицензииПоСтроке(ИсточникДанных)
	
	ДанныеСертификации = Новый Структура;
	ДанныеСертификации.Вставить("licence_date",   Формат(ИсточникДанных.ДатаЛицензииНаПользованиеНедрами, "ДФ=dd.MM.yyyy"));
	ДанныеСертификации.Вставить("licence_number", ИсточникДанных.НомерЛицензииНаПользованиеНедрами);
	
	Возврат ДанныеСертификации;
	
КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	Результат.Вставить("ШтрихкодУточнения");
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения,
	УпаковкаВерхнегоУровня = Неопределено, УпаковкаУточнения = Неопределено)
	
	ЭтоМолочнаяПродукция = ОбщегоНазначенияИСКлиентСервер.ЭтоМолочнаяПродукцияИСМП(Форма.Объект.ВидПродукции);
	ЭтоПродукцияПодконтрольнаяВЕТИС = ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(Форма.Объект.ВидПродукции);
	ДополнительныеПоля = Новый Структура("ИдентификаторПроисхожденияВЕТИС,ГоденДо");
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		Если ЭтоМолочнаяПродукция Или ЭтоПродукцияПодконтрольнаяВЕТИС Тогда
			ЗаполнитьЗначенияСвойств(ДополнительныеПоля, СтрокаДерева);
		
			Если УпаковкаУточнения = Неопределено
				И (ЗначениеЗаполнено(ДополнительныеПоля.ИдентификаторПроисхожденияВЕТИС)
					Или ЗначениеЗаполнено(ДополнительныеПоля.ГоденДо)) Тогда
				УпаковкаУточненияСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
			Иначе
				УпаковкаУточненияСтрокиДерева = УпаковкаУточнения;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ПараметрыЗаполнения.ШтрихкодУточнения = УпаковкаУточненияСтрокиДерева;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		Иначе
			
			ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, СтрокаДерева, ПараметрыЗаполнения,
				УпаковкаВерхнегоУровняСтрокиДерева, УпаковкаУточненияСтрокиДерева);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ВидПродукции = Форма.Объект.ВидПродукции;
	Операция = Форма.Объект.Операция;
	ТребуетсяСрокГодности = Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД;
		
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки;
	
	СпецификаОбработки = "";
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		СпецификаОбработки = СпецификаОбработки + ",КоличествоКодов";
	КонецЕсли;
	Если ОбщегоНазначенияИСКлиентСервер.ЭтоПродукцияПодконтрольнаяВЕТИС(ВидПродукции)
		И  Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД Тогда
		СпецификаОбработки = СпецификаОбработки + ",ВЕТИС";
	КонецЕсли;
	Если ВидПродукцииИспользуетУточнениеСроковГодности(ВидПродукции) И ТребуетсяСрокГодности Тогда
		СпецификаОбработки = СпецификаОбработки + ",СрокГодности";
	КонецЕсли;
	
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	Если ОбновляемаяСтрока.Свойство("ШтрихкодОднороднойУпаковки") Тогда
		ОбновляемаяСтрока.ШтрихкодОднороднойУпаковки = ?(ПараметрыЗаполнения.ШтрихкодУточнения = Неопределено, 
			ДанныеШтрихкода.ШтрихкодУпаковки, ПараметрыЗаполнения.ШтрихкодУточнения);
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(Истина, Ложь, Истина);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ОбновляемаяСтрока);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		
		// Поле Количество
		КоличествоМаркируемыхЕдиниц = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = 0;
		Если Не ОбработкаБезМаркировки Тогда
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемыхЕдиниц = Макс(0, КоличествоМаркируемыхЕдиниц + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемыхЕдиниц;
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемыхЕдиниц;
		
		Если КоличествоМаркируемыхЕдиниц > 0 Тогда
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
			// Поле Количество потребительских кодов маркировки
			КоличествоМаркируемойПродукции = ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;
			
			ВсегоПоПараметрамПоиска = 0;
			Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
				ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.КоличествоПотребительскихУпаковок;
			КонецЦикла;
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, "КоличествоПотребительскихУпаковок");
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
			Если КоличествоМаркируемойПродукции > 0 Тогда
				
				СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + КоличествоМаркируемойПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
	
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

#КонецОбласти

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

#Область ЗаполнениеСообщений

Процедура ЗаполнитьСообщениеКорректировкаСведенийВСД(ГруппаКодов, ИсточникДанных, Товары, СообщениеJSON, ДополнительныеПараметры)
	
	ВидПродукции                = ДополнительныеПараметры.ВидПродукции;
	ПараметрыНормализацииПрочее = ДополнительныеПараметры.ПараметрыНормализацииПрочее;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура");
	Отбор.Вставить("Характеристика");
	Отбор.Вставить("Серия");
	Отбор.Вставить("ИдентификаторПроисхожденияВЕТИС");
	
	ТекущийИдентификаторПроисхожденияВЕТИС = Неопределено;
	ТекущийИдентификаторПроисхожденияВЕТИССтрокой = "";
	ТекущийГоденДо = "";
	
	ТекущаяГруппа = Новый Массив;
	
	ИдентификаторыВЕТИС = ИсточникДанных.ВыгрузитьКолонку("ИдентификаторПроисхожденияВЕТИС");
	ДанныеПоИдентификаторам = ИнтеграцияИСМПВЕТИС.ДанныеИдентификаторовПроисхождения(ИдентификаторыВЕТИС);
		
	Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
		
		Если СтрокаИсточникаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаИсточникаДанных);
		
		НайденныеСтроки = Товары.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИнтеграцияИСМП.СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, Отбор);
			Продолжить;
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			ИнтеграцияИСМП.СообщитьОДубляхНоменклатуры(СообщениеJSON, Отбор);
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧТовары = НайденныеСтроки[0];
		
		Если ТекущийИдентификаторПроисхожденияВЕТИС <> СтрокаИсточникаДанных.ИдентификаторПроисхожденияВЕТИС  Тогда
			
			Если ТекущийИдентификаторПроисхожденияВЕТИС <> Неопределено Тогда
				
				СтрокаТЧ = Новый Структура;
				СтрокаТЧ.Вставить("code", ТекущаяГруппа);
				СтрокаТЧ.Вставить("vsd", СтрокаТЧТовары.ИдентификаторПроисхожденияВЕТИССтрокой);
				
				ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(ТекущийИдентификаторПроисхожденияВЕТИС);
				ФорматДаты = "ДФ=dd.MM.yyyy";
				Если ДанныеПоИдентификатору <> Неопределено
					И ДанныеПоИдентификатору.СкоропортящаясяПродукция Тогда
					ФорматДаты = "ДФ=dd.MM.yyyy HH:mm:ss";
				КонецЕсли;
		
				СтрокаТЧ.Вставить("expirationDate", Формат(ТекущийГоденДо, ФорматДаты));
			
				ГруппаКодов.Добавить(СтрокаТЧ);
				
			КонецЕсли;
			
			ТекущаяГруппа = Новый Массив;
			
		КонецЕсли;
		
		ТекущийИдентификаторПроисхожденияВЕТИС = СтрокаИсточникаДанных.ИдентификаторПроисхожденияВЕТИС;
		ТекущийИдентификаторПроисхожденияВЕТИССтрокой = СтрокаТЧТовары.ИдентификаторПроисхожденияВЕТИССтрокой;
		ТекущийГоденДо = СтрокаТЧТовары.СрокГодности;
		
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
			СтрокаИсточникаДанных.Штрихкод, ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
		ТекущаяГруппа.Добавить(ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
		
	КонецЦикла;
	
	Если ТекущаяГруппа.Количество() Тогда
		
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить("code", ТекущаяГруппа);
		СтрокаТЧ.Вставить("vsd",  ТекущийИдентификаторПроисхожденияВЕТИССтрокой);
		
		ДанныеПоИдентификатору = ДанныеПоИдентификаторам.Получить(ТекущийИдентификаторПроисхожденияВЕТИС);
		ФорматДаты = "ДФ=dd.MM.yyyy";
		Если ДанныеПоИдентификатору <> Неопределено
			И ДанныеПоИдентификатору.СкоропортящаясяПродукция Тогда
			ФорматДаты = "ДФ=dd.MM.yyyy HH:mm:ss";
		КонецЕсли;

		СтрокаТЧ.Вставить("expirationDate", Формат(ТекущийГоденДо, ФорматДаты));
		
		ГруппаКодов.Добавить(СтрокаТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСообщениеКорректировкаСведенийСрокГодности(ГруппаКодов, ИсточникДанных, Товары, СообщениеJSON, ДополнительныеПараметры)
	
	ВидПродукции                = ДополнительныеПараметры.ВидПродукции;
	ПараметрыНормализацииПрочее = ДополнительныеПараметры.ПараметрыНормализацииПрочее;
	
	ТекущийСрокГодности = Неопределено;
	ТекущаяГруппа = Новый Массив;
	
	ФорматДаты = "ДФ=dd.MM.yyyy";
	
	Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
		
		Если СтрокаИсточникаДанных.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущийСрокГодности <> СтрокаИсточникаДанных.ГоденДо  Тогда
			
			Если ТекущийСрокГодности <> Неопределено Тогда
				
				СтрокаТЧ = Новый Структура;
				СтрокаТЧ.Вставить("code", ТекущаяГруппа);
				СтрокаТЧ.Вставить("expirationDate", Формат(СтрокаИсточникаДанных.ГоденДо, ФорматДаты));
				
				ГруппаКодов.Добавить(СтрокаТЧ);
				
			КонецЕсли;
			
			ТекущаяГруппа = Новый Массив;
			
		КонецЕсли;
		
		ТекущийСрокГодности = СтрокаИсточникаДанных.ГоденДо;
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
			СтрокаИсточникаДанных.Штрихкод, ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
		ТекущаяГруппа.Добавить(ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
		
	КонецЦикла;
	
	Если ТекущаяГруппа.Количество() Тогда
		
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить("code", ТекущаяГруппа);
		СтрокаТЧ.Вставить("expirationDate", Формат(ТекущийСрокГодности, ФорматДаты));
		
		ГруппаКодов.Добавить(СтрокаТЧ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСообщениеКорректировкаСведенийФактическийВес(ГруппаКодов, ИсточникДанных, СообщениеJSON, ДополнительныеПараметры)
	
	ВидПродукции                = ДополнительныеПараметры.ВидПродукции;
	ПараметрыНормализацииПрочее = ДополнительныеПараметры.ПараметрыНормализацииПрочее;
	
	Для Каждого СтрокаИсточникаДанных Из ИсточникДанных Цикл
		
		РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
			СтрокаИсточникаДанных.Штрихкод, ВидПродукции, СтрокаИсточникаДанных.ДанныеРазбора);
		СтрокаТЧ = Новый Структура;
		СтрокаТЧ.Вставить(
			"code",
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(
					РезультатРазбора,
					ПараметрыНормализацииПрочее)));
		СтрокаТЧ.Вставить("weight", СтрокаИсточникаДанных.Количество*1000);
		
		ГруппаКодов.Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение разрешительной документации, ТН ВЭД, даты производства, тип эмиссии, лицензии (вода), идентификатор площадки ВЕТИС (бады)
Процедура ЗаполнитьСообщениеКорректировкаСведенийКМ(ГруппаКодов, ИсточникДанных, Товары, СообщениеJSON, ДополнительныеПараметры)
	
	ВидПродукции                = ДополнительныеПараметры.ВидПродукции;
	ПараметрыНормализацииПрочее = ДополнительныеПараметры.ПараметрыНормализацииПрочее;
	СпособВводаВОборот          = ДополнительныеПараметры.СпособВводаВОборот;
	
	ИдентификаторПроизводственнойПлощадкиВЕТИС = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеПараметры, "ИдентификаторПроизводственнойПлощадкиВЕТИС", Неопределено);
	
	ЭтоБАДы = ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы;
	ЭтоУпакованнаяВода = ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода;
	
	Сертификаты = Новый Массив;
	Если ДополнительныеПараметры.ДокументыСертификации.Количество() Тогда
		
		Для Каждого СтрокаИсточника Из ДополнительныеПараметры.ДокументыСертификации Цикл
			ДанныеСертификации = ЗаполнитьДанныеСертификацииПоСтроке(СтрокаИсточника);
			Сертификаты.Добавить(ДанныеСертификации);
		КонецЦикла;
		
	КонецЕсли;
	
	Лицензии = Новый Массив;
	Если ЭтоУпакованнаяВода И ДополнительныеПараметры.ЛицензииНаПользованиеНедрами.Количество() Тогда
		Для Каждого СтрокаИсточника Из ДополнительныеПараметры.ЛицензииНаПользованиеНедрами Цикл
			ДанныеЛицензии = ЗаполнитьДанныеЛицензииПоСтроке(СтрокаИсточника);
			Лицензии.Добавить(ДанныеЛицензии);
		КонецЦикла;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Номенклатура");
	Отбор.Вставить("Характеристика");
	Отбор.Вставить("Серия");
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТовары);
		
		НайденныеСтроки = ИсточникДанных.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ИнтеграцияИСМП.СообщитьОбОтсутствующейНоменклатуре(СообщениеJSON, Отбор);
			Продолжить;
		КонецЕсли;
		
		УказаныДанныеКорректировки = Ложь;
		СтрокаТЧ = Новый Структура;
		
		Если ЗначениеЗаполнено(СтрокаТовары.КодТНВЭД) Тогда
			СтрокаТЧ.Вставить("tnved", СтрокаТовары.КодТНВЭД);
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДатаПроизводства) Тогда
			ФорматДаты = "ДФ=dd.MM.yyyy";
			СтрокаТЧ.Вставить("productionDate", Формат(СтрокаТовары.ДатаПроизводства, ФорматДаты));
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СпособВводаВОборот) Тогда
			СтрокаТЧ.Вставить("emissionType", ИнтерфейсИСМПСлужебный.СпособВыпускаВОборотЧисло(СпособВводаВОборот));
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если Сертификаты.Количество() Тогда
			СтрокаТЧ.Вставить("permitDocs", Сертификаты);
			Если Не ЭтоБАДы Тогда
				СтрокаТЧ.Вставить("permitDocsOperation", ДополнительныеПараметры.ЗаменитьСведенияОРазрешительнойДокументации);
			КонецЕсли;
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если ИдентификаторПроизводственнойПлощадкиВЕТИС <> Неопределено Тогда
			// БАДы
			СтрокаТЧ.Вставить("vsd", ИдентификаторПроизводственнойПлощадкиВЕТИС);
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если Лицензии.Количество() Тогда
			СтрокаТЧ.Вставить("licences", Лицензии);
			СтрокаТЧ.Вставить("licencesOperation", ДополнительныеПараметры.ЗаменитьСведенияОЛицензиях);
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		// планируемые параметры:
		// variableExpiration
		
		Если Не УказаныДанныеКорректировки Тогда
			
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'В табличной части ""Товары"" для номенклатуры %1 не указаны данные для уточнения сведений.'"),
					ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
						СтрокаТовары.Номенклатура,
						СтрокаТовары.Характеристика,,
						СтрокаТовары.Серия)));
			Продолжить;
			
		КонецЕсли;
		
		ТекущаяГруппа = Новый Массив;
		
		Для Каждого СтрокаШтрихкоды Из НайденныеСтроки Цикл
			
			Если СтрокаШтрихкоды.ВидУпаковки <> Перечисления.ВидыУпаковокИС.Потребительская Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкодаПоДаннымРазбора(
				СтрокаШтрихкоды.Штрихкод, ВидПродукции, СтрокаШтрихкоды.ДанныеРазбора);
			ТекущаяГруппа.Добавить(ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
			
		КонецЦикла;
		
		СтрокаТЧ.Вставить("code", ТекущаяГруппа);
		
		ГруппаКодов.Добавить(СтрокаТЧ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьСведенияКорректировкиОтчетПроизводственнойЛинии(ЗаполняемыеСведения, Шапка, ДополнительныеПараметры)
	
	УказаныДанныеКорректировки = Ложь;
	
	ФорматДаты = "ДФ=dd.MM.yyyy";
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодностиВСД Тогда
		
		Если ЗначениеЗаполнено(Шапка.ИдентификаторПроисхожденияВЕТИССтрокой) Тогда
			ЗаполняемыеСведения.Вставить("expirationDate", Формат(Шапка.СрокГодности, ФорматДаты));
			ЗаполняемыеСведения.Вставить("vsd", Шапка.ИдентификаторПроисхожденияВЕТИССтрокой);
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
	ИначеЕсли Шапка.Операция = Перечисления.ВидыОперацийИСМП.КорректировкаСведенийКМСрокГодности Тогда
		
		Если ЗначениеЗаполнено(Шапка.СрокГодности) Тогда
			ЗаполняемыеСведения.Вставить("expirationDate", Формат(Шапка.СрокГодности, ФорматДаты));
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Шапка.КодТНВЭД) Тогда
			ЗаполняемыеСведения.Вставить("tnved", Шапка.КодТНВЭД);
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.ДатаПроизводства) Тогда
			ФорматДаты = "ДФ=dd.MM.yyyy";
			ЗаполняемыеСведения.Вставить("productionDate", Формат(Шапка.ДатаПроизводства, ФорматДаты));
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шапка.СпособВводаВОборот) Тогда
			ЗаполняемыеСведения.Вставить("emissionType", ИнтерфейсИСМПСлужебный.СпособВыпускаВОборотЧисло(Шапка.СпособВводаВОборот));
			УказаныДанныеКорректировки = Истина;
		КонецЕсли;
		
		ЭтоБАДы = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.БАДы;
		ЭтоУпакованнаяВода = Шапка.ВидПродукции = Перечисления.ВидыПродукцииИС.УпакованнаяВода;
		
		Сертификаты = Новый Массив;
		Если ДополнительныеПараметры.ДокументыСертификации.Количество() Тогда
			
			Для Каждого СтрокаИсточника Из ДополнительныеПараметры.ДокументыСертификации Цикл
				ДанныеСертификации = ЗаполнитьДанныеСертификацииПоСтроке(СтрокаИсточника);
				Сертификаты.Добавить(ДанныеСертификации);
			КонецЦикла;
			
			Если Не ЭтоБАДы Тогда
				ЗаполняемыеСведения.Вставить("permitDocsOperation", ДополнительныеПараметры.ЗаменитьСведенияОРазрешительнойДокументации);
			КонецЕсли;
			
			ЗаполняемыеСведения.Вставить("permitDocs", Сертификаты);
			УказаныДанныеКорректировки = Истина;
			
		КонецЕсли;
		
		Лицензии = Новый Массив;
		Если ЭтоУпакованнаяВода И ДополнительныеПараметры.ЛицензииНаПользованиеНедрами.Количество() Тогда
			
			Для Каждого СтрокаИсточника Из ДополнительныеПараметры.ЛицензииНаПользованиеНедрами Цикл
				ДанныеЛицензии = ЗаполнитьДанныеЛицензииПоСтроке(СтрокаИсточника);
				Лицензии.Добавить(ДанныеЛицензии);
			КонецЦикла;
			
			ЗаполняемыеСведения.Вставить("licences", Лицензии);
			ЗаполняемыеСведения.Вставить("licencesOperation", ДополнительныеПараметры.ЗаменитьСведенияОЛицензиях);
			УказаныДанныеКорректировки = Истина;
			
		КонецЕсли;
		
		Если ЭтоБАДы
			И ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС) Тогда
			ЗаполняемыеСведения.Вставить("vsd", Шапка.ИдентификаторПроизводственнойПлощадкиВЕТИС);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат УказаныДанныеКорректировки;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
