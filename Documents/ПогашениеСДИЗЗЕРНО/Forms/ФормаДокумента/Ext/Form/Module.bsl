#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	УстановитьЗаголовокДокумента();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнтеграцияИС.НастроитьВидимостьДокументаОснования(ЭтотОбъект);
	Элементы.ДокументОснование.ДоступныеТипы = Метаданные.ОпределяемыеТипы.ОснованиеПогашениеСДИЗЗЕРНО.Тип;
	
	ЗаполнитьДоступныеВидыПродукции();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		МодульВерсионированиеОбъектов = ОбщегоНазначения.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриСозданииНаСервере(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыХарактеристика");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,   "ТоварыСерия");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект, "ТоварыСерия");
	
	Элементы.Подразделение.Видимость = ОбщегоНазначенияИС.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииЧтенииНаСервере();
		ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыИС.ПриЧтенииНаСервере(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ИнтеграцияИСКлиент.ПослеЗаписиВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		Объект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Подключаемый_ОбновитьКоманды();
	
	УстановитьЗаголовокДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриСозданииЧтенииНаСервере();
	
	РазблокироватьДанныеФормыДляРедактирования();
	
	ИнтеграцияИС.ПослеЗаписиНаСервереВФормеОбъектаДокументаИС(
		ЭтотОбъект,
		ТекущийОбъект,
		ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы(),
		ПараметрыЗаписи);
	
	ОбщегоНазначенияСобытияФормИСПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбораСерии(
		ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, ИсточникВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НовыйОбъект = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(НовыйОбъект) Тогда
		Объект.ДокументОснование = НовыйОбъект;
		Модифицированность = Истина;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияИзмененоСостояние(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
		И Параметр.Ссылка = Объект.Ссылка Тогда
		
		Если Параметр.Свойство("ОбъектИзменен")
			И Параметр.ОбъектИзменен Тогда
			ОбновитьПредставленияНаФорме(Истина);
		Иначе
			ОбновитьПредставленияНаФорме(Ложь);
		КонецЕсли;
		
		ОтключитьОтметкуНезаполненного();
		
	КонецЕсли;
	
	Если ИмяСобытия = ИнтеграцияИСКлиентСервер.ИмяСобытияВыполненОбмен(ИнтеграцияЗЕРНОКлиентСервер.ИмяПодсистемы())
	 И (Параметр = Неопределено
		Или (ТипЗнч(Параметр) = Тип("Структура") И Параметр.ОбновлятьСтатусВФормахДокументов)) Тогда
		
		ОбновитьПредставленияНаФорме(Истина);
		ОтключитьОтметкуНезаполненного();
		
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_КлючиРеквизитовОрганизацийЗЕРНО"
		Или ИмяСобытия = "Запись_КлючиАдресовЗЕРНО") Тогда
		
		ЗаполнитьГиперссылкиРеквизитов();
		
	КонецЕсли;
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СобытияФормИСКлиент.ОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияСобытияФормИСКлиентПереопределяемый.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусЗЕРНОПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Если (Не ЗначениеЗаполнено(Объект.Ссылка)) Или (Не Объект.Проведен) Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Погашение СДИЗ ЗЕРНО"" не проведен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение",
			ЭтотОбъект,
			Новый Структура("НавигационнаяСсылкаФорматированнойСтроки", НавигационнаяСсылкаФорматированнойСтроки));
		ТекстВопроса = НСтр("ru = 'Документ ""Погашение СДИЗ ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.Организация Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении организации табличная часть Товары и связанные с ней
								  |партии будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииОрганизацииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ВидПродукции");
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПродукцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.Товары.Количество() > 0 И ВыбранноеЗначение <> Объект.ВидПродукции Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = НСтр("ru = 'При изменении вида продукции табличная часть Товары и связанные с ней
								  |транспортные средства будут очищены. Продолжить?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПриИзмененииВидПродукцииПриЗавершении", ЭтотОбъект, ВыбранноеЗначение);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпискомПолноеПогашениеПриИзменении(Элемент)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	Если Не ТекущиеДанные.ПолноеПогашение Тогда
		ТекущиеДанные.ПричинаРасхождения         = Неопределено;
		ТекущиеДанные.ОписаниеПричиныРасхождения = Неопределено;
	КонецЕсли;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПолноеПогашение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпискомСДИЗПриИзменении(Элемент)
	
	СДИЗПриИзмененииНаСервере();
	УстановитьОтборТранспортныхСредствПоСтроке();
	ТранспортныеСредстваУстновитьСнятьОтметку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСписокмКоличествоЗЕРНОПриИзменении(Элемент)
	
	КоличествоЗЕРНОПриИзменении(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСпискомСДИЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СДИЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияПриИзменении(Элемент)
	ПриИзмененииРеквизитаШапкиСДИЗ(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательПриИзменении(Элемент)
	ПриИзмененииРеквизитаШапкиСДИЗ(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	ПриИзмененииРеквизитаШапкиСДИЗ(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияПриИзменении(Элемент)
	ПриИзмененииРеквизитаШапкиСДИЗ(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ПродавецПриИзменении(Элемент)
	ПриИзмененииРеквизитаШапкиСДИЗ(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	ПриИзмененииРеквизитаШапкиСДИЗ(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПродавецОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОчистка(Элемент, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПродавецОчистка(Элемент, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктОтправленияОчистка(Элемент, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОчистка(Элемент, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПокупательОчистка(Элемент, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктНазначенияОчистка(Элемент, СтандартнаяОбработка)
	ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыПредставлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормыРедактированияСвязанныхДокументов(ТипЗнч(Объект.Ссылка));
	ПараметрыФормы.ТолькоПросмотр = Истина;
	Для Каждого СтрокаТаблицы Из СвязанныеДокументы Цикл
		ДанныеДокумента = Новый Структура();
		ДанныеДокумента.Вставить("ПервичныйДокумент", СтрокаТаблицы.ПервичныйДокумент);
		ПараметрыФормы.ДанныеДокументов.Добавить(ДанныеДокумента);
	КонецЦикла;
	
	ОткрытьФорму(
		"ОбщаяФорма.СвязанныеДокументыЗЕРНО",
		ПараметрыФормы, 
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсторияПогашений

&НаКлиенте
Процедура ИсторияПогашенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияПогашений.ТекущиеДанные;
	
	Если Поле = Элементы.ИсторияПогашенийПримечаниеГиперссылка
		Или Поле = Элементы.ИсторияПогашенийПримечание Тогда
		
		ОбработкаВыбораПримечания(ТекущиеДанные);
	
	ИначеЕсли  Поле = Элементы.ИсторияПогашенийНоменклатура Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
		
	ИначеЕсли Поле = Элементы.ИсторияПогашенийПартия Тогда
		
		ПоказатьЗначение(, ТекущиеДанные.Партия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПогашенийПриАктивизацииСтроки(Элемент)
	
	ДоступностьТранспортныхСредств();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПогашенийОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИсторияПогашений.ТекущиеДанные;
	
	СтруктураПоиска = Новый Структура("СДИЗ", ТекущиеДанные.СДИЗ);
	
	МассивИсторияПогашений = Объект.ИсторияПогашений.НайтиСтроки(СтруктураПоиска);
	
	Если ТекущиеДанные.Операция = ТекущиеДанные.ОперацияДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование") Тогда
		УвеличитьКоличествоПогашения(МассивИсторияПогашений, ТекущиеДанные.КоличествоЗЕРНО);
	Иначе
		УменьшитьКоличествоПогашения(МассивИсторияПогашений, -1*ТекущиеДанные.КоличествоЗЕРНО, ТекущиеДанные.ПолноеПОгашение);
	КонецЕсли;
	
	ТекущиеДанные.ОперацияДоИзменения = ТекущиеДанные.Операция;
	
	ОбновитьСвязанныеЭлементыИсторииПогашений();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПогашенийПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	ОбработатьУдалениеСтрокиИсторияПогашений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Корректировочный Тогда
		УстановитьОтборИсторияПогашений(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	Иначе
		УстановитьОтборТранспортныхСредствПоСтроке();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "Товары");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		ТекущиеДанные              = Элемент.ТекущиеДанные;
		ИдентификаторСтрокиТоваров = ТекущиеДанные.Идентификатор;
		
		Если Не ЗначениеЗаполнено(ИдентификаторСтрокиТоваров) Или Копирование Тогда
			ТекущиеДанные.Идентификатор = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
		
		Если Копирование Тогда
			СкопироватьТранспорныеСредстваНаФорма(ИдентификаторСтрокиТоваров, ТекущиеДанные.Идентификатор);
			УстановитьОтборТранспортныхСредствПоСтроке();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		
		ОчиститьТранспортныеСредстваНаФормеПоИдентификаторуСтроки(ТекущиеДанные.Идентификатор);
		ОчиститьТранспортныеСредстваПоИдентификаторуСтроки(ТекущиеДанные.Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если РедактированиеФормыНедоступно Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	ОчиститьТранспортныеСредстваПоИдентификаторуСтроки(ТекущиеДанные.Идентификатор);
	
	ТекущиеДанные.КоличествоЗЕРНО = 0;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПолноеПогашение");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ПараметрыОтбораНоменклатурыПоСДИЗ = Новый Структура;
	Если ЗначениеЗаполнено(ТекущиеДанные.СДИЗ) Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.КодТНВЭД) Тогда
			ПараметрыОтбораНоменклатурыПоСДИЗ.Вставить("КодТНВЭД", ТекущиеДанные.КодТНВЭД);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
			ПараметрыОтбораНоменклатурыПоСДИЗ.Вставить("ОКПД2", ТекущиеДанные.ОКПД2);
		КонецЕсли;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиент.ПриНачалеВыбораНоменклатуры(
		Элемент, Объект.ВидПродукции, СтандартнаяОбработка,,ПараметрыОтбораНоменклатурыПоСДИЗ);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	НоменклатураПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(
		Элемент, ТекущиеДанные, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ХарактеристикаПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Элемент.ТекстРедактирования, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСерияПриИзменении(Элемент)
	
	СерияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	КоличествоПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоЗЕРНОПриИзменении(Элемент)
	
	КоличествоЗЕРНОПриИзменении(Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Поле = Элементы.ТоварыПредставлениеПартия Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
			ПоказатьЗначение(, ДанныеСтроки.Партия);
		КонецЕсли;
	
	ИначеЕсли Поле = Элементы.ТоварыТранспортПредставление Тогда
		
		Если ДанныеСтроки.СтатусУказанияТранспорта > 0 Тогда
			
			ПараметрыОткрытияФормы = ИнтеграцияЗЕРНОСлужебныйКлиент.ПараметрыОткрытияФормыУказанияТранспортныхСредств();
			ПараметрыОткрытияФормы.РежимОтметки     = Истина;
			ПараметрыОткрытияФормы.РежимОткрытия    = "ТранспортныеСредства";
			ПараметрыОткрытияФормы.ПеревозчикВШапке = Ложь;
			ПараметрыОткрытияФормы.СДИЗ             = ДанныеСтроки.СДИЗ;
			ПараметрыОткрытияФормы.ТолькоПросмотр   = РедактированиеФормыНеДоступно;
			
			СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ДанныеСтроки.Идентификатор);
			СтрокиДанных = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
				СтрокаДанных = Новый Структура();
				СтрокаДанных.Вставить("Отметка", Истина);
				СтрокаДанных.Вставить("ТипТранспорта");
				СтрокаДанных.Вставить("ТранспортноеСредство");
				СтрокаДанных.Вставить("НомерТранспортногоСредства");
				СтрокаДанных.Вставить("НомерАвтомобильногоКонтейнера");
				ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаТаблицы);
				ПараметрыОткрытияФормы.ТранспортныеСредства.Добавить(СтрокаДанных);
			КонецЦикла;
			
			ПараметрыОповещения = Новый Структура();
			ПараметрыОповещения.Вставить("ИдентификаторСтрокиТоваров", ДанныеСтроки.Идентификатор);
			ПараметрыОповещения.Вставить("ВыбраннаяСтрока",            ВыбраннаяСтрока);
			
			ИнтеграцияЗЕРНОСлужебныйКлиент.ОткрытьФормуУказанияТранспортныхСредств(
				ПараметрыОткрытияФормы,
				ЭтотОбъект,
				Новый ОписаниеОповещения("ВыборТранспортныхСредствЗавершение", ЭтотОбъект, ПараметрыОповещения));
		
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыСДИЗ Тогда
		
		Если РедактированиеФормыНеДоступно Тогда
			ПоказатьЗначение(, ДанныеСтроки.СДИЗ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСДИЗПриИзменении(Элемент)
	
	СДИЗПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСДИЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СДИЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПолноеПогашениеПриИзменении(Элемент)
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПолноеПогашение");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТранспортныеСредства

&НаКлиенте
Процедура ТранспортныеСредстваОтметкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТранспортныеСредства.НайтиПоИдентификатору(Элементы.ТранспортныеСредства.ТекущаяСтрока);
	
	ОбработкаСнятияУстановкиОтметкиТранспортногоСредства(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПогашениеСДИЗЗЕРНО.Форма.ФормаДокумента.Провести",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПогашениеСДИЗЗЕРНО.Форма.ФормаДокумента.Записать",,Истина);
	
	ОчиститьСообщения();
	Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПогашениеСДИЗЗЕРНО.Форма.ФормаДокумента.ПровестиИЗакрыть",,Истина);
	
	ОчиститьСообщения();
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваОтметитьВсе(Команда)
	
	ТранспортныеСредстваУстновитьСнятьОтметку(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваСнятьОтметку(Команда)
	
	ТранспортныеСредстваУстновитьСнятьОтметку(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьРазвернутьПанель(Команда)
	
	ПанельДополнительныеСвойстваСвернута = Не ПанельДополнительныеСвойстваСвернута;
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ПанельДополнительныеСвойстваСвернута");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодбор(Команда)
	
	// &ЗамерПроизводительности
	ОценкаПроизводительностиКлиент.ЗамерВремени("Документ.ПогашениеСДИЗЗЕРНО.ФормаДокумента.Команда.ОткрытьПодбор");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ОбработкаРезультатаПодбораНоменклатуры", ЭтотОбъект);
	СобытияФормЗЕРНОКлиентПереопределяемый.ОткрытьФормуПодбораНоменклатуры(ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьДокумент(Команда)
	
	ИнтеграцияИСКлиент.АрхивироватьДокументы(ЭтотОбъект, Объект.Ссылка, ИнтеграцияЗЕРНОКлиент);
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьПогашениеСДИЗ(Команда)
	
	ОчиститьСообщения();
	
	СтрокиДляСписания = Новый Массив();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		ДанныеСтроки = Объект.Товары.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен")
			Или ДанныеСтроки.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОшибкаПередачи") Тогда
			СтрокиДляСписания.Добавить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиДляСписания.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Аннулирование списания по выделенным строкам невозможно'"));
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ВопросАннулированиеПогашенияСДИЗЗавершение",
			ЭтотОбъект,
			СтрокиДляСписания);
		ТекстВопроса = НСтр("ru = 'Документ ""Погашение СДИЗ ЗЕРНО"" был изменен. Провести?'");
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СтрокиТекстаВопроса = Новый Массив();
		
		Если СтрокиДляСписания.Количество() = 1 Тогда
			СтрокиТекстаВопроса.Добавить(
				СтрШаблон(НСтр("ru = 'Аннулировать погашение СДИЗ %1 ?'"), СтрокиДляСписания[0].Партия));
		Иначе
			СтрокиТекстаВопроса.Добавить(НСтр("ru = 'Аннулировать погашения СДИЗ ?'"));
			Для Каждого СтрокаТаблицы Из СтрокиДляСписания Цикл
				СтрокиТекстаВопроса.Добавить(Строка(СтрокаТаблицы.Партия));
			КонецЦикла;
		КонецЕсли;
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения(
			"ПодтверждениеАннулированияПогашенияСДИЗЗавершение",
			ЭтотОбъект,
			СтрокиДляСписания);
		
		ТекстВопроса = СтрСоединить(СтрокиТекстаВопроса, Символы.ПС);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступноеКоличество(Команда)
	
	Если Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда

		ТекущиеДанные                 = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		ВсегоКПогашениюПоСДИЗ         = ВсегоКПогашениюПоСДИЗ(ЭтотОбъект, ТекущиеДанные, Истина);
		УстановитьКоличество          = ТекущиеДанные.КоличествоДоступно - ВсегоКПогашениюПоСДИЗ;
		
		Если ТекущиеДанные.КоличествоЗЕРНО = УстановитьКоличество Тогда
			Возврат;
		КонецЕсли;
		
		ТекущиеДанные.КоличествоЗЕРНО = УстановитьКоличество;
		КоличествоЗЕРНОПриИзменении(Элементы.Товары.ТекущиеДанные);
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоРазбить = Элементы.Товары.ТекущиеДанные.КоличествоЗЕРНО;
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	
	ПараметрыРазбиенияСтроки = СобытияФормИСКлиент.ПараметрыРазбиенияСтроки(КоличествоРазбить);
	ПараметрыРазбиенияСтроки.ИмяПоляКоличество = "КоличествоЗЕРНО";
	
	СобытияФормИСКлиент.РазбитьСтрокуТабличнойЧасти(Объект.Товары, Элементы.Товары, ПараметрыРазбиенияСтроки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Результат = СгенерироватьСерииНаСервере();
	
	ИнтеграцияИСКлиент.ОповеститьОбОкончанииЗаполненияСерийВДокументе(Результат.ЗаполнениеЗавершено,
		Результат.СписокОшибок);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоОснованию(Команда)
	
	ОбработчикПерезаполненияПоОснованию();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияПогашенийУдалить(Команда)
	
	ОбработатьУдалениеСтрокиИсторияПогашений();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТранспортныеСредства

&НаКлиентеНаСервереБезКонтекста
Процедура СинхронизироватьОтметкиТранспортныхСредствНаФорме(Форма)
	
	Объект = Форма.Объект;
	
	Для Каждого СтрокаТаблицы Из Форма.ТранспортныеСредства Цикл
		
		СтруктураПоиска = СтруктураПоискаСтрокиТранспортнногоСредства();
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицы);
		
		СтрокаТаблицы.Отметка = (Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска).Количество() <> 0);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПоискаСтрокиТранспортнногоСредства()
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ИдентификаторСтрокиТоваров");
	СтруктураПоиска.Вставить("ТипТранспорта");
	СтруктураПоиска.Вставить("НомерТранспортногоСредства");
	СтруктураПоиска.Вставить("НомерАвтомобильногоКонтейнера");
	
	Возврат СтруктураПоиска;
	
КонецФункции

&НаСервере
Процедура ОчиститьТранспортныеСредстваПоИдентификаторуСтроки(ИдентификаторСтроки)
	
	Отбор = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтроки);
	СтрокиУдаления = Объект.ТранспортныеСредства.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		Объект.ТранспортныеСредства.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТранспортныеСредстваНаФормеПоИдентификаторуСтроки(ИдентификаторСтроки)
	
	Отбор = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтроки);
	СтрокиУдаления = ТранспортныеСредства.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		ТранспортныеСредства.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТранспортныеСредстваУстновитьСнятьОтметку(Отметка)
	
	Если Элементы.ТранспортныеСредства.ВыделенныеСтроки.Количество() > 1 Тогда
	
		Для Каждого ИдентификаторСтроки Из Элементы.ТранспортныеСредства.ВыделенныеСтроки Цикл
			ТекущиеДанные = ТранспортныеСредства.НайтиПоИдентификатору(ИдентификаторСтроки);
			ТекущиеДанные.Отметка = Отметка;
			ОбработкаСнятияУстановкиОтметкиТранспортногоСредства(ТекущиеДанные);
		КонецЦикла;
		
	ИначеЕсли Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		Если Объект.Корректировочный Тогда
			ТекущиеДанные   = Объект.ИсторияПогашений.НайтиПоИдентификатору(Элементы.ИсторияПогашений.ТекущаяСтрока);
		Иначе
			ТекущиеДанные   = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
		КонецЕсли;
		СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ТекущиеДанные.Идентификатор);
		СтрокиДанных    = ТранспортныеСредства.НайтиСтроки(СтруктураОтбора);
	
		Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
			СтрокаТаблицы.Отметка = Отметка;
			ОбработкаСнятияУстановкиОтметкиТранспортногоСредства(СтрокаТаблицы);
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСнятияУстановкиОтметкиТранспортногоСредства(ТекущиеДанные)
	
	СтруктураПоиска = СтруктураПоискаСтрокиТранспортнногоСредства();
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	
	ПоискСтрок = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
	
	Если ТекущиеДанные.Отметка И ПоискСтрок.Количество() = 0 Тогда
		НоваяСтрока = Объект.ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные);
	ИначеЕсли Не ТекущиеДанные.Отметка И ПоискСтрок.Количество() Тогда
		Для Каждого СтрокаТаблицы Из ПоискСтрок Цикл
			Объект.ТранспортныеСредства.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	СтруктураПоиска = Новый Структура("Идентификатор", ТекущиеДанные.ИдентификаторСтрокиТоваров);
	
	Если Объект.Корректировочный Тогда
		ИдентификаторСтроки = Элементы.ИсторияПогашений.ТекущиеДанные.ПолучитьИдентификатор();
		РедактируемаяСтрока = Объект.ИсторияПогашений.НайтиПоИдентификатору(ИдентификаторСтроки);
	Иначе
		СтрокиТоваров = Объект.Товары.НайтиСтроки(СтруктураПоиска);
		РедактируемаяСтрока  = СтрокиТоваров[0];
		УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, РедактируемаяСтрока);
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ИдентификаторСтрокиТоваров", ТекущиеДанные.ИдентификаторСтрокиТоваров);
	
	ОтмеченныеСтроки = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
	ВсеСтроки        = ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
	
	Если ОтмеченныеСтроки.Количество() Тогда
		РедактируемаяСтрока.СтатусУказанияТранспорта = 2;
	ИначеЕсли ВсеСтроки.Количество() Тогда
		РедактируемаяСтрока.СтатусУказанияТранспорта = 1;
	Иначе
		РедактируемаяСтрока.СтатусУказанияТранспорта = 0;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборТранспортныхСредствЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтрокиТоваров;
	ВыбраннаяСтрока     = ДополнительныеПараметры.ВыбраннаяСтрока;
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ИдентификаторСтроки);
	СтрокиДанных = Объект.ТранспортныеСредства.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиДанных Цикл
		Объект.ТранспортныеСредства.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	СтрокиРасчетаПредставления = Новый Массив;
	
	Для Каждого СтрокаДанных Из Результат.ТранспортныеСредства Цикл
		
		Если Не СтрокаДанных.Отметка Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Объект.ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		НоваяСтрока.ИдентификаторСтрокиТоваров = ИдентификаторСтроки;
		
		СтрокиРасчетаПредставления.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	СтрокаТовары = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, СтрокаТовары);
	СинхронизироватьОтметкиТранспортныхСредствНаФорме(ЭтотОбъект);
	
	Если Не Объект.Корректировочный Тогда
		РассчитатьСтатусУказанияТранспортныхСредствПоСтроке(СтрокаТовары.Идентификатор);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтатусУказанияТранспортныхСредствПоСтроке(ИдентификаторСтроки = Неопределено)
	
	ИнтеграцияЗЕРНО.РассчитатьСтатусУказанияТранспортныхСредств(Объект, ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеТранспортныхСредствПоСтроке(Форма, СтрокаТовары)
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТоваров", СтрокаТовары.Идентификатор);
	СтрокиТранспортныхСредств = Форма.Объект.ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
	
	ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиТранспортныеСредства();
	
	ПредставлениеТранспортныхСредств = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
		СтрокиТранспортныхСредств,
		ПараметрыФормированияНадписи);
	
	СтрокаТовары.ТранспортПредставление = ПредставлениеТранспортныхСредств;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТранспортныхСредствПоСтроке()

	Если Объект.Корректировочный Тогда
		ТекущиеДанные = Элементы.ИсторияПогашений.ТекущиеДанные;
	Иначе
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТоваров", Строка(Новый УникальныйИдентификатор));
	Иначе
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТоваров", ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
	Элементы.ТранспортныеСредства.ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТранспорныеСредстваНаФорма(ИсходныйИдентификаторСтроки, НовыйИдентификаторСтроки)
	
	СтруктураОтбора = Новый Структура("ИдентификаторСтрокиТоваров", ИсходныйИдентификаторСтроки);
	
	Для Каждого СтрокаТаблицы Из ТранспортныеСредства.НайтиСтроки(СтруктураОтбора) Цикл
		
		НоваяСтрока = ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ИдентификаторСтрокиТоваров = НовыйИдентификаторСтроки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборИсторияПогашений(Форма, ИдентификаторСтроки)
	
	СтрокаТовары = Форма.Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтруктураПоиска = Новый Структура("СДИЗ", СтрокаТовары.СДИЗ);
	
	Форма.Элементы.ИсторияПогашений.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураПоиска);
	
КонецПроцедуры

#КонецОбласти

#Область ИсторияПогашений

&НаКлиенте
Процедура ОбновитьСтрокуИсторияПогашений(СтрокаТовары);
	
	Отбор = Новый Структура("СДИЗ", СтрокаТовары.СДИЗ);
	МассивИсторияПогашений = Объект.ИсторияПогашений.НайтиСтроки(Отбор);
		
	КоличествоЗЕРНО = СтрокаТовары.КоличествоЗЕРНО;
	
	КоличествоПогашено = 0;
	КоличествоДоступныхПартий = 0;
	КоличествоТекущееПогашено = 0;
	Для Каждого Строка Из МассивИсторияПогашений Цикл
		
		Если ЗначениеЗаполнено(Строка.Партия) Тогда
			КоличествоПогашено = КоличествоПогашено + Строка.КоличествоЗЕРНО;
		КонецЕсли;
		
		Если Строка.КоличествоОстатокПартииЗЕРНО = Строка.КоличествоЗЕРНО Тогда
			КоличествоДоступныхПартий = КоличествоДоступныхПартий + Строка.КоличествоЗЕРНО;
		КонецЕсли;
		
		Если Строка.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование") Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоТекущееПогашено = КоличествоТекущееПогашено + Строка.КоличествоЗЕРНО;
	
	КонецЦикла;
	
	ТекстОшибки = Новый Массив;
	Если КоличествоДоступныхПартий < КоличествоПогашено Тогда
		ТекстОшибки.Добавить(НСтр("ru = 'Корректировка СДИЗ невозможна'"));
		ТекстОшибки.Добавить(Символы.ПС);
	КонецЕсли;
	
	ОтобразитьСостояниеКорректировкаНевозможна(ЭтотОбъект, ТекстОшибки);
	
	Если ТекстОшибки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоЗЕРНО = КоличествоПогашено Тогда
		ОчиститьОперации(МассивИсторияПогашений);
		Возврат;
	КонецЕсли;
	
	КоличествоИзменение = КоличествоЗЕРНО - КоличествоТекущееПогашено;
	
	МассивИсторияПогашений = Объект.ИсторияПогашений.НайтиСтроки(Отбор);
	
	Если КоличествоИзменение > 0 Тогда
		УвеличитьКоличествоПогашения(МассивИсторияПогашений, КоличествоИзменение);
	ИначеЕсли КоличествоИзменение < 0 Тогда
		УменьшитьКоличествоПогашения(МассивИсторияПогашений, КоличествоИзменение);
	КонецЕсли;
	
	ДоступностьПричиныИсторияПогашений(МассивИсторияПогашений);
	
	ОбновитьСвязанныеЭлементыИсторииПогашений();
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьКоличествоПогашения(МассивИсторияПогашений, КоличествоИзменение)
	
	Индекс = МассивИсторияПогашений.ВГраница();
	
	ПоследнняяСтрока = МассивИсторияПогашений[Индекс];
	
	Если ЗначениеЗаполнено(ПоследнняяСтрока.Партия) Тогда
		НоваяПартияСтрока = Объект.ИсторияПогашений.Добавить();
		КопируемыеРеквизиты = "СДИЗ, Номенклатура, Характеристика, Серия";
		ЗаполнитьЗначенияСвойств(НоваяПартияСтрока, ПоследнняяСтрока, КопируемыеРеквизиты);
		НоваяПартияСтрока.Идентификатор = Новый УникальныйИдентификатор;
	Иначе
		НоваяПартияСтрока = ПоследнняяСтрока;
	КонецЕсли;
	
	НоваяПартияСтрока.КоличествоЗЕРНО = НоваяПартияСтрока.КоличествоЗЕРНО + КоличествоИзменение;
	НоваяПартияСтрока.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗ");
	НоваяПартияСтрока.ОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗ");
	
	Пока Индекс >= 0 Цикл
		
		ТекущаяСтрока = МассивИсторияПогашений[Индекс];
		
		Индекс = Индекс-1;
		
		Если ТекущаяСтрока.ПолноеПогашение И ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			
			Реквизиты = "ПричинаРасхождения,ОписаниеПричиныРасхождения,ДляПроизводстваНеПрослеживаемойПродукции,ПолноеПогашение";
			ЗаполнитьЗначенияСвойств(НоваяПартияСтрока, ТекущаяСтрока, Реквизиты);
			
			Если ТекущаяСтрока.Операция <> ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование") Тогда
				НоваяПартияСтрока.КоличествоЗЕРНО = НоваяПартияСтрока.КоличествоЗЕРНО + ТекущаяСтрока.КоличествоЗЕРНО;
				ТекущаяСтрока.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование");
				ТекущаяСтрока.ОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование");
			КонецЕсли;
			
			СформироватьПредставлениеПолногоПогашения(НоваяПартияСтрока);
			
		КонецЕсли;
		
		СкопироватьТранспортныеСредстваИзИстории(ТекущаяСтрока, НоваяПартияСтрока, НоваяПартияСтрока.ПолноеПогашение);
		
	КонецЦикла;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, НоваяПартияСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
	Если НоваяПартияСтрока.КоличествоЗЕРНО = 0 Тогда
		Объект.ИсторияПогашений.Удалить(НоваяПартияСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьПричиныИсторияПогашений(МассивИсторияПогашений)
	
	Индекс = МассивИсторияПогашений.ВГраница();
	ПоследнняяСтрока = МассивИсторияПогашений[Индекс];
	
	Если ЗначениеЗаполнено(ПоследнняяСтрока.Партия) Тогда
		Возврат;
	Иначе
		НоваяПартияСтрока = ПоследнняяСтрока;
	КонецЕсли;
	
	ТекущиеДанныеТовары = Элементы.Товары.ТекущиеДанные;
	
	ВсегоКПогашениюПоСДИЗ = ВсегоКПогашениюПоСДИЗ(ЭтотОбъект, ТекущиеДанныеТовары);
	ПогашеноПоКорректировке = ТекущиеДанныеТовары.КоличествоДоступно + ТекущиеДанныеТовары.КоличествоПогашено;
	НоваяПартияСтрока.ДоступностьПричиныРасхождения = (ПогашеноПоКорректировке - ВсегоКПогашениюПоСДИЗ) <> 0;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьТранспортныеСредстваИзИстории(ТекущаяСтрока, НоваяПартияСтрока, ПолноеПогашение)
	
	ОтборТранспортныеСредства = Новый Структура("ИдентификаторСтрокиТоваров", НоваяПартияСтрока.Идентификатор);
	МассивТранспортныеСредства = ТранспортныеСредства.НайтиСтроки(ОтборТранспортныеСредства);
	
	Если МассивТранспортныеСредства.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	СкопироватьТранспорныеСредстваНаФорма(ТекущаяСтрока.Идентификатор, НоваяПартияСтрока.Идентификатор);
	
	ОтборТранспортныеСредства = Новый Структура("ИдентификаторСтрокиТоваров", ТекущаяСтрока.Идентификатор);
	МассивТранспортныеСредства = Объект.ТранспортныеСредства.НайтиСтроки(ОтборТранспортныеСредства);
	Для Каждого СтрокаТС Из МассивТранспортныеСредства Цикл
		КопируемаяСтрока = Объект.ТранспортныеСредства.Добавить();
		ЗаполнитьЗначенияСвойств(КопируемаяСтрока, СтрокаТС);
		КопируемаяСтрока.ИдентификаторСтрокиТоваров = НоваяПартияСтрока.Идентификатор;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОперации(МассивИсторияПогашений)
	
	Инд = МассивИсторияПогашений.ВГраница();
	КоличествоПогашено = 0;
	Пока Инд >= 0 Цикл
		
		ТекущаяСтрока = МассивИсторияПогашений[Инд];
		
		Инд = Инд -1;
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			УдалитьСтрокуИсторияПогашений(ТекущаяСтрока);
		Иначе
			ТекущаяСтрока.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПустаяСсылка");
			ТекущаяСтрока.ОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПустаяСсылка");
			КоличествоПогашено = КоличествоПогашено + ТекущаяСтрока.КоличествоЗЕРНО;
		КонецЕсли;

	КонецЦикла;
	
	Отбор = Новый Структура("СДИЗ", МассивИсторияПогашений[0].СДИЗ);
	СтрокиТовары = Объект.Товары.НайтиСтроки(Отбор);
	СтрокиТовары[0].КоличествоЗЕРНО = КоличествоПогашено;
	
	ДоступностьТранспортныхСредств();
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьКоличествоПогашения(МассивИсторияПогашений, КоличествоИзменение, ЭтоПолноеПогашение = Ложь)
	
	Если ЭтоПолноеПогашение Тогда
		ОчиститьОперации(МассивИсторияПогашений);
		Возврат;
	КонецЕсли;
	
	Инд = МассивИсторияПогашений.ВГраница();
	Остаток = -1*КоличествоИзменение;
	
	// Редактирование последней строки
	ПоследняяСтрока = МассивИсторияПогашений[Инд];
	
	Если Не ЗначениеЗаполнено(ПоследняяСтрока.Партия) Тогда
		
		ТекущийОстаток = ПоследняяСтрока.КоличествоЗЕРНО - Остаток;
		
		Если ТекущийОстаток > 0 Тогда
			
			ПоследняяСтрока.КоличествоЗЕРНО = ТекущийОстаток;
			
			СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
				ЭтотОбъект, ПоследняяСтрока, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
			
			Возврат;
		Иначе
			
			Остаток = Остаток - ПоследняяСтрока.КоличествоЗЕРНО;
			УдалитьСтрокуИсторияПогашений(ПоследняяСтрока);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Пока Инд >= 0 И Остаток > 0 Цикл
		
		ТекущаяСтрока = МассивИсторияПогашений[Инд];
		
		Инд = Инд -1;
		Если ТекущаяСтрока.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование")
			Или Не ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			Продолжить;
		ИначеЕсли ТекущаяСтрока.ПолноеПогашение Тогда
			
			// нужно аннулировать и погасить частично
			ТекущаяСтрока.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование");
			ТекущаяСтрока.ОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование");
			КоличествоИзменение = ТекущаяСтрока.КоличествоЗЕРНО - Остаток;
			
			Если КоличествоИзменение > 0 Тогда
				УвеличитьКоличествоПогашения(МассивИсторияПогашений, КоличествоИзменение);
				Остаток = 0;
			Иначе
				Остаток = Остаток - ПоследняяСтрока.КоличествоЗЕРНО;
			КонецЕсли;
			
		Иначе
			
			ТекущийОстаток = ТекущаяСтрока.КоличествоЗЕРНО - Остаток;
			
			Если ТекущийОстаток > 0 Тогда
				Остаток = 0;
				УвеличитьКоличествоПогашения(МассивИсторияПогашений, ТекущийОстаток);
			Иначе
				Остаток = Остаток - ТекущаяСтрока.КоличествоЗЕРНО;
			КонецЕсли;
			
			ТекущаяСтрока.Операция = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование");
			ТекущаяСтрока.ОперацияДоИзменения = ПредопределенноеЗначение("Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуИсторияПогашений(ТекущиеДанные = Неопределено)
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОбновитьСтрокуИсторияПогашений(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуИсторияПогашений(Строка)
	
	ОтборТранспортныеСредства = Новый Структура("ИдентификаторСтрокиТоваров", Строка.Идентификатор);
	МассивТранспортныеСредства = Объект.ТранспортныеСредства.НайтиСтроки(ОтборТранспортныеСредства);
	
	Для Каждого СтрокаТС Из МассивТранспортныеСредства Цикл
		Объект.ТранспортныеСредства.Удалить(СтрокаТС);
	КонецЦикла;
	
	МассивТранспортныеСредства = ТранспортныеСредства.НайтиСтроки(ОтборТранспортныеСредства);
	
	Для Каждого СтрокаТС Из МассивТранспортныеСредства Цикл
		ТранспортныеСредства.Удалить(СтрокаТС);
	КонецЦикла;
	
	Объект.ИсторияПогашений.Удалить(Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУдалениеСтрокиИсторияПогашений()
	
	ТекущиеДанные = Элементы.ИсторияПогашений.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Партия) Тогда
		КоличествоЗЕРНО = ТекущиеДанные.КоличествоЗЕРНО;
		ОтборСтрок = Новый Структура("СДИЗ", ТекущиеДанные.СДИЗ);
		СтрокиТовары = Объект.Товары.НайтиСтроки(ОтборСтрок);
		СтрокиТовары[0].КоличествоЗЕРНО = СтрокиТовары[0].КоличествоЗЕРНО - КоличествоЗЕРНО;
		
		УдалитьСтрокуИсторияПогашений(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьТранспортныхСредств()
	
	ТекущиеДанные = Элементы.ИсторияПогашений.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Погашение = Не ЗначениеЗаполнено(ТекущиеДанные.Партия);
	
	Элементы.ИсторияПогашенийИсторияПогашенийУдалить.Доступность = Погашение;
	Элементы.ИсторияПогашенийКонтекстноеМенюУдалить.Доступность  = Погашение;
	Элементы.ТранспортныеСредстваОтметка.ТолькоПросмотр          = Не Погашение;
	Элементы.ТранспортныеСредстваОтметитьВсе.Доступность         = Погашение;
	Элементы.ТранспортныеСредстваСнятьОтметку.Доступность        = Погашение;
	
	УстановитьОтборТранспортныхСредствПоСтроке();
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НастройкаПолногоПогашенияЗавершение(Результат, ИдентификаторСтроки) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элементы.ИсторияПогашений.ДанныеСтроки(ИдентификаторСтроки);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат);
	
	СформироватьПредставлениеПолногоПогашения(ТекущаяСтрока);
	
	Модифицированность = Результат.Модифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура СДИЗНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
	ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыОткрытия.Вставить("Отбор",              СтруктураОтбораСДИЗ(ТекущиеДанные));
	ПараметрыОткрытия.Вставить("Получатель",         Объект.Организация);
	
	ОткрытьФорму("Справочник.СДИЗЗЕРНО.ФормаВыбора",
		ПараметрыОткрытия, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтбораСДИЗ(ТекущиеДанные)
	
	СтруктураОтбора = Новый Структура;
	
	СтруктураОтбора.Вставить("Статус", Новый Массив);
	СтруктураОтбора.Статус.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСДИЗЗЕРНО.Оформлен"));
	СтруктураОтбора.Статус.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыСДИЗЗЕРНО.ОформленИПодтвержден"));
	
	РеквизитыОтбора = ПоляОтбораШапкиСДИЗ();
	
	Для Каждого КлючИЗначение Из РеквизитыОтбора Цикл
		СтруктураОтбора.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ОКПД2) Тогда
			ЭлементОКПД2 = ТекущиеДанные.ОКПД2;
			ДоступныеОКПД2 = Новый Массив;
			Пока ЭлементОКПД2 <> "" Цикл
				ДоступныеОКПД2.Добавить(ЭлементОКПД2);
				ПозицияТочки = СтрНайти(ЭлементОКПД2, ".", НаправлениеПоиска.СКонца);
				ЭлементОКПД2 = ?(ПозицияТочки > 0, Лев(ЭлементОКПД2, ПозицияТочки - 1), "");
			КонецЦикла;
			СтруктураОтбора.Вставить("ОКПД2", ДоступныеОКПД2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.КодТНВЭД) Тогда
			ДоступныеТНВЭД = Новый Массив;
			ДоступныеТНВЭД.Добавить("");
			ДоступныеТНВЭД.Добавить(ТекущиеДанные.КодТНВЭД);
			СтруктураОтбора.Вставить("КодТНВЭД", ДоступныеТНВЭД);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтотОбъект);
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеКоличестваДляПустойНоменклатуры(ЭтотОбъект);
	СобытияФормЗЕРНО.УстановитьУсловноеОформлениеОКПД2(ЭтотОбъект);
	
	СтатусыВозможногоАннулирования = Новый СписокЗначений();
	СтатусыВозможногоАннулирования.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен);
	СтатусыВозможногоАннулирования.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Погашен'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Погашен частично'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСтатусОбработки.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Отсутствует>'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыТранспортПредставление.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Товары.СтатусУказанияТранспорта");
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Корректировочный");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Не требуется>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПредставлениеПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.Партия");
	ОтборЭлемента.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеСредства.ПутьКДанным);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТранспортныеСредстваОтметка.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	СтатусыМожноРедактировать = Новый СписокЗначений();
	СтатусыМожноРедактировать.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик);
	СтатусыМожноРедактировать.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОшибкаПередачи);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПричинаРасхождения.Имя);
	
	ГруппаУсловий = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаУсловий.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаУсловий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ТоварыПолноеПогашение.ПутьКДанным);
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаУсловий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СтатусЗЕРНО");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СтатусыМожноРедактировать;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Будет создана автоматически'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПримечание.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПримечаниеГиперссылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПримечаниеГиперссылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийДоступностьПричиныРасхождения.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПричинаРасхождения.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПримечаниеГиперссылка.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПолноеПогашение.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Неполное погашение'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийОперация.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийПартия.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийОперация.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийОперация.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Без изменений'"));
	
	//
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийОперация.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийКоличествоЗЕРНО.ПутьКДанным);
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(Элементы.ИсторияПогашенийКоличествоОстатокПартииЗЕРНО.ПутьКДанным);
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);

КонецПроцедуры

&НаСервере
Процедура ПриСозданииЧтенииНаСервере()
	
	ИнтеграцияЗЕРНО.УстановитьДоступностьПоляСтатус(ЭтотОбъект);
	
	ЦветГиперссылки = ЦветаСтиля.ЦветГиперссылкиГосИС;
	
	ПравоИзменения = ПравоДоступа("Изменение", Метаданные.Документы.ПогашениеСДИЗЗЕРНО);
	
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерийФормыОбъекта(Объект, Документы.ПогашениеСДИЗЗЕРНО);
	
	ЕдиницаИзмеренияКилограмм = ИнтеграцияИСКлиентСерверПовтИсп.ЕдиницаИзмеренияКилограмм();
	
	Если Объект.Товары.Количество() Тогда
		ИнициализироватьСлужебныеРеквизитыТоваров();
	КонецЕсли;
	
	Если Объект.Корректировочный Тогда
		ИнициализироватьСлужебныеРеквизитыДанныхИсторияПогашений();
	КонецЕсли;
	
	ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект);
	
	СерииИспользуются = ИнтеграцияИС.СерииИспользуются();
	Элементы.ТоварыСерия.Видимость = СерииИспользуются;
	Элементы.СгенерироватьСерии.Видимость = СерииИспользуются И Не Объект.Корректировочный;
	
	ВидимостьИДоступностьЭлементовПриСозданииЧтенииСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьЗависимыеЭлементыФормы(Форма, ИдентификаторСтроки = Неопределено, СписокРеквизитов = "")
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Инициализация = ПустаяСтрока(СписокРеквизитов);
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИначеЕсли Элементы.Товары.ТекущаяСтрока <> Неопределено Тогда
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ДокументОснование")
		Или СтруктураРеквизитов.Свойство("Операция") Тогда
		ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(Форма);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("СтатусЗЕРНО") Тогда
		
		РедактированиеФормыНеДоступно = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОшибкаПередачи");
		
		Форма.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
		
		ЗависимыеОтСтатусаЗЕРНО = Новый Массив;
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаНередактируемыеПослеОтправкиРеквизитыОсновное");
		ЗависимыеОтСтатусаЗЕРНО.Добавить("ГруппаНередактируемыеПослеОтправкиКомандыДанныеОтчета");
		
		ВидимостьСтатусаСтроки = Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик")
		                          И Форма.СтатусЗЕРНО <> ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано");
		
		ДоступностьКнопкиАннулирования = Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен")
		                             Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично");
		
		Элементы.ТоварыСтатусОбработки.Видимость             = ВидимостьСтатусаСтроки И Объект.Товары.Количество() > 1;
		Элементы.ТоварыАннулироватьПогашениеСДИЗ.Доступность = ДоступностьКнопкиАннулирования;
		
		Если РедактированиеФормыНеДоступно Тогда
			Элементы.ТоварыСпискомПричинаРасхождения.АвтоОтметкаНезаполненного = Ложь;
			Элементы.ТоварыПричинаРасхождения.АвтоОтметкаНезаполненного        = Ложь;
		Иначе
			Элементы.ТоварыСпискомПричинаРасхождения.АвтоОтметкаНезаполненного = Истина;
			Элементы.ТоварыПричинаРасхождения.АвтоОтметкаНезаполненного        = Истина;
		КонецЕсли;
		
		// Товары.
		Исключения = "ТоварыНайти, ТоварыОтменитьПоиск, ТоварыКонтекстноеМенюКопированиеИВыделение, "
				+ "ТоварыАннулироватьСписаниеПартии, СгенерироватьСерии, ТоварыПерезаполнитьПоОснованию, "
				+ "ТоварыНоменклатура, ТоварыХарактеристика, ТоварыСерия, ТоварыКоличество, СвернутьПанель, РазвернутьПанель, "
				+ "ТранспортныеСредстваТипТранспорта, ТранспортныеСредстваНомерТранспортногоСредства, "
				+ "ТранспортныеСредстваНомерАвтомобильногоКонтейнера, ТоварыТранспортПредставление, ТоварыПредставлениеПартия, "
				+ "ТоварыЕдиницаИзмерения, ТоварыОКПД2, ТоварыКодТНВЭД, ТоварыКоличествоДоступно, ТоварыКоличествоПогашено, ТоварыКоличествоОтказПогашения, ТоварыАннулироватьПогашениеСДИЗ, ";
		
		Если Объект.Корректировочный Тогда
			Исключения = Исключения + "ТранспортныеСредстваОтметка, ТранспортныеСредстваОтметитьВсе, ТранспортныеСредстваСнятьОтметку";
		КонецЕсли;
		
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовГруппыФормыРекурсивно(
			Элементы.СтраницаТовары, Не Форма.РедактированиеФормыНеДоступно, Исключения);
		ИнтеграцияИСКлиентСервер.УстановитьДоступностьЭлементовФормы(
			Форма, ЗависимыеОтСтатусаЗЕРНО, Не Форма.РедактированиеФормыНеДоступно);
		
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("ПанельДополнительныеСвойстваСвернута")
		Или Инициализация Тогда
		
		Элементы.ГруппаТоварыСпискомПанель.Видимость = Не Форма.ПанельДополнительныеСвойстваСвернута;
		Элементы.ГруппаТоварыСпискомПанельСвернута.Видимость = Форма.ПанельДополнительныеСвойстваСвернута;
	
	КонецЕсли;
	
	Если Инициализация Или СтруктураРеквизитов.Свойство("ОбновитьСтатусЗЕРНО") Тогда
		
		УстановитьПараметрыОбновленияСтатуса = Форма.Модифицированность И НЕ Инициализация;
		ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("Товары")
		Или СтруктураРеквизитов.Свойство("СтатусЗЕРНО")
		Или СтруктураРеквизитов.Свойство("ОбновитьСтатусЗЕРНО") Тогда
		
		ВидимостьОстаткаКПогашению = (Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик")
			Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗКПередаче")
			Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен")
			Или Форма.СтатусЗЕРНО = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично"));
		
		Если ТекущиеДанные = Неопределено Или Не ВидимостьОстаткаКПогашению Тогда
			
			Элементы.ЗаполнитьДоступноеКоличество.РасширеннаяПодсказка.Заголовок = "";
			
		Иначе
			Если Объект.Корректировочный Тогда
				ОтображаемоеКоличество = ОстатокПартииСДИЗ(ТекущиеДанные.СДИЗ);
			ИначеЕсли ТекущиеДанные.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен") Тогда
				ОтображаемоеКоличество = ТекущиеДанные.КоличествоИсходное;
			Иначе
				ОтображаемоеКоличество = ТекущиеДанные.КоличествоДоступно;
			КонецЕсли;
			Элементы.ЗаполнитьДоступноеКоличество.РасширеннаяПодсказка.Заголовок = СтрШаблон(
				НСтр("ru = 'из %1 кг'"), ОтображаемоеКоличество);
			
		КонецЕсли;
		
		Элементы.СгенерироватьСерии.Доступность = Не Форма.РедактированиеФормыНеДоступно;
		Элементы.РазбитьСтроку.Доступность      = Не Форма.РедактированиеФормыНеДоступно;
		
	КонецЕсли;
		
	Если ТекущиеДанные <> Неопределено
		И (Инициализация
			Или СтруктураРеквизитов.Свойство("СтатусЗЕРНО")
			Или СтруктураРеквизитов.Свойство("ОбновитьСтатусЗЕРНО")
			Или СтруктураРеквизитов.Свойство("ПолноеПогашение")
			Или СтруктураРеквизитов.Свойство("Товары")) Тогда
		
		ДоступностьПричины = Ложь;
		
		Если ТекущиеДанные.ПолноеПогашение Тогда
			
			ВсегоКПогашениюПоСДИЗ = ВсегоКПогашениюПоСДИЗ(Форма, ТекущиеДанные);
			Если (ТекущиеДанные.КоличествоДоступно - ВсегоКПогашениюПоСДИЗ) <> 0 Тогда
				ДоступностьПричины = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Элементы.ТоварыСпискомПричинаРасхождения.Доступность         = ДоступностьПричины;
		Элементы.ТоварыСпискомОписаниеПричиныРасхождения.Доступность = ДоступностьПричины;
		Если Не Форма.РедактированиеФормыНеДоступно Тогда
			Элементы.ТоварыПричинаРасхождения.ТолькоПросмотр             = Не ДоступностьПричины;
			Элементы.ТоварыОписаниеПричиныРасхождения.ТолькоПросмотр     = Не ДоступностьПричины;
		КонецЕсли;
		
		// Действия с погашением СДИЗ на разную номенклатуру
		Если ЗначениеЗаполнено(ТекущиеДанные.СДИЗ) Тогда
			Отбор = Новый Структура("СДИЗ", ТекущиеДанные.СДИЗ);
			СтрокиСДИЗ = Объект.Товары.НайтиСтроки(Отбор);
			Если СтрокиСДИЗ.Количество() > 1 Тогда
				ВсегоПоСДИЗ = 0;
				Для Каждого СтрокаСДИЗ Из СтрокиСДИЗ Цикл
					ВсегоПоСДИЗ = ВсегоПоСДИЗ + СтрокаСДИЗ.КоличествоЗЕРНО;
					Если ТекущиеДанные.ПолноеПогашение И ТекущиеДанные <> СтрокаСДИЗ Тогда
						СтрокаСДИЗ.ПолноеПогашение = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Инициализация
		Или СтруктураРеквизитов.Свойство("Товары") Тогда
		
		ПараметрыФормированияНадписи = ИнтеграцияЗЕРНОКлиентСервер.ПараметрыПредставленияТабличнойЧастиСвязанныхДокументов();
		ПараметрыФормированияНадписи.Уникальные = Истина;
		
		ПредставлениеСвязанныхДокументов = ИнтеграцияЗЕРНОКлиентСервер.СформироватьНадписьПоДаннымТабличнойЧасти(
			Форма.СвязанныеДокументы,
			ПараметрыФормированияНадписи);
		
		Если Форма.СвязанныеДокументы.Количество() Тогда
			Форма.ПредставлениеСвязанныхДокументов = Новый ФорматированнаяСтрока(
				ПредставлениеСвязанныхДокументов,,,, "ОткрытьОбщуюФормуСвязанныеДокументы");
		Иначе
			Форма.ПредставлениеСвязанныхДокументов = Новый ФорматированнаяСтрока(ПредставлениеСвязанныхДокументов);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВсегоКПогашениюПоСДИЗ(Форма, ТекущиеДанные, БезУчетаТекущейСтроки = Ложь)
	
	ВсегоПоСДИЗ = 0;
	Отбор = Новый Структура("СДИЗ", ТекущиеДанные.СДИЗ);
	СтрокиСДИЗ = Форма.Объект.Товары.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из СтрокиСДИЗ Цикл
		Если БезУчетаТекущейСтроки И СтрокаТаблицы = ТекущиеДанные Тогда
			Продолжить;
		КонецЕсли;
		ВсегоПоСДИЗ = ВсегоПоСДИЗ + СтрокаТаблицы.КоличествоЗЕРНО;
	КонецЦикла;
	
	Возврат ВсегоПоСДИЗ;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеВыбораОснования(ДанныеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ДанныеВыбора = Элементы.ДокументОснование.ДоступныеТипы.ПривестиЗначение(ДанныеВыбора) Тогда
		Объект.ДокументОснование = ДанныеВыбора;
		Модифицированность       = Истина;
	КонецЕсли;
	
	ЗаполнитьТовары = (ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработатьПерезаполнение"));
	Если ЗаполнитьТовары Тогда
		ОбработчикПерезаполненияПоОснованию();
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ДокументОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПерезаполненияПоОснованию()
	
	ОчиститьСообщения();
	
	ПерезаполнитьПоОснованиюСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьПоОснованиюСервер()
	
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	ТекущийОбъект.Заполнить(Объект.ДокументОснование);
	
	ЗначениеВРеквизитФормы(ТекущийОбъект, "Объект");
	
	ПриСозданииЧтенииНаСервере();
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриЗавершенииОперации(Результат, ДополнительныеПараметры) Экспорт
	
	Прочитать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРеквизитаШапкиСДИЗ(Элемент, СтандартнаяОбработка, ВыбранноеЗначение = Неопределено)
	
	ПервыйЗаполненныйСДИЗ = ПервыйЗаполненныйСДИЗ(ЭтотОбъект);
	ТекущееЗначение = Объект[Элемент.Имя];
	Если ЗначениеЗаполнено(ПервыйЗаполненныйСДИЗ)
		И (ВыбранноеЗначение <> ТекущееЗначение
			Или ВыбранноеЗначение = Неопределено И ЗначениеЗаполнено(ТекущееЗначение)) Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'При изменении поля %1 в табличной части Товары будут очищены СДИЗ. Продолжить?'"),
			Элемент.Заголовок);
		ПараметрыОповещения = Новый Структура();
		ПараметрыОповещения.Вставить("ВыбранноеЗначение", ВыбранноеЗначение);
		ПараметрыОповещения.Вставить("ИмяПоля",           Элемент.Имя);
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ВопросПриИзмененииПоляШапкиСДИЗЗавершении",
			ЭтотОбъект,
			ПараметрыОповещения);

		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		НастроитьСвязиПараметровВыбораСДИЗ();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПервыйЗаполненныйСДИЗ(Форма)
	
	СДИЗ = Неопределено;
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.СДИЗ) Тогда
			СДИЗ = СтрокаТовары.СДИЗ;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СДИЗ;
	
КонецФункции

#Область ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт 
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыИСКлиентСервер.УправлениеВидимостьюКомандПодключенныхКОбъекту(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НоменклатураПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохраняемыеДанные = Новый Структура;
	Если ЗначениеЗаполнено(ТекущиеДанные.СДИЗ) Тогда
		СохраняемыеДанные.Вставить("ОКПД2", ТекущиеДанные.ОКПД2);
		СохраняемыеДанные.Вставить("КодТНВЭД", ТекущиеДанные.КодТНВЭД);
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииНоменклатуры(
		ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СохраняемыеДанные);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.КоличествоЗЕРНО) Тогда
		КоличествоЗЕРНОПриИзменении(ТекущиеДанные);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.Количество) Тогда
		КоличествоПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект, ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СерияПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииСерии(
		ЭтотОбъект, Элементы.Товары.ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция СгенерироватьСерииНаСервере()
	
	Результат = ИнтеграцияИС.СгенерироватьСерии(
		Объект, Объект.Товары, Элементы.Товары.ВыделенныеСтроки, ПараметрыУказанияСерий);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура КоличествоПриИзменении()
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличества(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
	Если ТекущиеДанные.КоличествоЗЕРНО >= ТекущиеДанные.КоличествоДоступно Тогда
		ТекущиеДанные.ПолноеПогашение = Истина;
	КонецЕсли;
		
	Если Объект.Корректировочный Тогда
		ОбновитьТаблицуИсторияПогашений(ТекущиеДанные);
	КонецЕсли;
		
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока,
		"КоличествоЗЕРНО,ПолноеПогашение,ОбновитьСтатусЗЕРНО");
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоЗЕРНОПриИзменении(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормЗЕРНОКлиентПереопределяемый.ПриИзмененииКоличестваВКилограммах(
		ЭтотОбъект, ТекущиеДанные, ЕдиницаИзмеренияКилограмм, КэшированныеЗначения);
	
	Если Объект.Корректировочный Тогда
		ОбновитьТаблицуИсторияПогашений(ТекущиеДанные);
	Иначе
		ВсегоКПогашениюПоСДИЗ = ВсегоКПогашениюПоСДИЗ(ЭтотОбъект, ТекущиеДанные);
		Если ВсегоКПогашениюПоСДИЗ >= ТекущиеДанные.КоличествоДоступно Тогда
			ТекущиеДанные.ПолноеПогашение = Истина;
		КонецЕсли;
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока,
		"КоличествоЗЕРНО,ПолноеПогашение,ОбновитьСтатусЗЕРНО");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииРеквизитаШапкиСДИЗ(ИмяРеквизита)
	ЗаполнитьГиперссылкиРеквизитов(ИмяРеквизита);
	НастроитьСвязиПараметровВыбораСДИЗ();
КонецПроцедуры

&НаСервере
Процедура СДИЗПриИзмененииНаСервере()
	
	Если Элементы.Товары.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Элементы.Товары.ТекущаяСтрока);
	
	ОчиститьТранспортныеСредстваПоИдентификаторуСтроки(ТекущиеДанные.Идентификатор);
	
	ДанныеПоСДИЗам = Справочники.СДИЗЗЕРНО.ДанныеПоСДИЗ(Объект.Товары.Выгрузить().ВыгрузитьКолонку("СДИЗ"));
	
	СДИЗЗаполненияШапки = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеДанные.СДИЗ) Тогда
		СДИЗЗаполненияШапки = ТекущиеДанные.СДИЗ;
	Иначе
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.СДИЗ) Тогда
				СДИЗЗаполненияШапки = СтрокаТовары.СДИЗ;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьДанныеШапкиПоСДИЗ(СДИЗЗаполненияШапки, ДанныеПоСДИЗам);
	ЗаполнитьДанныеСтрокиПоСДИЗ(ТекущиеДанные, ДанныеПоСДИЗам, Объект.Корректировочный);
	ЗаполнитьСвязанныеДокументы(ДанныеПоСДИЗам);
	ЗаполнитьГиперссылкиРеквизитов();
	
	ТаблицаОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(Объект.Товары);
	
	ДанныеОКПД2 = ТаблицаОКПД2.Найти(ТекущиеДанные.ОКПД2);
	Если ДанныеОКПД2 = Неопределено Тогда
		ТекущиеДанные.ОКПД2Представление = Неопределено;
	Иначе
		ТекущиеДанные.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
			ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "Товары");
	НастроитьСвязиПараметровВыбораСДИЗ();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеШапкиПоСДИЗ(СДИЗ, ДанныеПоСДИЗам)
	
	Если ЗначениеЗаполнено(СДИЗ) Тогда
	
		ДанныеПоСДИЗ = ДанныеПоСДИЗам[СДИЗ];
		
		Если ДанныеПоСДИЗ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Объект.Грузоотправитель = ДанныеПоСДИЗ.Грузоотправитель;
		Объект.Грузополучатель  = ДанныеПоСДИЗ.Грузополучатель;
		Объект.Продавец         = ДанныеПоСДИЗ.Продавец;
		Объект.Покупатель       = ДанныеПоСДИЗ.Покупатель;
		Объект.ПунктОтправления = ДанныеПоСДИЗ.ПунктОтправления;
		Объект.ПунктНазначения  = ДанныеПоСДИЗ.ПунктНазначения;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеДокументы(ДанныеПоСДИЗам)
	
	СвязанныеДокументы.Очистить();
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ПервичныйДокумент");
	
	Для Каждого КлючИЗначение Из ДанныеПоСДИЗам Цикл
		
		ДанныеСДИЗ = КлючИЗначение.Значение;
		
		Для Каждого СтрокаСвязанныйДокумент Из ДанныеСДИЗ.СвязанныеДокументы Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСвязанныйДокумент);
			
			ПоискСтрок = СвязанныеДокументы.НайтиСтроки(СтруктураПоиска);
			
			Если ПоискСтрок.Количество() = 0 Тогда
				НоваяСтрока = СвязанныеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвязанныйДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаСвязанныйДокумент Из ДанныеСДИЗ.СвязанныеДокументыПрочие Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаСвязанныйДокумент);
			
			ПоискСтрок = СвязанныеДокументы.НайтиСтроки(СтруктураПоиска);
			
			Если ПоискСтрок.Количество() = 0 Тогда
				НоваяСтрока = СвязанныеДокументы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСвязанныйДокумент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСтрокиПоСДИЗ(ТекущиеДанные, ДанныеПоСДИЗам, Корректировочный)
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.КоличествоДоступно       = 0;
	ТекущиеДанные.КоличествоПогашено       = 0;
	ТекущиеДанные.КоличествоОтказПогашения = 0;
	ТекущиеДанные.КоличествоИсходное       = 0;
	ТекущиеДанные.КодТНВЭД                 = "";
	ТекущиеДанные.ОКПД2                    = "";
	
	Если Объект.Корректировочный Тогда
		Отбор = Новый Структура("СДИЗ", ТекущиеДанные.СДИЗ);
		СтрокиИстория = Объект.ИсторияПогашений.НайтиСтроки(Отбор);
		Для Каждого Строка Из СтрокиИстория Цикл
			ОчиститьТранспортныеСредстваНаФормеПоИдентификаторуСтроки(Строка.Идентификатор);
		КонецЦикла;
	Иначе
		ОчиститьТранспортныеСредстваНаФормеПоИдентификаторуСтроки(ТекущиеДанные.Идентификатор);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.СДИЗ) Тогда
		
		ДанныеСДИЗ = ДанныеПоСДИЗам[ТекущиеДанные.СДИЗ];
		
		ТекущиеДанные.ОКПД2                    = ДанныеСДИЗ.ОКПД2;
		ТекущиеДанные.КодТНВЭД                 = ДанныеСДИЗ.КодТНВЭД;
		ТекущиеДанные.КоличествоДоступно       = ДанныеСДИЗ.КоличествоДоступно;
		ТекущиеДанные.КоличествоИсходное       = ДанныеСДИЗ.Количество;
		ТекущиеДанные.КоличествоПогашено       = ДанныеСДИЗ.КоличествоПогашено;
		ТекущиеДанные.КоличествоОтказПогашения = ДанныеСДИЗ.КоличествоОтказПогашения;
		Если Объект.Корректировочный Тогда
			СтруктураОтбора = Новый Структура("СДИЗ", ТекущиеДанные.СДИЗ);
			СтрокиИстория = Объект.ИсторияПогашений.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаИстория Из СтрокиИстория Цикл
				Для Каждого СтрокаТранспортныеСредства Из ДанныеСДИЗ.ТранспортныеСредства Цикл
					НоваяСтрока = ТранспортныеСредства.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТранспортныеСредства);
					НоваяСтрока.ИдентификаторСтрокиТоваров = СтрокаИстория.Идентификатор;
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из ДанныеСДИЗ.ТранспортныеСредства Цикл
				
				НоваяСтрока = ТранспортныеСредства.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ИдентификаторСтрокиТоваров = ТекущиеДанные.Идентификатор;
				
			КонецЦикла;
		КонецЕсли;
		СинхронизироватьОтметкиТранспортныхСредствНаФорме(ЭтотОбъект);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) И Не Объект.Корректировочный Тогда
			ТекущиеДанные.Номенклатура = ДанныеСДИЗ.Номенклатура;
			ТекущиеДанные.Характеристика = ДанныеСДИЗ.Характеристика;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, ТекущиеДанные);
	
	Если Не Объект.Корректировочный Тогда
		ИнтеграцияЗЕРНО.РассчитатьСтатусУказанияТранспортныхСредств(Объект, ТекущиеДанные.Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставленияНаФорме(Прочитать = Ложь)
	
	Если Прочитать Тогда
		Прочитать();
	Иначе
		ОбновитьСтатусЗЕРНО(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПредставлениеОбработкаНавигационнойСсылкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ОбработатьНажатиеНавигационнойСсылки(ДополнительныеПараметры.НавигационнаяСсылкаФорматированнойСтроки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросАннулированиеПогашенияСДИЗЗавершение(РезультатВопроса, СтрокиДляСписания) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() Тогда
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Если Не Модифицированность И Объект.Проведен Тогда
		ПодтверждениеАннулированияПогашенияСДИЗЗавершение(РезультатВопроса, СтрокиДляСписания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеАннулированияПогашенияСДИЗЗавершение(РезультатВопроса, СтрокиДляСписания) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		 Возврат;
	КонецЕсли;
	
	ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
	ПараметрыПередачи.Ссылка             = Объект.Ссылка;
	ПараметрыПередачи.Организация        = Объект.Организация;
	ПараметрыПередачи.Подразделение      = Объект.Подразделение;
	ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию");
	
	ПараметрыПередачи.ПараметрыЗапроса = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиДляСписания Цикл
		ПараметрыПередачи.ПараметрыЗапроса.Добавить(СтрокаТаблицы.Идентификатор);
	КонецЦикла;
	
	ОписаниеПриЗавершении = Новый ОписаниеОповещения(
		"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
	
	ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПередатьДанные" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка        = Объект.Ссылка;
		ПараметрыПередачи.Организация   = Объект.Организация;
		ПараметрыПередачи.Подразделение = Объект.Подразделение;
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьОперацию" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПоследнююОперацию(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтменитьПередачуДанных" Тогда
		
		ИнтеграцияЗЕРНОКлиент.ОтменитьПередачу(Объект.Ссылка);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьПричинуОшибки" Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Документ", Объект.Ссылка);
		
		ОткрытьФорму(
			"Справочник.ЗЕРНОПрисоединенныеФайлы.Форма.ФормаОшибки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "КорректироватьПогашениеСДИЗ" Тогда
		
		ПараметрыПередачи = ИнтеграцияЗЕРНОСлужебныйКлиентСервер.ПараметрыОбработкиСообщений();
		ПараметрыПередачи.Ссылка             = Объект.Ссылка;
		ПараметрыПередачи.Организация        = Объект.Организация;
		ПараметрыПередачи.Подразделение      = Объект.Подразделение;
		ПараметрыПередачи.ДальнейшееДействие = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуПогашенияСДИЗ");
		
		ОписаниеПриЗавершении = Новый ОписаниеОповещения(
			"Подключаемый_ПриЗавершенииОперации", ЭтотОбъект, ПараметрыПередачи);
		
		ИнтеграцияЗЕРНОКлиент.ПодготовитьКПередаче(ЭтотОбъект, ПараметрыПередачи, ОписаниеПриЗавершении);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииОрганизацииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.Организация = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		Объект.ТранспортныеСредства.Очистить();
		Модифицированность = Истина;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "Организация");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииВидПродукцииПриЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект.ВидПродукции = ДополнительныеПараметры;
		Объект.Товары.Очистить();
		Объект.ТранспортныеСредства.Очистить();
		Модифицированность = Истина;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект,, "ВидПродукции");
		
		ИнтеграцияЗЕРНОКлиентСервер.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, Объект.ВидПродукции);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриИзмененииПоляШапкиСДИЗЗавершении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Объект[ДополнительныеПараметры.ИмяПоля] = ДополнительныеПараметры.ВыбранноеЗначение;
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			СтрокаТовары.СДИЗ = Неопределено;
		КонецЦикла;
		Модифицированность = Истина;
		НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "Товары");
		
	КонецЕсли;
	
КонецПроцедуры

#Область Статус

&НаСервере
Процедура ОбновитьЗаписатьПараметрыОбновленияСтатуса(Отказ, ТекущийОбъект)
	
	Если ПараметрыОбновленияСтатуса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ТекущийОбъект.Ссылка,
		ПараметрыОбновленияСтатуса);
	
	ПараметрыОбновленияСтатуса = Неопределено;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусЗЕРНО(Форма, УстановитьПараметрыОбновленияСтатуса = Ложь)
	
	Объект = Форма.Объект;
	
	ПараметрыСтатуса = ПараметрыСтатусаДокумента(Объект);
	
	Форма.СтатусЗЕРНО                   = ПараметрыСтатуса.СтатусЗЕРНО;
	Форма.СтатусЗЕРНОПредставление      = ПараметрыСтатуса.СтатусЗЕРНОПредставление;
	Форма.РедактированиеФормыНеДоступно = ПараметрыСтатуса.РедактированиеФормыНеДоступно;
	
	Для Каждого СтрокаТовары Из Форма.Объект.Товары Цикл
		
		СтрокаТовары.ДальнейшееДействие = Неопределено;
		ДанныеПоСтроке = ПараметрыСтатуса.СтатусыПоСтрокам[СтрокаТовары.Идентификатор];
		Если ДанныеПоСтроке = Неопределено Тогда
			СтрокаТовары.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик");
		Иначе
			СтрокаТовары.СтатусОбработки = ДанныеПоСтроке.СтатусЗЕРНО;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Корректировочный Тогда
		
		Для Каждого СтрокаИстория Из Форма.Объект.ИсторияПогашений Цикл
			
			ДанныеПоСтроке = ПараметрыСтатуса.СтатусыПоСтрокам[СтрокаИстория.Идентификатор];
			Если ДанныеПоСтроке = Неопределено И ЗначениеЗаполнено(СтрокаИстория.Операция) Тогда
				СтрокаИстория.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик");
			ИначеЕсли ДанныеПоСтроке <> Неопределено Тогда
				СтрокаИстория.СтатусОбработки = ДанныеПоСтроке.СтатусЗЕРНО;
			Иначе
				СтрокаИстория.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПустаяСсылка");
			КонецЕсли;
			
			Если СтрокаИстория.СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик") Тогда
				СтрокаИстория.ИндексСтатусаОбработки = 7;
			ИначеЕсли Не Форма.СтатусыОбрабатывается.НайтиПоЗначению(СтрокаИстория.СтатусОбработки) = Неопределено Тогда
				СтрокаИстория.ИндексСтатусаОбработки = 3;
			ИначеЕсли Не Форма.СтатусыОформленоУспешно.НайтиПоЗначению(СтрокаИстория.СтатусОбработки) = Неопределено Тогда
				СтрокаИстория.ИндексСтатусаОбработки = 1;
			ИначеЕсли Не Форма.СтатусыОформленоСОшибкой.НайтиПоЗначению(СтрокаИстория.СтатусОбработки) = Неопределено Тогда
				СтрокаИстория.ИндексСтатусаОбработки = 4;
			Иначе
				СтрокаИстория.ИндексСтатусаОбработки = 0;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастроитьЗависимыеЭлементыФормы(Форма, Форма.Элементы.Товары.ТекущаяСтрока, "СтатусЗЕРНО");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыСтатусаДокумента(ДокументОбъект)
	
	Результат = Новый Структура;
	Результат.Вставить("СтатусЗЕРНО");
	Результат.Вставить("СтатусЗЕРНОПредставление");
	Результат.Вставить("РедактированиеФормыНеДоступно", Ложь);
	Результат.Вставить("СтатусыПоСтрокам", Новый Соответствие());
	
	Ссылка             = ДокументОбъект.Ссылка;
	МенеджерОбъекта    = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	СтатусЗЕРНО        = МенеджерОбъекта.СтатусПоУмолчанию();
	
	ПараметрыДальнейшеноДействия = Новый Структура();
	ПараметрыДальнейшеноДействия.Вставить("ОбъектРасчета", ДокументОбъект);
	
	ДальнейшееДействие = МенеджерОбъекта.ДальнейшееДействиеПоУмолчанию(ПараметрыДальнейшеноДействия);
	
	ДопустимыеДействия = Новый Массив;
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуПогашенияСДИЗ);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	ДопустимыеДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеПередачуДанных);
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Статусы.Статус              КАК Статус,
		|	Статусы.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие1 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие1
		|	КОНЕЦ КАК ДальнейшееДействие1,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие2 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие2
		|	КОНЕЦ КАК ДальнейшееДействие2,
		|	ВЫБОР
		|		КОГДА Статусы.ДальнейшееДействие3 В (&МассивДальнейшиеДействия)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.НеТребуется)
		|		ИНАЧЕ Статусы.ДальнейшееДействие3
		|	КОНЕЦ КАК ДальнейшееДействие3
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
		|ГДЕ
		|	Статусы.ОбъектСинхронизации = &Документ
		|УПОРЯДОЧИТЬ ПО
		|	Статусы.ИдентификаторСтроки");
		
		Запрос.УстановитьПараметр("Документ",                 Ссылка);
		Запрос.УстановитьПараметр("МассивДальнейшиеДействия", ИнтеграцияЗЕРНО.НеотображаемыеВДокументахДальнейшиеДействия());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ИдентификаторСтроки) Тогда
				
				ДанныеПоСтроке = Новый Структура;
				ДанныеПоСтроке.Вставить("СтатусЗЕРНО", Выборка.Статус);
				Результат.СтатусыПоСтрокам.Вставить(Выборка.ИдентификаторСтроки, ДанныеПоСтроке);
				
			Иначе
				
				СтатусЗЕРНО = Выборка.Статус;
				
				ДальнейшееДействие = Новый Массив;
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие1);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие2);
				ДальнейшееДействие.Добавить(Выборка.ДальнейшееДействие3);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтатусЗЕРНОПредставление = ИнтеграцияЗЕРНО.ПредставлениеСтатуса(СтатусЗЕРНО, ДальнейшееДействие, ДопустимыеДействия);
	
	РедактированиеФормыНеДоступно = СтатусЗЕРНО <> Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОшибкаПередачи
	                              И СтатусЗЕРНО <> Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОшибкаПередачи;
	
	Результат.СтатусЗЕРНО                   = СтатусЗЕРНО;
	Результат.СтатусЗЕРНОПредставление      = СтатусЗЕРНОПредставление;
	Результат.РедактированиеФормыНеДоступно = РедактированиеФормыНеДоступно;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыТоваров()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	
	ДанныеПоСДИЗ = Справочники.СДИЗЗЕРНО.ДанныеПоСДИЗ(Объект.Товары.Выгрузить().ВыгрузитьКолонку("СДИЗ"));
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		ЗаполнитьДанныеСтрокиПоСДИЗ(ТекущаяСтрока, ДанныеПоСДИЗ, Объект.Корректировочный);
	КонецЦикла;
	
	ЗаполнитьСвязанныеДокументы(ДанныеПоСДИЗ);
	
	ТаблицаОКПД2 = ИнтеграцияЗЕРНО.НаименованияКодовОКПД2ПоТабличнойЧасти(Объект.Товары);
	
	Для Каждого ТекущаяСтрока Из Объект.Товары Цикл
		
		ДанныеОКПД2 = ТаблицаОКПД2.Найти(ТекущаяСтрока.ОКПД2);
		Если ДанныеОКПД2 <> Неопределено Тогда
			ТекущаяСтрока.ОКПД2Представление = ИнтеграцияЗЕРНОКлиентСервер.ПредставлениеОКПД2(
				ДанныеОКПД2.Наименование, ДанныеОКПД2.Идентификатор);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				Строка(ТекущаяСтрока.Партия),,,, ПолучитьНавигационнуюСсылку(ТекущаяСтрока.Партия));
		Иначе
			ТекущаяСтрока.ПредставлениеПартия = Новый ФорматированнаяСтрока(
				НСтр("ru = '<будет создана автоматически>'"),, ЦветТекстаПоля("ТекстЗапрещеннойЯчейкиЦвет"));
		КонецЕсли;
		
		УстановитьПредставлениеТранспортныхСредствПоСтроке(ЭтотОбъект, ТекущаяСтрока);
		
	КонецЦикла;
	
	ЗаполнитьГиперссылкиРеквизитов();
	НастроитьСвязиПараметровВыбораСДИЗ();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСлужебныеРеквизитыДанныхИсторияПогашений()
	
	ОстаткиПартий = ОстаткиПартий();
	
	Для Каждого ТекущаяСтрока Из Объект.ИсторияПогашений Цикл
		
		Если ЗначениеЗаполнено(ТекущаяСтрока.Партия) Тогда
			
			СтрокаОстаткиПартий = ОстаткиПартий.Найти(ТекущаяСтрока.Партия);
			Если СтрокаОстаткиПартий <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаОстаткиПартий, "КоличествоОстатокПартииЗЕРНО");
			КонецЕсли;
			
		КонецЕсли;
		
		СформироватьПредставлениеПолногоПогашения(ТекущаяСтрока);
		
	КонецЦикла;
	
	СтатусыОформленоСОшибкой.ЗагрузитьЗначения(Документы.ПогашениеСДИЗЗЕРНО.СтатусыОшибок());
	
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОбрабатывается);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗКПередаче);
	СтатусыОбрабатывается.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОбрабатывается);
	
	СтатусыОформленоУспешно.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен);
	СтатусыОформленоУспешно.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеПолногоПогашения(Строка)
	
	Если Строка.ПолноеПогашение Тогда
		
		МассивПримечание = Новый Массив;
		
		СтрокаПолноеПогашение = НСтр("ru = 'Полное погашение,'");
		
		Если ЗначениеЗаполнено(Строка.ПричинаРасхождения) Тогда
			МассивПримечание.Добавить(НСтр("ru = 'причина расхождения веса:'"));
			МассивПримечание.Добавить(Строка.ПричинаРасхождения);
		Иначе
			СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(СтрокаПолноеПогашение);
		КонецЕсли;
		
		МассивПримечание.Вставить(0, СтрокаПолноеПогашение);
		
		Строка.Примечание = СтрСоединить(МассивПримечание, " ");
		
	Иначе
		
		Строка.Примечание = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОстаткиПартий()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПартий.Партия КАК Партия
	|ПОМЕСТИТЬ ТаблицаПартий
	|ИЗ 
	|	&ТаблицаПартий КАК ТаблицаПартий
	|ИНДЕКСИРОВАТЬ ПО
	|Партия
	|;
	|ВЫБРАТЬ
	|	ТаблицаПартий.Партия КАК Партия,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	ЕстьNULL(ОстаткиПартийЗЕРНО.КоличествоЗЕРНООстаток, 0) КАК КоличествоОстатокПартииЗЕРНО
	|ИЗ
	|	ТаблицаПартий КАК ТаблицаПартий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(,Партия В (ВЫБРАТЬ Партия Из ТаблицаПартий)) КАК ОстаткиПартийЗЕРНО
	|		ПО ТаблицаПартий.Партия = ОстаткиПартийЗЕРНО.Партия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО ТаблицаПартий.Партия = РеестрПартийЗЕРНО.Ссылка
	|";
	
	ТаблицаПартий = Объект.ИсторияПогашений.Выгрузить(,"Партия");
	Запрос.УстановитьПараметр("ТаблицаПартий", ТаблицаПартий);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.Индексы.Добавить("Партия");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура НастроитьСвязиПараметровВыбораСДИЗ()
	
	ВсеСвязи = Новый Массив();
	
	РеквизитыОтбора = ПоляОтбораШапкиСДИЗ();
	
	Для Каждого КлючИЗначение Из РеквизитыОтбора Цикл
		НоваяСвязь = Новый СвязьПараметраВыбора(
			СтрШаблон("Отбор.%1", КлючИЗначение.Ключ),
			СтрШаблон("Объект.%1", КлючИЗначение.Ключ));
		ВсеСвязи.Добавить(НоваяСвязь);
	КонецЦикла;
	
	Элементы.ТоварыСДИЗ.СвязиПараметровВыбора        = Новый ФиксированныйМассив(ВсеСвязи);
	Элементы.ТоварыСпискомСДИЗ.СвязиПараметровВыбора = Новый ФиксированныйМассив(ВсеСвязи);
	
КонецПроцедуры

&НаСервере
Функция ПоляОтбораШапкиСДИЗ()
	
	ВозвращаемоеЗначение  = Новый Структура();
	ПервыйЗаполненныйСДИЗ = ПервыйЗаполненныйСДИЗ(ЭтотОбъект);
	
	РеквизитыСвязей = Новый Массив();
	РеквизитыСвязей.Добавить("Грузоотправитель");
	РеквизитыСвязей.Добавить("Продавец");
	РеквизитыСвязей.Добавить("ПунктОтправления");
	РеквизитыСвязей.Добавить("Грузополучатель");
	РеквизитыСвязей.Добавить("Покупатель");
	РеквизитыСвязей.Добавить("ПунктНазначения");
	
	Для Каждого РеквизитСвязи Из РеквизитыСвязей Цикл
		Если Не ЗначениеЗаполнено(ПервыйЗаполненныйСДИЗ)
			И Не ЗначениеЗаполнено(Объект[РеквизитСвязи]) Тогда
			Продолжить;
		КонецЕсли;
		ВозвращаемоеЗначение.Вставить(РеквизитСвязи, Объект[РеквизитСвязи]);
	КонецЦикла;
	
	ВозвращаемоеЗначение.Вставить("ВидПродукции", Объект.ВидПродукции);
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГиперссылкиРеквизитов(ИмяРеквизита = Неопределено)
	
	ПараметрыОбработкиПредставлений = Новый Массив();
	
	Если ИмяРеквизита = Неопределено Тогда
		ПараметрыОбработкиПредставлений.Добавить("Грузоотправитель");
		ПараметрыОбработкиПредставлений.Добавить("ПунктОтправления");
		ПараметрыОбработкиПредставлений.Добавить("Продавец");
		ПараметрыОбработкиПредставлений.Добавить("Грузополучатель");
		ПараметрыОбработкиПредставлений.Добавить("Покупатель");
		ПараметрыОбработкиПредставлений.Добавить("ПунктНазначения");
	Иначе
		ПараметрыОбработкиПредставлений.Добавить(ИмяРеквизита);
	КонецЕсли;
	
	КлючиОрганизаций = Новый Соответствие();
	КлючиАдресов     = Новый Соответствие();
	Для Каждого ИмяРеквизита Из ПараметрыОбработкиПредставлений Цикл
		ЗначениеРеквизита = Объект[ИмяРеквизита];
		Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.КлючиРеквизитовОрганизацийЗЕРНО") Тогда
			КлючиОрганизаций.Вставить(
				ЗначениеРеквизита,
				ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления());
		ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.КлючиАдресовЗЕРНО") Тогда
			КлючиАдресов.Вставить(
				ЗначениеРеквизита,
				ИнтеграцияЗЕРНОКлиентСервер.ПараметрыФормированияПредставленияСопоставления(
					ИмяРеквизита = "ПунктНазначения"));
		КонецЕсли;
	КонецЦикла;
	
	ПредставленияСопоставлений = ИнтеграцияЗЕРНОВызовСервера.ПредставленияСопоставлений(КлючиОрганизаций, КлючиАдресов);
	
	Для Каждого ИмяРеквизита Из ПараметрыОбработкиПредставлений Цикл
		
		ЗначениеРеквизита = Объект[ИмяРеквизита];
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
			ДанныеПредставления = ПредставленияСопоставлений[ЗначениеРеквизита];
			Если ДанныеПредставления <> Неопределено Тогда
				Представление = ДанныеПредставления.Представление
			КонецЕсли;
		Иначе
			Представление = Неопределено;
		КонецЕсли;
		
		ЭтотОбъект["Надпись" + ИмяРеквизита] = Представление
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЦветТекстаПоля(ИмяЦвета = "ЦветОсобогоТекста")
	
	#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		Возврат ЦветаСтиля[ИмяЦвета];
	#Иначе
		Возврат ОбщегоНазначенияКлиент.ЦветСтиля(ИмяЦвета);
	#КонецЕсли
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеВидыПродукции()
	
	ВидыПродукции = ИнтеграцияЗЕРНОКлиентСерверПовтИсп.УчитываемыеВидыПродукции();
	
	Элементы.ВидПродукции.СписокВыбора.Очистить();
	Для Каждого ВидПродукции Из ВидыПродукции Цикл
		Элементы.ВидПродукции.СписокВыбора.Добавить(ВидПродукции, Строка(ВидПродукции));
	КонецЦикла;
	Элементы.ВидПродукции.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьОбменОбработкаОжидания()
	
	ИнтеграцияЗЕРНОСлужебныйКлиент.ПродолжитьВыполнениеОбмена(ЭтотОбъект, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаРезультатаПодбораНоменклатуры(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаРезультатаПодбораНоменклатуры(Результат, КэшированныеЗначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаРезультатаПодбораНоменклатуры(ВыбранноеЗначение, КэшированныеЗначения)
	
	ПараметрыЗаполнения = ИнтеграцияЗЕРНО.ПараметрыЗаполненияТабличнойЧастиТовары();
	ПараметрыЗаполнения.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	
	ДобавленныеСтроки = Новый Массив;
	
	СобытияФормЗЕРНОПереопределяемый.ОбработкаРезультатаПодбораНоменклатуры(
		ЭтотОбъект, ВыбранноеЗначение, ПараметрыЗаполнения, КэшированныеЗначения, ДобавленныеСтроки);
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Товары);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока, "ТоварыНоменклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт
	
	Если НоваяСтрока <> Неопределено Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		НоваяСтрока.Идентификатор = Строка(Новый УникальныйИдентификатор);
		
		КоличествоЗЕРНОПриИзменении(НоваяСтрока);
		КоличествоЗЕРНОПриИзменении(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокДокумента()
	
	Если Объект.Ссылка.Пустая() Тогда
		
		Заголовок = ИнтеграцияЗЕРНО.ЗаголовокДокументаПоддерживающегоКорректировку(Объект.Ссылка, Объект.Корректировочный, Объект.Номер, Объект.Дата);
		АвтоЗаголовок = Ложь;
		
	Иначе
		Автозаголовок = Истина;
		Заголовок     = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокПартииСДИЗ(СДИЗ)
	
	ОстатокПартии = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПогашениеСДИЗЗЕРНОТовары.Партия
		|ПОМЕСТИТЬ Т_Партия
		|ИЗ
		|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК ПогашениеСДИЗЗЕРНОТовары
		|ГДЕ
		|	ПогашениеСДИЗЗЕРНОТовары.СДИЗ = &СДИЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиПартийЗЕРНООстатки.КоличествоЗЕРНООстаток,
		|	ОстаткиПартийЗЕРНООстатки.ВОбработкеЗЕРНООстаток
		|ИЗ
		|	РегистрНакопления.ОстаткиПартийЗЕРНО.Остатки(, Партия В
		|		(ВЫБРАТЬ
		|			Т.Партия
		|		ИЗ
		|			Т_Партия КАК Т)) КАК ОстаткиПартийЗЕРНООстатки";
	
	Запрос.УстановитьПараметр("СДИЗ", СДИЗ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОстатокПартии = ВыборкаДетальныеЗаписи.КоличествоЗЕРНООстаток;
	КонецЕсли;
	
	Возврат ОстатокПартии;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПредставлениеНоменклатуры(СтрокиСопоставленияНоменклатуры)
	
	СопоставленныеТовары = Новый ТаблицаЗначений;
	СопоставленныеТовары.Колонки.Добавить("Номенклатура");
	СопоставленныеТовары.Колонки.Добавить("НомерСтрокиТовара");
	СопоставленныеТовары.Колонки.Добавить("Характеристика");
	Для Каждого Строка Из СтрокиСопоставленияНоменклатуры Цикл
		СтруктураОтбора = Новый Структура("СДИЗ", Строка.СДИЗ);
		МассивИсторияПогашений = Объект.ИсторияПогашений.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаИстория Из МассивИсторияПогашений Цикл
			Если ЗначениеЗаполнено(СтрокаИстория.Партия) Тогда
				СопоставлениеПоПартии = СопоставленныеТовары.Добавить();
				СопоставлениеПоПартии.НомерСтрокиТовара = Строка.НомерСтроки;
				ЗаполнитьЗначенияСвойств(СопоставлениеПоПартии, СтрокаИстория);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	СопоставленныеТовары.Свернуть("Номенклатура,НомерСтрокиТовара,Характеристика");
	Для Каждого СтрокаТЧ Из СтрокиСопоставленияНоменклатуры Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("НомерСтрокиТовара", СтрокаТЧ.НомерСтроки);
		
		МассивСопоставленные = СопоставленныеТовары.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСопоставленные.Количество() > 0 Тогда
			
			СтрокаТЧ.ПредставлениеНоменклатура = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(МассивСопоставленные[0].Номенклатура,
				МассивСопоставленные[0].Характеристика);
			Если МассивСопоставленные.Количество() > 1 Тогда
				ПредставлениеЕще = СтрШаблон(НСтр("ru = ' ( + еще %1 )'"), МассивСопоставленные.Количество()-1);
				СтрокаТЧ.ПредставлениеНоменклатура = СтрокаТЧ.ПредставлениеНоменклатура + ПредставлениеЕще;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВидимостьИДоступностьЭлементовПриСозданииЧтенииСервере()
	
	Если Объект.Корректировочный Тогда
		Элементы.ГруппаТоварыСпискомРеквизитыПанели.Видимость = Ложь;
		Элементы.РазбитьСтроку.Видимость = Ложь;
		Элементы.Переместить(Элементы.ТоварыСпискомСДИЗ, Элементы.ГруппаИсторияПогашений, Элементы.ИсторияПогашений);
		Элементы.Переместить(Элементы.ГруппаТоварыСпискомКоличество, Элементы.ГруппаИсторияПогашений, Элементы.ИсторияПогашений);
		Элементы.ТоварыСпискомПартия.Видимость = Ложь;
		Элементы.СтраницаОсновное.ТолькоПросмотр = Истина;
		Элементы.ТоварыСпискомСДИЗ.ТолькоПросмотр = Истина;
		Элементы.Товары.ИзменятьПорядокСтрок = Ложь;
		Элементы.Товары.ИзменятьСоставСтрок = Ложь;
		Элементы.ЗаполнитьДоступноеКоличество.Видимость = Ложь;
		Элементы.ТоварыПодменюЗаполнить.Видимость = Ложь;
		Элементы.СгенерироватьСерии.Видимость = Ложь;
		Элементы.ТоварыНоменклатура.Видимость = Ложь;
		Элементы.ТоварыХарактеристика.Видимость = Ложь;
		Элементы.ТоварыСерия.Видимость = Ложь;
		Элементы.ТоварыКоличество.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ТоварыКоличествоЗЕРНО.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ТоварыСпискомКоличествоЗЕРНО.АвтоОтметкаНезаполненного = Ложь;
		СтрокиСопоставленияНоменклатуры = Новый Массив;
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТовары.Номенклатура) Тогда
				СтрокиСопоставленияНоменклатуры.Добавить(СтрокаТовары);
				Продолжить;
			КонецЕсли;
			СтрокаТовары.ПредставлениеНоменклатура = ОбщегоНазначенияИС.ПредставлениеНоменклатуры(СтрокаТовары.Номенклатура,
				СтрокаТовары.Характеристика, СтрокаТовары.Серия);
		КонецЦикла;
		
		ЗаполнитьПредставлениеНоменклатуры(СтрокиСопоставленияНоменклатуры);
		ТекстОшибки = Новый Массив;
		КоличествоОстатокПартииЗЕРНО = 0;
		Для Каждого Строка Из Объект.ИсторияПогашений Цикл
			
			Если ЗначениеЗаполнено(Строка.Партия) И Строка.ПолноеПогашение
				И Строка.КоличествоОстатокПартииЗЕРНО <> Строка.КоличествоЗЕРНО
				И Не Строка.ДляПроизводстваНеПрослеживаемойПродукции Тогда
				ТекстОшибки.Добавить(НСтр("ru = 'Корректировка невозможна.'"));
				ТекстОшибки.Добавить(НСтр("ru = 'Изменился остаток партии с полным погашением'"));
				Прервать;
			КонецЕсли;
			КоличествоОстатокПартииЗЕРНО = КоличествоОстатокПартииЗЕРНО + Строка.КоличествоОстатокПартииЗЕРНО;
			
			Если Не ЗначениеЗаполнено(Строка.Партия) Тогда
				Отбор = Новый Структура("СДИЗ", Строка.СДИЗ);
				СтрокиТовары = Объект.Товары.НайтиСтроки(Отбор);
				Если СтрокиТовары.Количество() Тогда
					СтрокаТовары = СтрокиТовары[0];
					ВсегоКПогашениюПоСДИЗ = ВсегоКПогашениюПоСДИЗ(ЭтотОбъект, СтрокаТовары);
					ПогашеноПоКорректировке = СтрокаТовары.КоличествоДоступно + СтрокаТовары.КоличествоПогашено;
					Строка.ДоступностьПричиныРасхождения = (ПогашеноПоКорректировке - ВсегоКПогашениюПоСДИЗ) <> 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекстОшибки.Количество() = 0 И КоличествоОстатокПартииЗЕРНО = 0 Тогда
			ТекстОшибки.Добавить(НСтр("ru = 'Корректировка невозможна.'"));
			ТекстОшибки.Добавить(НСтр("ru = 'Отсутствует доступный остаток по партиям'"));
		КонецЕсли;
		
		ОтобразитьСостояниеКорректировкаНевозможна(ЭтотОбъект, ТекстОшибки);
		Элементы.ТоварыПредставлениеНоменклатура.ТолькоПросмотр = Истина;
		Элементы.ТоварыСпискомСДИЗКорректировкаНевозможна.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ГруппаИсторияПогашений.Видимость = Ложь;
		Элементы.КоманднаяПанельИсторияПогашений.Видимость = Ложь;
		Элементы.ТоварыПредставлениеНоменклатура.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСостояниеКорректировкаНевозможна(Форма, ТекстОшибки)
	
	Элементы = Форма.Элементы;
	
	Если ТекстОшибки.Количество() > 0 Тогда
		Элементы.КорректировкаСДИЗНевозможна.ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		Элементы.КорректировкаСДИЗНевозможна.ОтображениеСостояния.Текст = Новый ФорматированнаяСтрока(ТекстОшибки);
		Элементы.КорректировкаСДИЗНевозможна.ОтображениеСостояния.Видимость = Истина;
		Элементы.СтраницыПанельСлева.ТекущаяСтраница = Элементы.СтраницаКорректировкаНевозможна;
	Иначе
		Элементы.СтраницыПанельСлева.ТекущаяСтраница = Элементы.СтраницаОтображаемыеДанные;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязанныеЭлементыИсторииПогашений()
	
	УстановитьОтборИсторияПогашений(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока);
	
	НастроитьЗависимыеЭлементыФормы(ЭтотОбъект, Элементы.Товары.ТекущаяСтрока,
		"ОбновитьСтатусЗЕРНО");
	
	ДоступностьТранспортныхСредств();
	
	СинхронизироватьОтметкиТранспортныхСредствНаФорме(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПримечания(ТекущиеДанные)
	
	ПросмотрПогашения = ЗначениеЗаполнено(ТекущиеДанные.Партия);
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	ОписаниеОповещения = Новый ОписаниеОповещения("НастройкаПолногоПогашенияЗавершение", ЭтотОбъект, ИдентификаторСтроки);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ПолноеПогашение",                          ТекущиеДанные.ПолноеПогашение);
	ПараметрыОткрытияФормы.Вставить("ДляПроизводстваНеПрослеживаемойПродукции", ТекущиеДанные.ДляПроизводстваНеПрослеживаемойПродукции);
	ПараметрыОткрытияФормы.Вставить("ПричинаРасхождения",                       ТекущиеДанные.ПричинаРасхождения);
	ПараметрыОткрытияФормы.Вставить("ОписаниеПричиныРасхождения",               ТекущиеДанные.ОписаниеПричиныРасхождения);
	ПараметрыОткрытияФормы.Вставить("ПросмотрПогашения",                        ПросмотрПогашения);
	
	Если Не ПросмотрПогашения Тогда
		
		ПараметрыОткрытияФормы.Вставить("ДоступностьПричины", ТекущиеДанные.ДоступностьПричиныРасхождения);
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.ПогашениеСДИЗЗЕРНО.Форма.ФормаПараметрыПогашения",
		ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти
