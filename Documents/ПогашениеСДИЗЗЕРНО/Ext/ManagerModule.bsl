#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статус по-умолчанию
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статусы ошибок
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗОшибка);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Ошибка);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы документа.
// 
// Параметры:
//  ТребуетсяПовторноеОформление - Булево - Требуется повторное оформление
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - конечные статусы
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен);
		Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично);
		Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано);
		Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Параметры:
//  СтруктураПараметров - Неопределено - Структура параметров
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие по-умолчанию
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура")
		И СтруктураПараметров.Свойство("ОбъектРасчета") Тогда
		Объект = СтруктураПараметров.ОбъектРасчета;
	Иначе
		Объект = СтруктураПараметров;
	КонецЕсли;
	
	Если ЭтоКорректировочныйДокумент(Объект) Тогда
		Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуПогашенияСДИЗ;
	Иначе
		Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеЗЕРНО

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция ЗЕРНО
//  ДополнительныеПараметры - Структура - дополнительные параметры
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияКПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗКПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗКПередаче);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияКПередаче);
			
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗКПередаче);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка  - ДокументСсылка.СписаниеПартийЗЕРНО                - ссылка на документ
//  Операция        - ПеречислениеСсылка.ВидыОперацийЗЕРНО              - операция ЗЕРНО
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - статус обработки сообщения
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса Тогда
	
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - документ, для которого требуется обновить статус
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция обмена с ЗЕРНО
//  ДополнительныеПараметры - Структура - структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - статус обработки сообщения
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция, на которую получена квитанция
//
// Возвращаемое значение:
//  Неопределено - не требуется
//  См. РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеПогашенияОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ОтказПогашенияСДИЗАннулирован;
		
		Статусы.Обрабатывается = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.АннулированиеОтказаПогашенияСДИЗОбрабатывается;
		Статусы.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
		
		Статусы.Ошибка = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Ошибка;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса
		Или Операция = Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса Тогда
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		
		Статусы.Принят = РезультирующийСтатусДокумента(ДокументСсылка, Операция);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);

	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция
//  ДополнительныеПараметры - Структура - дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - статус обработки сообщения
//  ДополнительныеПараметры - Структура - дополнительные параметры
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - новый статус
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция обмена с ЗЕРНО.
//  ДополнительныеПараметры - Неопределено, Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЗЕРНО - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийЗЕРНО - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДополнительныеПараметры <> Неопределено
		И ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторСтроки) Тогда
		ПараметрыОбновления.ИдентификаторСтроки = ДополнительныеПараметры.ИдентификаторСтроки;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ЗЕРНО.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Документ ЗЕРНО.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - новый статус документа ЗЕРНО.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПогашениеСДИЗЗЕРНО - документ, для которого заполняется последовательность операций
//  ЛинейныйСписок - Булево - не используется для документа
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ЭтоКорректировка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Корректировочный");
	
	Если ЭтоКорректировка Тогда
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование);
		
	Иначе
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 11,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 12,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование);
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 13,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗАннулированиеОтказаПогашенияСДИЗ);
		
		ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 2,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса);
		ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
		
		ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
			Исходящий,
			Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование);
		
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СписаниеПартийЗЕРНО - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПогашенияСДИЗЗЕРНО - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЗЕРНО.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияЗЕРНОПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияЗЕРНО.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
	Если СтатусыПересчетаДвижений().Найти(НовыйСтатус) <> Неопределено И НовыйСтатус <> ПредыдущийСтатус Тогда
		
		РегистрыНакопления.ОстаткиПартийЗЕРНО.ОбновитьДвиженияПриИзмененииСтатусаДокумента(ДокументСсылка);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПанельОбменЗЕРНО

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальшейшие действия.
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуПогашенияСДИЗ);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОтменитеОперацию);
	
	Возврат МассивДействий;
	
КонецФункции

// Все требующие ожидания.
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - Все требующие ожидания
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОжидайтеЗавершенияОбработкиДанных);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ПогашениеСДИЗЗЕРНО);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - (См. ИнтеграцияИСПереопределяемый.ЗаполнитьПараметрыУказанияСерий) - особенности указания серий.
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ПогашениеСДИЗЗЕРНО, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - См. ПараметрыУказанияСерий
// Возвращаемое значение:
//   Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ПогашениеСДИЗЗЕРНО, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриДвиженииЗЕРНО.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Списки) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ПогашениеСДИЗЗЕРНО, Списки);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ИнтеграцияЗЕРНО.ЗаголовокДокументаПоддерживающегоКорректировку(Данные.Ссылка, Данные.Корректировочный, Данные.Номер, Данные.Дата);

КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Ссылка");
	Поля.Добавить("Номер");
	Поля.Добавить("Дата");
	Поля.Добавить("Корректировочный");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры);
	ИнтеграцияИСПереопределяемый.ТекстыЗапросовТаблицыДвижения(Запрос, ТекстыЗапроса, Регистры, ДокументСсылка, ДополнительныеСвойства);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеПоОформлениюСДИЗ

Функция СДИЗКПогашению(ДанныеЗаполнения) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОформлениеСДИЗЗЕРНОТовары.СДИЗ КАК СДИЗ
	|ИЗ
	|	Документ.ОформлениеСДИЗЗЕРНО.Товары КАК ОформлениеСДИЗЗЕРНОТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовЗЕРНО КАК СтатусыОформленияДокументовЗЕРНО
	|		ПО ОформлениеСДИЗЗЕРНОТовары.СДИЗ = СтатусыОформленияДокументовЗЕРНО.Основание
	|ГДЕ
	|	ОформлениеСДИЗЗЕРНОТовары.Ссылка.ДокументОснование = &ДокументОснование
	|	И СтатусыОформленияДокументовЗЕРНО.СтатусОформления <> ЗНАЧЕНИЕ(Перечисление.СтатусыОформленияДокументовГосИС.Оформлено)
	|	И НЕ СтатусыОформленияДокументовЗЕРНО.Архивный";
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СДИЗ");
	
КонецФункции

#КонецОбласти

#Область КорректировочныеПогашенияСДИЗ

// Функция возвращает возможность создания корректировочного СДИЗ по погашению СДИЗ
// 
// Параметры:
//  ДокументОснование - ДокументСсылка.ПогашениеСДИЗЗЕРНО
// 
// Возвращаемое значение:
//  Булево - Истина, если доступно создание корректировочного документа
Функция ДоступноСозданиеКорректировочногоДокумента(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК Товары
	|ГДЕ
	|	НЕ Товары.Ссылка.Корректировочный
	|	И Товары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗерно.ПустаяСсылка)
	|	И Товары.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает статусы документа в которых требуется пересчет движений.
//
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.СтатусыОбработкиФормированиеПартийЗЕРНО - статусы пересчета движений.
//
Функция СтатусыПересчетаДвижений()
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗВыполнена);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗВыполненаСОшибками);
	
	Возврат Статусы;
	
КонецФункции

// Функция возвращает признак, является ли документ корректировочным
// 
// Параметры:
//  Документ - ДокументСсылка.ПогашениеСДИЗЗЕРНО, ДокументОбъект.ПогашениеСДИЗЗЕРНО - документ
// 
// Возвращаемое значение:
//  Булево - Истина, если это корректировочный СДИЗ
Функция ЭтоКорректировочныйДокумент(Документ) Экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ОформлениеСДИЗЗЕРНО") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Корректировочный");
	Иначе
		Результат = Документ.Корректировочный;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата         КАК Период,
	|	ДанныеШапки.Ссылка       КАК Ссылка,
	|	СтатусыДокументов.Статус КАК СтатусОбработки
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО КАК ДанныеШапки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыДокументов
	|		ПО СтатусыДокументов.ОбъектСинхронизации = &Ссылка
	|		И СтатусыДокументов.ИдентификаторСтроки = """"
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Период",          Реквизиты.Период);
	Запрос.УстановитьПараметр("Ссылка",          Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("СтатусОбработки", Реквизиты.СтатусОбработки);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиПартийЗЕРНО(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиПартийЗЕРНО";
	
	Если НЕ ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.Партия КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И &СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано)
	|	И НЕ ТаблицаТовары.Ссылка.Корректировочный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Партия КАК Партия,
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.ИсторияПогашений КАК ПогашениеСДИЗЗЕРНОИсторияПогашений
	|ГДЕ
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка = &Ссылка
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка.Корректировочный
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Партия КАК Партия,
	|	-1 * ПогашениеСДИЗЗЕРНОИсторияПогашений.КоличествоЗЕРНО
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.ИсторияПогашений КАК ПогашениеСДИЗЗЕРНОИсторияПогашений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
	|		ПО СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации = ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка
	|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ПогашениеСДИЗЗЕРНОИсторияПогашений.Идентификатор
	|		И СтатусыОбъектовСинхронизацииЗЕРНО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано)
	|ГДЕ
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка = &Ссылка
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка.Корректировочный
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ТаблицаТовары.Партия КАК Партия,
	|	ТаблицаТовары.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И &СтатусОбработки <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано)
	|	И НЕ ТаблицаТовары.Ссылка.Корректировочный
	|	И ТаблицаТовары.ДляПроизводстваНеПрослеживаемойПродукции
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Партия КАК Партия,
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.КоличествоЗЕРНО КАК КоличествоЗЕРНО
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.ИсторияПогашений КАК ПогашениеСДИЗЗЕРНОИсторияПогашений
	|ГДЕ
	|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка = &Ссылка
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Партия <> ЗНАЧЕНИЕ(Справочник.РеестрПартийЗЕРНО.ПустаяСсылка)
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка.Корректировочный
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Операция = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ПогашениеСДИЗ)
	|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.ДляПроизводстваНеПрослеживаемойПродукции";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Сообщение к передаче XML
//
// Параметры:
//  СсылкаНаОбъект          - ДокументСсылка.ПогашениеСДИЗЗЕРНО - ссылка на объект
//  ДальнейшееДействие      - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЗЕРНО - дальнейшее действие
//  ДополнительныеПараметры - Структура, Неопределено - дополнительные параметры
// Возвращаемое значение:
//  Массив из см. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - сообщения к передаче
Функция СообщениеКПередачеXML(СсылкаНаОбъект, ДальнейшееДействие, ДополнительныеПараметры) Экспорт

	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ПередайтеДанные Тогда
		Возврат СообщенияПоДокументу(СсылкаНаОбъект, Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.ОформитеКорректировкуПогашенияСДИЗ Тогда
		Возврат СообщенияПоДокументу(СсылкаНаОбъект, Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса, ДополнительныеПараметры);
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЗЕРНО.АннулируйтеОперацию Тогда
		Возврат СообщенияАннулированиеПогашениеСДИЗ(СсылкаНаОбъект, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Формирует XML сообщения для погашения СДИЗ партий зерна и продуктов переработки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПогашениеСДИЗЗЕРНО - документ Списание партий
//  ОперацияРасчетаСтатусов - ПеречислениеСсылка.ВидыОперацийЗЕРНО - операция расчета статусов
//  ДополнительныеПараметры - Структура - дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - сообщения к передаче
Функция СообщенияПоДокументу(ДокументСсылка, ОперацияРасчетаСтатусов, ДополнительныеПараметры)
	
	СообщенияXML    = Новый Массив();
	СписокЗапросов  = Новый СписокЗначений;
	ПараметрыОбмена = ДополнительныеПараметры.ПараметрыОбмена;
	Операция        = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПогашениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                     = &Ссылка
	|		И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Организация                        КАК Организация,
	|	Шапка.Подразделение                      КАК Подразделение,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|	Шапка.ПунктНазначения                    КАК ПунктНазначения,
	|	Представление(Шапка.Организация)         КАК ОрганизацияПредставление,
	|	Шапка.Корректировочный                   КАК Корректировочный,
	|	Шапка.Ссылка                             КАК Ссылка
	|
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.СДИЗ                       КАК СДИЗ,
	|	Товары.Номенклатура               КАК Номенклатура,
	|	Товары.Характеристика             КАК Характеристика,
	|	Товары.Серия                      КАК Серия,
	|	Товары.Количество                 КАК Количество,
	|	Товары.КоличествоЗЕРНО            КАК КоличествоЗЕРНО,
	|	Товары.Идентификатор              КАК ИдентификаторСтроки,
	|	Товары.ПолноеПогашение            КАК ПолноеПогашение,
	|	Товары.ПричинаРасхождения         КАК ПричинаРасхождения,
	|	Товары.ОписаниеПричиныРасхождения КАК ОписаниеПричиныРасхождения,
	|	Товары.СтатусУказанияТранспорта   КАК СтатусУказанияТранспорта,
	|	Товары.НомерСтроки                КАК НомерСтроки,
	|	СДИЗЗЕРНО.Идентификатор           КАК НомерСДИЗ,
	|	СДИЗЗЕРНО.Приемка                 КАК Приемка,
	|	СДИЗЗЕРНО.Реализация              КАК Реализация,
	|	СДИЗЗЕРНО.Отгрузка                КАК Отгрузка,
	|	СДИЗЗЕРНО.Перевозка               КАК Перевозка,
	|	СДИЗЗЕРНО.Покупатель              КАК Покупатель,
	|	СДИЗЗЕРНО.ВидОперации             КАК ВидОперацииСДИЗ,
	|	&Операция                         КАК Операция,
	|	СДИЗЗЕРНО.РеестровыйНомерПолучателя                КАК РеестровыйНомерПолучателя,
	|	Товары.ДляПроизводстваНеПрослеживаемойПродукции    КАК ДляПроизводстваНеПрослеживаемойПродукции,
	|	Товары.Партия                                      КАК Партия,
	|	""""                                               КАК НомерПартии,
	|	""""                                               КАК ИдентификаторЗаявки,
	|	ЕСТЬNULL(КлассификаторПричина.Идентификатор, """") КАК ИдентификаторПричиныРасхождения
	|
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторПричина
	|		ПО Товары.ПричинаРасхождения = КлассификаторПричина.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Ссылка.Корректировочный
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИсторияПогашений.СДИЗ                       КАК СДИЗ,
	|	ИсторияПогашений.Номенклатура               КАК Номенклатура,
	|	ИсторияПогашений.Характеристика             КАК Характеристика,
	|	ИсторияПогашений.Серия                      КАК Серия,
	|	ИсторияПогашений.Количество                 КАК Количество,
	|	ИсторияПогашений.КоличествоЗЕРНО            КАК КоличествоЗЕРНО,
	|	ИсторияПогашений.Идентификатор              КАК ИдентификаторСтроки,
	|	ИсторияПогашений.ПолноеПогашение            КАК ПолноеПогашение,
	|	ИсторияПогашений.ПричинаРасхождения         КАК ПричинаРасхождения,
	|	ИсторияПогашений.ОписаниеПричиныРасхождения КАК ОписаниеПричиныРасхождения,
	|	ИсторияПогашений.СтатусУказанияТранспорта   КАК СтатусУказанияТранспорта,
	|	ИсторияПогашений.НомерСтроки                КАК НомерСтроки,
	|	СДИЗЗЕРНО.Идентификатор                     КАК НомерСДИЗ,
	|	СДИЗЗЕРНО.Приемка                           КАК Приемка,
	|	СДИЗЗЕРНО.Реализация                        КАК Реализация,
	|	СДИЗЗЕРНО.Отгрузка                          КАК Отгрузка,
	|	СДИЗЗЕРНО.Перевозка                         КАК Перевозка,
	|	СДИЗЗЕРНО.Покупатель                        КАК Покупатель,
	|	СДИЗЗЕРНО.ВидОперации                       КАК ВидОперацииСДИЗ,
	|	ИсторияПогашений.Операция                   КАК Операция,
	|	СДИЗЗЕРНО.РеестровыйНомерПолучателя                           КАК РеестровыйНомерПолучателя,
	|	ИсторияПогашений.ДляПроизводстваНеПрослеживаемойПродукции     КАК ДляПроизводстваНеПрослеживаемойПродукции,
	|	ИсторияПогашений.Партия                                       КАК Партия,
	|	ЕСТЬNULL(ИсторияПогашений.Партия.Идентификатор, """")         КАК НомерПартии,
	|	ЕСТЬNULL(ИсторияПогашенийСДИЗЗЕРНО.ИдентификаторЗаявки, """") КАК ИдентификаторЗаявки,
	|	ЕСТЬNULL(КлассификаторПричина.Идентификатор, """")            КАК ИдентификаторПричиныРасхождения
	|
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.ИсторияПогашений КАК ИсторияПогашений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО ИсторияПогашений.СДИЗ = СДИЗЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторПричина
	|		ПО ИсторияПогашений.ПричинаРасхождения = КлассификаторПричина.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияПогашенийСДИЗЗЕРНО КАК ИсторияПогашенийСДИЗЗЕРНО
	|		ПО ИсторияПогашенийСДИЗЗЕРНО.СДИЗ = ИсторияПогашений.СДИЗ
	|		И ИсторияПогашений.Партия <> &ПустаяПартия
	|		И ИсторияПогашений.Партия.Идентификатор = ИсторияПогашенийСДИЗЗЕРНО.НомерПартии
	|ГДЕ
	|	ИсторияПогашений.Ссылка = &Ссылка
	|	И ИсторияПогашений.Ссылка.Корректировочный
	|	И ИсторияПогашений.Операция <> &ПустаяОперация
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолноеПогашение,
	|	НомерСтроки
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.СДИЗ                         КАК СДИЗ,
	|	РеестрПартийЗЕРНО.Ссылка            КАК ИсходнаяПартия,
	|	РеестрПартийЗЕРНО.ВладелецПартии    КАК ВладелецПартии,
	|	РеестрПартийЗЕРНО.Местоположение    КАК Местоположение,
	|	РеестрПартийЗЕРНО.ОКПД2             КАК ОКПД2,
	|	РеестрПартийЗЕРНО.КодТНВЭД          КАК КодТНВЭД,
	|	РеестрПартийЗЕРНО.ГодУрожая         КАК ГодУрожая,
	|	РеестрПартийЗЕРНО.НазначениеПартии  КАК НазначениеПартии,
	|	РеестрПартийЗЕРНО.ЦельИспользования КАК ЦельИспользования,
	|	ВЫБОР
	|		КОГДА СДИЗЗЕРНО.Отгрузка
	|				И СДИЗЗЕРНО.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭлеватор)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.КлючиРеквизитовОрганизацийЗЕРНО.ПустаяСсылка)
	|		ИНАЧЕ РеестрПартийЗЕРНО.Элеватор
	|	КОНЕЦ КАК Элеватор,
	|	РеестрПартийЗЕРНО.Производитель     КАК Производитель,
	|	РеестрПартийЗЕРНО.ДатаИзготовления  КАК ДатаИзготовления,
	|	РеестрПартийЗЕРНО.ПотребительскиеСвойства.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПотребительскоеСвойство,
	|		Значение)
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|			ПО СДИЗЗЕРНО.Партия = РеестрПартийЗЕРНО.Ссылка
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка",
	
	"ИсходныеПартии");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ТранспортныеСредства.ИдентификаторСтрокиТоваров          КАК ИдентификаторСтроки,
	|	ТранспортныеСредства.ТипТранспорта                       КАК ТипТранспорта,
	|	ТранспортныеСредства.НомерТранспортногоСредства          КАК НомерТранспортногоСредства,
	|	ТранспортныеСредства.НомерАвтомобильногоКонтейнера       КАК НомерАвтомобильногоКонтейнера,
	|	ЕСТЬNULL(КлассификаторТипТранспорта.Идентификатор, """") КАК ИдентификаторТипТранспорта
	|
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.ТранспортныеСредства КАК ТранспортныеСредства
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторНСИЗЕРНО КАК КлассификаторТипТранспорта
	|		ПО ТранспортныеСредства.ТипТранспорта = КлассификаторТипТранспорта.Ссылка
	|ГДЕ
	|	ТранспортныеСредства.Ссылка = &Ссылка
	|",
	"ТранспортныеСредства");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",         ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",       Операция);
	Запрос.УстановитьПараметр("ПустаяОперация", Перечисления.ВидыОперацийЗЕРНО.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",   Справочники.РеестрПартийЗЕРНО.ПустаяСсылка());
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка                = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	ИсходныеПартии       = РезультатЗапроса["ИсходныеПартии"].Выгрузить();
	//@skip-warning
	Товары               = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ТранспортныеСредства = РезультатЗапроса["ТранспортныеСредства"].Выгрузить();
	ТранспортныеСредства.Индексы.Добавить("ИдентификаторСтроки");
	
	ИсходныеПартииПоСДИЗ = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из ИсходныеПартии Цикл
		
		ИсходнаяПартия = Новый Структура();
		
		ИсходнаяПартия.Вставить("ВладелецПартии",      СтрокаТаблицы.ВладелецПартии);
		ИсходнаяПартия.Вставить("Местоположение",      СтрокаТаблицы.Местоположение);
		ИсходнаяПартия.Вставить("ОКПД2",               СтрокаТаблицы.ОКПД2);
		ИсходнаяПартия.Вставить("КодТНВЭД",            СтрокаТаблицы.КодТНВЭД);
		ИсходнаяПартия.Вставить("Ссылка",              СтрокаТаблицы.ИсходнаяПартия);
		ИсходнаяПартия.Вставить("ГодУрожая",           СтрокаТаблицы.ГодУрожая);
		ИсходнаяПартия.Вставить("НазначениеПартии",    СтрокаТаблицы.НазначениеПартии);
		ИсходнаяПартия.Вставить("ЦельИспользования",   СтрокаТаблицы.ЦельИспользования);
		ИсходнаяПартия.Вставить("Элеватор",            СтрокаТаблицы.Элеватор);
		ИсходнаяПартия.Вставить("Производитель",       СтрокаТаблицы.Производитель);
		ИсходнаяПартия.Вставить("ДатаИзготовления",    СтрокаТаблицы.ДатаИзготовления);
		
		ИсходнаяПартия.Вставить("ПотребительскиеСвойства", Новый Массив);
		
		Для Каждого СтрокаТаблицыПотребительскиеСвойства Из СтрокаТаблицы.ПотребительскиеСвойства Цикл
			ДанныеСвойства = Новый Структура("ПотребительскоеСвойство,Значение");
			ЗаполнитьЗначенияСвойств(ДанныеСвойства, СтрокаТаблицыПотребительскиеСвойства);
			ИсходнаяПартия.ПотребительскиеСвойства.Добавить(ДанныеСвойства);
		КонецЦикла;
		
		ИсходныеПартииПоСДИЗ.Вставить(СтрокаТаблицы.СДИЗ, ИсходнаяПартия);
		
	КонецЦикла;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции = Шапка.ВидПродукции;
	НомерВерсии  = Шапка.ПоследнийНомерВерсии + 1;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, ОперацияРасчетаСтатусов, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	АбстрактноеСообщениеXML.ПараметрыЗапроса.Вставить("Корректировочный", Шапка.Корректировочный);
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапросаПогашениеСДИЗ              = "RequestCreateGpbExtinction";
		ИмяСвойстваЗапросаАннулированиеПогашенияСДИЗ = "RequestCanceledGpbExtinction";
	Иначе
		ПространствоИмен = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапросаПогашениеСДИЗ              = "RequestCreateExtinction";
		ИмяСвойстваЗапросаАннулированиеПогашенияСДИЗ = "RequestCanceledExtinction";
	КонецЕсли;
	
	ДанныеПоСДИЗам   = Справочники.СДИЗЗЕРНО.ДанныеПоСДИЗ(Товары.ВыгрузитьКолонку("СДИЗ"));
	ИмяПоляНомерСДИЗ = ИнтеграцияЗЕРНОСлужебный.ИмяПоляНомерСДИЗПоВидуПродукции(ВидПродукции);
	
	ТаблицаИсточникиРеквизитов = ИнтеграцияЗЕРНО.НоваяТаблицаОрганизацияКонтрагентПодразделение();
	ИнтеграцияЗЕРНО.ДобавитьВТаблицуОтбораОрганизациюПодразделение(
		ТаблицаИсточникиРеквизитов, Шапка.Организация, Шапка.Подразделение);
	КлючиРеквизитов = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ТаблицаИсточникиРеквизитов);
	
	ТаблицаРасчетаЗависимостей = Новый ТаблицаЗначений();
	ТаблицаРасчетаЗависимостей.Колонки.Добавить("СДИЗ",               Новый ОписаниеТипов("СправочникСсылка.СДИЗЗЕРНО"));
	ТаблицаРасчетаЗависимостей.Колонки.Добавить("ПолноеПогашение",    Новый ОписаниеТипов("Число"));
	ТаблицаРасчетаЗависимостей.Колонки.Добавить("Аннулирование",      Новый ОписаниеТипов("Число"));
	ТаблицаРасчетаЗависимостей.Колонки.Добавить("Приоритет",          ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаРасчетаЗависимостей.Колонки.Добавить("СообщениеXML");
	
	ТаблицаРасчетаЗависимостей.Индексы.Добавить("СДИЗ");
	
	ПараметрыФормированияСообщения                         = ПараметрыФормированияСообщения();
	ПараметрыФормированияСообщения.Шапка                   = Шапка;
	ПараметрыФормированияСообщения.АбстрактноеСообщениеXML = АбстрактноеСообщениеXML;
	ПараметрыФормированияСообщения.ИсходныеПартииПоСДИЗ    = ИсходныеПартииПоСДИЗ;
	ПараметрыФормированияСообщения.ПространствоИмен        = ПространствоИмен;
	ПараметрыФормированияСообщения.НомерВерсии             = НомерВерсии;
	ПараметрыФормированияСообщения.ИмяПоляНомерЗаявки      = ИмяПоляНомерЗаявки(ВидПродукции);
	ПараметрыФормированияСообщения.ПараметрыОбмена         = ДополнительныеПараметры.ПараметрыОбмена;
	ПараметрыФормированияСообщения.ДанныеПоСДИЗам          = ДанныеПоСДИЗам;
	ПараметрыФормированияСообщения.ИмяПоляНомерСДИЗ        = ИмяПоляНомерСДИЗ;
	ПараметрыФормированияСообщения.ТранспортныеСредства    = ТранспортныеСредства;
	Если КлючиРеквизитов.Количество() Тогда
		ПараметрыФормированияСообщения.КлючОрганизации = КлючиРеквизитов[0];
	КонецЕсли;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ПараметрыФормированияСообщения.СтрокаТовары = СтрокаТовары;
		
		Если СтрокаТовары.Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ Тогда
			
			ПараметрыФормированияСообщения.ИмяСвойстваЗапроса = ИмяСвойстваЗапросаПогашениеСДИЗ;
			СообщениеXML = СообщениеПогашенияСДИЗ(ПараметрыФормированияСообщения);
			
			НоваяСтрока = ТаблицаРасчетаЗависимостей.Добавить();
			НоваяСтрока.СДИЗ            = СтрокаТовары.СДИЗ;
			НоваяСтрока.ПолноеПогашение = ?(СтрокаТовары.ПолноеПогашение, 1, 0);
			НоваяСтрока.СообщениеXML    = СообщениеXML;
			
		ИначеЕсли СтрокаТовары.Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование Тогда
			
			ПараметрыФормированияСообщения.ИмяСвойстваЗапроса = ИмяСвойстваЗапросаАннулированиеПогашенияСДИЗ;
			СообщениеXML = СообщениеАннулированиеПогашенияСДИЗ(ПараметрыФормированияСообщения, ИсходныеПартииПоСДИЗ[СтрокаТовары.СДИЗ].Ссылка);
			
			НоваяСтрока = ТаблицаРасчетаЗависимостей.Добавить();
			НоваяСтрока.СДИЗ            = СтрокаТовары.СДИЗ;
			НоваяСтрока.ПолноеПогашение = ?(СтрокаТовары.ПолноеПогашение, 1, 0);
			НоваяСтрока.Аннулирование   = 1;
			НоваяСтрока.СообщениеXML    = СообщениеXML;
			
		Иначе
			СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
				Шапка,
				Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ,
				НомерВерсии);
			ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
				СообщениеXML, НСтр("ru = 'Внутренняя ошибка. Нет данных для выгрузки по операции корректировки.'"));
		КонецЕсли;
		
		СообщенияXML.Добавить(СообщениеXML);
		
	КонецЦикла;
	
	РассчитатьИЗаполнитьЗависмостиСообщений(ТаблицаРасчетаЗависимостей);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ПараметрыФормированияСообщения()
	
	Параметры = Новый Структура();
	Параметры.Вставить("СтрокаТовары");
	Параметры.Вставить("Шапка");
	Параметры.Вставить("АбстрактноеСообщениеXML");
	Параметры.Вставить("ПространствоИмен");
	Параметры.Вставить("ИмяСвойстваЗапроса");
	Параметры.Вставить("НомерВерсии");
	Параметры.Вставить("ИмяПоляНомерЗаявки");
	Параметры.Вставить("ПараметрыОбмена");
	Параметры.Вставить("ИсходныеПартииПоСДИЗ");
	Параметры.Вставить("ДанныеПоСДИЗам");
	Параметры.Вставить("ИмяПоляНомерСДИЗ");
	Параметры.Вставить("ТранспортныеСредства");
	Параметры.Вставить("КлючОрганизации");
	
	Возврат Параметры;
	
КонецФункции

Функция СообщениеПогашенияСДИЗ(ПараметрыФормированияСообщения)
	
	СтрокаТовары            = ПараметрыФормированияСообщения.СтрокаТовары;
	Шапка                   = ПараметрыФормированияСообщения.Шапка;
	АбстрактноеСообщениеXML = ПараметрыФормированияСообщения.АбстрактноеСообщениеXML;
	ИсходныеПартииПоСДИЗ    = ПараметрыФормированияСообщения.ИсходныеПартииПоСДИЗ;
	ПространствоИмен        = ПараметрыФормированияСообщения.ПространствоИмен;
	ИмяСвойстваЗапроса      = ПараметрыФормированияСообщения.ИмяСвойстваЗапроса;
	НомерВерсии             = ПараметрыФормированияСообщения.НомерВерсии;
	ПараметрыОбмена         = ПараметрыФормированияСообщения.ПараметрыОбмена;
	ИмяПоляНомерСДИЗ        = ПараметрыФормированияСообщения.ИмяПоляНомерСДИЗ;
	ДанныеПоСДИЗам          = ПараметрыФормированияСообщения.ДанныеПоСДИЗам;
	ТранспортныеСредства    = ПараметрыФормированияСообщения.ТранспортныеСредства;
	КлючОрганизации         = ПараметрыФормированияСообщения.КлючОрганизации;
	
	СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(Шапка, СтрокаТовары.Операция, НомерВерсии);
	СообщениеXML.ЗагружатьДо            = АбстрактноеСообщениеXML.Идентификатор;
	СообщениеXML.ИдентификаторСтроки    = СтрокаТовары.ИдентификаторСтроки;
	СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), СтрокаТовары.НомерСДИЗ);
	СообщениеXML.ПараметрыЗапроса.Вставить("СДИЗ",            СтрокаТовары.СДИЗ);
	СообщениеXML.ПараметрыЗапроса.Вставить("ВидОперацииСДИЗ", СтрокаТовары.ВидОперацииСДИЗ);
	СообщениеXML.ПараметрыЗапроса.Вставить("ПолноеПогашение", СтрокаТовары.ПолноеПогашение);
	СообщениеXML.ПараметрыЗапроса.Вставить("ИсходнаяПартия",  ИсходныеПартииПоСДИЗ[СтрокаТовары.СДИЗ]);
	СообщениеXML.ПараметрыЗапроса.Вставить("Перевозка",       СтрокаТовары.Перевозка);
	СообщениеXML.ПараметрыЗапроса.Вставить("Приемка",         СтрокаТовары.Приемка);
	СообщениеXML.ПараметрыЗапроса.Вставить("ПунктНазначения", Шапка.ПунктНазначения);
	СообщениеXML.ПараметрыЗапроса.Вставить("РеестровыйНомерПолучателя", СтрокаТовары.РеестровыйНомерПолучателя);
	
	Если СтрокаТовары.Реализация Тогда
		СообщениеXML.ПараметрыЗапроса.Вставить("ВладелецПартии", СтрокаТовары.Покупатель);
	ИначеЕсли ЗначениеЗаполнено(ИсходныеПартииПоСДИЗ[СтрокаТовары.СДИЗ].ВладелецПартии) Тогда
		СообщениеXML.ПараметрыЗапроса.Вставить("ВладелецПартии", ИсходныеПартииПоСДИЗ[СтрокаТовары.СДИЗ].ВладелецПартии);
	Иначе
		СообщениеXML.ПараметрыЗапроса.Вставить("ВладелецПартии", КлючОрганизации);
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.УстановитьСообщениеОснование(СообщениеXML, АбстрактноеСообщениеXML);
	
	ПогашениеСДИЗXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, ИмяПоляНомерСДИЗ, СтрокаТовары.НомерСДИЗ, СообщениеXML);
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, "amount", СтрокаТовары.КоличествоЗЕРНО, СообщениеXML);
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, "fullExtinction", СтрокаТовары.ПолноеПогашение, СообщениеXML);
	
	ДанныеПоСДИЗ    = ДанныеПоСДИЗам[СтрокаТовары.СДИЗ];
	ВсегоГашений    = ДанныеПоСДИЗ.КоличествоПогашено - ДанныеПоСДИЗ.КоличествоОтказПогашения - СтрокаТовары.КоличествоЗЕРНО;
	ЕстьРасхождения = (ДанныеПоСДИЗ.Количество <> ВсегоГашений);
	
	Если СтрокаТовары.ПолноеПогашение
		И ЕстьРасхождения Тогда
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, "WeightDiscrepancyCause", СтрокаТовары.ИдентификаторПричиныРасхождения, СообщениеXML);
		Если ЗначениеЗаполнено(СтрокаТовары.ОписаниеПричиныРасхождения) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, "CauseComment", СтрокаТовары.ОписаниеПричиныРасхождения, СообщениеXML);
		КонецЕсли;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, "productsNotAccounting", СтрокаТовары.ДляПроизводстваНеПрослеживаемойПродукции, СообщениеXML);
	
	СтруктураПоиска = Новый Структура("ИдентификаторСтроки");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТовары);
	СтрокиТранспортныеСредства = ТранспортныеСредства.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТранспортноеСредство Из СтрокиТранспортныеСредства Цикл
		ТранспортноеСредствоXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, "TransportInfo", ПогашениеСДИЗXDTO);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ТранспортноеСредствоXDTO, "TransportCode", СтрокаТранспортноеСредство.ИдентификаторТипТранспорта, СообщениеXML);
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
			ТранспортноеСредствоXDTO, "numberTransport", СтрокаТранспортноеСредство.НомерТранспортногоСредства, СообщениеXML);
		Если ЗначениеЗаполнено(СтрокаТранспортноеСредство.НомерАвтомобильногоКонтейнера) Тогда
			ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(
				ТранспортноеСредствоXDTO, "numberContainer", СтрокаТранспортноеСредство.НомерАвтомобильногоКонтейнера, СообщениеXML);
		КонецЕсли;
		ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(ПогашениеСДИЗXDTO, "TransportInfo", ТранспортноеСредствоXDTO, СообщениеXML);
	КонецЦикла;
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		ПогашениеСДИЗXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
	ЗаполнитьЗначенияСвойств(ПараметрыОбновленияИстории, СтрокаТовары);
	ПараметрыОбновленияИстории.Причина         = СтрокаТовары.ПричинаРасхождения;
	ПараметрыОбновленияИстории.ОписаниеПричины = СтрокаТовары.ОписаниеПричиныРасхождения;
	СообщениеXML.ПараметрыЗапроса.Вставить("ПараметрыОбновленияИстории", ПараметрыОбновленияИстории);
	
	Возврат СообщениеXML;
	
КонецФункции

Функция СообщениеАннулированиеПогашенияСДИЗ(ПараметрыФормированияСообщения, ИсходнаяПартия)
	
	СтрокаТовары            = ПараметрыФормированияСообщения.СтрокаТовары;
	Шапка                   = ПараметрыФормированияСообщения.Шапка;
	АбстрактноеСообщениеXML = ПараметрыФормированияСообщения.АбстрактноеСообщениеXML;
	ПространствоИмен        = ПараметрыФормированияСообщения.ПространствоИмен;
	ИмяСвойстваЗапроса      = ПараметрыФормированияСообщения.ИмяСвойстваЗапроса;
	НомерВерсии             = ПараметрыФормированияСообщения.НомерВерсии;
	ИмяПоляНомерЗаявки      = ПараметрыФормированияСообщения.ИмяПоляНомерЗаявки;
	ПараметрыОбмена         = ПараметрыФормированияСообщения.ПараметрыОбмена;
	
	ОписаниеТипаЧисло = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	СообщениеXML      = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка,
		Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование,
		НомерВерсии);
	
	СообщениеXML.ЗагружатьДо         = АбстрактноеСообщениеXML.Идентификатор;
	СообщениеXML.ИдентификаторСтроки = СтрокаТовары.ИдентификаторСтроки;
	СообщениеXML.ПараметрыЗапроса.Вставить("СДИЗ",            СтрокаТовары.СДИЗ);
	СообщениеXML.ПараметрыЗапроса.Вставить("НомерПартии",     СтрокаТовары.НомерПартии);
	СообщениеXML.ПараметрыЗапроса.Вставить("Партия",          СтрокаТовары.Партия);
	СообщениеXML.ПараметрыЗапроса.Вставить("ИсходнаяПартия",  ИсходнаяПартия);
	СообщениеXML.ПараметрыЗапроса.Вставить("Количество",      СтрокаТовары.КоличествоЗЕРНО);
	СообщениеXML.ПараметрыЗапроса.Вставить("ПолноеПогашение", СтрокаТовары.ПолноеПогашение);
	
	СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = '№ %1'"), СтрокаТовары.НомерСДИЗ);
	
	АннулированиеПогашенияСЗИДXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПространствоИмен, ИмяСвойстваЗапроса);
	
	ИдентификаторЗаявки = ОписаниеТипаЧисло.ПривестиЗначение(СтрокаТовары.ИдентификаторЗаявки);
	Если Не ЗначениеЗаполнено(ИдентификаторЗаявки) Тогда
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки. Отсутствует идентификатор заявки.'"));
		Возврат СообщениеXML;
	КонецЕсли;
	
	ИнтеграцияЗЕРНОСлужебный.ЗаполнитьСвойствоXDTO(АннулированиеПогашенияСЗИДXDTO, ИмяПоляНомерЗаявки, ИдентификаторЗаявки, СообщениеXML);
	
	СообщениеXML.ТекстСообщенияЗапросXML = ИнтеграцияЗЕРНОСлужебный.ОбъектXDTOВXML(
		АннулированиеПогашенияСЗИДXDTO, ПространствоИмен, ИмяСвойстваЗапроса,
		ПараметрыОбмена);
	
	Возврат СообщениеXML;
	
КонецФункции

// Формирует XML сообщения для аннулирования списания партий зерна и продуктов переработки
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПогашениеСДИЗЗЕРНО - Документ Списание партий.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML - Сообщения к передаче
Функция СообщенияАннулированиеПогашениеСДИЗ(ДокументСсылка, ДополнительныеПараметры)
	
	СообщенияXML     = Новый Массив();
	СписокЗапросов   = Новый СписокЗначений;
	Операция         = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование;
	ПараметрыЗапроса = ДополнительныеПараметры.ПараметрыОбработкиДокумента.ПараметрыЗапроса;
	ПараметрыОбмена  = ДополнительныеПараметры.ПараметрыОбмена;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлыЗЕРНО.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ПрисоединенныеФайлыЗЕРНО.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ЗЕРНОПрисоединенныеФайлы КАК ПрисоединенныеФайлыЗЕРНО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПогашениеСДИЗЗЕРНО КАК Шапка
	|		ПО Шапка.Ссылка                      = &Ссылка
	|		 И ПрисоединенныеФайлыЗЕРНО.Операция = &Операция
	|		 И Шапка.Ссылка                      = ПрисоединенныеФайлыЗЕРНО.Документ
	|ГДЕ
	|	ПрисоединенныеФайлыЗЕРНО.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ПрисоединенныеФайлыЗЕРНО.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Шапка.Подразделение              КАК Подразделение,
	|	Шапка.ВидПродукции               КАК ВидПродукции,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|	Шапка.Ссылка                     КАК Ссылка
	|	
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.СДИЗ                     КАК СДИЗ,
	|	Товары.Партия                   КАК Партия,
	|	РеестрПартийЗЕРНО.Статус        КАК СтатусПартии,
	|	Товары.Номенклатура             КАК Номенклатура,
	|	Товары.Характеристика           КАК Характеристика,
	|	Товары.Серия                    КАК Серия,
	|	Товары.Количество               КАК Количество,
	|	Товары.КоличествоЗЕРНО          КАК КоличествоЗЕРНО,
	|	Товары.Идентификатор            КАК ИдентификаторСтроки,
	|	Товары.ПолноеПогашение          КАК ПолноеПогашение,
	|	СДИЗЗЕРНО.Идентификатор         КАК НомерСДИЗ,
	|	РеестрПартийЗЕРНО.Идентификатор КАК НомерПартии,
	|	Статусы.ИдентификаторЗаявки     КАК ИдентификаторЗаявки
	|
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК Статусы
	|		ПО Товары.Ссылка = Статусы.ОбъектСинхронизации
	|		И Товары.Идентификатор = Статусы.ИдентификаторСтроки
	|		И Товары.Идентификатор В (&ИдентификаторСтроки)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|		ПО Товары.Партия = РеестрПартийЗЕРНО.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Товары.СДИЗ              КАК СДИЗ,
	|	РеестрПартийЗЕРНО.Ссылка КАК ИсходнаяПартия
	|ИЗ
	|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК Товары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СДИЗЗЕРНО КАК СДИЗЗЕРНО
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РеестрПартийЗЕРНО КАК РеестрПартийЗЕРНО
	|			ПО СДИЗЗЕРНО.Партия = РеестрПартийЗЕРНО.Ссылка
	|		ПО Товары.СДИЗ = СДИЗЗЕРНО.Ссылка
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И Товары.Идентификатор В (&ИдентификаторСтроки)
	|	И Товары.ПолноеПогашение
	|	И РеестрПартийЗЕРНО.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПартийЗЕРНО.Заблокировано)",
	"ИсходныеПартии");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",              ДокументСсылка);
	Запрос.УстановитьПараметр("Операция",            Операция);
	Запрос.УстановитьПараметр("ИдентификаторСтроки", ПараметрыЗапроса);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары = РезультатЗапроса["Товары"].Выгрузить();
	//@skip-warning
	ИсходныеПартии       = РезультатЗапроса["ИсходныеПартии"].Выгрузить();
	
	ИсходныеПартииПоСДИЗ = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из ИсходныеПартии Цикл
		ИсходныеПартииПоСДИЗ.Вставить(СтрокаТаблицы.СДИЗ, СтрокаТаблицы.ИсходнаяПартия);
	КонецЦикла;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(СообщениеXML, НСтр("ru = 'Нет данных для выгрузки.'"));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
	
	ИначеЕсли Товары[0].СтатусПартии = Перечисления.СтатусыПартийЗЕРНО.Аннулировано Тогда
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(
				НСтр("ru = 'Партия %1 аннулирована'"),
				Товары[0].Партия));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
		СообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXML();
		СообщениеXML.Операция               = Операция;
		СообщениеXML.СсылкаНаОбъект         = ДокументСсылка;
		СообщениеXML.ДополнительноеОписание = СтрШаблон(НСтр("ru = 'по документу %1'"), ДокументСсылка);
		ИнтеграцияЗЕРНОКлиентСервер.ДобавитьТекстОшибки(
			СообщениеXML,
			СтрШаблон(
				НСтр("ru = 'Партия %1 аннулирована'"),
				Товары[0].Партия));
		
		СообщенияXML.Добавить(СообщениеXML);
		Возврат СообщенияXML;
		
	КонецЕсли;
	
	ВидПродукции      = Шапка.ВидПродукции;
	НомерВерсии       = Шапка.ПоследнийНомерВерсии + 1;
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.ПродуктыПереработкиЗерна Тогда
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_gpb_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledGpbExtinction";
	Иначе
		ПространствоИмен   = ИнтеграцияЗЕРНОСлужебный.ПространствоИменПоИмениПакетаXDTO("zerno_api_sdiz", ПараметрыОбмена.ПараметрыОптимизации);
		ИмяСвойстваЗапроса = "RequestCanceledExtinction";
	КонецЕсли;
	
	АбстрактноеСообщениеXML = ИнтеграцияЗЕРНОСлужебный.СтруктураСообщенияXMLПоДокументу(
		Шапка, Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса, НомерВерсии);
	АбстрактноеСообщениеXML.ТребуетсяПодписание = Ложь;
	
	СообщенияXML.Добавить(АбстрактноеСообщениеXML);
	
	ПараметрыФормированияСообщения                         = ПараметрыФормированияСообщения();
	ПараметрыФормированияСообщения.Шапка                   = Шапка;
	ПараметрыФормированияСообщения.АбстрактноеСообщениеXML = АбстрактноеСообщениеXML;
	ПараметрыФормированияСообщения.ПространствоИмен        = ПространствоИмен;
	ПараметрыФормированияСообщения.ИмяСвойстваЗапроса      = ИмяСвойстваЗапроса;
	ПараметрыФормированияСообщения.НомерВерсии             = НомерВерсии;
	ПараметрыФормированияСообщения.ИмяПоляНомерЗаявки      = ИмяПоляНомерЗаявки(ВидПродукции);
	ПараметрыФормированияСообщения.ПараметрыОбмена         = ДополнительныеПараметры.ПараметрыОбмена;
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		ПараметрыФормированияСообщения.СтрокаТовары = СтрокаТовары;
		
		СообщениеXML = СообщениеАннулированиеПогашенияСДИЗ(ПараметрыФормированияСообщения, ИсходныеПартииПоСДИЗ[СтрокаТовары.СДИЗ]);
		
		СообщенияXML.Добавить(СообщениеXML);
	
	КонецЦикла;
	
	Возврат СообщенияXML;
	
КонецФункции

Процедура ОбработкаЗагрузкиПолученныхДанных(ЭлементОчереди, ПараметрыОбмена, ПолученныеДанные, ИзмененныеОбъекты) Экспорт
	
	РеквизитыИсходящегоСообщения = ЭлементОчереди.РеквизитыИсходящегоСообщения;
	ИдентификаторСтроки          = РеквизитыИсходящегоСообщения.ИдентификаторСтроки;
	ПараметрыЗапроса             = РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
	Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулированиеРасчетСтатуса
		Или ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса Тогда
		
		Если ПараметрыЗапроса.Свойство("ОбработанныеСтроки") Тогда
			
			Блокировка = Новый БлокировкаДанных();
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Документы.ПогашениеСДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ЭлементОчереди.СсылкаНаОбъект);
			
			ТаблицаБлокировки = Новый ТаблицаЗначений();
			ТаблицаБлокировки.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.СДИЗЗЕРНО"));
			
			Для Каждого КлючИЗначение Из ПараметрыЗапроса.ОбработанныеСтроки Цикл
				ПараметрыПартии = КлючИЗначение.Значение;
				Если ПараметрыПартии.ПолноеПогашение
					И ТаблицаБлокировки.Найти(ПараметрыПартии.СДИЗ, "Ссылка") = Неопределено Тогда
					НоваяСтрока = ТаблицаБлокировки.Добавить();
					НоваяСтрока.Ссылка = ПараметрыПартии.СДИЗ;
				КонецЕсли;
			КонецЦикла;
			
			Если ТаблицаБлокировки.Количество() Тогда
				ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
				ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
				ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "Ссылка");
			КонецЕсли;
			
			Попытка
				
				Блокировка.Заблокировать();
				ДокументОбъект = ЭлементОчереди.СсылкаНаОбъект.ПолучитьОбъект();
				
				Для Каждого КлючИЗначение Из ПараметрыЗапроса.ОбработанныеСтроки Цикл
					
					ПараметрыПартии = КлючИЗначение.Значение;
					СтруктураПоиска = Новый Структура();
					СтруктураПоиска.Вставить("Идентификатор", КлючИЗначение.Ключ);
					
					Если ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса Тогда
						СтрокиДокумента = ДокументОбъект.ИсторияПогашений.НайтиСтроки(СтруктураПоиска);
					Иначе
						СтрокиДокумента = ДокументОбъект.Товары.НайтиСтроки(СтруктураПоиска);
					КонецЕсли;
					
					Для Каждого СтрокаТаблицыТовары Из СтрокиДокумента Цикл
						СтрокаТаблицыТовары.Партия = ПараметрыПартии.Партия;
					КонецЦикла;
					
				КонецЦикла;
				
				ДокументОбъект.Записать();
				ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
				
			Исключение
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;
		
		Статусы = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.СтруктураСтатусы();
		Статусы.Принят = РезультирующийСтатусДокумента(ЭлементОчереди.СсылкаНаОбъект, ЭлементОчереди.Операция);
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.РассчитатьСтатусы(
			ЭлементОчереди.СсылкаНаОбъект,
			Перечисления.СтатусыОбработкиСообщенийЗЕРНО.ЗаявкаВыполнена,
			Статусы);
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект,
			ПараметрыОбновления);
		ИзмененныеОбъекты.Добавить(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен, Новый Массив());
		ПараметрыОбновления.ИдентификаторСтроки = ИдентификаторСтроки;
		ПараметрыОбновления.ИдентификаторЗаявки = Формат(ПолученныеДанные.id, "ЧГ=0;");
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект, ПараметрыОбновления);
		
		Блокировка = Новый БлокировкаДанных();
		
		Если ПараметрыЗапроса.ПолноеПогашение Тогда
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.СДИЗ);
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.ИсходнаяПартия.Ссылка);
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("СДИЗ", ПараметрыЗапроса.СДИЗ);
		
		ЭлементОчередиОснование = ИнтеграцияЗЕРНОСлужебный.ЭлементОчередиСообщенияОснования(ЭлементОчереди, ПараметрыОбмена);
		ПараметрыЗапросаКОбновлению = ЭлементОчередиОснование.РеквизитыИсходящегоСообщения.ПараметрыЗапроса;
	
		ОбработанныеСтроки = Неопределено;
		ПараметрыЗапросаКОбновлению.Свойство("ОбработанныеСтроки", ОбработанныеСтроки);
		Если ОбработанныеСтроки = Неопределено Тогда
			ОбработанныеСтроки = Новый Соответствие;
			ПараметрыЗапросаКОбновлению.Вставить("ОбработанныеСтроки", ОбработанныеСтроки);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			РеквизитыПартии = Новый Структура();
			
			РеквизитыПартии.Вставить("УдалитьКоличество",   ПолученныеДанные.amount);
			РеквизитыПартии.Вставить("КоличествоНачальное", ПолученныеДанные.amount);
			РеквизитыПартии.Вставить("Дата",                ПолученныеДанные.dateRegistration);
			Если ПараметрыЗапроса.ВидОперацииСДИЗ = Перечисления.ВидыОперацийЗЕРНО.ОформлениеСДИЗЭкспорт Тогда
				РеквизитыПартии.Вставить("Статус", Перечисления.СтатусыПартийЗЕРНО.Заблокировано);
			Иначе
				РеквизитыПартии.Вставить("Статус", Перечисления.СтатусыПартийЗЕРНО.Подписано);
			КонецЕсли;
			Для Каждого КлючИЗначение Из ПараметрыЗапроса.ИсходнаяПартия Цикл
				Если КлючИЗначение.Ключ = "Ссылка"
					Или КлючИЗначение.Ключ = "ВладелецПартии" Тогда
					Продолжить;
				КонецЕсли;
				РеквизитыПартии.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
			Если (ПараметрыЗапроса.Приемка Или ПараметрыЗапроса.Перевозка)
				И ЗначениеЗаполнено(ПараметрыЗапроса.ПунктНазначения) Тогда
				РеквизитыПартии.Местоположение = ПараметрыЗапроса.ПунктНазначения;
			КонецЕсли;
			
			РеквизитыПартии.Вставить("ПредшествующиеПартии", Новый Массив);
			РеквизитыПартии.Вставить("ВладелецПартии",       ПараметрыЗапроса.ВладелецПартии);
			
			Если РеквизитыПартии.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииВвозНаТерриториюРФ Тогда
				РеквизитыПартии.НазначениеПартии = Справочники.КлассификаторНСИЗЕРНО.НазначениеПартииХранениеОбработка;
			КонецЕсли;
			
			ДанныеПредшествующиеПартии = Новый Структура();
			ДанныеПредшествующиеПартии.Вставить("Партия",     ПараметрыЗапроса.ИсходнаяПартия.Ссылка);
			ДанныеПредшествующиеПартии.Вставить("Количество", ПолученныеДанные.amount);
			РеквизитыПартии.ПредшествующиеПартии.Добавить(ДанныеПредшествующиеПартии);
			
			Если ЗначениеЗаполнено(ПараметрыЗапроса.РеестровыйНомерПолучателя) Тогда
				КлючиОрганизацииЭлеватор = Справочники.КлючиРеквизитовОрганизацийЗЕРНО.КлючиПоОрганизациямКонтрагентам(ЭлементОчереди.Организация);
				Если КлючиОрганизацииЭлеватор.Количество() Тогда
					РеквизитыПартии.Вставить("Элеватор", КлючиОрганизацииЭлеватор[0]);
				КонецЕсли;
			КонецЕсли;
			
			ПараметрыПолученияПартии = Справочники.РеестрПартийЗЕРНО.ПараметрыПолученияПартии();
			ПараметрыПолученияПартии.ДанныеПартии       = РеквизитыПартии;
			ПараметрыПолученияПартии.ДобавлятьКЗагрузке = Ложь;
			ИмяПоляНомерПартии                          = ИмяПоляНомерПартии(ЭлементОчереди.ВидПродукции);
			
			Если ЗначениеЗаполнено(ПолученныеДанные[ИмяПоляНомерПартии]) Тогда
				
				ПартияЗерна = Справочники.РеестрПартийЗЕРНО.ПартияЗерна(
					ПолученныеДанные[ИмяПоляНомерПартии],
					ЭлементОчереди.Организация,
					ЭлементОчереди.Подразделение,
					ЭлементОчереди.ВидПродукции,
					ПараметрыОбмена,
					ПараметрыПолученияПартии);
				
				ИзмененныеОбъекты.Добавить(ПартияЗерна);
				
				Если ПараметрыЗапроса.ПолноеПогашение Тогда
					
					СДИЗОбъект = ПараметрыЗапроса.СДИЗ.ПолучитьОбъект();
					СДИЗОбъект.Статус = Перечисления.СтатусыСДИЗЗЕРНО.Погашен;
					СДИЗОбъект.Записать();
					ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.СДИЗ);
					
					ИсходнаяПартияОбъект = ПараметрыЗапроса.ИсходнаяПартия.Ссылка.ПолучитьОбъект();
					ИсходнаяПартияОбъект.Статус            = Перечисления.СтатусыПартийЗЕРНО.ВАрхиве;
					ИсходнаяПартияОбъект.УдалитьКоличество = 0;
					ИсходнаяПартияОбъект.Записать();
					ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.ИсходнаяПартия.Ссылка);
					
				КонецЕсли;
				
				ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
				
				ЗаполнитьЗначенияСвойств(ПараметрыОбновленияИстории, ПараметрыЗапроса.ПараметрыОбновленияИстории);
				ПараметрыОбновленияИстории.ИдентификаторЗаявки    = ПараметрыОбновления.ИдентификаторЗаявки;
				ПараметрыОбновленияИстории.ВидОперации            = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗ;
				ПараметрыОбновленияИстории.Статус                 = Перечисления.СтатусыЗаписейЗЕРНО.Подписано;
				ПараметрыОбновленияИстории.ДатаОперации           = ПолученныеДанные.dateRegistration;
				
				РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбновитьЗаписьРегистра(
					ПараметрыЗапроса.СДИЗ, ПолученныеДанные[ИмяПоляНомерПартии], ПараметрыОбновленияИстории, Истина);
				
				ПараметрыПогашенияПартии = Новый Структура();
				ПараметрыПогашенияПартии.Вставить("Партия",          ПартияЗерна);
				ПараметрыПогашенияПартии.Вставить("ПолноеПогашение", ПараметрыЗапроса.ПолноеПогашение);
				ПараметрыПогашенияПартии.Вставить("СДИЗ",            ПараметрыЗапроса.СДИЗ);
				
				ОбработанныеСтроки.Вставить(ИдентификаторСтроки, ПараметрыПогашенияПартии);
			
			КонецЕсли;
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
		ИнтеграцияЗЕРНО.ЗаписатьСоответствиеНоменклатуры(ЭлементОчереди.СсылкаНаОбъект);
		
	ИначеЕсли ЭлементОчереди.Операция = Перечисления.ВидыОперацийЗЕРНО.ПогашениеСДИЗАннулирование Тогда
		
		Если ПолученныеДанные.resultOperation <> "DONE" Тогда
			Возврат;
		КонецЕсли;
		
		ИмяПоляНомерЗаявки  = ИмяПоляНомерЗаявки(ЭлементОчереди.ВидПродукции);
		ПараметрыОбновления = РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ВозвращаемоеЗначениеДальнейшиеДействияСтатус(
			Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано, Новый Массив());
		ПараметрыОбновления.ИдентификаторСтроки = ИдентификаторСтроки;
		ПараметрыОбновления.ИдентификаторЗаявки = Формат(ПолученныеДанные[ИмяПоляНомерЗаявки], "ЧГ=0;");
		
		РегистрыСведений.СтатусыОбъектовСинхронизацииЗЕРНО.ОбновитьСтатус(
			ЭлементОчереди.СсылкаНаОбъект, ПараметрыОбновления);
		
		Блокировка = Новый БлокировкаДанных();
		
		Если ПараметрыЗапроса.ПолноеПогашение Тогда
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.СДИЗЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.СДИЗ);
		КонецЕсли;
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("СДИЗ", ПараметрыЗапроса.СДИЗ);
		
		ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.Партия);
		
		Если ЗначениеЗаполнено(ПараметрыЗапроса.ИсходнаяПартия) Тогда
			ЭлементБлокировки = Блокировка.Добавить(Метаданные.Справочники.РеестрПартийЗЕРНО.ПолноеИмя());
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ПараметрыЗапроса.ИсходнаяПартия);
		КонецЕсли;
		
		Попытка
			
			Блокировка.Заблокировать();
			УстановитьПривилегированныйРежим(Истина);
			
			ПараметрыОбновленияИстории = РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.СтруктураОбновленияЗаписи();
			ПараметрыОбновленияИстории.Статус = Перечисления.СтатусыЗаписейЗЕРНО.Аннулировано;
			
			РегистрыСведений.ИсторияПогашенийСДИЗЗЕРНО.ОбновитьЗаписьРегистра(
				ПараметрыЗапроса.СДИЗ, ПараметрыЗапроса.НомерПартии, ПараметрыОбновленияИстории);
			
			ПартияОбъект = ПараметрыЗапроса.Партия.ПолучитьОбъект();
			ПартияОбъект.Статус = Перечисления.СтатусыПартийЗЕРНО.Аннулировано;
			ПартияОбъект.Записать();
			
			Если ПараметрыЗапроса.ПолноеПогашение Тогда
				СДИЗОбъект = ПараметрыЗапроса.СДИЗ.ПолучитьОбъект();
				СДИЗОбъект.Статус = Перечисления.СтатусыСДИЗЗЕРНО.Оформлен;
				СДИЗОбъект.Записать();
				ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.СДИЗ);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПараметрыЗапроса.ИсходнаяПартия) Тогда
				ИсходнаяПартияОбъект = ПараметрыЗапроса.ИсходнаяПартия.ПолучитьОбъект();
				ИсходнаяПартияОбъект.Статус            = Перечисления.СтатусыПартийЗЕРНО.Заблокировано;
				ИсходнаяПартияОбъект.УдалитьКоличество = ПараметрыЗапроса.Количество;
				ИсходнаяПартияОбъект.Записать();
				ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.ИсходнаяПартия);
			КонецЕсли;
			
			ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.Партия);
			ИзмененныеОбъекты.Добавить(ПараметрыЗапроса.СДИЗ);
			
		Исключение
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультирующийСтатусДокумента(ДокументСсылка, Операция) Экспорт
	
	СписокЗапросов  = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
		"ВЫБРАТЬ
		|	ПогашениеСДИЗЗЕРНОТовары.Идентификатор                           КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
		|ИЗ
		|	Документ.ПогашениеСДИЗЗЕРНО.Товары КАК ПогашениеСДИЗЗЕРНОТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО ПогашениеСДИЗЗЕРНОТовары.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ПогашениеСДИЗЗЕРНОТовары.Идентификатор
		|ГДЕ
		|	ПогашениеСДИЗЗЕРНОТовары.Ссылка = &Ссылка
		|	И НЕ ПогашениеСДИЗЗЕРНОТовары.Ссылка.Корректировочный
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Идентификатор                 КАК Идентификатор,
		|	ЕСТЬNULL(СтатусыОбъектовСинхронизацииЗЕРНО.Статус, НЕОПРЕДЕЛЕНО) КАК Статус
		|ИЗ
		|	Документ.ПогашениеСДИЗЗЕРНО.ИсторияПогашений КАК ПогашениеСДИЗЗЕРНОИсторияПогашений
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовСинхронизацииЗЕРНО КАК СтатусыОбъектовСинхронизацииЗЕРНО
		|		ПО ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка = СтатусыОбъектовСинхронизацииЗЕРНО.ОбъектСинхронизации
		|		И СтатусыОбъектовСинхронизацииЗЕРНО.ИдентификаторСтроки = ПогашениеСДИЗЗЕРНОИсторияПогашений.Идентификатор
		|ГДЕ
		|	ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка = &Ссылка
		|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Операция <> &ПустаяОперация
		|	И ПогашениеСДИЗЗЕРНОИсторияПогашений.Ссылка.Корректировочный",
		"Статусы");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",         ДокументСсылка);
	Запрос.УстановитьПараметр("ПустаяОперация", Перечисления.ВидыОперацийЗЕРНО.ПустаяСсылка());
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Статусы = РезультатЗапроса["Статусы"].Выгрузить();
	
	ЕстьПогашено     = Ложь;
	ЕстьАннулировано = Ложь;
	ЕстьОшибки       = Ложь;
	
	Для Каждого СтрокаТаблицы Из Статусы Цикл
		
		Если СтрокаТаблицы.Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен Тогда
			ЕстьПогашено = Истина;
		ИначеЕсли СтрокаТаблицы.Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано Тогда
			ЕстьАннулировано = Истина;
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Операция = Перечисления.ВидыОперацийЗЕРНО.КорректировкаПогашенияСДИЗРасчетСтатуса Тогда
		
		Если (ЕстьПогашено Или ЕстьАннулировано) Тогда
			Если ЕстьОшибки Тогда
				Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗВыполненаСОшибками;
			Иначе
				Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗВыполнена;
			КонецЕсли;
		ИначеЕсли ЕстьОшибки Тогда
			Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗОшибка;
		Иначе
			Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.КорректировкаПогашенияСДИЗВыполнена;
		КонецЕсли;
		
	Иначе
		
		Если ЕстьАннулировано И Не ЕстьПогашено Тогда
			Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.ПогашениеСДИЗАннулировано;
		ИначеЕсли ЕстьАннулировано И ЕстьПогашено
			Или ЕстьПогашено И ЕстьОшибки Тогда
			Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашенЧастично;
		ИначеЕсли Не ЕстьАннулировано И ЕстьПогашено Тогда
			Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.СДИЗПогашен;
		Иначе
			Статус = Перечисления.СтатусыОбработкиПогашенияСДИЗЗЕРНО.Ошибка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция ИмяПоляНомерПартии(ВидПродукции)
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "createLotNumber";
	Иначе
		Возврат "createGpbNumber";
	КонецЕсли;
	
КонецФункции

Функция ИмяПоляНомерЗаявки(ВидПродукции)
	
	Если ВидПродукции = Перечисления.ВидыПродукцииИС.Зерно Тогда
		Возврат "extinctionId";
	Иначе
		Возврат "gpbExtinctionId";
	КонецЕсли;
	
КонецФункции

Процедура РассчитатьИЗаполнитьЗависмостиСообщений(ТаблицаРасчетаЗависимостей)
	
	ТаблицаПоСДИЗ = ТаблицаРасчетаЗависимостей.Скопировать();
	ТаблицаПоСДИЗ.Свернуть("СДИЗ", "ПолноеПогашение, Аннулирование");
	ТаблицаПоСДИЗ.Колонки.Добавить("ИдентификаторЦепочки", Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	
	Для Каждого СтрокаТаблицыСДИЗ Из ТаблицаПоСДИЗ Цикл
		
		СтрокаТаблицыСДИЗ.ИдентификаторЦепочки = Строка(Новый УникальныйИдентификатор());
		
		СтруктураПоиска = Новый Структура("СДИЗ", СтрокаТаблицыСДИЗ.СДИЗ);
		СтрокиПоСДИЗ    = ТаблицаРасчетаЗависимостей.Скопировать(СтруктураПоиска);
		
		Если СтрокиПоСДИЗ.Количество() = 1 Тогда
			Продолжить;
		ИначеЕсли СтрокаТаблицыСДИЗ.Аннулирование = 0 Тогда
			
			Если СтрокаТаблицыСДИЗ.ПолноеПогашение = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиПоСДИЗ.Сортировать("ПолноеПогашение");
			
		Иначе
			
			// Приоритеты:
			// 1. Аннулировать полное погашение
			// 2. Аннулировать не полные погашения
			// 3. Погасть не полные
			// 4. Полное погашение
			
			Для Каждого СтрокаТаблицы Из СтрокиПоСДИЗ Цикл
				
				Если СтрокаТаблицы.Аннулирование > 0 Тогда
					Если СтрокаТаблицы.ПолноеПогашение > 0 Тогда
						СтрокаТаблицы.Приоритет =  10;
					Иначе
						СтрокаТаблицы.Приоритет =  9;
					КонецЕсли;
				ИначеЕсли СтрокаТаблицы.ПолноеПогашение > 0 Тогда
					СтрокаТаблицы.Приоритет = 7;
				Иначе
					СтрокаТаблицы.Приоритет = 8;
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокиПоСДИЗ.Сортировать("Приоритет Убыв");
			
		КонецЕсли;
		
		ПередаватьПосле = Неопределено;
		Для Каждого СтрокаТаблицы Из СтрокиПоСДИЗ Цикл
			СтрокаТаблицы.СообщениеXML.ПередаватьПосле      = ПередаватьПосле;
			СтрокаТаблицы.СообщениеXML.ИдентификаторЦепочки = СтрокаТаблицыСДИЗ.ИдентификаторЦепочки;
			ПередаватьПосле = СтрокаТаблицы.СообщениеXML.Идентификатор;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
