#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДействияПриОбменеВЕТИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
// 
// Возвращаемое значение:
//  Неопределено - Не требуется
//  См. РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.КПередаче);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийВЕТИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры.
// 
// Возвращаемое значение:
//  Неопределено - Не требуется
//  См. РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийВЕТИС.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи;
		
		Если ИнтеграцияВЕТИС.ОшибкаПараметраОбновленияСтатуса(ДополнительныеПараметры,"ЕстьОшибкиСервиса") Тогда
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала
		Или Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД Тогда
		// Попытка восстановления
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Неопределено - Не требуется
//  См. РегистрыСведений.СтатусыДокументовВЕТИС.ВозвращаемоеЗначениеДальнейшиеДействияСтатус - 
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияПроизводственнойПартии Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформлены;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОтклоненВЕТИС;
		
		Если ИнтеграцияВЕТИС.ОшибкаПараметраОбновленияСтатуса(ДополнительныеПараметры,"ЕстьОшибкиСервиса") Тогда
			СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		Иначе
			СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
				Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		КонецЕсли;
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД Тогда
		// Подготовка данных к восстановлению
	ИначеЕсли Операция = Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала Тогда
		
		// Выполнена проверка корректности оформления.
		// Из ВетИС получен пустой ответ на запрос измененных записей складского журнала. 
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовВЕТИС.СтруктураСтатусы();
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(
			Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки, СтатусыБазовыйПроцесс);
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
	Возврат ПараметрыОбновления;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  Перечислениессылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, 
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Ссылка на документ.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийВЕТИС - Операция обмена с ВЕТИС.
//  ДополнительныеПараметры - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления,
		ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Изменяет и возвращает статус документа ВЕТИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Документ, для которого требуется обновить статус.
//  ПараметрыОбновления - Структура - со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - новый статус документа ВЕТИС.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовВЕТИС.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Таблица   = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	Входящий  = Перечисления.ТипыЗапросовИС.Входящий;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 0,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияПроизводственнойПартии);
	
	// Запросы восстановления
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхВСД);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхВСД);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросИзмененныхЗаписейСкладскогоЖурнала);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросИзмененныхЗаписейСкладскогоЖурнала);
	
	// Повторный запрос после проверки корректности оформления
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Исходящий,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии);
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, -1,
		Входящий,
		Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросОформленияПроизводственнойПартии);
	
	Возврат Таблица;
	
КонецФункции

// Определить необходимость перезаписи движений.
//
// Параметры:
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перезаписи движений.
//
Функция ОбновлятьДвижения(ПредыдущийСтатус, НовыйСтатус) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ОбновитьДвижения = ИнтеграцияВЕТИС.СтатусТребуетОбновленияДвижений(СтатусыДвиженийРезерв(), ПредыдущийСтатус, НовыйСтатус);
	
	Если ПараметрыОбновленияСтатуса.ОбновлятьДвижения
		И ОбновитьДвижения Тогда
		
		ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
		
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		
		ДополнительныеСвойстваДляПроведения = Новый Структура;
		ИнтеграцияИС.ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойстваДляПроведения);
		
		ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойстваДляПроведения, ИмяРегистра);
		НаборЗаписей.Загрузить(ДополнительныеСвойстваДляПроведения.ТаблицыДляДвижений["Таблица" + ИмяРегистра]);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	ИнтеграцияВЕТИСПереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
КонецПроцедуры

// Операции допустимых действий.
// 
// Возвращаемое значение:
//  Соответствие Из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС-  Операции допустимых действий
Функция ОперацииДопустимыхДействий() Экспорт
	
	СоответствиеОпераций = Новый Соответствие;
	СоответствиеОпераций.Вставить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные,
		Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии);
		
	Возврат СоответствиеОпераций
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.Черновик;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи);
	Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОтклоненВЕТИС);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиПроизводственныхОперацийВЕТИС - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформлены);
		Статусы.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ВСДОформленыЧерезWeb);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции


// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменСВЕТИС

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
// 	Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПодтвердитеКорректностьДокументаСозданногоЧерезWeb);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ВыполнитеОбмен);
	
	Возврат МассивДействий;
	
КонецФункции

Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеЗавершенияОбработкиДанныхВЕТИС);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область СообщенияВЕТИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ПроизводственнаяОперацияВЕТИС - Ссылка на документ.
//  ПараметрыПередачи - Структура - с полями:
//   * ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюВЕТИС - Операция ВЕТИС.
//  ДополнительныеПараметры - Неопределено, Структура - Дополнительные параметры формирования сообщения
//
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПередайтеДанные Тогда
		
		Возврат ЗапросНаОформлениеПроизводственнойПартииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры);
		
	ИначеЕсли ПараметрыПередачи.ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюВЕТИС.ПроверьтеКорректностьДанных Тогда
		
		Возврат ИнтеграцияВЕТИС.ЗапросДляПроверкиКорректностиОформленияXML(ДокументСсылка);
		
	КонецЕсли;
	
КонецФункции

// Обрабатывает результат выполнения запроса на оформление производственной партии, который содержит:
//  - списание объема с одной или нескольких записей журнала продукции, указанного в качестве сырья;
//  - добавление одной или нескольких записей в журнал вырабатываемой продукции о партии продукции, 
//    которая была произведена или присоединение к существующей записи вырабатываемой продукции, если оформляется незаверёшнное производство;
//  - для каждой записи журнала вырабатываемой продукции, которая была добавлена при выполнении операции, 
//    система Меркурий формирует ВСД или происходит увеличение объёма выпущенной продукции в уже оформленном ВСД (для незавершённого производства).
//
// Возвращаемое значение:
//   Структура, Неопределено - результат обработки запроса.
Функция ОбработатьРезультатЗапросаНаОформлениеПроизводственнойПартии(ДанныеДокумента, ХозяйствующийСубъект, Предприятие, ПараметрыОбмена, ДополнительныеПараметры = Неопределено) Экспорт
	
	НовыйСтатус   = Неопределено;
	ОбъектИзменен = Ложь;
	
	РезультатДобавленияЗаписей = ИнтеграцияВЕТИС.ДобавитьЗаписиВПротоколОбмена(ХозяйствующийСубъект, Предприятие, ДанныеДокумента);
	Если РезультатДобавленияЗаписей.ВходящееСообщение.НовоеСообщение Тогда
		
		Если ДанныеДокумента.Объект <> Неопределено Тогда
			
			ДокументОбъект = ДанныеДокумента.Документ.ПолучитьОбъект();
			
			// Если выполнить блокировку объекта не удалось, то будет выдано исключение.
			// Документ будет получен в следующий итерации загрузки данных.
			ДокументОбъект.Заблокировать();
			
			// Сведения о ВСД для вырабатываемой продукции.
			ЗагрузитьСведенияВСДПоРезультатамЗапросаВЕТИС(
				ДанныеДокумента,
				ПараметрыОбмена,
				Предприятие,
				ХозяйствующийСубъект,
				ДокументОбъект);
				
			// Сведения о добавленных записях в журнал входящей продукции.
			ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(
				ДанныеДокумента,
				ПараметрыОбмена,
				Предприятие,
				ХозяйствующийСубъект,
				ДокументОбъект);
				
			// Автогенерация серий
			ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(
				ДокументОбъект.Метаданные(),
				ДокументОбъект);
			
			Если ПараметрыУказанияСерий <> Неопределено Тогда
				
				СтрокиДляГенерацииСерий = ДокументОбъект.Товары.ВыгрузитьКолонки();
				ИндексыСтрокДляГенерацииСерий = Новый Массив();
				
				Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
					Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Номенклатура) Тогда
						Продолжить;
					ИначеЕсли ЗначениеЗаполнено(СтрокаТЧ.Серия) Тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаДляГенерацииСерий = СтрокиДляГенерацииСерий.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДляГенерацииСерий, СтрокаТЧ);
					ИндексыСтрокДляГенерацииСерий.Добавить(СтрокиДляГенерацииСерий.Индекс(СтрокаДляГенерацииСерий));
				КонецЦикла;
				
				Если СтрокиДляГенерацииСерий.Количество() > 0 Тогда
					ИнтеграцияВЕТИС.СгенерироватьСерии(
						ДокументОбъект,
						СтрокиДляГенерацииСерий, 
						ИндексыСтрокДляГенерацииСерий, 
						ПараметрыУказанияСерий.Товары);
						
					Для Каждого СтрокаДляГенерацииСерий Из СтрокиДляГенерацииСерий Цикл
						СтрокаТЧ = ДокументОбъект.Товары.Найти(СтрокаДляГенерацииСерий.ИдентификаторСтроки, "ИдентификаторСтроки");
						Если СтрокаТЧ <> Неопределено Тогда
							ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаДляГенерацииСерий);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			ДокументОбъект.Записать();
			
			ОбъектИзменен = Истина;
			
		КонецЕсли;
		
		ПолноеИмя = ДанныеДокумента.Документ.Метаданные().ПолноеИмя();
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
		
		ПараметрыОбновленияСтатуса = ИнтеграцияВЕТИС.ПараметрыОбновленияСтатуса();
		ПараметрыОбновленияСтатуса.ОбновлятьДвижения    = Истина;
		ПараметрыОбновленияСтатуса.ДокументОбъект       = ДокументОбъект;
		ПараметрыОбновленияСтатуса.ИдентификаторЗапроса = ДанныеДокумента.ИдентификаторЗаявки;
		ПараметрыОбновленияСтатуса.СтатусОбработки      = ДанныеДокумента.СтатусОбработки;
		ПараметрыОбновленияСтатуса.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		ПараметрыОбновленияСтатуса.ЕстьОшибкиСервиса    = ДополнительныеПараметры.ЕстьОшибкиСервиса;
		
		НовыйСтатус = МенеджерОбъекта.ОбновитьСтатусПослеПолученияДанных(
			ДанныеДокумента.Документ, 
			ДанныеДокумента.ВходящаяОперация,
			ПараметрыОбновленияСтатуса);
		
	КонецЕсли;
	
	ИнтеграцияВЕТИС.УдалитьСообщениеИзОчередиПолученияРезультатовОбработкиЗаявокВЕТИС(ДанныеДокумента.ИсходящееСообщение, Истина);
	
	ТекстОшибки = ИнтеграцияВЕТИС.ТекстОшибкиОбработкиРезультата(
		ДанныеДокумента,
		ХозяйствующийСубъект,
		Предприятие,
		Истина);
	
	Если ДополнительныеПараметры.ЕстьОшибкиСервиса Тогда
		
		ВозвращаемоеЗначение = Неопределено;
		ДополнительныеПараметры.ЭлементОчереди.ТекстОшибки = ТекстОшибки;
		
	Иначе
		
		ВозвращаемоеЗначение = ИнтеграцияВЕТИСКлиентСервер.СтруктураИзменения();
		ВозвращаемоеЗначение.ХозяйствующийСубъект = ХозяйствующийСубъект;
		ВозвращаемоеЗначение.Предприятие          = Предприятие;
		ВозвращаемоеЗначение.Операция             = ДанныеДокумента.ВходящаяОперация;
		ВозвращаемоеЗначение.ФорматОбмена         = ДанныеДокумента.ФорматОбмена;
		
		ВозвращаемоеЗначение.ТекстОшибки           = ТекстОшибки;
		ВозвращаемоеЗначение.ПодготовленоКПередаче = Ложь;
		ВозвращаемоеЗначение.Передано              = Ложь;
		ВозвращаемоеЗначение.Принято               = Истина;
		
		ВозвращаемоеЗначение.ИсходящееСообщение = РезультатДобавленияЗаписей.ИсходящееСообщение.Ссылка;
		ВозвращаемоеЗначение.ВходящееСообщение  = РезультатДобавленияЗаписей.ВходящееСообщение.Ссылка;
		
		ВозвращаемоеЗначение.Объект            = ДанныеДокумента.Документ;
		ВозвращаемоеЗначение.ДокументОснование = ДанныеДокумента.ДокументОснование;
		ВозвращаемоеЗначение.НовыйСтатус       = НовыйСтатус;
		ВозвращаемоеЗначение.ОбъектИзменен     = ОбъектИзменен;
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий.
//
// Возвращаемое значение:
//	Строка - Имена реквизитов, перечисленные через запятую.
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	ТипДокумента = ТипДокумента();
	ИменаРеквизитов = ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(ТипДокумента);
	
	Возврат ИменаРеквизитов;
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//	Объект - Структура - Значения реквизитов объекта, необходимых для заполнения параметров указания серий.
//
// Возвращаемое значение:
//  см. ИнтеграцияИС.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	ТипДокумента = ТипДокумента();
	ПараметрыУказанияСерий = ИнтеграцияИС.ПараметрыУказанияСерий(ТипДокумента, Объект);
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
//
// Параметры:
//   ПараметрыУказанияСерий - см. ИнтеграцияИС.ПараметрыУказанияСерий
//
// Возвращаемое значение:
//   Строка - Текст запроса.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	ТипДокумента = ТипДокумента();
	ТекстЗапроса = ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ТипДокумента, ПараметрыУказанияСерий);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаСписка"
		И Параметры.Свойство("ТекущаяСтрока") Тогда
		СтандартнаяОбработка = Ложь;
		ВыбраннаяФорма = "ФормаСпискаДокументов";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаЗаполнения

Функция СтруктураЗапросаДанныеОформленныхДокументов() Экспорт
	
	СтруктураЗапроса = Новый Структура();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ОформленныеДокументы
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС КАК ТаблицаДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО СтатусыДокументовВЕТИС.Документ = ТаблицаДокументы.Ссылка
	|ГДЕ
	|	ТаблицаДокументы.ДокументОснование = &ДокументОснование
	|	И ТаблицаДокументы.Ссылка <> &Ссылка
	|	И ТаблицаДокументы.Проведен
	|	И СтатусыДокументовВЕТИС.Статус НЕ В (&КонечныеСтатусы)
	|";
	СтруктураЗапроса.Вставить("ОформленныеДокументы", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	НАЧАЛОПЕРИОДА(ОформленныеТовары.ДатаПроизводстваНачалоПериода, ДЕНЬ) КАК ДатаПроизводства,
	|
	|	ОформленныеТовары.Номенклатура   КАК Номенклатура,
	|	ОформленныеТовары.Характеристика КАК Характеристика,
	|	ОформленныеТовары.Серия          КАК Серия,
	|	ОформленныеТовары.Количество     КАК Количество
	|
	|ПОМЕСТИТЬ ОформленныеТовары
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК ОформленныеТовары
	|ГДЕ
	|	ОформленныеТовары.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументы КАК Т)
	|";
	СтруктураЗапроса.Вставить("ОформленныеТовары", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	ОформленноеСырье.Номенклатура          КАК Номенклатура,
	|	ОформленноеСырье.Характеристика        КАК Характеристика,
	|	ОформленноеСырье.Серия                 КАК Серия,
	|	ОформленноеСырье.Количество            КАК Количество
	|
	|ПОМЕСТИТЬ ОформленноеСырье
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.Сырье КАК ОформленноеСырье
	|ГДЕ
	|	ОформленноеСырье.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументы КАК Т)
	|";
	СтруктураЗапроса.Вставить("ОформленноеСырье", ТекстЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|
	|	ОформленныеШтрихкоды.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|
	|ПОМЕСТИТЬ ОформленныеШтрихкоды
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.ШтрихкодыУпаковок КАК ОформленныеШтрихкоды
	|ГДЕ
	|	ОформленныеШтрихкоды.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ ОформленныеДокументы КАК Т)
	|	И ОформленныеШтрихкоды.ШтрихкодУпаковки <> ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)
	|";
	СтруктураЗапроса.Вставить("ОформленныеШтрихкоды", ТекстЗапроса);
	
	Возврат СтруктураЗапроса;
	
КонецФункции

Процедура ЗаполнитьДанныеЭкспертизыПоСтатистикеПользователя(Объект) Экспорт
	
	ДанныеЭкспертизы = ЗаполнениеОбъектовПоСтатистикеВЕТИС.ЭкспертизаПоПользователю();
	Если ДанныеЭкспертизы <> Неопределено Тогда
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТовары, ДанныеЭкспертизы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСрокиГодностиПоСтатистикеПродукции(Объект, Продукция = Неопределено) Экспорт
	
	МассивПродукции = Новый Массив;
	Если Продукция = Неопределено Тогда
		
		Для Каждого СтрокаТовары Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТовары.Продукция)
				И ЗначениеЗаполнено(СтрокаТовары.ДатаПроизводстваНачалоПериода)
				И Не ЗначениеЗаполнено(СтрокаТовары.СрокГодностиНачалоПериода) Тогда
				
				МассивПродукции.Добавить(СтрокаТовары.Продукция);
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		МассивПродукции.Добавить(Продукция);
		
	КонецЕсли;
	
	ДанныеПоСрокамГодности = ЗаполнениеОбъектовПоСтатистикеВЕТИС.СрокГодностиПоПродукции(МассивПродукции);
	
	Для Каждого СтрокаТовары Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.Продукция) Тогда
			
			ЗаполнениеДокументовВЕТИС.ЗаполнитьДатыПоСтатистике(СтрокаТовары, ДанныеПоСрокамГодности);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУпаковкиПоСтатистикеПродукции(Объект) Экспорт
	
	ТаблицаУпаковок = Новый ТаблицаЗначений();
	ТаблицаУпаковок.Колонки.Добавить("Продукция",           Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
	ТаблицаУпаковок.Колонки.Добавить("УровеньУпаковки",     Новый ОписаниеТипов("ПеречислениеСсылка.УровниУпаковокВЕТИС"));
	ТаблицаУпаковок.Колонки.Добавить("ИдентификаторСтроки", Метаданные.ОпределяемыеТипы.УникальныйИдентификаторИС.Тип);
	ТаблицаУпаковок.Колонки.Добавить("УпаковкаВЕТИС",       Новый ОписаниеТипов("СправочникСсылка.УпаковкиВЕТИС"));
	
	Для Каждого СтрокаУпаковка Из Объект.УпаковкиВЕТИС Цикл
		Если Не ЗначениеЗаполнено(СтрокаУпаковка.УпаковкаВЕТИС) Тогда
			
			НоваяСтрока = ТаблицаУпаковок.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУпаковка);
			НоваяСтрока.Продукция = Объект.Товары.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаУпаковка.ИдентификаторСтрокиТовары))[0].Продукция;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнениеОбъектовПоСтатистикеВЕТИС.УпаковкиВЕТИСПоПродукции(ТаблицаУпаковок);
	
	Для Каждого СтрокаТовары Из ТаблицаУпаковок Цикл
		Если ЗначениеЗаполнено(СтрокаТовары.УпаковкаВЕТИС) Тогда
			
			СтрокаУпаковка = Объект.УпаковкиВЕТИС.НайтиСтроки(Новый Структура("ИдентификаторСтроки", СтрокаТовары.ИдентификаторСтроки))[0];
			СтрокаУпаковка.УпаковкаВЕТИС = СтрокаТовары.УпаковкаВЕТИС;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СообщенияВЕТИС

// Операция предназначена для оформления производственной партии, как завершённой, так и незавершённой.
// На вход системы передаются следующие сведения:
//  - информация о сырье, из которого партия или несколько партий были произведены;
//  - информация о произведенной партии или нескольких партиях продукции;
//  - информация о хозяйствующем субъекте - собственнике сырья и выпускаемой продукции и информация о площадке, на которой продукция выпускается;
//  - идентификатор производственной операции (для незавершённого производства);
//  - номер производственной партии;
//  - флаг завершения производственной транзакции.
//
// Результатом выполнения данной операции является:
//  - списание объема с одной или нескольких записей журнала продукции, указанного в качестве сырья;
//  - добавление одной или нескольких записей в журнал вырабатываемой продукции о партии продукции, 
//    которая была произведена или присоединение к существующей записи вырабатываемой продукции, если оформляется незаверёшнное производство;
//  - для каждой записи журнала вырабатываемой продукции, которая была добавлена при выполнении операции, 
//    система Меркурий формирует ВСД или происходит увеличение объёма выпущенной продукции в уже оформленном ВСД (для незавершённого производства).
//
Функция ЗапросНаОформлениеПроизводственнойПартииXML(ДокументСсылка, ПараметрыПередачи, ДополнительныеПараметры)
	
	СообщенияXML = Новый Массив;
	
	Операция = Перечисления.ВидыОперацийВЕТИС.ЗапросНаОформлениеПроизводственнойПартии;
	ПараметрыЗапросаВЕТИС = Перечисления.ВидыОперацийВЕТИС.ПараметрыЗапросаВЕТИС(Операция, Перечисления.ФорматыОбменаВЕТИС.V2_1);
	
	ДанныеДокумента = ДанныеПроизводственнойОперации(ДокументСсылка, Операция);
	Шапка = ДанныеДокумента.Шапка[0];
	
	СообщениеXML = ИнтеграцияВЕТИСКлиентСервер.СтруктураСообщенияXML();
	СообщениеXML.Операция = Операция;
	СообщениеXML.Документ = ДокументСсылка;
	СообщениеXML.Описание = ИнтеграцияВЕТИС.ОписаниеОперацииПередачиДанных(Операция, ДокументСсылка);
	
	Если ДанныеДокумента.Шапка.Количество() = 0 Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНетДанныхДляВыгрузки(СообщенияXML, СообщениеXML);
	КонецЕсли;
	
	НастройкиОбменаВЕТИС = ИнтеграцияВЕТИС.НастройкиОбменаВЕТИС(Шапка.ХозяйствующийСубъект);
	НастройкаОбмена = НастройкиОбменаВЕТИС.ОбменНаСервере.Получить(Шапка.ХозяйствующийСубъект);
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеНеНайденыНастройкиПодключения(СообщенияXML, СообщениеXML, Шапка.ХозяйствующийСубъект);
	КонецЕсли;
	
	Если НЕ ПользователиВЕТИС.ОперацияДоступнаПользователю(Операция, ДокументСсылка, , , НастройкаОбмена.ПраваДоступа) Тогда
		Возврат ИнтеграцияВЕТИС.СообщениеОперацияВЕТИСНедоступнаДляПользователя(СообщенияXML, СообщениеXML, Операция);
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	ВспомогательныеДанные = Новый Структура;
	ВспомогательныеДанные.Вставить("СтраныМира",               ПрочиеКлассификаторыВЕТИСВызовСервера.СтраныМира());
	ВспомогательныеДанные.Вставить("Упаковки",                 ДанныеДокумента.Упаковки);
	ВспомогательныеДанные.Вставить("ШтрихкодыУпаковок",        ДанныеДокумента.ШтрихкодыУпаковок);
	ВспомогательныеДанные.Вставить("ХранилищеВременныхДат",    Новый Соответствие);
	
	#Область ФормированиеСообщения
	ДокументXDTO = РаботаСXMLИС.ОбъектXDTOПоИмениСвойства(ПараметрыЗапросаВЕТИС.ПространствоИмен, ПараметрыЗапросаВЕТИС.ТипВЕТИС);
	
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ДокументXDTO, "localTransactionId", Шапка.Идентификатор, СообщениеXML);
	
	ПользовательВЕТИС = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "initiator");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПользовательВЕТИС, "login", НастройкаОбмена.ЛогинПользователя, СообщениеXML);
	
	// Предприятие, вырабатывающее продукцию (производитель).
	Производитель = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "enterprise");
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Производитель, "guid", Шапка.Предприятие_Идентификатор, СообщениеXML);
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Производитель, "name", Шапка.ПредприятиеНаименование, СообщениеXML);
	
	// Сведения, необходимые для оформления производственной партии.
	#Область productionOperation
	
	ПроизводственнаяОперация = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(ДокументXDTO, "productionOperation");
	
	// Идентификатор производственной транзакции (производственная смена, сутки и т.п.).
	Если ЗначениеЗаполнено(Шапка.ИдентификаторПроизводственнойТранзакции) Тогда
		
		ИдентификаторТранзакции = ?(
			ТипЗнч(Шапка.ИдентификаторПроизводственнойТранзакции) = Тип("Строка"),
			Шапка.ИдентификаторПроизводственнойТранзакции,
			Строка(Шапка.ИдентификаторПроизводственнойТранзакции.УникальныйИдентификатор()));
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПроизводственнаяОперация, "operationId", ИдентификаторТранзакции, СообщениеXML);
		
	КонецЕсли;
	
	//Сведения о сырье, использованном при производстве партии продукции.
	Для каждого ДанныеСтроки Из ДанныеДокумента.Сырье Цикл
		
		СведенияОСырье = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ПроизводственнаяОперация, "rawBatch");
		
		// Позиция в складском журнале системы Меркурий, используемая в качестве сырья при производстве.
		ЗаписьЖурнала = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(СведенияОСырье, "sourceStockEntry");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЗаписьЖурнала, "guid", ДанныеСтроки.ЗаписьСкладскогоЖурнала_Идентификатор, СообщениеXML);
		
		// Объем используемого сырья.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СведенияОСырье, "volume", ДанныеСтроки.КоличествоВЕТИС, СообщениеXML);
		
		// Единица измерения объёма используемого сырья.
		ЕдиницаИзмерения = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(СведенияОСырье, "unit");
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "guid", ДанныеСтроки.ЕдиницаИзмеренияВЕТИС_Идентификатор, СообщениеXML);
		
		// Список физических упаковок, в которых списывается сырьё.
		СписокУпаковок = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(СведенияОСырье, "packageList");
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", ДанныеСтроки.ИдентификаторСтроки);
		СписокСтрок = ДанныеДокумента.Упаковки.НайтиСтроки(СтруктураПоиска);
		ОбменДаннымиВЕТИС.ЗаполнитьОбъект_PackageList(СписокСтрок, ВспомогательныеДанные, СписокУпаковок, СообщениеXML);
	
		ПроизводственнаяОперация.rawBatch.Добавить(СведенияОСырье);
		
		// Заполнение сведений о записи журнала.
		ОбменДаннымиВЕТИС.ДобавитьЗаписьСкладскогоЖурналаВСообщениеXML(ДанныеСтроки, СообщениеXML);
		
	КонецЦикла;
	
	//Сведения о произведённой продукции.
	Для каждого ДанныеСтроки Из ДанныеДокумента.Товары Цикл
		
		Продукция = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ПроизводственнаяОперация, "productiveBatch");
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(Продукция, "id", "idvalue" + Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0"), СообщениеXML);
		
		СтруктураПоиска = Новый Структура("ИдентификаторСтрокиТовары", ДанныеСтроки.ИдентификаторСтроки);
		
		ПроизводственныеПартии = Новый Массив;
		ПроизводственныеПартии.Добавить(Новый Структура("ИдентификаторПартии", ДанныеСтроки.ИдентификаторПартии));
		
		ДопДанные = Новый Структура;
		ДопДанные.Вставить("СтраныМира",             ВспомогательныеДанные.СтраныМира);
		ДопДанные.Вставить("ПроизводственныеПартии", ПроизводственныеПартии);
		ДопДанные.Вставить("Упаковки",               ВспомогательныеДанные.Упаковки.НайтиСтроки(СтруктураПоиска));
		ДопДанные.Вставить("ШтрихкодыУпаковок",      ВспомогательныеДанные.ШтрихкодыУпаковок);
		
		ОбменДаннымиВЕТИС.ЗаполнитьОбъект_Batch(ДанныеСтроки, "КоличествоВЕТИС", ДопДанные, Продукция, СообщениеXML);
		
		ПроизводственнаяОперация.productiveBatch.Добавить(Продукция);
		
	КонецЦикла;
	
	// Флаг: завершается ли производственная транзакция (для незавершенного производства).
	ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(ПроизводственнаяОперация, "finalizeOperation", Шапка.ЗавершениеПроизводственнойТранзакции, СообщениеXML);
	
	#КонецОбласти
	
	// Сведения, необходимые для оформления ветеринарного сертификата.
	#Область vetDocument
	
	Для каждого ДанныеСтроки Из ДанныеДокумента.Товары Цикл
		
		СведенияВСД = РаботаСXMLИС.ОбъектXDTOПоИмениТипа(ДокументXDTO, "vetDocument");
		
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(СведенияВСД, "for", "idvalue" + Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0"), СообщениеXML);
		
		// Результаты осмотра/исследований партии. Заключение ветеринарного врача/специалиста.
		РезультатыОсмотра = ОбменДаннымиВЕТИС.СоздатьОбъектXDTOПоИмениТипа(СведенияВСД, "authentication");
		
		// Осуществлен ли контроль гос.ветврачом на соответствие требованиям.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(РезультатыОсмотра, "cargoInspected", ДанныеСтроки.ЭкспертизаВыполнена, СообщениеXML);
		
		// Результаты проведения ВСЭ.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(
			РезультатыОсмотра,
			"cargoExpertized",
			ИнтеграцияВЕТИСВызовСервера.КодРезультатаЛабораторныхИсследований(ДанныеСтроки.ЭкспертизаРезультат), 
			СообщениеXML);
		
		// Особые отметки / примечания для ВСД.
		ИнтеграцияВЕТИС.ЗаполнитьСвойствоXDTO(РезультатыОсмотра, "specialMarks", ДанныеСтроки.ОсобыеОтметки, СообщениеXML);
		
		ДокументXDTO.vetDocument.Добавить(СведенияВСД);
		
	КонецЦикла;
	
	#КонецОбласти
	
	#КонецОбласти
	
	ТекстСообщенияXML = ЗаявкиВЕТИС.ЗаявкаXML(ДокументXDTO, НастройкаОбмена, ВспомогательныеДанные.ХранилищеВременныхДат);
	ТекстСообщенияXML = ИнтеграцияИС.ПреобразоватьВременныеДаты(ВспомогательныеДанные.ХранилищеВременныхДат, ТекстСообщенияXML);
	
	СообщениеXML.ТекстСообщенияXML    = ТекстСообщенияXML;
	СообщениеXML.ТипСообщения         = ПараметрыЗапросаВЕТИС.ТипСообщения;
	СообщениеXML.ХозяйствующийСубъект = Шапка.ХозяйствующийСубъект;
	СообщениеXML.Предприятие          = Шапка.Предприятие;
	СообщениеXML.Операция             = Операция;
	СообщениеXML.Документ             = ДокументСсылка;
	СообщениеXML.ДокументОснование    = Неопределено;
	СообщениеXML.ФорматОбмена         = ПараметрыЗапросаВЕТИС.ФорматОбмена;
	СообщениеXML.Версия               = НомерВерсии;
	
	СообщенияXML.Добавить(СообщениеXML);
	
	Возврат СообщенияXML;
	
КонецФункции

Функция ДанныеПроизводственнойОперации(ДокументСсылка, Операция)
	
	СписокЗапросов = Новый СписокЗначений;
	
	#Область Версии
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ВЕТИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Ссылка
	|	И ВЕТИСПрисоединенныеФайлы.Операция = &Операция
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Версии");
	
	#КонецОбласти
	
	#Область Шапка
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Шапка.Номер                         КАК Номер,
	|	Шапка.Дата                          КАК Дата,
	|	Шапка.Идентификатор                 КАК Идентификатор,
	|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)  КАК ПоследнийНомерВерсии,
	|	
	|	&Операция                           КАК Операция,
	|
	|	Шапка.ИдентификаторПроизводственнойТранзакции КАК ИдентификаторПроизводственнойТранзакции,
	|	Шапка.ЗавершениеПроизводственнойТранзакции КАК ЗавершениеПроизводственнойТранзакции,
	|	
	|	Шапка.ХозяйствующийСубъект                    КАК ХозяйствующийСубъект,
	|	Шапка.ХозяйствующийСубъект.Идентификатор      КАК ХозяйствующийСубъект_Идентификатор,
	|	Шапка.ХозяйствующийСубъект.НаименованиеПолное КАК ХозяйствующийСубъектНаименование,
	|	
	|	Шапка.Предприятие               КАК Предприятие,
	|	Шапка.Предприятие.Идентификатор КАК Предприятие_Идентификатор,
	|	Шапка.Предприятие.Наименование  КАК ПредприятиеНаименование,
	|	
	|	Шапка.Комментарий КАК Комментарий
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО (Истина)
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Шапка");
	
	#КонецОбласти
	
	#Область Товары
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	Товары.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	Товары.ВетеринарноСопроводительныйДокумент КАК ВСД,
	|	Товары.ЭкспертизаВыполнена КАК ЭкспертизаВыполнена,
	|	Товары.ЭкспертизаРезультат КАК ЭкспертизаРезультат,
	|	Товары.ОсобыеОтметки КАК ОсобыеОтметки,
	|	
	|	Товары.Продукция.ТипПродукции            КАК ТипПродукции,
	|	Товары.Продукция.Продукция.Идентификатор КАК ПродукцияПродукция_Идентификатор,
	|	Товары.Продукция.Продукция.Наименование  КАК ПродукцияПродукция_Наименование,
	|	
	|	Товары.Продукция.ВидПродукции               КАК ВидПродукции,
	|	Товары.Продукция.ВидПродукции.Идентификатор КАК ВидПродукции_Идентификатор,
	|	Товары.Продукция.ВидПродукции.Наименование  КАК ВидПродукции_Наименование,
	|	
	|	Товары.Продукция                            КАК Продукция,
	|	Товары.Продукция.Идентификатор              КАК Продукция_Идентификатор,
	|	
	|	ВЫБОР КОГДА Товары.Продукция.ПолноеНаименование = """" ТОГДА
	|		Товары.Продукция.Наименование
	|	ИНАЧЕ
	|		Товары.Продукция.ПолноеНаименование
	|	КОНЕЦ КАК Продукция_Наименование,
	|	
	|	// Для работы с произвольной продукцией
	|	Товары.Продукция.GTIN                                  КАК Продукция_GTIN,
	|	Товары.Продукция.Артикул                               КАК Продукция_Артикул,
	|	
	|	Товары.Продукция.ФасовкаУпаковка                       КАК Продукция_ФасовкаУпаковка,
	|	Товары.Продукция.ФасовкаУпаковка.Идентификатор         КАК Продукция_ФасовкаУпаковка_Идентификатор,
	|	Товары.Продукция.ФасовкаУпаковка.Наименование          КАК Продукция_ФасовкаУпаковка_Наименование,
	|	
	|	Товары.Продукция.ФасовкаЕдиницаИзмерения               КАК Продукция_ФасовкаЕдиницаИзмерения,
	|	Товары.Продукция.ФасовкаЕдиницаИзмерения.Идентификатор КАК Продукция_ФасовкаЕдиницаИзмерения_Идентификатор,
	|	Товары.Продукция.ФасовкаЕдиницаИзмерения.Наименование  КАК Продукция_ФасовкаЕдиницаИзмерения_Наименование,
	|	
	|	Товары.Продукция.ФасовкаКоличествоУпаковок             КАК Продукция_ФасовкаКоличествоУпаковок,
	|	Товары.Продукция.ФасовкаКоличествоЕдиницВУпаковке      КАК Продукция_ФасовкаКоличествоЕдиницВУпаковке,
	|	
	|	Товары.КоличествоВЕТИС                     КАК КоличествоВЕТИС,
	|	
	|	Товары.ЕдиницаИзмеренияВЕТИС               КАК ЕдиницаИзмеренияВЕТИС,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Идентификатор КАК ЕдиницаИзмеренияВЕТИС_Идентификатор,
	|	Товары.ЕдиницаИзмеренияВЕТИС.Наименование  КАК ЕдиницаИзмеренияВЕТИСНаименование,
	|	
	|	Товары.СкоропортящаясяПродукция          КАК СкоропортящаясяПродукция,
	|	Товары.НизкокачественнаяПродукция        КАК НизкокачественнаяПродукция,
	|	
	|	Товары.ИдентификаторПартии КАК ИдентификаторПартии,
	|	НЕОПРЕДЕЛЕНО               КАК СтранаПроизводства,
	|	
	|	Товары.ДатаПроизводстваСтрока КАК ДатаПроизводстваСтрока,
	|	Товары.ДатаПроизводстваТочностьЗаполнения КАК ДатаПроизводстваТочностьЗаполнения,
	|	Товары.ДатаПроизводстваНачалоПериода КАК ДатаПроизводстваНачалоПериода,
	|	Товары.ДатаПроизводстваКонецПериода  КАК ДатаПроизводстваКонецПериода,
	|	
	|	Товары.СрокГодностиСтрока КАК СрокГодностиСтрока,
	|	Товары.СрокГодностиТочностьЗаполнения КАК СрокГодностиТочностьЗаполнения,
	|	Товары.СрокГодностиНачалоПериода КАК СрокГодностиНачалоПериода,
	|	Товары.СрокГодностиКонецПериода  КАК СрокГодностиКонецПериода
	|	
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Товары");
	
	#КонецОбласти
	
	#Область Сырье
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтроки                         КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Продукция                                   КАК Продукция,
	|	ТаблицаДокумента.КоличествоВЕТИС                             КАК КоличествоВЕТИС,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС                       КАК ЕдиницаИзмеренияВЕТИС,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС.Идентификатор         КАК ЕдиницаИзмеренияВЕТИС_Идентификатор,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала                     КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.Идентификатор       КАК ЗаписьСкладскогоЖурнала_Идентификатор,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала.ИдентификаторВерсии КАК ЗаписьСкладскогоЖурнала_ИдентификаторВерсии
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.Сырье КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокумента.НомерСтроки";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Сырье");
	
	#КонецОбласти
	
	#Область Упаковки
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтрокиТовары КАК ИдентификаторСтрокиТовары,
	|	ТаблицаДокумента.ИдентификаторСтроки       КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.УровеньУпаковки           КАК УровеньУпаковки,
	|	ТаблицаДокумента.КоличествоУпаковокВЕТИС   КАК КоличествоУпаковокВЕТИС,
	|	ТаблицаДокумента.УпаковкаВЕТИС.КодЕЭК      КАК УпаковкаВЕТИС_КодЕЭК
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.УпаковкиВЕТИС КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "Упаковки");
	
	#КонецОбласти
	
	#Область ШтрихкодыУпаковок
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтрокиУпаковки,
	|	ТаблицаДокумента.Штрихкод            КАК Штрихкод,
	|	ТаблицаДокумента.ТипМаркировки       КАК ТипМаркировки
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.ШтрихкодыУпаковок КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ТаблицаДокумента.ШтрихкодУпаковки = ЗНАЧЕНИЕ(Справочник.ШтрихкодыУпаковокТоваров.ПустаяСсылка)";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ШтрихкодыУпаковок");
	
	#КонецОбласти
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	Результат = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов, Истина);
	
	Результат.Упаковки.Индексы.Добавить("ИдентификаторСтрокиТовары");
	
	Возврат Результат;
	
КонецФункции

Процедура ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(ДанныеДокумента, ПараметрыОбмена, Предприятие, ХозяйствующийСубъект, ДокументОбъект)
	
	ЗаписиСкладскогоЖурналаКЗагрузке = Новый Соответствие;
	Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.stockEntryList.stockEntry Цикл
		
		ОбработанныйЭлементДанных = ЗаписиСкладскогоЖурналаКЗагрузке.Получить(ЭлементДанных.guid);
		Если ОбработанныйЭлементДанных = Неопределено
			Или ЭлементДанных.updateDate >= ОбработанныйЭлементДанных.updateDate Тогда
			ЗаписиСкладскогоЖурналаКЗагрузке.Вставить(ЭлементДанных.guid, ЭлементДанных);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаписейСкладскогоЖурнала = Новый Массив;
	Для Каждого КлючИЗначение Из ЗаписиСкладскогоЖурналаКЗагрузке Цикл
		
		ЭлементДанных = КлючИЗначение.Значение;
		
		ЗаписьСкладскогоЖурнала = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ЗаписиСкладскогоЖурналаВЕТИС", ЭлементДанных.guid);
		
		ДанныеЗаписиСкладскогоЖурнала = ИнтеграцияВЕТИС.ЗагрузитьЗаписьСкладскогоЖурнала(
			ЭлементДанных,
			ЗаписьСкладскогоЖурнала,
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена);
		
		Если ДанныеЗаписиСкладскогоЖурнала <> Неопределено 
			И (ДанныеЗаписиСкладскогоЖурнала.Объект.Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.Создан
				// ИзмененВРезультатеПрисоединенияАвтоматически появляется когда делается производственная операция с использованным ранее идентификатором партии
				Или ДанныеЗаписиСкладскогоЖурнала.Объект.Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.ИзмененВРезультатеПрисоединенияАвтоматически
				Или ДанныеЗаписиСкладскогоЖурнала.Объект.Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданВРезультатеПроизводственнойОперации
				Или ДанныеЗаписиСкладскогоЖурнала.Объект.Статус = Перечисления.СтатусыВерсионныхОбъектовВЕТИС.СозданПоСправкеОБлагополучииНаМолочнойФерме) Тогда
			ДанныеЗаписейСкладскогоЖурнала.Добавить(ДанныеЗаписиСкладскогоЖурнала);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбменДаннымиВЕТИС.ЗагрузитьЗаписиСкладскогоЖурналаПоРезультатамЗапросаВЕТИС(
		ДанныеЗаписейСкладскогоЖурнала,
		ДокументОбъект.Товары,
		ДанныеДокумента.Документ);
	
КонецПроцедуры

Процедура ЗагрузитьСведенияВСДПоРезультатамЗапросаВЕТИС(ДанныеДокумента, ПараметрыОбмена, Предприятие, ХозяйствующийСубъект, ДокументОбъект)
	
	ЗагруженныеВСД = Новый Массив;
	
	ПродукцияНезакрытыхВСД = Новый Соответствие;
	
	Для Каждого ЭлементДанных Из ДанныеДокумента.Объект.vetDocument Цикл
		
		ВСД = ИнтеграцияВЕТИС.СсылкаПоИдентификатору(ПараметрыОбмена, "ВетеринарноСопроводительныйДокументВЕТИС", ЭлементДанных.uuid);
		
		Если ЗначениеЗаполнено(ВСД) Тогда
			Если НЕ ВСД.Закрыт И ЗначениеЗаполнено(ВСД.Продукция) Тогда
				// для незавершенного производства сохраним текущие данные по продукции
				ПродукцияНЗП = Новый Соответствие;
				ПродукцияНЗП.Вставить(ВСД.Продукция, ВСД.КоличествоВЕТИС);
				ПродукцияНезакрытыхВСД.Вставить(ВСД, ПродукцияНЗП);
			КонецЕсли;
		КонецЕсли;
		
		ДанныеВСД = ИнтеграцияВЕТИС.ЗагрузитьВетеринарноСопроводительныйДокумент(
			ЭлементДанных,
			ВСД,
			ХозяйствующийСубъект,
			Предприятие,
			ПараметрыОбмена);
		
		Если ДанныеВСД <> Неопределено Тогда
			
			ЗагруженныеВСД.Добавить(ДанныеВСД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ДанныеВСД Из ЗагруженныеВСД Цикл
		
		ВСДСсылка = ДанныеВСД.Ссылка;
		ВСДОбъект = ДанныеВСД.Объект;
		ЭтоЖивыеЖивотные = ИнтеграцияВЕТИСВызовСервера.ПродукцияПринадлежитТипуЖивыеЖивотные(ВСДОбъект.Продукция);
		
		ДанныеСтроки = ДокументОбъект.Товары.Найти(ВСДСсылка, "ВетеринарноСопроводительныйДокумент");
		Если ДанныеСтроки <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КоличествоОбработано = 0;
		Если ПродукцияНезакрытыхВСД[ВСДСсылка] <> Неопределено
			И ПродукцияНезакрытыхВСД[ВСДСсылка][ВСДОбъект.Продукция] <> Неопределено Тогда
			КоличествоОбработано = ПродукцияНезакрытыхВСД[ВСДСсылка][ВСДОбъект.Продукция];
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Продукция",             ВСДОбъект.Продукция);
		ПараметрыОтбора.Вставить("КоличествоВЕТИС",       ВСДОбъект.КоличествоВЕТИС - КоличествоОбработано);
		ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС", ВСДОбъект.ЕдиницаИзмеренияВЕТИС);
		
		Если ЗначениеЗаполнено(ВСДОбъект.ДатаПроизводстваСтрока)
			Или ЗначениеЗаполнено(ВСДОбъект.ДатаПроизводстваНачалоПериода)
			Или ЗначениеЗаполнено(ВСДОбъект.ДатаПроизводстваКонецПериода)Тогда
		
			ПараметрыОтбора.Вставить("ДатаПроизводстваСтрока",             ВСДОбъект.ДатаПроизводстваСтрока);
			ПараметрыОтбора.Вставить("ДатаПроизводстваТочностьЗаполнения", ВСДОбъект.ДатаПроизводстваТочностьЗаполнения);
			ПараметрыОтбора.Вставить("ДатаПроизводстваНачалоПериода",      ВСДОбъект.ДатаПроизводстваНачалоПериода);
			ПараметрыОтбора.Вставить("ДатаПроизводстваКонецПериода",       ВСДОбъект.ДатаПроизводстваКонецПериода);
			
		КонецЕсли;
		
		ПараметрыОтбора.Вставить("ВетеринарноСопроводительныйДокумент", Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка());
		
		Если Не ЭтоЖивыеЖивотные Тогда
			
			ПараметрыОтбора.Вставить("СкоропортящаясяПродукция",   ВСДОбъект.СкоропортящаясяПродукция);
			ПараметрыОтбора.Вставить("НизкокачественнаяПродукция", ВСДОбъект.НизкокачественнаяПродукция);
			
			Если ЗначениеЗаполнено(ВСДОбъект.СрокГодностиСтрока)
				Или ЗначениеЗаполнено(ВСДОбъект.СрокГодностиНачалоПериода)
				Или ЗначениеЗаполнено(ВСДОбъект.СрокГодностиКонецПериода)Тогда
				
				ПараметрыОтбора.Вставить("СрокГодностиСтрока",             ВСДОбъект.СрокГодностиСтрока);
				ПараметрыОтбора.Вставить("СрокГодностиТочностьЗаполнения", ВСДОбъект.СрокГодностиТочностьЗаполнения);
				ПараметрыОтбора.Вставить("СрокГодностиНачалоПериода",      ВСДОбъект.СрокГодностиНачалоПериода);
				ПараметрыОтбора.Вставить("СрокГодностиКонецПериода",       ВСДОбъект.СрокГодностиКонецПериода);
				
			КонецЕсли;
			
		КонецЕсли;
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		
		//1. Строгое соответствие при получении ВСД.
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЧ = НайденныеСтроки[0];
			СтрокаТЧ.ВетеринарноСопроводительныйДокумент = ВСДСсылка;
			КоличествоОбработано = ВСДОбъект.КоличествоВЕТИС;
		КонецЕсли;
		
		//2. Нестрогое соответствие при получении объединенной ВСД.
		Если НайденныеСтроки.Количество() = 0 Тогда
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Продукция",             ВСДОбъект.Продукция);
			ПараметрыОтбора.Вставить("ЕдиницаИзмеренияВЕТИС", ВСДОбъект.ЕдиницаИзмеренияВЕТИС);
			ПараметрыОтбора.Вставить("ВетеринарноСопроводительныйДокумент", Справочники.ВетеринарноСопроводительныйДокументВЕТИС.ПустаяСсылка());
			Если Не ЭтоЖивыеЖивотные Тогда
				ПараметрыОтбора.Вставить("СкоропортящаясяПродукция",   ВСДОбъект.СкоропортящаясяПродукция);
				ПараметрыОтбора.Вставить("НизкокачественнаяПродукция", ВСДОбъект.НизкокачественнаяПродукция);
			КонецЕсли;
			НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
					
					ОкончаниеПроизводстваТЧ   = Макс(СтрокаТЧ.ДатаПроизводстваНачалоПериода, СтрокаТЧ.ДатаПроизводстваКонецПериода);
					ОкончаниеПроизводстваВСД  = Макс(ВСДОбъект.ДатаПроизводстваНачалоПериода, ВСДОбъект.ДатаПроизводстваКонецПериода);
					ОкончаниеСрокаГодностиТЧ  = Макс(СтрокаТЧ.СрокГодностиНачалоПериода, СтрокаТЧ.СрокГодностиКонецПериода);
					ОкончаниеСрокаГодностиВСД = Макс(ВСДОбъект.СрокГодностиНачалоПериода, ВСДОбъект.СрокГодностиКонецПериода);
					ПроверятьДатуПроизводства = ЗначениеЗаполнено(СтрокаТЧ.ДатаПроизводстваНачалоПериода);
					ПроверятьСрокГодности = Не ЭтоЖивыеЖивотные И ЗначениеЗаполнено(СтрокаТЧ.СрокГодностиНачалоПериода);
					
					// Проверка количества по ВСД
					Если СтрокаТЧ.КоличествоВЕТИС > ВСДОбъект.КоличествоВЕТИС - КоличествоОбработано Тогда
						Продолжить; // не подходит: количество меньше указанного в строке
					// Проверка даты производства по ВСД
					ИначеЕсли ПроверятьДатуПроизводства
						И (СтрокаТЧ.ДатаПроизводстваНачалоПериода < ВСДОбъект.ДатаПроизводстваНачалоПериода
							Или ОкончаниеПроизводстваТЧ > ОкончаниеПроизводстваВСД) Тогда
						Продолжить;
					// Проверка срока годности по ВСД
					ИначеЕсли ПроверятьСрокГодности
						И (СтрокаТЧ.СрокГодностиНачалоПериода < ВСДОбъект.СрокГодностиНачалоПериода
							Или ОкончаниеСрокаГодностиТЧ > ОкончаниеСрокаГодностиВСД) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаТЧ.ВетеринарноСопроводительныйДокумент = ВСДСсылка;
					КоличествоОбработано = КоличествоОбработано + СтрокаТЧ.Количество;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоОбработано = 0 Тогда
			
			ДатаПроизводстваПредставление = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПериодаВЕТИС(
				ВСДОбъект.ДатаПроизводстваТочностьЗаполнения,
				ВСДОбъект.ДатаПроизводстваНачалоПериода,
				ВСДОбъект.ДатаПроизводстваКонецПериода,
				ВСДОбъект.ДатаПроизводстваСтрока);
			
			СрокГодностиПредставление = ИнтеграцияВЕТИСКлиентСервер.ПредставлениеПериодаВЕТИС(
				ВСДОбъект.СрокГодностиТочностьЗаполнения,
				ВСДОбъект.СрокГодностиНачалоПериода,
				ВСДОбъект.СрокГодностиКонецПериода,
				ВСДОбъект.СрокГодностиСтрока);
			
			ТекстОшибки = НСтр("ru = 'При заполнении ВСД по документу %1 не удалось найти позицию документа по продукции %2 (количество %3 %4; дата производства %5; срок годности %6)'");
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				ДанныеДокумента.Документ, 
				ВСДОбъект.Продукция,
				ВСДОбъект.КоличествоВЕТИС,
				ВСДОбъект.ЕдиницаИзмеренияВЕТИС,
				ДатаПроизводстваПредставление,
				СрокГодностиПредставление);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриПроизводствеПродукцииВЕТИС.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеШапки.Дата КАК Период,
	|	ДанныеШапки.Ссылка КАК Ссылка,
	|	ДанныеШапки.ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	ДанныеШапки.Предприятие КАК Предприятие,
	|	ЕСТЬNULL(СтатусыДокументовВЕТИС.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиПроизводственныхОперацийВЕТИС.Черновик)) КАК Статус
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС КАК ДанныеШапки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовВЕТИС КАК СтатусыДокументовВЕТИС
	|		ПО (СтатусыДокументовВЕТИС.Документ = ДанныеШапки.Ссылка)
	|ГДЕ
	|	ДанныеШапки.Ссылка = &Ссылка";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтатусыДвиженийРезерв", СтатусыДвиженийРезерв());
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаДвиженияСерийТоваров(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияСерийТоваров";
	
	Если Не ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = ИнтеграцияВЕТИС.ТекстЗапросаДвижениеСерийТоваров(Метаданные.Документы.ПроизводственнаяОперацияВЕТИС);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаЗаписиСкладскогоЖурналаВРезервеВЕТИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ЗаписиСкладскогоЖурналаВРезервеВЕТИС";
	
	Если Не ИнтеграцияИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Регистратор,
	|	&Ссылка КАК Документ,
	|	&ХозяйствующийСубъект КАК ХозяйствующийСубъект,
	|	&Предприятие КАК Предприятие,
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала КАК ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС КАК ЕдиницаИзмеренияВЕТИС,
	|	СУММА(ТаблицаДокумента.КоличествоВЕТИС) КАК КоличествоВЕТИС
	|ИЗ
	|	Документ.ПроизводственнаяОперацияВЕТИС.Сырье КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И &Статус В (&СтатусыДвиженийРезерв)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ЗаписьСкладскогоЖурнала,
	|	ТаблицаДокумента.ЕдиницаИзмеренияВЕТИС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СтатусыДвиженийРезерв()

	Результат = Новый Массив;
	Результат.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.Черновик);
	Результат.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.КПередаче);
	Результат.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.Обрабатывается);
	Результат.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОшибкаПередачи);
	Результат.Добавить(Перечисления.СтатусыОбработкиПроизводственныхОперацийВЕТИС.ОтклоненВЕТИС);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

Функция ЗаполнитьЗаписиСкладскогоЖурнала(Объект, СписокСтрок = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ЗаполнениеДокументовВЕТИС.ПараметрыЗаполненияЗаписейСкладскогоЖурнала();
	ПараметрыЗаполнения.ПодбиратьЗаписиСИстекшимСрокомГодности = Ложь;
	
	РезультатЗаполнения = ЗаполнениеДокументовВЕТИС.ЗаполнитьЗаписиСкладскогоЖурнала(
		Объект.Сырье,
		Объект.ХозяйствующийСубъект,
		Объект.Предприятие,
		СписокСтрок,
		ПараметрыЗаполнения);
	
	Возврат РезультатЗаполнения;
	
КонецФункции

Функция ТипДокумента()
	
	Возврат Метаданные.Документы.ПроизводственнаяОперацияВЕТИС;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
