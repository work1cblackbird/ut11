#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Формирует описание реквизитов объекта, заполняемых по статистике их использования.
//
// Параметры:
//  ОписаниеРеквизитов - Структура - описание реквизитов, для которых необходимо получить значения по статистике
//
//
Процедура ЗадатьОписаниеЗаполняемыхРеквизитовПоСтатистике(ОписаниеРеквизитов) Экспорт
	
	Параметры = ЗаполнениеОбъектовПоСтатистике.ПараметрыЗаполняемыхРеквизитов();
	Параметры.РазрезыСбораСтатистики.ИспользоватьТолькоЗаполненные = "Ответственный";
	Параметры.ЗаполнятьПриУсловии.ПоляОбъектаЗаполнены = "Ответственный";
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"Организация", Параметры);
	
	ЗаполнениеОбъектовПоСтатистике.ДобавитьОписаниеЗаполняемыхРеквизитов(ОписаниеРеквизитов,
		"Подразделение");
	
КонецПроцедуры

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ФинансовыеИнструменты");
	МеханизмыДокумента.Добавить("ИсправлениеДокументов");
	
	КорректировкаЗадолженностиПоФинансовымИнструментамЛокализация.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка, ДокументОбъект - ссылка на документ или объект, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  - СписокЗначений - содержит тексты запросов и их имена, возвращается, если свойство ПолучитьТекстыЗапроса параметра
//  					ДопПараметры имеет значение Истина.
//  - Структура - содержит таблицы данных для загрузки в регистры.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Если ТипЗнч(Документ) = Тип("ДокументОбъект.КорректировкаЗадолженностиПоФинансовымИнструментам") Тогда
		ДокументСсылка = Документ.Ссылка;
	Иначе
		ДокументСсылка = Документ;
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда
		////////////////////////////////////////////////////////////////////////////
		// Создадим запрос инициализации движений
		
		ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
		
		////////////////////////////////////////////////////////////////////////////
		// Сформируем текст запроса
		СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры);
		
		ТекстЗапросаТаблицаРасчетыПоФинансовымИнструментам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры);
		ТекстЗапросаТаблицаРезервыПоСомнительнымДолгам(Запрос, ТекстыЗапроса, Регистры);
		
		КорректировкаЗадолженностиПоФинансовымИнструментамЛокализация.ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ПроведениеДокументов.ДобавитьЗапросыСторноДвижений(Запрос, ТекстыЗапроса, Регистры, ПустаяСсылка().Метаданные());
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

#КонецОбласти

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	ИсправлениеДокументов.ДобавитьКомандуИсправление(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	ИсправлениеДокументов.ДобавитьКомандуСторно(КомандыСозданияНаОсновании, ПустаяСсылка().Метаданные());
	
	КорректировкаЗадолженностиПоФинансовымИнструментамЛокализация.ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры);

КонецПроцедуры

// Добавляет команду создания документа "Корректировка задолженности по финансовым инструментам".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
//  - СтрокаТаблицыЗначений - строка данных, определяющая параметры команды ввода на основании.
//  - Неопределено - если нет права на создание документа "Корректировка задолженности по финансовым инструментам".
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление =
			ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	КорректировкаЗадолженностиПоФинансовымИнструментамЛокализация.ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры);

КонецПроцедуры


// Возвращает параметры выбора статей в документе.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 
// Возвращаемое значение:
// 	Массив - Массив параметров настройки счетов учета (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики)
//
Функция ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация) Экспорт
	
	МассивПаметровВыбора = Новый Массив;
	
	#Область СтатьяРасходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяРасходов";
	ПараметрыВыбора.ТипСтатьи = "СтатьяРасходовТипСтатьи";
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяРасходов");
	
	СписаниеЗаСчетРезерва = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам);
	ПараметрыВыбора.ДоступностьПоОперации = 
			(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности 
					ИЛИ СписаниеЗаСчетРезерва);
	
	#Область АналитикаАктивовПассивов
	Если ПараметрыВыбора.ДоступностьПоОперации Тогда
		ПараметрыВыбора.ВыборСтатьиАктивовПассивов = НЕ СписаниеЗаСчетРезерва;
		ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
		ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("РасходыАналитикаАктивовПассивов");
	КонецЕсли;
	#КонецОбласти
	
	#Область АналитикаРасходов
	ПараметрыВыбора.ВыборСтатьиРасходов = Истина;
	ПараметрыВыбора.АналитикаРасходов = "АналитикаРасходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаРасходов.Добавить("АналитикаРасходов");
	#КонецОбласти
	
	МассивПаметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
	
	
	#Область СтатьяДоходов
	ПараметрыВыбора = ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики();
	ПараметрыВыбора.ПутьКДанным = "Объект";
	ПараметрыВыбора.Статья = "СтатьяДоходов";
	ПараметрыВыбора.ТипСтатьи = "СтатьяДоходовТипСтатьи";
	ПараметрыВыбора.ЭлементыФормы.Статья.Добавить("СтатьяДоходов");
	
	ПараметрыВыбора.ДоступностьПоОперации = (ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	
	#Область АналитикаАктивовПассивов
	Если ПараметрыВыбора.ДоступностьПоОперации Тогда
		ПараметрыВыбора.ВыборСтатьиАктивовПассивов = Истина;
		ПараметрыВыбора.АналитикаАктивовПассивов = "АналитикаАктивовПассивов";
		ПараметрыВыбора.ЭлементыФормы.АналитикаАктивовПассивов.Добавить("ДоходыАналитикаАктивовПассивов");
	КонецЕсли;
	#КонецОбласти
	
	#Область АналитикаДоходов
	ПараметрыВыбора.ВыборСтатьиДоходов = Истина;
	ПараметрыВыбора.АналитикаДоходов = "АналитикаДоходов";
	ПараметрыВыбора.ЭлементыФормы.АналитикаДоходов.Добавить("АналитикаДоходов");
	#КонецОбласти
	
	МассивПаметровВыбора.Добавить(ПараметрыВыбора);
	#КонецОбласти
		
	Возврат МассивПаметровВыбора;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Функция НастройкиПолейФормы() Экспорт
	
	Финансы = ФинансоваяОтчетностьСервер;
	Настройки = ДенежныеСредстваСервер.ИнициализироватьНастройкиПолейФормы();
	
	МассивДебиторскаяЗадолженность = Новый Массив;
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности);
	МассивДебиторскаяЗадолженность.Добавить(Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам);
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаРасходы");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", МассивДебиторскаяЗадолженность);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтраницаДоходы");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	Элемент.Свойства.Вставить("Видимость");
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Партнер");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", МассивДебиторскаяЗадолженность);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Дебитор'"));
	
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Партнер");
	Финансы.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности);
	Элемент.Свойства.Вставить("Заголовок", НСтр("ru = 'Кредитор'"));
		
	Элемент = Настройки.Добавить();
	Финансы.НовыйОтбор(Элемент.Условие, "Дополнительно.ИспользуетсяРеглУчет", Истина);
	Элемент.Свойства.Вставить("Видимость");
	
	
	Возврат Настройки;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт
	
	ИсточникиДанных = Новый Соответствие;
	
	Возврат ИсточникиДанных;
	
КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.КорректировкаЗадолженностиПоФинансовымИнструментам";
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("НомерНаПечать",        """""");
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору", """""");
	
	ВЗапросеЕстьИсточник = Истина;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "";
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, ВЗапросеЕстьИсточник, ПереопределениеРасчетаПараметров);
	Иначе
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
			ТекстЗапроса, ПолноеИмяДокумента, СинонимТаблицыДокумента, ПереопределениеРасчетаПараметров);
	КонецЕсли;

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                  КАК Период,
	|	ДанныеДокумента.Номер                                 КАК Номер,
	|	ДанныеДокумента.Организация                           КАК Организация,
	|	ДанныеДокумента.Партнер                               КАК Партнер,
	|	ДанныеДокумента.Контрагент                            КАК Контрагент,
	|	ДанныеДокумента.Договор                               КАК Договор,
	|	ДанныеДокумента.Договор.НаправлениеДеятельности       КАК НаправлениеДеятельности,
	|	ДанныеДокумента.ВалютаВзаиморасчетов                  КАК ВалютаВзаиморасчетов,
	|	ДанныеДокумента.СуммаДокумента                        КАК СуммаДокумента,
	|	ДанныеДокумента.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ВЫБОР КОГДА ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиДоходов ТОГДА
	|		ДанныеДокумента.СтатьяДоходов                
	|	ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК СтатьяДоходов,
	|	ДанныеДокумента.АналитикаДоходов                      КАК АналитикаДоходов,
	|	ВЫБОР КОГДА ДанныеДокумента.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов ТОГДА
	|		ДанныеДокумента.СтатьяРасходов                
	|	ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК СтатьяРасходов,
	|	ЕСТЬNULL(СтатьиРасходов.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) КАК ВариантРаспределенияРасходовРегл,
	|	ЕСТЬNULL(СтатьиРасходов.ВидЦенностиНДС, НЕОПРЕДЕЛЕНО) КАК ВидЦенностиНДСРасходов,
	|	ДанныеДокумента.АналитикаРасходов                     КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА
	|			ДанныеДокумента.СтатьяРасходов
	|		КОГДА ДанныеДокумента.СтатьяДоходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов ТОГДА
	|			ДанныеДокумента.СтатьяДоходов
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ                                                 КАК СтатьяАктивовПассивов,
	|	ДанныеДокумента.АналитикаАктивовПассивов              КАК АналитикаАктивовПассивов,
	|	ДанныеДокумента.Подразделение                         КАК Подразделение,
	|	ДанныеДокумента.ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Ответственный                         КАК Ответственный,
	|	ДанныеДокумента.Комментарий                           КАК Комментарий,
	|	ДанныеДокумента.НастройкаСчетовУчета                  КАК НастройкаСчетовУчета,
	|	ДанныеДокумента.Проведен                              КАК Проведен,
	|	ДанныеДокумента.ПометкаУдаления                       КАК ПометкаУдаления,
	|	ДанныеДокумента.МоментВремени                         КАК МоментВремени,
	|	ДанныеДокумента.Исправление                           КАК Исправление,
	|	ДанныеДокумента.СторнируемыйДокумент                  КАК СторнируемыйДокумент,
	|	ДанныеДокумента.ИсправляемыйДокумент                  КАК ИсправляемыйДокумент,
	|	ДанныеДокумента.Ссылка                                КАК Ссылка,
	|	ДанныеДокумента.Автор                                 КАК Автор,
	|	НастройкиХозяйственныхОпераций.Ссылка                 КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Документ.КорректировкаЗадолженностиПоФинансовымИнструментам КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	|	ПО
	|		ДанныеДокумента.СтатьяРасходов = СтатьиРасходов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|		ПО ДанныеДокумента.ХозяйственнаяОперация = НастройкиХозяйственныхОпераций.ХозяйственнаяОперация
	|	
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения(Реквизиты) Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Реквизиты);
	
КонецПроцедуры

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)
	
	Значения = Новый Структура;
	Значения.Вставить("ИдентификаторМетаданных",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ.КорректировкаЗадолженностиПоФинансовымИнструментам"));
	Значения.Вставить("ВалютаУправленческогоУчета",            Константы.ВалютаУправленческогоУчета.Получить());
	Значения.Вставить("ИспользоватьУчетПрочихАктивовПассивов", ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихАктивовПассивов"));
	
	Если Реквизиты <> Неопределено Тогда
		
		Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(
			Реквизиты.ВалютаВзаиморасчетов,
			Неопределено,
			Реквизиты.Период,
			Реквизиты.Организация);
			
		Значения.Вставить("КоэффициентПересчетаВВалютуУпр",              Коэффициенты.КоэффициентПересчетаВВалютуУпр);
		Значения.Вставить("КоэффициентПересчетаВВалютуРегл",             Коэффициенты.КоэффициентПересчетаВВалютуРегл);
		Значения.Вставить("НомерНаПечать",                               ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Реквизиты.Номер));
		
	КонецЕсли;
	
	Возврат Значения;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПоПартнерамИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос;
	ЗапросАналитик.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросАналитик.УстановитьПараметр("Ссылка",                    Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация",               Запрос.Параметры.Организация);
	ЗапросАналитик.УстановитьПараметр("Контрагент",                Запрос.Параметры.Контрагент);
	ЗапросАналитик.УстановитьПараметр("Партнер",                   Запрос.Параметры.Партнер);
	
	ЗапросАналитик.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация                    КАК Организация,
	|	&Партнер                        КАК Партнер,
	|	&Контрагент                     КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	ДанныеДокумента.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.КорректировкаЗадолженностиПоФинансовымИнструментам КАК ДанныеДокумента
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам  КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		&Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И &Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И &Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = РегистрАналитикаУчетаПоПартнерам.Договор
	|		И ДанныеДокумента.Договор.НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И РегистрАналитикаУчетаПоПартнерам.КлючАналитики ЕСТЬ NULL
	|";
	
	РезультатЗапроса = ЗапросАналитик.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПоПартнерамИнициализированы", Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаКоэффициентыВалют(Запрос) Экспорт
	
	Если Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуУпр")
		И Запрос.Параметры.Свойство("КоэффициентПересчетаВВалютуРегл") Тогда
		Возврат;
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Запрос.Параметры.ВалютаВзаиморасчетов,
	                                                                         Неопределено,
	                                                                         Запрос.Параметры.Период,
	                                                                         Запрос.Параметры.Организация);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуУпр",           Коэффициенты.КоэффициентПересчетаВВалютуУпр);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВВалютуРегл",          Коэффициенты.КоэффициентПересчетаВВалютуРегл);
	
КонецПроцедуры

Функция ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяВременнойТаблицы = "ТаблицаЗадолженность";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	Задолженность.ТипСуммы КАК ТипСуммы,
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета ТОГДА
	|			Задолженность.Сумма
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуРегл КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета ТОГДА
	|			Задолженность.Сумма
	|		ИНАЧЕ
	|			ВЫРАЗИТЬ(Задолженность.Сумма * &КоэффициентПересчетаВВалютуУпр КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК СуммаУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС
	|ПОМЕСТИТЬ ТаблицаЗадолженность
	|ИЗ
	|	Документ.КорректировкаЗадолженностиПоФинансовымИнструментам.Задолженность КАК Задолженность
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыПоФинансовымИнструментам(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "РасчетыПоФинансовымИнструментам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ОстаткиРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	&Договор КАК Договор,
	|	Задолженность.ТипСуммы КАК ТипСуммы,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0) КАК Сумма,
	|	Задолженность.СуммаУпр - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаУпр,
	|	Задолженность.СуммаРегл - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0) КАК СуммаРегл,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		&Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И &Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И &Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = РегистрАналитикаУчетаПоПартнерам.Договор
	|		И &НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	&Договор КАК Договор,
	|	Задолженность.ТипСуммы КАК ТипСуммы,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	ОстаткиРезервов.Сумма КАК Сумма,
	|	ОстаткиРезервов.СуммаУпр КАК СуммаУпр,
	|	ОстаткиРезервов.СуммаРегл КАК СуммаРегл,
	|	
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		&Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И &Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И &Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = РегистрАналитикаУчетаПоПартнерам.Договор
	|		И &НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Задолженность.НомерСтроки КАК НомерСтроки,
	|	&Период КАК Период,
	|	&Период КАК ДатаРегистратора,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК АналитикаУчетаПоПартнерам,
	|	&Договор КАК Договор,
	|	Задолженность.ТипСуммы КАК ТипСуммы,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	
	|	Задолженность.Сумма КАК Сумма,
	|	Задолженность.СуммаУпр КАК СуммаУпр,
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|	ПО
	|		&Организация = РегистрАналитикаУчетаПоПартнерам.Организация
	|		И &Партнер = РегистрАналитикаУчетаПоПартнерам.Партнер
	|		И &Контрагент = РегистрАналитикаУчетаПоПартнерам.Контрагент
	|		И ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) = РегистрАналитикаУчетаПоПартнерам.Договор
	|		И &НаправлениеДеятельности = РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяДоходов КАК СтатьяДоходов,
	|	&АналитикаДоходов КАК АналитикаДоходов,
	|	
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	
	|	Задолженность.СуммаУпр КАК Сумма,
	|	ВЫБОР КОГДА НЕ &УправленческийУчетОрганизаций
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|		ТОГДА 0
	|		ИНАЧЕ Задолженность.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихДоходовРасходов
	|	И &СтатьяДоходов <> НЕОПРЕДЕЛЕНО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Задолженность.НомерСтроки
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ОстаткиРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ" + "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&СтатьяРасходов КАК СтатьяРасходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ВидДеятельностиНДС,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0) - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаСНДС,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0) - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаБезНДС,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0) - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК СуммаБезНДСУпр,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0) - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0) КАК СуммаСНДСРегл,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0) - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0) КАК СуммаБезНДСРегл,
	|	-ЕСТЬNULL(ОстаткиРезервов.ПостояннаяРазница, 0) КАК ПостояннаяРазница,
	|	-ЕСТЬNULL(ОстаткиРезервов.ВременнаяРазница, 0) КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК Статья
	|		ПО Статья.Ссылка = &СтатьяРасходов
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Суммы.Ссылка = &Ссылка
	|		И Задолженность.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО
	|		Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|		И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))
	|	И &СтатьяРасходов <> НЕОПРЕДЕЛЕНО
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	#Область СписаниеДебиторскойЗадолженности
	СписаниеДебиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)  КАК ВидДвижения,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                  КАК Статья,
	|	ВЫБОР
	|		КОГДА &АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &АналитикаАктивовПассивов
	|	КОНЕЦ                                   КАК Аналитика,
	|	Задолженность.СуммаУпр                  КАК Сумма
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|";
	#КонецОбласти

	#Область СписаниеКредиторскойЗадолженности
	СписаниеКредиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                                 КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Организация                            КАК Организация,
	|	&Подразделение                          КАК Подразделение,
	|	&НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов                  КАК Статья,
	|	ВЫБОР
	|		КОГДА &АналитикаАктивовПассивов = ЗНАЧЕНИЕ(Перечисление.СтатьиБезАналитики.ПустаяСсылка)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ &АналитикаАктивовПассивов
	|	КОНЕЦ                                   КАК Аналитика,
	|	Задолженность.СуммаУпр                  КАК Сумма
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО";
	#КонецОбласти
	
	ТекстЗапроса = СписаниеКредиторскойЗадолженности
		+ " ОБЪЕДИНИТЬ ВСЕ " + СписаниеДебиторскойЗадолженности;
	
	ТекстЗапроса = ТекстЗапроса + "ОБЪЕДИНИТЬ ВСЕ"
		+ РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы(Ложь);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияПоПрочимАктивамПассивам(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияПоПрочимАктивамПассивам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	#Область СписаниеДебиторскойЗадолженности
	СписаниеДебиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                   КАК Период,
	|	&Организация              КАК Организация,
	|	&Подразделение            КАК Подразделение,
	|	&НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов    КАК Статья,
	|	&АналитикаАктивовПассивов КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр  КАК СуммаУпр,
	|	Задолженность.СуммаУпр  КАК СуммаСНДС,
	|	Задолженность.СуммаУпр  КАК СуммаБезНДС,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|";
	#КонецОбласти

	#Область СписаниеКредиторскойЗадолженности
	СписаниеКредиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период                   КАК Период,
	|	&Организация              КАК Организация,
	|	&Подразделение            КАК Подразделение,
	|	&НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАктивовПассивов    КАК Статья,
	|	&АналитикаАктивовПассивов КАК Аналитика,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	Задолженность.СуммаУпр  КАК СуммаУпр,
	|	Задолженность.СуммаУпр  КАК СуммаСНДС,
	|	Задолженность.СуммаУпр  КАК СуммаБезНДС,
	|	
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|	&НастройкаХозяйственнойОперации   КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|	И &ИспользоватьУчетПрочихАктивовПассивов
	|	И &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО";
	#КонецОбласти
	
	ТекстЗапроса = СписаниеКредиторскойЗадолженности
		+ " ОБЪЕДИНИТЬ ВСЕ " + СписаниеДебиторскойЗадолженности;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса, Регистры = Неопределено) Экспорт
	
	ТекстЗапросаДанных = "
	|ВЫБРАТЬ
	|	""Задолженность"" КАК ИсточникДанных,
	|	ЛОЖЬ КАК РаспределятьОбщуюСумму,
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Ссылка.Дата КАК Дата,
	|	ТаблицаДокумента.Ссылка.Организация КАК Организация,
	|	ТаблицаДокумента.Ссылка.ВалютаВзаиморасчетов КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК ВалютаВзаиморасчетов,
	|	НЕОПРЕДЕЛЕНО КАК ПериодБазыНДС,
	|	ТаблицаДокумента.Ссылка.Дата КАК ДатаКурса,
	|
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ТаблицаДокумента.Сумма КАК СуммаБезНДС,
	|	НЕОПРЕДЕЛЕНО КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаНДСВзаиморасчетов,
	|	0 КАК СуммаБезНДСРегл,
	|	0 КАК СуммаБезНДСУпр,
	|
	|	ЛОЖЬ КАК ОтражаетсяВРасчетах,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	ЛОЖЬ КАК ПересчитыватьПоДаннымРасчетов
	|ИЗ
	|	Документ.КорректировкаЗадолженностиПоФинансовымИнструментам.Задолженность КАК ТаблицаДокумента
	|
	|ГДЕ
	|	ТаблицаДокумента.Ссылка В (&Ссылка)
	|";
	
	РегистрыСведений.СуммыДокументовВВалютахУчета.СформироватьПоДаннымДокумента(
		Запрос, ТекстыЗапроса, Регистры, ТекстЗапросаДанных);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("РаспределениеРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
#Область СписаниеКредиторскойЗадолженности
	СписаниеКредиторскойЗадолженности = "
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ВЫБОР
	|		КОГДА &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &СтатьяАктивовПассивов
	|		ИНАЧЕ &СтатьяДоходов
	|	КОНЕЦ КАК СтатьяДоходовРасходов,
	|	&АналитикаДоходов КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	&АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	Задолженность.СуммаУпр КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	Задолженность.СуммаРегл КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	Задолженность.Сумма КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Задолженность.Сумма КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	&Договор КАК ИсточникГФУРасчетов,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности)
	|";
#КонецОбласти

#Область СписаниеДебиторскойЗадолженности
	СписаниеДебиторскойЗадолженности =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	
	|	&Партнер КАК Партнер,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК Договор,
	|	
	|	&НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	ВЫБОР
	|		КОГДА &СтатьяАктивовПассивов <> НЕОПРЕДЕЛЕНО
	|			ТОГДА &СтатьяАктивовПассивов
	|		ИНАЧЕ &СтатьяРасходов
	|	КОНЕЦ КАК СтатьяДоходовРасходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	&АналитикаРасходов КАК АналитикаРасходов,
	|	&АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	
	|	Задолженность.СуммаУпр - ЕСТЬNULL(ОстаткиРезервов.СуммаУпр, 0) КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	Задолженность.СуммаРегл - ЕСТЬNULL(ОстаткиРезервов.СуммаРегл, 0) КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	Задолженность.Сумма - ЕСТЬNULL(ОстаткиРезервов.Сумма, 0) КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	Задолженность.Сумма- ЕСТЬNULL(ОстаткиРезервов.Сумма, 0) КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	&Договор КАК ИсточникГФУРасчетов,
	|	Задолженность.ИдентификаторСтроки КАК ИдентификаторФинЗаписи
	|ИЗ
	|	ТаблицаЗадолженность КАК Задолженность
	|	ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|	ПО Задолженность.ИдентификаторСтроки = ОстаткиРезервов.ИдентификаторСтроки
	|ГДЕ
	|	&ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам))";
#КонецОбласти
	
	ТекстЗапроса = СписаниеКредиторскойЗадолженности
		+ " ОБЪЕДИНИТЬ ВСЕ " + СписаниеДебиторскойЗадолженности;
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентКонтрагент";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("РаспределениеРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	
	|	НЕОПРЕДЕЛЕНО КАК Партнер,
	|	&Организация КАК Контрагент,
	|	&Договор КАК Договор,
	|	
	|	&НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	&Партнер КАК КорПартнер,
	|	&Контрагент КАК КорКонтрагент,
	|	&Договор КАК КорДоговор,
	|	
	|	ОстаткиРезервов.СуммаУпр КАК Сумма,
	|	0 КАК СуммаБезНДС,
	|	ОстаткиРезервов.СуммаРегл КАК СуммаРегл,
	|	0 КАК СуммаРеглБезНДС,
	|	
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	ОстаткиРезервов.Сумма КАК СуммаВВалюте,
	|	0 КАК СуммаБезНДСВВалюте,
	|	
	|	&ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОстаткиРезервов.Сумма КАК СуммаВВалютеВзаиморасчетов,
	|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|
	|	&ВалютаВзаиморасчетов КАК КорВалютаВзаиморасчетов,
	|	ОстаткиРезервов.Сумма КАК КорСуммаВВалютеВзаиморасчетов,
	|	0 КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
	|	
	|	&Договор КАК ИсточникГФУРасчетов,
	|	&Договор КАК КорИсточникГФУРасчетов
	|ИЗ
	|	ОстаткиРезервовПоСомнительнымДолгам КАК ОстаткиРезервов
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РеестрДокументов";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&Ссылка                                 КАК Ссылка,
	|	&Период                                 КАК ДатаДокументаИБ,
	|	&Номер                                  КАК НомерДокументаИБ,
	|	&ИдентификаторМетаданных                КАК ТипСсылки,
	|	&Организация                            КАК Организация,
	|	&ХозяйственнаяОперация                  КАК ХозяйственнаяОперация,
	|	&Подразделение                          КАК Подразделение,
	|	&Контрагент                             КАК Контрагент,
	|	&Договор                                КАК Договор,
	|	&Ответственный                          КАК Ответственный,
	|	&Автор                                  КАК Автор,
	|	&Комментарий                            КАК Комментарий,
	|	&Проведен                               КАК Проведен,
	|	&ПометкаУдаления                        КАК ПометкаУдаления,
	|	ЛОЖЬ                                    КАК ДополнительнаяЗапись,
	|	&Период                                 КАК ДатаПервичногоДокумента,
	|	&НомерНаПечать                          КАК НомерПервичногоДокумента,
	|	&СуммаДокумента                         КАК Сумма,
	|	&ВалютаВзаиморасчетов                   КАК Валюта,
	|	&Исправление                            КАК СторноИсправление,
	|	&СторнируемыйДокумент                   КАК СторнируемыйДокумент,
	|	&ИсправляемыйДокумент                   КАК ИсправляемыйДокумент,
	|	&Период                                 КАК ДатаОтраженияВУчете,
	|	НЕОПРЕДЕЛЕНО                            КАК Приоритет
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса)
	
	СформироватьСуммыДокументаВВалютахУчета(Запрос, ТекстыЗапроса);
	
	// Получаем аналитику учета по партнерам для отбора записей регистра резервов по сомнительным долгам.
	// Так же используем эту аналитику для блокировки данных регистра накопления.
	
	ПараметрыАналитики = Новый Структура;
	ПараметрыАналитики.Вставить("Партнер", Запрос.Параметры.Партнер);
	ПараметрыАналитики.Вставить("Организация", Запрос.Параметры.Организация);
	ПараметрыАналитики.Вставить("Контрагент", Запрос.Параметры.Контрагент);
	ПараметрыАналитики.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПараметрыАналитики.Вставить("НаправлениеДеятельности",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Запрос.Параметры.Договор, "НаправлениеДеятельности"));
	
	АналитикаУчета = РегистрыСведений.АналитикаУчетаПоПартнерам.ЗначениеКлючаАналитики(ПараметрыАналитики);
	
	ВспомогательныйЗапрос = Новый Запрос;
	ВспомогательныйЗапрос.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	Для Каждого Параметр Из Запрос.Параметры Цикл
		ВспомогательныйЗапрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	ВспомогательныйЗапрос.УстановитьПараметр("АналитикаУчета", АналитикаУчета);
	
	ВспомогательныйЗапрос.Текст =
	"ВЫБРАТЬ
	|	Задолженность.НомерСтроки,
	|	&АналитикаУчета КАК АналитикаУчетаПоПартнерам,
	|	&Договор КАК ОбъектРасчетов,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	Задолженность.ТипСуммы,
	|	Задолженность.ИдентификаторСтроки,
	|	Задолженность.Сумма КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл, 0) КАК СуммаРегл,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр, 0) КАК СуммаУпр
	|ИЗ
	|	Документ.КорректировкаЗадолженностиПоФинансовымИнструментам.Задолженность КАК Задолженность
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Задолженность.Ссылка = Суммы.Ссылка
	|		И Задолженность.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|ГДЕ
	|	Задолженность.Ссылка = &Ссылка
	|	И &ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам)";
	
	ТаблицаЗадолженность = ВспомогательныйЗапрос.Выполнить().Выгрузить();
	
	// Копируем структуру таблицы остатков резервов и добавляем колонку идентификатор строки.
	
	ТаблицаРаспределения = ТаблицаЗадолженность.СкопироватьКолонки();
	ТаблицаРаспределения.Колонки.Добавить("ПостояннаяРазница", Новый ОписаниеТипов("Число"));
	ТаблицаРаспределения.Колонки.Добавить("ВременнаяРазница", Новый ОписаниеТипов("Число"));
	
	Запрос.УстановитьПараметр("РаспределениеРезервов", ТаблицаРаспределения);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.АналитикаУчетаПоПартнерам,
	|	Т.ОбъектРасчетов,
	|	Т.Валюта,
	|	Т.ТипСуммы,
	|	Т.ИдентификаторСтроки,
	|	Т.Сумма,
	|	Т.СуммаУпр,
	|	Т.СуммаРегл,
	|	Т.ВременнаяРазница,
	|	Т.ПостояннаяРазница
	|ПОМЕСТИТЬ РаспределениеРезервовПоСомнительнымДолгам
	|ИЗ
	|	&РаспределениеРезервов КАК Т";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "РаспределениеРезервовПоСомнительнымДолгам");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Т.ИдентификаторСтроки,
	|	СУММА(Т.Сумма) КАК Сумма,
	|	СУММА(Т.СуммаУпр) КАК СуммаУпр,
	|	СУММА(Т.СуммаРегл) КАК СуммаРегл,
	|	СУММА(Т.ВременнаяРазница) КАК ВременнаяРазница,
	|	СУММА(Т.ПостояннаяРазница) КАК ПостояннаяРазница
	|ПОМЕСТИТЬ ОстаткиРезервовПоСомнительнымДолгам
	|ИЗ
	|	РаспределениеРезервовПоСомнительнымДолгам КАК Т
	|СГРУППИРОВАТЬ ПО
	|	Т.ИдентификаторСтроки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, "ОстаткиРезервовПоСомнительнымДолгам");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРезервыПоСомнительнымДолгам(Запрос, ТекстыЗапроса, Регистры)

	ИмяРегистра = "РезервыПоСомнительнымДолгам";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ТаблицаЗадолженность", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаЗадолженность(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("РаспределениеРезервовПоСомнительнымДолгам", ТекстыЗапроса) Тогда
		ТекстЗапросаВтОстаткиРезервовПоСомнительнымДолгам(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	
	|	РаспределениеРезервов.АналитикаУчетаПоПартнерам,
	|	РаспределениеРезервов.ОбъектРасчетов,
	|	&ВалютаВзаиморасчетов КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	РаспределениеРезервов.ТипСуммы КАК ТипСуммы,
	|	
	|	РаспределениеРезервов.Сумма КАК Сумма,
	|	РаспределениеРезервов.СуммаУпр КАК СуммаУпр,
	|	РаспределениеРезервов.СуммаРегл КАК СуммаРегл,
	|	РаспределениеРезервов.ПостояннаяРазница КАК ПостояннаяРазница,
	|	РаспределениеРезервов.ВременнаяРазница КАК ВременнаяРазница,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам) КАК ХозяйственнаяОперация,
	|	РаспределениеРезервов.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	РаспределениеРезервовПоСомнительнымДолгам КАК РаспределениеРезервов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.20.26";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Порядок = Перечисления.ПорядокОбработчиковОбновления.Обычный;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("cbe89add-16f9-4895-800d-e717e01c3768");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	СписокОписаний = Новый Массив;
	СписокОписаний.Добавить(НСтр("ru = 'Обновление документов ""Корректировка задолженности по финансовым инструментам"":'"));
	СписокОписаний.Добавить(НСтр("ru = '- замена аналитики с перечисления ""Типы налогов"" на справочник ""Виды налогов и взносов"".';"));
	
	Обработчик.Комментарий = СтрСоединить(СписокОписаний, Символы.ПС);
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = ПустаяСсылка().Метаданные().ПолноеИмя();
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КорректировкаЗадолженностиПоФинансовымИнструментам.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КорректировкаЗадолженностиПоФинансовымИнструментам КАК КорректировкаЗадолженностиПоФинансовымИнструментам
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(КорректировкаЗадолженностиПоФинансовымИнструментам.АналитикаАктивовПассивов) = ТИП(Перечисление.УдалитьТипыНалогов)";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
КонецПроцедуры

// Обработчик обновления
// 
// Параметры:
// 	Параметры - См. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки 
//
Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта        = ПустаяСсылка().Метаданные().ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект(); // ДокументОбъект

			Если ДокументОбъект <> Неопределено Тогда
				Перечисления.УдалитьТипыНалогов.ЗаполнитьРеквизитТипНалога(ДокументОбъект, "АналитикаАктивовПассивов");
			КонецЕсли;
			
			Если ДокументОбъект <> Неопределено И ДокументОбъект.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Документ.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры
#КонецОбласти

// Определяет состав документов и хозяйственных операций, доступных для отображения в рабочем месте.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - таблица значений с колонками:
//     * ХозяйственнаяОперация					 - ПеречислениеСсылка.ХозяйственныеОперации
//     * ИдентификаторОбъектаМетаданных			 - СправочникСсылка.ИдентификаторыОбъектовМетаданных
//     * Отбор									 - Булево
//     * ДокументПредставление					 - Строка
//     * ПолноеИмяДокумента						 - Строка
//     * Накладная								 - Булево
//     * ИспользуетсяРаспоряжение				 - Булево
//     * ИспользуютсяСтатусы					 - Булево
//     * ПоНесколькимЗаказам					 - Булево
//     * ПриходныйОрдерНевозможен				 - Булево
//     * РазделятьДокументыПоПодразделению		 - Булево
//     * ПолноеИмяНакладной						 - Строка
//     * КлючНазначенияИспользования			 - Строка
//     * ПравоДоступаДобавление					 - Булево
//     * ПравоДоступаИзменение					 - Булево
//     * ЗаголовокРабочегоМеста					 - Строка
//     * ИменаЭлементовСУправляемойВидимостью	 - Строка
//     * ИменаЭлементовРабочегоМеста			 - Строка
//     * ИменаОтображаемыхЭлементов				 - Строка
//     * МенеджерРасчетаГиперссылкиКОформлению	 - Строка.
//
//
Функция ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы) Экспорт
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеДебиторскойЗадолженности;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "Корректировка задолженности по финансовым инструментам";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Корректировка задолженности по финансовым инструментам'");
	Строка.Порядок                      = 1;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьРеглУчет") Тогда
		Строка = ХозяйственныеОперацииИДокументы.Добавить();
		Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеБезнадежнойЗадолженностиЗаСчетРезервовПоСомнительнымДолгам;
		Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя();
		Строка.КлючНазначенияИспользования 	= "Корректировка задолженности по финансовым инструментам";
		Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Корректировка задолженности по финансовым инструментам'");
		Строка.Порядок                      = 2;
		Строка.ДобавитьКнопкуСоздать        = Истина;
	КонецЕсли;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеКредиторскойЗадолженности;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.КорректировкаЗадолженностиПоФинансовымИнструментам.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "Корректировка задолженности по финансовым инструментам";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'Корректировка задолженности по финансовым инструментам'");
	Строка.Порядок                      = 3;
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	ТаблицаЗначенийДоступно = ОбщегоНазначенияУТ.ДоступныеХозяйственныеОперацииИДокументы(
								ХозяйственныеОперацииИДокументы, 
								Новый СписокЗначений, 
								Новый СписокЗначений, 
								"");
	
	Возврат ТаблицаЗначенийДоступно;
	
КонецФункции

#КонецОбласти

#КонецЕсли
