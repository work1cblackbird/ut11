#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Статусы

// Возвращает конечные статусы.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Конечные статусы.
//
Функция КонечныеСтатусы(ТребуетсяПовторноеОформление = Истина) Экспорт
	
	Статусы = Новый Массив;
	
	Если Не ТребуетсяПовторноеОформление Тогда
		Статусы.Добавить(Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.КодыМаркировкиВыведеныИзОборота);
	КонецЕсли;
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статусы ошибок.
//
// Возвращаемое значение:
//  Массив Из ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Статусы ошибок.
//
Функция СтатусыОшибок() Экспорт
	
	Статусы = Новый Массив;
	
	Статусы.Добавить(Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.ОшибкаПередачи);
	
	Возврат Статусы;
	
КонецФункции

// Возвращает статус по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.Черновик;
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие по-умолчанию.
Функция ДальнейшееДействиеПоУмолчанию(СтруктураПараметров=Неопределено) Экспорт
	
	Возврат Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные;
	
КонецФункции

#КонецОбласти

#Область ДействияПриОбменеИСМП

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ Тогда
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.КПередаче);
		Возврат ПараметрыОбновления;
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование Тогда
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусыКПередаче(
			ДокументСсылка,
			Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.АннулированиеВыводаИзОборотаКПередаче);
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Если СтатусОбработки = Неопределено Тогда
		СтатусОбработки = Перечисления.СтатусыОбработкиСообщенийИСМП.ЗаявкаПринята;
	КонецЕсли;
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВПроцессеРеализацииПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки
		Или Операция = Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения
		Или Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.Обрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.ОшибкаПередачи;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
		Возврат ПараметрыОбновления;
	
	ИначеЕсли Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование Тогда
		
		СтатусыБазовыйПроцесс = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		СтатусыБазовыйПроцесс.Принят = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.АннулированиеВыводаИзОборотаОбрабатывается;
		СтатусыБазовыйПроцесс.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Обрабатывается = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.АннулированиеВыводаИзОборотаОбрабатывается;
		СтатусыБазовыйПроцесс.ОбрабатываетсяДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
		
		СтатусыБазовыйПроцесс.Ошибка = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.АннулированиеВыводаИзОборотаОшибка;
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеВыводИзОборота);
		СтатусыБазовыйПроцесс.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(ДокументСсылка, СтатусОбработки, СтатусыБазовыйПроцесс);
	
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Структура - Структура со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция квитанции.
//
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Перечисления.ВидыОперацийИСМП.ПолучениеРезультатаОбработкиДокумента Тогда
		
		ЭтоОбъемноСортовойУчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "ОбъемноСортовойУчет");
		
		Статусы = РегистрыСведений.СтатусыДокументовИСМП.СтруктураСтатусы();
		
		Если ДополнительныеПараметры.ОперацияКвитанции = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование Тогда
			Статусы.Ошибка = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.АннулированиеВыводаИзОборотаОшибка;
			Статусы.Принят = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.Аннулирован;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеВыводИзОборота);
		Иначе
			Статусы.Ошибка = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.ОшибкаПередачи;
			Статусы.Принят = Перечисления.СтатусыОбработкиВыводаИзОборотаИСМП.КодыМаркировкиВыведеныИзОборота;
			Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
			Если ЭтоОбъемноСортовойУчет Тогда
				Статусы.ПринятДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеВыводИзОборота);
			КонецЕсли;
		КонецЕсли;
		Статусы.ОшибкаДействия.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
		
		ПараметрыОбновления = РегистрыСведений.СтатусыДокументовИСМП.РассчитатьСтатусы(
			ДокументСсылка,
			ДополнительныеПараметры.СтатусОбработки,
			Статусы);
		Возврат ПараметрыОбновления;
		
	Иначе
		ВызватьИсключение ОбщегоНазначенияИС.ТекстИсключенияОбработкиСтатуса(ДокументСсылка, Операция);
	КонецЕсли;
	
КонецФункции

// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПодготовкиКПередачеДанных(
		ДокументСсылка, Операция, ДополнительныеПараметры);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция ИС МП
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПараметрыОбновления = СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Обновить статус после получения данных из ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыОперацийИСМП - Операция обмена с ИС МП.
//  ДополнительныеПараметры - Неопределено, Структура - со свойствами:
//   * СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийИСМП - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыОперацийИСМП - Операция, на которую получена квитанция.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт

	ПараметрыОбновления = СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);

	Если ПараметрыОбновления = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);

	Возврат НовыйСтатусПослеОбновления;

КонецФункции

// Изменяет и возвращает статус документа ИС МП.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ ИС МП.
//  ПараметрыОбновления - Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие 3.
//  ДополнительныеПараметры - Структура - Дополнительные параметры.
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - новый статус документа ИС МП.
Функция ОбновитьСтатус(ДокументСсылка, ПараметрыОбновления, ДополнительныеПараметры) Экспорт
	
	НовыйСтатусПослеОбновления = РегистрыСведений.СтатусыДокументовИСМП.ОбновитьСтатус(
		ДокументСсылка,
		ПараметрыОбновления, ДополнительныеПараметры);
	
	Возврат НовыйСтатусПослеОбновления;
	
КонецФункции

// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ, для которого требуется обновить статус.
//  ЛинейныйСписок - Булево - Не используется.
//
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка, ЛинейныйСписок = Ложь) Экспорт
	
	Таблица = ПротоколОбменаИС.ПустаяТаблицаПоследовательностьОпераций();
	
	Исходящий = Перечисления.ТипыЗапросовИС.Исходящий;
	
	ОперацияВПоследовательности = ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 1,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборота);
	ОперацияВПоследовательности.АбстрактнаяОперация = Истина;
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 111,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРозничнаяПродажа);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 112,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 113,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортЗаПределыСтранЕАЭС);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 114,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаВозвратФизическомуЛицу);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 115,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтратаПовреждениеТовара);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 116,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУничтожениеТовара);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 117,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКонфискацияТовара);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 118,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛиквидацияПредприятия);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 119,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРекламации);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 121,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругиеПричины);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 122,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаТестированиеПродукта);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 123,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаОтзывСРынка);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 124,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляСобственныхНуждПредприятия);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 125,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 126,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКредитныйДоговор);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 127,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияКонфискованныхТоваров);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 128,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияПоДоговоруРассрочки);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 129,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.УдалитьВыводИзОборотаПродажаПоОбразцамДистанционнаяПродажа);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 131,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБрак);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 132,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИстечениеСрокаГодности);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 133,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЛабораторныеОбразцы);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 134,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 135,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляПроизводственныхЦелей);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 136,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 137,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 138,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаЧерезВендинговыйАппарат);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 139,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаУтилизацияТовара);
		
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 140,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаФасовка);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 141,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаРеализацияНезарегистрированномуУчастнику);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 142,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоОбразцам);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 143,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДистанционнаяПродажа);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 144,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляМедицинскогоПрименения);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 145,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаКорректировкаОстатковОСУ);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 146,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаИспользованиеДляВетеринарногоПрименения);
	
	ПротоколОбменаИС.ДобавитьОперациюВПоследовательность(Таблица, 21,
		Исходящий,
		Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование);
	
	Возврат Таблица;
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиВыводаИзОборотаИСМП - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияИСМП.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ИнтеграцияИСМППереопределяемый.ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	//Получение конечного статуса требующего повторного оформления
	Если КонечныеСтатусы().Найти(НовыйСтатус)<>Неопределено
		И КонечныеСтатусы().Найти(ПредыдущийСтатус)=Неопределено Тогда
		РасчетСтатусовОформленияИСМП.РассчитатьСтатусыОформленияДокументов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Сообщения

// Сообщение к передаче JSON
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ Маркировка товаров ИС МП
//  ДальнейшееДействие - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - Дальнейшее действие
//  ДополнительныеПараметры - Неопределено, Структура - дополнительные параметры обновления статуса
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
//
Функция СообщениеКПередачеJSON(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные Тогда
		
		Возврат ВыводИзОборотаJSON(ДокументСсылка, ДополнительныеПараметры);
	
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.АннулируйтеВыводИзОборота Тогда
		
		Возврат АннулироватьВыводИзОборотаJSON(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПанельОбменИСМП

// Возвращает массив дальнейших действий с документом, требующих участия пользователя
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеДействия() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ВыполнитеОбмен);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОтменитеОперацию);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ПередайтеДанные);
	
	Возврат МассивДействий;
	
КонецФункции

// Возвращает массив дальнейших действий с документом, требующих ожидания пользователем
// 
// Возвращаемое значение:
//  Массив из ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюИСМП - дальшейшие действия
//
Функция ВсеТребующиеОжидания() Экспорт
	
	МассивДействий = Новый Массив;
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеПередачуДанныхРегламентнымЗаданием);
	МассивДействий.Добавить(Перечисления.ДальнейшиеДействияПоВзаимодействиюИСМП.ОжидайтеЗавершенияОбработкиДанныхИСМП);
	
	Возврат МассивДействий;
	
КонецФункции

#КонецОбласти

#Область Серии

// Имена реквизитов, от значений которых зависят параметры указания серий
//
// Возвращаемое значение:
//  Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	
	Возврат ИнтеграцияИС.ИменаРеквизитовДляЗаполненияПараметровУказанияСерий(Метаданные.Документы.ВыводИзОборотаИСМП);
	
КонецФункции

// Возвращает параметры указания серий для товаров, указанных в документе.
//
// Параметры:
//  Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий.
// 
// Возвращаемое значение:
//  Произвольный - параметры указания серий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	
	Возврат ИнтеграцияИС.ПараметрыУказанияСерий(Метаданные.Документы.ВыводИзОборотаИСМП, Объект);
	
КонецФункции

// Возвращает текст запроса для расчета статусов указания серий
// Параметры:
//   ПараметрыУказанияСерий - Произвольный - параметры указания серий
// Возвращаемое значение:
//  Строка - текст запроса
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ИнтеграцияИС.ТекстЗапросаЗаполненияСтатусовУказанияСерий(Метаданные.Документы.ВыводИзОборотаИСМП, ПараметрыУказанияСерий);

КонецФункции

#КонецОбласти

#Область ОбработкаКодовМаркировки

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая
		Или Форма.Объект.ОбъемноСортовойУчет И ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Групповая Тогда
		Результат = ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды);
	ИначеЕсли ОбщегоНазначенияИСПовтИсп.ЭтоПродукцияИСМП(ДанныеШтрихкода.ВидПродукции, Истина) Тогда
		Результат = ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды)
	
	РезультатОбработки = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(ПараметрыСканирования, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = ПараметрыЗаполнения();
	
	ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	РезультатОбработки.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	РезультатОбработки.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат РезультатОбработки;
	
КонецФункции

Процедура ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(Форма, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено)
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар
			И ЗначениеЗаполнено(СтрокаДерева.ШтрихкодУпаковки) Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьДанныеОбъектаФормыПоДеревуУпаковок(
			Форма, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ПараметрыЗаполнения.РодительскийШтрихкод = УпаковкаВерхнегоУровня;
			ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаПотребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	ИсточникДанных = Форма.Объект;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		
		ПараметрыЗаполнения  = ПараметрыЗаполнения();
		РезультатОбработки   = ШтрихкодированиеОбщегоНазначенияИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
		
	Иначе
		
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод;
		
	КонецЕсли;
	
	ОбработкаБезМаркировки = ТипЗнч(ДанныеШтрихкода) = Тип("Структура")
		И ДанныеШтрихкода.Свойство("ОбработатьБезМаркировки")
		И ДанныеШтрихкода.ОбработатьБезМаркировки
		Или ИсточникДанных.ОбъемноСортовойУчет;
	
	СпецификаОбработки = "";
	Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
		СпецификаОбработки = СпецификаОбработки + ",КоличествоКодов";
	КонецЕсли;
	ИспользоватьGTIN = Ложь;
	Если ИсточникДанных.ОбъемноСортовойУчет Тогда
		Если ДанныеШтрихкода.ЭтоШтрихкодНоменклатуры
			И (Не МенеджерОборудованияКлиентСервер.ПроверитьКорректностьGTIN(ДанныеШтрихкода.GTIN)
			Или РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоВнутреннийШтрихкод(ДанныеШтрихкода.GTIN)
			Или РазборКодаМаркировкиИССлужебныйКлиентСервер.ЭтоШтрихкодВводаОстатков(ДанныеШтрихкода.GTIN)) Тогда
			ИспользоватьGTIN = Ложь;
		Иначе
			ИспользоватьGTIN = Истина;
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьGTIN Тогда
		СпецификаОбработки = СпецификаОбработки + ",GTIN";
	КонецЕсли;
	ОбновляемаяСтрока = ПроверкаИПодборПродукцииИС.ДанныеШтрихкодаДляДобавленияВКеш(ДанныеШтрихкода, СпецификаОбработки);
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		ОбновляемаяСтрока.ШтрихкодУпаковки = РодительскийШтрихкод;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИС.ПоляПоискаМаркируемойПродукции(, ИспользоватьGTIN);
	ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ДанныеШтрихкода);
	
	НайденныеСтрокиТовары = ИсточникДанных.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		
		СтрокаТовары = НайденныеСтрокиТовары[0];
		
		// Поле Количество
		КоличествоМаркируемыхЕдиниц = ОбновляемаяСтрока.Количество;
		
		ВсегоПоПараметрамПоиска = 0;
		Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
			ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.Количество;
		КонецЦикла;
		
		ВсегоВКеше = 0;
		Если Не ОбработкаБезМаркировки Тогда
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока);
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемыхЕдиниц = Макс(0, КоличествоМаркируемыхЕдиниц + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТовары.Количество         = СтрокаТовары.Количество + КоличествоМаркируемыхЕдиниц;
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок + КоличествоМаркируемыхЕдиниц;
		
		Если КоличествоМаркируемыхЕдиниц > 0 Тогда
			ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки.Найти(СтрокаТовары);
			Если ДобавленныеСтроки = Неопределено Тогда
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТовары);
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеШтрихкода.ПроизвольнаяЕдиницаУчета Тогда
			// Поле Количество потребительских кодов маркировки
			КоличествоМаркируемойПродукции = ОбновляемаяСтрока.КоличествоПотребительскихУпаковок;
			
			ВсегоПоПараметрамПоиска = 0;
			Для Каждого ПодходящаяСтрока Из НайденныеСтрокиТовары Цикл
				ВсегоПоПараметрамПоиска = ВсегоПоПараметрамПоиска + ПодходящаяСтрока.КоличествоПотребительскихУпаковок;
			КонецЦикла;
			
			ВсегоВКеше = ПроверкаИПодборПродукцииИС.КоличествоПоДаннымКеша(Форма, ОбновляемаяСтрока, "КоличествоПотребительскихУпаковок");
			
			Если ВсегоВКеше < ВсегоПоПараметрамПоиска Тогда
				КоличествоМаркируемойПродукции = Макс(0, КоличествоМаркируемойПродукции + ВсегоВКеше - ВсегоПоПараметрамПоиска);
			КонецЕсли;
			
			Если КоличествоМаркируемойПродукции > 0 Тогда
				
				СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + КоличествоМаркируемойПродукции;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаТовары = ИсточникДанных.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТовары, ОбновляемаяСтрока);
		СтрокаТовары.КоличествоУпаковок = СтрокаТовары.Количество;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТовары);
		
	КонецЕсли;
		
	Если Не ОбработкаБезМаркировки Тогда
		
		ПроверкаИПодборПродукцииИС.ДополнитьКешИТаблицуШтрихкодовУпаковок(Форма, ОбновляемаяСтрока, ПараметрыЗаполнения.ДобавленныеШтрихкоды);
		
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ПараметрыЗаполнения()
	
	Результат = Новый Структура;
	Результат.Вставить("ИзмененныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеСтроки", Новый Массив);
	Результат.Вставить("ДобавленныеШтрихкоды", Новый Массив);
	Результат.Вставить("РодительскийШтрихкод");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЗавершениеПроверкиИПодбораМаркируемойПродукции

// Отражает результаты проверки и подбора в документе, из которого была вызвана соответствующая форма.
//
// Параметры:
// 	ПараметрыОкончанияПроверки - См. Обработки.ПроверкаИПодборПродукцииИСМП.ЗафиксироватьРезультатПроверкиИПодбора
Процедура ОтразитьРезультатыПроверкиИПодбора(ПараметрыОкончанияПроверки) Экспорт
	
	ДокументОбъект = ПараметрыОкончанияПроверки.ПроверяемыйДокумент.ПолучитьОбъект();
	
	МассивОбработанныхСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции Цикл
		
		Если СтрокаТаблицы.КоличествоПодобрано = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТаблицы.Номенклатура);
		ПараметрыОтбора.Вставить("Характеристика", СтрокаТаблицы.Характеристика);
		ПараметрыОтбора.Вставить("Серия",          СтрокаТаблицы.Серия);
		
		НайденныеСтроки = ДокументОбъект.Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТовары, СтрокаТаблицы);
		Иначе
			СтрокаТовары = НайденныеСтроки[0];
		КонецЕсли;
		
		Если МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			СтрокаТовары.Количество = СтрокаТаблицы.КоличествоПодобрано;
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТаблицы.КоличествоПотребительскихУпаковок;
			МассивОбработанныхСтрок.Добавить(СтрокаТовары);
		Иначе
			СтрокаТовары.Количество = СтрокаТовары.Количество + СтрокаТаблицы.КоличествоПодобрано;
			СтрокаТовары.КоличествоПотребительскихУпаковок = СтрокаТовары.КоличествоПотребительскихУпаковок + СтрокаТаблицы.КоличествоПотребительскихУпаковок;
		КонецЕсли;
		
		ОбработатьСтрокуТабличнойЧасти(СтрокаТовары, ДокументОбъект);
		
	КонецЦикла;
	
	// Удаление лишних строк документа.
	ИндексТабЧастиТовары = ДокументОбъект.Товары.Количество() - 1;
	Пока ИндексТабЧастиТовары >= 0 Цикл
		
		СтрокаТовары = ДокументОбъект.Товары[ИндексТабЧастиТовары];
		Если СтрокаТовары.Количество = 0
		 Или МассивОбработанныхСтрок.Найти(СтрокаТовары) = Неопределено Тогда
			
			ДокументОбъект.Товары.Удалить(СтрокаТовары);
			
		КонецЕсли;
		
		ИндексТабЧастиТовары = ИндексТабЧастиТовары - 1;
	КонецЦикла;
	
	ДокументОбъект.ШтрихкодыУпаковок.Загрузить(ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня);
	
	Если ДокументОбъект.Проведен Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
		
	Иначе
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись)
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, ДокументОбъект)

	ПараметрыУказанияСерий = ПараметрыУказанияСерий(ДокументОбъект);
	ПустойСклад = ОбщегоНазначенияИС.ПустоеЗначениеОпределяемогоТипа("Склад");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", Новый Структура("Склад, ПараметрыУказанияСерий", ПустойСклад, ПараметрыУказанияСерий));
	
	ИнтеграцияИСПереопределяемый.ОбработатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураДействий);
	
КонецПроцедуры

Процедура ЗаполнитьМаркируемуюПродукциюДокумента(ТаблицаМаркируемойПродукции, ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВыводИзОборотаИСМПТовары.Номенклатура,
	|	ВыводИзОборотаИСМПТовары.Характеристика,
	|	ВыводИзОборотаИСМПТовары.Серия,
	|	ВыводИзОборотаИСМПТовары.Количество,
	|	ВыводИзОборотаИСМПТовары.КоличествоПотребительскихУпаковок
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ВыводИзОборотаИСМПТовары
	|ГДЕ
	|	ВыводИзОборотаИСМПТовары.Ссылка = &ДокументСсылка";
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ТаблицаМаркируемойПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииИСМППереопределяемый.ПриОпределенииМаркируемойПродукцииДокумента(
		ДокументСсылка,
		Неопределено,
		ТаблицаМаркируемойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//   Параметры - Структура - Вспомогательные параметры. См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры.
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	ИнтеграцияИСПереопределяемый.ДобавитьКомандуДвиженияДокумента(КомандыОтчетов);
	
	КомандаОтчет = Отчеты.АнализРасхожденийПриВыводеИзОборотаИСМП.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет<> Неопределено Тогда
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.Порядок = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// Параметры:
//   МассивОбъектов        - Массив из Произвольный         - ссылки на объекты, которые нужно распечатать
//   ПараметрыПечати       - Структура                      - дополнительные настройки печати
//   КоллекцияПечатныхФорм - ТаблицаЗначений                - сформированные табличные документы (выходной параметр)
//   ОбъектыПечати         - СписокЗначений из Произвольный - имя области, в которой был выведен объект (выходной параметр)
//   ПараметрыВывода       - Структура                      - дополнительные параметры сформированных табличных документов (выходной параметр)
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.ВерсионированиеОбъектов
// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти
// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	УправлениеДоступомИСПереопределяемый.ПриЗаполненииОграниченияДоступа(
		Метаданные.Документы.ВыводИзОборотаИСМП, Ограничение);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДоступныеGTIN(Объект) Экспорт
	
	ДопустимыеВидыУпаковок   = Новый Массив();
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Потребительская);
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Набор);
	ДопустимыеВидыУпаковок.Добавить(Перечисления.ВидыУпаковокИС.Неопределен);
	
	GTINДляВыбора = ИнтеграцияИСМП.ДанныеДляУточненияКоэффициентовУпаковок(Объект.Товары);
	
	Если GTINДляВыбора.Количество() > 0 Тогда
		
		Для Каждого СтрокаДокумента Из Объект.Товары Цикл
			
			Если ЗначениеЗаполнено(СтрокаДокумента.GTIN) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиТаблицы = GTINДляВыбора.НайтиСтроки(
				Новый Структура(
					"Номенклатура, Характеристика",
					СтрокаДокумента.Номенклатура,
					СтрокаДокумента.Характеристика));
			Для Каждого СтрокаДанных Из СтрокиТаблицы Цикл 
				Если ЗначениеЗаполнено(СтрокаДанных.ВидУпаковки)
						И ДопустимыеВидыУпаковок.Найти(СтрокаДанных.ВидУпаковки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДокумента.GTIN = СтрокаДанных.GTIN;
				Прервать;
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ВесВГраммахПоНоменклатуре(Количество, Номенклатура)
	
	ЕдиницаИзмеренияКилограмм = ИнтеграцияИСКлиентСерверПовтИсп.ЕдиницаИзмеренияКилограмм();
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияКилограмм) Тогда
		Коэффициент = ИнтеграцияИСВызовСервера.КоэффициентУпаковки(ЕдиницаИзмеренияКилограмм, Номенклатура);
	Иначе
		Коэффициент = 1;
	КонецЕсли;
	
	Если Коэффициент = 0 Тогда
		Возврат Окр(Количество * 1000);
	Иначе
		Возврат Окр(Количество / Коэффициент * 1000);
	КонецЕсли;
	
КонецФункции

#Область Сообщения

// Формирует абстрактное JSON сообщение для операции аннулирования отгрузки товаров
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ОтгрузкаТоваровИСМП - Документ Отгрузка Товаров ИС МП
//  ДополнительныеПараметры - Структура, Неопределено - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция АннулироватьВыводИзОборотаJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	Операция       = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование;
	СообщенияJSON  = Новый Массив;
	СписокЗапросов = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ                      КАК Ссылка,
	|	МАКСИМУМ(ЕСТЬNULL(ИСМППрисоединенныеФайлы.Версия, 0)) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И ИСМППрисоединенныеФайлы.Операция = &Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Ссылка               КАК Ссылка,
	|	ИСМППрисоединенныеФайлы.ВладелецФайла        КАК ВладелецФайла,
	|	ИСМППрисоединенныеФайлы.ИдентификаторЗапроса КАК ИдентификаторЗаявки
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ВладелецФайла     = &Ссылка
	|	И ИСМППрисоединенныеФайлы.ТипСообщения    = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|	И ИСМППрисоединенныеФайлы.Операция        <> &Операция
	|	И ИСМППрисоединенныеФайлы.СтатусОбработки = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиСообщенийИСМП.ЗаявкаВыполнена)
	|	И ИСМППрисоединенныеФайлы.Версия В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ИСМППрисоединенныеФайлыВерсия.Версия) КАК Версия
	|			ИЗ
	|				Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлыВерсия
	|			ГДЕ
	|				ИСМППрисоединенныеФайлыВерсия.ВладелецФайла  = &Ссылка
	|				И ИСМППрисоединенныеФайлыВерсия.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|				И ИСМППрисоединенныеФайлыВерсия.Операция     <> &Операция)
	|",
	"ПрисоединенныеФайлы");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	Шапка.Организация                        КАК Организация,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Представление(Шапка.Организация)         КАК ОрганизацияПредставление,
	|	Шапка.Ответственный                      КАК Ответственный,
	|	Представление(Шапка.Ответственный)       КАК ОтветственныйПредставление,
	|	Шапка.Операция                           КАК Операция,
	|	Шапка.ВидПродукции                       КАК ВидПродукции,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|	Шапка.Ссылка                             КАК Ссылка,
	|	Шапка.ИдентификаторЗаявки                КАК ИдентификаторЗаявки
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Операция);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка = РезультатЗапроса["Шапка"].Выбрать();
	
	Если Не Шапка.Следующий() Тогда
		
		СообщениеJSON             = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки         = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	//@skip-warning
	ПрисоединенныеФайлы = РезультатЗапроса["ПрисоединенныеФайлы"].Выгрузить();
	Если ПрисоединенныеФайлы.Количество() = 0 Тогда
		
		СообщениеJSON             = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Описание    = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки         = НСтр("ru = 'Нет данных для определения индентификатора исходной операции.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Операция, ДокументСсылка, НомерВерсии);
	
	ТелоЗапроса = Новый Структура();
	ТелоЗапроса.Вставить("version",            1);
	ТелоЗапроса.Вставить("inn",                РеквизитыОрганизации.ИНН);
	ТелоЗапроса.Вставить("lk_gtin_receipt_id", ПрисоединенныеФайлы[0].ИдентификаторЗаявки);
	
	ТекстСообщенияJSON = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	
	СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	СообщениеJSON.Операция                  = Операция;
	СообщениеJSON.Назначение                = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

// Формирует JSON сообщения для вывода КМ из оборота
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ВыводИзОборотаИСМП - Документ Маркировка товаров ИС МП.
//  ДополнительныеПараметры - Структура - Дополнительные параметры
//
// Возвращаемое значение:
//  Массив Из См. ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON - Сообщения к передаче
Функция ВыводИзОборотаJSON(ДокументСсылка, ДополнительныеПараметры = Неопределено)
	
	СообщенияJSON         = Новый Массив;
	СписокЗапросов        = Новый СписокЗначений;
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ИСМППрисоединенныеФайлы.Документ           КАК Ссылка,
	|	КОЛИЧЕСТВО(ИСМППрисоединенныеФайлы.Ссылка) КАК ПоследнийНомерВерсии
	|ПОМЕСТИТЬ Версии
	|ИЗ
	|	Справочник.ИСМППрисоединенныеФайлы КАК ИСМППрисоединенныеФайлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВыводИзОборотаИСМП КАК Шапка
	|		ПО Шапка.Ссылка   = &Ссылка
	|		 И Шапка.Операция = ИСМППрисоединенныеФайлы.Операция
	|		 И Шапка.Ссылка   = ИСМППрисоединенныеФайлы.Документ
	|		 И Шапка.Операция <> &ОперацияАннулирования
	|ГДЕ
	|	ИСМППрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
	|СГРУППИРОВАТЬ ПО
	|	ИСМППрисоединенныеФайлы.Документ
	|");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	Шапка.Номер                              КАК Номер,
	|	Шапка.Дата                               КАК Дата,
	|	ЕСТЬNULL(Версии.ПоследнийНомерВерсии, 0) КАК ПоследнийНомерВерсии,
	|	Шапка.ДокументОснование                  КАК ДокументОснование,
	|
	|	Шапка.Организация                КАК Организация,
	|	Представление(Шапка.Организация) КАК ОрганизацияПредставление,
	|
	|	Шапка.Ответственный                КАК Ответственный,
	|	Представление(Шапка.Ответственный) КАК ОтветственныйПредставление,
	|
	|	Шапка.Операция                        КАК Операция,
	|	Шапка.Контрагент                      КАК Контрагент,
	|	Шапка.ОписаниеПричины                 КАК ОписаниеПричины,
	|	Шапка.ВидПервичногоДокумента          КАК ВидПервичногоДокумента,
	|	Шапка.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	Шапка.НомерПервичногоДокумента        КАК НомерПервичногоДокумента,
	|	Шапка.ДатаПервичногоДокумента         КАК ДатаПервичногоДокумента,
	|	Шапка.ВидПродукции                    КАК ВидПродукции,
	|	Шапка.АдресПлощадки                   КАК АдресПлощадки,
	|	Шапка.АдресПлощадкиСтрокой            КАК АдресПлощадкиСтрокой,
	|	Шапка.ИдентификаторГосударственногоКонтракта КАК ИдентификаторГосударственногоКонтракта,
	|	Шапка.ОбъемноСортовойУчет             КАК ОбъемноСортовойУчет,
	|	Шапка.Ссылка                          КАК Ссылка,
	|
	|	ЕСТЬNULL(Шапка.СтранаНазначения.Код, """") КАК СтранаНазначенияКод
	|
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП КАК Шапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
	|		ПО Шапка.Ссылка = Версии.Ссылка
	|ГДЕ
	|	Шапка.Ссылка = &Ссылка",
	"Шапка");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	// Универсальные реквизиты
	|	Товары.Номенклатура       КАК Номенклатура,
	|	Товары.Характеристика     КАК Характеристика,
	|	Товары.Серия              КАК Серия,
	|	Товары.Упаковка           КАК Упаковка,
	|	Товары.Количество         КАК Количество,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.GTIN               КАК GTIN,
	|	Товары.КоличествоПотребительскихУпаковок КАК КоличествоПотребительскихУпаковок,
	|
	|	// Дополнительные реквизиты
	|	Товары.Цена      КАК Цена,
	|	Товары.Сумма     КАК Сумма,
	|	Товары.СуммаНДС  КАК СуммаНДС,
	|	Товары.СуммаСНДС КАК СуммаСНДС,
	|	Товары.СтавкаНДС КАК СтавкаНДС
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"Товары");
	
	СписокЗапросов.Добавить(
	"ВЫБРАТЬ
	|	ШтрихкодыУпаковок.ШтрихкодУпаковки КАК ШтрихкодУпаковки
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.ШтрихкодыУпаковок КАК ШтрихкодыУпаковок
	|ГДЕ
	|	ШтрихкодыУпаковок.Ссылка = &Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|",
	"ШтрихкодыУпаковок");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",                ДокументСсылка);
	Запрос.УстановитьПараметр("ОперацияАннулирования", Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПриОСУАннулирование);
	
	РезультатЗапроса = ОбщегоНазначенияИС.ВыполнитьПакетЗапросов(Запрос, СписокЗапросов);
	
	//@skip-warning
	Шапка             = РезультатЗапроса["Шапка"].Выбрать();
	//@skip-warning
	Товары            = РезультатЗапроса["Товары"].Выгрузить();
	Товары.Индексы.Добавить("Номенклатура,Характеристика,Серия");
	//@skip-warning
	ШтрихкодыУпаковок = РезультатЗапроса["ШтрихкодыУпаковок"].Выгрузить();
	
	ВесоваяНоменклатураПоGTIN = Новый Соответствие;
	
	Если Не Шапка.Следующий()
		Или Товары.Количество() = 0 Тогда
		
		СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
		СообщениеJSON.Организация = Шапка.Организация;
		СообщениеJSON.Документ    = ДокументСсылка;
		СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
			Шапка.Операция, ДокументСсылка);
		СообщениеJSON.ТекстОшибки = НСтр("ru = 'Нет данных для выгрузки.'");
		СообщениеJSON.ТребуетсяПодписание = Ложь;
		СообщенияJSON.Добавить(СообщениеJSON);
		
		Возврат СообщенияJSON;
		
	КонецЕсли;
	
	НомерВерсии = Шапка.ПоследнийНомерВерсии + 1;
	
	СообщениеJSON = ИнтеграцияИСМПСлужебный.СтруктураСообщенияJSON();
	СообщениеJSON.Организация       = Шапка.Организация;
	СообщениеJSON.Документ          = ДокументСсылка;
	СообщениеJSON.ДокументОснование = Шапка.ДокументОснование;
	
	СообщениеJSON.Описание = ИнтеграцияИСМПСлужебный.ОписаниеОперацииПередачиДанных(
		Шапка.Операция, ДокументСсылка, НомерВерсии);
	
	СообщениеJSON.Назначение          = Перечисления.НазначениеСообщенийИСМП.ИСМП;
	
	СообщениеJSON.ТипСообщения        = Перечисления.ТипыЗапросовИС.Исходящий;
	СообщениеJSON.Версия              = НомерВерсии;
	СообщениеJSON.ТребуетсяПодписание = Истина;
	
	СообщениеJSON.Операция                  = Шапка.Операция;
	СообщениеJSON.ВидПродукции              = Шапка.ВидПродукции;
	СообщениеJSON.СтанцияУправленияЗаказами = Неопределено;
	
	// Заполнение данных по маркируемым товарам
	ПараметрыСканирования = ШтрихкодированиеОбщегоНазначенияИС.ПараметрыСканирования(Шапка, Неопределено, Шапка.ВидПродукции);
	ОбщегоНазначенияИСМПКлиентСервер.УстановитьПараметрСканированияЗапрашиватьДанныеСервисаИСМП(ПараметрыСканирования, Ложь);
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ОбъемноСортовойУчет", Шапка.ОбъемноСортовойУчет);
	
	Если Шапка.ОбъемноСортовойУчет Тогда
		ОписаниеНоменклатуры = ОбщегоНазначенияИС.ОписаниеНоменклатуры(Товары.ВыгрузитьКолонку("Номенклатура"));
		Для Каждого СтрокаТовары Из Товары Цикл
			ТекущееОписание = ОписаниеНоменклатуры[СтрокаТовары.Номенклатура];
			Если ТекущееОписание <> Неопределено
				И ТекущееОписание.ВариантИспользованияЕдиницыХранения = Перечисления.ВариантыИспользованияЕдиницыХраненияИС.МернаяПродукцияТребуетУказанияЗначения Тогда
				ВесоваяНоменклатураПоGTIN.Вставить(СтрокаТовары.GTIN, СтрокаТовары.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		ДанныеПоТоварам = Товары;
	Иначе
		РезультатПоиска = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(
			ШтрихкодыУпаковок.ВыгрузитьКолонку("ШтрихкодУпаковки"),
			ПараметрыСканирования,, Истина);
		ДанныеПоТоварам = РезультатПоиска.МаркированныеТовары;
	КонецЕсли;
	
	ПараметрыНормализацииПрочее = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПараметрыНормализацииКодаМаркировки();
	ПараметрыНормализацииПрочее.ИмяСвойстваКодМаркировки = "Штрихкод";
	ПараметрыНормализацииПрочее.НачинаетсяСоСкобки       = Ложь;
	
	ПользовательскиеПараметрыРазбораКодаМаркировки = РазборКодаМаркировкиИССлужебныйКлиентСервер.ПользовательскиеПараметрыРазбораКодаМаркировки();
	ПользовательскиеПараметрыРазбораКодаМаркировки.ПроверятьАлфавитЭлементов = Ложь;
	
	РеквизитыОрганизации = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Организация);
	
	Если Не ЗначениеЗаполнено(РеквизитыОрганизации.ИНН) Тогда
		ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
			СообщениеJSON,
			СтрШаблон(
				НСтр("ru = 'Не заполнено поле ""ИНН"" для организации %1'"), Шапка.Организация));
	КонецЕсли;
	
	ПричинаВыводаИзОборота = ИнтерфейсИСМПСлужебный.ПричинаВыводаИзОборота(Шапка.Операция, Шапка.ВидПродукции);
	
	ТелоЗапроса = Новый Структура;
	ТелоЗапроса.Вставить("order_number",   Шапка.Номер);
	ТелоЗапроса.Вставить("order_date",     ИнтеграцияИС.ДатаUTC(Шапка.Дата));
	
	ТелоЗапроса.Вставить("inn",            РеквизитыОрганизации.ИНН);
	ТелоЗапроса.Вставить("action",         ПричинаВыводаИзОборота);
	
	ИспользованиеКонтрагента               = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеКонтрагентаПриВыводеИзОборота(Шапка.Операция,, Шапка.ОбъемноСортовойУчет);
	ИспользованиеКонтрагентаВсегда         = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеКонтрагентаПриВыводеИзОборота(Шапка.Операция, Истина, Шапка.ОбъемноСортовойУчет);
	ИспользованиеПервичногоДокумента       = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеПервичногоДокументаПриВыводеИзОборота(Шапка.Операция);
	ИспользованиеПервичногоДокументаВсегда = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеПервичногоДокументаПриВыводеИзОборота(Шапка.Операция, Истина);
	ИспользованиеАдреса                    = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеАдресаПриВыводеИзОборота(Шапка.Операция, Шапка.ВидПродукции,, Шапка.ОбъемноСортовойУчет);
	ИспользованиеАдресаВсегда              = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеАдресаПриВыводеИзОборота(Шапка.Операция, Шапка.ВидПродукции, Истина, Шапка.ОбъемноСортовойУчет);

	Если ИспользованиеПервичногоДокументаВсегда
		Или (ИспользованиеПервичногоДокумента
			И (ЗначениеЗаполнено(Шапка.НомерПервичногоДокумента) И ЗначениеЗаполнено(Шапка.ДатаПервичногоДокумента))) Тогда
		ТелоЗапроса.Вставить("action_date", ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
	Иначе
		ТелоЗапроса.Вставить("action_date", ИнтеграцияИС.ДатаUTC(Шапка.Дата));
	КонецЕсли;
	
	Если ИспользованиеАдресаВсегда
		Или ИспользованиеАдреса И ЗначениеЗаполнено(Шапка.АдресПлощадки) Тогда
		
		ИдентификаторАдреса = ИнтеграцияИСМП.ИдентификаторФИАСПоДаннымАдреса(Шапка.АдресПлощадки).Идентификатор;
		
		Если ЗначениеЗаполнено(ИдентификаторАдреса) Тогда
			ТелоЗапроса.Вставить("fias_id", ИдентификаторАдреса);
		Иначе
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				СтрШаблон(
					НСтр("ru = 'Не найден идентификатор ФИАС по адресу:
							   |%1'"), Шапка.АдресПлощадкиСтрокой));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыОрганизации.КПП)
		И ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеКПППриВыводеИзОборота(Шапка.Операция, Шапка.ВидПродукции) Тогда
		ТелоЗапроса.Вставить("kpp", РеквизитыОрганизации.КПП);
	КонецЕсли;
	
	Если ИспользованиеКонтрагента Тогда
		
		Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС Тогда
			
			Если ЗначениеЗаполнено(Шапка.Контрагент) Тогда
				ИдентификаторПолучателя = ИнтеграцияИСВызовСервера.НалоговыйНомерКонтрагента(Шапка.Контрагент);
				Если Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
					ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
						СообщениеJSON,
						СтрШаблон(
							НСтр("ru = 'Не заполнено поле ""Налоговый номер в стране регистрации"".
									   |Контрагент: %1'"), Шапка.Контрагент));
				КонецЕсли;
				ТелоЗапроса.Вставить("importer_id", ИдентификаторПолучателя);
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(Шапка.Контрагент) Тогда
			
			РеквизитыКонтрагента = РаботаСКонтрагентамиИСВызовСервера.ИННКПППоОрганизацииКонтрагенту(Шапка.Контрагент);
			Если Не ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН) Тогда
				ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
					СообщениеJSON,
					СтрШаблон(
						НСтр("ru = 'Не заполнено поле ""ИНН"" контрагента %1'"), Шапка.Контрагент));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыКонтрагента.ИНН) Тогда
				ТелоЗапроса.Вставить("buyer_inn", РеквизитыКонтрагента.ИНН);
			КонецЕсли;
			
		ИначеЕсли ИспользованиеКонтрагентаВсегда Тогда
			
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
				СообщениеJSON,
				НСтр("ru = 'Не заполнено поле ""Контрагент""'"));
			
		КонецЕсли;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Шапка.ВидПервичногоДокумента) И ИспользованиеПервичногоДокумента Тогда
		
		ТелоЗапроса.Вставить(
			"document_type",
			ИнтерфейсИСМПСлужебный.ВидПервичногоДокумента(Шапка.ВидПервичногоДокумента));
		ТелоЗапроса.Вставить("document_number", Шапка.НомерПервичногоДокумента);
		ТелоЗапроса.Вставить("document_date",   ИнтеграцияИС.ДатаUTC(Шапка.ДатаПервичногоДокумента));
		
		Если Шапка.ВидПервичногоДокумента = Перечисления.ВидыПервичныхДокументовИСМП.Прочее Тогда
			ТелоЗапроса.Вставить("primary_document_custom_name", Шапка.НаименованиеПервичногоДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаЭкспортВСтраныЕАЭС Тогда
		ТелоЗапроса.Вставить("destination_country_code", Шапка.СтранаНазначенияКод);
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаДругое Тогда
		ТелоЗапроса.Вставить("withdrawal_type_other", Шапка.ОписаниеПричины);
	КонецЕсли;
	
	Если Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоСделкеСоставляющейГосударственнуюТайну
		Или Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаПродажаПоГосударственномуКонтракту Тогда
		ТелоЗапроса.Вставить("state_contract_id", Шапка.ИдентификаторГосударственногоКонтракта);
	КонецЕсли;
	
	ТелоЗапроса.Вставить("products", Новый Массив);
	
	ИспользованиеЦены         = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеЦеныПриВыводеИзОборота(Шапка.Операция);
	ИспользованиеЦеныВсегда   = ИнтеграцияИСМПСлужебныйКлиентСервер.ИспользованиеЦеныПриВыводеИзОборота(Шапка.Операция, Истина);
	
	ОбработанныеСтрокиПоGTIN = Новый Соответствие;
	
	Для Каждого СтрокаТЧМаркированныеТовары Из ДанныеПоТоварам Цикл
		
		ПараметрыОтбора = Новый Структура;
		
		Если Шапка.ОбъемноСортовойУчет Тогда
			Если ОбработанныеСтрокиПоGTIN[СтрокаТЧМаркированныеТовары.GTIN] = Неопределено Тогда
				ПараметрыОтбора.Вставить("GTIN", СтрокаТЧМаркированныеТовары.GTIN);
				ОбработанныеСтрокиПоGTIN.Вставить(СтрокаТЧМаркированныеТовары.GTIN, Истина);
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			ПараметрыОтбора.Вставить("Номенклатура",   СтрокаТЧМаркированныеТовары.Номенклатура);
			ПараметрыОтбора.Вставить("Характеристика", СтрокаТЧМаркированныеТовары.Характеристика);
			ПараметрыОтбора.Вставить("Серия",          СтрокаТЧМаркированныеТовары.Серия);
		КонецЕсли;
		
		НайденныеСтроки = Товары.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() = 1
			Или Шапка.ОбъемноСортовойУчет И НайденныеСтроки.Количество() Тогда
			
			Для Каждого СтрокаТЧТовары Из НайденныеСтроки Цикл
				
			СтрокаТЧ = Новый Структура;
			
			Если Шапка.ОбъемноСортовойУчет Тогда
				СтрокаТЧ.Вставить("gtin", СтрокаТЧТовары.GTIN);
				Если ЗначениеЗаполнено(СтрокаТЧТовары.КоличествоПотребительскихУпаковок) Тогда
					СтрокаТЧ.Вставить("gtin_quantity", СтрокаТЧТовары.КоличествоПотребительскихУпаковок);
				Иначе
					СтрокаТЧ.Вставить("gtin_quantity", СтрокаТЧТовары.КоличествоУпаковок);
				КонецЕсли;
				НоменклатураПоGTIN = ВесоваяНоменклатураПоGTIN[СтрокаТЧТовары.GTIN];
				Если НоменклатураПоGTIN <> Неопределено Тогда
					Вес = ВесВГраммахПоНоменклатуре(СтрокаТЧТовары.Количество, НоменклатураПоGTIN);
					Если ЗначениеЗаполнено(Вес) Тогда 
						СтрокаТЧ.Вставить("gtin_weight", Вес);
					КонецЕсли;
				КонецЕсли;
			Иначе
				РезультатРазбора = ШтрихкодированиеОбщегоНазначенияИС.НоваяСтруктураОбработкиШтрихкода(
					СтрокаТЧМаркированныеТовары.Штрихкод, Шапка.ВидПродукции, ПользовательскиеПараметрыРазбораКодаМаркировки);
				СтрокаТЧ.Вставить(
					"cis",
					ШтрихкодированиеИСМП.КодМаркировкиДляПередачиИСМП(РезультатРазбора, ПараметрыНормализацииПрочее));
				
			КонецЕсли;
			
			Если ИспользованиеЦены Тогда
				
				Если Шапка.ОбъемноСортовойУчет
					И Шапка.Операция = Перечисления.ВидыОперацийИСМП.ВыводИзОборотаБезвозмезднаяПередача Тогда
					Цена = 0;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТЧТовары.Сумма) Тогда
					Если Шапка.ОбъемноСортовойУчет Тогда
						// Общая стоимость с НДС
						Цена = СтрокаТЧТовары.Сумма * 100;
					ИначеЕсли ЗначениеЗаполнено(СтрокаТЧТовары.КоличествоПотребительскихУпаковок)
						И СтрокаТЧТовары.КоличествоПотребительскихУпаковок <> СтрокаТЧТовары.КоличествоУпаковок Тогда
						// Цена за единицу
						Цена = Окр(СтрокаТЧТовары.Сумма / СтрокаТЧТовары.КоличествоПотребительскихУпаковок, 2) * 100;
					Иначе
						Цена = СтрокаТЧТовары.Цена * 100;
					КонецЕсли;
				КонецЕсли;
				
				Если Цена <> Неопределено Тогда
					СтрокаТЧ.Вставить("product_cost", Цена);
				КонецЕсли;
				
				Если ИспользованиеЦеныВсегда И Не ЗначениеЗаполнено(Цена) Тогда
					Если Шапка.ОбъемноСортовойУчет Тогда
						ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""Цена"" для GTIN %1.'"), ПараметрыОтбора.GTIN));
					Иначе
						ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(
							СообщениеJSON,
							СтрШаблон(
								НСтр("ru = 'Не заполнено поле ""Цена"" для номенклатуры %1.'"), ПараметрыОтбора.Номенклатура));
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			ТелоЗапроса.products.Добавить(СтрокаТЧ);
			
			КонецЦикла;
			
		ИначеЕсли НайденныеСтроки.Количество() > 1 Тогда
			
			ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В табличной части ""Товары"" дублируется номенклатура %1.'"),
						ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
									ПараметрыОтбора.Номенклатура,
									ПараметрыОтбора.Характеристика,,
									ПараметрыОтбора.Серия));
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
			
		Иначе
			
			Если Шапка.ОбъемноСортовойУчет Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В табличной части ""Товары"" не найден GTIN %1.'"),
						ПараметрыОтбора.GTIN);
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'В табличной части ""Товары"" не найдена номенклатура %1.'"),
						ОбщегоНазначенияИС.ПредставлениеНоменклатуры(
								ПараметрыОтбора.Номенклатура,
								ПараметрыОтбора.Характеристика,,
								ПараметрыОтбора.Серия));
			КонецЕсли;
			ОбщегоНазначенияИСКлиентСервер.ДобавитьТекстОшибки(СообщениеJSON, ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСообщенияJSON                = ОбщегоНазначенияИСМП.ОбъектВТекстJSON(ТелоЗапроса, Истина);
	СообщениеJSON.ТекстСообщенияJSON  = ТекстСообщенияJSON;
	СообщениеJSON.ПараметрыЗапроса    = ПараметрыЗапроса;
	СообщенияJSON.Добавить(СообщениеJSON);
	
	Возврат СообщенияJSON;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли