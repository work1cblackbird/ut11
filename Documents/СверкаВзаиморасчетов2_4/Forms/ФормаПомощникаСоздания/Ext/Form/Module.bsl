
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.РасчетыМеждуОрганизациями.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	ДоступныРасчетыПоФинансовымИнструментам = ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	ДоступныДоговорыКредитовИДепозитов = ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКредитовИДепозитов);
	ДоступныДоговорыАренды = Ложь;
	
	Элементы.РасчетыСДебитором.Видимость = Ложь;
	Элементы.РасчетыСКредитором.Видимость = Ложь;
	Элементы.РасчетыСАрендодателем.Видимость = Ложь;
	Если ДоступныРасчетыПоФинансовымИнструментам Тогда
		Если ДоступныДоговорыКредитовИДепозитов Тогда
			Элементы.РасчетыСДебитором.Видимость = Истина;
			Элементы.РасчетыСКредитором.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Документы.СверкаВзаиморасчетов2_4.ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор, УникальныйИдентификатор);
	
	ПериодСверки.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	
	ДатаДокументов = ТекущаяДатаСеанса();
	
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	
	ДоступноСохранениеДанныхПользователя = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
		ЭтотОбъект, "РасчетыСПартнерами", НСтр("ru = 'Открыть отчет ""Расчеты с контрагентами"":'"));

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановкаДоступностиЭлементовФормы();
	
	УправлениеКнопкамиПодвал();
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		Документы.СверкаВзаиморасчетов2_4.КлючОбъектаПользовательскихНастроек(),
		"НастройкиОтбора",
		КомпоновщикОтбор.ПолучитьНастройки());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	НастройкиОтбора = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
							Документы.СверкаВзаиморасчетов2_4.КлючОбъектаПользовательскихНастроек(),
							"НастройкиОтбора");
	
	Если НастройкиОтбора <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Документы.СверкаВзаиморасчетов2_4.ЗаполнитьОтборПартнераПоКонтрагенту(КомпоновщикОтбор.Настройки.Отбор);
		КонецЕсли;
		ОбновитьОтборыНаФорме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗадаватьВопросОЗакрытии Тогда
		
		ТекстВопроса = НСтр("ru = 'Закрыть форму помощника? Введенные данные будут потеряны.'");
		Отказ = Истина;
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ПередЗакрытиемВопросЗавершение", ЭтотОбъект),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопросЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗадаватьВопросОЗакрытии = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодСверкиВариантПриИзменении(Элемент)
	
	УстановкаДоступностиЭлементовФормы();
		
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьДокументыНаПечатьПриИзменении(Элемент)
	
	УстановкаДоступностиЭлементовФормы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицарасчетов

&НаКлиенте
Процедура ТаблицаРасчетовСоздаватьДокументПриИзменении(Элемент)
	
	ПересчитатьКоличествоСтрокТаблицыРасчетов();
	ЗадаватьВопросОЗакрытии = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРасчетовКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
    ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыСПартнерами(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормыРасширенногоОтбора();
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПомощникСозданияСверкиВзаиморасчетов");
	
	ПараметрыФормы.Отбор = Новый Структура("Период", ПериодСверки);
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаФильтров Тогда
		
		ФиксированныеНастройки = Новый НастройкиКомпоновкиДанных();
		
		ПоляОтбораОтчета = "Организация, Партнер, Контрагент, СегментПартнеров";
		Для Каждого ЭлементОтбора Из КомпоновщикОтбор.Настройки.Отбор.Элементы Цикл
			
			Если СтрНайти(ПоляОтбораОтчета, Строка(ЭлементОтбора.ЛевоеЗначение)) <> 0
				И ЭлементОтбора.Использование Тогда
				
				Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					ДобавитьВОтборЭлементОтбора(ФиксированныеНастройки.Отбор, ЭлементОтбора);
				Иначе
					ДобавитьВОтборГруппуЭлементовОтбора(ФиксированныеНастройки.Отбор, ЭлементОтбора);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ПараметрыФормы.ФиксированныеНастройки = ФиксированныеНастройки;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов Тогда
		
		Если Элементы.ТаблицаРасчетов.ТекущиеДанные = Неопределено Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не выбрана ни одна строка'"),,"ТаблицаРасчетов");
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы.Отбор.Вставить("Организация", Элементы.ТаблицаРасчетов.ТекущиеДанные.Организация);
		ПараметрыФормы.Отбор.Вставить("Контрагент",  Элементы.ТаблицаРасчетов.ТекущиеДанные.Контрагент);
		
	КонецЕсли;
	
	ПараметрыФормы.КлючВарианта = "ПоСверкеВзаиморасчетовКонтекст";
	
	ИмяФормыОтчетаРасчетовСПартнерами = ?(НоваяАрхитектураВзаиморасчетов, "Отчет.ВедомостьРасчетовСПартнерами.Форма", "Отчет.РасчетыСПартнерами.Форма");
	
	ОткрытьФорму(ИмяФормыОтчетаРасчетовСПартнерами,
		ПараметрыФормы,
		ЭтаФорма,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетыМеждуОрганизациями(Команда)
	
	ОчиститьСообщения();
	
	ПараметрыФормы = Новый Структура("Отбор, ФиксированныеНастройки, КлючВарианта, СформироватьПриОткрытии");
	ПараметрыФормы.СформироватьПриОткрытии = Истина;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "ПомощникСозданияСверкиВзаиморасчетов");
	
	ПараметрыФормы.Отбор = Новый Структура("Период", ПериодСверки);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Если РасчетыСКлиентами Тогда
			ПараметрыФормы.КлючВарианта = "РасчетыПоПродажам";
			ПараметрыФормы.Отбор.Вставить("Продавец", Организация);
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ПараметрыФормы.Отбор.Вставить("Покупатель", Контрагент);
			КонецЕсли;
		ИначеЕсли РасчетыСПоставщиками Тогда
			ПараметрыФормы.КлючВарианта = "РасчетыПоЗакупкам";
			ПараметрыФормы.Отбор.Вставить("Покупатель", Организация);
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ПараметрыФормы.Отбор.Вставить("Продавец", Контрагент);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяФормыОтчетаРасчетовМеждуОрганизациями = ?(НоваяАрхитектураВзаиморасчетов, "Отчет.ВедомостьРасчетовМеждуОрганизациями.Форма", "Отчет.РасчетыМеждуОрганизациями.Форма");
	
	ОткрытьФорму(ИмяФормыОтчетаРасчетовМеждуОрганизациями,
		ПараметрыФормы,
		ЭтаФорма,
		Истина); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник,ЭлементОтбора)
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент,ЭлементОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов)
	
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа,ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора Из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(НоваяГруппа, ЭлементОтбора);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа, ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура УстановитьНеИзменять(Команда)
	
	УстановитьДействиеССуществующимДокументом("НеИзменять");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаУдаление(Команда)
	
	УстановитьДействиеССуществующимДокументом("УдалитьСоздатьНовый");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПерезаполнять(Команда)
	
	УстановитьДействиеССуществующимДокументом("Перезаполнять");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСоздавать(Команда)
	
	УстановитьДействиеСНовымДокументом("Создавать");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНеСоздавать(Команда)
	
	УстановитьДействиеСНовымДокументом("НеСоздавать");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиОтборов(Команда)
	
	ПараметрыОткрытия = ПараметрыФормыРасширенногоОтбора();
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("УстановитьНастройкиОтборовЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СверкаВзаиморасчетов2_4.Форма.НастройкаОтборов",
	            ПараметрыОткрытия,
	            ЭтаФорма,
	            ,
	            ,
	            , 
	            ОбработчикЗакрытия,
                РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиОтборовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КомпоновщикОтбор.ЗагрузитьНастройки(Результат.НастройкиОтбора);
	ОбновитьОтборыНаФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиПервогоШагаПомощника

&НаСервере
Процедура ЗаполнитьТаблицуРасчетовСервер()
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", ПериодСверки.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "КонецПериода", КонецДня(ПериодСверки.ДатаОкончания));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "Период", ПериодСверки.ДатаНачала);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ПолучатьДокументыСверки", Истина);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоТипамРасчетов", РазбиватьПоТипамРасчетов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоПартнерам", РазбиватьПоПартнерам);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоДоговорам", РазбиватьПоДоговорам);
	
	УстановитьОсновныеОтборы();
	
	ТаблицаРезультатаСКД = Документы.СверкаВзаиморасчетов2_4.ПолучитьВзаиморасчеты(КомпоновщикОтбор);
	
	Если ТаблицаРезультатаСКД.Количество() > 0 Тогда
		Группировки = "Организация, Контрагент, СуществуютДокументы, ИзменятьДокумент, СоздаватьДокумент, ДокументСверки";
		Элементы.СписокДокументовСверкиТипРасчетов.Видимость = РазбиватьПоТипамРасчетов;
		Элементы.СписокДокументовСверкиПартнер.Видимость = РазбиватьПоПартнерам;
		Элементы.СписокДокументовСверкиДоговор.Видимость = РазбиватьПоДоговорам;
		Если РазбиватьПоДоговорам Тогда
			Группировки = "Договор, " + Группировки;
		КонецЕсли;
		Если РазбиватьПоПартнерам Тогда
			Группировки = "Партнер, " + Группировки;
		КонецЕсли;
		Если РазбиватьПоТипамРасчетов Тогда
			Группировки = "ПорядокТипаПлатежа, ТипРасчетов, " + Группировки;
		КонецЕсли;
			
		ТаблицаРезультатаСКД.Свернуть(Группировки);
		Если РазбиватьПоТипамРасчетов Тогда
			Группировки = СтрЗаменить(Группировки, "ТипРасчетов, ", "");
		КонецЕсли;
		ТаблицаРезультатаСКД.Сортировать(Группировки);
		ТаблицаРасчетов.Загрузить(ТаблицаРезультатаСКД);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЕстьЗаданияКРаспределению()
	
	АналитикаКРасчету = Документы.СверкаВзаиморасчетов2_4.АналитикаКРасчету(
							Организация, Контрагент, Неопределено, КонецДня(ПериодСверки.ДатаОкончания));
	ЕстьЗадания = АналитикаКРасчету.Количество() > 0;
	
	Если ЕстьЗадания Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		
		НаименованиеЗадания = НСтр("ru = 'Выполняется распределение расчетов по документам.'");
		ИмяПроцедуры        = "Документы.СверкаВзаиморасчетов2_4.РаспределениеРасчетовПоДокументам";
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		Организации = Неопределено;
		Если ЗначениеЗаполнено(Организация) Тогда
			Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
		КонецЕсли;
		СтруктураРасчетов = Новый Структура("АналитикиУчетаПоПартнерам, Организации", АналитикаКРасчету, Организации);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("АналитикиРасчета", СтруктураРасчетов);
		ПараметрыМетода.Вставить("КонецПериода", КонецДня(ПериодСверки.ДатаОкончания));
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
		
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	КонецЕсли;
	
	Возврат ЕстьЗадания;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуРасчетовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуРасчетовСервер();
	ПересчитатьКоличествоСтрокТаблицыРасчетов();
	Элементы.ТаблицаРасчетовТипРасчетов.Видимость = РазбиватьПоТипамРасчетов;
	Элементы.ТаблицаРасчетовПартнер.Видимость = РазбиватьПоПартнерам;
	Элементы.ТаблицаРасчетовДоговор.Видимость = РазбиватьПоДоговорам;
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов;
	Элементы.Далее.Доступность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиВторогоШагаПомощника

&НаКлиенте
Процедура ПересчитатьКоличествоСтрокТаблицыРасчетов()
	
	КоличествоСозданных = 0;
	КоличествоУдаленных = 0;
	КоличествоПерезаполненных = 0;
	
	Для Каждого СтрокаТаблицыРасчетов Из ТаблицаРасчетов Цикл
		
		Если  СтрокаТаблицыРасчетов.СоздаватьДокумент  Тогда
			
			КоличествоСозданных = КоличествоСозданных + 1;
			
		ИначеЕсли СтрокаТаблицыРасчетов.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
			КоличествоСозданных = КоличествоСозданных + 1;
			КоличествоУдаленных = КоличествоУдаленных + 1;
			
		ИначеЕсли СтрокаТаблицыРасчетов.ИзменятьДокумент = "Перезаполнять" Тогда
			КоличествоПерезаполненных = КоличествоПерезаполненных + 1;
			
		КонецЕсли;
		
	КонецЦикла;

	ВсегоСтрок = ТаблицаРасчетов.Количество();
	БудетСоздано = КоличествоСозданных;
	БудетУдалено = КоличествоУдаленных;
	БудетПерезаполнено = КоличествоПерезаполненных;
	КоличествоОтмеченных = КоличествоСозданных + КоличествоПерезаполненных;

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиПечатиНажатие(Элемент)
	
	ОткрытьФорму(
		"Документ.СверкаВзаиморасчетов2_4.Форма.НастройкаПечати",, 
		ЭтаФорма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТретьегоШагаПомощника

&НаСервере
Процедура СоздатьВФоновомЗаданииНаСервере()
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = 'Создание документов ""Сверка взаиморасчетов""'");
	ИмяПроцедуры        = "Документы.СверкаВзаиморасчетов2_4.СоздатьДокументы";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ТаблицаРасчетов", ТаблицаРасчетов.Выгрузить());
	ПараметрыМетода.Вставить("ДатаДокументов", ДатаДокументов);
	ПараметрыМетода.Вставить("ПериодСверки", ПериодСверки);
	ПараметрыМетода.Вставить("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
	ПараметрыМетода.Вставить("ДоговорыБезОборотов", ДоговорыБезОборотов);
	ПараметрыМетода.Вставить("РазбиватьПоТипамРасчетов", РазбиватьПоТипамРасчетов);
	ПараметрыМетода.Вставить("РазбиватьПоПартнерам", РазбиватьПоПартнерам);
	ПараметрыМетода.Вставить("РазбиватьПоДоговорам", РазбиватьПоДоговорам);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Элементы.Далее.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	РезультатСоздания = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	ОтработанныеДокументы = РезультатСоздания.ОтработанныеДокументы;
	
	Если РезультатСоздания = Неопределено Тогда
		Элементы.Далее.Доступность = Истина;
		Возврат;
	КонецЕсли;
	
	ТаблицаОбработанныхДокументов.Очистить();
	КоличествоСозданных = 0;
	Для Каждого СтрокаПротокола Из ОтработанныеДокументы Цикл
		
		СтрокаТаблицы = ТаблицаОбработанныхДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПротокола);
		ОбработатьСтрокуПротокола(СтрокаПротокола, КоличествоСозданных);
		
	КонецЦикла;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокДокументовСверки, "Ссылка", РезультатСоздания.МассивВсехДокументовСверки, ВидСравненияКомпоновкиДанных.ВСписке);
	
	ТекстРезультата = НСтр("ru='Создано %КоличествоСозданных% из %КоличествоВсего% документов'");
	ТекстРезультата = СтрЗаменить(ТекстРезультата, "%КоличествоСозданных%", КоличествоСозданных);
	ТекстРезультата = СтрЗаменить(ТекстРезультата, "%КоличествоВсего%",     КоличествоОтмеченных);
	
	Элементы.ДекорацияРезультат.Заголовок = ТекстРезультата;
	
	ЗадаватьВопросОЗакрытии = Ложь;
		
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРезультат;
	Элементы.Далее.Доступность = Истина;
	УстановкаДоступностиЭлементовФормы();
	УправлениеКнопкамиПодвал();
	
	Если ВладелецФормы <> Неопределено Тогда
		Список = ВладелецФормы.Элементы.Список; // ТаблицаФормы -
		Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

// Описание
// 
// Параметры:
// 	СтрокаПротокола - см. Документы.СверкаВзаиморасчетов2_4.СтрокаПротокола
// 	КоличествоСозданных - Число - 
// 	
&НаКлиенте
Процедура ОбработатьСтрокуПротокола(СтрокаПротокола, КоличествоСозданных)
	
	Если СтрокаПротокола.Действие = "Создание" Тогда 
		
		ОповеститьОДействии(СтрокаПротокола.ДокументСверки, НСтр("ru='Создание:'"));
		КоличествоСозданных = КоличествоСозданных + 1;
		
	ИначеЕсли СтрокаПротокола.Действие = "ПометкаНаУдаление" Тогда 
		
		ОповеститьОДействии(СтрокаПротокола.ДокументСверки, НСтр("ru='Пометка удаления установлена:'"));
		
	ИначеЕсли СтрокаПротокола.Действие = "Перезаполнение" Тогда 
		
		ОповеститьОДействии(СтрокаПротокола.ДокументСверки, НСтр("ru='Перезаполнение:'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОДействии(ДокументСверки, Текст)
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументСверки);

	ПоказатьОповещениеПользователя(
		Текст,
		НавигационнаяСсылка,
		Строка(ДокументСверки),
		БиблиотекаКартинок.Информация32);
	
	Если ДоступноСохранениеДанныхПользователя Тогда
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылка);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЧетвертогоШагаПомощника

&НаСервере
Функция ДокументыНаПечать()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СверкаВзаиморасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4 КАК СверкаВзаиморасчетов
	|ГДЕ
	|	СверкаВзаиморасчетов.Проведен = ИСТИНА
	|	И СверкаВзаиморасчетов.Ссылка В(&МассивСсылок)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СверкаВзаиморасчетов.Дата,
	|	СверкаВзаиморасчетов.Номер");
	
	МассивСсылок = СписокДокументовСверки.Отбор.Элементы[0].ПравоеЗначение;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуНаУдаление(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаОПометкеУдаления", ЭтотОбъект);
	ТекстВопроса = НСтр("ru='Изменить пометку удаления для выделенных элементов?'");
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаОПометкеУдаления(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПометкуНаУдалениеНаСервере();
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПометкуНаУдалениеНаСервере()
	
	ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	НаименованиеЗадания = НСтр("ru = 'Изменение пометки на удаление документов ""Сверка взаиморасчетов""'");
	ИмяПроцедуры        = "Документы.СверкаВзаиморасчетов2_4.УстановитьПометкуНаУдаление";
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("ВыделенныеДокументы", Элементы.СписокДокументовСверки.ВыделенныеСтроки);
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
	
	ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуНаУдалениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Элементы.Далее.Доступность = Истина;
	Элементы.СписокДокументовСверки.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// ТаблицаРасчетовСоздаватьДокумент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаРасчетовСоздаватьДокумент.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРасчетов.СоздаватьДокумент");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРасчетов.СуществуютДокументы");
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// ТаблицаРасчетовИзменятьДокумент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаРасчетовИзменятьДокумент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРасчетов.СуществуютДокументы");
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Тексты поля ТаблицаРасчетовИзменятьДокумент
	Для каждого ТекстПоля Из Элементы.ТаблицаРасчетовИзменятьДокумент.СписокВыбора Цикл
		
		Элемент = УсловноеОформление.Элементы.Добавить();

		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаРасчетовИзменятьДокумент.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаРасчетов.ИзменятьДокумент");
		ОтборЭлемента.ПравоеЗначение = ТекстПоля.Значение;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПоля.Представление);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаДоступностиЭлементовФормы()

	Элементы.СтраницыПомощника.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	ВыбранПроизвольныйПериод = (ПериодСверки.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод);
	Элементы.ПериодСверкиДатаНачала.Доступность    = ВыбранПроизвольныйПериод;
	Элементы.ПериодСверкиДатаОкончания.Доступность = ВыбранПроизвольныйПериод;
	
	Элементы.КоличествоЭкземпляров.Доступность = ВыводитьДокументыНаПечать;
	Элементы.ДекорацияНастройкиПечати.Доступность = ВыводитьДокументыНаПечать;
	
	Если НЕ ВыводитьДокументыНаПечать Тогда
		КоличествоЭкземпляров = 0;
	ИначеЕсли КоличествоЭкземпляров = 0 Тогда
		КоличествоЭкземпляров = 1;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	ОчиститьСообщения();
	Элементы.Далее.Доступность = Истина;
	Если Команда.Имя = "Далее"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаФильтров Тогда
		
		Если НЕ (РасчетыСКлиентами ИЛИ РасчетыСПоставщиками ИЛИ РасчетыСКредитором ИЛИ РасчетыСДебитором ИЛИ РасчетыСАрендодателем) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран тип расчетов для сверки.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "РасчетыСКлиентами");
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации")
			И ЗначениеЗаполнено(ОсновнойМенеджер) Тогда
			ТекстСообщения = НСтр("ru = 'Установлен отбор по основному менеджеру, сверка между организациями не будет создана.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ОсновнойМенеджер");
			Возврат;
		КонецЕсли;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек;
		
	ИначеЕсли Команда.Имя = "Далее"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек Тогда
				
		Если ПараметрыЗаполнены() Тогда
			
			Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
				Если ЕстьЗаданияКРаспределению() Тогда
					Элементы.Далее.Доступность = Ложь;
					ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.1, Истина);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьТаблицуРасчетовЗавершение", ЭтотОбъект);
			ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "Далее"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов Тогда
		
		Если ПараметрыЗаполнены() Тогда
			
			ЗадаватьВопросОЗакрытии = Истина;
			Если ПараметрыЗаполнены() Тогда
				Элементы.Далее.Доступность = Ложь;
				СоздатьВФоновомЗаданииНаСервере();
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.3, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Команда.Имя = "Далее"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		
		Если ВыводитьДокументыНаПечать Тогда
			
			МассивДокументовДляПечати = ДокументыНаПечать();
			
			ИменаМакетов = "АктСверкиВзаимныхРасчетов";
			Для Индекс = 2 По КоличествоЭкземпляров Цикл
				ИменаМакетов = ИменаМакетов + ",АктСверкиВзаимныхРасчетов";
			КонецЦикла;
			
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
				"Документ.СверкаВзаиморасчетов2_4",
				ИменаМакетов,
				МассивДокументовДляПечати,
				Неопределено,
				Неопределено);
			
		КонецЕсли;
		Закрыть();
		
	ИначеЕсли Команда.Имя = "Назад"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаФильтров;
		
	ИначеЕсли Команда.Имя = "Назад"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек;
		ТаблицаРасчетов.Очистить();
		
	ИначеЕсли Команда.Имя = "Назад"
		И Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаФильтров;
			
	ИначеЕсли Команда.Имя = "Отмена" Тогда
		
		Закрыть();
		
	КонецЕсли;
	
	УправлениеКнопкамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗаполнены()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаФильтров Тогда

		Если ПериодСверки.ДатаОкончания = '00010101' Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не указано окончание периода сверки'"),,"ПериодСверки.ДатаОкончания");
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов Тогда
		
		ПересчитатьКоличествоСтрокТаблицыРасчетов();
		
		Если БудетСоздано = 0 И БудетПерезаполнено = 0 Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Не отмечена ни одна строка для создания или перезаполнения'"),,"ТаблицаРасчетов");
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек Тогда
		
		Если ДатаДокументов = '00010101' Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru = 'Указана пустая дата документов'"),,"ДатаДокументов");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;

	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура УправлениеКнопкамиПодвал()
	
	Элементы.Назад.Доступность = Истина;
	Элементы.Отмена.Видимость = Истина;
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастройкаФильтров Тогда
		
		Элементы.Далее.Заголовок = НСтр("ru='Далее'") + " >>";
		Элементы.Назад.Заголовок = НСтр("ru='Назад'");
		Элементы.Назад.Доступность = Ложь;

	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек Тогда
		
		Элементы.Далее.Заголовок = НСтр("ru='Далее'") + " >>";
		Элементы.Назад.Заголовок = "<< " + НСтр("ru='Назад'");

	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов Тогда
		
		Элементы.Далее.Заголовок = НСтр("ru='Выполнить'");
		Элементы.Назад.Заголовок = "<< " + НСтр("ru='Назад'");

	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		
		Элементы.Далее.Заголовок = НСтр("ru='Завершить'");
		Элементы.Назад.Заголовок = "<< " + НСтр("ru='Вернуться в начало'");
		Элементы.Отмена.Видимость = Ложь;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДействиеССуществующимДокументом(Знач ИмяКоманды)
	
	Если Элементы.ТаблицаРасчетов.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Ид Из Элементы.ТаблицаРасчетов.ВыделенныеСтроки Цикл
			стр = ТаблицаРасчетов.НайтиПоИдентификатору(Ид);
			Если стр <> Неопределено И стр.СуществуютДокументы Тогда
				стр.ИзменятьДокумент = ИмяКоманды;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого стр Из ТаблицаРасчетов Цикл
			Если стр.СуществуютДокументы Тогда
				стр.ИзменятьДокумент = ИмяКоманды;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьКоличествоСтрокТаблицыРасчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДействиеСНовымДокументом(Знач ИмяКоманды)
	
	Если Элементы.ТаблицаРасчетов.ВыделенныеСтроки.Количество() > 1 Тогда
		Для Каждого Ид Из Элементы.ТаблицаРасчетов.ВыделенныеСтроки Цикл
			стр = ТаблицаРасчетов.НайтиПоИдентификатору(Ид);
			Если стр <> Неопределено И НЕ стр.СуществуютДокументы Тогда
				стр.СоздаватьДокумент = ИмяКоманды = "Создавать";
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого стр Из ТаблицаРасчетов Цикл
			Если НЕ стр.СуществуютДокументы Тогда
				стр.СоздаватьДокумент = ИмяКоманды = "Создавать";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ПересчитатьКоличествоСтрокТаблицыРасчетов();
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРасширенногоОтбора()
	
	ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
	Если ОтборДоговорыБезОборотов = Неопределено Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов", Истина);
		ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
		ОтборДоговорыБезОборотов.Представление = НСтр("ru = 'Включать договора без оборотов в периоде'");
	КонецЕсли;
	ОтборДоговорыБезОборотов.Использование = ДоговорыБезОборотов;
	
	УстановитьОсновныеОтборы();
	
	ПараметрыОткрытия = Новый Структура("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаСервере
Процедура УстановитьОсновныеОтборы()
	
	ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
	ОтборДоговорыБезОборотов.Использование = ДоговорыБезОборотов;
	
	УстановитьОтборКомпоновщика("Организация", Организация);
	УстановитьОтборКомпоновщика("Контрагент", Контрагент);
	УстановитьОтборКомпоновщика("ОсновнойМенеджер", ОсновнойМенеджер);
	
	#Область ОтборПоТипамРасчетов
	СписокРасчетов = Новый СписокЗначений();
	Если РасчетыСКлиентами Тогда
		СписокРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	КонецЕсли;
	
	Если РасчетыСПоставщиками Тогда
		СписокРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	КонецЕсли;
	
	Если РасчетыСКредитором Тогда
		СписокРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
	КонецЕсли;
	
	Если РасчетыСДебитором Тогда
		СписокРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
	КонецЕсли;
	
	Если РасчетыСАрендодателем Тогда
		СписокРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем);
	КонецЕсли;
	
	ВидСравненияТипаРасчетов = ВидСравненияКомпоновкиДанных.ВСписке;
	Если СписокРасчетов.Количество() = 1 Тогда
		ВидСравненияТипаРасчетов = ВидСравненияКомпоновкиДанных.Равно;
		СписокРасчетов = СписокРасчетов[0].Значение;
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
		КомпоновщикОтбор,
		"ТипРасчетов",
		СписокРасчетов,
		ВидСравненияТипаРасчетов,
		ЗначениеЗаполнено(СписокРасчетов));
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборКомпоновщика(ИмяОтбора, ЗначениеОтбора)
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, ИмяОтбора);
	
	Если ИмяОтбора = "Контрагент"
		И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Организации") Тогда
			ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор,
																			"ОрганизацияКонтрагент");
		Иначе
			ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "Партнер");
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементОтбора = Неопределено
		И Не ЗначениеЗаполнено(ЗначениеОтбора) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗначениеОтбора)
		Или (Не ЗначениеЗаполнено(ЗначениеОтбора)
			И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) Тогда
		
		Если ИмяОтбора = "Контрагент"
			И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			
			Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Контрагенты") Тогда
				Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначениеОтбора, "Партнер");
				
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор, "Партнер", Партнер, , ЗначениеЗаполнено(Партнер));
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор, "ОрганизацияКонтрагент", , , Ложь);
			Иначе
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор,
															"ОрганизацияКонтрагент",
															ЗначениеОтбора,
															,
															ЗначениеЗаполнено(ЗначениеОтбора));
				КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор, "Партнер", , , Ложь);
			КонецЕсли;
			
		Иначе
			КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор,
														ИмяОтбора,
														ЗначениеОтбора,
														,
														ЗначениеЗаполнено(ЗначениеОтбора));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтборыНаФорме()
	
	ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
	ДоговорыБезОборотов = ОтборДоговорыБезОборотов.Использование;
	
	УстановитьТипРасчетовНаФорме();
	УстановитьОтборНаФорме("Организация");
	УстановитьОтборНаФорме("Контрагент");
	УстановитьОтборНаФорме("ОсновнойМенеджер");
	
	ОбновитьГиперссылкуОтбора(Элементы.УстановитьНастройкиОтборов, КомпоновщикОтбор.Настройки.Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкуОтбора(КнопкаРасширенногоОтбора, Отбор)
	
	ВидимыеОтборыСтрокой = "ДоговорыБезОборотов,ТипРасчетов,Организация,Контрагент,ОсновнойМенеджер";
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ВидимыеОтборыСтрокой = СтрЗаменить(ВидимыеОтборыСтрокой, "Контрагент", "Партнер");
	КонецЕсли;
	ВидимыеОтборы = СтрРазделить(ВидимыеОтборыСтрокой, ",");
	УстановленРасширенныйОтбор = Ложь;
	КнопкаРасширенногоОтбора.Заголовок = НСтр("ru = 'Расширенный отбор'");
	КнопкаРасширенногоОтбора.ЦветТекста = Новый Цвет;
	
	УстановленРасширенныйОтбор = УстановленРасширенныйОтбор(ВидимыеОтборы, КомпоновщикОтбор.Настройки.Отбор.Элементы);
	Если УстановленРасширенныйОтбор Тогда
		КнопкаРасширенногоОтбора.Заголовок = НСтр("ru = 'Установлен расширенный отбор'");
		КнопкаРасширенногоОтбора.ЦветТекста = ЦветаСтиля.ЦветТекстаУспех;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановленРасширенныйОтбор(ВидимыеОтборы, ЭлементыОтбора)
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если УстановленРасширенныйОтбор(ВидимыеОтборы, ЭлементОтбора.Элементы) Тогда
				Возврат Истина;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ВидимыОтбор = ВидимыеОтборы.Найти(Строка(ЭлементОтбора.ЛевоеЗначение)) <> Неопределено;
		ВидимыйОтборИзменен = ВидимыОтбор И ЭлементОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
								И Строка(ЭлементОтбора.ЛевоеЗначение) <> "ТипРасчетов";
								
		Если ЭлементОтбора.Использование И (ВидимыйОтборИзменен ИЛИ НЕ ВидимыОтбор) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьТипРасчетовНаФорме()
	
	ФлагиОтборов = Новый Соответствие;
	ФлагиОтборов.Вставить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом, "РасчетыСКлиентами");
	ФлагиОтборов.Вставить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком, "РасчетыСПоставщиками");
	ФлагиОтборов.Вставить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором, "РасчетыСКредитором");
	ФлагиОтборов.Вставить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором, "РасчетыСДебитором");
	ФлагиОтборов.Вставить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем, "РасчетыСАрендодателем");
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ТипРасчетов");
	УстановленОтбор = ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование;
	Для Каждого ФлагОтбора Из ФлагиОтборов Цикл
		
		ЭтотОбъект[ФлагОтбора.Значение] = Ложь;
		Если УстановленОтбор Тогда
			Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
				ЕстьВСписке = ЭлементОтбора.ПравоеЗначение.НайтиПоЗначению(ФлагОтбора.Ключ) <> Неопределено;
				ЭтотОбъект[ФлагОтбора.Значение] = ЕстьВСписке;
			ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
				ЭтотОбъект[ФлагиОтборов[ЭлементОтбора.ПравоеЗначение]] = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборНаФорме(ИмяОтбора)
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, ИмяОтбора);
	Если ИмяОтбора = "Контрагент" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "Партнер");
	КонецЕсли;
	ЭтотОбъект[ИмяОтбора] = Неопределено;
	Элемент = Элементы[ИмяОтбора]; // ПолеФормы - 
	Элемент.Доступность = Истина;
	Элемент.ПодсказкаВвода = НСтр("ru = 'Укажите значение отбора'");
	
	Если ЭлементОтбора <> Неопределено Тогда
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно И ЭлементОтбора.Родитель = Неопределено Тогда
			Если ЭлементОтбора.Использование Тогда
				ЭтотОбъект[ИмяОтбора] = ЭлементОтбора.ПравоеЗначение;
				Если ИмяОтбора = "Контрагент" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов")
					И ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Партнеры") Тогда
					Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ЭлементОтбора.ПравоеЗначение);
					ЭтотОбъект[ИмяОтбора] = Контрагент;
				КонецЕсли;
			ИначеЕсли ИмяОтбора = "Контрагент" И ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
				ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент");
				Если ЭлементОтбора <> Неопределено
					И ЭлементОтбора.Использование 
					И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
					И ЭлементОтбора.Родитель = Неопределено Тогда
					ЭтотОбъект[ИмяОтбора] = ЭлементОтбора.ПравоеЗначение;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ЭлементВИспользуемойГруппеОтбора = ЭлементОтбора.Родитель <> Неопределено И ЭлементОтбора.Родитель.Использование;
			Если ЭлементОтбора.Использование ИЛИ ЭлементВИспользуемойГруппеОтбора Тогда
				Элемент = Элементы[ИмяОтбора]; // ПолеФормы - 
				Элемент.Доступность = Ложь;
				Элемент.ПодсказкаВвода = НСтр("ru = 'Установлен расширенный отбор'");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область ОбслуживаниеДлительныхОпераций

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Если ЗначениеЗаполнено(ИдентификаторЗадания) И ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		Элементы.СписокДокументовСверки.Обновить();
	КонецЕсли;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНастроек Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьТаблицуРасчетовЗавершение", ЭтотОбъект);
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаТаблицаРасчетов Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("СоздатьДокументыЗавершение", ЭтотОбъект);
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРезультат Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("УстановитьПометкуНаУдалениеЗавершение", ЭтотОбъект);
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
