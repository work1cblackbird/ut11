
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = НСтр("ru = 'Сверка взаиморасчетов'");
	КонецЕсли;
	
	ЭтоСверкаМеждуОрганизациями = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Объект.КонтактноеЛицо = ?(
			ЭтоСверкаМеждуОрганизациями, 
			Справочники.Пользователи.ПустаяСсылка(),
			Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка());
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	Документы.СверкаВзаиморасчетов2_4.ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор, УникальныйИдентификатор);
	Попытка
		НастройкиОтбора = РеквизитФормыВЗначение("Объект").НастройкиОтбора.Получить();
	Исключение
		// Ничего не делаем. ПередЗаписью настройки отбора актуализируются.
	КонецПопытки;
	Если ЗначениеЗаполнено(НастройкиОтбора) Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			Документы.СверкаВзаиморасчетов2_4.ЗаполнитьОтборПартнераПоКонтрагенту(КомпоновщикОтбор.Настройки.Отбор);
		КонецЕсли;
	КонецЕсли;
	ИспользоватьНесколькоВалют = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют");
	Элементы.ИтогДолгРегл.Видимость = ИспользоватьНесколькоВалют;
	Элементы.ИтогАвансРегл.Видимость = ИспользоватьНесколькоВалют;
	
	ДоступныФинансовыеИнструменты = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов");
	Если НЕ ДоступныФинансовыеИнструменты Или ЭтоСверкаМеждуОрганизациями Тогда
		Элементы.СтраницаФинансовыеИнструменты.Видимость = Ложь;
	КонецЕсли;
	
	ПоказатьГруппировкиРасчеты = Истина;
	ПоказатьГруппировкиФинансовыеИнструменты = Истина;
	ИтогиДетальныхЗаписей.Добавить();
	Элементы.ОтветственноеЛицо.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Элементы.ОтветственноеЛицо.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Элементы.ОтветственноеЛицоОрганизацииКонтрагента.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Элементы.ОтветственноеЛицоОрганизацииКонтрагента.СписокВыбора.Добавить(Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	НоваяАрхитектураВзаиморасчетов = ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов");
	ИспользоватьНесколькоОрганизаций = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций");
	Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Элементы.Контрагент.ВыбиратьТип = ИспользоватьНесколькоОрганизаций;
	СписокВыбора = Элементы.ГруппировкиРасчетыТипРасчетов.СписокВыбора;
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	СписокВыбора = Элементы.ГруппировкиФинансовыеИнструментыТипРасчетов.СписокВыбора;
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
	СписокВыбора.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем);
	УстановитьВидимостьСтраницСверки();
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		УправлениеЭлементамиФормы();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
		ЭтотОбъект, "ДанныеКонтрагентаСуммаДолгПартнера", НСтр("ru = 'Долг контрагента'"));

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	Партнер = ПартнерКонтрагента(Объект.Контрагент);
	ПоказатьГруппировкиРасчеты = Истина;
	ПоказатьГруппировкиФинансовыеИнструменты = Истина;
	ЭтоСверкаМеждуОрганизациями = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	УправлениеЭлементамиФормы();

	МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьДоступностьЭлементовПоСтатусу();

	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
		Если ТекущийЭлемент <> Неопределено Тогда
			Если ТекущийЭлемент.Имя = "КонтактноеЛицо" Тогда
				Объект.КонтактноеЛицо = ВыбранноеЗначение;
			ИначеЕсли ТекущийЭлемент.Имя = "ФИОРуководителяКонтрагента" Тогда
				Объект.ФИОРуководителяКонтрагента = Строка(ВыбранноеЗначение);
				ЗаполнитьДолжностьПоВыбранномуЗначению(ВыбранноеЗначение)
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	ТекущийОбъект.НастройкиОтбора = Новый ХранилищеЗначения(КомпоновщикОтбор.ПолучитьНастройки());
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЭтоСверкаМеждуОрганизациями Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФИОРуководителяКонтактноеЛицоНачалоВыбора();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусу();
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОРуководителяКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФИОРуководителяКонтактноеЛицоНачалоВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ДатаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеконтрагента

&НаКлиенте
Процедура ДанныеКонтрагентаРасчетныйДокументПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ДанныеКонтрагента.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.РасчетныйДокумент) Тогда
		
		ЗаполнитьСтрокуПоРасчетномуДокументуСервер(ТекущиеДанные.РасчетныйДокумент,
												ТекущиеДанные.ОписаниеДокумента,
												ТекущиеДанные.ВалютаВзаиморасчетов);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЗакладкиВзаиморасчеты

&НаКлиенте
Процедура ПоказатьРасчетыПриИзменении(Элемент)
	
	Если ПоказатьГруппировкиРасчеты 
		И Элементы.ГруппировкиРасчеты.ТекущиеДанные = Неопределено Тогда
		Для Каждого Строка Из Объект.ГруппировкиРасчеты Цикл
			Если Строка.ОбъектРасчетов = ОтборРасчеты Тогда
				Элементы.ГруппировкиРасчеты.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ГруппировкиРасчеты.Количество() > 0
		И Элементы.ГруппировкиРасчеты.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ГруппировкиРасчеты.ТекущиеДанные.ТипРасчетов)
		И ЗначениеЗаполнено(Элементы.ГруппировкиРасчеты.ТекущиеДанные.ОбъектРасчетов)
		И ЗначениеЗаполнено(Элементы.ГруппировкиРасчеты.ТекущиеДанные.Партнер)
		И ЗначениеЗаполнено(Элементы.ГруппировкиРасчеты.ТекущиеДанные.Валюта) Тогда
	
		ПараметрыОтбора = ПараметрыОтбораДетализации("Расчеты");
		ПереключитьНаДетализацию(ПараметрыОтбора);
		
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоВзаиморасчетам(
			Элементы.ГруппировкиРасчеты.ТекущиеДанные,
			Объект.ДетальныеЗаписиРасчеты);
			
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоВзаиморасчетам(
			Элементы.ГруппировкиРасчеты.ТекущиеДанные,
			Объект.ДетальныеЗаписиРасчеты,
			Истина);
		
	Иначе
		ПоказатьГруппировкиРасчеты = НЕ ПоказатьГруппировкиРасчеты;
		Если Элементы.ГруппировкиРасчеты.ВыделенныеСтроки.Количество() 
			И Элементы.ГруппировкиРасчеты.ТекущиеДанные <> Неопределено
			И НЕ ЗначениеЗаполнено(Элементы.ГруппировкиРасчеты.ТекущиеДанные.ОбъектРасчетов) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен объект расчетов'"),
				,
				СтрШаблон("Объект.ГруппировкиРасчеты[%1].ОбъектРасчетов", Формат(Элементы.ГруппировкиРасчеты.ТекущаяСтрока, "ЧН=0; ЧГ=0")),
				"Объект");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыНачальноеСальдоПриИзменении(Элемент)
	
	ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоВзаиморасчетам(
		Элементы.ГруппировкиРасчеты.ТекущиеДанные,
		Объект.ДетальныеЗаписиРасчеты);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ГруппировкиРасчетыНачальныйОстатокАвансРеглПриИзменении(Элемент)
	
	ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоВзаиморасчетам(
		Элементы.ГруппировкиРасчеты.ТекущиеДанные,
		Объект.ДетальныеЗаписиРасчеты,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыОбъектРасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Попытка
		ЗаблокироватьДанныеФормыДляРедактирования();
	Исключение
		ПоказатьПредупреждение(Неопределено, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	СтрокаТаблицы = Элементы.ГруппировкиРасчеты.ТекущиеДанные;
	
	ЗначенияОтбора = Новый Структура;
	ЗначенияОтбора.Вставить("ТипРасчетов", СтрокаТаблицы.ТипРасчетов);
	ЗначенияОтбора.Вставить("Организация", Объект.Организация);
	ЗначенияОтбора.Вставить("Контрагент",  Объект.Контрагент);
	ЗначенияОтбора.Вставить("ПлатежиПо275ФЗ" , Ложь);
	
	Если ТипЗнч(ЗначенияОтбора.Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		ЗначенияОтбора.Вставить("Партнер", ПредопределенноеЗначение("Справочник.Партнеры.НашеПредприятие"));
	Иначе
		ЗначенияОтбора.Вставить("Партнер", СтрокаТаблицы.Партнер);
	КонецЕсли;
	
	НастройкиВыбора = Новый Структура;
	НастройкиВыбора.Вставить("ВыборОснованияПлатежа", Ложь);
	НастройкиВыбора.Вставить("РедактируемыйДокумент", Объект.Ссылка);
	НастройкиВыбора.Вставить("Сумма", 0);
	НастройкиВыбора.Вставить("Отбор", ЗначенияОтбора);
	НастройкиВыбора.Вставить("ПодборДебиторскойЗадолженности", Истина);
	НастройкиВыбора.Вставить("ВернутьСтруктуру", Истина);
	НастройкиВыбора.Вставить("ТекущаяСтрока", СтрокаТаблицы.ОбъектРасчетов);
	
	ОткрытьФорму("Справочник.ОбъектыРасчетов.ФормаВыбора", НастройкиВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыОбъектРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ГруппировкиРасчеты.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ТекущиеДанные.ОбъектРасчетов = ВыбранноеЗначение.ОбъектРасчетов;
		ТекущиеДанные.Партнер = ВыбранноеЗначение.Партнер;
		ТекущиеДанные.Договор = ВыбранноеЗначение.Договор;
		ТекущиеДанные.Валюта = ВыбранноеЗначение.ВалютаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Индекс = 0;
		Пока Индекс < Объект.ДетальныеЗаписиРасчеты.Количество() Цикл
			Запись = Объект.ДетальныеЗаписиРасчеты[0];
			Если ТекущиеДанные.ТипРасчетов = Запись.ТипРасчетов 
				И ТекущиеДанные.ОбъектРасчетов = Запись.ОбъектРасчетов Тогда
				Объект.ДетальныеЗаписиРасчеты.Удалить(Запись);
				Продолжить;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасчетыОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ДетальныеЗаписиРасчеты.ИзменятьСоставСтрок = Ложь;
	Элементы.ДетальныеЗаписиРасчеты.ОтборСтрок = Неопределено;
	ДеталиОбъектаРасчета = "";
	ДоступныИтоги = ДоступныИтогиРасчетовБезОтбораПоОбъектуРасчетов();
	Элементы.ГруппаИтогоРасчеты.Видимость = ДоступныИтоги;
	Если ДоступныИтоги Тогда
		ИменаПолейИтогов = "СуммаДолг,СуммаДолгРегл,СуммаАванс,СуммаАвансРегл";
		Отбор = Новый Структура;
		ПересчитатьИтогиПоОбъектуРасчетовНаКлиенте("ДетальныеЗаписиРасчеты", Отбор, ИменаПолейИтогов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборРасчетыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ГруппировкиРасчеты.Количество() > 0 Тогда
		ВключитьОтборДетальныхЗаписей("Расчеты", "ОбъектРасчетов", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено И Элемент.ОтборСтрок <> Неопределено Тогда
		Элемент.ТекущиеДанные.ОбъектРасчетов = Элемент.ОтборСтрок.ОбъектРасчетов;
		Элемент.ТекущиеДанные.ТипРасчетов = Элемент.ОтборСтрок.ТипРасчетов;
		Элемент.ТекущиеДанные.Партнер = Элемент.ОтборСтрок.Партнер;
		Элемент.ТекущиеДанные.Договор = Элемент.ОтборСтрок.Договор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыПослеУдаления(Элемент)
	ИменаПолейИтогов = "СуммаДолг,СуммаДолгРегл,СуммаАванс,СуммаАвансРегл";
	Отбор = Новый Структура("ОбъектРасчетов", ОтборРасчеты);
	ПересчитатьИтогиПоОбъектуРасчетовНаКлиенте("ДетальныеЗаписиРасчеты", Отбор, ИменаПолейИтогов);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаДолгПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаДолгРеглПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаДолгОчистка(Элемент, СтандартнаяОбработка)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаАвансПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаАвансРеглПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаАвансОчистка(Элемент, СтандартнаяОбработка)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаДолгКонтрагентПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаДолгКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаАвансКонтрагентПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыСуммаАвансКонтрагентОчистка(Элемент, СтандартнаяОбработка)
	РассчитатьСуммуВзаиморасчетов(Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные, "Контрагент");
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыРасчетныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		ДанныеДокумента = РасчетныйДокументОбработкаВыбораНаСеврере(ВыбранноеЗначение);
		ТекущиеДанные = Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДоговорНачалоВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДоговорНачалоВыбора(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыДоговорАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор = ОтборПоискаДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиРасчетыДоговорОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор = ОтборПоискаДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыДоговорАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор = ОтборПоискаДоговора();
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиРасчетыДоговорОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.Отбор = ОтборПоискаДоговора();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЗакладкиФинансовыеИнструменты

&НаКлиенте
Процедура ПоказатьФинансовыеИнструментыПриИзменении(Элемент)
	
	Если ПоказатьГруппировкиФинансовыеИнструменты 
		И Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные = Неопределено Тогда
		Для Каждого Строка Из Объект.ГруппировкиФинансовыеИнструменты Цикл
			Если Строка.Договор = ОтборФинансовыеИнструменты Тогда
				Элементы.ГруппировкиФинансовыеИнструменты.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ГруппировкиФинансовыеИнструменты.Количество() > 0
		И Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные <> Неопределено
		И ЗначениеЗаполнено(Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные.Валюта) Тогда
		
		ПараметрыОтбора = ПараметрыОтбораДетализации("ФинансовыеИнструменты");
		ПереключитьНаДетализацию(ПараметрыОтбора);
		
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоФинансовымИнструментам(
			Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные,
			Объект.ДетальныеЗаписиФинансовыеИнструменты);
	Иначе
		ПоказатьГруппировкиФинансовыеИнструменты = НЕ ПоказатьГруппировкиФинансовыеИнструменты;
		Если Элементы.ГруппировкиФинансовыеИнструменты.ВыделенныеСтроки.Количество() 
			И Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные <> Неопределено
			И НЕ ЗначениеЗаполнено(Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные.Договор) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Не заполнен договор'"),
				,
				СтрШаблон("Объект.ГруппировкиФинансовыеИнструменты[%1].Договор", Формат(Элементы.ГруппировкиФинансовыеИнструменты.ТекущаяСтрока, "ЧН=0; ЧГ=0")),
				"Объект");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиФинансовыеИнструментыНачальноеСальдоДтПриИзменении(Элемент)
	
	ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоФинансовымИнструментам(
		Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные,
		Объект.ДетальныеЗаписиФинансовыеИнструменты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиФинансовыеИнструментыНачальноеСальдоКтПриИзменении(Элемент)
	
	ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоФинансовымИнструментам(
		Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные,
		Объект.ДетальныеЗаписиФинансовыеИнструменты);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиФинансовыеИнструментыДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		ДанныеДоговора = ДоговорОбработкаВыбораНаСеврере(ВыбранноеЗначение);
		ТекущиеДанные = Элементы.ГруппировкиФинансовыеИнструменты.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДоговора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборФинансовыеИнструментыОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.ДетальныеЗаписиЗаймы.ИзменятьСоставСтрок = Ложь;
	Элементы.ДетальныеЗаписиЗаймы.ОтборСтрок = Неопределено;
	Элементы.ДетальныеЗаписиЛизинг.ИзменятьСоставСтрок = Ложь;
	Элементы.ДетальныеЗаписиЛизинг.ОтборСтрок = Неопределено;
	ДеталиДоговора = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборФинансовыеИнструментыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ГруппировкиФинансовыеИнструменты.Количество() > 0 Тогда
		ВключитьОтборДетальныхЗаписей("ФинансовыеИнструменты", "Договор", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиФинансовыеИнструментыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Индекс = 0;
		Пока Индекс < Объект.ДетальныеЗаписиФинансовыеИнструменты.Количество() Цикл
			Запись = Объект.ДетальныеЗаписиФинансовыеИнструменты[0];
			Если ТекущиеДанные.Договор = Запись.Договор Тогда
				Объект.ДетальныеЗаписиФинансовыеИнструменты.Удалить(Запись);
				Продолжить;
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиЗаймыПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.Договор = ОтборФинансовыеИнструменты;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиЛизингПриИзменении(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Элемент.ТекущиеДанные.Договор = ОтборФинансовыеИнструменты;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиЗаймыРасчетныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		ДанныеДокумента = РасчетныйДокументОбработкаВыбораНаСеврере(ВыбранноеЗначение);
		ТекущиеДанные = Элементы.ДетальныеЗаписиЗаймы.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетальныеЗаписиЛизингРасчетныйДокументОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Тип") Тогда
		ДанныеДокумента = РасчетныйДокументОбработкаВыбораНаСеврере(ВыбранноеЗначение);
		ТекущиеДанные = Элементы.ДетальныеЗаписиЛизинг.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткам(Команда)
	
	ОчиститьСообщения();
	Если ОбновлениеНеЗавершено() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Заполнение документа недоступно, т.к. не завершено обновление системы.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ НоваяАрхитектураВзаиморасчетов Тогда
		Если ЕстьЗаданияКРаспределению() Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.1, Истина);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("РаспределениеПоДокументамЗавершение", ЭтотОбъект);
	ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенныйОтбор(Команда)
	
	ПараметрыОткрытия = ПараметрыФормыРасширенногоОтбора();
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("УстановитьРасширенныйОтборЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.СверкаВзаиморасчетов2_4.Форма.НастройкаОтборов",
	            ПараметрыОткрытия,
	            ЭтаФорма,
	            ,
	            ,
	            , 
	            ОбработчикЗакрытия,
                РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПоДокументамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	Если ЗначениеЗаполнено(Объект.ДанныеКонтрагента) Тогда
		ПараметрыПроверки.ТабличнаяЧасть          = Объект.ДанныеКонтрагента;
		ПараметрыПроверки.ЗаголовокТабличнойЧасти = НСтр("ru = 'Задолженность по данным контрагента'");
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ГруппировкиРасчеты) И ЗначениеЗаполнено(Объект.ГруппировкиФинансовыеИнструменты) Тогда
		ПараметрыПроверки.ТабличнаяЧасть          = Объект.ГруппировкиФинансовыеИнструменты;
		ПараметрыПроверки.ЗаголовокТабличнойЧасти = НСтр("ru = 'Расчеты по финансовым инструментам'");
	Иначе
		ПараметрыПроверки.ТабличнаяЧасть          = Объект.ГруппировкиРасчеты;
		ПараметрыПроверки.ЗаголовокТабличнойЧасти = НСтр("ru = 'Взаиморасчеты'");
	КонецЕсли;
	Если ИспользоватьНесколькоОрганизаций Тогда
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация",  НСтр("ru = 'Организация'"));
	КонецЕсли;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Контрагент",   НСтр("ru = 'Контрагент'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("КонецПериода", НСтр("ru = 'Конец периода'"));
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоОстаткамЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Объект.ДанныеКонтрагента.Очистить();
	Объект.ГруппировкиРасчеты.Очистить();
	Объект.ДетальныеЗаписиРасчеты.Очистить();
	Объект.ГруппировкиФинансовыеИнструменты.Очистить();
	Объект.ДетальныеЗаписиФинансовыеИнструменты.Очистить();
	ЗаполнитьПоОстаткамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьДокумент(Команда)
	
	ПоляСверки = "НачалоПериода,КонецПериода,Организация,Контрагент,КонтактноеЛицо";
	СтруктураОтбор = Новый Структура(ПоляСверки);
	ЗаполнитьЗначенияСвойств(СтруктураОтбор,Объект);
	
	СтруктураПараметры = Новый Структура("Основание", СтруктураОтбор);
	ОткрытьФорму("Документ.СверкаВзаиморасчетов2_5_11.ФормаОбъекта", СтруктураПараметры, ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	ОбщегоНазначенияУТКлиент.РедактироватьПериод(Объект, 
		Новый Структура("ДатаНачала, ДатаОкончания", "НачалоПериода", "КонецПериода"));
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийОбъектРасчетов(Команда)
	
	Если Объект.ГруппировкиРасчеты.Количество() > 0 Тогда
		ПараметрыОтбора = ПараметрыОтбораДетализации("Расчеты");
		УстановитьСледующийОбъект(ПараметрыОтбора, Истина)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СледующийОбъектРасчетов(Команда)
	
	Если Объект.ГруппировкиРасчеты.Количество() > 0 Тогда
		ПараметрыОтбора = ПараметрыОтбораДетализации("Расчеты");
		УстановитьСледующийОбъект(ПараметрыОтбора)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоОбъектуРасчетов(Команда)
	
	Если Объект.ГруппировкиРасчеты.Количество() > 0 
		И Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные <> Неопределено Тогда
		ВыбранноеЗначение = Элементы.ДетальныеЗаписиРасчеты.ТекущиеДанные.ОбъектРасчетов;
		ВключитьОтборДетальныхЗаписей("Расчеты", "ОбъектРасчетов", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийДоговор(Команда)
	
	Если Объект.ГруппировкиФинансовыеИнструменты.Количество() > 0 Тогда
		ПараметрыОтбора = ПараметрыОтбораДетализации("ФинансовыеИнструменты");
		УстановитьСледующийОбъект(ПараметрыОтбора, Истина)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СледующийДоговор(Команда)
	
	Если Объект.ГруппировкиФинансовыеИнструменты.Количество() > 0 Тогда
		ПараметрыОтбора = ПараметрыОтбораДетализации("ФинансовыеИнструменты");
		УстановитьСледующийОбъект(ПараметрыОтбора)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобратьПоДоговору(Команда)
	
	Если Объект.ГруппировкиФинансовыеИнструменты.Количество() > 0 
		И Элементы[ТекущийЭлемент.Имя].ТекущиеДанные <> Неопределено Тогда
		ВыбранноеЗначение = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные.Договор;
		ВключитьОтборДетальныхЗаписей("ФинансовыеИнструменты", "Договор", ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПриИзмененииРеквизитов

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ЭтоСверкаМеждуОрганизациями = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	Партнер = ПартнерКонтрагента(Объект.Контрагент);
	
	Объект.РуководительОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	Объект.ГлавныйБухгалтерОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	Если НЕ ЭтоСверкаМеждуОрганизациями Тогда
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			ДанныеДокумента = Документы.СверкаВзаиморасчетов2_4.РеквизитыПоследнегоДокумента(Объект.Контрагент);
			ЗаполнитьЗначенияСвойств(Объект, ДанныеДокумента, , "ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента,КонтактноеЛицо");
			Если НЕ ЗначениеЗаполнено(Объект.ФИОРуководителяКонтрагента)
			 И НЕ ЗначениеЗаполнено(Объект.ДолжностьРуководителяКонтрагента) Тогда
			 	ЗаполнитьЗначенияСвойств(Объект, ДанныеДокумента, "ФИОРуководителяКонтрагента, ДолжностьРуководителяКонтрагента");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицо)
				ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо,"Владелец") <> Партнер Тогда
				
				Если ЗначениеЗаполнено(ДанныеДокумента.КонтактноеЛицо) Тогда
					Объект.КонтактноеЛицо = ДанныеДокумента.КонтактноеЛицо;
				Иначе
					Объект.КонтактноеЛицо = ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер);
				КонецЕсли;
			КонецЕсли;
			Объект.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
			УправлениеЭлементамиФормы();
			
		Иначе
			
			Объект.КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
			
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			
			ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Объект.Контрагент, Объект.Дата);
			Объект.РуководительОрганизацииКонтрагента = ОтветственныеЛица.РуководительСсылка;
			Объект.ГлавныйБухгалтерОрганизацииКонтрагента = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
			Объект.КонтактноеЛицо = Справочники.Пользователи.ПустаяСсылка();
			УправлениеЭлементамиФормы();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Строка(Объект.КонтактноеЛицо) <> Объект.ФИОРуководителяКонтрагента 
		ИЛИ ЭтоСверкаМеждуОрганизациями Тогда
		Объект.ФИОРуководителяКонтрагента = Неопределено;
		Объект.ДолжностьРуководителяКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДатаПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	ЭтоСверкаМеждуОрганизациями = ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Организации");
	Если ЭтоСверкаМеждуОрганизациями 
		И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОтветственныеЛица = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Объект.Контрагент, Объект.Дата);
		Объект.РуководительОрганизацииКонтрагента = ОтветственныеЛица.РуководительСсылка;
		Объект.ГлавныйБухгалтерОрганизацииКонтрагента = ОтветственныеЛица.ГлавныйБухгалтерСсылка;
	ИначеЕсли НЕ ЭтоСверкаМеждуОрганизациями Тогда
		Объект.РуководительОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
		Объект.ГлавныйБухгалтерОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	Объект.РуководительОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	Объект.ГлавныйБухгалтерОрганизацииКонтрагента = Справочники.ОтветственныеЛицаОрганизаций.ПустаяСсылка();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоПриИзменении(Элемент)
	
	ПоказатьГлавногоБухгалтера = Объект.ОтветственноеЛицо = ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	Элементы.ГлавныйБухгалтер.Видимость = ПоказатьГлавногоБухгалтера;
	Элементы.Руководитель.Видимость = НЕ Элементы.ГлавныйБухгалтер.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственноеЛицоОрганизацииКонтрагентаПриИзменении(Элемент)
	
	ПоказатьГлавногоБухгалтера = Объект.ОтветственноеЛицоОрганизацииКонтрагента = ПредопределенноеЗначение("Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер");
	Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость = ПоказатьГлавногоБухгалтера;
	Элементы.РуководительОрганизацииКонтрагента.Видимость = НЕ Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьРасхожденияПриИзменении(Элемент)
	ЕстьРасхожденияПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВзаиморасчетов(ТекущиеДанные, Суффикс = "")
	
	Если Суффикс = "Контрагент" Тогда
		ИмяКолонкиСуммаДолг           = "СуммаДолгКонтрагент";
		ИмяКолонкиСуммаАванс          = "СуммаАвансКонтрагент";
		ИмяКолонкиСуммаВзаиморасчетов = "СуммаВзаиморасчетовКонтрагент";
	Иначе
		ИмяКолонкиСуммаДолг           = "СуммаДолг";
		ИмяКолонкиСуммаАванс          = "СуммаАванс";
		ИмяКолонкиСуммаВзаиморасчетов = "СуммаВзаиморасчетов";			
	КонецЕсли;
	
	
	Долг  = ТекущиеДанные[ИмяКолонкиСуммаДолг];
	Аванс = ТекущиеДанные[ИмяКолонкиСуммаАванс];
	ТекущиеДанные[ИмяКолонкиСуммаВзаиморасчетов] = Макс(Долг, -Долг) + Макс(Аванс, -Аванс);
	
	ИменаПолейИтогов = "СуммаДолг,СуммаДолгРегл,СуммаАванс,СуммаАвансРегл";
	Отбор = Новый Структура("ОбъектРасчетов", ОтборРасчеты);
	ПересчитатьИтогиПоОбъектуРасчетовНаКлиенте("ДетальныеЗаписиРасчеты", Отбор, ИменаПолейИтогов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьИтогиПоОбъектуРасчетовНаКлиенте(ИмяТабличнойЧасти, Отбор, ИменаПолейИтогов)
	
	ПоляИтогов = СтрРазделить(ИменаПолейИтогов, ",");
	СтрокиОбъектаРасчетов = Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
	Для Каждого ПолеИтога Из ПоляИтогов Цикл
		ИтогиДетальныхЗаписей[0][ПолеИтога] = 0;
		Для Каждого Строка Из СтрокиОбъектаРасчетов Цикл
			ИтогиДетальныхЗаписей[0][ПолеИтога] = ИтогиДетальныхЗаписей[0][ПолеИтога] + Строка[ПолеИтога];
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РасчетныйДокументОбработкаВыбораНаСеврере(ВыбранноеЗначение)
	
	ДанныеДокумента = Документы.СверкаВзаиморасчетов2_4.ДанныеРасчетногоДокумента(ВыбранноеЗначение);
	ДанныеДокумента.Вставить("ВалютаДокумента", ДанныеДокумента.Валюта);
	ОписаниеДокумента = Документы.СверкаВзаиморасчетов2_4.ОписаниеРасчетногоДокумента(ДанныеДокумента.Ссылка, ДанныеДокумента.Номер, ДанныеДокумента.Дата, ДанныеДокумента.НаименованиеПервичногоДокумента);
	ДанныеДокумента.Вставить("ОписаниеДокумента", ОписаниеДокумента);
	
	Возврат ДанныеДокумента;
	
КонецФункции

&НаСервере
Функция ДоговорОбработкаВыбораНаСеврере(ВыбранноеЗначение)
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыбранноеЗначение, "Партнер, ВалютаВзаиморасчетов, ХарактерДоговора");
	РеквизитыДоговора.Вставить("Валюта", РеквизитыДоговора.ВалютаВзаиморасчетов);
	ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором;
	Если РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Депозит
		ИЛИ РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный Тогда
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором;
		
	ИначеЕсли РеквизитыДоговора.ХарактерДоговора = Перечисления.ХарактерыДоговоровФинансовыхИнструментов.Аренда Тогда
		ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем;
		
	КонецЕсли;
	РеквизитыДоговора.Вставить("ТипРасчетов", ТипРасчетов);
	
	Возврат РеквизитыДоговора;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаКлиенте
Функция ДоступныИтогиРасчетовБезОтбораПоОбъектуРасчетов()
	ТипРасчетов = Неопределено;
	Валюта = Неопределено;
	Для Каждого СтрокаГруппировки Из Объект.ГруппировкиРасчеты Цикл
		Если ТипРасчетов = Неопределено Тогда
			ТипРасчетов = СтрокаГруппировки.ТипРасчетов;
		ИначеЕсли ТипРасчетов <> СтрокаГруппировки.ТипРасчетов Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Валюта = Неопределено Тогда
			Валюта = СтрокаГруппировки.Валюта;
		ИначеЕсли Валюта <> СтрокаГруппировки.Валюта Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ДоговорНачалоВыбора(Элемент)
	Отказ = Ложь;
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),
			,
			"Организация",
			"Объект",
			Отказ);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект",
			Отказ);
	КонецЕсли;
	Если Не Отказ Тогда
		Отбор = ОтборПоискаДоговора();
		Если ЭтоСверкаМеждуОрганизациями Тогда
			ОткрытьФорму(
				"Справочник.ДоговорыМеждуОрганизациями.ФормаВыбора",
				Новый Структура("Отбор", Отбор),
				Элемент);
		Иначе
			ОткрытьФорму(
				"Справочник.ДоговорыКонтрагентов.ФормаВыбора",
				Новый Структура("Отбор", Отбор),
				Элемент);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Функция ОтборПоискаДоговора()
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", Объект.Организация);
	Если ЭтоСверкаМеждуОрганизациями Тогда
		Отбор.Вставить("ОрганизацияПолучатель", Объект.Контрагент);
	Иначе
		Отбор.Вставить("Контрагент", Объект.Контрагент);
	КонецЕсли;
	Возврат Отбор;
КонецФункции

#Область ОбслуживаниеДлительныхОпераций

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	Если ЗначениеЗаполнено(ИдентификаторЗадания) И ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	КонецЕсли;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("РаспределениеПоДокументамЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		ИдентификаторЗадания = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
#Область ДетальныеЗаписиРасчетов

	#Область ЕстьРасхождения
	#Область СуммаДокументаКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыСуммаДокументаКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДокумента");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область СуммаДокументаКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыСуммаВзаиморасчетовКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаВзаиморасчетовКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область СуммаДолгКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыСуммаДолгКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДолгКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДолг");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область СуммаАвансКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыСуммаАвансКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаАвансКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаАванс");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область СуммаВзаиморасчетовКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыСуммаВзаиморасчетовКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаВзаиморасчетовКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаВзаиморасчетов");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	#КонецОбласти

	#Область ОформлениеСинийТекстДт
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыДебетКредит.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	#Область ОтборКлиентыДт
	ГруппаОтбораКлиенты = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораКлиенты.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбораКлиенты.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.ТипРасчетов");
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	ОтборЭлемента = ГруппаОтбораКлиенты.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаАванс");
	#КонецОбласти
	
	#Область ОтборПоставщикиДт
	ГруппаОтбораПоставщики = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПоставщики.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбораПоставщики.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.ТипРасчетов");
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	
	ОтборЭлемента = ГруппаОтбораПоставщики.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаАванс");
	#КонецОбласти
	
	УстановитьОформлениеДтКт(Элемент, "Дт");
	#КонецОбласти

	#Область ОформлениеКрасныйТекстКт
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиРасчетыДебетКредит.Имя);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	#Область ОтборКлиентыКт
	ГруппаОтбораКлиенты = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораКлиенты.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбораКлиенты.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.ТипРасчетов");
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом;
	
	ОтборЭлемента = ГруппаОтбораКлиенты.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаАванс");
	#КонецОбласти
	
	#Область ОтборПоставщикиКт
	ГруппаОтбораПоставщики = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораПоставщики.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбораПоставщики.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.ТипРасчетов");
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;
	
	ОтборЭлемента = ГруппаОтбораПоставщики.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиРасчеты.СуммаАванс");
	#КонецОбласти
	
	УстановитьОформлениеДтКт(Элемент, "Кт");
	#КонецОбласти

#КонецОбласти


#Область ДетальныеЗаписиФинансовыхИнструментов

	#Область ЕстьРасхождения
	#Область ОсновнойДолгКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЗаймыСуммаКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолгКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область ПроцентыКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ПроцентыКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область КомиссияКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.КомиссияКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область АрендныеОбязательстваКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингАрендныеОбязательстваКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательстваКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область ОбеспечительныйПлатежКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингОбеспечительныйПлатежКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатежКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область УслугаПоАрендеКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингУслугаПоАрендеКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАрендеКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	
	#Область ВыкупнаяСтоимостьКонтрагент
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингВыкупнаяСтоимостьКонтрагент.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимостьКонтрагент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветНедоступногоТекста);
	#КонецОбласти
	#КонецОбласти

	#Область ОформлениеСинийТекстДт
	
	#Область ОтборВсеСуммыБольшеНуля
	
	#Область ЗаймыДебетКредит
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЗаймыДебетКредит.Имя);
	
	// КредитыДепозиты >= 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Лизинг = 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	УстановитьОформлениеДтКт(Элемент, "Дт");
	#КонецОбласти
	
	#Область ЛизингДебетКредит
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингДебетКредит.Имя);
	
	// КредитыДепозиты = 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Аренда >= 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	УстановитьОформлениеДтКт(Элемент, "Дт");
	#КонецОбласти
	
	#КонецОбласти
	
	УстановитьОформлениеДтКт(Элемент, "Дт");
	#КонецОбласти
	
	#Область ОформлениеКрасныйТекстКт
	
	#Область ОтборВсеСуммыМеньшеНуля
	
	#Область ЗаймыДебетКредит
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЗаймыДебетКредит.Имя);
	
	// КредитыДепозиты <= 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Аренда = 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	УстановитьОформлениеДтКт(Элемент, "Кт");
	#КонецОбласти
	
	#Область ЛизингДебетКредит
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингДебетКредит.Имя);
	
	// КредитыДепозиты = 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Аренда <= 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	УстановитьОформлениеДтКт(Элемент, "Кт");
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти

	#Область ОформлениеЧерныйТекстДтКт
	
	#Область ОтборВсеСуммыБольшеИМеньшеНуля
	
	#Область ЗаймыДебетКредит
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЗаймыДебетКредит.Имя);
	
	// КредитыДепозиты > 0
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	 // И КредитыДепозиты < 0
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Аренда = 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	УстановитьОформлениеДтКт(Элемент, "ДтКт");
	#КонецОбласти
	
	#Область ЛизингДебетКредит
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДетальныеЗаписиЛизингДебетКредит.Имя);
	
	// КредитыДепозиты = 0
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОсновнойДолг");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Проценты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.Комиссия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// Аренда > 0
	ГруппаОтбораИЛИ = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	// И Аренда < 0
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.АрендныеОбязательства");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ОбеспечительныйПлатеж");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.УслугаПоАренде");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ДетальныеЗаписиФинансовыеИнструменты.ВыкупнаяСтоимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	УстановитьОформлениеДтКт(Элемент, "ДтКт");
	#КонецОбласти
	
	#КонецОбласти
	
	#КонецОбласти

#КонецОбласти

КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеДтКт(Элемент, ВидСчета)
	
	Если ВидСчета = "Дт" Тогда
		ТекстПоля = НСтр("ru = 'Дт'");
		ЦветТекста = ЦветаСтиля.ЦветТекстаДебета;
		ГоризонтальноеПоложениеТекста =  ГоризонтальноеПоложение.Лево;
	ИначеЕсли ВидСчета = "Кт" Тогда
		ТекстПоля = НСтр("ru = 'Кт'");
		ЦветТекста = ЦветаСтиля.ЦветТекстаКредита;
		ГоризонтальноеПоложениеТекста =  ГоризонтальноеПоложение.Право;
	ИначеЕсли ВидСчета = "ДтКт" Тогда
		ТекстПоля = НСтр("ru = 'Дт/Кт'");
		ЦветТекста = Неопределено;
		ГоризонтальноеПоложениеТекста =  ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ТекстПоля);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	Элемент.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложениеТекста);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусу()
	
	ТолькоПросмотрЭлементов = (Объект.Статус = Перечисления.СтатусыСверокВзаиморасчетов.Сверена);
	
	МассивЭлементов = Новый Массив();
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("Дата");
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("НачалоПериода");
	МассивЭлементов.Добавить("КонецПериода");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("ЕстьРасхождения");
	МассивЭлементов.Добавить("НастройкиФильтров");
	МассивЭлементов.Добавить("ФормаЗаполнитьПоОстаткам");
		
	// Группы элементов управления
	МассивЭлементов.Добавить("ШапкаДетальныеЗаписи");
	МассивЭлементов.Добавить("ЗаписиРасчеты");
	МассивЭлементов.Добавить("ШапкаФинансовыеИнструментыДетальныеЗаписи");
	МассивЭлементов.Добавить("ЗаписиФинансовыеИнструменты");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", ТолькоПросмотрЭлементов);
	
	МассивЭлементов = Новый Массив();             
	
	// Элементы управления шапки
	МассивЭлементов.Добавить("УстановитьИнтервал");
	МассивЭлементов.Добавить("ДанныеКонтрагентаКомандаЗаполнитьПоОстаткам");
	МассивЭлементов.Добавить("РасчетыКомандаЗаполнитьПоОстаткам");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", НЕ ТолькоПросмотрЭлементов);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Элементы.ШапкаДетальныеЗаписи.Видимость = НЕ ПоказатьГруппировкиРасчеты;
	Элементы.ШапкаФинансовыеИнструментыДетальныеЗаписи.Видимость = НЕ ПоказатьГруппировкиФинансовыеИнструменты;
	
	Если ПоказатьГруппировкиРасчеты Тогда
		Элементы.ЗаписиРасчеты.ТекущаяСтраница = Элементы.СтраницаГруппировкиРасчеты;
	Иначе
		Элементы.ЗаписиРасчеты.ТекущаяСтраница = Элементы.СтраницаДетальныеЗаписиРасчеты;
	КонецЕсли;
	
	ЕстьКомиссия = ЕстьСуммы("ДетальныеЗаписиФинансовыеИнструменты", "Комиссия");
	ЕстьВыкупПредметовАренды = ЕстьСуммы("ДетальныеЗаписиФинансовыеИнструменты", "ВыкупнаяСтоимость");
	Если ПоказатьГруппировкиФинансовыеИнструменты Тогда
		Элементы.ЗаписиФинансовыеИнструменты.ТекущаяСтраница = Элементы.СтраницаГруппировкиФинансовыеИнструменты;
	Иначе
		Элементы.ЗаписиФинансовыеИнструменты.ТекущаяСтраница = Элементы.СтраницаДетальныеЗаписиФинансовыеИнструменты;
		Если ТипЗнч(ОтборФинансовыеИнструменты) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
			Элементы.СтраницыДетальныеЗаписиЗаймыЛизинг.ТекущаяСтраница = Элементы.СтраницаДетальныеЗаписиЗаймы;
			Элементы.ИтогКомиссия.Видимость = ЕстьКомиссия;
		Иначе
			Элементы.СтраницыДетальныеЗаписиЗаймыЛизинг.ТекущаяСтраница = Элементы.СтраницаДетальныеЗаписиЛизинг;
			Элементы.ИтогВыкупнаяСтоимость.Видимость = ЕстьВыкупПредметовАренды;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДетальныеЗаписиРасчетыСуммаДокумента.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиРасчетыСуммаДокументаКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиРасчетыВзаиморасчеты.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЗаймыСумма.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЗаймыСуммаКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЗаймыСуммаПроценты.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЗаймыСуммаКомиссия.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингАрендныеОбязательства.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингАрендныеОбязательстваКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингОбеспечительныйПлатеж.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингОбеспечительныйПлатежКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингУслугаПоАренде.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингУслугаПоАрендеКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингВыкупнаяСтоимость.ОтображатьВШапке = Объект.ЕстьРасхождения;
	Элементы.ДетальныеЗаписиЛизингВыкупнаяСтоимостьКонтрагент.ОтображатьВШапке = Объект.ЕстьРасхождения;
	
	Элементы.ГлавныйБухгалтер.Видимость = Объект.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
	Элементы.Руководитель.Видимость = НЕ Элементы.ГлавныйБухгалтер.Видимость;
	Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость = Объект.ОтветственноеЛицоОрганизацииКонтрагента = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
	Элементы.РуководительОрганизацииКонтрагента.Видимость = НЕ Элементы.ГлавныйБухгалтерОрганизацииКонтрагента.Видимость;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПоказатьТипРасчетов", НЕ Объект.РазбиватьПоТипамРасчетов);
	СтруктураПараметров.Вставить("ПоказатьПартнера", НЕ Объект.РазбиватьПоПартнерам);
	СтруктураПараметров.Вставить("ПоказатьДоговор", НЕ Объект.РазбиватьПоДоговорам);
	СтруктураПараметров.Вставить("ЕстьРасхождения", Объект.ЕстьРасхождения);
	СтруктураПараметров.Вставить("ЕстьКомиссия", ЕстьКомиссия);
	СтруктураПараметров.Вставить("ЕстьВыкупПредметовАренды", ЕстьВыкупПредметовАренды);
	//++ Локализация
	//СтараяСверка
	СтруктураПараметров.Вставить("РасшифровкаПоЗаказам", Объект.РасшифровкаПоЗаказам);
	СтруктураПараметров.Вставить("РасшифровкаПоПартнерам", Объект.РасшифровкаПоПартнерам);
	СтруктураПараметров.Вставить("РасшифровкаПоДоговорам", Объект.РасшифровкаПоДоговорам);
	//-- Локализация
	
	Документы.СверкаВзаиморасчетов2_4.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		СтруктураПараметров, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	УстановитьВидимость();
	УстановитьДоступностьЭлементовПоСтатусу();
	
	Элементы.ГруппаДанныеКонтрагента.Видимость = Не ЭтоСверкаМеждуОрганизациями;
	Элементы.ГруппаДанныеОрганизацииКонтрагента.Видимость = ЭтоСверкаМеждуОрганизациями;
	Элементы.СтраницаФинансовыеИнструменты.Видимость = Не ЭтоСверкаМеждуОрганизациями;
	
	Если ЭтоСверкаМеждуОрганизациями Тогда
		Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(Новый Массив);
		Элементы.ГруппировкиРасчетыДоговор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями");
		Элементы.ДетальныеЗаписиРасчетыДоговор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыМеждуОрганизациями");
	Иначе
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Партнер"));
		Элементы.КонтактноеЛицо.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивПараметров);
		Элементы.ГруппировкиРасчетыДоговор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
		Элементы.ДетальныеЗаписиРасчетыДоговор.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОстаткамСервер()
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ДокументОбъект.НастройкиОтбора = Новый ХранилищеЗначения(КомпоновщикОтбор.ПолучитьНастройки());
	Документы.СверкаВзаиморасчетов2_4.ЗаполнитьДанныеПоРасчетам(ДокументОбъект);
	ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
	
	УстановитьВидимостьСтраницСверки();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуПоРасчетномуДокументуСервер(ДокументСсылка, ОписаниеДокумента, ВалютаВзаиморасчетов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Организация, Объект.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
								"ПолноеНаименование");
	СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(Объект.Контрагент,  Объект.Дата);
	КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
							  "ПолноеНаименование");
	
	СтруктураПредставленийУчастников = Новый Структура;
	СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
	
	ЭтоВходящийДокумент = ДокументСсылка.Метаданные().Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено;
	ЭтоДокументИнтеркампани = ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями");
	ЭтоДоговор = ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		Или ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями");
	
	СтрокаРеквизитов = "Номер, Дата, " + ?(ЭтоДоговор,"ВалютаВзаиморасчетов","Валюта");
	
	Если ЭтоВходящийДокумент Тогда
		
		СтрокаРеквизитов = СтрокаРеквизитов + ", НомерВходящегоДокумента, ДатаВходящегоДокумента, НаименованиеВходящегоДокумента";
		Если ЭтоДокументИнтеркампани Тогда
			СтрокаРеквизитов = СтрокаРеквизитов + "Организация";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтрокаРеквизитов);
	ПредставлениеДокумента = "";
	Если ЗначениеЗаполнено(ЗначенияРеквизитов.Номер) Тогда
		
		Если ЭтоВходящийДокумент Тогда
			ПредставлениеДокумента = ЗначенияРеквизитов.НаименованиеВходящегоДокумента;
			Если Не ЭтоДокументИнтеркампани
				Или (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
					И ЗначенияРеквизитов.Организация = Объект.Организация)
				Или (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
					И ЗначенияРеквизитов.Организация <> Объект.Организация) Тогда
				
				ЗначенияРеквизитов.Номер = ЗначенияРеквизитов.НомерВходящегоДокумента;
				ЗначенияРеквизитов.Дата  = ЗначенияРеквизитов.ДатаВходящегоДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОписаниеДокумента = Документы.СверкаВзаиморасчетов2_4.ОписаниеРасчетногоДокумента(ДокументСсылка,
			ЗначенияРеквизитов.Номер, ЗначенияРеквизитов.Дата, ПредставлениеДокумента);
		ВалютаВзаиморасчетов = ?(ЭтоДоговор,ЗначенияРеквизитов.ВалютаВзаиморасчетов,ЗначенияРеквизитов.Валюта);
		
	КонецЕсли;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПартнерКонтрагента(Контрагент)
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Организации") Тогда
		Возврат Справочники.Партнеры.НашеПредприятие;
	ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Партнер");
	Иначе
		Возврат Справочники.Партнеры.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ФИОРуководителяКонтактноеЛицоНачалоВыбора()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Отбор = Новый Структура("Владелец", Партнер);
		ОткрытьФорму("Справочник.КонтактныеЛицаПартнеров.ФормаВыбора",
			Новый Структура("Отбор", Отбор),
			ЭтаФорма);
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Контрагент",
			"Объект");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДолжностьПоВыбранномуЗначению(КонтактноеЛицо)
	Объект.ДолжностьРуководителяКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо,"ДолжностьПоВизитке");
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Функция ПараметрыОтбораДетализации(ВидРасчетов)
	
	ЭтоРасчеты = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчеты;
	
	Если ВидРасчетов = "Расчеты" Тогда
		ИмяТабличнойЧастиДетальныеЗаписи = "ДетальныеЗаписиРасчеты";
		ИмяТабличнойЧастиГруппировки     = "ГруппировкиРасчеты";
		ИмяРеквизитаПоказатьГруппировки  = "ПоказатьГруппировкиРасчеты";
	ИначеЕсли ВидРасчетов = "ФинансовыеИнструменты" Тогда
		ИмяТабличнойЧастиДетальныеЗаписи = "ДетальныеЗаписиФинансовыеИнструменты";
		ИмяТабличнойЧастиГруппировки     = "ГруппировкиФинансовыеИнструменты";
		ИмяРеквизитаПоказатьГруппировки  = "ПоказатьГруппировкиФинансовыеИнструменты";
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	
	ПараметрыОтбора.Вставить("ТабличнаяЧасть", ИмяТабличнойЧастиДетальныеЗаписи);
	ПараметрыОтбора.Вставить("ТаблицаФормы",   ИмяТабличнойЧастиДетальныеЗаписи);
	ПараметрыОтбора.Вставить("ПолеОтбора", "ОбъектРасчетов");
	ПараметрыОтбора.Вставить("ДеталиГруппировки", "ДеталиОбъектаРасчета");
	ПараметрыОтбора.Вставить("ЗначениеОтбора", Неопределено);
	ПараметрыОтбора.Вставить("ПолеЗначенияОтбора", "ОтборРасчеты");
	ПараметрыОтбора.Вставить("ПоляИтогов", "СуммаДолг,СуммаДолгРегл,СуммаАванс,СуммаАвансРегл");
	ПараметрыОтбора.Вставить("Договор", Объект.Договор);
	Если НЕ ЭтоРасчеты Тогда
		ПараметрыОтбора.Вставить("ТаблицаФормы", "ДетальныеЗаписиЗаймы");
		ПараметрыОтбора.Вставить("ПолеОтбора", "Договор");
		ПараметрыОтбора.Вставить("ПолеЗначенияОтбора", "ОтборФинансовыеИнструменты");
		ПараметрыОтбора.Вставить("ДеталиГруппировки", "ДеталиДоговора");
		ПараметрыОтбора.Вставить("ПоляИтогов", "ОсновнойДолг,Проценты,Комиссия");
	КонецЕсли;
	
	Если Элементы[ИмяТабличнойЧастиГруппировки].ТекущиеДанные = Неопределено Тогда
		Элементы[ИмяТабличнойЧастиГруппировки].ТекущаяСтрока = Объект[ИмяТабличнойЧастиГруппировки][0].ПолучитьИдентификатор();
	КонецЕсли;
	ПараметрыОтбора.Вставить("ТаблицаГруппировки", ИмяТабличнойЧастиГруппировки);
	ТекущиеДанные = Элементы[ИмяТабличнойЧастиГруппировки].ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыОтбора.Вставить("Отбор", Новый Структура);
		Если ЭтоРасчеты Тогда
			ПараметрыОтбора.Отбор.Вставить("ОбъектРасчетов", ТекущиеДанные.ОбъектРасчетов);
			ПараметрыОтбора.Отбор.Вставить("ТипРасчетов", ТекущиеДанные.ТипРасчетов);
			ПараметрыОтбора.Отбор.Вставить("Партнер", ТекущиеДанные.Партнер);
			ПараметрыОтбора.Отбор.Вставить("Договор", ТекущиеДанные.Договор);
			ПараметрыОтбора.Вставить("ЗначениеОтбора", ТекущиеДанные.ОбъектРасчетов);
		Иначе
			ПараметрыОтбора.Отбор.Вставить("Договор", ТекущиеДанные.Договор);
			ПараметрыОтбора.Вставить("ЗначениеОтбора", ТекущиеДанные.Договор);
			Если ЗначениеЗаполнено(Объект.Договор) Тогда
				ПараметрыОтбора.Вставить("ЗначениеОтбора", Объект.Договор);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ТипРасчетов) Тогда
			ПараметрыОтбора.Вставить("ТипРасчетов", ТекущиеДанные.ТипРасчетов);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
			ПараметрыОтбора.Вставить("Партнер", ТекущиеДанные.Партнер);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			ПараметрыОтбора.Вставить("Договор", ТекущиеДанные.Договор);
		КонецЕсли;
	Иначе

		ЭтаФорма[ИмяРеквизитаПоказатьГруппировки] = НЕ ЭтаФорма[ИмяРеквизитаПоказатьГруппировки];
		
		ТекстНеВыбранОбъектРасчетов = НСтр("ru = 'Не выбран объект расчетов на закладке ""Объекты расчетов""'");
		ТекстНеВыбранДоговор = НСтр("ru = 'Не выбран договор на закладке ""Договоры""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			?(ЭтоРасчеты, ТекстНеВыбранОбъектРасчетов, ТекстНеВыбранДоговор),
			,
			ИмяТабличнойЧастиГруппировки,
			"Объект");
		ПараметрыОтбора = Неопределено;
	КонецЕсли;

	Возврат ПараметрыОтбора;
	
КонецФункции

&НаСервере
Процедура ПереключитьНаДетализацию(ПараметрыОтбора)
	
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВсеОбъектыОтбора = Объект[ПараметрыОтбора.ТаблицаГруппировки].Выгрузить();
	ВсеОбъектыОтбора.Свернуть(ПараметрыОтбора.ПолеОтбора);
	ВсеОбъектыОтбора.Сортировать(ПараметрыОтбора.ПолеОтбора);
	ВсеОбъектыОтбора = ВсеОбъектыОтбора.ВыгрузитьКолонку(ПараметрыОтбора.ПолеОтбора);
	СписокВыбора = Элементы[ПараметрыОтбора.ПолеЗначенияОтбора].СписокВыбора;
	СписокВыбора.Очистить();
	СписокВыбора.ЗагрузитьЗначения(ВсеОбъектыОтбора);
	
	УстановитьОтборДетализации(ПараметрыОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтборДетальныхЗаписей(ВидРасчетов, ПолеОтбора, ЗначениеОтбора)
	
	ПараметрыОтбора = ПараметрыОтбораДетализации(ВидРасчетов);
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора.ЗначениеОтбора = ЗначениеОтбора;
	ПараметрыОтбора.Отбор = Новый Структура(ПолеОтбора, ЗначениеОтбора);
	УстановитьСледующийОбъект(ПараметрыОтбора, Неопределено);
	
	Если ВидРасчетов = "Расчеты" Тогда
		Элементы.ДетальныеЗаписиРасчеты.ИзменятьСоставСтрок = Истина;
	Иначе
		Элементы.ДетальныеЗаписиЗаймы.ИзменятьСоставСтрок = Истина;
		Элементы.ДетальныеЗаписиЛизинг.ИзменятьСоставСтрок = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДетализации(ПараметрыОтбора)
	
	Если ПараметрыОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ПараметрыОтбора.ПолеЗначенияОтбора] = ПараметрыОтбора.ЗначениеОтбора;
	Элементы[ПараметрыОтбора.ТаблицаФормы].ОтборСтрок = Новый ФиксированнаяСтруктура(ПараметрыОтбора.Отбор);
	
	ДеталиОбъекта = Новый Структура("ТипРасчетов, Партнер, Договор");
	ЗаполнитьЗначенияСвойств(ДеталиОбъекта, ПараметрыОтбора.Отбор);
	Если ЗначениеЗаполнено(Объект.ТипРасчетов) Тогда
		ДеталиОбъекта.Вставить("ТипРасчетов", Объект.ТипРасчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ДеталиОбъекта.Вставить("Партнер", Объект.Партнер);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ДеталиОбъекта.Вставить("Договор", Объект.Договор);
	КонецЕсли;
	
	ЭтоРасчеты = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчеты;
	ДеталиГруппировки = Строка(ДеталиОбъекта.Партнер);
	Если ЗначениеЗаполнено(ДеталиОбъекта.Договор) И ЭтоРасчеты Тогда
		ДеталиГруппировки = ДеталиГруппировки + ?(НЕ ПустаяСтрока(ДеталиГруппировки),"; ","") + Строка(ДеталиОбъекта.Договор);
	КонецЕсли;
	ЭтаФорма[ПараметрыОтбора.ДеталиГруппировки] = ДеталиГруппировки;
	
	ПересчитатьИтогиПоОбъектуРасчетовНаСервере(ПараметрыОтбора.ТабличнаяЧасть, ПараметрыОтбора.Отбор, ПараметрыОтбора.ПоляИтогов);
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСледующийОбъект(ТекущийОтбор, ВОбратномНаправлении = Ложь)
	
	Если ТекущийОтбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаИтогоРасчеты.Видимость = Истина;
	ВГраница = Объект[ТекущийОтбор.ТаблицаГруппировки].Количество() - 1;
	НайденныеСтроки = Объект[ТекущийОтбор.ТаблицаГруппировки].НайтиСтроки(ТекущийОтбор.Отбор);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Индекс = Объект[ТекущийОтбор.ТаблицаГруппировки].Индекс(НайденныеСтроки[0]);
	
	НовыйИндекс = Индекс;
	Если ВОбратномНаправлении <> Неопределено Тогда
		НовыйИндекс = ?(ВОбратномНаправлении, Индекс-1, Индекс+1);
	КонецЕсли;
	Если НовыйИндекс < 0 Тогда
		НовыйИндекс = ВГраница;
	КонецЕсли;
	Если НовыйИндекс > ВГраница Тогда
		НовыйИндекс = 0;
	КонецЕсли;
	
	НовыеДанные = Объект[ТекущийОтбор.ТаблицаГруппировки][НовыйИндекс];
	ТекущийОтбор.Отбор[ТекущийОтбор.ПолеОтбора] = НовыеДанные[ТекущийОтбор.ПолеОтбора];
	ТекущийОтбор.ЗначениеОтбора = НовыеДанные[ТекущийОтбор.ПолеОтбора];
	Если НовыеДанные <> Неопределено Тогда
		ТаблицаФормы = Элементы[ТекущийОтбор.ТаблицаГруппировки]; // ТаблицаФормы -
		ТаблицаФормы.ТекущаяСтрока = НовыеДанные.ПолучитьИдентификатор();
		
		Если ТипЗнч(ТекущийОтбор.ЗначениеОтбора) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
			ТекущийОтбор.ТаблицаФормы = "ДетальныеЗаписиЗаймы";
			ТекущийОтбор.ПоляИтогов = "ОсновнойДолг,Проценты,Комиссия";
		КонецЕсли;
		
		//Добавим отборы по текущей строке, если нет отбора в целом для всего документа
		Если ТекущийОтбор.ТабличнаяЧасть <> "ДетальныеЗаписиФинансовыеИнструменты" Тогда
			Если НЕ ЗначениеЗаполнено(Объект.ТипРасчетов) Тогда
				ТекущийОтбор.Отбор.Вставить("ТипРасчетов", НовыеДанные.ТипРасчетов);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
				ТекущийОтбор.Отбор.Вставить("Партнер", НовыеДанные.Партнер);
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
			ТекущийОтбор.Отбор.Вставить("Договор", НовыеДанные.Договор);
		КонецЕсли;
		
		УстановитьОтборДетализации(ТекущийОтбор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыРасширенногоОтбора()
	
	ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
	Если ОтборДоговорыБезОборотов = Неопределено Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов", Истина);
		ОтборДоговорыБезОборотов = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(КомпоновщикОтбор.Настройки.Отбор, "ДоговорыБезОборотов");
		ОтборДоговорыБезОборотов.Представление = НСтр("ru = 'Включать договора без оборотов в периоде'");
	КонецЕсли;
	
	Равно = ВидСравненияКомпоновкиДанных.Равно;
	ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Организация", Объект.Организация, Равно);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "Партнер");
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер", Партнер, Равно);
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент",,, Ложь);
		Иначе
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент", Объект.Контрагент, Равно);
			ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер",,, Ложь);
		КонецЕсли;
	Иначе
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Контрагент", Объект.Контрагент, Равно);
	КонецЕсли;
	Если Объект.РазбиватьПоТипамРасчетов Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ТипРасчетов", Объект.ТипРасчетов, Равно);
	КонецЕсли;
	Если Объект.РазбиватьПоПартнерам Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Партнер", Объект.Партнер, Равно);
	КонецЕсли;
	Если Объект.РазбиватьПоДоговорам Тогда
		ФинансоваяОтчетностьСервер.УстановитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Договор", Объект.Договор, Равно);
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

&НаКлиенте
Процедура УстановитьРасширенныйОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборыНаСервере(Результат.НастройкиОтбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыНаСервере(Знач НастройкиОтбора)
	
	Модифицированность = НЕ КомпоновкаДанныхКлиентСервер.ИспользуемыеОтборыРавны(КомпоновщикОтбор.Настройки, НастройкиОтбора);
	
	КонтрагентДоИзменения = Объект.Контрагент;
	
	УстановитьРеквизитПоЗначениюОтбора("ТипРасчетов", НастройкиОтбора);
	УстановитьРеквизитПоЗначениюОтбора("Партнер", НастройкиОтбора);
	УстановитьРеквизитПоЗначениюОтбора("Договор", НастройкиОтбора);
	Если ИспользоватьНесколькоОрганизаций Тогда
		УстановитьРеквизитПоЗначениюОтбора("Организация", НастройкиОтбора);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтбора.Отбор,"Партнер",,ВидСравненияКомпоновкиДанных.Равно);
		Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
			Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ЭлементОтбора.ПравоеЗначение);
			Объект.Контрагент = Контрагент; 
		Иначе
			ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтбора.Отбор,"ОрганизацияКонтрагент",,ВидСравненияКомпоновкиДанных.Равно);
			Если ЭлементОтбора <> Неопределено И ЭлементОтбора.Использование Тогда
				Объект.Контрагент = ЭлементОтбора.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	Иначе
		УстановитьРеквизитПоЗначениюОтбора("Контрагент", НастройкиОтбора);
	КонецЕсли;
	
	КомпоновщикОтбор.ЗагрузитьНастройки(НастройкиОтбора);
	
	Если КонтрагентДоИзменения <> Объект.Контрагент Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРеквизитПоЗначениюОтбора(ИмяРеквизита, НастройкиОтбора)
	
	Объект[ИмяРеквизита] = Неопределено;
	Если ИмяРеквизита = "ТипРасчетов" Тогда
		Объект["РазбиватьПоТипамРасчетов"] = Ложь;
		
	ИначеЕсли ИмяРеквизита = "Партнер" Тогда
		Объект["РазбиватьПоПартнерам"] = Ложь;
		
	ИначеЕсли ИмяРеквизита = "Договор" Тогда
		Объект["РазбиватьПоДоговорам"] = Ложь;
		
	КонецЕсли;
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтбора.Отбор,ИмяРеквизита,,ВидСравненияКомпоновкиДанных.Равно);
	Если ЭлементОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяРеквизита = "ТипРасчетов" Тогда
		Объект["РазбиватьПоТипамРасчетов"] = ЭлементОтбора.Использование;
		
	ИначеЕсли ИмяРеквизита = "Партнер" Тогда
		Объект["РазбиватьПоПартнерам"] = ЭлементОтбора.Использование;
		
	ИначеЕсли ИмяРеквизита = "Договор" Тогда
		Объект["РазбиватьПоДоговорам"] = ЭлементОтбора.Использование;
		
	КонецЕсли;
		
	Если ЭлементОтбора.Использование Тогда
		Объект[ИмяРеквизита] = ЭлементОтбора.ПравоеЗначение;
	Иначе
		ЭлементОтбора.ПравоеЗначение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьИтогиПоОбъектуРасчетовНаСервере(ИмяТабличнойЧасти, Отбор, ИменаПолейИтогов)
	
	ПоляИтогов = СтрРазделить(ИменаПолейИтогов, ",");
	ДанныеОбъектаРасчетов = Объект[ИмяТабличнойЧасти].Выгрузить().Скопировать(Отбор);
	Для Каждого ПолеИтога Из ПоляИтогов Цикл
		ИтогиДетальныхЗаписей[0][ПолеИтога] = ДанныеОбъектаРасчетов.Итог(ПолеИтога);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЕстьРасхожденияПриИзмененииНаСервере()
	
	УстановитьВидимость();
	Для Каждого Строка Из Объект.ДетальныеЗаписиРасчеты Цикл
		Строка["СуммаДокументаКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["СуммаДокумента"], 0);
		Строка["СуммаДолгКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["СуммаДолг"], 0);
		Строка["СуммаАвансКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["СуммаАванс"], 0);
		Строка["СуммаВзаиморасчетовКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["СуммаВзаиморасчетов"], 0);
	КонецЦикла;
	Для Каждого Строка Из Объект.ДетальныеЗаписиФинансовыеИнструменты Цикл
		Строка["ОсновнойДолгКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["ОсновнойДолг"], 0);
		Строка["ПроцентыКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["Проценты"], 0);
		Строка["КомиссияКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["ОсновнойДолг"], 0);
		Строка["АрендныеОбязательстваКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["АрендныеОбязательства"], 0);
		Строка["ОбеспечительныйПлатежКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["ОбеспечительныйПлатеж"], 0);
		Строка["УслугаПоАрендеКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["УслугаПоАренде"], 0);
		Строка["ВыкупнаяСтоимостьКонтрагент"] = ?(Объект.ЕстьРасхождения, Строка["ВыкупнаяСтоимость"], 0);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьЗаданияКРаспределению()
	
	АналитикаКРасчету = Документы.СверкаВзаиморасчетов2_4.АналитикаКРасчету(
							Объект.Организация, Объект.Контрагент, Объект.ТипРасчетов, Объект.КонецПериода);
	ЕстьЗадания = АналитикаКРасчету.Количество() > 0;
	Если ЕстьЗадания Тогда
		ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
		
		НаименованиеЗадания = НСтр("ru = 'Выполняется распределение расчетов по документам.'");
		ИмяПроцедуры        = "Документы.СверкаВзаиморасчетов2_4.РаспределениеРасчетовПоДокументам";
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
		ПараметрыВыполнения.ОжидатьЗавершение = 0;
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		СтруктураРасчетов = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
		СтруктураРасчетов.АналитикиУчетаПоПартнерам = АналитикаКРасчету;
		СтруктураРасчетов.Организации = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Организация);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("АналитикиРасчета", СтруктураРасчетов);
		ПараметрыМетода.Вставить("КонецПериода", КонецДня(Объект.КонецПериода));
		
		ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыМетода, ПараметрыВыполнения);
		
		ИдентификаторЗадания = ДлительнаяОперация.ИдентификаторЗадания;
	КонецЕсли;
	
	Возврат ЕстьЗадания;
	
КонецФункции

&НаСервере
Функция ЕстьСуммы(ИмяТабличнойЧасти, ИмяКолонки)
	
	Для Каждого Запись Из Объект[ИмяТабличнойЧасти] Цикл
		Если Запись[ИмяКолонки] <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьСтраницСверки()
	
	Если Объект.ГруппировкиРасчеты.Количество() = 0
		И Объект.ГруппировкиФинансовыеИнструменты.Количество() > 0 Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФинансовыеИнструменты;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаРасчеты;
	КонецЕсли;
	
	//++ Локализация
	УстановитьВидимостьУстаревшейСверки();
	//-- Локализация
КонецПроцедуры

&НаСервере
Функция ОбновлениеНеЗавершено()
	
	Возврат НЕ ВзаиморасчетыСервер.ОтложенноеОбновлениеРегистровВзаиморасчетовЗавершено(Истина);
	
КонецФункции

#КонецОбласти

#Область УстаревшаяСверка
//++ Локализация
&НаСервере
Процедура УстановитьВидимостьУстаревшейСверки()
	
	УстаревшаяСверка = Объект.ДанныеКонтрагента.Количество() > 0;
	Элементы.СтраницаДанныеКонтрагента.Видимость = УстаревшаяСверка;
	Элементы.СтраницаДанныеКонтрагента.ТолькоПросмотр = УстаревшаяСверка;
	Элементы.ДетализацияВзаиморасчетов.Видимость = УстаревшаяСверка;
	
	ДетализацияВзаиморасчетов = Документы.СверкаВзаиморасчетов2_4.ПредставлениеДетализацииВзаиморасчетов(
		Объект.Партнер,
		Объект.Договор,
		Объект.РасшифровкаПоПартнерам,
		Объект.РасшифровкаПоДоговорам,
		Объект.РасшифровкаПоЗаказам);
	
	Элементы.ДетализацияВзаиморасчетов.Доступность = НЕ ТолькоПросмотр;
	
	// Скроем новую сверку
	Элементы.СтраницаРасчеты.Видимость = НЕ УстаревшаяСверка;
	
	ИспользуетсяУправлениеВНА = Ложь; 
	Элементы.СтраницаФинансовыеИнструменты.Видимость = 
		НЕ УстаревшаяСверка
		И (ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов")
			ИЛИ ИспользуетсяУправлениеВНА)
		И НЕ ЭтоСверкаМеждуОрганизациями;
			
	Элементы.ЕстьРасхождения.Видимость = НЕ УстаревшаяСверка;
	Элементы.НастройкиФильтров.Видимость = НЕ УстаревшаяСверка;
	
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияВзаиморасчетовНажатиеПослеНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ПрименитьНастройкиДетализации = Истина;

		Если Объект.ДанныеКонтрагента.Количество() > 0
			И ((Объект.РасшифровкаПоЗаказам И НЕ Результат.РасшифровкаПоЗаказам)
			ИЛИ (Объект.РасшифровкаПоПартнерам И НЕ Результат.РасшифровкаПоПартнерам)
			ИЛИ (Объект.РасшифровкаПоДоговорам И НЕ Результат.РасшифровкаПоДоговорам)) Тогда

			ТекстВопроса = НСтр("ru = 'Свернуть строки табличной части в соответствии
			|с настройками детализации взаиморасчетов?'");

			КнопкиДиалогаВопрос = Новый СписокЗначений;
			КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Да, 	"Свернуть");
			КнопкиДиалогаВопрос.Добавить(КодВозвратаДиалога.Отмена, "Отменить");

			ПоказатьВопрос(Новый ОписаниеОповещения("ДетализацияВзаиморасчетовНажатиеЗавершение", ЭтотОбъект, Новый Структура("ПрименитьНастройкиДетализации, Результат", ПрименитьНастройкиДетализации, Результат)), ТекстВопроса, КнопкиДиалогаВопрос);
			Возврат;

		КонецЕсли;

		ДетализацияВзаиморасчетовНажатиеФрагмент(ПрименитьНастройкиДетализации, Результат);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДетализацияВзаиморасчетовНажатиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	ПрименитьНастройкиДетализации = ДополнительныеПараметры.ПрименитьНастройкиДетализации;
	Результат = ДополнительныеПараметры.Результат;

	КодОтвета = РезультатВопроса;
	
	Если КодОтвета = КодВозвратаДиалога.Да Тогда
		СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(Результат);
	Иначе
		ПрименитьНастройкиДетализации = Ложь;
	КонецЕсли;

	ДетализацияВзаиморасчетовНажатиеФрагмент(ПрименитьНастройкиДетализации, Результат);

КонецПроцедуры

&НаКлиенте
Процедура ДетализацияВзаиморасчетовНажатиеФрагмент(Знач ПрименитьНастройкиДетализации, Знач Результат)

	Если ПрименитьНастройкиДетализации Тогда

		Объект.Партнер = Результат.Партнер;
		Объект.Договор = Результат.Договор;
		Объект.РасшифровкаПоЗаказам = Результат.РасшифровкаПоЗаказам;
		Объект.РасшифровкаПоПартнерам = Результат.РасшифровкаПоПартнерам;
		Объект.РасшифровкаПоДоговорам = Результат.РасшифровкаПоДоговорам;

		Модифицированность = Истина;

		УправлениеЭлементамиФормы();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(ПараметрыДетализации)
	
	Документы.СверкаВзаиморасчетов2_4.СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(ПараметрыДетализации, Объект.ДанныеКонтрагента);
	
КонецПроцедуры
//-- Локализация

&НаКлиенте
Процедура ДетализацияВзаиморасчетовНажатие(Элемент, СтандартнаяОбработка)
//++ Локализация
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Партнер", Объект.Партнер);
	СтруктураПараметров.Вставить("Договор", Объект.Договор);
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("Контрагент", Объект.Контрагент);
	СтруктураПараметров.Вставить("РасшифровкаПоЗаказам", Объект.РасшифровкаПоЗаказам);
	СтруктураПараметров.Вставить("РасшифровкаПоПартнерам", Объект.РасшифровкаПоПартнерам);
	СтруктураПараметров.Вставить("РасшифровкаПоДоговорам", Объект.РасшифровкаПоДоговорам);
	
	ОткрытьФорму("Документ.СверкаВзаиморасчетов2_4.Форма.ФормаНастройкиДетализации", СтруктураПараметров,,,,, 
		Новый ОписаниеОповещения("ДетализацияВзаиморасчетовНажатиеПослеНастройки", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
