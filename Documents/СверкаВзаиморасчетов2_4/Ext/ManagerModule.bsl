#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	БизнесПроцессы.Задание.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа "Сверка взаиморасчетов".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
// Возвращаемое значение:
// 	Неопределено - Описание
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	Если ПравоДоступа("Добавление", Метаданные.Документы.СверкаВзаиморасчетов2_4) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.СверкаВзаиморасчетов2_4.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(Метаданные.Документы.СверкаВзаиморасчетов2_4);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;

	Возврат Неопределено;
КонецФункции

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВзаиморасчетыСервер.ВедомостьРасчетовСПартнерами_ДобавитьКомандуОтчета(КомандыОтчетов);
	ВзаиморасчетыСервер.ВедомостьРасчетовМеждуОрганизациями_ДобавитьКомандуОтчета(КомандыОтчетов);
	
КонецПроцедуры

// Заполняет массивы реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	СтруктураПараметров - Структура - Структура параметров заполнения:
//		* РасшифровкаПоЗаказам - Булево - Признак расшифровки по заказам.
//		* РасшифровкаПоПартнерам - Булево - Признак расшифровки по партнерам.
//		* РасшифровкаПоДоговорам - Булево - Признак расшифровки по договорам.
//		* Партнер - СправочникСсылка.Партнеры - Партнер документа.
//		* Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор документа.
//	МассивВсехРеквизитов - Массив - Массив всех имен реквизитов, зависимых от хозяйственной операции.
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемых в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(СтруктураПараметров, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов = Новый Массив;
	МассивВсехРеквизитов.Добавить("ГруппировкиРасчеты.ТипРасчетов");
	МассивВсехРеквизитов.Добавить("ГруппировкиРасчеты.Партнер");
	МассивВсехРеквизитов.Добавить("ГруппировкиРасчеты.Договор");
	МассивВсехРеквизитов.Добавить("ГруппировкиФинансовыеИнструменты.ТипРасчетов");
	МассивВсехРеквизитов.Добавить("ГруппировкиФинансовыеИнструменты.Партнер");
	МассивВсехРеквизитов.Добавить("ГруппировкиФинансовыеИнструменты.Договор");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиРасчетыВзаиморасчетыКонтрагент");
	
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингАрендныеОбязательстваКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингОбеспечительныйПлатежКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингУслугаПоАрендеКонтрагент");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингВыкупнаяСтоимостьКонтрагент");
	
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЗаймыГруппаКомиссия");
	МассивВсехРеквизитов.Добавить("ДетальныеЗаписиЛизингГруппаВыкуп");
	
	//++ Локализация
	//СтараяСверка
	МассивВсехРеквизитов.Добавить("ДанныеКонтрагента.РасчетныйДокумент");
	МассивВсехРеквизитов.Добавить("ДанныеКонтрагента.ОписаниеДокумента");
	МассивВсехРеквизитов.Добавить("ДанныеКонтрагента.Партнер");
	МассивВсехРеквизитов.Добавить("ДанныеКонтрагента.Договор");
	//-- Локализация
	
	МассивРеквизитовОперации = Новый Массив;
	Если СтруктураПараметров.ПоказатьТипРасчетов Тогда
		МассивРеквизитовОперации.Добавить("ГруппировкиРасчеты.ТипРасчетов");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.ТипРасчетов");
	КонецЕсли;
	Если СтруктураПараметров.ПоказатьПартнера Тогда
		МассивРеквизитовОперации.Добавить("ГруппировкиРасчеты.Партнер");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.Партнер");
	КонецЕсли;
	Если СтруктураПараметров.ПоказатьДоговор Тогда
		МассивРеквизитовОперации.Добавить("ГруппировкиРасчеты.Договор");
		МассивРеквизитовОперации.Добавить("ГруппировкиФинансовыеИнструменты.Договор");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиРасчетыВзаиморасчетыКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыСуммаКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыСуммаПроцентыКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингАрендныеОбязательстваКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингОбеспечительныйПлатежКонтрагент");
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингУслугаПоАрендеКонтрагент");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьКомиссия Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыГруппаКомиссия");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьВыкупПредметовАренды Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингГруппаВыкуп");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения И СтруктураПараметров.ЕстьКомиссия Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЗаймыСуммаКомиссияКонтрагент");
	КонецЕсли;
	Если СтруктураПараметров.ЕстьРасхождения И СтруктураПараметров.ЕстьВыкупПредметовАренды Тогда
		МассивРеквизитовОперации.Добавить("ДетальныеЗаписиЛизингВыкупнаяСтоимостьКонтрагент");
	КонецЕсли;
	//++ Локализация
	//СтараяСверка
	Если СтруктураПараметров.РасшифровкаПоЗаказам Тогда
		МассивРеквизитовОперации.Добавить("ДанныеКонтрагента.РасчетныйДокумент");
		МассивРеквизитовОперации.Добавить("ДанныеКонтрагента.ОписаниеДокумента");
	КонецЕсли;
	Если СтруктураПараметров.РасшифровкаПоПартнерам Тогда
		МассивРеквизитовОперации.Добавить("ДанныеКонтрагента.Партнер");
	КонецЕсли;
	Если СтруктураПараметров.РасшифровкаПоДоговорам Тогда
		МассивРеквизитовОперации.Добавить("ДанныеКонтрагента.Договор");
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Определяет реквизиты выбранного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.СверкаВзаиморасчетов2_4 - Ссылка на документ.
//
// Возвращаемое значение:
//	Структура - реквизиты выбранного документа.
//
Функция РеквизитыДокумента(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.НачалоПериода,
	|	ДанныеДокумента.КонецПериода,
	|	МАКСИМУМ(СверкаВзаиморасчетовГруппировкиРасчеты.ТипРасчетов) КАК ТипРасчетов,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СверкаВзаиморасчетовГруппировкиРасчеты.ТипРасчетов) КАК ВсегоТиповРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4.ГруппировкиРасчеты КАК СверкаВзаиморасчетовГруппировкиРасчеты
	|		ПО СверкаВзаиморасчетовГруппировкиРасчеты.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &ДокументСсылка
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.НачалоПериода,
	|	ДанныеДокумента.КонецПериода
	|");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//	МассивДокументов - Массив - Массив ссылок на документы, которые надо проверять.
//	НовыйСтатус - Строка - Имя нового статуса.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Запрос - Запрос проверки перед сменой статуса.
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыСверокВзаиморасчетов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4 КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//	ВыборкаПроверки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки.
//	НовыйСтатус - ПеречислениеСсылка - Новый статус.
//	ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
//	Булево - Истина, в случае успешного завершения проверки.
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа "СверкаВзаиморасчетов" отсутствуют дополнительные проверки
	
КонецФункции

// Возвращает КлючОбъекта для сохранения в хранилище общих настроек пользователя
// 
// Возвращаемое значение:
// 	Строка - Описание
Функция КлючОбъектаПользовательскихНастроек() Экспорт
	
	Возврат "Документ.СверкаВзаиморасчетов2_4";
	
КонецФункции

Функция ТекстСообщенияУстаревшийДокумент() Экспорт
	
	Возврат НСтр("ru = 'Документ ""Сверка взаиморасчетов (с фин.инструментами)"" устарел и будет удален.
				|Рекомендуется использовать документ ""Сверка взаиморасчетов (2.5.11)""'");
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//	Ограничение - см. УправлениеДоступомПереопределяемый.ПриЗаполненииОграниченияДоступа.Ограничение.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент.Партнер)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

	// Акт сверки взаимных расчетов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Обработчик = "УправлениеПечатьюУТКлиент.ПечатьАктаСверкиВзаиморасчетов";
	КомандаПечати.Идентификатор = "АктСверкиВзаимныхРасчетов";
	КомандаПечати.Представление = НСтр("ru = 'Акт сверки взаимных расчетов'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов - см. УправлениеПечатьюПереопределяемый.ПриПечати.МассивОбъектов
//  ПараметрыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыПечати
//  КоллекцияПечатныхФорм - см. УправлениеПечатьюПереопределяемый.ПриПечати.КоллекцияПечатныхФорм
//  ОбъектыПечати - см. УправлениеПечатьюПереопределяемый.ПриПечати.ОбъектыПечати
//  ПараметрыВывода - см. УправлениеПечатьюПереопределяемый.ПриПечати.ПараметрыВывода
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетов") Тогда
		
		ДокументыНаПечать = ДокументыНаПечать(МассивОбъектов);
		
		МакетНаПечать = Новый ТабличныйДокумент;
		МассивДокументов = Новый Массив;
		Если ДокументыНаПечать.Новые.Количество() > 0 Тогда
			МакетНаПечать = СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(ДокументыНаПечать.Новые, ОбъектыПечати);
			МассивДокументов = ДокументыНаПечать.Новые;
			
		КонецЕсли;
		//++ Локализация
		Если ДокументыНаПечать.Старые.Количество() > 0 Тогда
			МакетНаПечать = СформироватьПечатнуюФормуАктСверкиВзаимныхРасчетовПоСтарому(ДокументыНаПечать.Старые, ОбъектыПечати, МакетНаПечать);
			МассивДокументов = ДокументыНаПечать.Старые;
			
		КонецЕсли;
		//-- Локализация
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктСверкиВзаимныхРасчетов",
			НСтр("ru='Акт сверки взаимных расчетов'"),
			МакетНаПечать);
			
		ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивДокументов, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверкиВзаимныхРасчетовСДаннымиКонтрагента") Тогда
		
		ДокументыНаПечать = ДокументыНаПечать(МассивОбъектов);
		
		МакетНаПечать = Новый ТабличныйДокумент;
		МассивДокументов = Новый Массив;
		
		//++ Локализация
		Если ДокументыНаПечать.Старые.Количество() > 0 Тогда
			МакетНаПечать = СформироватьПечатнуюФормуАктСДаннымиКонтрагента(ДокументыНаПечать.Старые, ОбъектыПечати, МакетНаПечать);
			МассивДокументов = ДокументыНаПечать.Старые;
			
		КонецЕсли;
		//-- Локализация
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"АктСверкиВзаимныхРасчетовСДаннымиКонтрагента",
			НСтр("ru='Акт сверки взаимных расчетов (с задолженностью по данными контрагента)'"),
			МакетНаПечать);
			
		ФормированиеПечатныхФорм.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивДокументов, КоллекцияПечатныхФорм);
		
	КонецЕсли;
	
КонецПроцедуры

// Сформировать печатную форму акта сверки взаиморасчетов
//
// Параметры:
//   МассивОбъектов  - Массив из ДокументСсылка.СверкаВзаиморасчетов2_4 - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// Возвращаемое значение:
//  ТабличныйДокумент - Сформировать печатную форму акт сверки взаиморасчетов
Функция СформироватьПечатнуюФормуАктСверкиВзаиморасчетов(МассивОбъектов, ОбъектыПечати, ДляОтладки = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	НастройкиПечати = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
							КлючОбъектаПользовательскихНастроек(),
							"НастройкиПечати");
	Если НастройкиПечати = Неопределено Тогда
		НастройкиПечати = НастройкиПечатиПоУмолчанию();
	КонецЕсли;
	Если ТипЗнч(ДляОтладки) = Тип("Структура") Тогда
		НастройкиПечати.Вставить("ДляОтладки", ДляОтладки);
	КонецЕсли;
	
	ЗапросДанныеНаПечать = ЗапросДанныеНаПечать(МассивОбъектов, НастройкиПечати);
	РезультатЗапроса = ЗапросДанныеНаПечать.Выполнить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ПервыйДокумент = Истина;
	ДанныеСверки = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ДанныеДокумента Из ДанныеСверки.Строки Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов2_4.ПФ_MXL_АктСверкиВзаимныхРасчетов"); // ТабличныйДокумент - 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		#Область ШапкаДокумента
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru='Акт сверки взаимных расчетов'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		ЕстьОстаткиОборотыЗаПериод = ДанныеДокумента.ЕстьОбороты ИЛИ ДанныеДокумента.НачальноеСальдоДт <> 0 ИЛИ ДанныеДокумента.НачальноеСальдоКт <> 0
			ИЛИ ДанныеДокумента.КонечноеСальдоДт <> 0 ИЛИ ДанныеДокумента.КонечноеСальдоКт <> 0;
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтрШаблон(НСтр("ru = 'по состоянию на %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
			ПредставлениеПериодаРасчетов = СтрШаблон(НСтр("ru = 'По состоянию на %1'", ОбщегоНазначения.КодОсновногоЯзыка()), Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				ПредставлениеПериода = СтрШаблон(НСтр("ru='за период: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода);
				
			Иначе
				ПредставлениеПериода = СтрШаблон(НСтр("ru='за %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПериода);
				
			КонецЕсли;
			
			ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 были осуществлены следующие расчеты'", ОбщегоНазначения.КодОсновногоЯзыка())+":";
			Если НЕ ЕстьОстаткиОборотыЗаПериод Тогда
				ШаблонПериодаРасчетов = НСтр("ru = 'В период с %1 по %2 операции по расчетам не производились.'", ОбщегоНазначения.КодОсновногоЯзыка());
			КонецЕсли;
			
			ПредставлениеПериодаРасчетов = СтрШаблон(
				ШаблонПериодаРасчетов,
				Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		Если ЗначениеЗаполнено(ДанныеДокумента.Договор) Тогда
			ОбластьМакета.Параметры.ПредставлениеДоговора = НСтр("ru = 'по договору'", ОбщегоНазначения.КодОсновногоЯзыка()) + ": " + ДанныеДокумента.ПредставлениеДоговора;
		КонецЕсли;
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовкаМакета         = ТекстЗаголовка;
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента   = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода         = ПредставлениеПериода;
		ОбластьМакета.Параметры.ПредставлениеПериодаРасчетов = ПредставлениеПериодаРасчетов;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		#Область ДетальныеЗаписи
		ТипЧисло = ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля();
		ИтогоЗадолженность = Новый ТаблицаЗначений;
		ИтогоЗадолженность.Колонки.Добавить("Валюта");
		ИтогоЗадолженность.Колонки.Добавить("СуммаДт", ТипЧисло);
		ИтогоЗадолженность.Колонки.Добавить("СуммаКт", ТипЧисло);
		НастройкиПечати.Вставить("ПредставленияУчастников", СтруктураПредставленийУчастников);
		Для Каждого ДанныеПоТипуРасчетов Из ДанныеДокумента.Строки Цикл
			Для Каждого ДанныеПоВалюте Из ДанныеПоТипуРасчетов.Строки Цикл
				ДанныеПоВалюте.Строки.Сортировать("ОбъектГруппировки,ПредставлениеТипРасчетов");
				Для Каждого ДанныеПоОбъектуГруппировки Из ДанныеПоВалюте.Строки Цикл
					ЕстьДанныеГруппировки = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт <> 0
												ИЛИ ДанныеПоОбъектуГруппировки.НачальноеСальдоКт <> 0
												ИЛИ ДанныеПоОбъектуГруппировки.ЕстьОбороты;
					Если ЕстьДанныеГруппировки Тогда
						ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписи(ДанныеПоОбъектуГруппировки, ДанныеДокумента, Макет, ИтогоЗадолженность, НастройкиПечати));
					КонецЕсли;
				КонецЦикла; // по детальным записям
			КонецЦикла; // по детальным записям
		КонецЦикла; // по видам расчетов Взаиморасчеты/ФинансовыеИнструменты
		#КонецОбласти
		
		#Область Задолженность
		Если ИтогоЗадолженность.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок	= Макет.ПолучитьОбласть("ЗаголовокЗадолженность");
			ОбластьДолг				= Макет.ПолучитьОбласть("СтрокаЗадолженность");
			ОбластьДолгРегл			= Макет.ПолучитьОбласть("СтрокаЗадолженностьВалютаРегл");
			ОбластьПустаяСтрока		= Макет.ПолучитьОбласть("ПустаяСтрока");
			
			ОбластьМакетаЗаголовок.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ЗадолженностьПоВалютам = ИтогоЗадолженность.Скопировать(); // ТаблицаЗначений
			ЗадолженностьПоВалютам.Свернуть("Валюта", "СуммаДт,СуммаКт");
			Для Каждого ДолгВВалюте Из ЗадолженностьПоВалютам Цикл
				
				ВывестиПустуюСтроку = Истина;
				ПредставлениеПартнера = ДанныеДокумента.ПредставлениеПартнера;
				Если НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
					ПредставлениеПартнера = СтруктураПредставленийУчастников.КонтрагентНаименование;
				КонецЕсли;
				
				Если ДолгВВалюте.СуммаДт <> 0 И ДолгВВалюте.СуммаКт <> 0 Тогда
					РассчитатьСальдо(ДолгВВалюте, "Сумма");
				КонецЕсли;
				
				ОбластьДолг.Параметры.Валюта = ДолгВВалюте.Валюта;
				
				// Долг партнера
				СуммаДолга = 0;
				Если ДолгВВалюте.СуммаДт > 0 Тогда
					СуммаДолга = ДолгВВалюте.СуммаДт;
					ОбластьДолг.Параметры.Сумма = Формат(ДолгВВалюте.СуммаДт, "ЧДЦ=2; ЧН=0; ЧГ=3,0");
					ОбластьДолг.Параметры.Дебитор = ПредставлениеПартнера;
				Иначе
					// Наш долг
					СуммаДолга = ДолгВВалюте.СуммаКт;
					ОбластьДолг.Параметры.Сумма = Формат(ДолгВВалюте.СуммаКт, "ЧДЦ=2; ЧН=0; ЧГ=3,0");
					ОбластьДолг.Параметры.Дебитор = СтрШаблон(
							НСтр("ru='%1 перед %2'"),
							СтруктураПредставленийУчастников.ПредставлениеОрганизации,
							ПредставлениеПартнера);
				КонецЕсли;
				ОбластьДолг.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СуммаДолга,ДолгВВалюте.Валюта);
				ТабличныйДокумент.Вывести(ОбластьДолг);
				
				Если ВывестиПустуюСтроку Тогда
					ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
				КонецЕсли;
			КонецЦикла; 
			
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗадолженностьОтсутствует");
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли;
		#КонецОбласти 
		
		// РАСХОЖДЕНИЙ НЕ ВЫЯВЛЕНО
		ДанныеКонтрагентаЗаполнены = НЕ НастройкиПечати.НеЗаполнятьДанныеКонтрагента;
		Если НЕ ДанныеДокумента.ЕстьРасхождения И ДанныеКонтрагентаЗаполнены Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		#Область Подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		#КонецОбласти
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
	
	КонецЦикла; // конец цикла по данным документа

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если ТипЗнч(ДляОтладки) = Тип("Структура") Тогда
		ДляОтладки.Вставить("ТабличныйДокумент", ТабличныйДокумент);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВывестиДетальныеЗаписи(
	ДанныеПоОбъектуГруппировки,
	ДанныеДокумента,
	Макет,
	ИтогоЗадолженность,
	НастройкиПечати)
	
	СтруктураПредставленийУчастников = НастройкиПечати.ПредставленияУчастников;
	
	ЭтоФинансовыеИнструменты = ДанныеПоОбъектуГруппировки.ФинансовыеИнструменты;
	ВыводитьДолгАванс = НЕ ЭтоФинансовыеИнструменты И НЕ НастройкиПечати.ДолгКакДебет;
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	#Область ОбластиПечати
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаОбъектДоговорВалюта");
	Если ЭтоФинансовыеИнструменты Тогда
		ОбластьМакетаШапка		= Макет.ПолучитьОбласть("ШапкаТаблицыФинИнструменты");
		ОбластьМакетаНачОстаток	= Макет.ПолучитьОбласть("СтрокаТаблицыНачОстатокФинИнструменты");
		ОбластьМакетаСтрока 		= Макет.ПолучитьОбласть("СтрокаТаблицыФинИнструменты");
		ОбластьМакетаОбороты 		= Макет.ПолучитьОбласть("ОборотыЗаПериодФинИнструменты");
		ОбластьМакетаКонОстаток	= Макет.ПолучитьОбласть("СтрокаТаблицыКонОстатокФинИнструменты");
		Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
			ОбластьМакетаНачОстаток.Область("СуммаКонтрагентНачОстатокФин").Формат = "ЧДЦ=2";
			ОбластьМакетаСтрока.Область("СуммаКонтрагентФин").Формат = "ЧДЦ=2";
			ОбластьМакетаОбороты.Область("СуммаКонтрагентОборотыФин").Формат = "ЧДЦ=2";
			ОбластьМакетаКонОстаток.Область("СуммаКонтрагентКонОстатокФин").Формат = "ЧДЦ=2";
		КонецЕсли;
	Иначе
		ОбластьМакетаШапка	 = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьМакетаНачОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыНачОстаток");
		ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьМакетаОбороты 	 = Макет.ПолучитьОбласть("ОборотыЗаПериод");
		ОбластьМакетаКонОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыКонОстаток");
		Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
			ОбластьМакетаНачОстаток.Область("СуммаКонтрагентНачОстаток").Формат = "ЧДЦ=2";
			ОбластьМакетаСтрока.Область("СуммаКонтрагент").Формат = "ЧДЦ=2";
			ОбластьМакетаОбороты.Область("СуммаКонтрагентОбороты").Формат = "ЧДЦ=2";
			ОбластьМакетаКонОстаток.Область("СуммаКонтрагентКонОстаток").Формат = "ЧДЦ=2";
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыводНазванияГруппировки
	Валюта = СтрШаблон(НСтр("ru='в валюте'", ОбщегоНазначения.КодОсновногоЯзыка()) + " %1", ДанныеПоОбъектуГруппировки.Валюта);
	ШаблонЗаголовка = ДанныеПоОбъектуГруппировки.ПредставлениеТипРасчетов;
	Если НастройкиПечати.ДетализацияВзаиморасчетов = "ОбъектРасчетов"
		И (ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
			ИЛИ ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) Тогда
		ШаблонЗаголовка = ?(ШаблонЗаголовка = Неопределено, "", ШаблонЗаголовка + " ") + НСтр("ru = 'по объекту расчетов'", ОбщегоНазначения.КодОсновногоЯзыка()) + " %1 ";
	ИначеЕсли НастройкиПечати.ДетализацияВзаиморасчетов = "Договор" И НЕ ЭтоФинансовыеИнструменты
	 		ИЛИ НастройкиПечати.ДетализацияФинансовыхИнструментов = "Договор" И ЭтоФинансовыеИнструменты Тогда
		ШаблонЗаголовка = ?(ШаблонЗаголовка = Неопределено, "", ШаблонЗаголовка + " ") + НСтр("ru = 'по договору'", ОбщегоНазначения.КодОсновногоЯзыка()) + " %1 ";
	КонецЕсли;
	
	ТекстОбъектаГруппировки = "<" + НСтр("ru = 'не указан'", ОбщегоНазначения.КодОсновногоЯзыка()) + ">";
	Если ЗначениеЗаполнено(ДанныеПоОбъектуГруппировки.ПредставлениеОбъектГруппировки) Тогда
		ТекстОбъектаГруппировки = ДанныеПоОбъектуГруппировки.ПредставлениеОбъектГруппировки;
	КонецЕсли;
	
	ЗаголовокГруппировки = ?(ШаблонЗаголовка = Неопределено, "", ШаблонЗаголовка + " ") + Валюта;
	Если НастройкиПечати.ДетализацияВзаиморасчетов <> "Валюта" И НЕ ЭтоФинансовыеИнструменты
		ИЛИ НастройкиПечати.ДетализацияФинансовыхИнструментов <> "Валюта" И ЭтоФинансовыеИнструменты Тогда
		ШаблонЗаголовка = ?(ШаблонЗаголовка = Неопределено, "%1 ", ШаблонЗаголовка);
		ЗаголовокГруппировки = СтрШаблон(ШаблонЗаголовка, ТекстОбъектаГруппировки) + Валюта;
	КонецЕсли;
	ОбластьМакетаГруппировка.Параметры.ЗаголовокГруппировки = ЗаголовокГруппировки;
	ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
	#КонецОбласти
	
	#Область ВыводШапкиТаблицы
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
	ОбластьМакетаШапка.Параметры.Дебет = НСтр("ru = 'Долг'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОбластьМакетаШапка.Параметры.Кредит = НСтр("ru = 'Аванс'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОбластьМакетаНачОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Начальный остаток'", ОбщегоНазначения.КодОсновногоЯзыка());
	ОбластьМакетаКонОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Конечный остаток'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если НастройкиПечати.ДолгКакДебет ИЛИ ЭтоФинансовыеИнструменты Тогда
		ОбластьМакетаШапка.Параметры.Дебет = НСтр("ru = 'Дебет'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьМакетаШапка.Параметры.Кредит = НСтр("ru = 'Кредит'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьМакетаНачОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Сальдо начальное'", ОбщегоНазначения.КодОсновногоЯзыка());
		ОбластьМакетаКонОстаток.Параметры.ИмяОстатка = НСтр("ru = 'Сальдо конечное'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	#КонецОбласти
	
	#Область ВыводНачальногоОстатка
	ОбластьМакетаНачОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт;
	ОбластьМакетаНачОстаток.Параметры.СуммаКредит = ДанныеПоОбъектуГруппировки.НачальноеСальдоКт;
	
	ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдоКт;
	ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаНачОстаток);
		Если ДанныеПоОбъектуГруппировки.НачальноеСальдо > 0 Тогда
			ОбластьМакетаНачОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.НачальноеСальдо;
			ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдо;
		Иначе
			ОбластьМакетаНачОстаток.Параметры.СуммаКредит = -ДанныеПоОбъектуГруппировки.НачальноеСальдо;
			ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = -ДанныеПоОбъектуГруппировки.НачальноеСальдо;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаНачОстаток.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаНачОстаток.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
	#КонецОбласти
	
	ОборотАктивКонтрагент = Новый Структура("СуммаДебетКонтрагент, СуммаКредитКонтрагент", 0, 0);
	ОборотПассивКонтрагент = Новый Структура("СуммаДебетКонтрагент, СуммаКредитКонтрагент", 0, 0);
	РасчетныеДокументыПериода = Новый Массив;
	Обороты = Новый Структура("Долг,Аванс,Дебет,Кредит",0,0,0,0);
	Если ДанныеПоОбъектуГруппировки.ЕстьОбороты Тогда
		Для Каждого ДетальныеЗаписи Из ДанныеПоОбъектуГруппировки.Строки Цикл
			
			Если ТипЗнч(ДетальныеЗаписи.РасчетныйДокумент) = Тип("ДокументСсылка.ВзаимозачетЗадолженности")
				И ДетальныеЗаписи.СуммаДебет - ДетальныеЗаписи.СуммаКредит = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РасчетныеДокументыПериода.Добавить(ДетальныеЗаписи.РасчетныйДокумент);
			
			Если ЭтоФинансовыеИнструменты Тогда
				ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицыФинИнструменты");
				Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
					ОбластьМакетаСтрока.Область("СуммаКонтрагентФин").Формат = "ЧДЦ=2";
				КонецЕсли;
			Иначе
				ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
				Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
					ОбластьМакетаСтрока.Область("СуммаКонтрагент").Формат = "ЧДЦ=2";
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ОбластьМакетаСтрока.Параметры, ДетальныеЗаписи);
			ОбластьМакетаСтрока.Параметры.Дата = Формат(ДетальныеЗаписи.ДатаДокумента, "ДЛФ=D");
			Обороты.Дебет = Обороты.Дебет + ДетальныеЗаписи.СуммаДебет;
			Обороты.Кредит = Обороты.Кредит + ДетальныеЗаписи.СуммаКредит;
			Если ВыводитьДолгАванс Тогда
				ОчиститьДебетКредит(ОбластьМакетаСтрока);
				ОбластьМакетаСтрока.Параметры.СуммаДебет = ДетальныеЗаписи.СуммаДолг;
				ОбластьМакетаСтрока.Параметры.СуммаКредит = ДетальныеЗаписи.СуммаАванс;
				ОбластьМакетаСтрока.Параметры.СуммаДебетКонтрагент = ДетальныеЗаписи.СуммаДолгКонтрагент;
				ОбластьМакетаСтрока.Параметры.СуммаКредитКонтрагент = ДетальныеЗаписи.СуммаАвансКонтрагент;
				Обороты.Долг = Обороты.Долг + ДетальныеЗаписи.СуммаДолг;
				Обороты.Аванс = Обороты.Аванс + ДетальныеЗаписи.СуммаАванс;
			КонецЕсли;
			Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
				Если НЕ ЭтоФинансовыеИнструменты Тогда
					ОбластьМакетаСтрока.Параметры.СуммаДокументаКонтрагент = 0;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.СуммаДебетКонтрагент = 0;
				ОбластьМакетаСтрока.Параметры.СуммаКредитКонтрагент = 0;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
			Если ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком
				ИЛИ ДетальныеЗаписи.ТипРасчетов = НЕОПРЕДЕЛЕНО
				ИЛИ ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором Тогда
				ДобавитьОборотКонтрагента(ОборотАктивКонтрагент, ДетальныеЗаписи, ВыводитьДолгАванс);
				
			ИначеЕсли ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
				ИЛИ ДетальныеЗаписи.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором Тогда
				ДобавитьОборотКонтрагента(ОборотПассивКонтрагент, ДетальныеЗаписи, ВыводитьДолгАванс);
				
			КонецЕсли;
		
		КонецЦикла; 
	КонецЕсли;
	
	#Область ВыводОборотовЗаПериод
	ЗаполнитьЗначенияСвойств(ОбластьМакетаОбороты.Параметры, ДанныеПоОбъектуГруппировки);
	ОбластьМакетаОбороты.Параметры.СуммаДебет = Обороты.Дебет;
	ОбластьМакетаОбороты.Параметры.СуммаКредит = Обороты.Кредит;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаОбороты);
		ОбластьМакетаОбороты.Параметры.СуммаДебет = Обороты.Долг;
		ОбластьМакетаОбороты.Параметры.СуммаКредит = Обороты.Аванс;
	КонецЕсли;
	Если ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком
			ИЛИ ДанныеПоОбъектуГруппировки.ТипРасчетов = Неопределено Тогда
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ОборотАктивКонтрагент.СуммаДебетКонтрагент;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ОборотАктивКонтрагент.СуммаКредитКонтрагент;
	ИначеЕсли ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем
		ИЛИ ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором Тогда
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ОборотАктивКонтрагент.СуммаДебетКонтрагент + ОборотПассивКонтрагент.СуммаДебетКонтрагент;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ОборотАктивКонтрагент.СуммаКредитКонтрагент + ОборотПассивКонтрагент.СуммаКредитКонтрагент;
	Иначе
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = ОборотПассивКонтрагент.СуммаДебетКонтрагент;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = ОборотПассивКонтрагент.СуммаКредитКонтрагент;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаОбороты.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаОбороты.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	Если РасчетныеДокументыПериода.Количество() > 0 Тогда
		ТабличныйДокумент.Вывести(ОбластьМакетаОбороты);
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыводКонечногоОстатка
	ЗаполнитьЗначенияСвойств(ОбластьМакетаКонОстаток.Параметры, ДанныеПоОбъектуГруппировки);
	Если ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем Тогда
		Если ДанныеПоОбъектуГруппировки.КонечноеСальдоДт > 0 И ДанныеПоОбъектуГруппировки.КонечноеСальдоКт > 0 Тогда
			КонечноеСальдо(ДанныеПоОбъектуГруппировки.КонечноеСальдоДт, ДанныеПоОбъектуГруппировки.КонечноеСальдоКт);
		КонецЕсли;
	КонецЕсли;
	ОбластьМакетаКонОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.КонечноеСальдоДт;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредит = ДанныеПоОбъектуГруппировки.КонечноеСальдоКт;
	
	ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = 0;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = 0;
	
	НачальноеСальдоКонтрагентДт = ДанныеПоОбъектуГруппировки.НачальноеСальдоКт;
	НачальноеСальдоКонтрагентКт = ДанныеПоОбъектуГруппировки.НачальноеСальдоДт;
	КонечноеСальдоКонтрагентДт = НачальноеСальдоКонтрагентДт + ОборотАктивКонтрагент.СуммаДебетКонтрагент - ОборотАктивКонтрагент.СуммаКредитКонтрагент;
	КонечноеСальдоКонтрагентКт = НачальноеСальдоКонтрагентКт - ОборотПассивКонтрагент.СуммаДебетКонтрагент + ОборотПассивКонтрагент.СуммаКредитКонтрагент;
	
	Если ДанныеПоОбъектуГруппировки.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем Тогда
		Если КонечноеСальдоКонтрагентДт < 0 Тогда
			КонечноеСальдоКонтрагентКт = КонечноеСальдоКонтрагентКт - КонечноеСальдоКонтрагентДт;
			КонечноеСальдоКонтрагентДт = 0;
		КонецЕсли;
		Если КонечноеСальдоКонтрагентКт < 0 Тогда
			КонечноеСальдоКонтрагентДт = КонечноеСальдоКонтрагентДт - КонечноеСальдоКонтрагентКт;
			КонечноеСальдоКонтрагентКт = 0;
		КонецЕсли;
		Если КонечноеСальдоКонтрагентДт > 0 И КонечноеСальдоКонтрагентКт > 0 Тогда
			КонечноеСальдо(КонечноеСальдоКонтрагентДт, КонечноеСальдоКонтрагентКт);
		КонецЕсли;
	Иначе
		КонечноеСальдо(КонечноеСальдоКонтрагентДт, КонечноеСальдоКонтрагентКт);
	КонецЕсли;
	
	ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = КонечноеСальдоКонтрагентДт;
	ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = КонечноеСальдоКонтрагентКт;
	Если ВыводитьДолгАванс Тогда
		ОчиститьДебетКредит(ОбластьМакетаКонОстаток);
		Если ДанныеПоОбъектуГруппировки.КонечноеСальдо > 0 Тогда
			ОбластьМакетаКонОстаток.Параметры.СуммаДебет = ДанныеПоОбъектуГруппировки.КонечноеСальдо;
		Иначе
			ОбластьМакетаКонОстаток.Параметры.СуммаКредит = -ДанныеПоОбъектуГруппировки.КонечноеСальдо;
		КонецЕсли;
		
		КонечныйОстатокКонтрагент = ДанныеПоОбъектуГруппировки.НачальноеСальдо
								+ ДанныеПоОбъектуГруппировки.СуммаДолгКонтрагент
								- ДанныеПоОбъектуГруппировки.СуммаАвансКонтрагент;
		
		Если КонечныйОстатокКонтрагент > 0 Тогда
			ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = КонечныйОстатокКонтрагент;
		Иначе
			ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = -КонечныйОстатокКонтрагент;
		КонецЕсли;
	КонецЕсли;
	Если НастройкиПечати.НеЗаполнятьДанныеКонтрагента Тогда
		ОбластьМакетаКонОстаток.Параметры.СуммаДебетКонтрагент = 0;
		ОбластьМакетаКонОстаток.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьМакетаКонОстаток);
	#КонецОбласти

	Задолженность = ИтогоЗадолженность.Добавить();
	Задолженность.Валюта = ДанныеПоОбъектуГруппировки.Валюта;
	Задолженность.СуммаДт = ДанныеПоОбъектуГруппировки.КонечноеСальдоДт;
	Задолженность.СуммаКт = ДанныеПоОбъектуГруппировки.КонечноеСальдоКт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Процедура КонечноеСальдо(КонечноеСальдоДт, КонечноеСальдоКт)
	
	КонечноеСальдо = КонечноеСальдоДт - КонечноеСальдоКт;
	Если КонечноеСальдо > 0 Тогда
		КонечноеСальдоДт = КонечноеСальдо;
		КонечноеСальдоКт = 0;
	Иначе
		КонечноеСальдоДт = 0;
		КонечноеСальдоКт = -КонечноеСальдо;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	СтруктураДанныхОбъектаПечати - см. ФормированиеПечатныхФорм.ЗаполнитьДанныеСтруктурыПолучателяПоТипуОбъекта.СтруктураДанныхОбъектаПечати
// 
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровИКонтрагентов") Тогда
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Партнер");
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("ДанныеКонтрагента.Партнер");
	Иначе
		СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент.Партнер");
	КонецЕсли;
	
КонецПроцедуры

// Настройки печати по умолчанию.
// 
// Возвращаемое значение:
//  Структура:
//   * ВыводитьВВалютеРегл - Булево - 
//   * ДетализацияВзаиморасчетов - Число - 
//   * ДетализацияФинансовыхИнструментов - Число -    
//   * ДолгКакДебет - Булево - 
//   * НеЗаполнятьДанныеКонтрагента - Булево - 
//   * ОбъединитьКлиентовПоставщиков - Булево - 
//
Функция НастройкиПечатиПоУмолчанию() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ВыводитьВВалютеРегл", Истина);
	Результат.Вставить("ДетализацияВзаиморасчетов", 0);
	Результат.Вставить("ДетализацияФинансовыхИнструментов", 0);
	Результат.Вставить("ДолгКакДебет", Истина);
	Результат.Вставить("НеЗаполнятьДанныеКонтрагента", Ложь);
	Результат.Вставить("ОбъединитьКлиентовПоставщиков", Истина);
	Возврат Результат;
	
КонецФункции

Процедура РассчитатьСальдо(ДолгВВалюте, Сумма)
	
	СуммаДт = ДолгВВалюте[Сумма + "Дт"];
	СуммаКт = ДолгВВалюте[Сумма + "Кт"];
	Сальдо = Суммадт - СуммаКт;
	Если Сальдо > 0 Тогда
		ДолгВВалюте[Сумма + "Дт"] = Сальдо;
		ДолгВВалюте[Сумма + "Кт"] = 0;
	Иначе
		ДолгВВалюте[Сумма + "Дт"] = 0;
		ДолгВВалюте[Сумма + "Кт"] = -Сальдо;
	КонецЕсли;
	
КонецПроцедуры

#Область ПолучениеДанныхНаПечать

// Запрос данные на печать.
// 
// Параметры:
//  МассивОбъектов - Массив из ДокументСсылка.СверкаВзаиморасчетов2_5_11 - Массив объектов
//  НастройкиПечати - Структура - Настройки печати:
// * ВыводитьВВалютеРегл - Булево - 
// * ДетализацияВзаиморасчетов - Число - 
// * ДетализацияФинансовыхИнструментов - Число - 
// * ДолгКакДебет - Булево - 
// * НеЗаполнятьДанныеКонтрагента - Булево - 
// * ОбъединитьКлиентовПоставщиков - Булево - 
// 
// Возвращаемое значение:
//  Запрос - Запрос данные на печать
Функция ЗапросДанныеНаПечать(МассивОбъектов, НастройкиПечати) Экспорт
	
	РасшифроватьНастройкуДетализации(НастройкиПечати);
	
	ЗапросДанныеДокумента = Новый Запрос;
	МенеджерВременныхТаблиц = ИнициализироватьМенеджерТаблиц(МассивОбъектов);
	ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ЗапросДанныеДокумента.Текст = ТекстЗапросаДанныеДокумента(НастройкиПечати);
	
	ЗапросДанныеДокумента.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросДанныеДокумента.УстановитьПараметр("ДолгКакДебет", НастройкиПечати.ДолгКакДебет);
	ЗапросДанныеДокумента.УстановитьПараметр("ВыводитьВВалютеРегл", НастройкиПечати.ВыводитьВВалютеРегл);
	ЗапросДанныеДокумента.УстановитьПараметр("ОбъединитьКлиентовПоставщиков", НастройкиПечати.ОбъединитьКлиентовПоставщиков);
	
	ЗапросДанныеДокумента.УстановитьПараметр("АрендныеОбязательства", Неопределено);
	ЗапросДанныеДокумента.УстановитьПараметр("ОбеспечительныйПлатеж", Неопределено);
	ЗапросДанныеДокумента.УстановитьПараметр("УслугаПоАренде", Неопределено);
	ЗапросДанныеДокумента.УстановитьПараметр("ВыкупнаяСтоимость", Неопределено);

	Если НастройкиПечати.Свойство("ДляОтладки") Тогда
		Если НастройкиПечати.ДляОтладки.Свойство("ЗапросДанныеНаПечать") Тогда
			ЗапросДанныеДокумента = НастройкиПечати.ДляОтладки.ЗапросДанныеНаПечать;
			ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			НастройкиПечати.ДляОтладки.Вставить("МенеджерВременныхТаблиц", ИнициализироватьМенеджерТаблиц(МассивОбъектов));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗапросДанныеДокумента;

КонецФункции

Функция ИнициализироватьМенеджерТаблиц(МассивОбъектов)
	
	ПараметрыОтветственныхЛиц = ОтветственныеЛицаСервер.ПараметрыОтветственныхЛицПоУмолчанию();
	ПараметрыОтветственныхЛиц.РеквизитыОтветственныеЛица = СтруктураРеквизитыОтветственныеЛица();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц, ПараметрыОтветственныхЛиц);
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(Документы.СверкаВзаиморасчетов2_4.ПустаяСсылка(), МенеджерВременныхТаблиц, ПараметрыОтветственныхЛиц);
	КонецЕсли;
	
	СоответствиеПсевдонимовДанныхОтветственныхЛиц = Новый Соответствие();
	
	СтруктураИмен = ОтветственныеЛицаСервер.ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураИмен.Наименование = "РуководительОрганизацииКонтрагентаНаименование";
	СтруктураИмен.ФИО = "РуководительОрганизацииКонтрагентаФИО";
	СтруктураИмен.Должность = "РуководительОрганизацииКонтрагентаДолжность";
	СтруктураИмен.ОснованиеПраваПодписи = "РуководительОрганизацииКонтрагентаОснованиеПраваПодписи";
	СоответствиеПсевдонимовДанныхОтветственныхЛиц.Вставить("РуководительОрганизацииКонтрагента", СтруктураИмен);
	
	СтруктураИмен = ОтветственныеЛицаСервер.ПсевдонимыДанныхОтветственныхЛицПоУмолчанию();
	СтруктураИмен.Наименование = "ГлавныйБухгалтерОрганизацииКонтрагентаНаименование";
	СтруктураИмен.ФИО = "ГлавныйБухгалтерОрганизацииКонтрагентаФИО";
	СтруктураИмен.Должность = "ГлавныйБухгалтерОрганизацииКонтрагентаДолжность";
	СтруктураИмен.ОснованиеПраваПодписи = "ГлавныйБухгалтерОрганизацииКонтрагентаОснованиеПраваПодписи";
	СоответствиеПсевдонимовДанныхОтветственныхЛиц.Вставить("ГлавныйБухгалтерОрганизацииКонтрагента", СтруктураИмен);
	
	ПараметрыОтветственныхЛиц = ОтветственныеЛицаСервер.ПараметрыОтветственныхЛицПоУмолчанию();
	ПараметрыОтветственныхЛиц.ИмяРеквизитаОрганизация = "Контрагент";
	ПараметрыОтветственныхЛиц.РеквизитыОтветственныеЛица = СтруктураРеквизитыОтветственныеЛицаОрганизацииКонтрагента();
	ПараметрыОтветственныхЛиц.ИмяТаблицыОтветственныеЛица = "ТаблицаОтветственныеЛицаОрганизацииКонтрагента";
	ПараметрыОтветственныхЛиц.ПсевдонимыДанныхОтветственныхЛиц = СоответствиеПсевдонимовДанныхОтветственныхЛиц;
	
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
			МассивОбъектов,
			МенеджерВременныхТаблиц,
			ПараметрыОтветственныхЛиц);
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(
			Документы.СверкаВзаиморасчетов2_4.ПустаяСсылка(),
			МенеджерВременныхТаблиц,
			ПараметрыОтветственныхЛиц);
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ТекстЗапросаДанныеДокумента(НастройкиПечати)
	
	#Область ТекстЗапроса
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТЧГруппировкиРасчетов.Ссылка КАК Ссылка,
	|	ТЧГруппировкиРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ТЧГруппировкиРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТЧГруппировкиРасчетов.Договор КАК Договор,
	|	ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧГруппировкиРасчетов.Ссылка.Организация.ВалютаРегламентированногоУчета ИНАЧЕ ТЧГруппировкиРасчетов.Валюта КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧГруппировкиРасчетов.НачальноеСальдоРегл ИНАЧЕ ТЧГруппировкиРасчетов.НачальноеСальдо КОНЕЦ) КАК НачальноеСальдо,
	|	СУММА(ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧГруппировкиРасчетов.ОборотПриходРегл ИНАЧЕ ТЧГруппировкиРасчетов.ОборотПриход КОНЕЦ) КАК ОборотПриход,
	|	СУММА(ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧГруппировкиРасчетов.ОборотРасходРегл ИНАЧЕ ТЧГруппировкиРасчетов.ОборотРасход КОНЕЦ) КАК ОборотРасход,
	|	СУММА(ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧГруппировкиРасчетов.КонечноеСальдоРегл ИНАЧЕ ТЧГруппировкиРасчетов.КонечноеСальдо КОНЕЦ) КАК КонечноеСальдо
	|ПОМЕСТИТЬ ТЧГруппировкиРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4.ГруппировкиРасчеты КАК ТЧГруппировкиРасчетов
	|ГДЕ
	|	ТЧГруппировкиРасчетов.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧГруппировкиРасчетов.Ссылка,
	|	ТЧГруппировкиРасчетов.ТипРасчетов,
	|	ТЧГруппировкиРасчетов.ОбъектРасчетов,
	|	ТЧГруппировкиРасчетов.Договор,
	|	ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧГруппировкиРасчетов.Ссылка.Организация.ВалютаРегламентированногоУчета ИНАЧЕ ТЧГруппировкиРасчетов.Валюта КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппировкиРасчетов.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК ТипРасчетов,
	|	ТЧГруппировкиРасчетов.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТЧГруппировкиРасчетов.Договор КАК Договор,
	|	ТЧГруппировкиРасчетов.Валюта КАК Валюта,
	|	СУММА(ВЫБОР КОГДА ТЧГруппировкиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		ТОГДА
	|			-ТЧГруппировкиРасчетов.НачальноеСальдо
	|		ИНАЧЕ
	|			ТЧГруппировкиРасчетов.НачальноеСальдо
	|	КОНЕЦ) КАК НачальноеСальдо,
	|	СУММА(ТЧГруппировкиРасчетов.ОборотПриход) КАК ОборотПриход,
	|	СУММА(ТЧГруппировкиРасчетов.ОборотРасход) КАК ОборотРасход,
	|	СУММА(ВЫБОР КОГДА ТЧГруппировкиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|		ТОГДА
	|			-ТЧГруппировкиРасчетов.КонечноеСальдо
	|		ИНАЧЕ
	|			ТЧГруппировкиРасчетов.КонечноеСальдо
	|	КОНЕЦ) КАК КонечноеСальдо
	|ПОМЕСТИТЬ ТЧГруппировкиПоВсемТипамРасчетов
	|ИЗ
	|	ТЧГруппировкиРасчетов КАК ТЧГруппировкиРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТЧГруппировкиРасчетов.Ссылка,
	|	ТЧГруппировкиРасчетов.ОбъектРасчетов,
	|	ТЧГруппировкиРасчетов.Договор,
	|	ТЧГруппировкиРасчетов.Валюта
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппировкиРасчеты.Ссылка КАК ДокументСсылка,
	|	ТЧГруппировкиРасчеты.Ссылка.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ТЧГруппировкиРасчеты.ТипРасчетов КАК ТипРасчетов,
	|	ТЧГруппировкиРасчеты.Договор КАК Договор,
	|	ТЧДетальныеЗаписиРасчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТЧДетальныеЗаписиРасчеты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ТЧДетальныеЗаписиРасчеты.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ТЧГруппировкиРасчеты.Валюта КАК Валюта,
	|	ТЧДетальныеЗаписиРасчеты.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ТЧДетальныеЗаписиРасчеты.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаДокументаКонтрагент
	|		ИНАЧЕ 
	|			ТЧДетальныеЗаписиРасчеты.СуммаДокумента
	|	КОНЕЦ КАК СуммаДокументаКонтрагент,
	|	ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧДетальныеЗаписиРасчеты.СуммаДолгРегл ИНАЧЕ ТЧДетальныеЗаписиРасчеты.СуммаДолг КОНЕЦ КАК СуммаДолг,
	|	ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧДетальныеЗаписиРасчеты.СуммаАвансРегл ИНАЧЕ ТЧДетальныеЗаписиРасчеты.СуммаАванс КОНЕЦ КАК СуммаАванс,
	|	ТЧДетальныеЗаписиРасчеты.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаДолгКонтрагент
	|		ИНАЧЕ 
	|			ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧДетальныеЗаписиРасчеты.СуммаДолгРегл ИНАЧЕ ТЧДетальныеЗаписиРасчеты.СуммаДолг КОНЕЦ
	|	КОНЕЦ КАК СуммаДолгКонтрагент,
	|	ВЫБОР
	| 		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаАвансКонтрагент
	|		ИНАЧЕ 
	|			ВЫБОР КОГДА &ВыводитьВВалютеРегл ТОГДА ТЧДетальныеЗаписиРасчеты.СуммаАвансРегл ИНАЧЕ ТЧДетальныеЗаписиРасчеты.СуммаАванс КОНЕЦ
	|	КОНЕЦ КАК СуммаАвансКонтрагент,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиРасчеты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиРасчеты.СуммаВзаиморасчетовКонтрагент
	|		ИНАЧЕ 
	|			ТЧДетальныеЗаписиРасчеты.СуммаВзаиморасчетов
	|	КОНЕЦ  КАК СуммаВзаиморасчетовКонтрагент
	|
	|ПОМЕСТИТЬ ДетальныеЗаписиРасчетов
	|ИЗ
	|	ТЧГруппировкиРасчетов КАК ТЧГруппировкиРасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4.ДетальныеЗаписиРасчеты КАК ТЧДетальныеЗаписиРасчеты
	|		ПО ТЧГруппировкиРасчеты.Ссылка = ТЧДетальныеЗаписиРасчеты.Ссылка
	|			И ТЧГруппировкиРасчеты.ОбъектРасчетов = ТЧДетальныеЗаписиРасчеты.ОбъектРасчетов
	|			И ТЧГруппировкиРасчеты.Договор = ТЧДетальныеЗаписиРасчеты.Договор
	|ГДЕ
	|	ТЧДетальныеЗаписиРасчеты.Ссылка В(&МассивОбъектов)
	|	И (&ВыводитьВВалютеРегл
	|		ИЛИ НЕ &ВыводитьВВалютеРегл И (ТИПЗНАЧЕНИЯ(ТЧДетальныеЗаписиРасчеты.РасчетныйДокумент) <> ТИП(Документ.РасчетКурсовыхРазниц)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппировкаРасчетов.Ссылка КАК ДокументСсылка,
	|	ГруппировкаРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ГруппировкаРасчетов.Договор КАК ОбъектГруппировки,
	|	ГруппировкаРасчетов.Валюта КАК Валюта,
	|	СУММА(ГруппировкаРасчетов.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(ГруппировкаРасчетов.ОборотПриход) КАК ОборотПриход,
	|	СУММА(ГруппировкаРасчетов.ОборотРасход) КАК ОборотРасход,
	|	СУММА(ГруппировкаРасчетов.КонечноеСальдо) КАК КонечноеСальдо
	|ПОМЕСТИТЬ втГруппировкиРасчетов
	|ИЗ
	|	ТЧГруппировкиРасчетов КАК ГруппировкаРасчетов
	|ГДЕ
	|	НЕ &ОбъединитьКлиентовПоставщиков
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппировкаРасчетов.Ссылка,
	|	ГруппировкаРасчетов.ТипРасчетов,
	|	ГруппировкаРасчетов.Договор,
	|	ГруппировкаРасчетов.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГруппировкаРасчетов.Ссылка КАК ДокументСсылка,
	|	ГруппировкаРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ГруппировкаРасчетов.Договор КАК ОбъектГруппировки,
	|	ГруппировкаРасчетов.Валюта КАК Валюта,
	|	СУММА(ГруппировкаРасчетов.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(ГруппировкаРасчетов.ОборотПриход) КАК ОборотПриход,
	|	СУММА(ГруппировкаРасчетов.ОборотРасход) КАК ОборотРасход,
	|	СУММА(ГруппировкаРасчетов.КонечноеСальдо) КАК КонечноеСальдо
	|ИЗ
	|	ТЧГруппировкиПоВсемТипамРасчетов КАК ГруппировкаРасчетов
	|ГДЕ
	|	&ОбъединитьКлиентовПоставщиков
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппировкаРасчетов.Ссылка,
	|	ГруппировкаРасчетов.ТипРасчетов,
	|	ГруппировкаРасчетов.Договор,
	|	ГруппировкаРасчетов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировки.ДокументСсылка КАК ДокументСсылка,
	|	Группировки.ТипРасчетов КАК ТипРасчетов,
	|	ДетальныеЗаписиРасчетов.ТипРасчетов КАК ТипРасчетов2,
	|	Группировки.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ПредставлениеСсылки(Группировки.ОбъектГруппировки) КАК ПредставлениеОбъектГруппировки,
	|	
	|	Группировки.НачальноеСальдо КАК НачальноеСальдо,
	|	ВЫБОР
	|		КОГДА (Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					ИЛИ Группировки.ТипРасчетов = НЕОПРЕДЕЛЕНО)
	|				И Группировки.НачальноеСальдо > 0
	|			ТОГДА 
	|				Группировки.НачальноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.НачальноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.НачальноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК НачальноеСальдоДт,
	|	ВЫБОР
	|		КОГДА (Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					ИЛИ Группировки.ТипРасчетов = НЕОПРЕДЕЛЕНО)
	|				И Группировки.НачальноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.НачальноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.НачальноеСальдо > 0
	|			ТОГДА 
	|				Группировки.НачальноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК НачальноеСальдоКт,
	|	Группировки.ОборотПриход КАК ОборотПриход,
	|	Группировки.ОборотРасход КАК ОборотРасход,
	|	Группировки.КонечноеСальдо КАК КонечноеСальдо,
	|	ВЫБОР
	|		КОГДА (Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					ИЛИ Группировки.ТипРасчетов = НЕОПРЕДЕЛЕНО)
	|				И Группировки.КонечноеСальдо > 0
	|			ТОГДА 
	|				Группировки.КонечноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.КонечноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.КонечноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечноеСальдоДт,
	|	ВЫБОР
	|		КОГДА (Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|					ИЛИ Группировки.ТипРасчетов = НЕОПРЕДЕЛЕНО)
	|				И Группировки.КонечноеСальдо < 0
	|			ТОГДА 
	|				-Группировки.КонечноеСальдо
	|			
	|		КОГДА Группировки.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				И Группировки.КонечноеСальдо > 0
	|			ТОГДА 
	|				Группировки.КонечноеСальдо
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК КонечноеСальдоКт,
	|	
	|	НЕ ДетальныеЗаписиРасчетов.РасчетныйДокумент ЕСТЬ NULL КАК ЕстьОбороты,
	|	ДетальныеЗаписиРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДетальныеЗаписиРасчетов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДетальныеЗаписиРасчетов.РасчетныйДокумент) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		ТОГДА Группировки.ДокументСсылка.Организация.ВалютаРегламентированногоУчета
	|		ИНАЧЕ Группировки.Валюта
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДетальныеЗаписиРасчетов.РасчетныйДокумент) = ТИП(Документ.РасчетКурсовыхРазниц)
	|		ТОГДА Группировки.ДокументСсылка.Организация.ВалютаРегламентированногоУчета
	|		ИНАЧЕ ДетальныеЗаписиРасчетов.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|
	|	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) ИНАЧЕ 0 КОНЕЦ
	|		
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				ИЛИ ДетальныеЗаписиРасчетов.ТипРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) ИНАЧЕ 0 КОНЕЦ
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДебет,
	| 	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) ИНАЧЕ 0 КОНЕЦ
	|		
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				ИЛИ ДетальныеЗаписиРасчетов.ТипРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) ИНАЧЕ 0 КОНЕЦ
	|				
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	// У контрагента Дебетом является наш Кредит, а Кредитом наш Дебет
	|	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|		
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				ИЛИ ДетальныеЗаписиРасчетов.ТипРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|				
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|		
	|		КОГДА ДетальныеЗаписиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|				ИЛИ ДетальныеЗаписиРасчетов.ТипРасчетов = НЕОПРЕДЕЛЕНО
	|			ТОГДА
	|				ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) < 0 ТОГДА -ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|				+ ВЫБОР КОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) > 0 ТОГДА ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) ИНАЧЕ 0 КОНЕЦ
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДокументаКонтрагент, 0) КАК СуммаДокументаКонтрагент,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолг, 0) КАК СуммаДолг,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАванс, 0) КАК СуммаАванс,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаДолгКонтрагент, 0) КАК СуммаДолгКонтрагент,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаАвансКонтрагент, 0) КАК СуммаАвансКонтрагент,
	|	ЕСТЬNULL(ДетальныеЗаписиРасчетов.СуммаВзаиморасчетовКонтрагент, 0) КАК СуммаВзаиморасчетовКонтрагент
	|	
	|ПОМЕСТИТЬ ДеталиРасчетов
	|ИЗ
	|	втГруппировкиРасчетов КАК Группировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиРасчетов КАК ДетальныеЗаписиРасчетов
	|		ПО Группировки.ДокументСсылка = ДетальныеЗаписиРасчетов.ДокументСсылка
	|			И (Группировки.ТипРасчетов = ДетальныеЗаписиРасчетов.ТипРасчетов ИЛИ &ОбъединитьКлиентовПоставщиков)
	|			И Группировки.Валюта = ДетальныеЗаписиРасчетов.Валюта
	|			И Группировки.ОбъектГруппировки = ДетальныеЗаписиРасчетов.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЧГруппировкиФинИнструменты.Ссылка КАК ДокументСсылка,
	|	ТЧГруппировкиФинИнструменты.ТипРасчетов КАК ТипРасчетов,
	|	ТЧДетальныеЗаписиФинИнструменты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ТЧДетальныеЗаписиФинИнструменты.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ТЧГруппировкиФинИнструменты.Валюта КАК Валюта,
	|	ТЧДетальныеЗаписиФинИнструменты.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ТЧДетальныеЗаписиФинИнструменты.Договор КАК Договор,
	|	ТЧДетальныеЗаписиФинИнструменты.Договор.ХарактерДоговора КАК ХарактерДоговора,
	|	
	|	ТЧДетальныеЗаписиФинИнструменты.ОсновнойДолг КАК ОсновнойДолг,
	|	ВЫБОР 
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|			ТОГДА 
	|				ТЧДетальныеЗаписиФинИнструменты.ОсновнойДолгКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ОсновнойДолг
	|	КОНЕЦ КАК ОсновнойДолгКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.Проценты КАК Проценты,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ПроцентыКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.Проценты
	|	КОНЕЦ КАК ПроцентыКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.Комиссия КАК Комиссия,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА
	|			ТЧДетальныеЗаписиФинИнструменты.КомиссияКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.Комиссия
	|	КОНЕЦ КАК КомиссияКонтрагент,
	|	
	|	ТЧДетальныеЗаписиФинИнструменты.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.АрендныеОбязательстваКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.АрендныеОбязательства
	|	КОНЕЦ КАК АрендныеОбязательстваКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ОбеспечительныйПлатежКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ОбеспечительныйПлатеж
	|	КОНЕЦ КАК ОбеспечительныйПлатежКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.УслугаПоАренде КАК УслугаПоАренде,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.УслугаПоАрендеКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.УслугаПоАренде
	|	КОНЕЦ КАК УслугаПоАрендеКонтрагент,
	|	ТЧДетальныеЗаписиФинИнструменты.ВыкупнаяСтоимость КАК ВыкупнаяСтоимость,
	|	ВЫБОР
	|		КОГДА ТЧДетальныеЗаписиФинИнструменты.Ссылка.ЕстьРасхождения
	|		ТОГДА 
	|			ТЧДетальныеЗаписиФинИнструменты.ВыкупнаяСтоимостьКонтрагент
	|		ИНАЧЕ
	|			ТЧДетальныеЗаписиФинИнструменты.ВыкупнаяСтоимость
	|	КОНЕЦ КАК ВыкупнаяСтоимостьКонтрагент
	|	
	|ПОМЕСТИТЬ ДетальныеЗаписиФинансовыеИнструменты
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4.ГруппировкиФинансовыеИнструменты КАК ТЧГруппировкиФинИнструменты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4.ДетальныеЗаписиФинансовыеИнструменты КАК ТЧДетальныеЗаписиФинИнструменты
	|		ПО ТЧГруппировкиФинИнструменты.Ссылка = ТЧДетальныеЗаписиФинИнструменты.Ссылка
	|			И ТЧГруппировкиФинИнструменты.Договор = ТЧДетальныеЗаписиФинИнструменты.Договор
	|ГДЕ
	|	ТЧГруппировкиФинИнструменты.Ссылка В(&МассивОбъектов)
	|	И ТЧДетальныеЗаписиФинИнструменты.Ссылка В(&МассивОбъектов)
	|	И (&ВыводитьВВалютеРегл 
	|			И ТЧДетальныеЗаписиФинИнструменты.ВалютаДокумента = ТЧГруппировкиФинИнструменты.Ссылка.Организация.ВалютаРегламентированногоУчета 
	|			И ТЧГруппировкиФинИнструменты.Валюта = ТЧГруппировкиФинИнструменты.Ссылка.Организация.ВалютаРегламентированногоУчета 
	|		ИЛИ НЕ &ВыводитьВВалютеРегл
	|	)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппировкаФинИнструментов.Ссылка КАК ДокументСсылка,
	|	ГруппировкаФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ГруппировкаФинИнструментов.Договор КАК ОбъектГруппировки,
	|	ГруппировкаФинИнструментов.Валюта КАК Валюта,
	|	СУММА(ГруппировкаФинИнструментов.НачальноеСальдоДт) КАК НачальноеСальдоДт,
	|	СУММА(ГруппировкаФинИнструментов.НачальноеСальдоКт) КАК НачальноеСальдоКт,
	|	СУММА(ГруппировкаФинИнструментов.ОборотПриход) КАК ОборотПриход,
	|	СУММА(ГруппировкаФинИнструментов.ОборотРасход) КАК ОборотРасход,
	|	СУММА(ГруппировкаФинИнструментов.КонечноеСальдоДт) КАК КонечноеСальдоДт,
	|	СУММА(ГруппировкаФинИнструментов.КонечноеСальдоКт) КАК КонечноеСальдоКт
	|ПОМЕСТИТЬ втГруппировкиФинИнструментов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4.ГруппировкиФинансовыеИнструменты КАК ГруппировкаФинИнструментов
	|ГДЕ
	|	ГруппировкаФинИнструментов.Ссылка В(&МассивОбъектов)
	|	И (&ВыводитьВВалютеРегл И ГруппировкаФинИнструментов.Валюта = ГруппировкаФинИнструментов.Ссылка.Организация.ВалютаРегламентированногоУчета
	|		ИЛИ НЕ &ВыводитьВВалютеРегл
	|	)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппировкаФинИнструментов.Ссылка,
	|	ГруппировкаФинИнструментов.ТипРасчетов,
	|	ГруппировкаФинИнструментов.Договор,
	|	ГруппировкаФинИнструментов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Группировки.ДокументСсылка КАК ДокументСсылка,
	|	Группировки.ТипРасчетов КАК ТипРасчетов,
	|	Группировки.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ПредставлениеСсылки(Группировки.ОбъектГруппировки) КАК ПредставлениеОбъектГруппировки,
	|	
	|	Группировки.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	Группировки.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	Группировки.ОборотПриход КАК ОборотПриход,
	|	Группировки.ОборотРасход КАК ОборотРасход,
	|	Группировки.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	Группировки.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ЕСТЬNULL(ДеталиФинИнструментов.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	Группировки.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОсновнойДолг, 0) КАК ОсновнойДолг,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОсновнойДолгКонтрагент, 0) КАК ОсновнойДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.Проценты, 0) КАК Проценты,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ПроцентыКонтрагент, 0) КАК ПроцентыКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.Комиссия, 0) КАК Комиссия,
	|	ЕСТЬNULL(ДеталиФинИнструментов.КомиссияКонтрагент, 0) КАК КомиссияКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиФинИнструментов.АрендныеОбязательства, 0) КАК АрендныеОбязательства,
	|	ЕСТЬNULL(ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент, 0) КАК АрендныеОбязательстваКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОбеспечительныйПлатеж, 0) КАК ОбеспечительныйПлатеж,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент, 0) КАК ОбеспечительныйПлатежКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.УслугаПоАренде, 0) КАК УслугаПоАренде,
	|	ЕСТЬNULL(ДеталиФинИнструментов.УслугаПоАрендеКонтрагент, 0) КАК УслугаПоАрендеКонтрагент,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ВыкупнаяСтоимость, 0) КАК ВыкупнаяСтоимость,
	|	ЕСТЬNULL(ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент, 0) КАК ВыкупнаяСтоимостьКонтрагент
	|	
	|ПОМЕСТИТЬ ДеталиФинИнструментовБезТипаСумм
	|ИЗ
	|	втГруппировкиФинИнструментов КАК Группировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиФинансовыеИнструменты КАК ДеталиФинИнструментов
	|		ПО Группировки.ДокументСсылка = ДеталиФинИнструментов.ДокументСсылка
	|			И Группировки.ТипРасчетов = ДеталиФинИнструментов.ТипРасчетов
	|			И Группировки.ОбъектГруппировки = ДеталиФинИнструментов.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ЛОЖЬ КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	0 КАК СуммаДебет,
	|	0 КАК СуммаКредит,
	|
	|	0 КАК СуммаДебетКонтрагент,
	|	0 КАК СуммаКредитКонтрагент,
	|	
	|	ДеталиФинИнструментов.ОсновнойДолг КАК ОсновнойДолг,
	|	ДеталиФинИнструментов.ОсновнойДолгКонтрагент КАК ОсновнойДолгКонтрагент,
	|	ДеталиФинИнструментов.Проценты КАК Проценты,
	|	ДеталиФинИнструментов.ПроцентыКонтрагент КАК ПроцентыКонтрагент,
	|	ДеталиФинИнструментов.Комиссия КАК Комиссия,
	|	ДеталиФинИнструментов.КомиссияКонтрагент КАК КомиссияКонтрагент,
	|	
	|	ДеталиФинИнструментов.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент КАК АрендныеОбязательстваКонтрагент,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент КАК ОбеспечительныйПлатежКонтрагент,
	|	ДеталиФинИнструментов.УслугаПоАренде КАК УслугаПоАренде,
	|	ДеталиФинИнструментов.УслугаПоАрендеКонтрагент КАК УслугаПоАрендеКонтрагент,
	|	ДеталиФинИнструментов.ВыкупнаяСтоимость КАК ВыкупнаяСтоимость,
	|	ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент КАК ВыкупнаяСтоимостьКонтрагент
	|	
	|ПОМЕСТИТЬ ДеталиФинИнструментов
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.Договор = НЕОПРЕДЕЛЕНО //нет детальных записей по договору
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолг > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ОсновнойДолг
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолг < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ОсновнойДолг
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолгКонтрагент < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.ОсновнойДолгКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ОсновнойДолгКонтрагент > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.ОсновнойДолгКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	ДеталиФинИнструментов.ОсновнойДолг КАК ОсновнойДолг,
	|	ДеталиФинИнструментов.ОсновнойДолгКонтрагент КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ОсновнойДолг <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Проценты > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.Проценты
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Проценты < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.Проценты
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ПроцентыКонтрагент < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.ПроцентыКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.ПроцентыКонтрагент > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.ПроцентыКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	ДеталиФинИнструментов.Проценты КАК Проценты,
	|	ДеталиФинИнструментов.ПроцентыКонтрагент КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.Проценты <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия) КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Комиссия > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.Комиссия
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.Комиссия < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.Комиссия
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.КомиссияКонтрагент < 0
	|			ТОГДА 
	|				-ДеталиФинИнструментов.КомиссияКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР
	|		КОГДА ДеталиФинИнструментов.КомиссияКонтрагент > 0
	|			ТОГДА 
	|				ДеталиФинИнструментов.КомиссияКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	ДеталиФинИнструментов.Комиссия КАК Комиссия,
	|	ДеталиФинИнструментов.КомиссияКонтрагент КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.Комиссия <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&АрендныеОбязательства КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	0 КАК СуммаДебет,
	|	0 КАК СуммаКредит,
	|
	|	0 КАК СуммаДебетКонтрагент,
	|	0 КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Аренда)
	|	И ДеталиФинИнструментов.АрендныеОбязательства = 0
	|	И ДеталиФинИнструментов.ОбеспечительныйПлатеж = 0
	|	И ДеталиФинИнструментов.УслугаПоАренде = 0
	|	И ДеталиФинИнструментов.ВыкупнаяСтоимость = 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&АрендныеОбязательства КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательства > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.АрендныеОбязательства
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательства < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.АрендныеОбязательства
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	ДеталиФинИнструментов.АрендныеОбязательства КАК АрендныеОбязательства,
	|	ДеталиФинИнструментов.АрендныеОбязательстваКонтрагент КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.АрендныеОбязательства <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&ОбеспечительныйПлатеж КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатеж > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ОбеспечительныйПлатеж
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатеж < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ОбеспечительныйПлатеж
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатеж КАК ОбеспечительныйПлатеж,
	|	ДеталиФинИнструментов.ОбеспечительныйПлатежКонтрагент КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ОбеспечительныйПлатеж <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&УслугаПоАренде КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.УслугаПоАренде > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.УслугаПоАренде
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.УслугаПоАренде < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.УслугаПоАренде
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.УслугаПоАрендеКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.УслугаПоАрендеКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.УслугаПоАрендеКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.УслугаПоАрендеКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	ДеталиФинИнструментов.УслугаПоАренде КАК УслугаПоАренде,
	|	ДеталиФинИнструментов.УслугаПоАрендеКонтрагент КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.УслугаПоАренде <> 0
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДеталиФинИнструментов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиФинИнструментов.ТипРасчетов КАК ТипРасчетов,
	|	ДеталиФинИнструментов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиФинИнструментов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиФинИнструментов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиФинИнструментов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиФинИнструментов.ОборотПриход КАК ОборотПриход,
	|	ДеталиФинИнструментов.ОборотРасход КАК ОборотРасход,
	|	ДеталиФинИнструментов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиФинИнструментов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	ИСТИНА КАК ЕстьОбороты,
	|	ДеталиФинИнструментов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиФинИнструментов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиФинИнструментов.ХарактерДоговора КАК ХарактерДоговора,
	|	&ВыкупнаяСтоимость КАК ТипСуммы,
	|	ДеталиФинИнструментов.Валюта КАК Валюта,
	|	ДеталиФинИнструментов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупнаяСтоимость > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ВыкупнаяСтоимость
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупнаяСтоимость < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ВыкупнаяСтоимость
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредит,
	|
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент < 0
	|			ТОГДА
	|				-ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаДебетКонтрагент,
	|	ВЫБОР 
	|		КОГДА ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент > 0
	|			ТОГДА
	|				ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	ДеталиФинИнструментов.ВыкупнаяСтоимость КАК ВыкупнаяСтоимость,
	|	ДеталиФинИнструментов.ВыкупнаяСтоимостьКонтрагент КАК ВыкупнаяСтоимостьКонтрагент
	|ИЗ
	|	ДеталиФинИнструментовБезТипаСумм КАК ДеталиФинИнструментов
	|ГДЕ
	|	ДеталиФинИнструментов.ВыкупнаяСтоимость <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДеталиРасчетов.ДокументСсылка КАК ДокументСсылка,
	|	ДеталиРасчетов.ТипРасчетов КАК ТипРасчетов,
	|	ЛОЖЬ КАК ФинансовыеИнструменты,
	|	ДеталиРасчетов.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДеталиРасчетов.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиРасчетов.ЕстьОбороты КАК ЕстьОбороты,
	|	ДеталиРасчетов.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДеталиРасчетов.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДеталиРасчетов.Валюта КАК Валюта,
	|	ДеталиРасчетов.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	ДеталиРасчетов.НачальноеСальдо КАК НачальноеСальдо,
	|	ДеталиРасчетов.НачальноеСальдоДт КАК НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт КАК НачальноеСальдоКт,
	|	ДеталиРасчетов.ОборотПриход КАК ОборотПриход,
	|	ДеталиРасчетов.ОборотРасход КАК ОборотРасход,
	|	ДеталиРасчетов.КонечноеСальдо КАК КонечноеСальдо,
	|	ДеталиРасчетов.КонечноеСальдоДт КАК КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт КАК КонечноеСальдоКт,
	|	
	|	СУММА(ДеталиРасчетов.СуммаДебет) КАК СуммаДебет,
	|	СУММА(ДеталиРасчетов.СуммаКредит) КАК СуммаКредит,
	|
	|	СУММА(ДеталиРасчетов.СуммаДебетКонтрагент) КАК СуммаДебетКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаКредитКонтрагент) КАК СуммаКредитКонтрагент,
	|	
	|	ДеталиРасчетов.СуммаДокумента КАК СуммаДокумента,
	|	ДеталиРасчетов.СуммаДокументаКонтрагент КАК СуммаДокументаКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаДолг) КАК СуммаДолг,
	|	СУММА(ДеталиРасчетов.СуммаАванс) КАК СуммаАванс,
	|	СУММА(ДеталиРасчетов.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	СУММА(ДеталиРасчетов.СуммаДолгКонтрагент) КАК СуммаДолгКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаАвансКонтрагент) КАК СуммаАвансКонтрагент,
	|	СУММА(ДеталиРасчетов.СуммаВзаиморасчетовКонтрагент) КАК СуммаВзаиморасчетовКонтрагент,
	|	
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
	|	0 КАК ОсновнойДолг,
	|	0 КАК ОсновнойДолгКонтрагент,
	|	0 КАК Проценты,
	|	0 КАК ПроцентыКонтрагент,
	|	0 КАК Комиссия,
	|	0 КАК КомиссияКонтрагент,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК АрендныеОбязательстваКонтрагент,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК ОбеспечительныйПлатежКонтрагент,
	|	0 КАК УслугаПоАренде,
	|	0 КАК УслугаПоАрендеКонтрагент,
	|	0 КАК ВыкупнаяСтоимость,
	|	0 КАК ВыкупнаяСтоимостьКонтрагент,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА 10
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			ТОГДА 20
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокРасчетов,
	|	
	|	0 КАК ПорядокТипаСуммы
	|	
	|ПОМЕСТИТЬ ДетальныеЗаписиДокумента
	|ИЗ
	|	ДеталиРасчетов КАК ДеталиРасчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ДеталиРасчетов.ДокументСсылка,
	|	ДеталиРасчетов.ТипРасчетов,
	|	ДеталиРасчетов.ОбъектГруппировки,
	|	ДеталиРасчетов.ПредставлениеОбъектГруппировки,
	|	
	|	ДеталиРасчетов.ЕстьОбороты,
	|	ДеталиРасчетов.РасчетныйДокумент,
	|	ДеталиРасчетов.ОписаниеДокумента,
	|	ДеталиРасчетов.Валюта,
	|	ДеталиРасчетов.ВалютаДокумента,
	|	
	|	ДеталиРасчетов.НачальноеСальдо,
	|	ДеталиРасчетов.НачальноеСальдоДт,
	|	ДеталиРасчетов.НачальноеСальдоКт,
	|	ДеталиРасчетов.ОборотПриход,
	|	ДеталиРасчетов.ОборотРасход,
	|	ДеталиРасчетов.КонечноеСальдо,
	|	ДеталиРасчетов.КонечноеСальдоДт,
	|	ДеталиРасчетов.КонечноеСальдоКт,
	|	
	|	ДеталиРасчетов.СуммаДокумента,
	|	ДеталиРасчетов.СуммаДокументаКонтрагент,
	|	
	|	ВЫБОР 
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			ТОГДА 10
	|		КОГДА ДеталиРасчетов.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			ТОГДА 20
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДетальныеЗаписи.ДокументСсылка КАК ДокументСсылка,
	|	ДетальныеЗаписи.ТипРасчетов КАК ТипРасчетов,
	|	ИСТИНА КАК ФинансовыеИнструменты,
	|	ДетальныеЗаписи.ОбъектГруппировки КАК ОбъектГруппировки,
	|	ДетальныеЗаписи.ПредставлениеОбъектГруппировки КАК ПредставлениеОбъектГруппировки,
	|	
	|	ДетальныеЗаписи.ЕстьОбороты КАК ЕстьОбороты,
	|	ДетальныеЗаписи.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДетальныеЗаписи.ОписаниеДокумента КАК ОписаниеДокумента,
	|	ДетальныеЗаписи.Валюта КАК Валюта,
	|	ДетальныеЗаписи.ВалютаДокумента КАК ВалютаДокумента,
	|	
	|	0 КАК НачальноеСальдо,
	|	ДетальныеЗаписи.НачальноеСальдоДт,
	|	ДетальныеЗаписи.НачальноеСальдоКт,
	|	ДетальныеЗаписи.ОборотПриход,
	|	ДетальныеЗаписи.ОборотРасход,
	|	0 КАК КонечноеСальдо,
	|	ДетальныеЗаписи.КонечноеСальдоДт,
	|	ДетальныеЗаписи.КонечноеСальдоКт,
	|	
	|	СУММА(ДетальныеЗаписи.СуммаДебет) КАК СуммаДебет,
	|	СУММА(ДетальныеЗаписи.СуммаКредит) КАК СуммаКредит,
	|
	|	СУММА(ДетальныеЗаписи.СуммаДебетКонтрагент) КАК СуммаДебетКонтрагент,
	|	СУММА(ДетальныеЗаписи.СуммаКредитКонтрагент) КАК СуммаКредитКонтрагент,
	|	
	|	0 КАК СуммаДокумента,
	|	0 КАК СуммаДокументаКонтрагент,
	|	0 КАК СуммаДолг,
	|	0 КАК СуммаАванс,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаДолгКонтрагент,
	|	0 КАК СуммаАвансКонтрагент,
	|	0 КАК СуммаВзаиморасчетовКонтрагент,
	|	
	|	ДетальныеЗаписи.ТипСуммы КАК ТипСуммы,
	|	СУММА(ДетальныеЗаписи.ОсновнойДолг) КАК ОсновнойДолг,
	|	СУММА(ДетальныеЗаписи.ОсновнойДолгКонтрагент) КАК ОсновнойДолгКонтрагент,
	|	СУММА(ДетальныеЗаписи.Проценты) КАК Проценты,
	|	СУММА(ДетальныеЗаписи.ПроцентыКонтрагент) КАК ПроцентыКонтрагент,
	|	СУММА(ДетальныеЗаписи.Комиссия) КАК Комиссия,
	|	СУММА(ДетальныеЗаписи.КомиссияКонтрагент) КАК КомиссияКонтрагент,
	|	
	|	СУММА(ДетальныеЗаписи.АрендныеОбязательства) КАК АрендныеОбязательства,
	|	СУММА(ДетальныеЗаписи.АрендныеОбязательстваКонтрагент) КАК АрендныеОбязательстваКонтрагент,
	|	СУММА(ДетальныеЗаписи.ОбеспечительныйПлатеж) КАК ОбеспечительныйПлатеж,
	|	СУММА(ДетальныеЗаписи.ОбеспечительныйПлатежКонтрагент) КАК ОбеспечительныйПлатежКонтрагент,
	|	СУММА(ДетальныеЗаписи.УслугаПоАренде) КАК УслугаПоАренде,
	|	СУММА(ДетальныеЗаписи.УслугаПоАрендеКонтрагент) КАК УслугаПоАрендеКонтрагент,
	|	СУММА(ДетальныеЗаписи.ВыкупнаяСтоимость) КАК ВыкупнаяСтоимость,
	|	СУММА(ДетальныеЗаписи.ВыкупнаяСтоимостьКонтрагент) КАК ВыкупнаяСтоимостьКонтрагент,
	|	
	|	ВЫБОР 
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|			ТОГДА 30
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|			ТОГДА 40
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем)
	|			ТОГДА 50
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокРасчетов,
	|	
	|	ВЫБОР 
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|			ТОГДА 10
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			ТОГДА 20
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|			ТОГДА 30
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &АрендныеОбязательства 
	|			ТОГДА 40
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ОбеспечительныйПлатеж 
	|			ТОГДА 50
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &УслугаПоАренде 
	|			ТОГДА 60
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ВыкупнаяСтоимость 
	|			ТОГДА 70
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ПорядокТипаСуммы
	|ИЗ
	|	ДеталиФинИнструментов КАК ДетальныеЗаписи
	|
	|СГРУППИРОВАТЬ ПО
	|	ДетальныеЗаписи.ДокументСсылка,
	|	ДетальныеЗаписи.ТипРасчетов,
	|	ДетальныеЗаписи.ОбъектГруппировки,
	|	ДетальныеЗаписи.ПредставлениеОбъектГруппировки,
	|	
	|	ДетальныеЗаписи.ЕстьОбороты,
	|	ДетальныеЗаписи.РасчетныйДокумент,
	|	ДетальныеЗаписи.ОписаниеДокумента,
	|	ДетальныеЗаписи.Валюта,
	|	ДетальныеЗаписи.ВалютаДокумента,
	|	
	|	ДетальныеЗаписи.НачальноеСальдоДт,
	|	ДетальныеЗаписи.НачальноеСальдоКт,
	|	ДетальныеЗаписи.ОборотПриход,
	|	ДетальныеЗаписи.ОборотРасход,
	|	ДетальныеЗаписи.КонечноеСальдоДт,
	|	ДетальныеЗаписи.КонечноеСальдоКт,
	|	
	|	ДетальныеЗаписи.ТипСуммы,
	|	
	|	ВЫБОР 
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|			ТОГДА 30
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|			ТОГДА 40
	|		КОГДА ДетальныеЗаписи.ТипРасчетов = ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем)
	|			ТОГДА 50
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ,
	|	
	|	ВЫБОР 
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|			ТОГДА 10
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|			ТОГДА 20
	|		КОГДА ДетальныеЗаписи.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|			ТОГДА 30
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &АрендныеОбязательства 
	|			ТОГДА 40
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ОбеспечительныйПлатеж 
	|			ТОГДА 50
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &УслугаПоАренде
	|			ТОГДА 60
	|		КОГДА ДетальныеЗаписи.ТипСуммы = &ВыкупнаяСтоимость 
	|			ТОГДА 70
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДеталиДокумента.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДокументСверки.Организация КАК Организация,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДеталиДокумента.РасчетныйДокумент) = ТИП(Документ.КорректировкаРегистров)
	|			ТОГДА КорректировкаРегистров.Дата
	|		КОГДА ТИПЗНАЧЕНИЯ(ДеталиДокумента.РасчетныйДокумент) В 
	|				(ТИП(Документ.ПоступлениеБезналичныхДенежныхСредств),
	|				ТИП(Документ.СписаниеБезналичныхДенежныхСредств))
	|			ТОГДА ВЫБОР КОГДА РеестрДокументов.ДатаОтраженияВУчете = ДАТАВРЕМЯ(1,1,1)
	|						ТОГДА РеестрДокументов.ДатаПервичногоДокумента
	|						ИНАЧЕ РеестрДокументов.ДатаОтраженияВУчете
	|				КОНЕЦ
	|		ИНАЧЕ
	|			ДанныеДокументов.ДатаРегистратора
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДеталиДокумента.РасчетныйДокумент) = ТИП(Документ.КорректировкаРегистров)
	|			ТОГДА КорректировкаРегистров.Номер
	|		ИНАЧЕ
	|			ЕСТЬNULL(ВЫБОР КОГДА РеестрДокументов.НомерПервичногоДокумента = """" 
	|								ТОГДА ДанныеДокументов.НомерРегистратора
	|								ИНАЧЕ РеестрДокументов.НомерПервичногоДокумента
	|					КОНЕЦ,
	|				ДанныеДокументов.НомерРегистратора)
	|	КОНЕЦ КАК НомерДокумента
	|ПОМЕСТИТЬ втДанныеДокументов
	|ИЗ
	|	ДетальныеЗаписиДокумента КАК ДеталиДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4 КАК ДокументСверки
	|		ПО ДеталиДокумента.ДокументСсылка = ДокументСверки.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеДокументов
	|		ПО ДеталиДокумента.РасчетныйДокумент = ДанныеДокументов.Документ
	|			И ДокументСверки.Организация = ДанныеДокументов.Организация
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|		ПО ДеталиДокумента.РасчетныйДокумент = РеестрДокументов.Ссылка
	|			И ДокументСверки.Организация = РеестрДокументов.Организация
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРегистров КАК КорректировкаРегистров
	|		ПО ДеталиДокумента.РасчетныйДокумент = КорректировкаРегистров.Ссылка
	|ГДЕ
	|	ДокументСверки.Ссылка В(&МассивОбъектов)
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	РасчетныйДокумент,
	|	Организация
	|	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСверки.Ссылка КАК ДокументСсылка,
	|	ЕСТЬNULL(ДеталиДокумента.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)) КАК ТипРасчетов,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.ТипРасчетов, ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка))) КАК ПредставлениеТипРасчетов,
	|	ДокументСверки.Номер КАК Номер,
	|	ДокументСверки.Дата КАК Дата,
	|	ДокументСверки.Организация КАК Организация,
	|	ДокументСверки.Контрагент КАК Контрагент,
	|	ДокументСверки.Партнер КАК Партнер,
	|	ЕСТЬNULL(ДокументСверки.Партнер.НаименованиеПолное, """") КАК ПредставлениеПартнера,
	|	ДокументСверки.ЕстьРасхождения КАК ЕстьРасхождения,
	|	ДокументСверки.Договор КАК Договор,
	|	&ПредставлениеДоговораНаПечать КАК ПредставлениеДоговора,
	|	ДокументСверки.НачалоПериода КАК НачалоПериода,
	|	ДокументСверки.КонецПериода КАК КонецПериода,
	|	ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|		ТОГДА ЕСТЬNULL(ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование, """")
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОтветственныеЛица.РуководительНаименование, """")
	|	КОНЕЦ КАК ФИООтветственногоЛица,
	|	ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|		ТОГДА ЕСТЬNULL(ТаблицаОтветственныеЛица.ГлавныйБухгалтерДолжность, """")
	|		ИНАЧЕ ЕСТЬNULL(ТаблицаОтветственныеЛица.РуководительДолжность, """")
	|	КОНЕЦ КАК ДолжностьОтветственногоЛица,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДокументСверки.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА 
	|			ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицоОрганизацииКонтрагента = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|				ТОГДА ТаблицаОтветственныеЛицаОрганизацииКонтрагента.ГлавныйБухгалтерОрганизацииКонтрагентаНаименование
	|				ИНАЧЕ ТаблицаОтветственныеЛицаОрганизацииКонтрагента.РуководительОрганизацииКонтрагентаНаименование
	|			КОНЕЦ
	|		ИНАЧЕ ДокументСверки.ФИОРуководителяКонтрагента
	|	КОНЕЦ КАК ФИОРуководителяКонтрагента,
	|	ВЫБОР КОГДА ТИПЗНАЧЕНИЯ(ДокументСверки.Контрагент) = ТИП(Справочник.Организации)
	|		ТОГДА 
	|			ВЫБОР КОГДА ДокументСверки.ОтветственноеЛицоОрганизацииКонтрагента = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер)
	|				ТОГДА ТаблицаОтветственныеЛицаОрганизацииКонтрагента.ГлавныйБухгалтерОрганизацииКонтрагентаДолжность
	|				ИНАЧЕ ТаблицаОтветственныеЛицаОрганизацииКонтрагента.РуководительОрганизацииКонтрагентаДолжность
	|			КОНЕЦ
	|		ИНАЧЕ ДокументСверки.ДолжностьРуководителяКонтрагента
	|	КОНЕЦ КАК ДолжностьРуководителяКонтрагента,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ЕстьОбороты, ЛОЖЬ) КАК ЕстьОбороты,
	|	ЕСТЬNULL(ДеталиДокумента.ФинансовыеИнструменты, ЛОЖЬ) КАК ФинансовыеИнструменты,
	|	ЕСТЬNULL(ДеталиДокумента.ОбъектГруппировки, Неопределено) КАК ОбъектГруппировки,
	|	ВЫБОР 
	|		КОГДА ТИПЗНАЧЕНИЯ(ДеталиДокумента.ОбъектГруппировки) = ТИП(Справочник.ДоговорыКонтрагентов)
	|			ТОГДА ДоговорыКонтрагентов.НаименованиеДляПечати
	|		КОГДА ТИПЗНАЧЕНИЯ(ДеталиДокумента.ОбъектГруппировки) = ТИП(Справочник.ДоговорыМеждуОрганизациями)
	|			ТОГДА ДоговорыМеждуОрганизациями.НаименованиеДляПечати
	|		КОГДА ТИПЗНАЧЕНИЯ(ДеталиДокумента.ОбъектГруппировки) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|			ТОГДА ДоговорыКредитовДепозитов.НаименованиеДляПечати
	|		ИНАЧЕ ЕСТЬNULL(ДеталиДокумента.ПредставлениеОбъектГруппировки, """")
	|	КОНЕЦ КАК ПредставлениеОбъектГруппировки,
	|	ЕСТЬNULL(ДеталиДокумента.РасчетныйДокумент, Неопределено) КАК РасчетныйДокумент,
	|	ЕСТЬNULL(ДеталиДокумента.ОписаниеДокумента, """") КАК ОписаниеДокумента,
	|	ДанныеДокументов.ДатаДокумента КАК ДатаДокумента,
	|	ДанныеДокументов.НомерДокумента КАК НомерДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.Валюта, ДокументСверки.Организация.ВалютаРегламентированногоУчета) КАК Валюта,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.Валюта, ДокументСверки.Организация.ВалютаРегламентированногоУчета)) КАК ПредставлениеВалюта,
	|	ЕСТЬNULL(ДеталиДокумента.ВалютаДокумента, ДокументСверки.Организация.ВалютаРегламентированногоУчета) КАК ВалютаДокумента,
	|	ПредставлениеСсылки(ЕСТЬNULL(ДеталиДокумента.ВалютаДокумента, ДокументСверки.Организация.ВалютаРегламентированногоУчета)) КАК ПредставлениеВалютаДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.ТипСуммы, ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка)) КАК ТипСуммы,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдо, 0) КАК НачальноеСальдо,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоДт, 0) КАК НачальноеСальдоДт,
	|	ЕСТЬNULL(ДеталиДокумента.НачальноеСальдоКт, 0) КАК НачальноеСальдоКт,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотПриход, 0) КАК ОборотПриход,
	|	ЕСТЬNULL(ДеталиДокумента.ОборотРасход, 0) КАК ОборотРасход,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдо, 0) КАК КонечноеСальдо,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоДт, 0) КАК КонечноеСальдоДт,
	|	ЕСТЬNULL(ДеталиДокумента.КонечноеСальдоКт, 0) КАК КонечноеСальдоКт,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебет, 0) КАК СуммаДебет,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаКредит, 0) КАК СуммаКредит,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДебетКонтрагент, 0) КАК СуммаДебетКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаКредитКонтрагент, 0) КАК СуммаКредитКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДокумента, 0) КАК СуммаДокумента,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДокументаКонтрагент, 0) КАК СуммаДокументаКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДолг, 0) КАК СуммаДолг,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАванс, 0) КАК СуммаАванс,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаВзаиморасчетов, 0) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаДолгКонтрагент, 0) КАК СуммаДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаАвансКонтрагент, 0) КАК СуммаАвансКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.СуммаВзаиморасчетовКонтрагент, 0) КАК СуммаВзаиморасчетовКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ОсновнойДолг, 0) КАК ОсновнойДолг,
	|	ЕСТЬNULL(ДеталиДокумента.ОсновнойДолгКонтрагент, 0) КАК ОсновнойДолгКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.Проценты, 0) КАК Проценты,
	|	ЕСТЬNULL(ДеталиДокумента.ПроцентыКонтрагент, 0) КАК ПроцентыКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.Комиссия, 0) КАК Комиссия,
	|	ЕСТЬNULL(ДеталиДокумента.КомиссияКонтрагент, 0) КАК КомиссияКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.АрендныеОбязательства, 0) КАК АрендныеОбязательства,
	|	ЕСТЬNULL(ДеталиДокумента.АрендныеОбязательстваКонтрагент, 0) КАК АрендныеОбязательстваКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ОбеспечительныйПлатеж, 0) КАК ОбеспечительныйПлатеж,
	|	ЕСТЬNULL(ДеталиДокумента.ОбеспечительныйПлатежКонтрагент, 0) КАК ОбеспечительныйПлатежКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.УслугаПоАренде, 0) КАК УслугаПоАренде,
	|	ЕСТЬNULL(ДеталиДокумента.УслугаПоАрендеКонтрагент, 0) КАК УслугаПоАрендеКонтрагент,
	|	ЕСТЬNULL(ДеталиДокумента.ВыкупнаяСтоимость, 0) КАК ВыкупнаяСтоимость,
	|	ЕСТЬNULL(ДеталиДокумента.ВыкупнаяСтоимостьКонтрагент, 0) КАК ВыкупнаяСтоимостьКонтрагент,
	|	
	|	ЕСТЬNULL(ДеталиДокумента.ПорядокРасчетов, 0) КАК ПорядокРасчетов
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4 КАК ДокументСверки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДокументСверки.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛицаОрганизацииКонтрагента КАК ТаблицаОтветственныеЛицаОрганизацииКонтрагента
	|		ПО ДокументСверки.Ссылка = ТаблицаОтветственныеЛицаОрганизацииКонтрагента.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДетальныеЗаписиДокумента КАК ДеталиДокумента
	|		ПО ДокументСверки.Ссылка = ДеталиДокумента.ДокументСсылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО ДеталиДокумента.ОбъектГруппировки = ДоговорыКонтрагентов.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|		ПО ДеталиДокумента.ОбъектГруппировки = ДоговорыМеждуОрганизациями.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовДепозитов
	|		ПО ДеталиДокумента.ОбъектГруппировки = ДоговорыКредитовДепозитов.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеДокументов КАК ДанныеДокументов
	|		ПО ДеталиДокумента.РасчетныйДокумент = ДанныеДокументов.РасчетныйДокумент
	|			И ДокументСверки.Организация = ДанныеДокументов.Организация
	|ГДЕ
	|	ДокументСверки.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипРасчетов,
	|	Валюта,
	|	ДатаДокумента,
	|	ОписаниеДокумента,
	|	ПорядокТипаСуммы
	|
	|ИТОГИ
	|	МАКСИМУМ(НачальноеСальдо),
	|	МАКСИМУМ(НачальноеСальдоДт),
	|	МАКСИМУМ(НачальноеСальдоКт),
	|	МАКСИМУМ(ОборотПриход),
	|	МАКСИМУМ(ОборотРасход),
	|	МАКСИМУМ(КонечноеСальдо),
	|	МАКСИМУМ(КонечноеСальдоДт),
	|	МАКСИМУМ(КонечноеСальдоКт),
	|	
	|	МАКСИМУМ(ФИООтветственногоЛица),
	|	МАКСИМУМ(ДолжностьОтветственногоЛица),
	|	МАКСИМУМ(ФИОРуководителяКонтрагента),
	|	МАКСИМУМ(ДолжностьРуководителяКонтрагента),
	|	МАКСИМУМ(ПредставлениеВалюта),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(ПредставлениеВалютаДокумента),
	|	МАКСИМУМ(ПредставлениеОбъектГруппировки),
	|	МАКСИМУМ(ФинансовыеИнструменты),
	|	МАКСИМУМ(ЕстьОбороты),
	|	МАКСИМУМ(ЕстьРасхождения),
	|
	|	СУММА(СуммаДебет),
	|	СУММА(СуммаКредит),
	|	
	|	СУММА(СуммаДебетКонтрагент),
	|	СУММА(СуммаКредитКонтрагент),
	|	
	|	СУММА(СуммаДокумента),
	|	СУММА(СуммаДокументаКонтрагент),
	|	СУММА(СуммаДолг),
	|	СУММА(СуммаАванс),
	|	СУММА(СуммаВзаиморасчетов),
	|	СУММА(СуммаДолгКонтрагент),
	|	СУММА(СуммаАвансКонтрагент),
	|	СУММА(СуммаВзаиморасчетовКонтрагент),
	|	
	|	СУММА(ОсновнойДолг),
	|	СУММА(ОсновнойДолгКонтрагент),
	|	СУММА(Проценты),
	|	СУММА(ПроцентыКонтрагент),
	|	СУММА(Комиссия),
	|	СУММА(КомиссияКонтрагент),
	|	
	|	СУММА(АрендныеОбязательства),
	|	СУММА(АрендныеОбязательстваКонтрагент),
	|	СУММА(ОбеспечительныйПлатеж),
	|	СУММА(ОбеспечительныйПлатежКонтрагент),
	|	СУММА(УслугаПоАренде),
	|	СУММА(ОбеспечительныйПлатежКонтрагент),
	|	СУММА(УслугаПоАренде),
	|	СУММА(УслугаПоАрендеКонтрагент),
	|	СУММА(ВыкупнаяСтоимость),
	|	СУММА(ВыкупнаяСтоимостьКонтрагент)
	|ПО
	|	ДокументСсылка,
	|	ТипРасчетов,
	|	Валюта,
	|	ОбъектГруппировки";
	#КонецОбласти

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"ГруппировкаРасчетов.Договор",
						"ГруппировкаРасчетов." + НастройкиПечати.ДетализацияВзаиморасчетов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"ДетальныеЗаписиРасчетов.Договор",
						"ДетальныеЗаписиРасчетов." + НастройкиПечати.ДетализацияВзаиморасчетов);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"ГруппировкаФинИнструментов.Договор",
						"ГруппировкаФинИнструментов." + НастройкиПечати.ДетализацияФинансовыхИнструментов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
						"= ДеталиФинИнструментов.Договор",
						"= ДеталиФинИнструментов." + НастройкиПечати.ДетализацияФинансовыхИнструментов);
	
	ПредставлениеДоговораНаПечать = "ЕСТЬNULL(ДокументСверки.Договор.НаименованиеДляПечати, """")";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПредставлениеДоговораНаПечать", ПредставлениеДоговораНаПечать);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура РасшифроватьНастройкуДетализации(НастройкиПечати)
	
	ГруппировкаРасчетов = Новый Массив;
	ГруппировкаРасчетов.Добавить("Валюта");
	ГруппировкаРасчетов.Добавить("Договор");
	ГруппировкаРасчетов.Добавить("ОбъектРасчетов");
	
	ГруппировкаФинИнструментов = Новый Массив;
	ГруппировкаФинИнструментов.Добавить("Валюта");
	ГруппировкаФинИнструментов.Добавить("Договор");
	
	НастройкиПечати.ДетализацияВзаиморасчетов = ГруппировкаРасчетов[НастройкиПечати.ДетализацияВзаиморасчетов];
	НастройкиПечати.ДетализацияФинансовыхИнструментов = ГруппировкаФинИнструментов[НастройкиПечати.ДетализацияФинансовыхИнструментов];
	
КонецПроцедуры

Процедура ОчиститьДебетКредит(Область)
	
	ПараметрыОбласти = Новый Структура("СуммаДебет,СуммаКредит,СуммаДебетКонтрагент,СуммаКредитКонтрагент");
	ЗаполнитьЗначенияСвойств(ПараметрыОбласти, Область.Параметры);
	
	Область.Параметры.СуммаДебет = 0;
	Область.Параметры.СуммаКредит = 0;
	Если ПараметрыОбласти.СуммаДебетКонтрагент <> Неопределено Тогда 
		Область.Параметры.СуммаДебетКонтрагент = 0;
	КонецЕсли;
	Если ПараметрыОбласти.СуммаКредитКонтрагент <> Неопределено Тогда 
		Область.Параметры.СуммаКредитКонтрагент = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОборотКонтрагента(Обороты, Источник, ВыводитьДолгАванс)
	
	Если ВыводитьДолгАванс Тогда
		Обороты.СуммаДебетКонтрагент = Обороты.СуммаДебетКонтрагент + Источник.СуммаДолгКонтрагент;
		Обороты.СуммаКредитКонтрагент = Обороты.СуммаКредитКонтрагент + Источник.СуммаАвансКонтрагент;
	Иначе
		Обороты.СуммаДебетКонтрагент = Обороты.СуммаДебетКонтрагент + Источник.СуммаДебетКонтрагент;
		Обороты.СуммаКредитКонтрагент = Обороты.СуммаКредитКонтрагент + Источник.СуммаКредитКонтрагент;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка - Документ, описание которого готовится.
// 	Номер - Строка - Входящий номер документа.
// 	Дата - Дата - Входящая дата документа.
// 	ПредставлениеДокумента - Строка - представление входящего документа.
// 
// Возвращаемое значение:
// 	Строка - Описание документа
// 
Функция ОписаниеРасчетногоДокумента(ДокументСсылка, Номер, Дата, ПредставлениеДокумента) Экспорт
	
	ПредставленияДокументов = Документы.СверкаВзаиморасчетов2_5_11.ПредставленияДокументов();
	ВходящиеДокументы = Документы.СверкаВзаиморасчетов2_5_11.ВходящиеДокументы();
	

	ОписаниеДокумента = "№ __________ " + НСтр("ru='от'") + " __________";
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ  ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		
		ОписаниеДокумента = ДокументСсылка;
		
	ИначеЕсли ДокументСсылка <> Неопределено И НЕ ДокументСсылка.Пустая() Тогда

		ИмяДокумента = ДокументСсылка.Метаданные().Имя;
		Если НЕ ЗначениеЗаполнено(ПредставлениеДокумента) Тогда
			ПредставлениеДокумента = "";
			ПредставленияДокументов.Свойство(ИмяДокумента, ПредставлениеДокумента);
		КонецЕсли;
		Если ИмяДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер,, Истина);
		ИначеЕсли ВходящиеДокументы.Свойство(ИмяДокумента) Тогда
			НомерНаПечать = УбратьЛидирующиеНули(Номер);
		Иначе
			НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер);
		КонецЕсли;
		
		ОписаниеДокумента = СтрШаблон(
			НСтр("ru='%1 №%2 от %3'"),
			?(ПредставлениеДокумента <> Неопределено, ПредставлениеДокумента, ""),
			?(ЗначениеЗаполнено(Номер), НомерНаПечать, "_______"),
			?(ЗначениеЗаполнено(Дата), Формат(Дата, "ДЛФ=D"), "  .  .    "));
		
	КонецЕсли;

	Возврат ОписаниеДокумента;

КонецФункции

Функция УбратьЛидирующиеНули(Строка)
	
	Рез = СокрЛП(Строка);
	Пока Лев(Рез, 1) = "0" ИЛИ Лев(Рез, 1) = "-" Цикл 
		Рез = Сред(Рез, 2);
	КонецЦикла;
	Возврат Рез;
	
КонецФункции

Функция ДокументыНаПечать(МассивОбъектов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	| 	ВложенныйЗапрос.МоментВремени КАК МоментВремени
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыПоДокументу.Ссылка КАК Ссылка,
	|		РасчетыПоДокументу.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов2_4.ГруппировкиРасчеты КАК РасчетыПоДокументу
	|	ГДЕ
	|		РасчетыПоДокументу.Ссылка В (&ДокументыСверки)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РасчетыПоДокументу.Ссылка,
	|		РасчетыПоДокументу.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов2_4.ГруппировкиФинансовыеИнструменты КАК РасчетыПоДокументу
	|	ГДЕ
	|		РасчетыПоДокументу.Ссылка В (&ДокументыСверки)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Сверка.Ссылка,
	|		Сверка.Ссылка.МоментВремени КАК МоментВремени
	|	ИЗ
	|		Документ.СверкаВзаиморасчетов2_4 КАК Сверка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4.ДанныеКонтрагента КАК тчДанныеКонтрагента
	|			ПО Сверка.Ссылка = тчДанныеКонтрагента.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4.ГруппировкиРасчеты КАК Расчеты
	|			ПО Сверка.Ссылка = Расчеты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СверкаВзаиморасчетов2_4.ГруппировкиФинансовыеИнструменты КАК ФинИнструменты
	|			ПО Сверка.Ссылка = ФинИнструменты.Ссылка
	|	ГДЕ
	|		Сверка.Ссылка В (&ДокументыСверки)
	|		И тчДанныеКонтрагента.Ссылка ЕСТЬ NULL
	|		И Расчеты.Ссылка ЕСТЬ NULL
	|		И ФинИнструменты.Ссылка ЕСТЬ NULL) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	| 	ВложенныйЗапрос.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКонтрагента.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4.ДанныеКонтрагента КАК ДанныеКонтрагента
	|ГДЕ
	|	ДанныеКонтрагента.Ссылка В (&ДокументыСверки)
	|
	|УПОРЯДОЧИТЬ ПО
	| ДанныеКонтрагента.Ссылка.МоментВремени";
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("ДокументыСверки", МассивОбъектов);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	Результат.Вставить("Новые", РезультатЗапроса[0].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Результат.Вставить("Старые", РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона:
//         * Имя            - Строка - Уникальное имя общего реквизита.
//         * Представление  - Строка - Представление общего реквизита.
//         * Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         * Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения:
//         * Имя            - Строка - Уникальное имя вложения.
//         * Представление  - Строка - Представление варианта.
//         * ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf", "png", "jpg", mxl"
//                                      и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие из КлючИЗначение- список используемых в шаблоне реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие из КлючИЗначение - список используемых в шаблоне общих реквизитов:
//      * Ключ     - Строка - имя реквизита в шаблоне;
//      * Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие из КлючИЗначение - значения реквизитов
//      * Ключ     - Строка - имя вложения в шаблоне;
//      * Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS:
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма:
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//     * ВариантОтправки - Строка - Варианты отправки письма: "Кому", "Копия", "СкрытаяКопия", "ОбратныйАдреса";
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ФормаПомощникаСоздания

#Область СозданиеДокументов

Процедура СоздатьДокументы(Параметры, АдресХранилища = "") Экспорт
	
	ТекущаяДата  = ТекущаяДатаСеанса();
	ТекущееВремя = Час(ТекущаяДата) * 3600 + Минута(ТекущаяДата) * 60 + Секунда(ТекущаяДата);
	
	ДатаДокументов = Параметры.ДатаДокументов;
	ТаблицаРасчетов = Параметры.ТаблицаРасчетов;
	ОтработанныеДокументы = Новый Массив;
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ПериодСверки", Параметры.ПериодСверки);
	ДанныеЗаполнения.Вставить("ДоговорыБезОборотов", Параметры.ДоговорыБезОборотов);
	ДанныеЗаполнения.Вставить("РазбиватьПоТипамРасчетов", Параметры.РазбиватьПоТипамРасчетов);
	ДанныеЗаполнения.Вставить("РазбиватьПоПартнерам", Параметры.РазбиватьПоПартнерам);
	ДанныеЗаполнения.Вставить("РазбиватьПоДоговорам", Параметры.РазбиватьПоДоговорам);
	ДанныеЗаполнения.Вставить("УстанавливатьНовыйНомер", Ложь);
	
	КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор,,Параметры.НастройкиОтбора);
	МассивВсехДокументовСверки = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРасчетов Цикл

		ДанныеЗаполнения.Вставить("ДанныеДокумента", СтрокаТаблицы);
		ДанныеЗаполнения.Вставить("НастройкиОтбора", КомпоновщикОтбор.ПолучитьНастройки());
		
		Если СтрокаТаблицы.СоздаватьДокумент ИЛИ СтрокаТаблицы.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
			
			ДокументОбъект = Документы.СверкаВзаиморасчетов2_4.СоздатьДокумент();
			
			ДокументОбъект.Дата = ДатаДокументов + ТекущееВремя;
			
			ДанныеЗаполнения.УстанавливатьНовыйНомер = Истина;
			ДанныеЗаполнения.Вставить("ДанныеДокумента", СтрокаТаблицы);
			ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения);
			
			Если ДокументОбъект.Проведен Тогда
				ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "Создание", ОтработанныеДокументы); 
				МассивВсехДокументовСверки.Добавить(ДокументОбъект.Ссылка);
			КонецЕсли;

		КонецЕсли;
		
		Если СтрокаТаблицы.СуществуютДокументы Тогда

			ДокументОбъект = СтрокаТаблицы.ДокументСверки.ПолучитьОбъект();
			
			Если СтрокаТаблицы.ИзменятьДокумент = "УдалитьСоздатьНовый" Тогда
				
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Истина);
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "ПометкаНаУдаление", ОтработанныеДокументы);
				Исключение
					ТекстОшибки    = НСтр("ru='Не удалось пометить на удаление %Документ%. %ОписаниеОшибки%'");
					ТекстОшибки    = СтрЗаменить(ТекстОшибки, "%Документ%",	ДокументОбъект);
					ТекстОшибки    = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
				КонецПопытки;
				
			ИначеЕсли СтрокаТаблицы.ИзменятьДокумент = "Перезаполнять" Тогда
				
				МассивВсехДокументовСверки.Добавить(СтрокаТаблицы.ДокументСверки);
				ДанныеЗаполнения.УстанавливатьНовыйНомер = Ложь;
				ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения);
				
				Если ДокументОбъект.Проведен Тогда
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "Перезаполнение", ОтработанныеДокументы);
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицы.ИзменятьДокумент = "НеИзменять" Тогда
				
				Если ДокументОбъект.Проведен Тогда
					МассивВсехДокументовСверки.Добавить(СтрокаТаблицы.ДокументСверки);
					ДобавитьВПротоколВыполнения(ДокументОбъект.Ссылка, "НеИзменять", ОтработанныеДокументы);
				КонецЕсли;
				
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("МассивВсехДокументовСверки", МассивВсехДокументовСверки);
	Результат.Вставить("ОтработанныеДокументы", ОтработанныеДокументы);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

// Заполняет структуру данными о получателях печатных форм.
// Параметры:
// 	ДокументОбъект - ДокументОбъект.СверкаВзаиморасчетов2_4 - Объект сверки для заполненияч.
// 	ДанныеЗаполнения - Структура - Структура ключевых реквизитов сверки:
//     * ДанныеДокумента - Структура - Данные шапки сверки:
//       * Организация - СправочникСсылка.Организации - Организация шапки.
//       * ТипРасчетов - ПеречислениеСсылка.ТипыРасчетовСПартнерами - Тип расчетов.
//       * Партнер - СправочникСсылка.Партнеры - Партнер шапки.
//       * Контрагент - СправочникСсылка.Контрагенты - Контрагент шапки.
//       * Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор шапки.
//     * ПериодСверки - Структура - Структура периода сверки:
//       * ДатаНачала - Дата - Начало периода сверки.
//       * ДатаОкончания - Дата - Конец периода сверки.
//
Процедура ЗаполнитьПровестиДокументОбъект(ДокументОбъект, ДанныеЗаполнения)
	
	ДанныеДокумента = Новый Структура;
	ДанныеДокумента.Вставить("Организация",	 		ДанныеЗаполнения.ДанныеДокумента.Организация);
	ДанныеДокумента.Вставить("ТипРасчетов",	 		ДанныеЗаполнения.ДанныеДокумента.ТипРасчетов);
	ДанныеДокумента.Вставить("Партнер",				ДанныеЗаполнения.ДанныеДокумента.Партнер);
	ДанныеДокумента.Вставить("Контрагент",			ДанныеЗаполнения.ДанныеДокумента.Контрагент);
	ДанныеДокумента.Вставить("Договор"	,			ДанныеЗаполнения.ДанныеДокумента.Договор);
	ДанныеДокумента.Вставить("НачалоПериода",		ДанныеЗаполнения.ПериодСверки.ДатаНачала);
	ДанныеДокумента.Вставить("КонецПериода",		ДанныеЗаполнения.ПериодСверки.ДатаОкончания);
	ДанныеДокумента.Вставить("Статус",		 		Перечисления.СтатусыСверокВзаиморасчетов.Создана);
	ДанныеДокумента.Вставить("НастройкиОтбора", 	ДанныеЗаполнения.НастройкиОтбора);
	ДанныеДокумента.Вставить("ДоговорыБезОборотов", ДанныеЗаполнения.ДоговорыБезОборотов);
	ДанныеДокумента.Вставить("РазбиватьПоТипамРасчетов", ДанныеЗаполнения.РазбиватьПоТипамРасчетов);
	ДанныеДокумента.Вставить("РазбиватьПоПартнерам", ДанныеЗаполнения.РазбиватьПоПартнерам);
	ДанныеДокумента.Вставить("РазбиватьПоДоговорам", ДанныеЗаполнения.РазбиватьПоДоговорам);
	
	УстановитьПривилегированныйРежим(Истина);
	ДокументОбъект.Заполнить(ДанныеДокумента);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДанныеЗаполнения.УстанавливатьНовыйНомер Тогда
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	
	Если ДокументОбъект.ПроверитьЗаполнение() Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       ДокументОбъект);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		КонецПопытки;
		
	Иначе
		
		ТекстОшибки = НСтр("ru='Не удалось записать %Документ%.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
		
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ДокументОбъект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

// Описание
// 
// Параметры:
// 	ДокументСверки - ДокументСсылка.СверкаВзаиморасчетов2_4 - Описание
// 	Действие - Строка - Описание
// 	ОтработанныеДокументы - Массив из см. СтрокаПротокола -
//
Процедура ДобавитьВПротоколВыполнения(ДокументСверки, Действие, ОтработанныеДокументы)
	
	СтрокаПротокола = СтрокаПротокола();
	СтрокаПротокола.ДокументСверки = ДокументСверки;
	СтрокаПротокола.Действие = Действие;
	
	ОтработанныеДокументы.Добавить(СтрокаПротокола);
	
КонецПроцедуры

// Возвращаемое значение:
// 	Структура Из КлючИЗначение - Описание:
// * Действие - Строка -
// * ДокументСверки - ДокументСсылка.СверкаВзаиморасчетов2_4 -
Функция СтрокаПротокола() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ДокументСверки", Документы.СверкаВзаиморасчетов2_4.ПустаяСсылка());
	Результат.Вставить("Действие","");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПометкаНаУдаление

Процедура УстановитьПометкуНаУдаление(Параметры, АдресХранилища = "") Экспорт
	
	Для Каждого Ссылка Из Параметры.ВыделенныеДокументы Цикл
		Объект = Ссылка.ПолучитьОбъект();
		Объект.УстановитьПометкуУдаления(НЕ Объект.ПометкаУдаления);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФормаДокумента

Процедура РаспределениеРасчетовПоДокументам(Параметры, АдресХранилища = "") Экспорт
	
	РаспределениеВзаиморасчетовВызовСервера.РаспределитьРасчетыФоновымЗаданием(
		Параметры.КонецПериода,
		Параметры.АналитикиРасчета);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

#Область ЗаполнитьДанныеСверкиПоРасчетам

// Параметры:
// 	ДанныеДокумента - ДокументОбъект.СверкаВзаиморасчетов2_4 - 
Процедура ЗаполнитьДанныеПоРасчетам(ДанныеДокумента) Экспорт
	
	СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
	ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
	СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент, ДанныеДокумента.Дата);
	КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, "ПолноеНаименование");
	
	СтруктураПредставленийУчастников = Новый Структура;
	СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
	СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
	
	КомпоновщикОтбор = Новый КомпоновщикНастроекКомпоновкиДанных;
	ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор);
	Если ДанныеДокумента.НастройкиОтбора <> Неопределено Тогда
		НастройкиОтбора = ДанныеДокумента.НастройкиОтбора.Получить();
		Если НастройкиОтбора <> Неопределено Тогда
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
		КонецЕсли;
	КонецЕсли;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", ДанныеДокумента.НачалоПериода);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "КонецПериода", КонецДня(ДанныеДокумента.КонецПериода));
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ПолучатьДокументыСверки", Ложь);
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоТипамРасчетов", ДанныеДокумента.РазбиватьПоТипамРасчетов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоПартнерам", ДанныеДокумента.РазбиватьПоПартнерам);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "РазбиватьПоДоговорам", ДанныеДокумента.РазбиватьПоДоговорам);
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Организация", ДанныеДокумента.Организация);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов")
		И ТипЗнч(ДанныеДокумента.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеДокумента.Контрагент, "Партнер");
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Партнер", Партнер);
	Иначе
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(КомпоновщикОтбор.Настройки, "Контрагент", ДанныеДокумента.Контрагент);
	КонецЕсли;
	
	Если ДанныеДокумента.ДополнительныеСвойства.Свойство("ДляОтладки") Тогда
		ДляОтладки = ДанныеДокумента.ДополнительныеСвойства.ДляОтладки;
		КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Вставить("ДляОтладки", ДляОтладки);
	КонецЕсли;
	
	ТаблицаРезультатаСКД = ПолучитьВзаиморасчеты(КомпоновщикОтбор);
	
	СвернутьРасчетыПоГруппировкам(ДанныеДокумента, ТаблицаРезультатаСКД);
	
	Если КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Свойство("ДляОтладки") Тогда
		ДляОтладки = КомпоновщикОтбор.Настройки.ДополнительныеСвойства.ДляОтладки;
		ДанныеДокумента.ДополнительныеСвойства.Вставить("ДляОтладки", ДляОтладки);
		КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Удалить("ДляОтладки");
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьРасчетыПоГруппировкам(ДанныеДокумента, ТаблицаВзаиморасчетов)
	
	Группировки = "ТипРасчетов, Партнер, Договор, ";
	//++ Локализация
	СчетаФактуры = ПолучитьСчетаФактуры(ТаблицаВзаиморасчетов);
	//-- Локализация
	
	ДанныеДокумента.ГруппировкиРасчеты.Очистить();
	ДанныеДокумента.ДетальныеЗаписиРасчеты.Очистить();
	
	ДанныеДокумента.ГруппировкиФинансовыеИнструменты.Очистить();
	ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты.Очистить();
	Для Каждого СтрокаРасчетов Из ТаблицаВзаиморасчетов Цикл
		
		СуммаВзаиморасчетов = Неопределено;
		Если СтрокаРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом
			ИЛИ СтрокаРасчетов.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком Тогда
			ПоляГруппировки = Группировки + "ОбъектРасчетов, Валюта";
			ГруппировкаДетальныхЗаписей = "ТипРасчетов, ОбъектРасчетов, Партнер, Договор, РасчетныйДокумент, ВалютаДокумента";
			ПоляСуммирования = "НачальноеСальдо, НачальноеСальдоРегл";
			ПоляСуммированияДетальныхЗаписей = "СуммаДокумента, СуммаДолг, СуммаДолгРегл, СуммаАванс, СуммаАвансРегл";
			ТЧГруппировки = ДанныеДокумента.ГруппировкиРасчеты;
			ТЧДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиРасчеты;
			СуммаВзаиморасчетов = Макс(-СтрокаРасчетов.СуммаДолг, СтрокаРасчетов.СуммаДолг) + Макс(-СтрокаРасчетов.СуммаАванс, СтрокаРасчетов.СуммаАванс);
		Иначе
			ПоляГруппировки = Группировки + "Валюта";
			ГруппировкаДетальныхЗаписей = "Договор, РасчетныйДокумент, ВалютаДокумента";
			ПоляСуммирования = "НачальноеСальдоДт,НачальноеСальдоКт";
			ПоляСуммированияДетальныхЗаписей = "ОсновнойДолг, Проценты, Комиссия, АрендныеОбязательства, ОбеспечительныйПлатеж, УслугаПоАренде, ВыкупнаяСтоимость";
			ТЧГруппировки = ДанныеДокумента.ГруппировкиФинансовыеИнструменты;
			ТЧДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты;
			
		КонецЕсли;
		
		ДанныеСумм = ЗначенияРесурсов(СтрокаРасчетов, ПоляСуммированияДетальныхЗаписей);
		
		НоваяСтрока = ТЧГруппировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов, ПоляГруппировки + ", " + ПоляСуммирования);
		
		Если СтрокаРасчетов.НачальноеСальдо = 0 И ДанныеСумм.ЕстьЗаполненные Тогда
			НоваяСтрока = ТЧДетальныеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасчетов, ГруппировкаДетальныхЗаписей + ", " + ПоляСуммированияДетальныхЗаписей);
			НоваяСтрока.ОписаниеДокумента = ОписаниеРасчетногоДокумента(СтрокаРасчетов.РасчетныйДокумент, СтрокаРасчетов.НомерДокумента, СтрокаРасчетов.ДатаДокумента, СтрокаРасчетов.НаименованиеПервичногоДокумента);
			//++ Локализация
			Отбор = Новый Структура("РасчетныйДокумент", СтрокаРасчетов.РасчетныйДокумент);
			СФДокумента = СчетаФактуры.НайтиСтроки(Отбор);
			Если СФДокумента.Количество() > 0 Тогда
				Для Каждого СФ Из СФДокумента Цикл
					Если СФ.ЭтоВходящий Тогда
						НомерНаПечать = УбратьЛидирующиеНули(СФ.Номер);
					Иначе
						НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СФ.Номер);
					КонецЕсли;
				КонецЦикла;
				ОписаниеУПД = СтрШаблон(НСтр("ru = '%1 №%2 от %3'"),
										НСтр("ru = 'УПД'"), СокрЛП(НомерНаПечать), Формат(СФ.Дата, "ДЛФ=D"));
				ОписаниеДокумента = ОписаниеРасчетногоДокумента(СтрокаРасчетов.РасчетныйДокумент, СтрокаРасчетов.НомерДокументаИБ, СтрокаРасчетов.ДатаДокументаИБ, СтрокаРасчетов.НаименованиеПервичногоДокумента);
				НоваяСтрока.ОписаниеДокумента = ОписаниеУПД + " (" + ОписаниеДокумента + ")";
			КонецЕсли;
			//-- Локализация
			
			Если СуммаВзаиморасчетов <> Неопределено Тогда
				НоваяСтрока.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	#Область ЗаполнениеТЧРасчетов
	ГрупповыеЗаписи = ДанныеДокумента.ГруппировкиРасчеты.Выгрузить();
	ГрупповыеЗаписи.Свернуть(Группировки + "ОбъектРасчетов, Валюта", "НачальноеСальдо, НачальноеСальдоРегл, ОборотПриход, ОборотПриходРегл, ОборотРасход, ОборотРасходРегл, КонечноеСальдо, КонечноеСальдоРегл");
	ДанныеДокумента.ГруппировкиРасчеты.Очистить();
	
	ДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиРасчеты.Выгрузить();
	ДетальныеЗаписи.Свернуть("ТипРасчетов, ОбъектРасчетов, Партнер, Договор, РасчетныйДокумент, ОписаниеДокумента, ВалютаДокумента", "СуммаДокумента, СуммаДолг, СуммаДолгРегл, СуммаАванс, СуммаАвансРегл");
	
	Для Каждого Группировка Из ГрупповыеЗаписи Цикл
		
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоВзаиморасчетам(Группировка, ДетальныеЗаписи);
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоВзаиморасчетам(Группировка, ДетальныеЗаписи, Истина);
		
		Если Группировка.НачальноеСальдо = 0 И Группировка.ОборотПриход = 0 И Группировка.ОборотРасход = 0 И Группировка.КонечноеСальдо = 0
			И Группировка.НачальноеСальдоРегл = 0 И Группировка.ОборотПриходРегл = 0 И Группировка.ОборотРасходРегл = 0 И Группировка.КонечноеСальдоРегл = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Группировка.КонечноеСальдо = 0 Тогда
			Группировка.КонечноеСальдоРегл = 0;
		КонецЕсли;
		
		НоваяСтрока = ДанныеДокумента.ГруппировкиРасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Группировка);
		
	КонецЦикла;
	УдалитьЗависшиеПодчиенныеСтроки(ДанныеДокумента, "ГруппировкиРасчеты", "ДетальныеЗаписиРасчеты", "ОбъектРасчетов");
	ДанныеДокумента.ГруппировкиРасчеты.Сортировать("ТипРасчетов, Партнер, Договор, ОбъектРасчетов, Валюта");
	#КонецОбласти
	
	#Область ЗаполнениеТЧФинИнструментов
	ГрупповыеЗаписи = ДанныеДокумента.ГруппировкиФинансовыеИнструменты.Выгрузить();
	ГрупповыеЗаписи.Свернуть(Группировки + "Валюта", "НачальноеСальдоДт, НачальноеСальдоКт, ОборотПриход, ОборотРасход, КонечноеСальдоДт, КонечноеСальдоКт");
	
	ДетальныеЗаписи = ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты.Выгрузить();
	ДетальныеЗаписи.Свернуть("Договор, РасчетныйДокумент, ОписаниеДокумента, ВалютаДокумента", "ОсновнойДолг, Проценты, Комиссия, АрендныеОбязательства, ОбеспечительныйПлатеж, УслугаПоАренде, ВыкупнаяСтоимость");
	
	Для Каждого Группировка Из ГрупповыеЗаписи Цикл
		
		ВзаиморасчетыКлиентСервер.РассчитатьКонечноеСальдоПоФинансовымИнструментам(Группировка, ДетальныеЗаписи);
		Если Группировка.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСАрендодателем Тогда
			Если Группировка.КонечноеСальдоДт > 0 И Группировка.КонечноеСальдоКт > 0 Тогда
				КонечноеСальдо(Группировка.КонечноеСальдоДт, Группировка.КонечноеСальдоКт);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ГрупповыеЗаписи.Сортировать("ТипРасчетов, Партнер, Договор, Валюта");
	ДанныеДокумента.ГруппировкиФинансовыеИнструменты.Загрузить(ГрупповыеЗаписи);
	ДанныеДокумента.ДетальныеЗаписиФинансовыеИнструменты.Загрузить(ДетальныеЗаписи);
	#КонецОбласти
	
КонецПроцедуры
//++ Локализация
Функция ПолучитьСчетаФактуры(ТаблицаВзаиморасчетов)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРасчетов.РасчетныйДокумент КАК РасчетныйДокумент
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	&Взаиморасчеты КАК ТаблицаРасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОснованиеСФ.Ссылка КАК СчетФактура,
	|	ОснованиеСФ.Ссылка.ПредставлениеНомера КАК Номер,
	|	ОснованиеСФ.Ссылка.Дата КАК Дата,
	|	ЛОЖЬ КАК ЭтоВходящий
	|ИЗ
	|	Обороты КАК Обороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК ОснованиеСФ
	|		ПО Обороты.РасчетныйДокумент = ОснованиеСФ.ДокументОснование
	|ГДЕ
	|	НЕ ОснованиеСФ.Ссылка ЕСТЬ NULL
	|	И ОснованиеСФ.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Обороты.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ОснованиеСФ.Ссылка КАК СчетФактура,
	|	ОснованиеСФ.Ссылка.Номер КАК Номер,
	|	ОснованиеСФ.Ссылка.ДатаСоставления КАК Дата,
	|	ИСТИНА КАК ЭтоВходящий
	|ИЗ
	|	Обороты КАК Обороты
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК ОснованиеСФ
	|		ПО Обороты.РасчетныйДокумент = ОснованиеСФ.ДокументОснование
	|ГДЕ
	|	НЕ ОснованиеСФ.Ссылка ЕСТЬ NULL
	|	И ОснованиеСФ.Ссылка.Проведен";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Взаиморасчеты", ТаблицаВзаиморасчетов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции
//-- Локализация

Функция ЗначенияРесурсов(ДанныеЗаполнения, ИменаПолей)
	
	ДанныеРесурсов = Новый Структура(ИменаПолей);
	
	ЕстьЗаполненные = Ложь;
	Для Каждого Ресурс Из ДанныеРесурсов Цикл
		
		ДанныеРесурсов[Ресурс.Ключ] = ДанныеЗаполнения[Ресурс.Ключ];
		Если ДанныеРесурсов[Ресурс.Ключ] <> 0 И НЕ ЕстьЗаполненные Тогда
			ЕстьЗаполненные = Истина;
		КонецЕсли;
		
	КонецЦикла; 
	
	ДанныеРесурсов.Вставить("ЕстьЗаполненные", ЕстьЗаполненные);
	
	Возврат ДанныеРесурсов;
	
КонецФункции

#КонецОбласти

Функция ПолучитьВзаиморасчеты(КомпоновщикОтбор) Экспорт
	
	СхемаКомпоновкиДанных = Документы.СверкаВзаиморасчетов2_4.ПолучитьМакет("ОтборРасчетов");
	
	ДобавитьДоступныеТаблицы(СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Запрос);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	СегментыСервер.ВключитьОтборПоСегментуПартнеровВСКД(КомпоновщикОтбор);
	
	НастройкиКомпоновкиДанных = КомпоновщикОтбор.Настройки;
	ВключатьДоговорыБезОборотов = КомпоновкаДанныхКлиентСервер.ИспользуетсяОтбор(НастройкиКомпоновкиДанных.Отбор.Элементы, "ДоговорыБезОборотов", Истина);
	
	НачалоПериода = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода");
	Если НЕ ЗначениеЗаполнено(НачалоПериода.Значение) Тогда
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НачалоПериода", Дата('19800101'));
	КонецЕсли;
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ДоговорыБезОборотов", ВключатьДоговорыБезОборотов);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));
	
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "АрендныеОбязательства", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ОбеспечительныйПлатеж", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "УслугаПоАренде", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "УслугаПоАрендеАванс", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ВыкупнаяСтоимость", Неопределено);
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ВыкупнаяСтоимостьАванс", Неопределено);
	ТипыСуммАренды = Новый Массив;
	КомпоновкаДанныхКлиентСервер.УстановитьПараметр(КомпоновщикОтбор.Настройки, "ТипыСуммАренды", ТипыСуммАренды,,Истина);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаРезультатаСКД = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоОрганизаций") Тогда
		Организация = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
		ТаблицаРезультатаСКД.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаРезультатаСКД.ЗаполнитьЗначения(Организация, "Организация");
	КонецЕсли;
	
	Документы.СверкаВзаиморасчетов2_5_11.ЕстьВводОстатков(ТаблицаРезультатаСКД);
	
	СхемаОтбора = Новый Структура;
	СхемаОтбора.Вставить("СКД", СхемаКомпоновкиДанных);
	СхемаОтбора.Вставить("Настройки", НастройкиКомпоновкиДанных);
	СхемаОтбора.Вставить("Результат", ТаблицаРезультатаСКД);
	
	Если КомпоновщикОтбор.Настройки.ДополнительныеСвойства.Свойство("ДляОтладки") Тогда
		КомпоновщикОтбор.Настройки.ДополнительныеСвойства.ДляОтладки.Вставить("СхемаОтбора", СхемаОтбора);
	КонецЕсли;
	
	Возврат ТаблицаРезультатаСКД;
	
КонецФункции

Функция ДанныеРасчетногоДокумента(РасчетныеДокументы) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеестрДокументов.Ссылка КАК Ссылка,
	|	РеестрДокументов.ДатаПервичногоДокумента КАК Дата,
	|	РеестрДокументов.НомерПервичногоДокумента КАК Номер,
	|	РеестрДокументов.НаименованиеПервичногоДокумента КАК НаименованиеПервичногоДокумента,
	|	РеестрДокументов.Валюта КАК Валюта,
	|	РеестрДокументов.Сумма КАК Сумма
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитенту КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Дата КАК Дата,
	|	СуммыДокументов.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК Дата,
	|	СуммыДокументов.НомерВходящегоДокумента КАК Номер,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ПервичныйДокумент КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СуммыДокументов.Ссылка КАК Ссылка,
	|	СуммыДокументов.Ссылка.Дата КАК Дата,
	|	СуммыДокументов.Ссылка.Номер КАК Номер,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(СуммыДокументов.Сумма) КАК Сумма
	|ИЗ
	|	Документ.КорректировкаЗадолженности.Задолженность КАК СуммыДокументов
	|ГДЕ
	|	СуммыДокументов.Ссылка В (&МассивДокументов)
	|		
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументов.Ссылка,
	|	СуммыДокументов.ВалютаВзаиморасчетов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивДокументов", РасчетныеДокументы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДанныеДокумента = Новый Структура("Ссылка,Номер,Дата, НаименованиеПервичногоДокумента, Валюта,Сумма");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ДанныеДокумента, Выборка);
	КонецЦикла;
	
	Возврат ДанныеДокумента;
	
КонецФункции

Процедура ИнициализироватьКомпоновщикНастроек(КомпоновщикОтбор, УникальныйИдентификаторФормы = Неопределено, НастройкиОтбора = Неопределено) Экспорт
	
	СхемаКомпоновкиДанных = Документы.СверкаВзаиморасчетов2_4.ПолучитьМакет("ОтборРасчетов");
	
	Если ПолучитьФункциональнуюОпцию("БазоваяВерсия") Тогда
		Поле = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("Контрагент"); // ПолеНабораДанныхСхемыКомпоновкиДанных
		Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	КонецЕсли;
	
	ДобавитьДоступныеТаблицы(СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Запрос);
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		Поле = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("Контрагент"); // ПолеНабораДанныхСхемыКомпоновкиДанных 
		Если Поле <> Неопределено Тогда
			Поле.ОграничениеИспользования.Условие = Истина;
			Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
		КонецЕсли;
	Иначе
		Поле = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("ОрганизацияКонтрагент"); // ПолеНабораДанныхСхемыКомпоновкиДанных 
		Если Поле <> Неопределено Тогда
			Поле.ОграничениеИспользования.Условие = Истина;
			Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаголовокПоляСКДВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
		СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты, "Партнер", НСтр("ru = 'Контрагент'"));
	
	ДоступныеТипыРасчетов = Новый СписокЗначений;
	ДоступныеТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	ДоступныеТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыКредитовИДепозитов") Тогда
		ДоступныеТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
		ДоступныеТипыРасчетов.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
	КонецЕсли;
	

	ПолеТипРасчетов = СхемаКомпоновкиДанных.НаборыДанных.ОстаткиИОбороты.Поля.Найти("ТипРасчетов");
	ПолеТипРасчетов.УстановитьДоступныеЗначения(ДоступныеТипыРасчетов);
		
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		АдресВХранилище = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
	КонецЕсли;
	АдресВХранилище = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификаторФормы);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВХранилище);
	
	КомпоновщикОтбор.Инициализировать(ИсточникНастроек);
	
	КомпоновщикОтбор.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	Если НастройкиОтбора <> Неопределено Тогда
		КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(КомпоновщикОтбор.Настройки.Отбор, НастройкиОтбора.Отбор);
	КонецЕсли;
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		КомпоновкаДанныхКлиентСервер.УдалитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "Контрагент");
	Иначе
		КомпоновкаДанныхКлиентСервер.УдалитьОтбор(КомпоновщикОтбор.Настройки.Отбор, "ОрганизацияКонтрагент");
	КонецЕсли;
	КомпоновщикОтбор.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	Если УникальныйИдентификаторФормы = Неопределено Тогда
		УдалитьИзВременногоХранилища(АдресВХранилище);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОтборПартнераПоКонтрагенту(Отбор) Экспорт
	
	ЭлементОтбора = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(Отбор,"Контрагент");
	Если ЭлементОтбора <> Неопределено Тогда
		ПолеПартнер = Новый ПолеКомпоновкиДанных("Партнер");
		ЭлементОтбора.ЛевоеЗначение = ПолеПартнер;
		Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение) Тогда
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЭлементОтбора.ПравоеЗначение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементОтбора.ПравоеЗначение, "Партнер");
			ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("Массив") Тогда
				Партнеры = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЭлементОтбора.ПравоеЗначение, "Партнер");
				ЭлементОтбора.ПравоеЗначение.Очистить();
				Для Каждого Партнер Из Партнеры Цикл
					ЭлементОтбора.ПравоеЗначение.Добавить(Партнер);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДоступныеТаблицы(ТекстЗапроса)
	
	ТекстыЗапросов = ТекстыЗапросовДоступныхТаблиц();
	Для Каждого Текст Из ТекстыЗапросов Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//"+Текст.Ключ, Текст.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапрещенныеТипыРасчетов() Экспорт
	
	Результат = Новый Массив;
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам) Тогда
		Если НЕ ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКредитовИДепозитов) Тогда
			Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
			Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
		КонецЕсли;
		
	Иначе
		Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором);
		Результат.Добавить(Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура УдалитьЗависшиеПодчиенныеСтроки(ОбъектДокумента, тчГруппировки, тчДетальныеЗаписи, ПолеСвязи) Экспорт
	
	ОбъектыГруппировки = ОбъектДокумента[тчГруппировки].Выгрузить(); //ТаблицаЗначений
	ОбъектыГруппировки.Свернуть(ПолеСвязи);
	ОбъектыГруппировки.Индексы.Добавить(ПолеСвязи);
	
	ОбъектыДетальныеЗаписи = ОбъектДокумента[тчДетальныеЗаписи].Выгрузить(); //ТаблицаЗначений
	ОбъектыДетальныеЗаписи.Свернуть(ПолеСвязи);
	
	Для Каждого Запись Из ОбъектыДетальныеЗаписи Цикл
		Владелец = ОбъектыГруппировки.Найти(Запись[ПолеСвязи], ПолеСвязи);
		Если Владелец = Неопределено Тогда
			Отбор = Новый Структура(ПолеСвязи, Запись[ПолеСвязи]);
			НайденныеСтроки = ОбъектДокумента[тчДетальныеЗаписи].НайтиСтроки(Отбор);
			Для Каждого Строка Из НайденныеСтроки Цикл
				ОбъектДокумента[тчДетальныеЗаписи].Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстыЗапросовДоступныхТаблиц()
	
	//Результат = Новый Массив;
	Результат = Новый Соответствие;
	Если ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам) Тогда
		Результат.Вставить("#0", ТекстЗапросаРасчетыПоФинансовымИнструментам()); //РегистрНакопленияРасчетыПоФинансовымИнструментам
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Справочники.ДоговорыКредитовИДепозитов) Тогда
		Результат.Вставить("#1", ТекстЗапросаДоговоровКредитовДепозитовЗаймов()); //СправочникДоговорыКредитовИДепозитов
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.ПервичныйДокумент) Тогда
		Результат.Вставить("#3", ТекстЗапросаПервичныйДокумент()); //ДокументПервичныйДокумент
	КонецЕсли;
	Если ПравоДоступа("Просмотр", Метаданные.Документы.КорректировкаЗадолженности) Тогда
		Результат.Вставить("#4", ТекстЗапросаКорректировкаЗадолженности()); //ДокументКорректировкаЗадолженности
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаРасчетыПоФинансовымИнструментам()
	
	Возврат "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоПериода КАК Период,
	|	ВложенныйЗапрос.ТипРасчетов КАК ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Партнер КАК Партнер,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
	|	ИСТИНА КАК ДоговорыБезОборотов, //Договоры с оборотами включаем всегда
	|	
	|	СУММА(ВложенныйЗапрос.НачальноеСальдо) КАК НачальноеСальдо,
	|	СУММА(ВложенныйЗапрос.НачальноеСальдоРегл) КАК НачальноеСальдоРегл,
	|	СУММА(ВложенныйЗапрос.НачальноеСальдоДт) КАК НачальноеСальдоДт,
	|	СУММА(ВложенныйЗапрос.НачальноеСальдоКт) КАК НачальноеСальдоКт,
	|	
	|	0 КАК Долг,
	|	0 КАК ДолгРегл,
	|	0 КАК Предоплата,
	|	0 КАК ПредоплатаРегл,
	|	
	|	0 КАК КонечноеСальдо,
	|	0 КАК КонечноеСальдоРегл,
	|	
	|	СУММА(ВложенныйЗапрос.ОсновнойДолг) КАК ОсновнойДолг,
	|	СУММА(ВложенныйЗапрос.Проценты) КАК Проценты,
	|	СУММА(ВложенныйЗапрос.Комиссия) КАК Комиссия,
	|	
	|	СУММА(ВложенныйЗапрос.АрендныеОбязательства) КАК АрендныеОбязательства,
	|	СУММА(ВложенныйЗапрос.ОбеспечительныйПлатеж) КАК ОбеспечительныйПлатеж,
	|	СУММА(ВложенныйЗапрос.УслугаПоАренде) КАК УслугаПоАренде,
	|	СУММА(ВложенныйЗапрос.ВыкупнаяСтоимость) КАК ВыкупнаяСтоимость,
	|	
	|	ВложенныйЗапрос.ПорядокТипаПлатежа КАК ПорядокТипаПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|	&НачалоПериода КАК Период,
	|	ВЫБОР 
	|		КОГДА РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|		КОГДА РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|		КОГДА РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Аренда)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем)
	|	КОНЕЦ КАК ТипРасчетов,
	|	РасчетыОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	РасчетыОстатки.Договор КАК Договор,
	|	РасчетыОстатки.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыОстатки.Валюта КАК Валюта,
	|	
	|	РасчетыОстатки.СуммаОстаток КАК НачальноеСальдо,
	|	РасчетыОстатки.СуммаРеглОстаток КАК НачальноеСальдоРегл,
	|	ВЫБОР КОГДА РасчетыОстатки.СуммаОстаток > 0
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальноеСальдоДт,
	|	ВЫБОР КОГДА РасчетыОстатки.СуммаОстаток < 0
	|		ТОГДА -РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачальноеСальдоКт,
	|	
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсновнойДолг,
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Проценты,
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Комиссия,
	|	
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = &АрендныеОбязательства
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АрендныеОбязательства,
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = &ОбеспечительныйПлатеж
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбеспечительныйПлатеж,
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = &УслугаПоАренде
	|				ИЛИ РасчетыОстатки.ТипСуммы = &УслугаПоАрендеАванс
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УслугаПоАренде,
	|	ВЫБОР КОГДА РасчетыОстатки.ТипСуммы = &ВыкупнаяСтоимость
	|				ИЛИ РасчетыОстатки.ТипСуммы = &ВыкупнаяСтоимостьАванс
	|		ТОГДА РасчетыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыкупнаяСтоимость,
	|	
	|	ВЫБОР 
	|		КОГДА РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА 31
	|		КОГДА РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА 32
	|		КОГДА РасчетыОстатки.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Аренда)
	|			ТОГДА 33
	|	КОНЕЦ КАК ПорядокТипаПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|		{&НачалоПериода},
	|		ТипСуммы В (&ТипыСуммАренды) ИЛИ ТИПЗНАЧЕНИЯ(Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|		{АналитикаУчетаПоПартнерам.Партнер.* КАК Партнер,
	|		АналитикаУчетаПоПартнерам.Партнер.ОсновнойМенеджер.* КАК ОсновнойМенеджер,
	|		АналитикаУчетаПоПартнерам.Контрагент.* КАК Контрагент,
	|		АналитикаУчетаПоПартнерам.НаправлениеДеятельности.* КАК НаправлениеДеятельности}
	|	) КАК РасчетыОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаПоПартнерам КАК Аналитика
	|	ПО РасчетыОстатки.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|ГДЕ
	|	РасчетыОстатки.СуммаОстаток <> 0) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Партнер,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.НаправлениеДеятельности,
	|	ВложенныйЗапрос.Валюта,
	|	ВложенныйЗапрос.ПорядокТипаПлатежа
	|	
	|{ГДЕ
	|	ВложенныйЗапрос.ТипРасчетов КАК ТипРасчетов}
	|
	|ОБЪЕДИНИТЬ ВСЕ 
	|
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Период,
	|	ВложенныйЗапрос.ТипРасчетов КАК ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам   КАК АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Партнер КАК Партнер,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	ВложенныйЗапрос.Регистратор КАК РасчетныйДокумент,
	|	ВложенныйЗапрос.Валюта КАК Валюта,
	|	ВложенныйЗапрос.ТипСуммы КАК ТипСуммы,
	|	ИСТИНА КАК ДоговорыБезОборотов, //Договоры с оборотами включаем всегда
	|	
	|	0 КАК НачальноеСальдо,
	|	0 КАК НачальноеСальдоРегл,
	|	0 КАК НачальноеСальдоДт,
	|	0 КАК НачальноеСальдоКт,
	|	0 КАК Долг,
	|	0 КАК ДолгРегл,
	|	0 КАК Предоплата,
	|	0 КАК ПредоплатаРегл,
	|	
	|	0 КАК КонечноеСальдо,
	|	0 КАК КонечноеСальдоРегл,
	|	
	|	СУММА(ВложенныйЗапрос.ОсновнойДолг) КАК ОсновнойДолг,
	|	СУММА(ВложенныйЗапрос.Проценты) КАК Проценты,
	|	СУММА(ВложенныйЗапрос.Комиссия) КАК Комиссия,
	|	
	|	СУММА(ВложенныйЗапрос.АрендныеОбязательства) КАК АрендныеОбязательства,
	|	СУММА(ВложенныйЗапрос.ОбеспечительныйПлатеж) КАК ОбеспечительныйПлатеж,
	|	СУММА(ВложенныйЗапрос.УслугаПоАренде) КАК УслугаПоАренде,
	|	СУММА(ВложенныйЗапрос.ВыкупнаяСтоимость) КАК ВыкупнаяСтоимость,
	|	
	|	ВложенныйЗапрос.ПорядокТипаПлатежа КАК ПорядокТипаПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|	РасчетыОбороты.Период КАК Период,
	|	ВЫБОР 
	|		КОГДА РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|		КОГДА РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|		КОГДА РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Аренда)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСАрендодателем)
	|	КОНЕЦ КАК ТипРасчетов,
	|	РасчетыОбороты.АналитикаУчетаПоПартнерам   КАК АналитикаУчетаПоПартнерам,
	|	Аналитика.Организация КАК Организация,
	|	Аналитика.Партнер КАК Партнер,
	|	Аналитика.Контрагент КАК Контрагент,
	|	РасчетыОбороты.Договор КАК Договор,
	|	РасчетыОбороты.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	РасчетыОбороты.Регистратор КАК Регистратор,
	|	РасчетыОбороты.Валюта КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
	|	
	|	0 КАК НачальноеСальдо,
	|	0 КАК НачальноеСальдоРегл,
	|	0 КАК Долг,
	|	0 КАК Предоплата,
	|	0 КАК ПредоплатаРегл,
	|	
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг)
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОсновнойДолг,
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты)
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Проценты,
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия)
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Комиссия,
	|	
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = &АрендныеОбязательства
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АрендныеОбязательства,
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = &ОбеспечительныйПлатеж
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбеспечительныйПлатеж,
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = &УслугаПоАренде
	|				ИЛИ РасчетыОбороты.ТипСуммы = &УслугаПоАрендеАванс
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УслугаПоАренде,
	|	ВЫБОР КОГДА РасчетыОбороты.ТипСуммы = &ВыкупнаяСтоимость
	|				ИЛИ РасчетыОбороты.ТипСуммы = &ВыкупнаяСтоимостьАванс
	|		ТОГДА РасчетыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыкупнаяСтоимость,
	|	
	|	ВЫБОР 
	|		КОГДА РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА 31
	|		КОГДА РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА 32
	|		КОГДА РасчетыОбороты.Договор.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Аренда)
	|			ТОГДА 33
	|	КОНЕЦ КАК ПорядокТипаПлатежа
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Обороты(
	|		{&НачалоПериода}, {&КонецПериода}, Регистратор,
	|		ТипСуммы В (&ТипыСуммАренды) ИЛИ ТИПЗНАЧЕНИЯ(Договор) = ТИП(Справочник.ДоговорыКредитовИДепозитов)
	|		{АналитикаУчетаПоПартнерам.Партнер.* КАК Партнер,
	|		АналитикаУчетаПоПартнерам.Контрагент.* КАК Контрагент,
	|		АналитикаУчетаПоПартнерам.НаправлениеДеятельности.* КАК НаправлениеДеятельности}
	|	) КАК РасчетыОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаПоПартнерам КАК Аналитика
	|	ПО РасчетыОбороты.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|ГДЕ
	|	РасчетыОбороты.СуммаОборот <> 0) КАК ВложенныйЗапрос
	|	
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Период,
	|	ВложенныйЗапрос.ТипРасчетов,
	|	ВложенныйЗапрос.АналитикаУчетаПоПартнерам,
	|	ВложенныйЗапрос.Организация,
	|	ВложенныйЗапрос.Партнер,
	|	ВложенныйЗапрос.Контрагент,
	|	ВложенныйЗапрос.Договор,
	|	ВложенныйЗапрос.НаправлениеДеятельности,
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Валюта,
	|	ВложенныйЗапрос.ТипСуммы,
	|	ВложенныйЗапрос.ПорядокТипаПлатежа
	|	
	|ИМЕЮЩИЕ
	|	СУММА(ВложенныйЗапрос.ОсновнойДолг) <> 0 ИЛИ СУММА(ВложенныйЗапрос.Проценты) <> 0 ИЛИ СУММА(ВложенныйЗапрос.Комиссия) <> 0
	|	ИЛИ СУММА(ВложенныйЗапрос.АрендныеОбязательства) <> 0 ИЛИ СУММА(ВложенныйЗапрос.ОбеспечительныйПлатеж) <> 0
	|	ИЛИ СУММА(ВложенныйЗапрос.УслугаПоАренде) <> 0 ИЛИ СУММА(ВложенныйЗапрос.ВыкупнаяСтоимость) <> 0
	|	
	|{ГДЕ
	|	ВложенныйЗапрос.ТипРасчетов КАК ТипРасчетов}";
	
КонецФункции

Функция ТекстЗапросаДоговоровКредитовДепозитовЗаймов()
	
	Возврат "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоПериода КАК Период,
	|	ВЫБОР 
	|		КОГДА Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|		КОГДА Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|	КОНЕЦ КАК ТипРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
	|	Договоры.Организация КАК Организация,
	|	Договоры.Партнер КАК Партнер,
	|	Договоры.Контрагент КАК Контрагент,
	|	Договоры.Ссылка КАК Договор,
	|	Договоры.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектРасчетов,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	Договоры.ВалютаВзаиморасчетов КАК Валюта,
	|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
	|	ИСТИНА КАК ДоговорыБезОборотов,
	|		
	|	0 КАК НачальноеСальдо,
	|	0 КАК НачальноеСальдоРегл,
	|	0 КАК НачальноеСальдоДт,
	|	0 КАК НачальноеСальдоКт,
	|	0 КАК Долг,
	|	0 КАК ДолгРегл,
	|	0 КАК Предоплата,
	|	0 КАК ПредоплатаРегл,
	|	
	|	0 КАК КонечноеСальдо,
	|	0 КАК КонечноеСальдоРегл,
	|	
	|	0 КАК ОсновнойДолг,
	|	0 КАК Проценты,
	|	0 КАК Комиссия,
	|	
	|	0 КАК АрендныеОбязательства,
	|	0 КАК ОбеспечительныйПлатеж,
	|	0 КАК УслугаПоАренде,
	|	0 КАК ВыкупнаяСтоимость,
	|	
	|	ВЫБОР 
	|		КОГДА Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА 31
	|		КОГДА Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА 32
	|	КОНЕЦ КАК ПорядокТипаПлатежа
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК Договоры
	|ГДЕ
	|	НЕ Договоры.ПометкаУдаления
	|	И &ДоговорыБезОборотов
	|{ГДЕ
	|	ВЫБОР 
	|		КОГДА Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКредитором)
	|		КОГДА Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит)
	|				ИЛИ Договоры.ХарактерДоговора = ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСДебитором)
	|	КОНЕЦ КАК ТипРасчетов,
	|	ИСТИНА КАК ДоговорыБезОборотов}";
	
КонецФункции

Функция ТекстЗапросаПервичныйДокумент()
	
	Возврат "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СуммыДокументов.Ссылка КАК Регистратор,
	|	Обороты.Организация КАК Организация,
	|	Обороты.ТипРасчетов КАК ТипРасчетов,
	|	СуммыДокументов.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	СуммыДокументов.НомерВходящегоДокумента КАК НомерДокумента,
	|	СуммыДокументов.Дата КАК ДатаДокументаИБ,
	|	СуммыДокументов.Номер КАК НомерДокументаИБ,
	|	СуммыДокументов.НаименованиеВходящегоДокумента КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.Валюта КАК Валюта,
	|	СуммыДокументов.СуммаДокумента КАК Сумма
	|ИЗ
	|	Обороты КАК Обороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПервичныйДокумент КАК СуммыДокументов
	|	ПО Обороты.РасчетныйДокумент = СуммыДокументов.Ссылка
	|		И Обороты.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО";
	
КонецФункции

Функция ТекстЗапросаКорректировкаЗадолженности()
	
	Возврат "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СуммыДокументов.Ссылка КАК Регистратор,
	|	Обороты.Организация КАК Организация,
	|	Обороты.ТипРасчетов КАК ТипРасчетов,
	|	СуммыДокументов.Ссылка.Дата КАК ДатаДокумента,
	|	СуммыДокументов.Ссылка.Номер КАК НомерДокумента,
	|	СуммыДокументов.Ссылка.Дата КАК ДатаДокументаИБ,
	|	СуммыДокументов.Ссылка.Номер КАК НомерДокументаИБ,
	|	"""" КАК НаименованиеПервичногоДокумента,
	|	СуммыДокументов.ВалютаВзаиморасчетов КАК Валюта,
	|	СУММА(СуммыДокументов.Сумма) КАК Сумма
	|ИЗ
	|	Обороты КАК Обороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаЗадолженности.Задолженность КАК СуммыДокументов
	|	ПО Обороты.РасчетныйДокумент = СуммыДокументов.Ссылка
	|		И Обороты.РасчетныйДокумент <> НЕОПРЕДЕЛЕНО
	|		И Обороты.ТипРасчетов = СуммыДокументов.ТипРасчетов
	|		И Обороты.ОбъектРасчетов = СуммыДокументов.ОбъектРасчетов
	|		И Обороты.Партнер = СуммыДокументов.Партнер
	|		
	|СГРУППИРОВАТЬ ПО
	|	СуммыДокументов.Ссылка,
	|	Обороты.ТипРасчетов,
	|	Обороты.Организация,
	|	СуммыДокументов.ВалютаВзаиморасчетов";
	
КонецФункции

Функция РеквизитыПоследнегоДокумента(Контрагент) Экспорт

	СтруктураРеквизитов = Новый Структура("Партнер,
										  |Договор,
										  |РасшифровкаПоЗаказам,
										  |РасшифровкаПоПартнерам,
										  |РасшифровкаПоДоговорам,
										  |ФИОРуководителяКонтрагента,
										  |ДолжностьРуководителяКонтрагента,
										  |КонтактноеЛицо");
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СверкаВзаиморасчетов.Партнер						  КАК Партнер,
	|	СверкаВзаиморасчетов.Договор						  КАК Договор,
	|	СверкаВзаиморасчетов.РасшифровкаПоЗаказам			  КАК РасшифровкаПоЗаказам,
	|	СверкаВзаиморасчетов.РасшифровкаПоПартнерам			  КАК РасшифровкаПоПартнерам,
	|	СверкаВзаиморасчетов.РасшифровкаПоДоговорам			  КАК РасшифровкаПоДоговорам,
	|	СверкаВзаиморасчетов.ФИОРуководителяКонтрагента       КАК ФИОРуководителяКонтрагента,
	|	СверкаВзаиморасчетов.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	СверкаВзаиморасчетов.КонтактноеЛицо                   КАК КонтактноеЛицо
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4 КАК СверкаВзаиморасчетов
	|ГДЕ
	|	СверкаВзаиморасчетов.Контрагент = &Контрагент
	|	И НЕ СверкаВзаиморасчетов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	СверкаВзаиморасчетов.МоментВремени УБЫВ";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция АналитикаКРасчету(Организация, Контрагент, ТипРасчетов, КонецПериода) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСКлиентами КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	(АналитикаПоПартнерам.Организация В (&Организация) ИЛИ (&ПоВсемОрганизациям))
	|		И (АналитикаПоПартнерам.Контрагент В (&Контрагент) ИЛИ (&ПоВсемКонтрагентам))
	|		И (ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом) В (&ТипРасчетов)  ИЛИ &ПоВсемТипам)
	|	И Задания.Месяц <= &КонецПериода
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АналитикаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРаспределениюРасчетовСПоставщиками КАК Задания
	|			ПО Задания.АналитикаУчетаПоПартнерам = АналитикаПоПартнерам.КлючАналитики
	|ГДЕ
	|	(АналитикаПоПартнерам.Организация В (&Организация) ИЛИ (&ПоВсемОрганизациям))
	|		И (АналитикаПоПартнерам.Контрагент В (&Контрагент) ИЛИ (&ПоВсемКонтрагентам))
	|		И (ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) В (&ТипРасчетов) ИЛИ &ПоВсемТипам)
	|	И Задания.Месяц <= &КонецПериода";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент",  Контрагент);
	Запрос.УстановитьПараметр("ТипРасчетов", ТипРасчетов);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", НЕ ЗначениеЗаполнено(Контрагент));
	Запрос.УстановитьПараметр("ПоВсемТипам", НЕ ЗначениеЗаполнено(ТипРасчетов));
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	АналитикаКРасчету = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КлючАналитики");
	
	Возврат АналитикаКРасчету;
	
КонецФункции

Функция СтруктураРеквизитыОтветственныеЛица() Экспорт
	
	РеквизитыДокумента = Метаданные.Документы.СверкаВзаиморасчетов2_4.Реквизиты;
	Результат = Новый Структура();
	Результат.Вставить(
		РеквизитыДокумента.Руководитель.Имя, 
		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Результат.Вставить(
		РеквизитыДокумента.ГлавныйБухгалтер.Имя, 
		Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Возврат Результат;
	
КонецФункции

Функция СтруктураРеквизитыОтветственныеЛицаОрганизацииКонтрагента() Экспорт
	
	РеквизитыДокумента = Метаданные.Документы.СверкаВзаиморасчетов2_4.Реквизиты;
	Результат = Новый Структура();
	Результат.Вставить(
		РеквизитыДокумента.РуководительОрганизацииКонтрагента.Имя, 
		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	Результат.Вставить(
		РеквизитыДокумента.ГлавныйБухгалтерОрганизацииКонтрагента.Имя, 
		Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
	Возврат Результат;
	
КонецФункции

//++ Локализация
#Область ВыводУстаревшихПечатныхФорм

Функция СформироватьПечатнуюФормуАктСверкиВзаимныхРасчетовПоСтарому(МассивОбъектов, ОбъектыПечати, ТабличныйДокумент = Неопределено)

	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДокумента = ВыборкаДанныхДокументаНаПечать(МассивОбъектов);
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;

	ПервыйДокумент = Истина;
	Пока ДанныеДокумента.Следующий() Цикл
		
		ДетальныеРасчеты = ДетальныеРасчеты(ДанныеДокумента);
		
		Если ДетальныеРасчеты = Неопределено Тогда 
			
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По документу %1 нет расчетов с партнерами. Печать акта сверки взаимных расчетов не требуется.'"),
				ДанныеДокумента.ДокументСсылка);
				
			ОбщегоНазначения.СообщитьПользователю(
				Текст,
				ДанныеДокумента.ДокументСсылка);
			
			Продолжить;
			
		КонецЕсли;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов2_4.ПФ_MXL_УстаревшийАктСверкиВзаиморасчетов");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// ШАПКА ДОКУМЕНТА

		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru='Акт сверки взаимных расчетов'"));
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по состоянию на %1'"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
			ПредставлениеПериодаРасчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'По состоянию на %1'"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='за период: %1'"), ПредставлениеПериода);
				
			Иначе
				
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='за %1'"), ПредставлениеПериода);
				
			КонецЕсли;
			
			ПредставлениеПериодаРасчетов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В период с %1 по %2'"),
				Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовкаМакета 			 = ТекстЗаголовка;
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода 	 = ПредставлениеПериода;
		ОбластьМакета.Параметры.ПредставлениеПериодаРасчетов = ПредставлениеПериодаРасчетов;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// 1. ДЕТАЛЬНЫЕ РАСЧЕТЫ
		
		ТаблицаЗадолженности = Новый ТаблицаЗначений;
		ТаблицаЗадолженности.Колонки.Добавить("Валюта");
		ТаблицаЗадолженности.Колонки.Добавить("Сумма");
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			ТаблицаЗадолженности.Колонки.Добавить("Партнер");
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			ТаблицаЗадолженности.Колонки.Добавить("Договор");
		КонецЕсли; 
		
		Пока ДетальныеРасчеты.Следующий() Цикл
			
			Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
				ВыборкаПоДетальнымРасчетам = ДетальныеРасчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
					ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписиПоСтарому(ВыборкаПоДетальнымРасчетам, ДанныеДокумента, СтруктураПредставленийУчастников, Макет, ТаблицаЗадолженности, ДетальныеРасчеты.Партнер));
				КонецЦикла; 
			ИначеЕсли ДанныеДокумента.РасшифровкаПоДоговорам Тогда
				ВыборкаПоДетальнымРасчетам = ДетальныеРасчеты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоДетальнымРасчетам.Следующий() Цикл
					ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписиПоСтарому(ВыборкаПоДетальнымРасчетам, ДанныеДокумента, СтруктураПредставленийУчастников, Макет, ТаблицаЗадолженности, , ДетальныеРасчеты.Договор));
				КонецЦикла; 
			Иначе
				ТабличныйДокумент.Вывести(ВывестиДетальныеЗаписиПоСтарому(ДетальныеРасчеты, ДанныеДокумента, СтруктураПредставленийУчастников, Макет, ТаблицаЗадолженности));
			КонецЕсли;
		
		КонецЦикла; 
		
		// 2. ЗАДОЛЖЕННОСТЬ
		
		Если ТаблицаЗадолженности.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок		 = Макет.ПолучитьОбласть("ЗаголовокЗадолженность");
			ОбластьМакетаСтрока			 = Макет.ПолучитьОбласть("СтрокаЗадолженность");
			ОбластьМакетаСтрокаПодробно1 = Макет.ПолучитьОбласть("СтрокаЗадолженностьПодробноВтч");
			ОбластьМакетаСтрокаПодробно2 = Макет.ПолучитьОбласть("СтрокаЗадолженностьПодробно");
			
			ОбластьМакетаЗаголовок.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			ТаблицаЗадолженностиПоВалютам = ТаблицаЗадолженности.Скопировать(); // ТаблицаЗначений
			ТаблицаЗадолженностиПоВалютам.Свернуть("Валюта", "Сумма");
			Для Каждого СтрокаЗадолженностиПоВалютам Из ТаблицаЗадолженностиПоВалютам Цикл
				
				ОбластьМакетаСтрока.Параметры.Валюта = СтрокаЗадолженностиПоВалютам.Валюта;
				Если СтрокаЗадолженностиПоВалютам.Сумма > 0 Тогда
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(СтрокаЗадолженностиПоВалютам.Сумма, "ЧДЦ=2; ЧГ=3,0");
					Если ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
						ОбластьМакетаСтрока.Параметры.Дебитор = ДанныеДокумента.ПредставлениеПартнера;
					Иначе
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
					КонецЕсли;
				Иначе
					ОбластьМакетаСтрока.Параметры.Сумма = Формат(-СтрокаЗадолженностиПоВалютам.Сумма, "ЧДЦ=2; ЧГ=3,0");
					Если ЗначениеЗаполнено(ДанныеДокумента.Партнер) Тогда
						ОбластьМакетаСтрока.Параметры.Дебитор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='%1 перед %2'"),
							СтруктураПредставленийУчастников.ПредставлениеОрганизации,
							ДанныеДокумента.ПредставлениеПартнера);
					Иначе
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
					КонецЕсли;
				КонецЕсли;
				ОбластьМакетаСтрока.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СтрокаЗадолженностиПоВалютам.Сумма,СтрокаЗадолженностиПоВалютам.Валюта);
				ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					
					ПервыйПроходПоПартнерам = Истина;
					МассивСтрокЗадолженности = ТаблицаЗадолженности.НайтиСтроки(Новый Структура("Валюта", СтрокаЗадолженностиПоВалютам.Валюта));
					Для Каждого СтрокаЗадолженности Из МассивСтрокЗадолженности Цикл
						Если ПервыйПроходПоПартнерам Тогда
							ОбластьМакета = ОбластьМакетаСтрокаПодробно1;
						Иначе
							ОбластьМакета = ОбластьМакетаСтрокаПодробно2;
						КонецЕсли;
						
						ОбластьМакета.Параметры.Валюта = СтрокаЗадолженности.Валюта;
						Если СтрокаЗадолженности.Сумма > 0 Тогда
							ОбластьМакета.Параметры.Сумма = Формат(СтрокаЗадолженности.Сумма, "ЧДЦ=2; ЧГ=3,0");
							ОбластьМакета.Параметры.Дебитор = СтрокаЗадолженности.Партнер;
						Иначе
							ОбластьМакета.Параметры.Сумма = Формат(-СтрокаЗадолженности.Сумма, "ЧДЦ=2; ЧГ=3,0");
							ОбластьМакета.Параметры.Дебитор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 перед %2'"),
								СтруктураПредставленийУчастников.ПредставлениеОрганизации,
								СтрокаЗадолженности.Партнер);
						КонецЕсли;
						ОбластьМакета.Параметры.СуммаПрописью = РаботаСКурсамиВалютУТ.СформироватьСуммуПрописью(СтрокаЗадолженности.Сумма, СтрокаЗадолженности.Валюта);
						ТабличныйДокумент.Вывести(ОбластьМакета);
						
						ПервыйПроходПоПартнерам = Ложь;
					КонецЦикла; 
				
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
		
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокЗадолженностьОтсутствует");
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		
		КонецЕсли; 
		
		// 3. РАСХОЖДЕНИЙ НЕ ВЫЯВЛЕНО
		
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ПОДПИСИ
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// ПРИЛОЖЕНИЕ
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			
			ТаблицаОстатков = ОстаткиРасчетов(ДанныеДокумента);
			
			Если ТаблицаОстатков <> Неопределено Тогда
				
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				
				ТекстЗаголовкаПриложения = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента,
					НСтр("ru='к акту сверки взаимных расчетов'"));
				
				ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокПриложение");
				ОбластьМакета.Параметры.ТекстЗаголовкаПриложения = ТекстЗаголовкаПриложения;
				ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
				МассивВалют = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаОстатков.ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					МассивПартнеров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаОстатков.ВыгрузитьКолонку("Партнер"));
				КонецЕсли; 
				
				ПараметрыТаблицыЗадолженностей = Новый Структура;
				ПараметрыТаблицыЗадолженностей.Вставить("ДанныеДокумента", ДанныеДокумента);
				ПараметрыТаблицыЗадолженностей.Вставить("ТаблицаОстатков", ТаблицаОстатков);
				ПараметрыТаблицыЗадолженностей.Вставить("СтруктураПредставленийУчастников", СтруктураПредставленийУчастников);
				ПараметрыТаблицыЗадолженностей.Вставить("МассивВалют", МассивВалют);
				ПараметрыТаблицыЗадолженностей.Вставить("Макет", Макет);
				ПараметрыТаблицыЗадолженностей.Вставить("ВыводитьПодвал", Ложь);
				
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					Для Каждого Партнер Из МассивПартнеров Цикл
						ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, Партнер));
					КонецЦикла; 
				Иначе
					ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей));
				КонецЕсли;	
				
				ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
				ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
				ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
														  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
				
				ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
														  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
				ТабличныйДокумент.Вывести(ОбластьМакета);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
		
	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;

	Возврат ТабличныйДокумент;
	
КонецФункции

Функция СформироватьПечатнуюФормуАктСДаннымиКонтрагента(МассивОбъектов, ОбъектыПечати, ТабличныйДокумент = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеДокумента = ВыборкаДанныхДокументаНаПечать(МассивОбъектов);
	
	Если ТабличныйДокумент = Неопределено Тогда
		ТабличныйДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	
	ПервыйДокумент = Истина;
	Пока ДанныеДокумента.Следующий() Цикл
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.СверкаВзаиморасчетов2_4.ПФ_MXL_УстаревшийАктСДаннымиКонтрагента");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// ШАПКА ДОКУМЕНТА
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ШтрихкодированиеПечатныхФорм.ВывестиШтрихкодВТабличныйДокумент(ТабличныйДокумент, Макет, ОбластьМакета, ДанныеДокумента.ДокументСсылка);
		
		ТекстЗаголовка = ОбщегоНазначенияУТКлиентСервер.СформироватьЗаголовокДокумента(ДанныеДокумента, НСтр("ru='Акт сверки взаимных расчетов'"));
		
		Если ДанныеДокумента.НачалоПериода = '00010101' Тогда
			
			ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'по состоянию на %1'"),
				Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД"),);
			
		Иначе
			
			ПредставлениеПериода = ПредставлениеПериода(ДанныеДокумента.НачалоПериода, КонецДня(ДанныеДокумента.КонецПериода));

			ПервыйСимволПредставлениеПериода = Лев(ПредставлениеПериода, 1);
			Если  КодСимвола(ПервыйСимволПредставлениеПериода) >= 48
				И КодСимвола(ПервыйСимволПредставлениеПериода) <= 57 Тогда
				
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='за период: %1'"), ПредставлениеПериода);
				
			Иначе
				
				ПредставлениеПериода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='за %1'"), ПредставлениеПериода);
				
			КонецЕсли;
			
		КонецЕсли;

		СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
									"ПолноеНаименование");
		СведенияОКонтрагенте  = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДанныеДокумента.Контрагент,  ДанныеДокумента.Дата);
		КонтрагентНаименование = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
								  "ПолноеНаименование");
		
		СтруктураПредставленийУчастников = Новый Структура;
		СтруктураПредставленийУчастников.Вставить("ПредставлениеОрганизации", ПредставлениеОрганизации);
		СтруктураПредставленийУчастников.Вставить("КонтрагентНаименование", КонтрагентНаименование);
		
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
		ОбластьМакета.Параметры.ТекстЗаголовкаМакета 			 = ТекстЗаголовка;       
		ОбластьМакета.Параметры.ФИОРуководителяКонтрагента = СокрЛП(ДанныеДокумента.ФИОРуководителяКонтрагента);
		ОбластьМакета.Параметры.ПредставлениеПериода 	 = ПредставлениеПериода;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ТаблицаРасхождений = Новый ТаблицаЗначений;
		ТаблицаРасхождений.Колонки.Добавить("ВалютаВзаиморасчетов");
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			ТаблицаРасхождений.Колонки.Добавить("Партнер");
		КонецЕсли;
		ТаблицаРасхождений.Колонки.Добавить("СуммаДолгПартнера");
		ТаблицаРасхождений.Колонки.Добавить("СуммаНашДолг");
		
		// ДАННЫЕ ОРГАНИЗАЦИИ
		
		ТаблицаЗадолженностиН = ОстаткиРасчетов(ДанныеДокумента);

		Если ТаблицаЗадолженностиН <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокН");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			МассивВалют = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиН.ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
			Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
				МассивПартнеров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиН.ВыгрузитьКолонку("Партнер"));
			КонецЕсли; 
			
			ПараметрыТаблицыЗадолженностей = Новый Структура;
			ПараметрыТаблицыЗадолженностей.Вставить("ДанныеДокумента", ДанныеДокумента);
			ПараметрыТаблицыЗадолженностей.Вставить("ТаблицаОстатков", ТаблицаЗадолженностиН);
			ПараметрыТаблицыЗадолженностей.Вставить("СтруктураПредставленийУчастников", СтруктураПредставленийУчастников);
			ПараметрыТаблицыЗадолженностей.Вставить("МассивВалют", МассивВалют);
			ПараметрыТаблицыЗадолженностей.Вставить("Макет", Макет);
			ПараметрыТаблицыЗадолженностей.Вставить("ВыводитьПодвал", Истина);
			
			СтруктураЗадолженности = Новый Структура;
			Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					Для Каждого Партнер Из МассивПартнеров Цикл
						ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, Партнер, ТаблицаРасхождений));
					КонецЦикла; 
				Иначе
					ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, , ТаблицаРасхождений));
				КонецЕсли;
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗадолженность");
				Для Каждого СтрокаЗадолженности Из ТаблицаЗадолженностиН Цикл
					СтрокаРасхождений = ТаблицаРасхождений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаЗадолженности, , "СуммаДолгПартнера, СуммаНашДолг");
					ОбластьМакета.Параметры.Валюта = СтрокаЗадолженности.ВалютаВзаиморасчетов;
					СуммаДолга = СтрокаЗадолженности.СуммаДолгПартнера - СтрокаЗадолженности.СуммаНашДолг;
					Если СуммаДолга > 0 Тогда
						СтрокаРасхождений.СуммаДолгПартнера = СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = ПредставлениеПартнера(СтрокаЗадолженности.Партнер);
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
						КонецЕсли; 
					Иначе
						СтрокаРасхождений.СуммаНашДолг = -СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(-СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 перед %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
								СтруктураПредставленийУчастников.ПредставлениеОрганизации,
								ПредставлениеПартнера(СтрокаЗадолженности.Партнер));
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
						КонецЕсли; 
					КонецЕсли; 
					Если СуммаДолга <> 0 Тогда
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;	
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокНОтсутствует");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// ДАННЫЕ КОНТРАГЕНТА
		
		ТаблицаЗадолженностиК = ОстаткиРасчетовПоДаннымКонтрагента(ДанныеДокумента);
		
		Если ТаблицаЗадолженностиК <> Неопределено Тогда
			
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокК");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			МассивВалют = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиК.ВыгрузитьКолонку("ВалютаВзаиморасчетов"));
			Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
				МассивПартнеров = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(ТаблицаЗадолженностиК.ВыгрузитьКолонку("Партнер"));
			КонецЕсли;
			
			ПараметрыТаблицыЗадолженностей = Новый Структура;
			ПараметрыТаблицыЗадолженностей.Вставить("ДанныеДокумента", ДанныеДокумента);
			ПараметрыТаблицыЗадолженностей.Вставить("ТаблицаОстатков", ТаблицаЗадолженностиК);
			ПараметрыТаблицыЗадолженностей.Вставить("СтруктураПредставленийУчастников", СтруктураПредставленийУчастников);
			ПараметрыТаблицыЗадолженностей.Вставить("МассивВалют", МассивВалют);
			ПараметрыТаблицыЗадолженностей.Вставить("Макет", Макет);
			ПараметрыТаблицыЗадолженностей.Вставить("ВыводитьПодвал", Истина);
			
			СтруктураЗадолженности = Новый Структура;
			Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
				Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
					Для Каждого Партнер Из МассивПартнеров Цикл
						ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, Партнер, ТаблицаРасхождений, Истина));
					КонецЦикла; 
				Иначе
					ТабличныйДокумент.Вывести(ВывестиТаблицуЗадолженности(ПараметрыТаблицыЗадолженностей, , ТаблицаРасхождений, Истина));
				КонецЕсли;
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗадолженность");
				Для Каждого СтрокаЗадолженности Из ТаблицаЗадолженностиК Цикл
					СтрокаРасхождений = ТаблицаРасхождений.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРасхождений, СтрокаЗадолженности, , "СуммаДолгПартнера, СуммаНашДолг");
					ОбластьМакета.Параметры.Валюта = СтрокаЗадолженности.ВалютаВзаиморасчетов;
					СуммаДолга = СтрокаЗадолженности.СуммаДолгПартнера - СтрокаЗадолженности.СуммаНашДолг;
					Если СуммаДолга > 0 Тогда
						СтрокаРасхождений.СуммаДолгПартнера = -СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = ПредставлениеПартнера(СтрокаЗадолженности.Партнер);
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
						КонецЕсли; 
					Иначе
						СтрокаРасхождений.СуммаНашДолг = СуммаДолга;
						ОбластьМакета.Параметры.Сумма = Формат(-СуммаДолга, "ЧДЦ=2; ЧГ=3,0");
						Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
							ОбластьМакета.Параметры.Дебитор = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='%1 перед %2'", ОбщегоНазначения.КодОсновногоЯзыка()),
								СтруктураПредставленийУчастников.ПредставлениеОрганизации,
								ПредставлениеПартнера(СтрокаЗадолженности.Партнер));
						Иначе
							ОбластьМакета.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
						КонецЕсли; 
					КонецЕсли; 
					Если СуммаДолга <> 0 Тогда
						ТабличныйДокумент.Вывести(ОбластьМакета);
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;	
				
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокКОтсутствует");
			ОбластьМакета.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ОбластьМакета.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// РАСХОЖДЕНИЯ
		
		СписокКолонокГруппировки = "ВалютаВзаиморасчетов";
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокКолонокГруппировки = СписокКолонокГруппировки + ", Партнер";
		КонецЕсли;
		ТаблицаРасхождений.Свернуть(СписокКолонокГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
		
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
			Если СтрокаРасхождений.СуммаДолгПартнера = 0 И СтрокаРасхождений.СуммаНашДолг = 0 Тогда
				МассивСтрокКУдалению.Добавить(СтрокаРасхождений);
			КонецЕсли; 
		КонецЦикла; 
		
		Для Каждого СтрокаРасхождений Из МассивСтрокКУдалению Цикл
			ТаблицаРасхождений.Удалить(СтрокаРасхождений);
		КонецЦикла; 
		
		Если ТаблицаРасхождений.Количество() > 0 Тогда
			
			ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ЗаголовокРасхождения");
			ОбластьМакетаСтрока    = Макет.ПолучитьОбласть("СтрокаРасхождения");
			
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			Для Каждого СтрокаРасхождений Из ТаблицаРасхождений Цикл
				
				ОбластьМакетаСтрока.Параметры.Валюта = СтрокаРасхождений.ВалютаВзаиморасчетов;
				
				Если СтрокаРасхождений.СуммаДолгПартнера <> 0 Тогда
					Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
						ОбластьМакетаСтрока.Параметры.Дебитор = ПредставлениеПартнера(СтрокаРасхождений.Партнер);
					Иначе
						ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
					КонецЕсли;
					ОбластьМакетаСтрока.Параметры.Кредитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
					ОбластьМакетаСтрока.Параметры.Сумма = ?(СтрокаРасхождений.СуммаДолгПартнера > 0, СтрокаРасхождений.СуммаДолгПартнера, -СтрокаРасхождений.СуммаДолгПартнера);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				КонецЕсли;
				
				Если СтрокаРасхождений.СуммаНашДолг <> 0 Тогда
					ОбластьМакетаСтрока.Параметры.Дебитор = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
					Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
						ОбластьМакетаСтрока.Параметры.Кредитор = ПредставлениеПартнера(СтрокаРасхождений.Партнер);
					Иначе
						ОбластьМакетаСтрока.Параметры.Кредитор = СтруктураПредставленийУчастников.КонтрагентНаименование;
					КонецЕсли;
					ОбластьМакетаСтрока.Параметры.Сумма = ?(СтрокаРасхождений.СуммаНашДолг > 0, СтрокаРасхождений.СуммаНашДолг, -СтрокаРасхождений.СуммаНашДолг);
					ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
				КонецЕсли;
				
			КонецЦикла; 
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокНетРасхождений");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли; 
		
		// ПОДПИСИ
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ДанныеДокумента);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		
		ОбластьМакета.Параметры.КонтрагентНаименование   = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, 
												  			  "ПолноеНаименование,ИНН,ЮридическийАдрес");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ДанныеДокумента.ДокументСсылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ОстаткиРасчетовПоДаннымКонтрагента(ДанныеДокумента)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеКонтрагента.РасчетныйДокумент	   КАК РасчетныйДокумент,
	|	ДанныеКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДанныеКонтрагента.Партнер			   КАК Партнер,
	|	ДанныеКонтрагента.ОписаниеДокумента    КАК ОписаниеДокумента,
	|	ДанныеКонтрагента.СуммаДолгПартнера	   КАК СуммаДолгПартнера,
	|	ДанныеКонтрагента.СуммаНашДолг		   КАК СуммаНашДолг	
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4.ДанныеКонтрагента КАК ДанныеКонтрагента
	|ГДЕ
	|	ДанныеКонтрагента.Ссылка = &ДокументСсылка
	|
	|УПОРЯДОЧИТЬ ПО	ДанныеКонтрагента.НомерСтроки
	|";
					   
	Запрос.УстановитьПараметр("ДокументСсылка", ДанныеДокумента.ДокументСсылка);					   
					   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЗадолженности = РезультатЗапроса.Выгрузить();
		
		СписокПолейГруппировки = "ВалютаВзаиморасчетов";
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", РасчетныйДокумент, ОписаниеДокумента";
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Партнер";
		КонецЕсли; 
		ТаблицаЗадолженности.Свернуть(СписокПолейГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
	Иначе
		ТаблицаЗадолженности = Неопределено;
	КонецЕсли;

	Возврат ТаблицаЗадолженности;

КонецФункции

Функция ОстаткиРасчетов(ДанныеДокумента) Экспорт

	ЗапросНашихДанных = Новый Запрос;
	
	ЗапросНашихДанных.Текст = ТекстЗапросаОтборПоАналитике() + "
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.ОбъектРасчетов.Объект		КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.Валюта						КАК ВалютаВзаиморасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток > 0
	|			ТОГДА ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаДолгПартнера,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток < 0
	|			ТОГДА -ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаНашДолг
	|ПОМЕСТИТЬ ОстаткиЗадолженностиРазвернуто
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|			&КонецПериодаСверки,
	|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
	|											ОтборПоАналитике.КлючАналитики
	|										 ИЗ
	|											ОтборПоАналитике)
	|			) КАК ОстаткиЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО ОстаткиЗадолженности.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.ОбъектРасчетов.Объект		КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.Валюта						КАК ВалютаВзаиморасчетов,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер		КАК Партнер,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток > 0
	|			ТОГДА ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаДолгПартнера,
	|	ВЫБОР
	|		КОГДА ОстаткиЗадолженности.СуммаОстаток < 0
	|			ТОГДА -ОстаткиЗадолженности.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ											КАК СуммаНашДолг
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.Остатки(
	|			&КонецПериодаСверки,
	|			АналитикаУчетаПоПартнерам В (ВЫБРАТЬ
	|											ОтборПоАналитике.КлючАналитики
	|										 ИЗ
	|											ОтборПоАналитике)
	|			) КАК ОстаткиЗадолженности
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО ОстаткиЗадолженности.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		  КАК РасчетныйДокумент,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	  КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	  КАК Партнер,
	|	СУММА(ОстаткиЗадолженности.СуммаДолгПартнера) КАК СуммаДолгПартнера,
	|	СУММА(ОстаткиЗадолженности.СуммаНашДолг)	  КАК СуммаНашДолг
	|ПОМЕСТИТЬ ОстаткиЗадолженности
	|ИЗ
	|	ОстаткиЗадолженностиРазвернуто КАК ОстаткиЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиЗадолженности.РасчетныйДокумент,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ПОМЕСТИТЬ ЗадолженностьПоДокументамРасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	Неопределено								КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	Неопределено								КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер				КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВозвратТоваровОтКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.Номер						КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.Дата						КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыКлиентом КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	ДанныеДокумента.НомерВходящегоДокумента		КАК НомерРасчетногоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента		КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер				КАК Партнер,
	|	ДанныеДокумента.Договор						КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ИСТИНА										КАК ЭтоВходящийНомер
	|ИЗ
	|	Документ.ВыкупВозвратнойТарыУПоставщика КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|

	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК РасчетныйДокумент,
	|	НЕОПРЕДЕЛЕНО								КАК НомерРасчетногоДокумента,
	|	НЕОПРЕДЕЛЕНО								КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 	КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 	КАК Партнер,
	|	ОстаткиЗадолженности.РасчетныйДокумент		КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера		КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг			КАК СуммаНашДолг,
	|	ЛОЖЬ										КАК ЭтоВходящийНомер
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|		ПО ОстаткиЗадолженности.РасчетныйДокумент = ДанныеДокумента.Ссылка
	|
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент		   КАК РасчетныйДокумент,
	|	ЗадолженностьПоДокументамРасчетов.НомерРасчетногоДокумента КАК НомерРасчетногоДокумента,
	|	ЗадолженностьПоДокументамРасчетов.ДатаРасчетногоДокумента  КАК ДатаРасчетногоДокумента,
	|	ЗадолженностьПоДокументамРасчетов.ВалютаВзаиморасчетов	   КАК ВалютаВзаиморасчетов,
	|	ЗадолженностьПоДокументамРасчетов.Партнер				   КАК Партнер,
	|	ЗадолженностьПоДокументамРасчетов.Договор				   КАК Договор,
	|	ЗадолженностьПоДокументамРасчетов.СуммаДолгПартнера		   КАК СуммаДолгПартнера,
	|	ЗадолженностьПоДокументамРасчетов.СуммаНашДолг			   КАК СуммаНашДолг,
	|	ЗадолженностьПоДокументамРасчетов.ЭтоВходящийНомер		   КАК ЭтоВходящийНомер
	|ИЗ
	|	ЗадолженностьПоДокументамРасчетов КАК ЗадолженностьПоДокументамРасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|		
	|ВЫБРАТЬ
	|	Неопределено											   КАК РасчетныйДокумент,
	|	Неопределено											   КАК НомерРасчетногоДокумента,
	|	Неопределено											   КАК ДатаРасчетногоДокумента,
	|	ОстаткиЗадолженности.ВалютаВзаиморасчетов 				   КАК ВалютаВзаиморасчетов,
	|	ОстаткиЗадолженности.Партнер			 				   КАК Партнер,
	|	Неопределено											   КАК Договор,
	|	ОстаткиЗадолженности.СуммаДолгПартнера					   КАК СуммаДолгПартнера,
	|	ОстаткиЗадолженности.СуммаНашДолг						   КАК СуммаНашДолг,
	|	ЛОЖЬ													   КАК ЭтоВходящийНомер
	|ИЗ
	|	ОстаткиЗадолженности КАК ОстаткиЗадолженности
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗадолженностьПоДокументамРасчетов КАК ЗадолженностьПоДокументамРасчетов
	|		ПО ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент = ОстаткиЗадолженности.РасчетныйДокумент
	|		И ЗадолженностьПоДокументамРасчетов.ВалютаВзаиморасчетов = ОстаткиЗадолженности.ВалютаВзаиморасчетов
	|ГДЕ
	|	ЗадолженностьПоДокументамРасчетов.РасчетныйДокумент ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРасчетногоДокумента,
	|	НомерРасчетногоДокумента
	|";

	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки", Новый Граница(
																  КонецДня(ДанныеДокумента.КонецПериода),
																  ВидГраницы.Включая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		   ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		   ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	   ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	   ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));

	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ТаблицаНашихДанных = РезультатЗапросаНашихДанных.Выгрузить();
		
		СписокПолейГруппировки = "ВалютаВзаиморасчетов,ЭтоВходящийНомер";
		Если ДанныеДокумента.РасшифровкаПоЗаказам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", РасчетныйДокумент, НомерРасчетногоДокумента, ДатаРасчетногоДокумента";
		КонецЕсли; 
		Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Партнер";
		КонецЕсли;
		Если ДанныеДокумента.РасшифровкаПоДоговорам Тогда
			СписокПолейГруппировки = СписокПолейГруппировки + ", Договор";
		КонецЕсли;
		ТаблицаНашихДанных.Свернуть(СписокПолейГруппировки, "СуммаДолгПартнера, СуммаНашДолг");
	Иначе
		ТаблицаНашихДанных = Неопределено;
	КонецЕсли;

	Возврат ТаблицаНашихДанных;
	
КонецФункции

Процедура СвернутьТабличнуюЧастьПоДетализацииВзаиморасчетов(ПараметрыДетализации, ТабличнаяЧасть) Экспорт
	
	СписокКолонокГруппировок = "ВалютаВзаиморасчетов";
	Если ПараметрыДетализации.РасшифровкаПоЗаказам Тогда
		СписокКолонокГруппировок = СписокКолонокГруппировок + ", РасчетныйДокумент, ОписаниеДокумента";
	КонецЕсли;
	Если ПараметрыДетализации.РасшифровкаПоПартнерам Тогда
		СписокКолонокГруппировок = СписокКолонокГруппировок + ", Партнер";
	КонецЕсли;
	Если ПараметрыДетализации.РасшифровкаПоДоговорам Тогда
		СписокКолонокГруппировок = СписокКолонокГруппировок + ", Договор";
	КонецЕсли;
	
	ТаблицаДанныеКонтрагента = ТабличнаяЧасть.Выгрузить(, СписокКолонокГруппировок + ", СуммаДолгПартнера, СуммаНашДолг"); // ТаблицаЗначений
	ТаблицаДанныеКонтрагента.Свернуть(СписокКолонокГруппировок, "СуммаДолгПартнера, СуммаНашДолг");
	ТабличнаяЧасть.Загрузить(ТаблицаДанныеКонтрагента);
	
КонецПроцедуры

Функция ВыборкаДанныхДокументаНаПечать(МассивОбъектов) Экспорт
	
	ПараметрыОтветственныхЛиц = ОтветственныеЛицаСервер.ПараметрыОтветственныхЛицПоУмолчанию();
	ПараметрыОтветственныхЛиц.РеквизитыОтветственныеЛица = СтруктураРеквизитыОтветственныеЛица();
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ЗначениеЗаполнено(МассивОбъектов) Тогда
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(МассивОбъектов, МенеджерВременныхТаблиц, ПараметрыОтветственныхЛиц);
	Иначе
		ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(Документы.СверкаВзаиморасчетов2_4.ПустаяСсылка(), МенеджерВременныхТаблиц, ПараметрыОтветственныхЛиц);
	КонецЕсли;
	
	ЗапросДанныеДокумента = Новый Запрос;
	ЗапросДанныеДокумента.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДанныеДокумента.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ДокументСсылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Партнер.НаименованиеПолное КАК ПредставлениеПартнера,
	|	ДанныеДокумента.Договор КАК Договор,
	|	ДанныеДокумента.Договор.НаименованиеДляПечати КАК ПредставлениеДоговора,
	|	ДанныеДокумента.НачалоПериода КАК НачалоПериода,
	|	ДанныеДокумента.КонецПериода КАК КонецПериода,
	|	ТаблицаОтветственныеЛица.РуководительНаименование КАК ФИОРуководителя,
	|	ТаблицаОтветственныеЛица.РуководительДолжность КАК ДолжностьРуководителя,
	|	ДанныеДокумента.ФИОРуководителяКонтрагента КАК ФИОРуководителяКонтрагента,
	|	ДанныеДокумента.ДолжностьРуководителяКонтрагента КАК ДолжностьРуководителяКонтрагента,
	|	ДанныеДокумента.РасшифровкаПоЗаказам КАК РасшифровкаПоЗаказам,
	|	ДанныеДокумента.РасшифровкаПоПартнерам КАК РасшифровкаПоПартнерам,
	|	ДанныеДокумента.РасшифровкаПоДоговорам КАК РасшифровкаПоДоговорам
	|ИЗ
	|	Документ.СверкаВзаиморасчетов2_4 КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
	|		ПО ДанныеДокумента.Ссылка = ТаблицаОтветственныеЛица.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Номер";
								   
	ЗапросДанныеДокумента.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Возврат ЗапросДанныеДокумента.Выполнить().Выбрать();
	
КонецФункции

Функция ВывестиДетальныеЗаписиПоСтарому(
	ВыборкаДетальныхЗаписей,
	ДанныеДокумента,
	СтруктураПредставленийУчастников,
	Макет,
	ТаблицаЗадолженности,
	ТекущийПартнер = Неопределено,
	ТекущийДоговор = Неопределено)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаПартнерВалюта");
	ОбластьМакетаШапка		 = Макет.ПолучитьОбласть("ШапкаТаблицыРасчеты");
	ОбластьМакетаНачОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетыНачОстаток");
	ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицыРасчеты");
	ОбластьМакетаКонОстаток  = Макет.ПолучитьОбласть("СтрокаТаблицыРасчетыКонОстаток");
	
	СтрокаЗадолженности = ТаблицаЗадолженности.Добавить();
	СтрокаЗадолженности.Валюта = ВыборкаДетальныхЗаписей.Валюта;
	Если ТаблицаЗадолженности.Колонки.Найти("Партнер") <> Неопределено Тогда
		СтрокаЗадолженности.Партнер = ?(ДанныеДокумента.РасшифровкаПоПартнерам,
										ПредставлениеПартнера(ТекущийПартнер),
										ПредставлениеПартнера(ДанныеДокумента.Партнер));
	КонецЕсли;
	Если ТаблицаЗадолженности.Колонки.Найти("Договор") <> Неопределено Тогда
		СтрокаЗадолженности.Договор = ?(ДанныеДокумента.РасшифровкаПоДоговорам,
										ПредставлениеДоговора(ТекущийДоговор),
										ПредставлениеДоговора(ДанныеДокумента.Договор));
	КонецЕсли;
	Если ДанныеДокумента.РасшифровкаПоПартнерам Тогда 
		ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, в валюте: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаЗадолженности.Партнер, ВыборкаДетальныхЗаписей.Валюта);
	ИначеЕсли ДанныеДокумента.РасшифровкаПоДоговорам Тогда 
		ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1, в валюте: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), СтрокаЗадолженности.Договор, ВыборкаДетальныхЗаписей.Валюта);
	Иначе
		ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='в валюте: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ВыборкаДетальныхЗаписей.Валюта);
	КонецЕсли;
	
	ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
	
	ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	
	ПредставленияДокументов = Документы.СверкаВзаиморасчетов2_5_11.ПредставленияДокументов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументов();
	
	ПредставлениеДокумента = "";
	ПредставлениеВладельцаДокумента = "";
	
	НачальныйОстаток = 0;
	КонечныйОстаток  = 0;
	
	ДетальныеЗаписи = ВыборкаДетальныхЗаписей.Выбрать();
	
	ПервыйПроход = Истина;
	Пока ДетальныеЗаписи.Следующий() Цикл
		
		Если ДетальныеЗаписи.Документ = Неопределено Тогда
			Если ДетальныеЗаписи.Период = ДанныеДокумента.НачалоПериода Тогда
				НачальныйОстаток = НачальныйОстаток + ДетальныеЗаписи.СуммаНачальныйОстаток;
			Иначе
				КонечныйОстаток = КонечныйОстаток + ДетальныеЗаписи.СуммаКонечныйОстаток;
			КонецЕсли;
		Иначе
			
			Если ПервыйПроход
				И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
				
				ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД");
				Если НачальныйОстаток > 0 Тогда
					ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
					ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
				Иначе
					ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
					ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
				КонецЕсли;				
				ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
				
			КонецЕсли;
			Документ = ДетальныеЗаписи.Документ; // ДокументСсылка
			ИмяДокумента = Документ.Метаданные().Имя;
			ПредставленияДокументов.Свойство(ИмяДокумента, ПредставлениеДокумента);
			ПредставленияВладельцевДокументов.Свойство(ИмяДокумента, ПредставлениеВладельцаДокумента);
			
			Если ЗначениеЗаполнено(ПредставлениеВладельцаДокумента) Тогда
				ПредставлениеВладельцаДокумента = ПредставлениеВладельцаДокумента + " " + ?(ДетальныеЗаписи.ЭтоВходящийДокумент,
					СтруктураПредставленийУчастников.КонтрагентНаименование,
					СтруктураПредставленийУчастников.ПредставлениеОрганизации);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДетальныеЗаписи.Номер) Тогда
				Если ИмяДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДетальныеЗаписи.Номер,, Истина);
				ИначеЕсли ДетальныеЗаписи.ЭтоВходящийДокумент Тогда
					НомерНаПечать = УбратьЛидирующиеНули(ДетальныеЗаписи.Номер);
				Иначе
					НомерНаПечать = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(ДетальныеЗаписи.Номер);
				КонецЕсли;
			Иначе
				НомерНаПечать = "_______";
			КонецЕсли;
			
			ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='%1 №%2 от %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
				?(ПредставлениеДокумента <> Неопределено, ПредставлениеДокумента, ""),
				НомерНаПечать,
				?(ЗначениеЗаполнено(ДетальныеЗаписи.ДатаВходящегоДокумента), Формат(ДетальныеЗаписи.ДатаВходящегоДокумента, "ДЛФ=D") + " " + НСтр("ru='г.'", ОбщегоНазначения.КодОсновногоЯзыка()), "  .  .    "));
			
			Если ЗначениеЗаполнено(ДетальныеЗаписи.ОрганизацияРеглУчет) Тогда
				
				СведенияОбОрганизации = ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ДетальныеЗаписи.ОрганизацияРеглУчет, ДанныеДокумента.Дата);
				ПредставлениеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, 
					"ПолноеНаименование");
				
				ОписаниеДокумента = НСтр("ru='Перенос задолженности'");
				ПредставлениеВладельцаДокумента = НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()) + " " + ПредставлениеОрганизации;
				
			КонецЕсли;
			
			ОбластьМакетаСтрока.Параметры.Дата = Формат(ДетальныеЗаписи.Дата, "ДЛФ=D");
			ОбластьМакетаСтрока.Параметры.Документ = ОписаниеДокумента;
			ОбластьМакетаСтрока.Параметры.ОтКого = ПредставлениеВладельцаДокумента;
			ОбластьМакетаСтрока.Параметры.СуммаДолгПартнера = ДетальныеЗаписи.СуммаДолгПартнера;
			ОбластьМакетаСтрока.Параметры.СуммаНашДолг = ДетальныеЗаписи.СуммаНашДолг;
			ОбластьМакетаСтрока.Параметры.ДокументСсылка = ДетальныеЗаписи.Документ;
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			ПервыйПроход = Ложь;
			
		КонецЕсли;
	
	КонецЦикла; 
	
	Если ПервыйПроход
		И ЗначениеЗаполнено(ДанныеДокумента.НачалоПериода) Тогда
		
		ОбластьМакетаНачОстаток.Параметры.НачалоПериодаСверки = Формат(ДанныеДокумента.НачалоПериода, "ДЛФ=ДД");
		Если НачальныйОстаток > 0 Тогда
			ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = 0;
			ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = НачальныйОстаток;
		Иначе
			ОбластьМакетаНачОстаток.Параметры.СуммаНашДолг = -НачальныйОстаток;
			ОбластьМакетаНачОстаток.Параметры.СуммаДолгПартнера = 0;
		КонецЕсли;				
		ТабличныйДокумент.Вывести(ОбластьМакетаНачОстаток);
		
	КонецЕсли;
	
	ОбластьМакетаКонОстаток.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
	Если КонечныйОстаток > 0 Тогда
		ОбластьМакетаКонОстаток.Параметры.СуммаНашДолг = 0;
		ОбластьМакетаКонОстаток.Параметры.СуммаДолгПартнера = КонечныйОстаток;
	Иначе
		ОбластьМакетаКонОстаток.Параметры.СуммаНашДолг = -КонечныйОстаток;
		ОбластьМакетаКонОстаток.Параметры.СуммаДолгПартнера = 0;
	КонецЕсли;				
	ТабличныйДокумент.Вывести(ОбластьМакетаКонОстаток);
	
	Если КонечныйОстаток <> 0 Тогда
		СтрокаЗадолженности.Сумма = КонечныйОстаток;
	Иначе
		ТаблицаЗадолженности.Удалить(СтрокаЗадолженности);
	КонецЕсли; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ВывестиТаблицуЗадолженности(
	ПараметрыТаблицыЗадолженностей,
	Партнер = Неопределено,
	ТаблицаРасхождений = Неопределено,
	ЭтоДанныеКонтрагента = Ложь)
	
	ДанныеДокумента                      = ПараметрыТаблицыЗадолженностей.ДанныеДокумента;
	ТаблицаОстатков                      = ПараметрыТаблицыЗадолженностей.ТаблицаОстатков;
	МассивВалют                          = ПараметрыТаблицыЗадолженностей.МассивВалют;
	СтруктураПредставленийУчастников     = ПараметрыТаблицыЗадолженностей.СтруктураПредставленийУчастников;
	Макет                                = ПараметрыТаблицыЗадолженностей.Макет;
	ВыводитьПодвал                       = ПараметрыТаблицыЗадолженностей.ВыводитьПодвал;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьМакетаГруппировка = Макет.ПолучитьОбласть("ГруппировкаПартнерВалюта");
	ОбластьМакетаШапка		 = Макет.ПолучитьОбласть("ШапкаТаблицыЗадолженность");
	ОбластьМакетаСтрока 	 = Макет.ПолучитьОбласть("СтрокаТаблицыЗадолженность");
	Если ВыводитьПодвал Тогда
		ОбластьМакетаПодвал  = Макет.ПолучитьОбласть("ПодвалТаблицыЗадолженность");
	КонецЕсли; 
	
	ПредставлениеПартнера = ПредставлениеПартнера(Партнер);
	
	Для Каждого ВалютаВзаиморасчетов Из МассивВалют Цикл
		
		СуммаДолгПартнера = 0;
		СуммаНашДолг = 0;
		
		СтруктураОтбора = Новый Структура("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		Если Партнер <> Неопределено Тогда
			СтруктураОтбора.Вставить("Партнер", Партнер);
		КонецЕсли; 
		МассивСтрокЗадолженности = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		Если МассивСтрокЗадолженности.Количество() > 0 Тогда
			Если Партнер <> Неопределено Тогда
				ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='%1, в валюте: %2'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеПартнера, ВалютаВзаиморасчетов);
			Иначе
				ОбластьМакетаГруппировка.Параметры.ПартнерВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='в валюте: %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ВалютаВзаиморасчетов);
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакетаГруппировка);
			ОбластьМакетаШапка.Параметры.Заполнить(СтруктураПредставленийУчастников);
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		КонецЕсли;
		
		Для Каждого СтрокаЗадолженности Из МассивСтрокЗадолженности Цикл
			
			ОбластьМакетаСтрока.Параметры.СуммаДолгПартнера = СтрокаЗадолженности.СуммаДолгПартнера;
			ОбластьМакетаСтрока.Параметры.СуммаНашДолг 		= СтрокаЗадолженности.СуммаНашДолг;
			Если ТаблицаОстатков.Колонки.Найти("РасчетныйДокумент") <> Неопределено Тогда
				ОбластьМакетаСтрока.Параметры.ДокументСсылка = СтрокаЗадолженности.РасчетныйДокумент;
			КонецЕсли; 
			Если НЕ ЭтоДанныеКонтрагента Тогда
				Если ТаблицаОстатков.Колонки.Найти("РасчетныйДокумент") <> Неопределено Тогда
					ОбластьМакетаСтрока.Параметры.Документ = УстаревшееОписаниеРасчетногоДокумента(СтрокаЗадолженности.РасчетныйДокумент,
						СтрокаЗадолженности.НомерРасчетногоДокумента,
						СтрокаЗадолженности.ДатаРасчетногоДокумента,
						СтруктураПредставленийУчастников,
						СтрокаЗадолженности.ЭтоВходящийНомер,
						(СтрокаЗадолженности.СуммаДолгПартнера > 0));
				КонецЕсли;
			Иначе
				ОбластьМакетаСтрока.Параметры.Документ = СтрокаЗадолженности.ОписаниеДокумента;
			КонецЕсли; 
			ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
			
			СуммаДолгПартнера = СуммаДолгПартнера + СтрокаЗадолженности.СуммаДолгПартнера;
			СуммаНашДолг	  = СуммаНашДолг 	  + СтрокаЗадолженности.СуммаНашДолг;
			
		КонецЦикла; 
		
		Если ВыводитьПодвал Тогда
			ОбластьМакетаПодвал.Параметры.СуммаДолгПартнера = СуммаДолгПартнера;
			ОбластьМакетаПодвал.Параметры.СуммаНашДолг = СуммаНашДолг;
			ОбластьМакетаПодвал.Параметры.КонецПериодаСверки = Формат(ДанныеДокумента.КонецПериода, "ДЛФ=ДД");
			ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		КонецЕсли; 
		
		Если ТаблицаРасхождений <> Неопределено Тогда
			СтрокаТаблицыРасхождений = ТаблицаРасхождений.Добавить();
			СтрокаТаблицыРасхождений.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			Если Партнер <> Неопределено Тогда
				СтрокаТаблицыРасхождений.Партнер = Партнер;
			КонецЕсли; 
			Если НЕ ЭтоДанныеКонтрагента Тогда
				СтрокаТаблицыРасхождений.СуммаДолгПартнера = СуммаДолгПартнера;
				СтрокаТаблицыРасхождений.СуммаНашДолг = СуммаНашДолг;
			Иначе
				СтрокаТаблицыРасхождений.СуммаДолгПартнера = -СуммаДолгПартнера;
				СтрокаТаблицыРасхождений.СуммаНашДолг = -СуммаНашДолг;
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПредставлениеПартнера(Партнер)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	Партнеры.НаименованиеПолное КАК НаименованиеПолное
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|");
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеПартнера = Выборка.НаименованиеПолное;
	Иначе
		ПредставлениеПартнера = "";
	КонецЕсли;
	
	Возврат ПредставлениеПартнера;
	
КонецФункции

Функция ТекстЗапросаОтборПоАналитике()

	Возврат "
	|ВЫБРАТЬ
	|	АналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборПоАналитике
	|ИЗ
	|	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	|ГДЕ
	|	АналитикаУчетаПоПартнерам.Организация = &Организация
	|	И АналитикаУчетаПоПартнерам.Контрагент = &Контрагент
	|	И (АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		ИЛИ &НеИспользоватьОтборПоПартнеру)
	|	И (АналитикаУчетаПоПартнерам.Договор = &Договор
	|		ИЛИ &НеИспользоватьОтборПоДоговору)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";

КонецФункции

// Описание
// 
// Параметры:
// 	ДокументСсылка - ДокументСсылка.СверкаВзаиморасчетов2_4 - 
// 	Номер - Строка -
// 	Дата - Дата - 
// 	СтруктураПредставленийУчастников - Структура - Описание:
// * КонтрагентНаименование - Строка -
// * ПредставлениеОрганизации - Строка -
// 	ЭтоВходящийНомер - Булево -
// 	ЭтоДолгПартнера - Булево, Неопределено - Описание
// Возвращаемое значение:
// 	СправочникСсылка.ДоговорыКонтрагентов, Строка - Описание
Функция УстаревшееОписаниеРасчетногоДокумента(
	ДокументСсылка,
	Номер, 
	Дата, 
	СтруктураПредставленийУчастников,
	ЭтоВходящийНомер,
	ЭтоДолгПартнера = Неопределено) Экспорт
	
	ПредставленияДокументов     	  = УстаревшиеПредставленияДокументов();
	ПредставленияВладельцевДокументов = ПредставленияВладельцевДокументов();
	МассивДокументовКонтрагента		  = ИменаМетаданныхВходящихДокументов();
	
	ПредставлениеДокумента = "";
	ПредставлениеВладельцаДокумента = "";
	
	Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		
		ОписаниеДокумента = ДокументСсылка;
		
	ИначеЕсли ДокументСсылка <> Неопределено И НЕ ДокументСсылка.Пустая() Тогда

		ПредставленияДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеДокумента);
		
		ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 №%2 от %3'", ОбщегоНазначения.КодОсновногоЯзыка()),
			?(ПредставлениеДокумента <> Неопределено, ПредставлениеДокумента, ""),
			?(ЗначениеЗаполнено(Номер), ?(ЭтоВходящийНомер, 
				УбратьЛидирующиеНули(Номер),
				ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Номер)), "_______"),
			?(ЗначениеЗаполнено(Дата), Формат(Дата, "ДЛФ=D") + " " + НСтр("ru='г.'", ОбщегоНазначения.КодОсновногоЯзыка()), "  .  .    "));
			
		ПредставленияВладельцевДокументов.Свойство(ДокументСсылка.Метаданные().Имя, ПредставлениеВладельцаДокумента);
		
		Если ЗначениеЗаполнено(ПредставлениеВладельцаДокумента) Тогда
			
			Если МассивДокументовКонтрагента.Найти(ДокументСсылка.Метаданные().Имя) <> Неопределено Тогда
				ВладелецДокумента = СтруктураПредставленийУчастников.КонтрагентНаименование;
			Иначе
				ВладелецДокумента = СтруктураПредставленийУчастников.ПредставлениеОрганизации;
			КонецЕсли;
			
			ОписаниеДокумента = ОписаниеДокумента + " (" + ПредставлениеВладельцаДокумента + " " + ВладелецДокумента + ")";
		КонецЕсли;
		
	Иначе
		
		ПредставлениеДебитора = "";
		Если ЭтоДолгПартнера <> Неопределено Тогда
			ПредставлениеДебитора = ?(ЭтоДолгПартнера,
				СтруктураПредставленийУчастников.ПредставлениеОрганизации,
				СтруктураПредставленийУчастников.КонтрагентНаименование);
		КонецЕсли;
		
		ОписаниеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Предоплата от %1'", ОбщегоНазначения.КодОсновногоЯзыка()), ПредставлениеДебитора);
		
	КонецЕсли;

	Возврат ОписаниеДокумента;

КонецФункции

Функция УстаревшиеПредставленияДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;
	
	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",                        НСтр("ru='Приходный кассовый ордер'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот",                   НСтр("ru='Акт выполненных работ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВводОстатков",                          НСтр("ru='Корректировка задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВзаимозачетЗадолженности",              НСтр("ru='Взаимозачет задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",      НСтр("ru='Накладная (возврат)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",               НСтр("ru='Накладная (возврат)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",              НСтр("ru='Накладная (возврат)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыКлиентом",           НСтр("ru='Выкуп возвратной тары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВыкупВозвратнойТарыУПоставщика",        НСтр("ru='Выкуп возвратной тары'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента",                          НСтр("ru='Заказ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику",                       НСтр("ru='Заказ'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",       НСтр("ru='Заказ (возврат)'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения",             НСтр("ru='Корректировка задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",               НСтр("ru='Корректировка задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРегистров",                НСтр("ru='Корректировка задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",              НСтр("ru='Эквайринговая операция'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                     НСтр("ru='Отчет комитенту'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",            НСтр("ru='Отчет комитенту'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                        НСтр("ru='Отчет комитенту'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",               НСтр("ru='Отчет комитенту'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",     НСтр("ru='Отчет комитенту'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",     НСтр("ru='Накладная'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='Платежное поручение'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",              НСтр("ru='Накладная'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",        НСтр("ru='Акт'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",                НСтр("ru='Приходный кассовый ордер'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",                НСтр("ru='Расходный кассовый ордер'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",                НСтр("ru='Накладная'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",          НСтр("ru='Акт'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств",    НСтр("ru='Платежное поручение'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("КорректировкаЗадолженности",            НСтр("ru='Списание задолженности'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту",                   НСтр("ru='Счет на оплату'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный",                   НСтр("ru='Счет-фактура'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный",                 НСтр("ru='Счет-фактура'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент",   НСтр("ru='Счет-фактура'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",            НСтр("ru='Таможенная декларация'", ОбщегоНазначения.КодОсновногоЯзыка()));

	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ПредставленияВладельцевДокументов()
	
	ВидыДокументовКонтрагента = Новый Структура;

	ВидыДокументовКонтрагента.Вставить("АвансовыйОтчет",                        НСтр("ru='получатель'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("АктВыполненныхРабот",                   НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровМеждуОрганизациями",      НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровОтКлиента",               НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ВозвратТоваровПоставщику",              НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ЗаказКлиента",                          НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ЗаказПоставщику",                       НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ЗаявкаНаВозвратТоваровОтКлиента",       НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("КорректировкаПриобретения",             НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("КорректировкаРеализации",               НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОперацияПоПлатежнойКарте",              НСтр("ru='плательщик'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионера",                     НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомиссионераОСписании",            НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитенту",                        НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетКомитентуОСписании",               НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ОтчетПоКомиссииМеждуОрганизациями",     НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПередачаТоваровМеждуОрганизациями",     НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПоступлениеБезналичныхДенежныхСредств", НСтр("ru='плательщик'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеТоваровУслуг",              НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПриобретениеУслугПрочихАктивов",        НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ПриходныйКассовыйОрдер",                НСтр("ru='получатель'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("РасходныйКассовыйОрдер",                НСтр("ru='плательщик'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("РеализацияТоваровУслуг",                НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("РеализацияУслугПрочихАктивов",          НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СписаниеБезналичныхДенежныхСредств",    НСтр("ru='плательщик'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетНаОплатуКлиенту",                   НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетФактураВыданный",                   НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученный",                 НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("СчетФактураПолученныйНалоговыйАгент",   НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));
	ВидыДокументовКонтрагента.Вставить("ТаможеннаяДекларацияИмпорт",            НСтр("ru='от'", ОбщегоНазначения.КодОсновногоЯзыка()));

	
	Возврат ВидыДокументовКонтрагента;
	
КонецФункции

Функция ИменаМетаданныхВходящихДокументов()
	
	МассивДокументовКонтрагента = Новый Массив;
	
	МассивДокументовКонтрагента.Добавить("АвансовыйОтчет");
	МассивДокументовКонтрагента.Добавить("ВозвратТоваровОтКлиента");
	МассивДокументовКонтрагента.Добавить("ЗаказКлиента");
	МассивДокументовКонтрагента.Добавить("ЗаявкаНаВозвратТоваровОтКлиента");
	МассивДокументовКонтрагента.Добавить("КорректировкаПриобретения");
	МассивДокументовКонтрагента.Добавить("ОтчетКомиссионера");
	МассивДокументовКонтрагента.Добавить("ОтчетКомиссионераОСписании");
	МассивДокументовКонтрагента.Добавить("ПоступлениеБезналичныхДенежныхСредств");
	МассивДокументовКонтрагента.Добавить("ПриобретениеТоваровУслуг");
	МассивДокументовКонтрагента.Добавить("ПриобретениеУслугПрочихАктивов");
	МассивДокументовКонтрагента.Добавить("СчетФактураПолученный");
	МассивДокументовКонтрагента.Добавить("СчетФактураПолученныйНалоговыйАгент");
	МассивДокументовКонтрагента.Добавить("ТаможеннаяДекларацияИмпорт");
	
	Возврат МассивДокументовКонтрагента; 
	
КонецФункции

Функция ПредставлениеДетализацииВзаиморасчетов(Партнер, Договор, РасшифровкаПоПартнерам, РасшифровкаПоДоговорам, РасшифровкаПоЗаказам) Экспорт
	
	ТекстДетализацииВзаиморасчетов = "";
	
	Если ЗначениеЗаполнено(Партнер) Тогда
		Если РасшифровкаПоЗаказам Тогда
			ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по объектам расчетов;'");
		КонецЕсли;
		ТекстДетализацииВзаиморасчетов = ТекстДетализацииВзаиморасчетов + " "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фильтр по партнеру: %1'"), Строка(Партнер));
	ИначеЕсли ЗначениеЗаполнено(Договор) Тогда
		Если РасшифровкаПоЗаказам Тогда
			ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по объектами расчетов;'");
		КонецЕсли;
		ТекстДетализацииВзаиморасчетов = ТекстДетализацииВзаиморасчетов + " "
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Фильтр по договору: %1'"), Строка(Договор));
	ИначеЕсли РасшифровкаПоПартнерам И РасшифровкаПоЗаказам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по партнерам и объектам расчетов'");
	ИначеЕсли РасшифровкаПоДоговорам И РасшифровкаПоЗаказам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по договорам и объектам расчетов'");
	ИначеЕсли РасшифровкаПоПартнерам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по партнерам'");
	ИначеЕсли РасшифровкаПоДоговорам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по договорам'");
	ИначеЕсли РасшифровкаПоЗаказам Тогда
		ТекстДетализацииВзаиморасчетов = НСтр("ru='Расшифровка по объектам расчетов'");
	Иначе
		ТекстДетализацииВзаиморасчетов = НСтр("ru='Без детализации'");
	КонецЕсли;
	
	Возврат ТекстДетализацииВзаиморасчетов;
	
КонецФункции

Функция ДетальныеРасчеты(ДанныеДокумента)
	
	ЗапросНашихДанных = Новый Запрос;

	ТекстЗапроса = ТекстЗапросаОтборПоАналитике() + "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента	КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	ИСТИНА									КАК ЭтоВходящийДокумент
	|
	|ПОМЕСТИТЬ ДокументыИнтеркампани
	|
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	ЛОЖЬ									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ОтчетПоКомиссииМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Комиссионер = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.НомерВходящегоДокумента КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата                    КАК Дата,
	|	ИСТИНА									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.ОрганизацияПолучатель = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка					КАК Документ,
	|	ДанныеДокумента.Номер 					КАК Номер,
	|	ДанныеДокумента.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	ДанныеДокумента.Дата 					КАК Дата,
	|	ЛОЖЬ									КАК ЭтоВходящийДокумент
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента                 
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И ДанныеДокумента.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСКлиентамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Номер = """"
	|				ТОГДА ДанныеПервичныхДокументов.НомерРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Номер
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ДанныеПервичныхДокументов.ДатаРегистратора
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Дата = ДАТАВРЕМЯ(1,1,1)
	|				ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Договор	 КАК Договор,
	|	РасчетыСКлиентамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|			ИЛИ РасчетыСКлиентамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход < 0 ТОГДА
	|		-РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход
	|	КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход > 0 ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход
	|	КОНЕЦ КАК СуммаДолгПартнера,
	|	ВЫБОР КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход < 0 ТОГДА
	|		-РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход
	|	КОГДА РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход > 0 ТОГДА
	|		РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход
	|	КОНЕЦ КАК СуммаНашДолг,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(РеализацияТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|
	|ПОМЕСТИТЬ РасчетыСПартнерами
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|	) КАК РасчетыСКлиентамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслугРеглУчет
	|		ПО РасчетыСКлиентамиОстаткиИОбороты.Регистратор = РеализацияТоваровУслугРеглУчет.Ссылка
	|		И РеализацияТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РегистрАналитикаУчетаПоПартнерам.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасчетыСКлиентамиОстаткиИОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Период КАК Период,
	|	ЕСТЬNULL(РасчетыСПоставщикамиОстаткиИОбороты.Регистратор, Неопределено) КАК Документ,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Номер = """"
	|				ТОГДА ДанныеПервичныхДокументов.НомерРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Номер
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Номер
	|	КОНЕЦ КАК Номер,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ДанныеПервичныхДокументов.ДатаРегистратора
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК Дата,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР
	|			КОГДА ДанныеПервичныхДокументов.Дата = ДАТАВРЕМЯ(1,1,1)
	|				ТОГДА ДанныеПервичныхДокументов.ДатаРегистратора
	|			ИНАЧЕ ДанныеПервичныхДокументов.Дата
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.Дата
	|	КОНЕЦ КАК ДатаВходящегоДокумента,
	|	РегистрАналитикаУчетаПоПартнерам.Партнер 	 КАК Партнер,
	|	РегистрАналитикаУчетаПоПартнерам.Договор	 КАК Договор,
	|	РасчетыСПоставщикамиОстаткиИОбороты.Валюта 	 КАК Валюта,
	|	ВЫБОР КОГДА ДокументыИнтеркампани.Документ ЕСТЬ NULL ТОГДА
	|		ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.Регистратор.НомерВходящегоДокумента ЕСТЬ NULL
	|			ИЛИ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.СписаниеБезналичныхДенежныхСредств ТОГДА
	|			ЛОЖЬ
	|		ИНАЧЕ
	|			ИСТИНА
	|		КОНЕЦ
	|	ИНАЧЕ
	|		ДокументыИнтеркампани.ЭтоВходящийДокумент
	|	КОНЕЦ КАК ЭтоВходящийДокумент,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход < 0 ТОГДА
	|		-(РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход)
	|	КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход> 0 ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход
	|	КОНЕЦ КАК СуммаДолгПартнера,
	|	ВЫБОР КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход< 0 ТОГДА
	|		-(РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход)
	|	КОГДА РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход > 0 ТОГДА
	|		РасчетыСПоставщикамиОстаткиИОбороты.СуммаРасход - РасчетыСПоставщикамиОстаткиИОбороты.СуммаПриход
	|	КОНЕЦ КАК СуммаНашДолг,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСПоставщикамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток,
	|	ЕСТЬNULL(ПриобретениеТоваровУслугРеглУчет.Организация, Неопределено) КАК ОрганизацияРеглУчет
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщиками.ОстаткиИОбороты(
	|			&НачалоПериодаСверки,
	|			&ГраницаКонецПериода,
	|			Регистратор,
	|			ДвиженияИГраницыПериода,
	|			АналитикаУчетаПоПартнерам В
	|				(ВЫБРАТЬ
	|					ОтборПоАналитике.КлючАналитики
	|				ИЗ
	|					ОтборПоАналитике)
	|	) КАК РасчетыСПоставщикамиОстаткиИОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.АналитикаУчетаПоПартнерам = РегистрАналитикаУчетаПоПартнерам.КлючАналитики
	|	ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИнтеркампани КАК ДокументыИнтеркампани
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДокументыИнтеркампани.Документ
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслугРеглУчет
	|		ПО РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ПриобретениеТоваровУслугРеглУчет.Ссылка
	|		И ПриобретениеТоваровУслугРеглУчет.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет)
	|		И &Организация = ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РегистрАналитикаУчетаПоПартнерам.Организация = ДанныеПервичныхДокументов.Организация
	|			И РасчетыСПоставщикамиОстаткиИОбороты.Регистратор = ДанныеПервичныхДокументов.Документ
	|
	|ГДЕ
	|	РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ЕСТЬ NULL
	|	ИЛИ НЕ РасчетыСПоставщикамиОстаткиИОбороты.Регистратор ССЫЛКА Документ.АвансовыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата				КАК Период,
	|	ДанныеДокумента.Ссылка				КАК Документ,
	|	Расшифровка.НомерВходящегоДокумента	КАК Номер,
	|	Расшифровка.ДатаВходящегоДокумента	КАК Дата,
	|	Расшифровка.ДатаВходящегоДокумента	КАК ДатаВходящегоДокумента,
	|	Расшифровка.Поставщик				КАК Партнер,
	|	Расшифровка.ОбъектРасчетов.Договор	КАК Договор,
	|	Расшифровка.ВалютаВзаиморасчетов	КАК Валюта,
	|	ИСТИНА								КАК ЭтоВходящийДокумент,
	|	Расшифровка.СуммаВзаиморасчетов		КАК СуммаДолгПартнера,
	|	0									КАК СуммаНашДолг,
	|	0									КАК СуммаНачальныйОстаток,
	|	0									КАК СуммаКонечныйОстаток,
	|	Неопределено						КАК ОрганизацияРеглУчет
	|ИЗ
	|	Документ.АвансовыйОтчет КАК ДанныеДокумента
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АвансовыйОтчет.ОплатаПоставщикам КАК Расшифровка
	|		ПО Расшифровка.Ссылка = ДанныеДокумента.Ссылка
	|ГДЕ
	|	ДанныеДокумента.Проведен
	|	И ДанныеДокумента.Организация = &Организация
	|	И Расшифровка.Контрагент = &Контрагент
	|	И ДанныеДокумента.Дата МЕЖДУ &НачалоПериодаСверки И &КонецПериодаСверки
	|	И (&НеИспользоватьОтборПоДоговору
	|		ИЛИ Расшифровка.ОбъектРасчетов.Договор = &Договор)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период				 		КАК Период,
	|	РасчетыСПартнерами.Документ				 		КАК Документ,
	|	РасчетыСПартнерами.Номер				 		КАК Номер,
	|	РасчетыСПартнерами.Дата					 		КАК Дата,
	|	РасчетыСПартнерами.ДатаВходящегоДокумента       КАК ДатаВходящегоДокумента,
	|	&ПолеПартнер,
	|	&ПолеДоговор,
	|	РасчетыСПартнерами.Валюта				 		КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент	 		КАК ЭтоВходящийДокумент,
	|	СУММА(РасчетыСПартнерами.СуммаДолгПартнера)	 	КАК СуммаДолгПартнера,
	|	СУММА(РасчетыСПартнерами.СуммаНашДолг)			КАК СуммаНашДолг,
	|	СУММА(РасчетыСПартнерами.СуммаНачальныйОстаток) КАК СуммаНачальныйОстаток,
	|	СУММА(РасчетыСПартнерами.СуммаКонечныйОстаток)	КАК СуммаКонечныйОстаток,
	|	РасчетыСПартнерами.ОрганизацияРеглУчет			КАК ОрганизацияРеглУчет
	|ПОМЕСТИТЬ РасчетыСПартнерамиГруппировка
	|ИЗ
	|	РасчетыСПартнерами КАК РасчетыСПартнерами
	|
	|СГРУППИРОВАТЬ ПО
	|	Период, Документ, Номер, Дата, ДатаВходящегоДокумента, &Партнер, &Договор, Валюта, ЭтоВходящийДокумент, ОрганизацияРеглУчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСПартнерами.Период                 КАК Период,
	|	РасчетыСПартнерами.Документ               КАК Документ,
	|	РасчетыСПартнерами.Номер                  КАК Номер,
	|	РасчетыСПартнерами.Дата                   КАК Дата,
	|	РасчетыСПартнерами.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	&ПолеПартнер,
	|	&ПолеДоговор,
	|	РасчетыСПартнерами.Валюта                 КАК Валюта,
	|	РасчетыСПартнерами.ЭтоВходящийДокумент    КАК ЭтоВходящийДокумент,
	|	ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0) > ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0)
	|		ТОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0) - ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0)
	|		ИНАЧЕ 0
	|	КОНЕЦ                                     КАК СуммаДолгПартнера,
	|	ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0) > ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0)
	|		ТОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0) - ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0)
	|		ИНАЧЕ 0
	|	КОНЕЦ                                     КАК СуммаНашДолг,
	|	РасчетыСПартнерами.СуммаНачальныйОстаток  КАК СуммаНачальныйОстаток,
	|	РасчетыСПартнерами.СуммаКонечныйОстаток   КАК СуммаКонечныйОстаток,
	|	РасчетыСПартнерами.ОрганизацияРеглУчет    КАК ОрганизацияРеглУчет
	|ИЗ
	|	РасчетыСПартнерамиГруппировка КАК РасчетыСПартнерами
	|ГДЕ
	|	ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0) > ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0)
	|		ТОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0) - ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0)
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0 
	|	ИЛИ ВЫБОР КОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0) > ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0)
	|		ТОГДА ЕСТЬNULL(РасчетыСПартнерами.СуммаНашДолг,0) - ЕСТЬNULL(РасчетыСПартнерами.СуммаДолгПартнера,0)
	|		ИНАЧЕ 0
	|	КОНЕЦ <> 0
	|	ИЛИ РасчетыСПартнерами.СуммаНачальныйОстаток <> 0 ИЛИ РасчетыСПартнерами.СуммаКонечныйОстаток <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период, Документ
	|
	|ИТОГИ ПО
	|	&Партнер,
	|	&Договор,
	|	Валюта
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеПартнер,", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "РасчетыСПартнерами.Партнер КАК Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Партнер,", ?(ДанныеДокумента.РасшифровкаПоПартнерам, "Партнер,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеДоговор,", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "РасчетыСПартнерами.Договор КАК Договор,", ""));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Договор,", ?(ДанныеДокумента.РасшифровкаПоДоговорам, "Договор,", ""));
	ЗапросНашихДанных.Текст = ТекстЗапроса;
	
	ЗапросНашихДанных.УстановитьПараметр("НачалоПериодаСверки", ДанныеДокумента.НачалоПериода);
	ЗапросНашихДанных.УстановитьПараметр("КонецПериодаСверки",	КонецДня(ДанныеДокумента.КонецПериода));
	ЗапросНашихДанных.УстановитьПараметр("ГраницаКонецПериода", Новый Граница(
																   КонецДня(ДанныеДокумента.КонецПериода)+1,
																   ВидГраницы.Исключая));
	ЗапросНашихДанных.УстановитьПараметр("Организация",		    ДанныеДокумента.Организация);
	ЗапросНашихДанных.УстановитьПараметр("Контрагент",		    ДанныеДокумента.Контрагент);
	ЗапросНашихДанных.УстановитьПараметр("Партнер",		  	    ДанныеДокумента.Партнер);
	ЗапросНашихДанных.УстановитьПараметр("Договор",		  	    ДанныеДокумента.Договор);
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоПартнеру", НЕ ЗначениеЗаполнено(ДанныеДокумента.Партнер));
	ЗапросНашихДанных.УстановитьПараметр("НеИспользоватьОтборПоДоговору", НЕ ЗначениеЗаполнено(ДанныеДокумента.Договор));
	
	РезультатЗапросаНашихДанных = ЗапросНашихДанных.Выполнить();
	
	Если НЕ РезультатЗапросаНашихДанных.Пустой() Тогда
		ВыборкаНашихДанных = РезультатЗапросаНашихДанных.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Иначе
		ВыборкаНашихДанных = Неопределено;
	КонецЕсли;

	Возврат ВыборкаНашихДанных;
	
КонецФункции

Функция ПредставлениеДоговора(Договор)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ 
	|	ДоговорыКонтрагентов.НаименованиеДляПечати КАК НаименованиеДляПечати
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка = &Договор
	|");
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПредставлениеДоговора = Выборка.НаименованиеДляПечати;
	Иначе
		ПредставлениеДоговора = "";
	КонецЕсли;
	
	Возврат ПредставлениеДоговора;
	
КонецФункции

#КонецОбласти
//-- Локализация

#КонецОбласти

#КонецОбласти

#КонецЕсли
