#Область ОписаниеПеременных

&НаКлиенте
Перем КэшированныеЗначения; // используется механизмом обработки изменения реквизитов ТЧ

// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Перем ПроверкаКонтрагентовПараметрыОбработчикаОжидания Экспорт;

&НаКлиенте
Перем ФормаДлительнойОперации Экспорт;
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

&НаКлиенте
Перем ПараметрыДляЗаписи Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);

	ИспользоватьПартнеровКакКонтрагентов      = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	// Обработчик механизма "Назначения"
	Справочники.Назначения.ФормаДокументаПриСозданииНаСервере(ЭтаФорма);
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);

	ПараметрыВыбораРеквизитов = ЭтапыОплатыСервер.ПараметрыВыбораРеквизитовОплаты(Метаданные.Документы.ОтчетКомитентуОЗакупках);
	
	ИсправлениеДокументов.ПриСозданииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	ДоговорСтарый = Объект.Договор;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		РассчитыватьВознаграждение = Истина;
		ЗаполнитьСчетаФактурыПолученныеСервер();
		
		ПриЧтенииСозданииНаСервере();
		
		Если Параметры.Свойство("Основание")
		 И ТипЗнч(Параметры.Основание) = Тип("Структура")
		 И Параметры.Основание.Свойство("ЗаполнятьПоТоварамКОформлению") Тогда
			ЗаполнятьПоТоварамКОформлению = Параметры.Основание.ЗаполнятьПоТоварамКОформлению;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КлиентскоеПриложение.ТекущийВариантИнтерфейса() = ВариантИнтерфейсаКлиентскогоПриложения.Версия8_2 Тогда
		Элементы.ГруппаИтого.ЦветФона = Новый Цвет();
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьВидимостьКоличестваРНПТ(ЭтаФорма,
		Объект.Дата, "ТоварыГруппаКоличествоПоРНПТ");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ИнтеграцияС1СДокументооборотом
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании= ОбменСКонтрагентами.ПараметрыПриСозданииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	
	ОбменСКонтрагентами.ПриСозданииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Элементы.ДекорацияСостояниеЭДО.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	ДополнительныеПараметры.Вставить("ОтложеннаяИнициализация", Истина);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
	ПроверкаКонтрагентовВызовСервераПереопределяемыйУТ.ФормаДокументаПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	СпособРасчетаВознаграждения = Объект.СпособРасчетаВознаграждения;
	ПроцентВознаграждения = Объект.ПроцентВознаграждения;
	СуммаВознаграждения = Объект.СуммаВознаграждения;

	ВзаиморасчетыСервер.ФормаПриСозданииНаСервере(ЭтаФорма);

	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	УстановитьПредставлениеДокументаОснования();
	УчетПрослеживаемыхТоваровЛокализация.УстановитьЗаголовокНомерГТД(Элементы, "ТоварыНомерГТД");

	УчетНДСУП.УстановитьВидимостьКомандыЗаполнитьСтавкуНДС(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка)
	 И ЗаполнятьПоТоварамКОформлению Тогда
		КомиссионнаяТорговляКлиент.ПроверитьЗаполнениеДокументаПоОстаткам(Объект);	
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)

	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.ПодборПоТоварамУслугамКОформлениюОтчетаКомитентуОЗакупках" Тогда
		
		ПолучитьТоварыИзХранилища(ВыбранноеЗначение);
		
	ИначеЕсли УчетНДСУПКлиент.ЗаконченоРедактированиеСчетаФактурыВыданного(ВыбранноеЗначение, ИсточникВыбора) Тогда
	
		ОбновитьТекстСчетаФактурыВыданные();
		
	ИначеЕсли УчетНДСУПКлиент.ЗаконченоОформлениеСчетовФактурВыданных(ВыбранноеЗначение, ИсточникВыбора) Тогда
		
		ЗаполнитьПоРезультатамЗакупкиСервер();
		
	ИначеЕсли ЗакупкиКлиент.ЭтоПодборНомераГТД(ИсточникВыбора) Тогда
		
		ОбработатьПодборНомераГТД(ВыбранноеЗначение);
		
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Справочник.ВидыЗапасов.Форма.ФормаВводаВидовЗапасов" Тогда
		
		ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Если Окно <> Неопределено Тогда
		Окно.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Подсистема "Свойства"
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		
		УстановитьДоступностьСоглашений();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_СчетФактураВыданный"
		И ((Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор)
			Или Параметр.Свойство("СписокОснований") И Параметр.СписокОснований.НайтиПоЗначению(Объект.Ссылка) <> Неопределено) Тогда
		ПараметрыОбработчиков = Новый Структура;
		ПараметрыОбработчиков.Вставить("ОбновитьТекстСчетаФактурыВыданные");
		ПараметрыОбработчиков.Вставить("ЗаполнитьСчетаФактурыПеревыставленныеСервер");
		ПараметрыОбработчиков.Вставить("ОбновитьТекстСчетаФактурыПеревыставленные");
		ВыполнитьВызовСерверныхОбработчиков(ПараметрыОбработчиков);
	КонецЕсли;
	
	Если ИмяСобытия = "ПеревыставленСчетФактураПоставщика"
		И (Параметр.Свойство("ФормаВладелец") И Параметр.ФормаВладелец = УникальныйИдентификатор) Тогда
		ПараметрыОбработчиков = Новый Структура;
		ПараметрыОбработчиков.Вставить("ЗаполнитьСчетаФактурыПеревыставленныеСервер");
		ПараметрыОбработчиков.Вставить("ОбновитьТекстСчетаФактурыПеревыставленные");
		ВыполнитьВызовСерверныхОбработчиков(ПараметрыОбработчиков);
	КонецЕсли;
	
	Если ВзаиморасчетыКлиент.НуженВызовОбработкиОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
			
		СтруктураЗачтенаОплатаСервер = НоваяСтруктураЗачтенаОплатаСервер();
		СтруктураЗачтенаОплатаСервер.ИмяСобытия = ИмяСобытия;
		СтруктураЗачтенаОплатаСервер.Параметр 	= Параметр;
		СтруктураЗачтенаОплатаСервер.Источник 	= Источник;
		
		ПараметрыОбработчиков = Новый Структура;
		ПараметрыОбработчиков.Вставить("ЗачтенаОплатаСервер", СтруктураЗачтенаОплатаСервер);
		ВыполнитьВызовСерверныхОбработчиков(ПараметрыОбработчиков);
		Если НЕ Объект.ПорядокРасчетов = ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов") Тогда
			Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "ВыборДокументовПриобретенияДляОтчетаКомитенту" Тогда
		
		Если Объект.ДокументПриобретения <> Параметр Тогда
			
			Если Объект.Товары.Количество() > 0 Тогда
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ПриВыбореДокументаПриобретенияЗавершение", ЭтотОбъект, Параметр);
				
				ПоказатьВопрос(
						ОписаниеОповещения,
						НСтр("ru = 'Перезаполнить таблицу товаров по документу приобретения?'"),
						РежимДиалогаВопрос.ДаНет);
						
			Иначе
				Объект.ДокументПриобретения = Параметр;
				УстановитьПредставлениеДокументаОснования();
				ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
				ПараметрыПроверки.ТабличнаяЧасть = Объект.Товары;
				ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация", НСтр("ru = 'Организация'"));
				ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Партнер",     НСтр("ru = 'Комитент'"));
				ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Валюта",      НСтр("ru = 'Валюта'"));
				Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамЗакупкиЗавершение", ЭтотОбъект);
				РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
			КонецЕсли;
				
		КонецЕсли;
			
	КонецЕсли;

	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ИсправлениеДокументовКлиент.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	
	СобытияФормКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ИмяСобытия = "ПриИзмененииДоговора"
		И Источник = ЭтотОбъект Тогда
		ДоговорПриИзменении(Элементы[Параметр]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ЗакупкиКлиент.ЭтоУказаниеНомераГТД(Источник) Тогда
		Действия = Новый Структура;
		
		УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			Действия,
			"ДокументПриобретения",
			Истина);
		
		ЗакупкиКлиент.ОбработатьУказаниеНомераГТД(ЭтотОбъект, НовыйОбъект, , , Действия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// Обработчик механизма "ДатыЗапретаИзменения"
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	ИсправлениеДокументов.ПриЧтенииНаСервере(ЭтаФорма, Элементы.СтрокаИсправление);
	
	ПриЧтенииСозданииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	
	СобытияФорм.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыЭДОПриСоздании = ОбменСКонтрагентами.ПараметрыПриЧтенииНаСервере_ФормаДокумента();
	ПараметрыЭДОПриСоздании.Форма = ЭтотОбъект;
	ПараметрыЭДОПриСоздании.ДокументСсылка = Объект.Ссылка;
	ПараметрыЭДОПриСоздании.МестоРазмещенияКоманд = Элементы.ПодменюЭДО;
	ПараметрыЭДОПриСоздании.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыЭДОПриСоздании.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;
	ОбменСКонтрагентами.ПриЧтенииНаСервере_ФормаДокумента(ПараметрыЭДОПриСоздании);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	ВзаиморасчетыСервер.ФормаПриЧтенииНаСервере(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
	Если ОтчетПоПриобретению
		И Не ЗначениеЗаполнено(Объект.ДокументПриобретения) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указан документ приобретения. Необходимо указать документ или отказаться от разбиения.'");
		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,
		Объект.Ссылка,
		"ДокументПриобретения",
		"Объект",
		Отказ);
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СобытияФормКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
	Если НеВыполнятьПроверкуПередЗаписью Тогда
		НеВыполнятьПроверкуПередЗаписью = Ложь;
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	Если РассчитыватьВознаграждение Тогда
		Отказ = Истина;
		КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
			Новый ОписаниеОповещения("ПередЗаписьюПродолжениеНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ЭтаФорма);
	Иначе
		ПередЗаписьюНаКлиентеСервер(Ложь);	
	КонецЕсли;

	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ПараметрыЗаписи, Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Если РассчитыватьВознаграждение Тогда
		КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
			Новый ОписаниеОповещения("ПередЗаписьюПродолжениеНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры),
			ЭтаФорма);
	Иначе
		ПередЗаписьюПродолжениеНеобходимоРассчитатьВознаграждениеЗавершение(Ложь, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПродолжениеНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	НеобходимоРассчитатьВознаграждение = НеобходимоРассчитатьВознаграждение = Истина;
	
	ПередЗаписьюНаКлиентеСервер(НеобходимоРассчитатьВознаграждение);
	
	Если НеобходимоРассчитатьВознаграждение Тогда
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиент.ЗаписатьОбъектПриНеобходимости(ЭтотОбъект, ДополнительныеПараметры.ПараметрыЗаписи,,Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаКлиентеСервер(НеобходимоРассчитатьВознаграждение)
	
	Если НеобходимоРассчитатьВознаграждение Тогда
		РассчитатьКомиссионноеВознаграждениеСервер();
	КонецЕсли;
	
	ВзаиморасчетыВызовСервера.ФормаПередЗаписьюНаКлиентеСервер(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	ЗаполнитьДанныеПоДокументуПриобретенияСервер();
	
	ЗаполнитьСчетаФактурыПеревыставленныеСервер();
	
	ОбновитьТекстСчетаФактурыВыданные();
	ОбновитьТекстСчетаФактурыПеревыставленные();
	ОбновитьИнформациюПоЗаказам();
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул",	Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакТипНоменклатуры",	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",	Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураХарактеристикиНоменклатуры);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыПослеЗаписи = ОбменСКонтрагентами.ПараметрыПослеЗаписиНаСервере();
	ПараметрыПослеЗаписи.Форма = ЭтотОбъект;
	ПараметрыПослеЗаписи.ДокументСсылка = Объект.Ссылка;
	ПараметрыПослеЗаписи.КонтроллерСостояниеЭДО = Элементы.ДекорацияСостояниеЭДО;
	ПараметрыПослеЗаписи.ГруппаСостояниеЭДО = Элементы.ГруппаСостояниеЭДО;

	ОбменСКонтрагентами.ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, ПараметрыПослеЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	
	ВзаиморасчетыСервер.ФормаПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект.ДополнительныеСвойства);
	
	СобытияФорм.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ОтчетКомитентуОЗакупках", ПараметрыЗаписи, Объект.Ссылка);
	ВзаиморасчетыКлиент.ФормаПослеЗаписи(ЭтаФорма);
	
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.Вставить("ФормаВладелец", УникальныйИдентификатор);
		Оповестить("ПеревыставленСчетФактураПоставщика", ПараметрыЗаписи, Объект.Ссылка);
	КонецЕсли;
	
	МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтаФорма, ПараметрыЗаписи);
	
	ОбщегоНазначенияУТКлиент.ВыполнитьДействияПослеЗаписи(ЭтаФорма, Объект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПослеЗаписи_ФормаДокумента(ЭтаФорма, ПараметрыЗаписи);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Обработчик механизма "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ВзаиморасчетыСервер.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	// ИнтеграцияС1СДокументооборотом
	ИнтеграцияС1СДокументооборотБазоваяФункциональность.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтеграцияС1СДокументооборотом
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПринудительноЗакрытьФорму = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	// СтандартныеПодсистемы.Свойства
	Если ТекущаяСтраница.Имя = "СтраницаДополнительно"
		И Не ЭтотОбъект.ПараметрыСвойств.ВыполненаОтложеннаяИнициализация Тогда
		
		СвойстваВыполнитьОтложеннуюИнициализацию();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТекущаяСтраница.Имя = "СтраницаОсновное" Тогда
		ВзаиморасчетыКлиент.ОбновитьТекстГиперссылкиЭтапыОплаты(ЭтаФорма);
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект);
	ЦеныПредприятияЗаполнениеКлиент.ЗадатьВопросПересчетаЦеныПриИзмененииДаты(Объект, Оповещение);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Объект.Дата);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		КомиссионнаяТорговляКлиент.ПроверитьНеобходимостьПересчетаВВалютуОтчетыПоКомиссии(
			Новый ОписаниеОповещения("ВалютаПриИзмененииВопросПересчитатьВалютуЗавершение", ЭтотОбъект),
			Объект,
			ВалютаДокумента,
			"СуммаСНДС");

	Иначе
		
		ВалютаДокумента = Объект.Валюта;
		
		ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзмененииВопросПересчитатьВалютуЗавершение(ПересчитатьВалюту, ДополнительныеПараметры) Экспорт
	
	ВалютаПриИзмененииСервер(
		Объект.Валюта,
		ПересчитатьВалюту);
		
	ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
	
	ВалютаДокумента = Объект.Валюта;
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Валюта");
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		ПартнерПриИзмененииСервер();
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	Если Объект.КонтактноеЛицо.Пустая() Тогда
		Возврат;
	ИначеЕсли Не Объект.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ПартнерИзменился = Ложь;
	КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился);
	
	Если Не ПартнерИзменился Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВопросПользователюПередЗаполнениемЦенПоСоглашению(
			Новый ОписаниеОповещения("КонтактноеЛицоПриИзмененииПриИзмененииВопросЗаполнитьЦеныЗавершение", ЭтотОбъект));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзмененииПриИзмененииВопросЗаполнитьЦеныЗавершение(ЗаполнитьЦены, ДополнительныеПараметры) Экспорт
	
	Если Объект.Товары.Итог("Цена") <> 0 И ЗаполнитьЦены Тогда
		ЗаполнитьЦеныПоСоглашениюСервер();
	КонецЕсли;
	
	ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияУсловийЗакупокПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ЗапуститьПроверкуКонтрагентовВДокументе(ЭтотОбъект, Элемент);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПараметрыРегистрацииСчетовФактурВыданныхСервер(Знач Объект)
	
	Возврат Документы.ОтчетКомитентуОЗакупках.ПараметрыРегистрацииСчетовФактурВыданных(Объект);
	
КонецФункции	

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер();
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)

	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;
	
	
	СоглашениеПриИзмененииСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();
	
КонецПроцедуры

&НаСервере
Процедура СоглашениеПриИзмененииСервер()

	ДокументПродажи = РеквизитФормыВЗначение("Объект");
	ДокументПродажи.ЗаполнитьУсловияПродажПоСоглашению();
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ДокументПродажи);
	ЗначениеВРеквизитФормы(ДокументПродажи, "Объект");
	
	ВалютаДокумента = Объект.Валюта;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить("Договор");
	МассивРеквизитов.Добавить("Соглашение");
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, МассивРеквизитов);
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСоглашения = ПродажиКлиент.ПараметрыНачалаВыбораСоглашенияСКлиентом();
	
	ПараметрыВыбораСоглашения.Элемент                     = Элемент;
	ПараметрыВыбораСоглашения.Партнер                     = Объект.Партнер;
	ПараметрыВыбораСоглашения.Документ                    = Объект.Соглашение;
	ПараметрыВыбораСоглашения.ДатаДокумента               = Объект.Дата;
	ПараметрыВыбораСоглашения.ДанныеФормыСтруктура        = Объект;
	ПараметрыВыбораСоглашения.ХозяйственнаяОперация       = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала");
	
	ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(ПараметрыВыбораСоглашения, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорСоздание(Элемент, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ОткрытьФормуСозданияДоговора(ЭтотОбъект, Элемент, "Объект.Договор", Объект.Партнер, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзменении(Элемент)
	
	Если Не Объект.СпособРасчетаВознаграждения = СпособРасчетаВознаграждения Тогда
		ДополнительныеПараметры = Новый Структура("ВосстановитьРеквизиты", Ложь);
		Оповещение = Новый ОписаниеОповещения(
			"СпособРасчетаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(Оповещение, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение = Истина Тогда
		СпособРасчетаВознаграждения = Объект.СпособРасчетаВознаграждения;
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
	ИначеЕсли ДополнительныеПараметры.ВосстановитьРеквизиты Тогда
		Объект.СпособРасчетаВознаграждения = СпособРасчетаВознаграждения;
	КонецЕсли;
	
	СпособРасчетаВознагражденияПриИзмененииСервер();
	
	Если Объект.СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Объект.ПроцентВознаграждения = 0;
		Объект.СуммаВознаграждения = 0;
		ПроцентВознаграждения = 0;
		СуммаВознаграждения = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРасчетаВознагражденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СпособРасчетаВознаграждения = Объект.СпособРасчетаВознаграждения;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВознагражденияПриИзменении(Элемент)

	Если Не Объект.СуммаВознаграждения = СуммаВознаграждения Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВосстановитьРеквизиты", Ложь);
		ДополнительныеПараметры.Вставить("ОчиститьКомиссионноеВознаграждение", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроцентСуммаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВознагражденияПриИзменении(Элемент)
	
	Если Не Объект.ПроцентВознаграждения = ПроцентВознаграждения Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ВосстановитьРеквизиты", Ложь);
		ДополнительныеПараметры.Вставить("ОчиститьКомиссионноеВознаграждение", Ложь);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПроцентСуммаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(ОписаниеОповещения, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентСуммаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение = Истина Тогда
		
		РассчитатьКомиссионноеВознаграждениеСервер();

		СпособРасчетаДляОповещения = ?(
			ДополнительныеПараметры.ОчиститьКомиссионноеВознаграждение,
			ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается"),
			Объект.СпособРасчетаВознаграждения);
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(СпособРасчетаДляОповещения);

		ПроцентВознаграждения = Объект.ПроцентВознаграждения;
		СуммаВознаграждения = Объект.СуммаВознаграждения;

	ИначеЕсли ДополнительныеПараметры.ВосстановитьРеквизиты Тогда

		Объект.ПроцентВознаграждения = ПроцентВознаграждения;
		Объект.СуммаВознаграждения = СуммаВознаграждения;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	УслугаПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	СтавкаВознаграждения = Объект.СтавкаНДСВознаграждения;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)
	
	Если Не Объект.СтавкаНДСВознаграждения = СтавкаВознаграждения Тогда
		ДополнительныеПараметры = Новый Структура("ВосстановитьРеквизиты", Ложь);
		Оповещение = Новый ОписаниеОповещения(
			"СтавкаРасчетаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(Оповещение, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МенеджерПриИзменении(Элемент)
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Менеджер");
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеДеятельностиПриИзменении(Элемент)
	
	НаправлениеДеятельностиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЗаголовокЗаказыКлиентовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму(
		"ОбщаяФорма.ПросмотрСпискаДокументов",
		Новый Структура("СписокДокументов, Заголовок",
			СписокЗаказов,
			НСтр("ru='Заказы клиентов (%КоличествоДокументов%)'")
		),
		ЭтаФорма,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура СтрокаИсправлениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИсправлениеДокументовКлиент.СтрокаИсправлениеОбработкаНавигационныйСсылки(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказуПриИзменении(Элемент)
	
	ВопросПоУдалениюТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказамПриИзменении(Элемент)
	
	ВопросПоУдалениюТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПоУдалениюТоваров()
	
	Если Не ОтчетПоЗаказу Тогда
		Если Объект.Товары.Количество() > 0 Тогда
			ТекстВопроса = НСтр("ru='Список товаров будет очищен. Продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОтчетПоЗаказамПриИзмененииЗавершение",
				ЭтотОбъект, ), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоЗаказамПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ЗаказКлиента = Неопределено;
		Объект.Товары.Очистить();
		ОбновитьИнформациюПоЗаказам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоПриобретениюПриИзменении(Элемент)
	
	Если Не ОтчетПоПриобретению Тогда
		Объект.ДокументПриобретения = Неопределено;
	КонецЕсли;
	
	УстановитьПредставлениеДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПриобретенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		
		ПоказатьЗначение(Неопределено, Объект.ДокументПриобретения);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВыбратьДокумент" Тогда
		ИмяФормыВыбора = "Документ.ОтчетКомитентуОЗакупках.Форма.ФормаПодбораДокументаПриобретения";
		ПараметрыОтбора = Новый Структура();
		ПараметрыОтбора.Вставить("Договор", Объект.Договор);
		ПараметрыОтбора.Вставить("Соглашение", Объект.Соглашение);
		ПараметрыОтбора.Вставить("Партнер", Объект.Партнер);
		Если ОтчетПоЗаказу Тогда
			ПараметрыОтбора.Вставить("Заказ", Объект.ЗаказКлиента);
		КонецЕсли;
		ОткрытьФорму(ИмяФормыВыбора, ПараметрыОтбора, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореДокументаПриобретенияЗавершение(Ответ, ВыбранныйДокументПриобретения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.ДокументПриобретения = ВыбранныйДокументПриобретения;
		УстановитьПредставлениеДокументаОснования();
		Объект.Товары.Очистить();
		ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
		ПараметрыПроверки.ТабличнаяЧасть = Объект.Товары;
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация", НСтр("ru = 'Организация'"));
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Партнер",     НСтр("ru = 'Комитент'"));
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Валюта",      НСтр("ru = 'Валюта'"));
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамЗакупкиЗавершение", ЭтотОбъект);
		РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЭДОНажатие(Элемент, СтандартнаяОбработка)
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаДокумента(ЭтотОбъект, СтандартнаяОбработка);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Значение = Неопределено;
	
	Если Поле = Элементы.ТоварыПоставщик Тогда
		Значение = Элемент.ТекущиеДанные.Поставщик;
	ИначеЕсли Поле = Элементы.ТоварыСчетФактураВыданныйКомитенту Тогда
		Значение = Элемент.ТекущиеДанные.СчетФактураВыданныйКомитенту;
	КонецЕсли; 
	
	Если Значение <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ЗаполнитьПризнакАртикул", Новый Структура("Номенклатура", "Артикул"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	СтруктураДействий.Вставить("ЗаполнитьСтрануПроисхожденияНоменклатуры",
								ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтраныПроисхождения());
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураДействий);
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		"ДокументПриобретения",
		Истина);
	
	СтруктураДействий.Вставить("НоменклатураПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "Товары"));
	
	ДобавитьДействиеПоПересчетуЦены(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	Если Не ТекущаяСтрока.ВедетсяУчетПоРНПТ Тогда
		ТекущаяСтрока.НомерГТД = Неопределено;
		ТекущаяСтрока.ТипНомераГТД = Неопределено;
		ТекущаяСтрока.СтранаПроисхождения = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);

	СтруктураДействий.Вставить("ХарактеристикаПриИзмененииПереопределяемый", Новый Структура("ИмяФормы, ИмяТабличнойЧасти",
		ИмяФормы, "Товары"));
	
	ДобавитьДействиеПоПересчетуЦены(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	КоличествоЕдиницДоПересчета = ТекущаяСтрока.Количество;
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	Иначе
		ДобавитьДействиеПоПересчетуЦены(СтруктураДействий);
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПартнераПоНоменклатуре", Объект.Партнер);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		"ДокументПриобретения",
		Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	ТекущаяСтрока.СуммаВзаиморасчетов = ТекущаяСтрока.СуммаСНДС;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ТекущаяСтрока.СуммаВознаграждения = 0;
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры
&НаКлиенте

Процедура ТоварыСуммаВознагражденияПриИзменении(Элемент)
	
	Объект.СуммаВознаграждения = Объект.Товары.Итог("СуммаВознаграждения");
	ИтогСуммаСНДС = Объект.Товары.Итог("СуммаСНДС");
	Объект.ПроцентВознаграждения = ?(ИтогСуммаСНДС <> 0, Объект.СуммаВознаграждения / ИтогСуммаСНДС * 100, 0);
	КомиссионнаяТорговляКлиент.РассчитатьКомиссионноеВознаграждениеНДС(Элементы.Товары.ТекущиеДанные, ПроцентНДС);
	Объект.СуммаНДСВознаграждения = Объект.Товары.Итог("СуммаНДСВознаграждения");
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСВознагражденияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ТекущаяСтрока.СуммаВознаграждения = ТекущаяСтрока.СуммаНДСВознаграждения / ПроцентНДС * (100 + ПроцентНДС);
	Объект.СуммаНДСВознаграждения = Объект.Товары.Итог("СуммаНДСВознаграждения");
	Объект.СуммаВознаграждения = Объект.Товары.Итог("СуммаВознаграждения");
	ИтогСуммаСНДС = Объект.Товары.Итог("СуммаСНДС");
	Объект.ПроцентВознаграждения = ?(ИтогСуммаСНДС <> 0, Объект.СуммаВознаграждения / ИтогСуммаСНДС * 100, 0);
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНазначениеПриИзменении(Элемент)
	ТекущиеДанныеСтроки = Элементы.Товары.ТекущиеДанные;
	Если Не ТекущиеДанныеСтроки = Неопределено Тогда
		ТекущиеДанныеСтроки.ЗаказКлиента = ПолучитьЗаказПоНазначению(ТекущиеДанныеСтроки.Назначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура("НомерГТД", ТекущиеДанные.НомерГТД);
	
	Действия = Новый Структура;
	Действия.Вставить("ЗаполнитьТипНомераГТД", ПараметрыЗаполнения);
	Действия.Вставить("ЗаполнитьСтрануПроисхожденияДляНомераГТД", ПараметрыЗаполнения);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		Действия,
		"ДокументПриобретения",
		Истина);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, Действия, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНомерГТДСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	ДополнительныеПараметры = ЗакупкиКлиент.ДополнительныеПараметрыСозданияНомераГТД();
	ЗаполнитьЗначенияСвойств(ДополнительныеПараметры, ЭтотОбъект);
	
	ДополнительныеПараметры.ОснованиеСтоимостиПоступления = Ложь;
	
	ПараметрыСоздания = ЗакупкиКлиент.ПараметрыСозданияНомераГТД(ТекущиеДанные,
																Элемент.ТекстРедактирования,
																ДополнительныеПараметры);
	
	ЗакупкиКлиент.ОткрытьФормуСозданияНомераГТД(ЭтотОбъект, ПараметрыСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные; 
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ТекущаяСтрока.СуммаВзаиморасчетов = ТекущаяСтрока.СуммаСНДС + ТекущаяСтрока.СуммаВознаграждения; 
		Если ЗначениеЗаполнено(Объект.ДокументПриобретения) Тогда
			ТекущаяСтрока.ДокументПриобретения = Объект.ДокументПриобретения;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	Оповещение = Новый ОписаниеОповещения("РазбитьСтрокуЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.РазбитьСтроку(ДанныеТаблицы, ТаблицаФормы, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВознаграждение(Команда)
	
	КомиссионнаяТорговляКлиент.НеобходимоРассчитатьВознаграждение(
		Новый ОписаниеОповещения("РассчитатьВознаграждениеНеобходимоРассчитатьВознаграждениеЗавершение", ЭтотОбъект),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВознаграждениеНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение = Истина Тогда
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Записать(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамЗакупки(Команда)
	
	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ТабличнаяЧасть = Объект.Товары;
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация",          НСтр("ru = 'Организация'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Валюта",               НСтр("ru = 'Валюта'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Договор",              НСтр("ru = 'Договор'"));
	Если ОтчетПоПриобретению Тогда
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("ДокументПриобретения", НСтр("ru = 'Документ приобретения'"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоРезультатамЗакупкиЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	НоменклатураПартнеровКлиент.ПоказатьНоменклатуруПартнера(Объект.Партнер, Объект.Ссылка, Элементы.Товары.ТекущиеДанные, НСтр("ru = 'Комитент'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоРезультатамЗакупки(Команда)

	ПараметрыПроверки = РаботаСТабличнымиЧастямиКлиент.ПараметрыПроверкиЗаполнения();
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Организация", НСтр("ru = 'Организация'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Партнер",     НСтр("ru = 'Комитент'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Валюта",      НСтр("ru = 'Валюта'"));
	ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("Договор",      НСтр("ru = 'Договор'"));
	Если ОтчетПоПриобретению Тогда
		ПараметрыПроверки.ПроверяемыеРеквизиты.Вставить("ДокументПриобретения", НСтр("ru = 'Документ приобретения'"));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодобратьПоРезультатамЗакупкиЗавершение", ЭтотОбъект);
	РаботаСТабличнымиЧастямиКлиент.ПроверитьВозможностьЗаполнения(ЭтаФорма, Оповещение, ПараметрыПроверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ОбщегоНазначенияУТКлиент.Провести(ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	
	ОбщегоНазначенияУТКлиент.ПровестиИЗакрыть(ЭтаФорма, Истина);
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	ИнтеграцияС1СДокументооборотБазоваяФункциональностьКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры
// Конец ИнтеграцияС1СДокументооборотом

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()
	
	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);
	
КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура ЗачетОплаты(Команда)
	
	ПоместитьРасшифровкуПлатежаВоВременноеХранилище();
	ВзаиморасчетыКлиент.ЗачетОплаты(ЭтаФорма, Элементы.ЗачетОплаты);

КонецПроцедуры

&НаКлиенте	
Процедура ЗаполнитьСтавкуНДС(Команда)

	Если Объект.Товары.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'В список ""Товары"" не введено ни одной строки.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьСтавкуНДСЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТипНалогообложенияНДС", Объект.НалогообложениеНДС);
	ПараметрыФормы.Вставить("ДатаАктуальности", Объект.Дата);
	ОткрытьФорму("Справочник.СтавкиНДС.ФормаВыбора", ПараметрыФормы,,,,, ОповещениеОЗакрытии);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства

&НаСервере
Процедура СвойстваВыполнитьОтложеннуюИнициализацию()
	УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	НоменклатураСервер.УстановитьУсловноеОформлениеЕдиницИзмерения(ЭтаФорма);
	
	// только просмотр СуммыНДС, если СтавкаНДС = БезНДС или НДС0%
	
	УчетНДСУП.УстановитьУсловноеОформлениеСуммНДСПоНалогообложениюЗакупки(ЭтаФорма);
	
	//
	
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(ЭтаФорма);
	
	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыКоличествоУпаковок.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;


	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.ТипДокументаПриобретения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Новый ОписаниеТипов("ДокументСсылка.КорректировкаПриобретения");
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	
	ПараметрыУсловногоОформления = НоменклатураСервер.ПараметрыУстановкиУсловногоОформленияНомераГТД();
	ПараметрыУсловногоОформления.ИмяПоляВводаНомераГТД = "ТоварыНомерГТДСтранаПроисхождения";
	
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтотОбъект);
	НоменклатураСервер.УстановитьУсловноеОформлениеНомераГТД(ЭтотОбъект, ПараметрыУсловногоОформления);

	//

	УчетПрослеживаемыхТоваровЛокализация.УстановитьУсловноеОформлениеКоличестваПоРНПТ(ЭтотОбъект);
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Договор.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Соглашение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Договор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТоварыСчетФактураПолученный.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СуммаНДС");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Товары.СчетФактураПолученный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	//
	НаправленияДеятельностиСервер.УстановитьУсловноеОформлениеНаправленияДеятельности(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда)

	Если ЦеныПартнеровЗаполнениеКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", НСтр("ru='Товары'")) Тогда
		
		ТекстОшибки = "";
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер(ТекстОшибки);
		ЗакупкиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны, ТекстОшибки);
		
	КонецЕсли;

КонецПроцедуры

#Область ПриИзмененииРеквизитов

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ИспользоватьНаправленияДеятельности Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
		КонецЕсли;
		
		ЗаполнитьНалогообложениеНДСПродажи();
		НалогообложениеНДСПриИзмененииСервер();
		
		КомиссионнаяТорговляСервер.ЗаполнитьСтавкуНДСКомиссионногоВознаграждения(Объект, ПроцентНДС);
		
		ОбновитьТекстСчетаФактурыВыданные();
		
	КонецЕсли;
	
	ДенежныеСредстваСервер.ПроверитьЗаполнитьБанковскийСчетОрганизацииПоВладельцу(Объект.Организация, Объект.БанковскийСчет, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	ДенежныеСредстваСервер.ПроверитьЗаполнитьКассуОрганизацииПоВладельцу(Объект.Организация, Объект.Касса, Объект.ФормаОплаты, Объект.НаправлениеДеятельности);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Организация");
	
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Организация");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервере
Процедура ВалютаПриИзмененииСервер(НоваяВалюта, ПересчитатьСуммы)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		ПродажиСервер.ПересчитатьСуммуДокументаВВалюту(Объект, ВалютаДокумента, Объект.Валюта, Ложь);
		РассчитыватьВознаграждение = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПартнерПриИзмененииСервер()
	
	МассивИзмененныхРеквизитов = Новый Массив;
	МассивИзмененныхРеквизитов.Добавить("Партнер");
	
	СтруктураДополнительногоОтбора = Новый Структура("ВыбранноеСоглашение", Объект.Соглашение);
	
	МассивОпераций = Новый Массив();
	МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала"));
	СтруктураДополнительногоОтбора.Вставить("ХозяйственныеОперации", МассивОпераций);
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
		Объект.Партнер,
		СтруктураДополнительногоОтбора);
		
	Если УсловияПродаж <> Неопределено Тогда
		
		Если Объект.Соглашение <> УсловияПродаж.Соглашение
			И ЗначениеЗаполнено(УсловияПродаж.Соглашение) Тогда
		
			Объект.Соглашение = УсловияПродаж.Соглашение;
			СоглашениеПриИзмененииСервер();
			
		Иначе
			Объект.Соглашение = УсловияПродаж.Соглашение;
			МассивИзмененныхРеквизитов.Добавить("Валюта");
			МассивИзмененныхРеквизитов.Добавить("НаправлениеДеятельности");
			МассивИзмененныхРеквизитов.Добавить("Организация");
			МассивИзмененныхРеквизитов.Добавить("Контрагент");
			МассивИзмененныхРеквизитов.Добавить("Договор");
		КонецЕсли;
			
	Иначе
		Объект.Соглашение = Неопределено;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер);
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, МассивИзмененныхРеквизитов);
	
	УстановитьДоступностьСоглашений();
	
	ОбновитьТекстСчетаФактурыВыданные();
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Объект.Партнер, Объект.КонтактноеЛицо);
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;	
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	
КонецПроцедуры

&НаСервере
Процедура КонтактноеЛицоПриИзмененииСервер(ПартнерИзменился)
	
	ВладелецКонтактногоЛица = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтактноеЛицо, "Владелец");
	Если ВладелецКонтактногоЛица <> Объект.Партнер Тогда
		Объект.Партнер = ВладелецКонтактногоЛица;
		ПартнерПриИзмененииСервер();
		ПартнерИзменился = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ЗакупкиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Договор");
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(Объект);
	ЗаполнитьПодчиненныеСвойстваПоСтатистике("Договор");
	УстановитьПредставлениеДокументаОснования();
	
	Если ИспользоватьНаправленияДеятельности Тогда
		НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(Объект.НаправлениеДеятельности, Объект.Соглашение, Объект.Договор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер()
	
	КэшированныеЗначенияСлужебный = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС",  ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(Объект));
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначенияСлужебный);
	
	СтруктураПересчетаСуммы = Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КэшированныеЗначенияСлужебный.ОбработанныеСтроки, СтруктураДействий, Неопределено);
	
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	РассчитыватьВознаграждение = Истина;

	УчетНДСУП.УстановитьВидимостьКомандыЗаполнитьСтавкуНДС(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	Для каждого СтрокаТовара из Объект.Товары Цикл
		СтрокаТовара.СуммаНДСВознаграждения = 0;
	КонецЦикла;
	
	Объект.СуммаВознаграждения = 0;
	Объект.СуммаНДСВознаграждения = 0;
	
	РассчитыватьВознаграждение = Истина;
	Элементы.ТоварыСумма.Видимость = Не Объект.ЦенаВключаетНДС
	Или Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
	
КонецПроцедуры

&НаСервере
Процедура СпособРасчетаВознагражденияПриИзмененииСервер()
	
	УправлениеЭлементамиФормы();
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	
	ОбновитьТекстСчетаФактурыВыданные();
	
КонецПроцедуры

&НаСервере
Функция ДатаПриИзмененииСервер(ПересчитыватьЦены)
	
	Если ПересчитыватьЦены Тогда
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
	Иначе
		ЦеныРассчитаны = Ложь;
	КонецЕсли;
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Объект.Дата);
	
	ЗаполнитьНалогообложениеНДСПродажи();
	НалогообложениеНДСПриИзмененииСервер();
	
	КомиссионнаяТорговляСервер.ЗаполнитьСтавкуНДСКомиссионногоВознаграждения(Объект, ПроцентНДС);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьВидимостьКоличестваРНПТ(ЭтаФорма,
		Объект.Дата, "ТоварыГруппаКоличествоПоРНПТ");
	
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Дата");
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура УслугаПриИзмененииСервер()
	
	КомиссионнаяТорговляСервер.ЗаполнитьСтавкуНДСКомиссионногоВознаграждения(Объект, ПроцентНДС, Истина);
	
КонецПроцедуры

&НаСервере
Процедура НаправлениеДеятельностиПриИзмененииСервер()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
	КонецЕсли;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "НаправлениеДеятельности");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДокументаОснования()
	
	УказанДокументПриобретения = Ложь;
	РазбиватьОтчетПоДокументам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "РазбиватьОтчетПоДокументам");
	
	Если ЗначениеЗаполнено(Объект.Договор)
		И (Не ДоговорСтарый = Объект.Договор
		Или Не РазбиватьОтчетПоДокументам) Тогда
		
		Объект.ДокументПриобретения = Неопределено;
		ДоговорСтарый = Объект.Договор;
		
	КонецЕсли;
	
	Элементы.ОтчетПоПриобретению.Видимость = ЗначениеЗаполнено(Объект.Договор)
		И РазбиватьОтчетПоДокументам;
		
	Если ЗначениеЗаполнено(Объект.ДокументПриобретения) Тогда
		
		СтатусЭДОДокументаПриобретения = НСтр("ru = '(ЭДО: Не начат)'");
		ОписаниеДокументПриобретения = Новый ФорматированнаяСтрока(Строка(Объект.ДокументПриобретения),,ЦветаСтиля.ГиперссылкаЦвет,,"ОткрытьДокумент");
		ПредставлениеПриобретения = Новый ФорматированнаяСтрока(ОписаниеДокументПриобретения, "  ", СтатусЭДОДокументаПриобретения);
		ОтчетПоПриобретению = Истина;
		УказанДокументПриобретения = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор)
		И РазбиватьОтчетПоДокументам
		И ОтчетПоПриобретению Тогда
		ПредставлениеПриобретения = Новый ФорматированнаяСтрока(НСтр("ru = '<не выбран>'"),,ЦветаСтиля.ЦветОсобогоТекста,,"ВыбратьДокумент");
		УказанДокументПриобретения = Истина;
	Иначе
		Объект.ДокументПриобретения = Неопределено;
	КонецЕсли;
	
	Если ОтчетПоПриобретению Тогда
		Элементы.ТоварыДокументПриобретения.Видимость = Ложь;
		Элементы.ТоварыПоставщик.Видимость = Ложь;
		Элементы.ТоварыСчетФактураПолученный.Видимость = Ложь;
		Элементы.ТоварыСчетФактураВыданныйКомитенту.Видимость = Ложь;
	Иначе
		Элементы.ТоварыДокументПриобретения.Видимость = Истина;
		Элементы.ТоварыПоставщик.Видимость = Истина;
		Элементы.ТоварыСчетФактураПолученный.Видимость = Истина;
		Элементы.ТоварыСчетФактураВыданныйКомитенту.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ГруппаДанныеПоДокументуПриобретения.Видимость = УказанДокументПриобретения;
	
КонецПроцедуры

&НаКлиенте
Процедура СтавкаРасчетаВознагражденияПриИзмененииНеобходимоРассчитатьВознаграждениеЗавершение(НеобходимоРассчитатьВознаграждение, ДополнительныеПараметры) Экспорт
	
	Если НеобходимоРассчитатьВознаграждение = Истина Тогда
		СтавкаВознаграждения = Объект.СтавкаНДСВознаграждения;
		РассчитатьКомиссионноеВознаграждениеСервер();
		КомиссионнаяТорговляКлиент.ОповеститьОбОкончанииРасчетаВознаграждения(Объект.СпособРасчетаВознаграждения);
	ИначеЕсли ДополнительныеПараметры.ВосстановитьРеквизиты Тогда
		Объект.СтавкаНДСВознаграждения = СтавкаВознаграждения;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПодборыИОбработкаПроверкиКоличества

&НаСервере
Функция ПоместитьТоварыВХранилище(Знач Товары, УникальныйИдентификатор)

	АдресПлатежейВХранилище = ПоместитьВоВременноеХранилище(
		Товары.Выгрузить(,"Номенклатура, Характеристика, Назначение, АналитикаУчетаНоменклатуры, ДокументПриобретения, Поставщик, НомерГТД, КоличествоУпаковок"),
		УникальныйИдентификатор);
		
	Возврат АдресПлатежейВХранилище;
	
КонецФункции

&НаСервере
Процедура ПолучитьВидыЗапасовИзХранилища(ВыбранноеЗначение)
	
	ЗапасыСервер.ОбработатьВводВидовЗапасовВручную(ВыбранноеЗначение, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТоварыИзХранилища(АдресПлатежейВХранилище)
	
	КэшированныеЗначения = Неопределено;
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресПлатежейВХранилище));
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуПоСумме", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках");
	//++ Локализация
	СтруктураДействий.Вставить("ЗаполнитьСчетФактуруПеревыставленнуюВОтчетеКомитентуОЗакупках", Новый Структура("ОтчетКомитентуОЗакупках", Объект.Ссылка));
	//-- Локализация
	СтруктураДействий.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",	Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураДействий);
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		СтруктураДействий,
		"ДокументПриобретения",
		Истина);
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитыватьВознаграждение = Истина;
	РассчитатьКомиссионноеВознаграждениеСервер();
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул",	Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакТипНоменклатуры",	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	Документы.ОтчетКомитентуОЗакупках.ПроверитьНаличиеПриобретенияИИсправительнойКорректировкиВОдномОтчете(Объект);
	
КонецПроцедуры

#КонецОбласти

#Область НомераГТД

&НаКлиенте
Процедура ОбработатьПодборНомераГТД(РезультатПодбора)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если ИдентификаторСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполненыНомераГТД = Ложь;
	НомерГТД = Неопределено;
	
	ОбработатьУказаниеНомераГТДСервер(ИдентификаторСтроки, РезультатПодбора, ЗаполненыНомераГТД, НомерГТД);
	
	ЗакупкиКлиент.ОповеститьОЗаполненииНомеровГТДВТабличнойЧасти(ЗаполненыНомераГТД, НомерГТД);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеНомераГТДСервер(ИдентификаторСтроки,
											РезультатПодбора,
											ЗаполненыНомераГТД,
											НомерГТД)
	
	ДанныеПодбора	= ПолучитьИзВременногоХранилища(РезультатПодбора.АдресВоВременномХранилище);
	НомерГТД		= ?(ДанныеПодбора.ОстаточныйНомерГТД <> Неопределено,
						НомерГТД,
						ДанныеПодбора.ОсновнойНомерГТД);
	
	ДействияОбработки = Новый Структура;
	
	Если ДанныеПодбора.ОстаточныйНомерГТД <> Неопределено Тогда
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(ДействияОбработки, Объект);
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
		Объект,
		ДействияОбработки,
		"ДокументПриобретения",
		Истина);
	
	ЗакупкиСервер.ОбработатьУказаниеНомераГТД(ЭтотОбъект,
												ИдентификаторСтроки,
												ДанныеПодбора,
												ЗаполненыНомераГТД,
												Неопределено,
												ДействияОбработки);
	
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтотОбъект);
	
	РассчитыватьВознаграждение = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЭлементамиФормы

&НаСервере
Процедура УправлениеЭлементамиФормы()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ОтчетКомитентуОЗакупках.ЗаполнитьИменаРеквизитовПоСпособуРасчетаВознаграждения(
		Объект.СпособРасчетаВознаграждения,
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
		
		
	ДенежныеСредстваСервер.УстановитьДоступностьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	
	Элементы.ТоварыСумма.Видимость = Не Объект.ЦенаВключаетНДС
		Или Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;;
	
	СпособРасчетаНеРассчитывается = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗачетОплатыПоВознаграждению", "Доступность",Не СпособРасчетаНеРассчитывается);
	СпособРасчетаПроизвольнаяСумма = (Объект.СпособРасчетаВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроизвольнаяСумма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПроцентВознаграждения", "Видимость", Не СпособРасчетаПроизвольнаяСумма);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СуммаВознаграждения", "ТолькоПросмотр", Не СпособРасчетаПроизвольнаяСумма);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаСервере
Процедура ОбновитьИнформациюПоЗаказам()
	
	ПараметрыОбновления = ЗаказыСервер.ПараметрыОбновленияИнформацииПоЗаказамВФорме();
	
	ПараметрыОбновления.ИмяРеквизитаСписокЗаказов         = "СписокЗаказов";
	ПараметрыОбновления.ПутьЗаказаВШапке                  = "Объект.ЗаказКлиента";
	ПараметрыОбновления.ИмяНадписиЗаголовка               = "НадписьЗаголовокЗаказы";
	ПараметрыОбновления.ИмяЗаказаВТабличнойЧасти          = "ЗаказКлиента";
	ПараметрыОбновления.ИспользоватьЗаказыВТабличнойЧасти = Истина;
	
	ЗаказыСервер.ОбновитьИнформациюПоЗаказамВФорме(ЭтаФорма, Объект.Товары, ПараметрыОбновления);

	ОтчетПоЗаказу = ЗначениеЗаполнено(Объект.ЗаказКлиента) ИЛИ СписокЗаказов.Количество() > 0;
	Элементы.ГруппаРеализацияПоЗаказам.Видимость = ОтчетПоЗаказу; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ИспользоватьУпрощеннуюСхемуОплаты = ПолучитьФункциональнуюОпцию("ИспользоватьУпрощеннуюСхемуОплатыВЗакупках");
	ИспользоватьНаправленияДеятельности = ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности");
	ИспользоватьСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьСоглашенияСКлиентами");
	ИспользуетсяЦенообразование25 = ЦенообразованиеВызовСервера.ИспользуетсяЦенообразование25();
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Объект.Дата);
	
	УстановитьДоступностьСоглашений();
	
	ВалютаДокумента = Объект.Валюта;
	УправлениеЭлементамиФормы();
	ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(Объект.СтавкаНДСВознаграждения);
	
	ЗаполнитьДанныеПоДокументуПриобретенияСервер();
	
	ЗаполнитьСчетаФактурыПеревыставленныеСервер();
	
	ОбновитьТекстСчетаФактурыВыданные();
	ОбновитьТекстСчетаФактурыПеревыставленные();
	ОбновитьИнформациюПоЗаказам();
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул",	Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакТипНоменклатуры",	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",	Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураХарактеристикиНоменклатуры);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
	МетаданныеФормы = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка).МетаданныеДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов 
			И ИспользоватьНаправленияДеятельности Тогда
			
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.Валюта;
		ДопПараметры.НаправлениеДеятельности = Объект.НаправлениеДеятельности;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала, 
															ДопПараметры);
	Иначе
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Объект.Валюта;
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(Объект, 
															Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала, 
															ДопПараметры);
	КонецЕсли;	
		
	Если Договор <> Объект.Договор Тогда
		Объект.Договор = Договор;
		ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, "Договор");
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаФактурыПолученныеСервер()
	//++ Локализация
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
	"Документ.ОтчетКомитентуОЗакупках.Форма.ФормаДокумента.ЗаполнитьСчетаФактурыПолученныеСервер");
	
	ОтчетКомитентуОЗакупкахЛокализация.ЗаполнитьСчетаФактурыПолученные(Объект);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Объект.Товары.Количество());
	//-- Локализация
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСчетаФактурыПеревыставленныеСервер()
	//++ Локализация
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
	"Документ.ОтчетКомитентуОЗакупках.Форма.ФормаДокумента.ЗаполнитьСчетаФактурыПеревыставленныеСервер");
	
	ОтчетКомитентуОЗакупкахЛокализация.ЗаполнитьСчетаФактурыПеревыставленные(Объект);

	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Объект.Товары.Количество());
	//-- Локализация
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДанныеПоДокументуПриобретенияСервер()
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
	"Документ.ОтчетКомитентуОЗакупках.Форма.ФормаДокумента.ЗаполнитьДанныеПоДокументуПриобретенияСервер");
	
	Для каждого СтрТовары Из Объект.Товары Цикл
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СтрТовары.ДокументПриобретения));
		СтрТовары.ТипДокументаПриобретения = Новый ОписаниеТипов(МассивТипов);
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, Объект.Товары.Количество());
	
КонецПроцедуры	

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер(ТекстОшибки = "")
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ЦенаВключаетНДС") <> Объект.ЦенаВключаетНДС Тогда
		ТекстОшибки = 
		НСтр("ru = 'Установленные значения полей ""Цена включает НДС"" в документе и соглашении разные.'");
		Возврат Ложь;
	КонецЕсли;

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПараметрыЗаполнения = ЦеныПредприятияЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена");
	ПараметрыЗаполнения.Вставить("Дата", Объект.Дата);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	ПараметрыЗаполнения.Вставить("Валюта", Объект.Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Объект.Соглашение);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", Объект.НалогообложениеНДС);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	
	ЦеныРассчитаны = ЦеныПредприятияЗаполнениеСервер.ЗаполнитьЦены(
		Объект.Товары,
		Неопределено, // Массив строк
		ПараметрыЗаполнения,
		СтруктураДействий);
	
	КомиссионнаяТорговляСервер.ЗаполнитьСуммуСНДС(
		Объект.Товары,
		Объект.ЦенаВключаетНДС);
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаКлиенте
Процедура ВопросПользователюПередЗаполнениемЦенПоСоглашению(ОписаниеОповещения)
	
	ВариантыОтветов = Новый СписокЗначений;
	ВариантыОтветов.Добавить(Истина, НСтр("ru='Перезаполнить'"));
	ВариантыОтветов.Добавить(Ложь, НСтр("ru='Не перезаполнять'"));
	
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Перезаполнить цены по соглашению?'"),
		ВариантыОтветов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРезультатамЗакупкиСервер()
	
	МассивНазначений = Новый Массив;
	МассивДокументовПриобретений = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ДокументПриобретения) Тогда
		МассивДокументовПриобретений.Добавить(Объект.ДокументПриобретения);
	КонецЕсли;
	Документы.ОтчетКомитентуОЗакупках.ЗаполнитьПоТоварамУслугамКОформлениюОтчетовКомитентуОЗакупках(
		Объект, 
		МассивНазначений, МассивДокументовПриобретений);
		
	ЗаполнитьДанныеПоДокументуПриобретенияСервер();
	ЗаполнитьСчетаФактурыПолученныеСервер();
	ЗаполнитьСчетаФактурыПеревыставленныеСервер();
	
	СтруктураХарактеристикиНоменклатуры = Новый Структура;
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются",	Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакАртикул",	Новый Структура("Номенклатура", "Артикул"));
	
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакТипНоменклатуры",	Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураХарактеристикиНоменклатуры.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД",	Новый Структура("Номенклатура", "ВедетсяУчетПоГТД"));
	УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекЗаполненияСлужебныхРеквизитовТабличнойЧасти(СтруктураХарактеристикиНоменклатуры);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.Товары, СтруктураХарактеристикиНоменклатуры);
	ЗакупкиСервер.ЗаполнитьСлужебныеРеквизитыНомераГТД(Объект.Товары);
	
	РассчитатьКомиссионноеВознаграждениеСервер();
	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
	
КонецПроцедуры

// Процедура используется в автотесте процесса продаж.
//
&НаСервере
Процедура РассчитатьКомиссионноеВознаграждениеСервер()
	
	КомиссионнаяТорговляСервер.РассчитатьСуммуВознаграждения(Объект, "СуммаСНДС", Истина);
	РассчитыватьВознаграждение = Ложь;
	Для каждого СтрокаТовара из Объект.Товары Цикл
		СтрокаТовара.СуммаВзаиморасчетов = СтрокаТовара.СуммаСНДС + СтрокаТовара.СуммаВознаграждения;
	КонецЦикла;
	
	УправлениеЭлементамиФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(Форма)
	
	Если Форма.Объект.СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		Форма.Элементы.СуммаВознагражденияВсего.Видимость      = Ложь;
	Иначе
		Форма.Элементы.СуммаВознагражденияВсего.Видимость      = Истина;
	КонецЕсли;
	
	Форма.НомерСтрокиПолнойОплаты = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("НадписьЭтапыОплатыНажатиеЗавершение", ЭтотОбъект);
	ПоместитьЭтапыОплатыВоВременноеХранилище(Элемент.Имя);
	ВзаиморасчетыКлиент.НадписьЭтапыОплатыНажатие(ЭтаФорма, Элемент, СтандартнаяОбработка, Оповещение );
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьЭтапыОплатыВоВременноеХранилище(ИмяЭлемента)
	ВзаиморасчетыСервер.ПоместитьЭтапыОплатыВоВременноеХранилище(ЭтаФорма, ИмяЭлемента);
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ИзмененныеРеквизиты = Результат.СтарыеЗначенияИзмененныхРеквизитов;
		ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты);
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСоглашений()
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Соглашение", "Видимость", ИспользоватьСоглашенияСКлиентами);
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактурыВыданные()
	
	Если Объект.СпособРасчетаВознаграждения = ПредопределенноеЗначение("Перечисление.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается") Тогда
		ТекстСчетФактура = НСтр("ru = 'Оформление счета-фактуры не требуется (Комиссионное вознаграждение)'");
		ТекстСчетаФактурыВыданные = Новый ФорматированнаяСтрока(ТекстСчетФактура);
	Иначе
		ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурВыданныхСервер(Объект);
		ПараметрыРегистрации.Вставить("ПостфиксПредставленияДокумента", НСтр("ru = '(Комиссионное вознаграждение)'"));
		СчетаФактурыВыданныеНаОсновании = УчетНДСУП.СчетаФактурыВыданныеНаОсновании(ПараметрыРегистрации);
		ТекстСчетаФактурыВыданные =  СчетаФактурыВыданныеНаОсновании.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекстСчетаФактурыПеревыставленные()
	
	МассивГиперСсылок = Новый Массив;
	
	//++ Локализация
	Если Объект.Проведен Тогда
		ДоступКСчетуФактуреВыданному = ПравоДоступа("Чтение", Метаданные.Документы.СчетФактураВыданный);
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СУММА(ПеревыставленныеСчетаФактуры.Перевыставить) КАК Перевыставить,
		|	СУММА(ПеревыставленныеСчетаФактуры.Выданы) КАК Выданы,
		|	МАКСИМУМ(ПеревыставленныеСчетаФактуры.СчетФактураПеревыставленный) КАК СчетФактураПеревыставленныйКомитенту,
		|	МАКСИМУМ(ПеревыставленныеСчетаФактуры.СчетФактураПолученный) КАК СчетФактураПолученныйОтПоставщика
		|ПОМЕСТИТЬ ВтДанныеПоСчетамФактурам
		|ИЗ
		|	(ВЫБРАТЬ
		|		0 КАК Перевыставить,
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетФактураВыданный.Ссылка) КАК Выданы,
		|		МАКСИМУМ(СчетФактураВыданный.Ссылка) КАК СчетФактураПеревыставленный,
		|		НЕОПРЕДЕЛЕНО КАК СчетФактураПолученный
		|	ИЗ
		|		Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|			ПО (СчетФактураВыданныйДокументыОснования.Ссылка = СчетФактураВыданный.Ссылка)
		|			И (СчетФактураВыданныйДокументыОснования.ДокументОснование = &ДокументОснование)
		|	ГДЕ
		|		СчетФактураВыданный.Проведен
		|		И СчетФактураВыданный.Перевыставленный
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ
		|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СчетаФактурыПоставщиковКПеревыставлениюКомитентам.СчетФактураПолученный),
		|		0,
		|		НЕОПРЕДЕЛЕНО,
		|		МАКСИМУМ(СчетаФактурыПоставщиковКПеревыставлениюКомитентам.СчетФактураПолученный)
		|	ИЗ
		|		РегистрСведений.СчетаФактурыПоставщиковКПеревыставлениюКомитентам КАК
		|			СчетаФактурыПоставщиковКПеревыставлениюКомитентам
		|	ГДЕ
		|		СчетаФактурыПоставщиковКПеревыставлениюКомитентам.ОтчетКомитентуОЗакупках = &ДокументОснование
		|	СГРУППИРОВАТЬ ПО
		|		СчетаФактурыПоставщиковКПеревыставлениюКомитентам.СчетФактураПолученный) КАК ПеревыставленныеСчетаФактуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтДанныеПоСчетамФактурам.Перевыставить,
		|	ВтДанныеПоСчетамФактурам.Выданы,
		|	СчетФактураВыданный.Номер КАК СчетФактураПеревыставленныйКомитентуНомер,
		|	СчетФактураВыданный.Дата КАК СчетФактураПеревыставленныйКомитентуДата,
		|	СчетФактураВыданный.Проведен КАК СчетФактураПеревыставленныйКомитентуПроведен,
		|	СчетФактураПолученный.Номер КАК СчетФактураПолученныйНомер,
		|	СчетФактураПолученный.Дата КАК СчетФактураПолученныйДата,
		|	СчетФактураПолученный.Проведен КАК СчетФактураПолученныйПроведен
		|ИЗ
		|	ВтДанныеПоСчетамФактурам КАК ВтДанныеПоСчетамФактурам
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО ВтДанныеПоСчетамФактурам.СчетФактураПеревыставленныйКомитенту = СчетФактураВыданный.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный КАК СчетФактураПолученный
		|		ПО ВтДанныеПоСчетамФактурам.СчетФактураПолученныйОтПоставщика = СчетФактураПолученный.Ссылка";
		
		Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		КоличествоВыданы = 0;
		КоличествоПеревыставить = 0;
		Если Выборка.Следующий() Тогда
			КоличествоВыданы = Выборка.Выданы;
			КоличествоПеревыставить = Выборка.Перевыставить;
			
			Если КоличествоВыданы = 0 И КоличествоПеревыставить = 0 Тогда
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Перевыставление счетов-фактуры комитенту (принципалу) не требуется.'"), , ЦветаСтиля.ЦветТекстаФормы,, ));
			ИначеЕсли КоличествоВыданы = 0 И КоличествоПеревыставить = 1 Тогда
				ТекстСчетФактура = Документы.СчетФактураПолученный.ПредставлениеСчетаФактуры(
										Выборка.СчетФактураПолученныйНомер,
										Выборка.СчетФактураПолученныйДата,
										Выборка.СчетФактураПолученныйПроведен);
				ТекстКПеревыставлению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требует переоформления %1 комитенту (принципалу)'"), ТекстСчетФактура);
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(ТекстКПеревыставлению, , ЦветаСтиля.ГиперссылкаЦвет,, ?(ДоступКСчетуФактуреВыданному, 
					"ОткрытьРабочееМестоДляПеревыставленияСчетовФактурКОформлению", "НетДОступаКПервыставлениюСчетовФактур")));
			ИначеЕсли КоличествоВыданы = 1 И КоличествоПеревыставить = 0 Тогда
				ТекстСчетФактура = Документы.СчетФактураВыданный.ПредставлениеСчетаФактуры(
										Выборка.СчетФактураПеревыставленныйКомитентуНомер,
										Выборка.СчетФактураПеревыставленныйКомитентуДата,
										Выборка.СчетФактураПеревыставленныйКомитентуПроведен,,НСтр("ru = 'комитенту (принципалу)'"));
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(ТекстСчетФактура, , ЦветаСтиля.ГиперссылкаЦвет,, ?(ДоступКСчетуФактуреВыданному, 
					"ОткрытьПеревыставленныйСчетФактуру", "НетДОступаКПервыставлениюСчетовФактур")));
			ИначеЕсли КоличествоВыданы > 1 И КоличествоПеревыставить = 0 Тогда
				ТекстВыданы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перевыставлены (%1) счета-фактуры комитенту (принципалу)'"), КоличествоВыданы);
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(ТекстВыданы, , ЦветаСтиля.ГиперссылкаЦвет,, ?(ДоступКСчетуФактуреВыданному, 
					"ОткрытьРабочееМестоДляПеревыставленияСчетовФактур", "НетДОступаКПервыставлениюСчетовФактур")));
			ИначеЕсли КоличествоВыданы = 0 И КоличествоПеревыставить > 1 Тогда
				ТекстКПеревыставлению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требуют переоформления/не оформлены (%1) счета-фактуры комитенту (принципалу)'"), КоличествоПеревыставить);
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(ТекстКПеревыставлению, , ЦветаСтиля.ГиперссылкаЦвет,, ?(ДоступКСчетуФактуреВыданному, 
					"ОткрытьРабочееМестоДляПеревыставленияСчетовФактурКОформлению", "НетДОступаКПервыставлениюСчетовФактур")));
			Иначе
				ТекстКПеревыставлению = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Требуют переоформления/не оформлены (%1) счета-фактуры комитенту (принципалу)'"), КоличествоПеревыставить);
				ТекстВыданы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перевыставлены (%1)'"), КоличествоВыданы);
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(ТекстКПеревыставлению, , ЦветаСтиля.ГиперссылкаЦвет,, ?(ДоступКСчетуФактуреВыданному, 
					"ОткрытьРабочееМестоДляПеревыставленияСчетовФактурКОформлению", "НетДОступаКПервыставлениюСчетовФактур")));
				МассивГиперСсылок.Добавить("  ");
				МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(ТекстВыданы, , ЦветаСтиля.ГиперссылкаЦвет,, ?(ДоступКСчетуФактуреВыданному, 
					"ОткрытьРабочееМестоДляПеревыставленияСчетовФактур", "НетДОступаКПервыставлениюСчетовФактур")));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		МассивГиперСсылок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Для перевыставления счетов-фактур комитенту (принципалу) необходимо провести документ.'"), , ЦветаСтиля.ЦветТекстаФормы,, ));
	КонецЕсли;	
	//-- Локализация
	ТекстСчетаФактурыПеревыставленные = Новый ФорматированнаяСтрока(МассивГиперСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетаФактурыВыданныеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	ПараметрыРегистрации = ПараметрыРегистрацииСчетовФактурВыданныхСервер(Объект);
	УчетНДСУПКлиент.ОбработкаНавигационнойСсылкиСчетаФактурыВыданные(ЭтаФорма, НавигационнаяСсылка,  СтандартнаяОбработка, ПараметрыРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСчетаФактурыПеревыставленныеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылка, СтандартнаяОбработка)
	
	//++ Локализация
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетКомитентуОЗакупках.Форма.ФормаДокумента.ОткрытьРабочееМестоДляПеревыставленияСчетовФактурКомитенту");
	
	Если НавигационнаяСсылка = "НетДОступаКПервыставлениюСчетовФактур" Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = Нстр("ru = 'Нет прав на доступ к счетам-фактурам выданным'");
		ПоказатьПредупреждение(, ТекстОшибки);
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьРабочееМестоДляПеревыставленияСчетовФактурКОформлению" Тогда
		
		СтандартнаяОбработка = Ложь;
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Организация", Объект.Организация);
		СтруктураБыстрогоОтбора.Вставить("Комитент", Объект.Контрагент);
		СтруктураБыстрогоОтбора.Вставить("ОтчетКомитентуОЗакупках", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению", Истина);
		
		ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаРабочееМестоДляОформленияСчетовФактурКомитенту", ПараметрыФормы, ЭтаФорма);	
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьРабочееМестоДляПеревыставленияСчетовФактур" Тогда
		
		СтандартнаяОбработка = Ложь;
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("Организация", Объект.Организация);
		СтруктураБыстрогоОтбора.Вставить("Комитент", Объект.Контрагент);
		СтруктураБыстрогоОтбора.Вставить("ОтчетКомитентуОЗакупках", Объект.Ссылка);
		ПараметрыФормы = Новый Структура("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
		ПараметрыФормы.Вставить("ОтображатьСтраницуКОформлению", Ложь);
		
		ОткрытьФорму("Документ.СчетФактураВыданный.Форма.ФормаРабочееМестоДляОформленияСчетовФактурКомитенту", ПараметрыФормы, ЭтаФорма);	
		
	ИначеЕсли НавигационнаяСсылка = "ОткрытьПеревыставленныйСчетФактуру" Тогда
		
		СтандартнаяОбработка = Ложь;
		Ключ = ПолучитьПеревыставленныйСчетФактуру();
		Если Ключ <> Неопределено Тогда
			ПараметрыФормы = Новый Структура("Ключ", Ключ);
			ОткрытьФорму("Документ.СчетФактураВыданный.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

//++ Локализация
&НаСервере
Функция ПолучитьПеревыставленныйСчетФактуру()
	
	Результат = Неопределено;
	ПараметрыОтбора = Новый Структура("Организация", Объект.Организация);
	ПараметрыОтбора.Вставить("Перевыставленный", Истина);
	СчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Объект.Ссылка, ПараметрыОтбора, Неопределено, Истина);
	Если СчетаФактуры.Количество() > 0 Тогда
		Результат = СчетаФактуры[0].Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
//-- Локализация

&НаКлиенте
Процедура РасчетыНажатие(Элемент, СтандартнаяОбработка)
	
	ВзаиморасчетыКлиент.РасчетыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьРасшифровкуПлатежаВоВременноеХранилище()
	ВзаиморасчетыСервер.ПоместитьРасшифровкуПлатежаВоВременноеХранилище(ЭтаФорма, "ЗачетОплаты");
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ЗакрытьФорму()
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСвойстваПоСтатистике(ИмяРеквизитаРодителя)
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьПодчиненныеРеквизитыОбъекта(Объект, ИмяРеквизитаРодителя);
КонецПроцедуры

#Область РаботаСКонтрагентами
// СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ПоказатьПредложениеИспользоватьПроверкуКонтрагентов()
	ПроверкаКонтрагентовКлиент.ПредложитьВключитьПроверкуКонтрагентов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПроверкиКонтрагентов()
	ПроверкаКонтрагентовКлиент.ОбработатьРезультатПроверкиКонтрагентовВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРезультатПроверкиКонтрагента() Экспорт
	ПроверкаКонтрагентов.ОтобразитьРезультатПроверкиКонтрагентаВДокументе(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПроверитьКонтрагентовФоновоеЗадание(ПараметрыФоновогоЗадания) Экспорт	
	ПроверкаКонтрагентов.ПроверитьКонтрагентовВДокументеФоновоеЗадание(ЭтотОбъект, ПараметрыФоновогоЗадания);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
&НаКлиенте
Процедура ПроверитьКонтрагентов(Команда)
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПроверитьКонтрагентовВДокументеПоКнопке(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		ЦеныРассчитаны = ДатаПриИзмененииСервер(РезультатВопроса);
	КонецЕсли;
	
	Если РезультатВопроса = Истина Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтрокуЗавершение(НоваяСтрока, ДополнительныеПараметры) Экспорт 
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект);
		УчетПрослеживаемыхТоваровКлиентСерверЛокализация.ДополнитьОписаниеНастроекПересчетаРеквизитовТабличнойЧасти(
			Объект,
			СтруктураДействий,
			"ДокументПриобретения",
			Истина);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтаФорма);
		РассчитыватьВознаграждение = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоРезультатамЗакупкиЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетКомитентуОЗакупках.Форма.ФормаДокумента.ЗаполнитьПоРезультатамЗакупкиЗавершение");

	ЗаполнитьПоРезультатамЗакупкиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьПоРезультатамЗакупкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОценкаПроизводительностиКлиент.ЗамерВремени(
		"Документ.ОтчетКомитентуОЗакупках.Форма.ФормаДокумента.ПодобратьПоРезультатамЗакупкиЗавершение");
	
	АдресТоварыВХранилище = ПоместитьТоварыВХранилище(
		Объект.Товары,
		УникальныйИдентификатор);
		
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("АдресТоварыВХранилище", АдресТоварыВХранилище);
	ПараметрыПодбора.Вставить("Организация", Объект.Организация);
	ПараметрыПодбора.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыПодбора.Вставить("Договор", Объект.Договор);
	ПараметрыПодбора.Вставить("Валюта", Объект.Валюта);
	ПараметрыПодбора.Вставить("Дата", Объект.Дата);
	ПараметрыПодбора.Вставить("ДокументПриобретения", Объект.ДокументПриобретения);
	
	ОткрытьФорму(
		"ОбщаяФорма.ПодборПоТоварамУслугамКОформлениюОтчетаКомитентуОЗакупках",
		ПараметрыПодбора, 
		ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНалогообложениеНДСПродажи()
	
	ПараметрыЗаполнения = Документы.ОтчетКомитентуОЗакупках.ПараметрыЗаполненияНалогообложенияНДСПродажи(Объект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров);
	УчетНДСУП.ЗаполнитьСписокВыбораНалогообложенияНДСПродажи(Элементы.НалогообложениеНДС, Объект.НалогообложениеНДС, ПараметрыЗаполнения, УчетНДСКэшированныеЗначенияПараметров); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавкуНДСЗавершение(СтавкаНДС, ДополнительныеПараметры) Экспорт

	Если СтавкаНДС = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьСтавкуНДСНаСервере(СтавкаНДС, КэшированныеЗначения);
	РассчитыватьВознаграждение = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСНаСервере(СтавкаНДС, КэшированныеЗначения)

	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(Объект);

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", Новый Структура("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС));
	СтруктураДействий.Вставить("ОчиститьСуммуВознаграждения");

	Для каждого СтрокаТабличнойЧасти Из РаботаСТабличнымиЧастямиКлиентСервер.ЭлементыКоллекции(Объект.Товары, Элементы.Товары.ВыделенныеСтроки) Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТабличнойЧасти, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;

	РассчитатьИтоговыеПоказателиОтчетаКомитентуОЗакупках(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработатьЗаписьОбъекта()
	
	ОбщегоНазначенияУТКлиент.ОбработатьЗаписьОбъектаВФорме(ЭтотОбъект, ПараметрыДляЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДокументПриобретенияПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		//++ Локализация
		СтруктураДействий.Вставить("ЗаполнитьСчетФактуруПолученнуюВОтчетеКомитентуОЗакупках");
		СтруктураДействий.Вставить("ЗаполнитьСчетФактуруПеревыставленнуюВОтчетеКомитентуОЗакупках", Новый Структура("ОтчетКомитентуОЗакупках", Объект.Ссылка));
		//-- Локализация
		СтруктураДействий.Вставить("ЗаполнитьДанныеПоДокументуПриобретенияВОтчетеКомитентуОЗакупках");
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСчетФактураПолученныйПриИзменении(Элемент)
	//++ Локализация
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	Если ТекущаяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ЗаполнитьСчетФактуруПеревыставленнуюВОтчетеКомитентуОЗакупках", Новый Структура("ОтчетКомитентуОЗакупках, ", Объект.Ссылка));
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Параметры:
// 	ПараметрыОбработчиков - Структура:
// * ОбновитьТекстСчетаФактурыПеревыставленные - Неопределено
// * ЗаполнитьСчетаФактурыПеревыставленныеСервер - Неопределено
// * ОбновитьТекстСчетаФактурыВыданные - Неопределено
// * ЗачтенаОплатаСервер - см. НоваяСтруктураЗачтенаОплатаСервер
//
&НаСервере
Процедура ВыполнитьВызовСерверныхОбработчиков(ПараметрыОбработчиков)
	
	Если ПараметрыОбработчиков.Свойство("ОбновитьТекстСчетаФактурыВыданные") Тогда
		ОбновитьТекстСчетаФактурыВыданные();
	КонецЕсли;
	
	Если ПараметрыОбработчиков.Свойство("ЗаполнитьСчетаФактурыПеревыставленныеСервер") Тогда
		ЗаполнитьСчетаФактурыПеревыставленныеСервер();
	КонецЕсли;
	
	Если ПараметрыОбработчиков.Свойство("ОбновитьТекстСчетаФактурыПеревыставленные") Тогда
		ОбновитьТекстСчетаФактурыПеревыставленные();
	КонецЕсли;
	
	ЗачтенаОплатаСерверПараметры = Неопределено; // см. НоваяСтруктураЗачтенаОплатаСервер
	Если ПараметрыОбработчиков.Свойство("ЗачтенаОплатаСервер", ЗачтенаОплатаСерверПараметры) И Не ЗачтенаОплатаСерверПараметры = Неопределено Тогда
		ЗачтенаОплатаСервер(ЗачтенаОплатаСерверПараметры.ИмяСобытия, ЗачтенаОплатаСерверПараметры.Параметр, ЗачтенаОплатаСерверПараметры.Источник);
	КонецЕсли;
	
КонецПроцедуры	

// Возвращаемое значение:
// 	Структура:
// 		* ИмяСобытия - Строка 
// 		* Параметр - Произвольный
// 		* Источник - Произвольный
&НаКлиенте
Функция НоваяСтруктураЗачтенаОплатаСервер()
	
	Результат = Новый Структура();
	Результат.Вставить("ИмяСобытия");
	Результат.Вставить("Параметр");
	Результат.Вставить("Источник");
	 
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ОтразитьИзмененияПравилОплаты(ИзмененныеРеквизиты)
	
	ВзаиморасчетыСервер.ЗагрузитьЭтапыОплатыИзВременногоХранилища(ЭтаФорма);
	
	Для каждого ЭтапОплаты из Объект.ЭтапыГрафикаОплаты Цикл
		Если НЕ ЗначениеЗаполнено(ЭтапОплаты.ВариантОплаты) Тогда
			ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыКонтроляОплатыКлиентом.КредитСдвиг;
		КонецЕсли;
	КонецЦикла;
	
	ВзаиморасчетыСервер.ФормаПриИзмененииРеквизитов(ЭтаФорма, ИзмененныеРеквизиты, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказПоНазначению(ТекущиеДанные)
	ЗаказКлиента = Неопределено;
	Если ЗначениеЗаполнено(ТекущиеДанные) Тогда
		ЗаказКлиента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные, "Заказ");
	КонецЕсли;
	Возврат ЗаказКлиента;
КонецФункции

&НаСервере
Процедура ЗачтенаОплатаСервер(ИмяСобытия, Параметр, Источник)
	
	ВзаиморасчетыСервер.ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДействиеПоПересчетуЦены(СтруктураДействий)
	
	Если (ИспользоватьСоглашенияСКлиентами И ЗначениеЗаполнено(Объект.Соглашение)) 
		Или (Не ИспользоватьСоглашенияСКлиентами И ИспользуетсяЦенообразование25) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
