#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Заполняет условия продаж в заказе клиента
//
// Параметры:
//	УсловияПродаж - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж) Экспорт
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияПродаж.ВалютаВзаиморасчетов;
	ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	НаправлениеДеятельности 	   = УсловияПродаж.НаправлениеДеятельности;
	
	ИзмененаОрганизация = ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Организация;
	ИзмененаФормаОплаты = ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) И УсловияПродаж.ФормаОплаты <> ФормаОплаты;
	
	ФормаОплаты = УсловияПродаж.ФормаОплаты;
	
	Если ИзмененаОрганизация Тогда
		Организация = УсловияПродаж.Организация;
	КонецЕсли;
	
	Если ИзмененаОрганизация Или ИзмененаФормаОплаты Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация             = Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация             = Организация;
		СтруктураПараметров.НаправлениеДеятельности = НаправлениеДеятельности;
		СтруктураПараметров.ФормаОплаты             = ФормаОплаты;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.КонтактноеЛицо) 
			И НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			КонтактноеЛицо = УсловияПродаж.КонтактноеЛицо;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
	
	Если УсловияПродаж.ИспользуютсяДоговорыКонтрагентов <> Неопределено И УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда

		Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперация, Валюта);
		
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетКонтрагента, БанковскийСчет);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(УсловияПродаж.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияПродаж.ИспользуютсяДоговорыКонтрагентов Тогда
		ОплатаВВалюте = УсловияПродаж.ОплатаВВалюте;
	Иначе
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в заказе клиента
//
Процедура ЗаполнитьУсловияПродажПоСоглашению() Экспорт
	
	СтандартнаяОбработка = Истина;
	
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	ПараметрыЗаполнения = Документы.ОтчетКомитентуОЗакупках.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Дата", Дата);
	ПараметрыЗаполнения.Вставить("Валюта", Валюта);
	ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
	ПараметрыЗаполнения.Вставить("РассчитыватьНаборы", Истина);
	ПараметрыЗаполнения.Вставить("НалогообложениеНДС", НалогообложениеНДС);
	ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС");
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку", Неопределено);
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	СтруктураПараметров.НаправлениеДеятельности = УсловияПродаж.НаправлениеДеятельности;
	БанковскийСчетКонтрагента            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент, , БанковскийСчетКонтрагента);
	
КонецПроцедуры

// Инициализирует параметры заполнения видов запасов дополнительных свойств документа, используемых при записи документа
// в режиме 'Проведения' или 'Отмены проведения'.
//
// Параметры:
//	ДокументОбъект - ДокументОбъект.ОтчетКомитентуОЗакупках - документ, для которого выполняется инициализация параметров.
//	РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//
Процедура ИнициализироватьПараметрыЗаполненияВидовЗапасовДляПроведения(ДокументОбъект, РежимЗаписи = Неопределено) Экспорт
	
	ПараметрыЗаполнения = ЗапасыСервер.ПараметрыЗаполненияВидовЗапасов();
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.Сторно") Тогда
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			ПараметрыЗаполнения.ИгнорироватьПрослеживаемыеРаботыЗакупкиПодПринципала = Истина;
		КонецЕсли;
	Иначе
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ПараметрыЗаполнения.ИгнорироватьПрослеживаемыеРаботыЗакупкиПодПринципала = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаполненияВидовЗапасов", ПараметрыЗаполнения);
	ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьКонтрольТоваровКОформлениюОтчетовКомитентуОЗакупках", Истина);
	
КонецПроцедуры

// Заполняет реквизиты, хранящие информацию о видах запасов и аналитиках учета номенклатуры в табличной части 'Товары'
// документа, а также заполняет табличную часть 'ВидыЗапасов'.
//
// Параметры:
//	Отказ - Булево - признак того, что не удалось заполнить данные.
//	ТаблицыДокумента - см. Документы.ОтчетКомитентуОЗакупках.КоллекцияТабличныхЧастейТоваров.
//
Процедура ЗаполнитьВидыЗапасовПриОбмене(Отказ, ТаблицыДокумента = Неопределено) Экспорт
	
	ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
	ЗаполнитьВидыЗапасов(Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	ИдентификаторПлатежа   = Неопределено;
	
	ТекущаяСтрока = Новый Структура("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());

	СтруктураЗаполненияСтавкиНДС = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект);
	СтруктураЗаполненияСтавкиНДС.ЗаполнениеНаОснованииКопирование = Истина;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", СтруктураЗаполненияСтавкиНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	СтавкаНДСВознаграждения = ТекущаяСтрока.СтавкаНДС;

	СуммаНДСВознаграждения = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаВознаграждения,
		УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДСВознаграждения));
	
	Для каждого СтрокаТовара из ЭтотОбъект.Товары Цикл
		СтрокаТовара.СуммаВзаиморасчетов = СтрокаТовара.СуммаСНДС + СтрокаТовара.СуммаВознаграждения;
	КонецЦикла;
		
	РасшифровкаПлатежаСКлиентом.Очистить();
	
	ПараметрыЗаполнения = Документы.ОтчетКомитентуОЗакупках.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураДействий = Новый Структура;
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	СтруктураДействий.Вставить("СкорректироватьСтавкуНДС", СтруктураЗаполненияСтавкиНДС);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Товары, СтруктураДействий, КэшированныеЗначения);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВТЧ(ЭтотОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(КэшированныеЗначения.ОбработанныеСтроки, СтруктураДействий, Неопределено);
	
	КомиссионнаяТорговляСервер.ЗаполнитьСтавкуНДСКомиссионногоВознаграждения(ЭтотОбъект);
	
	ВзаиморасчетыСервер.ПриКопировании(ЭтотОбъект);
	
	ОтчетКомитентуОЗакупкахЛокализация.ПриКопировании(ЭтотОбъект, ОбъектКопирования);
	
	Автор = Пользователи.ТекущийПользователь();
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
		"Документ.ОтчетКомитентуОЗакупках.МодульОбъекта.ОбработкаЗаполнения");

	Автор = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
	   И ДанныеЗаполнения.Свойство("ЗаполнятьПоДаннымКОформлению") Тогда
	   
		Партнер = ДанныеЗаполнения.РеквизитыШапки.Партнер;
		Контрагент = ДанныеЗаполнения.РеквизитыШапки.Контрагент;
		Соглашение = ДанныеЗаполнения.РеквизитыШапки.Соглашение;
		Договор = ДанныеЗаполнения.РеквизитыШапки.Договор;
		НалогообложениеНДС = ДанныеЗаполнения.РеквизитыШапки.НалогообложениеНДС;
		ЦенаВключаетНДС = ДанныеЗаполнения.РеквизитыШапки.ЦенаВключаетНДС;
		ДокументПриобретения = ДанныеЗаполнения.РеквизитыШапки.ДокументПриобретения;
		Организация = ДанныеЗаполнения.РеквизитыШапки.Организация;
		
		Если ЗначениеЗаполнено(Соглашение) Тогда
			ЗаполнитьУсловияПродажПоСоглашению();
			Организация = ДанныеЗаполнения.РеквизитыШапки.Организация;
			Договор = ДанныеЗаполнения.РеквизитыШапки.Договор;
			Контрагент = ДанныеЗаполнения.РеквизитыШапки.Контрагент;
		Иначе
			Валюта = ДанныеЗаполнения.РеквизитыШапки.Валюта;
			Организация = ДанныеЗаполнения.РеквизитыШапки.Организация;
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Договор) Тогда
				
				ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
				ДопПараметры.ВалютаВзаиморасчетов = Валюта;
				Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(
					ЭтотОбъект,
					Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала,
					ДопПараметры);
					
			КонецЕсли;
			ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет);
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоходовПоНаправлениямДеятельности") Тогда
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
		КонецЕсли;
		
		ПартнерыИКонтрагенты.ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Партнер, КонтактноеЛицо);
		
		ПараметрыЗаполнения = Документы.ОтчетКомитентуОЗакупках.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
		
		Документы.ОтчетКомитентуОЗакупках.ЗаполнитьПоТоварамУслугамКОформлениюОтчетовКомитентуОЗакупках(
			ЭтотОбъект, 
			ДанныеЗаполнения.МассивНазначений, ДанныеЗаполнения.МассивДокументовПриобретения);
		
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияКассыПриФОИспользоватьНесколькоКассЛожь", Ложь);
	ДополнительныеСвойства.Вставить("НеобходимостьЗаполненияСчетаПриФОИспользоватьНесколькоСчетовЛожь", Ложь);
	
	ОтветственныеЛицаСервер.ЗаполнитьМенеджера(ЭтотОбъект, Ложь);
	ЗаполнениеОбъектовПоСтатистике.ЗаполнитьРеквизитыОбъекта(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Не ЗначениеЗаполнено(Менеджер) Тогда
		Менеджер = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ТекущаяСтрока = Новый Структура("СтавкаНДС", Справочники.СтавкиНДС.ПустаяСсылка());

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", ОбработкаТабличнойЧастиКлиентСервер.ПараметрыЗаполненияСтавкиНДС(ЭтотОбъект));
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
	СтавкаНДСВознаграждения = ТекущаяСтрока.СтавкаНДС;

	КомиссионнаяТорговляСервер.РассчитатьСуммуВознаграждения(ЭтотОбъект, "СуммаСНДС", Истина);
	
	Для каждого СтрокаТовара из ЭтотОбъект.Товары Цикл
		СтрокаТовара.СуммаВзаиморасчетов = СтрокаТовара.СуммаСНДС + СтрокаТовара.СуммаВознаграждения;
	КонецЦикла;
	
	ВариантОбособления = Константы.ВариантОбособленияТоваровВПродажах.Получить();
	
	Если Не ЗначениеЗаполнено(Соглашение)
		И ВариантОбособления = Перечисления.ВариантыОбособленияТоваровВПродажах.Договор Тогда
		
		СтруктураДополнительногоОтбора = Новый Структура;
		МассивОпераций = Новый Массив();
		МассивОпераций.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоставкаПодПринципала"));
		СтруктураДополнительногоОтбора.Вставить("ХозяйственныеОперации", МассивОпераций);
		
		УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Партнер,
			СтруктураДополнительногоОтбора);
		Если ЗначениеЗаполнено(УсловияПродаж) Тогда
			Соглашение = УсловияПродаж.Соглашение;
		КонецЕсли;
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
	ВзаиморасчетыСервер.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения);
	
	Если НЕ ЗначениеЗаполнено(ГруппаФинансовогоУчета) И ЗначениеЗаполнено(Договор)
		И (ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И НЕ ЗначениеЗаполнено(ЗаказКлиента)
		ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным) Тогда
		
		ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор,"ГруппаФинансовогоУчета");
		
	КонецЕсли;
	
	ОтчетКомитентуЛокализация.ОбработкаЗаполнения(ЭтотОбъект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Замер = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(
	"Документ.ОтчетКомитентуОЗакупках.МодульОбъекта.ОбработкаПроверкиЗаполнения");
	
	Документы.ОтчетКомитентуОЗакупках.ЗаполнитьИменаРеквизитовПоСпособуРасчетаВознаграждения(
		СпособРасчетаВознаграждения, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации);
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Соглашение) Или Не ОбщегоНазначенияУТ.ЗначениеРеквизитаОбъектаТипаБулево(Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Договор");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		МассивВсехРеквизитов,
		МассивРеквизитовОперации,
		МассивНепроверяемыхРеквизитов);
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	
	МассивНепроверяемыхРеквизитов.Добавить("Товары.НомерГТД");
	
	Если ПолучитьФункциональнуюОпцию("ЗапретитьПоступлениеТоваровБезНомеровГТД") Тогда
		
		ЗапасыСервер.ПроверитьЗаполнениеНомеровГТД(ЭтотОбъект, Отказ);
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(
		ПроверяемыеРеквизиты,
		МассивНепроверяемыхРеквизитов);
		
	МетаданныеОбъекта = ЭтотОбъект.Метаданные();
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ЭтотОбъект);
	ПредставлениеТЧ = МетаданныеОбъекта.ТабличныеЧасти.Товары.Синоним;
	ПредставлениеРеквизитаКоличествоУпаковок = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.КоличествоУпаковок.Синоним;
	ШаблонОшибкаКоличества = НСтр("ru = 'Не заполнена колонка ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
	ШаблонОшибкаКоличества = СтрЗаменить(ШаблонОшибкаКоличества, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	
	ПредставлениеРеквизитаНазначение = МетаданныеОбъекта.ТабличныеЧасти.Товары.Реквизиты.Назначение.Синоним;
	ШаблонОшибкаЗаполненияНазначения = НСтр("ru = 'Неверно указано назначение в колонке ""%ПредставлениеКолонки%"" в строке %НомерСтроки% списка ""%ПредставлениеТЧ%"".
	|	|Необходимо выбрать назначение с типом ""Поставка под принципала""'");
	ШаблонОшибкаЗаполненияНазначения = СтрЗаменить(ШаблонОшибкаЗаполненияНазначения, "%ПредставлениеТЧ%", ПредставлениеТЧ);
	
	Для каждого СтрокаТаб Из ЭтотОбъект.Товары Цикл
		
		Если СтрокаТаб.КоличествоУпаковок = 0 И НЕ ТипЗнч(СтрокаТаб.ДокументПриобретения) = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
			ТекстСообщения = СтрЗаменить(ШаблонОшибкаКоличества, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаКоличествоУпаковок);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТаб.НомерСтроки, "КоличествоУпаковок");
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТаб.Назначение) Тогда
			ТипНазначения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаб.Назначение, "ТипНазначения");
			Если ТипНазначения <> Перечисления.ТипыНазначений.ПоставкаПодПринципала Тогда
				ТекстСообщения = СтрЗаменить(ШаблонОшибкаЗаполненияНазначения, "%НомерСтроки%", Строка(СтрокаТаб.НомерСтроки));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеКолонки%", ПредставлениеРеквизитаНазначение);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТаб.НомерСтроки, "Назначение");
				
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, КлючДанных, Поле, "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	Если СпособРасчетаВознаграждения <> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда
		Если Не ЗначениеЗаполнено(ЭтотОбъект.Услуга) Тогда
			ТекстОшибки = НСтр("ru='Необходимо указать услугу для отражения суммы вознаграждения'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, "Услуга", , Отказ);
		Иначе
			КомиссионнаяТорговляСервер.ПроверитьУслугуПоКомиссионномуВознаграждению(ЭтотОбъект, Отказ);
		КонецЕсли;
	КонецЕсли;

	ОтчетКомитентуОЗакупкахЛокализация.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

	ПроверитьСоответствиеДоговораТовара(Отказ);
	
	ПроверкиСоответствияРеквизитовВДокументахПриобретения(Отказ);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(Замер, 1);
	
	Отказ = Документы.ОтчетКомитентуОЗакупках.ПроверитьНаличиеПриобретенияИИсправительнойКорректировкиВОдномОтчете(ЭтотОбъект) Или Отказ;
	
КонецПроцедуры

Процедура ПроверкиСоответствияРеквизитовВДокументахПриобретения(Отказ)
	
	ИмяТЧ = "Товары";
	ПредставлениеТЧ = "Товары";
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.ДокументПриобретения) Тогда
			
			РеквизитыДокументаПриобретения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТовары.ДокументПриобретения, "ЦенаВключаетНДС, НаправлениеДеятельности, Организация, Валюта");

			
			Для каждого РеквизитДокумента Из РеквизитыДокументаПриобретения Цикл
				Если ЭтотОбъект[РеквизитДокумента.Ключ] <> РеквизитДокумента.Значение Тогда
					
					Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не соответствует значение реквизита ""%1"" данного отчета и документа "" %2 "", указанного в строке %3.'"),
					Метаданные.Документы.ОтчетКомитентуОЗакупках.Реквизиты[РеквизитДокумента.Ключ],
					СтрокаТовары.ДокументПриобретения,
					Товары.Индекс(СтрокаТовары)+1,
					ПредставлениеТЧ);
					
					ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					ИмяТЧ + "[" + Товары.Индекс(СтрокаТовары) + "].ДокументПриобретения",
					,
					Отказ);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТовара из Товары Цикл
		СтрокаТовара.СуммаВзаиморасчетов = СтрокаТовара.СуммаСНДС + СтрокаТовара.СуммаВознаграждения;
	КонецЦикла;
	
	ДополнительныеСвойства.Вставить("ОтключитьКонтрольТоваровКОформлениюОтчетовКомитентуОЗакупках", Истина);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ИсправлениеДокументов.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);

	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	НоменклатураСервер.ОкруглитьКоличествоШтучныхТоваров(ЭтотОбъект, РежимЗаписи);
	
	РасчетСуммаДокумента = Товары.Итог("СуммаСНДС");
	Если СуммаДокумента <> РасчетСуммаДокумента Тогда
		СуммаДокумента = РасчетСуммаДокумента;
	КонецЕсли;
	
	РасчетСуммаВознаграждения = Товары.Итог("СуммаВознаграждения");
	Если СуммаВознаграждения <> РасчетСуммаВознаграждения Тогда
		СуммаВознаграждения = РасчетСуммаВознаграждения;
		
	КонецЕсли;
	
	УчетПрослеживаемыхТоваровЛокализация.ОчиститьНомераГТДУПрослеживаемыхРабот(ЭтотОбъект);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров();
		ЗаполнитьВидыЗапасов(Отказ);
		
		//++ Локализация
		Если ЗначениеЗаполнено(ДокументПриобретения) Тогда
			ОтчетКомитентуОЗакупкахЛокализация.ЗаполнитьСчетаФактурыПолученные(ЭтотОбъект);
		КонецЕсли;
		ПроверитьЗаполнениеСчетовФактурПолученных(Отказ);
		//-- Локализация
		
		ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, 
			Метаданные.Документы.ОтчетКомитентуОЗакупках.ТабличныеЧасти.Товары.Имя);
		
		Уникальность = Новый Соответствие;
		Для Каждого СтрокаТаблицы Из Товары Цикл
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.ИдентификаторСтрокиВознаграждения)
				Или Неопределено <> Уникальность.Получить(СтрокаТаблицы.ИдентификаторСтрокиВознаграждения) Тогда
				// Идентификатор в строке не заполнен ИЛИ идентификатор встречался ранее
				СтрокаТаблицы.ИдентификаторСтрокиВознаграждения = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			Уникальность.Вставить(СтрокаТаблицы.ИдентификаторСтрокиВознаграждения, СтрокаТаблицы.ИдентификаторСтрокиВознаграждения);
		КонецЦикла;
		
	КонецЕсли;
	
	ПараметрыРегистрации = Документы.ОтчетКомитентуОЗакупках.ПараметрыРегистрацииСчетовФактурВыданных(ЭтотОбъект);
	УчетНДСУП.АктуализироватьСчетаФактурыВыданныеПередЗаписью(ПараметрыРегистрации, РежимЗаписи, ПометкаУдаления, Проведен);
	
	// Очистим реквизиты документа не используемые для способа расчета вознаграждения.
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	Документы.ОтчетКомитентуОЗакупках.ЗаполнитьИменаРеквизитовПоСпособуРасчетаВознаграждения(
		СпособРасчетаВознаграждения,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
	ДенежныеСредстваСервер.ОчиститьНеиспользуемыеРеквизиты(
		ЭтотОбъект,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации);
		
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(Номер) Тогда
		УстановитьНовыйНомер();
	КонецЕсли;

	ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(ЭтотОбъект);

	ЗаполнитьЗаказыКлиентовИзНазначений();
	
	ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	ОтчетКомитентуОЗакупкахЛокализация.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Не ЗначениеЗаполнено(Автор) И ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	МассивОтчетов = Новый Массив();
	МассивОтчетов.Добавить(Ссылка);
	//++ Локализация
	РегистрыСведений.СчетаФактурыПоставщиковКПеревыставлениюКомитентам.ОбновитьСостояние(МассивОтчетов);
	//-- Локализация
	
	ОтчетКомитентуОЗакупкахЛокализация.ОбработкаПроведения(ЭтотОбъект, Отказ, РежимПроведения);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
	
	ОтчетКомитентуОЗакупкахЛокализация.ОбработкаУдаленияПроведения(ЭтотОбъект, Отказ);
	
	МассивОтчетов = Новый Массив();
	МассивОтчетов.Добавить(Ссылка);
	//++ Локализация
	РегистрыСведений.СчетаФактурыПоставщиковКПеревыставлениюКомитентам.ОбновитьСостояние(МассивОтчетов, Ссылка);
	//-- Локализация
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
	Если Не Отказ Тогда
		
	КонецЕсли;
	
	ОтчетКомитентуОЗакупкахЛокализация.ПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Организация		= ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Организация);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    			= Организация;
	СтруктураПараметров.ФормаОплаты				= ФормаОплаты;
	СтруктураПараметров.БанковскийСчет 			= БанковскийСчет;
	БанковскийСчет	= ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
	
	СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
	СтруктураПараметров.Организация    	= Организация;
	СтруктураПараметров.ФормаОплаты		= ФормаОплаты;
	СтруктураПараметров.Касса 			= Касса;
	Касса			= ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	
	Валюта			= ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	
	ПараметрыЗаполнения = Документы.ОтчетКомитентуОЗакупках.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(НалогообложениеНДС, ПараметрыЗаполнения);
	
КонецПроцедуры

#КонецОбласти

#Область ВидыЗапасов

Процедура ЗаполнитьВидыЗапасов(Отказ)
	
	МенеджерВременныхТаблиц = ВременныеТаблицыДанныхДокумента();
	ПерезаполнитьВидыЗапасов = ЗапасыСервер.ПроверитьНеобходимостьПерезаполненияВидовЗапасовДокумента(ЭтотОбъект);
	
	Если Не Проведен
		ИЛИ ПерезаполнитьВидыЗапасов
		ИЛИ ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц) Тогда
		
		ЗапасыСервер.ЗаполнитьВидыЗапасовПоУмолчанию(МенеджерВременныхТаблиц, Товары);
		
	КонецЕсли;

КонецПроцедуры

Функция ВременныеТаблицыДанныхДокумента()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	&Дата			КАК Дата,
	|	&Организация	КАК Организация,
	|	&Партнер		КАК Партнер,
	|	&Контрагент		КАК Контрагент,
	|	&Соглашение		КАК Соглашение,
	|	&Договор		КАК Договор,
	|	&Валюта			КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)	КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетКомитенту)	КАК ХозяйственнаяОперация,
	|	ЛОЖЬ			КАК ЕстьСделкиВТабличнойЧасти,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.КомиссионныйТовар)		КАК ТипЗапасов
	|ПОМЕСТИТЬ ТаблицаДанныхДокумента
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки							КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура							КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика						КАК Характеристика,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры			КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДатаСчетаФактуры						КАК ДатаСчетаФактуры,
	|	ТаблицаТоваров.СчетФактураПолученный				КАК СчетФактураПолученный,
	|	ТаблицаТоваров.Поставщик							КАК Поставщик,
	|	ТаблицаТоваров.Количество							КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТоваров.СтавкаНДС КАК Справочник.СтавкиНДС) КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаСНДС							КАК СуммаСНДС,
	|	ТаблицаТоваров.СуммаВознаграждения					КАК СуммаВознаграждения,
	|	ТаблицаТоваров.ВидЗапасов							КАК ВидЗапасов,
	|	0													КАК СуммаНДСВознаграждения,
	|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)			КАК Склад,
	|	ЗНАЧЕНИЕ(Справочник.СделкиСКлиентами.ПустаяСсылка)	КАК Сделка,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)		КАК Назначение,
	|	ИСТИНА												КАК ПодбиратьВидыЗапасов
	|ПОМЕСТИТЬ ВтТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки					КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура					КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика				КАК Характеристика,
	|	ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) КАК Серия,
	|	0 КАК СтатусУказанияСерий,
	|	ТаблицаТоваров.АналитикаУчетаНоменклатуры	КАК АналитикаУчетаНоменклатуры,
	|	ТаблицаТоваров.ДатаСчетаФактуры				КАК ДатаСчетаФактуры,
	|	ТаблицаТоваров.СчетФактураПолученный		КАК СчетФактураПолученный,
	|	ТаблицаТоваров.Поставщик					КАК Поставщик,
	|	ТаблицаТоваров.Количество					КАК Количество,
	|	ТаблицаТоваров.СтавкаНДС					КАК СтавкаНДС,
	|	ТаблицаТоваров.СуммаВознаграждения			КАК СуммаВознаграждения,
	|	ТаблицаТоваров.СуммаНДСВознаграждения		КАК СуммаНДСВознаграждения,
	|	ТаблицаТоваров.ВидЗапасов					КАК ВидЗапасов,
	|	ТаблицаТоваров.Склад						КАК Склад,
	|	ТаблицаТоваров.Сделка						КАК Сделка,
	|	ТаблицаТоваров.Назначение					КАК Назначение,
	|	ТаблицаТоваров.ПодбиратьВидыЗапасов			КАК ПодбиратьВидыЗапасов,
	|	ТаблицаТоваров.СуммаСНДС					КАК СуммаСНДС,
	|	ЗНАЧЕНИЕ(Справочник.НомераГТД.ПустаяСсылка)	КАК НомерГТД
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	ВтТаблицаТоваров КАК ТаблицаТоваров
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|	ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки	КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура	КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ						КАК ТекущийВидЗапасов,
	|	ЛОЖЬ						КАК ЭтоВозвратнаяТара,
	|	&Организация				КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОтчетПринципалуОЗакупках)КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.ТоварНаХраненииСПравомПродажи)КАК ТипЗапасов,
	|	&Партнер					КАК ВладелецТовара,
	|	&Соглашение					КАК Соглашение,
	|	&Контрагент					КАК Контрагент,
	|	&Договор					КАК Договор,
	|	&Валюта						КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции
	|ПОМЕСТИТЬ ИсходнаяТаблицаТоваров
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	СправочникНоменклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА &Проведен
	|			ТОГДА ТаблицаТоваров.ВидЗапасов
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|	КОНЕЦ КАК ТекущийВидЗапасов,
	|	ЛОЖЬ КАК ЭтоВозвратнаяТара,
	|	&Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Работа) КАК ТипЗапасов,
	|	НЕОПРЕДЕЛЕНО КАК ВладелецТовара,
	|	НЕОПРЕДЕЛЕНО КАК Соглашение,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	НЕОПРЕДЕЛЕНО КАК Договор,
	|	&Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	&НалогообложениеОрганизации КАК НалогообложениеОрганизации,
	|	ЗНАЧЕНИЕ(Справочник.ГруппыАналитическогоУчетаНоменклатуры.ПустаяСсылка) КАК ГруппаПродукции
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	&ИспользоватьУчетПрослеживаемыхИмпортныхТоваров
	|	И СправочникНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|	И СправочникНоменклатура.ПрослеживаемыйТовар
	|");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Проведен",					Проведен);
	Запрос.УстановитьПараметр("Ссылка",						Ссылка);
	Запрос.УстановитьПараметр("Дата",						Дата);
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("Партнер",					Партнер);
	Запрос.УстановитьПараметр("Контрагент",					Контрагент);
	Запрос.УстановитьПараметр("Соглашение",					Соглашение);
	Запрос.УстановитьПараметр("Договор",					Договор);
	Запрос.УстановитьПараметр("Валюта",						Валюта);
	Запрос.УстановитьПараметр("ВидыЗапасовУказаныВручную",	ВидыЗапасовУказаныВручную);
	Запрос.УстановитьПараметр("ТаблицаТоваров",				Товары);
	Запрос.УстановитьПараметр("НалогообложениеОрганизации",
		УчетНДСУП.ПараметрыУчетаПоОрганизации(Организация, Дата).ОсновноеНалогообложениеНДСПродажи);
	
	ЗапасыСервер.ДополнитьВременныеТаблицыОбязательнымиКолонками(Запрос);
	
	УчетПрослеживаемыхТоваровЛокализация.УстановитьПараметрыИспользованияУчетаПрослеживаемыхТоваров(Запрос);
	
	Запрос.Выполнить();
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

// Заполняет аналитики учета номенклатуры в табличных частях документа, хранящих информацию о товарах.
// Если параметр не передан, тогда будет выполнено заполнение данных в табличных частях документа.
//
// Параметры:
//	ТаблицыДокумента - см. Документы.ОтчетКомитентуОЗакупках.КоллекцияТабличныхЧастейТоваров.
//
Процедура ЗаполнитьАналитикиУчетаНоменклатурыВТабличныхЧастяхТоваров(ТаблицыДокумента = Неопределено)
	
	Если ТаблицыДокумента = Неопределено Тогда
		ТаблицыДокумента = Документы.ОтчетКомитентуОЗакупках.КоллекцияТабличныхЧастейТоваров();
		
		ЗаполнитьЗначенияСвойств(ТаблицыДокумента, ЭтотОбъект);
	КонецЕсли;
	
	ТаблицаТовары = ТаблицыДокумента.Товары;
	
	МестаУчета = РегистрыСведений.АналитикаУчетаНоменклатуры.МестаУчета(
					Перечисления.ХозяйственныеОперации.ПоставкаПодПринципала,
					Неопределено,
					Подразделение,
					Контрагент,
					Договор);
	ИменаПолей = РегистрыСведений.АналитикаУчетаНоменклатуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.СтатусУказанияСерий = "";
	ИменаПолей.Назначение = "Назначение"; //"Новый Структура("ТекстПоля", "ВЫРАЗИТЬ(ВЫРАЗИТЬ(Коллекция.АналитикаУчетаНоменклатуры КАК Справочник.КлючиАналитикиУчетаНоменклатуры).Назначение КАК Справочник.Назначения)");
	
	// Аналитика почему-то не подбирается и не создается (не хватает значений ключей для поиска)
	РегистрыСведений.АналитикаУчетаНоменклатуры.ЗаполнитьВКоллекции(ТаблицаТовары, МестаУчета, ИменаПолей);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

//++ Локализация
Процедура ПроверитьЗаполнениеСчетовФактурПолученных(Отказ)
	
	ИмяТЧ = "Товары";
	ПредставлениеТЧ = "Товары";
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если НЕ (ЗначениеЗаполнено(СтрокаТовары.СчетФактураПолученный) ИЛИ СтрокаТовары.СуммаНДС = 0) Тогда
			
			Если ЗначениеЗаполнено(ДокументПриобретения) Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для документа приобретения %1 не введен счет-фактура полученный.'"),
					ДокументПриобретения);
					
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					"ДокументПриобретения",
					,
					Отказ);
				Прервать;
				
			Иначе
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнена колонка ""Счет-фактура полученный"" в строке %1 списка ""%2"".'"),
					Товары.Индекс(СтрокаТовары)+1,
					ПредставлениеТЧ);
					
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					ИмяТЧ + "[" + Товары.Индекс(СтрокаТовары) + "].СчетФактураПолученный",
					,
					Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.СчетФактураПолученный) Тогда
			
			ПризнакПроведенияСФ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СчетФактураПолученный, "Проведен");
			Если Не ПризнакПроведенияСФ Тогда
				
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Указан непроведенный ""Счет-фактура полученный"" в строке %1 списка ""%2"".'"),
					Товары.Индекс(СтрокаТовары)+1,
					ПредставлениеТЧ);
				
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					ИмяТЧ + "[" + Товары.Индекс(СтрокаТовары) + "].СчетФактураПолученный",
					,
					Отказ);
				
			КонецЕсли;
	
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры
//-- Локализация

Процедура ЗаполнитьЗаказыКлиентовИзНазначений()
	
	Назначения = Товары.Выгрузить(, "Назначение");
	Назначения.Свернуть("Назначение", "");
	
	СтрокаСПустымНазначением = Назначения.Найти(Справочники.Назначения.ПустаяСсылка());
	Если Не СтрокаСПустымНазначением = Неопределено Тогда
		Назначения.Удалить(СтрокаСПустымНазначением);
	КонецЕсли;
	
	НазначенияИЗаказыКлиентов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(Назначения.ВыгрузитьКолонку("Назначение"), "Заказ");
	
	Для каждого СтрокаТовар Из Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТовар.Назначение) Тогда
			СтрокаТовар.ЗаказКлиента = НазначенияИЗаказыКлиентов[СтрокаТовар.Назначение];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПроверитьСоответствиеДоговораТовара(Отказ)
	
	ИмяТЧ = "Товары";
	ПредставлениеТЧ = "Товары";
	
	Для Каждого СтрокаТовары Из Товары Цикл
		
		Если ЗначениеЗаполнено(СтрокаТовары.Назначение) Тогда
			ДоговорТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Назначение, "Договор");
			Если Договор <> ДоговорТовара Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Договор назначения в строке %1 списка ""%2"" не совпадает с договором отчета.'"),
					Товары.Индекс(СтрокаТовары) + 1,
					ПредставлениеТЧ);
					
				ОбщегоНазначения.СообщитьПользователю(
					Текст,
					ЭтотОбъект,
					ИмяТЧ + "[" + Товары.Индекс(СтрокаТовары) + "].Назначение",
					,
					Отказ);
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц)
	
	ИменаРеквизитов = "Организация, Дата, Партнер, Соглашение, Валюта";
	
	Возврат ЗапасыСервер.ПроверитьИзменениеРеквизитовДокумента(МенеджерВременныхТаблиц, Ссылка, ИменаРеквизитов);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
